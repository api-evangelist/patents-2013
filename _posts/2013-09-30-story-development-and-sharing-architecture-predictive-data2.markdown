---

title: Story development and sharing architecture: predictive data
abstract: A community of authors, readers and contributors interact with each other through a communication framework. The authors share creative works, such as fictional stories, for consumption by the readers and for commenting by the contributors. The readers may see successive drafts of the work as an author completes and revises the work. The contributors may provide comments or other contributions to assist the author. For example, the contributors may make suggestions about how to change the work or provide supplemental content, such as cover artwork, to the author. The author may recognize publicly contributors who provide helpful comments. The likelihood of an author completing a final draft of a work may be determined based on the author's activities regarding the work. The likelihood of a completed work being popular with readers may also be determined based on user interaction with a draft of the work.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09553902&OS=09553902&RS=09553902
owner: Amazon Technologies, Inc.
number: 09553902
owner_city: Seattle
owner_country: US
publication_date: 20130930
---
Authors can face a long lonely process of writing. Authors may seek assistance from friends family and colleagues. However authors that are not associated with the professional publishing industry may have difficulty finding reliable sources for support and constructive feedback. Good ideas may go unpublished and good books unwritten not because an author lacks the quality of ideas but rather because the author may face hurdles in the process of writing that he or she cannot overcome alone.

This disclosure describes a community in which authors can find support and help during the writing process readers can access new works and see the progress of a work as it is written and contributors may provide feedback to authors in a way that can have a substantive effect on the development of a work. As used herein work includes any work of authorship such as but not limited to a novel a short story a poem a news article a biography an instruction manual a recipe software code sheet music or the like. Works of authorship include written works that are works created by using characters written typed etc. in a language that is used for human conversation e.g. excluding video and audio creations as well as computer code and musical notation .

Users in this community may fill one or more of the three roles mentioned above author reader and contributor. Authors create works. Authors may write a full draft of a work before sharing it with the community or share the work as it is being written for example chapter by chapter. Readers participate in the community primarily by reading works. The readers interact with most works by simply reading the text of the work. However read and reading also includes activities such as playing an instrument according to instructions provided on sheet music or compiling software code. The contributors are generally a subset of readers who interact with the authors and each other by making contributions to the community in the form of comments feedback or by contributing content support of a work. Users are not limited to particular roles. An author may also take the role of reader by passively consuming another s work and also take the role of a contributor by providing editorial suggestions to another author. The community framework and ability for users to easily shift roles may encourage greater creative activity by turning readers into contributors and contributors into authors.

Features of this community which are described in greater detail below include sharing works submitted by authors with other users receiving feedback or content contributions notifying members of the community about activity of others and receiving rapid feedback on pitches for proposed works. In order to encourage contributors to expend the effort necessary to make contributions the writers may provide recognition to those contributors who make particularly valuable contributions. Some implementations may even show which comments an author is actively considering while writing or revising a work. Recognition that the contributors receive from the authors may be quantized and shown to others in the community so that contributors with particular skill sets or a history of providing high quality contributions may be readily identified.

Readers are supported by receiving indications of how likely an author is to complete a draft work. Many writing projects are abandoned but in this community interaction of an author with his or her work is tracked as well as that author s history of completing other works. For a given work a likelihood that it will in fact be completed may be shown to readers so they are able to better select which works they wish to spend time reading. Authors are also provided meaningful and data driven encouragement through showing authors a success metric for their works which indicates the likelihood that a given work will be popular with a group of readers. This success metric may be derived from actions of the readers and contributors in the community. By exposing this metric to the author this community can help an author identify works that have the potential for commercial success.

Architecture supports a community that interacts with authors who have chosen to share works that they have created or are in a process of creating. The authors may post upload or otherwise share their works with the other members of the community such as the readers and the contributors . The authors may also post upload or otherwise share status messages informing readers and contributors about the status of a work or requesting assistance with a work. In some implementations only those readers and contributors that previously choose to receive status messages from the author will receive the status messages .

The readers role in the community may be to passively consume the works . Although the readers may not explicitly provide any type of feedback the architecture may after receiving appropriate permissions from the individual readers track reader activity including which works are being read how long the readers spend with the given work and other aspects of reader interaction with the works . The contributors may go beyond merely reading the works and provide comments about the works . Any reader may become a contributor simply by choosing to take a more active role in the community and submitting a comment . The comments may be any type of input that a contributor chooses to make with respect to a work . For example the comment may be a passage of text that the contributor generates to critique criticize support suggest encourage or otherwise communicate with the author of the work . Contributors may also provide content contributions such as an image e.g. proposed cover art for a novel music a recording of a reading of the work documents located or produced by the contributor to assist the author with the work or the like. The comments and content contributions may be provided by the contributors to the community by uploading a file or other electronic document. Some comments may be directed primarily towards readers and other contributors rather than author . One example of this type of comment is a review of a work . For the sake of differentiation these types of comments may be referred to as reviews. In this architecture the comments are associated with a particular work . The comments may be appended to the work as metadata linked to the work through the use of a common identifier etc.

The architecture and community may be maintained by one or more computing devices s . The computing devices may be implemented as server computers a cloud based system of distributed computing functionalities a single desktop computer or the like. Data provided to the community such as works and comments may be stored on the computing devices or in storage accessible by the computing devices . Generation of the appropriate user interfaces computations calculations responses to search queries and the like may be implemented by functionalities maintained on the computing devices . The authors readers and contributors may access the computing devices through a network . The network represents any type of communications network such as the Internet a wide area network WAN a local area network LAN a telephone network a cable network a mesh network a peer to peer network and the like.

A user interface module makes human usable information available to the users of the computing devices such as the authors readers and contributors . The user interface module may generate user interfaces for transmission to receiving devices such as thin clients. The user interface module may also generate instructions such as hyper text markup language HTML or other markup language code that are sent to client devices for rendering on user interfaces. Thus the user interface module is to be understood as including functionalities to both directly create user interfaces itself as well as to generate and send instructions that cause another device to create a user interface. The user interface module may also receive data instructions commands indications etc. from authors readers and contributors .

The user interface module may make the work available to the readers and other users in the community. The user interface module may also receive an indication that an author performed an activity related to one of his or her works . In some instances some of the functionality of the user interface module may be implemented via browsers presenting markup language content e.g. webpages or on specialized applications that also present markup language content and or interface directly with the computing device s via for example an application programming interface API . Types of activities may include the author posting a pitch for a new work posting a portion of a work e.g. a single chapter of a story posting an entire work e.g. a whole poem indicating that a work which was previously in draft form is now complete responding to a comment provided by a contributor or other types of activities. When a contributor posts a comment about the work the user interface module may present the comment in association with the work in user interfaces such as an author facing user interface directed towards the author whose work was commented upon and a reader facing user interface directed to other users that may be interested in seeing the comment while reading the work .

An activity service may recognize events and activities received by the user interface module and create records in a storage location when an event or an activity occurs. For example the activity service may recognize a call from a computing device of a user and create a record of an event that occurs as a result of the call. The call may be generated by user interaction with the user interface module. Various activities may be performed in response to information commands instructions etc. received from an author a reader a contributor or other user.

An event is an action within this architecture that represents an entity affecting a target entity in some way. The way in which the target entity is affected determines the type of event. Thus each event may contain identification of resource entity a type of the event i.e. what happened and a target entity on which the recipient of the event. For example the activity service may create an event based on comment received about a work . In some implementations events may not be changed once created though they can be deleted. An activity is a collection of events. Grouping events together as activities allows for the representation of actions that are composed of multiple component parts. For example an author may add a new chapter to a work and modify an earlier chapter of the same work . These are two separate events but the two events may be recorded as a single activity in the record of change history for the work .

Each time an activity occurs the activities service generates an activity missive that may be published through a simple notification service SNS . Publication of an activity allows other services and modules to act upon that change. The activity missive indicates whether an activity was created or an event was deleted and also indicates one or more of event types that are included in the activity. When an author performs an activity related to one of his or her works that activity may be consumed and a record created in an author activity log . When a reader or contributor performs an activity those activities may be recorded in a reader activity log . The activity service may mediate communication between the user interface module and one or both of the author activity log and reader activity log . Thus rather than immediately acting on activities as detected by the user interface module the activities may be first recognized as events then the events may be stored as log entries in either the author activity log or the reader activity log . Although discussed here as two separate logs the author activity log and the reader activity log may be unified into a single storage location. A notification listener that may be optionally located within the activity service may review each activity missive to determine which ones contain relevant events. Each type of event may be processed by a different notification listener which will have logic appropriate for the given type of event.

The activity service may also identify those users who previously selected to receive notifications when there is activity associated with that author or with that work . For example when a user chooses to follow an author or a work the user and other users following the same entity may receive a notification whenever there is activity or event related to the followed entity e.g. for user following a book he or she may receive a notification when a new chapter is added to the book . Activities relating to a particular entity e.g. the author may be exposed in activity feed that is shown in association with a profile of the entity or a collection of details about a work . Activity feeds may initially include a listing of all events activities but activity feeds can be filtered in a variety of ways.

A notification service may send notifications of activities and events to the users identified by the activity service . The notifications may identify the author the work and the type of activity. As mentioned above a notification may be sent as activity missive through SNS from the activity service . In some implementations the notifications may contain only these three pieces of information without providing the content of the activity e.g. the contents of a comment . A notification represents an intention to notify a user of an activity or event that has occurred within the architecture. Deletion of notifications may be limited by global retention configuration settings but notifications may be hidden by users. By processing incoming activities through the activity module and storing records in the activity logs and then generating notifications from the records in the logs and the computing devices are able to quickly process and disseminate a large number of notifications.

Users may receive notifications through a feed channel that displays notifications on a portion of the user interface. The users can manually configure which types of events and activities appear as notifications in their respective feed channels. Notifications may also be sent to users via email. In some implementations the emails may be sent on a schedule and notifications may be batched and then sent out when the next email is scheduled to be sent. For example a contributor may receive a notification in response to the author selecting a comment of the contributor and providing positive feedback on that comment .

A comment module can receive comments corresponding to e.g. providing feedback etc. a work from contributors . The comment module may associate the comments with the work . The comment module may also instruct the notification service to send a notification to the author communicating that a comment has been received about his or her work . Records of the comments may be stored in the reader activity log as having an association with the work .

A recognition module assists authors in providing recognition to those contributors who have made meaningful or helpful contributions to a work . Providing recognition to contributors encourages contributors to participate in the community and by tracking and publicly exposing the recognition this can also help other users in the community identify those contributors with relevant skills or expertise. The recognition module may associate a token with an account of a contributor in response to the author flagging selecting or otherwise indicating a particular comment . The author may flag select or indicate the particular comment because that comment was helpful to the author or for any other reason. The token may be represented in user interfaces as a credit point coin kudos etc. The computing devices may store the token as a small string of data associated with an account of the contributor . Contributors may receive one token for each instance that an author chooses to recognize one of their comments .

The token may be provided for a particular type of contribution such as a contribution for providing cover artwork a plot suggestion editing help subject matter expertise or the like. When selecting a comment to recognize or give kudos for the author may also enter the type of contribution or select the type from a list of contribution types. Thus the author may select a check box on a comment to give a token and then select a category of token from a list.

Readers looking at a reader facing user interface presenting a work may see a plurality of comments that are associated with that work arranged in order based on the number of tokens received by the contributors that provided those comments . For example contributors that have received the most tokens may have their comments provided at the top of a list of comments. The recognition module may also determine a score for a contributor based on a number of tokens associated with the account of the contributor . For example a contributor with more than 50 tokens in a particular category may receive the score or label of expert. This type of score or label may be represented as a badge associated with the contributor . The badge may appear in user interfaces near the name of the contributor .

Additionally the user interface module may change the way comments of the contributor are presented in a user interface in response to the number of tokens associated with the account of the contributor accumulating a threshold number. Returning to the previous example if the threshold number is 50 then contributors with more than 50 tokens may have their comments shown in bold or otherwise rendered with greater prominence than other comments. Selective emphasis of comments with greater prominence may occur together with or separate from the ordering comments based on contributor tokens.

The recognition module may also provide recognition to users for activities that they have performed. For example an author may receive recognition for having finished his or her first work . A reader may receive recognition for having finished reading 25 works . Users may be recognized as having an achievement in a category such as authoring works or reading works . The activity service may be a source or even the sole source of information for determining achievements. One type of recognition may be a badge associated with an achievement. There can be multiple achievement levels for activities so a user may receive different types of badges indicating increasing accomplishments e.g. a first badge for reading 25 works and a second badge for reading 50 works . Records of activities that led to an achievement or badge may be tracked and surfaced so that users can see how they or someone else earned the achievement.

A prediction module may predict the likelihood that the author will complete a final draft of the work . This prediction is based on data in the author activity log . Thus data from the author activity log such as the author posting a new portion of the work e.g. posting the next chapter modifying the work e.g. by editing removing a portion of the work viewing a comment about the work responding to a comment about the work and the like. In some implementations a higher number and higher frequency of interactions may be interpreted as suggesting a higher likelihood that the author will keep writing and ultimately complete the work . The calculation performed by the prediction module is dynamic and variable. Conversely inactivity may be interpreted as the author possibly abandoning the work. Thus the prediction module may decrease likelihood of completion dramatically if there is no activity from the author regarding the work for several months.

The author activity log may also include a completion number representing a number of works for which the author has completed a final draft and an abandoned number representing a number of works for which the author did not complete a final draft. For example if the author completed a final draft of three works and did not complete a final draft of six works then his or her completion number would be 3 and his or her abandoned number would be 6. These numbers may be made into a ratio such as completion number over abandoned number. Using the example above the ratio would be 0.5. Thresholds could be created from the ratio such as unlikely to finish for ratios less than 1 moderately likely to finish for ratios from 1 to 2 and highly likely to finish for ratios greater than 2. The specific ratio thresholds and names are merely illustrative.

A success metric module may calculate a success metric for the work using algorithm based on interactions between the readers and the work . The success metric may represent a prediction that the work when finished and shared beyond this community will be popular with readers. Interactions that may affect the success metric include readers reading part of the work reading the entire work rereading at least a portion of the work marking the work as a favorite work sharing the work with another person purchasing the work and the like. The algorithm may compute a sum average median mean or other value from numerical values derived from comments and from numerical values assigned to the interactions of the readers with the work .

The interactions may be tracked by recording the number of instances of each type of interaction as well as tracking other metrics such as time spent reading by readers both total and average . The time spent reading may be calculated for all readers and compared against a threshold amount of time. For example a work that users have spent in total more than 100 hours reading may receive a first level of ranking and a work that users have spent more than 500 hours reading may receive a second level of ranking. One type of interaction that may be considered by the success metric module is the creation of comments . Comments received by the comment module may affect the success metric. The prediction represented by the success metric is a forecast of how well the work will be received by a larger audience of readers beyond the collaborative community described herein. The concept of the work being popular with readers may also include a financial component and the prediction may suggest to what extent a given work is likely to have commercial success.

The success metric may change as the work changes and as reader interaction with the work changes. When the success metric changes the notification module may notify the author of the change. In some implementations the success metric may be exposed only to the author of the work . Keeping the success metric hidden from other users may encourage honest evaluation and interaction e.g. commenting with the work without any bias introduced from knowing the success metric.

Works may be ranked based on their relative success metrics. For example the work with a highest success metric may be shown on a main portion of a user interface such as a home page of a website. A list of the top N ranked works such as the top 50 or top 100 works . This list may be available to all users. Since the success metric is based on reader activity the success metrics for works are dynamic and change over time. The ranking of works may be re calculated and posted periodically such as every 24 hours every seven days or any other interval of time. Because the rankings are dynamic the ranking of a work may change and move up or down the list. The author of a work may be notified every time his or her work changes position in the rankings. The author may also be notified when the rank of his or her work is approaching a threshold. For example an author may receive an automatic notification that his or her work is ranked number 51 and about to enter the top 50. Showing an author how his work is changing in the rankings may encourage the author to put more effort into the work to improve the rank.

A machine learning module may modify an algorithm used for calculation of the success metric based on actual success and the real world response to works that were previously evaluated using algorithm. The machine learning module may use any type of machine learning techniques or artificial intelligence which makes it possible to compare predicted results with observed data and infer modifications that can be made to the algorithm in order to bring future predictions closer to actual observed results. For example information about the success in terms of sales numbers revenue generated number of printings and the like may be obtained for a work that was completed and or published to a broader audience beyond this community. The actual success of that work may be compared with the previously calculated success metric. When the success metric under or overestimates the actual success of the work the machine learning module may adjust the algorithm s used to calculate the success metric.

Providing authors with the success metric may help an author to know how his or her work will likely be received before expending the effort to complete the work. An author may choose to abandon a writing project if the success metric module assigns a low likelihood of success. Alternative an author may be encouraged to keep writing if he or she learns that the work has a good chance of being successful.

A real time messaging service may provide a way for the various users in this community to communicate with each other. By managing the real time messaging as part of the architecture of this community the users may be able to communicate with each other while maintaining privacy. The real time messaging service may also limit which users are able to contact which other users. For example real time messaging may be enabled between authors and contributors that have provided feedback or the content submission on a work of the author . The real time messaging service may also expose status of users as logged in to the community or not. Thus a contributor may be able to observe the author is logged into the community and then initiate a real time chat the author to provide further suggestions discuss a comment previously provided by the contributor etc. The real time messaging service may limit communication between users in other ways such as for example only allowing those contributors whose comments have been flagged by the author as being useful.

An asset service stores metadata about works pitches comments content contributions and other data within the architecture. The data itself e.g. actual files may be stored separately in a system that uses both automated and or manual tools for identification of copied plagiarized and inappropriate content. Authors may designate works as either in progress shared with a limited group of users or shared with substantially all other users through use of sharing setting. Use of metadata stored by the asset service can designate which files are publicly available and which are still in progress by associating draft metadata to works that are still in progress and by associating shared metadata with works that are shared. They work may have multiple segments e.g. book chapters and associated pitch and associated content e.g. cover art . Thus they work may represent the submitted content of the work as well as the metadata and any associated content. The metadata may indicate which user created a particular item. Thus the work may include text of a fictional story that is created by an author but also cover art created by a contributor . Additionally comments about the work may be associated with the work by metadata that indicates the association. Metadata can also indicate the category of a work such as the contents of stories fiction or nonfiction. Works may also be associated with audience appropriateness ratings e.g. G PG PG 13 R through use of the metadata.

If author chooses to share draft content then metadata indicating that the content is still in progress may be changed to indicate that the content is now shared. Differences between content associated with in progress metadata and content associated with shared metadata enables the creation of different user interfaces for an author and other users such as readers and contributors . For example an author facing user interface may shows content that has metadata indicating both draft and shared status. However a reader facing user interface may surface only content associated with shared metadata.

Since works themselves are stored in a separate location systems accessing this architecture may download works directly from the place they are stored. Uploading requests by authors may be sent to a universal resource locator URL that is specified for receiving uploads. Following upload the work or portion thereof may be passed to the asset service . Prior to allowing the upload and association of new content with a work the asset service may conduct one or more ownership checks to ensure that only the author can upload content to his or her work .

A profile service stores or manages storage of user profiles for the authors readers and contributors . The profile service may associate metadata e.g. name profile picture location description of the user physical location of the user date and time when the profile was created preferences works authored etc. with the profiles. Users may initially create a profile at the time of first accessing this architecture. Some data stored in the user profiles may be provided directly by the users such as a username and a profile picture. Other information may be automatically associated with a profile based on activity and choices of the user. For example when a user uploads a new work e.g sends the work to the asset service metadata indicating that that work is authored by the user may be automatically associated with that user s profile.

A preference service may be a component of the profile service or an independent service. The preference service manages storage user preferences. The preferences allow a user to customize his or her interactions with architecture. For example a user could indicate a preference for notifications regarding new works in the science fiction genre. The user can also indicate a preference to have comments on his or her works from certain categories the contributors hidden so that those comments do not appear in an author facing user interface. Use of a preference service that is distinct from the profile service may allow for application of global preferences across other systems and architectures e.g. default language text size etc. .

A curated list service provides a system for management and storing of lists. The lists may be implemented as universal resource indicators URIs . The curated list service may maintain lists of works that are popular amongst users of the architecture. Popularity may be based in part on a number of reads a number of comments a number of recommendations etc. A list of trending works may also be managed by the curated list service . Trending works may be works that have recently changed a positive way. For example works that have had a greatest increase in a major of popularity during a preceding time period such as the previous day the previous week may be surfaced in a list of trending works. Also works that have recently received input of effort from authors such as addition of a new chapter sense of editing indication by the author of the draft being finalized and the like may be indicated as trending works. These and other lists may be surfaced on a home page or top page of a website or application.

The computing device s may include additional modules beyond those discussed above and any of the modules discussed herein may be omitted or combined.

The author facing user interface may also provide a portion of the user interface for the author to place comments that the author intends to refer to while writing or revising his or her work . The comments may be associated with a specific portion of the draft of the work by the contributor who provided the comment e.g. similar to a sticky note placed on a particular portion of a paper document . These types of comments represented here by comments and collectively comments may be considered important comments for the author because the author has elected to look at these comments while writing. The comments may include a suggested modification of content included in a draft of the work suggested edits to the draft of the work and a suggested graphic to accompany the draft of the work as well as other types of comments. In this example these comments are presented in the author facing user interface with increased prominence due to their location in the portion spanning the top of the user interface . The prominence of these comments may also be emphasized in other ways such as by bolding text changing a color of the comment boxes and the like.

The author facing user interface may also include a portion of the user interface which displays other comments from contributors . These comments may include comments that merely provide superficial feedback provide a query that is not particularly helpful to the author suggest a modification to the work provide a critique or criticism of the work or provide an edit . Although only five comments are shown here the author facing user interface may present any number of comments to the author . There may also be a user interface element associated with each comment through which the author may select or flag the comment as being meaningful or helpful to the author for the creation of the work. In this example the author has selected comments and

The author may additionally or alternatively choose to select one of the comments for reference while revising the draft of the work by for example dragging the comment from portion to portion of the user interface . Drag and drop is but one illustrative way of selecting a comment for reference while revising the work . Thus comments may be flagged in at least two different ways as comments that are helpful to the author such as comments and or as comments that the author chooses to reference while writing such as comments . It may be likely but is not necessary that the comments the author chooses to reference while writing are also comments that the author has selected as being helpful. With either example of selecting specific comments the contributor who provided the comment and or may receive a notification that the author has flagged his or her comment and or . This notification may be provided by the notification service .

The user interface may accommodate only a limited number of comments in the portion of the user interface that gives increased prominence to those comments that the author has chosen to reference while revising the draft of the work. In this example the portion of the user interface can accommodate only three comments . The number of comments may be limited for the work as a whole and or for specific portions of the work . For example the work may be limited to have a total of 20 comments associated with it at any one time and only 3 comments associated with any chapter of the work . The author may be prevented from selecting i.e. dragging and dropping into portion additional comments until the author unselects one of the comments previously selected for reference. This may keep the list of comments flagged for reference while writing relatively small and up to date. Thus the comment selected flagged for use by the author while writing may change frequently as the author edits his or her work and by showing which comments the author has selected flagged other users may gain insight and be able to observe some of the author s writing process. Once the author finishes revising the draft of the work based on one of the comments the author may unselect the comment or the system may automatically cease the selected status of the comment in response to an indication of the author such as deleting the comment from the portion of the user interface . This may also create space for the author to drag a different comment into the portion of the user interface .

In addition to comments and the author facing user interface may present metrics about reader interaction with the work . The metrics may include such things as a number of times the work was read a number of times a reader reread the work a number of times a reader chose to share the work with another and the like. The metrics about reader interaction with the work may be used to generate a success metric . The success metric may be generated by the success metric module . The success metric may also be based on the content of comments and . For example a high number of positive comments may increase the success metric . Positive comments may be identified as such by automated analysis of the text of the comments using techniques such as natural language processing. For example in comment the word great may be interpreted as indicating a positive comment by the use of natural language processing.

In this example the success metric is shown as medium high. The success metric may be computed numerically or as a percentage e.g. 50 chance of being well received by readers and then converted to a textual or graphical representation. For example a medium high chance of success may correlate with 70 to 85 likelihood that the work will sell more than 100 000 copies if published. This success metric may be shown only on the author facing user interface and not on user interfaces viewable by other users.

In some implementations a work may only be available to a subgroup of users selected by the author. For example the author may choose to share initial drafts of a work only with other authors only with contributors that have provided comments on earlier versions of this work or on other works of the author or with some other subgroup. For example contributors may be encouraged to comment on a work by receiving access to additions e.g. new chapters etc. to the work prior to other users. In order to promote broad community and sharing works that are limited to only a subgroup of users may be automatically made available to all users in the community after the lapse of a predetermined time period. For example new works or new changes to a work may be limited to a select subgroup of users only for two weeks before the work automatically becomes open to everyone.

Comments associate with the work may be shown together with the work in a separate portion of the user interface . These comments may be the same comments that the author sees in the author facing user interface . Comments from a contributor that has received recognition for his or her comments but not necessarily for this comment may be shown differently in this portion of the user interface . For example the two stars may correlate with a number of tokens received by the contributor ieditlots. Different numbers of stars or any other type of change to a presentation in the user interface may be used to indicate the relative number of tokens that a contributor has received. In some implementations the portion of the user interface displaying the comments may have the comments ordered or sorted by the number or tokens held by the contributors that posted the comments. For example comments by contributors with the most tokens may be presented first. Contributors that receive tokens for contributions made to other stories may keep those tokens perpetually and have those tokens represented in multiple ways throughout the community.

Comments that are flagged for reference by the author to use while writing on his or her work may also be indicted as such by techniques that include putting a symbol next to the comment . Thus users looking at the reader facing user interface may be able to see which comments the author is actively referencing. These symbols or other technique for marking the comments will be added and removed from a comment based on the author s flagging and unflagging of that comment in the author facing user interface . Thus the status of a comment as being flagged with this symbol may change frequently.

The portion of the user interface for displaying comments may also include a field for a contributor to enter and post a comment . The contributor may associate the comment with the work as a whole or with a specific portion of the work such as the portion of the work currently displayed in portion of the user interface . In some implementations the author of a work may receive a notification whenever a contributor posts a new comment about the work .

In addition to comments contributors may also provide content contributions . The content contributions may include such things as cover art for the work audio to accompany the work a translation of the work a font for rendering text of the work an alternative version of a portion of the work a video or the like. The content contributions may be unsolicited contributions that are not requested by the author but rather are provided by a contributor for consideration by the author as well as other members of the community. The content contributions may be provided by the contributor uploading a file to the computing device s . Once uploaded the content contributions may be associated with the work .

The reader facing user interface may also present a draft completion likelihood representing a likelihood that the author will complete a final draft of the work . The draft completion likelihood may be determined by the prediction module . In this example the draft completion likelihood is shown in terms of percentages although other types of representations are also possible. Providing the draft completion likelihood on the same user interface as the work makes it easy for readers to identify if a given work is something they wish to invest their time in reading.

This user interface includes a window showing a single pitch. The window may include context for the pitch such as a description of what type of work the author is proposing to create a title for the work and the content of the pitch itself. When reviewing the pitch users are also presented with user interface elements to rate the pitch. The user interface elements may be configured as a first button to indicate a positive evaluation of the pitch and a second button to see the next pitch. The first button may be marked with an indicia associated with a positive evaluation such as a plus sign the word yes a thumbs up symbol a smiley face green coloration etc. The second button may be marked with a command to show another pitch. In this example user interface users are presented with a choice between the positive button or the show next pitch button . The user interface may be created such that users are not able to directly provide negative feedback. The act of selecting the show me another button may suggest negative or at least not positive feedback. In other implementations the users may be given a larger selection of choices such as a negative evaluation option or a neutral or no opinion button representing neither a positive nor a negative opinion. The users may alternatively be presented with a user interface that allows for selection of a numeric value such as from 1 to 5 representing how much interest they have in the pitch .

In some implementations the window may also include a comment box in which the users can provide comments in addition to their rating of the pitch . For example a user may activate the button corresponding to a negative opinion and then provide a comment in the comment box telling the author what changes would cause the user to instead select the button corresponding to a positive opinion. After rating a pitch and optionally entering a comment in the comment box the user interface may immediately present the user a different window showing a another pitch. Thus the user interface may create the visual appearance of flipping through a series of cards each card containing a separate pitch. In some implementations the act of selecting one of the buttons or may cause the window to be replaced by one of the next windows . This allows the users to rapidly review a large number of pitches .

An author who has submitted a pitch may receive a number of responses both positive and negative from users who have reviewed the pitch. These responses may be tallied and presented to the author . Authors may judge based on the relative numbers of positive and negative responses whether to proceed with drafting a work .

The processes discussed below are each illustrated as a collection of blocks in a logical flow graph which represent a sequence of operations that can be implemented in hardware software or a combination thereof. In the context of software the blocks represent computer executable instructions stored on one or more computer readable media that when executed by one or more processing units perform the recited operations. Generally computer executable instructions include routines programs objects components data structures and the like that perform particular functions or implement particular abstract data types. The order in which the operations are described is not intended to be construed as a limitation and any number of the described blocks can be combined in any order and or in parallel to implement the processes.

FIG. illustrates a process for receiving feedback on a pitch. At a pitch for a work that an author proposes to create may be received for consideration by a community of users.

At the pitch may be surfaced to a plurality of contributors. In some implementations the pitch may be surfaced in a user interface such as the user interface shown in . The user interface provides one example e.g. a visual representation of flipping through cards of pitches of how the pitch may be surfaced as one of a plurality of pitches that are presented to the plurality of contributors in immediate succession after each other.

At feedback may be received from all or some of the plurality of contributors that viewed the pitch. The feedback may rate the pitch by the contributors making a selection of a positive review of the pitch. Selection of a positive review of the pitch may indicate that the user would read a work developed from the pitch. Feedback may also be a request to see a different pitch. Thus a user presented with a pitch that does not interest him or her can quickly go to a next pitch pausing only to provide feedback for those pitches that interest him or her.

Alternatively the feedback may be received by the contributors selecting a number that corresponds to a strength of positive feelings a contributor had towards the pitch e.g. 1 5 . Other techniques for receiving feedback from the contributors are also possible.

At the number of instances of positive feedback and number of views of the pitch are tallied. For example the tallying may consist of counting the number of contributors that selected the positive feedback button and a total number of contributors that reviewed the pitch.

At the number of instances of positive feedback and the total number of views i.e. instances the pitch was surfaced are presented to the author of the pitch. These numbers may be presented simply as numerals ratio or percentage in an email message or a text message. Numbers may also be presented in a graph such as a bar chart on a web based user interface.

At process branches depending whether or not the author chooses to develop the work proposed in the pitch. For example after receiving a relatively large amount of positive feedback the author may choose to develop the pitch. Alternatively if most of the people that viewed the pitch did not provide positive feedback the author may choose to abandon that idea. Of course the author may also disregard the feedback and proceed with or abandon the work based on his or her own preference. If the author decides to abandon the pitch process proceeds to .

At the pitch is made inactive so that it no longer surfaces to contributors. Pitches may also become inactive based on the passage of time. For example 30 days after the initial posting pitches may be inactivated. In other implementations pitches may be inactivated automatically if there is only a small amount of positive feedback e.g. fewer than 20 of those that view the pitch provide positive feedback . Pitches that are inactive may remain saved so that the author can re activate a pitch. Alternatively inactive pitches may be deleted.

At a work based on the pitch is received from the author and the author provides instructions to post the work or whatever portion of the work the author has completed for access by readers. In some implementations the work may be made available to readers and contributors through the reader facing user interface shown in .

At those contributors that provided positive feedback for the pitch are notified that the work or a portion of the work is now available. This notification may be the form of a message sent to accounts of the respective contributors. This notification alerts the contributors to the fact the work was received at . Presumably contributors who provided positive feedback for the pitch will be interested in seeing the pitch developed and reading a work based on the pitch.

At process branches depending on whether the author chooses to unpost all or part of the work. For example after posting a work the author may receive comments on the work and choose to rewrite or revise all or part of the work. If the author chooses not to unpost the work then process follows the no path to where the current version of the work is retained for access by readers and contributors.

At if the author sends instructions to unpost the work the work may be removed from the collection of works accessible by the readers. After this point if readers attempt to access the work they may simply receive a notification that the work is no longer available.

At the removed work may be replaced with an earlier version of the work. For example if the writer decides to scrap recent edits and changes to a chapter of a book the author may remove the current version and elect to return to a previous version of that portion of the work. Alternatively an earlier version of the work may automatically replace whatever portion of the work the author chooses to remove.

At one or more comments on the draft of the work are received from one or more contributors. The comments may be expressions of opinions about the quality of the work specific suggestions for how to improve the work rewritten portions of the work explanations of factual matter that is relevant to the content of the work audiovisual files inspired by or intended to accompany the work and the like.

At the comments are made available to the author. For example the comments may be provided to the author in an author facing user interface such as the user interface shown in .

At a selection of a comment from the one or more comments is received from the author. Selection of the comment by the author may indicate that the author considers the comment helpful. For example a comment suggesting how to modify the back story of the main character may be more helpful to the author then a comment stating that the author s story is a good story.

At a selection of a category for the comment is received from the author. The author selects the category from a set of predetermined categories corresponding to types of contributions. For example the comments may be grouped into different types of contributions such as comments related to artwork comments for editing translation e.g. a contributor voluntarily translating the work from one language into another content recommendation e.g. suggestions of how to change the content of the work that are more substantive than mere copy edits or grammatical corrections or subject matter expertise. This list of possible types of contributions is not exhaustive but merely illustrative. Following the author s selection of a comment at and selection of a type of contribution at the helpful comments will be both labeled as helpful and labeled with a category showing how the comment was helpful.

Following the author s selection and categorization the comment process may follow any one of a number of paths either in parallel or in series.

At a user interface for presentation of the comment may be modified to show other users that the author selected the comment at . Even though the author and the contributor may know that the comment was selected by the author in order to provide additional encouragement to contributors and additional status in the community comments that authors find helpful may be displayed differently than other comments. For example the user interface representation may be changed to increase prominence of the comment by for example putting the text of the selected comments in bold making the comments appear larger rendering the comments a different color etc. This change in user interface representation may be shown in the reader facing user interface of .

At a token may be associated with an account of the contributor who provided the helpful comment. The token may also specify the category selected by the author at . As discussed above tokens represent acknowledgment that the contributor provided a comment which was found helpful or valuable by the author. The contributors may accumulate tokens by providing comments that are later selected by an author as being helpful or valuable. The tokens may be associated with the account of the contributors so that the tokens do not go away even if a comment that earned the contributor a token is deleted when a work is itself deleted.

At a number in category of tokens held by the contributor may be shown to other users. Tokens may be represented in this community as a badge or symbol associated with an account of the contributor. For example if a contributor is recognized by the author for providing editing comments a symbol associated with editing may be displayed next to the user name of the contributor. In some implementations the contributor may receive an additional symbol or badge for each threshold number of tokens received. For example one editing badge for 10 tokens in the editing category two badges for 20 etc.

Once comments have been received selected and categorized by the author the author may choose to respond to one or more of the comments. Thus process proceeds to where at the author may determine whether or not to create a message about a comment.

At the message is received from the author about the comment. The author may have decided to create a message about a comment in order to thank the contributor who provided the comment or to request for further information from the contributor. Thus this communication from the author to the contributor may be thought of a comment on a comment.

At the message and the comment are made available to users. The message may be available only to the contributor who generated the comment or the message may be publicly available to all users who view the comment. In some implementations the messages may be associated with the comment i.e. indicating that a particular message is direct to a particular comment though the use of metadata or other technique.

Whether the author does or does not decide to create a message about the comment process may proceed ultimately to where a list of comments on the work is generated. The list of comments may include the comment and at least one other comment. In some instances the list of comments may include many tens of comments.

At a request for an ordered list of comments on the work is received. The request may be received from the author from a reader from a contributor or from another user. The request may be generated in response to a selection of a command in a user interface to sort a list of comments.

At the list of comments is sorted by a number of tokens held by contributors that provided the respective comments. For example a contributor who has a smaller number of tokens may have his or her comment appear lower in the list. A contributor who has a larger number of tokens may have his or her comments appear higher in the list. This would allow a user who is reviewing the comments to first see the comments from those contributors which have received the most recognition from authors. In addition to ordering the list based on the number of tokens the list may also be ordered based on the type of tokens. For example if an author is looking for cover art to use with a novel the author may choose to order a list of comments based on a number of tokens received for the category of artwork. Of course a contributor with many tokens in the artwork category may provide comments on editing or anything else but this type of ordering could surface those comments that are most likely to contain high quality suggestions about artwork for the novel.

At a draft of a work is received from an author for sharing with a plurality of readers. This may represent the initial posting of a rough draft of an entire work a first chapter of the work or any other portion or draft of a work.

At entries are created in an author activity log in response to activities performed by the author in association with the draft of the work. For example the activities may include editing the existing portions of the work adding a new portion to the work viewing a comment about the work responding to a comment about the work flagging a comment about the work generating a status message etc. The activities provide a way to observe the author s continued involvement with the work. Some activities may be given more weight as being more indicative of the author following through and ultimately finishing the work. For example adding a new portion to the work may receive a relatively higher weight than merely viewing a comment. Activities may also be entered in the activity log with timestamps. Thus the temporal spacing of the activities also be used to infer how likely the author is to finish the work. Steady interactions as compared to interactions becoming more and more infrequent may suggest a higher likelihood of an author finishing a work.

At numerical values are assigned to individual ones of the entries in the author activity log. Activities given more weight may have different numerical values assigned due to the weight given to those activities. In some implementations an activity that takes the author more time to complete e.g. writing a chapter of a work may be weighted more than an activity that takes less time to complete e.g. posting a status update .

For example a chapter of a work that the author spent three days writing and that contains 5000 words may be given a numerical value of 14. Both the length of time from start to finish and the number of words may be considered when calculating the numerical value. Additionally completing a chapter may be given a weight of 10. Therefore the weighted numerical value of completing this chapter of the work may be 10 14 or 140. In comparison posting a status update that has 25 words may be assigned a numerical value of 5 and the weighting factor for status updates may be one. Thus the weighted numerical value of the status update is 5.

At a likelihood of the author completing the work is calculated based on a formula that uses the numerical value of individual ones of the entries in the author activity log as inputs. The formula may also take the temporal spacing of the activities as inputs. Both frequency and regularity of activities may affect the likelihood. For example an author that only engages with his or her work on the weekends but does so every weekend may be determined by the formula to have a relatively higher likelihood of completion due to the regularity. Also an author that has some activity every day even just reading comments may receive a higher likelihood of completion due to the short duration of time between activities. The likelihood may be calculated by the prediction module . The calculation may be a sum average media mean or other formula that considers the numerical values of the entries in the author activity log. The likelihood may be proportional to an output from the formula. For example a higher raw output from the formula may correlate with a higher percentage likelihood of completion. Alternatively the formula is not limited to positive numerical values being better but depending on specific configurations a more negative value a value closer to 0 100 etc. may be better in that such value correlates with a higher percentage likelihood of completion.

At a draft completion metric may be created for the author. The draft completion metric looks at the author s completion of previous works whereas the entries in the author activity log track activity related to this particular work. The draft completion metric may be based on a number of previous drafts of works of the author that became final drafts and a number that did not become final drafts. During the writing and revising process there may be a point where the author can explicitly indicate that a draft is finished and the current work is the final version. Presumably authors that have a better track record of finishing what they start are more likely to finish a current work in progress. Thus the draft completion metric may also be taken as an input to the formula to calculate the likelihood of the author completing the work.

At the likelihood of the author completing the work is presented in a user interface together with the draft of the work. For example the reader facing user interface shows a draft completion metric together with the work .

Once the community contains multiple drafts of work each that have their own respective likelihoods of being completed readers searching for content to read in the community may choose to use the likelihood a work will be completed as a way to select works to read.

At it is determined if the likelihood of the author completing a work is greater than a threshold likelihood. This may be completed for multiple works that match the search query from . The threshold may be set automatically or specified by the reader when generating the search query. For example the threshold may be set at an 85 likelihood of the author completing the work.

For works which the likelihood is less than the threshold process proceeds along the no path to and those works are not returned in the list of results to the search query.

Further works which the likelihood is greater than a threshold process proceeds along the yes path to and drafts of those works are returned as a result of the search query.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as illustrative forms of implementing the claims.

