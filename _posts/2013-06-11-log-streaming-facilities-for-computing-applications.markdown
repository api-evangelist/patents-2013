---

title: Log streaming facilities for computing applications
abstract: To facilitate log streaming in a computing cloud, application service providers may dynamically provision one or more named log streams. A file-oriented interface to log streams may be made available to a plurality of virtual computer system instances used to provide the application services. Application service providers may further dynamically provision one or more sets of log stream processing agents arranged in one or more log stream processing graphs. Particular log streams may be assigned to particular log stream processing graphs for real-time processing. Processed log streams and/or associated data may be stored for later inspection. Such provisioning and/or configuration may be performed with a unified Web-based interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09420068&OS=09420068&RS=09420068
owner: Amazon Technologies, Inc.
number: 09420068
owner_city: Reno
owner_country: unknown
publication_date: 20130611
---
This application is a continuation of U.S. application Ser. No. 12 891 684 filed Sep. 27 2010 the full disclosure of which is incorporated herein by reference.

In modern computing applications it is common for the data that is presented to an ordinary application user to be just a fraction of the data that is generated and or used internally by the application. One reason for this is simply to avoid overwhelming the user with information. The data fraction presented to the user is typically carefully designed and or chosen to help achieve the user s goals. However it is not uncommon for some application users such as application administrators to desire and or to require access to a greater fraction of the internal application data for example for auditing resource tuning and or anomalous behavior investigation debugging purposes. Furthermore the needs and or goals of users can change and archives of historical data have many times proven valuable.

Accordingly it is not uncommon for applications to record selected portions of the internal application data in data logs for later processing and or inspection. However conventional data logging mechanisms have several shortcomings particularly in a virtualized remotely accessed computing context such as cloud computing. In cloud computing a collection of physical servers perhaps geographically distributed may maintain a potentially larger collection of virtual computer system instances. Applications may obtain various benefits by executing in the virtual computer system instances. However such virtual system instances typically have relatively limited data storage suited to data logs. Some conventional cloud computing platforms include an independent reliable bulk data storage service. However such services typically have interfaces that are heavyweight inefficient and or otherwise unsuited to data logging and particularly high rate data logging.

Same numbers are used throughout the disclosure and figures to reference like components and features but such repetition of number is for purposes of simplicity of explanation and understanding and should not be viewed as a limitation on the various embodiments.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

In at least one embodiment log streaming facilities are provided for applications executing within a distributed program execution service. In a distributed program execution service application service providers may provision virtual computer system instances virtual system instances to execute applications that provide services to application users. The distributed program execution service can be for example a cloud computing environment. Application service providers may be considered customers of the distributed program execution service and application users may be considered customers of the application service providers.

To facilitate logging application service providers may provision one or more named log streams in the distributed program execution service. A file oriented interface to log streams may be made available to the virtual system instances. For example log streams may be mounted by virtual system instances as a type of file system e.g. as a log file system logFS . Application service providers may further provision one or more sets of log stream processing agents arranged in one or more log stream processing graphs i.e. directed graphs in the sense of graph theory having log stream processing agents as nodes . Particular log streams may be assigned to particular log stream processing graphs for real time processing. Processed log streams and or associated data may be stored for later inspection.

The virtual system instances the log streams the log stream processing agents and or the log stream processing graph may be provisioned and or dynamically reconfigured with a Web based provisioning interface such as a Web based graphical user interface GUI . The file oriented interface for accessing the log streams may be an application programming interface API including interface elements corresponding to file operations in accordance with a portable operating system interface POSIX standard for example file operations such as fopen fwrite and fclose. The file oriented interface may operate in a substantially write only mode. In at least one embodiment the substantially write only mode of operation enables efficient implementation and high performance logging.

Log streams may be streamed from agent to agent in accordance with an order indicated by the arrows of an associated log stream processing graph. The log stream processing agents may include parsing agents for parsing field values from records in the log stream metric agents for determining metrics based on received log streams alarm agents for generating alarms based on received log streams archiving agents for archiving received log records as well as agents for transforming log streams such as filtering agents that pass or drop log records matching a log stream filter e.g. corresponding to a regular expression sampling agents that pass a representative sample of received log records e.g. according to type and aggregation agents that aggregate similar log records e.g. with respect to specified time periods . A custom log stream processing graph need not be specified for each log stream. For example log streams may initially be assigned to a default log stream processing graph having an archiving agent.

Various approaches may be implemented in various environments for various applications. For example illustrates aspects of an example environment for implementing aspects in accordance with various embodiments. As will be appreciated although a Web based environment may be utilized for purposes of explanation different environments may be utilized as appropriate to implement various embodiments. The environment shown includes both a testing or a development portion or side and a production portion. The production portion includes an electronic client device which may include any appropriate device operable to send and receive requests messages or information over an appropriate network and convey information back to a user of the device . Examples of such client devices include personal computers cell phones handheld messaging devices laptop computers set top boxes personal data assistants electronic book readers and the like.

The network may include any appropriate network including an intranet the Internet a cellular network a local area network a wide area network a wireless data network or any other such network or combination thereof. Components utilized for such a system may depend at least in part upon the type of network and or environment selected. Protocols and components for communicating via such a network are well known and will not be discussed herein in detail. Communication over the network may be enabled by wired or wireless connections and combinations thereof. In this example the network includes the Internet as the environment includes a Web server for receiving requests and serving content in response thereto although for other networks an alternative device serving a similar purpose could be utilized as would be apparent to one of ordinary skill in the art.

The illustrative environment includes at least one application server and a data store . It should be understood that there may be several application servers layers or other elements processes or components which may be chained or otherwise configured which may interact to perform tasks such as obtaining data from an appropriate data store. As used herein the term data store refers to any device or combination of devices capable of storing accessing and or retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment.

The application server may include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device and may even handle a majority of the data access and business logic for an application. The application server provides access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the Web server in the form of HTML XML or another appropriate structured language in this example.

The handling of all requests and responses as well as the delivery of content between the client device and the application server may be handled by the Web server . It should be understood that the Web and application servers are not required and are merely example components as structured code discussed herein may be executed on any appropriate device or host machine as discussed elsewhere herein. Further the environment may be architected in such a way that a test automation framework may be provided as a service to which a user or application may subscribe. A test automation framework may be provided as an implementation of any of the various testing patterns discussed herein although various other implementations may be utilized as well as discussed or suggested herein.

The environment may also include a development and or testing side which includes a user device allowing a user such as a developer data administrator or tester to access the system. The user device may be any appropriate device or machine such as is described above with respect to the client device . The environment may also include a development server which functions similar to the application server but typically runs code during development and testing before the code is deployed and executed on the production side and becomes accessible to outside users for example. In some embodiments an application server may function as a development server and separate production and testing storage may not be utilized.

The data store may include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect. For example the data store illustrated includes mechanisms for storing production data and user information which may be utilized to serve content for the production side. The data store also is shown to include a mechanism for storing testing data which may be utilized with the user information for the testing side. It should be understood that there may be many other aspects that are stored in the data store such as for page image information and access right information which may be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store .

The data store is operable through logic associated therewith to receive instructions from the application server or development server and obtain update or otherwise process data in response thereto. In one example a user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and may access the catalog detail information to obtain information about items of that type. The information then may be returned to the user such as in a results listing on a Web page that the user is able to view via a browser on the user device . Information for a particular item of interest may be viewed in a dedicated page or window of the browser.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable medium storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

In at least one embodiment one or more aspects of the environment may incorporate and or be incorporated into a distributed program execution service architecture such as a cloud computing environment. depicts aspects of an example cloud computing environment in accordance with at least one embodiment. The example cloud computing environment includes a distributed program execution service depicted as a computing cloud . The computing cloud may include a wide variety of computing resources interlinked by a relatively high speed data network. Such computing resources may include processors such as central processing units CPUs volatile storage devices such as random access memory RAM nonvolatile storage devices such as flash memory hard drives and optical drives servers such as the Web server and the application server described above with reference to as well as one or more data stores such as the data store of . Such computing resources are not shown explicitly in because it is an aspect of the computing cloud to emphasize independence from the physical computers and networking equipment that implement the computing cloud .

The computing cloud may utilize its computing resources to execute one or more programs program modules program components and or programmatic objects program components including and or compiled from instructions and or code specified with any suitable machine and or programming language. The program components may be distributed throughout the computing cloud . For example the computing resources may be allocated and reallocated as necessary to facilitate execution of the program components and or the program components may be assigned and reassigned as necessary to the computing resources. Such assignment may include physical relocation of program components for example to enhance execution efficiency. Computing resource allocations may be elastic. From a perspective of an application service provider the computing cloud may supply computing resources elastically and or on demand for example associated with a per resource unit commodity style pricing plan.

A application service provider may use a provisioning interface of the computing cloud to provision one or more virtual computer system instances such as provider instances and . The ellipsis between the provider instances and indicates that the computing cloud may support any suitable number of provider instances although for clarity only two are shown. For example the computing cloud may include thousands millions or more of provider instances. The application service provider need not be concerned as to the nature and or location of the physical computing resources allocated by the computing cloud to maintain the provider instances . Indeed the computing resource allocation may be varied by the computing cloud in a manner transparent to the application service provider. The application service provider may then configure the provisioned virtual computer system instances to provide application services in a manner similar to the configuration of conventional computer systems. For example the application service provider may configure operating system components of the virtual computer system instances as well as cause the virtual computer system instances to execute application programs modules components and or objects including and or compiled from instructions and or code specified with any suitable machine and or programming language.

The computing cloud may have an application space portion and an infrastructure portion . The application space may include computing resources allocated to maintaining the provider instances and thereby the application services. The application space portion of the computing cloud is also called the application provider portion . The infrastructure portion may include a log stream processing component configured to process log streams and a log stream storage component configured to store processed log streams and associated data such as metrics derived from log streams. The computing cloud may further include a control plane . The control plane and or the infrastructure may include computing resources allocated to services such as resource provisioning monitoring and billing.

The control plane may control and or be utilized to control various aspects of the application space portion and the infrastructure portion of the computing cloud . For example the control plane may include the provisioning interface utilized by application service providers and computing cloud administrators to provision provider instances log streams facilities provided by the log stream processing component and or facilities provided by the log stream storage component . The various aspects and or facilities of the application space portion and the infrastructure portion may be associated with specific interfaces such as application programming interfaces APIs . However the complexity and variety of the specific interfaces may be such as to require special training to utilize effectively. In at least one embodiment the control plane further includes a workflow component configured at least to interact with and or guide interaction with the specific interfaces of the various aspects and or facilities of the application space portion and or the infrastructure portion in accordance with one or more workflows.

In at least one embodiment instead of interacting directly with the specific interfaces a user and or administrator may interact with the provisioning interface and in response the provisioning interface may create and or cause the workflow component to create one or more provisioning workflows that are then maintained by the workflow component . Workflows such as provisioning workflows may include one or more sequences of tasks to be executed to perform a job such as provisioning. A workflow as the term is used herein is not the tasks themselves but a task control structure that may control flow of information to and from tasks as well as the order of execution of the tasks it controls. For example a workflow may be considered a state machine that can manage and return the state of a process at any time during execution. Workflows may be created from workflow templates. For example a provisioning workflow may be created from a provisioning workflow template configured with parameters by the provisioning interface .

The workflow component may modify further specify and or further configure established workflows. For example the workflow component may select particular computing resources of the computing cloud to execute and or be assigned to particular tasks. Such selection may be based at least in part on the computing resource needs of the particular task as assessed by the workflow component . As another example the workflow component may add additional and or duplicate tasks to an established workflow and or reconfigure information flow between tasks in the established workflow. Such modification of established workflows may be based at least in part on an execution efficiency analysis by the workflow component . For example some tasks may be efficiently performed in parallel while other tasks depend on the successful completion of previous tasks.

One or more application clients may interact with the provider instances in the computing cloud through a communication network . For example the application clients may be computer programs modules components and or objects incorporating and or incorporated into computing devices such as the client device described above with reference to the communication network may incorporate and or be incorporated into the network of . The ellipsis between the application clients and indicates that the cloud computing environment may include any suitable number of application clients although for clarity only two are shown. The communication network is depicted in as overlapping both the application space and infrastructure portions of the computing cloud to indicate that the computing cloud itself incorporating a rich data network fabric may interconnect with the communication network at any suitable number of possibly geographically disparate interconnection points.

For clarity depicts a separate provider administration client . The provider administration client may be utilized by the application service provider to interact with the provisioning interface of the computing cloud in order to provision de provision configure and or reconfigure collectively provision cloud computing resources. For example the provisioning interface may include one or more suitable programming interfaces such as one or more application programming interfaces APIs . The provision interface may also include a Web based graphical user interface GUI and the provider administration client may include a Web browser that interacts with the Web based GUI. By interacting with the provisioning interface the application service provider may provision provider instances log streams log stream processing agents log stream processing graphs and or log stream storage as well as relationships assignments allocations and or associations between provisioned entities. Such entities may respond dynamically and or in real time to provisioning changes. Computing cloud resources may be dynamically reallocated in response to provisioning changes for example to optimize log stream processing efficiency. The provisioning interface may provision the log steams the log stream processing agents and or the log stream processing graphs with the log stream processing component and may provision the log stream storage with the log stream storage component . For example the log stream storage component may incorporate and or be incorporated by one or more data stores such as the data store of .

During execution applications at the provider instances may write log records to one or more provisioned log streams. For example the computing cloud may include hundreds thousands millions or more of provisioned log streams. In at least one embodiment provisioned log streams are associated with one or more log stream processing graphs of log stream processing agents maintained by the log stream processing component of the infrastructure . For example the computing cloud may include hundreds thousands millions or more of provisioned log stream processing graphs. Log records written to provisioned log streams may be streamed through the computing cloud to log stream processing agents of associated log stream processing graphs e.g. to log stream processing agents corresponding to root nodes of the log stream processing graphs . The log streams may be processed in accordance with the log stream processing graphs for example processed by log stream processing agents in an order indicated by the arrows of the log stream processing graphs. Some of the log stream processing agents may be log stream archive agents configured at least to store received log stream data in suitable storage for subsequent inspection for example log stream data may be stored with the log stream storage component for inspection by the provider administration client . Such inspection may include inspection in graphical form of time series of metrics based at least in part on the log stream data.

The application space may include a set of physical servers configured at least to maintain the provider instances . depicts aspects of an example application space server in accordance with at least one embodiment. The server has a set of computing resources such as one or more processors volatile storage such as random access memory RAM and non volatile storage such as flash memory and or one or more hard drives. The computing resources of the server are allocated to supporting at least a virtual system space portion and an instance management portion . The computing resources allocated to the virtual system space support one or more virtual computer system instances such as provider instances and . The provider instances and are examples of the provider instances and of . The ellipsis between the provider instances and indicates that the virtual system space may support any suitable number of provider instances although for clarity only two are shown. The computing resources of the instance management portion of the server support instance management services including provider instance creation configuration and or deletion. Different provider instances may be associated with different application service providers.

In at least one embodiment the provider instances are virtual computer system instances. Accordingly the virtual computing resources of the provider instances may be allocated to instance application spaces and instance system spaces . The virtual computing resources of the instance application spaces may support applications executing with application space sometimes called user space privileges. The instance system spaces may include log stream interfaces . The applications and may write to provisioned log streams with the log stream interfaces and respectively. The log stream interfaces may be located in the instance system space of the provider instances so as to execute with system space privileges for example the log stream interfaces may incorporate a virtual log stream device driver not shown in .

In at least one embodiment the log stream interface is a file oriented interface. For example the provider instance may maintain a directory structure having one or more mount points and the log stream interface may be mounted as a file system at a suitable mount point. That is the log stream interface may include a log file system device driver configured at least to maintain a file system style interface to one or more provisioned log streams. As an example suppose the application service provider utilized the provisioning interface to provision three log streams named myapp audit trail myapp metrics and myapp error . An administrator of the provider instance may utilize a conventional file system mount command to mount the three log streams to a dev logFS mount point. The three log streams are then subject to manipulation with conventional file operations as implemented by the log stream interface in accordance with at least one embodiment. For example the three log streams may be accessed e.g. a file handle obtained with a file open operation at file paths dev logFS myapp audit trail dev logFS myapp metrics and dev logFS myapp error respectively. Log records may be written to the open log streams with a file write operation and file resources e.g. associated with the file handle may be freed for reuse and any log stream write buffers flushed with a file close operation. Log records written with the file oriented interface may be streamed into the associated named log stream in real time.

The file oriented interface may include interface elements corresponding to any suitable file operation including file operations in accordance with a portable operating system interface standard such as the POSIX series of standards. An example set of file operations in accordance with a POSIX standard is described in POSIX Conformance Document Hewlett Packard Part No. B2355 90049 June 1994. However in at least one embodiment log streams are substantially write only. For example the file oriented interface may include an interface element corresponding to a file read operation however invocation of the file read operation with respect to an open log stream may result in an error code. As another example the file oriented interface may include an interface element corresponding to a file seek operation however invocation of the file seek operation with respect to an open log stream may result in an error code or indicate success while performing no operation fail silently . In at least one embodiment the log file system does not require formatting for example with a mkfs command.

Furthermore some interface elements of the file oriented interface may behave in a non standard manner with respect to file operations e.g. in a manner not specified by a portable operating system interface standard . In at least one embodiment an interface element corresponding to a file open operation allows for specification of a type class and or labeling of log records written to a log stream with the resulting file handle. The file operation may accept a file path parameter having a portion conventionally corresponding to a sub directory and that portion may be utilized to type class and or label the log records. For example successfully opening a log stream utilizing a file open operation with the file path parameter dev logFS myapp error critical may result in a file handle that when used for writing to the log stream myapp error types classes and or labels written log records as critical. 

The log stream interfaces need not be file oriented interfaces in each embodiment. For example the log stream interface may include interface elements corresponding to communication socket operations. An example set of communication socket operations in accordance with at least one embodiment is described in Besaw et al. Berkely UNIX System Calls and Interprocess Communication January 1987. As another example the log stream interface may include interface elements corresponding to a syslog interface such as syslog interfaces specified by the syslog.h file of POSIX compliant computer operating systems.

The instance management portion of the server may include a log stream gateway . The log stream gateway may facilitate streaming of log records written with the log stream interfaces of the provider instances to destinations within the computing cloud . The log stream gateway may enhance log records with a suitable set of data fields including a timestamp field with values corresponding to a current date and time and or a provider instance field with values identifying the provider instance generating the log records. The log stream gateway may stream log records out of the server through network interface hardware dedicated to log streaming a log stream NIC . The log stream gateway may facilitate log stream related cloud computing protocols such as log stream related resource discovery and tracking. For example the log stream gateway may discover and track cloud computing resources allocated to the log stream processing component . The log stream gateway may negotiate communication connections and or sessions with log stream processing agents maintained by the log stream processing component for example responsive to log stream interface requests. Communication connections between the log stream gateway and log stream processing agents may be encrypted. The log stream gateway may participate in log stream provisioning. For example the log stream gateway may automatically mount file systems corresponding to log streams associated with the virtual computer system instances of a particular application service provider or otherwise make available and or implement aspects of the log stream interfaces . Each embodiment need not include the log stream gateway and the log stream interfaces may incorporate suitable log stream gateway functionality.

The log stream splitting agent may be configured at least to split a log stream that is streamed to the agent . For example the log stream splitting agent may form a plurality of log streams that are copies of a received log stream. The log stream discard agent may be configured at least to discard a log stream that is streamed to the agent . For example the log stream discard agent may engage in a communication protocol to receive a log stream without taking further processing action.

The log stream parsing agent may be configured at least to parse a log stream received by the agent . For example the log stream parsing agent may identify determine and or parse log records in the log stream log record metadata specifying log record formats including record delimiters data fields within log records including fields identifying provider instances and or data field values. The log stream parsing agent may parse the log stream in accordance with a regular expression regex specified with any suitable regular expression language. Regular expressions and their associated specification languages are well known to those of skill in the art and need not be described here in detail. Alternatively or in addition the log stream parsing agent may be configured with an output of a parser generator in accordance with a portable operating system interface POSIX standard such as the yacc parser generator well known to those of skill in the art. As a further alternative or further in addition the log stream parsing agent may incorporate custom parsing code in accordance with a log stream parsing agent programming interface. For example the log stream parsing agent programming interface may provide a set of parsing operations for utilization by the custom parsing code and or limit facilities available from a conventional programmatic platform e.g. a programmatic platform in accordance with the Ruby programming language to a parsing related subset. Where a log stream parsing agent instance is to be configured with custom parsing code the log stream agent instance management component may scan and or test the log stream parsing agent instance for malicious code and or behavior prior to adding the log stream parsing agent instance to the log stream agent set .

The log stream record validation agent may be configured at least to validate log records in a log stream received by the agent and for example to raise an alarm output an error and or make a notification if an invalid log record is detected. For example the log stream validation agent may utilize output of the log stream parsing agent and compare identified log record fields with an expected set of log record fields. However each type of log stream processing agent in the set of log stream agent prototypes may have an associated cost e.g. financial and or with respect to allocated computing resources and it may be that the log stream parsing agent is too expensive to utilize in a validation role early in a log stream processing graph. Accordingly the log stream record validation agent may be configured to operate in a high volume low cost mode with a subset of log stream parsing agent functionality. For example the log stream record validation agent may be constrained to log record format validation with regular expressions.

The log stream record classification agent may be configured at least to classify log records streamed to the agent . For example the log stream record classification agent may identify and or determine a log record class assigned to log records with the log stream interface as described above with reference to . Alternatively or in addition the log stream record classification agent may utilize output of the log stream parsing agent to classify log records. For example the log stream record classification agent may classify log records based at least in part on log record data fields and or data field values. As an alternative to or in addition to utilizing output of the log stream parsing agent the log stream record classification agent may be configured to operate in a high volume low cost mode with a suitable subset of log stream parsing agent functionality.

The log stream filtering agent may be configured at least to filter a log stream received by the agent . For example the log stream filtering agent may form an outgoing log stream that includes log records from the received log stream that match a log stream filter a pass filter and or that do not match a log stream filter a drop filter . The log stream filter may include one or more filtering criteria based at least in part on output of the log stream parsing agent the log stream record validation agent and or the log stream record classification agent . Alternatively or in addition the log stream filter may be configured to operate in a high volume low cost mode with a subset of log stream parsing agent functionality for example utilizing pass and or drop filters specified with regular expressions.

The log stream sampling agent may be configured at least to sample a log stream received by the agent . For example the log stream sampling agent may form an outgoing log stream that includes a sample e.g. a representative sample of log records in the received log stream. The log stream sampling agent can help reduce log stream processing costs in a log stream processing graph. For example the log stream sampling agent can reduce log stream volume prior to computationally expensive processing by an agent that is downstream in the log stream processing graph. The log stream sampling agent may implement any suitable sampling technique. For example the log stream sampling agent may randomly and or pseudorandomly sample log records from the incoming log stream systematically sample log records from the incoming log stream e.g. sample every klog record first stratify the log records by log record class e.g. as determined by the log stream record classification agent and or suitable combinations thereof.

The log stream aggregation agent may be configured at least to aggregate log records in a log stream received at the agent . Log records may be aggregated by log record class e.g. as determined by the log stream record classification agent generation time e.g. a timestamp added when the log record was written to the log stream with the log stream interface of and or any suitable log record attribute including log record fields and field values. For example a sequence of n log records having a same classification within a particular time period may be aggregated as a single new aggregate log record with fields corresponding to 

The log stream metric agent may be configured at least to determine a metric and typically a time series thereof based at least in part on a log stream received at the agent and or an output of the log stream parsing agent the log stream record validation agent the log stream record classification agent the log stream filtering agent the log stream sampling agent and or the log stream aggregation agent . For example the log stream metric agent may determine the metric based on data field values parsed by the log stream parsing agent . The log stream metric agent may determine any suitable metric including linear and nonlinear functions of data field values and or statistical summaries thereof such as sums averages minimums maximums and standard deviations over suitable time periods e.g. 1 5 15 30 and or 60 minute summary buckets . Further examples of suitable metrics include log record counts log record rates log record counts by log record class or type log record rates by class or type as well as integrals and derivatives of data field values with respect to time.

The log stream archive agent may be configured at least to archive a log stream received by the agent . For example the log stream archive agent may store the log records in the log stream with the log stream storage component . Alternatively or in addition log stream archive agent may be configured to relay the log stream to a configured provider instance such as one of the provider instances . The log stream archive agent may cooperate with the log stream storage component to provide various views of the stored log records. For example the log stream archive agent may identify and or determine the application service provider provider instance s and log stream name associated with the received log stream and provide the associated information to the log stream storage component . The log stream storage component may then make stored log records available for browsing with any suitable log record browser including suitably adapted file browsers and or web browsers and organized by application service provider and log stream name. The log stream archive agent may further identify and or determine one or more log record classes one or more provider instances and or one or more times associated with log records in the received log stream and provide this further associated information to the log stream storage component to at least in part enable organization by log record class provider instance and or time periods of any suitable length.

The log stream alarm agent may be configured at least to generate alarms based at least in part on a log stream received by the agent and or an output of the log stream parsing agent the log stream record validation agent the log stream record classification agent the log stream filtering agent the log stream sampling agent the log stream aggregation agent and or the log stream metric agent . For example the log stream alarm agent may generate an alarm responsive to a variety of alarm generation conditions including detection of specified log record field values and or patterns of values detection of an invalid log record and or a threshold number thereof detection of a log record of a specified class and or a threshold number thereof a specified metric crossing a specified threshold and or suitable combinations thereof. Suitable such alarm generation conditions may further specify that the condition persist for at least a threshold duration before triggering alarm generation that particular alarms be generated at a rate no greater than a specified maximum rate and or that such determinations be made on a per instance basis i.e. that alarm generation conditions be determined with respect to data filtered by provider instance . The log stream alarm agent may publish alarms to subscribers with a publish subscribe mechanism of the infrastructure of the computing cloud . For example particular log stream alarm agent instances may publish alarms to a configured topic maintained by the publish subscribe mechanism.

The log stream custom agent may incorporate custom log stream processing code in accordance with a log stream processing agent programming interface. For example the log stream processing agent programming interface may provide a set of log stream processing operations for utilization by the custom log stream processing code including log stream processing operations corresponding to those performed by others of the log stream agent prototypes . Alternatively or in addition the log stream processing agent programming interface may modify a conventional programmatic platform e.g. by constraining conventional functionality to reduce a risk of and or potential damage from malicious code. Furthermore the log stream agent instance management component may scan and or test log stream custom agent instances for malicious code and or behavior prior to their being added to the log stream agent set .

Each of the log stream agent sets may be arranged in a sub graph of the log stream processing graph . Furthermore each of the log stream agent sets and may correspond to a log stream processing phase and respectively. For example the log stream agent set of the initial log stream processing phase may include agents configured for high volume low cost log stream processing the log stream agent set of the final log stream processing phase may include agents configured for low volume high cost log stream processing and the log stream agent set of to the intermediate log stream processing phase may include agents configured for intermediate volume intermediate cost log stream processing. Of course log stream processing graphs in accordance with at least one embodiment may include any suitable number and or type of log stream processing phases including a single such processing phase.

As an example the initial log stream agent set may include a log stream splitting agent instance that routes the unprocessed log stream to a log stream record validation agent instance a log stream aggregation agent instance and the second log stream agent set . The log stream record validation agent instance may enhance the log stream with log record invalid flags and stream it to a log stream alarm agent instance which is configured to generate an alarm if the log record invalid flag is set. The log stream aggregation agent instance may be configured to aggregate log records in the incoming log stream effectively compressing and or reducing a volume of the log stream . The compressed log stream may then be streamed to the log stream storage for later inspection.

The intermediate log stream agent set may include a log stream sampling agent instance configured to stratify the incoming log stream by log record class and pseudorandomly sample the log records in each strata. The sampled log records may be streamed to a log stream splitting agent instance which may route the log stream to a log stream metric agent instance and the third log stream agent set . The log stream metric agent instance may apply a specified linear transformation to a specified set of data field values in a specified class of log records and at five minute intervals write a set of values summarizing the metric over the last five minutes e.g. average value standard deviation and rate of change to the output log stream for storage in the log stream storage . The second log stream agent set is downstream from the first log stream agent set and upstream from the third log stream agent set . The terms downstream and upstream may similarly be applied to particular log stream processing agents arranged in log stream processing graphs such as the log stream processing graph . The third log stream agent set may include a log stream custom agent instance configured to perform complex high cost processing on the log stream and to generate the output log stream as a result.

The log stream provisioning interface may include any suitable set of interface elements for provisioning log streams. Such interface elements may include interface elements that facilitate creation viewing modification and or deletion of log streams as well as association of log stream end points with provisioned provider instances log stream processing agents and or log stream processing graphs such as the log stream processing graph of . Interface elements that facilitate creation of log streams may accept parameters including log stream name a log stream encryption flag indicating whether the log stream is to be encrypted an optional encryption key and or estimated log stream volume e.g. log record rate . As will be appreciated by one of skill in the art the computing cloud may maintain a set of encryption keys for enhancing the privacy of intra cloud communications. Costs associated with log streams may be obtained through the log stream provisioning interface . In accordance with at least one embodiment a cost may be determined for any suitable attribute of a log stream including computing resource utilization.

The log stream processing agent provisioning interface may include any suitable set of interface elements for provisioning log stream processing agents and or log stream processing graphs such as the log stream processing graph of . Such interface elements may include interface elements that facilitate instantiation configuration inspection modification and or deletion of log stream processing agent instances as well as creation viewing modification and or deletion of log stream processing graphs including designation of log stream processing graph root nodes. Log stream processing agents may be instantiated based at least in part on log stream agent prototypes as well as suitable log stream agent prototype configuration parameters. Costs associated with log stream processing agents and or log stream processing graphs may be obtained through the log stream processing agent provisioning interface . In accordance with at least one embodiment a cost may be determined for any suitable attribute of a log stream processing agent and or log stream processing graph including computing resource utilization.

Provider instances being virtual computer systems may require an initialization step. At step the provider instance may be initialized. For example the provider instance may be initialized by the application service provider with the provisioning interface . The provider instance may initialize automatically subsequent to provisioning. As part of provider instance initialization or as depicted in subsequent to provider instance initialization at step a connection to the log stream processing graph may be established. For example the log stream gateway may negotiate and or establish a communication connection with a root agent of the log stream processing graph . The communication connection may be established independent of a user of the log stream interface . In at least one embodiment steps and are part of a log stream per instance initialization process in which multiple provider instances may be initialized.

At step an application at the provider instance may be started. For example the administrator of the provider instance may start the application . At step one or more log records may be written to the log stream. For example the application may write one or more log records to the log stream provisioned at step . The application may write the log record s to the log stream with the log stream interface . At step the log stream may be processed in real time or substantially real time in accordance with the log stream processing graph. For example the log record s written to the log stream by the application may be streamed to a root log stream processing agent of the log stream processing graph provisioned at step . The log record s may then be processed in real time or substantially real time by log stream processing agents corresponding to nodes in the log stream processing graph in an order corresponding to the order of nodes in the log stream processing graph.

The log stream processing of step may change dynamically in response may be dynamically responsive to reconfigurations of at least the log stream the log stream processing agents e.g. the log stream agent sets of and or the log stream processing graph . For example the log stream may be streamed to another log stream processing graph as an alternative or in addition to the log stream processing graph multiple log streams may be directed to the root of the log stream processing graph the composition of the log stream agent sets may change and or the log stream processing graph may be dynamically reconfigured to immediately change how the log stream is processed.

The log stream processing graph may have been initially provisioned by the application service provider utilizing the provisioning interface and may have been faithfully processing the log stream throughout the first time period. At the end of the first time period the application service provider may dynamically reconfigure the log stream processing graph again utilizing the provisioning interface to create the log stream processing graph . During a second time period beginning at time t the log stream processing graph may process the log stream according to the new configuration.

The example depicted in shows the log stream processing graph including each of the agent instances of the initially provisioned log stream processing graph . Of course this need not be the case. Such reconfiguration may include any suitable combination of agent instance addition deletion and reconfiguration. The log stream processing graph further includes a log stream filtering agent instance a log stream alarm agent instance another log stream metric agent instance and another log stream archive agent instance . In the reconfigured log stream processing graph the splitting agent streams a further copy of the log stream to the filtering agent . The filtering agent filters the log stream copy to form a filtered log stream and streams the filtered log stream to the alarm agent . The alarm agent monitors the filtered log stream for alarm conditions and generates alarms when the alarm conditions are met. In addition in the reconfigured log stream processing graph the sampling agent has been reconfigured to stream a copy of the sampled log stream to the new metric agent instance . The metric agent derives another metric from the sampled log stream and streams a time series of the new metric to the new archive agent for archiving and later inspection.

From the point of view of the application service provider the dynamic reconfiguration of the log stream processing graph may occur immediately. However there may a transition period for example to allow the old log stream processing graph to reach a stable transition state. depicts example steps for dynamic reconfiguration of log streams log stream processing agents and or log stream processing graphs in accordance with at least one embodiment. At step a configuration may be edited. For example the application service provider may edit a configuration of a log stream a log stream processing agent e.g. the log stream processing agent instance of and or a log stream processing graph e.g. the log stream processing graph with the provisioning interface . At step changes to the configuration made at step may be committed. For example the provisioning interface may include a facility to commit a set of configuration changes atomically and or as a whole. Steps and are shown included in a dashed box to indicate that these steps may be performed by and or through the provisioning interface . Following steps may be performed by other appropriate components in the infrastructure portion of the computing cloud .

At step a reconfiguration notification may be received. For example the log stream processing component may receive notification that the log stream processing graph is to be reconfigured. At step a new configuration may be initialized. For example the log stream processing component may initialize the new log stream processing graph . At step the old configuration may be stabilized. For example the log stream processing component may buffer the log stream until the old log stream processing graph is empty. At step the new configuration may be activated. For example the log stream processing component may allow the log stream to flow through the new log stream processing graph . As will be apparent to one of skill in the art the steps of may be applied to individual log stream processing agents as well as log streams.

At step a request may be sent to create a workflow based at least in part on the one or more actions determined at step . For example the provisioning interface may send the request to the workflow component . The request to create the workflow may include the action s action metadata such as type of action and or action parameters. In at least one embodiment the control plane and or the workflow component maintains a job queue for such requests and workflows are created responsive to new additions to the job queue. At step a workflow and one or more component tasks may be created. For example the workflow component may analyze the request of step to determine the appropriate workflow and component tasks to create.

At step execution of the component task s may be guided in accordance with the workflow. For example the workflow component may activate elements of interfaces of components of the application space portion and or the infrastructure portion of the computing cloud . Alternatively or in addition the workflow component may manage bids for execution of the component task s by components of the computing cloud . At step it may be determined whether the workflow has finished. For example the workflow component may determine whether a final task in a sequence of tasks managed by the workflow has completed. If so a procedure including step may progress to step . Otherwise the procedure may return to step for a next task and or task sequence. Workflows may guide multiple task sequences executing in parallel. In this case it may be that the workflow is not finished until each of the multiple task sequences completes and or an explicit workflow finished flag is set by one of the component tasks. At step the sender of the request of step may be informed of the result s of the action s .

The various embodiments described herein may be implemented in a wide variety of operating environments which in some cases may include one or more user computers computing devices or processing devices which may be utilized to operate any of a number of applications. User or client devices may include any of a number of general purpose personal computers such as desktop or laptop computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also may include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also may include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP OSI FTP UPnP NFS CIFS and AppleTalk. Such a network may include for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof. The network may furthermore incorporate any suitable network topology. Examples of suitable network topologies include but are not limited to simple point to point star topology self organizing peer to peer topologies and combinations thereof.

In embodiments utilizing a Web server the Web server may run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment may include a variety of data stores and other memory and storage media as discussed above. These may reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device may include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also may include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader may be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules including program modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be utilized and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code may include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which may be utilized to store the desired information and which may be accessed by the a system device. Program modules program components and or programmatic objects may include computer readable and or computer executable instructions of and or corresponding to any suitable computer programming language. In at least one embodiment each computer readable medium may be tangible. In at least one embodiment each computer readable medium may be non transitory in time. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

The use of the terms a and an and the and similar referents in the context of describing embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments and does not pose a limitation on the scope unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of at least one embodiment.

Preferred embodiments are described herein including the best mode known to the inventors. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments to be constructed otherwise than as specifically described herein. Accordingly suitable embodiments include all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is contemplated as being incorporated into some suitable embodiment unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

