---

title: Systems and methods for automatically detecting backdoors
abstract: Techniques for detecting malicious attacks may monitor activities during execution of content (e.g., network downloads and email) to identify an instruction backdoor on a computer. An instruction backdoor is malware that opens a port for listening for instructions from a remote server. Such instructions may trigger activation of malicious activity. These techniques employ virtual machines that, in a controlled and monitored environment, permit content, when loaded and executed, to open ports. When those ports are not the authorized ones used for communications by known programs installed on the computer, an instruction backdoor is discovered.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990944&OS=08990944&RS=08990944
owner: FireEye, Inc.
number: 08990944
owner_city: Milpitas
owner_country: US
publication_date: 20130223
---
The present invention relates generally to network security and more particularly to detecting malicious software operating in computers and other digital devices.

Malicious software or malware for short may include any program or file that is harmful by design to a computer. Malware includes computer viruses worms Trojan horses adware spyware and any programming that gathers information about a computer or its user or otherwise operates without permission. The owners of the computers are often unaware that these programs have been added to their computers and are often similarly unaware of their function.

Malicious network content is a type of malware distributed over a network via websites e.g. servers operating on a network according to an HTTP standard or other well known standard. Malicious network content distributed in this manner may be actively downloaded and installed on a computer without the approval or knowledge of its user simply by the computer accessing the web site hosting the malicious network content the malicious web site . Malicious network content may be embedded within objects associated with web pages hosted by the malicious web site. Malicious network content may also enter a computer on receipt or opening of email. For example email may contain an attachment such as a PDF document with embedded malicious executable programs. Furthermore malicious content may exist in files contained in a computer memory or storage device having infected those files through any of a variety of attack vectors.

Various processes and devices have been employed to prevent the problems associated with malicious content. For example computers often run antivirus scanning software that scans a particular computer for viruses and other forms of malware. The scanning typically involves automatic detection of a match between content stored on the computer or attached media and a library or database of signatures of known malware. The scanning may be initiated manually or based on a schedule specified by a user or system administrator associated with the particular computer. Unfortunately by the time malware is detected by the scanning software some damage on the computer or loss of privacy may have already occurred and the malware may have propagated from the infected computer to other computers. Additionally it may take days or weeks for new signatures to be manually created the scanning signature library updated and received for use by the scanning software and the new signatures employed in new scans.

Moreover anti virus scanning utilities may have limited effectiveness to protect against all exploits by polymorphic malware. Polymorphic malware has the capability to mutate to defeat the signature match process while keeping its original malicious capabilities intact. Signatures generated to identify one form of a polymorphic virus may not match against a mutated form. Thus polymorphic malware is often referred to as a family of virus rather than a single virus and improved anti virus techniques to identify such malware families is desirable.

Another type of malware detection solution employs virtual environments to replay content within a sandbox established by virtual machines VMs . Such solutions monitor the behavior of content during execution to detect anomalies that may signal the presence of malware. One such system offered by FireEye Inc. the assignee of the present patent application employs a two phase malware detection approach to detect malware contained in network traffic monitored in real time. In a first or static phase a heuristic is applied to network traffic to identify and filter packets that appear suspicious in that they exhibit characteristics associated with malware. In a second or dynamic phase the suspicious packets and typically only the suspicious packets are replayed within one or more virtual machines. For example if a user is trying to download a file over a network the file is extracted from the network traffic and analyzed in the virtual machine. The results of the analysis aids in determining whether the file is malicious. The two phase malware detection solution may detect numerous types of malware and even malware missed by other commercially available approaches. Through verification the two phase malware detection solution may also achieve a significant reduction of false positives relative to such other commercially available approaches. Dealing with false positives in malware detection may needlessly slow or interfere with download of network content or receipt of email for example. This two phase approach has even proven successful against many types of polymorphic malware and other forms of advanced persistent threats.

Further enhancement to malware detection effectiveness while avoiding false positives is desirable of course particularly as malware developers continue to create new forms of exploits.

Embodiments of the invention may automatically detect a type of malicious software running in a computer or other digital device called by the coined term instruction backdoor. An instruction backdoor is malware that opens a communications channel preferably a communication port for listening for instructions or other communications from an external malicious computer system or program. Characteristically the communications are effected in a clandestine fashion. For example such instructions may trigger activation of or otherwise control a Trojan Horse or other sleeper virus or otherwise direct activity of malicious code that has previously gained entry into the digital device through other means.

In some embodiments detection of an instruction backdoor may be carried out within a virtual machine that mimics a real digital device and in a controlled and monitored environment permits content whether network downloads email files or other objects when loaded and executed therein to open one or more local communication ports to listen for instructions from a supposed decoy external server or program. When those communication ports are not the authorized ones used for communications by programs installed on the digital device by its user or administrator an instruction backdoor may be discovered. The inventors recognized that key to detecting instruction backdoors are listened to ports rather than ports involved in communication connections. Embodiments may monitor listened to ports in digital devices to detect instruction backdoors during normal operation or during diagnostic or forensic testing of the digital device. Upon detecting an instruction backdoor embodiments of the invention may issue an alert report the incident as malware isolate the affected digital device from network communication or take other steps to remediate.

Using backdoors of the type described herein as a keystone of malicious attack and exploit analysis may permit embodiments of the invention to detect disparate forms of malware and even families of polymorphic virus that use the same communication mechanisms to obtain instructions and other communications in furtherance of their nefarious purposes.

Generally speaking a backdoor is a type of or part of an active infiltration attack that uses an entry point into a digital device whether an undocumented entry point or subverted use of a documented entry point. In so doing the backdoor bypasses normal security and authentication mechanisms and thereby achieves unauthorized often remote access to the computer. A hallmark of backdoors is the manner by which they provide access is designed to remain undetected to the digital device s user and system network administrators.

Generally herein instruction backdoor will be used in the foregoing sense of being malware itself it may also be viewed as denoting the instrumentality or mechanism associated with an attack such as a communications channel or port in which case detection of the instruction backdoor is tantamount to detecting an attack leading to the conclusion that malware is present. This later sense should be regarded as merely a different perspective of the same concept as will be apparent to those of skill in the art in light of this specification. Also while this specification often states that content comprising a malware candidate or test sample opens an instruction backdoor it will be understood that this phrasing is intended to encompass the typical situation where a program processing content may open an instruction backdoor as a result of malicious code within the content. After all it may be the program that sends system calls to open a port for listening even a black port.

As used herein a digital device may include any form or type of computer such as a client server desk top or notebook mobile device such as a smart phone or tablet or other device apparatus or system equipped for communications over a network such as the Internet or an intranet . The terms digital device and computer or computer system may be used interchangeably herein unless the context requires otherwise.

An instruction backdoor may be designed to use an otherwise innocuous local entry point on an affected digital device and subvert it for its own malicious purposes often targeting a personal computer running Microsoft Windows and Microsoft Outlook. The entry point may allow instructions to be received from the network by malicious code executing on the digital device which directs the malicious code for example to take surreptitious control of the digital device or a program installed thereon or may install a new unauthorized program. For example the malware may be directed by a malicious external server to take control of electronic mail to spam junk emails from the infected computer or to install and use data gathering agents to steal sensitive personal proprietary or even classified military or other governmental data.

Network content may include any data transmitted over a network. Network data may include text software images audio or other digital data. An example of network content includes web content or any network data that may be transmitted using a Hypertext Transfer Protocol HTTP HyperText Markup Language HTML protocol other data transfer protocols such as File Transfer Protocol FTP or be transmitted in a manner suitable for display on a web browser software application. Other examples of network content include email messages and Instant Messages. Network content may include one or more objects encapsulated in packets for communication. The packets may include a network header carrying information used for addressing routing and otherwise delivering the network content and a data payload carrying the network content.

Discovery of an instruction backdoor in accordance with embodiments of the invention may involve execution of content constituting a malware candidate within a virtual environment. An illustrative technique may inspect a malware candidate and in response use a virtual machine configured to mimic a target computer or other digital device having a pre determined software profile to detect the instruction backdoor. The software profile specifies at least one program and an operating system to be executed by the digital device. The malware candidate is then executed or replayed in the virtual machine which may execute the specified program s and operating system in a virtualized environment and monitor the behavior of the program s during execution. Important to embodiments of the invention is that the monitored behavior may include attempts by any of the program s to open and listen to one or more ports provided by the virtual machine. As used herein the terms computer program and application may be used interchangeably unless the context requires otherwise.

More specifically embodiments of the invention employ a backdoor detection analyzer to identify a port number associated with each computer port at which the malware candidate is listening if any during its execution in the virtual machine and in some embodiments for purposes hereof associated with only the listened to ports. Embodiments of the invention may detect attempts to open and listen to ports by intercepting system calls issued by the program to bind and listen to specific ports or alternatively by reading data providing port number process identifier ID associations stored by the operating system s network service module. It should be recalled that a process in this sense is an instance of a computer program being executed. The backdoor analyzer may then determine whether the identified port number of the port at which the malware candidate is listening is a legal or white port. This may be achieved through a look up in a blacklist repository of ports that are not legal i.e. black ports or alternatively in both a blacklist repository of black ports and a whitelist repository of white ports. The whitelist repository may store port numbers of white ports which in alternative embodiments may include a ports that program s specified by the software profile may use for listening in accordance with their respective associated protocols and applicable standards and specifications or b ports that programs that generally run on digital devices of any relevant type or of a specific type e.g. tablet computer or desktop are authorized to use for listening. The blacklist repository may store port numbers of black ports which in alternative embodiments may include a ports other than white ports b ports that are opened for listening by known malware or a specific type of malware that the system is to detect or c ports that satisfy both a and b . Known malware is intended to encompass content that is verified to contain malware such as through a verification process provided by embodiments of the invention described herein or by other reliable methodologies.

In some embodiments if the malware candidate listens at a port whose port number is on the blacklist the malware candidate is associated with a high probability of containing malware. In other embodiments if the content listens at a port whose port number is on the blacklist and not on the whitelist the malware candidate is associated with a high probability of containing malware. The latter embodiments provide a level of additional protection since it may be deemed an error to have the port number on both the blacklist and whitelist and its inclusion on both lists may require further review and testing. When a malware candidate is considered to have a high probability of being malware it may be recommended that the content be treated as being malware for practical purposes to contain or eliminate the threat that it poses to the network devices and or data.

Embodiments of the invention may monitor communications channels in digital devices to detect instruction backdoors during normal operation or during diagnostic or testing. Utilities running in the background may monitor all ports during execution of programs and perform look ups in the appropriate repositories either in real time or off line to detect instruction backdoors. The embodiments described herein may also be put into practice at malware forensic labs whose purpose is to detect verify and study malware candidates for any reason. Occasionally the reason may involve prior non conclusive testing of the content by any of various known malware detection systems including the commercially available systems and utilities described hereinabove. Another reason may involve analysis of malware candidates to identify a root cause of seemingly malicious harm suffered by one or more digital devices.

Accordingly sources of content comprising malware candidates may be of various types such as web pages emails and files as typically received by or stored in a digital device. The term sources should be broadly construed. The content may be delivered to the backdoor detection system on a storage medium or may constitute portions of network traffic that underwent malware detection previously and require further analysis.

Embodiments of the backdoor detection system may be deployed as a stand alone system or integrated into malware detection systems that examine and analyze other additional characteristics or attributes of the content that may indicate the presence of malware such as for example malware signature scanning utilities or the afore mentioned two phase malware detection solutions. For example the instruction backdoor detection mechanism described herein can be added to appliances and other systems for detecting malware either by adding a virtual machine execution capability to such systems or by adding the appropriate aspects regarding port detection described herein to two phase malware detection systems that already employ virtual execution environments.

Upon detecting an instruction backdoor embodiments of the invention may issue an alert report the incident as malware isolate the affected digital device from network communication or take other steps to remediate.

Since the constructs of computer ports listening and connections are important to the understanding of embodiments of the invention those constructs will now be described in greater detail.

As used herein a port serves as a communications endpoint in a computer s operating system. A port is associated with an IP address of the computer as well as the type of protocol used for communication. A port is a program specific software construct in that i each port provided by a computer s operating system may be uniquely associated at any point of time with a specific program running on the computer or in other words the port is bound to the program and ii plural ports may share a single physical connection to a packet switched network such as for example the Internet.

For network communication a computer forms packets for transmission by adding a destination port number to a destination computer s IP address to form the destination address for a communications session and the destination address is then placed in the packets headers. The data packets are placed on the network and routed across the network to the specified IP address and then upon reaching the destination computer having that IP address are further routed to the specific process identified by the destination port number.

The TCP IP protocol for example uses port numbers to identify both the sending and receiving end points called internal sockets. Each side of a TCP connection has an associated e.g. 16 bit port number reserved by the sending or receiving program. Arriving TCP IP data packets are identified as belonging to a specific TCP IP connection by its sockets that is the combination of source address source port destination address and destination port. The specifics of communications depend on the protocol however continuing the discussion with TCP IP as the example the steps involved in establishing a socket for communication between a server and client will next be described. A program running on a server creates a socket by issuing a SOCKET system call to its operating system. Next it binds the socket to an IP address using a BIND system call specifying a port number on the host machine. Next the server listens for connections with a LISTEN system call. Afterwards a program on another computer serving as a client may accept a connection with an ACCEPT system call to its operating system. By doing so the client connects with the server or in other words a connection is made. Thereupon data may be sent and received between the server and client over the connection. The connection continues until closed at the end of the data transfer by exchanging control and acknowledgment packets between the server and client.

Accordingly when a program running on a computer is waiting for another computer to connect with it the program is said to be listening for connections or in a listening state . In other words the program or at least an instance of the program attaches or binds to a port of the computer on which it is executing and waits for a connection. Once a program binds itself to a port that port cannot be used by any other program until communication has ended and the program has disconnected. When a remote computer connects to that particular port it is said to be establishing a connection and initiating a communication session between the two computers. The way it does this is set forth in applicable standards and specifications governing communications in the relevant protocol.

Thousands of ports are specified by communications related Requests for Comment RFC Protocol Standards and technical specification documents of software vendors such as Microsoft Inc. and Oracle Corp. of which far fewer are well known and widely used to identify specific types of protocols and services on a computer. The port numbers are assigned by the Internet Assigned Numbers Authority IANA . Examples of well known ports include Ports 20 21 for File Transfer Protocol FTP Port 22 for Secure Shell SSH Port 23 for Telnet remote login service Port 25 for Simple Mail Transfer Protocol SMTP Port 40 for TCP Port 53 for Domain Name System DNS service Port 80 for Hypertext Transfer Protocol HTTP used in the World Wide Web Port 110 for Post Office Protocol POP3 Port 161 for Simple Network Management Protocol SNMP and Port 443 for HTTP Secure HTTPS .

A couple examples may prove useful. Web servers typically bind to the TCP IP authorized port 80 which is what the HTTP protocol uses by default and then will wait and listen for connections from remote devices. Once connected the web server will send the requested web pages to the remote device and when done disconnect the connection. On the other hand the remote device connecting to a web server may do this in reverse. The remote web browser may pick an available port in a seemingly random fashion from a range of port numbers authorized for the TCP IP protocol and attempt to connect to port 80 at the IP address of the web server. When the connection is established the web browser may send a request for a particular web page and receive the requested web page from the web server. Afterwards the two computers may disconnect the connection. Concurrent communications from both a web server and an FTP server may be established. An FTP server is a server that allows transfer to and receipt of files from remote computers under the FTP protocol. FTP servers typically use TCP ports 20 and 21 to send and receive information therefore an FTP server program may bind itself to TCP ports 20 or 21 to listen and wait for connections in order to send and receive data. It follows that such communications will not normally conflict with a web server running on TCP IP port 80.

The virtual execution engine includes a scheduler a replayer a virtual switch and at least one virtual machine . The scheduler receives content e.g. packets from the source s assigns an execution priority to the packets and schedules the packets for execution by the virtual execution engine . The execution priority may be set automatically by default as first in first out or may reflect a different order of execution indicative of a perceived seriousness of a malware issue. The priority may be set or modified by a user through a user interface such as a user interface . The scheduler may save or cache the packets priority and associated schedule for execution in a repository such as one of the repositories .

The scheduler retrieves the packets from the repository in accordance with its schedule and provides them to the replayer which sends them via the virtual switch to the virtual machine for execution also known as replay . In some embodiments the replayer mimics the behavior of a server in transmitting them to the virtual machine which mimics a client in a server client model. There may be any number of replayers each associated with and acting as a virtual server to one or more virtual machines . In a further embodiment the replayer may dynamically modify session variables as appropriate to emulate a real server of the content being replayed. In other embodiments the replayer furnishes the packets to a virtual machine which simulates a stand alone digital device such as a server or client. The virtual switch may route data packets to select ports of the virtual machine that would normally be used for communication between a server and client for the applicable communication protocol such as TCP IP.

The virtual machine includes a simulation of the digital device. In one embodiment the scheduler retrieves an instance of the virtual machine from a pool of preferably concurrently existing virtual machine which may be pre configured to mimic a digital device in accordance with a software profile. The software profile specifies an operating system and at least one computer program may be provided by the source along with the content to be tested and establishes the runtime environment for virtual execution of program s included in the software profile. The configured virtual machine is then ready to provide virtual execution of packets.

As the virtual machine executes the packets the backdoor detection analyzer monitors its behavior closely for unauthorized activity and in particular for instance for any and all black ports within the virtual machine opened by objects for listening. In one example the backdoor analyzer may upon detecting opening of a black port for listening transmit a command to the virtualized digital device to stop execution. However it is preferable to allow execution to proceed so that the backdoor detection analyzer can detect additional illegal or unauthorized activity such as the opening of additional black ports which may further evidence the characteristic behavior of malware contained in the content under test.

In some embodiments the backdoor detection analyzer monitors and analyzes the behavior of the virtual machine in order to determine and identify a specific type of malware such as malware of a specific family of polymorphic virus. The backdoor detection analyzer may also pursue remediation for example through generating computer code configured to eliminate the malware or malicious network content or limit its propagation. In various embodiments the backdoor detection analyzer generates computer code configured to repair damage performed by malware.

The controller may also have a communication network interface an input output I O interface and a user interface . The communication network interface may be coupled with a communication network via a communication medium . The communications network interface may communicate with other digital devices not shown via the communications medium . The communication interface may include a network tap . The bus may provide communications between the communications network interface the processor the memory system the storage system the I O interface and the user interface .

The I O interface may include any device that can receive input from or provide output to a user. The I O interface may include but is not limited to a flash drive a compact disc CD drive a digital versatile disc DVD drive or other type of I O peripheral not separately shown . The user interface may include but is not limited to a keyboard mouse touchscreen keypad biosensor display monitor or other human machine interface not separately shown to allow a user to control the controller . The display monitor may include a screen on which is provided a command line interface or graphical user interface.

As noted above the controller may implement the backdoor detection system . In other embodiments of the invention a number of different controllers for example each as illustrated and described for controller may be used to implement the backdoor detection system. For example a plurality of controllers not separately shown may be used to implement the virtual execution engine the backdoor analyzer and the event generator and reporting module .

In alternative embodiments the whitelist may include a ports that program s specified by the software profile are authorized to use for listening in accordance with their respective associated protocols and applicable standards or b ports that programs that generally run on digital devices of any type or of a specific type e.g. tablet computer or desktop are authorized to use for listening in accordance with their respective associated protocols and applicable standards. For example RFC 959 File Transfer Protocol FTP as promulgated by the Network Working Group Internet Society 1985 specifies that ports 20 and 21 may be used for listening for FTP complying communications with an FTP server and so the whitelist may include both ports 20 and 21. RFC 2476 Message Submission as promulgated by the xxx 1995 specifies that ports 25 and 587 may be used SMTP complying email communications with an email server and so the whitelist may include both ports 25 and 587 for programs that use SMTP for communications. RFC 2616 specifies that port 80 is used for HTTP complying accesses to web content.

As an alternative to referencing separately all those documents a compilation of authorized ports may be had with reference to certain websites which have already collected information about ports. For example speedguide.net offers a website providing information about ports at http www.speedguide.net port.php port 1111. An advantage of this approach is that the resulting stored whitelist may be suitable for use across a plurality of different potential malware candidates specific software profiles.

Accordingly in some embodiments the generation and storage of the whitelist may be regarded as infrastructural and malware detection may then be carried out expeditiously on more than one malware candidate without interruption to develop a new whitelist for each profile. Embodiments of the invention may alternatively employ a whitelist specific to the software profile associated with each malware candidates being evaluated. Accordingly the whitelist may need to be changed and the repository updated for each malware candidate before testing on that candidate may be conducted. This latter approach may increase the accuracy of malware detection in embodiments that rely on the whitelist since the authorized ports in the whitelist so generated will likely be fewer in number. Accordingly if the software profile includes a web server application the whitelist for that software may list ports 80. Similarly if the software profile includes an SMTP server Microsoft Exchange the whitelist for that software may list port 25. If the software profile included both a web server and an email server then the whitelist would include 80 25.

Finally in step the resulting whitelist port numbers are stored in data structures in a whitelist repository .

In step the method detects any ports at which the sample of malware is listening for example in accordance with the approaches described above in conjunction with and in step determines if the port number of each port at which the sample of malware is listening is legal. To accomplish this the method extracts the port number and compares the port number with port numbers in the whitelist obtained from the whitelist repository . The whitelist repository stores a whitelist of legal ports and may be generated in accordance with any the embodiments described in connection with . If the port number matches any of the entries in the whitelist the method continues at step with another sample from the sample repository .

In step if the port number is not on the whitelist the port number of the port at which the sample of malware was listening is stored to a blacklist repository and is available thereafter for use in testing unknown though possibly suspicious samples which are also herein called malware candidates. Such use may be on the any backdoor detection system including the one performing the method . Where it is desired to have other backdoor detection systems avail themselves of the updated backlist in step the revised backlist or just the updates to the blacklist may be distributed to other backdoor detection systems perhaps on a paid subscription basis. In that way subscribers to the updates can remain current in recognizing non legal ports opened for listening by verified malware for digital devices with the same or similar software profiles.

The RSQ receives or otherwise obtains a software profile with the content to be tested. The software profile may specify the operating system and one or more specific programs including version identifiers thereof for software intended for execution in the digital device e.g. client device of which is to be simulated by the virtual execution engine . For example the software profile may specify a specific Microsoft Windows operating system version XX and Microsoft Internet Explorer version YY and so forth.

The virtual execution engine includes a VM configurator a replayer and one or more virtual machines VMs all coupled for communication with one another either directly or indirectly . The VM configurator is adapted to configure one or more VMs in accordance with a software profile provided by the RSQ that is at least one of the VMs will be furnished with copies of the same software programs preferably at the same release version level for execution in a virtual environment. The replayer may serve to provide the content to the one or more VMs as though it were a source device transmitting content over a network. Alternatively and depending on the nature of the content the replayer may provide the content to the VMs simply by loading the content as a file or other object. The latter approach is particularly useful where the content constitutes data at rest rather than data in flight.

The backdoor detection analyzer includes a port detector blacklist comparator and in some embodiments a signature generator all coupled for communication with one another either directly or indirectly . The port detector monitors the one or more VMs executing the content to detect any and all ports that the content has opened for listening for example using any of the approaches described above in conjunction with and preferably only those listened to ports and not ports used for connections during communications. The port numbers of those ports are extracted and provided to the blacklist generator which compares them to port numbers i.e. black ports in a blacklist repository for example where the stored blacklist was generated pursuant to . If any of the port numbers of listened to ports match port numbers of black ports the blacklist repository is updated with their port numbers. The signature generator receives the content corresponding to the newly identified blacklisted port numbers and forms a signature for use in identifying that content. The signature can be formed by applying any of numerous known hash functions to the content for example as will be understood to those of ordinary skill in the art.

The report module includes an event alert generator an intelligence sharing module a user interface and an I O interface all coupled for communication with one another either directly or indirectly . The alert event generator receives metadata regarding the newly determined malware containing content such as the port numbers that it attempted to open for listening as well as its signature. The alert event generator may generate an alert or a report to be displayed or otherwise presented on a management console displayed via the GUI and or emailed or otherwise sent to a user or administrator via the I O interface . The metadata and signature can also be shared with other often remote malware detection systems see or other often remote management consoles via the intelligence sharing module .

The backdoor detection system may be implemented by one or more controllers each in one embodiment in the form of controller .

In step the content is executed in the virtual execution environment established by the configured virtual machine. In step any ports opened for listening by the content is detected during execution of the content in the virtual machine. For this purpose the virtual machine may be equipped with one or more virtual agents each configured to monitor behavior and or state of the program s and operating system executing within the virtual machine during processing of the malware candidate. The virtual machine may implement any of the approaches to detect listened to ports as described in conjunction with above. In step the method determines whether any such opened ports are listed in a blacklist supplied by a blacklist repository . If none are on the blacklist the method ends with respect to the content under test. Other content may then be tested.

If the port number is on the blacklist in step an alert is generated to indicate that the malware candidate is associated with a high probability that it contains malware. Next in some embodiments in step the method may generate a signature for the detected malicious content as described elsewhere herein. Also the signature and test results may be uploaded to a malware management system or otherwise shared with other malware detection systems that can use the signatures for expedited evaluation of other content that may have signatures that match the current signature.

The virtual execution engine includes a VM configurator a replayer and one or more virtual machines VMs all coupled for communication with one another either directly or indirectly . The VM configurator is adapted to configure one or more VMs in accordance with a software profile provided by the RSQ . The replayer serves to provide the content to the VMs as though it were a source device transmitting content over a network or by loading the content as a file or other object.

The backdoor detection analyzer includes a port detector blacklist comparator whitelist comparator backdoor detection logic engine and in some embodiments a signature generator all coupled for communication with one another either directly or indirectly . The port detector monitors the one or more VMs executing the content to detect any and all ports that the content opens for listening and preferably on those listened to ports and extracts the port numbers for those ports. To that end the port detector may advantageously implement any of the approaches for detecting listened to ports described above in conjunction with . The port numbers of those ports are provided to the blacklist comparator which compares them to port numbers in a blacklist repository i.e. a list of known black ports for example generated pursuant to . The port numbers of those ports are also provided to a whitelist comparator which compares them to port numbers in a whitelist repository for example generated pursuant to . Backdoor logic engine applies predetermined rules to the results of the comparisons of the comparators . If those port numbers match an entry in the blacklist repository and do not match an entry in the whitelist repository the backdoor logic engine determines that the content contains malware or at least has a high probability of containing malware. The backdoor logic engine may assign a probability score to the content indicating that high probability. For example a probability score of 70 to 100 may be assigned.

The signature generator receives the content having high probability scores of containing malware and forms a signature from that content for use in identifying that content. The signature may be formed by applying any of numerous known hash functions to the content for example as will be understood to those of ordinary skill in the art. The signature may be used in anti virus scanning utilities and other malware detection systems for example.

In various embodiments the report module may include an event alert generator a blacklist updater an intelligence sharing module a user interface and an I O interface all coupled for communication with one another either directly or indirectly . The alert event generator receives metadata regarding the newly determined malware containing content such as the port numbers that it attempted to open for listening as well as its signature at least in some embodiments. The alert event generator may generate an alert or a report to be displayed or otherwise presented on a management console see displayed via a user interface and or emailed or otherwise sent to a user or administrator via the I O interface . The metadata and signature may also be shared with other often remote malware detection systems see or other often remote management consoles via the intelligence sharing module . Where no indication of instruction backdoors is found that too may be reported by the report module .

The backdoor detection system may be implemented by one or more controllers each in one embodiment in the form of controller .

In step the content is executed in the virtual execution environment established by the configured virtual machine. In step any port opened for listening by the content and preferably only those ports is detected during execution of the content in the virtual machine in accordance with any of the approaches described above in conjunction with . In step the method determines whether any such opened port is listed in a whitelist supplied by a whitelist repository . In step the method determines whether any such opened port is listed in a blacklist supplied by a blacklist repository .

Next in step a backdoor logic engine may combine the results from steps and by applying the following logic If the port number has a match in the blacklist but not in the whitelist in step an alert is generated signaling a high probability that the content contains malware. If the port number matches neither any entry in the blacklist nor any entry in the whitelist the port number is added to the blacklist in step and the method proceeds to step as described above. If the part number matches entries in both the whitelist and the blacklist or matches only an entry in the whitelist but not in the blacklist a report is generated in step to the effect that additional testing is required. After step in step in some embodiments a signature is generated for the content and in step the signature and test results are uploaded both as described previously.

In some embodiments a backdoor detection system may utilize only a whitelist of listened to ports generated as described above and stored in a whitelist repository rather than a blacklist as in the foregoing embodiments. Accordingly if content opens a port for listening that has a port number not on the whitelist the content is deemed to have a probability score indicating a high probability of containing malware or at least a probability score indicating that the content is suspicious and may require further evaluation.

The malicious network content detection system may monitor exchanges of network content e.g. web content in real time rather than intercepting and holding the network content until such time as it can determine whether the network content includes malicious network content. The malicious network content detection system may be configured to inspect exchanges of network content over the communication network identify suspicious network content and analyze the suspicious network content using a virtual machine to detect malicious network content. In this way the malicious network content detection system may be computationally efficient and scalable as data traffic volume and the number of computing devices communicating over the communication network increase. Therefore the malicious network content detection system may not become a bottleneck in the computer network system .

The communication network may include a public computer network such as the Internet in which case a firewall may be interposed between the communication network and the client device . Alternatively the communication network may be a private computer network such as a wireless telecommunication network wide area network or local area network or a combination of networks. Though the communication network may include any type of network and be used to communicate different types of data communications of web data may be discussed below for purposes of example.

The malicious network content detection system is shown as coupled with the network by a network tap . The network tap may include a digital network tap configured to monitor network data and provide a copy of the network data to the malicious network content detection system . Network data may comprise signals and data that are transmitted over the communication network including data flows from the server device to the client device . In one example the network tap monitors and copies the network data without an appreciable decline in performance of the server device the client device or the communication network . The network tap may copy any portion of the network data for example any number of data packets from the network data. In embodiments where the malicious content detection system is implemented as an dedicated appliance or a dedicated computer system the network tap may include an assembly integrated into the appliance or computer system that includes network ports network interface card and related logic not shown for connecting to the communication network to non disruptively tap traffic thereon and provide a copy of the traffic to the heuristic module . In other embodiments the network tap can be integrated into a firewall router switch or other network device not shown or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to copy traffic from virtual networks.

The network tap may also capture metadata from the network data. The metadata may be associated with the server device and or the client device . For example the metadata may identify the server device and or the client device . In some embodiments the server device transmits metadata which is captured by the tap . In other embodiments a heuristic module described herein may determine the server device and the client device by analyzing data packets within the network data in order to generate the metadata. The term content as used herein may be construed to include the intercepted network data and the metadata unless the context requires otherwise.

The malicious network content detection system may include a heuristic module a heuristics database a scheduler a virtual machine pool an analysis engine and a reporting module . In some embodiments the network tap may be contained within the malicious network content detection system .

The heuristic module receives the copy of the network data from the network tap and applies heuristics to the data to determine if the network data might contain suspicious network content. The heuristics applied by the heuristic module may be based on data and or rules stored in the heuristics database . In one example the heuristic module flags network data as suspicious after applying a heuristic analysis. The suspicious network data may then be provided to the scheduler . In some embodiments the suspicious network data is provided directly to the scheduler with or without buffering or organizing one or more data flows.

When a characteristic of the packet such as a sequence of characters or keyword is identified that meets the conditions of a heuristic a suspicious characteristic of the network content is identified. The identified characteristic may be stored for reference and analysis. In some embodiments the entire packet may be inspected and multiple characteristics may be identified before proceeding to the next step. In some embodiments the characteristic may be determined as a result of an analysis across multiple packets comprising the network content. A score related to a probability that the suspicious characteristic identified indicates malicious network content is determined.

The heuristic module may also provide a priority level for the packet and or the features present in the packet. The scheduler may then load and configure a virtual machine from the virtual machine pool in an order related to the priority level and dispatch the virtual machine to the analysis engine to process the suspicious network content.

The heuristic module may provide the packet containing the suspicious network content to the scheduler along with a list of the features present in the packet and the malicious probability scores associated with each of those features. Alternatively the heuristic module may provide a pointer to the packet containing the suspicious network content to the scheduler such that the scheduler may access the packet via a memory shared with the heuristic module . In another embodiment the heuristic module may provide identification information regarding the packet to the scheduler such that the scheduler replayer or virtual machine may query the heuristic module for data regarding the packet as needed.

The scheduler may identify the client device and retrieve a virtual machine associated with the client device . A virtual machine may itself be executable software that is configured to mimic the performance of a device e.g. the client device . The virtual machine may be retrieved from the virtual machine pool . Furthermore the scheduler may identify for example a web browser running on the client device and retrieve a virtual machine associated with the web browser.

In some embodiments the heuristic module transmits the metadata identifying the client device to the scheduler . In other embodiments the scheduler receives one or more data packets of the network data from the heuristic module and analyzes the one or more data packets to identify the client device . In yet other embodiments the metadata may be received from the network tap .

The scheduler may retrieve and configure the virtual machine to mimic the pertinent performance characteristics of the client device . In one example the scheduler configures the characteristics of the virtual machine to mimic only those features of the client device that are affected by the network data copied by the network tap . The scheduler may determine the features of the client device that are affected by the network data by receiving and analyzing the network data from the network tap . Such features of the client device may include ports that are to receive the network data select device drivers that are to respond to the network data and any other devices coupled to or contained within the client device that can respond to the network data. In other embodiments the heuristic module may determine the features of the client device that are affected by the network data by receiving and analyzing the network data from the network tap . The heuristic module may then transmit the features of the client device to the scheduler .

The virtual machine pool may be configured to store one or more virtual machines. The virtual machine pool may include software and or a storage medium capable of storing software. In one example the virtual machine pool stores a single virtual machine that can be configured by the scheduler to mimic the performance of any client device on the communication network . The virtual machine pool may store any number of distinct virtual machines that can be configured to simulate the performance of a wide variety of client devices .

The analysis engine simulates the receipt and or display of the network content from the server device after the network content is received by the client device to analyze the effects of the network content upon the client device . The analysis engine may identify the effects of malware or malicious network content by analyzing the simulation of the effects of the network content upon the client device that is carried out on the virtual machine. There may be multiple analysis engines to simulate multiple streams of network content. The analysis engine may be configured to monitor the virtual machine for indications that the suspicious network content is in fact malicious network content. Such indications may include unusual memory accesses unusual network transmissions unusual changes in performance and the like. Importantly such indications may also include the detection of an instruction backdoor. The detection of the instruction backdoor may be used to indicate that that the network content contains malware. Indeed in some embodiments the conclusion that malware is present with a high probability may be predicated solely on the detection of an instruction backdoor. In other embodiments the conclusion that malware is present with a high probability may be predicated on detecting plural indications that the suspicious network content is in fact malicious network content including the detection of an instruction backdoor. The analysis engine may flag the suspicious network content as malicious network content according to the observed behavior of the virtual machine. The reporting module may issue alerts indicating the presence of malware and using pointers and other reference information identify the packets of the network content containing the malware. Additionally the server device may be added to a list of malicious network content providers and future network transmissions originating from the server device may be blocked from reaching their intended destinations e.g. by firewall .

The computer network system may also include a further communication network which couples the malicious content detection system MCDS with one or more other MCDS of which MCDS and MCDS are shown and a management console . The communication network may in some embodiments be coupled for communication with or part of network . The management console is responsible for managing the MCDS and providing updates to their operation systems and software programs. Also the management console may cause malware signatures generated by any of the MCDS to be shared with one or more of the other MCDS for example on a subscription basis. Moreover the backdoor detection system as described in the foregoing embodiments may be incorporated into one or more of the MCDS or into all of them depending on the deployment. Also the management console itself or another dedicated computer station may incorporate the backdoor detection system in deployments where such detection is to be conducted at a centralized resource.

Further information regarding an embodiment of a malicious content detection system can be had with reference to U.S. Pat. No. 8 181 553 the disclosure of which being incorporated herein by reference in its entirety.

The embodiments discussed herein are illustrative. As these embodiments are described with reference to illustrations various modifications or adaptations of the methods and or specific structures described may become apparent to those skilled in the art. For example aspects of the invention may be performed by executable software such as a program or operating system. For example embodiments of the invention may be implemented in an operating system instance which monitors any and all ports that an executing program i.e. a process has requested be opened for listening as by for example tracking system calls received by the operating system instance from the program instance. If the ports are included on a blacklist available to the operating system instance then it may report an instruction backdoor. For example where the program instance is a browser a web page being downloaded for display may be associated with a high probability of containing malicious code or where the program instance is an email application an email or attachment to an email being processed for display may be associated with a high probability of containing malicious code. Of course the operating system may incorporate other aspects of the invention instead of or in addition to that just described as will be appreciated in light of the description contained in this specification. Similarly a utility or other program may also implement the invention. Noteworthy these embodiments need not employ a virtual environment but rather test for an instruction backdoor during normal execution of a program within a computer system.

It should be understood that the operations performed by the above described illustrative embodiments are purely exemplary and imply no particular order. Further the operations can be used in any sequence when appropriate and can be partially used. With the above embodiments in mind it should be understood that the present invention may employ various computer implemented operations involving data stored in computer systems. These operations include physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared and otherwise manipulated.

Any of the operations described herein are useful machine operations. The present invention also relates to a device or an apparatus for performing these operations. The apparatus can be specially constructed for the required purpose or the apparatus can be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines can be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations or multiple apparatus each performing a portion of the operations. Where apparatus or components of apparatus are described herein as being coupled or connected to other apparatus or other components the connection may be direct or indirect unless the context requires otherwise.

The present invention can also be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter be read by a computer system. Examples of the computer readable medium include hard drives flash drives read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion. The computer readable medium can also be distributed using a switching fabric such as used in computer farms.

The above described components modules and engines may be comprised of instructions that are stored on storage media e.g. non transitory computer readable media . The instructions may be retrieved and executed by a processor. Some examples of instructions include software program code and firmware. Some examples of storage media comprise memory devices and integrated circuits. The instructions are operational when executed by the processor to direct the processor to operate in accordance with embodiments of the present invention. Those skilled in the art are familiar with instructions processor s and storage media.

It will be appreciated by those of ordinary skill in the art that modifications to and variations of the above described embodiments of a system and method of detecting backdoors and malware may be made without departing from the inventive concepts disclosed herein. Accordingly the specification and drawings are to be regarded as illustrative rather than restrictive and the invention should not be viewed as limited except as by the scope and spirit of the appended claims. It will be recognized that the terms comprising including and having as used herein are specifically intended to be read as open ended terms of art.

