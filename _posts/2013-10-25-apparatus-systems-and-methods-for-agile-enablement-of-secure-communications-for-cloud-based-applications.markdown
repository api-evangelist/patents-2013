---

title: Apparatus, systems and methods for agile enablement of secure communications for cloud based applications
abstract: Embodiments disclosed facilitate secure communication for cloud-based and/or distributed computing applications. In some embodiments, a method may comprise: instantiating a first Virtual Machine (VM) on a cloud infrastructure, wherein the at least one first VM is dynamically configured with a private key and a wildcard security certificate comprising a public key corresponding to the private key, and registering, with a domain name server, a domain name derived from an Internet Protocol (IP) address associated with the first VM and a Common Name associated with the wildcard security certificate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09485099&OS=09485099&RS=09485099
owner: CLIQR TECHNOLOGIES, INC.
number: 09485099
owner_city: San Jose
owner_country: US
publication_date: 20131025
---
The present invention relates to the field of distributed computing and in particular to apparatus systems and methods to facilitate secure communications for cloud based applications.

The performance of computing applications may often be increased by distributing the computational workload across nodes in a networked cluster of computers. A physical networked cluster of computers is often referred to as a cloud or cloud infrastructure or simply an infrastructure. The underlying physical hardware associated with clouds which can include servers memory storage and network resources may be viewed as virtualized units. These virtualized units represent some fraction of the underlying computing hardware or resources supported by the cloud. Therefore from a logical perspective clouds may be viewed as a collection of virtual machines VMs . A cloud node or node may be responsible for the control and operation of one or more VMs and there may be several nodes per cloud. Typically a cloud may provide a variety of VM types with different computing CPU memory storage networking and Operating System OS options.

Clouds thus may be viewed as services that provide access to infrastructure remotely including compute storage and network resources so that the resources can be reserved provisioned accessed and released programmatically. For example programmatic interfaces such as Application Programming Interfaces APIs System Development Kits SDKs Web Services etc. may be used to access resources made available by clouds remotely over a wide area network WAN . For example in publicly available clouds or public clouds these resources can be accessed programmatically over the Internet and are made available as VMs on a pay per use basis.

Cloud computing infrastructures offer several benefits over fixed on premise datacenters server farms desktop computers etc collectively referred to as organizational infrastructure including the capability to dynamically spawn or tear down a large number of VMs rapidly. However when applications running on one or more of the newly spawned VMs attempt to communicate securely for example using the hypertext transfer protocol secure https with Secure Sockets Layer SSL and or Transport Layer Security TLS certificates human intervention or complicated schemes are often used to enable secure communication. The use of complicated schemes protocols and or human intervention to correctly configure https over SSL TLS in cloud based environments is impractical and unwieldy and also creates delays.

Thus there is a need for systems methods and apparatus that facilitate the mapping and binding of SSL TLS certificates to domain names of dynamically spawned VMs transparently in cloud based and or distributed computing environments while also maintaining system integrity. Accordingly disclosed embodiments facilitate secure communication for cloud based and or distributed computing applications.

Consistent with embodiments disclosed herein apparatus systems and methods for facilitating secure communications for cloud based applications are presented. In some embodiments a method may comprise instantiating a first Virtual Machine VM associated with a cloud based application on a cloud infrastructure wherein the first VM is dynamically configured with a private key and a wildcard security certificate comprising a public key corresponding to the private key and registering with a domain name server a domain name derived from an Internet Protocol IP address associated with the first VM and a Common Name associated with the wildcard security certificate.

In some embodiments the method may be implemented using a virtual appliance configured with the security certificate and wherein the virtual appliance instantiates the first VM. In some embodiments the method may be implemented using a cloud agnostic service. In some instances the cloud agnostic service may take the form of an infrastructure independent representation that is implemented by utilizing at least one cloud specific implementation of the infrastructure independent representation of the cloud agnostic service and wherein the at least one cloud specific implementation of the cloud agnostic service corresponds to the cloud infrastructure.

In some embodiments the domain name server may take the form of a DNS authoritative name server for a domain corresponding to the Common Name. In some embodiments the domain name server may be a second VM running on the cloud infrastructure. In some embodiments the wildcard security certificate may be a X.509 based certificate such as a wildcard Secure Sockets Layer SSL or wildcard Transport Layer Security TLS certificate.

In some embodiments the method may further comprise determining an expiry date associated with the wildcard security certificate. The method may further comprise dynamically obtaining a new wildcard security certificate specifying the Common Name upon detecting that the wildcard security certificate has expired or dynamically obtaining a new security certificate security certificate specifying the Common Name upon detecting that the period for expiry of the wildcard security certificate is within a threshold. In some embodiments the newly obtained wildcard security certificate may be dynamically installed on the first VM.

Disclosed embodiments also pertain to an apparatus comprising at least one processing system coupled to a cloud based infrastructure the at least one processing system comprising a secure communication module wherein the secure communication module is configured to dynamically configure a first VM with a private key and a wildcard security certificate comprising a public key corresponding to the private key and register with a domain name server a domain name derived from an Internet Protocol IP address associated with the first VM and a Common Name associated with the wildcard security certificate. In some embodiments the secure communication module may form part of a virtual appliance configured with the security certificate and wherein the virtual appliance instantiates the first VM.

In some embodiments the secure communication module may be further configured to dynamically determine an expiry date associated with the wildcard security certificate. Further the secure communication module may be configured to perform at least one of dynamically obtaining a new wildcard security certificate specifying the Common Name upon detecting that the wildcard security certificate has expired or dynamically obtaining a new security certificate security certificate specifying the Common Name upon detecting that the period for expiry of the wildcard security certificate is within a threshold.

Disclosed embodiments also pertain to an apparatus comprising at least one processing means the processing means coupled to cloud based infrastructure means wherein the at least one processing means comprises a secure communication means wherein the secure communication means further comprises means to dynamically configure a first VM with a private key and a wildcard security certificate comprising a public key corresponding to the private key and means for registering with a domain name server a domain name derived from an Internet Protocol IP address associated with the first VM and a Common Name associated with the wildcard security certificate.

Disclosed embodiments also pertain to a computer readable medium comprising instructions which when executed by a processor perform steps in a method comprising instantiating a first Virtual Machine VM associated with a cloud based application on a cloud infrastructure wherein the first VM is dynamically configured with a private key and a wildcard security certificate comprising a public key corresponding to the private key and registering with a domain name server a domain name derived from an Internet Protocol IP address associated with the first VM and a Common Name associated with the wildcard security certificate.

Embodiments also relate to software firmware and program instructions created stored accessed or modified by processors using computer readable media or computer readable memory. The methods described may be performed on processors various types of computers and computing systems including distributed computing systems such as clouds. The methods disclosed may also be embodied on computer readable media including removable media and non transitory computer readable media such as but not limited to optical solid state and or magnetic media or variations thereof and may be read and executed by processors computers and or other devices.

In accordance with embodiments disclosed herein apparatus systems and methods to facilitate secure communications for cloud based applications are presented.

In Application may send Connection Identification Request to server . For example Application may request a connection by initiating a protocol for secure connection with server . In some instances the connection request may include a request for identification information from server .

In Server may respond to Connection Identification Request by sending SSL Certificate Public Key . In general any appropriate security certificate asymmetric public key may be sent by server in response to Connection Identification Request . The term security certificate which is also called a public key certificate digital certificate or identity certificate is used to refer to an electronic document that uses a digital signature to bind a public key with an identity. The identity may pertain to an entity and the certificate can be used to verify that the public key is associated with the entity. Typically in public key infrastructure PKI schemes the security certificate may be signed by a certificate authority CA . The CA may be a trusted entity that issues digital certificates. Each digital certificate issued by the CA certifies ownership of a public key by a subject named on the certificate thereby facilitating reliance e.g. by a third party on signatures or assertions made using a private key that corresponds to the certified public key. In PKI infrastructure models the CA is a party trusted by the subject or owner of the certificate and by the party relying upon the certificate issued by the CA.

For example the SSL certificate may have been obtained earlier from a trusted CA or may have been generated by an entity associated with server and may include a Public Key for server . SSL TLS https certificates typically include domain names for server which may be based on the Domain Name System DNS . The certificates may for example be X.509 certificates. In cryptography X.509 is an International Telecommunications Union Standardization Sector ITU T standard for a PKI and Privilege Management Infrastructure PMI . X.509 specifies standard formats for public key certificates certificate revocation lists attribute certificates and a certification path validation algorithm.

DNS which is a hierarchical distributed naming system for entities such as computers services and or resources connected to the Internet or private networks helps associate information with the domain names assigned to each of its constituent entities. For example DNS may be used to translate domain names such as cliqr.com to numerical Internet Protocol IP addresses used to locate the entities.

DNS uses distributed databases based on a client server model where database nodes constitute name servers. Each domain has at least one authoritative DNS server that publishes information about that domain including any name servers of sub domains.

The top of the hierarchy is served by root name servers which resolve Top Level Domain TLD names. Each domain sub domain under the TLD may be served by one or more authoritative name servers which may be queried for information pertaining to their respective domains. When an authoritative name server is unable to respond to a request for information for a domain the request may be propagated to name servers higher up in the DNS hierarchy.

The DNS architecture facilitates quick user transparent updates to the DNS databases when there are changes associated with a domain name. Thus for example users may continue to use the domain names such as cliqr.com even when one or more underlying IP addresses associated with the domain cliqr.com have changed.

After starting in step where initialization routines and housekeeping operations may be performed in step a counter i may be set to 1. Counter i may be used to maintain a count of the servers requesting certificates.

In step a Certificate Signing Request CSR may be generated by server using an application and or API on the server to obtain an X.509 certificate such as a SSL TLS certificate. For example the CSR may include the name of the entity e.g. the organization requesting the certificate the domain name where the certificate will be installed and various other information. The domain name for example may be the Fully Qualified Domain Name FQDN or the web address where the SSL TLS Certificate will be used. Typically SSL TLS certificates include a Distinguished Name DN record. The DN record may further include the following fields Country State or province Locality or city Organization Organizational Unit and Common Name. The Common Name field refers to the domain name e.g. x.cliqr.com of the server or VM associated with the certificate.

In step a certificate may be obtained from a CA. For example upon successful execution of the CSR a private key and a CSR data file may be created. The private key and CSR data file may be sent to the CA which may use the information to create an SSL TLS certificate and a public key to match the private key without compromising the private key. Typically a certificate is valid only for the associated FQDN. For example a certificate associated with the FQDN x.cliqr.com may not be valid for y.cliqr.com .

In step the SSL TLS certificate obtained in step may be installed on Server i. If there are additional servers Y in step then in step the counter i is incremented by one and another iteration is begun at step . If there are no additional servers N in step the method terminates in step .

Referring to in Server may respond to Connection Identification Request for example by sending a previously obtained SSL Certificate Public Key associated with server .

In Application may check the certificate root against a list of trusted CAs and verify that the certificate is unexpired and unrevoked. Further Application may verify and that the common name associated with the certificate is valid for server . If Application trusts the certificate it may create encrypt and send back encrypted session key which may be a symmetric key encrypted using the public key of server .

In server decrypts the encrypted symmetric session key using its private key and sends back acknowledgement encrypted with session key to start an encrypted session.

In application and server may now communicate securely by encrypting exchanged data with the session key.

When the methods described above are used with cloud based applications and or distributed applications where VMs may be brought up and or torn down dynamically no automatic user transparent processes exist to dynamically obtain and or associate certificates with newly spawned VMs so that secure communication may be facilitated with the newly spawned VMs. This is because a cloud based application may spawn tens or hundreds of VMs when running. Further one or more existing VMs may be torn down dynamically during runtime and the IP addresses associated with these VMs may be dynamically reallocated to other VMs. Therefore traditional methods of obtaining and deploying certificates are either infeasible or cumbersome and may adversely affect application performance.

Therefore some embodiments described herein facilitate agile secure communications for cloud based applications.

Exemplary User Interface Layer may facilitate user configuration of system and may comprise Application Importer Module Policy Setting Module and Execute Module . For example Application Importer Module may be used to import an application profile security certificates e.g. an X.509 certificate including https SSL TLS certificates and certificate expiry date information and other application specific information.

In some embodiments the certificates associated with an application may be wildcard certificates. Wildcard certificates are special certificates which may allow web hosts and enterprises to secure unlimited sub domains of a domain name on a single certificate. For example wildcard certificates may use Subject Alternative Names SANs to secure a domain and or one or more of its first level subdomains. For example a wildcard certificate associated with cliqr.com may be used to facilitate secure communication with x.cliqr.com y.cliqr.com and or z.cliqr.com . Wildcard certificates may also simplify the certificate life cycle management processes by removing the need to manage and track multiple individual certificates. In some embodiments wildcard certificates associated with an application being imported may also be imported by Application Importer module . The term wildcard certificate is used to refer to the certificates because the first string in the Common Name associated with a wildcard certificate may be the wildcard character which indicates that any DNS conforming string is acceptable in its place. For example if the Common Name associated with a wildcard certificate is .cliqr.com then the domains x.cliqr.com y.cliqr.com and z.cliqr.com may use the above wildcard certificate for secure communications.

Exemplary User Interface Layer may also include various end user modules that permit user customization and configuration of system . Exemplary Application Importer Module may facilitate the importation of new applications into system . In some embodiments imported applications may be displayed to users using a desktop style view where icons representing the various applications are shown to the user in a window or browser tab. In some embodiments pre published applications in a marketplace associated with system for example applications in an application library or app store associated with or supported by system may be imported by users directly onto their desktop view. In some embodiments Application Importer Module may allow users to license or buy one or more of pre published applications.

In general any software application may be imported using exemplary Application Importer Module in User Interface Layer . For example an organization may deploy a desktop application on a cloud to be shared by users e.g. employees and or customers . In some embodiments the application and any associated security certificates which may also be associated with the organization or entity may be imported using Application Importer module .

In some embodiments Policy Settings Module may provide appropriate graphical user interfaces and other features to permit users to set modify and or delete policies which may be implemented using Policy Engine . For example users may set policies that limit the clouds and or configurations that specific user s and or application s may use limit the monetary budget available for an application run or a series of runs etc.

In some embodiments Execute Module may provide user interfaces to permit users to select an application a cloud from available clouds . . . N associate other user configurable settings with the application and execute the application on the selected cloud .

In addition as indicated by the dashed lines User Interface Layer may include several other modules not shown to allow users to specify system functionality related to reporting auditing billing and permit viewing of application files and data on shared storage. For example Reporting may provide analytical reports and runtime statistics over and or other information. The reports may be diced and sliced based on user application and or other criteria. Auditing may use agent monitoring to track user actions and report them. Billing may track the price of each job for invoicing to the customer. Modules in User Interface Layer may also allow users to set permissions and other attributes on application and storage files in order to facilitate sharing and collaboration with other users.

Exemplary Cloud Provisioning and Management Layer may facilitate the management of cloud resources prepare applications for deployment on one or more clouds and may include Cloud Standardization Layer . Exemplary Cloud Provisioning and Management Layer may also include exemplary Orchestrator module and System Manager module .

In some embodiments Cloud Standardization Layer may include functionality to facilitate standardization of library constructs such as shared storage network cluster security etc. across a variety of cloud providers. Although cloud providers may have provider specific Application Programming Interfaces APIs and other infrastructure differences Cloud Standardization Layer may provide applications a cloud agnostic or a cloud infrastructure independent view of resources including compute storage and network resources. For example Cloud Standardization Layer can be a repository for various functional modules that permit applications to utilize various resources including shared storage server types clusters and features such as queues security etc. on each cloud in a cloud agnostic manner.

In some embodiments Cloud Standardization Layer may maintain resource standardizations for various clouds such as exemplary clouds . . . N as well as references to cloud specific implementations of the standardizations for each cloud . In some embodiments exemplary Cloud Standardization Layer may also maintain service level agreements SLAs capability information about each cloud resource information pertaining to cloud availability reliability and security and performance and pricing information. Information may be maintained by Cloud Standardization Layer by using metadata XML files or databases which in some implementations may be persistent. In some implementations the capability information can be stored as key value pairs in a database. Because individual clouds may have different capabilities for a standardized resource type capability information may be indexed by cloud.

Exemplary Cloud Provisioning and Management Layer may also include exemplary Orchestrator module and System Manager module . In some embodiments System Manager may manage user information and coordinate various user tasks with Orchestrator . For example System Manager may receive maintain and update user information cloud information application related information e.g. application profile security certificates such as X.509 certificates including https SSL TLS certificates and certificate expiry date information and other data such as job history housekeeping information etc. In some embodiments System Manager may provide information about the application being deployed. In some embodiments System Manager may also facilitate user views of application files and data on shared storage may move the application files and data to cloud storage and synchronize the application files and data between clouds.

In some embodiments System Manager may serve as a storehouse and manager of information pertaining to user activities. For example System Manager may act as a management layer to initiate and manage application deployment and monitoring activities. For example System Manager may store persist and or provide information imported by Application Importer Module including security certificate information e.g. X.509 certificate information such as https SSL TLS certificate information and certificate expiry date information associated with an application entity.

In one embodiment System Manager may interact with modules in User Interface Layer in order to facilitate the performance of management tasks on applications that may have been initiated by the user through User Interface Layer . Management tasks facilitated by System Manager may include for example initiating application deployment facilitating secure communications configuring user and cloud accounts specifying policies for application runs and specifying base metrics around desired application price and performance.

In addition System Manager may also manage automated tasks which in some embodiments may have been initiated by Orchestrator . System Manager may also call or invoke functions implemented by Orchestrator in order to perform various system related activities. For example System Manager may invoke Secure Communications Module to facilitate secure communication with a new VM spawned by a cloud based application. In some embodiments System Manager may maintain a relational database or data repository with information pertaining to system users including user authentication and authorization information a list of clouds . . . N and available cloud configurations for each cloud information pertaining to applications entities such as X.509 certificate information which may include https SSL TLS certificate information certificate expiry date information policies that a user may have specified etc.

In some embodiments Orchestrator may use a common application representation to deploy and run a given application on any cloud irrespective of implementation differences pertaining to the provisioning and utilization of application resources on the individual clouds in part by using functionality provided by Cloud Standardization Layer . In some embodiments Orchestrator may include a cloud coordinator or gateway.

In some embodiments the common application representation may take the form of application descriptors not shown which may be input to Orchestrator . In some embodiments a user may specify applications to import using Application Importer module and application descriptors which may include various primitives such as pattern and system primitives may be used to describe applications to Cloud Standardization Layer .

The pattern and system primitives may describe the execution patterns as well as node storage communication and network characteristics pattern and system primitives. Exemplary application descriptors can include information such as application software and hardware requirements application profile whether memory intensive Input Output intensive CPU intensive etc. specification of a distributed computing paradigm application steps for workflow style applications . These primitives Orchestrator and cloud coordinator gateway have also been described in greater detail in co pending U.S. patent application Ser. No. 13 024 302 filed Feb. 9 2011 entitled Apparatus Systems and Methods for Deployment and Management of Distributed Computing Systems and Applications which has been incorporated by reference in its entirety into the present application.

In some embodiments Orchestrator may facilitate the deployment running and monitoring of applications on various clouds. For example Orchestrator may dynamically build clusters on a selected cloud for application execution in response to an execute command entered by a user using an interface presented by Execute module . In some embodiments Orchestrator module may interact with Policy Engine Secure Communication Module and various other modules not shown depicted by the dashed line between the listed modules.

Orchestrator may maintain routines and other program code that implement algorithms for deploying optimizing managing and monitoring application runs on clouds. In some embodiments routines and other functions performed by Orchestrator may be managed and initiated by the System Manager . Orchestrator may also report back the status and results of the various orchestration activities to System Manager . In one embodiment Orchestrator may directly query System Manager for information such as application data policies and cloud information.

Policy Engine may help enforce customer user and or administrator policies. For example Policy Engine may enforce policies set by users through Policy Setting Module that specify uptime criteria for clouds and or applications that may be candidates for an application run or the maximum budget per user over some period or maximum application runtime on a cloud .

In some embodiments Secure Communications module may provide functionality to associate wildcard certificates with VMs spawned by an application. The wildcard certificates may be associated with an entity and a domain where an application may be run and or deployed. In some embodiments Secure Communications module may be invoked and provide functionality to spawn VMs and associate appropriate SSL TLS https wildcard certificates with the VMs. In some embodiments the SSL TLS https wildcard certificates may be obtained by querying System Manager and or from a cache and or from one or more databases maintained by System Manager . In some embodiments Secure Communications module may register the VMs with a DNS server. For example in one embodiment functionality provided by Secure Communications module may be used to obtain an IP address such as X.Y.Z.W associated with the VM where 0 X Y Z W 255. In some embodiments functionality provided by Secure Communications module may be used to register a domain name associated with the VM. For example for a VM with IP address X.Y.Z.W spawned in a domain cliqr.com the domain name registered with the DNS name server may take the form X Y Z W.cliqr.com. In some embodiments the use of the IP address associated with a VM as part of its domain name may ensure that the domain name associated with each VM is unique. In general a name based at least in part on the IP address associated with the VM may be used to register the VM with the DNS server. In some embodiments various other techniques may be used to obtain the domain name for the VM. For example a string based on a function of the IP address or generated using a pseudo random process with the IP address as seed may be used. In some embodiments the use of the IP addresses appropriately modified to comply with domain naming schemes may also facilitate easy identification of VMs for debugging troubleshooting and other purposes.

In some embodiments in part by registering the VM with a DNS server and by associating wildcard certificates with a VM Secure Communications module may facilitate agile secure communications dynamically as new VMs are spawned by a distributed and or cloud based application. In some embodiments Secure Communications module may provide functionality to determine if one or more security certificates such as SSL TLS https certificates associated with an application have expired and or are about to expire and may alert an entity associated with the TLS SSL https to renew and or obtain a new certificate. For example an application related database maintained by System Manager may be queried to determine expired certificates. In some embodiments the validity period associated with a certificate may be stored as part of application related information by System Manager at the time an application is imported by Application Importer module .

In some embodiments Secure Communications module may be implemented in part as a cloud agnostic service that associates wildcard certificates to VMs running in a cloud and or registers the VM to be configured with a SSL TLS https certificate with a DNS server. In some embodiments the cloud agnostic service may be invoked to spawn VMs that use secure communication and or when new VMs that use secure communication are spawned. For example as discussed above for a VM with IP address X.Y.Z.W spawned in a domain cliqr.com the domain name registered with the DNS name server may take the form X Y Z W.cliqr.com. 

Further in some embodiments the cloud agnostic service associated with Secure Communications module may provide functionality to determine if one or more SSL TLS https certificates associated with an application have expired and or are about to expire and may alert an entity e.g. the domain owner associated with the TLS SSL https to renew and or obtain a new certificate.

In some embodiments Secure Communications module and or the cloud agnostic service associated with Secure Communications module may reside on an SSL configured Virtual Appliance. In general a software appliance is a software application which may be combined with an operating system so that the software can be run easily on industry standard hardware or virtual machines. A virtual appliance may be created when the installation of a software appliance on a virtual machine is packaged. Thus a virtual appliance refers to a virtual machine image that can run on a virtualization platform. A virtual machine image may take the form of a filesystem image and may include an operating system and the software required to deliver functionality or services. For example Secure Communications module and or the cloud agnostic service associated with Secure Communications module may form part of a virtual appliance which in some embodiments may also include one or more other modules software and or services. In some embodiments functionality provided by the virtual appliance may be used to register a VM with a DNS server and or associate appropriate wildcard certificates with the VM thereby facilitating agile secure communications dynamically as new VMs are spawned by a distributed and or cloud based application. For example as discussed above a name based at least in part on the IP address associated with the VM may be used to register the VM with the DNS server. In some embodiments the virtual appliance may provide functionality to determine if one or more SSL TLS https certificates associated with an application have expired and or are about to expire and may alert an entity associated with the TLS SSL https to renew and or obtain a new certificate.

Tasks performed by Orchestrator on Clouds may be facilitated by Cloud Standardization Layer . For example functionality provided by Cloud Standardization Layer permits Orchestrator to use infrastructure independent representations of application code to deploy applications. For example the cloud agnostic service associated with Secure Communications module may make use of functionality provided by Cloud Standardization Layer . In some embodiments the infrastructure independent or cloud independent or cloud agnostic program code may be common across all clouds because the Cloud Standardization Layer uses cloud specific Plugins APIs and Cloud Specific Libraries to perform tasks for Orchestrator on any given cloud 

In some implementations the deployment and running of applications and the dynamic management of clusters and other cloud resources may be facilitated by Cloud Application Deployment Layer . Cloud Application Deployment Layer may include Cloud Plugins Cloud APIs and Cloud Specific Libraries .

In some embodiments the dynamic management of clusters and other cloud resources may be facilitated by using a node management service running on a cloud coordinator gateway or gateway not shown for a specific cloud . The gateway may also maintain Cloud APIs such as Cloud 1 APIs Cloud 2 APIs etc. as well as Cloud specific Libraries such as Cloud 1 Specific Libraries Cloud 2 Specific Libraries etc. The node management service may act as an intermediate layer between the cloud provider and the cloud orchestrator code and facilitate the addition or removal of nodes.

Cloud Specific Libraries and Cloud APIs may comprise a library of implementations for primitives and composite interfaces respectively for a specific cloud . In some embodiments Cloud APIs and Cloud Specific Libraries may be invoked using Cloud Plugins . For example Cloud Plugins may be used to invoke appropriate Cloud APIs and routines from Cloud Specific Libraries that permit the deployment and running of applications on Clouds where the applications may have been described using application descriptors and standardized primitives from Cloud Standardization Layer .

In some embodiments when an application is to be deployed a gateway may use Cloud APIs and Cloud Specific Libraries library to perform deployment and execution tasks for its cloud . For example shared storage primitives on Cloud Standardization Layer may lead to instantiation of a DFS shared storage implementation on an Amazon cloud while instantiating the shared storage implementation on a Terremark cloud will set up NAS SAN. In some embodiments the gateway may also launch one or more agents which can be deployed on nodes on Clouds to monitor and report task status back to the gateway.

In some embodiments functionality specified or configured by the user in User Interface Layer may be implemented by one or more modules in the Cloud Provisioning and Management Layer and or Cloud Application Deployment Layer which in some implementations may include software agents running on a server and or on the various clouds. These software agents may monitor application runtime statistics collect cloud related information such as but not limited to cloud load information pricing information security information etc. and or collect information related to user actions.

In some embodiments the software agents may run on each VM and may periodically check the validity of installed security certificates such as https SSL TLS certificates and may communicate with System Manager . In some embodiments System Manager may trigger notifications to a cloud domain and or application administrator regarding renewal of the security certificates. In some embodiments System Manager may invoke an appropriate https SS TLS certificate vendor API to acquire new certificates and or renew certificates and install the certificates on the VM. For example new certificates may be obtained if a certificate has expired or if the expiration date of the current certificate falls within some threshold. The threshold may be some time period and may be specified relative to a point in time at which the certificate expiry date is determined. In some embodiments the threshold may be set in an application user profile and or may be some predetermined time period.

As another example the software agents may collect data for each application run which may include but is not limited to the time of the application run cloud name where the application was run cloud configuration for the application run the pricing of that configuration machine type cluster size storage size memory size network backbone type storage implementation data pertaining to success failure abnormal termination and cause latency length of an application run throughput number of transactions or requests cost etc.

For example an agent on each node of a cluster may monitor application runs for individual applications. The data gathered and reported by the agent at a cluster node may be aggregated and used at the gateway level to monitor to track performance and costs across applications for a user and or client. In some embodiments System Manager may aggregate data across users and or applications by cloud and store the data in a form that may be used for analytics and recommendation purposes.

In some embodiments cloud specific implementation of the distributed computing application may be derived from the infrastructure independent representation and the cloud specific implementation of the distributed computing application corresponding to the selected cloud configuration may be run on the selected cloud configuration. For example an infrastructure independent representation of a distributed computing application may be deployed and run on various cloud configurations such as on one or more of Amazon EC2 Terremark vCloud Rackspace Cloudserver Microsoft Azure Savvis or private clusters.

In some embodiments functionality provided by Secure Communications Module and or Virtual Appliance may be used to dynamically register one or more VMs 1 k M with DNS Name server and or associate appropriate wildcard certificates with VMs thereby facilitating agile secure communications dynamically as new VMs are spawned by a distributed and or cloud based application shown as App Servers 1 k M. For example in one exemplary implementation for an entity CliQr wildcard certificates may specify the Common Name as .cliqr.com and each VM may be named as X Y Z W.cliqr.com where X.Y.Z.W is the IP address associated with VM . In the example above functionality provided by Secure Communications Module and or Virtual Appliance may then be used to dynamically register one or more VMs using the name X Y Z W.cliqr.com with the appropriate Name Server .

For example an organization may share a desktop based application with users but may opt to deploy the application on a cloud where it may be accessed securely by users for example through a browser using the https protocol. The term desktop application is used to collectively refer to typical applications that are typically run locally on a single computer such as exemplary local computer system for example by a user at a terminal coupled to the computing system.

For example the desktop application may be hosted on one or more cloud nodes and accessed securely by users through a web browser. Cloud hosting of applications may offer several advantages including enhanced security higher availability of the application remote access lower costs etc. When https is used to secure communications with the cloud nodes SSL TLS https certificates may be used. Accordingly disclosed embodiments facilitate the dynamic association of the wildcard SSL TLS https certificate associated with the organization and the domain name application to cloud nodes running the application. Because cloud nodes running the application belong to the organization disclosed techniques facilitate dynamic association of the cloud nodes with a single security domain defined by the wildcard SSL TLS https certificate. Thus new nodes may join and leave the security domain on the fly in a user transparent manner without compromising security and or impacting application deployment and or performance. In some embodiments App Servers 1 k M may host the exemplary desktop application described above and or one or more additional cloud based applications. Embodiments disclosed thus facilitate an elastic security domain which may grow or shrink in accordance with the instantiating of new VMs and tearing down of existing VMs.

For example as discussed above a name based at least in part on the IP address associated with a VM may be used to register the VM with DNS Name Server . In some embodiments DNS Name Server may be implemented as VM . In some embodiments virtual appliance and or Secure Communications module and or a cloud agnostic service associated with Secure Communications module may keep track of application deployment on VMs e.g. by maintaining an application VM mapping and may update the wildcard SSL certificate on demand on one or more of the VMs . In another embodiment SSL certificate private key may be pre configured on a virtual appliance and new VMs may be spawned using virtual appliance .

In some embodiments virtual appliance and or Secure Communications module and or a cloud agnostic service associated with Secure Communications module may register a domain name which may be derived from the IP address associated with the VM . Thus even if an IP address of some VM is terminated during application execution and then gets reused during execution of the same application for a new VM the IP address domain name mappings will continue to hold and DNS name resolution will continue to work. In the example implementation describe above if the domain name of a VM with IP address 50.25.10.1 is 50 25 10 1.cliqr.com and the VM may uses a wildcard SSL certificate associated with Common Name .cliqr.com then if VM is torn down and a new VM is spawned at a later point with the same IP address and with wildcard SSL certificate with Common Name .cliqr.com then the DNS name 50 25 10 1.cliqr.com will resolve correctly to new VM thereby facilitating secure communication with new VM 

In some embodiments virtual appliance and or Secure Communications module and or a cloud agnostic service associated with Secure Communications module may i obtain and or be configured with wildcard SSL certificate and private key ii launch name server which may in some instances register with Authoritative DNS server as a name server for the domain cliqr.com iii instantiate VMs in cloud with wildcard certificate and private key and iv dynamically register the IP addresses of VMs with name server . In some embodiments where a virtual appliance is used VMs may be instances of virtual appliance . In some embodiments name server may in turn register with Authoritative DNS server to permit access to VMs over network .

In some embodiments as outlined earlier Secure Communications Module and or virtual appliance may also provide functionality to determine if one or more SSL TLS https certificates associated with an application have expired and or are about to expire and may alert an entity associated with the TLS SSL https to renew and or obtain a new certificate. For example new certificates may be obtained if a certificate has expired or if the expiration date of the current certificate falls within some threshold time period. In some embodiments the threshold may be set in an application user Secure Communications Module profile and or may be some predetermined time period.

In some embodiments method may be invoked in step . For example in some embodiments Secure Communication module may be invoked by System Manager . Secure Communication module may in turn invoke functionality provided by Cloud Standardization layer and Application Deployment layer.

In step VMs may be instantiated in a specific cloud along with wildcard certificate and private key associated with an entity owning a domain used by the application. For example one or more VMs may be instantiated with a wildcard SSL certificate and private key associated with an entity owning a domain used by the application.

Next in step the VMs may be registered with a DNS Name Server wherein the domain name associated with the VM may be derived from its IP address. For example in one embodiment the IP address associated with one or more VMs may be obtained and a valid DNS name may be derived from the IP address. For example for a VM with an IP address given by 50.25.10.1 a DNS name for the VM may be set to 50 25 10 1.cliqr.com where cliqr.com is the higher level domain name. Control may then be returned to the invoking routine in step .

Upon successful registration of the VMs with the DNS server secure communication with the VMs may commence using the SSL certificate and public and private keys. In some embodiments wildcard SSL certificate and private key may be configured as part of a virtual appliance such as virtual appliance .

Note that method is exemplary and for descriptive purposes only and functionality disclosed in one or more steps may be disclosed may be rearranged re ordered combined and or deleted in a manner consistent with disclosed embodiments as would be apparent to one of ordinary skill in the art.

Note that although the description above uses exemplary cloud infrastructures to describe possible implementations alternate implementations are envisaged and the methods described could be extended to other cloud infrastructures as would be apparent to one of ordinary skill in the art. Further although primitives composite interfaces and templates have been described as exemplary intermediate infrastructure independent representations other infrastructure independent intermediate representational schemes may also be used. In some embodiments software to facilitate conducting the processes described above can be recorded on computer readable media or computer readable memory. These include but are not limited to hard drives solid state drives optical media non volatile storage of various kinds removable media and the like.

In some embodiments the methods and modules described herein may be implemented using a variety of wired and or wirelessly networked processors various computers and computing devices including mobile devices such as smartphones notebooks and handheld computers and various distributed computing systems.

Other embodiments of the present invention will be apparent to those skilled in the art from consideration of the specification and practice of one or more embodiments of the invention disclosed herein. It is intended that the specification and examples be considered as exemplary only with a true scope and spirit of the invention being indicated by the following claims.

