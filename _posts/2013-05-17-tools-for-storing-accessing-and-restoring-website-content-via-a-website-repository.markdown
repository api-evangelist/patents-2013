---

title: Tools for storing, accessing and restoring website content via a website repository
abstract: Systems and method of the present invention provide for one or more server computers configured to identify, within a database transaction log, a dynamic website content in a database and a command modifying the dynamic website content, write the dynamic website content and the command modifying the dynamic website content to a website repository as a delta, receive a request to reverse the command modifying the dynamic website content, identify, within the delta, the command modifying the dynamic website content, and generate and execute a database query configured to reverse the command modifying the dynamic website content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378100&OS=09378100&RS=09378100
owner: Go Daddy Operating Company, LLC
number: 09378100
owner_city: Scottsdale
owner_country: US
publication_date: 20130517
---
This patent application is related to U.S. patent application Ser. No. 13 897 228 entitled STORING ACCESSING AND RESTORING WEBSITE CONTENT VIA A WEBSITE REPOSITORY concurrently filed herewith and also assigned to Go Daddy Operating Company LLC.

The present inventions generally relate to website hosting and source code repositories and more particularly systems and methods for storing and accessing website content in a website repository and rolling back changes to the website content as selected by a user.

An example embodiment of a method of storing accessing and restoring website content via a website repository may comprise the steps of one or more server computers identifying within a database transaction log a dynamic website content in a database and a command modifying the dynamic website content writing the dynamic website content and the command modifying the dynamic website content to a website repository as a delta receiving a request to reverse the command modifying the dynamic website content identifying within the delta the command modifying the dynamic website content generating a database query configured to reverse the command modifying the dynamic website content and executing the database query.

An example embodiment of a system for storing accessing and restoring a website content via a website repository may comprise one or more server computers communicatively coupled to a network and configured to identify within a database transaction log a dynamic website content in a database and a command modifying the dynamic website content write the dynamic website content and the command modifying the dynamic website content to a website repository as a delta receive a request to reverse the command modifying the dynamic website content identify within the delta the command modifying the dynamic website content generate a database query configured to reverse the command modifying the dynamic website content and execute the database query.

The above features and advantages of the present inventions will be better understood from the following detailed description taken in conjunction with the accompanying drawings.

The present inventions will now be discussed in detail with regard to the attached drawing figures which were briefly described above. In the following description numerous specific details are set forth illustrating the Applicant s best mode for practicing the inventions and enabling one of ordinary skill in the art to make and use the inventions. It will be obvious however to one skilled in the art that the present inventions may be practiced without many of these specific details. In other instances well known machines structures and method steps have not been described in particular detail in order to avoid unnecessarily obscuring the present inventions. Unless otherwise indicated like parts and method steps are referred to with like reference numerals.

A network is a collection of links and nodes e.g. multiple computers and or other devices connected together arranged so that information may be passed from one part of the network to another over multiple links and through various nodes. Examples of networks include the Internet the public switched telephone network the global Telex network computer networks e.g. an intranet an extranet a local area network or a wide area network wired networks and wireless networks.

The Internet is a worldwide network of computers and computer networks arranged to allow the easy and robust exchange of information between people or organizations that make use of network or computer resources users . Hundreds of millions of people around the world have access to computers connected to the Internet via Internet Service Providers ISPs . Content providers e.g. website owners or operators the users or administrators responsible for the website content place multimedia information e.g. text graphics audio video animation and other forms of data at specific locations on the Internet referred to as websites. Websites comprise a collection of connected or otherwise related web pages. The combination of all the websites and their corresponding web pages on the Internet is generally known as the World Wide Web WWW or simply the Web.

The Internet provides opportunities for users to backup files including website content files via remote online or managed backup services sometimes referred to as cloud backup which provide users with a system for the backup storage and recovery of computer files. These backup systems are typically built around a client software program that runs on a schedule typically once a day and usually at night while computers aren t in use. This program typically collects compresses encrypts and transfers the data to the remote backup service provider s servers or off site hardware.

Applicant has determined however that presently existing website content backup systems and methods do not allow users to track and reverse individual changes to the website content but instead back up an aggregate of the entire content of the website requiring significant amounts of storage space. Furthermore presently existing website content backup systems only monitor the need to back up the website content at a fixed interval e.g. daily . These systems and methods may recognize changes during the fixed interval but will then replace the entirety of the website content without consideration for each individual change. Possibly more problematic any malicious changes to a website by hackers will not be recognized until the next review of the content at the fixed interval so if content were maliciously changed shortly after a current check there would be no way to know of the changes until the next fixed interval. Even when detected the website owner must backup entire files or database entries and sometimes the entire website and or database to replace the corrupted files. In short backup services include the following weaknesses backups are normally triggered on a timed basis backups are usually system wide or partition wide and backups are normally written to separate media.

Applicant has therefore determined that optimal systems and methods may improve on presently existing website content backup systems and methods by automatically logging each change to the content of the website as a delta within a website repository. These changes may include changes to website files and changes to dynamic content stored in a database for the website. The website owner may also be notified when changes occur to the website content making it easier for the website owner to identify malicious changes by someone other than the website owner. The website owner may then roll back the changes to the website content as described herein by reversing the deltas for the website files the dynamic database content for the files or both. Use of a website repository also provides repository functionality for the website as typically found in source code repositories such as commands to commit tag branch export merge etc.

Thus optimal systems and methods may replace current backup systems for customers placing the power in their hands by providing a user interface configured to control their website as a website repository integrated into website administration control panel which provides a backup solution within a clean common interface comprising the means to build maintain and restore any changes within the entire site. In other words the entire site may act as a website repository.

Several different methods may be used to provide and manage the disclosed inventions. In an example embodiment illustrated in any combination of software modules running on one or more server computers as described below may identify one or more modifications to a website content Step store the modification s to the website content as a delta within a website repository Step receive a request to reverse the modification s to the website content Step identify within the delta in the website repository the modification to the website content Step and reverse the modification to the website content Step .

Several different environments may be used to accomplish the steps of embodiments disclosed herein. demonstrates a streamlined example of such an environment and illustrates a non limiting example of a system and or structure that may be used to accomplish the methods and embodiments disclosed and described herein. Such methods may be performed by any central processing unit CPU in any computing system such as a microprocessor running on at least one server and or client and executing instructions stored perhaps as scripts and or software possibly as software modules in computer readable media accessible to the CPU such as a hard disk drive on a server and or client .

The example embodiments herein place no limitations on whom or what may comprise users. Thus as non limiting examples users may comprise any individual entity business corporation partnership organization governmental entity and or educational institution.

The example embodiments shown and described herein exist within the framework of a network and should not limit possible network configuration or connectivity. Such a network may comprise as non limiting examples any combination of the Internet the public switched telephone network the global Telex network computer networks e.g. an intranet an extranet a local area network or a wide area network a wired network a wireless network a telephone network a corporate network backbone or any other combination of known or later developed networks.

At least one server and at least one client may be communicatively coupled to the network via any method of network connection known in the art or developed in the future including but not limited to wired wireless modem dial up satellite cable modem Digital Subscriber Line DSL Asymmetric Digital Subscribers Line ASDL Virtual Private Network VPN Integrated Services Digital Network ISDN X.25 Ethernet token ring Fiber Distributed Data Interface FDDI IP over Asynchronous Transfer Mode ATM Infrared Data Association IrDA wireless WAN technologies T1 Frame Relay Point to Point Protocol over Ethernet PPPoE and or any combination thereof.

The server s and client s along with software modules and the data storage disclosed herein may be communicatively coupled to the network and to each other in such a way as to allow the exchange of information required to accomplish the method steps disclosed herein including but not limited to receiving the information from a user interface on one or more clients and one or more servers receiving the information as transmitted by the client s .

The client may be any computer or program that provides services to other computers programs or users either in the same computer or over a computer network . As non limiting examples the client may be an application communication mail database proxy fax file media web peer to peer or standalone computer cell phone smart phone personal digital assistant PDA etc. which may contain an operating system a full file system a plurality of other necessary utilities or applications or any combination thereof on the client . Non limiting example programming environments for client applications may include JavaScript AJAX client side automation ASP JSP Ruby on Rails Python s Django PHP HTML pages or rich media like Flash Flex Silverlight any programming environments for mobile apps or any combination thereof.

The client computer s which may be operated by one or more users and may be used to connect to the network to accomplish the illustrated embodiments may include but are not limited to a desktop computer a laptop computer a hand held computer a terminal a television a television set top box a cellular phone a wireless phone a wireless hand held device a smart phone an Internet access device a rich client thin client or any other client functional with a client server computing architecture. Client software may be used for authenticated remote access to one more hosting computers or servers described below. These may be but are not limited to being accessed by a remote desktop program and or a web browser as are known in the art.

The user interface displayed on the client s or the server s may be any graphical textual scanned and or auditory information a computer program presents to the user and the control sequences such as keystrokes movements of the computer mouse selections with a touch screen scanned information etc. used to control the program. Examples of such interfaces include any known or later developed combination of Graphical User Interfaces GUI or Web based user interfaces as seen in and after including Touch interfaces Conversational Interface Agents Live User Interfaces LUI Command line interfaces Non command user interfaces Object oriented User Interfaces OOUI or Voice user interfaces. Any information generated by the user or any other information may be accepted using any field widget and or control used in such interfaces including but not limited to a text box text field button hyper link list drop down list check box radio button data grid icon graphical image embedded link etc.

The software modules used in the context of the current invention may be stored in the memory of and run on at least one server and or client . The software modules may comprise software and or scripts containing instructions that when executed by a microprocessor on a server and or client cause the microprocessor to accomplish the purpose of the module or the methods disclosed herein.

As a non limiting example the environments in may include one or more repository manager software modules a backend application running on the server s and configured to manage and otherwise administrate all software and hardware elements of the disclosed invention capable of connecting through the network to any of the disclosed hardware or software within the disclosed environment. Any of the disclosed method steps that the server is configured to accomplish may be run on the server s according to logic within the repository manager . Furthermore the repository manager may be configured to communicate and interact with all other disclosed hardware and software.

The software modules may also include mobile applications possibly on a client computer and or mobile device. These mobile applications or apps may comprise computer software designed to help people perform an activity and designed to help the user to perform singular or multiple related specific tasks. It may help to solve problems in the real world by manipulating text numbers graphics or a combination of these elements.

The server s may host and run an Application Programming Interface API available any of the disclosed system components. An API may comprise a service made available to third parties which may further comprise any individual entity system hardware or software wishing to access the disclosed information and functionality. Such an API may comprise a software to software interface that specifies the protocol defining how independent computer programs interact or communicate with each other. It also may comprise a collection of pre configured building blocks allowing a third party to easily configure their software for compatibility and or extensibility. The API may allow a requesting party s software to communicate and interact with the software application and or its provider perhaps over a network through a series of function calls requests for services . It may comprise an interface provided by the software application and or its provider to support function calls made of the software application by other computer programs.

The API may comprise any API type known in the art or developed in the future including but not limited to request style Berkeley Sockets Transport Layer Interface TLI Representational State Transfer REST Simple Object Access Protocol SOAP Remote Procedure Calls RPC Standard Query Language SQL file transfer message delivery and or any combination thereof. The API may comprise computer readable code that when executed causes the API to receive an RPC i.e. function call requesting information services. Responsive to receipt of the RPC the API may perform the above described processes and transmit a request results to the requesting third party. To submit the request via an RPC to the API the server s may require authentication with the API. Computers or servers may locate the API via an access protected URL mapped to the API and may then use an API key configured to authenticate the one or more computers or servers prior to accessing the API.

The server s utilized within the disclosed system may comprise any computer or program that provides services to other computers programs or users either in the same computer or over a computer network . As non limiting examples the server s may comprise application communication mail database proxy fax file media web peer to peer standalone software or hardware servers i.e. server computers and may use any server format known in the art or developed in the future possibly a shared hosting server a virtual dedicated hosting server a dedicated hosting server a cloud hosting solution a grid hosting solution or any combination thereof . The server may exist within a server cluster as illustrated. These clusters may include a group of tightly coupled computers that work together so that in many respects they can be viewed as though they are a single computer. The components may be connected to each other through fast local area networks which may improve performance and or availability over that provided by a single computer.

The server s or software modules within the server s may receive hypertext transfer protocol HTTP requests for files or other data stored on the server s and may use server side scripting languages such as ASP PHP CGI Perl proprietary scripting software modules components etc. to render the files requested and respond with the rendered files pages to be displayed on the client s .

The server s or software modules within the server s may use query languages such as MSSQL or MySQL to retrieve the content from data storage . Server side scripting languages such as ASP PHP CGI Perl proprietary scripting software modules components etc. may be used to process the retrieved data. The retrieved data may be analyzed in order to determine information recognized by the scripting language information to be matched to those found in data storage availability of requested information comparisons to information displayed and input selected from the user interface or any other content retrieval within the method steps disclosed herein.

The server and or client may be communicatively coupled to data storage to retrieve any information requested. The data storage may be any computer components devices and or recording media that may retain digital data used for computing for some interval of time. The storage may be capable of retaining stored content for any data requested on a single machine or in a cluster of computers over the network in separate memory areas of the same machine such as different hard drives or in separate partitions within the same hard drive such as a database partition.

Non limiting examples of the data storage may include but are not limited to a Network Area Storage NAS which may be a self contained file level computer data storage connected to and supplying a computer network with file based data storage services. The storage subsystem may also be a Storage Area Network SAN an architecture to attach remote computer storage devices to servers in such a way that the devices appear as locally attached an NAS SAN hybrid any other means of central shared storage now known or later developed or any combination thereof.

Structurally the data storage may comprise any collection of data. As non limiting examples the data storage may comprise a local database online database desktop database server side database relational database hierarchical database network database object database object relational database associative database concept oriented database entity attribute value database multi dimensional database semi structured database star schema database XML database file collection of files spreadsheet and or other means of data storage such as a magnetic media hard drive other disk drive volatile memory e.g. RAM non volatile memory e.g. ROM or flash and or any combination thereof.

As seen in the software modules server s and or data storage may exist and or be hosted in one or more data centers . These data centers may provide hosting services for websites services or software relating to stored information or any related hosted website including but not limited to hosting one or more computers or servers in a data center as well as providing the general infrastructure necessary to offer hosting services to Internet users including hardware software Internet web sites hosting servers and electronic communication means necessary to connect multiple computers and or servers to the Internet or any other network .

As users access and or input information this information may be redirected and distributed between and among the data centers via commands from any combination of software modules hosted on the server s and executed via processors on the server s . This information may then be accessed and manipulated by the combination of software modules or stored in the data storage of any of a plurality of data centers either separate from or integrated into the one or more servers so that the information is available to be searched and accessed by the user and or any other components of any or all data centers.

Any references to software combination combination of software combination of software modules etc. referred to herein may include any combination of software modules executed by a microprocessor on either the server or client computers. These software modules may also be used in combination with any other method steps hardware and or software structures disclosed herein. The servers may be hosted in any data center operated by any hosting provider such as those disclosed herein and the servers and clients may be operated by any users disclosed herein.

In the interest of simplicity shows a consolidated environment for accomplishing the methods disclosed herein where the disclosed software modules including repository manager control panel uploading e.g. FTP SSH software website server software including the disclosed file storage structure website file content FUSE mount website repository a server side website source and dynamic content repository website database including transaction logger notification module and site lock module described in more detail herein are all hosted on a single server computer in a single data center . Other embodiments however may utilize a highly distributed environment wherein the disclosed components are either each hosted on their own separate server and communicatively coupled to one another via the network or are hosted and run as any combination of the one or more servers .

As seen in the server s may host one or more websites and may run one or more web server software modules making the website s accessible via the Internet. Non limiting examples of entities that may provide website hosting services for the disclosed invention may include a hosting provider a software development company an e commerce company a domain name registry a domain name registrar an SSL secure sockets layer or other online security CA Certification Authority or any combination thereof. Non limiting examples of the services provided by such a service provider may include as non limiting examples web hosting and maintenance services website development and maintenance services domain name registration and maintenance services SSL certificate validation signing and issuance services installation of SSL certificates on hosted websites DNS services e.g. domain name URL resolution and or hosting a DNS software database server relevant zone or other DNS files and or a DNS database etc. To manage these services an admin a website owner s administrative account may be created and maintained for one or more website owners e.g. a website administrator or developer .

This admin may include and or be associated with as non limiting examples a hosting account comprising a website file storage for the website file content one or more control panels e.g. an admin account control panel for the hosted website s such as GO DADDY S MANAGE YOUR ACCOUNT administration software access possibly via the admin account control panel to administrate one or more content upload software modules for the hosted website e.g. FTP File Transfer Protocol SSH Secure Shell Protocol and or SFTP SSH File Transfer Protocol and configured to upload website file content a website database comprising at least dynamic content for the website website database access e.g. via a database administration program possibly integrated into the admin control panel s .

The server s may generate and transmit the control panel s to any client . After the website owner has been authenticated to the website the admin may provide access to one or more control panel interfaces for each of the various services provided through the admin. The website owner may use the control panel possibly via uploading software to upload file content to the website file storage . The control panel may also be used writing executing and or administrating transactions e.g. selecting or modifying dynamic content for the website within the website database . The control panel s may comprise as non limiting examples a web page a client side program an app a server administration interface etc.

In the context of the currently disclosed invention the admin and the admin control panel s may further include and or be associated with a FUSE File System in User Space mount instance for the website file storage for the website a website repository a server side content repository instance for the website a repository manager one or more website database transaction loggers one or more website content change notification modules and one or more site lock modules each of which are described in more detail herein. The control panel s may be configured to administrate any of the disclosed admin software functionality as necessary.

The website file content uploaded and or stored within the website file storage for each of the website s may comprise as non limiting examples HTML files and or other text files comprising static content client side scripting files including as non limiting examples JavaScript dHTML Flash files etc. multimedia content such as website graphics or video files server side software scripting or other software files including as non limiting examples ASP PHP Java Perl .exe files etc. which may be run and or otherwise executed by the server s and may be configured to access and or update dynamic content described herein or any other electronic files accessible via a web browser or other Internet access software.

Website content may further comprise content displayed on the website including but not limited to dynamic website content . This dynamic content may comprise content received from and customizable to the website owner and or to a website visitor accessing and using the website. This dynamic content may be stored selected and or modified in one of at least two ways. A website visitor may access the website file content possibly a file for generating a web page interface and running one or more software scripts stored in the website file storage . The software scripts or other software within this file content may be configured to receive dynamic content from the website visitor accessing the file content possibly via a one or more graphical user interface elements within an HTML form for example in the displayed web page interface. As a non limiting example an HTML form may receive comments about website content or a blog entry on a blog website from the website visitor. After completing the comment blog entry the website visitor may select a submit button or other form element configured to transmit the dynamic content and or other form data to the server s for processing.

The server s may receive the information from the HTML form and in response to an HTTP or other request transmitted with the form information may execute the server side scripting and or other software within the file content . This server side scripting or other software may be configured to connect with the database and write or otherwise modify the received dynamic content within a website database . By executing additional instructions from the server side scripting or other software this dynamic content stored in the website database may be selected and displayed as content on the website or may be modified e.g. inserted updated and or deleted . These modifications may be accomplished using database queries e.g. SQL queries as are known in the art.

Another way that dynamic content may be modified is by the website owner through the control panel . If the website owner chooses to update dynamic content displayed on the website the website owner may use a user interface within the control panel to input such dynamic content . The control panel may then be configured to transmit the received dynamic content to the server s for processing to insert or otherwise modify as previously described the dynamic content within the website database .

In some embodiments file content for the hosted website s may be stored within website file storage accessible to website server software and associated with the admin for the website owner. Such file content may be stored in any data storage medium capable of storing data or instructions for access and or execution by a computing device such as server s and or client s . Such data storage may comprise as non limiting examples magnetic optical semiconductor paper or any other data storage media a database or other network storage device hard disk drives portable disks CD ROM DVD RAM ROM flash memory and or holographic data storage perhaps in a network storage device communicatively coupled to the network such as a hard drive or other memory on the server s .

Stored file content may be organized in a server s file system which may organize the files for the storage organization manipulation and retrieval by the server s operating system and or website server software . The server s file system may comprise at least one directory which in turn may comprise at least one folder in which file content may be stored. In most operating systems files may be stored in a root directory sub directories folders or sub folders within the file system.

Most file systems have systems and methods of administering access permissions or access rights to specific users and or groups of users including as non limiting examples FTP reads writes and HTTP post get commands. Such systems control the ability of users to view edit add to delete or otherwise make changes to files in the directories and or folders of the file system. There are numerous different access permission types that may apply to directories folders or files. For example the read permission may grant a user or server software FUSE mount and or repository software described below the ability to read a file. This read permission may allow a user or software to pull file content or acquire a handle to a particular file.

The write permission may grant the ability to write or otherwise modify the file content . The modify permission may grant the ability to read write to update and delete files. The read and execute permission may grant the ability to execute a file. The full control permission may enable a user or software to read write to change and delete files and folders. Depending on the server s operating system and file system other access permission conventions may be used e.g. write read execute update delete or drop but they all generally control who may read run modify or delete files stored on the server s . Using various embodiments of the disclosed invention the file system may also rollback the file content as directed by the repository manager .

As a non limiting example the instructions for uploading file content to the website file storage may include instructions from the uploading software for the server s to initiate a write of the file content to the website file storage . When the file content is requested to be displayed on client software such as an Internet browser this may likewise be accomplished via a read action command.

A FUSE mount instance associated with each hosted website and the associated website file storage as well as website repository described below may run on the server s between the uploading software the source of the read right or other file system modification action commands and the website file storage . The FUSE mount instance for the website may be configured to interact with an operating system kernel running on the server s and may be configured to interrupt the write read or other file system modification action command s and write the file to and as requested read the file from the website file storage according to customized instructions stored within the FUSE mount . Thus the FUSE mount may be configured to hook into the upload transaction via the operating system kernel by identifying and intercepting the action command to write read or otherwise modify the uploaded file content for the website according to the customized instructions. Specifically these instructions may define how to write the file to or read the file from the website repository as described herein. Non limiting examples of FUSE may include Fuse for FreeBSD Fuse4X OSXFuse MacFUSE Dokan fuse4win FUSE api and MINIX 3.

The FUSE mount may comprise one or more software modules configured for users such as the website owner or server administrator creating the website file storage to create a virtual file system in user space for the file content . This virtual file system may not store the file content itself but may act as a view or translation of an existing file system or storage device in this case the file content stored within the website repository . In contrast to most file system structures rather than the user interacting almost directly with the file system the FUSE mount may comprise an abstraction layer the virtual file system superimposed on the website file storage . This abstraction layer may allow applications to access the concrete file content through the website repository in a uniform way. The FUSE mount may also abstract Input Output I O commands to the website file storage . Specifically the FUSE mount instance may abstract the write and read or any other modifying commands by intercepting these commands and abstracting such commands into website repository commands. In other words the FUSE mount allows the user to write and read files via interim steps performed through the website repository without the website owner s knowledge and without the read and write commands having to know what types of file system they are accessing.

Instead of the user interacting directly with the file system the website file content the write command may become wrapped by the FUSE mount instance as a transaction that is translated into a website repository command and is executed within the website repository . The interim step performed by the FUSE mount that translates the command intended for the website file storage to the website repository command constitutes the abstraction layer. Any read command is likewise pulled through the website repository and abstracted so that the website owner does not know that the abstracted website repository interim step is happening.

This data abstraction may also provide a security layer keeping hackers from maliciously changing file content or dynamic content . A hacker would have to come through the repository layer to corrupt any files but because of the abstraction layer would be unaware of what he was writing to. As described below the repository content comprises flat files and or binary data. Because of this a hacker modifying the flat files or binary data would have no effect on the file content stored as website files within the website repository directly.

Using the FUSE mount abstraction layer each website file update via a read write or other modification command may be automatically logged in real time in the website repository as a delta to the website file. The website repository may be associated with the website file storage . However rather than saving updates to the file content to the website file storage the website repository may comprise hooks or flat files and or binary data to store deltas to the website content as described below.

Specifically the online repository may comprise a file archive and web hosting facility where changes to file content i.e. files current and historical data are stored allowing website owners to submit code or patches of code in an organized fashion and allowing editors to track each others edits. Non limiting examples of online source code repositories may comprise Git Subversion SVN CVS TFS SVK AccuRev Perforce Mercurial etc.

The website repository may also comprise revision control release management and or a versioning system to track and or provide control over changes to source code managing changes to documents computer programs large web sites different versions of code and or other collections of information. These revisions and or versions may be compared restored and merged. The website repository may be configured to take periodic snapshots whose contents may be accessed with similar semantics to normal file access.

The website repository may be configured to execute standard repository functionality. For example the repository software may make changes to the baseline or approved revision of a document or source file from which subsequent changes can be made. Once each working copy is satisfactory to the website owner actions notifications denies rollbacks etc. may be based upon a new revision of the file content that is created as a result of writing merging and or committing the changes made to the file content . The working copy may be the local copy of files from a repository at a specific time or revision. All work done to the file content in a repository may initially be done on a working copy hence the name. Conceptually the working copy may comprise a sandbox.

The commit command within the website repository may represent one of many non limiting example website repository commands available via the website repository . Other non limiting examples may include tag branch merge blame rollback import export clone or any other repository commands known in the art.

As non limiting examples a tag command may be used to identify a tag or label of an important snapshot in time consistent across many files. The files at that point may all be tagged with a user friendly meaningful name or revision number. Tagging commands may also be used for tagging the delta transaction data described below allowing the server s to display and identify changes within the website repository to be rolled back to a particular revision version or commit. 

A branch command may be used to branch or fork a set of files under revision and or version control at a point in time so that from that time forward two copies of those files may develop at different speeds or in different ways independently of each other providing a developer friendly environment similar to a production test environment but allowing a website owner to change and test new features on the website . Although the website seen by users would not change while these new features were tested and changed the website owner may create a development version of a website and be working on a working copy in a branch of the website in a separate environment. The test site could then be merged with the live site displaying the changes made in the test environment possibly using a merge command within the website repository to merge the different branches into a single unified trunk. 

The website repository may further comprise a general purpose differencing utility or diff. This diff may comprise a file comparison utility that identifies outputs and stores revisions comprising the differences between two files in this case to show the changes between one version of a file content and a former version of the same file content .

If a file uploaded via the uploading software is an update to an existing file and or a patch file updating of source code to a newer version to be stored within the website repository the website repository may be configured to run the diff utility to identify the differences in content between the uploaded file content and the most recent update stored in the website repository for the file content . For example for text files such as hosted website files the diff may generate display and or store the changes made per line or even by character. In other embodiments possibly including executable files running on the website additional embodiments may also support binary files.

The diff files that serve as input to patch files may be readable text files meaning they may be easily reviewed or modified by humans before use. The patch file may comprise a text file that consists of a list of differences and may be produced by running the related diff program with the original and updated file as arguments.

The identified diff output data e.g. modifications to the file content or database transaction data described below may be stored as one or more deltas in the website repository. In common use cases source or data files may change incrementally between commits i.e. non working copy versions of this content . The delta stored in the repository may comprise a way of storing or transmitting and recording this data in the form of discrete files comprising the differences between sequential data rather than as complete files for example changing a few words in a large document or changing a few records in a large table thereby reducing data redundancy.

Information stored in the repository associated with the delta may include as non limiting examples the name of the uploaded file or database transaction the date time the file or database transaction was uploaded the contents of the file or database transaction the delta identified from running the diff and or the server and or person who uploaded the file or ran the database transaction.

Additional repository commands or other logic in the control panel and or the repository manager may be used to import and or export the data in the repository to third parties or computers. As a non limiting example a user may have an off site repository e.g. GitHub CodePlex Freepository Source Forge etc. and may use included repository commands e.g. subscribe import pull export push clone etc. to synchronize with the off site repository so that the website is cloned to one or more of these additional repositories thereby creating multiple copies of the repository content. The two repositories may be configured to synchronize or to auto sync possibly in response to requests sent from the control panel .

In an example embodiment illustrated in any combination of software modules running on one or more server computers may identify within a database transaction log a dynamic website content in a database and a command modifying the dynamic website content Step write the dynamic website content and the command modifying the dynamic website content to a website repository as a delta Step receive a request to reverse the command modifying the dynamic website content Step identify within the delta the command modifying the dynamic website content Step and generate and execute a database query configured to reverse the command modifying the dynamic website content Step .

The server s may be configured to receive a request to insert and or modify the dynamic content for the website stored in the website database . This dynamic content may be updated from one of two sources First a visitor to the website may access the file content stored in the website file storage . The software scripts or other software within the file content may be configured to receive dynamic content from users accessing the file content possibly via HTML form elements within the file content . The server s may then be configured to execute the instructions within the file content .

A second source for inserting or modifying dynamic content may be the website owner via the control panel . The website owner may input dynamic content into a user interface element possibly a website database admin for receiving database queries within the control panel to insert or otherwise modify the dynamic content . The control panel may then be configured to transmit the received dynamic content to the server s for processing to insert or modify the dynamic content within the website database .

The software scripts in the file content and or logic within the control panel may be configured to run database transactions such as SQL database queries on the server s . These database transactions may select dynamic content from the website database or may modify the dynamic content by inserting the dynamic content into the website database updating existing dynamic content in the website database and or deleting dynamic content from the website database .

As each database query is run on the dynamic content in the website database a transaction logger within the website database may generate for the executed transaction a database transaction record within a binlog a text or binary transaction log of each database transaction . The binlog may record what database queries or other commands have been run and what has changed within the dynamic content . In some embodiments the server s may be configured to request and access the generated binlog.

Typically in database replication a database generates a binlog in preparation for replicating and streaming the binlog to commit to a second database as a cautionary measure in case disaster recovery is needed for the original database. In the disclosed embodiments the transaction logger in the website database may be configured to transmit the binlog possibly as a text file to the website repository . In some embodiments the FUSE mount may expose API interfaces allowing querying metadata that hooks into underlying changes to the repository abstracted beneath.

In some embodiments the binlog may be generated as a statement based replication log record often abbreviated as SBR which corresponds to a standard statement based binary logging format. In these embodiments database transaction event information may include a database query statement e.g. a SQL statement the content modified and or additional database transaction information listed herein. In some embodiments a row based logging mixed format mixed based replication or mixed format replication may be used. In row based logging embodiments the database transaction event may indicate a row change rather than a database query statement.

The binlog output by the transaction logger may comprise a text file made up of each of the database transaction events i.e. database query log records run by the website database . In some embodiments the binlog may comprise a SQL dump style file that contain multiple website database modifying statements. In other embodiments a binlog may comprise each individual database transaction each database transaction log record may be created and transmitted to the website repository .

Transmitted database transaction data may comprise one or more database queries the type of transaction in the database query the affected content modified in each of the one or more database queries the user and or server that ran the query a time stamp indicating when the transaction was executed the elapsed time in executing the query etc. By analogy file uploads may contain analogous data for file uploads such as the user and or server that ran the upload a time stamp indicating when the upload was executed the elapsed time in executing the upload whether the upload comprised an FTP processes HTTP posts etc.

The server s may be configured to request and or receive the binlog including any database transaction data as transmitted from the transaction logger . The server s may then be configured to read identify and remove select database query transactions from the text so that only database transactions that modify the dynamic content i.e. insert update or delete statements for example remain. The server s may then be configured to read and identify the database transaction data for each of these modifying database query transactions.

The server s may then be configured to convert the database transaction data for each of these transactions into statements usable by the website repository thereby allowing the abstracted website repository to hook into underlying changes in the website database since unlike the deltas stored for the file content modifications to the website database changes the website content without requiring actual code deployment by the website owner.

To convert the information from the database binlog the server s may be configured to identify and store the text information for each transaction event data as a delta within the website repository as described above. When the website repository saves the delta it may save it as a commit to the website as described above. The appropriate dynamic content for the website may then display the modified dynamic content .

The control panel may comprise interface elements and logic for the website owner to select means to roll back the website repository to a particular delta and or commit. Specifically the control panel interface may configured for a website owner to select to roll back any website content according to any of the transaction data stored as deltas within the website repository . Such roll backs may include changed based or time based rollbacks. As non limiting examples the website owner may select to roll back the website according to the affected content modified in the database queries the user and or server that ran the query the date of the diff delta and any interim deltas the date of one or more database queries a date of FTP HTTP activity etc. As a non limiting example by default selections available to the website owner may include an interface display of deltas within the website repository displayed by the most recent deltas within the website repository .

The website owner may select from the control panel the content displayed on the website to roll back. For example the website owner may want to revert to a previous revision version date of the website or may be notified that someone other than the website owner is responsible malicious changes to the website . The website owner may use the selections on the control panel interface to roll back the changes to a particular update delta and or commit.

The control panel may send a request to the server s possibly via the repository manager which may then access the website repository and determine all changes deltas selected by the website owner and transmitted to the server s . The repository may then undo the deltas including those selected by the user. In some embodiments a restore an undo of the deltas may comprise the repository rolling back to a particular commit. In other embodiments a restore may comprise the repository rolling back to a known good configuration which may have been tagged or branched by the website owner allowing the website owner to return to a selected development area. This may be accomplished as the server s access the deltas stored within the website repository and roll back the changes to the affected files effectively returning them to their state on the requested version branch date. To roll back the changes to the affected file or database transaction the server s may be configured to send instructions to the repository causing the differencing software to reverse the modification made in order to undo the stored delta by reversing each of the deltas for either the website files and or the database transactions.

In some embodiments for the file content deltas stored in the website repository the server s may be configured to update the files by reconstructing the previous instructions to patch the file. The patch file may then be unpatched according to instructions contained in a separate patch file in order to roll back to the selected previous versions of the file content .

To roll back the changes to the dynamic content for the website the server s may be configured to accesses the website repository to determine the deltas stored in the database corresponding to the selected criteria to roll back. The server s may be configured to identify as stored in the delta the database transaction i.e. database query and the dynamic content associated in the website repository with the delta. The server s may then be configured to reverse the query for the dynamic content associated with the delta by performing the database query s mirror image. In other words the server s may be configured to transpose the identified database transaction to a restorable format as a reverse log.

As non limiting examples the server s may be configured to identify from the database transaction data stored within the appropriate delta a database transaction which executed an insert database query for a dynamic content inserted into the website database . The server s may then be configured to generate and execute the mirror image or a delete database query for the inserted database record in order to reverse the original insert database query. After running the delete database query for the first content that dynamic content will no longer be displayed on the appropriate web page. However the website repository may retain both the original insert database query and the reversed delete database query as deltas in the website repository.

The server s may likewise be configured to identify from the database transaction data stored within the appropriate delta a database transaction which executed an update database query for a dynamic content updated within the website database . The server s may then be configured to generate and execute the mirror image or a second previous insert or update database query for the updated database record in order to reverse the most recent insert database query. After running the generated update or insert database query for the original content that dynamic content may be displayed on the appropriate web page. However the website repository may retain all original database queries and the reversed database query as deltas in the website repository.

As a non limiting example if the database query prior to the selected update database query was also an update database query the server s may be configured to identify within a previous delta the updated dynamic content from the previous database query for that record and insert the previously updated dynamic content as the current dynamic content .

For a delete database query the server s may be configured to analyze the delta history of the database transaction records for that dynamic content and determine an insert or update query for that record to return the record to the content previous to the delete database query. However the website repository may retain all original database queries and the reversed database query as deltas in the website repository.

A notification module may be configured to notify the website owner of changes in the website content possibly in response to a request from the control panel . In some embodiments the website owner may identify possibly via the control panel malicious changes i.e. hacked content to the website content. In some embodiments the website owner may be notified as each change occurs.

A notification software module running on the server s may be configured to inform the website owner of the changes to the website . In some embodiments the notification module may be configured to notify the website owner possibly via the control panel of all updates to the website content either file content or dynamic content . In some embodiments the control panel may be configured to receive from the website owner a selection of file content or dynamic content to notify the website owner of any changes specifically to that website content.

If someone other than the website owner is responsible for the changes i.e. malicious changes the website owner may be notified and roll back the changes to a particular commit as described herein. In some embodiments the website owner or logic in the system may identify patterns of identified malicious changes and automatically roll back these changes. In embodiments where the website content has repeatedly and consistently been rolled back on specific file content or dynamic content received through specific file content the notification module may be configured to recognize specific website files or data derived from these website files which are repeatedly and consistently rolled back.

In some embodiments the notification module may be configured to recognize this website content and only send notification to the website owner for the website content which is consistently rolled back thereby acting as a tripwire to notify the website owner of high risk website content. In other embodiments the server s may be configured to automatically roll back the website content to the last known good configuration i.e. the last time the website owner rolled back the website content .

Likewise the system owner or logic in the system may lock file content or other website content identified as containing malicious changes. In some embodiments the control panel may be configured to receive from the website owner selections to control the file content and or other website content using a site lock module . The site lock module may be configured to not allow any updates to the website files during a certain period of time e.g. while the website owner is on vacation or from a certain IP address. Embodiments could be imagined in which the server s are configured to automatically lock certain website files after determining that they are high risk files e.g. they have been rolled back a threshold number of times or because of this were identified as a high risk file content etc. 

Any steps included in the embodiments illustrated in are not limited to their respective illustrated embodiments and may be combined in several different orders and modified within multiple other disclosed embodiments. Likewise the method steps disclosed herein may be accomplished by a software module executed on a server and or client configured to accomplish that method step.

Other embodiments and uses of the above inventions will be apparent to those having ordinary skill in the art upon consideration of the specification and practice of the inventions disclosed herein. The specification and examples given should be considered exemplary only and it is contemplated that the appended claims will cover any other such embodiments or modifications as fall within the true scope of the inventions.

The Abstract accompanying this specification is provided to enable the United States Patent and Trademark Office and the public generally to determine quickly from a cursory inspection the nature and gist of the technical disclosure and in no way intended for defining determining or limiting the present inventions or any of its embodiments.

