---

title: Method of managing data of file system using database management system
abstract: A method of managing data of a file system using a database management system is provided. According to the method, the metadata of the file system is managed using a database management system (DBMS), but writing data to or reading data from a disk is directly performed by the file system according to the method directly performed not through other file systems or DBMSs. In this way, stable transactions are guaranteed for a user, and the user can design a disk allocation algorithm optimized with respect to a multimedia environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384201&OS=09384201&RS=09384201
owner: SAMSUNG ELECTRONICS CO., LTD.
number: 09384201
owner_city: Suwon-si
owner_country: KR
publication_date: 20130529
---
This application is a continuation application of U.S. application Ser. No. 11 717 061 filed Mar. 13 2007 which claims priority from Korean Patent Application No. 10 2006 0053116 filed on Jun. 13 2006 in the Korean Intellectual Property Office and the benefit of U.S. Provisional Application No. 60 784 481 filed on Mar. 22 2006 in the United States Patent and Trademark Office the disclosures of which are incorporated herein by reference in their entireties.

The present invention relates to a file system and more particularly to a method of managing data of a file system using a database management system.

Unlike in the past the recent development of multimedia technologies has enabled many consumer electronics products such as personal video recorders camcorders and mobile phones to be offered with embedded hard disks and thus research projects on a technology for efficiently managing data using disks are being actively carried out.

In a file system determining a variety of policies related to input and output of data to and from a disk consistency is a very important issue. Consistency of a file system can be divided into consistency of metadata and consistency of data. The metadata of a file system includes information about an inode a directory a free space of a disk and a free inode. If operations related to these metadata items are performed as a transaction the consistency of the metadata can be maintained.

Likewise the consistency of data can be maintained through a data transaction and if a data transaction for updating part of a file is aborted in the middle of the update operation the data transaction is completed or discarded as if the transaction had never been performed to begin with.

Meanwhile a database management system DBMS reliably stores data by using a fast and effective data structure and guarantees transactions. In the past there have been attempts to secure consistency of a file system by applying this DBMS solution to an operating system OS .

In the file system illustrated in the metadata and file data of a file system are managed by using a kernel Berkeley database KBDB and the database is stored in a traditional file system e.g. Ext2 . In this structure all operations of the file system are performed through a DBMS.

For example when a predetermined file is read the DBMS is accessed and file data stored in block.db is copied into a buffer cache and when data is written in a file data stored in the buffer cache is stored in a record corresponding to the data in block.db. Operations other than file input and or output operations are also performed by using the DBMS and thus the consistency of the file system can be guaranteed.

However due to its dependency on the traditional file system Ext2 storing the databases this KBDB file system KBDBFS cannot be optimized with respect to a variety of environments. That is the DBMS KBDB provides only transactional operations and the size of a file system disk allocation and the like are determined by a file system storing databases. For example when data is stored on a disk in this file system the file system KBDBFS inputs data into the DBMS KBDB and the DBMS KBDB stores the data on the disk by using the traditional file system Ext2 and thus the file system KBDBFS cannot participate in the layout of the actual disk. Accordingly according to this file system even though an algorithm optimized for an environment is designed it is impossible to apply the optimized algorithm to the allocation of blocks on a disk. Also in a multimedia environment where the file size is generally large the size of a log generated by the DBMS increases and thus the performance of the file system is deteriorated.

The present invention provides a method by which metadata of a file system is managed using a database management system DBMS while file data is directly input to or output from a disk without involvement of the DBMS.

According to an aspect of the present invention there is provided a method of managing data in a file system including searching for a free disk space by using a predetermined database management system DBMS managing metadata of the file system when a data write request is received from an application writing the data in the free disk space without involvement of the DBMS by referring to the search result and updating a part of the metadata changing with the data being written by using the DBMS.

All operations from the searching operation to the updating operation may be managed by the DBMS as one transaction.

The updating of the part of the metadata may include requesting the DBMS to update at least one of a database table containing information about a free space a database table containing information about a non free space and a database table containing information about an inode.

According to another aspect of the present invention there is provided a computer readable recording medium storing a computer program for performing the methods.

The present invention will now be described more fully with reference to the accompanying drawings in which exemplary embodiments of the invention are shown.

In operation a file system according to the current embodiment receives a request to write file data on a disk from a user application. For this the file system should provide an application layer with an application programming interface API at a user level corresponding to a system call.

In operation the file system requests a database management system DBMS for managing metadata to begin transactions. Accordingly operations that are to be performed in relation to the metadata after operation are regarded as one transaction and protected.

In operation free disk space is searched for in order to write the file data requested by the application. At this time the free disk space is searched for referring to a database table including information about the free disk space. Details of a database schema for managing the DBMS will be explained later with reference to .

In operation the file data is written in the free disk space. Depending on the situation many free blocks may be found in operation . A disk allocation algorithm defined by the user may be used to determine in which block among the free blocks the requested file data is to be stored. This is because in the file system according to the current embodiment metadata is managed by a traditional file system such as ext2 or DBMS but writing file data to or reading file data from a disk is performed directly by the file system and not through the DBMS or other file systems raw I O . In other words the file system of an exemplary embodiment of the present invention does not participate in disk layout in relation to the metadata since the metadata of the file system is processed through the API provided by the DBMS. However in relation to the file data the file system according to an exemplary embodiment of the present invention directly controls the disk layout and thus a disk allocation algorithm optimized with respect to a multimedia environment can be used. Also since the DBMS neither manages file data nor generates a log on the file data even though the size of the file increases degradation of the performance of the file system does not occur.

In operation the DBMS is requested to update metadata that should be changed as the file data is written on the disk. For example database tables related to information about an inode and free disk spaces and non free disk spaces may be updated.

In operation the DBMS is requested to terminate the transaction. Accordingly since the DBMS regards the operations through as one transaction the metadata consistency of the file system is secured. For example if in operation a database table including information about a non free space is updated and then a power supply is cut off due to power failure before a database table including information about a free space is updated the DBMS treats the updating of the database table including information about the non free space as though no updating has occurred and thus does not apply related data to the metadata.

Also operation is performed only when operation is finished. That is operation is performed only after writing of the file data is finished. Accordingly operation is performed between operations and and thus the consistency of data can be secured. However in order to improve the performance of the file system operation may be performed irrespective of whether or not operation is finished.

Meanwhile in order to improve the performance of the file system a disk storing metadata may be disposed separately from a disk storing file data.

A super block database super.db stores information about the status of the file system and an inode bitmap. Information about the entire file system may be stored as one record. The inode bitmap also requires only a small number of records and thus this database has a record number RECNO based data structure and does not require a 2 dimensional index.

An inode database inode.db maps an inode number and file information of a corresponding file such as the size of the file and a last modified time. If a new file is created a new inode record is added to this database and if a file is deleted the record related to the file is deleted from this database.

A free space database freespace.db manages free spaces of a partition. At this time information about free spaces in the database table may be expressed in the form of an extent which is a continuous area of storage in a file system. The reason for expressing it in the form of an extent is that it can reduce the size of information more than when expressing it in the form of a bitmap. The extent format may be expressed with a block number specifying the start position of a free space and the number of blocks corresponding to the size of the free space or may be expressed with a byte offset specifying the start position of the free space and a byte unit indicating the size of the free space. In the file system according to the current embodiment in order to write data to a file a free disk space is searched for by referring to the free space database.

An extent database extents.db maps an offset of a file and a block address of an extent including the file data.

As illustrated in the file system according to the current embodiment is composed of a Syscall module a Namei module a Super module a Dir module an Inode module a File module an Alloc module a DB abstract layer DBAL module and an OS abstract layer OSAL module . Also in the current embodiment a Berkeley DB is used as a DBMS and it is assumed that metadata of the file system is input to and or output from a disk by ext3 .

The Syscall module provides an API in order to allow an application to use a system call and requests the DBMS to start and stop a transaction.

The Namei module analyzes an API function called by the application and determines a database that is to be updated. The Super module requests the DBMS to search and update super.db. The Dir module requests the DBMS to search and update dir.db. The Inode module manages free inodes by using inode.db.

The Alloc module obtains information about a free disk space and determines blocks in which file data is to be written by using a disk allocation algorithm optimized with respect to a multimedia environment or other environments.

The File module inputs file data to or outputs file data from a disk through an OS module not shown operating at a kernel level. For example the file data input and output can be performed in such a manner that data is written to a block device file or data is read from a block device file.

The DBAL module is an interface to ensure compatibility with the Syscall module and the DBMS . The OSAL module is an interface enabling processing of a block device that may vary with respect to an OS.

Meanwhile the file system according to the current embodiment as illustrated in operates at a user level and thus the source code of the file system does not rely on an OS. Accordingly compared to a file system operating at a kernel level the file system according to the current embodiment can be easily ported to other OSs and also maintenance of the file system is easier.

In operation the application provides a file name to the Syscall module and requests the Syscall module to create a file. In operation the Syscall module requests the DBMS to begin a transaction. In operation the DBMS begins the transaction.

In operation the Syscall module requests the Namei module to create a file. In operation the Namei module requests the Super module to provide an inode to be allocated to a new file. In operation the Super module that was requested to provide an inode from the Namei module requests the DBMS to search and modify super.db. After receiving the request the DBMS allocates a free inode to the new file by referring to the inode bitmap and updates super.db not shown .

In operation the Namei module requests the Dir module to register the new file in a directory. Accordingly in operation the Dir module requests the DBMS to search and modify dir.db. After receiving this request the DBMS maps the name of the new file and an inode corresponding to the file and stores it in dir.db not shown .

In operation the Namei module requests the Inode module to perform initialization of the new inode. In operation the Inode module requests the DBMS to register information about the new inode in inode.db. After receiving this request the DBMS stores information related to the new file in an inode corresponding to the new file not shown .

If operation is completed the Namei module informs the Syscall module in operation that the file generation is completed. In operation the Syscall module requests the DBMS to finish the transaction. In operation the DBMS finishes the transaction which started in operation .

In operation the application requests the Syscall module to write data to a file. At this time the name of the file the data the size of the data and offset information in the file are transferred to the Syscall module . In operation the Syscall module requests the DBMS to begin a transaction. In operation the DBMS begins the transaction.

In operation the Syscall module requests the File module to perform a write operation. In operation the File module requests the Alloc module to provide information about a free block of a partition. After receiving this request the Alloc module requests the DBMS to search and modify freespace.db in operation . After receiving this request the DBMS finds free spaces by searching freespace.db and transfers information about free spaces to the Alloc module in operation .

In operation the Alloc module transfers information about blocks in which data is to be written among free spaces of the partition to the File module . At this time the transferred information about the blocks may be different from the information about the free spaces transferred by the DBMS in operation . That is while in operation the DBMS transfers information about all free blocks of the partition the Alloc module determines blocks in which data is to be written by using a predetermined disk allocation algorithm and then transfers the information about the determined blocks. Accordingly the user can freely design a disk allocation algorithm in the Alloc module and can thus establish a file system optimized with respect to a multimedia environment without using the fixed disk allocation method according to traditional file systems.

In operation the File module provides the OS module operating in a kernel mode with the name of the partition offset information in the partition data and the size of the data raw input requesting write operation. In operation the OS module writes data on the disk based on the received information.

In operation the OS module notifies the File module that the write operation is completed. In operation the File module informs the Inode module that the write operation is completed. In operation the Inode module requests the DBMS to update inode.db by applying the changes that occurred in the corresponding file. According to the request the DBMS changes information about the last modified time and the size of the file not shown . Also in operation the File module requests the DBMS to modify extents.db. After receiving the request the DBMS updates extents.db by applying information about the block in which the data is newly written not shown .

In operation the File module notifies the Syscall module that the write operation is completed. In operation the Syscall module requests the DBMS to finish the transaction. In operation the DBMS finishes the transaction which started in operation .

In operation the application requests the Syscall module to read data from a file by providing the name of the file offset information in the file and the size of the data.

In operation the Syscall module requests the File module to read the data and in operation the File module requests the Inode module for information about corresponding blocks.

After receiving the request the Inode module requests the DBMS to search extents.db in operation . The DBMS searches extents.db extracts information about blocks in which the data is stored and then transfers the extracted information to the Inode module in operation .

In operation the File module requests the OS module to read the data by providing the name of the partition offset information in the partition and the size of the data raw output .

In operation the OS module reads the data on the disk and transfers the read data to the File module in operation .

In operation the File module transfers the data to the Syscall module . In operation the Syscall module transfers the data to the application . In this way the read operation is completed.

The present invention can also be embodied as computer readable codes on a computer readable recording medium. The computer readable recording medium is any data storage device that can store data which can be thereafter read by a computer system. Examples of the computer readable recording medium include read only memory ROM random access memory RAM CD ROMs magnetic tapes floppy disks optical data storage devices and carrier waves such as data transmission through the Internet .

According to a file system of an exemplary embodiment of the present invention metadata of the file system is processed through an API provided by a DBMS and thus transactions can be stably guaranteed.

Though the file system does not participate in a disk layout the file system directly controls the disk layout in relation to file data. Accordingly a disk allocation algorithm optimized with respect to a multimedia environment can be designed and used.

Furthermore in the file system of an exemplary embodiment of the present invention the DBMS manages only the metadata and not file data and does not generate a log on the file data. Accordingly even though the size of the file increases degradation of the performance does not occur.

Also the file system of an exemplary embodiment of the present invention operates at a user level not at a kernel level and thus the source code of the file system does not rely on an OS. Accordingly it is easy to port the file system to other OSs and maintenance of the file system is easier.

In addition in the file system of an exemplary embodiment of the present invention metadata and file data are stored in separate disks and thus inputting a file to or outputting a file from the disk can be performed more efficiently than in the related art file systems.

While the present invention has been particularly shown and described with reference to exemplary embodiments thereof it will be understood by those of ordinary skill in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present invention as defined by the following claims. The exemplary embodiments should be considered in descriptive sense only and not for purposes of limitation. Therefore the scope of the invention is defined not by the detailed description of the invention but by the appended claims and all differences within the scope will be construed as being included in the present invention.

