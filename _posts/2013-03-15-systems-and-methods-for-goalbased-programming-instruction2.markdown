---

title: Systems and methods for goal-based programming instruction
abstract: A computer-implemented method according to various aspects of the present disclosure includes receiving, by a computer system, a selection of a programming goal; identifying a skill associated with the goal; and generating, by the computer system, a lesson module for teaching the skill, the lesson module including an ordered list of steps for presentation to a student to teach the skill.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09595205&OS=09595205&RS=09595205
owner: NEURON FUEL, INC.
number: 09595205
owner_city: Mountain View
owner_country: US
publication_date: 20130315
---
The present application claims priority to Prov. U.S. Pat. App. Ser. No. 61 738 799 filed Dec. 18 2012 and entitled Programming Learning Center the entire disclosure of which application is hereby incorporated herein by reference.

Computers are ubiquitous and used for business education recreation and so on. Familiarity with the principles of computer programming and experience in computer programming is a useful skill. While familiarity with commonly used programming languages may be beyond the competency of many younger children even at a young age children can learn the basic principles of computer programming.

For example the learning center integrates social learning and unique game mechanics with a guided curriculum to deliver a highly engaging and rewarding experience to children of all ages. The learning center allows children to perform creative activities such as write digital storybooks and scrapbooks build video games animate their favorite characters and share these with friends and family.

Learning center workshop allows a user on a learning center client to build learning center programs visually using the interface for the learning center client. Learning center runtime allows a user on a learning center client to run learning center programs.

Learning module generator allows a user on a learning center client to generate learning modules from learning center programs. Learning module engine allows a user on the learning center client to run learning modules and guides the user to build a learning center program. The learning module engine validates all known triggers and keeps parameters within a known range.

A user from a learning center client accesses learning center workshop through an interface. For example the interface is a web browser or a dedicated app located on a computing device such as a personal computer or a tablet. When learning is launched a user can build a project which is essentially a computer program. Learning center workshop allows a user to construct a project computer program and save it. The computer program can be run using learning center runtime .

Upon entering learning center workshop a user can elect to build a new computer program from scratch or open an existing computer program.

To build a computer program from scratch the user utilizes blocks of programming instructions represented visually as building blocks within learning center workshop . The tools provided within learning center workshop allow a user to create a scene that includes a background main objects and actors. Learning center workshop allows a user to add computer program logic to the actors and the background. The user acts by dragging and dropping visual blocks into code areas. The visual blocks snap into place to form logic sequences.

Learning center workshop saves the computer program and all its assets as the computer program is being built. For example learning center workshop saves the computer program in a persistent format so that the computer program can be loaded later. This can be done for example in a Javascript Object Notation JSON format Extensible Markup Language XML or some other structured syntax. The computer program file may be stored on learning center server and in addition or instead of stored on the learning center client used by the user.

The flying bird project illustrated within interface shown in can be stored in file using language blocks for the learning center. For example Table 3 below sets out contents for such a file.

A user can use learning center runtime shown in to run a computer program built in learning center workshop . For example the interface by which the user accesses learning center runtime is a web browser on a computing device such as a personal computer or a tablet or is an app running on a mobile phone or tablet computer. For example the user may iterate through refining a computer program by making modifications such as adding and removing logic changing the code blocks used and testing the computer program to see how the computer program runs.

Scripts are registered against specific event types e.g. program start key event mouse event . As illustrated by arrow an external trigger event results in a script that has been registered in event registrations list being added to a scheduler which is a list of running scripts. Run loop picks up a script to execute from scheduler . The scripts are executed in parallel by scheduler . Scheduler determines how to select the next script e.g. round robin priority queue time queue . The execution context is restored from a runtime stack specific to that script. The instruction is executed as a non blocking process.

For example within a project runner in a block a next script is fetched from the scheduler. In a block execution context is restored for the fetched script. In a block an instruction is run. In a block context is moved to a next instruction. As illustrated by arrow block and block are continued until there is a context switch. A context switches occurs for example when the script has executed a yield instruction a time slice expires user interrupts execution etc. When there is a context switch in a block execution context is saved and context is returned to block . If the end of the script has not been reached the script is retained in the scheduler . If the end of the script has been reached the script is removed from runtime stack and the list of running scripts within scheduler .

For example for learning center runtime scripts are written using Javascript. Javascript is a single threaded environment in a web browser. A sequence of instructions is executed sequentially until the sequence relinquishes control back to the web browser before other instruction sequences will execute. As a result multiple Javascript sequences cannot run at the same time.

For example the learning center represents instructions as blocks so that each block represents one instruction that executes atomically that is without being interrupted by another block. Each block must relinquish control back to the web browser in a timely fashion. Scheduler therefore maintains a context for each script sequence. Scheduler selects a script sequence switches to that script s context and executes a predetermined number of blocks for each turn. Scheduler then selects the next script sequence and repeats until all scheduled scripts have run their turn. At this point scheduler relinquishes control back to the web browser. The web browser starts up another time slice where another script sequence is executed. As a result multiple scripts can be run at the same time.

In a block a project is loaded. In a block assets are iterated. In a block assets are fetched from assets storage . In a block paths to assets are resolved and rewritten. In a block optimization is performed. For example the optimization can include removing assets not used by a target as shown in a block . Likewise the optimization can include recompressing and or scaling assets for the target as shown in a block . Also the optimization can include native code generation as shown in a block .

Once a computer program project is complete a user can choose to create a lesson module based on the computer program. For example the user can choose a create lesson option in learning center workshop to activate learning module generator .

Learning module generator includes a parser that parses through the computer program that the user built and generates a task list for the lesson module. For example learning module generator reads through the computer program identifies all objects and identifies actions to recreate the computer program. Then different kinds of steps are generated based on the results of parsing the computer program. A list of ordered steps are generated where complex tasks are outlined and grouped together.

As shown in a drop down menu accessed by a user from the Tropical Bird label on the menu bar of user interface includes a selection to Create Lesson . As a result learning module generator shown in is invoked and generates a lesson module from the computer program shown in Table 3 for the flying bird project.

In a block learning module generator iterates through scripts. This is done for example to discover dependencies between messages and actors etc. as shown in block to sequence script steps by dependencies as shown in block and to determine cyclic dependencies and establish a preference for definitions as shown in block .

As represented by arrow learning module generator then generates a sequential list of steps . As illustrated by block a user can add notations to sequential list of steps . As illustrated by block a user can reorder steps within sequential list of steps .

Once the list or ordered steps are generated the user can customize the lesson module. For example the user can change the order of steps so that the reconstruction of the steps of computer program occurs in a different order than the steps as they originally appeared in the in the computer program when authored. Learning module generator is used to assure that dependencies between steps are accounted for.

For example learning module generator allows a user to add voice over in each step. The voice over is played back while the lesson module is being run within learning center runtime . Similarly learning module generator allows a user to add video in any step. The video is played back while the lesson module is being run within learning center runtime . Also learning module generator allows additional steps to be added in between the steps for the lesson module originally generated by learning module generator . For example text for the lesson module can be customized When the user has completed modifications learning module generator saves the workflow as a lesson module.

Table 4 shows an example of computer program for a complex project lesson produced based on language blocks from the flying bird project set out in Table 3 

Learning module engine shown in is invoked when a user runs a lesson module. For example a user from a learning center client utilizes learning center workshop through an interface to invoke the lesson module. For example the interface is a web browser on a computing device such as a personal computer or a tablet. For example when learning is launched a user chooses to run the lesson module using a browser. Then learning module engine takes over and guides the user to complete the lesson within the lesson module.

For example learning module engine displays a lesson bar that shows the steps that the user must perform. The area of the screen that the user must work on is highlighted and in order to proceed the user must complete a current task. For example learning module engine provides the user with real time help such as a Hint Show Me button. Learning module engine also plays any voice over or video associated with the lesson module. Learning module engine also for example provides a user with an option to fast forward several steps in a larger task and an option to step backwards.

For example learning module engine while the user adds logic highlights the source and target areas of the task. If the user makes a mistake learning module engine takes the user back to a known state. Once the user has recreated the original program the lesson is complete. The user can then use learning module generator to modify the lesson module.

For example learning module engine can also operate in other modes. For example learning module engine can include a mode where a user can open a lesson module and learning module engine will animate the lesson module to a certain step. Similarly learning module engine can include a mode where a lesson module is run in slow motion continuously with voiceover. This mode can be useful for example when a user wants to generate a video.

From within a lesson runner a get instruction block fetches an instruction within the instructions loaded by lesson loader . The instruction may include for example lessons steps from lesson steps assets from assets and blocks from blocks used . Get instruction determines the type of instruction and passes it to the appropriate lesson step handler.

A determine type block within learning module engine sequentially handles instructions from lesson loader and determines instruction type.

For a plain note the message is displayed and or spoken. This is an informational message requiring either a timeout or user acknowledgement to continue. This is represented in where for a note learning module engine displays a message as represented by a block .

When a resource instruction is run the resources that are to be used when hints are turned on are highlighted. The lesson step instructions are displayed and or spoken with entered explanations from the lesson creator. A check is performed that the resource was placed in the correct place by checking the associated project data structures for the correct placement. This is represented in where for a resource instruction learning module engine displays a workshop window and highlights change as represented by a block . Learning module engine also validates settings as represented by a block .

A code block instruction when run highlights the block to be used when hints are turned on and shows where the block should be placed on the code canvas. The lesson step instructions are displayed and or spoken with entered explanations from the lesson creator. A check is made that the block was placed in the correct place by checking the associated project code data structures. If validation is not successful a message appears offering some hints. For example the hints might include such things as animating actions highlighting location on the display or masking location on the display.

Users are optionally allowed to proceed to the next step in which case the lesson runner performs the action on behalf of the user. If validation was successful the next lesson step is executed. This is represented in where for a code block instruction learning module engine displays code and highlight blocks as represented by a block . Learning module engine also validates programming blocks as represented by a block . After an instruction is processed in a block a next instruction is obtained. The lesson proceeds until no more steps at which point the runner can offer additional activities or the user lesson creator can embed additional activities that can be done.

For example the Learning Center also allows the creation and running of puzzle type lessons with system validating success and failure type triggers.

That is a puzzle is an example of a special kind of lesson that has built in validation. For example the puzzle has a specific success criteria that the author defines such as Make the robot go to the green square. 

The author of a puzzle lesson module builds the project computer program using learning center workshop. When building the lesson modules the author uses two special blocks of code a success criteria block and a failure criteria block. The author uses the blocks to define success and failure and to indicate the consequences of success and failure. The author then uses learning module generator to generate a lesson module for the project.

When a user opens the project in a lesson running mode upon a user completing an action learning module engine will check whether the success or failure criteria are valid. Learning module engine will then execute the consequences of success or failure as appropriate. This is illustrated in .

For example the learning center allows a user to define activities that can be automatically validated by the learning runtime. For example a task is presented to the student to accomplish a goal such as to write code to move a golf ball into a hole. The student creates the code. In order to check whether the code accomplishes the task code blocks that the student has added can be checked to see that the code blocks are in the correct order. Alternatively a trigger methodology can be used to determine whether the task was accomplished.

For example a trigger is assigned to the objects that a user manipulates. The trigger is based on whether a criteria placed within the computing program has been satisfied. For example the objects are a ball and a hole. The triggers are hidden from the user. The triggers are code instructions that check for the criteria as delineated by parameters. If the parameters are satisfied the trigger is fired and the process that checks that the code can determine whether the user accomplished the task. For example a geometric criteria specifies that a ball must travel a certain distance. For example a hole trigger checks that the ball is within the bounds of the hole.

In addition other types of criteria can be used. For example a time based criteria indicates whether a task is completed within a specified amount of time. For example did a mouse finish a maze in under 8 seconds A code based criteria determines whether code used to accomplish a task is within predetermined parameters. For example was a lesson completed using under 8 code blocks and without using recursion Value based criteria determine whether a particular value was reached. For example was a score greater than 25 Event criteria determine whether a certain event criteria was received. For example was a message sent by one of the actors A physics based criteria indicates a physical property or phenomena occurred. For example did a cannon ball reach a velocity of at least 25 meters per second An external physical criteria indicates some real activity outside the program occur. For example did a sensor on a physical stage robot move 10 feet 

An activity monitor within lesson runner includes a timer module a resource monitor and an event monitor . Lesson runner performs a compare function with a step list . Step list includes steps resources used and blocks used . Each of steps may be an asset to add step a code to add step or a property to change step .

After a project author generates a lesson module within learning center server the author can make the lesson module available to other users of learning center server . For example other users are charged a fee for using a lesson module made available by an author and the author receives a portion of the fee based for example on the number of other users that use the lesson module.

For example an author is reimbursed based on tracking the number of times another user views or completes a lesson authored by the author. For example an author gets paid 2 for every 1000 lesson views inside a paid course authored by the author. Alternatively an author can sell a lesson for a flat fee.

Embodiments of the present disclosure can be used to generate lessons of varying scope to teach different programming aspects to students. In exemplary embodiments students may select one or more programming goals they d like to learn from a list of possible programming goals presented to the user via the user interface . Goals presented in this manner may include pre written projects and or lesson modules that can be parsed by the learning module generator to generate a list of tasks to teach the concepts skills and techniques associated with the goal.

Alternatively a student may identify a software program such as a game or portion thereof that the student wishes to learn how to write thereby presenting the student s own goal learning to write a similar program to the learning center workshop or other software implementing functionality of the embodiments of the present disclosure. In such cases systems and methods of the present disclosure can analyze the program and based on pre identified goals skills concepts and code blocks identify the goals skills techniques and concept involved in writing the program then generate a lesson module accordingly.

The programming goal identified by a student may pertain to any desired subject matter programming language functional effect hardware component s or other characteristic. Exemplary goals may include creating a cartoon with sound designing a game creating an animated greeting card and many others. A variety of techniques and skills may be associated with each goal and each technique or skill may in turn be associated with various core programming concepts.

For example one possible goal that a user may select is to learn how to build a single player side scrolling game. This goal could be selected from a gallery of possible goals or by the user identifying a side scrolling game the user wishes to emulate. Associated with this goal may be one or more skills and techniques such as animation interactivity general game building sound handling and others. Each skill or technique in turn may have one or more associated lower level i.e. more detailed or fundamental concepts.

In the exemplary method a programming goal is received . Where the goal is associated with a learning workshop project external computer program or other software such software can be parsed to identify code blocks and a statistical and pattern matching analysis performed on the code blocks to identify the concepts and skills techniques associated with the goal. Alternatively or in addition the identification of concepts and skills may be performed by retrieving concepts skills code blocks and or lesson modules stored in conjunction with the goal in a database. A lesson module is generated in accordance with the identified skills techniques and concepts for presentation to a student.

The programming goal may be received by the learning center workshop in any suitable manner. For example a student may select the programming goal from a list of possible programming goals presented to the user via the user interface . A list of goals may be presented using graphics icons buttons pulldown menus and or any desired user interface feature. The student may also input one or more keywords to perform a search to find a goal associated with the one or more keywords. In this case the goal and its associated skills techniques concepts and projects programs may be stored in a database accessible by the learning center workshop learning center server and or other hardware or software component implementing methods of the present disclosure. Alternatively the programming goal may be received by the student identifying a program or portion thereof that the student wishes to learn how to emulate.

The identification of higher level programming skills and techniques associated with a goal or lower level programming concepts associated with skills and techniques may be identified using similar or different techniques and according to any desired criteria. Any number of skills and techniques may be associated with any particular goal just as any number of core concepts may be associated with each individual skill technique. Goals skills techniques and concepts may be associated with identifying tags. Such tags can be defined and assigned to code blocks programs goals skills techniques and concepts stored in a database in communication with the learning center workshop . As discussed below this repository can in turn be used to tag code blocks programs goals skills techniques and concepts for new programs e.g. identified by a student as part of a programming goal the student wishes to achieve .

The goals skills techniques and concepts may have a hierarchal relationship with each other. For example a goal at the highest level of the hierarchy may have a plurality of associated skills at a lower level in the hierarchy with each associated skill associated with one or more programming concepts at an even lower level. In this context low level refers to a lower level of abstraction and thus a higher level of detail whereas high level refers to a higher level of abstraction and thus a lower level of detail associated with a goal skill technique or concept. Accordingly a low level concept might be associated with mathematical operators while a relatively higher level concept or skill might be associated with geometric art that includes the use of mathematical operators as well as other lower level concepts.

In response to the selection of a goal the learning center workshop may identify one or more concepts and or skills necessary for the student to achieve the goal as well as skills or techniques associated with the goal in any other desired manner Skills may be identified in response to the goal selection in real time or near real time or they may be predefined. For example in a case where the student selects a programming goal from a list the skills techniques and concepts may be pre defined and stored e.g. in a relational database record in conjunction with a pre generated lesson module.

In another example in a case where the student identifies his or her goal by identifying a computer program the student wishes to learn how to write or emulate the learning workshop may analyze the program entered by the student to identify the goals programming skills techniques concepts and code blocks associated with the identified program. The student can identify a computer program in any desired manner such as by uploading source code or object code for the program into the learning center workshop or by providing a link to the program. The student may identify an entire complete program as well as portions of a program such as individual functions or code fragments associated with a programming goal the student wishes to achieve.

The code identified by a student is parsed to identify one or more code blocks within the code. Each identified code block is compared to code blocks known to the learning center workshop e.g. stored in a database and associated with one or more concepts skills and or goals . Based on the similarity between the identified code block and one or more known code blocks concepts skills and techniques can thus be assigned to the overall code.

In the exemplary method one or more code blocks may be compared to known code blocks based on similar patterns. Such patterns may include or be based upon sequences of instructions variable names function calls interactions with other program elements and any other desired features or criteria. A pattern may be identified for one or more lines of code as well as for one or more code blocks.

Embodiments of the present disclosure may determine the functionality of blocks of code in an identified program. Among other things this may aid in comparing the identified blocks to known coding blocks with similar functionality. Functionality of one or more code blocks may be determined in any suitable manner. For example an identified code block may be executed using a virtual machine i.e. a software simulator that emulates the functionality of a real world system and the functionality of the block determined based on the execution. The functionality of the identified code block can then be compared to the functionality of known code blocks associated with one or more goals skills techniques and or concepts. The functionality of a code block may include for example user input output to a user modification of one or more states by a user an environmental restart e.g. characters in a game are reset to their initial state and combinations thereof. Among other things use of a virtual machine to execute code blocks allows embodiments of the present disclosure to analyze code executable across a variety of different hardware platforms and operating systems without having to test the code blocks on each actual platform.

The code identified by a student may have any number of different identified code blocks associated with it. Additionally some code blocks may be associated with multiple goals skills concepts and or techniques and therefore may not by themselves be determinative in identifying a particular concept or skill for the identified code. Embodiments of the present disclosure may perform any desired analysis or other procedure to help ensure a lesson module is generated that correctly addresses the subject matter associated with a student s goal.

For example embodiments of the present disclosure may perform a statistical analysis to identify concepts and skills associated with a program. The statistical analysis may include calculating the probability that an identified code block or group of code blocks is associated with a skill concept or goal based on the known code blocks and the skills concepts and goals with which they are associated. A particular skill or concept can be assigned to the code identified by the student in response to such a probability meeting or exceeding a predetermined threshold. Probabilities for any number of different code blocks can be calculated in any desired manner such as by calculating for each of a plurality of identified code blocks a probability that each respective identified code block is associated with each respective skill from the one or more skills.

In one example a program identified by a student may be parsed and the code blocks within the code identified via pattern matching to known code blocks as having the following skill and concept tags associated with the code 

This sequence of skills and concepts can then be compared to the skills and concepts associated with known programs e.g. stored in a database in communication with learning workshop that are representative of programs associated with the various skills and concepts.

In this example the probability each concept or skill is associated with a particular type of program specifically a game is as follows 

In this example out of all programs in the database identified with the game tag 90 of the time there is an animation sequence but only 10 of the time is there a programmatic music sequence. Embodiments of the present disclosure may calculate probabilities in any desired manner such as by utilizing a Bayesian calculation. Continuing the previous example the probability that a sequence associated with a skill or concept is in the program identified by the student may be calculated using the following equation probability of sequence type in program probability of being program type given sequence probability sequence appears in program type probability sequence appears in other program types 

Additionally the probabilities for all the block sequences as a whole can be determined. The respective probabilities for each sequence are in a given type of program can be combined in an extension of a Bayesian equation as follows probability of program type 12 12 11 12 . . . 1 

Using the above exemplary equations the program identified by the student in this example would have a probability of 0.999 99.9 that is a game program. In embodiments where the learning center workshop assigns a tag for a goal skill or concept to a program when the probability that one or more code blocks are associated with the same goals skills or concepts assigned to one or more known code blocks or programs meets or exceeds a threshold of for example 90 the program would be assigned the game tag in this example. In the same manner the probability that the code block sequences in the program are associated with another type program may be used to determine the identified code or identified code blocks are not associated with a particular goal skill or concept. For example if the individual probabilities that the code block sequences are associated with a music program are 

then the program will have a very low probability of being a music program because music programs have more programmatic music elements rather than animation motion keyboard interation and score tracking.

The statistical analysis may include other calculations and analyses as well. For example embodiments of the present disclosure may be configured to generate alerts in response to one or more calculated probabilities that a goal skill and or concept associated with a particular code block group of code blocks or program being below a predetermined threshold. Using the example above an alert might be generated in response to the individual probabilities for three of the five identified concepts and skills being below 40 . In other cases an alert could be generated in response to the probabilities associated with each of any desired number or percentage of identified code blocks being below a predetermined threshold.

Embodiments of the present invention may determine complexity metrics associated with the identified code. The complexity metric can be determined for individual code blocks as well as for the identified code as a whole. Among other things the complexity metric can help students and teachers determine whether the difficulty of a particular programming goal or project. Exemplary complexity metrics may include a type associated with a code block the number of code blocks in the code a level of nesting in a code block a number of devices e.g. input output devices communication hardware interfacing with the code a type of media e.g. sounds images video used by the code functionality of the code and combinations thereof.

The lesson module is generated in accordance with the identified goal skills techniques and concepts as described above. While method is described in accordance with generating a lesson module for a single goal the learning center workshop may generate a lesson module that includes steps for teaching a student about any number of different goals skills techniques and concepts. For example for each skill technique or concept identified the learning center workshop may generate a respective step or set of steps in the ordered list of steps in the lesson module particularly tailored to teach a student the respective skill technique or concept.

Referring now to diagram illustrates a hierarchal view showing the relationships between various exemplary goals techniques and skills and core concepts . As described previously a goal may be described in text as with goal represented by an image such as goal representing a goal of animating a drawing or in any other desired manner. In accordance with diagram the learning center workshop may identify two skills techniques associated with goal namely animation and interactivity . In turn animation may be associated with the core concepts of delay motion and loops while interactivity may be associated with the concepts key handling and events . While animation and interactivity are illustrated as each being associated with different concepts goals techniques skills and concepts may be associated with each other in any suitable manner including multiple techniques skills being associated with the same concept .

Various embodiments of the present disclosure may be implemented in computer hardware firmware software and or combinations thereof. Methods of the present disclosure can be implemented via a computer program instructions stored on one or more non transitory computer readable storage devices for execution by a processor. Likewise various processes or portions thereof of the present disclosure can be performed by a processor executing computer program instructions. Embodiments of the present disclosure may be implemented via one or more computer programs that are executable on a computer system including at least one processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. Each computer program can be implemented in any suitable manner including via a high level procedural or object oriented programming language and or via assembly or machine language. Systems of the present disclosure may include by way of example both general and special purpose microprocessors which may retrieve instructions and data to and from various types of volatile and or non volatile memory. Computer systems operating in conjunction with the embodiments of the present disclosure may include one or more mass storage devices for storing data files which may include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data also called the non transitory computer readable storage media include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM disks. Any of the foregoing can be supplemented by or incorporated in ASICs application specific integrated circuits and other forms of hardware.

Changes and modifications may be made to the disclosed embodiments without departing from the scope of the present disclosure. These and other changes or modifications are intended to be included within the scope of the present disclosure as expressed in the following claims.

