---

title: Detecting application behavior
abstract: There is provided a method including generating, by a security application executed in a processing device, an application list including one or more applications which are currently running in the processing device; identifying at least one network address fulfilling predetermined criteria; determining which of the at least one network address fulfilling the predetermined criteria has been connected to by the processing device within a predefined time period; and providing a post-processing entity with the application list and an indication on which of the at least one network address fulfilling the predetermined criteria has been connected to by the processing device within the predefined time period.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09349003&OS=09349003&RS=09349003
owner: E-Secure Corporation
number: 09349003
owner_city: Helsinki
owner_country: FI
publication_date: 20131113
---
The invention relates generally to detecting application behavior on clients devices. More particularly the invention relates to detecting application behavior on restricted platforms.

It may be of importance to detect which application is malicious or belongs to a family of malware for example. It is known to detect and analyze application behavior in a static way e.g. by analyzing its code and data. However monitoring their behavior may be more effective. Unfortunately not all platforms allow such monitoring.

According to an aspect of the invention there is provided a computer program product embodied on a distribution medium readable by a computer and comprising program instructions which when loaded into an apparatus cause the apparatus at least to generate an application list including one or more applications which are currently running in the processing device identify at least one network address fulfilling predetermined criteria determine which of the at least one network address fulfilling the predetermined criteria has been connected to by the processing device within a predefined time period provide a post processing entity with the application list and an indication on which of the at least one network address fulfilling the predetermined criteria has been connected to by the processing device within the predefined time period receive from the post processing entity a response comprising instructions related to a specific application included in the application list when the post processing entity has determined that the specific application has connected to the network address fulfilling the predetermined criteria and perform an action with respect to the application on the basis of the response.

According to an aspect of the invention there is provided a computer program product embodied on a distribution medium readable by a computer and comprising program instructions which when loaded into an apparatus cause the apparatus at least to receive a set of information from each of a plurality of processing devices wherein each set of information comprises at least the following an application list including one or more applications which are currently running in the given processing device and an indication on which of at least one network address fulfilling predetermined criteria has been connected to within a predefined time period by the given processing device determine which of the one or more applications in the application list have made connections to which of the at least one network address fulfilling the predetermined criteria on the basis of a statistical analysis and the received sets of information from each of the plurality of processing devices and respond to each of the plurality of processing devices with instruction relating to a specific application included in the application list when the specific application has been determined to have connected to the network address fulfilling the predetermined criteria wherein the instructions cause the plurality of processing devices to perform an action with respect to the application on the basis of the response.

According to an aspect of the invention there is provided an apparatus comprising processing means configured to cause the apparatus to perform any of the embodiments as described in the appended claims.

According to an aspect of the invention there is provided an apparatus comprising a processing system configured to cause the apparatus to perform any of the embodiments as described in the appended claims.

According to an aspect of the invention there is provided an apparatus comprising means for performing any of the embodiments as described in the appended claims.

The following embodiments are exemplary. Although the specification may refer to an one or some embodiment s in several locations of the text this does not necessarily mean that each reference is made to the same embodiment s or that a particular feature only applies to a single embodiment. Single features of different embodiments may also be combined to provide other embodiments.

The processing device may be any electronic apparatus capable of downloading and possibly uploading data over the network . A non exhaustive list of the types of the processing device includes an electronic digital computer a desktop computer a portable computer a laptop computer a tablet computer a smartphone a mobile phone a user terminal a user equipment a cellular phone or any other electronic apparatus requiring download control. The client s apparatus may employ an operating system such as Android Microsoft Windows Microsoft Windows Phone Apple iOS Apple Mac OS X Berkeley Software Distribution BSD Google Chrome MeeGo Blackberry OS Linux Unix or Symbian for example. The processing device may comprise at least one processor and at least one memory storing a computer program code controlling the operation of the at least one processor.

The network may include various wired wireless standard non standard proprietary communication networks such as a computer network a private network an IP based network TCP IP Transmission Control Protocol Internet Protocol the Internet the telephone network including the public switched telephone network any mobile phone network regardless of the generation such as 2G 3G 4G beyond 4G etc. such as GSM Global System for Mobile Communications GPRS General Packet Radio Service EGPRS Enhanced GPRS WCDMA Wideband Code Division Multiple Access UMTS Universal Mobile Telephone System 3GPP The 3rd Generation Partnership Project IMT International Mobile Telecommunication LTE Long Term Evolution LTE A LTE Advanced and other radio systems in their present forms and or in their evolution forms such as WLAN Wireless Local Area Network based on IEEE Institute of Electrical and Electronics Engineers 802.11 standard or its evolution versions IEEE 802.11ac etc. WiMAX Worldwide Interoperability for Microwave Access or Wi Fi for example. The user may apply the personal computing device in accessing the servers connected the network for example.

The servers may be a part of the client server computing model that acts as distributed application which partitions tasks or workloads between the provider of a resource or service called the server and the service requester called the client . The server computer is a host that is running one or more server programs which share their resources with the personal computing devices . The processing device may request a server s content or service function. The client may thus initiate a communication session with the server which awaits incoming requests.

A use of the processing device over the network such as surfing the World Wide Web or Internet may be hazardous as criminals have infested the network by malicious software malware including computer viruses worms Trojan horses spyware adware rootkits ransom ware and other malicious programs. Therefore the client s processing device may comprise a security software application connected to an operating system OS of the personal computing device . The security software application may comprise antivirus software a firewall a network traffic monitoring etc. that monitor the operation of the personal computing system and attempt to detect any viruses or malicious software malware attempting to exploit vulnerabilities and or cause harm in the personal computing device and in communication protocols used for accessing the computer networks . The security software application may be connected to a security server at least intermittently to check for the latest virus worm and malware definitions and configurations. That is the security server may comprise such security information which the processing device may download and in that way update its security software application . The security software application may be a self sustained application able to detect and quarantine any viruses attack vectors and malware autonomously or it may contact the security server for instructions or virus malware definitions upon detecting suspicious content or a possible attack.

The domain name server associates various pieces of information with domain names assigned to each of the participating entities. The DNS server resolves queries for these names into internet protocol IP addresses such as into IPv4 or into IPv6 addresses for the purposes of locating computer services and devices worldwide. Thus it translates human friendly computer hostnames such as www.example.com into IP addresses. In other words there are two different name spaces used the domain name hierarchy space and the IP address space. The DNS server service maintains the domain name hierarchy space and provides translation services between the domain name hierarchy space and the IP address spaces.

The client s device may comprise a DNS resolver for initializing and causing the transmission of the translation query to the DNS server which may be of recursive nature. However it may be advantageous to keep a DNS cache accessible by the client s device . This is because accessing the DNS server over the network each time certain domain name needs to be resolved into an IP address may take some time. To improve efficiency reduce DNS traffic across the network and increase performance in end user applications the DNS may support DNS caching in which DNS query results for a certain period of time are stored in the DNS cache . For example when the client wants to access a certain domain which has been recently queried and thus existing in the DNS cache the translation may be obtained from the DNS cache instead of the DNS server . Thus the network need not necessarily be used for acquiring the corresponding translation. The DNS cache may locate in the client s device and or the Internet service provider may provide caching name servers for their customers.

An internet protocol IP routing information such as a routing table or routing information base may be stored and may comprise information listing the routes to particular network destinations addresses domains.

As said detecting malicious applications by monitoring their behavior has proven to be very effective. For example monitoring operations like file creation and network connectivity may be used to detect that an application belongs to a certain family of malware much more effectively than looking at the application in a static way e.g. analyzing its code and data . For example on the Windows OS documented callback functions provided by the OS may be utilized. The callback functions may allow visibility to the behavior of any application running on the system including file system operations registry operations and so on. The applications may also install undocumented hooks into the kernel of the OS or to the user space memory of processes to monitor the behavior of the applications.

However on many modern platforms such as on many mobile platforms the security model does not allow an application to monitor the behavior of other applications. For example these modern platforms include operating systems like Android and iOS. Therefore a proposal which enables the monitoring of at least certain behavior of some applications even on restricted platforms where monitoring the applications directly is impossible because of restrictions of the platform itself is needed. For example in such restricted platforms no direct callback functions may be available and the security model may prevent the installation of hooks .

Let s take a look at in which the acquisition of such application list Lis shown in more detail. In step the security application checks whether the operating system OS of the processing device allows the currently running applications to be queried directly or not. If the answer is positive then the method proceeds in step in which the security application requests the OS applied by the processing device to indicate which one or more applications are currently running. Consequently the security application may receive an indication on which one or more applications are currently running from the OS in step . Based on this information the Lmay be generated and saved. This may be an efficient way to acquire knowledge of the currently running applications.

However if the OS does not share information regarding the currently running applications the method proceed to step in which the security application determines which at least one application has been installed in the processing device . Such information may be obtained by querying the OS for example. That is even is the OS does not allow the currently running applications to be queried it may provide an indication of the installed applications. Thereafter the installed at least one application may be saved and considered as the currently running one or more applications Lin step . This may provide an efficient way of obtaining an all inclusive list Lof applications which may be run in the device .

Let us take another look at . In step the security application may identify at least one network address domain fulfilling predetermined criteria. From now on the terms network address and domain are used interchangeably. The predetermined criteria may in an embodiment comprise at least one of the following the network address is known to be malicious the network address is known to provide advertisements the network address is related to social networking the network address belongs to a set of predetermined network addresses. Such network address may also be part of autonomous system AS that is strongly associated with malware or other questionable activities like spam based on reputation information for example . A malware domain may not be the only domain which is of interest. In addition or instead domains comprising inappropriate content such as criminal violent religiously or politically inappropriate content and or adult nature may be of interest in the sense that applications making connections to such domains may be discovered as will be described later. In practise the predetermined criteria may be used to define a set of predetermined network address such as any list of domains that are to be used in categorizing applications and application behaviour. E.g. if there is need to find all social networking applications the list of network addresses may include social networking domains e.g. twitter.com facebook.com .

Thus the network addresses fulfilling the predetermined criteria may include a list of malicious network addresses or any network addresses of interest e.g. ad serving domains in case applications which show ads are of interest. In an embodiment the number of network addresses may be in the order of hundreds or thousands. Let us in the following refer to such list of candidate network addresses domains as L. In an embodiment the security application may receive the candidate list Lincluding the at least one network address fulfilling the predetermined criteria from the security server for example. In another embodiment the security application may itself identify the questionable network addresses.

In step the security application may determine which of the at least one network address fulfilling the predetermined criteria has been connected to by the processing device within a predefined time period. Connection may mean that the network domain fulfilling the predetermined criteria has been resolved and connected to by the device . It may be of importance to detect only those network addresses which have been connected to e.g. resolved by the processing device within the predetermined time period. This may be because as will be explained later the information of resolved domains may be used together with the list of currently running applications L. Therefore connections performed a long time ago may not be relevant with respect to the currently running L. The predetermined time period may be a certain time period from the present point of time to the past. The time period may be empirically derived for example.

It should be noted that the processing device may operate on a restricted platform which does not support hooking of certain networking application programming interfaces APIs . In an embodiment the determination of which of the at least one network address fulfilling the predetermined criteria has been recently connected to may be based on the information included in the local system wide DNS cache . In this case the predetermined time period may be based on system requirements such as the time to live TTL of the DNS cache . However before going deeper in to this embodiment let us look at further.

In step the security application may provide a post processing entity with the application list Land an indication on which of the at least one network address fulfilling the predetermined criteria has been connected to by the processing device within the predefined time period. In an embodiment the post processing entity may be a server such as the security server or an application running in such server. In yet another embodiment the post processing entity may be the client s processing device or an application running in the device . The post processing entity may determine which of the one or more applications in the application list Lhave made connections to which of the at least one network address fulfilling the predetermined criteria.

It should be noted that the processing device may operate on a restricted platform which does not allow applications be monitored directly. Thus for example in Android there may not be any way of directly querying the applications or the OS about the connection establishments by different applications. However this may be important to know in order to identify which applications connect to non desired domains. In this way the provided information may be used in a collaborative statistical analysis on a monitoring backend e.g. on the server where information from many clients is received and processed statistically as will be descried later.

The proposed solution may include monitoring the local system wide caches of the OS either directly or indirectly in the client s end by the security application routine . Let us next describe how to use one specific cache in particular the DNS cache .

On certain platforms it may be possible for the security application to directly query if the system wide DNS cache contains an entry for a certain domain name. In an embodiment this takes place as shown in by the security application acquiring in step the candidate list Lincluding the at least one network address fulfilling the predetermined criteria. Then the security application may determine which of the at least one network address fulfilling the predetermined criteria exists in the DNS cache applied by the processing device. This may take place as shown in step by querying the DNS cache for each entry in the candidate list Lin order to determine which of the at least one network address included in the candidate list Lexists additionally in the DNS cache . In other words the security monitoring application may use a certain API provided by the platform to query the system wide DNS cache for all entries in the L. Such comparison may provide a list L including for example malicious domains existing in the DNS cache . Then the list of positive hits entries found in the DNS cache maybe saved as the L. As shown in the example of list Lmay include domains B C to K X and Y whereas the DNS cache may comprise domains A C M and X. In this case it may be detected that out of these Lonly domains C and X exist in the DNS cache . That is only these two have been resolved within the TTL of the DNS cache . Thus the Lmay comprise only these two domains. Utilizing the DNS cache may be advantageous as the DNS cache is local which denotes that no information from external sources such as passive DNS records combined with records from temporal routing table need to be used. The DNS cache may also be accessed without rooting jail breaking modifying the given operation environment in order to accomplish given task.

However in many other platforms the system wide DNS cache may not be directly queried due to platform OS restrictions. Therefore the above solution for determining if an entry exists in the cache may not be possible. Therefore in an embodiment the security application may as shown in request to resolve a specific network address fulfilling the predetermined criteria twice in step . This may take place by the security monitoring application performing two DNS queries for each network address fulfilling the predetermined criteria. Alternatively the security application may perform two system calls that result in the specific network address to be resolved twice. It should be noted that the processing device may have acquired the candidate list L as indicated above.

In step the security application determines the time duration for each of the two resolving instances i.e. for example both of the two DNS queries are timed. Although the above mentions two resolving procedures instances in an embodiment there may be more than two resolving procedures for each network address fulfilling the predetermined criteria. Each time duration period may comprise the difference between the time instant for placing the query and the time instant of accessing the specific network address for example.

In step the security application performs a comparison on whether or not the time duration of the first resolving instance exceeds the time duration of the second resolving instance by a predetermined threshold. Performing the query twice may advantageously guarantee that the domain exists in the DNS cache during the second query. I.e. in case the DNS cache did not contain the specific domain before the first query the DNS cache will comprise the specific domain after the first query. In this manner the second resolving instance procedure e.g. the second DNS cache query for the specific domain may be considered as the baseline for the timing. It may be noted that the baseline may most likely be unique for each device and for each time instant because it may depend on the platform and the network environment. The predetermined threshold may be needed to account for different network environments for example. The predetermined threshold may be empirically derived and may depend on the device for example.

Thereafter if it is determined that the first resolving instance exceeds the time duration of the second resolving instance i.e. the baseline timing by the predetermined threshold i.e. upon obtaining a positive result in the comparison the method proceeds in step . In step it is determined e.g. assumed that the specific network address did not exist in the DNS cache before the first resolving instance. That is the specific network address was not resolved by the processing device before the first query. Then such network address is not added to the L.

However if it is determined that the first resolving instance does not exceed the time duration of the second resolving instance i.e. the baseline timing by the predetermined threshold i.e. upon obtaining a negative result in the comparison the method proceeds in step . In step it is determined that the specific network address did exist in the DNS cache already before the first resolving instance. That is the specific network address was resolved by the processing device already before the first query. This may indicate that some application running in the device may have caused the connection establishment to the specific domain. The network addresses which are determined to come from the DNS cache i.e. determined to exist in the DNS cache already before the first query are saved as L.

In a further embodiment as shown in the security application may acquire in step the candidate list Lincluding the at least one network address fulfilling the predetermined criteria. The security application may itself generate such list or it may receive the list from a server such as the security server or from another processing device for example.

In step the application may select a subset Lof the candidate list Laccording to a predetermined rule. In an embodiment the monitoring application takes a random subset of the acquired L e.g. 10 entries and saves it as the L. I.e. in this embodiment the predetermine rule may cause a random selection.

In step the application performs the steps to for each entry domain network address in the subset L. Thus the application obtains knowledge of entries domains network addresses which exist both in the Land in the DNS cache . The entries assumed to come from the DNS cache may be saved as L instead of the L. It should be noted that the application list Lmay comprise hundreds or thousands of entries. Going through all of them by performing two resolving instances procedures e.g. queries would take a lot of time. Thus it may be advantageous to select only the subset Land go through only the subset L. Finally in step the application provides information of the selected subset Land of the Lto the post processing entity. The approach of may require more clients to perform the above steps compared to the case of . This may be because each client is only looking at a subset Lof the list of interesting domains network addresses L. The security application may perform the above mentioned DNS cache lookups for any entries in Lthat will be visible to the network. It may be noted that when many processing devices send the L the post processing entity may aggregate these reports. Such information may be used to approximate the situation where clients can directly query the cache and send information about L.

In yet a further embodiment the processing device query the internet protocol IP routing table of the processing device for each entry in the candidate list Lin order to determine which of the at least one network address included in the candidate list Lexists additionally in the IP routing table . Such information about the IP addresses which the processing device has recently connected to may be obtained at least from the IP routing table of the processing device shown in . Thus querying or utilizing the DNS cache is not mandatory.

As shown in the post processing entity and in particular a security application i.e. monitoring backend executed in the post processing entity receives in step set of information from each of a plurality of other processing devices wherein each set of information comprises at least the following the application list Lincluding one or more applications which are currently running in the given processing device and an indication on which at least one network address fulfilling predetermined criteria has been connected to within a predefined time period by the given processing device i.e. the Lor the L. In addition each set of information may comprise an indication of at least one network address fulfilling the predetermined criteria which have been considered by the given processing device. That is the monitoring backend may additionally receive the list Lcomprising the selected subset of the L as explained.

As shown each client of the plurality of processing devices sends the tuple L L or the tuple L L L to the monitoring backend . As said earlier each of the plurality of processing devices may operate on a restricted platform which does not allow the applications to be monitored directly.

Thereafter in step the monitoring backend may determine which of the one or more applications in the application list Lhave made connections to which of the at least one network address fulfilling the predetermined criteria i.e. to domains included in the Lor in the L Such determination may be based on statistical analysis and the received sets of information from each of the plurality of processing devices and . The monitoring backend combines the tuples received from all clients and and uses collaborative a statistical analysis to determine which of the applications have made connections to which network addresses. The collaborative statistical analysis may be performed for example by using a known technology described in http carat.cs.berkeley.edu . In this cited reference the statistical analysis is used for the purposes of energy debugging. A person skilled in the art may readily apply the same statistical analysis for the information obtained according to any of the embodiments.

As any known statistical analysis tool may be utilized the details of the statistical analysis are not explained here. However as one example it may be said that the statistical analysis may observe that a certain application is present in many L s and similarly a certain malicious domain is present in many of the L s from the same processing devices. As a result it may be determined that this certain application is causing the corresponding processing device to connect to the certain malicious domain. The monitoring backend may for example observe based on the information from many clients and that certain malicious domain has been resolved due to a certain application which is run in each of the corresponding clients and . As a result the post processing entity may determine which applications running on the client devices have made connections to which of the domains of interest in the L.

As a further example consider a case where there are two applications one malicious and one benign. At the start there is no idea which one is the malicious one and which one is the benign. Let us further assume that both of the applications are present in many devices and that these same devices report that a same malicious domain has been connected to by the devices. In order to decide which of the two applications is malicious one option may be to look for devices that have reported only the benign application and have not reported the malicious domain.

Thereafter upon detecting that a specific application has connected to a network address fulfilling the predetermined criteria the post processing entity may perform one of the following request the corresponding at least one client and to kill the specific application request the corresponding at least one client and to remove the specific application indicate the specific application to the corresponding at least one client and store information indicating the specific application. The latter may be performed silently without indicating the corresponding at least one client and . Such storing may be beneficial e.g. if someone needs to verify the results manually. However how the post processing entity reacts may depend on the operating system of the processing device and possibly on the settings of the user of the processing device .

In an embodiment as shown in the processing device may in step receive from the post processing entity a response to the information sent to the post processing entity i.e. the Land L L . The response may comprise any of the indications as mentioned above such as kill remove . In step the processing device may upon receiving the response perform a further action on the basis of the response. In an embodiment the further action may be to kill and or to remove the specific application which has connected to a network address fulfilling the predetermined criteria as shown in step restrict the use usage of the specific application as indicated in step etc. Therefore in an embodiment the processing device may in response to acquiring the request from the post processing entity for example kill and or remove the specific application.

A specific mechanism to detect network connections caused by certain applications has been described above according to some embodiments. However in some other embodiments certain other event s instead of network connections may be monitored and detected assuming a corresponding suitable data source e.g. caches is are available.

In an embodiment the post processing entity may detect which at least one application on the received application list Lhas connected the network within the predetermined time period. The entity may perform such detection by knowing the type and capabilities of different applications for example. In addition identifying these applications may be aided by information from the corresponding processing device such as the device . The device may e.g. request the operating system to indicate which one or more applications have connected the network . The device may indicate these to the entity for example.

Thereafter in an embodiment upon detecting that a given application on the application list has not connected network within the predetermined time period then the entity may determine that at least this specific application is not responsible for connecting to the network address fulfilling the predetermined criteria. This may aid in efficiently disregarding those application which for sure have not made connection to the network address fulfilling the predetermined criteria.

In another embodiment the entity may detect that no application in the application list Lhas connected the network within the predetermined time period. This may cause the entity to determine that there is a malware application having administrative rights running in the corresponding processing device such as in the device . The entity may then indicate the determination result to the corresponding processing device in order to enable the corresponding processing device to perform an operation in the processing device on the basis of the determination result. An example operation may be that the device automatically runs malware or virus detection software to identify the malware application in the device . Another example may be that the device displays such indication for the user of the device for example.

The apparatus may be or be comprised in the processing device and comprise the control circuitry for carrying out the functions as described. The control circuitry may be configured to execute the OS of the processing device . As said the operating system may be an arbitrary operating system e.g. Microsoft Windows Mac OS iOS Linux Unix Berkeley Software Distribution BSD Google Chrome Android MeeGO Symbian Blackberry OS etc. As known in the art the operating system manages computer hardware resources e.g. the processor s included in the circuitry and provides services to applications of the processing device executed in the personal computing device .

The control circuitry may also execute the security application . The security application may run for example the application detection circuitry for detecting the currently running applications in the processing device a domain or a network address detection circuitry for detecting which domains network addresses fulfilling the predetermined criteria have been recently resolved connected to by the processing device and a timing circuitry for timing the DNS cache queries according to any of the embodiments.

The apparatus may be or be comprised in the post processing entity executing the functionalities of the monitoring backend . The control circuitry may be configured to execute the statistical analysis based on the information received from a plurality of clients by applying a statistical analysis circuitry . The control circuitry may further comprise a client control circuitry for transmitting commands to one or more clients for example.

The memory may be implemented using any suitable data storage technology such as semiconductor based memory devices flash memory magnetic memory devices and systems optical memory devices and systems fixed memory and removable memory.

The apparatuses may further comprise communication interfaces TRX comprising hardware and or software for realizing communication connectivity according to one or more communication protocols. The TRX may provide the apparatus with communication capabilities to access the radio access network for example. For example the operating system may configure the communication interface to provide a connection to the computer networks e.g. the Internet. The communication interface under the control of the operating system may be used to access the network servers for example.

The apparatuses may also comprise user inter faces comprising for example at least one keypad a micro phone a touch display a display a speaker etc. Each user interface may be used to control the respective apparatus by the user.

As used in this application the term circuitry refers to all of the following a hardware only circuit implementations such as implementations in only analog and or digital circuitry and b combinations of circuits and software and or firmware such as as applicable i a combination of processor s or ii portions of processor s software including digital signal processor s software and memory ies that work together to cause an apparatus to perform various functions and c circuits such as a microprocessor s or a portion of a microprocessor s that require software or firmware for operation even if the software or firmware is not physically present. This definition of circuitry applies to all uses of this term in this application. As a further example as used in this application the term circuitry would also cover an implementation of merely a processor or multiple processors or a portion of a processor and its or their accompanying software and or firmware. The term circuitry would also cover for example and if applicable to the particular element a baseband integrated circuit or applications processor integrated circuit for a mobile phone or a similar integrated circuit in a server a cellular network device or another network device.

The techniques and methods described herein may be implemented by various means. For example these techniques may be implemented in hardware one or more devices firmware one or more devices software one or more modules or combinations thereof. For a hardware implementation the apparatus es of embodiments may be implemented within one or more application specific integrated circuits ASICs digital signal processors DSPs digital signal processing devices DSPDs programmable logic devices PLDs field programmable gate arrays FPGAs processors controllers micro controllers microprocessors other electronic units designed to perform the functions described herein or a combination thereof. For firmware or software the implementation can be carried out through modules of at least one chip set e.g. procedures functions and so on that perform the functions described herein. The software codes may be stored in a memory unit and executed by processors. The memory unit may be implemented within the processor or externally to the processor. In the latter case it can be communicatively coupled to the processor via various means as is known in the art. Additionally the components of the systems described herein may be rearranged and or complemented by additional components in order to facilitate the achievements of the various aspects etc. described with regard thereto and they are not limited to the precise configurations set forth in the given figures as will be appreciated by one skilled in the art.

Embodiments as described may also be carried out in the form of a computer process defined by a computer program. The computer program may be in source code form object code form or in some intermediate form and it may be stored in some sort of carrier which may be any entity or device capable of carrying the program. For example the computer program may be stored on a computer program distribution medium readable by a computer or a processor. The computer program medium may be for example but not limited to a record medium computer memory read only memory electrical carrier signal telecommunications signal and software distribution package for example. Coding of software for carrying out the embodiments as shown and described is well within the scope of a person of ordinary skill in the art.

Even though the invention has been described above with reference to an example according to theaccompanying drawings it is clear that the invention is not restricted thereto but can be modified in several ways within the scope of the appended claims. Therefore all words and expressions should be interpreted broadly and they are intended to illustrate not to restrict the embodiment. It will be obvious to a person skilled in the art that as technology advances the inventive concept can be implemented in various ways. Further it is clear to a person skilled in the art that the described embodiments may but are not required to be combined with other embodiments in various ways.

