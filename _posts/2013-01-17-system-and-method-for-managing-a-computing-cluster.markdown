---

title: System and method for managing a computing cluster
abstract: A system and method that includes managing a computer cluster with a plurality of machines of a first version in an active configuration; adding at least one machine of a second version to the computer cluster; monitoring the operational status of the machine of a second version; and transitioning the computer cluster to use the machine of a second version in an active configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09338064&OS=09338064&RS=09338064
owner: Twilio, Inc.
number: 09338064
owner_city: San Francisco
owner_country: US
publication_date: 20130117
---
This application is a continuation in part of U.S. patent application Ser. No. 13 167 562 filed 23 Jun. 2011 titled SYSTEM AND METHOD FOR MANAGING A COMPUTING CLUSTER which claims priority to U.S. Provisional Application No. 61 357 938 filed 23 Jun. 2010 titled SYSTEM AND METHOD FOR MANAGING A PLURALITY OF HOSTS which are both incorporated in their entirety by this reference.

This invention relates generally to the cloud computing field and more specifically to a new and useful method and system for managing a computing cluster in the cloud computing field.

There are increasingly more and more cloud based services and platforms. While the use of cloud computing has been influential in allowing new products to be developed and built management of a computing cluster on which the service or platform runs is still a challenge. Each machine or device in the computing cluster typically has its configuration set individually. However changes in other machines can impact how one might configure a particular machine and synthesizing such information is not easily accomplished. Thus there is a need in the cloud computing field to create a new and useful method and system for managing a computing cluster.

The following description of the preferred embodiments of the invention is not intended to limit the invention to these preferred embodiments but rather to enable any person skilled in the art to make and use this invention.

As shown in a method for managing a computer cluster of a preferred embodiment includes hosting a plurality of machines in a networked computing cluster Silo connecting the plurality of machines of the cluster to a configuration controller S the configuration controller storing individual machine state for the plurality of machines S determining a new machine state from the state of the plurality of machines S and updating a machine in the computing cluster with the new machine state S. The method functions to create an interface for easy monitoring configuration and or orchestration of a computing cloud. More preferably the method enables a machine to be reconfigured based on changes in other related machines in the cloud not just changes for that particular machine. The method is preferably implemented in a system substantially similar to the one described below but may be implemented by any suitable system. In one preferred embodiment the method is used with a computing cluster for a telephony platform but the computing cluster may alternatively be for any suitable application. The machines are preferably managed and operated but may alternatively be part of a third party system s that are simply controlled through a configuration controller. The method preferably includes pushing new machine state to a machine. These steps preferably implement a publishing and subscribing model of communication which functions to provide real time control over the computing cluster.

Step S which includes hosting a plurality of machines in a networked computing cluster functions to operate a plurality of devices or hosts that require orchestration. The computing cluster is preferably an internet based plurality of machines i.e. hosts but may alternatively be an internally networked plurality of machines. The machines preferably provide computing and or storage capabilities. A machine is preferably a server but may alternatively be any suitable dedicated device or virtual device. A machine may alternatively be a virtual machine wherein a single device facilitates running a plurality of virtual machines. A machine is preferably configured with machine state to perform a particular task. In one preferred embodiment the computing cluster is used for a telephony platform. For a telephony platform the plurality of machines is preferably composed of call routers load balancers call queues media processors message routing devices resource databases and or any additional devices. The machines may alternatively be setup for any suitable type of computing cluster. The networked computer cluster is preferably hosted by the entity administering the method but the computer cluster may alternatively be hosted on a third party platform or the whole of the computer cluster may alternatively be distributed over a plurality of platforms or computing clusters. The entity administering the method preferably has some level of operational control of the machines composing the computing cluster either directly an API of third party service or any suitable control mechanism.

Step S which includes connecting the plurality of machines of the cluster to a configuration controller functions to create channels to send and receive messages between a central device e.g. a configuration controller and the devices making up a computing cluster infrastructure. The communication channels are preferably implemented through a pubsub infrastructure as shown in but any suitable communication system may alternatively be used. As part of the pubsub infrastructure Step S preferably includes subscribing to notifications of a plurality of machines S and receiving subscription requests from a plurality of machines S. External or internal hub s may be used as a message broker for relaying published messaged to those who have a subscription. By subscribing to notifications of a machine the configuration controller preferably receives operation information as the information is changed. A machine may have information actively requested from it. S may alternatively occur automatically without receiving an instruction requesting the information. S preferably occurs whenever machine state or operation changes. For example when the status of a machine changes such as due to an error the machine preferably publishes the information and the hub routes the information to the configuration controller because of the subscription to the machine. The configuration controller preferably maintains an updated database of machine state through such subscriptions as described in Step S. Step S preferably functions to establish individual subscriptions of a machine to messages generated by the configuration controller. The configuration controller can preferably selectively publish messages to any suitable subset of the plurality of machines that have a subscription. This may be accomplished in a variety of ways. A machine may have a plurality of types of subscriptions such as one subscription unique to messages for that machine a subscription to messages directed to machines with a particular status a subscription to messages directed to machines with a particular role and or any suitable subscription type. The subscriptions may alternatively be targeted through publication filtering. A subscription by the machine to the configuration controller preferably includes machine state. Information such as IP address or any suitable identifier role status or other operation information may additionally be communicated to the configuration controller. The machine state data of the configuration controller may be used to selectively publish information to hosts. For example a plurality of machines may have individual subscriptions to the messages of a configuration controller. At some point in time the configuration controller may only want to send a message to machines that have the role of a load balancer. The message is preferably only published to machines that have the role of a load balancer by filtering where the message is published. During communication data may be encrypted with a shared secret. A secret key or cryptographic code can be used to uniquely verifies communication between a machine and a configuration controller. The secret key is preferably supplied at boot time of the machine but may alternatively be established at any suitable time. The secret key is preferably included in communications between a host and the cloud manager or used to sign a communication. Any suitable authorization or security measures may alternatively be used. Other forms of communication may alternatively be used. In one variation a content delivery network system is used as an intermediary for machine state sharing. Machines preferably post machine state to the content delivery network CDN and the configuration controller preferably pulls the machine state information from the CDN as shown in .

The configuration controller may have several variations of infrastructure. One preferred variation includes a single configuration controller machine integrated with the plurality of machines. A plurality of configuration controllers may additionally be used. In one variation the configuration controller is implemented in an active passive configuration as shown in . In an active passive configuration one machine preferably acts as a primary configuration controller and a second configuration controller preferably acts as a secondary configuration controller that can be used when needed. In yet another variation the configuration controller is implemented in an active active configuration as shown in . In an active active configuration there are a plurality of configuration controllers cooperatively managing the cluster. Machine state is preferably stored in a shared resource in this variation. In yet another variation the machines of the cluster cooperatively function as the configuration controller in a peer to peer type configuration as shown in . In this variation a configuration controller service preferably runs on each machine. The configuration controller may alternatively have any suitable architecture and implementation.

Step S which includes the configuration controller storing individual machine state for the plurality of machines functions to store state information for machines of the computing cluster. The configuration controller is preferably a device or platform from which computing cluster orchestration may be carried out. The configuration controller may itself be distributively hosted. Machine state of a machine preferably includes configuration data and software. The machine state may additionally include operational data. The operational data may be external to the machine. The configuration data is preferably similar to file system related data. The software is preferably the code or source code executed by the machine. The operational data is resources such as a database media resources persistent data or any suitable data used in operation. The machine state may alternatively include any suitable combination of the configuration data software operational data and or other machine related data. The machines preferably publish changes in machine state to the configuration controller. Alternatively the configuration controller may periodically poll the machines. In yet another alternative the configuration controller pulls machine state from a CDN. The machine state is preferably stored in a database. The machine state database may be any suitable database or device for storing data such as a mySQL database JSON or an XML file. The machine state database preferably stores a record for each machine including the machine state. This information may include internal and or external IP addresses of the machines status role s capacity load and or any suitable operation information. As discussed further below the database may additionally store a security key for each machine to securely identify a machine. Current machine state is preferably stored and additionally past machine state may be stored as a version history of the machines. The version history is preferably the machine state from different points in time. These versions may be used in comparing the machine state from different times or from different machines and resolving problems.

Step S which includes determining a new machine state from the state of the plurality of machines functions to calculate a next state for a machine based on overall state of the cluster. A new machine state is preferably calculated based on the current machine state. The new machine state is additionally or alternatively calculated based on the machine state of associated machines of the computing cluster. The associated machines are preferably machines that interact directly or indirectly with the machine. Machines may alternatively be associated based on shared machine state e.g. having the same role or status . For example two machines that are configured as indicated in the machine state to be load balancers may be associated with each other. Calculating a new machine state based on the machine state of at least a second machine enables the machines to be updated more intelligently. Additionally a plurality of new machine states may be calculated for a plurality of machines. A new machine state may be any suitable change to a machine state. The configuration data may be changed. The software may change which may be an update to a new version of software or change in role. The operational data may change such as changes in a database resource of a machine. In some variations the new machine state may be a defined as provisioning a new machine to scale the computing cluster reprovisioning a machine to a new role restarting a machine or deprovisioning a machine to scale down.

The calculation of a new machine state is preferably initiated by a change in the computing cluster. In one variation calculation of a new machine state is due to the change in machine state as a result of operation. For example if a machine encounters an error then new machine states are preferably calculated for other machines to accommodate for the down machine. This may include provisioning a new machine with a previous machine state of the down machine or could alternatively be a redistribution of the machines responsibilities to other machines. This transfer of responsibilities is preferably conveyed through the new machine states. Similarly the calculation of a new machine state may be due to the usage and or capacity of the machine. Load and capacity may be communicated through the configuration data in the machine state. In another variation calculation of a new machine state is due to outside initiation. The configuration controller preferably includes an API which may be used by an outside system or operator. An operator may issue instructions to change elements of the computing cluster. For example an instruction may be set to scale particular resources up or down to update software to change operational data or perform any suitable orchestration instruction. The calculation of new machine state may alternatively or additionally be calculated using auto provisioning self healing and or any suitable algorithm. A finite state machine may be run to determine the new machine state of a particular machine as shown in .

In one variation the machines of the computing cluster include a plurality master devices each with a dedicated load balancers as shown in . Having a plurality of masters and load balancers distributes responsibility and creates a more scalable computing cluster. The master device preferably provides high level services but may serve any suitable service. In a preferred embodiment where the computing cluster is a telephony platform the master device is preferably a call router as shown in . The dependent machines may be any suitable support of load balanced machines such as media processors caches queues proxy servers or any suitable machines. The dependent machines i.e. machines managed by each load balancer are preferably conveyed in the machine state of the load balancer. Load balancers may be configured with new machine state based on changes in the machines for which they provide load balancing. Provisioning of a machine e.g. provisioning a new machine deallocating a machine etc. that is load balanced by a particular load balancer preferably causes a recalculation of machine state for at least one load balancer. When the load balancer is updated with the new machine state the load balancer and master device may be restarted to start load balancer of the changed dependent machines.

Step S which includes updating a machine in the computing cluster with the new machine state functions to set the machine to the new machine state. The new machine state is preferably communicated to the machine through the established channels of communication. The new machine state is preferably published through a hub and distributed to machines that have the appropriate subscription established in Step S. Publications may be filtered which functions to direct the new machine state to the appropriate machine s . As discussed above a new machine state can preferably be selectively published or filtered based on any suitable machine characteristic such as IP address or ID status role capacity load and or any suitable aspect. Once new machine state is received at the machine the machine may require being restarted to initialize the new machine state. Alternatively the new machine state may be initialized during run time.

Additionally a method of the preferred embodiment includes the step of receiving a message through an API of the configuration controller S which functions to allow outside instructions for management of the computing cluster. The API is preferably a convenient interface for users or systems to access and change the computing cluster system. The API is preferably a RESTful API but may alternatively be any suitable API such as SOAP. Additionally a user interface may be used as a front end control providing an alternate way for users to interact with the configuration controller through the API. The API is preferably used to alter configuration of a machine or machines. A user and or an outside system may issue API calls. The API may additionally be used to access information about the computing cluster. The configuration controller through the communication channels established in S preferably has stored and updated information about the machines. Additionally or alternatively the configuration controller may communicate with a machine requesting information. For example an HTTP GET message using a common HTTP client tools such as curl piped into an extensible stylesheet language transformation XSLT processor can be used to generate any suitable type of configuration file. The command shown in could be used with a suitable XSLT file to generate a firewall ruleset allowing access to only running hosts in the cloud. The API may alternatively be used for transferring data allocating or reprovisioning resources and or any suitable cloud computing management. Additionally a change to one machine may cause the determination of new machine state of a second machine. For example allocating a new device may require the determination of a new machine state for a load balancer.

As shown in a method for managing a computer cluster of a second preferred embodiment of the invention includes hosting a plurality of machines in a networked computer cluster S integrating a plurality of machines of the cluster with at least one configuration controller component S and altering the machine state of at least one service instance S. The method functions to create an interface for easy configuration and or orchestration of a computing cloud. The steps of the method may be used in any suitable combination with the steps of method above and any of the variations of two methods may additionally be applied to either of the embodiments. Step S S and S is preferably substantially similar to Step S S and S except as noted below. Method may additionally be applied to a machine or host such that multiple services of a machine may be impacted through one update.

As used in the description of method a service instance preferably runs on a host. A host is preferably a machine that has one or more service instances running on the host machine. A service instance refers to a specific implementation of a service. A service preferably describes a type of module that performs a particular task or tasks within the computing cluster. For a telephony platform the services of a computing cluster may include call routers load balancers call queues media processors message routing devices resource databases and or any additional devices. In some variations a service may be a dependent service. In other words a first service i.e. the dependent service may require at least a second service. The second service may additionally be dependent on other services. The dependencies of services are preferably acyclical. A host may additionally run a load balancer for services that the hosted services depend upon as shown in . If multiple services of a host share a common dependency on a service then a single load balancer may be used for that service. Each service instance preferably has machine state but a host may additionally have machine state. As described above machine state preferably includes configuration data and software i.e. business logic . The machine state may additionally include operational data and or any suitable description of the state of a service.

Step S which includes updating the machine state of at least one service instance functions to alter operation of a machine in cluster. Updating may include starting a service instance stopping a service instance removing a service instance updating the version of a service instance or reverting a version of a service changing type of service or any other suitable change. The update is preferably accomplished by sending a new machine state to a service instance. The machine state is preferably versioned so that the new machine state may be supplied through a version controlled version of the machine state. The software and configuration data are preferably version controlled while operational data is preferably automatically updated as shown in . The updating of the machine state may be initiated by an outside entity or alternatively through automatic monitoring.

One variation of the method includes receiving a specified service update S. An API or interface may be used for users or system to supply new machine state to the configuration controller. The specified service update preferably includes at least one service to update. The update may additionally include a sub group parameter to update a sub group of the instances of the specified service. If sub group parameter is note included all instances of the specified service are preferably updated with the new machine state. The sub group parameter may be used to update a particular instance e.g. using an instance ID update a fixed number update a percentage of service instances update a type of sub group e.g. service instance of a particular version number update a services based on a combination of conditions e.g. updating either 33 or 20 instances whichever is greater or updated according to any suitable way of specifying a sub group.

The method additionally preferably includes identifying service instances S which functions to determine which service instances to alter in Step S. Service instances may be identified by processing a configuration file. The file is preferably describes the architecture of the plurality of machines. In one example a markup language may be used to describe the configuration as shown in . Sub group parameters may be used to identify the appropriate service instances. Additionally the Step S may include identifying service instances that are dependent on a particular service instance. In this way when a service instance has machine state altered all service instances that depend on that service instance are notified of the change. Preferably a dependency graph is created to show the dependency relationships of the services of a computing cluster as shown in . The dependency graph is preferably acyclical. When building a dependency graph the configuration of the services may additionally be validated. For example cycles may be identified and eliminated. When altering machine state in Step S the service instances are preferably altered in an order based on the dependency graph. This may be from leaf nodes to dependent services or from dependent services to leaf nodes of the dependency graph. The order may additionally be based on what machine state changes are occurring. In the dependency graph dependency order follows the connections starting at the leaf nodes. In the variation where there is a load balancer for a service then that load balancer is preferably updated when the service being load balanced is altered.

In another variation the method includes monitoring the operation status of machines and or services of the computing cluster. A scaling parameter is preferably set so that services may be scaled automatically when the scaling parameter is satisfied. The scaling parameter may be threshold a pattern of events or any suitable parameter to trigger the altering of service and or host machine state. Thresholds are preferably set for appropriate operation parameters and when a machine or a service instance reaches the threshold scaling of a service may be automatically initiated by altering the machine state of appropriate services. A threshold is preferably set for provisioning and for deprovisioning such that the computing cluster can scale up and down. The configuration controller preferably manages this monitoring but monitoring may alternatively occur on the machine or by any suitable component. In a telecommunication platform the computing cluster preferably has very unique scaling requirements as compared to other systems. Large spikes may occur at any time. Telecommunication platforms additionally have a plurality of types of input channels. For example a telecommunication platform preferably supports voice sessions messaging e.g. SMS and or MMS video and any other suitable type of input channel. The types of input channels typically have different service requirements. Service may be monitored and automatically altered according to the type of input channel. Services that are shared between services may additionally be pooled between types of input channels. The type of input channels of a telecommunication platform may include voice video messaging e.g. SMS or MMS or any suitable type of input channel.

Additionally the method may be used to orchestrate a computing cluster being used with sustained session. A sustained session is preferably any suitable session that requires sustained use of a service instance for the duration of the session. Some examples of sustained sessions include voice calls and video streams that occur on telecommunications platforms. A service instance handling an operation for a sustained session is preferably kept at a constant state until all sustained sessions can cease use of that service instance. Preferably the service instances that are dependent on such a service instance are altered appropriately in preparation and when the sustained session ends then the service instance is altered.

As shown in the method of a preferred embodiment for managing a computer cluster may include managing a computer cluster with a plurality of machines of a first machine version in an active configuration S adding at least one machine of a second version to the computer cluster S monitoring the operational status of the machine of a second version S and transitioning the computer cluster to use the machine of a second version in an active configuration S. The method functions to use methods of computer cluster management of a preferred embodiment to control the release of new machine versions. The method may additionally add the machine of a second version in a staging configuration according to various transition strategies. Using the transition strategies machines may be rolled into the operation of the computer cluster without risking adverse effects due to unforeseen errors or issues when the different version of the machine is used in a larger system. The method utilizes the versioned nature of machine state as discussed above and the concept of operational status monitoring to introduce new machines in a controlled manner. The method is preferably applied when introducing updates to machines but can additionally be used to revert to previous versions i.e. machine state .

Step S which includes managing a computer cluster with a plurality of machines of a first machine version in an active configuration functions to run a computer cluster. The computer cluster is preferably managed in a manner substantially similar to the manner described above. The machines are typically network accessible services. The machines may be stand alone physical machines but may alternatively be a virtual machine service process or any suitable operational component of a computing cluster. A machine is preferably versioned to a particular machine state. The machine version is preferably tracked along with the implications of that version e.g. software versions data resources etc. . Alternatively machine version may refer to the unique machine configuration. The machine version preferably includes configuration data and software. The machine version may additionally include operational data. In managing a computer cluster a configuration controller may facilitate management of the plurality of machines. Managing a computer cluster with a plurality of machines preferably includes load balancing the plurality of machines of a first machine version. As shown in a load balancer preferably distributes incoming data to a plurality of devices.

The machines of a first version hereafter referred to as MV1 are preferably configured for active operation within the computer cluster. In one preferred variation machines may be configured as active staged or inactive. Active configuration preferably describes machines that are operating and being used in production. Typically being used in production will include impacting state of the machine or a second machine generating responses performing a task on behalf of another component or performing any process required in the operation of the computing cluster. In one variation an actively configured machine will process data and store a result in a production database. In another variation an actively configured machine will generate and transmit a response to an entity that made a request to the machine e.g. a user or application . Thus operation of an actively configured machine can impact the operational performance of the computing cluster.

A staged configuration preferably describes machines that are operating but integrated into the computer cluster in a controlled and or limited manner. One technique to integrating the machine into the computer cluster in a limited manner would be to prevent the machine from modifying outside machine state. For example the machine in a staged configuration may perform a task to update a database but communication to the database may be ignored or a test database may be used for monitoring the database operations. An alternative technique to integrating the machine into the computer cluster in a limited manner would be to monitor the actions and or response of the machine. The staged configuration is preferably used for monitoring a machine prior to integrating the machine into an active configuration. A machine in staged configuration will operate on data actively processed by the computer cluster but while minimizing the risk of the machine impacting the operation of the computer cluster.

An inactive configuration preferably describes machines that are operational but not integrated for use within the computer cluster. A machine in an inactive configuration is preferably booted and ready for integration into the computer cluster. The machine may additionally be put into a sleep mode where the machine can be more quickly activated. An inactive configuration is preferably used for machines that are on standby. A machine in an inactive configuration may be backup machine for machines in an active configuration. For example if a machine of a second machine version replaces a machine of a first machine version then the machine of a first version may be kept in an inactive configuration in case the computer cluster needs to quickly revert to the old computer cluster state configuration. Machines may additionally be set to a deactivated configuration where the machine is powered down or deprovisioned from the cluster.

Step S which includes adding at least one machine of a second version to the computer cluster functions to add a machine versioned different than the MV1. Typically the machine of a second version hereafter referred to as MV2 is an eventual or potential replacement to the MV1. Responsibilities and utility of the MV1 is typically redundant to the responsibilities and utility of MV2. As such MV2 is preferably an updated machine version of MV2. Alternatively MV2 may be a previous version or completely new version. Adding the at least one MV2 may include incorporating the MV2 into a joint operational configuration of a plurality MV1 s. Joint operational configuration describes computer cluster configuration to appropriately distribute work to a plurality of machines. As shown in MV2 may be added in parallel to a plurality of MV1 s that share at least one loadbalancer. As the second machine version will typically be meant to replace all instances of the first machine version a plurality of MV2 s will be added. At least one MV2 is preferably added in a staged configuration. In the variation where a plurality of machines is added a subset may be added in a staged configuration and a subset may be added in an inactive configuration. The machines may alternatively be added in any suitable combination of configurations. Introducing an MV2 may require updates to other types of machines services and thus a plurality of related machines of a third version may additionally be added. The machines of a third version may be based on state calculations as described above. The machines of a third machine version will typically be machines that will need to be updated according to the change in machine version. For example if a new server version is introduced a new database configuration may need to be deployed to work in combination with the new server. Such related machines may also be added in a staged and or inactive configuration.

Step S which includes monitoring the operational status of the machine of a second version functions to detect issues in computer cluster operation due to the introduction of an MV2. The operational status of MV2 preferably includes errors of the MV2 errors of other machines that attributed directly or indirectly to the MV2 inconsistencies of MV2 behavior actions by the MV2 performance metrics and or any suitable indicators of the performance of MV2. Errors or quality metrics can be gathered through logs and other suitable analytic tools. Actions such as response communications and requests e.g. database commands can be simulated and or compared to expected results e.g. responses and requests of an MV1 . Performance metrics are preferably a measure of how a task was performed by MV2. For example if MV2 introduces a new algorithm for processing data the computation time may be monitored. The operational status of the MV2 is preferably compared to the operational status of MV1. The health of the operational status may be measured relative to the MV1. In other words MV2 may be monitored to measure if MV2 has improved equal or decreased performance. For example the errors encountered when MV2 is used may be compared to the errors encountered when MV1 is used.

Monitoring the operational status may additionally include executing a monitored transition strategy on a MV2 which functions to augment the operation of the computer cluster to facilitate monitoring an MV2. A transition strategy preferably impacts the manner in which a MV2 is integrated into the computer cluster. The strategy preferably determines the configuration of a plurality of MV2s and the transition conditions and or progress from MV1s to MV2s. Preferably at least one MV2 is initially added in one of a variety of staged configurations.

In a first variation of a staged configuration the staged configuration is a limited active configuration i.e. a canary configuration which functions to use the MV2 in a limited capacity to warn of potential problems. Ideally if there are issues with the MV2 the issues will only impact a small portion of tasks in the computer cluster. For example if there are 19 MV1 s and only 1 MV2 are used to service processing request then roughly 5 of processing requests will have a chance of encountering the issues introduced by the MV2. While in the limited active configuration the operational status of the MV2 is preferably monitored. Based on the monitored operational status more or fewer MV2 s may be added to the computer cluster. MV2s are preferably incrementally or gradually introduced such that the replacement of the plurality of MV1s is distributed over a sustained period of time. MV1s are preferably incrementally replaced until all or a suitable portion of MV1s have been replaced by MV2s. During that time monitoring of operational status preferably continues and the operational status may be used to inform the transition. Preferably a plurality of MV1 s is loadbalanced. A new MV2 is preferably introduced for load balancing along with the plurality of MV1 s as shown in . Requests of the loadbalancer are preferably equally delivered to either one of the MV1 s or the MV2. The load balancer may additionally provide customized load balancing treatment to the MV2. For example a MV2 may receive particular types of work delivered by the load balancer or may be delivered less work than MV1 s.

In another variation of a staged configuration the staged configuration is a simulation configuration i.e. a shadow configuration . Machines in a simulation configuration are preferably semi isolated and are in a sense quarantined from impacting operation of other components. When in simulation configuration a machine preferably operates on live data but the machine is prevented from impacting operation of outside machines. In particular a simulation configuration limits the MV2 from impacting state and or operation of a machine in an active configuration e.g. a server or database used replying to an outside request . The live data is additionally sent to an active machine for normal processing. If a related machine was added based on a state calculation the MV2 and related machine s may cooperatively operate in the simulation configuration but the machines within the simulation configuration are preferably blocked from altering the state of machines not within the simulation configuration. A plurality of different simulations through out the system may occur simultaneously. Preferably the MV2 is matched with at least one MV1. Incoming communication data and or requests are preferably sent to both the MV1 and the MV2 as shown in . In other words the communication to the MV2 e.g. inbound communication work requests etc is coupled to the communication to an MV1. The incoming information may be communicated simultaneously or asynchronously. The MV1 and the MV2 both will handle the incoming information according to the respective machine version. The MV1 will preferably be enabled to make outgoing actions in response to the incoming information. The MV2 will preferably be prevented from making outgoing actions that would impact active components of the computer cluster. In one variation a test component may be set up for the MV2. The test component may be analyzed to indirectly monitor the operational status of the MV2. For example a plurality of MV1 s may be load balanced along with at least one MV2. The task of the MV1 and the MV2 in this example may be to process some work and write the result to a database. Work from the load balancer is preferably delivered to one of the MV1 and to the MV2. The MV1 and the MV2 will process the work and attempt to write to a database. MV1 will preferably write to a production database that is used in subsequent operations. MV2 may attempt to write to a test database. The attempts to write are preferably monitored. They can additionally be compared to those of the MV1 to ensure consistency or expected results. The MV2 may alternatively write to a test database and the state of the test database may be compared to the production database. The simulation configuration allows work to be handled in an established manner by MV1 while also allowing a MV2 to process work seen by the computer cluster e.g. real world processing requests without allowing the results to impact operation of the computer cluster.

Step S which includes transitioning the computer cluster to use the machine of a second version in an active configuration functions to introduce the MV2 to replace a MV1. The computer cluster can preferably be eventually updated to use only the second machine version in place of the first machine version as shown in . The transitioning to a MV2 in an active configuration may be triggered upon the monitored operational status satisfying a condition. Operational status conditions may include length of time in staging configuration number of errors rate of errors performance metrics and or any suitable operational status parameter. For example an MV2 may be tested for a week and the computer cluster may transition from an MV1 to the MV2 if the number of monitored errors during that week was below a specified threshold. Preferably the transitioning the computer cluster to use the machine of a second version in an active configuration includes transitioning at least one MV2 from a staging configuration to an active configuration. Preferably an MV1 will be removed from active configuration. Removing from active configuration may include transitioning from an active configuration to an inactive configuration removing the machine from the load balancer transitioning from an active configuration to a staged configuration deprovisioning a machine powering down the machine updated machine from a first machine version to the second machine version or any suitable action to transition away from the first machine version. The transition is preferably based on the monitored operational status of at least one MV2. If the MV2 operational status does not satisfy operational requirements e.g. there numerous errors occurring then the computer cluster will preferably not transition to the second machine version. A subsequent machine version may be developed staged and monitored and then possibly transitioned to if MV2 does not meet the operational requirements. On the other hand if the MV2 operational status satisfies operational requirements then the computer cluster may transition to the MV2. Several sequences of transitioning may be used. All MV1 s may be simultaneously removed from active configuration and replaced by MV2 s. Alternatively a gradual incremental rollout of MV1 replacement may be performed where for a period of time MV1 s and MV2 s may both be in active configuration. The incremental transition preferably progresses conditionally based on the operational status of MV2 s in a staging configuration. If the operational status satisfies a condition e.g. error count is below a threshold then the transition proceeds. If the operational status fails a condition e.g. error count above a threshold or operations inconsistent with expected behavior then the computer cluster can halt the transition and even revert configuration of machines. Additionally there may be various staged configurations that a MV2 must progress through. For example a MV2 may first be added in a simulation configuration. If the MV2 operation status satisfies appropriate thresholds then the MV2 may be set to a limited active configuration. If the MV2 then satisfies operation status thresholds for this state then the MV2 may be set to an active configuration. Any alternative transition strategies may be used.

A method of a preferred embodiment may additionally or alternatively include reverting the computer cluster from a machine of a second machine version to a machine of a first machine version. Preferably the MV1 that was replaced as the active component by an MV2 was set to an inactive configuration. The MV1 is thus transitioned out of the inactive configuration into an active configuration. For example a computer cluster may initially be load balancing a plurality of machines in a second machine version that are handling processing work for the computer cluster i.e. the MV2 s are in an active configuration . A plurality of machines in a first machine version that were recently decommissioned may be kept powered in a standby mode but not handling any work from a load balancer i.e. the MV1 s are in an inactive configuration . If suddenly numerous errors begin to occur that were previously not encountered when the MV1 s were in active configuration the system many automatically revert to the MV1 s. Because the MV1 s were kept in an inactive configuration they can be quickly reconfigured to replace the MV2 s. The MV2 s may be set to an inactive configuration or alternatively set to a staging configuration for additional monitoring. If the source of the problem is identified or resolved the MV2 s may once again be actively configured.

As shown in the system of the preferred embodiment for managing a computer cluster preferably includes a computing cluster and a configuration controller . The system functions to provide an interface for easy monitoring and configuration of the computing cluster . The configuration controller preferably additionally includes an access application programming interface API machine state database and a machine communication system . The system may be used with any suitable cloud computing environment. One preferred embodiment uses the system with a telephony network platform such as the one described in patent application Ser. No. 12 417 630 filed 2 Apr. 2009 titled System and Method for Processing Telephony Sessions which is incorporated in its entirety by this reference.

The computing cluster no of the preferred embodiment functions to provide the base infrastructure a user is wishing to manage. The computing cluster is preferably composed of a plurality of machines or computing resources machines. The machines may be identical in setup or may alternatively be composed of a variety of systems such as web servers voice over internet protocol VoIP systems media processors load balancers databases proxy servers caches queues and or any suitable computing device and or storage devices. The computing cluster no may be composed of a variety of hardware systems software platforms and or virtual machines. A machine preferably has operation information available to interested parties preferably access through the configuration controller . The operation information preferably includes machine status e.g. booting running shut down etc. internal internet protocol IP address external IP role e.g. web server VoIP load balancer media processor etc. capacity load and or any suitable operation settings or information. A machine preferably manages communication of the operation information and self operation such as performing roles or changing status . A machine additionally has machine state information. The machine state information preferably includes configuration data software and operational data. The configuration data is preferably similar to file system related data. The software is preferably the code or source code executed by the machine. The operational data is resources such as a database media resources persistent data or any suitable data used in operation. The machine state may alternatively include any suitable combination of the configuration data software operational data operational information and or other machine related data. A machine may alternatively have a parent device that manages monitors and communicates operation information of the machine such as a load balancer in charge of a plurality of resources.

The configuration controller of the preferred embodiment functions to act as an interface to controlling the computing cluster . The configuration controller functions to simplify the management and control of a cloud computing environment. The configuration controller preferably includes an access API a machine state database and a machine communication system . The configuration controller additionally includes a state machine engine that generates new machine state of a machine. The inputs to the state machine engine preferably include the old machine state. A plurality of machine states of associated machines may additionally be input into the state machine engine.

The access API preferably functions to act as an interface for interested parties to interact with operation information and change the operation of machines within the computing cluster . The access API is preferably a REST API Representational State Transfer API as is known in the art but the access API may alternatively be a SOAP Simple Object Access Protocol API or any suitable programmatic communication interface. A REST API preferably follows RESTful practices as is well known in the art. RESTful is understood in this document to describe a Representational State Transfer architecture. RESTful Hypertext Transfer Protocol HTTP requests are preferably made to the configuration controller . The HTTP requests are preferably stateless thus each message communicated preferably contains all necessary information for operation of a user command. The configuration controller preferably does not need to remember or store previous communications to be aware of the state. The machines machine state and related resources are preferably viewed as addressable resources. Consistent with the RESTful conventions a GET request of a resource may return the current state of a resource while PUT may update the state PUT or POST may be used to create a new resource and DELETE may be used to destroy a resource. The access API can preferably be used by users to access operation information of one or more of the machines in the computing cluster . For example as a REST API a simple HTTP request using the access API can obtain a list of machines and can preferably filter information on status role or any suitable operation information. The operation information is preferably returned in an HTTP response preferably containing the operation information formatted as xml.

The machine state database preferably functions to store operation information of the machines of the computing cluster . The machine state database may be any suitable database or device for storing data such as a mySQL database or an XML file. The machine state database preferably stores a record for each machine . The information stored for each machine preferably includes machine state internal and or external IP addresses of the machines status role s capacity load and or any suitable operation information. The database may additionally store a security key for each machine to securely identify a machine .

The machine communication system preferably functions to be a communication infrastructure between machines of the computing cluster and the configuration controller . The machine communication system is preferably a publishing and subscription service such as pubsub messaging system. As shown in the pubsub variation of the machine communication system preferably has a number of configured subscriptions and publication channels. The configuration controller preferably subscribes to the notifications published by the machines . These notifications preferably include the operation information submitted by the machines. The machines preferably individually subscribe to messages from the configuration controller or any suitable party such as other machines . New machine state is preferably communicated from the configuration controller to the machines. There is preferably a hub that the machines and the configuration controller communicate through using the pubsub system. The configuration controller may function as a hub or an outside system may be used as a hub. Additionally there may be any suitable number of hubs such as for a system geographically distributed.

Additionally the system of the preferred embodiment preferably includes a secret key shared by a machine and the configuration controller . The secret key is preferably a cryptographic code that uniquely verifies communication between the machine and configuration controller . The secret key is preferably supplied at boot time of the machine but may alternatively be established at any suitable time. The secret key is preferably included in communications between a machine and the configuration controller .

An alternative embodiment preferably implements the above methods in a computer readable medium storing computer readable instructions. The instructions are preferably executed by computer executable components preferably integrated with a distributed networked computing cluster with a plurality of machines and a configuration controller. The computer readable medium may be stored on any suitable computer readable media such as RAMs ROMs flash memory EEPROMs optical devices CD or DVD hard drives floppy drives or any suitable device. The computer executable component is preferably a processor but the instructions may alternatively or additionally be executed by any suitable dedicated hardware device.

As a person skilled in the art will recognize from the previous detailed description and from the figures and claims modifications and changes can be made to the preferred embodiments of the invention without departing from the scope of this invention defined in the following claims.

