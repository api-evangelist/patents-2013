---

title: Media manifest file generation for adaptive streaming cost management
abstract: Methods and systems for adaptive streaming cost management are described. A processing device can receive a request over a network from a media player executing on a client device to adaptively stream media content. The media content can include a plurality of media slices. The processing device can identify a geographical location of the client device from the request. The processing device can generate a media manifest file based on the geographical location of the client device. The media manifest file can indicate one or more media sources at which a copy of the plurality of media slices is geographically located and a cost associated with delivery of the plurality of media slices from the respective one of the one or more media sources. The processing device can transmit the media manifest file to the client device over the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09332051&OS=09332051&RS=09332051
owner: Verizon Patent and Licensing Inc.
number: 09332051
owner_city: Basking Ridge
owner_country: US
publication_date: 20131011
---
This application claims the benefit of U.S. Provisional Application No. 61 712 657 filed Oct. 11 2012 the entire contents of which are incorporated herein by reference. This application is related to co pending U.S. application Ser. No. 14 052 578 filed concurrently with the present application. The entire contents of which are incorporated by reference.

The present disclosure relates to media streaming and more particularly to cost management for adaptive streaming.

The Internet is becoming a primary method for distributing media content e.g. video and audio or just audio or just video and other information to end users. It is currently possible to download music video games and other media information to computers cell phones and virtually any network capable device. The percentage of people accessing the Internet for media content is growing rapidly. The quality of the viewer experience is a key barrier to the growth of video viewing on line. Consumer expectations for online video are set by their television and movie viewing experiences.

Audience numbers for streaming video on the web are rapidly growing and there are a growing interest and demand for viewing video on the Internet. Streaming of data files or streaming media refers to technology that delivers sequential media content at a rate sufficient to present the media to a user at the originally anticipated playback speed without significant interruption. Unlike downloaded data of a media file streamed data may be stored in memory until the data is played back and then subsequently deleted after a specified amount of time has passed.

The process for preparing media content for adaptive streaming typically involves taking a source file such as a movie or a source feed such as a broadcast signal and splitting it into temporal slices also referred to herein as chunks or slices of media e.g. video and audio and encoding each slice of the media at different quality levels. Typically the different quality levels are achieved by encoding the media content at different bit rates according to encoding profiles. During playback and as network conditions fluctuate a consuming application selects a slice at one of the different quality levels that is best suited for the present network throughput and the consuming applications adjusts the quality up or down as available bandwidth increases or decreases by selecting subsequent slices at the appropriate quality levels.

Streaming media content over the Internet has some challenges as compared to regular broadcasts over the air satellite or cable. Although the adaptive streaming approach provides many advantages one major disadvantage is that each temporal slice must be encoded multiple times often a dozen or more depending on the desired number of quality levels and playback devices or platforms. This requires some time and upfront resource costs. In particular the computational resources required to encode into the multiple formats is often quite large as is the necessary bandwidth required to move the encoded slices to their location on a web server from which they are served during playback. This encoding process also takes some time. Also there may be storage costs associated with storing multiple encodings of the media content. For example a content provider may have a very large library of media. When encoding the media for adaptive streaming the content provider has to encode the media into the different quality levels and store the multiple copies of the media at the different quality levels for subsequent adaptive streaming to clients. The encoding and storage costs may be justified when the media is popular and is streamed to various clients. However if the media is not popular the encoding and storage of multiple copies of that media may not justify the associated cost. These costs for less popular media and even user created content or user uploaded content may prevent content providers and some users from storing this media content online in a format for adaptive streaming.

Methods and systems for adaptive streaming cost management are described. In the following description numerous details are set forth. It will be apparent however to one of ordinary skill in the art having the benefit of this disclosure that embodiments of the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the embodiments of the present invention.

Adaptive video streaming divides a video stream into temporal slices and then encodes the slices at different quality levels and there is a general correlation between audio video quality and file size the larger the size of the slice file the higher the audio video quality in the playback. During playback if network conditions are good enough higher quality media slices can be delivered and played. If the network is slower or deteriorates lower quality media slices can be used in exchange for lower playback quality.

Internet bandwidth providers such as Content Delivery Networks CDNs like Akamai or Level3 typically charge based on the amount of data transferred such that higher quality media slices in adaptive streaming cost more than lower quality media slices since the higher quality slices are correspondingly larger files. Further bandwidth pricing can vary significantly throughout the world some of the lowest rates are often found in well connected established markets in Europe and the United States while bandwidth in more isolated or underdeveloped areas such as South America are often substantially higher. Thus higher quality streaming s intrinsically higher cost due to file size is magnified if delivery of the video is to a relatively expensive region.

When transferring data between two computers the distance between them affects the time it takes to transfer the data due to messaging latency from the number of hops or intermediate network connections the data passes through the amount of competing network traffic that can cause congestion and the physical limits of transferring data electronically. During streaming playback the client side attempts to download media slices quickly enough to sustain playback so that playback is not interrupted so it is often advantageous to deliver media from a server that is geographically and network topologically close to the user. For streaming playback however this tends to correspond to the costliest solution if the user is in a high priced bandwidth region. For example a company in the United States delivering media to a user in Chile is faced with the decision between delivering the media from a server in the United States where the cost will be the lowest but may impact performance due the latency or delivering the media from a server in or near Chile giving the best performance but at the highest cost .

The sliced media nature of adaptive streaming presents an opportunity to find a middle ground that balances speed performance and cost. During playback each media slice s various quality level is available for retrieval and normally network conditions are the primary factor in deciding which quality level to use. The decision making process can be augmented to also take into account cost considerations especially in scenarios when it is more likely that a higher quality slice would be used.

On a high speed internet connection it is common for adaptive streaming players to not only be able to download successive media slices quickly enough but to also be able to download additional future slices ahead of when they are needed creating a buffer. Normally this buffer helps protect against variability in network conditions so that playback does not jump between quality levels too often creating an uneven user experience. For example if media slices are 8 seconds long and a client has 3 extra slices buffered already in theory the client could take up to 24 seconds 3 slice 8 seconds to download the next slice without shifting to a lower quality with smaller slice files. If transmission costs are taken into account that buffer could also be used as a chance to retrieve a slice from a slower but cheaper storage location. Continuing the previous example a playback client in Chile with a playback buffer of 24 seconds could begin to transfer media slices from servers in the United States. Although the slices would transfer more slowly the slower transfer would be covered by the buffer time while the slices are obtained at a lower rate or cost.

Delivery costs may be incurred a user such as by way of a subscription. In implementations the delivery costs can be charged against a user subscription. For example a user can have a subscription that provides a time based e.g. monthly quota of data. When the user streams content the data can be charged against the user s quota. User s can also be charged on a per use basis. Other mechanisms for charging users for delivery costs are myriad. Delivery costs can also be incurred to a content provider the service provider media publisher etc.

Even in the event of little or no buffer the cost consideration could still be used if the network connection is fast enough. For example if the media slices are 8 seconds long and they can be transferred in 2 seconds from a server in Argentina to the user in Chile at a higher delivery cost but transferring them from a server in the United States at a lower delivery cost takes 6 seconds per slice transferring them from the United States is still feasible because the time to transfer the slice is less than the playback time of the slice. From the user s perspective they achieve the same playback quality but the cost of delivery is significantly lower. Each delivery cost can be charged at a different rate. For example a first delivery cost can be charged at a first rate and a second delivery cost can be charged at a second rate. Alternatively the delivery cost can be identified and measured in terms of other metrics.

Regional pricing differences are not the only scenario in which cost considerations can be useful. Another scenario would be the decision to transfer directly from a pool of origin storage servers directly or via a CDN. A CDN can be very helpful in distribution scalability because data is transferred from origin storage servers into the CDN and then fanned out through a server hierarchy to many edge server locations throughout the world. For popular video content for example this allows the transfer of the media to hundreds of thousands or even millions of users. In terms of costs the content owner is typically billed for the transfer of data from the origin storage servers to the CDN and then from the CDN edge locations to the users. If the files are accessed frequently such as in popular video content they will be transferred from the origin storage servers only a few times and remained cached in CDN servers and delivered to users many times. For less popular content however the files may expire from the CDN caches frequently such that the files have to be re retrieved from the origin storage servers many times. In this scenario the cost of delivery could become prohibitive. As before however cost could be taken into consideration when deciding the source location for transferring the files to users if the content is not very popular many of the media slices especially the large high quality media slices could be delivered directly from a small pool of origin storage servers skipping the delivery cost through the CDN. If the content rises in popularity such that the media slices have a good probability of being cached in CDN servers the delivery path could be shifted so that the slices are delivered from the origin storage servers to the CDN and then to the users.

In some implementations cost can be related to whether the client is subscribed to a particular service that has its own CDN. For example a mobile phone client can have access to a CDN of a mobile carrier at a reduced rate since the mobile phone client is subscribed to the mobile carrier. When a client is using the CDN infrastructure of the mobile carrier the client can use the CDN of the mobile carrier to obtain media slices. In other implementations a service provider e.g. a mobile carrier offers a split data plan that distinguishes between different types of data when determining allowable consumption. For example the split data plan can include an amount of data that is a separate amount than media streaming. When a client operates in this type of data plan it can determine whether it would be beneficial to download a set of media slice from a particular server such that it affects data or media usage under the plan in a different way. For example a client can request media slices from a particular server that does not count against a media streaming maximum e.g. a monthly quota .

A number of different methods exist for taking cost into consideration in adaptive streaming. Some example approaches may include active client side intelligence as illustrated in . Other example approaches may include server side intelligence that generates a media manifest file as illustrated in

In the depicted embodiment the cost management server computing system may execute a manifest file generator which is configured to orchestrate a manifest file for adaptive streaming cost management as described in further detail in conjunction with . The cost management server can include web server functionality that receives requests for encoded media content over the network from media players executing on the client computing systems . Alternatively the functionality of the adaptive streaming cost management and the web server can be distributed over two or more cost management machines not shown . For example in one embodiment one cost management server computing system may host the manifest file generator and not a web server and another cost management server computing system not illustrated can host a web server to handle requests for the media content. Alternatively other configurations are possible as would be appreciated by one of ordinary skill in the art having the benefit of this disclosure.

In one embodiment the architecture also includes one or more content repositories such as data storage devices that are configured to communicate with one or more media servers . The data storage devices may be content repositories in which encoded media content may be stored. A publisher or a distributor of media content may store the encoded media content in the data storage. Media content from the publisher may be transferred over the network to the media server which may be configured to receive process and store media content. In one embodiment the media server delivers the media content to the client which is configured to play the content on a media player that is operating on the client . The media server delivers the media content by streaming e.g. adaptively streaming the media content to the client . In a further embodiment the client is configured to receive different portions or slices of the media content from multiple locations.

In other embodiments media content from the media server may be replicated to other locations and served to the clients such as by using web servers located on the network. Alternatively proxy cache servers or edge servers can be used. In a further embodiment the media content may be forwarded directly to the other web servers or proxy cache servers through direct communication channels without the need to traverse the Internet. In another embodiment the web servers proxy cache servers and media server may be organized in a hierarchy of a CDN to deliver the media content to the client . As described above a CDN is a system of computers networked together across the Internet that cooperates transparently to deliver content. In this embodiment one media server can be an origin content server. The CDN may also include interconnected computer networks or nodes to deliver the media content.

In one embodiment a publisher stores encoded media content in an original content file in the data storage to be distributed to one or more clients . The content file may include data corresponding to video and or audio corresponding to a television broadcast sporting event movie music concert or the like. The original content file may include uncompressed video and audio or alternatively uncompressed video or audio. Alternatively the content file may include compressed content e.g. video and or audio using standard or proprietary encoding schemes. The original content file from the publisher may be digital in form and may include media content having a high bit rate such as for example 2 Mbps or greater.

The media server may receive the content file from the publisher. The media server can decompress the content file if encoded into raw audio and or video segmenting the raw audio and or video of the content file into multiple portions of the content e.g. slices and storing multiple copies of the content file in the data storage and among a plurality of servers . The portions may have an equal duration or alternatively the portions may have equal file sizes or vary one to another according to other requirements. During operation as describe in more detail below each portion of the encoded media content may be retrieved decoded and re encoded into an encoded representation of that portion of the media content at the specified quality level. Typically in adaptive streaming a media content file can be encoded into multiple encoded representations according to different quality profiles and stored as separate files that are independently requestable from the data storage via the cost management server .

The media player on the client can include a delivery cost module to perform adaptive streaming cost management. The media player can request media content from one or more cost management server and can also request a media manifest file. The cost management server in turn can transmit the media manifest file to the client . For example the media manifest file can describe metadata for a video and could include information about different storage locations along with information about their relative costs quality priority etc. The delivery cost module then can use the data included in the media manifest file factors e.g. geographical location cost quality priority etc. when deciding to shift to a higher or lower bit rate but it could also decide from which media server to request media content or media slices from based on cost. If the delivery cost module determined that it had a sufficiently large amount of data in a playback buffer or that it could risk a possibly slower slice file transfer it could opt to request a subsequent media slice of the same quality from a slower and cheaper media server . For example the delivery cost module can use the manifest file to determine a media server to which the media player can send a request for slices of media content for adaptive streaming. The delivery cost module can determine a performance of the adaptive streaming of the media content from the media server . When the adaptive delivery cost module determines that the performance of the adaptive streaming is at or beyond a performance threshold the media player can request one or more subsequent slices from a second media server . When the delivery cost module determines that the performance of the adaptive streaming is below a performance threshold the media player can request one or more subsequent slices from the media server . The performance threshold can include a predetermined amount of slices of media in a playback buffer. The performance threshold can also include a minimum bit rate. Alternatively the performance threshold can be defined based on various metrics used to measure performance of adaptive streaming.

Some adaptive streaming implementations cannot be modified easily. For example in the Apple iOS platform and the Android platform by Google an adaptive streaming implementation exists as part of the operating system and may be modified by third party applications. In these scenarios cost can still be taken into consideration with some assistance by the server as described in conjunction with .

In implementations the delivery cost module can identify characteristics of the media servers that it can use to determine where to request media slices. The delivery cost module can submit requests to multiple media servers and measure the response time for each server. If one media server takes 200 ms to respond while another takes 50 ms for example the delivery cost module can select to server with the shortest response time. The delivery cost module can also determine other characteristics about the servers such as average response rate average bandwidth average transfer time average speed server processor commitment memory usage number of requests a server handles per a unit of time e.g. seconds and a rolling average of any of the characteristics. The delivery cost module can monitor server characteristics over time and build a server profile that the delivery cost module can use when determining where to request media slices or files. In some implementations the server can expose an Application Programming Interface API that the client can use to obtain server characteristics. In implementations a server can permit a client to query a server for its server characteristics. In implementation actual server characteristics can be compared to threshold or expected server characteristics. For example a number of requests a server handles per second can be compared against an expected capacity. The delivery cost module can use this comparison when determining where to request media slices or files. For example if a particular server is running at 90 load of a maximum threshold capacity the delivery cost module can factor this into decisions of where to request media slices or files.

In some implementations the delivery cost module can also determine a cost associated with each server. The delivery cost module can select the server with the lowest cost that can also provide a media slice or file within an acceptable response time. For example if multiple servers can provide or stream a media slice or file faster than the client needs the delivery cost module can select the cheapest server from among those multiple servers.

In some embodiments the cost management server includes a content management system CMS that manages the encoded media content for example using a database stored in data storage. In one embodiment the CMS is a computing system including a memory and a processing device coupled to the memory the processing device to execute the manifest file generator . The CMS may also manage the available encoded media content using one or more media manifest files. In an embodiment a publisher or server administrator can create media manifest files using the CMS. The media manifest files can be fetched by or pushed to the media player s .

The cost of network bandwidth can vary significantly in different parts of the world. Traditionally the cost differences have been very challenging to content owners forcing content owners to risk high costs or to artificially limit the quality of media streamed to developing markets or remote locations. Adaptive streaming solutions that divide the media into slices however give content providers the opportunity to provide high quality experiences for consumers of media while still having some control over their costs.

In the depicted embodiment a manifest file generator or server administrator can create a media manifest file. The media manifest file can be fetched or pushed to the media player .

In other embodiments the computing architecture may include other devices such as directory servers Digital Rights Management DRM servers statistic servers devices of a network infrastructure operator e.g. an ISP or the like.

The adaptive streaming cost management system can include the cost management server delivery cost module manifest file generator or may include more or less components.

Referring to processing logic begins at block by receiving a manifest file that identifies sources of slices of media content. A first media source can be located in a first geographical region and the second media source can be located in a second geographical region as illustrated in the system of . Delivery of the slices of media content to the media player can incur a first delivery cost.

At block processing logic requests slices of media content for playback on the media player from the first media source over a network using adaptive streaming.

At block processing logic can determine such as by using the manifest file whether other sources of media content can deliver the same media slice at a lower cost. If no then processing logic continues at block to request subsequent slices of media from the first source. If yes then processing logic can at block determine a performance of the adaptive streaming during media content playback. If the performance is at or beyond a performance threshold at block then the processing logic can at block request a subsequent slice or chunk of media from the second source at a second cost. Delivery of the one or more subsequent slices to the media player from the second media source can incur a second delivery cost that is less than the first delivery cost. The method can continue until the processing logic is no longer needs to request slices of the media.

Of course method is one of many ways of using the determination of cheaper costs using the costs factors of the manifest file at the client device. In other embodiments the client can determine which quality of file to request for the slice and where to request the file using various factors as described herein. Similarly when implemented on the server the method may use the cost determination to create or modify an existing manifest to control where the files are requested based on cost as described herein.

In some implementations before block processing logic can send a playback request of the media content to a server device over the network. In some implementations processing logic can receive a media manifest file from the server device over the network in response to the sending the playback request. In other implementations where the media manifest file identifies the performance threshold processing logic can compare the performance against the performance threshold and select the second media source based on the comparison.

In one embodiment the media manifest file is M3U file. A M3U file is a computer file format that stores multimedia playlists. Typically a M3U file is a plain text file that specifies the locations one or more media files. Each line carriers on specification which can be an absolute local pathname a local pathname relative to the M3U file location or a URL both absolute and relative URLs . The M3U file can also include comments which are prefaced by the character. In extended M3U the character may also introduce extended directives. The Unicode version of M3U is M3U8 which uses UTF 8 Unicode characters. The media manifest file can also specify multiple location choices as well as the associated costs. The media manifest file gives an overview of the content and is initially requested by a media player in order to know how to request specific files or data ranges within a file. A web server or media server can send transport stream files in response to the requests however the media content may be stored in one or multiple files. Regardless of how the media content is stored the web server or media server can send the transport stream files with the corresponding slice of media content requested. When the media content is stored as discrete files the cost management server or media server may send the discrete file encoded according to the appropriate quality profile as the transport stream file in response to the request. However when the media content is stored a single file an identifier and an offset may be used to retrieve the appropriate slice of the file encoded according to the appropriate quality profile and the cost management server or media server can send this slice as a transport stream file in response to the request.

In one embodiment a M3U8 file is created with the available quality profiles and where the media content at those profiles are located even though the media content at those different profiles do not exist at those locations. A media player such as media player of reads the media manifest file for the media content that is being requested. The media manifest file may also include a unique content identifier UCID duration of the media content available quality profiles and locations of where the media content can be retrieved. The quality profiles may specify parameters such as width and height of the image i.e. image size video bit rate i.e. rate at which the video is encoded audio bit rate audio sample rate i.e. rate at which the audio is sampled when captured number of audio tracks e.g. mono stereo or the like frame rate e.g. frame per second staging size or the like. For example the media players may individually request different quality levels of the same media content. Each media player may request the same portion e.g. same time index of the media content but at different quality levels. For example one media player may request a slice having HD quality video since the computing device of the requesting media player has sufficient computational power and sufficient network bandwidth while another media player may request a slice having a lower quality since its computing device may not have sufficient network bandwidth for example. In one embodiment the media player shifts between quality levels at the slice boundaries by requesting slices from different copies e.g. different quality streams of the media content. Alternatively the media player can request the slices using other techniques that would be appreciated by those of ordinary skill in the art having the benefit of this disclosure. The media manifest file may also include other metadata including for example air date of the content title actresses actors a start index an end index proprietary publisher data encryption level content duration episode or program name publisher available tools for the end user navigational environment such as available menus thumbnails sidebars advertising fast forward rewind pause and play or the like or bit rate values including frame size audio channel information codecs sample rate and frame parser information.

In implementations the media manifest file identifies a first web address e.g. URL where the media content is located at the first media source and a second web address where the media content is located at the second media source. The media manifest file also can identify a rule that a media player is to request the one or more subsequent slices from a second media server when the performance of the adaptive streaming is at or beyond the performance threshold. The media manifest can also include a rule to instruct a media player to request one or more media slices from a first media server when a performance of the adaptive streaming is above a performance threshold. The media manifest file can further identify a second web address where a copy of the plurality of media slices is geographically located at a second media server.

The media manifest file can also identify a third web address where the media content is located at a third media source. The media manifest file can identify yet another rule that a media player is to request the one or more subsequent slices of media from the third media source when the performance is at or beyond a second performance threshold. For example the first performance threshold can be a first amount of time that a media player has been playing at a given bit rate. A media player can request and playback media slices from a first media server. The second performance threshold can be a second amount of time that a media player has been playing at the given bit rate. When the first performance threshold is met then the media player can request media slices from a second media server at the same bit rate but with a lesser delivery cost. When the second performance threshold is met then the media player can request media slices from a third source at the same bit rate but with a lesser delivery cost that the first and second media servers.

When media slices geographically located at one or more media servers are encoded at different quality levels the media manifest file can further identify another rule that instructs the media player to request the plurality of media slices from a second media server at a first quality level when the performance is at or beyond a second performance threshold and from the second media server at a second quality level when the performance is below the second performance threshold.

In one embodiment the adaptive streaming cost management whether on the client or cost management server can use various inputs to decide where to request the data. These various inputs can include the location of the client the latency in requests to the different locations e.g. latency for requests for the file at that quality level from US based media servers and the latency for the file at the same or different quality level from the Chilean based media servers amount of data in buffer current quality levels requested previous historical data regarding the client s streaming performance or the like. These inputs can be measured by the client or the server or can be provided by other systems. In an example the client can submit a request for a media slice or file directly to a media server. The media server can respond such as with at least a portion of the requested media slice or file. The client can measure the time it takes for the media server to respond and can use the response time to determine whether to request subsequent media slices from that server.

Referring to processing logic begins with receiving a request from a media player executing on a client device to adaptively stream media content at block . The media content can include multiple media slices. At block processing logic identifies a geographical location of the client device from the request. Identifying the geographical location of the client device can include extracting data from the request and sending a geographical location request with the extracted data from a location service to determine a geographical region of origin of the client device.

At block processing logic generates a media manifest file based on the geographical location of the client device. The media manifest file such as the media manifest file of can indicate one or more media sources at which a copy of the plurality of media slices is geographically located and a cost associated with delivery of the plurality of media slices from the respective one of the one or more media sources. At block processing logic transmits the media manifest file to the client device over the network.

The exemplary computing system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device each of which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor or a processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute computer instructions or processing logic e.g. for performing adaptive streaming cost management or media manifest file generation and for performing any of the operations and steps discussed herein.

The computing system may further include a network interface device . The computing system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a computer readable storage medium on which is stored one or more sets of instructions e.g. for executing adaptive streaming cost management or media manifest file generation embodying any one or more of the methodologies or functions described herein. The adaptive streaming cost management and media manifest file generation may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computing system the main memory and the processing device also constituting computer readable storage media. The adaptive streaming cost management may further be transmitted or received over a network via the network interface device .

While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term computer readable storage medium shall also be taken to include any medium that is capable of storing a set of instructions for execution by the machine and that causes the machine to perform any one or more of the methodologies of the present embodiments. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories optical media magnetic media or other types of mediums for storing the instructions. The term computer readable transmission medium shall be taken to include any medium that is capable of transmitting a set of instructions for execution by the machine to cause the machine to perform any one or more of the methodologies of the present embodiments.

An adaptive streaming cost management module otherwise referred to as a delivery cost module and a media manifest file generation module associated components and other features described herein can be implemented as discrete hardware components or integrated in the functionality of hardware components such as ASICS FPGAs DSPs or similar devices. The adaptive streaming cost management module may implement operations of adaptive streaming cost management as described herein. The media manifest file generation module may implement operations of media manifest file generation as described herein. In addition the adaptive streaming cost management module and the media manifest file generation module can be implemented as firmware or functional circuitry within hardware devices. Further the adaptive streaming cost management module and the media manifest file generation module can be implemented in any combination hardware devices and software components.

Some portions of the detailed description that follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as receiving generating communicating capturing executing defining specifying creating recreating processing providing computing calculating determining displaying or the like refer to the actions and processes of a computing system or similar electronic computing systems that manipulates and transforms data represented as physical e.g. electronic quantities within the computing system s registers and memories into other data similarly represented as physical quantities within the computing system memories or registers or other such information storage transmission or display devices.

Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may comprise a general purpose computing system specifically programmed by a computer program stored in the computing system. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions.

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to utilize the invention and various embodiments with various modifications as may be suited to the particular use contemplated.

