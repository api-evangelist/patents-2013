---

title: Transforming condition-independent output into condition-dependent output
abstract: A method and apparatus for providing a network based operating system for mobile clients is disclosed. Services may be developed that can be used to support different client devices with different capabilities. The services provide output with multiple variations based on different devices, and an intermediary selects the variation best suited for the requesting device. An online software development system is provided to allow services to create, edit, test, and deploy applications at an intermediary using only a browser at the client end. Services may also be provided that can be accessed and referred to by other services, thereby facilitating the combining of different services. Services may also store and access data at an intermediary using variables and a mapping of the stored data to the variables. Data stored at the intermediary may be used to allow an end user to return to a previously accessed service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09167051&OS=09167051&RS=09167051
owner: Oracle International Corporation
number: 09167051
owner_city: Redwood Shores
owner_country: US
publication_date: 20130507
---
This application is a Continuation of U.S. patent application Ser. No. 09 947 910 filed Sep. 5 2001 which claims the benefit of U.S. Provisional Application No. 60 230 489 filed Sep. 6 2000 the entire contents of which is hereby incorporated by reference for all purposes as if fully set forth herein under 35 U.S.C. 120. The applicants hereby rescind any disclaimer of claim scope in the parent application or the prosecution history thereof and advise the USPTO that the claims in this application may be broader than any claim in the parent application.

The present invention relates to providing services to clients and more specifically to providing content from multiple services.

The World Wide Web includes a network of servers on the Internet each of which is associated with one or more HTML Hypertext Markup Language pages. The HTML pages associated with a server provide information and hypertext links to other documents on that and usually other servers. Servers communicate with clients by using the Hypertext Transfer Protocol HTTP . The servers listen for requests from clients for their HTML pages and are therefore often referred to as listeners .

Users of the World Wide Web use a client program referred to as a browser to request decode and display information from listeners. When the user of a browser selects a link on an HTML page the browser that is displaying the page sends a request over the Internet to the listener associated with the Universal Resource Locator URL specified in the link. In response to the request the listener transmits the requested information to the browser that issued the request. The browser receives the information presents the received information to the user and awaits the next user request.

Traditionally the information stored on listeners is in the form of static HTML pages. Static HTML pages are created and stored at the listener prior to a request from a web browser. In response to a request a static HTML page is merely read from storage and transmitted to the requesting browser. Currently there is a trend to develop listeners that respond to browser requests by performing dynamic operations. For example a listener may respond to a request by issuing a query to a database dynamically constructing a web page containing the results of the query and transmitting the dynamically constructed HTML page to the requesting browser.

Another trend is to expand Internet access to devices other than conventional computer systems. For example many mobile clients or mobile devices such as wireless phones have been developed that include embedded web browsers. Due to size and cost constraints the micro browsers contained in these devices have very limited functionality relative to the browsers that have been developed for full fledged computer systems. However devices with embedded micro browsers are usable in circumstances under which using a conventional computer system is impractical.

The number of device types that are able to display web content in one form or another continues to increase. For example there are desktop laptop and pocket computers mobile phones pagers and personal digital assistants PDAs that can be described as web enabled because they are able display web content. As the number of web enabled device types increases so does the variation in the capabilities of the devices. For example general purpose computer systems compensate for their immobility by providing large color screens sophisticated sound output significant processing power ergonomic keyboard input and an easy to use selection device such as a mouse track ball or track pad. Conversely small mobile devices achieve their portability at the expense of screen size and user input ease of use.

Yet another trend is to offer services to clients via a server on a network. Typically the network is the Internet the client is a user and the service is available from the server via a website. The service may supply information such as restaurant reviews weather reports stock quotations or news updates. The service may also be more interactive such as allowing the user to purchase goods such as books or music or to purchase services such as booking travel arrangements. As used herein the term service refers to providing information functions or capabilities to a client.

The process by which the user accesses the service depends on the type of client the user has. For example a desktop computer can connect to the Internet through a dial up line a digital subscriber line DSL a cable modem an integrated services digital network ISDN connection or many other available methods. Wireless application protocol WAP phones may connect to the Internet over a wireless connection through a WAP to HTTP gateway. Generally the client logs in to the website and is presented with a list of available services from which the client selects the desired service.

Generally a service is provided in one of two ways as a hosted application or as a portal application. With a typical hosted application a developer creates the application but a host installs and maintains the application for access by end users or customers on the host network of servers. In contrast with a typical portal application the developer both creates the application and deploys it for access by end users or customers via one or more servers controlled by the developer. The developer referred to herein may be the individual company or other entity that provides the service also referred to as a service provider or the developer may be another entity providing software development services to the service provider.

A common problem with providing services via applications whether they are hosted applications or portal applications is that the application must be designed to work with all devices. However devices will vary widely in their capabilities based on both the type of device and the particular capabilities of different models of devices of the same type or class of device. For example a desktop computer will generally have a fully functional web browser whereas a personal computing device will have a micro browser with limited functionality. Also some mobile phones may have a limited display that only allows for a single word on each line of the display while other mobile phones may have a larger display capable of showing several words on each line.

The variation of capabilities can make it difficult for an application developer to support all possible devices. For example a service may involve the display of graphic images such as those of products offered for sale which may be easily viewed on the full function web browser of a desktop computer but which may be incapable of display on a mobile phone. Also even if the developer is only concerned with a certain type or class of device the differences in capabilities may be significant. For example if the application programmer sends output containing multiple words describing several items of information mobile phones with limited display screens may only be capable of showing the first word of each information item on each line of the display screen or the output for a single information item will fill multiple lines on the phone display precluding other information items from being shown simultaneously.

One approach to solving the problem of designing for devices of varying capabilities is to design for the lowest common denominator. The lowest common denominator approach involves designing the application to work on the most limited device available. For example if a menu of options is to be displayed on a client device such as a mobile phone an application programmer may select short one word labels for each of the options because all devices that will use the application can support one word labels. For example the application developer may employ the single word menu item Return for a mapping application for the option of generating return directions from a selected destination.

However a drawback of the lowest common denominator approach is that the output does not take advantage of the superior capabilities of other devices. For example if a client device is capable of displaying a longer label such as Generate Return Directions the longer label would be preferred since Return is ambiguous and may be incorrectly interpreted by the user as meaning Return to Previous Menu. In addition the capabilities incorporated into new devices would go largely unused if all applications were targeted to the minimal capabilities of older devices.

An alternative approach to solving the problem of designing for clients or devices of varying capabilities is to design for some intermediate level of capability such as the most common type of mobile phone. However an application using this intermediate approach may not function properly on devices with lesser capabilities and the application will still fail to take advantage of the enhanced capabilities of other devices.

Another problem with providing services via applications is how to support additional devices that become available after the application is developed. For example several months after release of an application by a service provider a device manufacturer may release a new device. The new device could be an evolutionary advance over current devices that improves existing features or the new device could be a more significant advance in that class of device that adds significant new features or the new device may be a new type of device that adds new capabilities or has a new combination of capabilities.

New devices with improved capabilities can be accommodated by using the lowest common denominator approach but the enhanced features and capabilities of the new devices such as larger displays may go largely unused. For example if the application only provides one word menu options the application will not be taking advantage of an improved device that is able to display multiple word options. Furthermore with a later released device the lowest common denominator approach may completely avoid using new capabilities such as being able to handle voice data or graphics. Even if the application is designed for an intermediate level of capabilities the application may still fail to fully utilize all of the advances and improvements in future devices that may be created.

Yet another problem with application development is having easy access to the tools available to the developer to create the application. Typically a developer designing an application for a particular platform e.g. a combination of hardware operating system and or protocols will utilize a software development kit SDK . An SDK will generally contain an application programming environment some commonly used libraries for various features application programming interfaces utilities documentation a compiler for generating executable code from source code and a debugger for diagnosing programming problems. To use these tools the developer obtains the software documentation and other materials from an SDK provider and then the developer installs the software and other tools onto a local computer or network. Later as the SDK provider makes improvements and upgrades the developer incorporates such changes into the local installation of the SDK package. Thus the application developers may have to expend significant resources to install and maintain the SDK. In addition conventional SDK s typically require significant resources not only for the SDK itself but also for application development and the infrastructure for the setup testing and deployment of the runtime applications.

Individual service providers may want to offer other services that are related to their core services to enhance the overall experience of the customers of the service. For example if a user seeks out driving directions to a particular destination from one service provider the driving direction provider may also want to offer the user additional information about the weather or dining options at the particular destination. One way for the driving direction provider to offer such additional information is to create the necessary additional services which can entail significant additional development resources. Another approach is for the service provider to make arrangements with another service provider to obtain the desired functionality. However making arrangements with other service providers may involve significant coordination both in establishing the technical infrastructure to connect the two providers services and also to establish a means for gauging the level of use by the first provider s customers for billing purposes.

Still another concern with providing services via applications is that the service provider may want to incorporate into the applications durably stored data that is available to the applications when executed. The service provider may then have to incur the burden of establishing and maintaining the stored data so that the data is available when required by the applications.

Based on the foregoing it is desirable to provide improved techniques for designing applications that more effectively work with all devices. It is also desirable to have improved techniques for creating applications. Further it is desirable to have improved techniques that allow service providers to offer additional services. Also it is desirable to have improved techniques for incorporating stored data into an application.

Techniques are provided for providing content from multiple services. According to one aspect content from difference services is combined. An intermediary receives a request from a client for content from a service. The response from the service contains a reference to content from another service. The intermediary retrieves the content from the other service and generates a response to the request that includes the content from both services. The content retrieved from the other service may be generated by the other service based on parameters provided in the reference to the other service. The intermediary may also store a record that indicates that content from the other service was incorporated with the content from the original service.

In yet another aspect clients may access multiple services. An intermediary receives a request from a client for content from a service. The response from the service contains a reference to another service. The intermediary generates a reply to the client request that includes an object such as a link to the other service. The client may then select the object to obtain the content from the other service. The content retrieved from the other service may be generated by the other service based on parameters provided in the reference to the other service. The intermediary may also store a record that indicates that other service was accessed from the original service.

In another aspect content from a previously accessed service is provided. An end user is provided by an intermediary with content from a first service in response to a request. The end user makes another request for content from a second service. The intermediary stores a record that indicates that the end user received content from the first service. The end user is provided with the requested content from the second service. The end user makes yet another request for content from the service previously accessed by the end user. The intermediary reads the stored record to determine that the end user had previously accessed the first service. The end user is provided with the requested content from first service.

A network based operating system for mobile devices is described. In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In the following description the various functions shall be discussed under topic headings that appear in the following order 

Techniques are provided for facilitating the creation and deployment of applications that are used to provide services for access by devices such as mobile clients. These techniques include the development of applications that can be executed on a variety of devices by tailoring the output after it has been generated by the application based on the particular circumstances of the end user s use of the application such as the capabilities of a mobile client or the network conditions existing at the time a customer requests service from the application. Also these techniques include combining the output capabilities and features of services together including techniques for allowing an end user to return to a previously accessed service. In addition these techniques include storing data at an intermediary for access by the applications associated with a service using variables and a mapping of the variables to the stored data.

Further these techniques include providing an online software development kit SDK so that application developers can create test modify and deploy applications without having any special client side software. Developers enter code through an interface provided by the website of the SDK over the Internet. Because the website of the SDK is based on XML and HTTP standards the developer can reuse existing code. For example if the developer has a Microsoft Internet Information Services IIS server that serves .asp pages the online SDK can access the developer s existing server and pages.

As used herein the term end user denotes any person organization or other entity that may use a device to access a service or application. The term end user encompasses the term customer although term customer does not necessarily imply a commercial relationship with a service provider. Also the term end user is distinguished from the term user which as discussed below refers to developers and service providers that create and maintain the applications or computer programs that provide services to the end users.

Host server may be implemented on one or more servers at an intermediary such as a hosting service provider also known as a host provider or simply as a host. The function of the host is to install and maintain applications such as on host server that are developed by either the host provider or other application developers. The applications are typically part of a service such as a web site a paging service or a telecommunications service. The host may also provide partial or shared hosting of applications in which the applications are stored on servers associated with the application developer or service provider but the applications may be accessed via the host. Partial or shared hosting of applications is distinguished from portal applications that are stored on servers associated with the application developer or service provider but which are not accessed via the host. End users access the services offered by other parties and companies via the host by interacting with the hosted and partially hosted applications.

Network also includes users that are interconnected with host server and each other on network as illustrated. In users may be service providers that offer services for use by end users. Users may also be application developers who may be part of or associated with the service providers. The service providers application developers and other parties create and maintain applications that are part of a service offered to end users.

The applications that are part of a service may be hosted by the hosting provider such as on host server . The applications may also be partially hosted by being stored at a server associated with a user as illustrated by an application that is included with user and being accessed via the hosting provider such as via host server .

As another example end user may be a mobile phone that is interacting with host server . End user may request via host server a service that is supplied by a shared hosted application such as application that is served from user . The host server then passes along the request for service from end user to user . User then executes the appropriate application such as application and sends the resulting output to end user over connection .

Host server includes a middleware transformer for transforming application output into output that is tailored or customized based on parameters or conditions associated with a service request. For example the capabilities of the client devices used by end users may vary widely. According to one embodiment the application developer designs the application to produce generic output that includes several output variations also referred to as output segments for presenting or displaying the output on the client device. The generic output is received by middleware transformer . The middleware transformer also receives or detects the parameters or conditions associated with the service request. Middleware transformer then selects a particular output variation or option based on the parameters or conditions of the service request.

For example the client or end user may be a mobile phone that is requesting driving directions from a map service provider. The mobile phone may not be capable of displaying graphics and therefore the map service provider need only supply a response to the request that includes text not graphics showing the desired route. However the map service provider may have other customers that use other devices such as laptop computers that are capable of displaying graphics in addition to text.

The application used by the map service provider may therefore generate generic output that includes several variations of the requested directions such as one output segment with text only and one with text and graphics. The application provides the generic output to middleware transformer which also receives parameters or information from the request such as data that indicates that the client device is a mobile phone. Middleware transformer then selects the output segment with text only from the generic output and generates customized output that contains the text only output segment from the application and then middleware transformer sends the customized output to the end user. In another embodiment the application produces a comprehensive set of output that is customized or formatted by middleware transformer based on a style sheet selected based on the client device.

The approach of using a host to receive generic output and generate customized output provides several benefits. For example the application developer does not have to write different applications or different output routines for each specific condition that may merit changes to the output. In fact the application developer does not even have to be able to test for those conditions. Rather the application developer may write one application with output variations for each of the special conditions which may include the specific model of the client device the type of the client device and broad or narrow class of the client device the network conditions etc. As new devices and capabilities are introduced the middleware transformer can select the output variation that best matches the capabilities of the new client devices.

As another example the output segments may depend on conditions that exist at the time of the request such as network congestion the time of the request or the location of the user which allow the middleware transformer to select an output variation or to format the output by taking into account such conditions. Therefore the application developer may design the application to provide generic output that includes output segments for each of a variety of conditions and then allow the host to select the particular output that is to be provided to the end user based on the particular conditions for the particular request.

Host server also includes a service linker for handling requests from end users for service and forwarding the requests to the appropriate service or application for a response. In addition service linker can keep the session or transaction of other services active. For example an end user may be a mobile phone that is communicating with the host. The host provides the end user with a list of service options that may include a map service. When the end user selects the map service using the mobile phone service linker receives the request from the end user and forwards the request to the provider of the appropriate service. For example if the service is supplied using a shared hosted application the request may be forwarded to a server associated with the map service provider over the World Wide Web. The response to the request from the shared hosted application may be received at the host in the form of generic output that is customized for the mobile phone such as by using a middleware transformer as discussed above.

In another embodiment applications incorporate the features and output of other applications. The applications may also be referred to as mobile modules or simply modules. For example if application in provides map directions the map service provider may also want to include information regarding the weather at the destination location specified by the end user. Instead of developing a separate weather application the map service provider may link to another hosted or shared hosted application provided by a weather information service provider that is associated with host server . For example application may be a weather application or module provided by a different company than the company providing the map service. However because both companies have modules associated with the host server both may include links to the other company s modules in the output of each company s application. Based on the links the middleware transformer may incorporate output from one application into another or a link may be presented to the end user to allow access to the features of another service.

In addition because the host server handles the interaction between the two services the host can track which modules are called by each other to facilitate billing between the services. Furthermore this tracking feature allows one module to call back to another module without being aware of the identity of the other module. For example if a first module calls a second module the tracking feature allows the second module to call back the first. As a result any service can be used as a module which may be described as providing a reusable web service to other services.

Host server also includes a database to support storage of data at the host by the services for use by the services applications. Although database is shown as part of host server database may also be supported by another server or other device suitable for providing database functions. Database may include a data structure for storing data and also a mapping of variables or identifiers to specific data or information items. Services may use database to durably store and maintain information at the host server thereby freeing the services of the obligation to support such a database themselves. For example an application may generate output with an identifier xyzlogo that is identified in the mapping as corresponding to a particular graphical image of the XYZ Company stored in database . As another example the application s output may include a variable date to denote the current date when the application is accessed in response to a request from an end user. Upon receipt of the output at the middleware transformer the current date is substituted in the output for the variable date.

Host server also includes an online software development kit that services and application that developers may use to create edit test deploy and otherwise manage applications or modules associated with the hosting service. According to one embodiment an application developer uses a browser to log into an online development website associated with the hosting service to access online software development kit . After logging in online software development kit provides a user interface for display on the developer s web browser. The user interface presents the user with various options such as creating a new application modifying an existing application testing an application or deleting an existing application. For example to create a hosted application the developer enters or modifies program code using the user interface via the developer s browser and then saves the code at host server under a module or application name or identifier. If the developer wishes to establish a shared hosted application the developer logs into the online development website and provides a URL of the application. The hosted and shared hosted applications may then be made immediately available for use. For example end users may log into the service provider via a website to access a list of available services.

According to one embodiment a developer uses a browser running on a client to log on to a website through which the developer can access the tools necessary to develop an application without any special client side SDK software. The website may be referred to as a development website or as an SDK website when for example the website provides or hosts an online software development kit SDK .

As used herein a developer is synonymous with both a service provider and a user since the developer makes use of the online development website . Also a user is distinguished from an end user or a customer that uses the service provided by the developer.

The provider of the application development tools and host of the online development website may be referred to as the development provider SDK provider or simply as the host. The development provider typically uses one or more servers to support the development website and the tools provided thereby.

Access to the development website may be controlled by requiring the user to have a name and password. After the user has gained access to the website the user may be presented with a list of mobile applications also referred to herein as services that the developer or user has previously created. The user may also have access to other services such as samples provided by the development website provider. The development website may present the user with several options such as to add a new service modify an existing service or delete an existing service. For example if the user selects the add service option the user is presented with a user interface that allows the user to add a service.

According to one embodiment a service may be either a hosted application or a portal application. A hosted application is an application whose code is maintained at the development website also referred to as the host website. A portal application is an application whose code is maintained at another website associated with the portal application developer and may typically be accessed by customers or end users via the developer s website. However according to another embodiment a portal application may also be accessed or served to clients through the development website in which case the portal application may be referred to as a shared hosted application or a partially hosted application. 

The deployment of a hosted application may involve several steps such as initially creating the application subsequently editing of the application and testing of the application. In one embodiment to create a hosted application the development website provides the developer or user with an interface for writing and editing code for the application. The interface may include an editing window or edit field that the user may use to type in the code for the application. Similarly to edit an existing application the user is presented with an interface that displays the existing application code to the user in an editing window that allows the user to edit the code of the selected application.

Application code can be written in an appropriate mark up language ML such as the extensible markup language XML . According to one embodiment the code is written in a mark up language referred to herein as portal to go XML . Portal to go and Portal to go XML may also be referred to as Oracle9iASWireless and Oracle9iASWireless XML or just IASWireless XML respectively.

Portal to go XML consists of a set of XML tags that may be used to indicate boundaries between alternate output segments. Each output segment in a set of output segments may be specifically designed for certain devices such as mobile devices that typically have small screens and others with voice capabilities.

Portal to go XML can be generated by any of the traditional means of generating dynamic HTML such as JavaServer Pages CGI or Active Server Pages such that instead of generating HTML the code or script generates Portal to Go XML. The details of such a markup language such as Portal to go XML may be defined in a Document Type Definition DTD . For example a DTD of portal to go XML as implemented in one embodiment is described in U.S. provisional application Ser. No. 60 230 489 filed Sep. 6 2000.

Accorded to another embodiment both the application code for a hosted application and the code that causes the generation of the user interface used to enter and edit the code are stored on one or more servers associated with the development provider. Consequently the only client side software required to develop and deploy a mobile application is a web browser such as Netscape Navigator.

When the user finishes inputting the code for a new application or editing the code for an existing application the user can save the code shown in the interface. The save code function may be an object such as a button included in the interface. By clicking on the object the code is submitted or sent to a server remote from the client such as a server associated with the development provider. If a new application is being created the user specifies a service name and the code is saved in association with the service name. After saving the new code the new service name will be displayed in a list of existing services shown when users and end users log into the development website. If an existing application is being modified the user may choose to save the code under the existing service name or under a new service name.

To test the application the user can access the application or service via the development website using a mobile device or a mobile device simulator. This is discussed in more detail below under Accessing the New Application or Service. The hosted application that is deployed via the development website is immediately available to the user for testing and to end users for use via the host website.

In another embodiment to create a shared hosted application the user writes either a portal to go XML document or an application program that generates a portal to go XML document as output. The terms partially hosted application or the shared hosted application may be used to refer either to the XML document or the application that generates an XML document as output. The shared hosted application may be saved for example at the application developer s own website. The user then associates a URL with the shared hosted application using for example an HTTP listener web server that services the application developer s web site. The shared hosted application is then added as a service by logging into the development website or the SDK website and providing the name of the service and the URL associated with the shared hosted application.

As soon as a service has been created and or revised end users or customers that can connect to the network on which the server resides e.g. the Internet can access the service. The process by which the service is accessed may vary based on the type of end user. For example a desktop computer can connect to the Internet through a dial up line a DSL connection a cable modem an ISDN connection or many other available methods. WAP phones may connect to the Internet over a wireless connection using a synchronous protocol such as through a WAP to HTTP gateway or using an asynchronous protocol such as the simple mail transfer protocol SMTP or the short message service SMS protocol.

In general the end user logs in to the development website and is presented with a list of available services. The end user may select the service that was just created and or modified. In response to the selection of a service the application associated with the service is obtained. The application may be associated with a portal to go XML document or another document written in a suitable markup language. For example with hosted applications the XML may be obtained by retrieving the portal to go XML that was saved at a server associated with the intermediary e.g. the host . For portal applications a request may be sent to the URL that was specified by the developer for the service. The web server that manages that URL may invoke the portal application and send the portal to go XML associated with the portal application back to the server associated with the intermediary. Once the portal to go XML for the service is obtained for either a hosted or portal application the server associated with the intermediary uses the portal to go XML to provide the selected service to the client associated with the end user.

According to one embodiment the mark up language output such as portal to go XML is produced by a service without regard to the type of client device that is invoking the service. According to one embodiment prior to providing the output to a client one or more extensible stylesheet language XSL style sheets are selected based on the device type of the client. XSL style sheets are discussed in more detail in U.S. application Ser. No. 09 631 884 filed Aug. 4 2000 the entire disclosure of which is hereby incorporated by reference as if fully set forth herein.

The selected style sheets are applied to the XML output from the service to produce customized output that is specifically formatted for the client that requested the service. For example the same XML output by a mobile application may ultimately be manifested in the following three ways depending on the type of client that requested the service 1 a list of options on the display of a mobile phone 2 a pull down menu on a browser and 3 an orally presented list of options on the voice interface of a telephone. The application developer achieves any device support without having to do any special programming because the applications are designed to produce the same XML output regardless of the device used to request the service and since the device specific formatting takes place outside the applications such as by an intermediary applying device specific XSL style sheets.

Further because the execution of the code and the application of XSL style sheets to the output thereof occur via the host all hosted and portal applications automatically gain device specific support for new devices whenever the host installs XSL style sheets for the new devices. The application developer need not make any changes to the application code to support any additional or newly developed client devices. Of course if the developer wants to take advantage of improved or added capabilities the developer may update the application to provide addition output segments or variations for such capabilities.

Another problem with providing services via applications is that the applications function the same regardless of the specific circumstances existing at the time when the applications are used. For example it may be desirable to modify the application s output based on the congestion of the network at the time a user accesses the application. If the network is heavily congested it may be better to limit the amount of detail provided in the output being provided during such times of heavy congestion. Again the application programmer can take the lowest common denominator approach and design the application for the worst case conditions. However this approach fails to take advantage of improved conditions when they exist at other times. If the programmer selects a higher level of detail then the ability of the application to deliver output to the client device will suffer during periods of heavy network congestion.

Techniques are provided for producing output that takes into account conditions parameters and characteristics associated with a service request which are also referred to as request conditions . Request conditions may include for example information about the type of client that is requesting the service such as a device type or environmental conditions such as the time at which the service request is made or responded to or the congestion on the network over which the service is requested or supplied.

According to one embodiment an application program continues to generate the same output regardless of the request conditions. Because the output of the application is the same regardless of request conditions it is referred to herein as condition independent output .

According to another embodiment the condition independent output produced by an application contains hints or criteria conditions or other guidance as to how the output should be processed under certain request conditions. A middleware transformer is provided that receives the condition independent output and uses the hints contained therein along with knowledge of the client and request conditions to transform the condition independent output into condition specific output which may also be referred to as condition dependent output. The condition specific output is then provided to the client that requested the service that produced the output. The middleware transformer typically is associated with the host and may be provided by a server associated with a host but the middleware transformer is not limited to implementations associated with the host.

According to one embodiment application programmers design applications to generate output that contains hints about how the output should be transformed based on request conditions. According to one implementation the application programmer designs the application to generate output that designates several variations of the output that satisfies a request to the application that resulted in the generation of the output. The variations of the output may also be referred to as alternative output segments.

The output from the application also includes one or more particular criteria or conditions that are associated with each of the alternative output segments. A middleware transformer is used to select the alternative output segment that best matches the request conditions to the criteria or conditions that are associated with each alternative output segment. A match may be determined based on whether the condition or conditions associated with a particular alternative output segment are satisfied or not satisfied or whether the conditions are true or false .

For example if the application output is in the form of a mark up language such as XML the output may include a section of code that has the form 

The application generates the output above without regard to the request conditions that will exist at the time a request for a service is made by an end user. The middleware transformer determines whether any of conditions 1 2 and 3 are true after receiving the condition independent output from the application. For this example if condition 1 is true then the middleware transformer transforms the condition independent output to produce the following condition dependent output 

If condition 2 is true but condition 3 is not true then the middleware transformer transforms the condition independent output to produce the following condition dependent output 

If condition 2 and 3 are true then the middleware transformer transforms the condition independent output to produce the following condition dependent output 

If conditions 1 and 2 are not true then the middleware transformer transforms the condition independent output to produce the following condition dependent output 

In this example conditions 2 and 3 are related to each other. Specifically the output segment associated with condition 3 is not executed unless both conditions 2 and 3 are true.

The technique of specifying a hierarchy between conditions may be used for example when one condition is a subset of another condition. For example condition 2 may be that the network is experiencing an unusual amount of traffic e.g. network congestion as compared to a threshold amount and condition 3 may be that the network traffic is extremely heavy as evidenced by exceeding a specified limit. Therefore for normal network congestion when condition 2 is true but not condition 3 the actual instruction or statement corresponding to use this when Condition 2 is true and Condition 3 is not true may specify that no unusually detailed graphics should be transmitted. And if condition 3 is true such as might be the case for extreme network congestion the actual instruction or statement corresponding to use this when Condition 3 is true may specify that no graphics should be transmitted.

The use of condition independent output with embedded hints allows the application developer to design flexibility into the service application to handle variables that may only be known at the time a client requests service from the application. Incorporating flexibility into the application output avoids the drawbacks of the lowest common denominator approach by allowing the application to adjust the output for optimal performance based on the circumstances existing at the time of the client s request to the application. Furthermore the application itself need not have the ability to detect the conditions upon which alternative output segments are selected since the host will handle that function.

For the purpose of explanation an implementation shall be described in which the conditions associated with the alternative output segments are the device type of the requesting client. In such an implementation the condition independent output generated by an application may have the form 

The application generates this output without regard to the request conditions. Upon receiving the condition independent output from the application the middleware transformer determines whether the client corresponds to any of the alternative segment tags. For example using the XML output above if the client is a desktop computer then the client matches the tag and the middleware transformer transforms the condition independent output to produce the following condition dependent output 

If the client is a phone but is not a WAP phone then the client matches the tag and the middleware transformer transforms the condition independent output to produce the following condition dependent output 

If the client is a WAP phone then the client matches both the tag and the tag. The tag is more specific than the tag so the middleware transformer transforms the condition independent output to produce the following condition dependent output 

If the client is neither a desktop computer nor a phone then the client does not match any of the alternative segment tags and the middleware transformer transforms the condition independent output to produce the following condition dependent output 

The approach of using embedded hints to identify a type of device allows the application developer to write one set of code that can be used with all devices yet the application code may contain alternative segment tags to customize the application s output for different devices that have varying capabilities. In the example above if the client device is a desktop computer full text graphics and sound content can be sent since a desktop computer can easily handle all three types of content. But if the client device is a mobile phone then perhaps no graphics will be sent since a mobile phone is unlikely to be capable of showing such graphics on its display. Further if the phone happens to be a WAP phone in the above example the application can produce output specific to the WAP protocol.

Furthermore if the client device is not one of those listed a default configuration for the output can be used e.g. the Use this for Every Other Device alternative segment tag above . A default condition may specify output based on the lowest common denominator approach so that any client can handle the output. However the application developer need not rely on such a default configuration if the device happens to be one of the types specifically provided for such as a desktop device a phone or a WAP phone. Finally client devices that are created after the application is complete can still receive output that takes advantage of their increased capabilities if they fall into one of the specified device types such as a desktop computer or phone in the above example. Therefore future devices need not be forced to use the most basic or default output just because the future device was unknown to the application developer when writing the code for that service.

According to one embodiment a programming language is provided that supports alternative segment tags that correspond to nodes in a condition hierarchy. The most general highest node in the condition hierarchy is the default node. The other nodes correspond to specific conditions. The most specific nodes in the condition hierarchy may correspond for example to specific models of a device or even specific versions of specific models. Other intermediate nodes may correspond to classes or types of devices such as mobile phones or pagers.

According to one embodiment the nodes in the condition hierarchy are associated with each other according to parent child relationships where all child nodes of a given parent correspond to subcategories of the category associated with the parent.

Desktop node also has its own child nodes specifically a Unix node and a windows node that correspond to two examples of desktop operating systems. Similarly Unix node has two child nodes a Solaris node and a Linux node which correspond to two versions of the Unix operating system. Likewise phone node has several child nodes specifically a WML node an HDML node and a CHTML node which correspond respectively to phones using the wireless markup language WML the handheld device markup language HDML and the compact hypertext markup language CHTML . Similarly WML node has three child nodes a Nokia 7110 node a TC 4411 V1 node and a TC 4411 V2 node which correspond respectively to a Nokia model 7110 mobile phone and versions 1 and 2 of the TC model 4411 phone.

Given the example of a condition hierarchy shown in an application programmer can design a program that generates the following output for a menu item 

When the middleware transformer receives this condition independent output the transformer determines the type of client to which the output is to be sent and generates condition specific output. Specifically for all clients other than desktop clients voice clients and phone clients the menu item is Return . For desktop clients voice clients and the specific phone model TC 441 V2 the menu item is Generate Return Directions . Finally for phone models other than TC 441 V2 the menu item is Rtrn. Dir. The special treatment of model TC 441 V2 may be desired for example if the TC 441 V2 is able to display longer menu items than conventional mobile phones.

In one embodiment after the condition specific output has been created an XSL style sheet may be applied to format the output according to the needs of the client to which the output is to be sent. In an alternative embodiment in addition to the output processing described above the middleware transformer formats the output for the specific device either by applying one or more XSL style sheets or by any other means.

In order for the middleware transformer to perform the appropriate output transformation the party that controls the middleware transformer also known as the middleware host maintains data that indicates 1 the condition hierarchy 2 the tags associated with the nodes of the condition hierarchy and 3 the correlation between the nodes of the condition hierarchy and request conditions.

For example assume that the middleware transformer supports the condition hierarchy illustrated in . The middleware host may maintain data that indicates various types of information such as the association of the tags in the XML to the nodes of the condition hierarchy and the relationship of the nodes to each other. Below are representative examples of the data that may be maintained by the middleware host 

The condition hierarchy may be developed by the service provider or development provider. By incorporating the use of a condition hierarchy in an application the service provider may support either broad classes of devices such as PDA s more narrow classes of devices such as Unix desktop computers or specific devices such as Nokia model 7110 phone. The application developer may then customize the output for the service based on the capabilities of the devices based upon the broad class narrow class or specific device.

When the middleware transformer receives condition independent output that is to be delivered to a client and the condition independent output includes a set of alternative output segments the middleware transformer inspects the relevant request conditions. For example if the alternative output segments are associated with different types of client devices the middleware transformer determines the device type of the client to which the output is to be sent. Based on the applicable request condition s the middleware transformer selects the output segment that most specifically matches the request condition s .

According to one embodiment when the middleware transformer receives output that includes alternative output segments the middleware transformer selects the output segment that most specifically matches the request conditions via the process outlined in the flowchart of . In step the highest node in the condition hierarchy e.g. all devices node of is set as the current node.

Next in step the alternative output segments that correspond to the children of the current node are identified. Referring back to if the current node is the all devices node then the middleware transformer identifies the children as follows voice node desktop node PDA node pager node and phone node .

In step a determination is made about whether any of the conditions associated with the identified children of the current node are true. For example if the device making the service request is a pager then the condition associated with pager node would be true but the condition associated with phone node as well as the other child nodes of all devices node would not be true. Conversely if the device was a phone then the condition associated with phone node would be true and the remaining conditions associated with the remaining childe nodes of all devices node would not be true.

If a condition associated with a child of the current node is true then step sets that child node as the new current node and the process loops back to step . For example if the current node is all devices node and the device is a pager then the condition associated with pager node is true. According to step pager node is set as the current node and the process returns to step .

If no condition associated with any child of the current node is true then step selects the output segment associated with the current node. For example if the current node is all devices node and the device requesting the service is a brand new type of futuristic device unknown when the condition hierarchy was created then perhaps none of the conditions associated with any the child nodes of all devices node would be true. Therefore according to step the output segment associated with the current node which is all devices node in this example is selected. For example the output associated with all devices node may be capable of display on any device e.g. the lowest common denominator approach or the output may be capable of display on devices with a higher minimum capability level.

For example assume that the condition independent output of an application is as follows wherein the alternative segment tags correspond to the nodes shown in 

Further assume that the client to which the output is to be sent is a device identified by the nomenclature TC 441 V1 . The condition associated with TC 441 V1 node in as well as the conditions associated with all nodes from which the TC 441 V1 node descends i.e. phone node and WML node are TRUE.

To determine which of the alternative output segments to use in the XML given above the middleware transformer initially establishes all devices node as the current node according to step of .

The middleware transformer then identifies the alternative output segments that correspond to the children of the current node. In the present example the alternative output segments that correspond to the children of all devices node are the output segments associated with voice node desktop node and phone node . As shown in the condition independent output above not all of the child nodes shown in for all devices node have a corresponding alternative output segment. Thus the application developer may only support some of the classes types or specific devices included in the condition hierarchy.

The middleware transformer then determines whether any of the conditions associated with the identified children of the current node are true as specified by step . In the present example in which it is assumed that the device is a TC 441 V1 the condition associated with phone node is true. Consequently phone node is established as the new current node per step .

Returning to step with phone node set as the current node the middleware transformer identifies the alternative output segments that correspond to the children of phone node namely WML node since there are no alternative output segments provided in the XML above that correspond to the other child nodes of phone node shown in .

Per step the middleware transformer determines whether any of the conditions associated with the identified child nodes are true. In the present example the only alternative output segment with a condition that is true is the alternative output segment associated with WML node . Consequently WML node is established as the new current node per step .

Returning to step with WML node set as the current node the middleware transformer identifies the alternative output segments that correspond to the children of WML node . In the present example the only alternative output segment that corresponds to a child of WML node is the output segment associated with the TC 441 V2 node . No alternative output segments are provided in the XML above for the other child nodes of WML node shown in i.e. Nokia 7110 node and TC 441 V1 node .

Per step the middleware transformer then determines whether any of the conditions associated with the identified children of the current node are true. In the present example the condition associated with TC 441 V2 node is not true because the client to which the output was assumed to be sent to is a TC 441 V1 not a TC 441 V2. Consequently the output segment associated with WML node is selected. The condition independent output may thus be transformed into 

The example above illustrates how the best match can be identified for a particular device even if there is no exact match. The lack of an exact match may be due to a number of reasons such as that device specific output is not required and or desired. The lack of an exact match may also be due to the device being new and thus the developer did not know of the new device and the capabilities of the new device when designing the application. Yet the new device can still receive output that is suitable for a phone in the example above instead of default output or output that is for another class of device such as desktop computers.

The foregoing example is merely one technique that may be used by the middleware transformer to select the output segment that most specifically matches the request conditions. Various alternative techniques may be used. For example in one alternative technique each tag may be assigned a number that corresponds to the level within the condition hierarchy of its corresponding node. Thus could be assigned 3 and could be assigned 2. The appropriate output segment of a set of alternative output segments may then be chosen by 1 identifying within the condition independent output the tags that correspond to true conditions and 2 selecting from among those tags the tag that has been assigned the highest value.

In the foregoing description the request condition used to select the appropriate output segment is the device type of the client to which the output is to be supplied. However the request condition used to select between alternative output segments may vary from implementation to implementation. For example in one implementation the alternative output segments in a set may each be associated with a different congestion level of the network. In another implementation the alternative output segments in a set may each be associated with a different class of end user. In yet other implementations the alternative output segments may be associated with combinations of factors. For example a particular output segment may be specified for use when 1 a particular class of user is using 2 a particular type of client device and 3 has a connection that supports a particular transfer rate.

Further the foregoing description gives examples in which the output is in the form of a mark up language such as XML. However the nature of the output may vary from implementation to implementation. The techniques described herein may be used with any form of condition independent output that includes 1 alternative output segments and 2 some form of hints that may be used to select between the alternative output segments based on request conditions.

Use of the tag in the example above illustrates a situation in which the request condition used to select an alternative output segment relates to the markup or programming language supported by the client device to which the output is to be sent. According to one embodiment an alternative output segment associated with a supported programming language request condition may include partially or entirely code written in the supported programming language.

For example the output segment placed between the and tags may consist entirely of WML code. Consequently when the client device supports the WML language the output sent to the client is in the WML language. While the WML language is used in this example the technique may be used for any programming language including but not limited to C HTML Visual Basic or Java.

Numerous benefits are realized by using a middleware transformer hosted by the middleware host to transform the condition independent output prior to supplying the output to a client. For example through this technique the mobile application enjoys every device support by virtue of the middleware host providing device specific format and protocol transformations for new devices as the new devices are developed. Further when the mobile application uses the alternative output segment techniques described above the mobile application developer is able to provide users with output in which the content is based on conditions associated with the request without designing applications that are able to detect those conditions.

In one embodiment the content of the output received by a client may be tailored to the device type of the client without the mobile application being aware of the device type of the client to which the output is sent. For example the client device may be a pager. By using an XSL style sheet as discussed above to transform the application output such as output in portal to go XML the middleware transformer can generate device specific formatting for the pager.

Furthermore the content of the output received by a client may be automatically tailored to new types of clients based on the categories to which those new clients have been assigned without the application developer even being aware of the new types of clients. For example when a new type of WAP phone is developed the middleware host will classify the new WAP phone at the appropriate location in the condition hierarchy. Consequently the new WAP phone will automatically receive those alternative output segments associated with WAP phones if any are specified in the output from the service application.

If a particular set of alternative output segments does not have an output segment associated with WAP phones but does have an output segment associated with mobile phones then the new phone will automatically receive the alternative output segment associated with mobile phones. In this manner the content of the output delivered to new devices is device specific with the level of specificity determined by the application developer even for newly developed devices that the application developer knows nothing about when creating the application.

Service provider includes an HTTP server for handling communications between service provider and other servers such as service linker or servers linked together as part of the Internet. Service provider also includes an application server for directing requests received by HTTP server to the appropriate application.

Service provider also includes an application that is the subject of the request from client device in this example. For example application may be a dining directory module that provides a listing of restaurants in a city specified by an end user via a client such as client device . Application may be capable of generating several sets of output such as output and output depending on the request. For example output may be a prompt for the end user to supply the name of a city for which a listing of restaurants is desired.

Service provider also includes a database . For example if application is a dining directory module database may include information about restaurants in a number of cities. Upon selection of a particular city by the end user application may generate output that includes a listing of restaurants in the chosen city.

Service provider responds to the request received from client device via service linker with a generic output . For example generic output may be an electronic document containing portal to go XML.

Generic output is sent from service provider to hosting service where the generic output is processed by a device transformer . Device transformer may be a server that functions as a middleware transformer by applying style sheets to generic XML output to a customized output as described above. Customized output is then sent to client device for display to the end user.

Service providers and application developers can build hosted or portal applications that are accessed by service requests sent to the intermediary such as a host that manages middleware transformer. According to one embodiment the services or applications also referred to herein as mobile modules can generate output that results in calls to other mobile modules. The output may for example use a particular set of tags such as to indicate a substitute command that makes reference to another mobile module and include within the tags an identifier for the mobile module.

For example the output generated by the mobile module of a first party party1 may refer to another mobile module of second party party2 by including the following set of statements 

In response to receiving the output immediately above the middleware transformer may invoke the mobile module of the second party identified by party2 module identifier embed the output of that module into the output from the mobile module of the first party and deliver the combined output to the client. This feature allows the designer of one mobile module to take advantage of the functionality of all other mobile modules that may be available on the intermediary e.g. the host . This feature also allows the transaction with the previous service to be kept active as well as allowing the services to be used without having to know who is using the services.

Also this feature is different from linking of objects among web pages where the browser running on a client. For example if a browser receives a web page that has a link to an object the browser sends a request to the address specified by the link receives an object in response and then incorporates the object into the web page that is displayed by the browser. Thus it is the browser running on the client that requests receives and incorporates the object into the web page.

In contrast in the embodiment above the intermediary receives output e.g. at the middleware transformer from one module makes a request to another module receives output from the other module and then incorporates the output of both modules together and then sends the combined output to the client. Thus it is the intermediary not the client that requests receives and incorporates the output of the second service into that of the first service.

According to another embodiment not only can the output of one mobile module referred to as the calling mobile module cause the invocation of another mobile module referred to as the called mobile module but the calling mobile module may also pass parameters to the called mobile module. For example the output of the calling mobile module may include code of the following form 

The example immediately above would pass parameters param1 param2 and param3 from the calling mobile module to the called mobile module identified by called module identifier. 

According to another embodiment rather than automatically embed output from the called mobile module in its output the designer of the calling module may simply want to present to the user a link that if selected causes invocation of the programming routine of the called mobile module. To indicate that a link is desired a different set of tags may be used such as to denote that an action command is to be executed based on the statements between the and tags.

The intermediary knows when a first mobile module of a first party is being called by a second mobile module of a second party because it is the intermediary s responsibility to perform the invocation required by the substitute command or to perform the invocation required by the action command such as the selection of a link.

According to one embodiment the intermediary stores information about which modules invoked which other modules. The information may be used as the basis for business relationships between mobile module designers. For example the designer of a calling module may negotiate to pay the designer of a called module a certain amount of money every time the calling module invokes the called module. The party providing the intermediary e.g. hosting services records the inter module calls and provides them to the various module owners.

The tracking and management of the business relationships among application providers or module owners are not easily implemented outside the hosting framework described herein. For example on the World Wide Web a first party may design a first web page that includes a link to a URL associated with a second web page provided by a second party. It is extremely difficult if not impossible for the second party to determine whether the second web page is requested in response to users selecting the link on the first web page or whether the second page is requested by other means. Consequently it is difficult for the second party negotiate a per use agreement with the first party.

According to yet another embodiment the host maintains state information at an intermediary about the services accessed by an end user. For example the intermediary may store an information stack for each session by an end user. The information stack indicates the sequence in which services or mobile modules have called other mobile modules during the session as well as the identities of the module modules.

According to one embodiment the mobile modules associated with the services may take advantage of the state information stored at the intermediary using a callback mechanism. For example along with a link for invoking a called module the calling module may include callback information. When the host invokes the called module in response to selection of the link the callback information is stored in a record at the intermediary such as by placing the callback information on the stack associated with the session. The called module may provide a done or exit option control or object on the content provided by the called module. The end user can select the done or exit option when the end user is finished with the service provided by the called module. The called module need not have any information or knowledge about the identity of the calling module. Instead the called module need only identify the previously accessed service i.e. the previously used mobile module and the intermediary will then identify the previously accessed service based on the stack information.

In response to selection of the done option a message is sent to the host to cause the host to perform the action specified on the top of the information stack. In the above example the action specified at the top of the information stack is the callback information that was placed there at the time the called module was called. Typically the callback information will cause the calling module to be invoked once again and content or output from the called module will be delivered to the end user. From the perspective of the end user it appears as if the end user is returning to calling module when the end user is done with the called module.

According to one embodiment data may be stored at an intermediary for use by services that are accessed through the intermediary and when the applications or mobile modules for the service are executed the intermediary includes the stored data in the application output in place of variables in the output based on a mapping of those variables to the stored data. The intermediary which may be a host stores both the data or values or information items and a mapping between the information items and the variables or identifiers. A service may store or update data for an existing variable or store data for a new variable to be added to the mapping.

The content or output generated by a mobile module may include one or more of the identifiers. In response to encountering output that refers to one of the identifiers the intermediary supplies the corresponding information item before providing the output to the client requesting the output.

For example for a particular session the host may store the data item Mike mapped to the identifier name . A module may generate the output 

When the host encounters such output in a particular session the host substitutes the name reference with the corresponding data item Mike resulting in the output 

According to one embodiment the service providers and developers of the mobile modules can register with the host the data and identifiers to be maintained by the host. The designers of those modules may thereby free themselves of the burden of durably maintaining information and yet get the benefit of durably maintained information by merely including the appropriate identifiers in their output.

In another embodiment a calling mobile module can set a data item or reference to allow the end user to return to the calling mobile module when the end user is done with the called mobile module. For example for a particular session the host may associate the data item href to a calling module identifier. A module may generate output to create a link to the called mobile module using this data item as the first parameter as follows 

When the host encounters this output in that particular session the host substitutes the href reference with the calling module identifier resulting in the following output 

As a result when the client uses the link to the called module the calling module identifier is passed to the called module as a parameter. The called module may use the calling module identifier to send the client back to the calling module when the client is done with the called module.

In another embodiment prior to executing a link to another service or called mobile module a data item can be stored at the intermediary that contains a reference to the previous service or calling mobile module. The other service or called mobile module may then provide an object such as a done or exit control or button on a web page that includes a label or variable such as previous. When the intermediary encounters the previous variable in the output from the other service the intermediary substitutes a reference to the previous service or calling mobile module thus allowing the end user to return to the previous service by selection the object on the web page from the called mobile module.

While the above examples uses variables or identifiers such as name to denote a name of an end user and href to pass the calling module identifier to the called module respectively other variables may be used to refer to other data that will only be set or known when the application is executed. For example labels can be used to get the date or time when the application is run or a specific request by a client is made.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

The invention is related to the use of computer system for implementing the techniques described herein. According to one embodiment of the invention those techniques are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another computer readable medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the invention. Thus embodiments of the invention are not limited to any specific combination of hardware circuitry and software.

The term computer readable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Common forms of computer readable media include for example a floppy disk a flexible disk hard disk magnetic tape or any other magnetic medium a CD ROM any other optical medium punchcards papertape any other physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM any other memory chip or cartridge a carrier wave as described hereinafter or any other medium from which a computer can read.

Various forms of computer readable media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are exemplary forms of carrier waves transporting the information.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution. In this manner computer system may obtain application code in the form of a carrier wave.

In the foregoing specification the invention has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

