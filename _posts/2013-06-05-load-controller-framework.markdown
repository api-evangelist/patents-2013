---

title: Load controller framework
abstract: The present disclosure involves systems, software, and computer-implemented methods for controlling service load in a cloud-based system. An example method includes receiving a first request for the network service from a client, evaluating a load condition associated with the network service, the load condition indicating an availability of the network service to receive requests, returning a unique token associated with the first request to the client in response to the load condition indicating that the network service is not available to receive the requests, receiving a second request for the network service from the client, the second request including at least a portion of the first request and the unique token, evaluating the load condition associated with the network service, and prioritizing the second request based on the unique token in response to the load condition indicating that the network service is available to receive the requests.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09270617&OS=09270617&RS=09270617
owner: SAP SE
number: 09270617
owner_city: Walldorf
owner_country: DE
publication_date: 20130605
---
The present disclosure involves systems software and computer implemented methods for controlling service load in a cloud based system.

Cloud based systems are generally distributed systems including multiple components connected by a network. Cloud based systems may be used to implement network services that receive requests from clients and provide responses over a network. Load conditions associated with the network services may cause the services to be unavailable to process requests from clients.

The present disclosure involves systems software and computer implemented methods for controlling application load in a cloud based system. In one general aspect an example method includes receiving a first request for the network service from a client evaluating a load condition associated with the network service the load condition indicating an availability of the network service to receive requests returning a unique token associated with the first request to the client in response to the load condition indicating that the network service is not available to receive the requests receiving a second request for the network service from the client the second request including at least a portion of the first request and the unique token evaluating the load condition associated with the network service and prioritizing the second request based on the unique token in response to the load condition indicating that the network service is available to receive the requests.

While generally described as computer implemented software embodied on non transitory tangible media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and implementations of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

The present disclosure involves systems software and computer implemented methods for controlling service load in a cloud based system.

Many applications utilize cloud based systems to retrieve business data from network services. The network services may be integrated into the cloud system or implemented on computing devices external to the cloud system. For example an enterprise resource planning ERP service associated with a customer may be hosted on the customer premise e.g. an on premise system where access to the service may be brokered by the cloud system. By allowing network access to services hosted on such on premise systems a high risk that too many requests may overload the on premise system exists. For example an on premise system may not be able to process as many requests as a cloud system due to lack of processing power or network bandwidth. Such overloading may lead to the network service responding slowly to requests for data or may slow down company critical processes on the on premise systems. In addition to on premise systems components and services within the cloud system may also be subject to the same type of overloading.

The present solution provides a cloud based solution that protects network services from being overloaded by requests. Client requests for network services are brokered by the cloud system which in turn controls the volume of requests being sent to each network service. When a request for a certain network service is received a load condition associated with the network service is evaluated to determine if the network service can process the request. If it is determined that the network service is not available to process requests at this time due to load a unique token is returned to the client. The client may resubmit the request with this unique token to have the resubmitted request prioritized over other requests submitted without their own respective unique token if the network service is subsequently available. For example if a client submits a request for an ERP service the cloud system may evaluate a load condition associated with an ERP service. If it is determined that the ERP service is currently handling a number of requests greater than a pre defined or dynamically determined load threshold the cloud system may return the unique token to the client. The client may then resubmit the request with the unique token. If the ERP service is handling a number of requests less than the threshold when the resubmitted request is received the resubmitted request may be prioritized above other requests that are currently pending for the ERP service. This prioritization may be implemented by inserting the resubmitted request into a priority queue containing the request for the ERP service in an advanced position such that it will be processed sooner by the ERP service than other non prioritized requests.

In some cases the load condition may be evaluated by analyzing statistics associated with the network service to determine whether the network service is available. The load condition may also be evaluated by checking a status indication sent by the network service itself. For example the network service may send a message to the cloud system to indicate that it is under load and cannot process anymore requests currently.

The present solution may provide several potential advantages. By providing a common framework through which network service load can be managed developers of network services may be relieved of having to handle such load conditions thus simplifying the process of developing network services. Further the token mechanism described above may provide greater performance to clients requesting network services that are under load than a standard retry algorithm as subsequent retransmissions will be given greater priority.

In the illustrated implementation the example environment includes a cloud system . At a high level the cloud system comprises an electronic computing device operable to broker requests between the client and the network services based on load conditions associated with the network services . The cloud system may be a distributed system including different servers and components. In some implementations the cloud system may be a combination of hardware components and software components executing the order to broker the request from the client for the network services . The cloud system may also be the single computing device performing this brokering.

In some implementations the cloud system may be a web service that is accessible via standard web protocols such as for example Hypertext Transfer Protocol HTTP Simple Object Access Protocol SOAP or any other suitable protocol or combination of protocols. In some cases the cloud system may provide an Application Programming Interface API through which one or more clients may submit requests to the network services . In some implementations this protocol may be specific to the individual network service or maybe generalized for use with many network services.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a cloud system environment can be implemented using two or more servers as well as computers other than servers including a server pool. Indeed cloud system may be any computer or processing device such as for example a blade server general purpose personal computer PC Mac workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further illustrated cloud system may be adapted to execute any operating system including Linux UNIX Windows Mac OS Java Android iOS or any other suitable operating system. According to one implementation cloud system may also include or be communicably coupled with an e mail server a Web server a caching server a streaming data server and or other suitable server.

The cloud system also includes an interface a processor and a memory . The interface is used by the cloud system for communicating with other systems in a distributed environment including within the environment connected to the network for example the clients as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated environment .

As illustrated in the cloud system includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of environment . Each processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the cloud system . Specifically the processor may execute the functionality required to receive and respond to requests from the clients .

In the illustrated implementation the cloud system includes a load controller framework . In some implementations the load controller framework may be a software program or set of software programs operable to evaluate and control load conditions associated with the network services . The load controller framework may also be any combination of hardware and software components operable to perform the described load control. The various components included in the load controller framework and described below may also be software hardware or any combination of software and hardware components.

The load controller framework may include a load controller . In operation the load controller may receive a request from the client via the network . The load controller may determine the network service associated with the request and evaluate the current load condition of the network service . For example the load controller may analyze statistics associated with the network service indicating a number of requests sent to the network service in a recent time period a total amount of data sent to the network service in the time period a total number of outstanding requests that the network service is currently processing or any other suitable statistic. The load controller may further analyze rules to determine whether any of the statistics associated with the network service are above thresholds specified by the rules and thus indicate that the network service is unavailable to process requests. For example a rule may indicate that the network service may have a maximum of ten requests pending at any time. If the load controller receives a request for the network service while the network service has ten requests pending the load controller may reject the request and issue a token to the requesting client.

In some cases the load controller may be operable to issue tokens for requests that cannot be processed at the current time by the network service . In some implementations these tokens include a globally unique identifier GUID that uniquely identifies the token on the cloud system . When a client resubmits a request with a token load controller may consult the token manager to determine how to handle the request. The token manager may consult the token data in the database to determine statistics associated with the submitted token and may cause the request to be treated differently based on the statistics. For example if the token data indicates that a token has been resubmitted fifteen times and the network service has been unavailable each time such a request may be prioritized by the token manager above a request associated with the token that has only been resubmitted once. By performing this prioritization older requests are processed first when the network service becomes available to process requests.

In some implementations the load controller may refuse requests for the network service for an amount of time configured in the rules if a load condition is observed. For example a rule may state that the network service should not have any requests sent to it for one second after load condition is observed in order to give the condition time to clear.

In some implementations the load controller may examine a current load state of the network service as indicated by the network service itself such as for example by sending flow control indications to the cloud system . Such a flow control indication may be processed by the flow control manager and stored in the database for use by the load controller .

In the illustrated implementation the load controller framework also includes a queue manager . In some implementations requests sent by the client for the network service may be entered into the priority queue and processed in order according to the queue. The queue manager may be operable to push and pop requests onto and off of the priority queue based on the prioritization data generated by the load controller and the token manager . For example the load controller may instruct the queue manager that a certain request be prioritized. The queue manager may then insert the prioritized request at the front of the priority queue such that it will be processed before all other pending requests.

The queue manager may also be operable to clear all requests from the priority queue when a load condition associated with the network service is detected. For example if a flow control indication is received from the network service the queue manager may remove all requests that are currently pending in the priority queue for the network service and cause the load controller to issue tokens for each request.

The load controller framework may also include a flow control manager . In some implementations the flow control manager is operable to receive a flow control indication from the network service indicating that the network service is currently unavailable due to load. For example the network service may detect that its processor is running at one hundred percent utilization and may generate a flow control indication in order to prevent additional requests from being sent to the network service . The flow control manager may receive this indication and may store an indication that the network service is currently unavailable in the database such as in the load statistics .

Regardless of the particular implementation software may include computer readable instructions firmware wired and or programmed hardware or any combination thereof on a tangible medium transitory or non transitory as appropriate operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. While portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The cloud system also includes a memory or multiple memories . The memory may include any type of memory or database module and may take the form of volatile and or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including caches classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the cloud system . Additionally the memory may include any other appropriate data such as VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files as well as others.

As illustrated in memory includes or references data and information associated with and or related to providing the network service load control. As illustrated memory includes a database . The database may be one of or a combination of several commercially available database and non database products. Acceptable products include but are not limited to SAP HANA DB SAP MaxDB Sybase ASE Oracle databases IBM Informix databases DB2 MySQL Microsoft SQL Server Ingres PostgreSQL Teradata Amazon SimpleDB and Microsoft Excel as well as other suitable database and non database products. Further database may be operable to process queries specified in any structured or other query language such as for example Structured Query Language SQL .

As shown the database includes one or more rules . In some implementations the rules may specify thresholds for various statistics associated with the network service . For example a rule may specify that more than ten pending requests for a certain network service indicates that the network service is unavailable. The rules may also specify actions to take when a network service is observed to be under load. These actions may include but are not limited to issuing tokens for all requests until the load condition passes issuing tokens for all requests for a certain amount of time resetting the network service or any other suitable action. As discussed previously the rules may be interpreted by the load controller in order to determine how to broker requests. In some implementations each rule may be associated with one of the network services . Each rule may also be associated with two or more network services .

In some implementations the one or more rules may be statically defined such that the rules specify numeric values for various statistical thresholds associated with the network service . The one or more rules may also be determined dynamically based on runtime conditions associated with the network service . For example the one or more rules may state that the network service can have ten pending requests if a server associated with the network service has a central processing unit CPU utilization less than ninety percent.

The database also includes token data . The token data may include a record for each token that has been issued for a request. In some implementations the token data may include a record for both pending tokens and tokens that have already been used to resubmit a request. Each record included in the token data may include the GUID associated with the token as well as an indication of the client to whom the token has been issued. The token data may include statistics associated with tokens issued by the load controller for requests that cannot be processed due to load. For example the token data may indicate the number of times the token has been resubmitted which indicates the number of times the associated request has failed.

In the illustrated implementation the database includes priority queue data . In some cases the priority queue data includes an ordered list of pending requests for each network service . The priority queue data may be updated by the queue manager in order to affect prioritization of requests.

The illustrated database includes an application registry . In some implementations the application registry includes information about the network services that registered with the cloud system to have requests brokered by the load controller framework . In some cases the application registry may be populated according to a request received from the network services such as through an API. Where a request is received by the cloud system the load controller framework may check the application registry to determine whether it should broker the request for the particular network service .

As shown the database includes load statistics . In some implementations the load statistics may include current load statistics associated with each of the network services . The load controller may consult the load statistics to determine whether the each of the network services is currently under load. In some cases the load statistics may include historical load statistics for each of the network services such that previous load behavior may be analyzed.

The environment may also include one or more network services . In some implementations the network services may be services connected to the cloud system by the network . In operation the network services may receive requests from the clients via the cloud system and may provide responses to these requests to the clients via the cloud system . In some cases the network services may provide responses directly to the clients such that the cloud system does not broker the responses.

In some implementations the one or more network services may be on premise services implemented at a customer premise site separate from the cloud system . The one or more network services may also be an integrated component within the cloud system .

As shown the one or more network services include one or more applications . In some cases the applications may be software programs executed by the network service and operable to perform analysis associated with the network service . The one or more network services may also include a load monitor operable to analyze the current state of the network service and send a flow control indication to the cloud system if the network service is under load. For example the load monitor may track the current bandwidth used by the network service and send a flow control indication to the cloud system if the current bandwidth used exceeds a configured threshold. In some implementations at least a portion of the load monitor may be located remotely from the network service . In such a case an agent or client of the load monitor may monitor locally and share gathered information related to the network service with a corresponding component located remotely from the network service such as for example in the cloud system .

Illustrated client is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example client may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the cloud system or client itself including digital data visual information or a graphical user interface GUI . Client may include an interface a processor a memory and a client application . Client may be used by a user to access the cloud system to view or change items in the database such as rules .

At the client sends a request for the network service to the cloud system . In some implementations the client may send the request to the cloud system over the network . In some cases the client may send the request according to an API specific to the cloud system .

At cloud system determines if the network service is under load. In some cases the cloud system make this determination by examining load statistics associated with the network service as discussed relative to . If the cloud system determines the network service is not under load the flow continues to where the cloud system forwards the request to the network service . If the cloud system determines at that the network service is under load the flow continues to where the cloud system returns the token to the client .

At the client resends the request for the network service including the token returned by the cloud system at . In some implementations the client may wait for a certain amount of time before resending the request. The client may also resend the request immediately upon receiving the token from the cloud system .

At the cloud system determines whether the network service is under load. For example the cloud system may determine that the network service is under load by examining the current statistics associated with the network service such as a number of pending requests an average response time for recent requests or any other suitable statistic. The cloud system may also determine that the network service is under load based on a flow control indication previously received from the network service as discussed relative to .

If the network service is not under load the flow continues to where the resubmitted request is prioritized. In some implementations prioritizing the request includes analyzing token data associated with the token to determine how to prioritize the request. For example the cloud system may examine the token data to determine a number of times the token has been resubmitted and prioritize the request accordingly. At the request is forwarded to the network service . Forwarding the request may occur immediately or may occur after a certain amount of time if other higher priority requests are already pending.

If the network service is determined to be under load at the flow continues to where the token is again returned to the client. In some implementations the token returned to the client at is identical to the token returned at . The token may also be updated to be different with each subsequent retransmission. The cloud system may also update the token data associated with the token in the database to reflect that the token has been resubmitted.

At a first request for the network service is received from a client. In some implementations the first request may be a request that has not been previously submitted by the client. In some cases the first request may be received over a network from the client. The first request may be received according to an API associated with the method or the associated network service.

At a load condition associated with the network service is evaluated the load condition indicating an availability of the network service to receive requests. In some implementations the load condition is evaluated according to the techniques previously described relative to . At a unique token associated with the request is returned to the client in response to the load condition indicating that the network service is not available to receive requests. The unique token may include a GUID to distinguish it from other tokens and may have a record associated with it stored in a database e.g. .

At a second request for the network service is received from the client where the second request includes at least a portion of the first request and the unique token. In some implementations the second request includes the first request in its entirety with the unique token inserted into the body of the request. The second request may also include a container message including a field for the first request and the unique token. In some implementations the second request may include any suitable portion of the first request or a reference to the first request.

At the load condition associated with the network service is evaluated. At the second request is prioritized based on the unique token in response to the load condition indicating that the network service is available to receive requests. In some implementations the prioritization is performed as described relative to

At statistics associated with the availability of the network service are analyzed. At the statistics are evaluated based at least in part on one or more rules the rules including thresholds associated with the availability of the network service. In some implementations the one or more rules are statically defined. The one or more rules may also be dynamically specified based on runtime conditions associated with the network service as discussed relative to . At an indication is received from the network service indicating the availability of the network service to receive requests.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. Environment or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. These processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the steps in these processes may take place simultaneously concurrently and or in different order than as shown. Moreover environment may use processes with additional steps fewer steps and or different steps so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain implementations and generally associated methods alterations and permutations of these implementations and methods will be apparent to those skilled in the art. Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

