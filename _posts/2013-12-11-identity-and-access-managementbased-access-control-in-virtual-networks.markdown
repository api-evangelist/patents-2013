---

title: Identity and access management-based access control in virtual networks
abstract: Methods and apparatus for providing identity and access management-based access control for connections between entities in virtual (overlay) network environments. At the encapsulation layer of the overlay network, an out-of-band connection creation process may be leveraged to enforce access control and thus allow or deny overlay network connections between sources and targets according to policies. For example, resources may be given identities, identified resources may assume roles, and policies may be defined for the roles that include permissions regarding establishing connections to other resources. When a given resource (the source) attempts to establish a connection to another resource (the target), role(s) may be determined, policies for the role(s) may be identified, and permission(s) checked to determine if a connection from the source to the target over the overlay network is to be allowed or denied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09438506&OS=09438506&RS=09438506
owner: Amazon Technologies, Inc.
number: 09438506
owner_city: Reno
owner_country: US
publication_date: 20131211
---
Many companies and other organizations operate computer networks that interconnect numerous computing systems to support their operations such as with the computing systems being co located e.g. as part of a local network or instead located in multiple distinct geographical locations e.g. connected via one or more private and or public intermediate networks . For example data centers housing significant numbers of interconnected computing systems have become commonplace such as private data centers that are operated by and on behalf of a single organization and public data centers that are operated by entities as businesses to provide computing resources to customers or clients. Some public data center operators provide network access power and secure installation facilities for computing hardware owned by various clients while other public data center operators provide full service facilities that also include hardware resources made available for use by their clients. However as the scale and scope of typical data centers has increased the tasks of provisioning administering and managing the physical computing resources have become increasingly complicated.

The advent of virtualization technologies for commodity hardware has provided benefits with respect to managing large scale computing resources for many clients with diverse needs allowing various computing resources to be efficiently and securely shared by multiple clients as well as facilitating the provisioning management and movement of computing resources among a set of physical nodes. For example virtualization technologies may allow a single physical computing machine to be shared among multiple users by providing each user with one or more virtual machines hosted by the single physical computing machine with each such virtual machine being a software simulation acting as a distinct logical computing system that provides users with the illusion that they are the sole operators and administrators of a given hardware computing resource while also providing application isolation and security among the various virtual machines. Furthermore some virtualization technologies are capable of providing virtual resources that span two or more physical resources such as a single virtual machine with multiple virtual processors that spans multiple distinct physical computing systems. As another example virtualization technologies may allow data storage hardware to be shared among multiple users by providing each user with a virtualized data store which may be distributed across multiple data storage devices with each such virtualized data store acting as a distinct logical data store that provides users with the illusion that they are the sole operators and administrators of the data storage resource. As another example a virtualized operating system can more easily be moved between physical nodes either by stopping and starting or even while running by copying memory pages over the network followed by a final snapshot and rerouting of network traffic using a process sometimes known as live migration. 

Altogether these trends have led to the advent of large scale utility style pay as you go computing environments for multiple customers or tenants that on the one hand share resources from a large common pool of computing and storage resources while on the other hand having their tenant specific resources act in a logically isolated fashion that maintains their privacy and security. Such systems are known as multi tenanted cloud computing environments or public clouds. In this usage the term public does not mean that tenant usage is not isolated and secure. Instead it means that members of the public may access logically isolated resources in the public clouds and in at least some cases pay for what they use for example on a per hour per gigabyte or per month basis.

While embodiments are described herein by way of example for several embodiments and illustrative drawings those skilled in the art will recognize that embodiments are not limited to the embodiments or drawings described. It should be understood that the drawings and detailed description thereto are not intended to limit embodiments to the particular form disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope as defined by the appended claims. The headings used herein are for organizational purposes only and are not meant to be used to limit the scope of the description or the claims. As used throughout this application the word may is used in a permissive sense i.e. meaning having the potential to rather than the mandatory sense i.e. meaning must . Similarly the words include including and includes mean including but not limited to.

Various embodiments of methods and apparatus for identity and access management based access control in virtual networks are described. More specifically embodiments of methods for providing identity and access management based control establishment and management of connections between entities in overlay network environments are described. These methods may be referred to herein as identity and access management based access control methods or simply as access control methods. An overlay network environment may for example use an encapsulation protocol technology over a network substrate for communications between entities. In an overlay network environment using encapsulation protocol technology over a network substrate network packets may be generated by a network packet source an entity that generates the network packets wrapped or encapsulated at an encapsulation layer implemented according to the encapsulation protocol technology to produce encapsulation protocol packets also referred to herein as encapsulation packets or network substrate packets .

The encapsulation packets may then be routed over the network substrate to a destination according to routing information for the encapsulation packets. The routing of the encapsulation packets over the network substrate according to the encapsulation information may be viewed as sending the encapsulation packets via overlay network routes or paths over the network substrate. At the destination the encapsulation layer removes the network packets from the encapsulation packets a process referred to as decapsulation and provides or sends the network packets to the network packet destination an entity that consumes the network packets .

In conventional physical network environments a first step used by a physical node seeking to send a packet to another IP address is to send an ARP address resolution protocol packet which is a broadcast packet logically received by all hosts on a subnet. In some implementations a network switch may cache the results of previous broadcasts and short circuit this process but the logical algorithm remains the same. The ARP packet serves as a resource discovery message an enquiry as to which physical node is the host corresponding to the desired IP address. In a well behaved network one and only one host the one responsible for that IP address will respond with its MAC media access control or layer address. Thereafter the sending host caches the mapping between the MAC address and the IP address in its local ARP table. Note that there are security risks with this standard method. For example the fact that there is no secure way to determine if the respondent to an ARP request is telling the truth is a limitation of many physical networks and ARP cache poisoning is a known network security attack vector.

In an overlay network environment the above process is mimicked in a way that is backwards compatible but that may reduce the security risks. In at least some implementations of an overlay network the ARP packet is not forwarded but is treated as a kind of application programming interface API call informing the encapsulation layer that the host wishes to communicate with another host at the given IP address. The encapsulation layer then does a lookup in a mapping service to determine if the host has the right to send packets to that destination and if there is a corresponding potential recipient node with the requested IP address that is configured to receive from the sender. If this mapping service lookup succeeds then the encapsulation layer returns a Virtual MAC VMAC address to the requesting host and thereafter treats the IP address that was looked up as being owned by the VMAC presented back to the overlay network host. In at least some implementations the hosts are not allowed to see or directly respond to ARP packets thereby providing improved network security.

In the overlay network environment from the perspective of the network packet source and the network packet destination it appears as if the two entities are connected via a physical network that forwards network packets in a conventional way. However in reality the network packets from the network packet source are encapsulated and sent over the network substrate for routing to the network packet destination with a potentially different addressing scheme routing scheme protocols and so on used in the overlay network environment to deliver the packets via the network substrate.

Each encapsulation packet may include one two or more network packets. In various embodiments the encapsulation protocol may be a standard network protocol such as IPv6 Internet Protocol version 6 or User Datagram Protocol UDP or alternatively may be a non standard custom or proprietary network protocol. The network packets that are encapsulated according to the encapsulation protocol may for example be Internet Protocol IP technology packets including but not limited to IPv4 Internet Protocol version 4 packets IPv6 packets Transmission Control Protocol TCP packets User Datagram Protocol UDP packets or Internet Control Message Protocol ICMP packets. However the network packets may be packets according to other IP protocols other standard protocols than IP protocols such as OSI TP4 or packets according to other non standard custom or proprietary protocols such as Novell IPX SPX or Xerox XNS .

Conventionally in overlay network environments connections between entities e.g. overlay network paths between network packet sources and network packet destinations are established by a device and or process at the encapsulation layer which for simplicity may be referred to herein as an encapsulation layer process. As an example of an encapsulation layer process the overlay network environment may include host systems each implementing an instance of a hypervisor also referred to as a virtual machine monitor VMM that performs encapsulation layer functionality on behalf of one or more virtual machine instances VMs on the respective host system to establish packet flows e.g. overlay network paths to other entities according to an overlay network encapsulation protocol. As another example an encapsulation layer process may be implemented as or on a coprocessor that intercepts some or all network packets from a network packet source and encapsulates the packets according to an encapsulation protocol for delivery over the network substrate. As yet another example an encapsulation layer process may be implemented as or on a device situated between from a networking perspective a VMM and the network substrate or situated between from a networking perspective an operating system on a physical hardware device and the network substrate. In general an instance of an encapsulation layer process may be implemented anywhere between a network packet source or destination and the network substrate to handle encapsulation decapsulation of the network packets according to the encapsulation protocol technology of the overlay network.

Generally establishing a packet flow between two entities on an overlay network may involve the VMM receiving a network packet from a local VM accessing a mapping service or utility or a local cache of mapping information to determine mapping information e.g. overlay address to substrate address mapping to a target which may be but is not necessarily another VM on the network encapsulating the network packet s according to the mapping information and sending the encapsulation packets onto the network substrate to be routed to the target according to the encapsulation information.

Conventionally the encapsulation layer may implement a simple network IP address access control method. For example in response to a query e.g. an ARP query by the source VMM if the mapping service has a valid target address and if the source address is allowed to send packets to that target address then the target address e.g. VMAC address is returned to the VMM the VMM encapsulates the network packet s according to the target address and sends the encapsulation packets onto the substrate network for routing to the target. In some implementations an overlay network may allow basic access rules to be written that involve groups of source and target systems and that may provide at the network layer only a rough notion of identity. For example a basic access rule may allow one or more servers in a group A to send packets to one or more servers in a group B using the TCP protocol and port . However conventionally the encapsulation layer does not enforce more general identity and access management based policies present in the surrounding security system and network environment e.g. a provider network environment when establishing connections between networking entities.

The process of establishing an overlay network path or connection between entities at the encapsulation layer as described above may be viewed as an out of band connection creation process. The source and target entities which may be but are not necessarily a source VM and a destination VM on a provider network are not aware of the overlay network or of the overlay network connections provided by the encapsulation layer. This out of band connection creation process at the encapsulation layer may be leveraged to enable the implementation of identity and access management based access control methods and apparatus at the encapsulation layer. In embodiments identities can be established and policies can be defined for entities principals and or resources on a network e.g. for VMs on a provider network or operating systems principals within a VM at the encapsulation layer. The policies may be enforced at the encapsulation layer e.g. by VMMs or other encapsulation layer processes according to the identities when evaluating and establishing connections between entities on the network.

Note that the source and target entities may communicate via connection oriented protocols such as TCP or via connectionless protocols such as UDP or ICMP. In either case the encapsulation layer may generally perform an out of band connection setup in which it may be determined that the source entity may send network packets to the target entity. Thus even for connectionless protocols the encapsulation layer may establish an overlay network connection or path between two entities. Thus in embodiments the encapsulation layer during the out of band connection setup for both connection oriented and connectionless network protocols may include evaluation of identity and access management policies for principals and resources as part of a decision as to whether to allow or deny network communications across the overlay network between the two entities.

In at least some embodiments a VMM on a host system is aware of the private IP addresses of the VMs resource instances on the respective host system. In at least some embodiments identities for the resource instances or other resource identifiers as described below may be associated with the private IP address information so that the VMMs are also aware of or can discover the identities of the logically local or private resource instances.

Note that private IP addresses as used herein refer to the internal network addresses of resource instances in the provider network. Network traffic originating outside the provider network is not directly routed to private IP addresses instead the traffic uses public IP addresses that are mapped to private IP addresses of the resource instances. Public IP addresses as used herein are Internet routable network addresses of the provider network that are assigned to resource instances on the provider network either by the service provider or by the client. Traffic routed to a public IP address of the provider network may be translated for example via 1 1 network address translation NAT and forwarded to a respective private IP address of a resource instance on the provider network. Note that a given private IP address as used herein is not necessarily mapped to a public IP address.

Private IP addresses as used herein may generally be but are not necessarily non Internet routable IP addresses e.g. RFC 1918 addresses that are for example only routable within the provider network or a subnetwork thereof or within a client s virtual private network implementation on the provider network. However in some implementations the private IP addresses may themselves be Internet routable addresses. In other words a client may use Internet routable addresses or non routable addresses for the client s resource instances on the provider network and within the client s virtual private network implementation on the provider network. In at least some embodiments a client may control the access and addressing of resource instances within the client s virtual private network by assigning private IP addresses to particular resource instances according to the client s private addressing scheme used on the private network and or by mapping or remapping public IP addresses assigned to the client by the service provider to the client s private IP addresses or ranges thereof. Note that at least some private IP addresses of resource instances in a given virtual private network are not necessarily mapped to public IP addresses.

As indicated at an encapsulation layer process e.g. a VMM obtains a network packet from a source e.g. a VM on the host system . The network packet may indicate a target for example the packet may include a target address e.g. an IP address of a client resource instance . As indicated at the encapsulation layer process may obtain overlay network mapping information for the target. In at least some embodiments the overlay network information may include at least an IP address of an encapsulation layer destination for the packet on the substrate network e.g. a VMM that fronts the target VM . In at least some embodiments the encapsulation layer process may access a mapping service to obtain the mapping information. However in some embodiments the mapping information for the target once obtained from a mapping service may thereafter be obtained from a local cache. An example mapping service is further described below for example in reference to .

As indicated at applicable policy may be determined according to the identities of the source and or target. As indicated at the source and target may be evaluated according to the policy to determine if a connection from the source to the target is allowed. In at least some embodiments elements and may be performed by an access control service on the network. In at least some embodiments the encapsulation layer process communicates with the access control service via an application programming interface API to the service to perform elements and .

At if a connection from the source to the target is allowed according to the policy then a connection e.g. an overlay network path may be created from the source to the target according to the policy as indicated at and network packets may be sent from the source to the target via the overlay network path as indicated at . In some embodiments creating an overlay network path is performed by encapsulating the network packets according to an encapsulation protocol of the overlay network in which the encapsulation metadata includes information for routing the packet to an overlay network destination at the encapsulation layer for example another VMM on the provider network. At the encapsulation layer destination the encapsulation is removed from the network packet and the original network packet is delivered to the target e.g. a VM on the respective host system .

At if a connection from the source to the target is not allowed according to the policy then the network packet may be ignored and discarded by the encapsulation layer process as indicated at . In some embodiments the encapsulation layer process e.g. a VMM does not notify the source e.g. a source VM on the respective host system that the connection was not allowed. In some embodiments the encapsulation layer process may log or record connection requests that are not allowed for reporting purposes for example to be reported to a client or customer that owns the respective VMs. However in some embodiments the encapsulation layer process may notify the source that the connection was not allowed. For example a logical out of band security protocol such as Generic Security Service Application Program Interface GSSAPI also GSS API may be utilized by the VMM to inform the source VM of an access denied message in a way that does not break compatibility with existing security protocols utilized by the VM and its operating system.

In at least some embodiments elements through may only be performed for a first network packet in a given packet flow between a source and a target. Subsequent network packets in the given packet flow or logical connection may be sent to the target via the overlay network encapsulation protocol as indicated at without evaluating the policy for each network packet.

Embodiments of the methods and apparatus for access control in virtual networks may for example be implemented in the context of a service provider that provides to clients or customers via an intermediate network such as the Internet virtualized resources e.g. virtualized computing and storage resources implemented on a provider network of a service provider as illustrated in . and the section titled Example provider network environments further illustrate and describe example service provider network environments in which embodiments of the methods and apparatus as described herein may be implemented. Referring to in at least some embodiments at least some of the resources provided to clients of the service provider via a provider network A may be virtualized computing resources implemented on multi tenant hardware that is shared with other client s and or on hardware dedicated to the particular client. Each virtualized computing resource may be referred to as a resource instance . Resource instances may for example be rented or leased to clients or tenants of the service provider. For example clients of the service provider via external client device s coupled to the provider network A via an intermediate network such as the Internet may access one or more services of the provider network A via APIs to the services to obtain and configure resource instances and to establish and manage virtual network configurations that include the resource instances for example clients virtual private networks as illustrated in .

As shown in in some implementations the service provider may have two or more provider networks provider networks A and B are shown which may be but are not necessarily implemented in different possibly geographically distant data centers. Two provider networks may for example be coupled by one or more direct communications links for example fiber optic connections. Instead or in addition two provider networks may communicate over the intermediate network .

At least some of the resource instances may for example be implemented according to hardware virtualization technology that enables multiple operating systems to run concurrently on a host computer i.e. as virtual machines VMs on the hosts . A hypervisor or virtual machine monitor VMM on a host presents the VMs on the host with a virtual platform and monitors the execution of the VMs . Each VM may be provided with one or more private IP addresses the VMM on a respective host may be aware of the private IP addresses of the VMs on the host . For further information on hardware virtualization technology see .

The provider network A may include a network substrate that includes networking devices such as routers switches network address translators NATs and so on as well as the physical connections among the devices. The VMMs along with other devices and processes on the network substrate may enable the creation of an overlay network which may also be referred to as a software defined network or SDN on the provider network . Creation and management of the overlay network may be performed via the control plane of the provider network for example via calls to one or more APIs of services or other process at the control plane. In at least some embodiments the VMMs and other devices or processes may use encapsulation protocol technology to encapsulate and route network packets e.g. client IP packets over the network substrate between client resource instances on different hosts within the provider network A to other devices or subnetworks on the provider network such as network device or to other devices or client resource instances on other provider networks . The encapsulation protocol technology may be used on network substrate to route encapsulated packets network substrate packets between endpoints on the network substrate or to endpoints on other provider networks via paths or routes. The encapsulation protocol technology may be viewed as providing a virtual network topology with potentially a different addressing and subnetting scheme overlaid on the network substrate thus the term overlay network. In at least some embodiments the encapsulation protocol technology may include a mapping service that maintains a mapping directory that maps IP overlay addresses IP addresses as utilized by the clients or customers of the provider network which may be isolated from the topologies of other clients or customers on the provider network to substrate IP addresses IP addresses utilized by the underlying networking infrastructure that are not generally exposed to clients or customers of the provider network and that may be accessed by various processes on the provider network for routing packets between endpoints on the network substrate . For an example implementation of and further information about a virtual network technology that uses an encapsulation protocol to implement an overlay network on a network substrate see .

Client resource instances on a host may communicate with other client resource instances on the same host or on different hosts according to connection oriented protocols such as Transmission Control Protocol TCP and or according to connectionless protocols such as User Datagram Protocol UDP or Internet Control Message Protocol ICMP . However the client packets are encapsulated according to an encapsulation protocol by the sending VMM sent over the network substrate as network substrate packets according to the encapsulation protocol and de encapsulated by the receiving VMM . In at least some embodiments the encapsulation protocol used on the network substrate may be a connectionless protocol. However the encapsulation protocol may be a connection oriented protocol in some embodiments. VMM on a host upon receiving a client packet e.g. a TCP or UDP packet from a client resource instance on the host and targeted at a network address of another client resource instance encapsulates or tags the client packet according to the encapsulation protocol and sends the network substrate packet which may also be referred to herein as an encapsulation packet onto the network substrate for delivery. The network substrate packet may then be routed to another VMM via the network substrate according to information in the encapsulation protocol packet header. The other VMM strips the encapsulation data from the client packet and delivers the client packet e.g. a TCP or UDP packet to the appropriate VM on the host that implements the target resource instance . Note that in some implementations two or more client packets may be encapsulated in a single network substrate packet to increase efficiency or for other reasons. Generally the two or more client packets may be directed to the same target e.g. to the same resource instance . However in some implementations two or more client packets directed to different targets e.g. different resource instances may be encapsulated together in a single network substrate packet as long as the network substrate target address e.g. a VMM on a particular host for the client packets is the same.

In at least some embodiments a VMM upon receiving a network packet directed to a target from a resource instance on the respective host accesses a mapping service of the provider network that maps IP overlay addresses to substrate IP addresses for routing the network packet to an appropriate endpoint on the network substrate . For example the target may be another resource instance and the endpoint may be another VMM on the network substrate that hosts the target resource instance. As another example the target may be an external device and the endpoint may be a network device .

In embodiments of the methods and apparatus for access control in virtual networks in addition to accessing the mapping service to determine an IP overlay address for the target the VMM may also communicate with an access control service of the provider network to determine if there is a policy or policies associated with the source resource instance and or with the target of the network packet and if so determine if the policy s allows or disallows a connection from the source resource instance to the target. The VMM only completes the connection if the access control service indicates that the connection is allowed. In at least some embodiments a policy may also specify one or more conditions for a connection for example allowed port numbers for connections to a target and or allowed network protocols for communicating with a target. As another example in at least some embodiments clients may define arbitrary metadata tags and associate the metadata tags with particular resource instances . As an example of using these metadata tags in policies a condition of a policy may be specified that only allows network traffic between two resource instances that both have the same metadata tag. For example a policy may specify that network traffic will only be allowed if both resource instances have the tag Accounting Department. 

In at least some embodiments completing the connection involves the VMM encapsulating the network packet and sending the encapsulation packet onto the network substrate and thus establishing a path over the network substrate between the source resource instance and the target. If the access control service indicates that the connection is not allowed the VMM does not complete a connection from the source to the target. In other words the VMM does not encapsulate the network packet and send the encapsulation packet onto the network substrate and thus no path is established over the network substrate between the source resource instance and the target. Note that in some embodiments the functionalities of the mapping service and the access control service may be combined in a single service on the provider network .

In at least some embodiments identities which may be referred to as principals may be assigned to or otherwise associated with resource instances and the principals may be used in identifying and enforcing policies for the resource instances . A principal may for example be a user group role or other entity in an identity and access management system or environment. In other words there may be different types of principals including but not limited to user group and role principal types. In at least some embodiments in addition to assigning principals to resource instances and using the principals in policy identification and enforcement other properties or conditions of resource instances such as the name of an instance within a hierarchical namespace user defined metadata tags IP addresses account identifiers and so on may be used to identify resource instances identify policies for resource instances and enforce the identified policies. Collectively these various methods that may be used to identify resource instances e.g. principals names metadata tags account identifiers IP addresses etc. may be referred to as resource identifiers.

Thus generalizing various types of resource identifiers that are associated with resource instances may be used to identify and enforce policies for the resource instances . As a particular example in at least some embodiments at least some policies enforced by the access control service may be defined for and associated with roles that resource instances may assume note that a role may be a type of principal in an identity and access management environment rather than with the individual resource instances . In at least some embodiments a client may define one or more roles for resource instances in the client s virtual private network implementation on the provider network and define policies for each of the one or more roles. One or more of the client s resource instances may then assume a role or roles.

While the role principal type is generally used hereinafter as an example in describing embodiments of the methods and apparatus for access control in virtual networks it is to be noted that the methods and apparatus for access control as described herein may be applied with other types of principals e.g. users groups etc. and or to other types of resource identifiers names metadata tags account identifiers IP addresses etc. .

A policy for a role may for example indicate one or more other network groups or entities to which a resource instance in that role may initiate communications. For example a policy for a role may indicate one or more subnets on the provider network to which a client s resource instances that assume that role may initiate communications each subnet including one or more other resource instances of the respective client. For more information on subnets in a provider network see . Alternatively a policy for a role may indicate one or more other network groups or entities to which a resource instance in the role may not initiate communications. A policy for a role may also indicate one or more other network groups or entities that are not allowed to initiate communications with resource instances in the role. In at least some embodiments a policy may also specify one or more conditions for a connection for example allowed port numbers for connections from resource instances in a role to a target and or allowed network protocols for the connections. As another example metadata tags associated with resource instances may be used in conditions of a policy. As an example of using these metadata tags in policies a condition of a policy may be specified that only allows network traffic between two resource instances that both have the same metadata tag. provide non limiting examples of a general format for policies. provide non limiting examples of policies that may be used in at least some embodiments.

In at least some embodiments the VMM in addition to being aware of the private IP addresses of the resource instances on the host may also be aware of or be able to discover roles to which the resource instances on the host have assumed. Upon determining a role that the resource instance has assumed the VMM may communicate with the access control service to determine if there is a policy associated with the role and if so if a connection is allowed to the target indicated by the network packet. If there is a policy associated with the role then the access control service may evaluate the policy to determine if a connection is allowed from the source resource instance to the target and inform the VMM as to whether the connection is or is not allowed.

In at least some embodiments a target may also be associated with a role. For example the target may be another of the client s resource instances on a different host and thus fronted by a different VMM and the client may have defined a role with a policy and the target resource instance may have assumed the role. In at least some embodiments in addition to evaluating the policy for the role that the source resource instance has assumed to determine if a connection from the source to a target is allowed the policy of a role which the target has assumed may also be evaluated to determine if the connection from the source to the target is to be allowed. For example if the policy associated with the target s role indicates that connections are not allowed to resource instances in the role from a subnet on which the source resource instance is located then a connection from the source to the target is not allowed even if the policy associated with the source indicates that a connection to the target would be allowed. As another example the policy of the target s role may indicate that connections are allowed from or not allowed from resource instances in particular other roles. In other words and stated more generally if there are policies associated with both the source and the target then both policies must be in agreement before a connection is allowed.

While the above generally describes providing access control between a source resource instance of a client and another resource instance of the client within a virtual private network of the client on a provider network over the network substrate note that embodiments may be used to provide access control between a source resource instance of a client on one provider network A when trying to connect to a resource of the client on another provider network B via a direct communications link .

In addition at least some embodiments of the access control methods may provide mechanisms for controlling access from sources that are outside a client s virtual private network implementation on the provider network to resource instances within the client s virtual private network. For example referring to an external client device may want to send network packets to a client s resource instance the target on the provider network . The external device s network packet s may be received at a network device coupled to network substrate . In at least some embodiments the external device and the network device may utilize an in band network security protocol to establish an identity for the external device on the provider network . For example in at least some embodiments a network protocol according to Generic Security Service Application Program Interface GSSAPI also GSS API may be used to establish a secure identity i.e. a principal associated with the external device on the provider network . The network device may then use the external device s established identity and or the identity of the target a resource instance to evaluate policy for a connection between the external device and the target over the overlay network. If the connection is not allowed according to policy then the network packets may be dropped. If the connection is allowed then the network device may encapsulate the network packets according to the encapsulation protocol and send the encapsulation packets onto the network substrate for delivery to the target resource instance via its VMM .

As an example an external device may establish an identity with network device and send a network packet directed to a particular resource instance or to a range of addresses for a client s resource instances . After establishing that the address es are valid via the mapping service the network device may communicate with access control service to determine if there is a policy associated with the resource instance s . If there is a policy then the policy may be evaluated to determine if the external device the source has permission to communicate with the internal resource instance s the target . For example a policy associated with the target resource instance s or with a role which the resource instance s have assumed may allow access to the resource instance s or to resource instance s in the role from certain IP addresses from certain ranges of IP addresses and or from certain principals as established via a network protocol such as GSSAPI. Instead or in addition the policy may disallow access from certain principals IP addresses and or range s of IP addresses. If the policy allows the access then a connection from the network device to the target resource instance s i.e. an overlay network path such as path E in may be established.

In addition at least some embodiments of the access control methods may provide similar mechanisms for controlling accesses initiated from resource instances within a client s virtual private network to targets that are outside the client s virtual private network using policies that are associated with the client s resource instances or with roles which the client s resource instances have assumed. In addition policies associated with the targets may be evaluated when determining whether to allow a connection from within the client s virtual private network to targets outside the client s virtual private network. A target outside the client s virtual private network may for example be an external client device a resource instance on another virtual private network of the client or of another client or a network device or some other device on the provider network .

In at least some embodiments as shown in an access control service may include a data store for storing clients access control information used by the service for example information related to clients principals roles and policies associated with the clients resource instances . The access control service may provide an API B that allows clients to view create modify delete and otherwise manage the clients information on data store . The access control service may also provide an API A that allows processes or devices e.g. VMMs on hosts network device s other services etc. to request policy evaluations for actions initiated by a client s named entities on the provider network for example for connection requests to target entities initiated by a client s resource instances . The access control service may include a policy evaluation module that receives policy evaluation requests via API A evaluates the requests according to relevant access control information on data store and responds to the initiator of the request e.g. to a VMM or other process or device on the provider network with results of the policy evaluation.

As previously described resource identifiers may be associated with resource instances and may be used by the access control service in identifying and enforcing policies for the resource instances . A resource identifier may for example be a principal a resource name a metadata tag an account identifier an IP address or in general any property or condition of resource instances . A principal may for example be a user group role or other entity in an identity and access management environment. Policies may be associated with resource instances according to one or more of the resource identifiers. In at least some embodiments policies may be associated with individual resource instances according to unique attributes or identifiers such as name based resource identifiers or user identities according to the user principal type.

In at least some embodiments a name based resource identifier may uniquely identify a resource within a namespace. The following is a non limiting example of a general format for a name based resource identifier that may be used in at least some embodiments 

In at least some embodiments instead of or in addition to associating policies with individual resource instances via unique attributes or identifiers such as name based resource identifiers policies may be associated with groups collections or categories that may include two or more entities e.g. resource instances . As previously mentioned principals may include a group principal type and a role principal type. As used herein a group is a relatively static collection of resources or principals e.g. resource instances a client or other entity defines a group and may explicitly assign members e.g. resources or principals to the group or remove members from the group or alternatively may explicitly define group membership. In at least some embodiments at least some of the policies enforced by the access control service may be defined for and associated with groups rather than with individual resources or other principal types. In at least some embodiments defining a group may involve creating and maintaining two policies one policy that identifies which entities resources or principals are in the group and another policy that specifies permissions associated with this group. However groups may be defined in other ways.

In at least some embodiments the access control service may also allow roles to be defined for a client s resources or principals on the provider network and may allow resources and principals to assume the roles. A role differs from a group in that whereas group membership is defined by a client and is relatively static entities e.g. resources or principals may dynamically assume a role. Role membership is not explicitly defined instead one or more properties or conditions may be defined for the role that may be dynamically evaluated for an entity e.g. a principal or resource to determine if the entity either belongs in or may assume the role. Thus a resource instance for example may be allowed to assume a role based on a dynamic evaluation of one or more properties of the resource instance . In at least some embodiments at least some of the policies enforced by the access control service may be defined for and associated with roles rather than with individual resources user or group identities or other principal types. Thus resources and principals may assume roles and roles may have policies. Separating resources and principals from roles may provide flexibility and ease of management because one two or more trusted entities e.g. resources or principals may dynamically assume a role or roles based upon a dynamic evaluation of the trusted entities rather than an explicit and static assignment to a group. In at least some embodiments defining a role may involve creating and maintaining two policies one policy that identifies properties and conditions that are evaluated for entities to determine if the entities may assume the role and another policy that specifies permissions associated with this role. However roles may be defined in other ways.

A policy may include one two or more statements that each may be referred to as a permission for the entity associated with the policy e.g. for an associated role or other principal . Each permission may specify an effect one or more actions and either one or more resources on which the action s may be performed if allowed or not performed if denied as shown in policy A or one or more principals that may be allowed or denied permission to perform the action s as shown in policy B. A permission may also but does not necessarily include one or more conditions.

In policy A the specified resources may indicate which resource s on which the action s may be performed if allowed or not performed if denied . In other words the entity e.g. principal or resource with which policy A is associated is either allowed or denied permission to perform the action s on the indicated resource s . In at least some embodiments the indicated resource s may be entities e.g. principals or resources on a provider network including but not limited to users groups subnets resource instances roles services and so on. In at least some embodiments the resources may be specified by resource identifiers as described above. In at least some embodiments wildcards may be used in a resource identifier. For example in a name based resource identifier an asterisk or other character or symbol may be used as a wild card as in 

where the asterisk indicates that all named resources of this namespace owner resource type are covered by this permission statement.

In policy B the specified principal s may indicate which principal s may be allowed or denied permission to perform the action s . In other words the indicated principal s are allowed or denied permission to perform the action s on the entity e.g. principal or resource with which policy B. In at least some embodiments the indicated principals s may be users groups subnets resource instances roles services and so on. In at least some embodiments the resources may be specified by resource identifiers as described above.

The specified one or more actions indicate what actions regarding the specified resource s or principal s this particular permission applies to. As an example an action for a policy A may be open connection which if allowed in the effect field would allow resource instances associated with this policy A e.g. by assuming a role associated with this policy to open connections to the resource s specified by this permission. As another example an action for a policy B may be accept connection which if allowed in the effect field would allow connections to be accepted from principals specified by this permission for resource instance s associated with this policy B e.g. by assuming a role associated with this policy .

The effect specifies what happens when an entity requests access according to the specified action s . The effect for a particular permission may for example be allow or deny . In at least some implementations deny may be the default and thus access may be denied to an entity or resource unless allow is specified as the effect. In at least some embodiments deny overrides allow when evaluating a policy or policies that is if a particular resource or principal is granted access to an action via one permission in a policy that specifies allow but denied access to the action by another permission in the policy or in another policy that specifies deny for the action then the result of the evaluation is to deny the access.

The conditions if present may indicate one or more additional conditions on the specified action s . As just one example a condition on an open connection action may be a particular port number to which a connection is allowed or a particular network protocol that can or cannot be used on the connection. For example a connection may only be allowed to a port N on a specified resource and only UDP packet flows may be allowed to the specified resource. As other examples conditions may be evaluated for other properties of a resource such as the resource name in a global namespace or one or more user defined metadata tags of the resource. For example a connection may be allowed for or denied to a specified resource or resources for other resources with particular resource name s or for other resources with particular metadata tag s .

Using these methods for defining policies for various client resources to control access to various resources and for specifying permissions for particular actions associated with particular resources a client may develop complex thorough and selective access control for the client s resources e.g. resources on a client s virtual private network on a provider network. As just one example a policy may be defined for a role or group that includes a permission that allows or denies particular actions to be performed for all resources that assume the role or join the group e.g. the open connection action to specified resource s but that denies or allows particular ones of the actions for particular ones of the resources.

Policies A and B define particular permissions for principals and resources respectively. Policy A includes a permission that allows open connection to specified resource s optionally according to one or more conditions for the principal s associated with policy A. Policy A may also include a permission that denies open connection to specified resource s for the principal s associated with policy A. A specified resource may for example be a resource instance on the provider network a role a subnet or some other resource. Note that in some cases a specified resource in policy A may be another principal. Policy B includes a permission that allows accept connection from specified principal s optionally according to one or more conditions for the resources that are associated with policy B. Policy B may also include a permission that denies accept connection from specified principal s for the resources associated with policy B. A specified principal may for example be another resource instance a role a subnet a user or some other resource.

As previously noted in at least some embodiments principals and resources may assume roles and policies may be associated with the roles. Using the example policies in policy A may be associated with a role A and policy B may be associated with a role B. A principal that assumes role A may be allowed to open a connection over the overlay network or alternatively may be denied permission to open a connection to resource s as specified by the permissions in policy A. In addition the specified resource s may include or be specified by role s . For example the first allow permission of policy A may specify that principals that assume role A are allowed to open connections to all resources that assume role B unless a particular one of the resources is indicated in the second permission of policy A which denies permission to open connections to specified resource s .

In at least some embodiments the policy associated with the source e.g. a principal and target e.g. a resource may both be evaluated when for example evaluating a connection request. Using example roles A and B associated with the policies in respectively a principal that assumes role A may be allowed to open a connection to a resource instance that assumes role B according to policy A for role A but if the policy evaluation determines that policy B for role B denies or does not allow resources in role B to accept connections from principals in role A or from a particular principal then the connection request is denied.

The conditions as specified in policies A and B if present may indicate one or more additional conditions on the open connection or accept connection actions respectively. For example a condition on the open connection and or on the accept connection actions may be a particular port number or port range to which a connection is allowed. As another example a condition may be a particular network protocol that can or cannot be used on the connection. As other examples conditions may be evaluated for other properties of a resource or principal such as the resource name in a global namespace or one or more user defined metadata tags of the resource or principal. For example a condition may indicate that a connection may be allowed for or denied to a specified resource or resources for other resources with particular resource name s or for other resources with particular metadata tag s .

In at least some embodiments a client resource instance A on client virtual private network may send a network packet addressed to another client resource instance B on client virtual private network . VMM A may receive the network packet and access a mapping service or utility or a local cache of mapping information to determine mapping information e.g. private address to public address mapping to the target resource instance B. In addition VMM A may request a policy evaluation for the source and or target of the network packet from access control service to determine if client resource instance A is allowed to open communications with client resource instance B. Access control service may evaluate the policy evaluation request to determine if one or both of the resource instances are in roles. For example client resource instance A may have assumed role A as indicated in and client resource instance B may have assumed role B as indicated in . Once access control service determines the role s of the resource instance s the service may evaluate the request according to the policy s for the role s . If the access control service determines that the policy s allow the connection then the VMM A is notified that the connection is allowed. The VMM A may then open a path over network substrate to VMM B as indicated by the mapping service and begin to encapsulate network packet s from resource instance A and send the encapsulation packets to VMM B via the path . At VMM B the network packets are de encapsulated and delivered to client resource instance B. If the access control service determines that the policy s deny the connection in at least some embodiments VMM A simply drops the network packet s from resource instance A and does not inform resource instance A that the connection was not allowed. However in some embodiments VMM A or some other service on the provider network such as access control service may log denied connection requests and possibly also allowed connection requests so that a client can obtain and view information about its overlay network configuration and performance including information about connection denials according to the client s policies.

In at least some embodiments a client resource instance A on client virtual private network may send a network packet addressed to an endpoint that is not on client virtual private network . The endpoint may for example be an endpoint on provider network such as a resource instance VM on a host machine or an endpoint on an external network. VMM A may receive the network packet and access a mapping service or utility or a local cache of mapping information to determine mapping information e.g. private address to public address mapping to a network device on provider network that serves as a bridge between endpoint and the overlay network on network substrate . In addition VMM A may request a policy evaluation for the source and or target of the network packet from access control service to determine if client resource instance A is allowed to open communications with endpoint . For example access control service may evaluate the policy evaluation request to determine if resource instance A is in a role. For example client resource instance A may have assumed role A as indicated in . Once access control service determines a role for resource instance A the service may evaluate the request according to the policy for the role. Note that endpoint may also have a policy associated with it and in evaluating a connection request from client resource instance A to endpoint to determine if the connection is allowed the policy for endpoint may also be considered. If the access control service determines that the policy allows the connection from resource instance A to endpoint via network device then the VMM A is notified that the connection is allowed. The VMM A may then open a path over network substrate to network device and begin to encapsulate network packet s from resource instance A and send the encapsulation packets to network device via the path . At network device the network packets are de encapsulated and sent as a network protocol data flow to endpoint . For some network protocols network device may establish a network protocol connection e.g. a TCP connection to endpoint over which network protocol traffic may flow. If the access control service determines that the policy s deny the connection in at least some embodiments VMM A simply drops the network packet s from resource instance A and does not inform resource instance A that the connection was not allowed.

The above describes evaluating policy for connections initiated from a source client resource instance A on a client virtual private network via an overlay network on network substrate to a target endpoint external to the client virtual private network . However embodiments of the methods and apparatus for providing access control may also be applied when an endpoint external to the client virtual private network is the source and a client resource instance is the target. The endpoint may for example be on another virtual private network of provider network or may be an endpoint external to the provider network . The endpoint s network packet s may be received at a network device coupled to network substrate . In at least some embodiments the endpoint and the network device may utilize an in band network security protocol to establish an identity for the endpoint on the provider network . For example in at least some embodiments a network protocol according to Generic Security Service Application Program Interface GSSAPI also GSS API may be used to establish a secure identify for the endpoint on provider network . The network device may then use the endpoint s established identity and or the identity of the target resource instance A to determine and evaluate policy for opening a connection between the endpoint and the target resource instance A over the overlay network on network substrate . If the connection is not allowed according to the policy then the network packets may be dropped. If the connection is allowed then the network device may encapsulate the network packets according to the encapsulation protocol and send the encapsulation packets via path over the network substrate to VMM A. At VMM A the network packets are de encapsulated for delivery to the target resource instance A.

As indicated at the encapsulation layer process e.g. a VMM obtains a network packet from a source e.g. a client resource instance on the host system . The network packet may indicate a target which may be but is not necessarily another client resource instance on the provider network . In at least some embodiments the VMM may access a mapping service or a local cache to obtain overlay network mapping information for the indicated target. As indicated at an identity of the source may be determined as the principal. For example the identity may be specified as a resource identifier assigned to the client resource instance by the client as described in the section titled Access control service. In at least some embodiments in addition to being aware of the private IP addresses of the VMs on the host the VMM may also be aware of other possible resource identifiers of the client resource instances on the host. In at least some embodiments an identity for the target may also be determined.

As indicated at a role which the principal has assumed may be determined. As indicated at a policy for the role may be identified. As indicated at the connection request may be evaluated according to the policy. To perform elements through for example the VMM may communicate information about the principal e.g. identity information such as one or more resource identifiers of the source resource instance and the target to an access control service as illustrated in . The access control service may access policies for example policies for roles that may be assumed by principals and resources as illustrated in to determine a particular role that the principal the source resource instance has assumed. In at least some embodiments the identity information for the principal that is provided to the access control service may include or may be used to determine an identity of the client associated with the principal. In at least some embodiments a role for the target may also be determined by the access control service. Once the role s of the principal the source and or target are determined the connection request may be evaluated by the access control service according to the policy of the role s to determine if the connection from the source to the target is allowed or denied. and the section titled Access control service give examples of policies and evaluations that may be performed to determine if a connection is to be allowed from a source to a target. Once the access control service determines whether the connection is allowed or denied the service informs the encapsulation layer process e.g. the VMM .

At if the connection is allowed then the encapsulation layer process e.g. VMM may encapsulate the network packet s received from the source e.g. a source resource instance in a client s virtual private network and send the encapsulated packets on the overlay network to an encapsulation layer destination e.g. another VMM as indicated at . At the destination the network packet s may be removed from the encapsulation packets and sent to the target e.g. a target resource instance in the client s virtual private network . At if the connection is denied then the network packet s may be dropped by the encapsulation layer process. However in some embodiments denied connection requests may be logged for reporting purposes.

In at least some embodiments elements through may only be performed for a first network packet in a given packet flow between a source and a target. Subsequent network packets in the given packet flow may be sent to the target via the overlay network encapsulation protocol as indicated at without performing a policy evaluation. In addition in some embodiments information about policy evaluations received from an access control service may be locally cached e.g. at a VMM and used in future policy evaluations.

While the method of is directed to an access control method for overlay network connections in which principals assume roles roles have policies and access is allowed or denied based upon evaluation of the policies for the roles note that policies may be associated with other types of principals e.g. users groups etc. and or with other types of resource identifiers names metadata tags account identifiers IP addresses etc. and that a similar method may be applied using these policies rather than or in addition to policies for roles.

The above primarily describes access control methods and apparatus that are implemented at the encapsulation layer for example by virtual machine monitors VMMs on host devices that monitor virtual machines VMs on the respective host devices. However some embodiments of access control methods and apparatus may be extended to support operating system process level identity and access management based access control on the virtual machines and thus at the client or user process level rather than at the encapsulation layer the VMMs . As mentioned the VMs implement client resource instances. A client resource instance may be implemented according to any of various operating system technologies according to the needs or requirements of the respective client s virtual private network implementation on the provider network. In at least some embodiments to extend access control methods to the client or user process level an agent process or daemon or device driver may be implemented at the operating system level on the VMs. The agent may facilitate mapping identities principals or more generally resource identifiers from and to the process level on the VMs and may facilitate communicating with an access control service as described herein to allow or deny connections at the process level on the VMs according to policies for the process level resources.

In at least some embodiments an encapsulation layer process e.g. a VMM on a host system that encapsulates network packets from sources e.g. VMs on a host system for routing via the overlay network to target endpoints has or can obtain identity information about the processes e.g. operating systems or applications on VMs that are the sources of the network packets. In at least some embodiments in addition to or instead of determining if a connection from a source e.g. a VM to a target endpoint over the overlay network is to be allowed or denied based on an evaluation of related policy as described herein the encapsulation layer process e.g. a VMM may embed or attach identity related information for the source as metadata to the encapsulation packets. The identity related information may for example include one or more of principal information role information group information and so on for the respective source endpoint. The identity related information may also include security authentication information such as a cryptographic signature based on for example a shared secret that may be used for example to authenticate the identity information. Tagging the encapsulation packets with identity related information relevant to policy decisions may provide more context for the target when making policy decisions about connections and may allow the target to make policy decisions about connections using the provided information without having to retrieve the information from other sources such as databases.

As an example of how the identity related information with which encapsulation packets are tagged may be used the target or an encapsulation layer process at the target may use the identity related information in received encapsulation packets to make access decisions based on policies even in cases where a connection from the source to the target endpoint is allowed based on a source side policy evaluation. For example the target endpoint that the source of a network packet wants to access may be virtualized storage provided via a storage virtualization service on the provider network as illustrated in . The storage virtualization service may use the identity related information with which an encapsulation packet is tagged to perform a policy evaluation based on the identity of the source to determine if the source is allowed or disallowed access to a particular storage resource based on the identity of the source even in cases where the source e.g. an operating system or application on a client s resource instance is not aware of the access control method signing its requests and so on.

As another example of how the identity related information with which encapsulation packets are tagged may be used for connection oriented network protocols such as TCP the source side encapsulation layer process e.g. a VMM may tag the encapsulation packets with the identity information and participate in an authentication exchange for example according to Generic Security Service Application Program Interface GSSAPI with the target endpoint on behalf of the source without the source s knowledge or direct participation.

Embodiments of access control methods and apparatus have primarily been described in which an encapsulation layer process e.g. a VMM on a device e.g. a host device in a provider network accesses an access control service implemented on one or more devices on the provider network for policy evaluations. In some embodiments instead of or in addition to accessing an access control service for policy evaluations a device may maintain a local cache of policy information. The encapsulation layer process or another process on the device may be configured to locally perform at least some policy evaluations according to the local cache of policy information. In some embodiments the encapsulation layer process may be configured to check the local cache of policy information to determine if a connection request from a principal can be locally evaluated according to cached policies and if so perform the local policy evaluation. If the policy evaluation cannot be locally performed according to the local cache then the access control service may be accessed to perform the evaluation.

This section describes example provider network environments in which embodiments of access control methods and apparatus as described herein may be implemented. However these example provider network environments are not intended to be limiting.

Conventionally the provider network via the virtualization services may allow a client of the service provider e.g. a client that operates client network A to dynamically associate at least some public IP addresses assigned or allocated to the client with particular resource instances assigned to the client. The provider network may also allow the client to remap a public IP address previously mapped to one virtualized computing resource instance allocated to the client to another virtualized computing resource instance that is also allocated to the client. Using the virtualized computing resource instances and public IP addresses provided by the service provider a client of the service provider such as the operator of client network A may for example implement client specific applications and present the client s applications on an intermediate network such as the Internet. Other network entities on the intermediate network may then generate traffic to a destination public IP address published by the client network A the traffic is routed to the service provider data center and at the data center is routed via a network substrate to the private IP address of the virtualized computing resource instance currently mapped to the destination public IP address . Similarly response traffic from the virtualized computing resource instance may be routed via the network substrate back onto the intermediate network to the source entity .

Private IP addresses as used herein refer to the internal network addresses of resource instances in a provider network. Network traffic originating outside the provider network is not directly routed to private IP addresses instead the traffic uses public IP addresses that are mapped to the private IP addresses of the resource instances. The provider network may include network devices or appliances that provide network address translation NAT or similar functionality to perform the mapping from public IP addresses to private IP addresses and vice versa. Note that a given private IP address as used herein is not necessarily mapped to a public IP address.

Public IP addresses as used herein are Internet routable network addresses of the provider network that are assigned to resource instances on the provider network either by the service provider or by the client. Traffic routed to a public IP address of the provider network may be translated for example via 1 1 network address translation NAT and forwarded to the respective private IP address of a resource instance on the provider network. Note that private IP addresses as used herein may generally be but are not necessarily non Internet routable IP addresses e.g. RFC 1918 addresses that are for example only routable within the provider network or a subnetwork thereof or within a client s virtual private network implementation on the provider network. However in some implementations the private IP addresses may be Internet routable addresses. In other words a client may use Internet routable addresses or non routable addresses for the client s resource instances on the provider network and within the client s virtual private network implementation on the provider network.

Some public IP addresses may be assigned by the provider network infrastructure to particular resource instances these public IP addresses may be referred to as standard public IP addresses or simply standard IP addresses. In at least some embodiments the mapping of a standard IP address to a private IP address of a resource instance is the default launch configuration for all resource instance types.

At least some public IP addresses may be allocated to or obtained by clients of the provider network a client may then assign their allocated public IP addresses to particular resource instances allocated to the client. These public IP addresses may be referred to as client public IP addresses or simply client IP addresses. Instead of being assigned by the provider network to resource instances as in the case of standard IP addresses client IP addresses may be assigned to resource instances by the clients for example via an API provided by the service provider. Unlike standard IP addresses client IP Addresses are allocated to client accounts and can be remapped to other resource instances by the respective clients as necessary or desired. A client IP address is associated with a client s account not a particular resource instance and the client controls that IP address until the client chooses to release it. Unlike conventional static IP addresses client IP addresses allow the client to mask resource instance or availability zone failures by remapping the client s public IP addresses to any resource instance associated with the client s account. The client IP addresses for example enable a client to engineer around problems with the client s resource instances or software by remapping client IP addresses to replacement resource instances.

In at least some embodiments the IP tunneling technology may map substrate IP addresses of network packets to IP overlay addresses encapsulate the network packets according to an encapsulation protocol and deliver the encapsulated packets to the correct endpoints via overlay network tunnels. At the endpoints the encapsulation is stripped from the packets. In an example overlay network tunnel A from a virtual machine VM A on host A to a device on the intermediate network and an example overlay network tunnel B between a VM B on host B and a VM C on host C are shown. In some embodiments a packet may be encapsulated in an overlay network packet format before sending and the overlay network packet may be stripped after receiving. In other embodiments instead of encapsulating packets in overlay network packets an overlay network address public IP address may be embedded in a substrate address private IP address of a packet before sending and stripped from the packet address upon receiving. As an example the overlay network may be implemented using 32 bit IPv4 Internet Protocol version 4 addresses as the public IP addresses and the IPv4 addresses may be embedded as part of 128 bit IPv6 Internet Protocol version 6 addresses used on the substrate network as the private IP addresses.

Referring to at least some networks in which embodiments may be implemented may include hardware virtualization technology that enables multiple operating systems to run concurrently on a host computer e.g. hosts A and B of i.e. as virtual machines VMs on the hosts . The VMs may for example be rented or leased to clients of a network provider. A hypervisor or virtual machine monitor VMM on a host presents the VMs on the host with a virtual platform and monitors the execution of the VMs . Each VM may be provided with one or more private IP addresses the VMM on a host may be aware of the private IP addresses of the VMs on the host. A mapping service may be aware of all network IP prefixes and the IP addresses of routers or other devices serving IP addresses on the local network. This includes the IP addresses of the VMMs serving multiple VMs . The mapping service may be centralized for example on a server system or alternatively may be distributed among two or more server systems or other devices on the network. A network may for example use the mapping service technology and IP tunneling technology to for example route data packets between VMs on different hosts within the data center network note that an interior gateway protocol IGP may be used to exchange routing information within such a local network.

In addition a network such as the provider data center network which is sometimes referred to as an autonomous system AS may use the mapping service technology IP tunneling technology and routing service technology to route packets from the VMs to Internet destinations and from Internet sources to the VMs . Note that an external gateway protocol EGP or border gateway protocol BGP is typically used for Internet routing between sources and destinations on the Internet. shows an example provider data center implementing a network that provides resource virtualization technology and that provides full Internet access via edge router s that connect to Internet transit providers according to at least some embodiments. The provider data center may for example provide clients the ability to implement virtual computing systems VMs via a hardware virtualization service and the ability to implement virtualized data stores on storage resources via a storage virtualization service.

The data center network may implement IP tunneling technology mapping service technology and a routing service technology to route traffic to and from virtualized resources for example to route packets from the VMs on hosts in data center to Internet destinations and from Internet sources to the VMs . Internet sources and destinations may for example include computing systems connected to the intermediate network and computing systems connected to local networks that connect to the intermediate network e.g. via edge router s that connect the network to Internet transit providers . The provider data center network may also route packets between resources in data center for example from a VM on a host in data center to other VMs on the same host or on other hosts in data center .

A service provider that provides data center may also provide additional data center s that include hardware virtualization technology similar to data center and that may also be connected to intermediate network . Packets may be forwarded from data center to other data centers for example from a VM on a host in data center to another VM on another host in another similar data center and vice versa.

While the above describes hardware virtualization technology that enables multiple operating systems to run concurrently on host computers as virtual machines VMs on the hosts where the VMs may be rented or leased to clients of the network provider the hardware virtualization technology may also be used to provide other computing resources for example storage resources as virtualized resources to clients of a network provider in a similar manner.

Provider network may provide a client network for example coupled to intermediate network via local network the ability to implement virtual computing systems via hardware virtualization service coupled to intermediate network and to provider network . In some embodiments hardware virtualization service may provide one or more APIs for example a web services interface via which a client network may access functionality provided by the hardware virtualization service for example via a console . In at least some embodiments at the provider network each virtual computing system at client network may correspond to a computation resource that is leased rented or otherwise provided to client network .

From an instance of a virtual computing system and or another client device or console the client may access the functionality of storage virtualization service for example via one or more APIs to access data from and store data to a virtual data store provided by the provider network . In some embodiments a virtualized data store gateway not shown may be provided at the client network that may locally cache at least some data for example frequently accessed or critical data and that may communicate with virtualized data store service via one or more communications channels to upload new or modified data from a local cache so that the primary store of data virtualized data store is maintained. In at least some embodiments a user via a virtual computing system and or on another client device may mount and access virtual data store volumes which appear to the user as local virtualized storage .

While not shown in the virtualization service s may also be accessed from resource instances within the provider network via API s . For example a client appliance service provider or other entity may access a virtualization service from within a respective virtual private network on the provider network via an API to request allocation of one or more resource instances within the virtual private network or within another virtual private network.

A client s virtual private network may be connected to a client network via a private communications channel . A private communications channel may for example be a tunnel implemented according to a network tunneling technology or some other peering connection over an intermediate network . The intermediate network may for example be a shared network or a public network such as the Internet. Alternatively a private communications channel may be implemented over a direct dedicated connection between virtual private network and client network .

A public network may be broadly defined as a network that provides open access to and interconnectivity among a plurality of entities. The Internet or World Wide Web WWW is an example of a public network. A shared network may be broadly defined as a network to which access is limited to two or more entities in contrast to a public network to which access is not generally limited. A shared network may for example include one or more local area networks LANs and or data center networks or two or more LANs or data center networks that are interconnected to form a wide area network WAN . Examples of shared networks may include but are not limited to corporate networks and other enterprise networks. A shared network may be anywhere in scope from a network that covers a local area to a global network. Note that a shared network may share at least some network infrastructure with a public network and that a shared network may be coupled to one or more other networks which may include a public network with controlled access between the other network s and the shared network. A shared network may also be viewed as a private network in contrast to a public network such as the Internet. In embodiments either a shared network or a public network may serve as an intermediate network between a provider network and a client network.

To establish a virtual private network for a client on provider network one or more resource instances e.g. VMs A and B and storage A and B may be allocated to the virtual private network . Note that other resource instances e.g. storage C and VMs C may remain available on the provider network for other client usage. A range of public IP addresses may also be allocated to the virtual private network . In addition one or more networking devices routers switches etc. of the provider network may be allocated to the virtual private network . A private communications channel may be established between a private gateway at virtual private network and a gateway at client network .

In at least some embodiments in addition to or instead of a private gateway virtual private network may include a public gateway that enables resources within virtual private network to communicate directly with entities e.g. network entity via intermediate network and vice versa instead of or in addition to via private communications channel .

Virtual private network may be but is not necessarily subdivided into two or more subnetworks or subnets . For example in implementations that include both a private gateway and a public gateway the private network may be subdivided into a subnet A that includes resources VMs A and storage A in this example reachable through private gateway and a subnet B that includes resources VMs B and storage B in this example reachable through public gateway .

The client may assign particular client public IP addresses to particular resource instances in virtual private network . A network entity on intermediate network may then send traffic to a public IP address published by the client the traffic is routed by the provider network to the associated resource instance. Return traffic from the resource instance is routed by the provider network back to the network entity over intermediate network . Note that routing traffic between a resource instance and a network entity may require network address translation to translate between the public IP address and the private IP address of the resource instance.

At least some embodiments may allow a client to remap public IP addresses in a client s virtual private network as illustrated in to devices on the client s external network . When a packet is received e.g. from network entity the network may determine that the destination IP address indicated by the packet has been remapped to an endpoint on external network and handle routing of the packet to the respective endpoint either via private communications channel or via the intermediate network . Response traffic may be routed from the endpoint to the network entity through the provider network or alternatively may be directly routed to the network entity by the client network . From the perspective of the network entity it appears as if the network entity is communicating with the public IP address of the client on the provider network . However the network entity has actually communicated with the endpoint on client network .

While shows network entity on intermediate network and external to provider network a network entity may be an entity on provider network . For example one of the resource instances provided by provider network may be a network entity that sends traffic to a public IP address published by the client.

In the example virtual private network shown in the private network is subdivided into two subnets A and B. Access to the private network is controlled by gateway s . Each subnet may include at least one router that acts to route traffic to and from resource instances on the respective subnet . In the example shown in resource instances A through E are on subnet A and resource instances F through J are on subnet B. The client has established four groups A through D. As shown in a group may extend across subnets as does group A that includes resource instances A and B on subnet A and resource instance F on subnet B. In addition a resource instance may be included in two or more groups as is resource instance A which is included in group A and B.

In at least some embodiments a server that implements a portion or all of the access control methods and apparatus as described herein may include a general purpose computer system that includes or is configured to access one or more computer accessible media such as computer system illustrated in . In the illustrated embodiment computer system includes one or more processors coupled to a system memory via an input output I O interface . Computer system further includes a network interface coupled to I O interface .

In various embodiments computer system may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above for access control are shown stored within system memory as code and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computer system and other devices attached to a network or networks such as other computer systems or devices as illustrated in for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet network for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible medium configured to store program instructions and data as described above for for implementing embodiments of an access control method. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computer system via I O interface . A non transitory computer accessible storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc that may be included in some embodiments of computer system as system memory or another type of memory. Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as may be implemented via network interface .

Various embodiments may further include receiving sending or storing instructions and or data implemented in accordance with the foregoing description upon a computer accessible medium. Generally speaking a computer accessible medium may include storage media or memory media such as magnetic or optical media e.g. disk or DVD CD ROM volatile or non volatile media such as RAM e.g. SDRAM DDR RDRAM SRAM etc. ROM etc as well as transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as network and or a wireless link.

The various methods as illustrated in the Figures and described herein represent exemplary embodiments of methods. The methods may be implemented in software hardware or a combination thereof. The order of method may be changed and various elements may be added reordered combined omitted modified etc.

Various modifications and changes may be made as would be obvious to a person skilled in the art having the benefit of this disclosure. It is intended to embrace all such modifications and changes and accordingly the above description to be regarded in an illustrative rather than a restrictive sense.

