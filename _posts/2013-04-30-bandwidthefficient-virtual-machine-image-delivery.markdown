---

title: Bandwidth-efficient virtual machine image delivery
abstract: A mechanism is provided for bandwidth-efficient virtual machine image delivery. Responsive to a request to generate a virtual machine (VM) in a node using an existing virtual machine image (VMI) file, a set of file chunks that constitute the VMI file is identified. The set of file chunks are retrieved from within a set of distributed nodes by establishing an optimized plan for retrieving the set of file chunks in a bandwidth-efficient manner. Responsive to retrieving the set of file chunks from within the distributed nodes, the set of file chunks are reassembled into the VMI file for generation of the VM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424061&OS=09424061&RS=09424061
owner: International Business Machines Corporation
number: 09424061
owner_city: Armonk
owner_country: US
publication_date: 20130430
---
The present application relates generally to an improved data processing apparatus and method and more specifically to mechanisms for a bandwidth efficient virtual machine image delivery.

A virtual machine VM is a software implementation of a machine i.e. a computer that executes programs like a physical machine. Virtual machines are separated into two major classifications based on their use and degree of correspondence to any real machine 

Virtual Machine Images VMIs are utilized to create virtual machines VMs on a host system. That is rather than writing the code for VM a user may find an existing VMI that meets the user s VM requirement and utilizes that identified VMI as the bases for their VM. However VMI are generally large files usually ranging in size from a couple of GBytes to hundreds of GBytes and usually exist in the realm of datacenters. Host machines physical servers in a datacenter usually access VMIs through a file system with the file system being mounted on a local disk or on a remote disk accessed through a network protocol. The VMI may be composed of an operating system OS image middleware applications or the like.

In one illustrative embodiment a method in a data processing system is provided for bandwidth efficient virtual machine image delivery. The illustrative embodiment identifies a set of file chunks that constitute a VMI file in response to a request to generate a virtual machine VM in a node using an existing virtual machine image VMI file. The illustrative embodiment retrieves the set of file chunks from within a set of distributed nodes. In the illustrative embodiment retrieving the set of file chunks from within the distributed nodes is performed by establishing an optimized plan for retrieving the set of file chunks in a bandwidth efficient manner. The illustrative embodiment reassembles the set of file chunks into the VMI file for generation of the VM in response to retrieving the set of file chunks from within the distributed nodes.

In other illustrative embodiments a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

Again Virtual Machine Images VMIs are utilized to create virtual machines VMs on a host system. That is rather than writing the code for a VM a user may find an existing VMI that meets the user s VM requirement and utilized that identified VMI as the bases for their VM. However VMIs are generally large files usually ranging in size from a couple of GBytes to hundreds of GBytes and usually exist in the realm of datacenters. Host machines physical servers in datacenters usually access VMIs through a file system with the file system being mounted on a local disk or on a remote disk accessed through a network protocol. The VMI may be composed of an operating system OS image middleware applications or the like.

With the increased usage of VMs VMIs have started to appear in the realm of the whole Internet i.e. across data centers at local points of presence at the edge of the networks wired and wireless and even at user end devices e.g. desktops laptops smart phones etc . In these environments scaling the distribution of VMIs becomes highly important given their extremely large sizes at least 1 2 orders of magnitude larger than video files. Given the limited bandwidth available across such networks the illustrative embodiments provide for VMI delivery through a mechanism that breaks the VMIs into file chunks with chunk metadata creates tables to manage the chunk metadata across distributed nodes and intelligently reassembles the file chunks of the VMI at the client node. Thus the illustrative embodiments provide for a bandwidth efficient virtual machine image delivery.

Thus the illustrative embodiments may be utilized in many different types of data processing environments. In order to provide a context for the description of the specific elements and functionality of the illustrative embodiments are provided hereafter as example environments in which aspects of the illustrative embodiments may be implemented. It should be appreciated that are only examples and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the present invention may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the present invention and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

Processor cards are connected to main bus . Main bus supports a system planar that contains processor cards and memory cards . The system planar also contains data switch and memory controller cache . Memory controller cache supports memory cards that include local memory having multiple dual in line memory modules DIMMs .

Data switch connects to bus bridge and bus bridge located within a native I O NIO planar . As shown bus bridge connects to peripheral components interconnect PCI bridges and via system bus . PCI bridge connects to a variety of I O devices via PCI bus . As shown hard disk may be connected to PCI bus via small computer system interface SCSI host adapter . A graphics adapter may be directly or indirectly connected to PCI bus . PCI bridge provides connections for external data streams through network adapter and adapter card slots via PCI bus .

An industry standard architecture ISA bus connects to PCI bus via ISA bridge . ISA bridge provides interconnection capabilities through NIO controller having serial connections Serial 1 and Serial 2. A floppy drive connection keyboard connection and mouse connection are provided by NIO controller to allow data processing system to accept data input from a user via a corresponding input device. In addition non volatile RAM NVRAM provides a non volatile memory for preserving certain types of data from system disruptions or system failures such as power supply problems. A system firmware is also connected to ISA bus for implementing the initial Basic Input Output System BIOS functions. A service processor connects to ISA bus to provide functionality for system diagnostics or system servicing.

The operating system OS is stored on hard disk which may also provide storage for additional application software for execution by data processing system. NVRAM is used to store system variables and error information for field replaceable unit FRU isolation. During system startup the bootstrap program loads the operating system and initiates execution of the operating system. To load the operating system the bootstrap program first locates an operating system kernel type from hard disk loads the OS into memory and jumps to an initial address provided by the operating system kernel. Typically the operating system is loaded into random access memory RAM within the data processing system. Once loaded and initialized the operating system controls the execution of programs and may provide services such as resource allocation scheduling input output control and data management.

The illustrative embodiment may be embodied in a variety of data processing systems utilizing a number of different hardware configurations and software such as bootstrap programs and operating systems. The data processing system may be for example a stand alone system or part of a network such as a local area network LAN or a wide area network WAN .

Additionally virtual machines and also include firmware loaders and . Firmware loaders and may be implemented using IEEE 1275 Standard Open Firmware and runtime abstraction software RTAS which is available from International Business Machines Corporation. When virtual machines and are instantiated a copy of the open firmware is loaded into each virtual machine by the firmware s virtualization manager. The processors associated or assigned to the virtual machines are then dispatched to the virtual machine s memory to execute the virtualization firmware.

Partitioned hardware includes a plurality of processors a plurality of system memory units a plurality of input output I O adapters and a storage unit . Partitioned hardware also includes service processor which may be used to provide various services such as processing of errors in the virtual machines. Each of the processors memory units NVRAM storage and I O adapters may be assigned to one of multiple virtual machines within virtualization platform each of which corresponds to one of operating systems and .

Firmware performs a number of functions and services for virtual machines and to create and enforce the virtualizing of virtualization platform . Firmware is a firmware implemented virtual machine identical to the underlying hardware. Hypervisor software is an example of server firmware available from International Business Machines Corporation. Firmware is software stored in a memory chip that holds its content without electrical power such as for example read only memory ROM programmable ROM PROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM and nonvolatile random access memory nonvolatile RAM . Thus firmware allows the simultaneous execution of independent operating system images and by virtualizing all hardware resources of virtualization platform . Virtualization is the pooling of information technology resources in a way that shields the physical nature and boundaries of those resources from users.

Operations of the different virtual machines may be controlled through a hardware management console such as hardware management console . Hardware management console is a separate data processing system from which a system administrator may perform various functions including reallocation of resources to different virtual machines. Alternatively a Virtual Partition Manager is a feature of the i5 OS V5R3 operating system that allows one to create and manage operating system logical virtual machines by initiating a console session using service tools.

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the present invention.

In order to generate virtual machines such as virtual machines and of the illustrative embodiments utilize use of a novel metadata creation and update mechanism combined with file chunking and re assembly from file chunks to enable bandwidth efficient transfer of a virtual machine image VMI over a network. At the first occurrence of a VMI file in a node of a distributed file system the VMI file is chunked and a manifest is created which contains metadata on the file chunks of the VMI file. The per VM file metadata is then aggregated into a metadata table at the node which keeps track of chunk level information across multiple files. The metadata table has both local and global information about files in the distributed file system. The information in the metadata table is shared and periodically updated amongst other metadata tables across all the nodes in the distributed file system. When a request for a generation of a new virtual machine VM is received the VM is generated utilizing a VMI that is reassembled from any local file chunks cached at the node where the VM is being generated combined with optimized file chunk requests from other nodes.

When a new VMI file is generated within node file chunking and metadata creation logic processes the VMI file in order to divide the VMI file into a collection of file chunks. File chunking and metadata creation logic performs the file chunking process on the VMI file using for example rolling hash based file chunking fixed offset based file chunking or the like. As file chunking and metadata creation logic creates each file chunk file chunking and metadata creation logic also creates metadata that identifies the properties or characteristics of that file chunk . After the VMI file is divided into file chunks with the associated metadata file chunking and metadata creation logic creates manifest to represent the VMI file as a collection of metadata for file chunks . Each file chunk is represented in its respective metadata by one or more of a chunk hash size start offset in the file original file name where the file chunk belongs or the like. Note that the original VMI file may or may not be actually divided into file chunks but file chunking and metadata creation logic has created a collection of the file chunks for the VMI file and manifest to represent the VMI file as the collection of the file chunks based on the metadata . File chunking and metadata creation logic then stores the collection of file chunks with the associated metadata and the manifest file in local cache .

As the process of file chunking of new VMI files may occur in any node within distributed file system file chunk metadata storage and update logic in each other node aggregates metadata associated with file chunks and manifest that are stored in local cache into metadata table . Further file chunk metadata storage and update logic also communicates with other file chunk metadata storage and update logic in other nodes via network to aggregate the metadata of the file chunks and manifest files that are stored in their local cache and identified in the other metadata tables into metadata table thereby keeping track of file chunk level information and manifests across all the VMI files in distributed file system . For the file chunk level information metadata table comprises one or more of a chunk hash size a list of VMI filenames where the file chunk belongs a start offset within the VMI file a location of the file chunk in distributed file system or the like. Thus each node comprises its own metadata table as well as file chunk metadata storage and update logic that aggregates local metadata for the file chunks for a VMI file and manifest for the VMI file into metadata table as well as aggregating information for other VMI files existing in the particular node and VMI files from other metadata tables of other nodes thereby obtaining current information on the global file chunk level metadata and manifests. File chunk metadata storage and update logic may perform this level of aggregation using polling pair wise information exchange centrally coordinated exchange or the like.

Upon request for generation of a virtual machine using an existing VMI file which is in distributed file system virtual machine image reassembly logic first analyzes a manifest file associated with the VMI file which is identified from metadata table . Again file chunk metadata storage and update logic has aggregated all manifests and metadata related to all VMI files in distributed data processing system . Thus virtual machine image reassembly logic is able to analyze the manifest file associated with the VMI file by identifying the associated manifest file from metadata table . Virtual machine image reassembly logic looks at the file manifest to identify the set of file chunks that constitute the VMI file. Virtual machine image reassembly logic searches its local cache to identify whether one or more of the file chunks exist within local cache .

As would be recognizable to one of ordinary skill in the art while VMs may differ in overall composition one or more of the file chunks within a set of VMs may be common. For example while three different VMs may utilize an AIX operating system an i5 OS operating system and Linux operating system respectively all three VMs may utilize the same middleware or application programming interface API . Thus a file chunk for an API of the requested VMI may be obtained from local cache whereas the file chunk for the operating system of the VMI may not exist in local cache . For those file chunks of the requested VMI that do not exist in local cache virtual machine image reassembly logic identifies a location of the required file chunks based on the metadata within its associated metadata table . In identifying a location of the required file chunks virtual machine image reassembly logic may identify that one or more of the required file chunks exist in more than one other local cache of other nodes .

If one or more file chunks existing in multiple other local caches virtual machine image reassembly logic creates an optimized plan for gathering the one or more chunks existing in multiple other local caches . That is if the required file chunk exists in only one other local cache then virtual machine image reassembly logic has to retrieve the file chunk from only that other local cache . However if the file chunk exists in multiple other local caches then virtual machine image reassembly logic creates an optimized plan so as to retrieve the required file chunk from another local cache in a bandwidth efficient manner. Therefore for each file chunk in the one or more file chunks existing in multiple other local caches virtual machine image reassembly logic chooses which other local cache to retrieve the file chunk from based on one or more criteria. That criteria may include bandwidth access to the other local cache historical data associated with accessing the other local cache priority of accessing the other local cache grouping of the file chunk with other file chunks to be retrieved from a same other local cache a serial basis of how the file chunk is stored with other file chunks on the other local cache access control policies of accessing the other local cache or the like.

Based on the analysis of these criteria virtual machine image reassembly logic identifies an optimal other local cache to retrieve the particular file chunk from. Once an optimal plan has been chosen for each of the one or more file chunks existing in multiple other local caches virtual machine image reassembly logic retrieves the file chunks from its own local cache and the other local caches as per the optimized plan. Once all of the file chunks have been retrieved virtual machine image reassembly logic reassembles the VMI file based on the retrieved file chunks. Additionally the virtual machine image reassembly logic interacts with chunk metadata storage and update logic to optionally store the retrieved file chunks in local cache as well as update the metadata table to indicate that the file chunks are now stored in local cache .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in any one or more computer readable medium s having computer usable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in a baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Computer code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination thereof.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to the illustrative embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions that implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

If at step the file chunk exists in its own local cache then the VMI delivery mechanism retrieves the file chunk from its own local cache step . If at step the file chunk does not exist in its own local cache the VMI delivery mechanism identifies a location of the required file chunk based on the metadata within its associated metadata table step . Upon identifying a location for all the required file chunks that exist in other local caches of other nodes the VMI delivery mechanism creates an optimized plan for gathering the one or more chunks existing in the other local caches step . That is for each required file chunk not existing in its own local cache the VMI delivery mechanism chooses which other local cache to retrieve each required file chunk from based on one or more criteria step The criteria including bandwidth access to the other local cache historical data associated with accessing the other local cache priority of accessing the other local cache grouping of the file chunk with other file chunks to be retrieved from a same other local cache a serial basis of how the file chunk is stored with other file chunks on the other local cache access control policies of accessing the other local cache or the like. Based on the analysis of these criteria the VMI delivery mechanism identifies an optimal other local cache to retrieve each file chunk from.

Once an optimal plan has been chosen for each of the one or more file chunks existing in the other local caches the VMI delivery mechanism retrieves the file chunks from the other local caches as per the optimized plan step . Once all of the file chunks have been retrieved from step or step the VMI delivery mechanism reassembles the VMI file based on the retrieved file chunks step . Additionally the VMI delivery mechanism stores the retrieved file chunks in its local cache as well as updates its metadata table to indicate the file chunks are now stored in its local cache step with the operation ending thereafter.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Thus the illustrative embodiments provide mechanisms for a bandwidth efficient virtual machine image delivery mechanism. At the first occurrence of a VMI file in a node of a distributed file system the VMI file is chunked and a manifest is created which contains metadata on the file chunks of the VMI file. The per VM file metadata is then aggregated into a metadata table at the node which keeps track of chunk level information across multiple files. The metadata table has both local and global information about files in the distributed file system. The information in the metadata table is shared and periodically updated amongst other metadata tables across all the nodes in the distributed file system. When a request for a generation of a new virtual machine VM is received the VM is generated utilizing a VMI that is reassembled from any local file chunks cached at the node where the VM is being generated combined with optimized file chunk requests from other nodes.

As noted above it should be appreciated that the illustrative embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In one example embodiment the mechanisms of the illustrative embodiments are implemented in software or program code which includes but is not limited to firmware resident software microcode etc.

A data processing system suitable for storing and or executing program code will include at least one processor coupled directly or indirectly to memory elements through a system bus. The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

Input output or I O devices including but not limited to keyboards displays pointing devices etc. can be coupled to the system either directly or through intervening I O controllers. Network adapters may also be coupled to the system to enable the data processing system to become coupled to other data processing systems or remote printers or storage devices through intervening private or public networks. Modems cable modems and Ethernet cards are just a few of the currently available types of network adapters.

The description of the present invention has been presented for purposes of illustration and description and is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. The embodiment was chosen and described in order to best explain the principles of the invention the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

