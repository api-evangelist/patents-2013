---

title: Application-level anomaly detection
abstract: An example includes intercepting one or more activities performed by an application on a computing device. The intercepting uses an instrumentation layer separating the application from an operating system on the computing device. The one or more activities are compared with one or more anomaly detection policies in a policy configuration file to detect or not detect presence of one or more anomalies. In response to the comparison detecting presence of one or more anomalies, indication(s) of the one or more anomalies are stored. Another example includes receiving indication(s) of anomaly(ies) experienced by an application on computing device(s) and analyzing the indication(s) of the anomaly(ies) to determine whether corrective action(s) should be issued. Responsive to a determination corrective action(s) should be issued based on the analyzing, the corrective action(s) are issued to the computing device(s). Methods, program products, and apparatus are disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141792&OS=09141792&RS=09141792
owner: International Business Machines Corporation
number: 09141792
owner_city: Armonk
owner_country: US
publication_date: 20130918
---
This patent application is a continuation of U.S. patent application Ser. No. 13 676 438 filed on Nov. 14 2012 which is incorporated herein by reference in its entirety to provide continuity of disclosure.

This invention relates generally to applications executing on electronic computing systems and more specifically relates to detecting anomalies related to the applications.

This section is intended to provide a background or context to the invention disclosed below. The description herein may include concepts that could be pursued but are not necessarily ones that have been previously conceived implemented or described. Therefore unless otherwise explicitly indicated herein what is described in this section is not prior art to the description in this application and is not admitted to be prior art by inclusion in this section. Acronyms that appear in the text or drawings are defined below prior to the claims.

Anomaly detection refers to detecting patterns in a data set that do not conform to an established normal behavior. Additional information regarding anomaly detection may be found in V. Chandola et al. Anomaly detection A survey ACM Comput. Surv. 41 3 Article 15 July 2009 . Anomaly detection is applicable to many different areas but one area of interest is anomaly detection for applications executing on computing systems. A typical scenario in this area is where data associated with an application is logged. The logged data is subsequently transferred at some point to a server. The server analyzes the logged data e.g. from many computing systems and determines whether or not an anomaly exists.

While this type of anomaly detection can be beneficial anomaly detection for applications executing on computing systems may be improved.

An example is a method that includes intercepting one or more activities performed by an application on a computing device the intercepting using an instrumentation layer separating the application from an operating system on the computing device and comparing the one or more activities with one or more anomaly detection policies in a policy configuration file to detect or not detect presence of one or more anomalies. The method includes in response to the comparison detecting presence of one or more anomalies storing one or more indications of the one or more anomalies.

An apparatus is disclosed that includes the following means for intercepting one or more activities performed by an application on a computing device the intercepting using an instrumentation layer separating the application from an operating system on the computing device means for comparing the one or more activities with one or more anomaly detection policies in a policy configuration file to detect or not detect presence of one or more anomalies and means responsive to the comparison detecting presence of one or more anomalies for storing one or more indications of the one or more anomalies.

A further exemplary embodiment is a computing device including one or more memories comprising computer readable code and one or more processors configured in response to executing the computer readable code to cause the computing device to perform intercepting one or more activities performed by an application on a computing device the intercepting using an instrumentation layer separating the application from an operating system on the computing device comparing the one or more activities with one or more anomaly detection policies in a policy configuration file to detect or not detect presence of one or more anomalies and in response to the comparison detecting presence of one or more anomalies storing one or more indications of the one or more anomalies.

An additional exemplary embodiment is a computer program product comprising a computer readable storage medium having computer readable program code embodied therewith the computer readable program code comprising code for intercepting one or more activities performed by an application on a computing device the intercepting using an instrumentation layer separating the application from an operating system on the computing device code for comparing the one or more activities with one or more anomaly detection policies in a policy configuration file to detect or not detect presence of one or more anomalies and code in response to the comparison detecting presence of one or more anomalies for storing one or more indications of the one or more anomalies.

Another exemplary embodiment is a method comprising receiving one or more indications of one or more anomalies experienced by an application on one or more computing devices analyzing the one or more indications of the one or more anomalies to determine whether one or more corrective actions should be issued and responsive to a determination one or more corrective actions should be issued based on the analyzing issuing the one or more corrective actions to the one or more computing devices.

A further exemplary embodiment is an apparatus comprising means for receiving one or more indications of one or more anomalies experienced by an application on one or more computing devices means for analyzing the one or more indications of the one or more anomalies to determine whether one or more corrective actions should be issued and means for responsive to a determination one or more corrective actions should be issued based on the analyzing issuing the one or more corrective actions to the one or more computing devices.

A further exemplary embodiment is a computing device including one or more memories comprising computer readable code and one or more processors configured in response to executing the computer readable code to cause the computing device to perform receiving one or more indications of one or more anomalies experienced by an application on one or more computing devices analyzing the one or more indications of the one or more anomalies to determine whether one or more corrective actions should be issued and responsive to a determination one or more corrective actions should be issued based on the analyzing issuing the one or more corrective actions to the one or more computing devices.

An additional exemplary embodiment is a computer program product comprising a computer readable storage medium having computer readable program code embodied therewith the computer readable program code comprising receiving one or more indications of one or more anomalies experienced by an application on one or more computing devices analyzing the one or more indications of the one or more anomalies to determine whether one or more corrective actions should be issued and responsive to a determination one or more corrective actions should be issued based on the analyzing issuing the one or more corrective actions to the one or more computing devices.

As stated above while anomaly detection of applications that uses a server to analyze logged data from the applications can be beneficial anomaly detection for applications executing on computing systems may be improved. For instance mobile application projects using enterprise software are expected to outnumber PC projects by a ratio of 4 to 1 by 2015. Further in terms of mobile enterprise software bring your own device to the enterprise makes employees work an extra 20 hours per week which means that enterprises have an incentive to allow more mobile devices accessing their IT infrastructure.

2 The logs are transferred to the backend e.g. an enterprise server associated with the application and

A straightforward application of anomaly detection techniques would treat a mobile device as any other terminal. However mobile devices are different from a typical terminal in an enterprise. For example mobile devices can operate while disconnected from the IT infrastructure there are network battery storage constraints that exist for mobile devices and it may be infeasible to transfer fine grained logs via wireless interfaces.

Exemplary embodiments of this invention solve the important problem as an example of automatically detecting reporting and securing anomalies in an application or in the way a user interacts with a computing system. Four exemplary and non limiting features of certain exemplary embodiments of this invention include the fact that the anomaly detection mechanism and policy 1 does not have to be part of the application code e.g. so no expensive code changes are required and no security experience is demanded of developers 2 does not have to be part of the operating system on which the program is executed thereby making the solution portable across platforms 3 does not have to reside on a server which is a particularly useful property especially when anomaly detection has to be applied to mobile applications and the mobile devices may be intentionally or unintentionally disconnected from the network and 4 can be dynamically updated without requiring the application to be re installed another good feature that makes this solution particularly useful to mobile devices . Additional exemplary features of exemplary embodiments includes the fact that once an anomaly is detected based on a given policy 5 corrective actions can be taken instantly for example the application can be disabled entirely or limited to specific functions all or part of its data can be wiped or encrypted a message can be displayed 6 for all users or only certain users 7 the policy can be updated and 8 this approach also does not require changing the source code of the application. Another feature of an exemplary embodiment of the invention is that since a technique allows for anomaly detection to run on the client there is no need for client computing systems to inundate server machines with massive amounts of data e.g. at the expense of the network connectivity quality battery and power consumption and disk space on the server . This exemplary embodiment allows for anomaly detection to run in isolation and to provide data to the server incrementally and with more precision for example when an anomaly is suspected. Another possible feature of an exemplary embodiment includes the fact that this approach can also be used to detect anomalies in application code for example to detect code that has not properly tested and not just anomalies in the way users interact with an application or the system. Another possible feature of an exemplary embodiment of this invention is that the techniques may be transparent to the anomaly detection engine. This means that any anomaly detection engine can be plugged into a structure of an exemplary embodiment.

Current techniques for anomaly detection do not offer one or more of the features described above. Therefore the current techniques are very impractical particularly for mobile applications running on mobile computing devices where applications are prevented from loading dynamic code at run time which prevents an application from loading a different policy if this is policy hard coded.

Referring to a block diagram of a computing device and a computing system server in communication via a network in accordance with an exemplary embodiment of the instant invention. is used to provide an overview of a system in which exemplary embodiments may be used and to provide an overview of an exemplary embodiment of instant invention. In there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use e.g. as computing device with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

As shown in computer system server is shown in the form of a general purpose computing device. For simplicity the computer system server will be referred to as server in the rest of this disclosure. However there may not be a true server client relationship between the server and the computing device . The components of server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to one or more processing units . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus. Server typically includes a variety of computer system readable media such as memory . Such media may be any available media that is accessible by server and such media includes both volatile and non volatile media removable and non removable media. System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a removable non volatile memory such as a memory card or stick may be used and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more I O Input Output interfaces .

Server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with server and or any devices e.g. network card modem etc. that enable server to communicate with one or more other computing devices. Such communication can occur via e.g. I O interfaces . Still yet server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

The computing device also comprises a memory one or more processing units one or more I O interfaces and one or more network adapters interconnected via bus . The memory may comprise non volatile and or volatile RAM cache memory and a storage system . Depending on implementation memory may include removable or non removable non volatile memory. The computing device may include or be coupled to the display which has a UI . Depending on implementation the computing device may or may not be coupled to external devices . The display may be a touchscreen flatscreen monitor television projector as examples. The bus may be any bus suitable for the platform including those buses described above for bus . The memories and may be those memories respectively described above. The one or more network adapters may be wired and or wireless network adapters. The wireless network adapters may support cellular systems wireless personal area network systems engaging in operations generally described by standards such as the IEEE 802.15 e.g. Bluetooth and network connections such as WiFi. The I O interface s may be interfaces such as USB universal serial bus SATA serial AT attachment HDMI high definition multimedia interface and the like. The processing unit s may be single core processors multi core processors digital signal processors system on a chip integrated circuits application specific integrated circuits programmable logic and the like and some combination of these.

In certain exemplary embodiments the computing device operates differently for each of two modes disconnected and connected. A disconnected mode occurs e.g. when the computing device cannot access the server . A connected mode by contrast occurs when the computing device can access the server . First an overview of anomaly detection in some exemplary embodiments is presented then an overview of the two modes is presented.

In this example the server is connected to the computing device via network and links . The network may be the Internet an intranet as in an enterprise scenario a cellular system or any combination of these. The computing device includes an anomaly detection module and a policy configuration file . The anomaly detection module comprises computer readable code stored in some portion s of the memory . The computing device under control of the processing unit s in response to executing the computer readable code in the anomaly detection module performs operations defined by the anomaly detection module . In particular through techniques described in more detail below and in certain exemplary embodiments the anomaly detection module intercepts activities of the application e.g. by intercepting interactions between the application and the operating system . The anomaly detection module then compares the intercepted actions with policies in the policy configuration file to determine whether an anomaly has occurred. If the comparison indicates an anomaly has occurred the anomaly detection module then stores indications of the anomalies. The computing device may connect e.g. periodically or when in a connected mode to the server at least in order to send indications of anomalies to the server .

The server meanwhile has an anomaly processing module in an exemplary embodiment. The server under control of the processing unit s in response to executing the computer readable code in the anomaly processing module performs operations defined by the anomaly processing module . In an exemplary embodiment the server under direction of the anomaly processing module will send corrective actions to the computing device e.g. based on an analysis of the indications of the anomalies and a determination that the corrective actions are to be sent. The server will also send the original policy configuration file to the computing device and may also send updates to the policy configuration file or a completely new policy configuration file when deemed appropriate. This example has a single server interacting with the computing device to send corrective actions receive indications of anomalies and also to send the policy configuration file to the computing device . However this functionality may be split amongst multiple servers .

In exemplary embodiments the anomaly processing module comprises an ECA Event Condition Action manager and an ECA model . In these embodiments the anomaly detection can run in two modes connected and disconnected. In the former anomalies are forwarded by the server to a server which is used to aggregate anomaly data and update any anomaly models in this example an ECA model . The server can additionally issue commands at any time to the client e.g. computing device . In the context of anomaly detection the commands would be triggered based on the policy which in an example embodiment is an Event Condition Action model . In this model the event is the detection of an anomaly the condition evaluates the event to see what actions if any apply and the actions include many different types of actions of which many are described herein. For instance for a mobile device as computing device the mobile device may be locked as an example of an action response to a command. These rules are encoded in an ECA manager component e.g. that can be configured using a policy configuration file containing a list of ECA statements that is rules . It is noted that the ECA model can be a sub part of the policy configuration file which may contain more than just ECA rules. For example the policy configuration file may specify what anomaly detection model should be used at runtime.

In disconnected mode the ECA manager would be located on the client computing device . The ECA manager would be configured using the policy configuration file in a similar manner to what was just described for the connected mode.

It should be noted that commands are a subset of corrective actions . The corrective actions could include such items as patching the application installing a new version of the application disabling certain functions in the application and the like.

Turning to a networked environment is illustrated according to an exemplary embodiment of the present invention. In this example the server is shown separate from network but could be part of the network. There are A through E different computing devices shown smartphone A desktop computer B laptop C tablet D television E and automobile computer system F. Not shown but equally applicable are set top boxes and game consoles. These are merely exemplary and other devices may also be used. The anomaly detection module can be configured to execute on each computing device .

It is noted that the examples provided below place primary emphasis on mobile devices such as the smartphone A or the tablet D. However the instant techniques may be applied to many other computing devices.

Referring to a block diagram is shown of a computing device and a server and configuration therein and operations performed thereby in an exemplary embodiment of the instant invention. The application in this example is an enterprise mobile application which is a mobile application issued and or controlled by an enterprise. However this is merely exemplary and not a limitation. Computing device also comprises a policy configuration file which is dynamic as the policy configuration file may be changed at any time. As indicated by block an anomaly detection policy may be shipped e.g. by server to the computing device as a configuration file. Also any policy change does not require redeploying and re provisioning the application as the policy configuration file may simply be modified or replaced. As indicated by block when an anomaly is detected on a given application instance the server pushes a corrective action onto that instance.

The anomaly detection module in this example comprises an application app level instrumentation and an anomaly detection engine . The anomaly detection engine may include an anomaly detection AD method . As indicated by block the anomaly detection engine can be shipped as part of the application level instrumentation . Both the application level instrumentation and the anomaly detection engine can work in disconnected mode e.g. while the computing device is not connected to the network or is not connected to an enterprise IT infrastructure such as network .

This exemplary embodiment separates the application code in application from an application level instrumentation which can incorporate or be coupled to any anomaly detection engine . This separation between the application and at least the anomaly detection engine is beneficial because any change in the anomaly detection engine does not require changing the code of the application e.g. as indicated in block . Furthermore the anomaly detection policy e.g. in the policy configuration file is completely decoupled from the application code in application as well as the application level instrumentation and the anomaly detection engine .

Exemplary embodiments are based on an ability to instrument application code in application with no or minimal access to the source code of the application . The application code is instrumented with a layer e.g. application level instrumentation that sits between the application and the operating system . This layer is e.g. capable of intercepting a wide range of application activity such as internal function calls interactions with the environment or user as well as more fine grained application activity such as monitoring internal program data structures or low level system calls. Two examples for the anomaly detection module for possible implementation are the Android and iOS operating systems for mobile platforms although the exemplary embodiments are not limited to mobile platforms. On iOS the instrumentation layer is injected through method swizzling which is a technique that allows for redirecting calls to certain methods to other methods. On Android the instrumentation layer is injected via class loading and or bytecode rewriting.

A policy or policies in the form of a text file a JSON input file or and XML file as examples can be dynamically loaded or re loaded when changes occur to the policy configuration file without having to re provision the application .

The anomaly detection engine can run on the client. Exemplary and non limiting advantages of client side anomaly detection include the following 

1. Anomaly detection can work also when a device is intentionally or unintentionally disconnected from any form of network see block and or

2. It is not necessary for clients to constantly send all data to the server which saves battery and power for portable devices network bandwidth and disk or other memory space especially for portable devices that generally have limited storage space .

The application level instrumentation can respond to commands from the server shut down the application disable some of its functions wipe parts of its data encrypt security sensitive data display messages and the like.

The anomaly detection engine can detect anomalies such as jailbreaking or other privileged control attainment difference in wireless e.g. cellular service providers e.g. as compared to allowed providers differences in WiFi networks as compared to allowed WiFi networks unallowed locations as compared to allowed locations attempts to reach forbidden domains attempts to use unauthorized data storage repositories inconsistent time e.g. of use of a computing device as compared to previously learned times unauthorized or inconsistent usage of the application and problems in the application code itself. Jailbreaking is a term used for the iOS operating system that operates on iPhones which is a type of smartphone . Jailbreaking is a process to gain privileged control within the operating system. This is also referred to as gaining root access to the operating system. On smartphones using the Android operating system a similar process is called rooting . Each one of these anomalies may have a corresponding corrective action such as reinstalling the system preventing access to particular service provider s preventing access to clear i.e. unencrypted Wi Fi networks restricting e.g. physical locations to certain locations restricting domains e.g. preventing access to certain domains or allowing access only to certain domains restricting storage to authorized storage repositories limiting access at certain times e.g. between midnight and 4 a.m. and restricting usage to authorized or consistent usage . Commands to cause these corrective actions to occur will be similar to the corrective actions and easily created by those skilled in this area.

The anomaly detection module in block e.g. using the application level instrumentation intercepts all activities the application performs. In block the anomaly detection module compares e.g. using the anomaly detection engine the activities with the anomaly detection policies in the policy configuration file . In one example in block the anomaly detection module uses an anomaly detection method to determine existence of anomaly ies . In one such example the comparison includes whether information produced by the AD method meets criteria in policies in the policy configuration file as described in more detail below.

In block the anomaly detection module determines if an anomaly is found based on the comparison. If not block No the flow proceed in block . If so block Yes the anomaly detection module stores block an indication of the anomaly. For instance if the anomaly is a location that is different from a set of previous locations the indication may be an indication of the location or an indication of the location and an indication of the difference e.g. this location is greater than 100 miles from the previous set of locations .

In block it is determined if the computing device is in connected or disconnected mode. In one example the computing device is in connected mode when the computing device can access e.g. via wireless or wired network s the server and is in disconnected mode when the computing device cannot access the server . This example is applicable in many instances to computing devices that are mobile devices. Alternatively or in combination a computing device can be set to be in a disconnected mode for a first time period and set to be in a connected mode for a second time period. This example could be useful for computing devices that may be able to contact a server at any time but to reduce network traffic the disconnected mode is used.

In response to the computing device being in connected mode block connected in block the anomaly detection module sends indication s of the anomaly or anomalies to the server . In response to the computing device being in disconnected mode block disconnected the flow continues to . can be considered to be performed by the ECA manager . In block the ECA manager analyzes indications of anomalies . In block the ECA manager updates the ECA model if necessary based on the analysis performed in block . In block the ECA manager determines whether one or more corrective actions should implemented based on the analysis. In this example the corrective actions are typically limited to commands . As stated above in the ECA model the event is the detection of an anomaly the condition evaluates the event to see what actions if any apply and exemplary corrective actions are stated already above. If corrective action s are not to be implemented block No the flow continues to block of . If corrective action s are to be implemented block Yes in block the corrective actions are implemented and the flow continues to block of .

In block the ECA manager receives indications of anomalies from the client computing device . In block the ECA manager aggregates the indications of the anomalies e.g. by adding the indications to previously received similar or the same anomalies. In block the ECA manager analyzes the indications of anomalies . In block the ECA manager updates the ECA model if necessary based on the analysis performed in block . In block the ECA manager determines whether one or more corrective actions should issued based on analysis. In this example the corrective actions may be commands or may include other actions. As stated above in the ECA model the event is the detection of an anomaly the condition evaluates the event to see what actions if any apply and exemplary corrective actions are stated already above. If corrective action s are not to be issued block No the flow continues to block . If corrective action s are to be issued block Yes in block the corrective actions such as commands are issued and the flow continues to block . The issuing may include transmitting the corrective actions s over a network toward one or more computing devices .

Another option is provide a permanent ECA manager on the computer system and the ECA manager is not provided. In this option in block is not performed and block is performed periodically. is therefore not performed and instead ECA manager performs in response to receiving indications of anomalies .

Thus in an example for application level anomaly detection AD the AD may only affect enterprise applications the anomalies may be detected on line there may be immediate corrective actions and the anomalies may be eventually transmitted for further analysis. Furthermore embodiments may implement existing AD techniques e.g. via the anomaly detection engine may learn regular behavior online offline may deploy a model e.g. ECA model which is created using the policy configuration file with an application may enable local corrective actions and may forward anomalies to the backend e.g. server . The model may contain domain specific knowledge models from other devices and or indications of false positives.

Additional examples are now presented. With regard to possible AD methods many examples are possible. One possible AD method is statistical outlier detection e.g. Grubbs test . An example of this is illustrated by . This technique may use a small model with mean and standard deviation but also uses a strong assumption of normality. On the left hand side potential outliers are shown on this normal distribution. Other possible AD methods include machine learning techniques includes general but heavyweight i.e. processing intensive techniques such as 1 class classification or density based approaches.

Additional AD method examples include finite state models which are suitable to model interaction e.g. GUI API . It is possible to synthesize FSM abstracting from traces. Existing tools for these AD methods may be ported to the particular platform being used.

A case study was performed using a binary FTP application from an app market. In this case study connection was disabled from suspicious locations. The disabling was performed using a location analysis that was application independent. The anomaly detection module logs position data responsive to a change in view and the ECA manager triggered application specific corrective actions via commands . Referring to this figure is an example showing a portion of an FTP interface implemented on a UI of a mobile computing system . The FTP interface is created by an FTP program that can manage several FTP servers and provides a device browser an interface for which is shown in and an FTP browser the interface for which is not shown . The FTP program provides a large amount of functionality such as renaming files deleting files and the like and supports multiple FTP protocols.

In this example the anomaly detection engine builds a list of locations in this example X locations and anomalies based on an AD method as implemented in the anomaly detection engine . An ECA manager builds a list of unallowed locations e.g. locations A through M based on indications of anomalies. Based on input from the ECA manager via commands the Connect button will be grayed out block for unallowed locations and connections to FTP servers are disallowed in these locations. In an exemplary embodiment the mechanism to grey out the box is contained in the instrumentation layer . However the decision logic that determines the box should be grayed out is in the AD layer e.g. anomaly detection module .

This example concerns a model e.g. ECA model created through observation. That is locations where FTP is used are observed and the ECA model is created based on the observations. In terms of an AD method and a policy configuration file these are linked in the policy configuration file by the ECA model . For example consider these series of operations in the FTP location anomaly example being described 

2. The anomaly detection engine creates an anomaly event and forwards an indication of the event to the ECA manager on client or on server respectively 

b Check specific conditions for event type result client reports GPS coordinates that are not within known areas 

c Trigger corresponding action based on matching condition or conditions result command is sent to application to disable upload button .

Another exemplary use for the instant invention is in the area of field testing of applications . An exemplary motivation for this use is that applications such as mobile apps are hard to lab test due to e.g. context and sensors. Furthermore large scale capture replay is infeasible. The idea was to detect untested behaviors as anomalies and to augment lab tests with field tests.

A case study was made with a tipping program a program that calculates tips based on amounts of bills . The application was not modified and was a mobile app . Random testing was performed to generate event traces. Behavior analysis was performed using a Finite Automaton built from lab testing. The algorithm kBehavior was used to detect untested event sequences.

Another example case study relates to failure detection. In this case layout failures from public issue trackers where the layout failures are hard to reproduce especially in an emulator. The layout analysis for a anomaly detection module includes logging according to a policy configuration file position dimensions of GUI elements and the AD method used is a Grubbs test against previous data. The anomaly detection module can therefore highlight mis positioned views via indications of the same. is an example of a mobile computing device where a calendar view does not auto fit to the screen size based on screen orientation. That is in the orientation the calendar correctly fits the screen size at least as per width of the screen but in the orientation the calendar does not correctly fit the screen size as per width of the screen. Using an appropriate policy configuration file e.g. and AD method the anomaly detection module can detect this mis positioned view and send an indication of the same to a server .

Referring to this figure is an example of a music application that has an anomaly of a vertical layout issue. Using an appropriate policy configuration file e.g. and AD method the anomaly detection module can detect this vertical layout issue and send an indication of the same to a server . In this example the UI window is presented to a user on the UI of a display of a mobile computing device . The entire portion of the UI window should be shown on the UI . However only the portion is shown on the UI . The other portion is off the screen and not shown on the UI . The indication may be the indication Window outside of screen range . This indication may also include data about the UI window or other data about the application such as Screen resolution A B and or Data on screen Bruce Springsteen We Shall Overcome The Seeger Sessions Jacob s Ladder .

One cause of this issue may be due to low resolution of the display of the platform e.g. mobile device . Another cause of this issue may be if album title is two lines long as shown in . The volume control is pushed off screen via vertical layout of the UI window by the application and the volume control cannot be manipulated. Using an appropriate policy configuration file e.g. and AD method the anomaly detection module can detect this vertical layout anomaly and send an indication of the same to a server . The indication in this example could additionally have other information such as screen resolution or display information e.g. what is being displayed for the album title and song .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

