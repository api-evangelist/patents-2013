---

title: Supplying notifications related to supply and consumption of user context data
abstract: Techniques are described for providing information about a current state that is modeled with multiple state attributes. In some situations, the providing includes receiving from a module a request related to the modeling of the current state with the multiple state attributes. In such situations, the providing further includes, without further intervention related to the request by the module, determining that the request cannot currently be satisfied, and indicating to the module that the request cannot currently be satisfied, monitoring at later times after the indicating to determine whether the request can be satisfied, and indicating to the module that the request can be satisfied if it is determined at one of the later times that the request can currently be satisfied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09559917&OS=09559917&RS=09559917
owner: Microsoft Technology Licensing, LLC
number: 09559917
owner_city: Redmond
owner_country: US
publication_date: 20130715
---
This application is a continuation of U.S. application Ser. No. 12 775 523 filed May 7 2010 now U.S. Pat. No. 8 489 997 which is a continuation of U.S. application Ser. No. 11 559 854 filed Nov. 14 2006 now U.S. Pat. No. 7 739 607 which is a continuation of U.S. patent application Ser. No. 09 879 339 filed Jun. 11 2001 now U.S. Pat. No. 7 203 906 which is a continuation of U.S. patent application Ser. No. 09 724 949 filed Nov. 28 2000 now U.S. Pat. No. 6 791 580 which is a continuation in part of U.S. patent application Ser. No. 09 216 193 entitled METHOD AND SYSTEM FOR CONTROLLING PRESENTATION OF INFORMATION TO A USER BASED ON THE USER S CONDITION and filed Dec. 18 1998 now U.S. Pat. No. 6 466 232 and a continuation in part of U.S. patent application Ser. No. 09 464 659 entitled STORING AND RECALLING INFORMATION TO AUGMENT HUMAN MEMORIES and filed Dec. 15 1999 now U.S. Pat. No. 6 513 046 all of which are hereby incorporated by reference in their entirety.

U.S. patent application Ser. No. 09 724 949 also claims the benefit of provisional U.S. Patent Application No. 60 194 222 entitled SUPPLYING NOTIFICATIONS RELATED TO SUPPLY AND CONSUMPTION OF USER CONTEXT DATA and filed Apr. 2 2000 and of provisional U.S. Patent Application No. 60 193 999 entitled OBTAINING AND USING CONTEXTUAL DATA FOR SELECTED TASKS OR SCENARIOS SUCH AS FOR A WEARABLE PERSONAL COMPUTER and filed Apr. 2 2000 both of which are hereby incorporated by reference in their entirety.

The following disclosure relates generally to computer based modeling of information and more particularly to modeling and exchanging context data such as for a wearable personal computer.

Computer systems increasingly have access to a profusion of input information. For example a computer may be able to receive instructions and other input from a user via a variety of input devices such as a keyboard various pointing devices or an audio microphone. A computer may also be able to receive information about its surroundings using a variety of sensors such as temperature sensors. In addition computers can also receive information and communicate with other devices using various types of network connections and communication schemes e.g. wire based infrared or radio communication .

Wearable personal computers or wearables can have even greater access to current input information. Wearables are devices that commonly serve as electronic companions and intelligent assistants to their users and are typically strapped to their users bodies or carried by their user in a holster. Like other computers wearables may have access to a wide variety of input devices. Moreover in addition to more conventional input devices a wearable may have a variety of other input devices such as chording keyboards or a digitizer tablet. Similarly a wearable computer may have access to a wide variety of sensors such as barometric pressure sensors global positioning system devices or a heart rate monitor for determining the heart rate of its user. Wearables also may have access to a wide variety of non conventional output devices such as display eyeglasses and tactile output devices.

Many applications executing on computers utilize data received by the computer from sensors or other input sources. For example a position mapping application for a wearable computer may utilize data received from a global positioning system device in order to plot its user s physical location and to determine whether that position is within a specified region. In this example the global positioning system device produces data that is consumed by the position mapping application.

In conventional wearable computer systems the position mapping application would be designed to interact directly with the global positioning system device sensor to obtain the needed data. For example the application may be required to instruct the device to obtain position information retrieve the information obtained by the device convert it to conventional latitude and longitude representation and determine whether the represented location is within the special region.

The need for such direct interaction between applications and sensors in order to obtain and process data has several significant disadvantages. First developing an application to interact directly with a particular sensor can introduce sensor specific dependencies into the application. Accordingly the application may need to be subsequently modified to be able to interact successfully with alternatives to that sensor provided by other manufacturers or even to interact successfully with future versions of the same sensor. Alternately the sensor could be developed to explicitly support a particular type of application e.g. via a device driver provided with the sensor which would analogously introduce application specific dependencies into the sensor.

Second direct interaction between the application and the sensor can give rise to conflicts between multiple applications that consume the same data. For example if the position mapping application was executing on the same wearable computer as a second application for determining the user s distance from home and the second application also used the global positioning system device the two applications interactions with the device could interfere with one another.

Third direct interaction between the application and the sensor can give rise to conflicts between multiple sensors that produce the same data. For example if the position mapping application was executing on a wearable computer that had access to both the global positioning system device and an indoor positioning system the application might well have trouble determining which device to use to determine the user s current position and or have trouble reconciling data produced by both devices.

Fourth rather than an application having to directly process observable data from the sensors and derive more abstract information itself it would be advantageous for the application to be able to rely on a separate programmatic entity that derives such abstract information and provides it to the application. For example it would be more convenient for the position mapping application to be able rely on a separate programmatic entity that determines the user s location and to then use that information to determine whether the user is in a special region.

Accordingly a facility for exchanging information between sensors and applications in a wearable computer system would have significant utility.

A software facility is described below that exchanges information between sources of context data and consumers of context data. In particular in a preferred embodiment a characterization module operating in a wearable computer system receives context information from one or more context servers or suppliers and provides that information to one or more context clients or consumers . This context information represents a particular context or state or condition of the wearable the user of the wearable the surrounding physical environment and or the available electronic data environment or cyber environment . In some embodiments the context is represented or modeled with a variety of attributes or variables each modeling a single aspect of the context. By facilitating the exchange of context information the facility reduces dependencies of context client applications on specific sensors and other input sources resolves conflicts between context client applications that consume the same context data resolves conflicts between multiple sensors or other input sources that produce the same data and isolates the generation of derived attributes from context client applications.

A context is modeled or represented with multiple attributes that each correspond to a specific element of the context e.g. ambient temperature location or a current user activity and the value of an attribute represents a specific measure of that element. Thus for example for an attribute that represents the temperature of the surrounding air an 80 Fahrenheit value represents a specific measurement of that temperature. Each attribute preferably has the following properties a name a value an uncertainty level units and a timestamp. Thus for example the name of the air temperature attribute may be ambient temperature its units may be degrees Fahrenheit and its value at a particular time may by 80. Associated with the current value may be a timestamp of Feb. 27 1999 13 07 PST that indicates when the value was generated and an uncertainty level of 1 degrees.

Context servers supply values for attributes by receiving and processing input information from sensors or other sources. Attribute values provided by a context server may either be measured or observed in that they are directly received from an input source or may instead be derived in that they are the result of performing processing on one or more measured attribute values. Indeed a derived attribute value may be produced by performing additional processing on one or more other derived attribute values. Context attributes or condition variables are discussed in greater detail in both U.S. patent application Ser. No. 09 216 193 filed Dec. 18 1998 and entitled METHOD AND SYSTEM FOR CONTROLLING PRESENTATION OF INFORMATION TO A USER BASED ON THE USER S CONDITION and provisional U.S. Patent Application No. 60 193 999 filed Apr. 2 2000 and entitled OBTAINING AND USING CONTEXTUAL DATA FOR SELECTED TASKS OR SCENARIOS SUCH AS FOR A WEARABLE PERSONAL COMPUTER which are both hereby incorporated by reference.

When the characterization module obtains an attribute value from a context server it caches the value for use when responding to future requests from context clients for a value of the attribute. Thus when the characterization module receives a request from a context client for the value of an attribute the characterization module determines whether it has a cached value for the attribute and if so whether the value is sufficiently accurate e.g. the value does not have too high of an uncertainty and or sufficiently recent e.g. the value is not too old . If the value is not sufficiently accurate or recent the characterization module requests and receives an updated value for the attribute from the context server that supplied the value. When the characterization module has a sufficiently accurate and recent value it supplies the value to the context client. The determination of whether a value is sufficiently accurate and recent can be made in a variety of ways such as by using thresholds for recency or uncertainty that can be specified by the context client during the request by a context server for all values of an attribute or for a specific attribute value or by the characterization module.

In some embodiments two or more different context servers may supply to the characterization module their own distinct values for a single attribute. For example a first context server can supply a value for a user.location attribute based on data received from a global positioning system device while a second context server can supply a value for the user.location attribute based on data received from an indoor positioning device. Alternately the first and second context servers could use the same input information when determining the value for a single attribute but could use different methods to perform the determining and could thus arrive at different values. When multiple content servers supply values for the same attribute each of the context servers is said to supply values for a separate instance of the attribute. The characterization module preferably provides a variety of different approaches called mediators for determining what attribute value to provide when a context client requests a value for an attribute that has more than one instance.

For attributes with multiple instances the characterization module performs similar processing to that described above. In particular the characterization module can maintain a unique cached value for each attribute instance. If the characterization module receives a request for a value of a particular attribute instance the request is handled as discussed above. If the characterization module instead receives a attribute value request for an attribute with multiple instances and the request does not specify a particular instance the characterization module checks the accuracy of each cached attribute instance and requests an updated value for any instance with a value that is not sufficiently accurate. If multiple sufficiently accurate values are available the characterization module produces a mediated value that is returned to the context client. The mediator to be used for the mediation can be selected in a variety of ways such as being a default mediator of the characterization module being requested by a context client being specified by one or more of the context servers or being chosen by the characterization module.

The manner in which data e.g. sensor data and attribute values flows to and from the characterization module can vary. In some embodiments a context client may receive an attribute value only after an explicit request while in other embodiments a context client may be forwarded attribute values without a request e.g. if the client had previously expressed an interest in receiving values for the attribute and a value has just become available . Similarly in some embodiments context servers may supply attribute values only when requested while in other embodiments the context servers may supply attribute values without a request e.g. if sensor input information is received from which a new value is produced . Request based processing is a type of pull data flow model and some forms of processing that occur without explicit requests are referred to as a push or event driven data flow model.

The manner in which the characterization module communicates with the context clients and context servers can also vary. In some embodiments context servers and context clients perform various interactions with the characterization module e.g. supplying attribute values and requests by calling functions provided by the characterization module e.g. via Component Object Module interfaces . These functions are said to collectively comprise an application programming interface or API to the characterization module. In alternate embodiments such interactions can be performed using other mechanisms such as passing messages or objects. Those skilled in the art will appreciate that an API can be created to support a pull data model a push data model or a hybrid system including both push and pull functionality.

As one example of an API each executing context server may register with the characterization module by calling a RegisterContextServer function and supplying parameters to identify itself. If a particular context server is not executing a context client that desires a value of an attribute or attribute instance supplied by the context server may cause the context server to be launched by using a LaunchContextServer function. After registration a context server may indicate an ability to supply values for an attribute to the characterization module by using a CreateAttributeInstance function. A particular context server can provide values for a number of different attributes by calling the CreateAttributeInstance function multiple times. In order to consume values of an attribute a context client may call a RegisterContextClient function in order to identify itself and one or more attributes whose values it seeks to consume. To assist in selecting one or more attributes a context client may also call a EnumerateAttributes function to obtain a list of the attributes available from the characterization module. In order to actually retrieve an attribute value a context client may call a GetAttribute function and use parameters to identify the attribute and any attribute processing that should be applied such as a specific mediator to be used if values are available for multiple instances of the attribute. For attributes that have multiple instances in the characterization module a context client may also call a GetAllAttributeInstances function to obtain a value for each instance of the attribute. To force a particular context server to reevaluate all of its attribute instances a context client may call a CompleteContextServerEvaluation function. Also to retrieve values for attributes that model aspects of the configuration of the characterization module a context client or other program may call a GetCharacterizationModuleAttribute function. A context client that consumes a particular attribute value may also create a condition in the characterization module not to be confused with the current modeled condition of the user or the environment that is represented by various attribute values for testing that attribute by calling a CreateCondition function. Once a context client has created a condition it can evaluate the condition by calling an EvaluateCondition function using parameters to identify the condition and may also proceed to create a condition monitor that monitors the condition and notifies the context server when the condition is satisfied by calling a CreateConditionMonitor function. To suspend operation of a created condition monitor a context server may call a StopConditionMonitor function and to resume its operation may call a StartConditionMonitor function. The context server may remove a condition monitor that it created by calling a RemoveConditionMonitor function and correspondingly may remove a condition that it created by calling a RemoveCondition function. A context client may unregister with the characterization module by calling an UnregisterContextClient function. A context server may similarly remove attribute instances that it has registered by calling a RemoveAttributeInstance function. Before it does however it may first call a CheckAttributeInstanceDependencies function to determine whether any context clients currently depend upon that attribute instance. A context server may unregister with the characterization module by calling an UnregisterContextServer function. A set of API functions are discussed in greater detail in both U.S. patent application Ser. No. 09 541 328 filed Apr. 2 2000 and entitled INTERFACE FOR EXCHANGING CONTEXT DATA and provisional U.S. Patent Application No. 60 194 123 filed Apr. 2 2000 and entitled SUPPLYING AND CONSUMING USER CONTEXT DATA which are both hereby incorporated by reference.

In some embodiments it may also be useful to store attribute value information in a more permanent fashion than a temporary cache. For example it may be useful for the characterization module to keep a log of all attribute values received and sent or of all interactions with context clients and context servers. Alternately it may be useful to record the current values of some or all of the attributes and attribute instances at the same time such as to capture a complete model of the current context. Storing attribute value information is discussed in greater detail in both U.S. patent application Ser. No. 09 464 659 filed Dec. 15 1999 and entitled STORING AND RECALLING INFORMATION TO AUGMENT HUMAN MEMORIES and U.S. patent application Ser. No. 09 541 326 filed Apr. 2 2000 and entitled LOGGING AND ANALYZING COMPUTER USER S DATA which are both hereby incorporated by reference. Other uses of attribute value information are described in provisional U.S. Patent Application No. 60 194 000 filed Apr. 2 2000 and entitled SOLICITING PRODUCT INFORMATION BASED ON THE USER S CONTEXT in provisional U.S. Patent Application No. 60 194 002 filed Apr. 2 2000 and entitled AUTOMATED SELECTION OF UNSOLICITED INFORMATION BASED ON A USER S CONTEXT and in provisional U.S. Patent Application No. 60 194 758 filed Apr. 2 2000 and entitled CREATING PORTALS BASED ON THE USER S CONTEXT each of which are hereby incorporated by reference.

The wearable computer has a variety of user worn user input devices including a microphone a hand held flat panel display with character recognition capabilities and various other user input devices . Similarly the computer has a variety of user worn output devices that include the hand held flat panel display an earpiece speaker an eyeglass mounted display and a tactile display . In addition to the various user worn user input devices the computer can also receive information from various user sensor input devices and from environment sensor input devices including video camera . The characterization module can receive and process the various input information received by the computer either directly or from context servers that process the input information and generate attribute values and can supply the received information to context clients or directly to the user by presenting the information on the various output devices accessible to the computer.

In the current environment computer is accessible to a computer e.g. by being in line of sight wireless proximity or by being reachable via a long distance communication device such as a cellular phone which also has a variety of input and output devices. In the illustrated embodiment the computer is non portable although the body mounted computer of the user can similarly communicate with a variety of other types of computers including body mounted computers of other users. The devices from which the non portable computer can directly receive information include various user input devices and various user sensor input devices . The non portable computer can output information directly to a display a speaker an olfactory device and a printer . In the illustrated embodiment the body mounted computer can communicate with the non portable computer via a wireless transmission medium. In this manner the characterization module can receive information from the user input devices and the user sensor devices after the information has been transmitted to the non portable computer and then to the body mounted computer. Alternately the body mounted computer may be able to directly communicate with the user input devices and the user sensor devices as well as with other various remote environment sensor input devices without the intervention of the non portable computer . Similarly the body mounted computer may be able to supply output information to the display the speaker the olfactory device and the printer either directly or via the non portable computer and directly to the telephone . As the user moves out of range of the remote input and output devices attribute values of the characterization module can be updated to reflect that the remote devices are not currently available.

Information that is received from the various input devices allows the characterization module or an application such as a context server not shown executing on the computer to monitor the user and the environment and to maintain a model not shown of the current context. In some embodiments the model may be represented in a single location e.g. the current cached values of all of the context attributes and attribute instances while in other embodiments the model may be distributed. Such a model can be used by various applications such as context clients for a variety of purposes. A model of the current context can include a variety of context attributes that represent information about the user the computer and the user s environment at varying levels of abstraction. For example information about the user at a low level of abstraction can include raw physiological data e.g. heart rate and EKG and geographic information e.g. location and speed while higher levels of abstraction may attempt to characterize or predict the user s physical activity e.g. jogging or talking on a phone emotional state e.g. angry or puzzled desired output behavior for different types of information e.g. to present private family information so that it is perceivable only to myself and my family members and cognitive load i.e. the amount of attention required for the user s current activities . Background information which changes rarely or not at all can also be included such as the user s age gender and visual acuity. The model can similarly hold environment information at a low level of abstraction such as air temperature or raw data from a motion sensor or at higher levels of abstraction such as the number and identities of nearby people objects user mood and locations. The model of the current context can include information added explicitly from other sources e.g. application programs as well as user specified or system learned defaults and preference information.

Those skilled in the art will appreciate that computer systems and as well as their various input and output devices are merely illustrative and are not intended to limit the scope of the present invention. The computer systems may contain additional components or may lack some illustrated components. For example the characterization module could be implemented on the non portable computer with the body mounted computer replaced by a thin computer client such as a transmitter receiver for relaying information between the body mounted input and output devices and the non portable computer. Alternately the user may not wear any devices or computers.

In addition the body mounted computer may be connected to one or more networks of other devices through wired or wireless communication means e.g. wireless RF a cellular phone or modem infrared physical cable a docking station etc. either with or without support from other computers such as the computer . For example the body mounted computer of a user can make use of output devices in a smart room such as a television and stereo when the user is at home if the body mounted computer is able to transmit information to those devices via a wireless medium or if a cabled or docking mechanism is available. Alternately kiosks or other information devices can be installed at various locations e.g. in airports or at tourist spots to transmit relevant information to body mounted computers within the range of the information device. Those skilled in the art will also appreciate that specialized versions of the body mounted computer characterization module context clients and or context servers can be created for a variety of purposes.

In addition in some embodiments a pre defined set of attributes are available for use by context servers and context clients. This allows a common meaning to be shared between context clients and context servers as to those attributes and their values and can also allow a context client to request a pre defined attribute without having to determine whether the attribute has been created by a context server supplying values for the attribute. In one embodiment a plain language hierarchical taxonometric attribute nomenclature is used to name attributes such as the example attribute nomenclature illustrated in . The names within the nomenclature are preferably specific so that there is no ambiguity as to what they represent and the ability to extend the nomenclature by adding new attribute names that conform to the hierarchical taxonomy of the nomenclature is preferably supported. The nomenclature preferably has attribute names relating to a variety of aspects of the user.

For example as is illustrated in the nomenclature preferably has a variety of types of attribute names including attribute names relating to the user s location such as user.location.latitude user.location.building and user.location.street attribute names relating to the user s movement such as user.speed and user.direction attribute names for various user moods such as user.mood.happiness user.mood.anger and user.mood.confusion attribute names for user activities such as user.activity.driving user.activity.eating and user.activity.sleeping attribute names for user physiology values such as user.physiology.body temperature and user.physiology.blood pressure attribute names for similar attributes of people other than the user such as person.John Smith.mood.happiness attribute names for aspects of the computer system or platform such as for aspects of the platform s user interface UI capabilities e.g. platform.UI.oral input device availability and platform.UI.visual output device availability and central processing unit CPU e.g. platform.cpu.load and platform.cpu.speed attribute names for aspects of the local environment such as environment.local.temperature and environment.local.ambient noise level attribute names for remote environments such as environment.place.chicago.time and environment.place.san diego.temperature attribute names relating to a future context such as those that predict or estimate a situation e.g. environment.local.next week.temperature attribute names relating to specific applications such as an email application e.g. application.mail.available application.mail.new messages waiting and application.mail.messages waiting to be sent etc. In this manner the attribute nomenclature used by the facility provides effective names for attributes relating to the user the computer system and the environment. Additional attributes are illustrated in and illustrates an alternate hierarchical taxonomy related to context such that various attributes could be added for each of the illustrated categories. Those skilled in the art will appreciate that for both and other categories and attributes could be added and existing categories and attributes could be removed or could have alternate names.

Software modules and are said to be context clients because they consume attribute values. For example context client consumes user.location attribute values. It can be seen that certain software modules may act both as a context server and as a context client. For example software module is both a context server and a context client as it provides values for the user.in region attribute and consumes values for user.location attribute . It can also be seen that a context client can consume values for more than one attribute. For example context client consumes values for both user.in region attribute and user.elevation attribute . To determine which attributes are currently available any of the context clients may request that the characterization module enumerate the available attributes. In response to such a request the characterization module would enumerate the user.location attribute the user.elevation attribute and the user.in region attribute.

In the foregoing the facility is described as being implemented using a characterization module that is called by context servers and context clients that caches attribute values and that maintains status information about the operation of context servers and context clients. In an alternative preferred embodiment however the facility operates without the use of such a characterization module. In this embodiment context servers communicate directly with context clients.

In additional preferred embodiments the facility may operate with a partial characterization module. Such a partial characterization module may include various combinations of the functionalities of routing communication between context servers and the context clients that consume their attribute values caching attribute values enumerating available attributes and providing attribute mediation.

In additional preferred embodiments the facility may provide a characterization module that implements a push information flow model in which each time an attribute value provided by a context server changes the new value is automatically provided to context clients. In further preferred embodiments the facility provides a characterization module that implements a pull information flow model in which attribute values are only obtained by the characterization module from the context servers when they are requested by a context client. In additional preferred embodiments characterization modules are provided that support a variety of other information flow models.

After step or if it was determined in step that another CM is not being swapped out the routine continues to step to receive an indication from a user or a message from a CC or CS. The routine then continues to step where it performs the Notification Processing subroutine to notify any CCs or CSes about the received message or user indication if appropriate. As is explained in greater detail below CCs and CSes can submit notification requests so that they will be notified by the CM upon a particular type of occurrence. Such notification requests could include occurrences such as when an attribute value changes when a particular CC or CS registers or unregisters when values for an attribute become available or unavailable e.g. due to registration or unregistration when a CC registers or unregisters to receive values for an attribute when the availability of particular input output devices changes or other computer system features change when a package of related themed attributes becomes available or unavailable for changes in CM internal status e.g. a change in the default mediator etc. In addition the notification requests can be created based not only on explicit requests but also after the occurrence of a particular type of event e.g. if a CC requests a value for an attribute for which no CSes are currently supplying values a notification request could be automatically created to alert the CC if a CS later registers to supply values for the attribute . Moreover additional information about the notification requests can be supplied e.g. a number of times that the submitter wants to receive notifications for the request or an expiration date after which the notification will be removed or become inactive .

After step the routine continues to step to determine if a registration or unregistration message was received. If so the routine continues to step to execute the Dynamically Specify Available Clients Servers and Attributes subroutine. Thus CCs and CSes can register and unregister dynamically as they become available or unavailable and can similarly modify the status of the attributes that they have registered with the CM. If a registration or unregistration message was not received in step the routine instead continues to step to determine if an attribute value or a request for an attribute value has been received from a CC or CS. If so the routine continues to step to execute the Process Attribute Value Or Value Request Message subroutine. This subroutine will satisfy requests for attribute values if possible e.g. by supplying a cached value or requesting one or more CSes to supply the value and will return the requested value or an error message. Similarly when attribute values are pushed to the CM from a CS the CM will send the values if appropriate to CCs that have registered an interest in receiving values for the attribute.

If an attribute value or an attribute value request has not been received from a CC or CS in step the routine instead continues to step to determine if a request has been received to establish or modify a condition that monitors attribute values or other conditions or to establish or modify a condition monitor. If so the routine continues to step to process the request. As described previously conditions and condition monitors can be created removed and have their operation suspended e.g. by deactivating them or resumed e.g. by activating them .

If a condition related request was not received in step the routine continues instead to step to determine if a message related to one or more other executing CMs has been received and if so continues to step to process the message by executing the Process Distributed Characterization Module Message subroutine. Characterization modules can interact for a variety of reasons as explained in greater detail below. If a message related to another CM has not been received the routine continues instead to step to determine if a request has been received to establish or modify a notification request. If so the routine continues to step to process the notification related request. If a notification related request was not received the routine continues instead to step to determine if a shutdown message was received e.g. from a user . If so the routine continues to step to perform shutdown operations e.g. notifying all registered CCs and CSes to unregister or saving current state information and then continues to step and ends. If it was instead determined that a shutdown message was not received the routine continues to step to determine if another supported operation has been requested. If so the routine continues to step to perform the other operation and if not the routine continues to step to send an error message to the requester. For example other types of operations may be a request to receive information about all available attributes about all attributes available from a particular CS about which CCs are receiving values for a particular attribute about properties and property values associated with attributes and attribute instances to launch or shutdown a CC or CS to receive information about an attribute taxonomy to force a CS to reevaluate the values for all its registered attributes to change internal CM information e.g. the default mediator to provide information about available packages of related themed attributes to provide information about available computer resources such as input output devices etc. After steps or the routine returns to step . In other embodiments additional types of functionality may be available or illustrated functionality may not be available. For example in some embodiments any CC or CS may need to satisfy security requirements e.g. by verifying their identity as an authorized module before being allowed to request information or functionality from the CM or to provide information to the CM.

The subroutine then continues to step where it determines if any of the notification requests have been satisfied. If not the subroutine continues to step and returns but if so the subroutine continues to step to select the next satisfied notification request beginning with the first. The subroutine then continues to step to send a notification to the supplier of the request that the request was satisfied and can include additional information about the occurrence that satisfied the request. The subroutine then continues step to determine whether the notification request should be removed e.g. if it was defined as a one time request or has expired . If so the subroutine continues to step to remove the request and if not the subroutine continues to step to determine if the notification request should be deactivated for the current time e.g. so that a similar occurrence can be monitored at a later time . After steps or or if the notification request was not deactivated the subroutine continues to step to determine if there are more satisfied notification requests. If so the subroutine returns to step and if not the subroutine continues to step and returns. In addition the subroutine could periodically check the various stored notification requests e.g. as a background process to determine if their status should be modified e.g. activated deactivated or removed .

If the message is determined to be related to a CC the subroutine continues to step to determine if the message is to register the CC. If so the subroutine continues to step to register the new client if possible e.g. if all necessary information has been provided and there is not another registered CC with the same unique identifier . If it is determined in step that an error occurred during the registration attempt the subroutine continues to step to send an error message to the submitter. If no error occurred the subroutine instead continues to step to determine if the registration request includes one or more attributes of interest to be registered for the client. If so the subroutine continues to step to register those attributes. If it was instead determined in step that the received message was not to register the client the subroutine continues to step to determine if the message was to unregister the client. If so the subroutine continues to step to unregister the client and then continues to step to determine if any registered attributes remain for the client. If so the subroutine continues to step to unregister each of those attributes.

If it was instead determined in step that the received message was related to a CS the subroutine continues to step to determine whether the message is to register the CS. If so the subroutine continues to step to register the new server if possible. It is determined in step that an error occurred during the registration attempt the subroutine continues to step to send an error message to the submitter. If no error occurred however the subroutine instead continues to step to determine if the registration request includes one or more attributes to register for which the server is available to supply values. If so the subroutine continues to step to register those attributes. If it was instead determined in step that the received message was not to register the CS the subroutine continues to step to determine if the message was to unregister the server. If so the subroutine continues to step to unregister the server and then continues to step to determine if any registered attributes remain for the server. If so the subroutine continues to step to unregister those attributes.

If it was instead determined in step that the received message was related only to one or more attributes and not to a CC or CS the subroutine continues to step to determine whether the message is to register those attributes. If so the subroutine continues to step to select the next attribute beginning with the first. The subroutine then continues to step to determine if at least one instance of the attribute is currently registered. If so the subroutine continues to step to register a new instance of the attribute and if not the subroutine continues to step to register the first instance for the attribute. After steps or the subroutine continues to step to determine if there are more attributes to be registered and if so returns to step . If it is instead determined in step that the received message was not to register the attributes the subroutine continues to step to determine if the message was to unregister the attributes and if so continues to step to unregister each attribute. After steps or or if the determination was made in the negative for one of steps or the subroutine continues to step and returns. As discussed previously a variety of other types of optional information can additionally be supplied when registering CCs CSes or attributes e.g. various properties for the attribute .

If it is determined in step that an instruction about another CM has been received the subroutine continues to step to determine if the instruction is to register or unregister as a CC or CS of the other CM. If so the subroutine continues to step to rename any attributes in the request if necessary. For example if a current CM wants information about an attribute user.mood.happiness for its own user from another CM CM will have to modify the name of the attribute e.g. to CM1.user.mood.happiness it requests since CM s attribute user.mood.happiness will refer to the user of CM . The same will be true for a variety of other attributes that specify attributes relative to the CM but not to attributes with absolute specifications e.g. person.ABC.mood.happiness . After step the subroutine then continues to step to send a request to the other CM to reflect the request using the renamed attributes with the other CM to perform the registration or unregistration.

If it is instead determined in step that the instruction was not to register or unregister the subroutine continues to step to determine whether the instruction is to send an attribute value or an attribute value request to the other CM. If so the subroutine continues to step to rename any attributes in the request if necessary and then continues to step to determine whether a request or an attribute value is being sent. If an attribute value is being sent the subroutine sends the value to the other CM in step and if a request is being sent the subroutine sends the request in step . After step the subroutine continues to step to receive the requested value or an error message and if the value is received rather than an error message the subroutine sends the received value to the requester at step .

If it is instead determined in step that the received instruction is not to send an attribute value or an attribute value request the subroutine continues to step to determine if a group wide attribute is to be modeled e.g. troop morale for a group of soldiers that would require information for many or all of the soldiers . If so the subroutine continues to step to request attribute values from the other CMs that are needed for the modeling and then continues to step to receive the requested values or error messages. If the necessary values are received to perform the modeling in step the subroutine determines the value of the group wide attribute and in step sends the value to the requester. In alternate embodiments any such modeling of attributes may be performed only by CSes with the CM merely requesting values from other CMs as instructed and supplying the received values to the appropriate CS.

If it is instead determined in step that the received instruction is not to model a group wide attribute the subroutine continues to step to determine if the instruction is to aggregate information from subordinate CMs e.g. in a hierarchical organization such as a business or the military the hierarchy of users can be reflected in a hierarchy of their CMs or specialized CMs e.g. a CM specialized to monitor a user s health and to detect health problems . If so the subroutine continues to step to request the information from the other CMs as needed and continues to step to receive the requested information or error messages. If the necessary information is received in step the subroutine aggregates the information and in step sends the aggregated information to the requester. In alternate embodiments any such aggregating of information may be performed only by CSes with the CM merely requesting information from other CMs as instructed and supplying the received values to the appropriate CS.

If it is instead determined in step that the received instruction is not to aggregate information the subroutine continues to step to determine if the received instruction is to use the processing capabilities of another computer or CM. If so the subroutine continues to step to request the other computer or CM to perform an indicated task. The subroutine then continues to step where it receives the results of the task and uses those results as if the task have been performed locally. If it is instead determined in step that the received instruction is not to use the processing abilities of another computer the subroutine continues to step to determine if the received instruction is to send information to a module such as a thin client. If so the subroutine continues to step to send the indicated information e.g. from a CC and if not the subroutine continues to step to perform another task as indicated. For example other types of tasks could be to instruct another CM to swap itself out or to modify its internal state e.g. to change a default mediator or to add a new mediator .

If it was instead determined at step that information from another CM has been received the subroutine continues to step to determine if a registration or unregistration request has been received. If so the subroutine continues to step to rename any attributes if necessary and then continues to step to resubmit the request as if from a CC or a CS using the renamed attributes. If the information was not a registration or unregistration request the subroutine continues to step to determine if an attribute value or an attribute value request has been received. If so the subroutine continues to step to rename the attributes if necessary and then continues to step to determine whether an attribute value or an attribute value request has been received. If an attribute value has been received the subroutine continues to step where it resubmits the value as being from a CS and if not the subroutine continues to step where it resubmits the attribute value request as being from a CC. After step the subroutine continues to step where it receives the requested value or an error message and in step sends the received value to the requesting CM if an error message was not received.

If it was instead determined in step that an attribute value or attribute value request was not received the subroutine continues to step to determine if the received information was an indication to modify the internal state of the CM. If so the subroutine continues to step where it modifies the state as indicated. If the received instruction was not to modify the internal state the subroutine continues to step to determine if the request is to swap the CM out to be replaced by the other requesting CM. If so the subroutine continues to step to send the current state information from the CM to the requesting CM. In addition the CM could perform other tasks if necessary such as updating the currently registered CCs and CSes so that they now will communicate with the other CM. The subroutine then continues to step to wait for an indication from the other CM to exit and after receiving the indication submits a shutdown request in step . If the received instruction was not to swap out the subroutine continues to step to perform the other task as indicated if appropriate. After steps or the subroutine continues to step and returns.

If a value was received the subroutine continues to step to execute the Process Received Attribute Value subroutine such as to store the value and to process additional associated information received about the value. The subroutine next continues in the illustrated embodiment to push the received value or a related value to clients as appropriate. Those skilled in the art will appreciate that in other embodiments such values may merely be cached or otherwise stored until requested by a client. Alternately even if received values are not generally pushed to clients in other embodiments such values could be pushed to clients in limited circumstances such as an update to a related value that had previously been sent to a client when the newly received value is more accurate.

In the illustrated embodiment the subroutine continues to step to determine whether there are any previously specified requests or indications of interest related to the received value that would cause the received value or a related value to be pushed to one or more clients. If it is determined in step that there are any such requests or indications the subroutine continues to step to determine if there are multiple attribute instance values available that meet the appropriate criteria if any are specified to satisfy the requests or indications. For example a default or specified threshold for the freshness of values could be used as a criteria. If there are multiple values the subroutine continues to step to execute the Mediate Available Values subroutine and produce a mediated value from the multiple available values and in step selects the mediated value produced by the subroutine. If it was instead determined in step that there are not multiple attribute instance values available for the received value the subroutine continues to step to select the received value. After steps or the subroutine continues to step to select the next request of the identified requests beginning with the first request. The subroutine then continues to step to execute the Push Selected Attribute Value To Client subroutine for the selected request and then continues to step to determine if there are more identified requests. If so the subroutine returns to step to select the next request.

If it was instead determined in step that a request for a value was received the subroutine continues to step to identify all attribute instances that match the request e.g. that satisfy one or more criteria for the value that are specified with the request . The subroutine then continues to step to determine if there are any such instances and if not continues to step to send an error message to the requester. In the illustrated embodiment the subroutine next pulls current values for the identified attribute instances from servers as appropriate. Those skilled in the art will appreciate that in other embodiments only those values that have previously been received and stored may be supplied to clients. Alternately even if current values are not generally pulled from servers in other embodiments such values could be pulled from servers in limited circumstances such as when explicitly requested by a client.

In the illustrated embodiment if it is determined in step that at least one attribute instance is identified the subroutine continues to step to select the next such instance beginning with the first. The subroutine in step then determines if a new value is needed for the selected instance e.g. the available value does not meet some specified criteria such as an accuracy threshold specified by the requesting client . If so the subroutine continues to step to execute the Pull Attribute Value From Server subroutine. The subroutine in step next waits for a value or error message response from the server and determines if a value is received. If a value is received the subroutine then continues to step to execute the Process Received Attribute Value subroutine. After step or if it was determined in step that the instance does not need a new value or in step that a new value was received the subroutine continues to step to determine if there are more instances identified. If so the subroutine returns to step to select the next such instance and if not continues to step to determine if there are multiple values now available for the request that meet any relevant criteria. While all identified attribute instance values that match the request are used in the illustrated embodiment in other embodiments a different or additional selection process for the values could be used. For example information about the various servers that can supply the attribute instance values may be available e.g. dynamically and if so only certain of the servers could be selected based on the information with only the values from those servers being used.

If it is determined in step that there are multiple values available the subroutine continues to step to execute the Mediate Available Values subroutine to produce a mediated value from the multiple available values and in step sends the produced mediated value and any additional information about the value e.g. properties an associated uncertainty value an indication of the server that produced the value an indication of the mediator used to produce the value etc. to the requester. If it was instead determined in step that there are not multiple values available the subroutine continues to step to determine if a single value is available and if not continues to step to send an error message to the requester. If it is instead determined that there is a single value available the subroutine continues to step and sends the value and any additional information to the requester. After steps or or if it was determined in step that there were no requests identified or in step that there were no more requests the subroutine continues to step and returns.

After step or if it was instead determined that additional information about the value was not received from the server the subroutine continues to step to determine whether values for the attribute are being cached or otherwise temporarily stored. If so the subroutine continues to step to cache the received value as well as any additional information received. Those skilled in the art will appreciate that the length of time used for caching can vary in a variety of ways such as based on the type of information or for a particular attribute. After step or if it was instead determined that values are not being cached for the attribute the subroutine continues to step to determine if values for the attribute are being stored in a long term manner e.g. being logged . If so the subroutine continues to step to store the received value as well as any additional information received.

After step or if it was instead determined in step that values are not being stored for the attribute the subroutine continues to step to determine if the value and or any additional information about the value triggers any active stored conditions. In step if there are any such conditions the subroutine continues to step to select the next such condition beginning with the first. After step the subroutine continues to step to send a message to the entity associated with the condition e.g. a client that created the condition to indicate that the condition is satisfied. After step the subroutine continues to step to determine if the condition should now be removed. If so the subroutine continues to step to remove the condition and if not the subroutine continues to step to determine if the condition should now be deactivated. If so the subroutine continues to step to deactivate the condition. After steps or or if it was instead determined in step that the condition is not to be deactivated the subroutine continues to step to determine if there are more triggered conditions. If so the subroutine returns to step to select the next such condition. After step or if it was instead determined in step that there were not any triggered conditions or in step that there were no more triggered conditions the subroutine continues to step and returns.

In the illustrated embodiment attribute values are received by the characterization module from servers either when the characterization module requests a new value from the server or when the server pushes a new value to the characterization module. In some embodiments in which a server has previously sent an attribute value to the characterization module in response to a request the server may later send updated values for the attribute to the characterization module without a later request from the characterization module such as if a more accurate or updated value is obtained by the server. In addition in other embodiments servers could provide other types of information that could be received and processed by the characterization module. In particular a server could provide a variety of types of meta information about attribute values to the characterization module such as information about a technique used to generate a value or an indication that a new value is available without sending the value until requested.

In addition uncertainty of an attribute value can be indicated in a variety of ways. An example of an uncertainty specification is as follows. For each attribute instance there is a finite likelihood that the real quantity being measured is not the same as the value being expressed. For example the speedometer of a car may show 30 mph when the true instantaneous speed is 32.56 mph. There are numerous factors that may give rise to these discrepancies including the following precision of measuring apparatus conversion of continuous quantities to discrete values in the measurement process random fluctuations temporal variation systematic errors and measurement latency. Since different measured quantities have different sources of uncertainty it is impossible to foresee and account for each individually. It is therefore helpful to express the overall effects with a general characterization of uncertainty. One type of uncertainty values represent the cumulative effects of all possible discrepancy sources. These uncertainty values may conform to a single universal definition so that attribute mediators and clients can make effective use of them. Thus the following definition of uncertainty which is based upon the definition of standard deviation for random fluctuations about a mean value could be used for numeric values 

As with uncertainty a value timestamp can be indicated in a variety of ways. An example of a timestamp specification is as follows. Attribute values may be thought of as representations of a particular quantity at a point in time. Often this time is not proximate to that of use so it can be useful to provide the proper timestamp along with the value. One version of a timestamp is defined as follows 

The timestamp represents the moment at which the associated value would have been valid had it been measured directly at that moment. This definition results in some attributes having timestamps that do not correspond to the time at which their values were calculated. For instance an attribute that represents the acceleration of the user can be calculated by looking at the change in velocity over a period of time. The necessary computations may further delay the availability of the acceleration value. This timestamp is thus specified to represent the time at which the acceleration was most valid which in this case could be the middle of the time period during which the velocity was measured.

Other types of additional information related to an attribute value can include history information e.g. frequency of past use and past popularity information an indication of the supplier of the attribute indications of equivalent attributes e.g. for mediation purposes or if a value for this attribute is not available at a later time indications of clients that have registered for this attribute or consumed values for the attribute descriptions of clients in order to track statistics information to be used to evaluate characterization module efficiency and or to facilitate process optimization and indication of a verification of accuracy e.g. from a third party or of the value generation technique that was used a consumer rating or reputation based on input from other clients e.g. efficiency or reliability a cost to use the value e.g. an actual price or an amount of time needed to retrieve or process the value future availability of the attribute value e.g. how intermittent additional values may be a version of the attribute etc.

The subroutine illustrated in begins in step where additional information about an attribute value is received. The subroutine continues to step to determine if a timestamp is received and if so continues to step to associate the timestamp information with the received value. After step or if it was instead determined that a timestamp is not received the subroutine continues to step to determine if uncertainty or other accuracy information is received and if so continues to step to associate that information with the received value. After step or if it was instead determined that uncertainty or other accuracy information is not received the subroutine continues to step to determine if accuracy decay information e.g. the rate at which the accuracy of the value changes over time is received and if so continues to step to associate that information with the received value. After step or if it was instead determined that accuracy decay information is not received the subroutine continues to step to determine if information indicating that the value is a constant is received and if so continues to step to associate that information with the received value. After step or if it was instead determined that constant related information is not received the subroutine continues to step to determine if information about which clients are to have access to the supplied value is received and if so continues to step to associate that information with the received value so that client access to the attribute value is so restricted. After step or if it was instead determined that client access information is not received the subroutine continues to step to associate any other received additional information with the received value and then continues to step and returns. Those skilled in the art will appreciate that the various types of additional information can be associated with the received value in a variety of ways such as by using a data structure to represent a received value that includes elements for the various types of associated information.

The subroutine begins at step where an indication of the values available for the mediation are received. The subroutine then continues to step to determine if a requester of the mediated value indicated a mediator to be used and if so continues to step to select that mediator. If it is instead determined that the requester did not indicate a mediator to be used the subroutine continues to step to determine if a supplier of one or more of values being mediated indicated a mediator to be used and if so continues to step to select that mediator. If it is instead determined that a supplier did not indicate a mediator to be used the subroutine continues to step to determine if a default mediator is available and if so continues to step to select that mediator. If it is instead determined that a default mediator is not available the subroutine continues to step to determine the mediators that are available to be used and then in step selects one of the available mediators. After steps or the subroutine continues to step to apply the selected mediator to the available values in order to select one or the available values or to generate a related value based on the available values. The subroutine then continues to step to return the mediated value and returns. Those skilled in the art will appreciate that in other embodiments mediators could be identified and or obtained in other manners such as by being specified by third parties that are not acting as a client server or characterization module.

If information has been received the routine continues to step to determine if information about the satisfaction of a notification request has been received and if so continues to step to process the notification satisfaction information and to take appropriate action. If notification information has not been received the routine continues to step to determine if information about the satisfaction of a condition has been received and if so continues to step to process the condition satisfaction information and to take appropriate action. If condition information has not been received the routine continues to step to determine if a status message from the CM has been received e.g. that a particular CS or a particular attribute has been unregistered and if so continues to step to process the status information and to take appropriate action. If a status message has not been received the routine continues to step to determine if an attribute value has been pushed to the CC. If not the routine continues to step to process the other information that has been received and if so continues to step to determine if additional information related to the value has also been received. If additional information has been received the subroutine continues to step to process the value and the additional information and if not the routine continues to step to process the value.

If it was instead determined in step that an instruction was received the routine continues to step to determine if the instruction is to send a notification related request e.g. to establish a request to the CM and if so the routine continues to step to send the request. If the instruction is not to send a notification related request the routine continues to step to determine if the instruction is to send a condition related request e.g. to temporarily suspend an existing condition and if so the routine continues to step to send the request to the CM. If a condition related request was not received the routine continues to step to determine if an instruction to send an attribute value request was received and if so continues to step to request the attribute value from the CM. In addition other information could also be specified with the request such as a mediator to be used if there are multiple available values or an indication of a particular supplier from whom to receive the value. After step the routine then continues to step to wait for the requested value or an error message. If it is determined in step that a value was received the routine continues to step and if not the routine continues to step to process the error message.

If it was instead determined in step that the instruction was not to send an attribute value request the routine continues to step to determine if the instrument was to send another type of request. If so the routine continues to step to send the request and if not the routine continues to step to perform another instruction as indicated. A variety of other types of requests could be sent to the CM such as to shutdown the CM or a CS to launch a CS to specify a default mediator for the CM etc. After steps or the routine continues to step to determine whether to continue. If not the routine continues to step to unregister the registered attributes for the CC next to step to unregister the client with the CM and then to step to end. If it is instead determined to continue the routine continues to step to determine whether any currently registered attributes should be unregistered and if so continues to step to unregister the attributes with the CM. After step or if it was determined not to unregister any attributes the routine continues to step to determine whether to register any additional attributes. If so the routine continues to step to register for one or more attributes of interest. After step or if it was determined not to register any additional attributes the routine returns to step .

If an instruction was received the routine continues to step to determine if the instruction is to send a notification related request e.g. to establish a request to the CM and if so the routine continues to step to send the request. If the instruction is not to send a notification related request the routine continues to step to determine if the instruction is to send a condition related request e.g. to temporarily suspend an existing condition and if so the routine continues to step to send a request to the CM. If a condition related request was not received the routine continues to step to determine if the instruction was to send another type of request. If so the routine continues to step to send the request and if not the routine continues to step to perform another instruction as indicated.

If it was instead determined in step that information has been received the routine continues to step to determine if information about the satisfaction of a notification request has been received and if so continues to step to process the notification information and to take appropriate action. If notification information has not been received the routine continues to step to determine if information about the satisfaction of a condition has been received and if so continues to step to process the condition information and to take appropriate action. If condition information has not been received the routine continues to step to determine if a status message from the CM has been received e.g. that a particular CC has registered and if so continues to step to process the status information and to take appropriate action.

If a status message has not been received the routine continues to step to determine if a pull attribute value request has been received by the CS along with an ID that uniquely identifies the request. The unique ID in this example embodiment is used to allow the context server to determine if a circular reference exists when determining the requested attribute value. For example consider the situation in which CS is registered to supply values for attribute and CS is registered to supply values for attribute . In addition imagine that the calculation of the value for attribute depends on the value for attribute . Thus when CS receives a pull request to supply the value for attribute it requests the value for attribute from the CM which in turn request the value from CS . After receiving the value for attribute from CS via the CM CS can then calculate the value for attribute and satisfy the initial request by supplying the value to the CM. If however CS also depends on the value for attribute in order to calculate the value for attribute a circular reference may exist. In that situation after CS requests the value of the attribute in order to calculate the value for attribute CS may in turn request the value of attribute from CS via the CM thus creating a loop such that neither attribute value can be calculated. In order to detect such circular references the example routine uses a unique ID passed along with attribute value requests. Alternate equivalent ways of identifying circular references could instead be used or no such processing could be performed.

In the illustrated embodiment if it is determined that a pull attribute value request has been received by the CS the routine continues to step to determine if the received request ID matches a temporarily stored ID for the same attribute value. If so a circular reference exists and the routine continues to step to return an error message. If the ID does not match the routine continues to step to determine the input information needed if any to calculate the requested value. The routine then continues to step to determine if the value of another attribute is needed. If so the routine in step temporarily stores an indication of the attribute whose value is being calculated and of the ID. The routine then continues to step to request the attribute value needed including the received ID. In step the routine waits for the requested value or error message. After receiving the value or error message the routine continues to step to determine if more attribute values are needed and if so to return to step . After all of the needed attribute values have been received the routine continues to step to remove the temporarily stored attribute value and ID and then continues to step to determine if any errors were received for needed attribute values such that sufficient information to calculate the value requested of the CS is not available. If so the routine continues to step to signal an error.

If there are no such errors or if it was instead determined in step that no attribute values were needed the routine continues to step to determine if any sensor values or other input information is needed to calculate the value requested of the CS. If so the routine continues in steps through to request and receive the sensor or other input information that is needed. The routine then continues to step to determine if any errors were received for needed sensor values or other input information such that sufficient information to calculate the value request of the CS is not available. If so the routine continues to step . If no such errors occurred or if it was instead determined in step that no sensor or other input information was needed the routine continues to step to calculate the requested attribute value based on the received information. The routine then continues to step to optionally calculate additional information about the value that characterizes it e.g. a timestamp or uncertainty information and then continues to step to send the value and any additional information to the CM to satisfy the request.

If it was instead determined in step that an attribute value request was not received the routine continues to step to determine if sensor or other input information has been pushed to the CS. If not the routine continues to step to process the other information received and if so continues to step to determine if the CS has sufficient information to calculate one or more attribute values based on the received input information and other stored information. If so the routine continues to step to calculate those values and to push them to the CM and if not the routine continues to step to store the sensor information for later use. In alternate embodiments the CS could request other information that is needed to calculate an attribute value when sensor or other input information is received rather than waiting until all necessary information has been received.

After steps or the routine continues to step to determine whether to continue. If not the routine continues to step to unregister the registered attributes for the CS next to step to unregister the server with the CM and then to step to end. If it was instead determined to continue the routine continues to step to determine whether any currently registered attributes should be unregistered and if so continues to step to unregister the attributes with the CM. After step or if it was determined not to unregister any attributes the routine continues to step to determine whether to register any additional attributes. If so the routine continues to step to register for one or more attributes of interest. After step or if it was determined not to register any additional attributes the routine returns to step .

As discussed previously a variety of error messages can be used by the CS CM and CC. Example error messages include the following.

From the foregoing it will be appreciated that although specific embodiments have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the invention. Accordingly the invention is not limited except as by the appended claims. In addition while certain aspects of the invention are presented below in certain claim forms the inventors contemplate the various aspects of the invention in any available claim form. For example while only one some aspects of the invention may currently be recited as being embodied in a computer readable medium other aspects may likewise be so embodied. Accordingly the inventors reserve the right to add additional claims after filing the application to purse such additional claim forms for other aspects of the invention.

