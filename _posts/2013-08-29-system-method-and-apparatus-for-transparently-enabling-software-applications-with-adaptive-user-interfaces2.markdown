---

title: System, method and apparatus for transparently enabling software applications with adaptive user interfaces
abstract: A method includes receiving, by a library instrumented into an application executable by a computing device, a message indicating modification(s) that should be performed to user interface component(s) able to be rendered by the application on a display of the computing device. The user interface component(s) are modified to create modified user interface component(s). The modified user interface component(s) are caused to be rendered on the display. Another method includes accessing a description of user interface component(s) for an application executable on a computing device, wherein the user interface component(s) are able to be rendered by the application on a display of the computing device. A developer is allowed to modify information concerning the user interface component(s). Message(s) are formed to allow modification(s) and corresponding user interface component(s) to be determined and the message(s) are sent to computing device(s) having the application. Apparatus, software, and computer program products are disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09558014&OS=09558014&RS=09558014
owner: International Business Machines Corporation
number: 09558014
owner_city: Armonk
owner_country: US
publication_date: 20130829
---
This invention relates generally to applications executed on computer systems and more specifically relates to transparently adapting user interfaces UIs for those applications.

This section is intended to provide a background or context to the invention disclosed below. The description herein may include concepts that could be pursued but are not necessarily ones that have been previously conceived implemented or described. Therefore unless otherwise explicitly indicated herein what is described in this section is not prior art to the description in this application and is not admitted to be prior art by inclusion in this section.

Mobile applications and mobile application market places offer opportunity for developers to quickly release software in to a global market. After an application is deployed comes the challenge of managing the software through its application lifecycle. Managing and updating applications once deployed is a continual challenge for developers and product owners.

To alleviate this challenge mobile application development has quickly adopted Web technologies as an attempt to directly address this post release management problem for example by hosting the client code on the server. This allows applications targeted for mobile devices to quickly update and deploy a new application layout as well as take advantage of write once run everywhere .

Another class of mobile application called Hybrid takes this approach one step further. Hybrid applications typically architect the application using a native container alongside a Web view to provide the presentation. The hybrid application lets the application access a native Software Development Kit SDK as well for functionality such as a camera a Global Positioning System GPS and file storage.

These two approaches to mobile development cover most use cases. However they have the drawback of providing a low fidelity user experience.

Native applications on the other hand provide an appropriate user experience for the device. Typically a mobile platform offers a native Application Programming Interface API for developing applications targeted to run on the platform. This API defines the look and feel of the platform as well as the operating services that applications are allowed to access. Other web based approaches just approximate this look and feel the best they can using a markup language and typically the end result is not very good.

Thus it would be beneficial to improve the look and feel of applications while easing management and updating of the applications.

This section has examples of possible implementations of the exemplary embodiments. This section is not intended to be limiting.

In an exemplary embodiment a method includes receiving by a library instrumented into an application executable by a computing device a message indicating one or more modifications should be performed to one or more user interface components of the application able to be rendered on a display of the computing device. The method includes modifying the one or more user interface components according to the one or more modifications to create one or more modified user interface components. The method further includes causing the one or more modified user interface components to be rendered on the display of the computing device. Apparatus and program products corresponding to this method are also disclosed.

In another exemplary embodiment a method includes accessing a description of a number of user interface components for an application executable on a computing device wherein the number of user interface components are able to be rendered by the application on a display of the computing device. The method includes allowing a developer to modify information concerning the one or more of the number of user interface components. The method further includes forming responsive to one or more modifications by the developer to the information one or more messages to allow the one or more modifications and the corresponding one or more user interface components to be determined. The method also includes sending the one or more messages to one or more computing devices having the application. Apparatus and program products corresponding to this method are also disclosed.

The exemplary embodiments describe systems methods apparatus and program products for transparently enabling software applications with adaptive user interfaces.

Adaptive user interfaces UIs and UI updates have a direct impact on the application delivery of native user interfaces and give the application owner an advantage in a low overhead updating mechanism to provide high fidelity UIs while also providing a level of security in controlling the data that is displayed on the device while running these applications.

Adaptive UIs allow for updates and modifications in a post deployed system. This is needed for providing an up to date user experience security and application management after releasing mobile applications in to the wild .

This approach may allow for an application administration to push out application updates without the need for modifying or examining the source code of an application. Other exemplary benefits are described below.

Although primary emphasis is placed below on mobile applications many different types of applications have user interfaces that could benefit from the exemplary embodiments herein. For instance many automobiles have interactive displays in them and such interactive displays are designed and defined using User Interfaces UIs from applications. Therefore the instant exemplary embodiments have wide applicability and the illustrate such wide applicability.

Reference is made now to which shows a block diagram of a computing device and a server in communication via a network in accordance with an exemplary embodiment of the instant invention. is used to provide an overview of a system in which exemplary embodiments may be used and to provide an overview of certain exemplary embodiments. In there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

As shown in computer system server is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processing units e.g. processor s a system memory and a bus that couples various system components including system memory to the one or more processing units . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus. Computer system server typically includes a variety of computer system readable media such as memory . Such media may be any available media that is accessible by computer system server and such media includes both volatile and non volatile media removable and non removable media. System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a removable non volatile memory such as a memory card or stick may be used and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more I O Input Output interfaces . Memory includes a control panel interface in this example.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via e.g. I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems and the like.

The computing device also comprises a memory one or more processing units one or more I O interfaces and one or more network adapters interconnected via bus . A memory may comprise non volatile and or volatile RAM cache memory and a storage system . Depending on implementation a memory may include removable or non removable non volatile memory. The memory includes in this example an instrumented application that includes an adaptive UI library which includes a description of the UI of the application . The computing device may include or be coupled to the display which has a UI . Depending on implementation the computing device may or may not be coupled to external devices . A display may be a touchscreen flatscreen monitor television projector as examples. A UI may be any UI for an application and or an operating system for the particular computing device . The bus may be any bus suitable for the platform including those buses described above for bus . The memories and may be those memories respectively described above. The one or more network adapters may be wired or wireless network adapters. The I O interface s may be interfaces such as USB universal serial bus SATA serial AT attachment HDMI high definition multimedia interface and the like. The one or more processing units may be any suitable controller s for controlling operation of a respective computing device such as general purpose processors single or multiple core processors application specific integrated circuits systems on a chip programmable logic and the like.

The UI may contain elements from both the instrumented application and e.g. an operating system for the platform for which the instrumented application has been developed. However for simplicity the UI is assumed herein to be created by the instrumented application e.g. and the adaptive UI library . Thus the UI is assumed to be the application s UI although technically the UI could contain elements for the operating system.

A developer device is also shown in . The developer device can be considered to be similar to the computing device and thus the internals other than the memory display and UI of the developer device are not shown. The developer device includes a memory comprising an application and a Web browser . The UI may include one or both of a representation of the application s UI and a representation of a control panel.

In this example the computer system server the computing device and the developer device are interconnected via network and links and . Network is typically the Internet but may be other networks such as a corporate network.

Elements of and interactions between elements in the system in are explained in more detail below. However a brief introduction of exemplary interactions is now presented. In an exemplary embodiment the application is instrumented with the adaptive UI library to create the instrumented application . The instrumenting may be performed for instance by the computer system server the developer device or come other computer system. The developer or other person may perform the instrumenting. It is assumed that the application is instrumented into the instrumented application prior to installation of the instrumented application on the computing device .

Once the instrumented application begins executing on the computing device the adaptive UI captures while the instrumented application is running a description of the UI e.g. the views of the instrumented application broken down into its various components and including layout information for those components. A component is any object that is derived from a system defined UI renderable component which is defined by the system as the most basic UI object which all other UI objects are derived. The information in the description is captured from the various components using reflection or other means of object introspection. In object oriented programming languages reflection allows inspection of classes interfaces fields and methods at runtime without knowing the names of the interfaces fields methods at compile time. Reflection also allows instantiation of new objects and invocation of methods. This description is sent by the adaptive UI to the control panel interface using e.g. standard Internet protocols.

The developer using the developer device accesses a representation of a control panel and in this example a representation of a version of an application s UI by using the Web browser to access the control panel interface . A Web browser is one typical way of presenting the data captured from the computing device device to a developer. However the data protocol used to upstream the data from the computing device to the control panel is independent of the actual rendering of the control panel . That is the Web browser is merely one example of how a developer may access the control panel and other options are possible. The computer system server sends the UI representation information and the control panel representation information to developer device . The Web browser presents this information on the UI as representation of the application s UI and representation of the control panel respectively. The developer using the Web browser can modify information on the representation of the control panel and the Web browser will send revised control panel representation information to the computer system server . The control panel interface may send revised control panel representation information and or revised UI representation information in response to the revised control panel representation information sent by the developer device . The computer system server then uses the revised representation of the control panel to send update message s to the computing device . Exemplary protocol for the update messages is shown in . The adaptive UI library receives the update message s and can revise a view of the UI . The view is not shown on UI in but is shown in other figures.

The control panel interface is in one example computer readable code that in response to execution of the code by the processing unit s causes the computer system server to perform operations described herein. The instrumented application and the instrumented adaptive UI library are in one example computer readable code that in response to execution of the code by the processing unit s cause the computing device to perform operations described herein.

Turning to a networked environment is illustrated according to an exemplary embodiment. In this example the computer system server is shown separate from network but could be part of the network. There are A through E different computing devices shown smartphone A desktop computer B laptop C tablet D television E and automobile computer system F. Not shown but equally applicable are set top boxes and game consoles. These are merely exemplary and other devices may also be used. Thus although the examples provided below place primary emphasis on mobile devices such as the smartphone A or the tablet D the ins techniques may be applied to many other computing devices.

The overall system as shown in allows a developer e.g. an application owner to perform the following tasks without looking at or modifying the source code of the application.

Adaptive UIs provide UI experiences that can be changed after the application has been released and installed on client machines e.g. computing devices as the instrumented application . The following are non limiting examples related to the adaptive UI library . The adaptive UI library is written using the native APIs provided by the development platform. For instance the native API could be one for e.g. iOS a mobile operating system developed and distributed by Apple Inc. for Android an operating system designed by Google Inc. primarily for touchscreen mobile devices such as smartphones and tablet computers or for Windows an operating system designed by Microsoft Inc. for computer systems tablets and phones . The adaptive UI library is transparent to the developer and may be injected in the application at a post compile time. The adaptive UI library can add remove or reposition UI components within an application view. The adaptive UI library can modify the look or color of a component. The adaptive UI library can wipe sensitive data from the viewing area. The adaptive UI library can modify the text rendering characteristics such as font type and size for the UI .

Thus the adaptive UI library system allows for updates to the application s UI after the application has been released. Furthermore UI policies can be compiled into the application e.g. instrumented application pushed to the computing device or polled by the computing device from an application server e.g. computer system serer . The adaptive UI library may define a language protocol and policy for controlling the user interface on one of a set of or all of the applications that are deployed.

Now that an overview of a system and an exemplary embodiment has been provided more detail about additional exemplary embodiments is provided.

Referring to this figure is an illustration of a representation of a control panel and representations of the application s UI. These are presented by the Web browser on a UI of the display of the developer device . In this example the UID is a unique identifier LID assigned to a given device running the application. There is also a unique identifier assigned to each relevant component in the UI. The start and delta time are extraneous in certain embodiments but may be used in others recording when the program was started and the delta between server report intervals. It is noted that since there are CIDs for devices a developer can tailor modifications to a single device some set of devices or all devices. The developer is using the Web browser to modify a property of the object com.IBM.mobile.profiler.LButton in this case the label shown is the fully qualified name of the Java class which is one UI component able to be modified by the developer using the control panel . This object creates the button having the text Join Meeting and as the data of OnClick Join Meeting illustrates upon clicking the button a user would be allowed to join a meeting corresponding to the Meeting ID box . The property controls whether the button created by the object should be visible or hidden. In this case the developer has changed the property from visible which is illustrated by representation of the application s UI to hide which is illustrated by representation of the application s UI. The property hide takes effect once the developer presses the Change button in the representation of the control panel .

The set of representations are connected by the arrow which indicates to the developer how the original view as illustrated by representation of the application is modified to a new view as illustrated by representation . The computer system server sends the appropriate UI representation information and control panel representation information to create the indicated information on the UI . Similarly the Web browser and developer device sends the changes made by the developer to the computer system server . is merely exemplary and the information shown may not be presented in this manner. For example only one representation of the application s UI may be shown at a time and the representation would be shown prior to the developer clicking the Change button and the representation would be shown after the developer has clicked the Change button . Additionally there may be other embodiments such as having the representation of the control panel include buttons such as implement change e.g. which causes the Web browser to send a message to the control panel interface to request the control panel interface actually implement the change on one or more instrumented applications or discard change e.g. which discards the current change and leaves the view in a previous state . Furthermore there could be options to allow a developer to make several changes at once and to implement all changes or discard all changes .

Concerning a system design for dynamic UI updates is an illustration of an exemplary system design to provide dynamic UI updates from a Web based control panel. This diagram shows a structural representation of how a control panel illustrated as control panel interface maps to the program i.e. the adaptive UI running on the client. The diagram also indicates a typical tree structure for UI layouts. The control panel interface is shown having an application model which is a model of the UI for the application . The application model includes a view id identification and a widget indication each of which is unique relative to other views and widgets in the UI . The widget corresponds to text objects in described below. The number 2210045020 is a unique ID identification for the widget. The widget has two attributes font of Arial and color of Red . The widget corresponds to a background object shown in . The widget includes two attributes background blue in this example and geometry with an x of 22px and a y of 100px where px is pixels.

In this example the user has changed the color variable from some other color to red. The control panel interface generates an update UI message and informs the network listener which sends an update UI message to the computing device . The message is received by the adaptive UI library specifically by the network listener . The adaptive UI library in this example is shown in a class diagam. The network listener forwards an update UI message to the adaptive UI library object . The adaptive UI library maintains e.g. via a WidgetMap a Map object of Widget instances and this library is created when the program starts running e.g. during a discovery phase . The Widget instances basically define the original UI while the MyWidget instances e.g. in combination with the Widget interfaces define the new UI . The adaptive UI library understands how to interact with the map of widgets through the common Widget interface e.g. using the UpdateUI object . The adaptive UI library looks up e.g. via the Adaptive UI object the target widget in the Map object . The figure shows the target Widget specific instance labeled MyWidget object . The update UI message is forwarded to the MyWidget object after retrieving the target from the Map object . The MyWidget object then stores a command in an example corresponding to the update UI message and sets itself to the operating system OS as changed. When the operating system calls back to the target. MyWidget object the view is rendered accordingly. This is described in more detail below.

Turning to in addition to a logic flow diagram is shown for OS application and adaptive UI interaction based on . also illustrates the operation of an exemplary method a result of execution of computer program instructions embodied on a computer readable memory and or functions performed by logic implemented in hardware in accordance with an exemplary embodiment. In the example of in block the OS sends a message of UI interaction to the application in this case the instrumented application . The instrumented application receives block the message and calls one or more object s to create or modify a view in accordance with its own programming. In block the adaptive UI intercepts calls e.g. via overriding classes objects In block the adaptive UI implements any updates that have been previously received and previously stored e.g. as command s for implementation . That is the overriding class object may have previously received the update UI message and may have stored this message e.g. as a command for implementation when the overriding class object is called by the instrumented application . The overriding class object implements any updates. It is noted while the child object the overriding class object exists in memory the child object may store the end result of the message as attributes of the child object. Additionally the messages may be stored in key value form in the map class object under the condition that the lifecycle of the overriding class object has come to an end. If the lifecycle has come to an end the changes may get implemented upon instantiation of a new object . That is the custom widgets query their UI policy from the map during instantiation. If the objects are not referenced in the map the objects will take on the default UI as defined in the application. Also the map persists throughout the life of the application and new objects are automatically subclassed or categorized as the objects are created by e.g. overriding the class loader in Java or method swizzling in iOS. When the application is started the application typical checks the server for any updates to its policy. In block the overriding class object sets itself or classes objects set themselves to the OS as changed. In block the OS calls back the UI overriding class object classes objects which causes the view to be rendered on the display.

Turning to this illustrates a view of a UI of an application corresponding to a portion of the application model of . In this example the text objects through correspond to the widget object and are in Arial font with red coloring. The background corresponds to the widget object and has a blue background.

In this example the protocol includes an indication of the application application com.yourcompany.Tabster and an indication of the device device 640960 . The view is indicated by views and by viewid ListView and an object within that view is indicated by objects and the indication objectid 064300107 . It can be assumed that the view ID of ListView in is the same as the View id in . It does not matter what the view ID is as long as the view ID is unique. The indication indicates the font system has a red color as indicated by indication of color red . Thus the adaptive UI library can determine that the font color is supposed to be red and effectuate this change as described in reference to . further shows another attribute that may be changed. As illustrated by the indication background blue the background may be changed from whatever color the background originally was to the color blue.

It can also be seen that the protocol is organized in a tree structure that corresponds to a view tree of the application as the protocol indicates which view e.g. a trunk or main branch of the tree is affected via and indicates the objects e.g. the leaves or smaller branches as the case may be of the tree that are affected via and .

Referring to this figure illustrates another view of the application similar to the view in except the text objects have been cleared from the view as compared to the view of illustrates an exemplary protocol used to wipe the text objects from the view of to create the view in . In this case associated with the text object as indicated by indication is a command to clear the data in the text object. The command is illustrated by indication data clear .

An extension to the above concerns policies. A developer may decide that a modification or modifications to a UI should be based on a policy or based on multiple policies. Illustratively the developer may choose to implement a modification temporarily e.g. for a specific time period or permanently. As another example the developer may choose to enforce policies either automatically or manually. Such policies may include limiting a number of copies e.g. via a selection button on the UI and limiting the number that can be selected by a user using the selection button preventing copying by clearing a value on the UI disallow forwarding e.g. by removing a forward button and the like. Manual enforcement is where the developer using the Web browser causes the policy for instance by setting a value of the number of allowed copies for a selection button to be a specific value. Automatic enforcement involves the developer creating using the Web browser a policy such as policy LimittoValue10 for the selection button. Manual enforcement typically causes the policy to be implemented immediately typically without regard to other constraints. Meanwhile the automatic policies may involve other constraints have such as having time limits e.g. to cause the modification to the UI for a length of time cause the modification only during working hours or only during after work hours and the like. The policies may cause a modification to be effected based on location of the computing device user action taken on the UI time of day sensor data and the like.

As described above the adaptive UI library may be instrumented into the application to create the instrumented application . The adaptive UI library can be injected into applications with minimal or no source code modifications. The adaptive UI library therefore may be transparent to developers. Two implementations are now described iOS and Android although other implementations such as Windows are possible. Injecting the Adaptive UI library into the client is performed differently on iOS and Android. On iOS injection may be achieved via the Xcode linker during the application s compilation and linking stages. illustrates an example of instrumenting an iOS application using categories and swizzling. Specifically is a structural representation showing the overriding of an object s behavior. This code needs to be compiled and linked in to the source application. In this example Method overrides Method . As indicated by reference Method will perform the following to override Method s behavior . Log the invocation of Method . Call the original Method and . Optionally return a logged result.

On Android the injection may be performed via Java bytecode rewriting without any need for source code access or relinking and recompiling the application. illustrates an example of instrumenting an Android application using class loading. In this example as illustrated by reference the Instrumentation Class performs the following . Overrides the Operation class . Logs Operation state and data and . Calls the Operation Android Class.

Referring to this figure is a logic flow diagram performed by a computer system server for transparently enabling software applications with adaptive user interfaces. Further this figure illustrates the operation of an exemplary method a result of execution of computer program instructions embodied on a computer readable memory and or functions performed by logic implemented in hardware in accordance with an exemplary embodiment. The blocks in may be assumed to be interconnected means for performing the corresponding functions in the blocks. The operations in the blocks are assumed to be performed by the computer system server e.g. under control of the control panel interface .

In block the computer system server receives from the computing device description of UI components including layout information for those components. In block the computer system server responsive to one or more requests from a developer e.g using the developer device presents one or more representations of a control panel based on the description of UI components including layout information for those components. The representation may be via one or more HTML HyperText Markup Language documents or via any other technique useful for allowing a developer to view the description.

In block the computer system server adds possible criteria for policies and corresponding applicable policies to the one or more representation of the control panel. The policies may include policies such as implement modification which might be used to indicate that a modification should be implemented based on the corresponding criteria . The policy may be used to prevent a user from performing or allow the user to perform an action. For instance the policy may be to automatically prevent a user from making or allow a user to make over a certain number of copies to prevent a user from making or allow a user to make any copies to prevent or allow forwarding of a message and the like.

Exemplary criteria include the following non limiting criteria the policy may be temporary e.g. for a time period indicated by time limit the policy may be permanent the policy may have certain time limits such as a day a week a month etc. the policy may have a time of day limitation e.g. only during working hours or only during after working hours the policy may be limited to one or more locations e.g. only at work or only at home the policy may be a threshold to a user action e.g. only three copies may be made or the policy may be based on sensor data e.g. only allow a function if connected to a secure network as determined by a Wi Fi sensor .

In block the computer system server modifies the representation of control panel e.g. via HTML document accordingly as developer makes modification s . In block the computer system server responsive to the developer indicating modification s are finalized creates a corresponding update UI message . As described above the update UI message may have a tree structure corresponding to a view tree of an application. Thus in block the computer system server may form the update UI message using a protocol having a tree structure corresponding to a view tree of a view e.g. of the application. In block the computer system server responsive to input from the developer sends the message to one some or all computing devices having the adaptive UI library .

Turning to which includes this figure is a logic flow diagram performed by a computing device for transparently enabling software applications with adaptive user interfaces. illustrates the operation of an exemplary method a result of execution of computer program instructions embodied on a computer readable memory and or functions performed by logic implemented in hardware in accordance with an exemplary embodiment. The blocks in may be assumed to be interconnected means for performing the corresponding functions in the blocks. The operations in the blocks are assumed to be performed by the computing device e.g. under control of the adaptive UI .

In block the instrumented application executes for instance in response to a user selecting the application via a touchscreen as display . For the first execution of the instrumented application the adaptive UI enters a discovery phase . The discovery phase includes in block the adaptive UI performing object inspection for UI components. As described above in object oriented programming languages reflection allows inspection of classes interfaces fields and methods at runtime without knowing the names of the interfaces fields methods at compile time. Reflection also allows instantiation of new objects and invocation of methods. In block the adaptive UI builds a description of UI components including layout information for those components. It is determined in block if the UI description is complete. Such a description can therefore have a description of all views creatable by the instrumented application . If not block No the flow continues in block . If so block Yes the adaptive UI sends block the description to the computer system server .

Blocks onward form a post discovery phase. In this phase it is assumed that a complete description of the original set of views of the instrumented application has been made. In block the adaptive UI waits to receive an update UI message . In response to an update UI message has been received block the adaptive UI determines if the modification is based on a policy in block . It is noted that the messages may be polled by the instrumented application and from the computer system server so messages cannot be received without the application being currently executed. If messages are pushed from the computer system server to the instrumented application the client e.g. computing device would typical send back receipt of the message and if the server does not receive this receipt in a given amount of time the server would try again to send the message. If the modification is based on a policy block Yes the adaptive UI determines block if the policy criterion criteria is are met to activate the modification. If not block No the flow proceeds to wait at block .

If the policy criterion criteria is are met to activate the modification block Yes the adaptive UI activates block the modification to modify the current view on the UI . Block performs a waiting operation to determine whether to reset the modification in accordance with whether or not the policy criterion criteria to reset the modification has have been met. If not block No the flow waits at block if so block Yes the adaptive UI resets the modification in block . The resetting the modification typically restores the view to an original state without the modification.

In block it is determined if the policy is periodic e.g. occurs every day during weekdays or weekends and the like . If so block Yes the flow continues to block . If not block No the flow continues at block .

If the modification is not based on policy block No in block the adaptive UI modifies the view of the application by modifying one or more user interface components based on the information in the update UI message . Block may be performed. e.g. by a change in appearance of user interface components provided by the view e.g. such as changing text from one color to another block by a change in features provided by the user interface component such as changing a drop down box to select only one copy instead of one or more copies or by removing a feature or adding a feature block causing a pop up message to be performed e.g. on top of the current view block remove one or more user interface components block and or adding one or more user interface components. After block the flow proceeds to block .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium does not include propagating signals and may be for example but is not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

