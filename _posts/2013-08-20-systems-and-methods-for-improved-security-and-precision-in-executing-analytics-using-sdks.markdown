---

title: Systems and methods for improved security and precision in executing analytics using SDKS
abstract: This disclosure generally relates to computer-implemented analytics, and more particularly to systems and methods for improved security and precision in executing analytics using SDKs. In one embodiment, an analytics system is disclosed, comprising: a processor; and a memory device operatively connected to the processor and storing processor-executable instructions for: receiving an application programming interface (API) call for a service; parsing the API call to extract an API call name and one or more API call parameters; generating prediction values for one or more interpreted-data parameters; obtaining one or more analytics rules; performing an analytics operation to generate an analytics result according to the one or more analytics rules based on the generated prediction values for the one or more interpreted-data parameters and the extracted one or more API call parameters; and generating a visual representation of the analytics result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430534&OS=09430534&RS=09430534
owner: WIPRO LIMITED
number: 09430534
owner_city: Bangalore
owner_country: IN
publication_date: 20130820
---
This disclosure claims priority under 35 U.S.C. 119 to India Application No. 2072 CHE 2013 filed May 9 2013 and entitled Systems and Methods for Improved Security in Executing Analytics using SDKs. The aforementioned application is incorporated herein by reference in its entirety.

This disclosure generally relates to computer implemented analytics and more particularly to systems and methods for improved security and precision in executing analytics using SDKs.

Analytics is the discovery and communication of meaningful patterns in data. Firms may commonly apply analytics to business data to describe predict and improve business performance and a person in an organization may execute analytics queries and obtain relevant data to facilitate decision making. For example a requester in a department store may execute an analytics query related to profitability analysis of that facility. The confidentiality of analytics queries can avoid leakage of trade secrets and sensitive information related to business decisions. For example in the scenario above access to the analytics query may allow internal developers and third parties to predict that the organization may be considering the closing of a store.

Further analytics queries may include two types of data certain data and uncertain data. A query causes a company data system to retrieve outputs and display them to the requester. In most queries some data will be certain such as total sales for the previous calendar year and other data will be uncertain such as total sales for the next calendar year. Typically analytics queries do not take into account or process the uncertain data. Further there is ambiguity in the interpretation of analytics outputs. For example an analytics query for electronic chip P123 may reasonably be interpreted as concerning i which devices use the P123 electronic chip or ii future sales predictions of the P123 electronic chip. Thus the output of such a query may be ambiguous. Also the analytics outputs associated with different business scenarios are not generally considered or provided.

In one embodiment an analytics system is disclosed comprising a processor and a memory device operatively connected to the processor and storing processor executable instructions for receiving an application programming interface API call for a service parsing the API call to extract an API call name and one or more API call parameters generating prediction values for one or more interpreted data parameters obtaining one or more analytics rules performing an analytics operation to generate an analytics result according to the one or more analytics rules based on at least the generated prediction values for the one or more interpreted data parameters and the extracted one or more API call parameters and generating a visual representation of the analytics result.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory only and are not restrictive of the invention as claimed.

Exemplary embodiments are described with reference to the accompanying drawings. Wherever convenient the same reference numbers are used throughout the drawings to refer to the same or like parts. While examples and features of disclosed principles are described herein modifications adaptations and other implementations are possible without departing from the spirit and scope of the disclosed embodiments. It is intended that the following detailed description be considered as exemplary only with the true scope and spirit being indicated by the following claims.

Systems and methods for executing analytics queries to obtain analytics results are disclosed. Consistent with disclosed embodiments an analytics system may process Application Programming Interface API calls for each analytics instruction. The API calls may be parsed into i an API call name and ii API call parameters. In some embodiments while the API call name may be unrelated to analytics the API call parameters may be related to analytics. A requester of analytics may query to obtain analytics results using the analytics system to facilitate decision making.

When an analytics query is executed keywords from the analytics query may be mapped with source data stored in a database to identify a context. In one implementation the database may include a list of parameters related to the data and the analytics query may be an SQL query upon the data to generate a view. More complex analytics queries may be utilized including for example a contextual data mapping and b predictive data interpretation. An example contextual data mapping may be in the blacklisted word filtering for SMS telecom application text where the specific words that are blacklisted may widely different amongst client applications. For example a church or religious body may disapprove the use of certain keywords by their employees and patron SMS texts but the same words may be considered perfectly appropriate to use among a set of entertainment industry executives. An illustration of predictive data interpretation is provided below in this disclosure with reference to the example of predictive interpretation of data with a part no P1234. When these data parameters are interpreted based on the context interpreted data parameters may be obtained. Data parameters that are stored in the database as corresponding to the context identified from the analytics query may be interpreted data parameters for that context. Prediction values may be hypothetical predicted percentage values that may be assigned to each of the interpreted data parameters. Based on the prediction values that may be assigned to the interpreted data parameters analytics results can be obtained.

Some analytics may include both uncertain data and partially certain data and such queries are typically termed fuzzy queries. A conventional execution strategy may mask uncertain data so that only certain data may be executed. Without including the uncertain data however the analytics outputs may be limited in their relevance. In another conventional approach fuzzy queries with both uncertain and certain data may be executed with a customized margin of error. Here however the outputs may associate particular data with different business scenarios. Without such references the outputs may provide little support for rational decisions.

In step prediction values may be generated for interpreted data parameters. The interpreted data parameters may be obtained from a database that may include data and data parameters stored based on a context that may be identified from keywords in the analytics query. The interpreted data parameters may also be obtained from a domain expert e.g. a financial analyst or expert who has insights into the market trends of the company profits in a specific industry sector. A prediction value may be generated for each interpreted data parameter as will become clearer from the example discussed below. In some embodiments the domain expert may parameterize each uncertainty factor in the prediction process and implement a permutation combination of the said uncertainty factors to evaluate all possible what IF scenarios. The prediction value may be generated based on a user input or selected from a predetermined value that may be stored in a database. In step analytics rules may be obtained from an SDK server. In step an analytics operation may be performed to generate the analytics result according to the analytics rules based on the generated prediction values for the interpreted data parameters and the extracted API call parameters. In step a visual representation of the analytics result may be generated. In step the visual representation of the analytics result may be provided to the requester.

A user input requesting iterations in the prediction values for the interpreted data parameters may be obtained when certain criteria of the requester have not been met. New prediction values may be generated by updating previously generated prediction values for the interpreted data parameters.

For example the requester may execute an analytics query which discloses an electronic part P1234 . A context associated with executing the analytics query may include a prediction of future sales volume of the electronic part P1234 . The context may be identified by mapping the keyword P1234 with source data stored in the database . Based on the identified context prediction of future sales volume of the electronic part P1234 data parameters may be interpreted to obtain interpreted data parameters stored in the database that may be relevant to the context. Such interpreted data parameters may include i devices that use the electronic part P1234 ii the number of production units that manufacture part P1234 and iii the number of local stores that sell the electronic part P1234 . The devices may include for example a tablet a phone and a 2 way radio system.

With the interpreted data parameters a prediction value may be generated for each interpreted data parameters. The prediction value may be generated by a user input and or selected from predetermined values stored in the database .

For example the requester can predict analytics results when prediction values of three interpreted data parameters may be 33 each 40 40 and 20 respectively or 90 5 and 5 respectively. As described the prediction values may be obtained as a user input. For example the requester may input the prediction values for the interpreted data parameters as 33 each and analytics results may be generated accordingly. The prediction values for the interpreted data parameters may be obtained from one or more predetermined values. For example the database may store a predetermined value of 40 40 and 20 for the interpreted data parameters and the predetermined values may be used for analytics.

The interpreted data parameters may be selected via user input. For instance for the analytics query which discloses the electronic part P1234 the requester may select devices that use the electronic part P1234 and the number of production units that manufacture part P1234 as interpreted data parameters from a list of predicted interpreted data parameters and not the number of local stores that sell the electronic part P1234 . The user input may be obtained after determining that the user input is required for generating prediction values for the interpreted data parameters.

Generating prediction values for a subset of the interpreted data parameters may be dependent on prediction values for another subset of interpreted data parameters. For example when an analytics query which discloses the electronic part P1234 is executed a first subset of the interpreted data parameters and a second subset of interpreted data parameters may be obtained. The first subset of the interpreted data parameters may include a devices that use the electronic part P1234 and b the number of production units that manufacture part P1234 . The second subset of interpreted data parameters may include the number of local stores that sell the electronic part P1234 . The prediction value of devices that use the electronic part P1234 may be 30 and the number of production units that manufacture part P1234 may be 20 . The prediction value of the number of local stores that sell the electronic part P1234 may be 50 .

The first analytics data set may include a first interpretation that may include first interpreted data parameters and a plots and feedback field . Similarly the second analytics data set may include a second interpretation that may include second interpreted data parameters and the plots and feedback field . The third analytics data set may include a third interpretation that may include third interpreted data parameters and the plots and feedback field . The fourth analytics data set may include a fourth interpretation that may include fourth interpretation data parameters and the plots and feedback field . When the requester executes the analytics query in the query module the first interpreted data parameters may be obtained from the database .

As described above each interpreted data parameter of the first interpreted data parameters may be assigned a prediction value to obtain analytics results associated with the first analytics data set . When the first analytics data set has not met certain criteria of a requester the imprecise visualization configuration enables the requester to obtain the second analytics data set . The requester may input prediction values for the second interpreted data parameters by updating the prediction values of the first interpreted data parameters . Similarly the imprecise visualization configuration allows the requester to obtain further analytics data sets until the criteria have been met. Using the plots and feedback field the requester can provide feedback on the analytics results and such feedback may be stored in the database .

Analytics queries may be detached from the developers A D a user device providing API calls and third party external analytics engines or providers may be implemented in the SDK server . The API calls may be forwarded to the backplane service provider . The database stores analytics results and dashboards for the one or more analytics queries. The analytics results and the dashboards may be displayed to the requester . The SDK server may be implemented at a middleware location. The analytics system may be rapidly developed deployed and implemented in the middleware location based on i an IP re routing model and or ii a Lexical re routing model.

In step the product parses the API calls for each analytics instruction. In step the API calls may be partitioned into API call parameters that may be related to analytics analytics code snippet and an API call name that may be unrelated to analytics. The API call name that may be unrelated to analytics may include a developer s application business logic. The API call parameters that may be related to analytics may be executed at the SDK server by the requester . Similarly API call parameters that may be related to analytics may be executed as a separated code at the SDK server . The API call parameters that may be related to analytics may be not revealed to the developers A D or to third parties who execute analytics queries. In step the API call name that is unrelated to analytics may be provided to an external web service provider for regenerating an application.

The analytics code snippet may further include a template e.g. a code header and build environment for SDK based analytics execution and one or more additional analytics queries and instructions that the requester may desire to execute. In step the analytics code snippet may be executed at the SDK server . In step imprecise analytics such as the imprecise visualization configuration may be performed. In step the SDK server at the middleware location may be used to secure execution of the analytics queries and to generate analytics results in addition to executing analytics such as an imprecise visualization. The analytics results may be generated based on analytics rules based on prediction values obtained from the imprecise analytics for interpreted data parameters and the API call parameters that may be related to analytics. The analytics rules may be stored in the database or in the SDK server and may be inaccessible to the developers A D a user device providing API calls and third party external analytics engines or providers. Analytics rules may include prediction values that may be generated for the interpreted data parameters. The API calls may include identifications of the analytics rules.

When the requester executes a new analytics query in addition to the previously executed analytics query a new API call name or a new API call address may be generated using i the API call name and or ii the API call parameters that may be obtained by parsing an API call associated with the previously executed analytics query. Further a new API call may be generated for a service using i the generated new API call name and or ii the generated new API call address.

The new API call name may be generated by extracting a string subset of the API call name associated with execution of the previously executed analytics query. An API call address for the new API call name and an API call address for the API call that is received for the service may be the same. The new API call address may be generated by providing the API call name as an input to a lookup table. The API call name for the new API call may be the same as the API call name associated with the previously executed analytics query.

The SDK server may be implemented at the middleware location based on i an IP Re Routing model and or ii a Lexical Re Routing model Dynamic link library model a k a DLL model . In the IP Re Rerouting model the API calls may be re routed to a local application server e.g. the SDK server . The API calls may be parsed and partitioned into API call parameters that may be related to analytics and an API call name that is unrelated to analytics at the local application server. The API call parameters that may be related to analytics may be executed at the local application server and may be not revealed to the developers A D. The API call name that is unrelated to analytics may be forwarded to and processed at the backplane service provider . In the Lexical Re Routing model the API calls may be lexically renamed to a minor variant library name and executed at the Dynamic Link Library DLL . The API call name that is unrelated to analytics may be forwarded to and processed at the backplane service provider .

In step a local web server with an API names forwarding web server template AFWST replicated configuration file may be built. In step the local web server may be hosted on a client side. In step a web server IP address may be sent to the developers A D. In step the AFWST may be integrated with a local storage unit. In step the AFWST may be integrated with a data expiry unit. In step the AFWST may be integrated with a dashboard and reporting module. In step the AFWST may be integrated with an analytics rules execution unit AREU . In step the AFWST may be integrated with an analytics rules file and a user interface to obtain the analytics results using the SDK server implemented at the middleware location.

In step the API renaming list may be sent to the developers A D. In step a local DLL with an API names forwarding DLL template AFDLLT replicated per configuration file may be built. In step the AFDLLT may be hosted on a build path or a trunk. In step the AFDLLT may be distributed among the developers A D. In step the AFDLLT may be integrated with a data expiry unit. In step the AFDLLT may be integrated with an analytics rules execution unit AREU . In step the AFDLLT may be integrated with a local storage unit. In step the AREU may be integrated with a dashboard and reporting module. In step the AREU may be integrated with analytics rules files and a user interface to obtain the analytics rules using the SDK server implemented at the middleware location.

The SDK application server may be a Dynamic Link Library DLL in which API calls corresponding to the analytics queries may be lexically renamed to a minor variant library name and executed at the DLL. The second user communicates with the SDK application server through the operator network and the public network . The third party tool may perform analytics on the API call name that is unrelated to analytics using the analytics module and interpretation of the analytics may be stored in the database . Analytics results stored in the database may be communicated to the SDK application server .

Additional features methods and systems are contemplated. As an example the location of the analytics execution server in the network topology upon consideration of the data flow amongst the interconnected components may be optimized. This may bring in the benefits of data volume reduction a key value add for high volume data processing applications and analytics. Each data item used in the analytics queries may be attributed a birth site and a death site indicating where the data was first created and likewise where the data was parked and expired. The particular data item may flow between the birth site and the death site along a designated network path. If the analytics operation involves n data items then it may become an optimization problem to select a specific node where the largest volume of the data sets are naturally present and the smallest amount of data sets may require to be transported. This optimization may render opportunities and benefits for example in network traffic reduction reduction of the analytics query execution CPU workload and the server performance.

As another example the disclosure of imprecise visualization e.g. where the data may be precise but the interpretation may be subjective can be combined with imprecise queries as well. Imprecise queries while different from imprecise visualization can be implemented together with imprecise visualization offering the combined benefits of 1 use of ambiguous data and 2 use of ambiguous queries.

As another example the disclosure contemplates providing an analytics solution to a dashboard as a forward path of information flow e.g. from query and acting upon the data to producing the analytics output . A reverse path may also be possible in some embodiments where the analytics output a k a a dashboard may receive user feedback for example via a textbox and or with graphical aid to create new queries and iteratively generate new analytics. Combination s of the forward and reverse paths may provide a more powerful analytics solution and reduced cycle time to visualize or browse through a large number of what IF solutions.

As another example each data item may be treated at a specific and single precision level. As an example if a data item is a quarterly profit amount stated in M units then the analytics output may in some embodiments always preserve the same granularity unit. However this capability can be extended to change the data unit to K or B or 10M depending upon the scale of the output and the unit values of the adjoining data items. Thus multiple data items may be combined each with its respective unit value and the resulting solution may produce an analytics output that reverts to a single unit value. Benefits of such a scheme may include for example enhanced user perception and visualization.

Processor may be disposed in communication with one or more input output I O devices via I O interface . The I O interface may employ communication protocols methods such as without limitation audio analog digital monaural RCA stereo IEEE 1394 serial bus universal serial bus USB infrared PS 2 BNC coaxial component composite digital visual interface DVI high definition multimedia interface HDMI RF antennas S Video VGA IEEE 802.n b g n x Bluetooth cellular e.g. code division multiple access CDMA high speed packet access HSPA global system for mobile communications GSM long term evolution LTE WiMax or the like etc.

Using the I O interface the computer system may communicate with one or more I O devices. For example the input device may be an antenna keyboard mouse joystick infrared remote control camera card reader fax machine dongle biometric reader microphone touch screen touchpad trackball sensor e.g. accelerometer light sensor GPS gyroscope proximity sensor or the like stylus scanner storage device transceiver video device source visors etc. Output device may be a printer fax machine video display e.g. cathode ray tube CRT liquid crystal display LCD light emitting diode LED plasma or the like audio speaker etc. In some embodiments a transceiver may be disposed in connection with the processor . The transceiver may facilitate various types of wireless transmission or reception. For example the transceiver may include an antenna operatively connected to a transceiver chip e.g. Texas Instruments WiLink WL1283 Broadcom BCM4750IUB8 Infineon Technologies X Gold 618 PMB9800 or the like providing IEEE 802.11a b g n Bluetooth FM global positioning system GPS 2G 3G HSDPA HSUPA communications etc.

In some embodiments the processor may be disposed in communication with a communication network via a network interface . The network interface may communicate with the communication network . The network interface may employ connection protocols including without limitation direct connect Ethernet e.g. twisted pair 10 100 1000 Base T transmission control protocol internet protocol TCP IP token ring IEEE 802.11a b g n x etc. The communication network may include without limitation a direct interconnection local area network LAN wide area network WAN wireless network e.g. using Wireless Application Protocol the Internet etc. Using the network interface and the communication network the computer system may communicate with devices and . These devices may include without limitation personal computer s server s fax machines printers scanners various mobile devices such as cellular telephones smartphones e.g. Apple iPhone Blackberry Android based phones etc. tablet computers eBook readers Amazon Kindle Nook etc. laptop computers notebooks gaming consoles Microsoft Xbox Nintendo DS Sony PlayStation etc. or the like. In some embodiments the computer system may itself embody one or more of these devices.

In some embodiments the processor may be disposed in communication with one or more memory devices e.g. RAM ROM etc. via a storage interface . The storage interface may connect to memory devices including without limitation memory drives removable disc drives etc. employing connection protocols such as serial advanced technology attachment SATA integrated drive electronics IDE IEEE 1394 universal serial bus USB fiber channel small computer systems interface SCSI etc. The memory drives may further include a drum magnetic disc drive magneto optical drive optical drive redundant array of independent discs RAID solid state memory devices solid state drives etc.

The memory devices may store a collection of program or database components including without limitation an operating system user interface application web browser mail server mail client user application data e.g. any data variables or data records discussed in this disclosure etc. The operating system may facilitate resource management and operation of the computer system . Examples of operating systems include without limitation Apple Macintosh OS X Unix Unix like system distributions e.g. Berkeley Software Distribution BSD FreeBSD NetBSD OpenBSD etc. Linux distributions e.g. Red Hat Ubuntu Kubuntu etc. IBM OS 2 Microsoft Windows XP Vista 7 8 etc. Apple iOS Google Android Blackberry OS or the like. User interface may facilitate display execution interaction manipulation or operation of program components through textual or graphical facilities. For example user interfaces may provide computer interaction interface elements on a display system operatively connected to the computer system such as cursors icons check boxes menus scrollers windows widgets etc. Graphical user interfaces GUIs may be employed including without limitation Apple Macintosh operating systems Aqua IBM OS 2 Microsoft Windows e.g. Aero Metro etc. Unix X Windows web interface libraries e.g. ActiveX Java Javascript AJAX HTML Adobe Flash etc. or the like.

In some embodiments the computer system may implement a web browser stored program component. The web browser may be a hypertext viewing application such as Microsoft Internet Explorer Google Chrome Mozilla Firefox Apple Safari etc. Secure web browsing may be provided using HTTPS secure hypertext transport protocol secure sockets layer SSL Transport Layer Security TLS etc. Web browsers may utilize facilities such as AJAX DHTML Adobe Flash JavaScript Java application programming interfaces APIs etc. In some embodiments the computer system may implement a mail server stored program component. The mail server may be an Internet mail server such as Microsoft Exchange or the like. The mail server may utilize facilities such as ASP ActiveX ANSI C C Microsoft .NET CGI scripts Java JavaScript PERL PHP Python WebObjects etc. The mail server may utilize communication protocols such as internet message access protocol IMAP messaging application programming interface MAPI Microsoft Exchange post office protocol POP simple mail transfer protocol SMTP or the like. In some embodiments the computer system may implement a mail client stored program component. The mail client may be a mail viewing application such as Apple Mail Microsoft Entourage Microsoft Outlook Mozilla Thunderbird etc.

In some embodiments computer system may store user application data such as the data variables records etc. as described in this disclosure. Such databases may be implemented as fault tolerant relational scalable secure databases such as Oracle or Sybase. Alternatively such databases may be implemented using standardized data structures such as an array hash linked list struct structured text file e.g. XML table or as object oriented databases e.g. using ObjectStore Poet Zope etc. . Such databases may be consolidated or distributed sometimes among the various computer systems discussed above in this disclosure. It is to be understood that the structure and operation of the any computer or database component may be combined consolidated or distributed in any working combination.

The specification has described systems and methods for improved security and precision in executing analytics using SDKs. The illustrated steps are set out to explain the exemplary embodiments shown and it should be anticipated that ongoing technological development will change the manner in which particular functions are performed. These examples are presented herein for purposes of illustration and not limitation. Further the boundaries of the functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternative boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed. Alternatives including equivalents extensions variations deviations etc. of those described herein will be apparent to persons skilled in the relevant art s based on the teachings contained herein. Such alternatives fall within the scope and spirit of the disclosed embodiments.

Furthermore one or more computer readable storage media may be utilized in implementing embodiments consistent with the present disclosure. A computer readable storage medium refers to any type of physical memory on which information or data readable by a processor may be stored. Thus a computer readable storage medium may store instructions for execution by one or more processors including instructions for causing the processor s to perform steps or stages consistent with the embodiments described herein. The term computer readable medium should be understood to include tangible items and exclude carrier waves and transient signals i.e. be non transitory. Examples include random access memory RAM read only memory ROM volatile memory nonvolatile memory hard drives CD ROMs DVDs flash drives disks and any other known physical storage media.

It is intended that the disclosure and examples be considered as exemplary only with a true scope and spirit of disclosed embodiments being indicated by the claims that follow.

