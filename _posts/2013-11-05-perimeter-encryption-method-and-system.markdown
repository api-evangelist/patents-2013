---

title: Perimeter encryption method and system
abstract: A method and system for consistent format preserving encryption (C-FPE) are provided to protect data while the data is in a domain while allowing encrypted data to be treated inside the domain as if it were the unencrypted data. The method includes inserting a coupling into a data flow at a perimeter of the domain, and translating a data element from an unprotected data element to a protected data element using the coupling such that the data element is a protected data element within the domain.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08990553&OS=08990553&RS=08990553
owner: CA, Inc.
number: 08990553
owner_city: New York
owner_country: US
publication_date: 20131105
---
This application claims the benefit of U.S. patent application Ser. No. 13 173 037 filed on Jun. 30 2011 published as US 2012 0017078 on Jan. 19 2012 and issued as U.S. Pat. No. 8 607 041 on Dec. 10 2013 and of U.S. Provisional Patent Application No. 61 363 737 filed on Jul. 13 2010 which are hereby incorporated by reference in their entirety.

Databases containing sensitive information on systems accessible from the internet or on electronic media have proliferated globally. Protection of sensitive data within a given domain has traditionally been managed by controlling access to the data. This approach is flawed as demonstrated by many widely publicized incidents when an attacker gains access to the internal system or when the data is moved outside the enclosure for example when data on a laptop or disk is stolen. There have been numerous documented events of computer break ins that compromise sensitive data such as credit card numbers personal identification and social security numbers financing and loan information and medical information.

One way to protect this sensitive data is to encrypt it. But this sensitive data contained in databases or other persistent mechanisms is served by processes that make assumptions about the format of various data items for example credit card numbers and social security numbers that are strings of decimal digits in a certain format dollar amounts in a certain range alphabetic strings dates and zip codes. In addition different copies of the data can reside in multiple locations and a given process may require that the data match in these different locations for the process to be performed. Because it is not feasible to revise all existing processes which use the data it is necessary that any data protection method for example an encryption method used to encrypt data contained in a database or other persistent mechanism must be executed in a way that preserves the format of the data sufficiently such that an existing process using the data will still function and any validity and cross system checks performed by the process can be performed and passed.

A method of protecting sensitive data elements within a domain is provided herein. The method includes inserting one or more transparent couplings into a data flow at a perimeter of the domain such that data flows through at least one coupling when flowing into or out of the domain. The data flow includes one or more data elements which are sensitive data elements. The method further includes translating the sensitive data element from an unprotected data element to a protected data element using a transparent coupling such that the sensitive data element is configured as a protected data element within the domain. The protected data element may be an encrypted element or a token where the protected data element preserves the syntax and internal semantics of the unprotected form of the sensitive data element. The method further includes consistently translating a sensitive data element into the same protected data element each time the sensitive data element is translated and translating the sensitive data element into the same protected data element when the sensitive data element enters the domain through any of the one or more transparent couplings.

One or more of the transparent couplings may be configured as a proxy service where the data flow through a proxy adapter of the service may include protocol messages. The proxy service may identify the sensitive data elements in the protocol messages and may translate each sensitive element from an unprotected data element to a protected data element and replace the unprotected sensitive data element in the protocol messages with the protected data element. The proxy service may serve but is not limited to Hypertext Transfer Protocol HTTP and or secure HTTP HTTPS protocol.

One or more of the transparent couplings may be configured as a shim application programming interface API to replace an external API used by a process within the domain to move data elements into or out of the domain without making coding changes in the caller of the API. The shim API may be configured to identify the sensitive data elements from input arguments output arguments input messages and output messages moved into or out of the domain using the shim API to translate each of the sensitive data elements from an unprotected data element to a protected form and to replace the unprotected sensitive data element in the input arguments output arguments input messages and output messages with the corresponding protected data element.

A system for protecting sensitive data elements within a domain is also provided herein. The system includes a domain including a server configured to receive a data flow a data flow at a perimeter of the domain which includes one or more sensitive data elements and one or more transparent couplings inserted into the data flow and configured to translate each sensitive data element from an unprotected data element to a protected data element such that each sensitive data element is configured as a protected data element within the domain. The transparent coupling may be configured as a proxy service or may be configured as a shim API.

The system may further include a protection engine having an access control mechanism defining decision logic as to whether a given request is authorized to be fulfilled a key management mechanism defining a hardware security module and an encryption mechanism. The encryption mechanism may be configured to consistently translate an unprotected sensitive data element to a protected form where the protected data element preserves the syntax and internal semantics of the unprotected sensitive data element and where the protection engine provides the same protected data element for a given sensitive data element each time the unprotected sensitive data element is translated and regardless of which transparent coupling the given sensitive data element enters the domain through.

The above features and advantages and other features and advantages of the present invention are readily apparent from the following detailed description of the best modes for carrying out the invention when taken in connection with the accompanying drawings.

A method and system for consistent format preserving encryption C FPE is provided herein to protect sensitive data within a domain from the time the sensitive data enters or is input into the domain and until the sensitive data is output from the domain. Included are mechanisms for reversing the protective encryption when the sensitive data is needed to interact with entities outside the domain. Because C FPE preserves the format e.g. the syntax and internal semantics of the unprotected or actual data C FPE allows encrypted data to be treated and processed inside the domain as if it were the actual unencrypted or unprotected data. Specifically C FPE produces a protected or encrypted data element that maintains the original data element s syntax and coherence where coherence is defined to mean that a given data element for example a Name will encrypt to the same element so that the encrypted Name will serve as a reliable identifier as does the actual Name. As used herein and when referring to a given sensitive data element the term unprotected data element refers to the given sensitive data element in a form which is not protected by C FPE. For example a given sensitive data element may be an unprotected data element as inputted to the domain shown in or as outputted from the domain after being translated from a protected data element corresponding to the given sensitive data element. As used herein and when referring to a given sensitive data element the term protected data element refers to the given sensitive data element in a form which is protected by C FPE.

As used herein the term internal semantics refers to the semantics of the C FPE protected data element of the sensitive data element. The internal semantics are implicitly assigned by the internal entities e.g. the entities within the domain which are using or processing the protected data element. By using C FPE to preserve the format and syntax of the data the C FPE protected data element will be recognized for internal processing by entities within the domain and the protected data element will be meaningless and therefore protected outside the domain.

C FPE successfully prevents unauthorized access to and accidental loss of sensitive information where the basic data protection requirement is met by a format preserving encryption FPE algorithm. Consistency between systems and over time is provided by a mechanism of centralized key management for the keys used by the FPE algorithm. Therefore for a given input value the output value from the FPE process will always be the same output value each time the input value is translated by the FPE process. Similarly the same unprotected data element will be translated into a corresponding protected data element for a given sensitive data element regardless of the origin of the data element input e.g. regardless of whether the data element originated from the data flow through a first transparent coupling or another transparent coupling.

Further the C FPE system is implemented with mechanisms to change data inflow processes capturing incoming sensitive data and encrypting it and to change data outflow processes providing sensitive data to entities outside the domain in a form that is useful to them . The C FPE system includes a protection engine which is applied to a given domain perimeter and includes one or more transparent couplings which are inserted into data flows at the domain perimeter. The couplings provide a low intrusion mechanism for engaging the C FPE process further reducing changes needed to data inflow and outflow systems.

Referring to generally indicated at is a schematic illustration of a C FPE system configured to protect sensitive data within a data domain . The C FPE system as shown is configured to include at least three elements a protection engine a transparent coupling using a proxy adapter and a transparent coupling using an application programming interface API shim adapter . A domain may include a plurality of internal entities generally indicated as . . . which use or process data within the domain and data incoming and outgoing through the transparent couplings . The C FPE system may further include additional transparent couplings as required by the configuration of the internal entities such as the internal entities or and the configuration of the domain . The C FPE system and or the domain may include one or more servers not shown configured to receive use and or process data incoming and outgoing through the transparent couplings . The C FPE system and or the domain may include memory not shown which may be by way of example as Read Only Memory ROM Random Access Memory RAM electrically erasable programmable read only memory EEPROM etc. i.e. non transient tangible machine memory of a configuration size and or speed sufficient for executing one or more algorithms included in C FPE system storing one or more data bases providing a data repository and or recording by way of example mechanisms couplings etc. which may be included in the C FPR system .

As shown in data with exposed sensitive data elements is exchanged between internal entities such as for example the internal entities and and external entities such as the external entities . The transparent couplings intercept data incoming to the data domain and process the data using adapters and a protection engine to transform each sensitive data element in the data from an unprotected data element to a protected data element while the data resides in the domain . Each sensitive data element in the incoming data is transformed from an unprotected sensitive data element using C FPE to a protected sensitive data element in a persistent data repository and within data domain . Similarly the transparent couplings intercept data outgoing from the data domain and process the sensitive data elements using the adapters and the protection engine to transform each sensitive data element in the outgoing data from a protected data element to an unprotected data element prior to the data being received or processed by an external entity .

As shown in each of the unprotected data elements incoming to the domain are transformed to a corresponding protected data element and each protected data element may be used by one or more internal entities . . . . The internal entities . . . may receive or transmit the protected data elements from or to another internal entity from or to a persistent data repository and through any of the transparent couplings .

Referring to shown is a schematic illustration of one possible embodiment of a protection engine included in the C FPE system of . In the non limiting example shown in the protection engine is configured as a centralized system that includes at least an access control mechanism an FPE mechanism and a key management mechanism . The protection engine exposes its services to the transparent couplings of through a well defined secure interface.

An access control mechanism is responsible for determining if a request is authorized and should be fulfilled. This determination may be based on the identity of the external entity such as an entity or of the identity of the internal entity such as an entity and of the configuration of the transparent coupling or the contents of the request other factors such as the context in which the request was made historic usage patterns etc or a combination of these factors. If the access control mechanism is configured to use the identity of the internal or external entities in making its determination it may be configured to include an authentication service or mechanism to establish those identities or it may rely on some trusted identity certifying process outside of the protection engine . The authentication mechanism may be configured to support various authentication technologies including cryptographic camouflage one time password Remote Authentication Dial In User Service RADIUS protocol and or single sign on trust delegation mechanisms.

If the access control mechanism is configured to use request context information in making its determination it may be configured to include a risk evaluation service or mechanism . For purposes of making an authorization determination the access control mechanism may be capable of validating entities identity tokens and categorizing requests. For example an entity may be allowed to make requests in the encryption category but may be prohibited from making requests in the decryption category or an entity may be allowed to decrypt or unprotect only data within a specific category such as data representing user identifiers which may be needed by the requestor for phone interactions. The risk evaluation mechanism evaluates patterns of requests and evaluates the trustworthiness of a given request. The risk evaluation service supplements the authentication mechanism to protect against risks associated with lost or forged credentials.

When required initial authentication requests from an external entity such as an entity or of or an internal entity such as an entity or of are handled by the access control mechanism . Each encryption and decryption request is first presented to the access control mechanism and if determined authorized is then passed to the FPE mechanism to be fulfilled. When the identity of the requesting entity is part of the request the access control mechanism verifies an authentication or identity token from the caller or requestor and determines whether the caller requestor has authorization to perform the given action for the data element s included in the request .

Still referring to if the request is an authorized request then the FPE mechanism uses one or more secret keys accessed from the key management mechanism which may include and or use a secure domain key repository such as a hardware security module to protect access to the one or more secret keys. The hardware security module may be for example a central server not shown and access to the central server may be protected using an authentication mechanism such as or similar to the authentication mechanism . The key management mechanism may include a process to create use and delete keys in the repository. The FPE mechanism may use the keyset to translate the sensitive data inside the domain such that the format syntax and coherence of each sensitive data element of the sensitive data is preserved.

The FPE mechanism includes cryptographic utilities to perform FPE on any enumerated data set given a set of secret keys. The set of secret keys may consist of one or more keys. The FPE mechanism further includes format definitions that map a given data element to an enumerated data set and translate a member of the enumerated set back to a data element.

The FPE mechanism may use format definitions pertaining to the data elements included in the request in conjunction with the secret keys accessed from key management mechanism in an FPE encryption process to protect sensitive data received from or provided to an external entity by translating the sensitive data received into processed by or stored within the data domain into a protected form which may be configured as an encrypted data element or a token.

The FPE mechanism may translate a sensitive data element from an unprotected data element to a protected form by representing the sensitive data element with a corresponding token where the token is a randomly generated token which is randomly generated using a token mapping mechanism. The token is formatted to preserve the format of the unprotected sensitive data element e.g. the token preserves the syntax and internal semantics of the unprotected data element . The FPE mechanism is configured to consistently translate a given sensitive data element to the token corresponding to that given data element using a token mapping mechanism each time the given data element is presented for translation. Access to the token mapping mechanism may be protected using a central server. Access to the central server may be protected using an authentication mechanism such as or similar to the authentication mechanism .

The protected data element of the sensitive data preserves the format of the unprotected data element of the sensitive data which may include the syntax internal semantics and coherence of the unprotected data element . As discussed previously for any given sensitive data element which is input into the protection engine the same output protected or unprotected data element will be consistently generated over time e.g. each time the given sensitive data element is input into the protection engine . For example when the unprotected data element corresponding to the given sensitive data element is input into the protection engine it will be translated into its corresponding protected data element and when the protected data element corresponding to the given sensitive data element is input into the protection engine it will be translated into its corresponding unprotected data element . Similarly the same output will be consistently generated when the given sensitive data element is input to the protection engine from a first transparent coupling or when the same given sensitive data element is input to the protection engine from another or additional transparent coupling. The same output will be consistently generated when the given sensitive data element is input to the protection engine from a transparent coupling configured as a proxy service and when the same given sensitive data element is input to the protection engine from a transparent coupling configured as a shim API . Because the same output will be consistently provided each time a given input element is presented for translation to the FPE mechanism and because the format of the input element is the same as the format of the output element the process described herein is referred to as C FPE.

Referring now to shown is a schematic illustration of a transparent coupling including a proxy adapter . Incoming protocol messages in the data flow coming into the proxy adapter of the transparent coupling match outgoing protocol messages so that the external entity and the internal entity can operate as if they were directly connected. The protection engine is used to transform data used by the external entity and the internal entity such that the internal entity only has protected data available to it and data within data domain is in a protected or encrypted form e.g. the data within the data domain consists of protected data elements . As shown in the proxy adapter is a proxy mechanism which is inserted into a data flow as a proxy service between the external entity and the internal entity within domain at the point where the data passes through the domain perimeter to provide a transparent coupling . The proxy adapter may provide a proxy service which may serve for example Hypertext Transfer Protocol HTTP either in insecure HTTP mode HTTP or in secure HTTP mode HTTPS . The proxy service may define the sensitive data elements by a mapping mechanism see of form field names to domain schema elements and further may define sensitive data in the outgoing flow by a mapping mechanism of HTTP division elements and ID attributes to domain schema elements e.g. . . . .

As illustrated shows a listener mechanism receiving a request from the external entity where the external entity is shown as the requesting entity. The request is provided after transformation of the sensitive data elements to a protected form to the internal entity where the internal entity is shown as the responding entity. The proxy adapter further includes a message editor mechanism including a request message editor and a response message editor . The message editor mechanisms parse the incoming request as shown in or the incoming responses in the configuration wherein the internal entity is the requesting entity and the external entity is the responding entity to extract unprotected sensitive data elements see and map each sensitive data element to a standard identifier for that data element in the domain data schema of the domain . The message editor mechanism is customized to handle the format of messages sent and received by the requesting and responding entities. The request message editor and the response message editor may be configured as separate mechanisms or may be configured as a shared message editor to handle both request and response messages.

The proxy adapter also includes a data control mechanism which receives fields from one or the other of message editors and determines what schema elements should be encrypted decrypted for the ingoing outgoing messages. This decision is configuration driven for each message and sensitive data element which may include a mapping of form field names to domain schema elements. The data control mechanism includes a data element mapping mechanism which provides and stores the standard identifier specified for each sensitive data element. The proxy adapter communicates with the protection engine through the FPE client mechanism using a secure protocol to encrypt or decrypt the sensitive data elements as required by the data control mechanism .

Generally indicated at illustrates a method of message flow using format preserving encryption according to the method and system shown in and a transparent coupling including a proxy adapter . In the configuration shown the external entity is the requesting entity initiating a request and the internal entity is the responding entity providing a response . As would be understood the proxy adapter may be configured such that the internal entity is the requesting entity and the external entity is the responding entity.

Beginning with step an external request is made from the external entity and is received by a listener mechanism within the proxy adapter . The listener mechanism passes the request message to a request message editor at step . Continuing at step the message editor parses the request and extracts and bundles the data elements including the sensitive data elements from the external request . A message editor then passes the bundle of elements and the original message to the data control mechanism . At step the data control mechanism refers to the data element mapping to determine the standard schema name for each sensitive data element included in the bundle and at step the data control mechanism routes the unprotected sensitive data elements and their standard names to the FPE client .

Continuing at step the FPE client makes a request see to the protection engine and in accordance with the method described for receives back a protected or encrypted data element for each of the sensitive data elements where the encryption method used is C FPE. At step the FPE client returns the encrypted data elements to the data control mechanism . The data control mechanism at step routes the bundle of data elements with the unprotected sensitive elements now replaced by encrypted elements plus the original message request to the request message editor .

At step the request message editor reconstitutes the original message request substituting protected or encrypted elements for the original sensitive data and passes the reconstituted request to the requester mechanism . The requester mechanism at step provides the request including the protected sensitive data elements to the internal entity . At step the internal entity processes the request and prepares a response which may include one or more protected sensitive data elements . The response is reconstituted using steps through and a reconstituted response including sensitive data elements which have been unprotected by the proxy adapter is transmitted back to the requester e.g. to the external entity . Steps through perform the same operations as steps through but now operate on the response message instead of the request message using the response message editor to perform the functions performed by the request message editor in steps through which may include unprotecting or decrypting sensitive data elements in the response message to provide a reconstituted response including the unprotected data elements . As discussed previously the request message editor and the response editor may be configured as a shared mechanism. At step the FPE client makes a request to the protection engine to decrypt the response such that the response message editor can substitute decrypted data elements for the sensitive elements in response to provide a reconstituted response before returning the response at step to the listener mechanism which returns the response including the decrypted data elements to the external entity at step .

The API shim adapter functions as a wrapper around the API which exposes an interface to the internal entity which is the same as the interface of the API . Adapters of the type similar to the API shim adapter are useful mainly when sensitive data must be transferred from inside a domain to an external entity when the domain process is using an API provided by the external entity to communicate with that external entity . The shim adapter stands in for the external API so the domain process will invoke the shim adapter in the same manner as the domain process would invoke the external API . The shim adapter processes the sensitive data elements according to the methods described herein such that the sensitive data elements are protected by FPE as protected data elements while in the domain and are presented as unprotected or decrypted data elements to the external API . The shim adapter then calls the original API . By using the shim API there is little impact on the domain entity e.g. the entity needs only to change its linkage from the external API to the shim . Also there is no impact on the external entity because it continues to interface with the external API where the API ultimately is used to manage the interaction.

The shim API adapter includes a data control mechanism that receives data fields from the marshalling mechanism and determines what schema elements should be encrypted decrypted for ingoing outgoing calls e.g. the marshalling mechanism determines which schema elements are sensitive and require protection within the domain . This decision is configuration driven. The data control mechanism refers to the data element mapping mechanism which provides and stores the standard identifier specified for each sensitive data element. The data control mechanism communicates with an FPE client mechanism which communicates with the protection engine using a secure well defined protocol to encrypt or decrypt the sensitive data elements as determined and required by the data control mechanism .

Generally indicated at illustrates a method of message flow using format preserving encryption according to the method and system shown in and a transparent coupling including a shim API adapter . Beginning with step an API call is made by the internal entity to communicate with an external entity . API call is received and handled by a marshalling mechanism . The marshalling mechanism extracts and bundles data elements from call and at step passes the bundle of elements and the original call details to the data control mechanism .

At step the data control mechanism refers to the data element mapping to determine what the standard schema name is for each sensitive data element received in the bundle extracted from the API call . At step the data control mechanism routes the sensitive data elements and the standard name for each sensitive data element obtained from the data element mapping to the FPE client . At step the FPE client makes a request see to the protection engine to decrypt the protected sensitive data elements according to their respective standard schema names and receives back the decrypted e.g. unprotected data elements . At step the FPE client returns the decrypted elements to the data control mechanism . At step the data control mechanism routes the bundle of data elements with the sensitive elements replaced by decrypted elements plus the original call details to the requester mechanism .

Continuing at step the requester mechanism makes a reconstituted API call using the external API see . The reconstituted API call includes the original call details of API call plus the bundle of data elements with the sensitive elements replaced by decrypted elements . The external entity processes the API call and in step the result of the call is returned as a response to the requester mechanism . The result may be a simple response code or a package of data.

Steps through perform the same operations as steps through now operating on the response data such that at step the FPE client makes a request see to the protection engine to encrypt the sensitive data elements in the response and receives back FPE encrypted data elements . Steps through are completed to return a reconstituted response to the internal entity . By using the FPE process on the response data the internal entity receives back a recognizable response to its API call however response contains only encrypted data for the sensitive elements thereby protecting the sensitive data within the domain .

Referring to and it is understood that each of the data control mechanism the data element mapping and the FPE client may be configured the same or similarly as included in the proxy adapter and the shim API adapter . The C FPE system may be configured such that one or more of elements and are shared by the transparent couplings including these adapters. In alternate configurations each adapter may include a data control mechanism a data element mapping or a FPE client which has been customized for that adapter and coupling.

While the best modes for carrying out the invention have been described in detail those familiar with the art to which this invention relates will recognize various alternative designs and embodiments for practicing the invention within the scope of the appended claims.

