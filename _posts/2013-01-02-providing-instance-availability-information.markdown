---

title: Providing instance availability information
abstract: A distributed execution environment provides instances of computing resources for customer use, such as instances of data processing resources, data storage resources, database resources, and networking resources. Data is collected from systems internal to and external to the distributed execution environment. Some or all of the data is utilized to compute instance availability information for instances of computing resources provided by the distributed execution environment. The instance availability information might then be provided to customers and other users of the distributed execution environment. Various types of actions might be taken in a manual or automated way based upon the computed instance availability information.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09451013&OS=09451013&RS=09451013
owner: Amazon Technologies, Inc.
number: 09451013
owner_city: Seattle
owner_country: US
publication_date: 20130102
---
Network based services exist that allow customers to purchase and utilize instances of computing resources instances such as virtual machine instances on a permanent or as needed basis. In addition to virtual machine instances these services typically allow customers to purchase and utilize instances of other types of computing resources for use with virtual machine instances. For example customers might be permitted to purchase and utilize instances of data storage resources instances of database resources instances of networking resources and instances of other types of resources. Utilizing instances of these various types customers of such a service can create custom solutions that provide various types of functionality such as application hosting backup and storage content delivery World Wide Web Web hosting enterprise information technology IT solutions database services and others.

It is not unusual for network based services such as those described above to periodically experience hardware software or other types of system failures that result in the failure or unavailability of customer operated instances. In typical network based services customers are not made aware of such failures until after a failure has occurred and the customer operated instances have been negatively impacted in some way. This can be very frustrating to customers of such network based services.

The following detailed description is directed to technologies for providing instance availability information. Utilizing the technologies described herein instance availability information can be computed that describes the current actual availability of instances provided by a distributed execution environment and or the probability that instances will be available at a future point in time. Utilizing this information customers or other users of the distributed execution environment can take various types of actions such as moving instances from a data center affected by an outage or predicted outage to a non affected data center. The instance availability information might also be utilized in other ways described below.

According to one aspect presented herein a computer implemented mechanism is disclosed for providing instance availability information. In one implementation the mechanism operates in conjunction with a network based distributed execution environment in which customers can purchase configure and utilize instances of computing resources such as virtual machine instances data storage resources networking resources and database resources on a permanent or as needed basis. The distributed execution environment may offer instances of computing resources for purchase and use in various configurations. For example the distributed execution environment might offer virtual machine instances available for purchase and use that have many different configurations of processor capabilities main memory disk storage and operating system. As mentioned above a customer might create configure and deploy various combinations of instances of computing resources to create solutions that provide various types of functionality such as application hosting backup and storage content delivery Web hosting enterprise IT solutions database services and others.

In order to provide the functionality disclosed herein the distributed execution environment or one or more components operating in conjunction with the distributed execution environment collects operational status information from components within the distributed execution environment that are utilized to provide instances of computing resources. For example data describing the current operational state of various hardware components like server computers networking devices cooling systems and power systems might be collected. Data describing the current operational state of various software components within the distributed execution environment might also be collected. Data might be collected from in production components or from canary components configured to detect actual or potential problems within the distributed execution environment and to provide operational status information describing any detected issues. Data might also be collected from in production components that also provide canary functionality.

Data might also be collected from an operator of the distributed execution environment. For example data indicating the scheduled maintenance of software or hardware components in the distributed execution environment the time at which maintenance was last performed on software or hardware components information identifying the scheduled deployment of new software or firmware to components in the distributed execution environment and other types of data that might be relevant to the current or future availability of instances of computing resources provided by the distributed execution environment might be collected.

In some implementations data that may be relevant to a determination of a probability of a future failure of instances provided by the distributed execution environment is also collected from one or more sources external to the distributed execution environment. For example weather forecasts might be obtained for a geographic area that includes a data center that provides the instances. Similarly information might be collected from utility providers such as power gas and data networking providers. This data might be indicative of a future failure of a utility provider and therefore might also be utilized to compute a future probability of a failure of instances provided by the distributed execution environment.

Instance availability information may be computed using some or all of the collected data. The computed instance availability information might identify actual current failures of instances of computing resources and the severity of the failures. The instance availability information might also provide a probability of the future availability of instances of computing resources. The instance availability information might be provided on a per customer basis per instance basis per data center basis per region basis or on another basis. For example a customer might be provided with instance availability information indicating the probability of availability during a certain period of time for all of the instances that the customer has purchased. As another example a customer might be provided with information describing the probability that a particular instance will be available during some future time period.

According to various embodiments the instance availability information might be provided to customers of the distributed execution environment in real time or in near real time. In some embodiments a delay might be imposed prior to provision of the instance availability information to users of the distributed execution environment. The instance availability information might be provided by way of a pull mechanism such as a Web services application programming interface API or a push mechanism such as e mail or short messaging system SMS messages. Other mechanisms might also be utilized to provide the computed instance availability estimate to customers and other users of a distributed execution environment.

According to embodiments various types of manual or automated actions might also be taken with regard to instances of computing resources based upon the computed instance availability information for the instances. For example instances of computing resources might be migrated out of a data center affected by a failure and into a data center that is not affected by the failure. In other scenarios it might be desirable to migrate instances out of a data center not affected by a failure and into a data center that is affected by the failure. For example it might be desirable to migrate non essential instances into an affected data center if the instance price were very low. It might also be desirable to create backup instances in a data center with a low probability of future unavailability. Other types of actions described below might also be taken based upon the computed instance availability information.

In some embodiments the price charged by an operator of a distributed execution environment for instances of computing resources might be modified following the provision of instance availability information to a customer. For example the price of instances might be decreased in order to encourage customers to migrate instances out of an affected data center. Alternately the price of instances might be increased in order to discourage customers from migrating instances out of an affected data center. Other types of changes to the price charged for instances might also be made following the provision of instance availability information to a customer of a distributed execution environment.

The embodiments disclosed herein might be utilized to provide various types of useful information to customers of a distributed execution environment. For example a customer might be notified that a certain group of instances have actually failed and are not just unreachable due to network issues. In this case the customer could replace the instances in response to receiving the information. In another scenario a customer might be notified that a set of instances is operating with degraded redundancy and as a result is at an elevated risk of failure. The customer might then take appropriate action.

In another example a customer might be notified which of their instances are most likely to fail in the future and which are least likely to fail. Using this information a customer might reconfigure their instances in order to minimize the impact if an actual failure occurs. Other types of information might be provided and other types of customer action might also be taken. The information might also be utilized by an operator of the distributed execution environment to take various types of actions. Additional details regarding the various components and processes described briefly above for providing instance availability information in conjunction with instances provided by a distributed execution environment will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may be practiced in distributed execution environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed execution environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

The distributed execution environment might also offer instances B of other types of computing resources for purchase and use by customers. For example the distributed execution environment might offer data storage resources networking resources database resources and other types of resources on a permanent or as needed basis. Instances of other types of resources might also be utilized including but not limited to instances of database resources instances of data storage resources instances of search resources instance of domain name service resources instances of load balancing resources instances of workflow resources instances of application container resources instances of electronic communication resources instances of queuing resources instances of notification resources instances of caching resources instances of identity and access management resources instances of cryptographic resources instances of content distribution resources and instances of networking resources. The operator of the distributed execution environment may charge a fee for operating some or all of these types of instances to the customer that creates and uses the instances . Various pricing models that might be utilized to charge the customer for use of instances of computing resources within the distributed execution environment will be described below with regard to .

A customer or other user of the distributed execution environment might utilize a user computing system connected to the distributed execution environment by way of a WAN to purchase configure and deploy various instances provided by the distributed execution environment . For example a customer might create configure and deploy various combinations of instances of computing resources to create a solution that provides certain functionality. For example as mentioned above a solution might provide functionality for application hosting backup and or storage content delivery Web hosting enterprise IT solutions database services or another type of functionality. In the example shown in a solution has been created that utilizes one or more virtual machine instances A and one or more instances B of other types of computing resources.

It should also be appreciated that the distributed execution environment might provide other facilities for use by customers in conjunction with their instances . For example the distributed execution environment might provide facilities for automatically scaling instances of computing resources in response to fluctuations in demand various types of network functionality such as domain name services DNS services and other functionality related to the operation of the instances . A customer might configure these various aspects of the distributed execution environment appropriately for the operation of their particular application or solution.

It should also be appreciated that the distributed execution environment might concurrently support many customers running a large number of instances. In order to provide this functionality at scale the distributed execution environment might be architected to utilize multiple data centers in multiple geographically disparate regions. One illustrative architecture for such a distributed execution environment will be described below with respect to .

As described briefly above the embodiments disclosed herein include a mechanism for computing and providing instance availability information . The instance availability information includes data identifying actual current failures of instances of computing resources and the severity of the failures. The instance availability information might also provide a probability of the future availability of instances of computing resources. A customer or other user of the distributed execution environment might utilize the instance availability information to reconfigure their instances in view of an actual failure or the possibility of a failure. Additional details regarding the computation of the instance availability information and its use will be provided below.

In one implementation an instance availability monitoring component is utilized to generate and provide the instance availability information . In order to compute the instance availability information the instance availability monitoring component or another component collects operational status information from components within the distributed execution environment that are utilized to provide the instances of computing resources. For example operational status information describing the current operational state of various hardware components like server computers networking devices cooling systems and power systems utilized within the distributed execution environment to provide the instances might be collected. Operational status information describing the current operational state of various software components utilized within the distributed execution environment to provide the instances might also be collected. Data might be collected from in production components or from canary components configured to detect actual or potential problems within the distributed execution environment and to provide operational status information describing any detected issues.

The instance availability monitoring component might also be configured to collect operational status information from an operator of the distributed execution environment . For example the instance availability monitoring component might collect data indicating the scheduled maintenance of software or hardware components that are utilized to provide instances in the distributed execution environment . The instance availability monitoring component might also be configured to collect information identifying the scheduled deployment of new software or firmware to components utilized to provide instances in the distributed execution environment. The instance availability monitoring component might also be configured to collect other types of data from other sources that might be relevant to the current or future availability of instances of computing resources provided by the distributed execution environment . Additional details regarding aspects of the operation of the instance availability monitoring component for collecting data from sources within the distributed execution environment will be described below with regard to .

As shown in the instance availability monitoring component might also be configured in some embodiments to collect data from one or more external data sources . For example the instance availability monitoring component might be configured to collect external data from the external data sources that may be relevant to a determination of a probability of a future failure of instances provided by the distributed execution environment . As one example the instance availability monitoring component might be configured to collect weather forecasts for a geographic area that includes a data center that provides the instances . Similarly the instance availability monitoring component might collect information from utility providers such as power gas and data networking providers. This data might be indicative of a future failure of a utility provider and therefore might also be collected by the instance availability monitoring component and utilized to compute a future probability of a failure of instances provided by the distributed execution environment . Additional details regarding aspects of the operation of the instance availability monitoring component for collecting data from external data sources will be described below with regard to .

It should be appreciated that the data collection operations described above may be performed on a regular continual and on going basis so that the instance availability monitoring component has access to up to date operational status information and other information regarding the current and future availability of instances. In this way and as will be described in greater detail below the instance availability monitoring component can provide access to the instance availability information for instances to customers and other users of the distributed execution environment in real time or in near real time.

In order to compute the instance availability information for one or more instances the instance availability monitoring component might utilize some or all of the collected data described above. The instance availability monitoring component might compute the instance availability information in advance of receiving a request for the instance availability information . Alternately the instance availability monitoring component might compute the instance availability information in response to a request for the information. For example a user might utilize the user computing system to submit a request for the instance availability information for a particular instance for a particular time period in the future. In response to receiving the request the instance availability monitoring component might compute the requested instance availability information and provide the computed result in response to the request . The request might be submitted to the instance availability monitoring component via a suitable API or via another mechanism.

According to various embodiments the instance availability monitoring component might compute and provide the instance availability information on a per customer basis per instance basis per data center basis per region basis or on another basis. For example a customer might be provided with instance availability information indicating the probability of availability during a certain period of time for all of the instances that the customer has purchased. As another example a customer might be provided with information describing the probability that a particular instance will be available during some future time period.

According to various embodiments the instance availability information might be provided to users of the distributed execution environment in real time or in near real time. In some embodiments a delay might be imposed prior to provision of the instance availability information to users of the distributed execution environment . The instance availability information might be provided by way of a pull mechanism such as a Web services API or a push mechanism such as e mail or SMS messages. Other mechanisms might also be utilized to provide the computed instance availability estimate to customers and other users of a distributed execution environment . Additional details regarding aspects of the operation of the instance availability monitoring component for providing the instance availability information to interested parties will be described below with regard to .

According to embodiments various types of manual or automated actions might also be taken with regard to instances of computing resources based upon the computed instance availability information for the instances . For example instances of computing resources might be migrated out of a data center affected by a failure and into a data center that is not affected by the failure. In other scenarios it might be desirable to migrate instances out of a data center not affected by a failure and into a data center that is affected by the failure. For example it might be desirable to migrate non essential instances into an affected data center if the instance price were very low. It might also be desirable to create backup instances in a data center with a low probability of future unavailability. Other types of actions described below might also be taken based upon the computed instance availability information . Details regarding some of the various types of actions that might be taken will be provided below with regard to .

In some embodiments the price charged by an operator of the distributed execution environment for the use of instances of computing resources might be modified following the provision of instance availability information to a customer. For example the price of instances might be decreased in order to encourage customers to migrate instances out of an affected data center. Alternately the price of instances might be increased in order to discourage customers from migrating non essential instances out of an affected data center. Other types of changes to the price charged for instances might also be made following the provision of instance availability information to a customer of a distributed execution environment . Additional details regarding various types of modifications that might be made to the pricing structure for instances of computing resources provided by a distributed execution environment following the provision of instance availability information will be provided below with regard to .

In some implementations the availability monitoring component might be configured to provide reduced functionality in the event of the failure or performance degradation of systems software or devices that provide the availability monitoring component . For example in the event of a failure the availability monitoring component might provide less customer specific data and instead provide more static data regarding the future availability of instances in the distributed execution environment . The availability monitoring component might also provide other types of reduced functionality in response to a failure condition.

As discussed briefly above the distributed execution environment can provide instances of computing resources on a permanent or an as needed basis. The instances of computing resources provided by the distributed execution environment may include various types of resources such as data processing resources data storage resources networking resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example and as will be described in greater detail below instances of data processing resources may be available as virtual machine instances A in a number of different configurations. The virtual machine instances A may be configured to execute applications including Web servers application servers media servers database servers and other types of applications. Instances of data storage resources may include file storage devices block storage devices and the like.

Each type or configuration of an instance of a computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity. Additional details regarding the various types of resources offered by the distributed execution environment will be provided below with regard to .

The instances of computing resources provided by the distributed execution environment are enabled in one implementation by one or more data centers A N which may be referred to herein singularly as a data center or in the plural as the data centers . The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that implements the concepts and technologies disclosed herein for providing instance availability information will be described below with regard to .

The customers and other users of the distributed execution environment may access the computing resources provided by the data centers over a WAN . Although a WAN is illustrated in it should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects the data centers to remote customers and other users may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

In one embodiment some of the instances A N which may be referred to herein singularly as an instance or in the plural as the instances are virtual machine instances. As known in the art a virtual machine instance is an instance of a software implementation of a machine i.e. a computer that executes programs like a physical machine. Each of the servers may be configured to execute an instance manager capable of instantiating and managing instances of computing resources. In the case of virtual machine instances for example the instance manager might be a hypervisor or another type of program configured to enable the execution of multiple virtual machine instances on a single server for example. Other types of instance managers might be used with other types of instances .

The data center shown in also includes a server computer F reserved for executing software components for managing the operation of the data center the server computers and the instances . In particular the server computer F might execute the instance availability monitoring component to collect operational status information and generate the instance availability information . Details regarding the operation of each of the instance availability monitoring component will be provided below. In this regard it should be appreciated that while this component is illustrated as executing within the distributed execution environment computing systems that are external to the distributed execution environment might be utilized to execute this component. Other configurations might also be utilized.

In the example data center shown in an appropriate LAN is utilized to interconnect the server computers A E and the server computer F. The LAN is also connected to the WAN illustrated in . It should be appreciated that the configuration and network topology illustrated in has been greatly simplified and that many more computing systems networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules might also be utilized for balancing a load between each of the data centers A N between each of the server computers A F in each data center and between instances of computing resources purchased by each customer of the distributed execution environment .

It should be appreciated that the data center described in is merely illustrative and that other implementations might be utilized. In particular functionality described herein as being performed by the instance availability monitoring component might be performed by other components or might be performed by a combination of components or by components arranged in another configuration not explicitly described herein. Additionally it should be appreciated that the functionality described herein might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art.

Standard instances are instances that are configured with generally proportional amounts of CPU and memory. Standard instances may be suitable for common computing applications. Standard instances may be made available in various sizes in some embodiments. For example small medium large and extra large instances may be made available with each of these instances having greater amounts of CPU and memory while maintaining approximately similar ratios of CPU to memory.

Micro instances are instances that provide a small amount of consistent CPU resources and allow CPU capacity to be increased in short bursts when additional cycles are available. Micro instances may be suited for lower throughput applications and Web sites that require additional compute cycles periodically.

High memory instances are instances that have proportionally more random access memory RAM resources than CPU resources. High memory resources are suitable for high throughput applications including database and memory caching applications. For example various types of high memory instances might offer between 17.1 and 68.4 GB of RAM in embodiments disclosed herein. Larger main memory sizes might also be made available to customers of the distributed execution environment . In contrast high CPU virtual machine instances have proportionally more CPU resources than RAM memory resources and are well suited for compute intensive applications.

Cluster compute instances are instances that offer proportionally high CPU resources with increased network performance. Cluster compute instances are well suited for High Performance Compute HPC applications and other demanding network bound applications. Cluster GPU instances are virtual machine instances that provide general purpose GPUs with proportionally high CPU and increased network performance for applications benefitting from highly parallelized processing including HPC rendering and media processing applications. While cluster compute instances provide the ability to create clusters of instances connected by a low latency high throughput network cluster GPU instances provide an additional option for applications that can benefit from the efficiency gains of the parallel computing power of GPUs over what can be achieved with traditional processors.

High I O instances are instances that provide very high disk I O performance and are ideally suited for many high performance database workloads. High I O instances may utilize solid state drive SSD based local instance storage for high I O throughput. High I O instances might also provide high levels of CPU memory and network performance.

It should be appreciated that the various instance types described above with regard to are merely illustrative. Other instance types not described explicitly might also be utilized with the various concepts and technologies described herein. Additionally in some embodiments virtual machine instances A may be made available in various sizes having continuous ratios of CPU to memory.

It should also be appreciated that the various instance types described above might also be utilized with various operating systems. For example a customer of the distributed execution environment might request to execute a high CPU virtual machine instance executing the LINUX operating system. Similarly a customer or other user of the of the distributed execution environment might request to use a cluster compute instance executing the MICROSOFT WINDOWS SERVER operating system. Other operating systems might also be utilized.

As also shown in the various instance types described above and the other instance types described herein might be priced according to various instance purchasing models . For example as shown in instances of computing resources may be priced according to an on demand model a reserved model a spot model a standby model an enhanced availability model and a reduced availability model . Aspects of each of these instance purchasing models are described in greater detail below.

Instances of computing resources priced according to the on demand model which may be referred to herein as regular instances are instances that are paid for and in active use by a customer. The on demand model allows customers of the distributed execution environment to pay for capacity per unit of time such as an instance hour without requiring a long term commitment. This may free the customer from the costs and complexities of planning purchasing and maintaining hardware and transforms what are commonly large fixed costs into much smaller variable costs.

Instances of computing resources priced according to the reserved model which might be referred to herein as reserved instances are instances of a computing resource that are reserved for a customer in exchange for a payment. The reserved model provides a customer the option to make a one time payment for each instance they want to reserve. In turn the customer may receive a significant discount on the hourly usage charge for reserved instances as compared to on demand instances. After the customer makes a one time payment for reserved instances the reserved instances are reserved for the customer and the customer has no further obligation. The customer may choose to run the reserved instances for the discounted usage rate for the duration of a chosen term. If the customer does not use the reserved instances the customer will not pay usage charges on these instances.

The spot model allows customers to bid on unused capacity in the distributed execution environment . The customer can run the instances priced according to the spot model which may be referred to herein as spot instances for as long as their bid exceeds a current market price called the spot instance market price. The spot instance market price may fluctuate based upon the supply of instances and the customer demand for the instances. Spot instances may be terminated if a customer s maximum bid no longer exceeds the current spot instance market price.

In order to obtain spot instances a customer places a request for spot instances that specifies the desired number of spot instances and the maximum price the customer is willing to pay per instance hour. If the customer s maximum price bid exceeds the current spot instance market price for the spot instances the customer s request will be fulfilled and the customer s spot instances will run until either the customer chooses to terminate them or the market price increases above the customer s maximum price whichever is sooner . Various components operating within the distributed execution environment may manage the market for the spot instances including setting the current spot instance market price for the spot instances.

Instances of computing resources purchased according to the standby model which might be referred to as standby instances are spot instances that have been acquired on behalf of a customer and that are made ready for near immediate use by the customer in the manner described herein. The price charged for standby instances is typically less than the price charged for on demand instances since the standby instances may be terminated in the same manner as spot instances. In one embodiment standby instances are priced higher than spot instances and reserved instances but lower than on demand instances.

Instance of computing resources purchased according to the enhanced availability model have a higher probability of future availability as computed herein than instances provided according to the other instance models described above. A premium might be charged for instances provided according to the enhanced availability model . In a similar fashion instances of computing resources purchased according to the reduced availability model have a lower probability of future availability than instances provided according to the other instance models described above. A discount might be provided for the purchase of instances according to the reduced availability model .

It should be appreciated that the various instance purchasing models described above for on demand instances reserved instances spot instances and standby instances are merely illustrative and that other mechanisms may be utilized to set the pricing for the various instance types. It should also be appreciated that the embodiments disclosed herein may be utilized with any of the instance types and purchasing models shown in and other configurations of instances and purchasing models not shown in . Additionally it should be appreciated that instances of other types of computing resources might also be priced according to the instance purchasing models shown in or others. Moreover the embodiments disclosed herein might also be utilized with other types of instances of computing resources such as data storage resources database resources networking resources and others. These resources might also be available in various configurations capacities arrangements and priced according to various pricing schemes. As will be described in greater detail below with regard to price charged for instances of computing resources might be modified based upon the computed instance availability information for the instances.

The routine begins at operation where the instance availability monitoring component collects operational status information from components within the distributed execution environment that are utilized to provide instances of computing resources. For example the instance availability monitoring component might collect operational status information from server computers networking devices software components power systems backup power supplies and other components within the distributed execution environment . The availability monitoring component might also collect operational status information and other information relevant to a determination of the availability of instances from an operator of the distributed execution environment . Additional details regarding the collection of operational status information from components within the distributed execution environment will be provided below with regard to .

From operation the routine proceeds to operation where the availability monitoring component collects external data from one or more external data sources . As discussed briefly above the external data may be relevant to a determination of a probability of a future failure of instances provided by the distributed execution environment . For example the instance availability monitoring component might be configured to collect weather forecasts for a geographic area that includes a data center that provides the instances . Similarly the instance availability monitoring component might collect information from utility providers such as power gas and data networking providers. This data might be indicative of a future failure of a utility provider and therefore might also be collected by the instance availability monitoring component and utilized to compute a future probability of a failure of instances provided by the distributed execution environment . Additional details regarding aspects of the operation of the instance availability monitoring component for collecting data from external data sources will be described below with regard to .

From operation the routine proceeds to operation where the instance availability monitoring component utilizes data collected at operations and or to identify any actual instance failures within the distributed execution environment . If any actual instance failures are identified the instance availability monitoring component might also determine the severity of the failures. As mentioned above this information might be computed in advance of receiving a request or in response to receiving a request for instance availability information . Additionally and as will be described in greater detail below this information might be provided to customers or other users of the distributed execution environment and utilized to take action with respect to instances of computing resources. Moreover this information might also be provided to software or hardware components and utilized to take action with respect to the instances in an automated fashion.

From operation the routine proceeds to operation where the instance availability monitoring component utilizes data collected at operations and or to compute the probability of future availability of one or more instances executing within the distributed execution environment . This information might also be computed in advance of or in response to receiving a request for the instance availability information . For example a user might submit a request for the probability that a certain instance will be available for use during a particular time period. In response to receiving such a request the instance availability monitoring component will compute the probability that the instance will be available during the specified time period using some or all of the information collected at operations and .

Once the instance availability monitoring component has identified actual instance failures the severity of the instance failures and the probability of future availability of one or more instances some or all of this information might be provided to a customer or other user of the distributed execution environment as the instance availability information . This occurs at operation of the routine .

As discussed above the instance availability information information might be provided in advance of or in response to a request for the instance availability information . As also discussed briefly above this information might be provided by way of various mechanisms such as through an API. Additional details regarding the various mechanisms described herein for providing the instance availability information to one or more interested parties will be provided below with regard to .

From operation the routine proceeds to operation . At operation a user of the distributed execution environment or a software or hardware component might take one or more actions based upon the instance availability information provided at operation . For example a user might move instances having a lower probability of future availability from a data center affected by a problem to another data center in the distributed execution environment that is not affected. Other types of manual and automated actions might also be taken. Additional details regarding the various types of actions that will be taken will be provided below with regard to .

From operation the routine proceeds back to operation where the process described above may be repeated. By continually repeating this process data identifying current failures or future potential failures within the distributed execution environment may be identified. Additionally appropriate action might be taken before an actual failure occurs thereby minimizing the impact of such a failure. Additional details regarding these aspects will be provided below with regard to .

As mentioned above the operational status information describes the current operational status of the hardware devices including but not limited to operational metrics and statistics information identifying current and past failures changes in operation e.g. a switch to a backup generator and other types of information indicating the operational state of the device. The operational status information might also be indicative of a current failure or the potential of a future failure. For example low voltage levels output from a power supply might be indicative of a future failure of the power supply. Likewise a network device experiencing high levels of packet loss increased ping times increased latencies and or other issues might be indicative of a future failure of the network device.

The instance availability monitoring component might collect data from virtually any device within the distributed execution environment . For example and without limitation the operational status information might be collected from desktop and server computers networking devices power supplies and other power related components cooling devices backup power supplies generators and other backup power related components. The operational status information might be collected directly from devices configured to provide such information. Alternately the operational status information might be collected from devices configured to monitor the operation of other devices.

As mentioned briefly above the operational status information might be collected from components that are operated within the distributed execution environment to provide actual instances of computing resources. In other embodiments however the operational status information might be collected from canary instances . Canary instances are instances that have been created for the purpose of monitoring aspects of the operation of the distributed execution environment . For example canary instances might be created to monitor performance aspects of the distributed execution environment . Canary instances might also be created to monitor other metrics that are indicative of current failures or the potential for future failures of components within the distributed execution environment . In some embodiments production instances operating under the control of the owner or operator of the distributed execution environment to provide production services may also serve as canary instances. Such instances may perform any task including without limitation serving as a load balancer a database instance etc.

From operation the routine proceeds to operation where the instance availability monitoring component might also collect operational status information from software components executing within the distributed execution environment . The software components might be components utilized to actually provide instances of computing resources or other types of instances . For example operational status information might be collected from software executing in one or more virtual machine instances A executing within the distributed execution environment . Operational status information might also be collected from the instance manager and other types of software components configured to monitor aspects of the operation of the distributed execution environment . Operational status information might also be collected from other types of software components executing within the distributed execution environment .

From operation the routine proceeds to operation where operational status information might also be received from a system operator in the distributed execution environment . For example an appropriate interface might be provided through which an operator can submit information including but not limited to known actual failures or potential failures of components within the distributed execution environment scheduled and or unscheduled maintenance of hardware or software components within the distributed execution environment scheduled and or unscheduled software deployment within the distributed execution environment weather events that might impact the operation of the distributed execution environment the status of utility providers historical data regarding actual failures and their causes mean time between failures MTBF information for components within the distributed execution environment information regarding current and or expected processing loads and other information. As will be discussed in further detail below some or all of this information might be utilized to compute the probability of future availability for instances of computing resources within the distributed execution environment .

From operation the routine proceeds to operation where operational status information might be collected from other sources within the distributed execution environment not explicitly identified above. The routine then proceeds from operation back to operation described above where the data collection process may be repeated. In this manner operational status information is continually collected regarding components within the distributed execution environment that are utilized to provide instances of computing resources. As will be described in greater detail with regard to information relevant to the future availability of instances within the distributed execution environment might also be collected from sources that are external to the distributed execution environment .

From operation the routine proceeds to operation where the instance availability monitoring component collects MTBF information for hardware components within the distributed execution environment utilized to provide instances of computing resources. For example a device manufacturer wholesaler or retailer might provide an external data source for obtaining the MTBF information.

From operation the routine proceeds to operation where the instance availability monitoring component collects data from one or more utility providers that service the data centers of the distributed execution environment . For example the availability monitoring component might collect data from an electrical or gas utility provider regarding the current and or future status of the service provided by the utility. The data might also indicate future events that might affect the availability of the service provided by the utility. As an example the utility provider might provide information regarding future maintenance events upgrades weather events or other types of events that might impact the ability of the utility provider to service the distributed execution environment .

From operation the routine proceeds to operation where the instance availability monitoring component collects data from one or more data networking providers. For example the availability monitoring component might collect data from a data networking provider regarding the current and or future status of the data communications services provided by the provider. The data might also indicate future events that might affect the availability of the data communications service provided by the provider. As an example the data networking provider might provide information regarding future maintenance events upgrades weather events or other types of events that might impact the ability of the data networking provider to provide data communications services to the data centers that make up the distributed execution environment .

From operation the routine proceeds to operation where the instance availability monitoring component might collect data from other sources external to the distributed execution environment not explicitly identified above. The routine then proceeds from operation back to operation described above where the data collection process may be repeated. In this manner data that might be relevant to the future availability of instances within the distributed execution environment might be continually collected from sources external to the distributed execution environment .

The routine begins at operation where the instance availability monitoring component or another component exposes a Web service or other type of API through which interested parties can obtain the instance availability information . For example an interested party might submit a request for the instance availability information for an instance or group of instances to the instance availability monitoring component by way of a Web services API. In response thereto the instance availability monitoring component might retrieve or compute the requested instance availability information and provide the information in response to the request . In this way a customer or other user of the distributed execution environment can obtain information regarding the actual failure of one or more instances the severity of the failure and the probability that an instance will be available at a future point or period in time.

According to various embodiments the instance availability information might be exposed in various ways. For example a customer of the distributed execution environment might be permitted to obtain instance availability information only for instances that they have purchased. In this way the instance availability information might be exposed on a per customer basis. The instance availability information might also be exposed on a per instance basis a per group of instances basis a per data center basis a per region basis a per server basis a per rack basis a per pod basis per room of servers basis or based upon another subdivision. The instance availability information might also be limited to a certain group of customers of the distributed execution environment such as customers doing a high volume of business or customers that are particularly technically savvy.

In some embodiments the instance availability information might include detailed information regarding a failure or probability of failure of one or more instances . For example the probability of availability of an instance may be computed as 95 at some future point in time due to a hurricane forecasted for the geographic area of a data center in the distributed execution environment . In this example the instance availability information might provide one or more reasons i.e. weather conditions such as a hurricane as to why the availability of the instance is less than 100 . Other reasons relating to specific actual or predicted hardware failures utility failures network failures or other types of failures might also be provided.

From operation the routine proceeds to operation where the instance availability monitoring component might also provide other types of pull mechanisms through which customers or other users of the distributed execution environment can obtain the instance availability information . For example a user might utilize a console application or another type of graphical user interface GUI provided by the instance availability monitoring component or another component to obtain the instance availability information . Other types of application based Web based and mobile device based user interfaces might also be provided through which a customer or other users of the distributed execution environment can obtain the instance availability information .

It should be appreciated that the probability of future availability might be expressed in various ways. For example the probability of future availability might be expressed numerically as a percentage e.g. an instance is 95 likely to be available during a particular time period . Alternately the probability of future availability may be provided in the form of information usable to determine comparative reliability of pairs of instances. The probability of future availability might also be expressed as the probability of future unavailability e.g. an instance is 5 likely to be unavailable during a particular time period . In this regard the term availability might encompass partial unavailability as a result of a reduction in performance of instances. Accordingly it should be appreciated that an instance might be wholly available wholly unavailable or partially unavailable due to a reduction in performance or another issue impacting performance.

It should also be appreciated that the instance availability information might be presented in various ways when a GUI is utilized to present this information. For example the instance availability information might be presented as textual or graphical data. When presented graphically the instance availability information might be presented as indicators corresponding to instances or groups of instances. As an example a graphical indicator might be presented in the color green to signify that the probability of future availability for an instance or instances is high. Similarly a graphical indicator might be presented in the color red to signify that the probability of future availability for an instance or instances is low. Other types of graphical attributes might also be correlated to the computed probabilities and provided to customers of the distributed execution environment in other ways.

From operation the routine proceeds to operation where the instance availability monitoring component might also provide one or more push mechanisms for providing the instance availability information to customers and other users of the distributed execution environment . For example the instance availability monitoring component might push the instance availability information to interested parties by way of e mail SMS social networking services or other mechanisms where the transmission of the instance availability information is initiated by the instance availability monitoring component rather than by the interested party. In order to receive such notifications an interested party might register in advance to receive instance availability information for certain instances on a predetermined schedule in response to the occurrence of certain events e.g. the projected availability for an instance during a future time period falling below a certain value or based upon other factors.

From operation the routine proceeds to operation where other mechanisms other than those specifically described above might be utilized to provide the instance availability information to interested parties. The routine then proceeds from operation back to operation described above. In this way the instance availability information can be continually made available to interested parties by way of one or more of the mechanisms described above.

In some embodiments the instance availability information is made available to interested parties in real time or in near real time. A customer of the distributed execution environment might pay a premium to have near immediate access to the instance availability information . In other embodiments a delay might be imposed on the availability of the instance availability information . For example the information might be made available a certain number of seconds minutes hours or days after an instance failure has occurred. Customers of the distributed execution environment might pay increasing amounts as the delay time is decreased. Other monetary and temporal restrictions might also be placed on the provision of the instance availability information to interested parties.

In some embodiments a customer might also be provided with correlated failure likelihoods for their instances of computing resources. For example a customer might request a correlated failure probability for two or more instances . Using the information collected above the probability of a correlated failure of the identified resources might be computed and provided to the customer using one or more of the mechanisms described above. A customer might also be permitted to submit a list of instance identifiers and in return the customer will be provided with a list of the identifiers that has been re ordered based upon the expected probability of availability of the instances for some future time period. A customer might utilize the ordered list to assign the referenced instances to various tasks. For example an instance having a lower probability of future availability might be assigned to a less critical task than an instance with a higher probability of future availability.

From operation the routine proceeds to operation where various types of actions might be taken with respect to an identified failure or a potential for the failure of one or more instances in the distributed execution environment . Operations A E described below illustrate several types of actions that might be taken in response to various types of failures or potential failures. It should be appreciated that these actions are merely illustrative and that many other types of actions might also be taken. Additionally it should be appreciated that these actions might be taken manually in response to commands received from customers or other users of the distributed execution environment or in an automated fashion by software or hardware components configured to respond to failures or potential failures of instances in the distributed execution environment . For example an autoscaling component might be configured in embodiments to take certain actions with respect to the scaling of instances up or down based upon the instance availability information . Other types of components might also be configured similarly.

At operation A one or more backup instances are created in a non affected data center or region. This type of action might be taken for example in response to receiving instance availability information indicating that instances in a particular data center or region have a lower than normal probability of availability at some future point in time. By creating backup instances in a non affected region or data center the load served by the potentially affected instances might be transferred immediate to the backup instances in the event of an actual instance failure.

At operation B one or more instances are migrated from an affected data center or region to a non affected data center or region. This type of action might also be taken in response to receiving instance availability information indicating that instances in a particular data center or region have a lower than normal probability of availability at some future point in time. By migrating instances out of an affected region or data center to a non affected region or data center the impact of an actual instance failure might be avoided.

In some embodiments an instance type is created and utilized that is automatically migrated out of an affected data center. The instance type might be configured to automatically migrate out of an affected data center when an actual failure occurs and or when the probability of future availability of the instance drops below a certain percentage. An autoscaling device might be implemented with this functionality in some embodiments. Instances might also be migrated in other ways in response to other occurrences in other embodiments.

At operation C one or more instances are migrated from a non affected data center or region to an affected data center or region. This type of action might also be taken in response to determining that instances in a certain data center or region have a lower than normal probability of availability at some future point in time. In this example however certain types of instances such as instances performing non essential processing tasks or storing non essential data might be migrated into an affected data center or region in response to a discount in instance pricing offered by the operator of the distributed execution environment or other motivating factor. In other embodiments instances might be migrated out of the distributed execution environment into another data center or centers or an on premises computing facility operated by the customer of the distributed execution environment . An appropriate GUI might be provided that allows a customer to view information regarding the operational status of one or more distributed execution environments provided as a service such as the distributed execution environment and one or more on premises customer operated distributed execution environments. The GUI might also allow the customer to move instances of computing resources between each of these environments in an appropriate manner.

At operation D new instances might be launched in a manner designed to minimize the possibility of correlated failure with other affected instances. For example new instances might be launched in a non affected rack room data center or region in order to avoid a correlated failure of instances belonging to the same customer of the distributed execution environment . New instances might also be launched in other ways in order to minimize the possibility of a correlated failure.

At operation E the operation of a software deployment component operating within the distributed execution environment might be modified based upon the instance availability information . For example if the information indicates a number of instance failures the software deployment component might be instructed to stage throttle or even defer new software deployments to a future time.

In some embodiments a software deployment component might also utilize the instance availability information to schedule deployment operations to minimize risk or cost. For example the software deployment component might be configured to determine the required surplus capacity needed to handle software deployment in light of the instance availability information . The software deployment component might then modify the software deployment operations based upon the required surplus capacity. The operation of the software deployment component might also be modified in other ways based upon the instance availability information . The operation of other components within the distributed execution environment might also be modified in a similar manner.

As indicated above the actions illustrated at operations A E are merely illustrative and many other types of actions might also be taken based upon the instance availability information . For example and without limitation database instances and other resources might be moved away from data centers or regions hosting instances having a decreased probability of future availability database instances might be synchronized or mirrored to other instances outside a data center or region hosting instances having a decreased probability of future availability and instances might be pre emptively shifted away from failing load balancers or other instances of networking resources identified as having an elevated risk of future failure.

Instances might also be moved reconfigured redeployed migrated quiesced and otherwise modified in response to actual failures or potential failures identified in the instance availability information . For example the configuration and or type of instances in the distributed execution environment might be modified based upon the instance availability information . As one specific example excess capacity may exist in the form of virtual machine instances in the distributed execution environment . The configuration and or type of these virtual machine instances might be modified in response to determining that the instance availability information indicates the possibility of failure. For example functionality performed by instances acting as masters or slaves might be reassigned. Other examples of actions that might be taken in response to actual failures or potential failures identified in the instance availability information include but are not limited to re weighted clients utilizing DNS or other configurations moving workloads between providers creating snapshots backups or performing other types of data replication activities and protocols might be switched from performance oriented protocols to more fault resilient protocols. Other types of actions might also be taken.

The instance availability information might also be utilized to queue or prioritize instance launch requests. For example replacement instances for affected instances or customers might be prioritized. As another example customers might be permitted to pay an extra fee for premium instances that are given priority for replacement following a failure. Instance launches for replacement instances for heavily affected customers might also be prioritized. As an alternative instance launches for unaffected customers might also be prioritized. This alternative might be utilized to reduce the cascading failure effects resulting from customers evacuating a failing datacenter to cause a failure event to affect fewer customers. Instances launches might also be prioritized for customers that are not utilizing instances purchased at a discount. Using these mechanisms instances can be launched in accordance with a priority based at least in part on the instance availability information associated with one or more other instances. Moreover one or more of the actions described above might be selected based upon the expected cost of an outage expressed as an expected loss of revenue as a result of the unavailability of instances .

In some embodiments the instance availability information might also be utilized to satisfy a customer request to provide instances at a certain level of availability for a certain period of time. For example a customer might be permitted to submit desired availability information along with a request to instantiate new instances of computing resources. The customer might provide a parameter to a run instances request that specifies a desired or required availability of the instances during one or more periods of time. The instance availability information might then be utilized to configure the requested instances in a manner likely to meet the customer s stated availability requirements. In this way a customer can request that instances be provided during a certain time period or periods at a specified level of availability. From operations A E the routine proceeds to operation where it returns back to operation described above with regard to .

From operation the routine proceeds to operation where the pricing charged to the customer for the instances might be modified by the operator of the distributed execution environment following the provision of the instance availability information to the customer. Operations A C described below illustrate several types of modifications to instance pricing that might be made following the provision of the instance availability information to the customer. It should be appreciated that these pricing modifications are merely illustrative and that the price for instances might be modified in other ways after instance availability information has been provided to a customer.

At operation A the price of instances charged to a customer might be increased following the provision of instance availability information to the customer. The price of instances might be increased for example in order to discourage the customer from migrating the instances out of an affected data center .

At operation B the price of instances charged to a customer might be decreased following the provision of instance availability information to the customer. The price of instances might be decreased for example in order to encourage the customer to keep instances in an affected data center . The price of instances might also be decreased in order to encourage a customer to migrate non essential instances into an affected data center .

At operation C spot instance pricing might be modified in view of the instance availability information . As discussed above a spot model might be utilized that allows customers to bid on unused capacity in the distributed execution environment . The customer can run spot instances for as long as the customer s bid exceeds the spot instance market price. The spot instance market price may fluctuate based upon the supply of instances and the customer demand for the instances. Spot instances may be terminated if a customer s maximum bid no longer exceeds the current spot instance market price. As shown in spot instance pricing might be increased or decreased in view of an actual failure of one or more instances or an increased probability of a future failure of one or more instances .

From operations A C the routine proceeds to operation where it ends. It should be appreciated that the operations described with regard to are merely illustrative and that the price charged by an operator of the distributed execution environment for instances might be modified in other ways following the provision of the instance availability information to a customer of the distributed execution environment .

In some implementations customers might also be permitted to purchase new instances based upon the instance availability information . For example a customer could submit a request to purchase at a premium one or more highly resilient instances during a particular period of time. The instance availability information computed in the manner above might be utilized to identify which instances from a group of instances are likely to be the most resilient to failure during the time specified by the customer. The instance availability information might also be utilized to identify and provide instances to customers that meet other types of requirements.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard . The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the local area network . The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer such as the instance availability monitoring component the computed instance availability information for one or more instance and or any of the other software components and data described above. The mass storage device might also store other programs and data not specifically identified herein.

In one embodiment the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transforms the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the various routines described above with regard to .

The computer may also include one or more input output controllers for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. Similarly the input output controller may provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in .

Based on the foregoing it should be appreciated that technologies for providing instance availability information for instances provided by a distributed execution environment have been presented herein. Although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

