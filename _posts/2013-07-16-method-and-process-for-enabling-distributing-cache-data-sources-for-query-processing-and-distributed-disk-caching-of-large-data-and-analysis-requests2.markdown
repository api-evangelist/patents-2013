---

title: Method and process for enabling distributing cache data sources for query processing and distributed disk caching of large data and analysis requests
abstract: A method and system for large data and distributed disk cache processing in a Pneuron platform . The system and method include three specific interoperable but distributed functions: the adapter/cache Pneuron  and distributed disk files , a dynamic memory mapping tree , and distributed disk file cleanup . The system allows for large data processing considerations and the ability to access and acquire information from large data sets and rapidly distribute and provide the information to subsequent Pneurons  for processing. The system also provides the ability to store large result sets, the ability to deal with sequential as well as asynchronous parallel processing, the ability to address large unstructured data; web logs, email, web pages, etc., as well as the ability to handle failures to large block processing.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542408&OS=09542408&RS=09542408
owner: Pneuron Corp.
number: 09542408
owner_city: Nashua
owner_country: US
publication_date: 20130716
---
This application is a continuation in part of U.S. patent application Ser. No. 12 870 348 filed on Aug. 27 2010 and entitled System and Method For Employing The Use Of Neural Networks For The Purpose Of Real Time Business Intelligence And Automation Control and a continuation in part of U.S. patent application Ser. No. 13 442 353 filed on Apr. 9 2012 and entitled Legacy Application Migration To Real Time Parallel Performance Cloud and claims the benefit of U.S. Provisional Patent Application No. 61 672 028 entitled A Method And Process For Enabling Distributing Cache Data Sources For Query Processing And Distributed Disk Caching Of large Data And Analysis Requests which was filed on Jul. 16 2012 all of which are incorporated herein by reference

The present invention relates to enabling distributing cache data sources for processing large data and analysis requests and more particularly relates to providing a distributed caching model to enable the management of distributed cache files on multiple servers or virtual machines and facilitating multiple distributed processing operations simultaneously.

Accessing geographically dispersed multiple systems and large datasets and being able to operate on this information to perform multiple simultaneous operations is very difficult. Combining and federating distributed operation results together compounds the problems. Most companies utilize an aggregated data warehouse with multiple feeder data sources and extraction transformation and loading ETL routines to organize distributed data together. The data preparation cost and time are signification.

Therefore what is needed is a distributed cache evaluation and processing model that operates across multiple servers simultaneously. The system should function such that multiple analytic and business operations occur while the system should also enable sampling and evaluation with collection and recording of results. Furthermore the invention should provide for distributed cache creation and orchestration of coordinated distributed data access and generation of iteration results from other distributed applications. All distributed cache files operations should be coordinated together into unified processing models.

The system and method of the present invention implements an Adapter Pneuron that interacts within its distributed processing infrastructure for large data processing. The Adapter Pneuron enables the real time acquisition of data from different types of application data sources including service application programming interface API database and files. Data is acquired and transformed into self describing ASCII disk cache files with an associated definition of the structure. The disk cache files are distributed across one to many servers or virtual machines VMs . The distributed disk cache files are accessed by participating Pneuron applications to perform operations selectively on the distributed disk data. Multiple operations are performed simultaneously by the different Pneurons with results evaluated and subsequent iteration operations applied. Evaluated results are concatenated and federated together across the different disk cache files simultaneously.

Disk cache files are removed automatically using a high low disk evaluation model to remove disk cache files based on server disk utilization and automatic evaluation aging for disk cache files. The present invention enables the ability to quickly access target systems and data sources and generate distributed disk cache files to simultaneously perform real time operations by other Pneuron programs and to federate the results together. These activities occur without requiring preparation of the data.

The neurons are all generally capable of subscribing to and receiving notification of system events and receiving messages they are all capable of parsing XML messages and compiling them to the binary form recognizable by the SPU they are all based on a soft processing unit or spu this the neural network equivalent of a CPU in a computer it can process a stream of binary codes and perform it s primary purpose once it receives the appropriate code stream they are all capable of setting and preserving their state the state is persistent similar to SRAM they are all capable of storing a metadata based rules matrix that will determine whether or not the primary function is executed and in what way the primary function is expressed as some combination of state setting message construction message transmission and event broadcast and they are all capable of constructing outgoing messages and of transmitting outgoing messages to the enterprise message bus or to a list of neuron receptors and .

It is the nature of a neuron to be extremely small simple and provide very simple processing but as part of a complex network of inter reactive neurons they can be assembled to serve a more complex purpose. The Neuron receives the message at message receptor updates its state and evaluates the message based on its rules . If the execution rules are met the neuron executes its primary function. The neurons can perform data retrieval and caching.

The present invention features a system and method for large data processing and requesting reconstruction. The system and method includes the capacity for large data processing considerations targeting record queries and responses of 1 million and higher results . The invention provides for the ability to access and acquire information from large data sets greater than 1 million records and rapidly provide the information to subsequent Pneurons for processing combined with the ability to extract and render large data sets from databases without impacting system of records processing and rapidly provide the information to subsequent Pneurons for processing. The system also has the ability for multi threaded processing by multiple distributed adaptor cache pneurons of large data sets enabling storage and access to large historical results and the ability to handle large inputs. The invention provides the ability to store or persist large result sets. For example a million plus raw data evaluation may generate a very large array of intelligence results that need to be persisted for future use which might occur with time series data with multiple month years and multiple intelligence results for each intelligence record. Further the invention is able to deal with sequential as well as asynchronous parallel processing is able to address large unstructured data web logs email web pages etc. and is able to handle failures to large block processing.

The design considerations of the present invention are focused on maximizing distributed processing workload volumes results and requests without running out of resources e.g. hardware resources including memory and CPU. The solution consists of essentially three specific interoperable but distributed functions. First the Adaptor Cache Pneuron and distributed disk cache files . Second the dynamic mapping tree . Third the distributed disk cache file cleanup . Each function will be described in greater detail below.

The Adaptor Cache Pneuron and or distributed adaptor cache pneurons and distributed disk cache files address the problem of extremely large record set processing which presents different technology challenges. Some of the current problems in the prior art include loading all information into memory will exceed hardware server resources and breaking up large requests presents complexities in consolidating and synchronizing the information results together and multiple operations may be required at different times by different programs across one or more large record sets.

The present invention solves these problems by extracting large data sets from target systems and data sources and converting them into distributed disk cache files . The disk based intermediate cache files and processing is coordinated by and across multiple Pneurons to perform multiple simultaneous operations on the information distributed disk cache files . A comparison of the prior art system of process execution and the distributed cache model of the present invention is shown in .

The cache file based system of the present invention will store the large requests within self describing ASCII files and make these files the data within them available to any Pneuron that needs to access them. Large data requests are received and processed by the Adapter Pneuron . The Adapter Pneuron transforms the large data requests into ASCII file content extended Comma Separated Values CSV format including the attribute type definition and saves the ASCII file content on the local host hard drive. Once a request is received the Adapter Pneuron will send to all its associated Pneuron connections a special message that will announce that new work is available and the data can be accessed from the referred disk cache files from the target disk cache location on the file system. This process will perform in the same manner even if the request is composed from multiple batches thereby allowing the request to be reconstructed. All of the Pneurons will interact with this model approach. The Adapter Pneuron maintains context of each distributed cache file and provides system context to each participating Pneuron. Context includes the definition of the cached file format and information elements and location of the file. Participating Pneurons are able to parse the cached adaptor Pneuron information and perform different operations.

Once the data has been cached the Adapter Pneuron will send to subsequently connected Pneurons a special message that will announce to all configured and associated Pneurons that new work is available and the Pneurons can execute their operations on the disk cache files. The system includes a utility that enables the calling Pneurons to transform to and from XmlMessage to the target extended CSV extended file format.

As a result the invention greatly simplifies the access and operations on the distributed disk cache data and provides a common abstraction layer and interface for the Pneurons to access and perform operations on the data. The Pneurons only need to read the referred file content and transform the information into usable XmlMessage Type data. In addition the Pneurons can filter and extract only the necessary attributes as vectors or other objects and optimize the memory management resources.

This invention therefore provides many critical transformational benefits. The data is accessed and managed in disk cache files at targeted server locations on the respective host cache system such that requests do not need to be reconstructed which saves processing time and reduces complexity. The system ability to process very large amounts of data is significant and unconstrained. Within the actual memory processing the information is streamlined. Only reference and common messages and pointers are included. The distributed cache file model enables a planning mechanism to be implemented to optimize the resources and synchronize distributed cache file access and processing. The messages do not require any complex logical operations that will require the file structure to change. The system will be fully capable of handling the CRUD operations create add new entry record read record update record and delete record . This solution will work for all cases where the entity large request as a whole will retain its integrity structure.

The dynamic mapping tree model shown for example in is implemented to support the Adaptor Pneuron. The memory mapping enables a large data processing request transaction to retain its processing integrity from initiation through completion of an execution. By retaining processing integrity the representation and all the data characteristics will be retained and accessible during the request life cycle. Data representation defines the meta data characteristics of the information including the way that the data is stored on the file system the number of files file types data definition attribute definition request references etc.

In order to manage the distributed disk caching model the invention enables the following operations to be performed on the disk cache files Create add new record within the large request Read access one or more records from the large request Update update modify the data for one or more records and Delete delete one or more records. Given the synchronization and management complexities the invention restricts the following functions batching duplicate batches and conditional batches.

To manage the distribution complexity of multiple disk cache files the invention maintains and adjusts the system context dynamically. This model enables automatic changes to the data representation and structure. A programmatic change history tracking is maintained which keeps track of changes applied to the disk cache file s . This feature enables automatic reconstruction of the disk cache file at any given time to support a Pneuron initiated operation and request. The present invention has implemented a programmatic process to decompose large data sets into request into smaller batches. The batches are organized into parallel execution requests and configured as part of the Pneuron Networks definition.

A dynamic memory tree map is implemented to manage the distributed cache process across multiple Pneurons. The dynamic tree maintains and provides system context for the entire distributed processing model and plan. The entire processing life cycle is maintained. Each node leaf within the dynamic tree will contain a file reference or a position index reference and then point the Pneuron request message to the corresponding memory area. The dynamic memory tree map establishes a breadcrumb trail. Using this approach the system is able to reconstruct the request with the new values by traversing the memory tree. The system merges and reconstructs the disk cache results based on the specific request. The same logic and approach is also applied for the Large Request Reconstruction which enables a generic distributed disk cache operation model to be applied at the Pneuron Base Level.

The system will apply different solutions based on the context and type of operation. Dead empty messages are still sent out through the network. When a batch gets split in two or more sub batches they are flagged. By doing this the system will be able to track the messages. The final Pneuron should have a max dead time interval which will represent the time that it will wait for more batches. This time is checked validated with the last batch arrival time. Each time a batch gets split the characteristic flag is appended with additional information meant to inform about the split. Example 1 1 3 15 1 3 6 7 4 4. SPLIT is defined as Position Number Of Message Batch Total Number Of Messages . Each time a batch gets split request the split information will be appended to the current flag which will be done for each split sub batch. By the time the message reaches the Final Pneuron the Pneuron will be able to establish the context based on the amount of information that it receives and the Pneuron will be ready to create an execution tree such as the one detailed in . This approach is based on the fact that when the Final Pneuron receives a batch request it will be able to trace it and complete or start if it is the first batch from a large request based on the defined execution tree. Any sub batch that is received is able to communicate with the Pneuron of all the tree node parents and also the number of leafs per split. With this approach the Final Pneuron will be able to map out what it should receive also the information that it receives can be ordered.

There are scenarios where the requesting Pneuron is unable to interact with the distributed cache disk. Examples could include 1 The target data source or system is not available for access by the Adapter Pneuron and the disk file cache cannot be created and 2 The file system where the disk cache file is stored is not available. An Idle or Dead Time interval model can be implemented to manage this scenario such that the Idle or Dead Time interval establishes a periodic mechanism to compose the message and send it further or execute the request . The Idle or Dead Time interval evaluates each past request and the elapsed time when the last batch was received and the execution trigger.

Finally the distributed disk cache file clean up portion of the process provides users with the capability of caching data within the entire system on all the host cache systems that are running the platform distributed pneurons . The cache is a file system based mechanism that transforms and stores them indefinitely making them available to one or more worker process pneurons. Since the invention is dealing with a highly distributed system that provides value by providing the users with parallel computing capabilities all the resources that are used within this computing process must be available at each host level that takes part of the parallel execution . In doing so each host will own a copy for each cache data that it will process. This creates a big problem because the hardware resources hard drive space in this case is not unlimited and since each host must have a local copy of the cached job the system does not deal with replication duplicate resources at different host levels .

Therefore the present invention has implemented a High Low distributed disk cache removal model. The invention configures properties for each host cache system either a physical server or virtual server machine . The host Max Available Space property establishes the amount of bytes megabytes or even gigabytes that can be used by the caching system on that specific server . Once this max threshold is reached the system will delete existing cache files based on the size and age of the distributed cache file. This model will eliminate past files and enable new disk files to be established and used. The cache file system will be bounded with these rules in this case the only rule limitation that we need is to have a maximum level of space that it can be used in order to store the working cache files. This maximum level of space that can be used will be stored within the Softwarerx.Properties file from CFG directory because this is a centralized storage point for all the properties and attributes that must or can t be stored within the database.

The following examples are intended to provide details on how the distributed disk file clean up functions in the present system. In a first example a save cache data request is requested received and max space has not been reached on the host server cache system . In this scenario a Pneuron issues a request to save data into the cache data file system . The request reaches the SAN Storage Area Network or Cache System process . The system checks the Max Space configured value . The system compares the Max Space with the actual available space on the local hard drive which is the hard drive where the host system is running or more exactly where the cache directory file system is found. In this first example there is sufficient space to save the information therefore the system will save the information with the provided data reference name file name in the file system .

In a second example a save cache data request is requested and max space has been reached. In this scenario a Pneuron issues a request to save data into the cache data system. The request reaches the SAN Storage Area Network or Cache System . The system checks the Max Space configured value. The system compares the Max Space with the actual available space on the local hard drive which is the hard drive where the system is running or more exactly where the cache directory is found. The system determines there is NO sufficient space to save the information. The system orders the existing cache data in descending order based upon the creation date. Then a loop occurs which deletes the oldest file and then re checks to see if there is sufficient space. The loop ends once sufficient space is cleared or if there is nothing else to delete. If the system has sufficient space to save then the information is saved with the provided data reference name file name .

In a third example a save cache data request is requested and max space has been reached however the system is unable to make sufficient space. In this scenario a Pneuron issues a request to save data into the cache data system. The request reaches the SAN Storage Area Network or Cache System . The system checks the Max Space configured value. The system compares the Max Space with the actual available space on the local hard drive which is the hard drive where the system is running or more exactly where the cache directory is found. The system finds there is NO sufficient space to save the information. The system orders the existing cache data descending based upon the creation date. A loop is created such that the oldest file is deleted and then the system re checks to see if there is sufficient space. In this example the system deletes all old files and checks again for sufficient space and determines that there is not sufficient space and there is nothing else to delete thereby ending the loop. In this example the system does not have sufficient space to save and the system will register a failure.

In a fourth example a system is able to get cache data when a local copy is available. In this scenario the cache system receives a request to get a specific data. This request can be issued by any Pneuron Instance that is supposed to use the cached data and needs to get a reference to the local file copy in order to read and parse analyze or otherwise utilize the necessary information. The system receives a request to get cache data . The system process cache checks to see if the cached data is found within the local file system . The cache data is found to exist within the local file system. Return reference to cache data . The caller will then be able to use the data.

In a fifth example a system is unable to get cache data because a local copy is not available. In this scenario host cache system receives a request to get specific data . This request can be issued by any Pneuron Instance that is supposed to use the cached data and needs to get a reference to the local file copy in order to read and parse analyze or otherwise utilize the necessary information. The system receives a request to get cache data . The system cache process checks to see if the cached data is found within the local file system a. The system determines that the cache data DOES NOT EXIST within the local file system. The Current Cache System asks the other registered host cache system by calling their associated cache system process a which check for existence of the data. A loop is created such that the Foreign Cache file system b of host cache system is checked for data then the data is found and then the data is copied locally . The loop ends when there are no more hosts cache systems to search or once the cache data is found. Return reference to cache data . The caller host cache system will then be able to use the cached data.

In a sixth example a system is unable to get cache data because a local copy is not available anywhere. The cache system receives a request to get a specific data. This request can be issued by any Pneuron Instance that is supposed to use the cached data and needs to get a reference to the local file copy in order to read and parse the necessary information. The system receives a get cache data request. The system checks to see if the cached data is found within the local file system. The system determines that cache data DOES NOT EXIST within the local file system. The Current Cache System asks the other registered host by calling their associated host cache systems and checking for the data existence. A loop is created wherein the system checks the Check Foreign Cache System for data and determines that the data is not found. The loop ends once there are no more hosts cache systems to check and no cache data has been found. The system determines that the data was not found. A failure has occurred.

In summary the present invention enables the real time generation management and synchronization of distributed disk caches within a highly distributed processing environment. The process deconstructs and organizes large data sets acquired from disparate systems and data sources across an unlimited number of physical servers and virtual machines. An abstraction layer is applied across all distributed disk cache files. Multiple distributed Pneurons perform simultaneous operations across one or more disk cache files. Processing is synchronized automatically. The system maintains an in memory mapping tree to maintain distributed interactions and provides the ability to dynamically construct and deconstruct the distributed cache files into any form. The distributed cache model enables synchronized federation of selected information from multiple distributed cache files automatically and as part of the Pneuron processing. The invention allows Pneuron to use existing client disk capacity and obtain and utilize targeted large data cache files on demand and without preparing aggregated data stores. As a result businesses benefit by foregoing large data preparation activities.

Modifications and substitutions by one of ordinary skill in the art are considered to be within the scope of the present invention which is not to be limited except by the allowed claims and their legal equivalents.

