---

title: Secure access-based enumeration of a junction or mount point on a clustered server
abstract: Embodiments described herein provide a technique for securely responding to an enumeration request of a data container stored at a location referenced by a junction or mount point within a share served by a storage system. To that end, the technique applies access permissions of the data container at the referenced location instead of permissions that may reside at the junction or mount point. Upon determining that the permissions are insufficient to allow access to the data container, the technique ensures that a descriptor of the junction or mount point is not included in a response to the enumeration request.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152776&OS=09152776&RS=09152776
owner: NetApp, Inc.
number: 09152776
owner_city: Sunnyvale
owner_country: US
publication_date: 20130430
---
The present invention relates to storage systems and more particularly to access based enumeration of shared resources in such systems.

A storage system typically includes one or more storage devices such as disks into which information may be entered and from which information may be obtained as desired. The storage system may also include a storage operating system that may implement a high level module such as a file system to logically organize the information stored on the disks as a hierarchical structure of data containers such as files and directories. In addition the storage system may be configured to operate according to a client server model of information delivery to thereby allow many clients to access the data containers stored on the system. Each client may request the services of the storage system by issuing messages in the form of packets to the system using storage e.g. file based access protocols such as the conventional Common Internet File System CIFS protocol.

To facilitate client access to the information stored on the storage system the storage operating system typically exports units of storage e.g. CIFS shares. As used herein a share is equivalent to a mount point or shared storage resource such as a folder or directory that stores information about files or other directories served by the system. A client access feature of the storage system may be to provide an ordered listing or enumeration of data containers within a share or a portion of the share served by the storage system. Typically a client issues an enumeration request on behalf of a user to solicit enumeration of the data containers within a directory of the share. In response the storage system returns a list of descriptors for those data containers included in the directory specified in the enumeration request. The response typically contains only those descriptors for which the user making the enumeration request has sufficient access permission.

Conventionally access permission is determined per export unit e.g. per share as a property of the whole share. Consequently a user with permission to access the share may have sufficient permission to view a descriptor of any file or folder served by the share even if that user has insufficient permission to access the files or folders themselves. Security problems may arise for enumeration requests when descriptors of files and folders are visible to a user who doesn t have sufficient permission to access those files and folders. For example the name of a file or folder may describe confidential information such as the name of a customer or a new product under development. To remedy this problem access permission may be determined using access based enumeration ABE which lists descriptors of enumerated data containers based on a user s access permission to those data containers. A user without sufficient permission to access a data container is deemed to have insufficient permission to access a descriptor of the data container.

A further security problem arises with access based enumeration of junctions or mount points. As used herein a junction or mount point is an identifier that redirects access to a data container to a storage location referenced by the junction rather than the location containing the junction or mount point however permission to access the data container may appropriately reside at the reference location. For example the administrator may alter the access permission of the data container at the reference location leaving any permission stored at the location of the junction or mount point unaltered. Failure to apply the appropriate user access permission of the data container at the reference location in response to an enumeration request may result in a security breach in which a descriptor of a junction or mount point is provided to a user with insufficient permission to access the contents of the data container referenced by that junction or mount point. The problem may be compounded when further indirection is employed such as when a junction references a data container at another storage location and that data container includes another junction that references yet another data container at yet another storage location and so on.

Accordingly there remains a need for a method and system for secure access based enumeration of junctions or mount points on a server.

Embodiments described herein provide a technique for securely responding to an enumeration request of a data container stored at a location referenced by a junction or mount point within a share served by a storage system. To that end the technique applies access permissions of the data container at the referenced location instead of permissions that may reside at the junction or mount point. Upon determining that the permissions are insufficient to allow access to the data container the technique ensures that a descriptor of the junction or mount point is not included in a response to the enumeration request.

Although implementation of the secure enumeration response technique may be useful within any storage system the embodiments described herein are illustratively implemented within a clustered storage system. In one embodiment a protocol layer in a storage system of the cluster may be modified to receive a client enumeration request for the share e.g. a directory using a file based protocol. In response the protocol layer may initiate performance of a file system operation to obtain a list of descriptors of data containers including junctions and mount points within the directory. This list of descriptors may then be pruned or amended using access based enumeration of junction or mount point type entries within the list prior to returning the amended list in response to the client enumeration request. In accordance with the technique the access based enumeration for each junction or mount point type entry in the descriptor list is performed by making an access based enumeration of the data container referenced by the junction or mount point. Where the client has insufficient permission to access the referenced data container the descriptor of the respective junction or mount point is removed from the list of descriptors.

Illustratively for each junction descriptor within the list the protocol layer employs a junction table to obtain a file handle to a data container referenced by the junction descriptor. For each obtained file handle the module creates a lookup request that includes the file handle for the data container referenced by the junction. Each lookup request is sent to a file system executing on the storage system of the cluster that is configured to serve the respective data container. The lookup request may also include user credentials of the client making the enumeration request and an access based enumeration ABE flag instructing the file system to perform an access permission check on the data container for the given user credential. In response to the lookup request the file system compares the data container access permission to the user credential by applying an ABE permission mask. The ABE permission mask defines a set of permissions that allow access to the data container. A result from the comparison indicating whether the client has permission to access to the data container is returned by the file system to the protocol layer in response to the lookup request. When the returned lookup request indicates an access denied the protocol layer removes the descriptor i.e. associated by indirection with the data container for the junction or mount point from the list of descriptors intended as a response to the client enumeration request. Thus for each returned lookup request indicating an access denied the descriptor list is amended to remove the junction descriptor associated with the respective junction or mount point. The module then returns the amended list of descriptors to the client in the response to the user enumeration request.

The clients may be general purpose computers configured to interact with the node in accordance with a client server model of information delivery. That is each client may request the services of the node and the node may return the results of the services requested by the client by exchanging packets over the connection system . The client may issue packets including file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of files and directories.

Each node is illustratively embodied as a dual processor storage system executing storage operating system that preferably implements a high level module such as a file system to logically organize the information as a hierarchical structure of named data containers such as directories files and special files e.g. on the disks. However it will be apparent to those of ordinary skill in the art that the node may alternatively comprise a single or more than two processor system. Illustratively one processor executes the functions of the N module on the node while the other processor executes the functions of the D module however in an alternate embodiment the N D modules may be implemented as pieces of code within a single operating system process that may execute dynamically across one or more processors

The memory includes a plurality of storage locations addressable by the processors and or adapters for storing software programs e.g. processes and or services and data structures e.g. enumeration list associated with the embodiments described herein. The processors and adapters may in turn include processing elements and or logic circuitry configured to execute the software programs and manipulate the data structures. Storage operating system portions of which are typically resident in the memory and executed by the processors functionally organizes the node by inter alia invoking operations in support of the software processes and or services executing on the node. It will be apparent to those skilled in the art that other processing and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the embodiments described herein.

The network adapter comprises a plurality of ports adapted to couple the node to one or more clients over a connection system which may include point to point links wide area networks wireless networks and virtual private networks implemented over a public network Internet or a shared local area network. The network adapter thus may comprise the mechanical electrical and signaling circuitry needed to connect the node to the network. Illustratively the connection system may be embodied as an Ethernet network or a Fibre Channel FC network. Each client may communicate with the node over network by exchanging discrete frames or packets of data according to pre defined protocols such as TCP IP.

The storage adapter cooperates with the storage operating system executing on the node to access information requested by the clients. The information may be stored on any type of attached array of writable storage device media such as optical magneto optical magnetic tape bubble memory storage class memory flash memory electronic random access memory micro electro mechanical and any other similar media adapted to store information including data and parity information. However as illustratively described herein the information is preferably stored on the disks of array . The storage adapter comprises a plurality of ports having input output I O interface circuitry that couples to the disks over an I O interconnect arrangement such as a conventional high performance FC link topology.

Storage of information on each disk array may be implemented as storage volumes that illustratively comprise a collection of physical storage disks cooperating to define an overall logical arrangement of a volume block number vbn space on the volume s . Each logical volume is generally although not necessarily associated with its own file system. Alternatively a plurality of arrays may be aggregated into a larger logical volume. Aggregates and logical volumes are disclosed and described in U.S. Pat. No. 7 409 494 titled EXTENSION OF WRITE ANYWHERE FILE SYSTEM LAYOUT to John K. Edwards et al. and issued on Aug. 5 2008. Briefly an aggregate includes one or more groups of disks such as Redundant Array of Independent or Inexpensive Disks RAID groups that are apportioned by the storage operating system into one or more virtual volumes of the storage system. Each such virtual volume has its own logical properties utilizes algorithms of the storage operating system implementation and serves storage objects such as files with different file types and formats. An example of a file type of a storage object is a volume that may be exported as a file system e.g. to a client . The disks within a logical volume file system are typically organized as one or more groups wherein each group may be operated as a Redundant Array of Independent or Inexpensive Disks RAID . An illustrative example of a RAID implementation is a RAID 4 level implementation although it should be understood that other types and levels of RAID implementations or data redundancy techniques may be used in accordance with the inventive principles described herein.

It should be noted that in another alternate embodiment of the invention the processing elements of adapters may be configured to offload some or all of the packet processing and storage access operations respectively from processor to thereby increase the performance of the storage service provided by the node. It is expressly contemplated that the various processes architectures and procedures described herein can be implemented in hardware firmware software or combinations thereof.

To facilitate access to the disks the storage operating system illustratively implements a write anywhere file system that cooperates with one or more virtualization modules to virtualize the storage space provided by disks . The file system logically organizes the information as a hierarchical structure of named data containers such as directories and files on the disks. Each on disk file may be implemented as set of disk blocks configured to store information such as data whereas the directory may be implemented as a specially formatted file in which names and links to other files and directories are stored.

In the illustrative embodiment the storage operating system is preferably the NetApp Data ONTAP operating system available from Netapp Inc. Sunnyvale Calif. that implements a Write Anywhere File Layout WAFL file system. However it is expressly contemplated that any appropriate storage operating system may be enhanced for use in accordance with the principles described herein. As such where the term WAFL is employed it should be taken broadly to refer to any storage operating system that is otherwise adaptable to the teachings of the disclosure herein.

The storage operating system may comprise a series of software layers organized to form an integrated network protocol stack or more generally a multi protocol engine that provides data paths for clients to access information stored on the node using block and file access protocols e.g. iSCSI and NFS protocols. The multi protocol engine includes a media access layer of network drivers e.g. gigabit Ethernet drivers that interfaces to network protocol layers such as the IP layer and its supporting transport mechanisms the TCP layer and the User Datagram Protocol UDP layer . A protocol layer provides multi protocol file access and to that end illustratively includes support for the NFS protocol and the CIFS protocol .

In addition the storage operating system may include a series of software layers organized to form a storage server that provides data paths for accessing information stored on the disks of the node . To that end the storage server may include a file system module in cooperating relation with a RAID system module and a disk driver system module . The RAID system manages the storage and retrieval of information to and from the volumes disks in accordance with I O operations while the disk driver system implements a disk access protocol such as e.g. the SCSI protocol.

The file system is illustratively a message based system that provides logical volume management capabilities for use in access to the information stored on the storage devices such as disks. The file system illustratively implements WAFL having an on disk format representation that is block based using e.g. 4 kilobyte kB blocks and using index nodes inodes to identify data containers such as files or directories and file attributes such as creation time access permissions size and block location . Illustratively access permissions are stored in an access control list including one or more access control entries each associated with security identifier SID as commonly used in a CIFS environment. In addition access permissions may have a user identifier UID and or a group identifier GID such as typically used by NFS. Access permissions are described in further detail in commonly owned U.S. Pat. No. 7 668 881 titled SYSTEM AND METHOD FOR ASSOCIATING NIS ATTRIBUTES WITH CIFS CLIENTS to Hoffmann et al. issued Feb. 23 2010.

The file system may use files to store meta data describing the layout of its on disk file system these meta data files include among others an inode file. A data container handle i.e. an identifier that includes an inode number is used to retrieve an inode from disk.

The protocol layers e.g. the NFS layer and CIFS layer of the N module function as protocol servers that translate file based requests from clients into CF protocol messages used for communication with the D module . That is the N module servers convert the incoming data access requests into file system primitive operations commands that are embedded within CF messages by the CF interface module for transmission e.g. over cluster interconnect to the D modules of the cluster . Notably the CF interface modules cooperate to provide a single file system image across all D modules in the cluster . Thus any network port e.g. an interface on network adaptor of an N module that receives a client request can access any data container within the single file system image located on any D module of the cluster . The CF protocol is illustratively a generic file and or block based protocol that comprises a collection of methods functions constituting a CF application programming interface API . Examples of such an agnostic CF protocol are the SpinFS and SpinNP protocols available from Netapp Inc. details of which are described in the aforementioned U.S. Pat. No. 6 671 773 titled METHOD AND SYSTEM FOR RESPONDING TO FILE SYSTEM REQUESTS to M. Kazar et al.

In addition to distributing the volumes served by the cluster among the nodes of the cluster an administrator may relocate the volumes or data containers stored on the volumes among any of the nodes in the cluster. However it is desirable to allow a client to still access the relocated data container using a data container handle associated with the prior location. In order to ensure that relocation of the data container is transparent to the client the administrator may employ a redirection identifier that indicates to the file system that the requested data container is not stored at the original storage location identified by the data container handle. The administrator may manage redirection identifiers by issuing commands at a management station . For example the administrator can enter a command to create a redirection identifier for a particular volume either through a graphical user interface GUI or through a command line interface CLI or the like. In an alternative embodiment one or more of the clients may act as the management station .

An example of a redirection identifier is a junction that is associated with a storage location and that indicates that data is not stored at an originally used location but is available at another storage location. Essentially the junction provides a level of indirection between a storage system and a client accessing a data container served by the cluster .

To facilitate client access to the information stored in the cluster the node typically exports units of storage e.g. CIFS shares. As used herein a share is equivalent to a mount point or shared storage resource such as a folder or directory that stores information about files or other directories served by the cluster. For example a client may access information in the directory by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. The UNC path or pathname is an aspect of a storage networking environment that defines a way for a client to refer to a unit of storage on the cluster. The UNC pathname specifies resource names on a network. For example a UNC pathname may comprise a server name a share directory name and a path descriptor that collectively reference a unit of storage or share. Resolution of the server name is usually required to access the share i.e. the client typically requires knowledge of the specific physical location i.e. the identity of the server exporting the share. Thus an additional form of redirection identifier is a mount point to a share on another volume.

ABE permission to view a portion of a namespace e.g. a hierarchy of data containers may be determined from an access permission for each data container beneath a directory rooting that portion of the namespace hierarchy. For example . illustrates a user user1 view of the namespace from the directory dir v2 when ABE is turned off. The user1 is permitted to view the contents of junction v4 i.e. root vol w referenced by the junction v4 because permission user1 RW allows it. Here file Foo with access permission user1 RW user2 R is also visible to user1. However with ABE turned on as illustrated in . user1 cannot view v4 because the access permission user2 RW of the referenced data container root vol w has no access permission for user1. 

Even further indirection may be employed such as when the namespace contains yet more junctions in the hierarchy which may visible only to some users. For example illustrates namespace as viewed from user2 with ABE turned on where a junction w1 with access permission user3 R is nevertheless visible to user2 because the access permission user1 RW user2 R of the data container vol x referenced by the junction w1 allows user2 to view w1. In this example user3 may view w1 only when ABE is turned off in which case access permission user3 R is applied instead of access permission . Notably in this case ABE turned off user2 cannot view w1. 

Junctions are described in further detail in commonly owned U.S. Pat. No. 8 312 046 titled SYSTEM AND METHOD FOR ENABLING A DATA CONTAINER TO APPEAR IN A PLURALITY OF LOCATIONS IN A SUPER NAMESPACE to Eisler et al. which issued on Nov. 12 2012 the contents of which are incorporated herein by reference in entirety .

An other example of a redirection identifier that may provide a level of indirection i.e. with respect to a data container served by a storage server is a symbolic link. A symbolic link symlink is a data structure that instead of representing the name of data container such as a file or directory provides a path descriptor such as a UNC path name to that data container. Some file system implementations such as the Microsoft NTFS file system permit a symlink path descriptor to reference a data container located on a volume different from that containing the symlink which are commonly called wide symlinks Microsoft also refers to these type of symlinks as junctions . A technique for utilizing wide symlinks to provide a further level of indirection in this manner for the storage server is described in commonly owned U.S. Pat. No. 6 968 345 titled TECHNIQUE TO ENABLE SUPPORT FOR SYMBOLIC LINK ACCESS BY WINDOWS CLIENTS to Muhlestein which issued on Nov. 22 2005.

An enumeration request typically includes a directory and user credential . User credentials may include a SID for a CIFS enumeration request or a UID and or GID for an NFS enumeration request. The appropriate protocol layer of the N module e.g. CIFS receives the enumeration request for further processing. An enumerate module issues a read directory READDIR request processed by the file system READDIR module . The READDIR request may also include an indicator e.g. a USE ABE flag instructing the file system to perform ABE enumeration when processing the request. The file system returns a READDIR RESPONSE having an enumerated list of descriptors corresponding to data containers within the directory . The response may include descriptors for redirection identifiers e.g. junctions or mount points or wide symlinks but not descriptors for data containers referenced by those redirection identifiers. The list of descriptors is buffered in memory as an enumerated list illustratively embodied as a list or an array data structure.

Each redirection identifier descriptor in the enumerated list has a data container that it references i.e. a volume reference . The enumerate module examines each descriptor entry in the enumeration list and for each redirection identifier e.g. junction mount point or wide symlink issues a JUNCTION LOCATE REQUEST having the respective volume reference to the file system so as to obtain a handle to the data container referenced by the redirection identifier. The file system module LOCATE responds with the handle contained in a JUNCTION LOCATE RESPONSE . The protocol layer e.g. CIFS then issues a LOOKUP REQUEST again to the file system . The LOOKUP REQUEST has the handle a user credential received from the client and a permissions mask ABE mask . The file system module LOOKUP processes this request by performing an access check on the data container for the handle i.e. the data container referenced by the indirection identifier. Alternatively a REDIRECTION PROCESS may be used to redirect the LOOKUP REQUEST via the cluster interconnect to another node servicing the data container for the handle . The file system returns an access denied response when the user credential has insufficient permission to access the data container associated with the handle . For each access denied e.g. illustratively embodied as an integer identified as ACCESS DENIED received by the protocol layer i.e. the enumerate module in response to the LOOKUP REQUEST the descriptor associated the indirection identifier referencing the data container associated with the handle is removed from the enumeration list . Once all the indirection identifier descriptors in the READDIR RESPONSE are processed the contents of the amended enumeration list are returned to the client in response to the enumeration request .

The ABE mask illustratively includes a bit mapped mask of permissions sufficient to satisfy an access based enumeration of a data container for which access based enumeration is sought. Illustratively for Windows NT the ABE mask includes a bit map logical OR of special permissions SYNCHRONIZE LIST DIRECTORY READ EA READ ATTRIBUTES and READ CONTROL.

At step a determination is made e.g. by the enumerate module as to whether an ABE flag for the share is set. If the ABE flag is not set i.e. access based enumeration is turned off then the contents of the enumeration list are returned in response to the enumeration request at step and the procedure completes. If the ABE flag is set for the share step then each enumerated descriptor entry is examined in turn. At step a determination is made e.g. by the enumerate module as to whether the enumerated descriptor entry is a junction or mount point or wide symlink type. If not the procedure returns to step to examine a next entry. However if the enumerated descriptor entry is a junction or mount point type or wide symlink then steps through are performed.

At step a LOCATE REQUEST is sent to the file system for the data container referenced in the descriptor entry e.g. the junction volume reference . Thereafter at step a junction handle is received. At step a LOOKUP REQUEST is sent to the file system to perform an access check. A result of the access check is received step and if the result is ACCESS DENIED then the descriptor entry associated with the junction handle is removed from the enumerated list step . Once all the descriptor entries have been examined the contents of the enumerated list are returned to the client in response to the enumeration request at step .

At step the access permission e.g. an access control list ACL for the data container referenced by the descriptor entry is obtained. An access check is performed based on the user credential e.g. UID GID or SID and the ABE mask at step . Illustratively this access check is performed with a bit mask logical AND operation using the ABE mask and one or more portions of the user credential . In other embodiments a comparison operation may be performed. In still other embodiments the access permission for the data container may include an ACL having multiple entries wherein is access checked e.g. iteratively by entry with the user credential .

If the result of the access check is not ACCESS DENIED step then the descriptor entry is added e.g. accumulated to the response at step . Once all the descriptor entries have been examined the accumulated response is returned at step and the procedure completes.

At step the access permission e.g. ACL for the data container referenced by the descriptor entry is obtained. An access check is performed based on the user credential e.g. UID GID or SID and the ABE mask at step . This access check is illustratively performed with a bit mask AND operation of the ABE mask with one or more portions of the user credential . In another embodiment the access permission for the data container may include an access control list having multiple entries each of which is access checked with the user credential . In a further embodiment steps and of procedure are identical to steps and respectively of procedure e.g. the READDIR module and the LOOKUP module may share a subroutine.

If the result of the access check is ACCESS DENIED step then ACCESS DENIED is returned at step and the procedure completes otherwise OK e.g. illustratively embodied as an integer having a value different from ACCESS DENIED is returned at step and the procedure completes.

The foregoing description has been directed to particular embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. Specifically it should be noted that the principles of the present invention may be implemented in non distributed file systems. Furthermore while this description has been written in terms of N and D blades the teachings of the present invention are equally suitable to systems where the functionality of the N and D blades are implemented in a single system. Alternately the functions of the N and D blades may be distributed among any number of separate systems wherein each system performs one or more of the functions.

As used herein the term storage operating system generally refers to the computer executable code operable on a computer to perform a storage function that manages data access and may in the case of a node implement data access semantics of a general purpose operating system. The storage operating system can also be implemented as a microkernel an application program operating over a general purpose operating system such as UNIX or Windows NT or as a general purpose operating system with configurable functionality which is configured for storage applications as described herein.

Furthermore it will be understood to those skilled in the art that the invention described herein may apply to any type of special purpose e.g. file server filer or storage serving appliance or general purpose computer including a standalone computer or portion thereof embodied as or including a storage system. Moreover the teachings of this invention can be adapted to a variety of storage system architectures including but not limited to a network attached storage environment a storage area network and disk assembly directly attached to a client or host computer. The term storage system should therefore be taken broadly to include such arrangements in addition to any subsystems configured to perform a storage function and associated with other equipment or systems. It should be noted that while this description is written in terms of a write any where file system the teachings of the present invention may be utilized with any suitable file system including a write in place file system.

Additionally the procedures processes and or modules described herein may be implemented in hardware software embodied as a computer readable medium having program instructions firmware or a combination thereof. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

