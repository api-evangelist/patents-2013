---

title: Anti-malware digital-signature verification
abstract: A self-protection application executes in kernel mode and manages access to processes and files related to an associated anti-malware application. The self-protection application monitors executing processes on the client device and detects the processes that are attempting to access files/processes related to the anti-malware software. These processes and files are verified by the self-protection application using digital signature authentication. Trusted processes such as those originating from the anti-malware software or other authorized programs are allowed access while other processes are restricted access.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09058504&OS=09058504&RS=09058504
owner: Malwarebytes Corporation
number: 09058504
owner_city: San Jose
owner_country: US
publication_date: 20130521
---
The present disclosure is generally related to a malware detection application and more specifically to the protection of anti malware files and processes through digital signature verification.

Malicious software also known as malware is software designed to perform a malicious task within a targeted computing device. For example malware may be used to disrupt computer operations gather sensitive information or gain access to private information in these targeted computing devices. In order to safeguard against malware attacks anti malware software exists to detect identify and remove malware. Some malware is specifically designed to weaken or disable the protection provided by anti malware software. If anti malware software is weakened or disabled then the computing device becomes particularly vulnerable to further malware attacks.

A self protection application manages access to files and processes associated with an anti malware application. In an embodiment the self protection application is initialized in kernel mode of a client device. The self protection application monitors processes executing on the client device. The self protection application detects a process that is attempting to access files or processes associated with the anti malware application. Based in part on a digital signature associated with the detected process the self protection application determines whether the detected process is a trusted process that originates from an application authorized to access a file or process associated with the anti malware application. The self protection application determines whether to allow the detected process access to the anti malware application process or file based on whether the process is a trusted process. Based on the determining the self protection application allows the detected process access to the process or file associated with the anti malware application.

Reference will now be made in detail to several embodiments examples of which are illustrated in the accompanying figures. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality. The figures depict embodiments of the disclosed system or method for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

A self protection application executes in kernel mode and manages access to processes and files related to an associated anti malware application. The self protection application monitors executing processes on the client device and detects the processes that are attempting to access files processes related to the anti malware application. These processes and files are verified by the self protection application using digital signature authentication. Trusted processes such as those originating from the anti malware application or other authorized applications are allowed access while access by other processes is restricted.

In contrast to conventional digital signature verification techniques which operate in user mode the self protection application instead performs digital signature verification in kernel mode of the operating system. This beneficially provides the self protection application with wider access to hardware and memory resources and enables the self protection application to more robustly detect remove and prevent malware from disabling the anti malware application. Furthermore operating in kernel mode allows the self protection application to more effectively intercept all attempts to access files and processes related to the anti malware application.

The server is a computer system configured to store receive and transmit data to client devices via network . The server may include a singular computing system such as a single computer or a network of computing systems such as a data center or a distributed computing system. In an embodiment the server is a content or data server providing information to a client . For example the server may be a website server that generates a user interface for users using clients to browse. The server may receive requests for data from clients and respond by transmitting the requested data to the clients . In another embodiment the server may be data server for maintaining and updating applications on clients . The server is also a potential source of malware that may infiltrate one or more clients . For example as a user browses websites or downloads network files malware embedded in the website or files may attempt to install itself on the client . Malware may thus be downloaded from the server without the user s knowledge.

The network represents the communication pathways between the server and clients . In one embodiment the network is the Internet. The network can also utilize dedicated or private communications links that are not necessarily part of the Internet. In one embodiment the network uses standard communications technologies and or protocols. Thus the network can include links using technologies such as Ethernet Wi Fi . integrated services digital network ISDN digital subscriber line DSL asynchronous transfer mode ATM etc. Similarly the networking protocols used on the network can include multiprotocol label switching MPLS the transmission control protocol Internet protocol TCP IP the hypertext transport protocol HTTP the simple mail transfer protocol SMTP the file transfer protocol FTP etc. In one embodiment at least some of the links use mobile networking technologies including general packet radio service GPRS enhanced data GSM environment EDGE long term evolution LTE code division multiple access 2000 CDMA2000 and or wide band CDMA WCDMA . The data exchanged over the network can be represented using technologies and or formats including the hypertext markup language HTML the extensible markup language XML the wireless access protocol WAP the short message service SMS etc. In addition all or some of the links can be encrypted using conventional encryption technologies such as the secure sockets layer SSL Secure HTTP and or virtual private networks VPNs . In another embodiment the entities can use custom and or dedicated data communications technologies instead of or in addition to the ones described above.

Each client comprises one or more computing devices capable of processing data as well as transmitting and receiving data via a network . For example a client device may be a desktop computer a laptop computer a smart phone a tablet computing device or any other device having computing and data communication capabilities. Each client includes a processor for manipulating and processing data and a storage medium for storing data and program instructions associated with various applications. The storage medium may include both volatile memory e.g. random access memory and non volatile storage memory such as hard disks flash memory flash drives external memory storage devices USB drives discs and the like. In addition to storing program instructions the storage medium stores various data associated with operation of the operating system the anti malware application and other applications .

In one embodiment the storage medium comprises a non transitory computer readable storage medium. The various applications e.g. the operating system anti malware application self protection application and other applications are each embodied as computer executable instructions stored to the non transitory computer readable storage medium. The instructions when executed by the processor cause the client to perform the functions attributed to the applications described herein. For example when an application executes either in response to a user command or an automated script the processor accesses the application in the storage medium and creates a process. The processor then executes the program instructions associated with the process or thread. This execution may include access to other files in the storage medium .

The operating system is a specialized application that manages computer hardware resources of the client and provides common services to applications . For example a computer s operating system may manage the processor or other components not illustrated such as for example a storage medium a graphics adapter an audio adapter network connections disc drives USB slots and applications. A cell phone s operating system may manage the processor storage medium display screen key pad dialer wireless network connections and the like. Because many programs and executed processes compete for the limited resources provided by the processor the operating system may manage the processor bandwidth and timing to each requesting process. Examples of operating systems include WINDOWS MAC OS IOS LINUX UBUNTU UNIX and ANDROID.

An anti malware application prevents detects and removes malware such as for example viruses malicious browser helper objects hijackers ransomware keyloggers backdoors rootkits Trojan horses worms malicious layered service providers dialers fraudtools adware spyware and so forth. The anti malware application may prevent new malware from being installed on a client or remove or disable existing malware that is already present on the client . The anti malware application may perform detection by monitoring activities on the client such that if a suspicious process thread or executable file starts the anti malware application may flag the suspected process for further inspection. The anti malware application may also disable or remove files determined to be malware. The anti malware application may also access a related server via the network in order to download new malware definition files and use the files to update its outdated malware definition files. Files may also be downloaded from the server to update the anti malware application and associated programs.

A weakness with conventional anti malware systems is that the anti malware application itself may be vulnerable to malware attacks. If malware disables or weakens the anti malware application then the client becomes even more vulnerable to malware attacks. To protect the anti malware application a self protection application prevents malware from removing disabling modifying or otherwise interfering with the operation of the anti malware application unless the process originated from the anti malware application or another trusted entity. In an embodiment the self protection application is a component of the anti malware application itself. In other embodiments the self protection application executes independently from the anti malware application and is used to start a process that is able to defend the anti malware application against malware attacks. In one embodiment the self protection application is furthermore able to protect the anti malware application as it is being installed on a heavily infected system. Once the anti malware application is installed the self protection application continues to protect the anti malware application from further malware attacks. The self protection application also manages general access to the anti malware application process files. For example if an unauthorized process attempts to access the storage medium space allocated to the anti malware application the self protection application may block the access attempts.

In an embodiment the self protection application executes in the kernel mode rather than in the user mode as a driver in a client . A driver that runs in kernel mode shares a single virtual address space with all other drivers running in kernel mode. A driver running in kernel mode also has complete and unrestricted access to the underlying hardware. Thus it can execute any processor instruction or reference any memory. Kernel mode is often reserved for the most trusted functions of an operating system because of the capabilities a driver has running in kernel mode. Because drivers running in kernel mode share a single address any driver is able to change or overwrite another driver code process or the operating system itself. Furthermore a crash fault or error in any single driver running in kernel mode will crash the entire client . Unlike kernel mode user mode restricts a process from directly accessing hardware or reference memory. Any process requesting to access hardware or memory must delegate the task to a system s application programming interface API . Each process running in user mode is isolated from other processes by being allocated a private virtual address space. Thus a process running in user mode cannot modify data belonging to other processes and if one process crashes the crash is limited to only that one process. By operating in kernel mode the self protection application is able to gain access to all codes drivers and processes running on the client and is able to more effectively detect all attempts to access processes or files associated with the anti malware application . By running in kernel mode the self protection application also has the ability to restrict access to any process it detects trying to access processes or files related to the anti malware application . Furthermore the self protection application is also able to take advantage of the increased performance offered by direct access to hardware and memory by running in kernel mode. Furthermore Digital signature verification in user mode is very slow and is therefore impractical for scanning detecting and analyzing processes trying to access the anti malware application files or processes in real time. Running in kernel mode allows the self protection application to more quickly operate on client .

In an embodiment the self protection application comprises a digital signature verification system implemented in kernel mode of the operating system . Digital signatures are attached to applications and programs in order to identify the application s publisher confirm the integrity of the application and verify that the application has not been modified since signing. Digital signatures identify application s publishers and also provide a mechanism that prevents tampering with the contents of the application. Digital signatures are discussed in further detail below with respect to . For example in one embodiment each process executing on the client that is authorized to access files or processes related to the anti malware application is digitally signed by the publisher. Thus for example files and processes that are part of the anti malware application generally include such a signature that can be verified by the self protection application . Additionally certain files and processes outside of the anti malware application may be deemed trusted and may also include such signatures that can be verified by the self protection application . In one embodiment the self protection application may periodically request and download updated signature files from a trusted server such as the anti malware application publisher s server in order to have the newest set of digital signatures to verify against.

The digital signature verification system monitors the processes running on a client verifies the authenticity of a process attempting to access processes files related to the anti malware application and either allows or restricts access to the anti malware application code process.

Various digital signatures are possible for ensuring the integrity of a piece of application. For example digital signatures algorithms may use various encryption methods e.g. cryptographic hash functions asymmetric tokenization encryption algorithms digital certificates public private keys and so forth. In an embodiment a digital signature is hashed using a hashing algorithm producing the hash of data. A hash algorithm takes an arbitrary block of data as the basis for producing a fixed size bit string which is known as the hash value. The cryptographic hash function algorithm is a one directional operation and is designed to be difficult to be reversed. Any changes in the original data will cause a different hash value to be produced thus providing a way to verify whether a program has been modified. The hash is then signed with a private key which is known only to the publisher or the owner of the private key. In an embodiment the signed hash is then distributed along with the data to other users. A complementary public key can also be distributed to anyone through sources such as a certificate authority an online server the publisher the program itself and so forth and can be used to verify the signature of the private key. In an embodiment the self protection application acquires and stores a list of trusted public keys that are used to identify applications that come from trusted publishers. Code decrypted using a public key from this list of trusted public keys can be trusted to have come from a holder of the private key.

Digital certificates are often included in digital signatures in order to verify the origin of the signature. Certificates are usually issued by a certification authority that confirms the integrity of the certificate. By verifying the digital certificate issued with the digital signature users may be able to confirm the origin of the program or application code. Digital certificates are often used to sign e mail messages establish secure communication protocols or securely logging on to some computers. In an embodiment the self protection application may acquire and store a list of trusted digital certificates that can be used to identify applications that come from trusted publishers.

The self protection application in an embodiment identifies the publisher of a process or application and verifies that the process application has not been modified since signing. In one embodiment the self protection application utilizes at least one of digital signatures cryptographic techniques and trusted root certificates to verify identify. The signature that is read by the self protection application may be embedded in a portion of the program file that is nonexecutable in order to prevent the alteration of the executable portions of the file. Thus if a signature is missing or incorrect from a program requesting access to the anti malware application the self protection application will restrict the requesting program access.

While and the previous examples use anti malware application as the base program for a self protection application other embodiments may implement the self protection application in other types of applications such as word processing applications gaming applications applets browser clients and the like. A self protection application may manage process file access to various types of applications and memory space in order to ensure the integrity of the applications running on client .

In the scenario that the anti malware application has not been installed on client but an installation attempt is in progress the self protection application may be initiated separately from the anti malware application or prior to the installation of the anti malware application as a means to protect the anti malware application installation from malware attacks. For example when the anti malware application installer is initiated the installer may load the self protection application into the client s storage medium and initialize it under the kernel mode.

Once initiated the self protection application monitors each process that is executed by the client . Monitoring may also involve the self protection application determining whether the process is requesting a type of access that should be flagged for further authentication. In an embodiment a callback signal is generated by the operating system when a new process is created. The self protection application registers the callback signal and analyzes the process and originating application. The self protection application may verify the digital signature of the originating application when the callback signal is received. If the digital signature is verified the process is added to a list of trusted processes maintained by the self protection application . This list of trusted processes may be used during the client s normal operations to determine whether attempts to access files or processes related to the anti malware application are authorized.

In another embodiment the self protection application does not necessarily check the digital signature for each new process that is created but instead only registers the process with the trusted list when a process tries to open write or delete files processes or registry keys related to the anti malware application . The self protection application monitors and filters processes executing on the client through kernel APIs. When the self protection application detects a process that is executing on client the application will determine whether the process is attempting to access files or processes related to the anti malware application . If the process is not attempting to access anti malware files processes at decision block the self protection application continues monitoring the executing processes. If the process is trying to access the anti malware application at decision block or any related files processes or is requesting a specific type of access the self protection application may begin verifying the identity and integrity of the process. In an embodiment the self protection application may perform an authentication to determine whether the process is digitally signed and if it has the correct digital signature. This step may be performed by checking whether the process is on the list of trusted processes previously determined to have a valid signature. Alternatively step may include performing a signature verification without relying on a previously created list of trusted processes. If the process is not digitally signed or has the incorrect signature at decision block e.g. because the process is not on a previously created trusted list or a signature verification fails then the self protection application may automatically deny it access to the anti malware application files and processes. This includes for example denying access to files registries processes deleting files replacing files and so forth. Otherwise if the signature is determined to be trusted at step the self protection application allows access.

In an embodiment performing the authentication includes for example checking the validity of the signature e.g. indicated publisher timestamps encryption methods origin of process and the like . For example the self protection application may keep a whitelist e.g. whitelist of public keys whitelist of digital certificates whitelist of publishers and so forth that are allowed to run processes that access the anti malware application . If the process requesting access does not originate from a public key digital certificate and or publisher listed on the whitelist then the self protection application may deny access before further authentication is performed. The self protection application may use the location of the expected digital signature as a determinant for whether a process is trusted .

In an embodiment the self protection application may receive the public key corresponding to the program or application from which the process originated from. To verify that the code has not been tampered with in the interim between the publisher s releasing the program and the program running on client the self protection application may extract the hash value that is packaged with the process program by using the acquired public key. The self protection application also uses the same hash function that the publisher used on the program s data to generate a hash value. The self protection application compares its independently generated hash value with the hash value decrypted using the public key. If the two hash values are identical then the self protection application has determined that the process can be trusted and allows it access to anti malware files or processes. If the two hash values differ then there is a high probability that the process originates from malware or a program that has been tampered with. In this scenario the process is not trusted and the self protection application denies the process access to the anti malware files or processes.

Although hash value comparison is described as the method of signature authentication other embodiments may utilize other methods of signature verification. For example the self protection application may verify a program s digital certificates in order to allow or deny access to the anti malware files or processes. In an embodiment the digital certificates may be packaged along with the program that is generating a process requesting access to the anti malware files or processes. The digital certificates are often contained within or as part of a digital signature. By comparing the extracted digital certificate and a digital certificate copy obtained from a certification authority which manages and issues digital certificates to publishers the self protection application may verify the identity of the program s publisher.

In an embodiment the self protection application may also analyze the timestamps encoded into a program in determining whether a process is trusted . Digital certificates often expire after a period of time. However programs and applications are designed to operate for many years often surpassing the expiration date of the certificate. By analyzing the timestamp of a program the self protection application can compare the timestamp with the period of time which the associated digital certificate attached to the program was valid. If the timestamp is within the period of validity then the digital signature is valid. However if the timestamp used is not within the period of validity for whatever reason the self protection application determines the program to not be trusted.

The foregoing description of the embodiments of the invention has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure. For example the self protection application may be associated with applications other than an anti malware application in other embodiments. The self protection application may protect the associated application from external attacks from malware or any other unauthorized attempts to access a process or file.

Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising a computer readable medium containing computer program code which can be executed by a computer processor for performing any or all of the steps operations or processes described.

Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a non transitory tangible computer readable storage medium or any type of media suitable for storing electronic instructions which may be coupled to a computer system bus. Furthermore any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

Embodiments of the invention may also relate to a product that is produced by a computing process described herein. Such a product may comprise information resulting from a computing process where the information is stored on a non transitory tangible computer readable storage medium and may include any embodiment of a computer program product or other data combination described herein.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description but rather by any claims that issue on an application based hereon. Accordingly the disclosure of the embodiments of the invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

