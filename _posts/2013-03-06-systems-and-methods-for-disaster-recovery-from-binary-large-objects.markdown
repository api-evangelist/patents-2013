---

title: Systems and methods for disaster recovery from binary large objects
abstract: A computer-implemented method for disaster recovery from binary large objects may include (1) identifying a volume of data to be protected, (2) identifying a binary large object storage system, (3) replicating the volume to the binary large object storage system by writing to a binary large object file on the binary large object storage system to be readable as a consumable virtual disk that may represent the volume and (4) mounting the consumable virtual disk directly from the binary large object file. Various other methods, systems, and computer-readable media are also disclosed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09110965&OS=09110965&RS=09110965
owner: Symantec Corporation
number: 09110965
owner_city: Mountain View
owner_country: US
publication_date: 20130306
---
Many organizations rely upon data replication to improve the reliability fault tolerance and or accessibility of their applications and or data. Data replication typically involves replicating data from a primary site or device e.g. a production volume to a secondary e.g. backup and or disaster recovery site or device.

Business continuity and disaster recovery refers to the capability to restore normal or near normal business operations from a critical business application perspective after the occurrence of a disaster that interrupts business operations. Business continuity and disaster recovery may require the ability to bring up mission critical applications and the data these applications depend on and make them available to users as quickly as business requirements dictate.

Some organizations may use cloud computing platforms and or services to supplement their information technology infrastructure. Unfortunately traditional cloud computing platforms do not offer an efficient integrated disaster recovery solution. For example replication in preparation for disaster recovery in traditional cloud computing platforms may require multiple computing and storage steps to receive and prepare replicated data for disaster recovery scenarios.

Accordingly the instant disclosure identifies and addresses a need for additional and improved systems and methods for disaster recovery from binary large objects.

As will be described in greater detail below the instant disclosure generally relates to systems and methods for disaster recovery from binary large objects by writing volume data directly to binary large objects in a virtual disk format such that the binary large objects are immediately consumable as virtual disks in disaster recovery scenarios.

In one example a computer implemented method for disaster recovery from binary large objects may include 1 identifying a volume of data to be protected 2 identifying a binary large object storage system 3 replicating the volume to the binary large object storage system by writing to a binary large object file on the binary large object storage system to be readable as a consumable virtual disk that may represent the volume and 4 mounting the consumable virtual disk directly from the binary large object file.

In some examples replicating the volume to the binary large object storage system may include 1 identifying a change in a property of the volume and 2 modifying the binary large object file to reflect the change in the property of the volume in the consumable virtual disk.

In one embodiment the change in the property of the volume may include a change in a size of the volume and modifying the binary large object file may include changing a size of the binary large object file to reflect the size of the volume.

In one embodiment the binary large object storage system may be a part of a third party cloud computing platform and mounting the consumable virtual disk directly from the binary large object file may include 1 instantiating a virtual machine on the third party cloud computing platform from an image library on the third party cloud computing platform that may include a solution stack and 2 mounting the consumable virtual disk for use by the virtual machine.

In one embodiment the volume of data may be located at a primary site the binary large object storage system may be located at a secondary site and mounting the consumable virtual disk directly from the binary large object file may include 1 identifying a failure at the primary site and 2 mounting the consumable virtual disk at the secondary site in response to the failure.

In one embodiment the binary large object storage system may be a part of a third party cloud computing platform and replicating the volume may include 1 determining that the volume uses a compression technique and 2 replicating data from the volume to a queue on the third party cloud computing platform for decompression before writing the data to the binary large object file.

In one example replicating the volume may include writing replicated data from the volume directly to the binary large object file without first writing the replicated data to an intermediate storage location.

In one embodiment a system for implementing the above described method may include 1 an identification module programmed to i identify a volume of data to be protected and ii identify a binary large object storage system 2 a replication module programmed to replicate the volume to the binary large object storage system by writing to a binary large object file on the binary large object storage system to be readable as a consumable virtual disk that may represent the volume 3 a mounting module programmed to mount the consumable virtual disk directly from the binary large object file and 4 at least one processor configured to execute the identification module the replication module and the mounting module.

In some examples the above described method may be encoded as computer readable instructions on a computer readable storage medium. For example a computer readable storage medium may include one or more computer executable instructions that when executed by at least one processor of a computing device may cause the computing device to 1 identify a volume of data to be protected 2 identify a binary large object storage system 3 replicate the volume to the binary large object storage system by writing to a binary large object file on the binary large object storage system to be readable as a consumable virtual disk that may represent the volume and 4 mount the consumable virtual disk directly from the binary large object file.

Features from any of the above mentioned embodiments may be used in combination with one another in accordance with the general principles described herein. These and other embodiments features and advantages will be more fully understood upon reading the following detailed description in conjunction with the accompanying drawings and claims.

Throughout the drawings identical reference characters and descriptions indicate similar but not necessarily identical elements. While the exemplary embodiments described herein are susceptible to various modifications and alternative forms specific embodiments have been shown by way of example in the drawings and will be described in detail herein. However the exemplary embodiments described herein are not intended to be limited to the particular forms disclosed. Rather the instant disclosure covers all modifications equivalents and alternatives falling within the scope of the appended claims.

The present disclosure is generally directed to systems and methods for disaster recovery from binary large objects. As will be explained in greater detail below by writing volume data directly to binary large objects in a virtual disk format such that the binary large objects are immediately consumable as virtual disks in disaster recovery scenarios the systems and methods described herein may conserve computing resources e.g. by avoiding the intermediate storage and processing of replicated data before preparing the replicated data for use in disaster recovery . Additionally in some examples these systems and methods may circumvent third party limitations on virtual disks used on cloud computing platforms e.g. by storing these virtual disks via data agnostic binary large objects rather .

The following will provide with reference to and detailed descriptions of exemplary systems for disaster recovery from binary large objects. Detailed descriptions of corresponding computer implemented methods will also be provided in connection with . In addition detailed descriptions of an exemplary computing system and network architecture capable of implementing one or more of the embodiments described herein will be provided in connection with respectively.

Mounting module may be further programmed to mount the consumable virtual disk directly from the binary large object file. Although illustrated as separate elements one or more of modules in may represent portions of a single module or application.

In certain embodiments one or more of modules in may represent one or more software applications or programs that when executed by a computing device may cause the computing device to perform one or more tasks. For example and as will be described in greater detail below one or more of modules may represent software modules stored and configured to run on one or more computing devices such as the devices illustrated in e.g. computing device and or binary large object storage system computing system in and or portions of exemplary network architecture in . One or more of modules in may also represent all or portions of one or more special purpose computers configured to perform one or more tasks.

Exemplary system in may be implemented in a variety of ways. For example all or a portion of exemplary system may represent portions of exemplary system in . As shown in system may include a computing device in communication with a primary site via a network . In one example primary site may replicate volume to binary large object storage system . Computing device may be programmed with one or more of modules . Additionally or alternatively one or more computing devices at primary site may be programmed with one or more of modules .

In one embodiment one or more of modules from may when executed by at least one processor of computing device and or primary site facilitate computing device and or primary site in disaster recovery from binary large objects. For example and as will be described in greater detail below one or more of modules may cause computing device and or primary site to prepare a binary large object file in a consumable virtual disk format. disaster recovery from binary large objects. For example and as will be described in greater detail below identification module may be programmed to identify a volume of data to be protected. Identification module may be programmed to identify a binary large object storage system . Replication module may be programmed to replicate volume to binary large object storage system by writing to a binary large object file on binary large object storage system to be readable as a consumable virtual disk that represents volume . Mounting module may be programmed to mount consumable virtual disk directly from binary large object file .

Computing device generally represents any type or form of computing device capable of reading computer executable instructions. Examples of computing device include without limitation laptops tablets desktops servers cellular phones Personal Digital Assistants PDAs multimedia players embedded systems combinations of one or more of the same exemplary computing system in or any other suitable computing device.

Primary site may represent one or more computing devices capable of storing data and or replicating data to another site. In some examples primary site may include one or more application servers and or database servers configured to provide various database services and or run certain software applications.

Binary large object storage system may represent portions of a single database or storage device or a plurality of databases or storage devices. For example binary large object storage system may represent a portion of computing device in computing system in and or portions of exemplary network architecture in . Alternatively binary large object storage system in may represent one or more physically separate devices capable of being accessed by a computing device such as computing device in computing system in and or portions of exemplary network architecture in .

Network generally represents any medium or architecture capable of facilitating communication or data transfer. Examples of network include without limitation an intranet a Wide Area Network WAN a Local Area Network LAN a Storage Area Network SAN a Personal Area Network PAN the Internet Power Line Communications PLC a cellular network e.g. a Global System for Mobile Communications GSM network exemplary network architecture in or the like. Network may facilitate communication or data transfer using wireless or wired connections. In one embodiment network may facilitate communication between computing device and server .

As illustrated in at step one or more of the systems described herein may identify a volume of data to be protected. For example at step identification module may as part of computing device in identify volume to be protected.

As used herein the term volume may refer to any distinctly identifiable collection of data. In some examples the volume may correspond to a logical storage unit used by a file system to store one or more files. In some examples the term volume may refer to an addressable storage space capable of storing files. By way of example the term volume may refer to a volume managed by a logical volume manager such as LOGICAL DISK MANAGER or VERITAS VOLUME MANAGER. In some examples the term volume may refer to a dynamic volume e.g. a volume that may span across physical disks .

Identification module may identify the volume in any suitable manner. For example identification module may identify a policy for replicating the volume. Additionally or alternatively identification module may identify replicated data originating from the volume. In some examples identification module may receive a message identifying the volume as subject to protection e.g. replication .

Returning to at step one or more of the systems described herein may identify a binary large object storage system. For example at step identification module may as part of computing device in identify binary large object storage system .

As used herein the phrase binary large object or blob may refer to any collection of binary information. In some examples the phrase binary large object may refer to a blob provided via a cloud computing platform such as WINDOWS AZURE in WINDOWS AZURE BLOB STORAGE. In some examples a blob may include a page blob e.g. a binary large object divided into pages and designed for random access .

As used herein the phrase binary large object storage system may refer to any system for storing binary large objects. In some examples the binary large object storage system may include one or more underlying components of a cloud computing platform configured to provide blob storage as a service.

Identification module may identify the binary large object storage system in any suitable manner. For example identification module may identify the binary large object storage system by identifying a cloud computing platform that provides blob storage with the binary large object storage system. Additionally or alternatively identification module may identify the binary large object storage system via an application programming interface of such a cloud computing platform. In some examples identification module may operate as a part of such a cloud computing platform and identify the binary large object storage system in response to a request for blob storage. Additionally or alternatively identification module may identify the binary large object storage system by identifying replicated data addressed to the binary large object storage system.

Returning to at step one or more of the systems described herein may replicate the volume to the binary large object storage system by writing to a binary large object file on the binary large object storage system to be readable as a consumable virtual disk that represents the volume. For example at step replication module may as part of computing device in replicate volume to binary large object storage system by writing to a binary large object file on binary large object storage system to be readable as consumable virtual disk that represents volume .

As used herein the term replication may refer to any scheme for maintaining an up to date copy of a collection of data. In some examples one or more of the systems described herein may perform continuous replication. As used herein the phrase continuous replication may refer to any service for providing continuous and or real time backup services e.g. by replicating each transaction and or operation synchronously and or near synchronously .

Replication module may replicate the volume in any suitable manner. For example replication module may replicate the volume using VERITAS VOLUME REPLICATOR. Additionally or alternatively replication module may replicate the volume with file based replication. In some examples replication module may replicate the volume by replicating differential data from a snapshot of the volume e.g. based on a recovery point objective interval .

As used herein the phrase virtual disk file may refer to any file and or image containing data stored for the use of a virtual machine. In some examples the data as stored within the virtual disk file may reflect the raw contents and or structure of a virtual storage device or virtual disk. Examples of virtual disk files include without limitation a VMWARE VIRTUAL MACHINE DISK file a VMDK file and a VIRTUAL HARD DISK file a VHD file . In some examples replication module may write to the binary large object file in a virtual disk file format e.g. as a VHD file . As used herein the phrase virtual machine generally refers to a computing system platform that may not have direct correspondence to hardware of an underlying host machine. For example hardware of a host system may be abstracted to a virtual machine using a hypervisor or other virtualization software. A virtual machine may run a guest operating system and or various other software applications.

In some examples replication module may identify a change in a property of the volume and modify the binary large object file to reflect the change in the property of the volume in the consumable virtual disk. For example replication module may replicate volume metadata from the volume to the binary large object file. In some examples replication module may inspect a private region of the volume that stores metadata relating to the volume.

In some examples the change in the property of the volume may include a change in the size of the volume. In these examples replication module may modify the binary large object file by changing a size of the binary large object file to reflect the size of the volume. For example if the binary large object file is 80 gigabytes large and the volume increases to 100 gigabytes in size replication module may increase the size of the binary large object file to accommodate the new size of the virtual disk representing the volume.

In some examples the binary large object storage system may be a part of a third party cloud computing platform e.g. WINDOWS AZURE . In some examples replication module may determine that the volume uses a compression technique. In these examples replication module may replicate data from the volume to a queue on the third party cloud computing platform for decompression before writing the data to the binary large object file. For example replication module may determine that the replicated data is encoded with a data compression algorithm and replicate the data to the queue to decompress the data. Additionally or alternatively replication module may determine that the replicated data is deduplicated and may replicate the data to the queue to restore the data from deduplication before writing the data to the binary large object file.

Using as an example replication module may replicate volumes and to page blob in the format of virtual disks e.g. virtual disks and respectively . In this example a virtual machine at cloud computing site may conduct a heartbeat between primary site and cloud computing site .

In some examples replication module may write replicated data from the volume directly to the binary large object file without first writing the replicated data to an intermediate storage location. By writing directly to the binary large object file the systems and methods described herein may decrease the consumption of computing resources and increase the efficiency of replication.

Returning to at step one or more of the systems described herein may mount the consumable virtual disk directly from the binary large object file. For example at step mounting module may as part of computing device in mount consumable virtual disk directly from binary large object file .

In some examples the binary large object storage system may be a part of a third party cloud computing platform e.g. WINDOWS AZURE . In these examples mounting the consumable virtual disk directly from the binary large object file may include 1 instantiating a virtual machine on the third party cloud computing platform from an image library on the third party cloud computing platform that may include a solution stack and 2 mounting the consumable virtual disk for use by the virtual machine. As used herein the phrase solution stack may refer to a combination of an operating system and or one or more applications. For example the solution stack may provide the same functionality as a solution stack at the primary site where the volume resides that uses the volume for storage.

Using as an example at step mounting module may instantiate a virtual machine from an image e.g. that includes a solution stack functionally parallel to a solution stack used by application cluster and mount virtual disk for use by the virtual machine using image . Mounting module may additionally instantiate a virtual machine from an image and mount virtual disk for use by the virtual machine using image .

In some examples the volume of data may be located at a primary site and the binary large object storage system may be located at a secondary site e.g. a cloud computing platform such as WINDOWS AZURE . In these examples mounting the consumable virtual disk directly from the binary large object file may include 1 identifying a failure at the primary site and 2 mounting the consumable virtual disk at the secondary site in response to the failure. The systems described herein may thereby achieve a disaster recovery.

As explained above in connection with method in by writing volume data directly to binary large objects in a virtual disk format such that the binary large objects are immediately consumable as virtual disks in disaster recovery scenarios the systems and methods described herein may conserve computing resources e.g. by avoiding the intermediate storage and processing of replicated data before preparing the replicated data for use in disaster recovery . Additionally in some examples these systems and methods may circumvent third party limitations on virtual disks used on cloud computing platforms e.g. by storing these virtual disks via data agnostic binary large objects rather .

Computing system broadly represents any single or multi processor computing device or system capable of executing computer readable instructions. Examples of computing system include without limitation workstations laptops client side terminals servers distributed computing systems handheld devices or any other computing system or device. In its most basic configuration computing system may include at least one processor and a system memory .

Processor generally represents any type or form of processing unit capable of processing data or interpreting and executing instructions. In certain embodiments processor may receive instructions from a software application or module. These instructions may cause processor to perform the functions of one or more of the exemplary embodiments described and or illustrated herein.

System memory generally represents any type or form of volatile or non volatile storage device or medium capable of storing data and or other computer readable instructions. Examples of system memory include without limitation Random Access Memory RAM Read Only Memory ROM flash memory or any other suitable memory device. Although not required in certain embodiments computing system may include both a volatile memory unit such as for example system memory and a non volatile storage device such as for example primary storage device as described in detail below . In one example one or more of modules from may be loaded into system memory .

In certain embodiments exemplary computing system may also include one or more components or elements in addition to processor and system memory . For example as illustrated in computing system may include a memory controller an Input Output I O controller and a communication interface each of which may be interconnected via a communication infrastructure . Communication infrastructure generally represents any type or form of infrastructure capable of facilitating communication between one or more components of a computing device. Examples of communication infrastructure include without limitation a communication bus such as an Industry Standard Architecture ISA Peripheral Component Interconnect PCI PCI Express PCIe or similar bus and a network.

Memory controller generally represents any type or form of device capable of handling memory or data or controlling communication between one or more components of computing system . For example in certain embodiments memory controller may control communication between processor system memory and I O controller via communication infrastructure .

I O controller generally represents any type or form of module capable of coordinating and or controlling the input and output functions of a computing device. For example in certain embodiments I O controller may control or facilitate transfer of data between one or more elements of computing system such as processor system memory communication interface display adapter input interface and storage interface .

Communication interface broadly represents any type or form of communication device or adapter capable of facilitating communication between exemplary computing system and one or more additional devices. For example in certain embodiments communication interface may facilitate communication between computing system and a private or public network including additional computing systems. Examples of communication interface include without limitation a wired network interface such as a network interface card a wireless network interface such as a wireless network interface card a modem and any other suitable interface. In at least one embodiment communication interface may provide a direct connection to a remote server via a direct link to a network such as the Internet. Communication interface may also indirectly provide such a connection through for example a local area network such as an Ethernet network a personal area network a telephone or cable network a cellular telephone connection a satellite data connection or any other suitable connection.

In certain embodiments communication interface may also represent a host adapter configured to facilitate communication between computing system and one or more additional network or storage devices via an external bus or communications channel. Examples of host adapters include without limitation Small Computer System Interface SCSI host adapters Universal Serial Bus USB host adapters Institute of Electrical and Electronics Engineers IEEE 1394 host adapters Advanced Technology Attachment ATA Parallel ATA PATA Serial ATA SATA and External SATA eSATA host adapters Fibre Channel interface adapters Ethernet adapters or the like. Communication interface may also allow computing system to engage in distributed or remote computing. For example communication interface may receive instructions from a remote device or send instructions to a remote device for execution.

As illustrated in computing system may also include at least one display device coupled to communication infrastructure via a display adapter . Display device generally represents any type or form of device capable of visually displaying information forwarded by display adapter . Similarly display adapter generally represents any type or form of device configured to forward graphics text and other data from communication infrastructure or from a frame buffer as known in the art for display on display device .

As illustrated in exemplary computing system may also include at least one input device coupled to communication infrastructure via an input interface . Input device generally represents any type or form of input device capable of providing input either computer or human generated to exemplary computing system . Examples of input device include without limitation a keyboard a pointing device a speech recognition device or any other input device.

As illustrated in exemplary computing system may also include a primary storage device and a backup storage device coupled to communication infrastructure via a storage interface . Storage devices and generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. For example storage devices and may be a magnetic disk drive e.g. a so called hard drive a solid state drive a floppy disk drive a magnetic tape drive an optical disk drive a flash drive or the like. Storage interface generally represents any type or form of interface or device for transferring data between storage devices and and other components of computing system . In one example database from may be stored in primary storage device .

In certain embodiments storage devices and may be configured to read from and or write to a removable storage unit configured to store computer software data or other computer readable information. Examples of suitable removable storage units include without limitation a floppy disk a magnetic tape an optical disk a flash memory device or the like. Storage devices and may also include other similar structures or devices for allowing computer software data or other computer readable instructions to be loaded into computing system . For example storage devices and may be configured to read and write software data or other computer readable information. Storage devices and may also be a part of computing system or may be a separate device accessed through other interface systems.

Many other devices or subsystems may be connected to computing system . Conversely all of the components and devices illustrated in need not be present to practice the embodiments described and or illustrated herein. The devices and subsystems referenced above may also be interconnected in different ways from that shown in . Computing system may also employ any number of software firmware and or hardware configurations. For example one or more of the exemplary embodiments disclosed herein may be encoded as a computer program also referred to as computer software software applications computer readable instructions or computer control logic on a computer readable storage medium. The phrase computer readable storage medium generally refers to any form of device carrier or medium capable of storing or carrying computer readable instructions. Examples of computer readable storage media include without limitation transmission type media such as carrier waves and non transitory type media such as magnetic storage media e.g. hard disk drives and floppy disks optical storage media e.g. Compact Disks CDs or Digital Video Disks DVDs electronic storage media e.g. solid state drives and flash media and other distribution systems.

The computer readable storage medium containing the computer program may be loaded into computing system . All or a portion of the computer program stored on the computer readable storage medium may then be stored in system memory and or various portions of storage devices and . When executed by processor a computer program loaded into computing system may cause processor to perform and or be a means for performing the functions of one or more of the exemplary embodiments described and or illustrated herein. Additionally or alternatively one or more of the exemplary embodiments described and or illustrated herein may be implemented in firmware and or hardware. For example computing system may be configured as an Application Specific Integrated Circuit ASIC adapted to implement one or more of the exemplary embodiments disclosed herein.

Client systems and generally represent any type or form of computing device or system such as exemplary computing system in . Similarly servers and generally represent computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications. Network generally represents any telecommunication or computer network including for example an intranet a WAN a LAN a PAN or the Internet. In one example client systems and or and or servers and or may include all or a portion of system from .

As illustrated in one or more storage devices N may be directly attached to server . Similarly one or more storage devices N may be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N may represent Network Attached Storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS .

Servers and may also be connected to a Storage Area Network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between a plurality of storage devices. SAN fabric may facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric may also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to exemplary computing system of a communication interface such as communication interface in may be used to provide connectivity between each client system and and network . Client systems and may be able to access information on server or using for example a web browser or other client software. Such software may allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the exemplary embodiments disclosed herein may be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the exemplary embodiments disclosed herein may also be encoded as a computer program stored in server run by server and distributed to client systems and over network .

As detailed above computing system and or one or more components of network architecture may perform and or be a means for performing either alone or in combination with other elements one or more steps of an exemplary method for disaster recovery from binary large objects.

While the foregoing disclosure sets forth various embodiments using specific block diagrams flowcharts and examples each block diagram component flowchart step operation and or component described and or illustrated herein may be implemented individually and or collectively using a wide range of hardware software or firmware or any combination thereof configurations. In addition any disclosure of components contained within other components should be considered exemplary in nature since many other architectures can be implemented to achieve the same functionality.

In some examples all or a portion of exemplary system in may represent portions of a cloud computing or network based environment. Cloud computing environments may provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. may be accessible through a web browser or other remote interface. Various functions described herein may be provided through a remote desktop environment or any other cloud based computing environment.

In various embodiments all or a portion of exemplary system in may facilitate multi tenancy within a cloud based computing environment. In other words the software modules described herein may configure a computing system e.g. a server to facilitate multi tenancy for one or more of the functions described herein. For example one or more of the software modules described herein may program a server to enable two or more clients e.g. customers to share an application that is running on the server. A server programmed in this manner may share an application operating system processing system and or storage system among multiple customers i.e. tenants . One or more of the modules described herein may also partition data and or configuration information of a multi tenant application for each customer such that one customer cannot access data and or configuration information of another customer.

According to various embodiments all or a portion of exemplary system in may be implemented within a virtual environment. For example modules and or data described herein may reside and or execute within a virtual machine. As used herein the phrase virtual machine generally refers to any operating system environment that is abstracted from computing hardware by a virtual machine manager e.g. a hypervisor . Additionally or alternatively the modules and or data described herein may reside and or execute within a virtualization layer. As used herein the phrase virtualization layer generally refers to any data layer and or application layer that overlays and or is abstracted from an operating system environment. A virtualization layer may be managed by a software virtualization solution e.g. a file system filter that presents the virtualization layer as though it were part of an underlying base operating system. For example a software virtualization solution may redirect calls that are initially directed to locations within a base file system and or registry to locations within a virtualization layer.

The process parameters and sequence of steps described and or illustrated herein are given by way of example only and can be varied as desired. For example while the steps illustrated and or described herein may be shown or discussed in a particular order these steps do not necessarily need to be performed in the order illustrated or discussed. The various exemplary methods described and or illustrated herein may also omit one or more of the steps described or illustrated herein or include additional steps in addition to those disclosed.

While various embodiments have been described and or illustrated herein in the context of fully functional computing systems one or more of these exemplary embodiments may be distributed as a program product in a variety of forms regardless of the particular type of computer readable storage media used to actually carry out the distribution. The embodiments disclosed herein may also be implemented using software modules that perform certain tasks. These software modules may include script batch or other executable files that may be stored on a computer readable storage medium or in a computing system. In some embodiments these software modules may configure a computing system to perform one or more of the exemplary embodiments disclosed herein.

In addition one or more of the modules described herein may transform data physical devices and or representations of physical devices from one form to another. For example one or more of the modules recited herein may receive replicated data to be transformed transform the replicated data output a result of the transformation to a binary large object file use the result of the transformation to create and maintain a virtual disk replica of a volume and store the result of the transformation to a third party cloud computing platform. Additionally or alternatively one or more of the modules recited herein may transform a processor volatile memory non volatile memory and or any other portion of a physical computing device from one form to another by executing on the computing device storing data on the computing device and or otherwise interacting with the computing device.

The preceding description has been provided to enable others skilled in the art to best utilize various aspects of the exemplary embodiments disclosed herein. This exemplary description is not intended to be exhaustive or to be limited to any precise form disclosed. Many modifications and variations are possible without departing from the spirit and scope of the instant disclosure. The embodiments disclosed herein should be considered in all respects illustrative and not restrictive. Reference should be made to the appended claims and their equivalents in determining the scope of the instant disclosure.

Unless otherwise noted the terms a or an as used in the specification and claims are to be construed as meaning at least one of. In addition for ease of use the words including and having as used in the specification and claims are interchangeable with and have the same meaning as the word comprising. 

