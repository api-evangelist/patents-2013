---

title: Apparatus and computer-readable recording medium for converting data into printing data based on setting conditions
abstract: A computer-readable recording medium on which first and second programs are recorded for causing a data processing apparatus to perform a data processing method that includes a) accepting, by the first program, a first printing setting condition by using a base program, b) accepting, by the first program, a second printing setting condition from an application without using the base program, c) outputting, by the first program, the second printing setting condition to a third program that can process printing data, d) accepting, by the second program, the second printing setting condition from the third program when converting document data from the application into the printing data, and e) converting, by the second program, the document data into the printing data based on at least one of the first printing setting condition accepted by the first program and the second printing setting condition accepted by the second program.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09298411&OS=09298411&RS=09298411
owner: RICOH COMPANY, LTD.
number: 09298411
owner_city: Tokyo
owner_country: JP
publication_date: 20130318
---
The present invention relates to a computer readable recording medium and an apparatus for processing data based on setting conditions.

A printing operation using a printer driver or a facsimile transmission operation using a PC FAX driver is performed by executing the following processes.

 1 A user displays a printing setting screen by using a printing menu of an application and sets printing conditions or transmission conditions. It is to be noted that although the content of the settings of the transmission conditions and the settings of the printing conditions are actually different both the settings of the printing conditions and the settings of the transmission conditions are hereinafter collectively referred to as printing setting s . 2 The user instructs printing be started by using the application.

The printer driver receives printing settings determined in the process 1 by way of a database referred to as a DEVMODE structure. Thereby the printer driver converts document data received from the application into printing data that can be understood by a printer in accordance with the printing settings. The printer driver transmits the printing data to the printer or the facsimile machine. Thereby printing is performed by the printer and facsimile transmission is performed by the facsimile machine.

In a case where a printer driver or a PC FAX driver hereinafter collectively referred to as printer driver receives printing settings from an application the application notifies the printing settings to a GDI Graphics Device Interface of Windows by using an API of Windows. The GDI is a part of a Windows type OS.

The GDI notifies a printing setting instruction to the printer driver by way of the DDI Device Driver Interface . Because only the I F of the DDI is defined each manufacturer manufacturer of printer driver or PC FAX driver can design a method for implementation to the DDI process performed by the printer driver in a case where the DDI is called .

However even if a manufacturer uniquely defines an I F for a printer driver the I F cannot be called because the Windows type OS is unable to know the I F.

The DEVMODE structure which stores printing settings therein is divided into a public area and a private area. is a schematic diagram for describing an example of a DEVMODE structure. is a schematic diagram for describing a example of referring to a DEVMODE structure. The public area is an OS definition area. Therefore an application can change the public area. The public area includes items that every printer driver needs to set such as printing direction or paper size .

The private area is an area unique to each manufacturer. The private area can define what kind of data is to be stored with respect to a manufacturer or a printer driver. Because the application or Windows type OS is unable to know what kind of data is stored in the private area the only way to change the private area is to use a UI driver of a printer driver to display the settings in the private area and accept changes to the displayed settings. The private area includes items having characteristics of a manufacturer or characteristics of a printer type such as printing method or authentication .

The user sets printing conditions e.g. paper size number of pages double side printing generated by the UI driver and instructs printing to be performed according to the printing conditions. When the user performs an operation for instructing the setting of printing conditions an application calls the GDI by making a GDI call and sends the DEVMODE structure to the GDI. The application illustrated in is an application such as a document generating program e.g. MS Word registered trademark .

When the GDI obtains the DEVMODE structure from the application the GDI calls a render driver of the printer driver by making a DDI call and sends the DEVMODE structure to the render driver.

The render driver refers to the DEVMODE structure obtained from the GDI generates printing data complying with the printing settings from the document data instructed to be printed by the application and sends the generated printing data to a spooler. It is to be noted that plotting data e.g. PDL data and control data e.g. PJL printing command are included in the printing data.

That is the UI driver and the render driver can both refer to the DEVMODE structure. Further the UI driver can display the private area and accept changes of printing settings.

Accordingly the only method for changing the private area is to use a printer driver to display a setting screen and accept a user operation s performed on the setting screen. Therefore an operation by the user is required for changing the private area.

However some processes are desired to be completed fully automatically without requiring any user operation. The processes include for example a process of printing forms or a process of transmitting sending direct mail DM by facsimile. For these processes operability would be degraded if a user has to change the private area by operating on a setting screen each time of printing a form or transmitting a document by facsimile even in a case where there the printing settings remains the same.

Therefore there is a desire to be able to change a printing setting stored in the private area of the printer driver to a printing setting suitable for a given application without having to require the user s operation.

In order to fulfill such desire some manufactures provide an extended I F of a printer driver so that an application can directly communicate with the printer driver see for example Japanese Laid Open Patent Publication No. 2005 148928 . Further applications suitable for a given process are developed to fulfill the user s desire.

There are some printer drivers that re display a setting screen after the user has instructed printing to be started so that changes of printing settings can be accepted before printing data is transmitted.

When the user inputs the facsimile number and depresses the send button a facsimile machine performs facsimile transmission by transmitting for example image data. In a case where the user depresses a cancel button the facsimile transmission is cancelled.

The settings applied in the examples of are used in cases that require input or confirmation in printing job units for the purpose of requesting the user to input a password each time of performing a printing process so that security is increased or requesting the user to confirm an designated address each time of performing facsimile transmission so that inadvertent transmission is prevented .

Being able to change the printing settings after instructing the starting of a printing process means that there is no need to go through a process in which the application determines the printing settings DEVMODE structure and instructs execution of a printing process according to the printing settings by way of a UI driver. That is printing can be performed without referring to the DEVMODE structure by having a render driver obtain and use printing settings that have been changed after instructing the starting of a printing process.

Therefore the location in which printing settings are stored is not limited to the DEVMODE structure. For example in an actual PC FAX driver printing settings such as facsimile transmission address data are stored in a file or a structure other than the DEVMODE structure. Some printer drivers store all settings in a structure other than the DEVMODE structure.

Printing settings are not stored in the DEVMODE structure not only for a reason that the printing settings are not needed to be stored in the DEVMODE structure but for other reasons. For example even if the printing settings can be stored in the DEVMODE structure there may be a case where the printing settings are intentionally not stored in the DEVMODE structure.

As described above printing settings may be stored in the DEVMODE structure by the UI driver or reference may be made to the printing settings in the DEVMODE structure by for example a graphics driver. In the case of storing printing settings in the DEVMODE structure or referring to the DEVMODE structure the application is the source that transfers the DEVMODE structure. In reality in the case of storing the printing settings in the DEVMODE structure the application secures a memory space provides the DEVMODE structure to the UI driver by way of the Windows type OS and embeds data in the DEVMODE structure. In the case of referring to the DEVMODE structure where the application performs printing by way of the Windows type OS the graphics driver refers to the data in the DEVMODE structure.

Accordingly in a case where the application does not delete the DEVMODE structure the printing conditions initially set by the user remains in the DEVMODE structure. Therefore there is a risk that the file of the DEVMODE structure be transferred to another user. Although most applications delete the DEVMODE structure after a printing process is completed there are some applications that do not delete the DEVMODE structure even after a printing process is completed.

Therefore if personal data such as authentication data or a password is stored in the DEVMODE structure the personal data remaining in a file of the DEVMODE structure could be transferred to an undesired user. This may result to degrading of security. Therefore there are printer drivers that do not store personal data in the DEVMODE structure.

In performing printing with a printer driver there are two types of printing architectures of Windows type OS. One is a RAW spool type and the other is an EMF spool type. In a case of printing with the RAW spool type an application converts document data obtained by a printer driver into RAW data that can be understood by a printer application process . From a user s standpoint the user cannot operate the application until a printing process is completed.

In a case of printing with the EMF spool type an application converts document data obtained by a Windows type OS into EMF data which is printer independent data application process and spools the EMF data spooler process . Then a printer driver converts the spooled EMF data into RAW data that can be understood by a printer. From a user s standpoint the user can operate the application after the document data is converted into the EMF data.

Both of the above described architectures can provide a DDI implementing method allows printing settings to be shown by displaying a printing setting screen after printing is started.

Next there is described a relationship between an installing method of a printer driver or a PC FAX driver and printing settings after printing is started. In the printer drivers of the Windows type OS there is an installing method called Point Print .

The client PC request the printer to perform printing by way of the server PC serving as a print server. In this system the same printer driver is to be installed in the client PC and the server PC. This leads to a problem in which a large amount of time and workload is required for an administrator or the like to install the printer driver into each client PC in the network.

Point Print is a method for resolving such problem by allowing a client PC to download and install a printer driver from a server PC. The Point Print is a function included in a standard Windows type PS. In a printing process using Point Print there are both the RAW spool type and the EMF spool type.

In a case where the type of printing architecture is the EMF spool type the user may change whether a rendering process process performed by the render driver should be performed by the client PC or the server PC. A rendering process performed on the client PC side is referred to as client side rendering whereas a rending process performed on the server PC side is referred to as server side rendering .

Under a situation where many users use client PC having a conventional 32 bit OS installed therein the use of the 64 bit OS is also beginning to spread. The 64 bit OS as a rule only operates 64 bit applications. However the Windows type OS provides a scheme referred to as WOW Windows ON Windows 64 for allowing operation of 32 bit applications that are already sold and distributed.

However unlike an application a printer driver is to be generated with 64 bits in the 64 bit OS. Therefore a 64 bit printer driver is installed in the client PC.

In a case where a 32 bit application is operated with WOW printing is performed in the following manner.

A render instruction is notified from the 32 bit application to a 64 bit printer driver by way of the splwow64.exe.

In the Windows type OS there is a scheme in which a substitute driver can be installed for sharing a printer Point Print . In this system a printer driver installed in a server is installed in the client PC. In a case where a printer driver compatible to a printer is not installed in the client PC a suitable printer driver is installed in the client PC. In this case a 32 bit printer driver can be registered in the 64 bit OS.

Even in a case where an extended I F is used there is a case where a printing setting cannot be stored.

As illustrated in when an application changes a printing setting by using an extended I F extended by the printer driver it is necessary of the application to perform the processes of inputting a DEVMODE structure to the extended I F of the printer driver receiving an output DEVMODE structure after changing the printing setting and transferring the received DEVMODE structure to the render driver when printing is started.

In other words in a case where the extended I F is used and a printing setting is stored in a location other than the DEVMODE structure the printer driver is unable to obtain printing settings by way of the extended I F. Therefore it becomes necessary to install all printing settings in the DEVMODE structure.

Accordingly it may be difficult to appropriately implement printing settings in a case where the printer driver is related to personal data or a case where the printer driver determines changes printing settings after starting of printing is instructed. The printer driver in these cases may be unable to store all printing settings setting items in the DEVMODE structure. Therefore there is a case where printing settings cannot be stored even if the extended I F is added to the UI driver.

In view of the above there is a printer driver that outputs printing settings to for example a file a registry or a shared memory space.

With the method described with it becomes possible to store printing settings that are not stored in the DEVMODE structure to thereby solve the above described difficulty of item A. However by not using the DEVMODE structure difficulties occur in the following three cases. The three cases include case 1 which is a case of a printing sequence with an EMF spool case 2 which is a case of a printing sequence with a printer driver in which Point Print is installed and case 3 which is a case of using 64 bit OS .

A method of using a DEVMODE structure which uses a DDI call sequence during printing can be executed during RAW spool. However in a case where a different spool type is used the DDI call sequence called by the Windows type OS changes. The EMF spool includes a process of converting document data from an application into EMF data and a process of converting EMF data into render data that can be understood by a printer. Accordingly a printing process sequence is performed twice inside the Windows type OS.

However the twice performed printing process sequences are performed with different processes with respect to the process of converting document data into EMF data and the process of converting EMF data into render data RAW data that can be understood by the printer. In a system such as the Windows type OS accessibility to a resource is determined by authorization of a process e.g. system authorization and authorization other than the system authorization . Therefore depending on the location of a file or registry in which printing settings are stored it is possible that the printing settings set by the extended I F cannot be obtained from the stored location when the printer interprets the printing data. Further with a recent Windows type OS access may be completely denied if authorization is different from the standpoint of security.

The method of using an extended I F can be executed by a method of installing a printer driver to a PC of the user in a local environment.

However in a case of a printer driver installed by using the above described Point Print method there is a case where an I F driver and a render driver are operated at different locations in a case of server side rendering .

In a case of client side rendering both the UI driver and the render driver operate on the client PC side. However in a case of server side rendering the UI driver operates on the client PC side whereas the render driver operates on the server PC side. Because the PCs that are operated are physically different from each other in the case of server side rendering the printer driver cannot obtain the printing settings that are temporarily stored in the setting storage area e.g. file registry by way of the extended I F of the printer driver.

As described above the WOW is a scheme provided by the Windows type OS splwow64.exe only operates when printing is performed. Because the Windows type OS does not support a 64 bit extended I F being accessed by a 32 bit application splwow64.exe cannot be operated. Therefore the 32 bit application cannot use a printer driver having the 64 bit extended I F.

The present invention may provide apparatus and computer readable recording medium for processing data based on printing setting conditions that substantially obviates one or more of the problems caused by the limitations and disadvantages of the related art.

Features and advantages of the present invention are set forth in the description which follows and in part will become apparent from the description and the accompanying drawings or may be learned by practice of the invention according to the teachings provided in the description. Objects as well as other features and advantages of the present invention will be realized and attained by apparatus and computer readable recording medium for processing data based on printing setting conditions particularly pointed out in the specification in such full clear concise and exact terms as to enable a person having ordinary skill in the art to practice the invention.

To achieve these and other advantages and in accordance with the purpose of the invention as embodied and broadly described herein an embodiment of the present invention provides a computer readable recording medium on which first and second programs are recorded for causing a data processing apparatus to perform a data processing method the data processing method including the steps of a accepting by the first program a first printing setting condition by using a base program b accepting by the first program a second printing setting condition from an application without using the base program c outputting by the first program the second printing setting condition to a third program that can process printing data d accepting by the second program the second printing setting condition from the third program when converting document data from the application into the printing data and e converting by the second program the document data into the printing data based on at least one of the first printing setting condition accepted by the first program and the second printing setting condition accepted by the second program.

Other objects features and advantages of the present invention will become more apparent from the following detailed description when read in conjunction with the accompanying drawings.

Illustrative embodiments of the present invention are described with reference to the accompanying drawings.

 1 A UI driver of the below described printer driver provides a unique extended I F unit to an application. The extended I F unit is an interface other than the DDIs Device Driver Interface defined by the Windows type OS Operating System . The UI driver can accept receive changes of a printing setting by way of the extended I F unit . 2 The UI driver stores the printing setting accepted by the extended I F unit in a Language Monitor . In a case where there is a printing setting set by the application by way of the UI driver the printing setting is stored in a DEVMODE structure. However the printing setting is stored in for example the Language Monitor and a printing setting stored in the DEVMODE structure are hereinafter collectively referred to as printing setting . That is the term printing setting is used regardless of the location in which the printing setting is stored. The Language Monitor can store a printing setting with respect to each logical printer of the printer driver . The Language Monitor is a type of API Application Programming Interface . Therefore in the following description of the embodiments setting a printing condition to the Language Monitor directly from the UI driver or the like means that the printing condition is set by the UI driver or the like by way of an API. 3 When the application outputs an instruction to execute printing printing execution instruction to the Windows type OS a render driver of the printer driver reads out the printing setting from the Language Monitor . The Language Monitor sends the printing setting to the render driver . In a case where a printing setting is registered in the DEVMODE structure the render driver also reads out the printing setting from the DEVMODE structure. 4 The render driver generates a command to a printer Printer Job Language PJL or printing data to be printed by the printer Printer Description Language PDL in accordance with the obtained printing setting s .

Because the application sets the printing setting by way of the extended I F unit there is no need to store highly confidential data in the DEVMODE structure.

By using the Language Monitor the render driver can obtain printing settings regardless of whether a RAW spool or a EMF spool is used as the printing architecture. That is denial of access due to for example use of different processes can be prevented because the Language Monitor is a part of a function of the Windows type OS.

Further the render driver can access the Language Monitor even if rendering is performed on the server side because the Language Monitor is a function supported by the Windows type OS as described below. Therefore even in a case where the printer driver is installed in the below described client PC Personal Computer by a Point Print method a printing setting can be obtained by the render driver .

In a case where the client PC accepts an operation from a user the application requests printing to be performed by using for example a GDI a DDI and the printer driver . The printer driver generates printing data by performing the below described processes and transmits the generated printing data to the printer . As long as the printer includes an image forming function the name of the printer is not limited to a printer but may also be for example a copy machine a duplicating machine or a facsimile machine image transmitting apparatus . The client PC and the printer may be directly connected to each other with for example a USB Universal Serial Bus cable.

The client PC is connected to a CPU a ROM Read Only Memory a RAM Random Access Memory an external I F a communication device an input device a display control unit and a storage device via a bus. The CPU reads out an OS the application and the printer driver from the storage device and executes the OS the application and the printer driver by using the RAM as a working memory.

As long as the application can request the printer to perform printing the application may be any type of software or program. For example the application may be for example document generating software browser software or a presentation document generating software. Further the application may be any type of software or program as long as the application can generate display and manage document data printing object for enabling the document data to be printed. The document data printing object is not limited to data including characters letters symbols or numerals but may also be data including images or photographs.

The RAM is a working memory main storage memory that temporarily stores necessary data therein. The ROM stores for example BIOS initial setting data and starting programs therein.

The external I F is an interface to which a cable e.g. USB cable or a portable recording medium is mounted. The communication device transmits packet data in this embodiment printing data to the printer according to an instruction s from the CPU . The communication device may be for example a LAN Local Area Network card or an Ethernet registered trademark card.

The input device is a user interface that accepts various operations instructions from the user. The input device may be for example a keyboard a mouse a touch panel or a audio input device. The display control unit controls the rendering of a display by controlling for example resolution or the number of colors according to screen data designated by the application . The display may be a FPD Flat Panel Display including for example a liquid crystal display or an organic electroluminescence display.

The storage device is a non volatile memory that stores the OS the printer driver and the application therein. The storage device may be for example a HDD Hard Disk Drive or a flash memory.

The OS is preferably a Windows type OS. However other operating systems having substantially the same functions as the Windows type OS may be used. The Windows type OS used on the client side may be for example Windows NT Windows 98 Windows 2000 Windows ME Windows XP Windows Vista Windows 7 Windows 7 and other subsequent versions of the Windows type OS. The Windows type OS used on the server side may be for example Windows 2000 Server Windows 2003 Server Windows 2008 Server and other subsequent versions of the Windows type OS.

The storage medium is for example a non volatile memory such as an SD Secure Digital card or a USB memory. The printer driver may be distributed in a state recorded onto the recording medium or downloaded from a server not illustrated . In a case where a Point Print is used the printer driver is downloaded from a server PC not illustrated in .

The printer driver includes the UI driver and the render driver . Further the UI driver includes a display unit and an extended I F unit . The display unit of the UI driver displays a printing setting screen also referred to as printing dialog on the display in a case where the user inputs a document printing operation to the application . The user may set printing conditions such as number of pages double side printing N up printing book binding reduce enlarge by operating the printing setting screen. Further the display unit may display the printing setting screen and accept changes of printing settings even after the user instructs printing to be started. The printing setting is stored in a data table data structure referred to as the DEVMODE structure hereinafter also simply referred to as DEVMODE . The DEVMODE is a data structure to which member variables are defined for allowing printing conditions to be commonly set by various printer drivers operated by the Windows type OS.

Further the extended I F unit included in the UI driver accepts printing settings from the application without the intervening of the Windows type OS. Regularly in order for the application to access the UI driver the application makes a GDI call and accesses the UI driver by way of the Windows type OS. However the extended I F unit is an interface unique to the printer driver which allows the UI driver to accept printing settings and settings during a printing process e.g. batch transmission setting directly from the application without the intervention of the Window type OS .

The render driver refers to the DEVMODE in a case where printing settings are included in the DEVMODE and printing settings and also the below described operation settings in a case where the operations settings are accepted and generates printing data by converting document data printing object into printing data according to the printing settings.

The Language Monitor includes a data storage unit and a communication unit . The communication unit controls data communications transmission reception in a case where the printer driver transmits printing data to the communication unit . The communication unit controls data communications between the Language Monitor and the communication unit of the client PC . The communication unit can receives a message from the printer via the communication unit . The data storage unit stores printing settings therein. The printer driver implements the data storage unit by using the functions of the Language Monitor . Therefore there is no need or hardly any need for changing the Windows type OS. It is to be noted that the data storage unit is described in detail below.

The communication unit of the client PC is a functional component for communicating with the printer driver . The communication unit is operated with a protocol such as TCP IP.

Although the extended I F unit is illustrated inside the UI driver in the extended I F unit may be provided outside the UI driver as long as the extended I F unit is included in the printer driver . Therefore the extended I F unit may be separate independent from the UI driver as illustrated in .

However by including the extended I F unit in the printer driver the application and the printer driver can directly transfer data. That is the application and the printer driver can transfer data without the intervening of the OS . Therefore the application can directly set printing settings printing conditions to the printer driver .

Accordingly if a printer driver that only complies with printing architecture of the Windows type OS is used the render driver would be unable to refer to the printing settings that are not store in the DEVMODE. However with the printer driver according to an embodiment of the present invention the printer driver can refer to both the printing settings in the DEVMODE and the printing settings set to the Language Monitor .

According to the Windows type OS the printer driver can use both the Language Monitor provided by the Windows type OS and the Language Monitor provided by a manufacturer e.g. printer manufacturer facsimile manufacturer . The Language Monitor according to an embodiment of the present invention can include a Language Monitor that is commercially available and a Language Monitor that is provided by a manufacturer.

The application calls the extended I F unit of the printer driver by using the extended I F calling unit without the intervening of the Windows type OS and sets a printing setting to the extended I F unit . As described above data that is not set to the DEVMODE may be for example data having high confidentiality. In the example illustrated in the user name personal data and the password are data that are not to be stored in the DEVMODE from the standpoint of security.

The UI driver receives the printing setting set by the application by way of the extended I F unit and stores the received printing setting in the Language Monitor . In this process an API Application Programming Interface of the Windows type OS referred to as SendRecvvBidiDataFromPort is used. The SendRecvvBidiDataFromPort is described in detail below.

The execution of printing is notified from the application to the render driver via the Windows type OS . Because the printing setting is already stored registered in the Language Monitor there is no need for the UI driver to display the printing setting screen on the display .

By the execution of printing the printing setting stored in the DEVMODE is transferred in a state stored in the DEVMODE to the render driver . Further the render driver obtains the printing setting set with the extended IF unit from the Language Monitor . Then the render driver generates printing data that can be understood by the printer .

In this embodiment printing settings other than those pertaining to security are stored in the DEVMODE and transferred to the render driver via the Windows type OS in a state stored in the DEVMODE. Alternatively all printing settings may be stored in the Language Monitor by way of the extended I F unit . As illustrated in no DEVMODE is used in the example of .

In this example the printing settings that are to be set to the printer driver PC FAX driver include an address address indicating the destination of facsimile transmission and sender data data indicating the sender of the facsimile transmission . The UI driver stores registers the printing settings in the Language Monitor . That is the setting application A is an application dedicated for printing setting i.e. setting printing conditions with respect to the printer driver . In applications A and B are applications that generate document data. The setting application A can perform printing setting before document data is generated by the applications applications A B .

In a case where the applications instruct execution of printing the render driver obtains printing settings from the Language Monitor converts the printing settings into data that can be understood by the printer and transmits the converted data to the printer .

The setting application illustrated in may be provided separately from the applications for a purpose other than performing printing setting on the extended I F unit . The setting application may be provided separately from the applications in a case of setting printing conditions to the printer driver . In the case of setting printing conditions to the printer driver the setting application A may be provided separately from the applications applications A B or form a united body with the applications i.e. included in the application as illustrated in .

One example of providing the setting application A separately from the applications applications A B is a case where the setting application A is a form printing application.

In hPort indicates a handle of a port provided by a module of a calling source. Further dwAccessBit indicates an ACCESS MASK structure which permits access to a printer or a print server provided by a module of a calling source. Further pAction indicates a request action provided by a module of a calling source pReqData indicates a pointer of a PBIDI REQUEST CONTAINER structure including request data. Further ppResData indicates a pointer to a memory area for receiving an address of a PBIDI REQUEST CONTAINER structure including response data.

The Windows type OS provides Bidi Request and Response schemas which includes a schema of a database including pairs requests and responses that can be used for bidirectional communication between a printer and an application. In version indicates a version of a schema such as 1 . Further Flags indicates a set of flags reserved by a system Windows type OS . The value of Flags is to be 0. Further Count indicates the number of bidi requests of an aData member. Further aData indicates an array arrangement of the BIDI REQUEST DATA. Each element of the array includes a single bidi request .

The SendRecvvBidiDataFromPort function is used for setting conditions to the Language Monitor or for making requests inquiries to the Language Monitor . The printer driver calls the Language Monitor by way of the SendRecvvBidiDataFromPort so that the Language Monitor can be used as a storage space. In other words the data storage unit is provided by the Language Monitor and the SendRecvvBidiDataFromPort function.

As described above the Language Monitor need not be developed by the manufacturer. A standard Language Monitor can be used together with the Windows type OS. In a case where the Language Monitor is not developed by the manufacturer the standard Language Monitor is operated. In a case where the manufacturer develops a Language Monitor corresponding to a predetermined I F additional functions can be added to the Language Monitor . In this embodiment the printer driver or the like can exchange data with the Language Monitor by using an I F such as SendRecvBidiDataFromPort .

More specifically a JOBID is set to a SetSchema of an IBidiRequest instance of COM interface and a printing setting is set to SetInputData of an IBidiRequest. In a case where the UI driver sets an IBidiRequest object and calls the SendRecv a spooler calls the SendRecvBidiDataFromPort and sets a printing 3rd setting to a predetermined parameter e.g. parameter 4parameter . Thereby the printing setting is set to the Language Monitor .

In a case of reading out a printing setting with the render driver the printer driver for example sets an IBidiRequest object and calls the SendRecv . Thereby the printing setting is stored in the IBidiRequest. Accordingly when the render driver calls a GetOutputData of a IBidiReqeust the render driver can receive the printing setting stored in the IBidiRequest.

Step S The application designates a printing setting to the extended I F unit of the printer driver . In the same manner as the UI driver the application can display a printing setting screen and accept printing settings from the user.

Step S The application sends a notification to the extended I F unit of the printer driver instructing that the designated printing setting is to be confirmed defined .

Step S. The extended I F unit of the printer driver instructs the Language Monitor to store the designated printing setting therein. More specifically the printing setting is stored in a predetermined parameter of the SendRecvBidiDataFromPort function. For the sake of convenience the sequence diagram of illustrates the extended I F unit accessing the Language Monitor in Step S.. However Step S. may be illustrated by showing the UI driver accessing the Language Monitor . Step S The application basically performs a typical printing operation on and after Step S. First the application instructs the GDI to start preparation for a printing process. More specifically the application converts the printing setting into a parameter by using the CreateDC function and calls the GDI . It is to be noted that the application instructs the GDI to start preparing for a printing process for example after a transmission process is completed. S. The GDI sends the printing process to the printing setting to the render driver by calling the DDI corresponding to the API. The printing setting transferred from the application to the GDI in the form of the parameter of the CreateDC DEVMODE is stored in a parameter of DrvEnablePDEV and notified to the render driver . Then the render driver can refer to the printing setting until the job is completed i.e. until the device context is erased . S When completion of the preparation for the printing process is notified from the GDI to the application the application instructs the GDI to start the printing process. More specifically the application converts for example DocINFO into a parameter by using the StartDoc function and calls the GDI . S. The GDI instructs the render driver to start the printing process. More specifically the GDI sends the DrvStartDoc function to the render driver . S.. When the render driver of the printer driver is called with the DrvStartDoc the render driver inquires whether there is a printing setting corresponding to the printing setting set by the application . More specifically the render driver sets a value indicative of an inquiry to a parameter of SendRecvBidiDataFromPort and sends the parameter of the SendRecvBidiDataFromPort to the Language Monitor . In a case where the printing setting set by the application exists in the Language Monitor the Language Monitor sets the printing setting to the SendRecvBidiDataFromPort and sends the SendRecvBidiDataFromPort to the render driver .

The render driver of the printer driver generates printing data based on the printing setting obtained from the Language Monitor and also based on a DEVMODE if a printing setting is stored in the DEVMODE and transmits the generated printing data to the printer .

S When the GDI notifies the completion of starting the printing process to the application the application repeats the following processes in page units i.e. page by page . First the application instructs the GDI to accept printing data of a new page. More specifically the application sends StartPage to the GDI . S. The GDI sends DrvStartPage to the render driver .

Then the GDI sends a render function document data obtained from the application to the render driver . Then the render driver converts the document data into printing data in accordance with the obtained printing setting s . Then the render driver transmits the printing data to the printer .

S When the GDI notifies completion of a rendering process of 1 page a single page worth of rendering to the application the application notifies completion of writing of 1 page a single page worth of writing to the GDI . More specifically the application sends EndPage to the GDI . S In a case where the rendering process of all the pages is completed the application notifies the completion of a printing job to the GDI . More specifically the application sends EndDoc to the GDI . S The application notifies the DeleteDC to the GDI and erases the device context.

At this stage if the application instructs starting of a printing process again the render driver generates printing data with the same printing settings as the previous printing process because the printing setting of the Language Monitor is not yet changed.

S After the printing process is completed the application notifies that the printing setting is to be cancelled to the extended I F unit of the printer driver .

S The extended I F unit of the printer driver sets a value indicating the cancellation to a parameter of the SendRecvBidiDataFromPort . Then the extended I F unit UI driver instructs the Language Monitor to cancel nullify the printing setting.

In Step S. of the printing setting printing condition is set by performing communication a single time. However the printing setting may be set by performing communication multiple times. Similarly in Step .. data may be read out not only by performing communication a single time but by performing communication multiple times. Further the process of Step S. may be performed in Step S.

As illustrated in the render driver of the printer driver obtains setting data printing settings of the extended I F unit from the Language Monitor when DrvStartDoc is called.

As described above an operation sequence and a process of the Windows type OS are different between the RAW spool and the EMF spool. However the manner of accessing the Language Monitor is the same between the RAW spool and the EMF spool even if the printer driver operates differently with respect to the RAW spool and the EMF spool.

Therefore the render driver is to be designed so that the Language Monitor can obtain the printing settings at the timing of DrvStartDoc . That is the process of the printer driver need not be designed with consideration of spool type. Thus by performing the same processes at the same DDI the Language Monitor can be used regardless of the difference of spool type.

As described above with reference to the printer driver obtains the printing setting from the Language Monitor when the DrvStartDoc is called. However the printer driver may obtain the printing setting at other timings as long as the timing is before generating the printing data to be transmitted to the printer .

In a case where the user sets printing settings printing conditions by operating the setting application A the user can also set an operation setting operation condition . The operation setting is an item included in a printing setting. In this embodiment the operation setting is a setting condition that designates an operation or a process performed by the printer .

In a case of performing facsimile transmission for sending plural documents from a printer a connection fee is be charged each time an application instructs execution of printing. Therefore connection fees can be saved by transmitting data of all of the documents in a single connection rather than repeating connection and disconnection. The batch transmission setting is an operation setting used for the purpose of for example saving connection fees. The batch transmission setting is a setting that instructs the render driver to perform an operation of transmitting data of documents jobs from plural applications in a batch.

In in a case where a printing setting for facsimile transmission is accepted the setting application A sets a printing setting to the UI driver . Then the setting application A sets a printing setting for facsimile transmission e.g. address data sender name and an operation setting in this example batch transmission setting by way of the extended I F unit of the printer driver .

After the batch transmission setting is set to the UI driver a printing process is executed by the applications A B . Thereby the render driver reads out the printing setting and the operation setting from the Language Monitor and generates printing data that can be understood by the printer . Then in accordance with the batch transmission setting the render driver transmits the printing data to the printer in a batch. Accordingly fax transmission with respect to the same address destination can be performed with a single connection.

In the setting application A may constitute a united body with the applications A B . As another example there is an operation setting that allows the same document to be transmitted to multiple addresses broadcasting .

S The application sets an operation setting to the extended I F unit of the printer driver . In the same manner as the UI driver the application can display an operation setting screen on the display . Further the application can accept an operation setting from the user. S Then the application sets a printing setting to the extended I F unit of the printer driver . S The application sends a notification to the extended I F unit of the printer driver instructing that the designated printing setting and operation are to be confirmed defined . Step S. The extended I F unit of the printer driver instructs the Language Monitor to store the designated printing setting and operation setting therein. More specifically the printing setting and the operation are stored in predetermined parameters of the SendRecvBidiDataFromPort function. Because the operation setting is to be maintained stored until the operation setting is erased the operation setting is in a Lock state. Step S The application basically performs a typical printing operation on and after Step S. First the application instructs the GDI to start preparation for a printing process. More specifically the application converts the printing setting into a parameter by using the CreateDC function and calls the GDI . S. The GDI sends the printing process to the printing setting to the render driver by calling the DDI corresponding to the API. The printing setting transferred from the application to the GDI in the form of the parameter of the CreateDC DEVMODE is stored in a parameter of DrvEnablePDEV and notified to the render driver . Then the render driver can refer to the printing setting until the job is completed i.e. until the device context is erased . S When completion of the preparation for the printing process is notified from the GDI to the application the application instructs the GDI to start the printing process. More specifically the application converts for example DocINFO into a parameter by using the StartDoc function and calls the GDI . S. The GDI instructs the render driver to start the printing process. More specifically the GDI sends the DrvStartDoc function to the render driver . S.. When the render driver of the printer driver is called with the DrvStartDoc the render driver inquires whether there is a printing setting and an operation setting corresponding to the printing setting and the operation setting set by the application . More specifically the render driver sets a value s indicative of an inquiry to a parameter s of SendRecvBidiDataFromPort and sends the parameter s of the SendRecvBidiDataFromPort to the Language Monitor . In a case where the printing setting and the operation setting set by the application exists in the Language Monitor the Language Monitor sets the printing setting and the operation setting to the SendRecvBidiDataFromPort and sends the SendRecvBidiDataFromPort to the render driver .

The render driver of the printer driver generates printing data based on the printing setting obtained from the Language Monitor and also based on a DEVMODE if a printing setting is stored in the DEVMODE and transmits the generated printing data to the printer .

S When the GDI notifies the completion of starting the printing process to the application the application repeats the following processes in page units i.e. page by page . In the example of only a single page is printed. First the application instructs the GDI to accept printing data of a new page. More specifically the application sends StartPage to the GDI . S. The GDI sends DrvStartPage to the render driver . S Then the GDI sends a render function document data obtained from the application to the render driver . Then the render driver converts the document data into printing data in accordance with the obtained printing setting s . In a case where the batch transmission setting is not set the render driver generates printing data in accordance with the printing setting obtained from the Language Monitor and transmits the printing data to the printer . However in a case where the render driver detects the batch transmission setting being set the render driver maintains stores the printing data and does not yet transmit the printing data. S When the GDI notifies completion of a rendering process of 1 page a single page worth of rendering to the application the application notifies completion of writing of 1 page a single page worth of writing to the GDI . More specifically the application sends EndPage to the GDI . S. The GDI transmits the DrvSendPage to the render driver . S In a case where the rendering process of all the pages is completed the application notifies the completion of a printing job to the GDI . More specifically the application sends EndDoc to the GDI . S. The GDI transmits DrvEndDoc to the render driver . S The application notifies DeleteDC to the GDI and erases the device context. S. The GDI transmits DrvDisiblePDEV to the render driver . Then the render driver erases DEVMODE.

At this stage execution of 1 Job is completed data transmission of a single document is completed . In batch transmission the application executes next Job without transmitting the printing data to the printer .

The processes in Steps S S are substantially the same as those of Steps S S. The application can repeat the processes in S S any number of times. However in this embodiment data of two Jobs two document data are transmitted in a batch.

S The application instructs the batch transmission setting to be cancelled to the extended I F unit of the printer driver . For example in a case where document data of plural documents transmission object are registered by the user the application instructs cancellation of the batch transmission setting after all of the document data have been transmitted. Thus in some cases it may be preferable for the application that generates document data and the setting application A that sets a printing settings operation setting to constitute a united body.

In a case where the application and the setting application A are separate i.e. do not constitute a united body the application may cancel the batch transmission setting according to an operation by the user. Alternatively the cancellation of the batch transmission setting may be performed automatically. For example the batch transmission setting may be cancelled after a predetermined period elapses after the batch transmission setting is set or when a specific time.

S. The extended I F unit basically performs a typical printing operation on and after Step S.. Alternatively the application may perform the typical printing operation on and after Step S. instead of the extended I F unit .

First the extended I F unit instructs the GDI to start preparation for a printing process. More specifically the extended I F unit converts the printing setting into a parameter by using the CreateDC function and calls the GDI .

Step .. The GDI sends the printing process to the printing setting to the render driver by calling the DDI corresponding to the API. The printing setting transferred from the extended I F unit to the GDI in the form of the parameter of the CreateDC DEVMODE is stored in a parameter of DrvEnablePDEV and notified to the render driver . However because document data is not transmitted the render driver is unable to generate printing data by referring to DEVMODE. S. When completion of the preparation for the printing process is notified from the GDI to the extended I F unit the extended I F unit instructs the GDI to start the printing process. More specifically the extended I F unit converts for example DocINFO into a parameter by using the StartDoc function and calls the GDI . S. The extended I F unit transmits ExtEscape to the GDI . The ExtEscape function is an API for allowing access to a module unable to make access by way of the GDI in this example the render driver . The ExtEscape function can be utilized in a case of transmitting data from an application or the like to a driver without the intervention of the GDI or in a case of obtaining data from a driver without the intervention of the GDI . The ExtEscape may include a request for transmitting accumulated stored printing data to the printer . S.. GDI converts ExtEscape into a DDI that is DrvStartPage and transmits the DrvStartPage to the render driver . S.. Further the GDI transmits DrvEscape PASSTHROUGH to the render driver . In accordance with the instruction in DrvEscape PASSTHROUGH the render driver transmits the accumulated printing data to the printer . S. In a case where the extended I F unit is notified from the GDI that the printing data has been transmitted the extended I F unit notifies completion of a printing job to the GDI . More specifically the extended I F unit sends EndDoc to the GDI . S.. The GDI transmits DrvEndDoc to the render driver . S. The extended I F unit notifies DeleteDC to the GDI and erases the device context. S.. The GDI transmits DrvDisiblePDEV to the render driver . Then the render driver erases DEVMODE. S When the application is notified that operation is completed from the extended I F unit the application instructs the extended I F unit of the printer driver to cancel the printing setting. S. The extended I F unit of the printer driver sets a value indicating the cancellation to a parameter of the SendRecvBidiDataFromPort . Then the extended I F unit instructs the Language Monitor to cancel nullify the printing setting. Thereby the extended I F unit erases the printing setting and the operation setting stored in the Language Monitor . Accordingly the locked state of the operating is cancelled.

Accordingly designation of an operation operation setting of the printer driver can be registered in the Language Monitor even if the operation setting is an item that is not stored in a DEVMODE.

In Step S the extended I F unit of the printer driver transmits an instruction notice to cancel the batch transmission setting to the render driver via the GDI regular printing job . Alternatively the extended I F unit may transmit the instruction directly to the render driver .

In some case multiple logical printers may be registered in a single client PC. In this embodiment a logical printer is a logical printer indicated as an icon of a printer in a printer folder of a Windows type OS. The Windows type OS can generate multiple logical printers with respect to a single printer driver . The logical printer is a virtual output destination from the standpoint of the application . The printing data rendered by the printer driver is output to a logical printer s designated by the user and transferred from the logical printer s to a physical printer s by way of the Windows type OS.

A name can be assigned to each logical printer. For example the name can be assigned to the logical printer by the user or automatically assigned in correspondence with the name of a package of a printer driver. For example a setting indicating a function a setting indicating whether a printer is shared a setting indicating a spool type or a setting indicating an option configuration may be set to the logical printer. In other words the initial settings of a single physical printer can be changed.

In a case where multiple logical printers are registered in a single client PC it is convenient to set printing settings and operation settings with respect to each of the logical printers. In one configuration the same printing setting is used by multiple applications after setting the printing setting once by the extended I F unit . In another configuration the same operation setting is used by multiple applications after the setting the operation setting once by the extended I F unit .

It is desired for the printing settings and the operation settings to be stored with respect to each logical printer. Accordingly the extended I F unit registers printing settings and operation settings in the Language Monitor by using a logical printer name hereinafter also referred to as logical printer ID as a key.

The application of is an example of a united body constituted by the above described setting application A and applications A B . As described below the application uses the extended I F unit of the printer driver .

In this example the application sets a printing setting AB to the logical printer name logical printer ID A and the application sets a printing setting MN to the logical printer name logical printer ID B.

The logical printer ID is an ID of a logical printer designated as an output destination by the user. Accordingly the logical printer ID to which reference is to be made is detected by the application the UI driver and the render driver . Therefore the UI driver can set a printing setting to the Language Monitor by using the logical printer ID corresponding to the logical printer of the output destination as a key. The render driver can inquire the Language Monitor by using the logical printer ID as a key and obtain a printing setting corresponding to the inquiry.

Accordingly a printing setting or an operation setting can be designated with respect to each logical printer and facilitate printing and facsimile transmission. It is to be noted that a printing setting operation setting can be set with respect to each logical printer even in a case of performing batch transmission.

Next a method of managing printing settings and operation settings using the Language Monitor with Point Print installing method.

The printer driver is installed in the server PC . The server PC copies the printer driver and distributes the copies to the client PCs . Therefore by the cooperative operation between the server PC and the client PCs the printer driver can be installed without burdening the user. The following example is a case where the client PC has connected to the server PC and installed the printer driver with the Point Print installing method.

In performing rendering on the server side of a Point Print environment it may be difficult for a printing setting or the like to be shared by the server PC and the client PC because a printing setting set by the user is accepted by the client PC in this example client PC .

However because the above described Language Monitor is a function functional component inside the Windows type OS the Windows type OS of the client PC having Point Print installed therein can transmit the printing setting to the server PC . Accordingly the server PC can obtain printing settings and operation settings from the client PC by way of the printing architecture of the Windows type OS.

The printer driver of the client PC and the printer driver of the server PC are configured to access only one Language Monitor .

The Windows type OS of the client PC and the Windows type OS of the server PC establish communications between the client PC and the server PC by using for example RPC Remote Procedure Call . In a case where the UI driver accesses the Language Monitor of the client PC the Language Monitor of the client PC does not operate but a spooler of the client PC transmits a printing setting to the Language Monitor of the server PC .

Because the same Windows type OS is installed in the client PC and the server PC both the client PC and the server PC can share the use of the Language Monitor of the printing architecture of the Windows type OS. Accordingly problems such as access restrictions or communication error due to modules uniquely developed by different manufacturers can be prevented. Further because the same Windows type OS is installed in the client PC and the server PC the client PC and the server PC have affinity to the Windows type OS.

Although RAW spool and EMF spool are included as the spool types in the Point Print environment rendering cannot be performed on the server side server side rendering in a case where RAW spool is used as the spool type. This is because RAW spool being a process of the application restricts the location in which rendering can be performed.

Otherwise the Language Monitor can be used for performing client side rendering with the RAW spool type client side rendering with the EMF spool type and server side rendering with the EMF spool type as illustrated in .

In the following it is assumed that the setting application A that sets printing settings for facsimile transmission is a 32 bit application and the Windows type OS is a 64 bit OS.

When the application executes a printing process splwow64.exe operates according to a WOW scheme. Therefore the application may either be a 32 bit application or a 64 bit application. Similar to the Windows type OS the printer driver is also to be designed with 64 bits. Thus the render driver is a 64 bit driver.

The UI driver is also provided as a 64 bit driver and is installed in the client PC . However in a case where the setting application A 32 bit application attempts to access the extended I F unit splwow64.exe does not operate. Therefore the setting application A cannot access the extended I F unit .

In such a case the Windows type OS registers a 32 bit printer driver which is registered beforehand as a compatible substitute of a 64 bit printer driver to a system of the client PC by using a scheme referred to as substitute installation. In the example of registering a 32 bit printer driver means that a 32 bit printer driver is registered instead of a 64 bit printer driver.

A 32 bit UI driver is loaded to a 32 bit extended I F unit because the setting application A that uses the extended I F unit is designed with 32 bits. Accordingly the UI driver can accept printing settings or the like from the 32 bit setting application A.

The extended I F unit communicates with the Language Monitor by way of an API referred to as SendRecvBidiDataFromPort . Therefore the extended I F unit can store printing settings or the like in the 64 bit Language Monitor without having to consider combinations of the setting application A and the Windows type OS e.g. 32 64 bit application 32 64 bit OS . That is it does not matter whether the setting application A and the Windows type OS is 32 bits or 64 bits because the API SendRecvBidiDataFromPort is used.

Further the 64 bit render driver communicates with the Language Monitor by using the API referred to as SendRecvBidiDataFromPort in a case where a printing process is executed. Therefore the render driver can read out printing settings or the like from the Language Monitor without having to consider combinations of the setting application A and the Windows type OS eg. 32 64 bit application 32 64 bit OS .

Accordingly even in a case where a 32 bit application is operated in a 64 bit OS with the printer driver according to the above described embodiment of the present invention a printing setting can be set with the setting application A by way of the extended I F unit and read out with the render driver .

Hence with the printer driver according to the above described embodiment of the present invention the following effects can be attained in a case where the application uses the extended I F unit and sets printing settings 

1 Regardless of whether the RAW spool or the EMF spool is used printing can be performed in accordance with a printing setting instructed by the extended I F unit of the printer driver 

2 Without relying on the spool type printing can be performed in accordance with a printing setting instructed by the printer driver installed by the Point Print method by way of the extended I F unit and

3 Printing can be performed in accordance with a printing setting instructed by the extended I F unit of the printer driver even in a case where a 32 bit application is operated in a 64 bit OS.

Further the printer driver can store a printing setting in DEVMODE. Further the printer driver can set all printing setting in the Language Monitor .

With the above described embodiment of the present invention regardless of the system environment a printer driver can provided an extended I F and an application can set for example printing settings by using the extended I F.

The present invention is not limited to the specifically disclosed embodiments and variations and modifications may be made without departing from the scope of the present invention.

The present application is based on Japanese priority application No. 2012 064361 filed on Mar. 21 2012 with the Japanese Patent Office the entire contents of which are hereby incorporated by reference.

