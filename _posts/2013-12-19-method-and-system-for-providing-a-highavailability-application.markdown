---

title: Method and system for providing a high-availability application
abstract: A system, method, and techniques for providing high availability to an application are provided. An example system includes a plurality of databases and a persistence layer that generates, based on a request, one or more sets of database commands that is specific to a database. The system also includes a high-availability layer that is an intermediary between the persistence layer and the plurality of databases, and includes a transaction manager and an execution engine. The transaction manager starts a composite transaction including a sub-transaction corresponding to each database of the plurality of databases and determines whether each applied sub-transaction has successfully completed. A sub-transaction includes a set of database commands. The execution engine applies each sub-transaction to its corresponding database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09207966&OS=09207966&RS=09207966
owner: Red Hat, Inc.
number: 09207966
owner_city: Raleigh
owner_country: US
publication_date: 20131219
---
The present disclosure generally relates to a high availability application and more particularly to data storage associated with the high availability application.

High availability HA is one of the basic requirements for nowadays enterprise applications. Enterprise systems operating today are subject to continuous program execution that is 24 hours a day and 7 days a week. There is no longer the concept of overnight or planned downtime. All programs and data must be available at any point during the day and night. Any outages or deteriorated service can result in loss of revenue as customers simply take their business elsewhere and the enterprise stops to function on a global scale.

Databases vendors may use several different strategies to implement high availability for a data storage system. The implementation of high availability for a data storage is a complex technical problem and uses strategies that typically require special and expensive hardware or a special configuration of databases that brings limitations for the provided features. High availability may be provided to an application when it is able to survive for example a crash on the database server that stores data for the application.

A traditional approach of providing high availability to an application uses a storage area network SAN . A SAN is a high performance dedicated network used primarily to provide fast and reliable communication between computers and storage devices in a shared storage networking environment. The SAN also enables a storage device to communicate with another storage device. Software solutions at the database level however are complex and expensive. For example a database within a cluster may be a share everything database in which all data files control files and redo log files used by the database reside on a shared storage that is accessible by all other database instances. This traditional approach is typically expensive and proprietary.

According to an embodiment a system for providing high availability to an application includes a plurality of databases. Databases in the plurality of databases are isolated instantiations relative to each other. The system also includes a persistence layer that receives a request including a transient entity to persist. The persistence layer generates based on the request one or more sets of database commands that is specific to a database of the plurality of databases and that manipulates the database. The system further includes a plurality of application servers that deploy a high availability application. The high availability application creates the transient entity and sends the request to the persistence layer. The system also includes a high availability layer that is an intermediary between the persistence layer and the plurality of databases. The high availability layer includes a transaction manager and an execution engine. The transaction manager starts a composite transaction including a sub transaction corresponding to each database of the plurality of databases and determines whether each applied sub transaction has successfully completed. When each sub transaction is determined to have successfully completed the transaction manager sends to the persistence layer a message indicating successful completion of the composite transaction. A sub transaction includes a set of database commands. The execution engine applies each sub transaction to its corresponding database. When a particular database successfully completes a sub transaction the particular database sends a confirmation of successful completion of the sub transaction.

According to another embodiment a method of providing high availability to an application includes receiving a request including a transient entity to persist. The method also includes generating based on the request one or more sets of database commands that is specific to a database of a plurality of databases and that manipulates the database. The databases in the plurality of databases are isolated instantiations relative to each other. The method further includes starting a composite transaction including a sub transaction corresponding to each database of the plurality of databases. A sub transaction includes a set of database commands. The method also includes applying each sub transaction to its corresponding database. When a particular database successfully completes a sub transaction the particular database sends a confirmation of successful completion of the sub transaction. The method further includes determining whether each applied sub transaction has successfully completed. When each sub transaction is determined to have successfully completed the transient object is persisted in the plurality of databases.

According to another embodiment a non transitory machine readable medium includes a plurality of machine readable instructions that when executed by one or more processors is adapted to cause the one or more processors to perform a method including receiving a request including a transient entity to persist generating based on the request one or more sets of database commands that is specific to a database of a plurality of databases and that manipulates the database the databases in the plurality of databases being isolated instantiations relative to each other starting a composite transaction including a sub transaction corresponding to each database of the plurality of databases the respective sub transaction including a set of database commands applying each sub transaction to its corresponding database and determining whether each applied sub transaction has successfully completed. When each sub transaction is determined to have successfully completed the transient object is persisted in the plurality of databases.

It is to be understood that the following disclosure provides many different embodiments or examples for implementing different features of the present disclosure. Some embodiments may be practiced without some or all of these specific details. Specific examples of modules and arrangements are described below to simplify the present disclosure. These are of course merely examples and are not intended to be limiting.

The disclosure provides a software level mechanism that provides high availability for a persistence layer e.g. Java Persistence Application Programming Interface JPA implementation coupled to non high availability database storage.

In an embodiment a system for providing high availability to an application includes a plurality of databases. Databases in the plurality of databases are isolated instantiations relative to each other. The system also includes a persistence layer that receives a request including a transient entity to persist. The persistence layer generates based on the request one or more sets of database commands that is specific to a database of the plurality of databases and that manipulates the database. The system further includes a plurality of application servers that deploy a high availability application. The high availability application creates the transient entity and sends the request to the persistence layer. The system also includes a high availability layer that is an intermediary between the persistence layer and the plurality of databases. The high availability layer includes a transaction manager and an execution engine. The transaction manager starts a composite transaction including a sub transaction corresponding to each database of the plurality of databases and determines whether each applied sub transaction has successfully completed. When each sub transaction is determined to have successfully completed the transaction manager sends to the persistence layer a message indicating successful completion of the composite transaction. A sub transaction includes a set of database commands. The execution engine applies each sub transaction to its corresponding database. When a particular database successfully completes a sub transaction the particular database sends a confirmation of successful completion of the sub transaction.

Computing device may execute a high availability HA application that is written in a high level programming language. In an example HA application is written in an object oriented programming language that defines classes. A data object may be a self contained entity that has state and behavior and represents an instance of a class. The data object s state may be described as its fields and properties and the data object s behavior may be described by its methods. HA application may include code that creates objects of a class and an object of a particular class may expose methods and properties defined by that class. HA application executing on computing device may instantiate a data object.

An entity is a data object that lives in memory and persistently in a database. An entity has the ability to be mapped to a database and may be concrete or abstract and may support inheritance and relationships. In an example a data object instantiated by HA application is a transient entity that may be persisted in plurality of databases . Each database of plurality of databases may be considered an active database in which to persist data. Transient entity is accessible by HA application which may read or modify transient entity . The state of transient entity may include one or more behaviors and one or more methods and is not stored in a database. HA application may desire to save the state of transient entity such that it is persistent and is retrievable at a later point in time.

Computing device includes a persistence layer and a high availability layer that work together to provide high availability to HA application and to persist transient entity in plurality of databases . HA application may use persistence layer as a persistent storage service. In an example to save the state of transient entity HA application may send to persistence layer a request to persist the state of transient entity . The request includes the state of transient entity .

Persistence layer receives from HA application the request to persist transient entity . The request may cause a new persistent entity to be stored in each database of plurality of databases and or may cause an existing entity in each database of plurality of databases to be modified or deleted. Each database of plurality of databases may be considered an active database in which to persist data. A database that is not in plurality of databases may be considered to be an inactive database. An inactive database is not used to persist data because for example it is considered unsafe to store data in.

Persistence layer and high availability layer may cooperate to persist transient entity in plurality of databases . Persistence layer may pass the request onto high availability layer for processing and to coordinate the storage of transient entity in plurality of databases . High availability layer may be an intermediary between persistence layer and plurality of databases . In an example HA application desires to write data through persistence layer which is above high availability layer . In an embodiment high availability layer is implemented at the software level which is above the database level. High availability layer may behave as one data source from the perspective of persistence layer . For example persistence layer may communicate with high availability layer which then communicates with plurality of databases . High availability layer ensures that the same data are persisted to plurality of databases and are consistent. Databases of plurality of databases may be on separate physical servers.

High availability layer may write data in parallel to plurality of databases and synchronize the writing of data to multiple databases within a single composite transaction. High availability layer may control the transactions of multiple databases. Writing data in parallel to plurality of databases may be transparent to HA application . After data is written to plurality of databases the data across the databases coupled to HA application are consistent. Data are consistent in all configured databases because the modifications are executed on all databases and coordinated within the composite transaction. The data are stored in multiple places and accessible via multiple databases at a time. This may be in contrast to other high availability solutions that have data stored in one place and multiple instances of a database that are reading the same data stored in the same database. High availability layer may provide functionality that enables data to be written in parallel to databases and provide high availability to application while providing high availability for an application at a lower price and with less complexity.

In an example persistence layer generates based on the request one or more sets of database commands that is specific to a database of plurality of databases . The set of commands manipulates the database by inserting and or modifying an entity in each database of plurality of databases . Databases in plurality of databases may be relational databases. Accordingly when transient entity is stored in plurality of databases persistence layer bridges the gap between the object model presentation of transient entity and the relational model of the databases. As such persistence layer may perform an object to relational mapping ORM by mapping the state of transient entity to each relational database made of tables containing rows and columns.

High availability layer may use this functionality of persistence layer to obtain one or more sets of database commands that is specific to each of the databases of the plurality of databases and manage the one or more sets of database commands. The set of database commands can be a set of Standard Query Language SQL commands. In an example high availability layer wraps up the one or more generated sets of commands transforms them into concrete SQL commands for concrete databases and coordinates execution of them on multiple data sources in parallel. In an example high availability layer sends a request to persistence layer to generate the one or more sets of database commands. In such an example HA application may invoke an API of persistence layer . In another example responsive to receiving from the application the request to persist an entity persistence layer generates the one or more sets of database commands and passes the one or more generated sets of database commands to high availability layer .

High availability layer includes a transaction manager and an execution engine . In an embodiment transaction manager starts a composite transaction including a sub transaction corresponding to each database of plurality of databases . A sub transaction includes a set of database commands that is specific to a database of plurality of databases . is a process flow diagram illustrating the processing of a composite transaction according to an embodiment. Composite transaction includes a sub transaction that corresponds to database A a sub transaction that corresponds to database B and a sub transaction that corresponds to database C. Each database of plurality of databases represents a resource in composite transaction and transaction manager coordinates composite transaction . Within each sub transaction a set of commands within that sub transaction is executed against its corresponding database. The result of composite transaction is eventually communicated to persistence layer .

The one or more generated sets are concurrently executed on separate database systems. In an example plurality of databases includes homogenous clusters of database servers. For example in persistence layer generates a set of database commands that is specific to database A and is specific to database C. As such the same set of database commands is generated for each of these databases. In another example plurality of databases includes hybrid clusters of database servers. Each of the hybrid clusters of database servers may have a different set of database commands depending on the database vendor. For example in persistence layer generates at least two different sets of commands that are specific to databases of plurality of databases . In particular persistence layer generates set of database commands that is specific to databases A and C and also generates a set of database commands that is specific to database B. Set of database commands is different from set of database commands .

Transaction manager coordinates concurrent execution of the one or more sets of database commands against plurality of databases . In particular transaction manager coordinates concurrent execution of sub transactions and . To provide high availability to HA application it is desirable to provide high availability for plurality of databases . In an example databases A B and C in plurality of databases are isolated instantiations relative to each other. Databases that are isolated instantiations relative to each other may refer to databases that do not share memory. Plurality of databases may be non high availability databases. Accordingly special hardware may be unnecessary in such an embodiment that creates HA application .

An example of unnecessary special hardware is a shared storage such as a storage area network SAN which is a conventional way to provide high availability to an application. A SAN is a high performance dedicated network used primarily to provide fast and reliable communication between computers and storage devices in a shared storage networking environment. The SAN also enables a storage device to communicate with another storage device. Software solutions at the database level however are complex and expensive. For example shared storage is typically very expensive.

In an example transaction manager synchronizes execution of one or more sets of SQL commands to multiple databases. In accordance with the coordinated concurrent execution execution engine may apply each sub transaction to its corresponding database which executes the respective sub transaction. In an example two databases concurrently execute their respective sub transactions when execution of the sub transactions has some overlap in time. In an example databases A and B concurrently execute their respective sub transactions when a time period in which database A executes sub transaction overlaps with a time period in which database B executes sub transaction . In another example databases A and B concurrently execute their respective sub transactions when database A starts execution of sub transaction and stops before completion database B start execution of sub transaction and stops before completion and database B resumes execution of sub transaction . The set of commands may modify plurality of databases by inserting an entity into each database of plurality of databases modifying an entity in each database of plurality of databases or deleting an entity from each database of plurality of databases . The set of commands may also retrieve an entity from a database of plurality of databases .

Each execution has its own sub transaction synchronized with composite transaction . Transaction manager may determine whether each applied sub transaction has successfully completed. When a particular database successfully completes a sub transaction the particular database may send to transaction manager a confirmation of successful completion of the sub transaction. Accordingly for each successfully completed sub transaction transaction manager may receive a confirmation of successful completion of the respective sub transaction. For example databases A and C may have successfully executed their respective sub transactions and may send to transaction manager messages and respectively. Messages and include an OK message that indicates to transaction manager that the executions of sub transactions and were successful.

Transaction manager may have a timeout period in which transaction manager accepts a confirmation from a database. In an example when a confirmation of successful completion of a particular sub transaction is received before a timeout period has elapsed transaction manager may determine that the particular sub transaction has been successfully completed. When the confirmation of successful completion of the particular sub transaction is not received before the timeout period has elapsed transaction manager may determine that the particular sub transaction has not been successfully completed. Each execution may have its own sub transaction synchronized with composite transaction and defined timeout for the operation.

When each sub transaction is determined to have successfully completed transaction manager may send to persistence layer a message indicating successful completion of the composite transaction. Responsive to the message indicating successful completion of the composite transaction persistence layer may commit the composite transaction. After persistence layer receives the message indicating successful completion of the composite transaction from high availability layer persistence layer may communicate to HA application that the data was written safely. After the commit of the composite transaction the transient entity is persisted to the plurality of databases and is a persistent entity in plurality of databases . Accordingly each database of plurality of databases that successfully completes a sub transaction stores a result of the sub transaction e.g. the state of transient entity as persistent entity . In this example the data written into each database of the plurality of databases is the same.

Each database of plurality of databases may contain the same data but are not connected. In such an example the databases of plurality of databases may be isolated instantiations relative to each other and do not communicate with each other. If persistence layer subsequently receives a request associated with persistent entity persistence layer may generate based on the request one or more sets of database commands associated with persistent entity . In an example execution of the one or more generated sets of database commands against plurality of databases cause the retrieval of persistent entity from a database of plurality of databases . Further persistence layer may load balance read only database operations across all used databases potentially resulting in increased overall performance of HA application .

In another example execution of the one or more generated sets of database commands against plurality of databases may cause persistent entity to be modified in each database of plurality of databases . In another example execution of the one or more generated sets of database commands against plurality of databases may cause persistent entity to be deleted from each database of plurality of databases .

In contrast when each sub transaction is determined to have not successfully completed all of the databases of plurality of databases do not persist the state of transient entity . Transaction manager identifies the one or more failed sub transactions. In the example illustrated in database B does not send to transaction manager a confirmation of successful completion of sub transaction . As such transaction manager may identify sub transaction as a failed sub transaction. For each failed sub transaction transaction manager may remove the failed sub transaction from the composite transaction. Accordingly the failed sub transaction has no effect on composite transaction and remaining sub transactions may continue to execute.

For each failed sub transaction transaction manager may remove from plurality of databases a database corresponding to the failed sub transaction. A database may be considered inactive when it does not return to transaction manager a confirmation of successful completion of the sub transaction within the timeout period. Any inactive databases are removed from plurality of databases . Accordingly transaction manager may remove database B from plurality of databases . As such databases A and C may store the state of transient entity but database B may not store the state of transient entity . Persistence layer may continue with the remaining databases still remaining in plurality of databases and log that database B is inactive. The outage of database B may be unnoticed by HA application and does not influence it.

Even if one or more databases of plurality of databases fails to execute its respective sub transaction as long as plurality of databases has at least one database after the removal of the one or more inactive databases transaction manager sends to persistence layer a message indicating successful completion of the composite transaction. Responsive to the message indicating successful completion of the composite transaction persistence layer may commit the composite transaction. In a subsequent request to persist an entity high availability layer may persist the state of the entity only to databases A and C which are the only databases in plurality of databases . If however plurality of databases has no active databases remaining after the removal of the one or more inactive databases an exception of persistence layer is generated and composite transaction is marked as rollback only. Accordingly each of the sub transactions is rolled back.

In an example persistence layer includes a Java Persistence Application Programming Interface JPA implementation. is a block diagram illustrating a persistence layer that includes a JPA implementation according to an embodiment. In an example Hibernate is the JPA provider. Trademarks are the property of their respective owners.

JPA implementation includes a session factory and a session . Session may be created by instantiating a new session via session factory . Session may start when HA application begins executing on computing device and end when HA application is shut down. JPA implementation also includes a transaction factory and a transaction . Transaction may be created by instantiating a new session via transaction factory . In an example transaction is a composite transaction e.g. composite transaction . JPA implementation also includes a connection factory to establish a connection to databases of plurality of databases .

High availability layer may implement high availability for JPA at the software level. JPA implementation may be one logical unit and HA application may have access to internal APIs e.g. session factory transaction factory connection factory of JPA implementation . High availability layer includes a Java Database Connectivity JDBC Java Naming and Directory Interface JNDI and Java Transaction API JTA . JDBC is a standard for communicating with databases and provides a set of programming interfaces to manipulate plurality of databases . If a database server returns a JDBC exception e.g. related to data integrity all sub transactions are marked as rollback only. This situation may also cause composite transaction and all other sub transactions to be marked as rollback only. JNDI provides a standard API to reach objects from and write objects to directories. JNDI may perform data lookups in the databases. JTA defines a set of interfaces for HA application to demarcate transactions boundaries. JTA may have control over the sub transactions that are executed against their applicable databases. Additionally the translation to a proper JDBC relative to a specific database may be performed by JTA .

The Java Persistence Query Language JPQL enables retrieval of data with an object oriented query language. For example JPQL may take a particular language and create one or more sets of SQL commands for concrete and connected databases. Special hardware may be unnecessary in the embodiment illustrated in to provide high availability to an application . Rather all databases that are certified for the particular JPA provider may be used to provide high availability for HA application with the databases. High availability layer may work with any database that is supported by the JPA implementation.

JPA is a Java specification for accessing persisting and managing data between Java entities classes and a relational database. JPA is a standard industry approach for Object to Relational Mapping ORM in the Java Industry. This disclosure provides techniques in which it is unnecessary to have any special hardware database configuration or a special version of a JDBC driver. Rather embodiments of the disclosure may work with all certified databases for a concrete JPA implementation. JPA may be configured as a persistent storage with a high availability feature database that is certified for a particular JPA provider. There is no need for expensive hardware special database configurations or re certification of the configured database with high availability mode.

As discussed above and further emphasized here are merely examples which should not unduly limit the scope of the claims. For example it should be understood that one or more components may be combined with another component. In an example transaction manager and execution engine are combined into one component. It should also be understood that a component may be separated into more than one component.

Additionally high availability layer may be coupled to persistence layer in a variety of ways. In the example illustrated in high availability layer is incorporated into persistence layer . In such an example high availability layer may be an extension of persistence layer and implemented directly into persistence layer . Persistence layer may execute on an application server and provide additional value for it because persistence layer provides high availability for an application out of the box. There is no need for additional software or hardware to achieve high availability at persistence layer .

In another example persistence layer and high availability layer execute on different computing devices and communicate over a network. In such an example persistence layer may generate one or more sets of commands and send the one or more generated sets of commands to high availability layer . Additionally high availability layer may invoke APIs at persistence layer over a network.

Method includes blocks . In a block a request including a transient entity to persist is received. In an example persistence layer receives a request including transient entity to persist. In a block one or more sets of database commands that is specific to a database of a plurality of databases and that manipulates the database is generated based on the request the databases in the plurality of databases being isolated instantiations relative to each other. In an example persistence layer generates based on the request one or more sets of database commands that is specific to a database of plurality of databases and that manipulates the database the databases in plurality of databases being isolated instantiations relative to each other.

In a block a composite transaction including a sub transaction corresponding to each database of the plurality of databases is started the respective sub transaction including a set of database commands. In an example high availability layer starts a composite transaction including a sub transaction corresponding to each database of plurality of databases the respective sub transaction including a set of database commands. In a block each sub transaction is applied to its corresponding database where when a particular database successfully completes a sub transaction the particular database sends a confirmation of successful completion of the sub transaction. In an example execution engine applies each sub transaction to its corresponding database where when a particular database successfully completes a sub transaction the particular database sends a confirmation of successful completion of the sub transaction.

In a block it is determined whether each applied sub transaction has successfully completed where when each sub transaction is determined to have successfully completed the transient object is persisted in the plurality of databases. In an example transaction manager determines whether each applied sub transaction has successfully completed where when each sub transaction is determined to have successfully completed transient object is persisted in plurality of databases .

It is also understood that additional processes may be inserted before during or after blocks discussed above. It is also understood that one or more of the blocks of method described herein may be omitted combined or performed in a different sequence as desired.

Computer system includes a bus or other communication mechanism for communicating information data signals and information between various components of computer system . Components include an input output I O component that processes a user action such as selecting keys from a keypad keyboard selecting one or more buttons or links etc. and sends a corresponding signal to bus . I O component may also include an output component such as a display and an input control such as a cursor control such as a keyboard keypad mouse etc. . An optional audio input output component may also be included to allow a user to use voice for inputting information by converting audio signals into information signals. Audio I O component may allow the user to hear audio. A transceiver or network interface transmits and receives signals between computer system and other devices via a communication link to a network. In an embodiment the transmission is wireless although other transmission mediums and methods may also be suitable. A processor which may be a micro controller digital signal processor DSP or other processing component processes these various signals such as for display on computer system or transmission to other devices via communication link . Processor may also control transmission of information such as cookies or IP addresses to other devices.

Components of computer system also include a system memory component e.g. RAM a static storage component e.g. ROM and or a disk drive . Computer system performs specific operations by processor and other components by executing one or more sequences of instructions contained in system memory component . Logic may be encoded in a computer readable medium which may refer to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. In various implementations non volatile media includes optical or magnetic disks or solid state drives volatile media includes dynamic memory such as system memory component and transmission media includes coaxial cables copper wire and fiber optics including wires that include bus . In an embodiment the logic is encoded in non transitory computer readable medium. In an example transmission media may take the form of acoustic or light waves such as those generated during radio wave optical and infrared data communications.

Some common forms of computer readable media include for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EEPROM FLASH EEPROM any other memory chip or cartridge or any other medium from which a computer is adapted to read.

In various embodiments of the present disclosure execution of instruction sequences to practice the present disclosure may be performed by computer system . In various other embodiments of the present disclosure a plurality of computer systems coupled by communication link to the network e.g. such as a LAN WLAN PTSN and or various other wired or wireless networks including telecommunications mobile and cellular phone networks may perform instruction sequences to practice the present disclosure in coordination with one another.

Where applicable various embodiments provided by the present disclosure may be implemented using hardware software or combinations of hardware and software. Also where applicable the various hardware components and or software components set forth herein may be combined into composite components including software hardware and or both without departing from the spirit of the present disclosure. Where applicable the various hardware components and or software components set forth herein may be separated into sub components including software hardware or both without departing from the spirit of the present disclosure. In addition where applicable it is contemplated that software components may be implemented as hardware components and vice versa.

Application software in accordance with the present disclosure may be stored on one or more computer readable mediums. It is also contemplated that the application software identified herein may be implemented using one or more specific purpose computers and or computer systems networked and or otherwise. Where applicable the ordering of various blocks described herein may be changed combined into composite blocks and or separated into sub blocks to provide features described herein.

The foregoing disclosure is not intended to limit the present disclosure to the precise forms or particular fields of use disclosed. As such it is contemplated that various alternate embodiments and or modifications to the present disclosure whether explicitly described or implied herein are possible in light of the disclosure. Changes may be made in form and detail without departing from the scope of the present disclosure. Thus the present disclosure is limited only by the claims.

