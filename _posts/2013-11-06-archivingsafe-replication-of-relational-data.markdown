---

title: Archivingâ€”safe replication of relational data
abstract: A computer-implemented method for archiving information includes: executing a first application in a first process; determining that the first application is an archiving application configured to archive information stored in a transactional system; assigning, based on the determination, an archiving mode to the first process; receiving, from the first process and after assigning the archiving mode, a request to delete information; and processing the request to delete information according to the archiving mode.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08868511&OS=08868511&RS=08868511
owner: SAP AG
number: 08868511
owner_city: Walldorf
owner_country: DE
publication_date: 20131106
---
This application claims priority under 35 USC 120 to U.S. patent application Ser. No. 13 240 816 filed on Sep. 22 2011 the entire contents of which are hereby incorporated by reference.

A transactional system such as an ERP Enterprise Resource Planning system can use a relational or other type of database. Such a system can be referred to as an OLTP On Line Transactional Processing system. An OLTP system can be used to store and manage data produced from everyday business tasks of an organization. Occasionally such as on a periodic basis data stored in an OLTP system can be archived to an archiving system. An OLAP On Line Analytical Processing system can be used to analyze data received from one or more OLTP systems. An OLAP system can be used for activities such as planning problem solving and decision support. Data in an OLAP system can be de normalized in contrast to data in an OLTP system which can be highly normalized.

In a first aspect a computer implemented method for archiving information includes executing a first application in a first process determining that the first application is an archiving application configured to archive information stored in a transactional system assigning based on the determination an archiving mode to the first process receiving from the first process and after assigning the archiving mode a request to delete information and processing the request to delete information according to the archiving mode.

The method can be implemented using a computer program product tangibly embodied in a computer readable storage device the computer program product including instructions that when executed by a processor perform the method.

Implementations can include any or all of the following features. Determining that the first application is an archiving application comprises detecting a call to open an archive. Determining that the first application is an archiving application comprises detecting a particular database connection.

The transactional system is configured to perform an archiving process before a replication process and processing the request to delete information includes converting the request to delete information to a new request comprising a copy request for the information and a delete request for the information creating an information copy from the information according to the copy request and deleting the information according to the delete request. The information is deleted from the transactional system and the information copy is provided to an analysis system. The information copy is provided to the transactional system and a replication system subsequently provides the information copy to the analysis system. The method further includes using by an analysis application the information copy provided to the analysis system. The new request includes a delete into request which includes in one database command the copy request and the delete request. The method further includes executing a second application in a second process the second process having a non archiving mode assigned receiving from the second process before completion of the first process and after the determination another request to delete other information and performing the other request to delete the other information without converting the other request into separate copy and delete requests.

The transactional system is configured to perform the archiving process after the replication process and processing the request to delete information includes deleting information from the transactional system and not deleting information from an analysis system. The method further includes executing a second application in a second process the second process having a non archiving mode assigned receiving from the second process before completion of the first process and after the determination another request to delete other information and performing the other request to delete the other information including 1 identifying information in the analysis system that corresponds to the other information 2 deleting the identified information from the analysis system and 3 deleting the other information from the transactional system.

In a second aspect a computer implemented method for archiving information includes executing a first application in a first process of a computer system executing a second application in a second process of the computer system determining that the first application is an archiving application configured to archive information stored in a transactional component of the computer system assigning based on the determination that the first application is an archiving application an archiving mode to the first process determining that the second application is not an archiving application assigning based on the determination that the second application is not an archiving application a non archiving mode to the second process receiving from the first process a first request to delete first information receiving from the second process a second request to delete second information determining whether the computer system is configured to perform an archiving process before a replication process in response to determining that the computer system is configured to perform the archiving process before the replication process processing the first request to delete the first information including 1 converting the request to delete the first information to a new request comprising a copy request for the first information and a delete request for the first information 2 creating an information copy from the first information according to the copy request and 3 deleting the first information according to the delete request and processing the second request to delete the second information including deleting the second information from the transactional component in response to determining that the computer system is configured to perform the archiving process after the replication process processing the first request to delete the first information including deleting the first information from the transactional component without deleting corresponding information from an analysis system and processing the second request to delete the second information including 1 identifying information in the analysis system that corresponds to the second information 2 deleting the identified information from the analysis system and 3 deleting the second information from the transactional component.

Implementations can include any or all of the following features. Determining that the first application is an archiving application includes detecting a call to open an archive. Determining that the first application is an archiving application includes detecting a particular database connection.

In a third aspect a system includes at least one processor and a computer program product tangibly embodied in a computer readable storage device and comprising instructions that when executed by the processor cause the system to perform a method comprising executing a first application in a first process determining that the first application is an archiving application configured to archive information stored in a transactional system assigning based on the determination an archiving mode to the first process receiving from the first process and after assigning the archiving mode a request to delete information and processing the request to delete information according to the archiving mode.

Implementations can include any or all of the following features. The transactional system is configured to perform an archiving process before a replication process and processing the request to delete information includes converting the request to delete information to a new request comprising a copy request for the information and a delete request for the information creating an information copy from the information according to the copy request and deleting the information according to the delete request. The method further includes executing a second application in a second process the second process having a non archiving mode assigned receiving from the second process before completion of the first process and after the determination another request to delete other information and performing the other request to delete the other information without converting the other request to the new request.

Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. Analysis applications can be enabled to analyze information that has been archived from a transactional database. Analysis applications can access information that has been archived from the transactional database even if a replication system used to copy information from the transactional database to the analysis system does not have access to the archived information. A request to delete information can be converted to a new request without modifying the source code of the archiving application that includes the request to delete information.

The details of one or more implementations are set forth in the accompanying drawings and the description below. Other features and advantages will be apparent from the description and drawings and from the claims.

The transactional application s can submit database commands to a database abstraction layer included in a database layer of the transactional system . The database abstraction layer can provide an abstract interface to the transactional database . That is the transactional applications can issue commands in a database neutral format to the database abstraction layer according to the abstract interface. The database abstraction layer can convert the database neutral commands into native database commands that are compatible with the type of the transactional database that is currently configured for the transactional system . A native database layer can perform the native database commands on the transactional database .

The organization can use an analysis system to analyze information received from one or more sources for example the transactional system . The analytical processing can be performed in the analysis system rather than in the transactional system for example to offload analysis processing from the transactional system or other system resources. A replication system can be used to copy information from the transactional database to the analysis system for example. The analysis system can include one or more analysis applications which can for example analyze information stored in memory or in an analysis database . The analysis database can for example be used for logging transactions performed against the data in the memory to store one or more backups of the memory and or to restore information to the memory .

The organization using the system can at one or more times such as periodically archive information from the transactional database to an archiving database included in an archiving system . For example archiving applications and can each be designed and adapted to archive information from one or more of the transactional applications and or from one or more particular business objects. The archiving applications and can use an archiving API Application Programming Interface to perform operations for example an archiving write phase and an archiving delete phase. The archiving write phase can include copying information from the transactional database to the archiving database . The archiving delete phase can include deleting information written to the archiving database from the transactional database . In some implementations more or fewer archiving applications can be used.

The transactional applications can access information from the archiving database as well as from the transactional database . That is the information in the archiving database is logically present to the transactional applications although accessing the information from the archiving database may take more time as compared to accessing information from the transactional database . In contrast information in the archiving database may not be logically present to or accessible from the replication system .

For example the replication system can be configured to use a table based replication approach to copy data from the transactional database to the analysis system . In such a configuration the replication system can access information from tables included in the transactional database but not information included in the archiving database . Therefore the replication system might not copy to the analysis system information archived to the archiving database . As a result analysis performed using the analysis applications may be incomplete or inaccurate.

In some implementations the transactional system is configured to perform replication before archiving. In some implementations on the other hand the transactional system is configured to perform archiving before replication. For implementations where archiving is performed before replication the source code of the archiving applications and can be designed or modified to convert each request to delete information that occurs during an archiving delete phase to one or more new requests for example a copy request and a delete request. During execution of the copy request data to be deleted from the transactional database can be copied to the analysis system or as another example can be copied to a location that is accessible to the replication system so that the replication system can copy the information to the analysis system when executing a replication process. During execution of the delete request information can be deleted from the transactional database .

However several problems can occur with an approach of modifying source code of the archiving applications and . For example source code may not be available for every archiving application. As another example requests to delete information may not be visible in the source code of the archiving application or such as if a request to delete information is included somewhere other than the top of a function call stack. As yet another example it may be costly to modify the source code of every archiving application as many archiving applications can exist and be used even within a single organization.

Another approach can be used to copy data to be archived to the archiving system to the analysis system for implementations where the transactional system is configured to perform archiving before replication. For example rather than modify source code of the archiving applications and a process layer can be used to determine that the archiving application or is an archiving application rather than a transactional application or some other type of application. The process layer can assign an archiving mode to the archiving application or based on determining that the archiving application or is an archiving application. The process layer can determine that the archiving application or is an archiving application for example by detecting from a process executing the archiving application or e.g. a process or respectively a call to an interface defined in the archiving API to open an archive for deletion. For a process e.g. the process or the process that is in the archiving mode the process layer can convert each request to delete information received from the process to a new request that includes a copy request for the information e.g. to copy information to the analysis system or to copy information to a location that is accessible to the replication system and a delete request for the information e.g. to delete information from the transactional database . By contrast when a non archiving application sends a request to delete information such a non archive request may not be converted based on the archiving mode not having been assigned or such a request may instead be converted in a different way to name just two examples. In some implementations one or more modes other than archiving and non archiving can exist and processing of requests to delete information may be performed based on the one or more such modes.

Each of the processes and can be bound to a particular archiving application e.g. the archiving application or respectively . Accordingly the archiving mode can be assigned to the process or for the duration of the process or . For processes not in the archiving mode the process layer can be configured to not convert requests to delete information. For example a process can be associated with the transactional application and the transactional application can include a request to delete information where the context of the request to delete information is not archiving but is a transactional context in which deletions should result in permanent deletion of data from the transactional database without archiving to the archiving database . For such a process not in the archiving mode the process layer does not copy information to the analysis system based on the request to delete information. f

As mentioned above in some implementations the transactional system is configured to perform replication before archiving. In such implementations the replication system can be configured to replicate transactional data from the transactional database to the analysis database such as in response to transactional data being added to the transactional database by the transactional applications . The process layer or another component can be configured to delete information from the transactional database and to also identify corresponding information in the analysis database and to delete the identified information from the analysis database upon receiving a request to delete information from a process associated with the transactional application . That is in response to a request to permanently delete information from the transactional system corresponding transactional information that had been previously replicated to the analysis system can be identified and deleted from the analysis system .

The process layer may also be configured to delete information from the transactional system but to not delete e.g. to inhibit a deletion of corresponding information from the analysis system when a request to delete information in the context of archiving is received. For example upon receiving a request to delete information from the process or the process that is associated with the archiving application or the archiving application respectively the process layer can delete the information from the transactional database without deleting corresponding information from the analysis database . Corresponding information is not deleted from the analysis database since the request to delete information in the context of archiving is not a request to permanently delete information but rather can be a request to delete information from the transactional database that has been written e.g. in an archive write operation to the archiving database .

Each of the transactional system the analysis system the replication system and the archiving system can communicate with one or more of the others for example over a network . The network can be for example the Internet or some other public or private wired or wireless network. In some implementations the archiving system can be installed on the same physical machine s as or be included within the transactional system to name just a few examples. Similarly although the replication system is shown as communicating with the transactional system over the network in some implementations the archiving system can be co installed with or included in the transactional system .

The commands can be executed by a process running in a process layer . For illustration the present example shows arrows that visually associate the commands and to corresponding time points on a timeline . The timeline represents performance of the process associated with the archiving application in the process layer . The time points and correspond to three separate executions of the delete command which result from three respective iterations of the iteration construct.

A timeline represents performance of a process associated with the transactional application in the process layer . For purposes of illustration the transactional application is here an application that is not considered an archiving application in contrast to say the archiving application . The transactional application includes commands . The command signals a start of processing of the transactional application . The command selects information from a transactional database e.g. the transactional database . The command is a delete command which deletes information from the transactional database. The command commits database changes made by the transactional application . The command ends the transactional application . Arrows here visually associate the commands and with corresponding time points on the timeline .

As discussed above the process layer can convert for processes in an archiving mode each request to delete information into a copy request and a delete request where the copy request copies information to be deleted from the transactional database to an analysis system. For example as indicated by an indicator the process layer can assign an archiving mode to the process executing the archiving application based on detecting that the process is requesting to execute the command to open an archive. The command can for example be a command that is only included in archiving applications and can therefore be an indication that an application is an archiving application.

The process layer for a process in the archiving mode can convert each request to delete information associated with the process for the duration of the process. Conversion of a request to delete information can prevent the request from being submitted to a database abstraction layer . Rather in place of the request to delete information a copy request and a delete request can be submitted to the database abstraction layer . For example for the execution of the delete command which is associated with the archiving application and with the time point the process layer can convert the delete command to a copy command and a delete command represented by time points and on a timeline . The timeline represents execution of database commands by the database abstraction layer for the process associated with the archiving application . Similarly for the execution of the delete command associated with the time point the process layer can submit a copy request and a delete request represented by time points and respectively to the database abstraction layer and for the execution of the delete command associated with the time point the process layer can submit a copy request and a delete request represented by time points and respectively to the database abstraction layer .

For a process that is not in archiving mode the process layer can submit requests to delete information unchanged to the database abstraction layer . For example a time point on a timeline represents execution in the database abstraction layer of the delete command associated with the transactional application after the process layer submits the delete command unconverted to the database abstraction layer . The timeline represents execution of database commands for the process associated with the transactional application .

As shown the timeline partially overlaps with the timeline . The timelines and illustrate an example of the process layer receiving multiple requests to delete information from multiple processes with some processes being in the archiving mode and some processes being in a non archiving mode. The process layer can convert one or more requests to delete information received from processes in the archiving mode and can perform one or more requests to delete information received from processes in the non archiving mode without converting such requests.

As shown for example by time points and it can be the process layer that converts a request to delete information into a copy request and a delete request and submits the copy request and the delete request to the database abstraction layer . As another example the conversion of the request to delete information can be performed by the database abstraction layer . For example the process layer can indicate to the database abstraction layer that the request to delete information should be converted by including a particular database connection qualifier when providing the request to delete information to the database abstraction layer . As yet another example the conversion of the request to delete information can be performed by a native database layer e.g. the native database layer .

The request to delete information can be in some implementations of the form DELETE FROM table WHERE condition . The request to delete information can be converted in some implementations to a copy request having the form SELECT FROM table INTO target WHERE condition and to a delete request. In some implementations the delete request can be of the same form as the request to delete information e.g. DELETE FROM table WHERE condition with the delete request occurring after the copy request . In some implementations the request to delete information can be converted into a delete into request which has the form DELETE FROM table WHERE condition INTO target where target can be for example a table in a particular database a file a memory buffer or some other destination. In some implementations the delete into request can be a SQL Structured Query Language extension.

The commands and can be executed by a process running in a process layer . For illustration the present example shows arrows and that visually associate the commands and to corresponding time points and on a timeline . The timeline represents performance of the process associated with the archiving application in the process layer . The time points and correspond to three separate executions of the delete command which result from three respective iterations of an iteration construct.

A timeline represents performance of a process associated with the transactional application in the process layer . For purposes of illustration the transactional application is here an application that is not considered an archiving application in contrast to say the archiving application . The transactional application includes commands that correspond to the commands discussed above with respect to including a delete command which deletes information from the transactional database. An arrow here visually associates the command with a corresponding time point on the timeline .

As discussed above the process layer can be configured when the system is configured to perform an archiving process after a replication process to delete information from a transactional database and to also identify corresponding information in an analysis database and to delete the identified information from the analysis database upon receiving a request to delete information from a process that is associated with the transactional application e.g. a process that is not in the archiving mode . For example in place of the request to delete information a first delete request and a second delete request can be submitted to a database abstraction layer where the first delete request is a request to delete information from the transactional system and the second delete request is a request to delete corresponding information from the analysis system. For example for the execution of the delete command the process layer can convert the delete command to a first delete command and a second delete command represented by time points and on a timeline respectively. The timeline represents execution of database commands by the database abstraction layer for the process associated with the transactional application .

For a process that is in the archiving mode the process layer can for example submit requests to delete information to the database abstraction layer without converting the request to delete information to another request which includes deleting corresponding information from the analysis system. Or as another example the process layer can inhibit or block a request to delete information from the analysis system. For example time points and on a timeline can represent three executions in the database abstraction layer of the delete command associated with the archiving application after the process layer submits the delete command unconverted to the database abstraction layer . The timeline represents execution of database commands for the process associated with the archiving application . As another example indicators and can represent the process layer blocking or inhibiting requests to delete information from the analysis system that correspond to the requests to delete information that are associated with the time points and respectively e.g. where the time points and are associated with the delete command that is requested by the process that is associated with the archiving application and that is in the archiving mode .

In step it is determined that the first application is an archiving application configured to archive information stored in a transactional system. Determining that the first application is an archiving application can include for example detecting a call to open an archive. For example with respect to the process layer can determine that the process calls an interface in the API to open an archive associated with the archiving system to archive information stored in the transactional database . As another example determining that the first application is an archiving application can include detecting a particular database connection. For example the database abstraction layer can receive a database command from the process which includes a connection qualifier which indicates that the process is executing an archiving application e.g. the archiving application .

In step an archiving mode is assigned to the first process based on the determination. For example with respect to the process layer assigns the archiving mode to a process which is executing the archiving application . In some implementations if the first process creates one or more child processes each of the child processes can inherit the archiving mode.

In step a request to delete information is received from the first process after assigning the archiving mode. For example with respect to as indicated by the time points and on the timeline the process layer receives requests to delete information e.g. corresponding to the delete command from the process executing the archiving application .

In step the request to delete information is processed according to the archiving mode. For example in some implementations the transactional system is configured to perform an archiving process before a replication process and processing the request to delete information includes converting the request to delete information to a new request that includes a copy request for the information and a delete request for the information creating an information copy from the information according to the copy request and deleting the information according to the delete request. For example the process layer converts requests to delete information received from the process executing the archiving application based on the process being in the archiving mode. The process layer converts the request to delete information associated with the time point to a new request that includes a copy request and a delete request as illustrated by the time points and respectively.

As other examples the database abstraction layer or a native database layer e.g. the native database layer can convert the request to delete information to the new request and can perform the copy request and the delete request. Performing the copy request can result in the information copy being provided to an analysis system e.g. the analysis system of . In some implementations the copy request triggers a replication system e.g. the replication system to provide the information copy to the analysis system. Performing the delete request can result in information being deleted from the transactional system e.g. from the transactional database . The copy request can be performed before the delete request is committed.

After receiving the information copy an analysis application included in the analysis system can use the information copy for analysis. For example with respect to the analysis application s included in the analysis system can use the information copy. In some implementations the information copy is provided to the transactional system rather than to the analysis system and may be stored for example in a persistent buffer of the transactional database . A replication system e.g. the replication system can subsequently and asynchronously provide the information copy to the analysis system.

In some implementations a second application is executed in a second process where the second process has a non archiving mode assigned. Another request to delete other information can be received from the second process before completion of the first process and after determining that the first process is an archiving application. The other request to delete the other information can be processed without converting the other request to the new request. In other words in some implementations in response to a request to delete information received from a process that is in a non archiving mode the request to delete information is not converted and the request to delete information is therefore performed e.g. resulting in deletion of information from the transactional system . For example with respect to the process layer does not convert requests to delete information received from a process executing the transactional application e.g. a request corresponding to the time point since that process is not in the archiving mode.

In some implementations the transactional system is configured to perform an archiving process after a replication process and processing a request to delete information received from a process that is in the non archiving mode includes identifying information included in an analysis system which corresponds to the information specified in the delete request and deleting the identified information from the analysis system. For example with respect to the time point corresponds to the delete command that is associated with the transactional application . An associated time point corresponds to a request to delete information from an analysis system that corresponds to the information that is requested to be deleted by the command . In implementations where the transactional system is configured to perform an archiving process after a replication process processing a request to delete information received from a process in an archiving mode includes deleting information from the transactional system without deleting corresponding information from the analysis system

In step a first application is executed in a first process of a computer system. For example with respect to the archiving application may be executed in the process . In step a second application is executed in a second process of the computer system. For example with respect to the transactional application may be executed by a process not shown in in the process layer .

In step it is determined that the first application is an archiving application configured to archive information stored in a transactional component of the computer system. For example with respect to the process layer may determine that the archiving application is an archiving application configured to archive information stored in the transactional database . In step an archiving mode is assigned to the first process based on the determination that the first application is an archiving application. For example with respect to the process layer can assign an archiving mode to the process based on the determination that the archiving application is an archiving application.

In step it is determined that the second application is not an archiving application. For example with respect to the process layer may determine that the transactional application is not an archiving application. In step a non archiving mode is assigned to the second process based on the determination that the second application is not an archiving application. For example with respect to the process layer can assign a non archiving mode to the process that is executing the transactional application based on the determination that the transactional application is not an archiving application.

In step a first request to delete first information is received from the first process. For example with respect to as indicated by the time points and on the timeline the process layer receives requests to delete information e.g. corresponding to the delete command from the process executing the archiving application . As another example with respect to as indicated by the time points and on the timeline the process layer receives requests to delete information e.g. corresponding to the delete command from the process executing the archiving application .

In step a second request to delete second information is received from the second process. For example with respect to as indicated by the time point on the timeline the process layer receives a request to delete information e.g. corresponding to the delete command from the process executing the transactional application . As another example with respect to as indicated by the time point on the timeline the process layer receives a request to delete information e.g. corresponding to the delete command from the process executing the transactional application .

In step it is determined whether the computer system is configured to perform an archiving process before a replication process. For example with respect to the process layer or another component can read a configuration setting such as from a file a database or some other storage area or can send an inquiry message to another system or component e.g. the replication system the archiving system and can receive a response that indicates whether the system is configured to perform an archiving process before a replication process.

If it is determined that the computer system is configured to perform the archiving process before the replication process in step the first request to delete the first information is processed including 1 converting the request to delete the first information to a new request that includes a copy request for the first information and a delete request for the first information 2 creating an information copy from the first information according to the copy request and 3 deleting the first information according to the delete request. For example with respect to the process layer converts requests to delete information received from the process executing the archiving application based on the process being in the archiving mode. For example the process layer converts the request to delete information associated with the time point to a new request that includes a copy request and a delete request as illustrated by the time points and respectively.

In step the second request to delete the second information is processed including deleting the second information from the transactional component. For example with respect to processing a request to delete information that is received from the transactional application can include deleting information from the transactional database .

If it is determined e.g. in step that the computer system is configured to perform the archiving process after the replication process in step the first request to delete the first information is processed including deleting the first information from the transactional component without deleting corresponding information from an analysis system. For example with respect to time points and on a timeline can represent three executions in the database abstraction layer of the delete command associated with the archiving application after the process layer submits the delete command unconverted to the database abstraction layer e.g. the delete command can delete information from the transactional component but does not delete information from the analysis system . As another example indicators and can represent the process layer blocking or inhibiting requests to delete information from the analysis system that correspond to the requests to delete information that are associated with the time points and respectively e.g. where the time points and are associated with the delete command that is requested by the process that is associated with the archiving application and that is in the archiving mode .

In step the second request to delete the second information is processed including 1 identifying information in the analysis system that corresponds to the second information 2 deleting the identified information from the analysis system and 3 deleting the second information from the transactional component. For example with respect to in place of the request to delete information represented by the delete command a first delete request and a second delete request can be submitted to a database abstraction layer where the first delete request is a request to delete information from the transactional system and the second delete request is a request to delete corresponding information from the analysis system. For example for the execution of the delete command the process layer can convert the delete command to a first delete command and a second delete command represented by time points and on a timeline respectively. The timeline represents execution of database commands by the database abstraction layer for the process associated with the transactional application .

The memory stores information within the system . In some implementations the memory is a computer readable medium. The memory is a volatile memory unit in some implementations and is a non volatile memory unit in other implementations.

The storage device is capable of providing mass storage for the system . In one implementation the storage device is a computer readable medium. In various different implementations the storage device may be a floppy disk device a hard disk device an optical disk device or a tape device.

The input output device provides input output operations for the system . In one implementation the input output device includes a keyboard and or pointing device. In another implementation the input output device includes a display unit for displaying graphical user interfaces.

The features described can be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The apparatus can be implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device for execution by a programmable processor and method steps can be performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features can be implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that can be used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features can be implemented on a computer having a display device such as a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device such as a mouse or a trackball by which the user can provide input to the computer.

The features can be implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system can be connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN a WAN and the computers and networks forming the Internet.

The computer system can include clients and servers. A client and server are generally remote from each other and typically interact through a network such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of this disclosure. Accordingly other implementations are within the scope of the following claims.

