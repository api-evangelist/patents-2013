---

title: Managing failure of applications in a distributed environment
abstract: A mechanism for managing failure of applications in a distributed environment is disclosed. A method includes detecting failure in an application node among a plurality of application nodes when the application node does not respond to a status message. The method further includes routing, by enterprise application nexus application processing interface (EANA) module, a first lock message to the failed application node and ancestors' nodes of the failed application node when the failed application node is an aware application node.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09183069&OS=09183069&RS=09183069
owner: Red Hat, Inc.
number: 09183069
owner_city: Raleigh
owner_country: US
publication_date: 20130314
---
The embodiments of the disclosure relate generally to a computer system and more specifically relate to systems and methods for managing failure of applications in a distributed environment.

Typically in a distributed application environment when an application fails to operate the dependent layers of the application may also fail to operate. The dependent layers are one or more applications dependent on the application and on each other for execution. This causes inconsistencies in back end storage timeouts erroneous responses for requests and even failure of other parts of the distributed application.

Currently many failure detection systems exist that detect failure in the distributed application system. One such known system is exception handling which supports error detection by invoking exception when the application is in failure. An exception is an event that occurs during the execution of a program that disrupts the normal flow of instructions. The exception may be processed with handler which notifies other nodes in a distributed application. However since the exception is application specific it is not guaranteed that the exception may be invoked all the time. Also when the failure occurs in hardware exception may not be invoked and as such may not be detected by other nodes. Further different applications use various timeouts which complicates their unified usage.

Embodiments of the disclosure are directed to a method and system for managing failure of applications in a distributed environment in a computer system.

In one embodiment a distributed environment includes a tree structure of applications. A tree structure may be defined recursively locally as a collection of nodes starting at a root node where each node is an application together with a list of nodes the children with the constraints that no node is duplicated. Each node in the tree has zero or more child nodes which are below it in the tree by convention trees are drawn growing downwards . A node that has a child is called the child s parent node or ancestor node . The topmost node in a tree is called the root node. Being the topmost node the root node does not have a parent. It is the node at which algorithms on the tree begin since as a data structure one can only pass from parents to children. Below the root node may be one or more nodes known as the child s parent node or ancestor node. Below the ancestor node maybe a child node and so on.

In one embodiment an enterprise application nexus application programming interface API EANA executed by the computer system sends status messages to the application nodes. The EANA may detect failure in the application node when the application node does not respond to the status message. The EANA may send a lock message to the failed application node and ancestors nodes of the failed application node when the failed application node is an aware application node. In one embodiment the ancestors nodes are nodes that have one or more child nodes. So for example the failed application node maybe a child node and the ancestors nodes have the failed application node as the child node. In one embodiment the aware application node is an application node configured to receive the lock message and an unlock message directly from the EANA.

In one embodiment the lock message is a set of instructions to suspend operation of the failed application node and the ancestors nodes of the failed application node. The unlock message may be a set of instructions to resume operations of the failed application node and the ancestors nodes of the failed application node.

The EANA may send the status message to the failed aware application node. The EANA may send the unlock message to the failed aware application node and the ancestors nodes of the failed aware application node when the failed aware application node responds to the status message.

In one embodiment the EANA may send a lock message to an EANA proxy when the failed application node is an unaware application node. The unaware application node may be an application node not capable of receiving the lock message and the unlock messages directly from the EANA module.

In one embodiment the EANA proxy blocks all messages to and from the failed unaware application node and the ancestors nodes of the failed unaware application node upon receipt of the lock message. The EANA may send the status message to the failed unaware application node. The EANA may send the unlock message to the EANA proxy when the failed unaware application node responds to the status message. In one embodiment the EANA proxy passes all message to and from the failed unaware application node and the ancestors nodes of the failed unaware application node upon receipt of the unlock message.

A method of one embodiment of the disclosure includes sending a status message to applications nodes in a distributed application. The method also includes detecting a failure in the application node when the application node does not respond to the status message. The method further includes routing by enterprise application nexus application programming interface EANA module a lock message to the failed application node and ancestors nodes of the failed application node when the failed application node is an aware application node.

The aware application node is the application node capable of receiving the first lock and a first unlock message directly from the EANA module. The first lock message includes instructions to a first suspend operation of the application node and ancestors nodes of the application node. The first unlock message includes instructions to a first resume operation of the application node and the ancestors nodes of the application node.

A prior solution for managing failure of applications in a distributed environment includes exception handling. This solution presents several disadvantages. One of the disadvantages is that it is application specific and does not guarantee that exception may be invoked all the time. Another disadvantage is that the. since the exception is application specific it is not guaranteed that the exception may be invoked all the time. Further disadvantage is that different applications use various timeouts which complicates their unified usage. Embodiments of the disclosure overcome these disadvantages by utilizing a central point which is not dependent to implementation of the nodes so it can detect any failure including the failures in the hardware. Embodiments of the disclosure also overcome these disadvantages by coordinating distributed application with lock and unlock messages.

In one embodiment the server device is a computing device with a hardware platform including one or more processing devices and data storage . In one embodiment the data storage comprises one or more hardware or software devices. Examples of data storage may include but are not limited to random access memory RAM non volatile storage memory e.g. Flash EEPROM solid state drives SSD etc. magnetic storage memory e.g. one or more hard drives and optical memory e.g. CDs DVD BlueRay drives etc. . In addition hardware platform may include additional hardware devices such as network interface cards NICs sound or video adaptors photo video cameras printer devices keyboards displays or any other suitable device intended to be coupled to a computer system.

In one embodiment the applications may be any computer executable program capable of communicating with the server device . Some of these applications may include but are not limited to web applications Microsoft applications an Eclipse integrated development environment IDE and or other applications.

In one embodiment the applications in a distributed environment include a tree structure of applications . A tree structure can be defined recursively locally as a collection of nodes starting at a root node where each node is an application together with a list of nodes the children with the constraints that no node is duplicated. Each node in the tree has zero or more child nodes which are below it in the tree by convention trees are drawn growing downwards . A node that has a child is called the child s parent node or ancestor node . The topmost node in a tree is called the root node. Being the topmost node the root node does not have a parent. It is the node at which algorithms on the tree begin since as a data structure one can only pass from parents to children. Below the root node may be one or more nodes known as the child s parent node or ancestor node. Below the ancestor node maybe a child node and so on.

In one embodiment the application nodes are idle. In one embodiment the application nodes are processing an operation in the distributed environment. Such operation may include but is not limited to accept messages send messages and process messages. In one embodiment the OS receives the request from a client. The request may include the operation to be processed by the application nodes in the distributed environment. The client may be a user of the distributed application environment . The client may be another device communicably coupled to the distributed application environment . In one embodiment the request is received at a root node of the distributed environment. The root node may distribute the request to the child nodes. The OS may also include a graphical user interface GUI configured to provide an interface to the client for submitting the request and receiving the processed request.

An example of a tree structure hereinafter tree of application nodes is illustrated in . In one embodiment application nodes are the same as the applications depicted in . As shown the root node of the tree structure may include a web service WS application having three child application nodes P1 P2 and P3 . The application node P1 may also include two child application nodes P4 and P5 . The application node P3 may also include two child application nodes file transfer protocol FTP and database1 DB1 . The application node P4 may also include two child application nodes external web service Ext. WS and database2 DB2 . The application node P5 may further include one child application node database3 DB3 .

Referring back to the server device also includes an EANA module to manage failure of enterprise applications in the distributed application environment . In one embodiment the EANA module monitors the application nodes . For example the EANA module may send ping messages directly to application nodes in order to monitor the nodes . A ping message may be a message requesting status of the application.

In one embodiment the EANA module may detect a failure in the application node . The EANA module may detect failure in the application node when the application node does not respond to the ping message. In one embodiment the EANA module detects failure in the application node when the application node does not respond to at least a specific number of the ping messages. As an example the specific number of ping messages may be one three five seven and so on. In one embodiment the specific number of ping messages may be configured by an administrator. In one embodiment the EANA module detects failure in the application node when the application node does not respond to the ping message in a pre determined time. As an example the pre determined time may be ten seconds thirty seconds one minute one hour and so on. In one embodiment the pre determined time may be configured by an administrator.

In one embodiment the EANA module may send a first lock message directly to the application node and all the ancestors nodes of the application node when the failure is detected in the application node . In one embodiment the ancestors nodes are nodes that have one or more child nodes. So for example the application node maybe a child node and the ancestors nodes have the application node as the child node. In one embodiment the first lock message is a set of instructions for a first suspend operation of the application node and all of the ancestors nodes of the application node . As discussed above the ancestors nodes The first suspend operation may include but is not limited to instructions to store messages that are waiting for processing discard messages in queues stop accepting any message and stop sending any message.

The server further includes an EANA proxy module to manage failure of enterprise applications in distributed environment in the computer system. In one embodiment the EANA proxy module functions as an intermediary between a node and the EANA module . The EANA proxy module may be a wrapper around the node that does not have EANA module such that the nodes send and receive messages only through EANA proxy module . In one embodiment the EANA module may send a second lock message to the EANA proxy module when the failure is detected in the application node . In one embodiment the EANA proxy module does not communicate with the application node . The EANA proxy module may consume the second lock message from the EANA module . The EANA proxy module may block all messages to and from the unaware application node . In one embodiment the second lock message is a set of instructions to a second suspend operation of the application node and all the ancestors nodes of the application node . The second suspend operation may include but is not limited to instructions to stop accepting any message and stop sending any message.

In one embodiment the EANA module may resend the ping message to the failed application node . The EANA module may detect that the application node is no longer a failed application node when the application node responds to the ping message. In one embodiment the EANA module may send a first unlock message directly to the application node and all the ancestors nodes of the application node when the application node is no longer a failed application node. In one embodiment a first unlock message is a set of instructions for a first resume operation of the application node and all the ancestors nodes of the application node . The first resume operation may include but is not limited to instructions to load all the stored messages into appropriate queue start accepting messages and start sending messages.

In one embodiment the EANA module may send a second unlock message to the EANA proxy module when the application node is no longer a failed application node. In one embodiment the EANA proxy module may consume the second unlock message from the EANA module . The EANA proxy module may pass all the messages to and from the unaware application node . In one embodiment a second unlock message is a set of instructions to a second resume operation of the application node and all the ancestors nodes of the application node . The second resume operation may include but is not limited to instructions to load all the stored messages into appropriate queue start accepting messages and start sending messages.

In one embodiment each application node in the tree is either an aware application node or an unaware application node . The aware application node may be the application node that is configured to receive the first lock and first unlock messages directly from the EANA module . In one embodiment the aware application node includes EANA module which may process lock and unlock messages. As an example the P1 P2 P3 P4 and P5 are aware application nodes

In one embodiment the unaware application node is an application node that is not configured to receive the first lock message and the first unlock message from the EANA module . In one embodiment the EANA proxy module wraps the unaware application node . In one embodiment the EANA proxy module may consume the second lock message from the EANA module . The EANA proxy module may block all messages to and from the unaware application node . In one embodiment the EANA proxy module may consume the second unlock message from the EANA module . The EANA proxy module may pass all the messages to and from the unaware application node . As an example FTP Ext. WS DB1 DB2 and DB3 are unaware application nodes

In one embodiment the EANA module monitors both the aware application nodes and the unaware application nodes . In one embodiment the EANA module sends ping messages directly to both the aware application nodes and the unaware applications nodes . As discussed above a ping message is a message requesting status of the application.

In one embodiment the EANA module may detect a failure in the aware application nodes . The EANA module may detect failure in the aware application node when the aware application node does not respond to the ping message.

In one embodiment the EANA module may send the first lock message to the failed aware application node and all the ancestors nodes of the failed aware application node . As discussed above a first lock message is as set of instructions to a first suspend operation of the application node and all the ancestors nodes of the application node . Also as discussed above the first suspend operation may include but is not limited to store messages that are waiting for processing discard messages in queues stop accepting any message and stop sending any message.

In one embodiment the EANA module may resend the ping message to the failed aware application node . The EANA module may detect that the aware application node is no longer a failed aware application node when the aware application node responds to the ping message. In one embodiment the EANA module may send the first unlock messages to the aware application node and all the ancestors nodes of the aware application node . As discussed above a first unlock message may be a set of instructions to a first resume operations of the application node and all the ancestors nodes of the application node . The first resume operation may include but is not limited to instructions to load all the stored messages into appropriate queue start accepting messages and start sending messages.

In one embodiment the EANA module may detect failure in the unaware application node . The EANA module may detect failure in the unaware application node when the unaware application node does not respond to the ping message.

In one embodiment the EANA module may send the second lock message to the EANA proxy module when the failure is detected in the unaware application node . In one embodiment the EANA proxy module blocks all the messages sent to and received by the failed unaware application node and all the ancestors nodes of the aware application node . As discussed above a second lock message is a set of instructions to a second suspend operation of the application and all the ancestors nodes of the application node . Also as discussed above the second suspend operation may include but is not limited to instructions to stop accepting any message and stop sending any message

In one embodiment the EANA module may resend the ping message to the failed unaware application node . The EANA module may detect that the failed unaware application node is no longer a failed unaware application node when the unaware application node responds to the ping message. In one embodiment the EANA module may send the second unlock message to the EANA proxy module . In one embodiment the EANA proxy module passes all the messages send to and received by the failed unaware application node and all the ancestors nodes of the aware application node . As discussed above a second unlock message may be a set of instructions to a second resume operations of the application node and all the ancestors nodes of the application node . Also as discussed above the second resume operation may include but is not limited to start accepting messages and start sending messages.

Method begins at block where the EANA module sends a ping message to all the application nodes as illustrated for example in . As discussed above a ping message is a message requesting status of the application. In one embodiment the application nodes are idle. In one embodiment the application nodes are processing an operation in the distributed environment. Such operation may include but is not limited to accept messages send messages and process messages.

At block the EANA module determines whether the application node responds to the ping message. The EANA module repeats block when at block it is determined that the application node responded to the ping message. At block the EANA module detects a failure in the application node when at block it is determined that the application node did not respond to the ping message. As discussed above the EANA module may detect failure in the application node when the application node does not respond to at least a specific number of the ping messages. Also as discussed above the EANA module may detect failure in the application node when the application node does not respond to the ping message in a pre determined time.

At block the EANA module determines whether the failed application node is an aware application node . As discussed above the aware application node may be part of the distributed enterprise application that receives the first lock message and the first unlock message directly from the EANA module . As discussed above the first lock message is a set of instructions to a first suspend operation of the application node and all the ancestors nodes of the application node . Also as discussed above the first unlock message may be a set of instructions to a first resume operations of the application node and all the ancestors nodes of the application node .

At block the EANA module sends the first lock message directly to the failed application aware node and all the ancestors nodes of the failed aware application node when it is determined at block that the failed application node is an aware application node. As an example the failed application aware node is P4 as illustrated in . As such the first lock message is received by P4 and the ancestors nodes of the P4 which are P1 and WS as illustrated in . As discussed above the first lock message is a set of instructions to a first suspend operation of the application and all the ancestors nodes of the application node . The first suspend operation may include but is not limited to store messages that are waiting for processing discard messages in queues stop accepting any message and stop sending any message.

At block the EANA module sends the ping message to the failed aware application node . At block the EANA module determines whether the failed aware application node responds to the ping message. The EANA module repeats block when the failed aware application node does not respond to the ping message.

At block the EANA module sends the first unlock message directly to the failed aware application node and all the ancestors nodes of the application node when the failed aware application responds to the ping message. As an example the first unlock message will be received by the P4 and its ancestors nodes P1 and WS as illustrated in . In one embodiment the first unlock message is a set of instructions to a first resume operations of the application node and all the ancestors nodes of the application node . The first resume operation may include but is not limited to instructions to load all the stored messages into appropriate queue start accepting messages and start sending messages. Subsequently the EANA module repeats block .

At block the EANA module sends a lock message to the EANA proxy module when it is determined at block that the failed application node is not an aware application node. In one embodiment the failed application node is an unaware application node . As discussed above the unaware application node is part of the distributed enterprise application that does not receive the lock and unlock message directly from the EANA module .

At block the EANA proxy module blocks all messages to and from the failed unaware application node and all the ancestors nodes of the failed unaware application node . As such the failed unaware application node and all its ancestors nodes fail to receive and send messages. As an example the failed unaware application node DB2 and the ancestors nodes of the DB which are P4 P1 and WS as illustrated in fail to receive and send messages. As discussed above the first lock message is a set of instructions to a first suspend operation of the application and all the ancestors nodes of the application node . The first suspend operation may include but is not limited to instructions to stop accepting any message and stop sending any message.

At block the EANA module sends the ping message to the failed unaware application node . At block the EANA module determines whether the failed unaware application node responds to the ping message. The EANA module repeats block when the failed unaware application node does not respond to the ping message.

At block the EANA module sends the second unlock message to the EANA proxy module when the failed unaware application node responds to the ping message. At block the EANA proxy module passes all messages to and from to the failed unaware application node and all the ancestors nodes of the failed unaware application node . As such the failed unaware application node and all its ancestors nodes begin to receive and send messages. As an example the failed unaware application node DB2 and the ancestors nodes of the DB which are P4 P1 and WS as illustrated in begin to receive and send messages. In one embodiment the second unlock message is a set of instructions to a second resume operations of the application node and all the ancestors nodes of the application node . The second resume operation may include but is not limited to start accepting messages and start sending messages. The EANA module repeats block .

The example computer system includes a processing device a memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute enterprise application nexus application processing interface EANA logic and EANA proxy logic for performing the operations and steps discussed herein. In one embodiment EANA module and EANA proxy module are described with respect to performs the EANA and EANA proxy logic and respectively.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions e.g. EANA and EANA proxy logic embodying any one or more of the methodologies of functions described herein such as method for preventing overload of application described with respect to . The EANA and EANA proxy logic and respectively may also reside completely or at least partially within the memory and or within the processing device during execution thereof by the computer system the memory and the processing device also constituting machine accessible storage media.

The machine readable storage medium may also be used to store the EANA and EANA proxy processing logic and respectively persistently containing methods that call the above applications. While the machine readable storage medium is shown in an example embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the disclosure. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

In the foregoing description numerous details are set forth. It should be apparent however that the disclosure may be practiced without these specific details. In some instances structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the disclosure.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those well known in the data processing arts to most effectively convey the substance of their work to others well known in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not typically these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times typically for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as receiving sending routing transmitting providing displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The disclosure also relates to an apparatus for performing the operations herein. This apparatus may be constructed for the specific purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct an apparatus to perform the method steps. The structure for a variety of these systems will appear as set forth in the description below. In addition the disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

The disclosure may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the disclosure. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those well known in the art upon reading and understanding the above description. Although the disclosure has been described with reference to specific examples of embodiments it will be recognized that the disclosure is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the disclosure should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

