---

title: Commmon agent framework for network devices
abstract: Techniques are provided for automating a common framework for network devices. In one example, a network device (e.g., switch, router, etc.) is configured to resolve the handling unknown packets automatically. The network device can detect whether or not a protocol is unknown to the network device, perform a lookup, determine if a matching protocol is available for the network device, and dynamically load an appropriate protocol handler into a memory of the network device. Advantageously, the present technology provides a mechanism for flexible on-demand push of protocol information. If a new protocol is noted on the network, the network device can look up the type of packet and can use a single platform kit to dynamically load drivers and control logic for that protocol onto the network device. Likewise, other network devices in the packet's path or in the network generally can load the drivers and control logic, as needed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09100346&OS=09100346&RS=09100346
owner: CISCO TECHNOLOGY, INC.
number: 09100346
owner_city: San Jose
owner_country: US
publication_date: 20130315
---
Embodiments presented in this disclosure generally relate to computer networking and more particularly to techniques for providing a common framework for network devices e.g. switches routers etc. to share protocols for handling data packets and or data frames.

Change is constant in information technology. Computer networks and in particular network administration must adapt at the same pace. Whether network administration involves providing deep information for network analytics simplifying operational tasks or providing a platform for new services networks need to be innovation ready.

Networking hardware or networking equipment typically refers to devices which provide and manage a computer network. Typically such devices include gateways routers network bridges switches hubs and repeaters among other devices.

A network switch is a computer networking device that links network segments or network devices. The term commonly refers to a multi port network bridge that processes and routes data at the data link layer layer 2 of the Open Systems Interconnection OSI model. Switches that additionally process data at the network layer layer 3 and above are often called layer 3 switches or multilayer switches. Switches are available various network protocols or technology including Fibre Channel Asynchronous Transfer Mode InfiniBand Ethernet and others.

One inefficiency of network administration is that a network device e.g. router or switch is purchased hard coded with protocols. The only way to add new support is to install a complete new software image onto the device. In a conventional system enabling protocol discovery and classification only works for supported interfaces flows and protocols. A network administrator manually interprets the results for example to identify unknown protocols used by devices attached to the network and put in place the policies associated with those protocols allowing the networking infrastructure to process traffic sent by the attached devices. Based on an administrator evaluation of the protocol discovery results the network administrator can for example load and assign a supported protocol pack. The network administrator can also identify flows that should have custom rules. For example the network administrator can define a traffic class and policy and manually associate the traffic class and policy. Such a scheme not only limits what can be monitored but each step of the process flow requires administrator evaluation identification and implementation of flows rules and policies.

Further asymmetric protocols e.g. protocols that are routed to different endpoints via load balancing or protocols that use different upstream and downstream paths are not effectively monitor able and controllable on a switch level or a multi switch level.

An approach is provided for automating a common framework for network devices of a data center. One embodiment includes a method that automates handling of data packets frames on a network device. The method includes receiving a packet detecting for the packet a protocol that is unknown to an input interface of the network device performing a lookup of the protocol that is unknown in order to find a matching protocol handler for the packet determining if a matching protocol is available for the network device and dynamically loading an appropriate protocol handler into a memory of the network device. For the sake of simplicity in this description the term packet refers to data packets and or data frames. By convention a frame typically refers to Layer 2 data and includes both a header and a trailer whereas a packet typically refers to Layer 3 data and does not include a trailer.

Additional embodiments include without limitation a computer readable storage medium storing a program configured to perform the aforementioned method and a system having a processor and a memory storing a program configured to perform the aforementioned method.

Embodiments presented herein provide techniques for a common framework for network devices e.g. switches routers etc. share protocols for handling data packets and or data frames. Typically protocol discovery on a network device is limited. The present approach provides for network devices configured to identify an unknown protocol flow on the network and in response dynamically load a protocol handler to the network device.

The following description is presented to enable one of ordinary skill in the art to make and use the proposed techniques. Descriptions of specific embodiments and applications are provided only as examples and various modifications will be readily apparent to those skilled in the art. The general principles described herein may be applied to other embodiments and applications without departing from the scope of the disclosure. Thus the present disclosure is not to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features described herein. For purposes of clarity features relating to technical material that is known in the technical fields related to the proposed ideas have not been described in detail.

In context of this discussion a device generally includes hardware or a combination of hardware and software. A component is typically a part of a device and includes hardware or a combination of hardware and software.

The core layer includes a core network coupled to a management console which enables a network administrator to manage the data center . The core layer includes a fabric of network devices e.g. routers and or switches for high speed packet switching between multiple aggregation modules of the aggregation layer . The core layer serves as a gateway to connect other modules including for example an extranet a wide area network WAN and or an Internet edge among other modules. Links connecting the data center core layer are terminated at Layer 3 and typically use for example 10 GigE interfaces for supporting a high level of throughput performance and to meet oversubscription levels. The core layer has a high degree of redundancy and bandwidth capacity and thus is optimized for availability and performance. The core network can connect multiple aggregation layers and multiple access layers .

The aggregation layer includes network devices such as aggregation switches that are coupled to service switches in this example. An aggregation switch includes a switch that enables a high degree of high bandwidth port density capacity. Accordingly the aggregation layer is optimized for traffic distribution and link fan out capabilities to the switches of the access layer . Functionally nodes e.g. network devices in the aggregation layer typically serve as the Layer 2 Layer 3 boundary. Layer 2 is a data link layer of the Open Systems Interconnection OSI model that transfers data between network devices attached to the network and to detect and possibly correct errors that may occur in the physical layer Layer 1 . Layer 3 is a network layer of the OSI model that transfers variable length data sequences from a source host on one network to a destination host on a different network in contrast to the data link layer which connects hosts within a common network segment while maintaining the quality of service requested by the transport layer.

A service switch provides flexibility on how network services are defined and carried out on traffic within the data center . Examples of network services include without limitation security firewalls and subscriber management among other services.

The access layer includes network devices such as access switches that are couple to virtual servers in this example. The access layer connects hosts e.g. client devices to the infrastructure providing such hosts with network access typically at Layer 2 e.g. local area networks LANs and or virtual local area networks VLANs . A virtual server may include a hypervisor coupled to one or more virtual machines. The hypervisor is hardware or a combination of hardware and software that generates and runs the virtual machines. A virtual machine VM is a software implementation of a machine e.g. a computer that executes programs e.g. a loaded application like a physical machine. Virtual machines generally emulate the computer architecture and functions of a real world computer. One physical host computer and one hypervisor can run multiple virtual machines.

The data center incorporates software defined networking SDN which is an approach to building a computer network that involves separating and abstracting elements of the network. The elements include the control plane and the data plane. SDN decouples the system that makes decisions about where traffic is sent the control plane from the underlying system that forwards traffic to the selected destination the data plane . This technology simplifies networking and enables new applications such as network virtualization in which the control plane is separated from the data plane and is implemented in a software application e.g. a virtual machine of the virtual server . The architecture of the data center architecture enables a network administrator to have programmable central control of network traffic without requiring physical access to the network s hardware devices.

Network devices of the access layer are couple to compute resources and or storage resources and provide access thereto. The compute resources include one or more blade servers that are coupled to blade switches in this example. A blade server is a server computer with a modular design optimized to minimize the use of physical space and energy. The storage resources include one or more storage devices that are coupled to blade switches and access switches in this example.

Conventional networks are typically provisioned monitored and maintained by a large toolkit of protocols and techniques from command line interface CLI to Extensible Markup Language XML Simple Network Management Protocol SNMP to syslog. While powerful and effective these tools are limited. For example these tools tend to provide a fixed set of functionality. While this generally works for whatever fixed purpose a tool is used the fixed set of functionality does not allow data center operators to customize network devices to meet specific network requirements of the operator. Accordingly embodiments presented herein facilitate customization of network infrastructures by providing a common framework for network devices. The common framework enables network devices of the system to share protocols for handling data packets. So a network device that is added and or customized on the network does not have to be rigidly restricted to the fixed set of functionality of the particular network device. In addition while the network may consistently and reliably deliver vast steams of data every second few tools exist to build custom applications which analyze packets and flows in real time.

In one embodiment the single platform kit includes a toolkit that enables development automation and rapid service generation. For example the common framework allows developers to compose applications to be run on the network because a programmer can be assured network devices share a common framework. For instance the common framework includes a tool e.g. software application for a network that can observe network flows that one or more network devices do not recognize. In the aggregate the tools for the networks devices automate widespread recognition and sharing of protocols and thereby provide a rapid service for protocol recognition. The single platform kit enables the extension and configuration of the capabilities available on the network devices e.g. switches routers etc. of the data center . The single platform kit enables easier access to the data inside the data center and enables administrators to control the functionality of the data center .

Thus the single platform kit provides a common framework for network devices e.g. switches routers etc. . The common framework includes a system for equipping the network devices of the single platform kit with network based software that is unavailable on conventional network devices. Such software applications may identify an unknown protocol and load a protocol handler to a network device in response to one or more new protocols being used on the network e.g. data center .

The control device includes a parser a forwarding device an admission control device an output buffer an egress process device and a packet rewrite device . The forwarding device includes a protocol identifier component a loaded handler component and a default handler component which are discussed below with reference to . In some embodiments the control device is an application specific integrated circuit ASIC . The control device is responsible for many of the switch features such as VLAN assignment Layer 2 table lookups Layer 3 table lookups buffer allocation and time stamping. In particular for layer 2 traffic the control device is responsible for the packet forwarding decisions.

The parser device parses incoming packets extracts fields e.g. headers trailers etc. required to determine whether a given packet should be forwarded. A packet is a basic unit of communication over a digital network. A packet may also be called a datagram a segment a block a cell or a frame depending on the protocol. When data is transmitted a network device breaks down the data into similar data structures packets . A destination computer reassembles the original data chunk once the packets reach a destination. Packets may lost somewhere along the transmission are handled by higher layer protocols e.g. TCP . The packet header typically identifies a protocol specifies how the network device should handle the packet. The protocol may be in a header of a packet. The parser device then passes the parsed information to Layer 2 and or Layer 3 lookup devices.

Next the control device sends the packet to the forwarding device for a learning phase. One function of the forwarding device is to acquire a protocol defining how network device is should process packets. This learning process enables network devices of the data center to operate within a common agent framework by enabling network devices to share protocols for handling data packets and or data frames. Operations for learning the protocol of the packet are discussed below with reference to .

In some implementations the forwarding device also learns the source Media Access Control MAC address in the hardware for the given virtual local area network VLAN . Then depending on the destination MAC address lookup result the control device forwards the packet to an external lookup device e.g. a Layer 3 processing device the CPU and or all network devices of a particular VLAN. For Layer 3 the packet arrives at the external lookup device and the source IP address is looked up in the Layer 3 table. The external lookup device looks up and indexes the destination IP address in a next hop table which lists the outgoing interface of the network device and the destination MAC address. The outgoing interface provides an index in the Layer 3 interface table that supplies the source MAC address and the VLAN. Other lookup operations such as access control list ACL and network address translation NAT are also performed at this level. The packet rewrite device later uses this information to rewrite the packet after the packet has been parsed. The operations of the forwarding device can be performed in the hardware of the control device without placing undue load on the CPU .

The forwarding device passes the packet to the admission control device . The queuing replication and Data Center Transmission Control Protocol DCTCP processes occur at the admission control device . Depending on the amount of shared buffer space available the control device stores the packet in a reserved per port location the reserved per queue location or the dynamic shared space. All these spaces are part of a shared buffer. Then the control device sends the packets to a queue for scheduling. The control device makes a decision for packet replication at the output buffer . The replication occurs at the egress process device as the control device places the packets in queues for scheduling. The replication process does not replicate the packet. Instead the control device manages the packet by using a pointer in memory. During the packet rewrite process the control device generates a different header on each outgoing interface. A result is similar latency times across all the outgoing interfaces that are sending the same data.

The control device can receive traffic that the network device is not configured to handle. In response the control device can resolve the uncertainty internally and or can communicate with another network device which assist the network device in resolving the uncertainty. For example the other network device can identify the required protocol and send the protocol to the network device . Steps for resolving such uncertainty are further discussed below with reference to .

Embodiments discussed below include two specific approaches for configuring a network device e.g. router and or switch when the network device receives a packet having unknown and or unrecognizable parameters of a known protocol. A first approach is described below with reference to where the network device resolves a protocol internally via some internal lookup. A second approach is described below with reference to where a network device resolves a protocol by sending a request for help to one or more other network devices. In both approaches if the protocol can be resolved e.g. either internally or with the help of other network devices then the network device automatically reconfigures itself. Such reconfiguration does at least two things 1 resolves the local problem of the network device and 2 helps ensure consistency across all network devices that are part of the common framework.

At step the protocol identifier component receives a packet parsed by X. For example the protocol identifier receives a parsed packet from a parser device of the network device. The parser device extracts fields used decide what to do with the packet or where to forward the packet. The parser device may extract a header that identifies a protocol defining how the network device should handle the packet.

At step the protocol identifier component determines that the protocol headers of the packet received at step identify a protocol unknown to an input interface of the network device. For example the protocol identifier component may use an existing hierarchical classification system with appropriate extensions to detect an identification of a protocol.

At step each time an unknown protocol is identified in the parsed packet the protocol identifier component performs a lookup to determine if a matching protocol handler is available for the network device. In one embodiment the network device can also read Multiprotocol Label Switching MPLS tags read Virtual Extensible Local Area Network VxLAN identifiers and perform Deep Packet Inspection DPI among other operations. While most lookups are likely to occur locally on the network device the lookup can also occur off switch externally from the network device.

At step and if the protocol identifier component determines the unknown protocol matches a protocol handler in memory and the loaded handler component determines the required protocol is loaded e.g. loaded into RAM of then the method moves to a step where the network device uses the newly loaded protocol handler to perform operations on the packet. For example the network device passes the packet the pointer to the packet and or the packet flow to the appropriate protocol specific handler.

Otherwise if the protocol identifier component determines the unknown protocol does not match a protocol handler in memory and or the loaded handler component determines the required protocol is not loaded e.g. not loaded into RAM of then the network device passes packet and or a pointer to the packet to the default handler component . Accordingly the default handler component acts somewhat like a default route for a routing table except the default handler deals with packet flow control not just next hop routing.

At step the default handler component dynamically loads the appropriate protocol handler on the network device e.g. RAM of and registers any applicable routes in a component of the network device that performs routing operations and or switching operations. In some implementations the default handler component uses an application programming interface API on the network device to dynamically load and or register the appropriate protocol handler on the network device. The API of the network device is a feature of the single platform kit of . The loading is dynamic because the default handler component loads the appropriate protocol handler into memory after the network device receives the packet and during processing operations for the packet. In the method of the default handler component registers the protocol specific handler as the appropriate protocol handler for all packet flows that match particular criteria at an input filter e.g. input interface of the network device. In order to do this the default handler component may need to go through further classification of the packet or flow.

At step if the default handler component determines the dynamic load is successful then at step the network device uses the default protocol handler to perform operations on the packet. However if the default handler component determines the dynamic load is unsuccessful then at step the network device drops the packet. For example the API of the network device may not provide access to an appropriate protocol handler for the particular packet. Further the network device can communicate with other network devices to provide an opportunity for the other network devices to load the protocol handler corresponding to the matching protocol into memory of the other network devices.

At step if the default handler component determines that the default protocol handler is loaded successfully then the network device uses the default protocol handler to perform operations on the packet in step . However if the default handler component determines the default protocol handler is not loaded successfully then the default handler component passes the packet and or a pointer to the packet to the external lookup device . Alternatively network device can pass the packet and or a pointer to the packet immediately after step where the protocol identifier determines there is no matching protocol handler in the local lookup. Alternatively the network device can entirely bypass performing an internal lookup and can immediately send the packet and or a pointer to the packet to the external lookup device upon detecting an unknown protocol in the step .

At step the external lookup device performs a lookup to determine if a matching protocol handler is available at the external lookup device . At step if the external lookup device determines a matching protocol handler is available then the method moves to a step where the network device uses the protocol handler that the external lookup device makes available to the network device. However if the external lookup device determines a matching protocol handler is unavailable then the method moves to a step where the network device drops the packet.

These methods may include other steps and or details that are not discussed in this method overview. Other steps and or details described herein may be a part of the methods depending on the implementation. Persons skilled in the art will understand that any system configured to implement the method steps in any order falls within the scope of the present invention.

Embodiments discussed above allow a network device to respond to unknown frames packets or flows by learning new protocols configuring additional protocol handlers etc. A hierarchy or classification is important for asymmetric packet flows e.g. packet flows in which different packets go through different devices for reasons such as load balancing or asymmetric routing where packets flow through different routes in different directions . An external lookup service e.g. external lookup device using the single platform kit of can be configured monitor flows across multiple switches.

The location of the default handler component can vary. In the single platform kit of the default protocol handler can include an application configured to run on the network device on a blade server that is accessible to the network device or on a separate network device.

In some implementations like using default routes for a packet the default handler component can include a chain of default handlers such that each default handler in the chain can potentially provide the appropriate protocol handler for a particular packet. For example the network device can use a first default handler which attempts to perform an appropriate protocol classification and to load the appropriate protocol handlers. In one implementation the first attempted classification happens locally and then subsequent attempted classification involves accessing new handlers from another network device. The network device passes the packet and or packet flow to the next potential default handler only if the network device is unsuccessful at loading an appropriate protocol handler by using the first default handler and so on. This hierarchical approach enables asymmetric flows to be handled by a device e.g. a device including an application running on a network device that is registered as a default handler for multiple switches.

Similar to a chain of default handlers the default handler component may include nested encapsulations of default handlers. Accordingly the network device can decode the nested encapsulations of default handlers to determine if one of the nested default handlers is the appropriate handler for the particular packet.

In some implementations the default handler component is configured to register a custom protocol from a third party and to place the custom protocol in high priority in a default handler chain. All ordinary packets and flows e.g. lower priority packets and flows may go through. However the network device can identify the custom protocol and can handle the packet accordingly. Alternatively the network device can pass the packet and or pointer to the packet to a third party provided network device by using an application of the single platform kit of .

In some implementations the protocol handler is not loaded on the memory of the network device. For example the control device can be configured to handle certain packet flows completely within a controller application. The controller application can actively manage the routes and control the data flows instead of just loading a protocol handler that resides on the network device.

In some implementations a network device can dynamically load and or unload a protocol handler into memory e.g. RAM of . The network device can start with only very basic protocols loaded and then dynamically load a new protocol as a new protocol is encountered. Similarly the network device can unload a protocol that the network device has not used for a period of time. Further the network device can upgrade protocol versions. For example if a protocol version goes from a version 2.0 to a version 3.0 then the network device can automatically install the version 3.0 of the protocol handler.

In some implementations a network device is configured to instantiate an appropriate protocol handler dynamically. Instantiation is the generation of a real instance or particular realization of an abstraction or template such as a class of objects or a computer process. To instantiate is to generate such an instance by for example defining one particular variation of an object within a class giving the variation a name e.g. naming a protocol handler and locating the variation in some physical space e.g. loading a protocol handler in memory of a network device . Particularly for applications that are handled off the network device the protocol handler can be located on a virtual machine that is dynamically instantiated when a packet or flow is detected. A third party can even control such a virtual machine.

The common framework can automatically instruct a network device to load more than protocol handlers on memory of the network device. For example the common framework can automatically instruct the network device to automatically load and or unload routes and or policies as well. For instance a protocol handler that is configured to handle Session Initiation Protocol SIP setup packets can load a Real time Transport Protocol RTP handler and a Quality of Service QoS policy onto the network device and associate the network device with the expected RTP flow. The network device can unload the QoS policy when the RTP handler is unloaded.

One implementation of the present technology enables the dynamic loading of an OpenFlow controller in response to OpenFlow control packets. OpenFlow is a Layer 2 communications protocol that gives access to the forwarding plane of a network switch or router over the network. In simpler terms OpenFlow enables a path of network packets through a network of switches to be determined by software running on multiple routers minimum two routers primary and secondary . Separating the control plane from the forwarding plane allows more sophisticated traffic management than is feasible using access control lists ACLs and routing protocols. OpenFlow enables software defined networking SDN . The OpenFlow controller does not need to be on the network device itself e.g. not on the switch . Rather the OpenFlow controller can be located on a blade server of a switch allowing legacy switches to support OpenFlow without any upgrade to the operating system e.g. the Internetwork Operating System IOS available from Cisco Systems Inc. 

In some implementations a first network device can identify a packet s path flow through the network. The first network device or a network management console can communicate with other network devices along the packet s path flow and provide an opportunity for the other network devices to load the protocol that that first network device loaded. Alternatively in a broader scope the first network device or a network management console can communicate with substantially all network devices in the network not just network devices in the packet s path flow and provide an opportunity for substantially all network devices to load the protocol. Accordingly lookups and thus latency can be minimized on a grand scale throughout the network.

Advantageously the present technology provides a mechanism for flexible on demand push of protocol information. If a new protocol is noted on the network the network device e.g. switch router etc. can look up the type of packet and can use the single platform kit to dynamically load drivers and control logic for that protocol onto the network device. The approach is similar to how a personal computer PC loads a device driver on demand. Alternatively an off switch device e.g. a virtual machine can instantiate the protocol handler.

While the forgoing is directed to embodiments of the present disclosure other and further embodiments of the disclosure may be devised without departing from the basic scope thereof. For example aspects of the present disclosure may be implemented in hardware or software or in a combination of hardware and software. One embodiment of the disclosure may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored. Such computer readable storage media when carrying computer readable instructions that direct the functions of the present disclosure are embodiments of the present disclosure.

In view of the foregoing the scope of the present disclosure is determined by the claims that follow.

