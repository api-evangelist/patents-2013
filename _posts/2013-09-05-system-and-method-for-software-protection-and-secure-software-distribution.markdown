---

title: System and method for software protection and secure software distribution
abstract: The various embodiments of the present invention provide a secure software distribution and execution method. According to the method, a server receives software from service provider for downloading to a client and identifies the sections for encoding. APIs are inserted in the identified sections. A unique ID is created based on the identity of the each client to generate an encryption algorithm, decryption key and decryption algorithm. The identified sections are encrypted with the generated encryption algorithm. The encrypted application along with encryption algorithm, decryption key and decryption algorithm are downloaded to the driver of the client machine. The API makes call to the driver by sending the encrypted segment when the encrypted portion is reached during the execution of software in the client machine so that the driver decrypts the encoded portion using the received key and the decryption algorithm to enable the continuous execution of the downloaded software.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09520990&OS=09520990&RS=09520990
owner: Aventyn, Inc.
number: 09520990
owner_city: Carlsbad
owner_country: US
publication_date: 20130905
---
This application claims priority under 35 USC 120 and is a continuation of U.S. patent application Ser. No. 12 422 569 filed on Apr. 13 2009 and entitled System and Method for Software Protection and Secure Software Distribution the entirety of which is incorporated herein by reference.

The embodiments herein generally relate to software distribution system and more particularly to secure software distribution system and method for each individual user machine.

Computer software is a consumer product distributed using hardware storage devices or internet. The authenticity of the user can be verified with a unique identity provided with the software. However an unscrupulous party with access to the object code may distribute the software illegally. Unlicensed users may avail the benefits of the software and maintain anonymity resulting in huge revenue losses to the software provider.

Software piracy is rampant leading to copyright infringement. The digital environment provides substantial anonymity to the infringers. Unlicensed and copyrighted work is distributed easily over the internet. The loss incurred by software and literary copyright holders is estimated to be several billions of dollars. The infringement and prosecution of infringer is substantially high. The loss of revenue to smaller entities due to infringement has devastating economic impact.

Software providers adopt various monitoring methods to detect and control piracy. In a conventional solution the number of installations using an authentic key is limited. However this may inconvenience an authentic user from installing a licensed version of the software multiple times. The enforcement of copyright is expensive and requires extensive resources.

Hence there is a need to provide an improved and secured system and method for the distribution of software to each individual user and user machine to prevent piracy and accommodate a legitimate user.

The following presents a simplified summary of the invention in order to provide a basic understanding of some aspects of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concept of the invention in a simplified form as a prelude to the more detailed description that is presented later.

The various embodiments of the present invention provide a secure software distribution system and method to generate unique and individual algorithm for each user application to provide a very strong security solution for protecting application and data integrity. The system provides a robust security platform for software vendors and users and generates platform specific algorithms to avoid the class break scenario that is prevalent on systems implementations. The present invention creates unique platform ID and executes proprietary reconfigurable algorithm for authentication and fraud detection.

According to one embodiment of the present invention a secure software distribution and execution method is provided. According to the method a software application is received from a service provider and stored in a server for downloading to a client. The received and stored software application is coded in the server before being downloaded to the client. Then the modules of code are identified for encryption by the server. The Application Programming Interface API calls are inserted in the received software in predefined modules before being downloaded to the client from the server. Afterward the application is built and the binaries are placed in the server.

The coded application is downloaded to the client from the server based on the request. The identity data of the client is read by the server during the downloading of the coded application to the client. The identity data includes the serial number of the client s machine serial number of the hard disc used in the client s machine biometric information and other identification related information.

The algorithm for encryption decryption key and decryption algorithm are generated based on the received identity data of the client in the server. The identified modules of the software are encrypted using the generated encryption algorithm in the server. The encrypted portions of the software along with the generated decryption key and the decryption algorithm are downloaded to the driver of the client machine. The API makes the call to driver by sending the encrypted segment when the encrypted portion is reached during the execution of the software in the client machine so that the driver decrypts the encoded portion using the received key and the decryption algorithm to enable the continuous execution of the downloaded software. The API makes calls to the driver for decryption during the execution when the software execution reaches to encrypted portion.

The encryption algorithm key and decryption algorithm are unique and are different for different clients. The algorithm for encryption decryption key and decryption algorithm are generated based on the received identity data of the client in the server. The identity data includes the serial number of the client machine serial number of the hard disc used in the client machine biometric information and other identification related information. The server assigns weighting factor to each of the identification data read from the machine so that the client machine is authenticated to decode the encrypted portion even when the identification component is changed in the client. The server authenticates the client for decoding the encrypted portion of the file by comparing the sum of the weighting factors assigned to the identity data with a threshold level. The server authenticates the machine for decoding the encrypted portion of the file when the sum of the weighting factors assigned to the identity data is less than the threshold level. The machine is not authenticated and the key generation algorithm is destroyed when the sum of the weighting factors assigned to the identity data is less than the threshold level.

The key generation algorithm is designed uniquely for each client on the fly. The key generation algorithm and the decryption algorithm are run in privileged mode in cache memory. The decrypted code is destroyed after each use. The decryption algorithms used for decrypting the different encrypted files in the same application in the same client are different. The unique decryption algorithm is designed for each client on the fly when the client initiates a software download of an application or registers software that is available on a media.

According to another embodiment of the present invention a secure software distribution and execution system is provided to generate algorithm corresponding to each client system application to prevent class break scenario. According to the system a server has an application interface which is connected to a service provider or a software developer to receive store and encode software to be down loaded to the client which is connected to the server. The server identifies the modules of the software to be encrypted and inserts API calls in the identified modules.

The server has Identification Data ID reader to send commands to the client to read pluralities of identification data when the client is connected to the server for downloading an application. The identification data includes the serial number of the client machine serial number of the hard disc used in the client machine biometric information and other identification related information. The received identification data are stored in a prioritized ID index table. The unique ID generator produces a unique ID based on the received and stored ID data.

A secure data locator in the server identifies the section of the application file to be encrypted based on the inserted API calls. The secure code execution unit in the server encrypts the identified sections of the application using an encryption algorithm which is generated based on the produced unique ID. A decryptor is provided in the server to generate a decryption algorithm for decrypting the encrypted portion in the application.

The server generates an encryption algorithm decryption key and decryption algorithm based on the generated unique ID of the client. The server transmits the encoded software inserted with API calls to the client along with the encryption algorithm decryption key and decryption algorithm to the driver of the client so that the API makes the call to the driver by sending the encrypted segment and the driver decrypts the encoded portion using the received key and the decryption algorithm to enable the continuous execution of the downloaded software when the encrypted portion is reached during the execution of the software.

The API makes calls to the driver for decryption whenever the encrypted portion is reached during the execution of the software. The driver of the client contacts the server for downloading the encryption algorithm decryption key and decryption algorithm. The encryption algorithm decryption key and the decryption algorithm are downloaded to the cache memory of the client through the application downloader provided to the client from the server whenever the request for encrypted file is received at the server from the client. The ID of the client is read and compared with the unique ID sent from the server. When the read ID of the client is same as the received unique ID from the server the downloaded decryption algorithm is used to decrypt the encrypted portion. The decryption algorithm and the received code are destroyed after each use. The process is followed whenever the API calls are made to the driver of the server.

These and other aspects of the embodiments herein will be better appreciated and understood when considered in conjunction with the following description and the accompanying drawings. It should be understood however that the following descriptions while indicating preferred embodiments and numerous specific details thereof are given by way of illustration and not of limitation. Many changes and modifications may be made within the scope of the embodiments herein without departing from the spirit thereof and the embodiments herein include all such modifications.

Although specific features of the present invention are shown in some drawings and not in others. This is done for convenience only as each feature may be combined with any or all of the other features in accordance with the present invention.

The embodiments herein and the various features and advantageous details thereof are explained more fully with reference to the non limiting embodiments that are illustrated in the accompanying drawings and detailed in the following description. Descriptions of well known components and processing techniques are omitted so as to not unnecessarily obscure the embodiments herein. The examples used herein are intended merely to facilitate an understanding of ways in which the embodiments herein may be practiced and to further enable those of skill in the art to practice the embodiments herein.

The server has identification data ID reader to send commands to the client to read pluralities of identification data when the client is connected to the server for downloading an application . The identification data includes the serial number of the client machine serial number of the hard disc used in the client machine biometric information and other identification related information. The received identification data are stored in the database . The unique ID generator produces a unique ID based on the received and stored ID data. The server has an algorithm generator to create an encryption algorithm for encrypting the identified sections of the software based on the generated unique ID. The server generates an encryption algorithm decryption key and decryption algorithm based on the generated unique ID of the client . A drive generator is provided in the server to create a new driver after the encryption of the identified sections using the generated encryption algorithm. The server transmits the encoded software inserted with API calls to the client along with the encryption algorithm decryption key and decryption algorithm to the driver of the client machine .

The API makes the call to the driver of the client machine by sending the encrypted segment and the driver decrypts the encoded portion using the received key and the decryption algorithm to enable the continuous execution of the downloaded software when the encrypted portion is reached during the execution of the software in the client machine .

A secure data locator in the client identifies the section of the application file to be decrypted based on the inserted API calls during the execution of the application in the client machine . The secure code execution unit in the client executes the code in the application by decrypting the identified sections of the application using a decryption algorithm which is generated based on the produced unique ID. A decryptor is provided in the client to generate a decryption algorithm for decrypting the encrypted portion in the application .

The API makes calls to the driver for decryption whenever the encrypted portion is reached during the execution of the software . The driver of the client machine contacts the server for downloading the encryption algorithm decryption key and decryption algorithm. The encryption algorithm decryption key and the decryption algorithm are downloaded to the cache memory of the user machine through the application interface provided in the client machine from the server whenever the request for encrypted file is received at the server from the client machine. The ID of the client is read using an ID reader . The read ID data are stored in a prioritized ID index table . A unique ID is generated by a unique ID generator provided in the client and compared with the unique ID sent from the server . When the read ID of the client is same as the received unique ID from the server the downloaded decryption algorithm is used to decrypt the encrypted portion. The decryption algorithm and the received code are destroyed after each use. The process is followed whenever the API calls are made to the driver of the client .

The cache memory is locked to the server using a cache locker to download the encryption algorithm decryption key and the decryption algorithm. The client has a prioritized ID index table to store the various identity data of the client such as the serial number of the client machine serial number of the hard disc used in the client machine along with the respective weights assigned to each ID data so that the client is identified even when one of the identity is missing. A key generator is provided in the client to run a key generation algorithm to produce a key for decrypting the secure code. The decrypted code is executed using a secure code execution unit . The key generation algorithm and the decryption algorithm are destroyed after each use.

The coded application is downloaded to the client machine from the server based on the request . The identity data of the client is read by the server during the downloading of the coded application to the user . The identity data includes the serial number of the client machine serial number of the hard disc used in the client machine biometric and identification related information.

The algorithm for encryption decryption key and decryption algorithm are generated based on the received identity data of the client in the server . The identified sections of the software are encrypted using the generated encryption algorithm in the server . A custom API is built and a custom driver is built in the software to be downloaded to the client. An install image is created . The encrypted portions of the software along with the generated decryption key and the decryption algorithm are downloaded to the driver of the client machine . The downloaded application is run on the client . A program control identifies the encrypted code during the execution of the application in the client . The API makes the call to driver by sending the encrypted segment when the encrypted portion is reached during the execution of the software in the client machine . The driver decrypts the encoded portion using the received key and the decryption algorithm to enable the continuous execution of the downloaded software . When the encoded portion is decrypted successfully the code is run in the kernel or run in a privileged mode in the cache . When the encoded portion is not decrypted successfully the application is failed to execute as expected .

The API makes calls to the driver for decryption whenever the encrypted portion is reached during the execution of the software. The encryption algorithm key and decryption algorithm are unique and are different for different clients. The algorithm for encryption decryption key and decryption algorithm are generated based on the received identity data of the client in the server. The server assigns weighting factor to each of the identification data read from the client so that the client is authenticated to decode the encrypted portion even when the hard disc is changed in the client machine. The server authenticates the client for decoding the encrypted portion of the file by comparing the sum of the weighting factors assigned to the identity data with a threshold level. The server authenticates the client for decoding the encrypted portion of the file when the sum of the weighting factors assigned to the identity data is less than the threshold level. The client is not authenticated and the key generation algorithm is destroyed when the sum of the weighting factors assigned to the identity data is less than the threshold level.

The key generation algorithm is designed uniquely for each client. The key generation algorithm and the decryption algorithm are run in privileged mode in cache memory . Then the encrypted portion is decrypted and the code is executed continuously . The decrypted code is destroyed after each use. The decryption algorithms used for decrypting the different encrypted files in the same application in the same machine are different. The unique decryption algorithm is designed for each client when the client machine initiates a software download of an application or registers software that is available on a media.

The key generation algorithm is designed uniquely for each client. The key generation algorithm is run in privileged mode in cache memory to generate a key . The generated key is used for decrypting the secure code . The code is executed securely after decrypting the secure code . The decrypted code is destroyed after each use. The encryptor algorithms used for decrypting the different encrypted files in the same application in the same client are different. The unique decryption algorithm is designed for each client when the client machine initiates a software download of an application or registers software that is available on a media.

Thus the various embodiments of the present invention provide a secure software distribution system and method to generate unique and individual algorithm for each client to provide a very strong security solution for protecting application and data integrity. The system provides a proven security on a platform to software vendors and generates platform specific algorithms to avoid the class break scenario that is prevalent on systems implementations. The present invention creates unique platform ID and executes proprietary reconfigurable algorithm for authentication and fraud detection.

The foregoing description of the specific embodiments will so fully reveal the general nature of the embodiments herein that others can by applying current knowledge readily modify and or adapt for various applications such specific embodiments without departing from the generic concept and therefore such adaptations and modifications should and are intended to be comprehended within the meaning and range of equivalents of the disclosed embodiments. It is to be understood that the phraseology or terminology employed herein is for the purpose of description and not of limitation. Therefore while the embodiments herein have been described in terms of preferred embodiments those skilled in the art will recognize that the embodiments herein can be practiced with modification within the spirit and scope of the appended claims.

It is also to be understood that the following claims are intended to cover all of the generic and specific features of the present invention described herein and all the statements of the scope of the invention which as a matter of language might be s aid to fall there between.

