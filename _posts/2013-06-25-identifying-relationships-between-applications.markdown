---

title: Identifying relationships between applications
abstract: In various embodiments, static, dynamic, and behavioral analysis may be performed on an application. A set of software libraries or code fragments employed by the application may be determined. A set of device resources employed by the application may be determined. An application fingerprint is generated for the application. The application fingerprint encodes identifiers for the set of software libraries or code fragments and identifiers for the set of device resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09454565&OS=09454565&RS=09454565
owner: Amazon Technologies, Inc.
number: 09454565
owner_city: Seattle
owner_country: US
publication_date: 20130625
---
An application marketplace may offer a multitude of different applications such as mobile applications. For example the applications may include games email applications social networking applications mapping applications imaging applications music playing applications shopping applications and so on. Developers may wish to compare the developer s applications against other application that might be related to the developer s applications.

The present disclosure relates to generating profiles of applications referred to herein as application fingerprinting. An application fingerprint uniquely identifies an application based on for example what application programming interfaces API it uses what software libraries or code fragments it uses what hardware devices it accesses what device resources it employs typical resource consumption patterns and or other characteristics. In some embodiments the application fingerprint may also identify typical user behavior relative to the application. The application fingerprints may have many uses including application search application categorization defect detection and so on. Accordingly in an application marketplace the application fingerprint of many applications that are potentially related to one another in some way can be generated. Applications that are offered via a curated application marketplace are often categorized into categories that have a sometimes rough and tenuous relationship with the content of the application. Accordingly embodiments of the present disclosure can analyze the application fingerprints of applications that are categorized together within an application marketplace and identify applications that are more closely related to one another based upon an analysis of the respective application fingerprints of the applications.

With reference to illustrated is an application analyzer . More specifically the application analyzer illustrates three applications and for which corresponding application fingerprints and are generated. The applications are representative of the multitude of applications that may be offered by an application marketplace. In this non limiting example the application corresponds to a music player and the application corresponds to another music player that may have varying and or additional features relative to the application . Application comprises yet another application that may be categorized with the application and within an application marketplace but that has varying features relative to applications and . Each of the applications has its own respective application fingerprint that can function to distinguish one application from another and or to identify similarities between applications . Accordingly in the non limiting example of each of the application fingerprints identifies characteristics relating to device hardware used software libraries or code fragments used and resource consumption. In other examples additional or different characteristics may be represented by the application fingerprints .

Here the application fingerprint indicates that the application uses the accelerometer and touchscreen of the device and the software libraries named Graphics Effects 1.3b and LibAudioDecode 2.0. Also the application is associated with high processor and battery usage. The application fingerprint indicates that the application uses a sound device the touchscreen of the device as well as radio and network capabilities of the device. The application fingerprint also indicates that the application uses the software libraries or recognizable code fragments named GraphicsEffects 1.3b and LibAudioDecode 2.0 and SocialConnect 0.1a. The application is associated with medium processor and battery usage. The application fingerprint indicates that the application uses different software libraries including GameGraphics 1.9 and Physics 1.1. The application is also associated with medium processor and battery usage.

Accordingly embodiments of the disclosure can analyze the application fingerprint of a given application in order to identify related applications within a category in an application marketplace. For example a category in an application marketplace may comprise games but such a categorization fails to provide a user and or developer with enough refinement if either is seeking to locate and or compare the application with others that are similar. Additionally embodiments of the disclosure can analyze the application fingerprint of a given application as well as usage data gathered about the application and generate reporting data as well as recommendations with respect to an application s usage with respect to various aspects of the application. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

Turning now to shown is a networked environment according to various embodiments. The networked environment includes a computing environment and one or more clients in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that may be arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include a fingerprint generation service a metric collection service an application analyzer an application marketplace system and other applications services processes systems engines or functionality not discussed in detail herein. The fingerprint generation service is executed to generate application fingerprints for applications .

Various techniques relating to application fingerprinting are described in U.S. Patent Application entitled APPLICATION FINGERPRINTING filed Jun. 25 2013 under Ser. No. 13 926 607 U.S. Patent Application entitled APPLICATION MONETIZATION BASED ON APPLICATION AND LIFESTYLE filed Jun. 25 2013 under Ser. No. 13 926 656 U.S. Patent Application entitled DEVELOPING VERSIONS OF APPLICATIONS BASED ON APPLICATION FINGERPRINTING filed Jun. 25 2013 under Ser. No. 13 926 683 U.S. Patent Application entitled APPLICATION RECOMMENDATIONS BASED ON APPLICATION AND LIFESTYLE FINGERPRINTING filed Jun. 25 2013 under Ser. No. 13 926 574 U.S. Patent Application entitled RECOMMENDING IMPROVEMENTS TO AND CORRECTING DEFECTS WITHIN APPLICATIONS filed Jun. 25 2013 under Ser. No. 13 926 234 and U.S. Patent Application entitled ANALYZING SECURITY OF APPLICATIONS filed Jun. 25 2013 under Ser. No. 13 926 211 all of which are incorporated herein by reference in their entirety.

The metric collection service is executed to obtain various metrics as for use by the fingerprint generation service in generating application fingerprints . Such metrics may include resource consumption metrics usage data and or other types of metrics. Additionally the metric collection service can also obtain usage data associated with a particular application by users of the application marketplace who have installed the application . Such usage data can include crash data or information related to the unexpected termination of an application . Usage data can also comprise information about various aspects features levels of an application that users of the application marketplace utilize during usage of the application . For example the usage data can include usage time of a user within different levels of a game application the amount of time a user spends in a particular section of an application relative to other applications or an amount of network traffic originating from the application. Usage data can also include an amount of usage time within a particular difficulty setting of an application various maps or worlds of a game application or any other usage metric associated with an application .

In one embodiment an application can be instrumented to report usage data to the metric collection service . The usage data and or resource consumption metrics can be stored in the data store and associated with a user account of a user. In other embodiments the metric collection service is configured to store the usage data and or resource consumption metrics on an aggregate non user identifiable basis. In either scenario the stored data can be analyzed with respect to various attributes of users such as demographic categories.

Various techniques relating to collecting behavioral usage metrics and or usage data from applications are described in U.S. patent application Ser. No. 13 215 972 entitled COLLECTING APPLICATION USAGE METRICS and filed on Aug. 23 2011 which is incorporated herein by reference in its entirety. Various techniques relating to profiling user behavior are described in U.S. patent application Ser. No. 13 555 724 entitled BEHAVIOR BASED IDENTITY SYSTEM and filed on Jul. 23 2012 which is incorporated herein by reference in its entirety.

The application marketplace system is executed to provide functionality relating to an application marketplace in which a multitude of applications may be submitted by developers and made available for purchase and or download by users. The application marketplace system may include functionality relating to electronic commerce e.g. shopping cart ordering and payment systems. The application marketplace system may support searching and categorization functionality so that users may easily locate applications that are of interest. The application marketplace system may include functionality relating to verification of compatibility of applications with various clients .

The data stored in the data store includes for example applications application fingerprints data relating to an application marketplace and potentially other data. The applications correspond to those applications that have been submitted by developers and or others for example for inclusion in the application marketplace . The applications may correspond to game applications email applications social network applications mapping applications and or any other type of application . In one embodiment the applications correspond to mobile applications for use on mobile devices such as for example smartphones tablets electronic book readers and or other devices.

Each application may include for example object code source code metadata and or other data. The object code corresponds to code that is executable by clients either natively by a processor or by way of a virtual machine executed by the processor. The source code corresponds to the source for the application as written in a programming language. In some cases the source code may be generated by way of decompiling the object code . The source code may be executable by clients through the use of an interpreter. The metadata may declare compatibility with various clients software libraries or code fragments used by the application device resources used by the application and or other information. In one embodiment an application is distributed as a package including the object code and the metadata .

Application fingerprints identify a respective application by its characteristics. In one embodiment an application fingerprint corresponds to a summarized numerical value. In various embodiments the application fingerprint may be stored as a string. The application fingerprint may include various unique identifiers for device resources code fragments graphical assets used by the application files accessed by the application and or characteristics of the application . The application fingerprint may indicate resource consumption profiles and or behavioral usage profiles.

The data associated with the application marketplace includes for example download information categories application usage data and or other data. The download information indicates the popularity either in terms of absolute number of downloads or in terms of relative popularity of the applications offered by the application marketplace . The download information can also identify users either individually by a user account and or on an aggregate basis according to demographic category that have downloaded a particular application . The categories correspond to groupings of applications that may indicate similar applications and may be employed by users to more easily navigate the offerings of the application marketplace . Non limiting examples of categories may include social networking applications mapping applications movie information applications shopping applications music recognition applications and so on.

The client is representative of a plurality of client devices that may be coupled to the network . The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client may include a display comprising for example one or more devices such as liquid crystal display LCD displays gas plasma based flat panel displays organic light emitting diode OLED displays LCD projectors or other types of display devices etc.

The client may be configured to execute various applications such as an application instance a metric generation service and or other applications. The application instance corresponds to an instance of an application that has been downloaded to the client from the application marketplace system . The application instance may correspond to actual use by an end user or test use on a test client . The metric generation service is configured to monitor the application instance and report data that the user of the client has elected to share with the metric collection service . Such data may include resource consumption metrics behavioral usage metrics and or other data. The client may be configured to execute applications beyond the application instance and the metric generation service such as for example browsers mobile applications email applications social networking applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin an application is received by the computing environment . The fingerprint generation service then begins processing the application to generate an application fingerprint . Such initial processing may comprise a static analysis which may compare the object code and or the source code against identified software libraries or recognizable code fragments in either an exact or substantially similar form. As an example a code fragment may correspond to a software library. As another example a code fragment may correspond to open source reference code for performing some function. The fingerprint generation service may also perform a dynamic analysis of the application which may include executing an application instance for the application in a hosted environment and determining which code paths are taken by the object code .

The application fingerprint may indicate which of the identified code fragments and or identified hardware resources are actually used by the application instance . Resource consumption metrics and or usage data may be generated by a metric generation service executed in a client . The resource consumption metrics and or usage data then may be reported back from the client to the metric collection service by way of the network which can analyzed and incorporated into an application fingerprint as well as application usage data . An application fingerprint can also take into account resources used by an application such as include sound files graphical assets graphical textures images buttons user interface layouts and so on. Such application resources may include data items on clients e.g. contact lists text messages browsing history etc. Identifiers for such application resources may be included in a generated application fingerprint . It is noted that the identified device resources may include static resources and runtime resources.

Accordingly an application fingerprint that has been generated may be used in many different ways. As one example the application analyzer analyze an application fingerprint as well as application usage data as well as the respective application fingerprints and application usage data of other applications that are within a common category in the application marketplace to identify other applications that are related. Applications that are categorized together within categories of an application marketplace are sometimes not direct competitors or not closely related in functionality target market etc. Therefore by analyzing the application fingerprints as well as application usage data of applications embodiments of the disclosure can generate a refined set of application that are related to a particular application .

Related applications can be identified based upon a comparison of software libraries or recognizable code fragments as well as device resources employed by the application information about users of the application application usage data and other data that is embodied within the respective application fingerprints of the applications .

In one embodiment the application analyzer obtains a particular application for the purposes of identifying applications within the category associated with the application that are related to the application. The application analyzer identifies other applications that are within at least one category as the application. The application analyzer can identify other applications within the category based upon an analysis of their respective application fingerprints that share a common software library or code fragment use of a device capability and or aspect of a user population in order to generate a more refined list of applications that are related to the application . The application analyzer can also identify applications that are related to the application and highlight the differences or distinctions between the applications and the application . Various examples are provided herein.

As one example the application analyzer can identify those applications within the category that employ the same and or similar device capability. For example applications within the same category that also employ common hardware functionality such as location systems e.g. Global Positioning System chipsets network capabilities display capabilities accelerometer or other device orientation capabilities or any other capability of a client can be identified by the application analyzer .

As another example the application analyzer can identify those applications within the category that employ a common software library or code fragment as the application . For example applications that employ the same physics libraries graphics libraries network communications libraries location libraries social networking libraries etc. can be identified based upon an analysis of the application fingerprint of the applications within the category . Applications that employ the same or similar software libraries or code fragments are more likely to be related than applications that do not employ a common software library or code fragment.

For example referring back to the example depicted in the application analyzer can generate a refined list of applications within a category that are deemed related to the application that includes application but that does not include application . The application analyzer can make such a determination based upon an analysis of the application fingerprints and associated with the applications and . In the depicted example the application and both employ a common software library or code fragment which may be an indication that the applications are related. Both applications and also employ a common device capability which can also indicate relatedness. As another example both applications and may result in a similar resource consumption profile with respect to one or more device resources which can similarly indicate relatedness between the applications and

In contrast application for example while categorized within the same category as the application may not be placed in a refined list of related applications with the application if the application employs fewer than a threshold number of common software libraries code fragments and or device capabilities. While the applications and are within the same category within an application marketplace in that they may both be related to music they may not be direct competitors or appeal to the same types of users. Accordingly In this way the application analyzer can generate a refined list of applications that are related to the application based upon whether the applications within a given category of the application share common functionality and or appeal to similar users which in some scenarios is a better and more refined indicator of relatedness than categorization within an application marketplace .

The application analyzer can also identify other applications as members of a refined list of related applications based on other information associated with the respective application signatures and or application usage data of the applications . For example the application analyzer can identify a video frame rate or an average frame rate at which content is rendered on a display of a client that is associated with another application and determine whether it is within a threshold percentage of an average frame rate of the application . The application analyzer can also identify similarities and or differences between the display resolution of the applications whether the applications employ use social networking features audio capabilities and or codecs video codecs or any other feature or aspect of an application that is embodied within an application fingerprint .

As another example the application analyzer can also calculate a binary similarity metric that determines the similarity between code fragments object code and or other binary representations of applications . A binary similarity metric can also indicate a degree of difference between binary representations of applications based upon a bitwise comparison of the binary representations of the applications . If an application from the category is sufficiently similar to an application under analysis according to such a binary similarity metric then the application analyzer can designate the application as a member of a refined list of application that are related to the application that is being analyzed.

As another example the application analyzer can also identify other applications from the category that appeal to similar users as does the application . Accordingly the application analyzer can analyze application usage data download information and or the application fingerprint of another application and determine whether a threshold percentage of users sharing one or more common attributes are users of both applications . Such an attribute can include a demographic category such as age location income etc. information about whether the users have downloaded similar applications in the past or any other attribute with which users can be identified and or categorized.

The application analyzer can also identify other applications that are a member of a refined list of applications with respect to an application based on when the application is added to the application marketplace . For example applications that have been added and or updated within the application marketplace within a recent period of time e.g. the past 6 months the past one year etc. can be deemed as relevant and or related to an application . As another example applications that were added to the application marketplace within a threshold period of time of when an application under analysis was added to the application marketplace can also be deemed as relevant and or related to the application .

Accordingly the application analyzer can generate reporting information that can be provided to a developer of a particular application that includes information about other applications that are within a refined list of application that is generated by the application analyzer with respect to the application . For example a competitive landscape report can be generated that includes the refined list of applications can indicate the performance of the refined list of applications with respect to one another. Performance metrics may be related to download usage profitability revenue ratings popularity controversy speed utilization difficulty resource consumption and the like. For example the application analyzer may determine that one application is more popular within the application marketplace than another application . As another example the application analyzer may determine that one application garners more usage than another application according to application usage data collected by the metric collection service for both applications. As yet another example one application may generate more revenue per user or total revenue e.g. advertising revenue application sales etc. than the application . Another example of a performance metric is usage time of an application . For example if an application is associated with a higher level of usage time by users such a scenario can be deemed as more desirable than less usage time.

The application analyzer can also employ the refined list of applications to generate recommendations for users of an application marketplace . Additionally the application analyzer can rank the applications within a refined list of applications according to their relatedness to the application . For example applications within the category that has more common aspects with the application can be ranked higher than others. As another example applications within the category that appeal to the most similar user population in terms of demographics can also be ranked higher than other application within the category appealing to less similar users. Additionally the application analyzer can also score the applications within the refined list according to their similarity with respect to the application signature and the user populations to which the application appeals such that the score considers both factors.

Embodiments of the present disclosure can also analyze and generate recommendations regarding applications with respect to the way in which content in an application is separated into various aspects e.g. levels maps worlds difficulty settings etc. . For example game applications are often separated into various levels of difficulty or separated by plot elements of a story line. In other words an application is often leveled in that it is separated into different levels or sections. Accordingly the application analyzer can obtain application usage data to determine whether modification with respect to the leveling of an application would be appropriate.

For example the application analyzer can determine whether usage of an application as reflected in its application fingerprint and or application usage data falls by a threshold percentage after a certain level within the application . If such a change in usage occurs the application analyzer can generate a recommendation for the developer that the leveling of the application should be examined and or adjusted. As another example the application analyzer can determine whether usage of an application by a particular segment of users e.g. demographic category similar download history download preferences etc. changes by a threshold percentage after a certain level within an application . If such a change in usage occurs the application analyzer can generate a recommendation for the developer that the leveling of the application should be examined and or adjusted. As another example the application analyzer can also determine whether usage of an application by users is concentrated within certain levels or sections of an application . If such a change in usage occurs the application analyzer can generate a recommendation for the developer that the leveling of the application should be examined and or adjusted.

The application analyzer can determine whether usage of an application as reflected in its application fingerprint and or application usage data changes with respect to other aspects of the application other than levels. For example the application analyzer can determine whether usage of an application by a particular segment of users e.g. demographic category similar download history download preferences etc. changes by a threshold percentage with respect to various difficulty settings within various maps or worlds within a game application or with respect to any other aspect of the application . If such a change in usage occurs the application analyzer can generate a recommendation for the developer that the particular aspect of the application associated with the change in usage should be examined and or adjusted.

As another example the application analyzer can also determine whether usage of an application by users is concentrated within certain difficulty settings of an application or within certain maps or worlds of a game application based upon an analysis of the usage data . If such a change in usage occurs the application analyzer can generate a recommendation for the developer that the layout of the application with respect to maps or worlds should be examined and or adjusted.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the application analyzer according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application analyzer as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application analyzer identifies an application . For example a developer of an application may wish to generate a competitive analysis of other applications within an application marketplace that are similar in functionality to the application . As another example the application marketplace may employ the application analyzer to generate recommendations for a user of the application marketplace . In box the application analyzer can obtain an application fingerprint corresponding to the application . In box the application analyzer can identify another application that is within a common category relative to the application .

In box the application analyzer can identify whether the other application employs common software libraries or recognizable code fragments relative to the application . In box the application analyzer can identify whether the other application employs common device capabilities relative to the application . In box the application analyzer determines whether there are additional applications within the category and progresses to similarly determine whether these applications employ common software libraries code fragments and or device capabilities. At box the application analyzer identifies those applications within the category that employ the greatest number of common software libraries code fragments and or device capabilities and places those applications into a refined list of applications from the category. Thereafter the process shown in proceeds to completion.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the application analyzer according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the application analyzer as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application analyzer identifies an application . For example a developer of an application may which to obtain recommendation with respect to the adjusting of various aspects of an application . Next in box the application analyzer identifies application usage data with respect to the application as described above. The application analyzer can determine whether usage data changes by a threshold percentage within an application with respect to a particular aspect of the application based upon an analysis of the application usage data and or its application fingerprint . In box the application generates a recommendation with respect to the aspects of the application based upon the usage data and or the application fingerprint . Thereafter the process ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the fingerprint generation service the metric collection service the application analyzer the application marketplace system and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the fingerprint generation service the metric collection service the application analyzer the application marketplace system and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the application analyzer . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in flowcharts of may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in flowcharts of may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the fingerprint generation service the metric collection service the application analyzer the application marketplace system that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

