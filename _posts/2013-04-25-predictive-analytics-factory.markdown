---

title: Predictive analytics factory
abstract: An apparatus, system, method, and computer program product are disclosed for a predictive analytics factory. A receiver module is configured to receive training data. A function generator module is configured to determine a plurality of learned functions from multiple classes based on the training data. A predictive compiler module is configured to form a predictive ensemble comprising a subset of learned functions from the plurality of learned functions. The subset of learned functions is from at least two of the multiple classes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08880446&OS=08880446&RS=08880446
owner: PurePredictive, Inc.
number: 08880446
owner_city: Sandy
owner_country: US
publication_date: 20130425
---
This application claims the benefit of U.S. Provisional Patent Application No. 61 727 114 entitled PREDICTIVE ANALYTICS FACTORY and filed on Nov. 15 2012 for Richard W. Wellman et al. which is incorporated herein by reference.

The present disclosure in various embodiments relates to analytics and more particularly relates to an automated factory for predictive analytics.

Data analytics models are typically highly tuned and customized for a particular application. Such tuning and customization often requires pre existing knowledge about the particular application and can require the use of complex manual tools to achieve this tuning and customization. For example an expert in a certain field may carefully tune and customize an analytics model for use in the expert s field using a manual tool.

While a highly tuned expert customized analytics model may be useful for a particular application or field because of the high level of tuning and customization the analytics model is typically useless or at least inaccurate for other applications and fields. Conversely a general purpose analytics framework typically is not specialized enough for most applications without substantial customization.

From the foregoing discussion it should be apparent that a need exists for an apparatus system method and computer program product to generate a predictive ensemble in an automated manner. Beneficially such an apparatus system method and computer program product would comprise a predictive analytics factory configured to generate a predictive ensemble regardless of the particular field or application with little or no input from a user or expert.

The present disclosure has been developed in response to the present state of the art and in particular in response to the problems and needs in the art that have not yet been fully solved by currently available analytics methods. Accordingly the present disclosure has been developed to provide an apparatus system method and computer program product for a predictive analytics factory that overcome many or all of the above discussed shortcomings in the art.

Apparatuses are presented for a predictive analytics factory. In one embodiment a receiver module is configured to receive training data. A function generator module in certain embodiments is configured to determine a plurality of learned functions from multiple classes based on the training data. A predictive compiler module in a further embodiment is configured to form a predictive ensemble comprising a subset of learned functions from the plurality of learned functions. In one embodiment the subset of learned functions is from at least two of the multiple classes.

Methods are presented for a predictive analytics factory. In one embodiment a method includes pseudo randomly generating a plurality of learned functions based on training data without prior knowledge regarding suitability of the generated learned functions for the training data. A method in another embodiment includes evaluating a plurality of learned functions using test data to generate evaluation metadata. In another embodiment a method includes forming a predictive ensemble comprising a subset of learned functions from a plurality of learned functions where the subset of learned functions are selected based on evaluation metadata.

Computer program products are presented comprising a computer readable storage medium storing computer usable program code executable to perform operations for a predictive analytics factory. In one embodiment an operation includes determining a plurality of learned functions using training data comprising a plurality of features. An operation in another embodiment includes selecting a subset of features of training data based on evaluation metadata generated for a plurality of learned functions. In a further embodiment an operation includes forming a predictive ensemble comprising at least two learned functions from a plurality of learned functions that use a selected subset of features.

A predictive analytics ensemble is presented. In one embodiment a predictive analytics ensemble includes a plurality of learned functions synthesized from a larger plurality of learned functions. In a further embodiment a predictive analytics ensemble includes a metadata rule set synthesized from evaluation metadata for a plurality of learned functions. A predictive analytics ensemble in another embodiment includes an orchestration module configured to direct data through a plurality of learned functions based on a synthesized metadata rule set to produce a result.

Reference throughout this specification to features advantages or similar language does not imply that all of the features and advantages that may be realized with the present disclosure should be or are in any single embodiment of the disclosure. Rather language referring to the features and advantages is understood to mean that a specific feature advantage or characteristic described in connection with an embodiment is included in at least one embodiment of the present disclosure. Thus discussion of the features and advantages and similar language throughout this specification may but do not necessarily refer to the same embodiment.

Furthermore the described features advantages and characteristics of the disclosure may be combined in any suitable manner in one or more embodiments. The disclosure may be practiced without one or more of the specific features or advantages of a particular embodiment. In other instances additional features and advantages may be recognized in certain embodiments that may not be present in all embodiments of the disclosure.

These features and advantages of the present disclosure will become more fully apparent from the following description and appended claims or may be learned by the practice of the disclosure as set forth hereinafter.

Aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable storage media having computer readable program code embodied thereon.

Many of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more physical or logical blocks of computer instructions which may for instance be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which when joined logically together comprise the module and achieve the stated purpose for the module.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices and may exist at least partially merely as electronic signals on a system or network. Where a module or portions of a module are implemented in software the software portions are stored on one or more computer readable storage media.

Any combination of one or more computer readable storage media may be utilized. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing.

More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM a digital versatile disc DVD a Blu ray disc an optical storage device a magnetic tape a Bernoulli drive a magnetic disk a magnetic storage device a punch card integrated circuits other digital processing apparatus memory devices or any suitable combination of the foregoing but would not include propagating signals. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Python C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Reference throughout this specification to one embodiment an embodiment or similar language means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the present disclosure. Thus appearances of the phrases in one embodiment in an embodiment and similar language throughout this specification may but do not necessarily all refer to the same embodiment but mean one or more but not all embodiments unless expressly specified otherwise. The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise. An enumerated listing of items does not imply that any or all of the items are mutually exclusive and or mutually inclusive unless expressly specified otherwise. The terms a an and the also refer to one or more unless expressly specified otherwise.

Furthermore the described features structures or characteristics of the disclosure may be combined in any suitable manner in one or more embodiments. In the following description numerous specific details are provided such as examples of programming software modules user selections network transactions database queries database structures hardware modules hardware circuits hardware chips etc. to provide a thorough understanding of embodiments of the disclosure. However the disclosure may be practiced without one or more of the specific details or with other methods components materials and so forth. In other instances well known structures materials or operations are not shown or described in detail to avoid obscuring aspects of the disclosure.

Aspects of the present disclosure are described below with reference to schematic flowchart diagrams and or schematic block diagrams of methods apparatuses systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the schematic flowchart diagrams and or schematic block diagrams and combinations of blocks in the schematic flowchart diagrams and or schematic block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the schematic flowchart diagrams and or schematic block diagrams block or blocks.

These computer program instructions may also be stored in a computer readable storage medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable storage medium produce an article of manufacture including instructions which implement the function act specified in the schematic flowchart diagrams and or schematic block diagrams block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The schematic flowchart diagrams and or schematic block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of apparatuses systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the schematic flowchart diagrams and or schematic block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s .

It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. Other steps and methods may be conceived that are equivalent in function logic or effect to one or more blocks or portions thereof of the illustrated figures.

Although various arrow types and line types may be employed in the flowchart and or block diagrams they are understood not to limit the scope of the corresponding embodiments. Indeed some arrows or other connectors may be used to indicate only the logical flow of the depicted embodiment. For instance an arrow may indicate a waiting or monitoring period of unspecified duration between enumerated steps of the depicted embodiment. It will also be noted that each block of the block diagrams and or flowchart diagrams and combinations of blocks in the block diagrams and or flowchart diagrams can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The description of elements in each figure may refer to elements of proceeding figures. Like numbers refer to like elements in all figures including alternate embodiments of like elements.

Predictive analytics is the study of past performance or patterns found in historical and transactional data to identify behavior and trends in future events. This may be accomplished using a variety of statistical techniques including modeling machine learning data mining or the like.

One term for large complex historical data sets is Big Data. Examples of Big Data include web logs social networks blogs system log files call logs customer data user feedback or the like. These data sets may often be so large and complex that they are awkward and difficult to work with using traditional tools. With technological advances in computing resources including memory storage and computational power along with frameworks and programming models for data intensive distributed applications the ability to collect analyze and mine these huge repositories of structured unstructured and or semi structured data has only recently become possible.

In certain embodiments prediction may be applied through at least two general techniques Regression and Classification.

Regression models attempt to fit a mathematical equation to approximate the relationship between the variables being analyzed. These models may include Discrete Choice models such as Logistic Regression Multinomial Logistic Regression Probit Regression or the like. When factoring in time Time Series models may be used such as Auto Regression AR Moving Average MA ARMA AR Conditional Heteroskedasticity ARCH Generalized ARCH GARCH and Vector AR VAR . Other models include Survival or Duration analysis Classification and Regression Trees CART Multivariate Adaptive Regression Splines MARS and the like.

Classification is a form of artificial intelligence that uses computational power to execute complex algorithms in an effort to emulate human cognition. One underlying problem however remains determining the set of all possible behaviors given all possible inputs is much too large to be included in a set of observed examples. Classification methods may include Neural Networks Radial Basis Functions Support Vector Machines Na ve Bayes k Nearest Neighbors Geospatial Predictive modeling and the like.

Each of these forms of modeling make assumptions about the data set and model the given data however some models are more accurate than others and none of the models are ideal. Historically using predictive analytics tools was a cumbersome and difficult process often involving the engagement of a Data Scientist or other expert. Any easier to use tools or interfaces for general business users however typically fall short in that they still require heavy lifting by IT personnel in order to present and massage data and results. A Data Scientist typically must determine the optimal class of learning machines that would be the most applicable for a given data set and rigorously test the selected hypothesis by first fine tuning the learning machine parameters and second by evaluating results fed by trained data.

The predictive analytics module in certain embodiments generates predictive ensembles for the clients with little or no input from a Data Scientist or other expert by generating a large number of learned functions from multiple different classes evaluating combining and or extending the learned functions synthesizing selected learned functions and organizing the synthesized learned functions into a predictive ensemble. The predictive analytics module in one embodiment services analysis requests for the clients using the generated predictive ensembles.

By generating a large number of learned functions without regard to the effectiveness of the generated learned functions without prior knowledge of the generated learned functions suitability or the like and evaluating the generated learned functions in certain embodiments the predictive analytics module may provide predictive ensembles that are customized and finely tuned for data from a specific client without excessive intervention or fine tuning. The predictive analytics module in a further embodiment may generate and evaluate a large number of learned functions using parallel computing on multiple processors such as a massively parallel processing MPP system or the like.

The predictive analytics module may service predictive analytics requests to clients locally executing on the same host computing device as the predictive analytics module by providing an API to clients receiving function calls from clients providing a hardware command interface to clients or otherwise providing a local channel to clients . In a further embodiment the predictive analytics module may service predictive analytics requests to clients over a data network such as a local area network LAN a wide area network WAN such as the Internet as a cloud service a wireless network a wired network or another data network .

The data receiver module in certain embodiments is configured to receive client data such as training data test data workload data or the like from a client either directly or indirectly. The data receiver module in various embodiments may receive data over a local channel such as an API a shared library a hardware command interface or the like over a data network such as wired or wireless LAN WAN the Internet a serial connection a parallel connection or the like. In certain embodiments the data receiver module may receive data indirectly from a client through an intermediate module that may pre process reformat or otherwise prepare the data for the predictive analysis module . The data receiver module may support structured data unstructured data semi structured data or the like.

One type of data that the data receiver module may receive as part of a new ensemble request or the like is initialization data. The predictive analytics module in certain embodiments may use initialization data to train and test learned functions from which the predictive analytics module may build a predictive ensemble. Initialization data may comprise historical data statistics Big Data customer data marketing data computer system logs computer application logs data networking logs or other data that a client provides to the data receiver module with which to build initialize train and or test a predictive ensemble.

Another type of data that the data receiver module may receive as part of an analysis request or the like is workload data. The predictive analytics module in certain embodiments may process workload data using a predictive ensemble to obtain a result such as a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation or the like. Workload data for a specific predictive ensemble in one embodiment has substantially the same format as the initialization data used to train and or evaluate the predictive ensemble. For example initialization data and or workload data may include one or more features. As used herein a feature may comprise a column category data type attribute characteristic label or other grouping of data. For example in embodiments where initialization data and or workload data that is organized in a table format a column of data may be a feature. Initialization data and or workload data may include one or more instances of the associated features. In a table format where columns of data are associated with features a row of data is an instance.

As described below with regard to in one embodiment the data receiver module may maintain client data such as initialization data and or workload data in a data repository where the function generator module the predictive compiler module or the like may access the data. In certain embodiments as described below the function generator module and or the predictive compiler module may divide initialization data into subsets using certain subsets of data as training data for generating and training learned functions and using certain subsets of data as test data for evaluating generated learned functions.

The function generator module in certain embodiments is configured to generate a plurality of learned functions based on training data from the data receiver module . A learned function as used herein comprises a computer readable code that accepts an input and provides a result. A learned function may comprise a compiled code a script text a data structure a file a function or the like. In certain embodiments a learned function may accept instances of one or more features as input and provide a result such as a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation or the like. In another embodiment certain learned functions may accept instances of one or more features as input and provide a subset of the instances a subset of the one or more features or the like as an output. In a further embodiment certain learned functions may receive the output or result of one or more other learned functions as input such as a Bayes classifier a Boltzmann machine or the like.

The function generator module may generate learned functions from multiple different predictive analytics classes models or algorithms. For example the function generator module may generate decision trees decision forests kernel classifiers and regression machines with a plurality of reproducing kernels non kernel regression and classification machines such as logistic CART multi layer neural nets with various topologies Bayesian type classifiers such as Na ve Bayes and Boltzmann machines logistic regression multinomial logistic regression probit regression AR MA ARMA ARCH GARCH VAR survival or duration analysis MARS radial basis functions support vector machines k nearest neighbors geospatial predictive modeling and or other classes of learned functions.

In one embodiment the function generator module generates learned functions pseudo randomly without regard to the effectiveness of the generated learned functions without prior knowledge regarding the suitability of the generated learned functions for the associated training data or the like. For example the function generator module may generate a total number of learned functions that is large enough that at least a subset of the generated learned functions are statistically likely to be effective. As used herein pseudo randomly indicates that the function generator module is configured to generate learned functions in an automated manner without input or selection of learned functions predictive analytics classes or models for the learned functions or the like by a Data Scientist expert or other user.

The function generator module in certain embodiments generates as many learned functions as possible for a requested predictive ensemble given one or more parameters or limitations. A client may provide a parameter or limitation for learned function generation as part of a new ensemble request or the like to an interface module as described below with regard to such as an amount of time an allocation of system resources such as a number of processor nodes or cores or an amount of volatile memory a number of learned functions runtime constraints on the requested ensemble such as an indicator of whether or not the requested ensemble should provide results in real time and or another parameter or limitation from a client .

The number of learned functions that the function generator module may generate for building a predictive ensemble may also be limited by capabilities of the system such as a number of available processors or processor cores a current load on the system a price of remote processing resources over the data network or other hardware capabilities of the system available to the function generator module . The function generator module may balance the hardware capabilities of the system with an amount of time available for generating learned functions and building a predictive ensemble to determine how many learned functions to generate for the predictive ensemble.

In one embodiment the function generator module may generate at least 50 learned functions for a predictive ensemble. In a further embodiment the function generator module may generate hundreds thousands or millions of learned functions or more for a predictive ensemble. By generating an unusually large number of learned functions from different classes without regard to the suitability or effectiveness of the generated learned functions for training data in certain embodiments the function generator module ensures that at least a subset of the generated learned functions either individually or in combination are useful suitable and or effective for the training data without careful curation and fine tuning by a Data Scientist or other expert.

Similarly by generating learned functions from different predictive analytics classes without regard to the effectiveness or the suitability of the different predictive analytics classes for training data the function generator module in certain embodiments may generate learned functions that are useful suitable and or effective for the training data due to the sheer amount of learned functions generated from the different predictive analytics classes. This brute force trial and error approach to generating learned functions in certain embodiments eliminates or minimizes the role of a Data Scientist or other expert in generation of a predictive ensemble.

The function generator module in certain embodiments divides initialization data from the data receiver module into various subsets of training data and may use different training data subsets different combinations of multiple training data subsets or the like to generate different learned functions. The function generator module may divide the initialization data into training data subsets by feature by instance or both. For example a training data subset may comprise a subset of features of initialization data a subset of features of initialization data a subset of both features and instances of initialization data or the like. Varying the features and or instances used to train different learned functions in certain embodiments may further increase the likelihood that at least a subset of the generated learned functions are useful suitable and or effective. In a further embodiment the function generator module ensures that the available initialization data is not used in its entirety as training data for any one learned function so that at least a portion of the initialization data is available for each learned function as test data which is described in greater detail below with regard to the function evaluator module of .

In one embodiment the function generator module may also generate additional learned functions in cooperation with the predictive compiler module . The function generator module may provide a learned function request interface allowing the predictive compiler module or another module a client or the like to send a learned function request to the function generator module requesting that the function generator module generate one or more additional learned functions. In one embodiment a learned function request may include one or more attributes for the requested one or more learned functions. For example a learned function request in various embodiments may include a predictive analytics class for a requested learned function one or more features for a requested learned function instances from initialization data to use as training data for a requested learned function runtime constraints on a requested learned function or the like. In another embodiment a learned function request may identify initialization data training data or the like for one or more requested learned functions and the function generator module may generate the one or more learned functions pseudo randomly as described above based on the identified data.

The predictive compiler module in one embodiment is configured to form a predictive ensemble using learned functions from the function generator module . As used herein a predictive ensemble comprises an organized set of a plurality of learned functions. Providing a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation or another result using a predictive ensemble in certain embodiments may be more accurate than using a single learned function.

The predictive compiler module is described in greater detail below with regard to . The predictive compiler module in certain embodiments may combine and or extend learned functions to form new learned functions may request additional learned functions from the function generator module or the like for inclusion in a predictive ensemble. In one embodiment the predictive compiler module evaluates learned functions from the function generator module using test data to generate evaluation metadata. The predictive compiler module in a further embodiment may evaluate combined learned functions extended learned functions combined extended learned functions additional learned functions or the like using test data to generate evaluation metadata.

The predictive compiler module in certain embodiments maintains evaluation metadata in a metadata library as described below with regard to FIGS. and . The predictive compiler module may select learned functions e.g. learned functions from the function generator module combined learned functions extended learned functions learned functions from different predictive analytics classes and or combined extended learned functions for inclusion in a predictive ensemble based on the evaluation metadata. In a further embodiment the predictive compiler module may synthesize the selected learned functions into a final synthesized function or function set for a predictive ensemble based on evaluation metadata. The predictive compiler module in another embodiment may include synthesized evaluation metadata in a predictive ensemble for directing data through the predictive ensemble or the like.

In one embodiment the feature selector module determines which features of initialization data to use in the predictive ensemble and in the associated learned functions and or which features of the initialization data to exclude from the predictive ensemble and from the associated learned functions. As described above initialization data and the training data and test data derived from the initialization data may include one or more features. Learned functions and the predictive ensembles that they form are configured to receive and process instances of one or more features. Certain features may be more predictive than others and the more features that the predictive compiler module processes and includes in the generated predictive ensemble the more processing overhead used by the predictive compiler module and the more complex the generated predictive ensemble becomes. Additionally certain features may not contribute to the effectiveness or accuracy of the results from a predictive ensemble but may simply add noise to the results.

The feature selector module in one embodiment cooperates with the function generator module and the predictive compiler module to evaluate the effectiveness of various features based on evaluation metadata from the metadata library described below. For example the function generator module may generate a plurality of learned functions for various combinations of features and the predictive compiler module may evaluate the learned functions and generate evaluation metadata. Based on the evaluation metadata the feature selector module may select a subset of features that are most accurate or effective and the predictive compiler module may use learned functions that utilize the selected features to build the predictive ensemble . The feature selector module may select features for use in the predictive ensemble based on evaluation metadata for learned functions from the function generator module combined learned functions from the combiner module extended learned functions from the extender module combined extended functions synthesized learned functions from the synthesizer module or the like.

In a further embodiment the feature selector module may cooperate with the predictive compiler module to build a plurality of different predictive ensembles for the same initialization data or training data each different predictive ensemble utilizing different features of the initialization data or training data. The predictive compiler module may evaluate each different predictive ensemble using the function evaluator module described below and the feature selector module may select the predictive ensemble and the associated features which are most accurate or effective based on the evaluation metadata for the different predictive ensembles . In certain embodiments the predictive compiler module may generate tens hundreds thousands millions or more different predictive ensembles so that the feature selector module may select an optimal set of features e.g. the most accurate most effective or the like with little or no input from a Data Scientist expert or other user in the selection process.

In one embodiment the predictive compiler module may generate a predictive ensemble for each possible combination of features from which the feature selector module may select. In a further embodiment the predictive compiler module may begin generating predictive ensembles with a minimal number of features and may iteratively increase the number of features used to generate predictive ensembles until an increase in effectiveness or usefulness of the results of the generated predictive ensembles fails to satisfy a feature effectiveness threshold. By increasing the number of features until the increases stop being effective in certain embodiments the predictive compiler module may determine a minimum effective set of features for use in a predictive ensemble so that generation and use of the predictive ensemble is both effective and efficient. The feature effectiveness threshold may be predetermined or hard coded may be selected by a client as part of a new ensemble request or the like may be based on one or more parameters or limitations or the like.

During the iterative process in certain embodiments once the feature selector module determines that a feature is merely introducing noise the predictive compiler module excludes the feature from future iterations and from the predictive ensemble . In one embodiment a client may identify one or more features as required for the predictive ensemble in a new ensemble request or the like. The feature selector module may include the required features in the predictive ensemble and select one or more of the remaining optional features for inclusion in the predictive ensemble with the required features.

In a further embodiment based on evaluation metadata from the metadata library the feature selector module determines which features from initialization data and or training data are adding noise are not predictive are the least effective or the like and excludes the features from the predictive ensemble . In other embodiments the feature selector module may determine which features enhance the quality of results increase effectiveness or the like and selects the features for the predictive ensemble .

In one embodiment the feature selector module causes the predictive compiler module to repeat generating combining extending and or evaluating learned functions while iterating through permutations of feature sets. At each iteration the function evaluator module may determine an overall effectiveness of the learned functions in aggregate for the current iteration s selected combination of features. Once the feature selector module identifies a feature as noise introducing the feature selector module may exclude the noisy feature and the predictive compiler module may generate a predictive ensemble without the excluded feature. In one embodiment the predictive correlation module determines one or more features instances of features or the like that correlate with higher confidence metrics e.g. that are most effective in predicting results with high confidence . The predictive correlation module may cooperate with be integrated with or otherwise work in concert with the feature selector module to determine one or more features instances of features or the like that correlate with higher confidence metrics. For example as the feature selector module causes the predictive compiler module to generate and evaluate learned functions with different sets of features the predictive correlation module may determine which features and or instances of features correlate with higher confidence metrics are most effective or the like based on metadata from the metadata library .

The predictive correlation module in certain embodiments is configured to harvest metadata regarding which features correlate to higher confidence metrics to determine which feature was predictive of which outcome or result or the like. In one embodiment the predictive correlation module determines the relationship of a feature s predictive qualities for a specific outcome or result based on each instance of a particular feature. In other embodiments the predictive correlation module may determine the relationship of a feature s predictive qualities based on a subset of instances of a particular feature. For example the predictive correlation module may discover a correlation between one or more features and the confidence metric of a predicted result by attempting different combinations of features and subsets of instances within an individual feature s dataset and measuring an overall impact on predictive quality accuracy confidence or the like. The predictive correlation module may determine predictive features at various granularities such as per feature per subset of features per instance or the like.

In one embodiment the predictive correlation module determines one or more features with a greatest contribution to a predicted result or confidence metric as the predictive compiler module forms the predictive ensemble based on evaluation metadata from the metadata library or the like. For example the predictive compiler module may build one or more synthesized learned functions that are configured to provide one or more features with a greatest contribution as part of a result. In another embodiment the predictive correlation module may determine one or more features with a greatest contribution to a predicted result or confidence metric dynamically at runtime as the predictive ensemble determines the predicted result or confidence metric. In such embodiments the predictive correlation module may be part of integrated with or in communication with the predictive ensemble . The predictive correlation module may cooperate with the predictive ensemble such that the predictive ensemble provides a listing of one or more features that provided a greatest contribution to a predicted result or confidence metric as part of a response to an analysis request.

In determining features that are predictive or that have a greatest contribution to a predicted result or confidence metric the predictive correlation module may balance a frequency of the contribution of a feature and or an impact of the contribution of the feature. For example a certain feature or set of features may contribute to the predicted result or confidence metric frequently for each instance or the like but have a low impact. Another feature or set of features may contribute relatively infrequently but has a very high impact on the predicted result or confidence metric e.g. provides at or near 100 confidence or the like . While the predictive correlation module is described herein as determining features that are predictive or that have a greatest contribution in other embodiments the predictive correlation module may determine one or more specific instances of a feature that are predictive have a greatest contribution to a predicted result or confidence metric or the like.

In the depicted embodiment the predictive compiler module includes a combiner module . The combiner module combines learned functions forming sets strings groups trees or clusters of combined learned functions. In certain embodiments the combiner module combines learned functions into a prescribed order and different orders of learned functions may have different inputs produce different results or the like. The combiner module may combine learned functions in different combinations. For example the combiner module may combine certain learned functions horizontally or in parallel joined at the inputs and at the outputs or the like and may combine certain learned functions vertically or in series feeding the output of one learned function into the input of another learned function.

The combiner module may determine which learned functions to combine how to combine learned functions or the like based on evaluation metadata for the learned functions from the metadata library generated based on an evaluation of the learned functions using test data as described below with regard to the function evaluator module . The combiner module may request additional learned functions from the function generator module for combining with other learned functions. For example the combiner module may request a new learned function with a particular input and or output to combine with an existing learned function or the like.

While the combining of learned functions may be informed by evaluation metadata for the learned functions in certain embodiments the combiner module combines a large number of learned functions pseudo randomly forming a large number of combined functions. For example the combiner module in one embodiment may determine each possible combination of generated learned functions as many combinations of generated learned functions as possible given one or more limitations or constraints a selected subset of combinations of generated learned functions or the like for evaluation by the function evaluator module . In certain embodiments by generating a large number of combined learned functions the combiner module is statistically likely to form one or more combined learned functions that are useful and or effective for the training data.

In the depicted embodiment the predictive compiler module includes an extender module . The extender module in certain embodiments is configured to add one or more layers to a learned function. For example the extender module may extend a learned function or combined learned function by adding a probabilistic model layer such as a Bayesian belief network layer a Bayes classifier layer a Boltzmann layer or the like.

Certain classes of learned functions such as probabilistic models may be configured to receive either instances of one or more features as input or the output results of other learned functions such as a classification and a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation or the like. The extender module may use these types of learned functions to extend other learned functions. The extender module may extend learned functions generated by the function generator module directly may extend combined learned functions from the combiner module may extend other extended learned functions may extend synthesized learned functions from the synthesizer module or the like.

In one embodiment the extender module determines which learned functions to extend how to extend learned functions or the like based on evaluation metadata from the metadata library . The extender module in certain embodiments may request one or more additional learned functions from the function generator module and or one or more additional combined learned functions from the combiner module for the extender module to extend.

While the extending of learned functions may be informed by evaluation metadata for the learned functions in certain embodiments the extender module generates a large number of extended learned functions pseudo randomly. For example the extender module in one embodiment may extend each possible learned function and or combination of learned functions may extend a selected subset of learned functions may extend as many learned functions as possible given one or more limitations or constraints or the like for evaluation by the function evaluator module . In certain embodiments by generating a large number of extended learned functions the extender module is statistically likely to form one or more extended learned functions and or combined extended learned functions that are useful and or effective for the training data.

In the depicted embodiment the predictive compiler module includes a synthesizer module . The synthesizer module in certain embodiments is configured to organize a subset of learned functions into the predictive ensemble as synthesized learned functions . In a further embodiment the synthesizer module includes evaluation metadata from the metadata library of the function evaluator module in the predictive ensemble as a synthesized metadata rule set so that the predictive ensemble includes synthesized learned functions and evaluation metadata the synthesized metadata rule set for the synthesized learned functions .

The learned functions that the synthesizer module synthesizes or organizes into the synthesized learned functions of the predictive ensemble may include learned functions directly from the function generator module combined learned functions from the combiner module extended learned functions from the extender module combined extended learned functions or the like. As described below in one embodiment the function selector module selects the learned functions for the synthesizer module to include in the predictive ensemble . In certain embodiments the synthesizer module organizes learned functions by preparing the learned functions and the associated evaluation metadata for processing workload data to reach a result. For example as described below the synthesizer module may organize and or synthesize the synthesized learned functions and the synthesized metadata rule set for the orchestration module to use to direct workload data through the synthesized learned functions to produce a result.

In one embodiment the function evaluator module evaluates the synthesized learned functions that the synthesizer module organizes and the synthesizer module synthesizes and or organizes the synthesized metadata rule set based on evaluation metadata that the function evaluation module generates during the evaluation of the synthesized learned functions from the metadata library or the like.

In the depicted embodiment the predictive compiler module includes a function evaluator module . The function evaluator module is configured to evaluate learned functions using test data or the like. The function evaluator module may evaluate learned functions generated by the function generator module learned functions combined by the combiner module described above learned functions extended by the extender module described above combined extended learned functions synthesized learned functions organized into the predictive ensemble by the synthesizer module described above or the like.

Test data for a learned function in certain embodiments comprises a different subset of the initialization data for the learned function than the function generator module used as training data. The function evaluator module in one embodiment evaluates a learned function by inputting the test data into the learned function to produce a result such as a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation or another result.

Test data in certain embodiments comprises a subset of initialization data with a feature associated with the requested result removed so that the function evaluator module may compare the result from the learned function to the instances of the removed feature to determine the accuracy and or effectiveness of the learned function for each test instance. For example if a client has requested a predictive ensemble to predict whether a customer will be a repeat customer and provided historical customer information as initialization data the function evaluator module may input a test data set comprising one or more features of the initialization data other than whether the customer was a repeat customer into the learned function and compare the resulting predictions to the initialization data to determine the accuracy and or effectiveness of the learned function.

The function evaluator module in one embodiment is configured to maintain evaluation metadata for an evaluated learned function in the metadata library . The evaluation metadata in certain embodiments comprises log data generated by the function generator module while generating learned functions the function evaluator module while evaluating learned functions or the like.

In one embodiment the evaluation metadata includes indicators of one or more training data sets that the function generator module used to generate a learned function. The evaluation metadata in another embodiment includes indicators of one or more test data sets that the function evaluator module used to evaluate a learned function. In a further embodiment the evaluation metadata includes indicators of one or more decisions made by and or branches taken by a learned function during an evaluation by the function evaluator module . The evaluation metadata in another embodiment includes the results determined by a learned function during an evaluation by the function evaluator module . In one embodiment the evaluation metadata may include evaluation metrics learning metrics effectiveness metrics convergence metrics or the like for a learned function based on an evaluation of the learned function. An evaluation metric learning metrics effectiveness metric convergence metric or the like may be based on a comparison of the results from a learned function to actual values from initialization data and may be represented by a correctness indicator for each evaluated instance a percentage a ratio or the like. Different classes of learned functions in certain embodiments may have different types of evaluation metadata.

The metadata library in one embodiment provides evaluation metadata for learned functions to the feature selector module the predictive correlation module the combiner module the extender module and or the synthesizer module . The metadata library may provide an API a shared library one or more function calls or the like providing access to evaluation metadata. The metadata library in various embodiments may store or maintain evaluation metadata in a database format as one or more flat files as one or more lookup tables as a sequential log or log file or as one or more other data structures. In one embodiment the metadata library may index evaluation metadata by learned function by feature by instance by training data by test data by effectiveness and or by another category or attribute and may provide query access to the indexed evaluation metadata. The function evaluator module may update the metadata library in response to each evaluation of a learned function adding evaluation metadata to the metadata library or the like.

The function selector module in certain embodiments may use evaluation metadata from the metadata library to select learned functions for the combiner module to combine for the extender module to extend for the synthesizer module to include in the predictive ensemble or the like. For example in one embodiment the function selector module may select learned functions based on evaluation metrics learning metrics effectiveness metrics convergence metrics or the like. In another embodiment the function selector module may select learned functions for the combiner module to combine and or for the extender module to extend based on features of training data used to generate the learned functions or the like.

The predictive ensemble in certain embodiments provides predictive results for an analysis request by processing workload data of the analysis request using a plurality of learned functions e.g. the synthesized learned functions . As described above results from the predictive ensemble in various embodiments may include a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation and or another result. For example in one embodiment the predictive ensemble provides a classification and a confidence metric for each instance of workload data input into the predictive ensemble or the like. Workload data in certain embodiments may be substantially similar to test data but the missing feature from the initialization data is not known and is to be solved for by the predictive ensemble . A classification in certain embodiments comprises a value for a missing feature in an instance of workload data such as a prediction an answer or the like. For example if the missing feature represents a question the classification may represent a predicted answer and the associated confidence metric may be an estimated strength or accuracy of the predicted answer. A classification in certain embodiments may comprise a binary value e.g. yes or no a rating on a scale e.g. 4 on a scale of 1 to 5 or another data type for a feature. A confidence metric in certain embodiments may comprise a percentage a ratio a rating on a scale or another indicator of accuracy effectiveness and or confidence.

In the depicted embodiment the predictive ensemble includes an orchestration module . The orchestration module in certain embodiments is configured to direct workload data through the predictive ensemble to produce a result such as a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation and or another result. In one embodiment the orchestration module uses evaluation metadata from the function evaluator module and or the metadata library such as the synthesized metadata rule set to determine how to direct workload data through the synthesized learned functions of the predictive ensemble . As described below with regard to in certain embodiments the synthesized metadata rule set comprises a set of rules or conditions from the evaluation metadata of the metadata library that indicate to the orchestration module which features instances or the like should be directed to which synthesized learned function .

For example the evaluation metadata from the metadata library may indicate which learned functions were trained using which features and or instances how effective different learned functions were at making predictions based on different features and or instances or the like. The synthesizer module may use that evaluation metadata to determine rules for the synthesized metadata rule set indicating which features which instances or the like the orchestration module the orchestration module should direct through which learned functions in which order or the like. The synthesized metadata rule set in one embodiment may comprise a decision tree or other data structure comprising rules which the orchestration module may follow to direct workload data through the synthesized learned functions of the predictive ensemble .

The interface module in certain embodiments is configured to receive requests from clients to provide results to a client or the like. The interface module may provide a predictive analytics interface to clients such as an API a shared library a hardware command interface or the like over which clients may make requests and receive results. The interface module may support new ensemble requests from clients allowing clients to request generation of a new predictive ensemble from the predictive analytics factory or the like. As described above a new ensemble request may include initialization data one or more ensemble parameters a feature query question or the like for which a client would like a predictive ensemble to predict a result or the like. The interface module may support analysis requests for a result from a predictive ensemble . As described above an analysis request may include workload data a feature query question or the like a predictive ensemble or may include other analysis parameters.

In certain embodiments the predictive analytics module may maintain a library of generated predictive ensembles from which clients may request results. In such embodiments the interface module may return a reference pointer or other identifier of the requested predictive ensemble to the requesting client which the client may use in analysis requests. In another embodiment in response to the predictive analytics factory generating a predictive ensemble to satisfy a new ensemble request the interface module may return the actual predictive ensemble to the client for the client to manage and the client may include the predictive ensemble in each analysis request.

The interface module may cooperate with the predictive analytics factory to service new ensemble requests may cooperate with the predictive ensemble to provide a result to an analysis request or the like. The predictive analytics factory in the depicted embodiment includes the function generator module the feature selector module the predictive correlation module and the predictive compiler module as described above. The predictive analytics factory in the depicted embodiment also includes a data repository .

The data repository in one embodiment stores initialization data so that the function generator module the feature selector module the predictive correlation module and or the predictive compiler module may access the initialization data to generate combine extend evaluate and or synthesize learned functions and predictive ensembles . The data repository may provide initialization data indexed by feature by instance by training data subset by test data subset by new ensemble request or the like. By maintaining initialization data in a data repository in certain embodiments the predictive analytics factory ensures that the initialization data is accessible throughout the predictive ensemble building process for the function generator module to generate learned functions for the feature selector module to determine which features should be used in the predictive ensemble for the predictive correlation module to determine which features correlate with the highest confidence metrics for the combiner module to combine learned functions for the extender module to extend learned functions for the function evaluator module to evaluate learned functions for the synthesizer module to synthesize learned functions and or metadata rule sets or the like.

In the depicted embodiment the data receiver module is integrated with the interface module to receive initialization data including training data and test data from new ensemble requests. The data receiver module stores initialization data in the data repository . The function generator module is in communication with the data repository in one embodiment so that the function generator module may generate learned functions based on training data sets from the data repository . The feature selector module and or the predictive correlation module in certain embodiments may cooperate with the function generator module and or the predictive compiler module to determine which features to use in the predictive ensemble which features are most predictive or correlate with the highest confidence metrics or the like.

Within the predictive compiler module the combiner module the extender module and the synthesizer module are each in communication with both the function generator module and the function evaluator module . The function generator module as described above may generate an initial large amount of learned functions from different classes or the like which the function evaluator module evaluates using test data sets from the data repository . The combiner module may combine different learned functions from the function generator module to form combined learned functions which the function evaluator module evaluates using test data from the data repository . The combiner module may also request additional learned functions from the function generator module .

The extender module in one embodiment extends learned functions from the function generator module and or the combiner module . The extender module may also request additional learned functions from the function generator module . The function evaluator module evaluates the extended learned functions using test data sets from the data repository . The synthesizer module organizes combines or otherwise synthesizes learned functions from the function generator module the combiner module and or the extender module into synthesized learned functions for the predictive ensemble . The function evaluator module evaluates the synthesized learned functions and the synthesizer module organizes or synthesizes the evaluation metadata from the metadata library into a synthesized metadata rule set for the synthesized learned functions .

As described above as the function evaluator module evaluates learned functions from the function generator module the combiner module the extender module and or the synthesizer module the function evaluator module generates evaluation metadata for the learned functions and stores the evaluation metadata in the metadata library . In the depicted embodiment in response to an evaluation by the function evaluator module the function selector module selects one or more learned functions based on evaluation metadata from the metadata library . For example the function selector module may select learned functions for the combiner module to combine for the extender module to extend for the synthesizer module to synthesize or the like.

The example combined learned functions combined by the combiner module or the like include various instances of forests of decision trees configured to receive or process features N S a collection of combined trees with support vector machine decision nodes with specific kernels their parameters and the features used to define the input space of features T U as well as combined functions in the form of trees with a regression decision at the root and linear tree node decisions at the leaves configured to receive or process features L R.

Component class extended learned functions extended by the extender module or the like include a set of extended functions such as a forest of trees with tree decisions at the roots and various margin classifiers along the branches which have been extended with a layer of Boltzmann type Bayesian probabilistic classifiers. Extended learned function includes a tree with various regression decisions at the roots a combination of standard tree and regression decision tree and the branches are extended by a Bayes classifier layer trained with a particular training set exclusive of those used to train the nodes.

If the interface module receives a new ensemble request the data receiver module receives training data for the new ensemble as initialization data or the like. The function generator module generates a plurality of learned functions based on the received training data from different predictive analytics classes. The function evaluator module evaluates the plurality of generated learned functions to generate evaluation metadata. The combiner module combines learned functions based on the metadata from the evaluation . The combiner module may request that the function generator module generate additional learned functions for the combiner module to combine.

The function evaluator module evaluates the combined learned functions and generates additional evaluation metadata. The extender module extends one or more learned functions by adding one or more layers to the one or more learned functions such as a probabilistic model layer or the like. In certain embodiments the extender module extends combined learned functions based on the evaluation of the combined learned functions. The extender module may request that the function generator module generate additional learned functions for the extender module to extend. The function evaluator module evaluates the extended learned functions. The function selector module selects at least two learned functions such as the generated learned functions the combined learned functions the extended learned functions or the like based on evaluation metadata from one or more of the evaluations .

The synthesizer module synthesizes the selected learned functions into synthesized learned functions . The function evaluator module evaluates the synthesized learned functions to generate a synthesized metadata rule set . The synthesizer module organizes the synthesized learned functions and the synthesized metadata rule set into a predictive ensemble . The interface module provides a result to the requesting client such as the predictive ensemble a reference to the predictive ensemble an acknowledgment or the like and the interface module continues to monitor requests.

If the interface module receives an analysis request the data receiver module receives workload data associated with the analysis request. The orchestration module directs the workload data through a predictive ensemble associated with the received analysis request to produce a result such as a classification a confidence metric an inferred function a regression function an answer a prediction a recognized pattern a rule a recommendation and or another result. The interface module provides the produced result to the requesting client and the interface module continues to monitor requests.

A new instance of workload data is presented to the predictive ensemble through the interface module . The data is processed through the data receiver module and configured for the particular analysis request as initiated by a client . In this embodiment the orchestration module evaluates a certain set of features associates with the data instance against a set of thresholds contained within the synthesized metadata rule set .

A binary decision passes the instance to in one case a certain combined and extended function configured for features A F or in the other case a different parallel combined function configured to predict against a feature set G M. In the first case if the output confidence passes a certain threshold as given by the meta data rule set the instance is passed to a synthesized extended regression function for final evaluation else the instance is passed to a combined collection whose output is a weighted voted based processing a certain set of features. In the second case a different combined function with a simple vote output results in the instance being evaluated by a set of base learned functions extended by a Boltzmann type extension or if a prescribed threshold is meet the output of the synthesized function is the simple vote. The interface module provides the result of the orchestration module directing workload data through the predictive ensemble to a requesting client and the method continues.

The present disclosure may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the disclosure is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

