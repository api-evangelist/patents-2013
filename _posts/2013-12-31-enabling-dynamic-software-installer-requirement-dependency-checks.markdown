---

title: Enabling dynamic software installer requirement dependency checks
abstract: An installer for installing a software program on a computing device can be executed. The installer can perform a set of dependency checks before installing the software program. The set of dependency checks can include the validation of a pre-requisites associated with the proper execution of the software program. The pre-requisites can be a portion of a dependency content. The content can be a checklist. Before the software program is installed on the device and responsive to executing the installer, the installer can update dependency content using a custom dependency checklist. The updating of the dependency content can be performed without updating code of the software program to be installed on the device. The execution of the installer can continue using the updated dependency content for performing the set of dependency checks responsive to automatically updating the dependency content.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09182966&OS=09182966&RS=09182966
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09182966
owner_city: Armonk
owner_country: US
publication_date: 20131231
---
The present invention relates to the field of software deployment and more particularly to enabling dynamic software installer requirement dependency checks.

Enterprise software solutions are usually dependent on third party components installed within an operating system to function properly. Components can often include databases application servers and or operating systems. In many instances these components and or environments are constantly updated. These updates may occur out of cycle with updates to the enterprise software solutions. There are many execution environment configurations in which the software solution can be deployed. The large number of potential environments and continual updates of related components presents a challenge for software developers of installation tools.

To elaborate installation tools typically perform pre requisite checks during an install to ensure enterprise software can execute correctly. The dependency checks can be for specific versions of dependent third party components. When a pre requisite check fails the installer can fail to install the software. However enterprise software requires release cycle development to update option lists and dependency checkers before a release statement about supporting the new versions can be made.

The enterprise software installer can fail for reasons ranging from component version incompatibility to component configuration incompatibility even though the software being installed can execute correctly. To diagnose debug installer failures users frequently have to manually report failures to support entities. Consequently there is little shared understanding of deployment across these groups no shared automations and no reuse of previous successful cycles leading to configuration errors. This current approach is inefficient and static which results in lost productivity and decreases the quality of the user experience. It also severely hampers installation agents who may be tasked with installation responsibilities which these agents are unable to complete in a timely fashion. The disclosure provides these installation agents with needed and heretofore unavailable tools.

One aspect of the disclosure can include a system an apparatus a computer program product and a method for enabling dynamic software installer requirement dependency checks. An installer for installing a software program on a computing device can be executed. The installer can perform a set of dependency checks before installing the software program. The set of dependency checks can include the validation of a pre requisites associated with the proper execution of the software program. The pre requisites can be a portion of dependency content. The content can be a checklist. Before the software program is installed on the device and responsive to executing the installer the installer can update dependency content using the checklist. The updating of the dependency content can be performed without updating code of the software program to be installed on the device. The execution of the installer can continue using the updated dependency content for performing the set of dependency checks responsive to automatically updating the dependency content.

Another aspect of the disclosure includes a method an apparatus a computer program product and a system for enabling dynamic software installer requirement dependency checks. An installation engine can be configured to dynamically update dependency content associated with a software installer installing a software program. The installer can perform a set of dependency checks before installing the software program. The set of dependency checks can include the validation of a pre requisites associated with the proper execution of the software program. The pre requisites can be a portion of dependency content. In the disclosure a data store may exist for persisting updated dependency content customized for installing the software program on a specific computing device or set of computing devices.

The present disclosure is a solution for enabling dynamic software installer requirement dependency checks. Dynamic dependency checks are ones able to be selectively skipped modified or executed during an installation process per installing agent determinations. The dynamic dependency checks are able to be performed in a network disconnected installation situation as well as in situations where software installations are network assisted e.g. installations occurring over a network or installations that utilize network acquired updated components .

In embodiments dependency check information is separated from a software installer permitting the dependency check information to be independently updated. The disclosure can permit the selective omission of dependencies. That is the installer can be tailored to the deployment environment maximizing the chance of a successful install. In one instance in the event of installer failure an installation report can be generated and conveyed to an appropriate support entity. In the instance the installation report can be machine readable permitting automated analysis and solution recommendation generation.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions.

These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Turning to the figures shows an installation scenario for installing software with dependencies in accordance with embodiments of the disclosure. The installation may be performed by an installing agent from portable medium such as a set of one or more installation CDs compact disks DVDs digital video disks portable FLASH drives a portable hard drive and the like. The portable medium includes the software having a set of dependencies . A reader of a computing system reads the portable storage medium and locally installs the software with dependencies on a storage medium of system . The installation process from a portable medium may be a stand alone process able to be performed on a computing system which is not necessarily connected to a network. Network assisted installations that rely on the dependency checklist are contemplated in some embodiments.

During installation the installing agent is presented with an installation interface which shows a dependency checklist . The checklist may have a number of dependency checks enabled by default which the installing agent may choose to disable or skip. Skipping one or more of these dependency checks permits installation to continue. This is a significant departure from traditionally installers and installation processes which terminate an installation process whenever any of the dependency checks fail. In other words the dependency checklists places new level of control over the installation checks with the installing agent . Different levels of granularity such as a hierarchical breakdown of specific checks into sub checks are contemplated. Any number of software installation related checks which may not be limited to dependency based checks may be included in checklist .

In one embodiment a custom dependency checklist may be created for an installation which includes updated or changed checking algorithms for specific installations. Thus if problems with dependency checks which are unrelated to an ability to install the actual software are discovered tailored solution may be created without affecting or changing the software being installed. Since the installing team of which installing agent is a member may not legally or technically be able to make changes to the underlying software the ability to modify installation dependency checks without changing underlying software may be significant. Further by integrating a user interface for an dependency checklist enables installing agents of moderately low technical skill levels with regard to software coding to successfully perform tailored installations which in absent of the disclosed innovations are highly challenging to impossible.

The software installation progresses in accordance with the dependency checklist selections. That is one or more of the default dependencies checks may be skipped or replaced by custom installation checks. Additional installation checks may be added via checklist selections in one embodiment. After or while the software installation process occurs one or more actions may be recommended and or prompted for as represented by installation actions interface . The actions may include additional actions to be taken when possible such as a future update of one or more components for which dependency checks were skipped. Additionally the actions may trigger tailored actions specific to the installation process.

User interface represents a post installation report which is able to be generated during the installation process. The report may indicate a successful installation with one or more of the dependency checks turned off and or with alternative checks or actions enabled.

It should be understood that the disclosure can streamline the software release cycle process by allowing support test teams to perform updates to the dependencies e.g. pre requisites for installation of the software and make them available to customers e.g. end user . That is this process saves time from escalating customer issues saves developers from having to rebuild installers create fix packs release updated configuration files or make other simple updates that do not require code changes. This process also decreases the number of customer support communication e.g. calls emails by automatically updating the dependency checklist. In a use case the disclosure utilized by a first customer would automatically log a failure if a new version of an operating system is in use and is not detected by the installer as a supported version. In the use case once the failure has been analyzed and the update is made to the list of dependencies every customer after that can successfully be able to install the software on the new version of the OS. The logging by the first customer may occur dynamically during installation in a network connected installation or may occur post installation. Thus even remote installations that may lack network connectively can result in customer installing agent provided feedback.

As used herein installer can be a computer program which installs files such as applications drivers or other software onto a computer. In one embodiment installer can install files within the installer . In another embodiment installer can install and or execute the contents of a software package to be installed. In one instance installer can include a resource such as a dependency checklist . In the instance the resource can be dynamically or manually updated without modifying the installer . It should be appreciated that installer can include a software updater which can apply updates to existing installed software.

Checklist can include one or more elements which can be associated with a successful execution of installer . In one embodiment checklist can include one or more software dependencies for a software package. Dependencies within the checklist can include software editions software configurations software features software component presence operating system OS registry settings and the like. For example checklist can be utilized to determine if a pre requisite operating system software version e.g. version 7.1 is present. In one embodiment checklist can be an Extensible Markup Language XML document which can be accessed by the installer during execution. In the embodiment a dependency can be associated with one or more criteria actions and the like. For example when an operating system version is older than version 7.1 the software installer can fail gracefully and perform one or more clean up actions e.g. Action A . It should be appreciated that checklist is not limited to the XML format and can conform to any traditional and or proprietary format. For example checklist can conform to a structured text document e.g. comma delimited format .

Installer can execute within execution environment of computing device . Environment can include but is not limited to installed software operating system software and the like. It should be appreciated that installed software and or environment can vary based on version configuration edition and the like. It should be appreciated that installer can perform one or more traditional and or proprietary operations during execution. Operations can include but is not limited to verifying system requirements presence validating existing versions of the software validating program files and folders presence creating and or updating program files and folders adding configuration data e.g. configuration files registry entries environment variables creating links e.g. shortcuts or bookmarks configuring components that run automatically e.g. daemons or services performing product activation and the like.

In scenario the software installer can be obtained from a software provider . Installer can include a dependency checklist which can be obtained at the time of installer conveyances and or during installer executions. For example a software installer can be downloaded from a third party Web site and checklist can be obtained from software provider upon execution of the installer . It should be appreciated that checklist can be obtained as a separate resource from installer . In one instance checklist can be persisted within device . In another instance manual placement of the checklist is contemplated for installations where no access to the internet or other external network is available. In still another instance checklist can be persisted remotely and can be accessed via a unique address e.g. Uniform Resource Locator .

In one embodiment the checklist can automatically replace an existing checklist. In another embodiment user can be prompted to confirm replacement of an existing checklist with the checklist . In another embodiment prior to running the installer the user can manually replace an existing checklist with the checklist .

In one embodiment the checklist can exposes a full list of dependencies to be checked. In the embodiment if any of checks prove to be incorrect or out of date users can disable any of the checks defined in the list allowing a bypass and continue with a successful installation.

In scenario an end user can interact with software installer to perform a custom software install. For example end user can utilize an interface to dynamically adjust dependencies associated with the installer. In interface dependencies within checklist can be presented. In one configuration of the interface dependency selection can be permitted. In the configuration one or more dependencies can be omitted enabling customized dependency checking. For example a user can select an operating system version check to be skipped during installer execution. In one use case if the user is trying to install using a newer version of a software dependency the installer can throw an error as the dependency is not marked as supported. In the use case the user can force the installer to skip the check and complete the installation.

When installer dependency check and or installer execution is successful e.g. success an interface can be presented. In interface dependency check details can be presented. For example a summary e.g. Omitted OS version check of the omitted dependencies can be presented within interface . In one embodiment installer can permit the execution of installed software via an interface push button. For example installer can present a Run software button upon successful execution of dependency check and or installer execution.

When installer dependency check and or installer execution is unsuccessful e.g. failure an interface can be presented. In interface dependency check details can be presented. For example a summary e.g. DB dependency failed of the dependencies check can be presented within interface . In one configuration of the instance installer can permit the conveyance of an installation report via an interface push button. For example installer can send automated feedback about a failure mode of the installer upon unsuccessful execution of dependency check and or installer executions. In one instance one or more actions can be associated with failure . For example a rollback action can be performed to restore environment to a previous state.

In one embodiment any failures can trigger the installer to automatically return a log file e.g. installation report to support detailing the failure and its possible causes. In case the installer cannot communicate with provider the log file can be saved to a temporary location and made available for the user to send to support. That is provider and or software installer support personnel can then review the failures and determine potential fixes needed to the installer dependency checker checklist .

It should be appreciated that installation report can include but is not limited to metrics logging data dependency checklist user selections crash dump data and the like.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. In one embodiment interface can be a screen of an IBM RATIONAL AUTOMATION FRAMEWORK FOR WEBSPHERE. It should be appreciated that the installer can be associated with fix packs interim fixes e.g. patches and the like. It should be appreciated that installer can be an attended installer silent installer an unattended installer an automated installer a network installer and the like. In one embodiment the disclosure can perform the functionality described herein via an executable script an executable binary and the like.

In step a software installer executing within an executable environment can be identified. The software installer can be a self extracting installer a software management tool of a software package system and the like. In step if a dependency checklist associated with the installer is available the method can continue to step else proceed to step . In step a dependency checklist can be obtained. The checklist can be obtained manually and or automatically. The checklist may be included in an installation disk or a companion disk read during installation. In one embodiment the checklist may manually obtained by a user through a Web session e.g. HTTP File Transfer Protocol FTP session and the like. In one configuration of the embodiment the checklist can be obtained via a file selection dialog within an interface of the installer. In another embodiment the checklist can be obtained dynamically via traditional and or proprietary automated mechanisms. In one instance the automated mechanism can utilize a trusted list of servers hosting the checklist which can be persisted within the checklist. In the instance the server list can be dynamically updated when the checklist is updated. It should be appreciated that preferences can be configured to select servers by priority user preference and the like.

In step the checklist can be selected. In one instance the checklist can be associated with a profile. In the instance the appropriate profile can be parsed and the checklist can be selected. In step the checklist can be presented. The checklist can be presented in a traditional and or proprietary manner. For example the checklist can be presented within selection checkboxes which can enable customization of the checklist. In step a dependency can be selected to be omitted. In step the installation can be performed by the installer. In step one or more recommended actions can be executed. In step an installation report can be generated. In step a notification of the installation can be presented. In step an installation report can be conveyed to the appropriate entities. In step the method can end.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated that method can include one or more optional steps permitting the functionality of the method is retained. In one embodiment method can be a functionality of an installation wizard.

Although installation engine is shown in as being an engine of dependency server embodiments are contemplated where engine is a component of the software installer . Similarly the unified checklist shown in network connected repository may be a file or set of files stored on a portable storage medium which is readable by computing device . In other words embodiments are contemplated where the computing device upon which an installation occurs is not connected to any network and where installation occurs from portable storage medium s read by a reader of computing device .

Dependency server can be a hardware software entity for executing installation engine . Server functionality can include but is not limited to authentication file sharing load balancing security functionality and the like. Server can include but is not limited to an installation engine a data store an interface and the like. In one instance server can be a component of a software repository .

Installation engine can be a hardware software element for permitting dynamic dependency checks associated with an installer . Engine functionality can include but is not limited to installer execution installer registration and the like. In one embodiment engine can be a component of an installer software Application Programming Interface API . In one instance engine can utilize existing access control lists ACL to securely update dependency checklist .

Dependency manager can be a hardware software entity for managing dependencies associated with checklist . Manager can include but is not limited to dependency addition dependency deletion dependency modification and the like. In one instance manager can be a screen of a software development tool. For example manager can be an interface of an installer configuration tool.

Feedback element can be a hardware software element for obtaining and or analyzing installation report associated with installer. Element functionality can include but is not limited to metric collection metric analysis dependency checklist analysis lexical parsing and the like. In one instance element can parse a log file associated with an installation report of a successful or failed installer execution. For example the element can parse an XML log file to determine dependency failures. In another embodiment element can be utilized to compare two or more installation reports to determine dependency checklist failures success and the like. In the embodiment the element can present a tiered summary of multiple installation reports. For example the summary can be an interactive document e.g. HTML permitting installer developers to analyze discrete portions of an installation report.

Reconciliation component can be a hardware software entity for resolving dependency check conflicts. Component functionality can include but is not limited to dependency check recommendation dependency checklist management and the like. In one embodiment component can be utilized to perform dependency checklist updates. For example the component can be employed to push updates to client installers. In another embodiment the component can permit the assignation of a dependency checklist to an installer.

Settings can be one or more rules for establishing the behavior of system engine and the like. Settings can include but is not limited to dependency manager options feedback element settings reconciliation component options and the like. In one embodiment settings can be presented within an interface computing device interface and the like. In one instance settings can be heuristically determined based on historic settings.

Data store can be a hardware software component able to persist table settings and the like. Data store can be a Storage Area Network SAN Network Attached Storage NAS and the like. Data store can conform to a relational database management system RDBMS object oriented database management system OODBMS and the like. Data store can be communicatively linked to server in one or more traditional and or proprietary mechanisms. In one instance data store can be a component of Structured Query Language SQL compliant database.

Dependency table can be one or more software entity dependencies associated with installer . Table can include but is not limited to a software build identifier a software edition a software version a dependency identifier an action identifier an action and the like. For example entry can permit a table to be linked to a software build e.g. Build A with a dependency e.g. Dependency A and an action e.g. Action A which can be performed based on an installer outcome. Table can be utilized to generate a dependency checklist for an installer .

Interface can be a user interactive component permitting interaction and or presentation of table checklist and the like. Interface can be present within the context of a Web browser application an integrated development environment IDE and the like. In one embodiment interface can be an IBM WEBSPHERE APPLICATION SERVER WAS admin console page. Interface capabilities can include a graphical user interface GUI voice user interface VUI mixed mode interface and the like. In one instance interface can be communicatively linked to server computing device and the like.

Computing device can be a software hardware element for executing software installer . Device can include but is not limited to input components e.g. keyboard interface an application output components e.g. display and the like. Device hardware can include but is not limited to a processor a non volatile memory a volatile memory a bus and the like. Computing device can include but is not limited to a desktop computer a laptop computer a mobile phone a mobile computing device a portable media player a PDA and the like. It should be appreciated that installer can be a binary executable. Installer can conform to any executable programming language including but not limited to JAVA C C PERL and the like. In one instance software installer can be a portion of a package management system.

Software repository can be a hardware software entity for obtaining installer and or dependencies . Repository can include but is not limited to a unified checklist an interface not shown and the like. Repository can be a storage location from which software packages can be retrieved and installed on a computer by installer . The software repository may include functions of a source control system. In one embodiment repository can convey an appropriate checklist to device enabling dynamic tailoring of installer . In other embodiments the software repository is not needed and checklist information is manually provided and or is recorded in portable storage medium s used during an installation process.

Network can be an electrical and or computer network connecting one or more system components. Network can include but is not limited to twisted pair cabling optical fiber coaxial cable and the like. Network can include any combination of wired and or wireless components. Network topologies can include but is not limited to bus star mesh and the like. Network types can include but is not limited to Local Area Network LAN Wide Area Network WAN VPN and the like. Embodiments are contemplated where no network connectively is required such as when the dependency checklist used during an installation is stored upon and or loaded from a portable storage medium.

In one embodiment the disclosure can communicate with existing software deployment and management tools to enable accurate updating of dependency check.

Drawings presented herein are for illustrative purposes only and should not be construed to limit the invention in any regard. It should be appreciated that system can communicate utilizing traditional and or proprietary protocols including but not limited to Transport Control Protocol TCP Internet Protocol IP Hypertext Transport Protocol HTTP and the like. It should be appreciated that one or more components within system can be optional components permitting that the disclosure functionality be retained. It should be understood that engine components can be optional components providing that engine functionality is maintained. It should be appreciated that one or more components of engine can be combined and or separated based on functionality usage and the like. System can conform to a Service Oriented Architecture SOA Representational State Transfer REST architecture and the like.

The flowchart and block diagrams in the illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

