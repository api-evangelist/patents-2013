---

title: Tracking injected threads to remediate malware
abstract: Injected threads are tracked to detect malware that injects malicious code into the address space of a legitimate process. Relationships between threads of processes executing on a client and files stored by the client are mapped to identify files that create threads in executing processes. The address space of a process is analyzed to identify legitimate memory regions in the address space. A suspicious thread referencing a suspicious memory region of the address space outside of the legitimate memory regions is identified. The suspicious memory region is scanned to identify malware. The mapped relationships are used to identify the file that created the thread that referenced the address space in which the malware was identified. The malware in the file is remediated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09411953&OS=09411953&RS=09411953
owner: Symantec Corporation
number: 09411953
owner_city: Mountain View
owner_country: US
publication_date: 20130524
---
This invention pertains in general to computer security and in particular to remediating malware that uses process thread injection to avoid detection.

There is a wide variety of malicious software malware that can attack modern computers. Malware threats include computer viruses worms Trojan horse programs spyware adware crimeware and phishing websites. Malware can for example surreptitiously capture important information such as logins passwords bank account identifiers and credit card numbers. Similarly the malware can provide hidden interfaces that allow the attacker to access and control the compromised computer.

Modern malware is often targeted and delivered to only a relative handful of computers. For example a Trojan horse program can be designed to target computers in a particular department of a particular enterprise. Moreover mass distributed malware can contain polymorphisms that cause the malware to vary over time. Such malware is difficult for security software to detect because there are few instances of the same malware and the security software might not be configured to recognize the particular instance that has infected a given computer.

Malware can also use additional techniques to evade detection. Once such technique is called remote thread injection. Here the malware injects the malicious code into the address space of a legitimate i.e. non malicious process. Even if the security software detects the injected malicious code it is difficult for the security software to identify the file that caused the injection. As a result the security software cannot fully remediate the malware.

Disclosed embodiments include a method client and non transitory computer readable storage medium for detecting malicious files. An embodiment of the method comprises identifying a suspicious thread referencing a suspicious memory region in an address space of a process executing on the client scanning the suspicious memory region in the address space of the process referenced by the suspicious thread for malware and responsive to the scanning detecting malware in the suspicious memory region and identifying a malicious file associated with the suspicious thread.

An embodiment of the client comprises a non transitory computer readable storage medium storing computer program modules executable to perform steps comprising identifying a suspicious thread referencing a suspicious memory region in an address space of a process executing on the client scanning the suspicious memory region in the address space of the process referenced by the suspicious thread for malware and responsive to the scanning detecting malware in the suspicious memory region and identifying a malicious file associated with the suspicious thread. The client further comprises a computer processor for executing the computer program modules.

An embodiment of the non transitory computer readable storage medium stores computer program modules executable to perform steps comprising identifying a suspicious thread referencing a suspicious memory region in an address space of a process executing on the client scanning the suspicious memory region in the address space of the process referenced by the suspicious thread for malware and responsive to the scanning detecting malware in the suspicious memory region and identifying a malicious file associated with the suspicious thread.

The figures depict an embodiment for purposes of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

The malware file executes as a process on the client. The file may start executing using one or more of a variety of techniques. For example the malware file may appear to be legitimate not malicious and start executing at the direction of the user of the client. The malware file may also start executing without the user s knowledge due to an exploit that comprises other software executing on the client.

In addition the client executes one or more legitimate files as processes. illustrates one such legitimate process labeled LEGITIMATE.EXE . The legitimate processes may include processes that exist as part of the client s operating system. For example EXPLORER.EXE and SERVICES.EXE are two such legitimate processes associated with variants of the Microsoft Windows operating system.

When the malware file executes it unpacks e.g. decrypts and decompresses its malicious code into an address space in the memory of the client from which the malicious code can be executed. However the malware file does not unpack the malicious code into the address space of the process for the malware file . Instead the malware file uses tools provided by the client s operating system to unpack the malicious code into the address space of the legitimate process . In addition the malicious file uses additional operating system tools to create a remote thread in the address space of the legitimate process . This remote thread executes and in turn executes the malicious code to perform malicious actions. The malware file may then terminate its process leaving only the injected malicious code.

The client is an electronic device that can host malware. In one embodiment the client is a conventional computer executing for example a Microsoft Windows compatible operating system OS Apple OS X and or a Linux distribution. The client can also be another device having computer functionality such as a tablet computer mobile telephone video game system etc. The client typically stores numerous computer files that can host malicious software.

The client executes a security module for detecting and remediating malware on the client. The security module can be incorporated into the OS of the client or part of a separate security package. In one embodiment the security module is provided by the same entity that operates the security server . The security module communicates with the security server via the network to obtain detection data for detecting malware at the client. The detection data include malware signatures describing attributes of malware that can be used to detect an instance of the malware at the client.

In one embodiment the security module monitors the client using the detection data to detect malware attacks that use remote thread injection. Generally the security module monitors the client to detect when threads are created. When the security module detects a thread creation it records the identity of the process executing on the client that created the thread and the file on the client that executed as the process. Thus the security module maintains a mapping of threads to files that created the threads.

In addition the security module examines the address spaces of processes executing on the client . This examination identifies memory regions within the processes address spaces that contain known legitimate code. For example the examination may reveal regions within a process s address space that includes code loaded from known legitimate dynamic link libraries DLLs provided by the operating system.

The security module also enumerates threads of processes executing on the client . For each thread of a process the security module determines whether the thread is associated with a region in the process s address space that contains known legitimate code. If the thread is not associated with a region containing known legitimate code the thread and the region with which the thread is associated are suspicious. Accordingly the security module examines the region using the detection data to determine whether the region contains malware. If so the security module uses the mapping of threads to files that created the threads to identify the file on the client that created the thread associated with the region that contains malware. This file likely contained the malware that was injected into the legitimate process.

The security module then remediates the malware in the identified file. The security module can perform one or more actions to remediate the malware such as quarantining the malware or removing the malware file from the client . The security module may also generate a report indicating that the identified file contains malware. The report notifies a user of the client and or another entity such as an administrator of the client of the detected malware.

The security server is a hardware device and or software module configured to generate and distribute the detection data to the client . An example of the security server is a web based system providing security software and services to the security module of the client . Depending on the embodiment one or more of the functions of the security server can be provided by a cloud computing environment. As used herein cloud computing refers to a style of computing in which dynamically scalable and often virtualized resources are provided as a service over the network . Functions attributed to the client and security module can also be provided by the cloud computing environment.

The network represents the communication pathways between the security server client and any other entities on the network. In one embodiment the network is the Internet and uses standard communications technologies and or protocols. In other embodiments the entities use custom and or dedicated data communications technologies.

A thread mapping module maps relationships between threads of processes executing on the client and files stored by the client. In one embodiment the thread mapping module hooks into the operating system kernel in a manner that allows it to detect each thread creation event performed by the operating system and to collect data about each event. The collected data includes the identity of the created thread the identity of the process that created the thread and the identity of the file stored by the client that was executed to form the process also known as the file that backed the process . The thread mapping module maintains a database that describes or maps the relationship between the files processes and threads. Thus given an identifier ID of a thread the mapping in the database can identify the process that created the thread and in turn the file that backed the process. In one embodiment the thread mapping module provides a service that receives a thread ID and responds with the identity of the file backing the process that created the identified thread.

An enumeration module identifies processes and threads executing on the client . In one embodiment the enumeration module interacts with an interface e.g. an application programming interface or API provided by the operating system of the client to enumerate all of the processes currently executing on the client. The enumeration module also interfaces with the operating system to enumerate the threads executing within the address space of the processes. Depending upon the embodiment the enumeration module may enumerate the threads of all or of a selected subset of the processes executing on the client . For example the security module may not enumerate threads of processes associated with the security module and or other processes. Each process and thread is identified by a unique ID typically assigned by the operating system.

A process analysis module analyzes the address spaces of processes executing on the client such as the processes enumerated by the enumeration module . For a given process the process analysis module identifies memory regions within the address space of the process that are known to contain legitimate code i.e. to not contain malware . That is the process analysis module identifies regions that are backed by code sections known to be legitimate. In one embodiment the process analysis module builds a map that indicates the locations of these legitimate regions in the process s address space. The process analysis module may build this map by interacting with an interface provided by the operating system that identifies the DLLs and or other code sections loaded by a process and the regions in the process s address space occupied by the loaded code sections.

A thread analysis module analyzes the enumerated threads of a process to identify suspicious threads. To analyze a given thread an embodiment of the thread analysis module examines the call stack of the thread to determine whether the call stack contains a reference to location in the process s address space outside of the legitimate memory regions. Specifically the thread analysis module walks the call stack of the thread to determine the return address of the thread i.e. the memory address in the process s address space to which control returns when the thread finishes execution . The thread analysis module then uses the map of legitimate memory regions generated by the process analysis module to determine whether the return address points to a location within a legitimate region. If the return address is not within a legitimate region the return address is designated as suspicious. 

The thread analysis module designates threads having suspicious return addresses as suspicious because such threads might contain malware. Suspicious threads are not necessarily malicious because some legitimate processes contain threads with suspicious return addresses. For example processes that perform just in time JIT compilation of source code might contain threads with suspicious return addresses.

A scanning module identifies suspicious regions in a process s address space and scans such regions for malware. In one embodiment the scanning module identifies suspicious regions associated with suspicious threads of the process. Specifically given a suspicious thread having a suspicious return address the scanning module determines the dimensions i.e. boundaries of the memory region containing the suspicious location. In one embodiment the scanning module determines the dimensions by interfacing with the operating system to identify the dimensions of the allocated block of memory containing the suspicious return address. For example the scanning module may call the VirtualQueryEx function provided by the Microsoft Windows operating system to determine the dimensions of the region containing the suspicious address. The region defined by these dimensions is the suspicious region.

The scanning module scans the suspicious region for malware. The suspicious region presumably contains the executable code of the suspicious thread. Moreover the code may be unpacked executable code introduced into the process via a malicious remote thread injection attack. The scanning module therefore scans the suspicious region using the detection data received from the security server to determine whether the suspicious region contains malware. In one embodiment the scanning module conducts the scan by constructing a virtual portable executable PE file containing the data in the suspicious region. The scanning module then scans the virtual PE file using detection data adapted to find malware within PE files.

If the scan detects malware then the malware was likely injected into the process by malicious code in an executable file stored by the client . A file identification module determines the identity of the file that injected the malware. To perform this task the file identification module determines the ID of the suspicious now known to be malicious thread having the return address to the memory region found to contain malware. The file identification module can determine the ID e.g. by querying the operating system. The file identification module then accesses the service provided by the thread mapping module to determine the identity of the file backing the process that created the malicious thread. The identified file likely contains the malware that was injected into the legitimate process. Thus the file on the client containing the malware is identified even though the file is packed in a way that hides the malware.

A remediation module remediates the malware. The remediation module may perform actions including generating a report notifying a user of the client and or another entity such as an administrator of the client of the detected malware. The remediation module may also block malicious actions performed by the malware quarantine and or delete the file containing the malware and or perform other actions to remove the malware from the client . The remediation module may further provide a sample of the file and or another description of the malware to the security server for further analysis.

The security module maps relationships between threads of processes executing on the client and files stored on the client. In one embodiment the security module detects thread creation events performed by the operating system of the client . In addition the security module collects data about each created thread including the identities of the thread the executing process that created the thread and the file that backed the process. The security module maintains a database that maps the relationships between the files processes and threads described by the collected data. The security module may detect the thread creation events in the background asynchronously from the other steps described in .

The security module also enumerates processes executing on the client . In one embodiment the security module interfaces with the operating system of the client to enumerate all of the processes currently executing on the client. The security module may enumerate the processes at specified times and or upon the occurrence of a specified event. For example the security module may enumerate the processes every few minutes upon detection of a file being downloaded to the client upon detection of a suspicious event on the client or at other times. The security module additionally enumerates the threads of the enumerated processes. The security module may enumerate the threads of all processes executing on the client or for a selected subset of the processes.

For a given process for which the threads were enumerated the security module identifies memory regions within the address space of the process that are known to contain legitimate code. The security module identifies the DLLs and or other code sections loaded by the process and the regions in the process s address space occupied by the loaded code sections. These regions are legitimate regions because they are known to contain legitimate code.

The security module uses the legitimate memory regions to identify any suspicious threads of the process. In one embodiment the security module examines the call stacks of the enumerated threads of the process to determine whether any thread contains a reference to a location in the process s address space outside of the legitimate memory regions. A reference to a location outside of the legitimate regions is suspicious. For example if the return address in a thread s call stack points to a location outside of a legitimate memory region both the return address and the thread are suspicious.

The security module identifies suspicious memory regions of a process s address corresponding to the suspicious threads. For a given suspicious thread having a suspicious location e.g. return address the security module determines the dimensions of the memory region containing that location in the process s address space. The security module then scans this suspicious memory region for malware. If the scan detects malware it means the suspicious thread was likely injected into the process by a malicious executable file stored by the client .

The security module therefore identifies the file associated with the suspicious thread. One embodiment of the security module queries the operating system to determine the ID of the suspicious thread. The security module then uses the map describing the relationships between threads of processes executing on the client and files stored on the client to determine the file associated with the suspicious thread. The security module remediates the file by e.g. removing the file associated with the suspicious thread from the client .

The storage device is a non transitory computer readable storage medium such as a hard drive compact disk read only memory CD ROM DVD or a solid state memory device and stores computer files containing executable code and or data. The memory holds instructions and data used by the processor . The pointing device is a mouse touch sensitive display or other type of pointing device and is used in combination with the keyboard to input data into the computer system . The graphics adapter displays images and other information on the display . The network adapter couples the computer to the network .

As is known in the art a computer can have different and or other components than those shown in . In addition the computer can lack certain illustrated components. In one embodiment a computer acting as a security server is formed of multiple blade computers and lacks a keyboard pointing device graphics adapter and or display . Moreover the storage device can be local and or remote from the computer such as embodied within a storage area network SAN .

This description uses the term module to refer to computer program logic for providing a specified functionality. A module can be implemented in hardware firmware and or software. A module is typically stored on a computer readable storage medium such as the storage device loaded into the memory and executed by the processor .

The above description is included to illustrate the operation of the preferred embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention.

