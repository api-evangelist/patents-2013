---

title: Virtual machine image analysis
abstract: Techniques for analyzing virtual machine images are described. In one embodiment, a subset of settings is extracted from one or more virtual machine images, the virtual machine images store therein values of the settings. The settings are used by software executing in virtual machines of the virtual machine images, respectively. A target one of the virtual machine images is selected and target values of the settings are obtained from the target virtual machine image. Sample values of the settings are obtained from a plurality of virtual machine images. The subset formed by identifying similarities and differences of the values between the virtual machine images.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09207962&OS=09207962&RS=09207962
owner: Microsoft Technology Licensing, LLC
number: 09207962
owner_city: Redmond
owner_country: US
publication_date: 20131211
---
This application is a continuation of prior application Ser. No. 13 171 366 filed Jun. 28 2011 which was pending and allowed at the time this application was filed. The aforementioned application is incorporated herein in its originally filed form.

In the field of managing software on virtual machines the large number of variables in a virtual machine guest operating system can make it difficult for a person to distinguish between software settings that are relevant or significant with respect to some arbitrary purpose. For example a person experimenting with the configuration settings of a guest operating system of a virtual machine and or application software installed thereon may over time make many configuration changes for example directly by manual editing as side effects to tasks such as installing or uninstalling software and so forth. As these configuration or setting changes accumulate it can be difficult to retrace one s steps and identify what may have caused a virtual machine to begin operating in a desirable or undesirable state.

Not only can it be difficult to identify among the many changing state parameters of a virtual machine those that have meaning or significance it can also be difficult to distinguish between different types or categories of changeable values on a virtual machine. Some may be true configuration parameters that a guest operating system or application software may read to determine how to function. Others may contain operational data that is outputted by the guest operating system such as performance metrics timestamps usage counts and so forth. Even among these it may be difficult to determine for purposes of evaluating a virtual machine operational data that is correlated with the virtual machine s desirable or undesirable current state and operational data that is effectively independent of the virtual machine s state.

Techniques related to using peer pressure type algorithms to analyze virtual machine images are discussed below.

The following summary is included only to introduce some concepts discussed in the Detailed Description below. This summary is not comprehensive and is not intended to delineate the scope of the claimed subject matter which is set forth by the claims presented at the end.

Techniques for analyzing virtual machine images are described. In one embodiment a subset of settings is extracted from one or more virtual machine images the virtual machine images store therein values of the settings. The settings are used by software executing in virtual machines of the virtual machine images respectively. A target one of the virtual machine images is selected and target values of the settings are obtained from the target virtual machine image. Sample values of the settings are obtained from a plurality of virtual machine images. The subset formed by identifying similarities and differences of the values between the virtual machine images. Similarities and differences may be statistically analyzed for example using Bayesian estimations.

Many of the attendant features will be explained below with reference to the following detailed description considered in connection with the accompanying drawings.

Embodiments discussed below relate to analyzing virtual machine images. As mentioned in the Background it can be difficult for a user to sift through the many observable values on a virtual machine to identify which values are for settings or parameters that are of interest and those that are of little interest. To identify meaningful settings from among the many that may be present on a virtual machine Bayesian based peer pressure techniques are used to rank and categorize parameters or settings of a virtual machine. Discussion will proceed with an over view of machine virtualization followed by a discussion of peer pressure algorithms followed by explanation of how peer pressure algorithms are applied to data extracted from virtual machine images.

The virtualization layer may be of any variety of known or future implementations such as Hyper V Server VMWare ESX Server Xen Oracle VM etc. The architecture of the virtualization layer may a hosted type with a virtual machine monitor VMM running on a host operating system or a bare metal type with a hypervisor or the like running directly on the hardware of the computer . As used herein the term virtual machine refers to a system type virtual machine that simulates any specific hardware architecture e.g. x86 able to run native code for that hardware architecture to the guest the virtual machine may be nearly indistinguishable from a hardware machine. Virtual machines discussed herein are not abstract or process type virtual machines such as Java Virtual Machines.

The virtualization layer performs the basic function of managing the virtual machines and sharing of the hardware by both itself and the virtual machines . Any of a variety of techniques may be used to isolate the virtual machines from the hardware . In one embodiment the virtualization layer may provide different isolated environments i.e. partitions or domains which correspond to virtual machines . Some of the virtualization layer such as shared virtual device drivers inter virtual machine communication facilities and virtual machine management APIs application programming interfaces may run in a special privileged partition or domain allowing for a compact and efficient hypervisor. In other embodiments functionality for virtual machine management and coherent sharing of the hardware may reside in a monolithic on the metal hypervisor.

The virtualization layer manages execution of the virtual machine handling certain calls to the guest s kernel hypercalls etc. and coordinating the virtual machine s access to the underlying hardware . As the guest and its software run the virtualization layer may maintain state of the guest on the virtual disk image when the guest or an application run by the guest writes data to disk the virtualization layer translates the data to the format of the virtual disk image and writes to the image.

The virtualization layer may perform a process for shutting down the virtual machine . When an instruction is received to stop the virtual machine the state of the virtual machine and its guest is saved to the virtual disk image and the executing virtual machine process or partition is deleted. A specification of the virtual machine may remain for a later restart of the virtual machine .

Capturing a snapshot may be performed with known techniques or with existing implementations of virtualization technology. Notably snapshot may include any information available in an equivalent running physical machine. For example snapshot may include a copy of the memory of the virtual machine which may include executing processes kernel data structures or any information in the virtualized physical memory of the virtual machine . In addition the snapshot may include information captured from physical or virtual devices used by the virtual machine including register values buffer contents etc. In some implementations the snapshotting process may also capture information about the virtual physical environment of the virtual machine such as virtual CPU information number of virtual cores or CPUs amounts of memory and storage virtual devices virtual network interface cards BIOS virtual mother board device drivers and others. Some virtualization implementations may link a snapshot to the virtual machine s disk image and the snapshot may comprise storage blocks of the executing virtual machine that differ from the virtual machine s disk image. In sum snapshot is a persistent object such as a file that contains the captured working state of a virtual machine. Most virtualization implementations allow a snapshot to be loaded and executed the virtual machine executing the snapshot possible a virtual machine other than the original from which the snapshot was captured begins executing as though the original virtual machine at the time the snapshot was taken. In other words the state of an executing virtual machine may be captured and later resumed in the same or a new virtual machine.

It should be noted that in some virtualization implementations snapshots and disk image files are functionally interchangeable. Therefore as used herein the term virtual machine image will refer to both special format files that a virtualization layer provides as a virtual disk to a virtual machine as well as snapshots captured from executing virtual machines.

At a step a target machine is selected by a user for instance a faulty machine. At step target relevant setting value pairs are extracted. In general any type of setting value pairs locatable in a virtual machine image may be extracted as used herein setting will also refer to operational state or write output data such as log files or any guest application state or output that is persisted to a virtual machine image . For example a setting value pair may be a registry key and its content value a file directory and the name of a file in the directory a file and the first line of the file a log file and the number of lines in the log file a virtualization parameter e.g. memory allocation and its value and so forth. That is the setting or parameter is some information that identifies the location on the virtual machine image from which the corresponding value came and the value is the content at that location.

At step the target setting value pairs may be canonicalized. This merely involves putting the settings and values in some canonical form to allow them to be accurately compared semantically. For example variations in spelling or form may be corrected e.g. 1 might be converted to 1 values might be anonymized and so forth.

At step a sample set of related virtual machines is identified and a sample set of setting values pairs or just values corresponding to the settings from step are obtained. The virtual machines may be identified on any basis perhaps user defined. For example virtual machines that are based on a same virtual machine image such as a golden image may be selected. Virtual machines that have a same application may be identified. A set of virtual machines selected by a use may be identified. The values are then extracted. The values may be pre extracted from virtual machine images of the identified virtual machines and then stored in canonical form in a database see from where they are obtained when needed. The values may also be extracted directly from virtual machine images and canonicalized as they are needed.

At step the peer pressure algorithm performs statistical analysis to derive information about the settings. That is calculations are performed to help identify which settings are likely to be of interest to the target machine from step and which are likely not to be of interest. In other words the statistical calculation winnows out settings that are found to have low likelihood of substantively affecting or signaling the behavior of the target virtual machine relative to sampled virtual machines. While details are provided in the above referenced paper some explanation follows.

The general idea is that for some given settings values of the settings are compared among the virtual machines. A setting that has values that tend to be highly uniform across all the machines is not likely to be a setting that affects machine behavior or that serves as a telltale of machine behavior. A setting that has values that tend to be highly non uniform is also not likely to be behavior controlling or behavior indicating. In other words if all of the virtual machines have a different value for a given setting the setting is not likely to affect or predict a trait of the target virtual machine. In the middle are settings whose values are somewhat uniform but vary with some statistical significance. For example if half or a third of machines have a different value for a setting and the rest have a same value then it is likely that the setting is being purposefully altered and with effect. The estimation step eliminates the highly uniform and highly non uniform settings to identify a subset of settings that may be of interest to a user. In one embodiment Bayesian statistical estimations are used as fully explained in the above included paper.

It will be appreciated that variations and alternative embodiments are contemplated and encompassed by the claims below.

Embodiments and features discussed above can be realized in the form of information stored in volatile or non volatile computer or device readable media. This is deemed to include at least media such as optical storage e.g. compact disk read only memory CD ROM magnetic media flash read only memory ROM or any current or future means of storing digital information. The stored information can be in the form of machine executable instructions e.g. compiled executable binary code source code bytecode or any other information that can be used to enable or configure computing devices to perform the various embodiments discussed above. This is also deemed to include at least volatile memory such as random access memory RAM and or virtual memory storing information such as central processing unit CPU instructions during execution of a program carrying out an embodiment as well as non volatile media storing information that allows a program or executable to be loaded and executed. The embodiments and features can be performed on any type of computing device including portable devices workstations servers mobile wireless devices and so on.

