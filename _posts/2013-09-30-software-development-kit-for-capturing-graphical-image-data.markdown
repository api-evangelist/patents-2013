---

title: Software development kit for capturing graphical image data
abstract: A software development kit for capturing graphical image data is provided. The SDK is arranged to be employed in a device that includes computing hardware that is operable to execute one or more software applications for generating graphical image data. The SDK is arranged to execute concurrently with the software applications. The one or more software applications are operable to make one or more function calls to a graphics engine and/or a graphics library to generate the graphical image data. Meanwhile, the SDK is operable to intercept the function calls made by the one or more software applications to the graphics engine and/or the graphics library. Moreover, the SDK is operable to modify the function calls before these function calls are received by the graphics engine and/or the graphics library to enable the SDK to access, read, copy and/or modify the graphical image data and/or otherwise modify the function calls in any way to control the operations of the graphics engine and/or graphics library.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430251&OS=09430251&RS=09430251
owner: Unity Technologies Finland Oy
number: 09430251
owner_city: Helsinki
owner_country: FI
publication_date: 20130930
---
This application is related to U.S. patent application Ser. No. 13 765 703 filed on 13 Feb. 2013 entitled System and Method for Sharing Gameplay Experiences and the disclosure of which is incorporated by reference in its entirety.

The aspects of the present disclosure are related generally to capturing graphical image data and more specifically to software development kits for capturing graphical image data. Moreover the present invention relates to methods of using aforesaid software development kits. Furthermore the aspects of the present disclosure relate to software products stored on non transitory non transient machine readable data storage media wherein the software products are executable upon computing hardware of a device to implement the aforesaid methods.

Today various operating systems OS and graphics apparatus have been developed to support portable devices namely portable electronic devices. Typically a graphics apparatus for a portable device includes one or more graphics engines and or one or more graphics libraries such as Open Graphics Library OpenGL . These graphics engines and or libraries can be called by various applications running on an OS of the portable device to generate graphical image data to be presented to a user via a graphical display arrangement of the portable device.

With reference to the conventional graphics apparatus includes a graphics engine a graphics library one or more temporary buffers also known as framebuffers to a person skilled in the art a final buffer a graphics driver graphics hardware and a display . The graphics engine the graphics library the one or more temporary buffers and the final buffer may reside in an OS space as shown in . The graphics driver may be software enabled in a kernel space. The graphics driver is interfaced with the display via the graphics hardware . The graphics hardware may for example be an integrated graphics chipset or a dedicated graphics processing unit GPU . The display may for example be a pixel display such as a touch screen display of the portable device.

In an example the software application is a gaming application or similar that requires generation and presentation of graphical image data during playing of a game. Moreover in the example the software application makes one or more function calls to the graphics engine to generate the graphical image data.

Upon receiving the function calls the graphics engine computes how to present the state of the software application in graphics and sends one or more corresponding function calls to the graphics library which then generates or modifies the graphical image data in one or more temporary buffers . Once all graphical image data for presenting one frame of graphics in the application has been fully generated in one or more temporary buffers the graphics library composites the temporary buffers together to create the final buffer which may be a new buffer or one of the temporary buffers. In a situation wherein only one temporary buffer has been generated to present the one frame of graphics that temporary buffer can be used as the final buffer .

Subsequently the graphical image data in the final buffer is provided to the graphics driver . The graphics driver then controls the graphics hardware and or the display to present the image to the user. When a plurality of image frames per second are presented to the user the user perceives these image frames combining together to create the effect of moving images on the display .

The graphics engine acts as an interface between the software application and the graphics apparatus. It is to be noted here that the graphics engine is typically a part of the software application . For example the graphics engine is simply a routine of the software application calling the graphics library . Alternatively the graphics engine is a full featured sub program of the software application responsible for generating or modifying the graphical image data and or performing digital image processing on the graphical image data.

The graphics engine may be created by an author of the software application licensed from a third party or provided by the operating system vendor. In many instances the software application and or the graphics engine are not operable to provide any interface to capture the graphical image data generated by the known graphics apparatus.

A conventional technique for facilitating such graphical image data capturing requires modifying the software application and or the graphics engine to include graphical image data capturing capabilities. For this purpose an additional software module has to be included as a part of the software application . In addition the graphics engine has to be modified to call the additional software module to capture the graphical image data during the execution of the software application .

However this conventional technique suffers from several disadvantages. Firstly the software application and or the graphics engine are required to be modified extensively. Secondly making such extensive modifications is difficult time consuming and tedious. Thirdly in instances where the graphics engine is licensed from a third party source code of the graphics engine is often closed and therefore cannot be modified by the author of the software application . Moreover the conventional technique is potentially susceptible to result in performance degradation when generating graphical images

Another conventional technique for facilitating graphics capturing requires using a third party software application that has graphics capturing capabilities. However such third party software applications are often not suitable for portable devices due to sandboxing of software applications in the portable devices enforced by operating systems such as Apple iOS and Google Android. The term sandboxing refers to a software security practice that prevents a software application from reading data of another software application.

Furthermore some operating systems may themselves have graphical image data capturing capabilities as a standard feature. However such graphical image data capturing capabilities are usually not provided in operating systems designed for portable devices.

Therefore there exists a need for a graphics apparatus for a portable device that is capable of facilitating graphical image data capturing.

The present disclosure also seeks to provide a Software Development Kit SDK for capturing graphical image data.

The present disclosure also seeks to provide a method of using the SDK for capturing aforesaid graphical image data including for example screenshots series of screenshots and or video.

In one aspect embodiments of the present disclosure provide an SDK for capturing graphical image data. The SDK is arranged to be employed in a device. The device includes computing hardware that is operable to execute one or more software applications for generating graphical image data which is viewable via a graphical display arrangement of the device.

Examples of the device include but are not limited to a mobile terminal a mobile telephone a smart phone a Mobile Internet Device MID a phablet computer a tablet computer an Ultra Mobile Personal Computer UMPC a Personal Digital Assistant PDA a web pad a handheld Personal Computer PC a laptop computer an interactive entertainment computer a gaming terminal a Television TV set and a Set Top Box STB .

The SDK is arranged to execute upon the computing hardware of the device concurrently with the software applications.

The software applications are operable to make one or more function calls to a graphics engine and or a graphics library to generate the graphical image data.

Beneficially the SDK is operable to wrap around the graphics engine and or the graphics library so that the SDK is operable to intercept substantially all function calls to the graphics engine and or the graphics library so that those function calls are able to pass through the SDK.

Moreover the SDK is operable to modify the intercepted function calls before these function calls are received by the graphics engine and or the graphics library. The SDK optionally modifies these intercepted function calls to enable the SDK to access read copy and or modify the graphical image data generated by the graphics engine and or the graphics library and or otherwise modify the function calls in any way to control operations of the graphics engine and or graphics library.

Moreover the SDK is optionally operable to copy the graphical image data generated by the graphics engine and or the graphics library and then to store that copied data in another location on the device s transient memory or in non transient storage or to send the graphical image data to for example video encoding software or hardware which is operable to create one frame of video footage from the graphical image data and to store such video in the memory or non transient storage on the device.

Moreover the SDK is optionally operable to upload or stream the graphical image data generated by the graphics engine and or the graphics library to a data store that is spatially remote from the device.

Furthermore the SDK is optionally arranged to be integrated into the software applications to become an integral part thereof.

In another aspect embodiments of the present disclosure provide a method of using the SDK for capturing the graphical image data.

In yet another aspect embodiments of the present disclosure provide a software product stored on non transitory non transient machine readable data storage media wherein the software product is executable upon computing hardware of the device for implementing the aforementioned method. The software product may for example be downloadable from a software application store to the device.

Embodiments of the present disclosure substantially eliminate or at least partially address the aforementioned problems in the prior art and enable users to capture graphical image data generated during for example game playing and facilitate the functionality of capturing the graphical image data without any requirement to modify software applications and or graphics engines and or graphics library apart from simply including the SDK namely linking libraries in the software applications when corresponding Application Binary Interfaces ABIs are created.

In another aspect the SDK and or core technologies enabling interception and modification of function calls to the graphics library are optionally included by an operating system vendor as a part of the operating system OS thereby enabling capturing of graphical image data for all applications supporting that operating system without requiring those applications to include the SDK.

Additional aspects advantages features and objects of the present disclosure would be made apparent from the drawings and the detailed description of the illustrative embodiments construed in conjunction with the appended claims that follow.

It will be appreciated that features of the present disclosure are susceptible to being combined in various combinations without departing from the scope of the present disclosure as defined by the appended claims.

In the accompanying drawings an underlined number is employed to represent an item over which the underlined number is positioned or an item to which the underlined number is adjacent. A non underlined number relates to an item identified by a line linking the non underlined number to the item. When a number is non underlined and accompanied by an associated arrow the non underlined number is used to identify a general item at which the arrow is pointing.

The following detailed description illustrates embodiments of the present disclosure and ways in which they can be implemented. Although the best mode of carrying out the present disclosure has been disclosed those skilled in the art would recognize that other embodiments for carrying out or practicing the present disclosure are also possible.

Embodiments of the present disclosure provide a Software Development Kit SDK for capturing graphical image data. The SDK is arranged to be employed in a device for example a portable device. The device includes computing hardware that is operable to execute one or more software applications for generating graphical image data viewable via a graphical display arrangement of the device.

Examples of the portable device include but are not limited to a mobile terminal a mobile telephone a smart phone a Mobile Internet Device MID a phablet computer a tablet computer an Ultra Mobile Personal Computer UMPC a Personal Digital Assistant PDA a web pad a handheld Personal Computer PC a laptop computer an interactive entertainment computer a gaming terminal a Television TV set and a Set Top Box STB .

The SDK is arranged to execute upon the computing hardware of the device concurrently one or more software applications.

The one or more software applications are operable to make one or more function calls to a graphics engine and or a graphics library of the device to generate the graphical image data.

Beneficially the SDK is operable to wrap around the graphics engine and or the graphics library so that the SDK is operable intercept substantially all function calls to the graphics engine and or the graphics library so that those function calls may pass through the SDK.

Moreover the SDK is operable to modify the intercepted function calls before these function calls are received by the graphics engine and or the graphics library. The SDK is optionally operable to modify the function calls to enable the SDK to access read copy and or modify the graphical image data generated by the graphics engine and or the graphics library or otherwise change a manner in which the graphics engine and or the graphics library access generate or modify graphical image data. Examples of image data include any graphics that can be displayed via the device wherein the image data includes one or more of video frame of a video still image part of a graphics in the device and similar.

Moreover the SDK is optionally operable to make a copy of the graphical image data generated by the graphics engine and or the graphics library and store that copy to another location in the device s transient memory or in non transient storage or to send the graphical image data to for example video encoding software or hardware to create one frame of video footage from the graphical image data and store such video in the memory or non transient storage of the device.

Moreover the SDK is optionally operable to upload or stream the graphical image data generated by the graphics engine and or the graphics library to a data store that is spatially remote from the device.

Furthermore the SDK is optionally arranged to be integrated into the software applications to become an integral part thereof.

Referring now to the drawings particularly by their reference numbers is a schematic illustration of various components of a device that is for example suitable for employing an SDK for capturing graphical image data in accordance with an embodiment of the present disclosure. The device includes but is not limited to a data memory computing hardware such as a processor Input Output I O devices a network interface and a system bus that operatively couples various components including the data memory the processor the I O devices and the network interface . Optionally the Input Output I O devices include non transient data storage arrangements.

The data memory optionally includes non removable memory removable memory or a combination thereof. The non removable memory for example includes Random Access Memory RAM Read Only Memory ROM flash memory or a hard drive. The removable memory for example includes flash memory cards memory sticks or smart cards.

The memory stores an Operating System OS that when executed on processor provides an interface on which various software applications may be run. In addition the OS may include a user interface not shown in that provides a user of the device with one or more options amongst which to choose.

For example the user interface optionally allows the user to download a gaming application from a remote server and to play a game by executing the gaming application upon the processor however it will be appreciated that software applications other than gaming applications can be alternatively or additionally downloaded. In addition the user is provided with an option to capture graphical image data generated during playing of the game. Details of a manner in which the graphical image data is captured have been described in conjunction with . The graphical image data thereby captured is then optionally stored in the data memory . As aforementioned embodiments described herein are not limited to gaming application namely capture is potentially usable with any software application.

In addition the captured graphical image data is optionally shared with other users using other devices via the network interface . The network interface optionally allows the device to communicate with other devices for example via a communication network not shown in . In addition the network interface optionally allows the device to upload or stream the captured graphical image data to a remote server via a communication network.

The communication network is for example a collection of individual networks interconnected with each other and functioning as a single large network. Such individual networks are optionally wired wireless or a combination thereof. Examples of such individual networks include but are not limited to Local Area Networks LANs Wide Area Networks WANs Metropolitan Area Networks MANs Wireless LANs WLANs Wireless WANs WWANs Wireless MANs WMANs second generation 2G telecommunication networks third generation 3G telecommunication networks fourth generation 4G telecommunication networks and Worldwide Interoperability for Microwave Access WiMAX networks.

The device is optionally implemented by way of at least one of a mobile terminal a mobile telephone a smart phone an MID a phablet computer a tablet computer a UMPC a PDA a web pad a handheld PC a laptop computer an interactive entertainment computer a gaming terminal a TV set and an Set Top Box STB .

The graphics apparatus includes a graphics engine a wrapper a graphics library one or more temporary buffers a final buffer a video capture component a graphics driver graphics hardware and a display . The wrapper and the video capture component form a part of an SDK for capturing graphical image data. The graphics driver the graphics hardware and the display form a part of a graphical display arrangement of the device .

In accordance with an embodiment of the present disclosure the SDK is arranged to execute upon the processor of the device concurrently with and optionally as a part of the software application .

The graphics engine the wrapper the graphics library the temporary buffers the final buffer and the video capture component are optionally stored in the data memory of the device and optionally reside in the OS as shown in or optionally run inside the OS .

For example the graphics engine is optionally a graphics engine licensed from a third party such as Object oriented Graphics Rendering Engine OGRE Irrlicht 3D engine Visual3D game engine Truevision3D engine Crystal Space engine Unity3D game engine Unreal Engine Cocos2D engine and the like. The graphics library is optionally implemented via cross platform graphics library Application Programming Interfaces API s such as Open Graphics Library OpenGL API Direct3D API EA Graphics Library EAGL API Embedded system Graphics Library EGL API and the like.

In addition the graphics driver is optionally software enabled in a kernel of operating system OS . The graphics driver is optionally a system supplied driver component a vendor supplied driver component or a combination thereof. The graphics driver is interfaced with the display via the graphics hardware . The graphics hardware is optionally for example an integrated graphics chipset or a dedicated graphics processing unit GPU of the device . The display is optionally for example a pixel display such as a touch screen display of the device .

In an example embodiment the software application is a gaming application that requires generation of graphical image data viewable via the graphical display arrangement of the device during playing of a game. Moreover the user of the device opts in the example embodiment to capture the graphical image data generated during playing of the game.

In order to generate the graphical image data the software application makes one or more function calls to the graphics engine . The graphics engine acts as an interface between the software application and graphics apparatus.

The graphics engine is typically implemented at least in part in the software application . Alternatively the graphics engine is optionally implemented as an entirely separate routine from the software application . The graphics engine is optionally either created by an author of the software application or licensed from a third party.

Upon receiving the function calls the graphics engine computes a manner in which to present the software application s state in graphics and makes one or more function calls to the graphics library . This initiates the wrapper which is operable to intercept the function calls made by the graphics engine to the graphics library .

Beneficially the wrapper is operable to wrap around the graphics library so that substantially all function calls to the graphics library pass through the wrapper . It should be noted that the wrapper is part of the application .

The wrapper is operable to modify the function calls before these function calls are received by the graphics library to enable the SDK to access read copy and or modify the graphical image data generated by the graphics engine and or the graphics library and or otherwise modify the function calls in any way to control the operation of the graphics library .

Moreover the SDK is optionally operable to make a copy of the graphical image data generated by the graphics engine and or the graphics library from the temporary buffers and or the final buffer . When a particular function call passes through the wrapper the wrapper modifies that particular function call before it is received by the graphics library so as to control the graphics library in such a way that the video capture component can copy the graphical image data from the temporary buffers and or the final buffer .

In a case where the graphics engine uses only one temporary buffer that temporary buffer is optionally also used as the final buffer and the modifications the SDK has done or does to the function calls enables the video capture component to read the data generated or modified by the graphics library in that buffer. When the graphics engine completes drawing an image frame in that buffer the graphics engine calls the graphics library to present the completed image frame to the user. Accordingly the wrapper ensures that the video capture component stores a copy of the final buffer elsewhere in the device memory after which the graphics library calls the graphics driver to present the final buffer to the user. In an alternative embodiment the video capture component can store a copy of the temporary buffer or the final buffer before the image frame has been fully drawn namely to capture graphical image data before certain graphical elements such as user interface elements have been generated in that corresponding buffer.

In another case where the graphics engine uses multiple buffers namely the one or more temporary buffers the graphics library writes the graphical image data to the one or more temporary buffers . When the graphics engine completes drawing an image frame in the one or more temporary buffers the graphics engine calls the graphics library to present the composited image frame to the user. Accordingly the wrapper ensures that the graphics library composites the graphical image data from the one or more temporary buffers into the final buffer which is readable by the video capture component . Once the composition is finished the video capture component will store a copy of the composited graphical image data from the final buffer elsewhere in the device memory after which the graphics driver will present the final buffer to the user. In an alternative embodiment the video capture component is operable to store a copy of the temporary buffer or the final buffer before the frame has been finished namely to capture graphical image data before certain graphical elements such as user interface elements have been generated.

Upon receiving the completed image frame the graphics driver controls the graphics hardware and or the display to present the completed image frame to the user.

Meanwhile the video capture component is operable to capture the graphical image data written into any of the temporary buffers or final buffer and to store the graphical image data in the memory or into another internal storage of the device locally or further process it for example by using a video encoder software or hardware to compress frames of the graphical image data into a video file. The graphical image data thereby stored is optionally for example used to regenerate image frames at a later time for example to provide a video recording of the operation of the software application .

Beneficially the video capture component is optionally operable to upload and or stream content of the final buffer to a data store that is spatially remote from the device . The content is optionally streamed from the data store to one or more devices of other users for example for purposes of sharing game playing experiences but not limited thereto.

Furthermore the SDK including the wrapper and the video capture component are optionally arranged to be integrated into the software application to become an integral part thereof. The wrapper and the video capture component are optionally included in an Application Binary Interface ABI of the software application for example when the software application is linked together with object code libraries. Such linking is beneficially for example performed when an executable file is created or whenever the software application is used at run time. Consequently the wrapper and the video capture component optionally become a part of the software application in a transparent manner for example as implemented by software developers.

Moreover the software application is optionally operable to allow the user to enable or disable graphics capturing functionalities provided by the SDK.

Optionally the software application the graphics engine and or the graphics library are not substantially required to be modified apart from linking the SDK with the software Application Binary Interface ABI .

Now when the software application calls the graphics engine to generate the graphical image data the graphics engine intending to call the graphics library instead transparently calls the wrapper . Subsequently the wrapper modifies the function calls before passing them through to configure the graphics library so that the video capture component has full access to the graphical image data generated for example to read copy and modify such data thereby facilitating capturing of the graphical image data generated by the graphics engine and or the graphics library .

Alternatively the SDK is optionally arranged to be integrated into the OS to become an integral part thereof. This beneficially provides graphics capturing functionalities to any software application running on the OS . In such a case the OS optionally provides a feature that allows the user of the device to control the graphics capturing functionalities for example on per software application basis.

Such an implementation beneficially enables hardware manufacturers to manufacture a portable device that uses the OS to provide a system wide graphics capturing functionality to all the software applications running on the portable device. Moreover in a case of open source operating systems this beneficially enables individual developers to modify the open source operating systems to include the system wide graphics capturing functionality.

Beneficially executing the wrapper does not lead to measurable performance degradation as the wrapper does not generate the graphical image data itself. However capturing the graphical image data by the video capture component and storing or compressing such graphical image data into a video file potentially results in some performance degradation which can be substantially ignored when compared with performance degradation caused by executing the software application .

For example a video apparatus is optionally implemented on the device in a manner similar to the graphics apparatus to capture video and or digital audio data along with the graphical image data generated during the playing of the game. A video file consisting of the digital audio data along with the graphical image data is then beneficially uploaded or streamed to a remote server and or shared with other users.

The graphics apparatus includes a wrapper a graphics engine a graphics library one or more temporary buffers a final buffer a video capture component a graphics driver graphics hardware and a display . The wrapper the final buffer and the video capture component form a part of an SDK for capturing graphical image data. The graphics driver the graphics hardware and the display form a part of the graphical display arrangement of the device .

In accordance with an embodiment of the present disclosure the SDK is arranged to execute upon the processor of the device concurrently with and optionally as a part of the software application .

The wrapper the graphics engine the graphics library the temporary buffers the final buffer and the video capture component are optionally stored in the data memory of the device and optionally reside in the OS as shown in or optionally run inside the OS .

For example the graphics engine is optionally a graphics engine licensed from a third party such as Object oriented Graphics Rendering Engine OGRE Irrlicht 3D engine Visual3D game engine Truevision3D engine Crystal Space engine Unity3D game engine Unreal Engine Cocos2D and the like. The graphics library is optionally implemented via cross platform graphics library APIs such as OpenGL API Direct3D API EAGL API EGL API and the like.

In addition the graphics driver is optionally software enabled in the kernel of operating system OS . The graphics driver is optionally a system supplied driver component a vendor supplied driver component or a combination thereof. The graphics driver is interfaced with the display via the graphics hardware . The graphics hardware is optionally for example an integrated graphics chipset or a dedicated graphics processing unit GPU of the device . The display is for example a pixel display such as a touch screen display of the device .

In an example embodiment the software application is a gaming application that requires generation of graphical image data viewable via the graphical display arrangement of the device during playing of a game. Moreover the user of the device opts in the example embodiment to capture the graphical image data generated during playing of the game.

In order to generate the graphical image data the software application makes one or more function calls to the graphics engine . The graphics engine acts as an interface between the software application and graphics apparatus.

The graphics engine is typically implemented as part of the software application . Alternatively the graphics engine is implemented as an entirely separate routine from the software application . The graphics engine is optionally either created by an author of the software application or licensed from a third party.

When the software application makes the function calls to the graphics engine the wrapper is initiated. The wrapper is operable to intercept the function calls made by the software application to the graphics engine .

Beneficially the wrapper is optionally operable to wrap around the graphics engine so that substantially all function calls to and or from the graphics engine may pass through the wrapper . It should be noted that the wrapper is part of the application .

Upon receiving the function calls the graphics engine computes a manner in which to present the software application s state in graphics and makes one or more function calls to the graphics library . Accordingly the wrapper is operable to intercept the function calls made by the graphics engine to the graphics library .

In order to capture the graphical image data the wrapper is operable to modify the function calls before these function calls are received by the graphics engine and or the graphics library to enable the SDK to access read copy and or modify the graphical image data generated by the graphics engine and or the graphics library and or otherwise modify the function calls in any way to control the operation of the graphics engine and or graphics library .

Moreover the SDK is optionally operable to make a copy of the graphical image data generated by the graphics engine and or the graphics library from the temporary buffers and or final buffer . When a particular function call passes through the wrapper the wrapper modifies that particular function call before it is received by the graphics engine and or the graphics library so as to control the graphics engine and or the graphics library in such a way that the video capture component can copy the graphical image data from the temporary buffers and or final buffer .

In a case where the graphics engine uses only one temporary buffer that temporary buffer is optionally also used as the final buffer and the modifications the SDK has done or does to the function calls enables the video capture component to read the data generated or modified by the graphics library in that buffer. Accordingly the wrapper ensures that the video capture component stores a copy of the final buffer elsewhere in the device memory after which the graphics library calls the graphics driver to present the final buffer to the user. In an alternative embodiment the video capture component can store a copy of the temporary buffer or the final buffer before the image frame has been fully drawn namely to capture graphical image data before certain graphical elements such as user interface elements have been generated in that corresponding buffer.

In another example situation where the graphics engine uses multiple buffers namely the temporary buffers the graphics library writes the graphical image data to the temporary buffers . When the graphics engine completes drawing an image frame in the temporary buffers the graphics engine calls the graphics library to present the composited image frame to the user. Accordingly the wrapper ensures that the graphics library composites the graphical image data from the one or more temporary buffers into the final buffer which is readable by the video capture component . Once the composition is finished the video capture component will store a copy of the composited graphical image data from the final buffer elsewhere in the device memory after which the graphics driver will present the final buffer to the user. In an alternative embodiment the video capture component is operable to store a copy of the temporary buffer or the final buffer before the frame has been finished namely to capture graphical image data before certain graphical elements such as user interface elements have been generated.

Upon receiving the completed image frame the graphics driver controls the graphics hardware and or the display to present the completed image frame to the user.

Meanwhile the video capture component is operable to capture the graphical image data written into any of the temporary buffers or final buffer and to store the graphical image data in the memory or into another internal storage of the device locally or further process it for example by using a video encoder software or hardware to compress frames of the graphical image data into a video file. The graphical image data thereby stored is optionally for example used to regenerate image frames at a later time for example to provide a video recording of the operation of the software application .

Beneficially the video capture component is optionally operable to upload and or stream content of the final buffer to a data store that is spatially remote from the device . The content is optionally streamed from the data store to one or more devices of other users for example for purposes of sharing game playing experiences but not limited thereto.

Furthermore the SDK including the wrapper and the video capture component are optionally arranged to be integrated into the software application to become an integral part thereof. The wrapper and the video capture component are optionally included in an Application Binary Interface ABI of the software application for example when the software application is linked together with object code libraries. Such linking is beneficially for example performed when an executable file is created or whenever the software application is used at run time. Consequently the wrapper and the video capture component optionally become a part of the software application in a transparent manner for example as implemented by software developers.

Moreover the software application is optionally operable to allow the user to enable or disable graphics capturing functionalities provided by the SDK.

Optionally the software application the graphics engine and or the graphics library are not required to be modified apart from linking the SDK with the software Application Binary Interface ABI .

Now when the software application calls the graphics engine to generate the graphical image data the software application instead transparently calls the wrapper . Subsequently the wrapper modifies the function calls before passing them through to configure the graphics engine and or the graphics library so that the video capture component has full access to the graphical image data generated for example to read copy and modify such data thereby facilitating capturing of the graphical image data generated by the graphics engine and or the graphics library .

Beneficially executing the wrapper does not lead to measurable performance degradation as the wrapper does not generate the graphical image data itself. However capturing the graphical image data by the video capture component and storing or compressing such graphical image data into a video file potentially results in some performance degradation which can be substantially ignored when compared with performance degradation caused by executing the software application .

For example a video apparatus is optionally implemented on the device in a manner similar to the graphics apparatus to capture video and or digital audio data along with the graphical image data generated during the playing of the game. A video file consisting of the digital audio data along with the graphical image data is then beneficially uploaded to a remote server and or shared with other users.

The graphics apparatus includes a graphics engine a video capture API a graphics library one or more temporary buffers a final buffer a video capture component a graphics driver graphics hardware and a display . The video capture API and the video capture component form a part of an SDK for capturing graphical image data. The graphics driver the graphics hardware and the display form a part of the graphical display arrangement of the device .

In accordance with an embodiment of the present disclosure the SDK is arranged to execute upon the processor of the device concurrently with and optionally as a part of the software application .

The graphics engine the video capture API the graphics library the temporary buffers the final buffer and the video capture component are optionally stored in the data memory of the device and optionally reside in the OS as shown in or optionally run inside the OS .

For example the graphics engine is optionally a graphics engine licensed from a third party such as OGRE Irrlicht 3D engine Visual3D game engine Truevision3D engine Crystal Space engine Unity3D Unreal Engine Cocos2D and the like. The graphics library is optionally implemented via cross platform graphics library APIs such as OpenGL API Direct4D API EAGL API EGL API and the like.

In addition the graphics driver is optionally software enabled in the kernel of the device . The graphics driver is optionally a system supplied driver component a vendor supplied driver component or a combination thereof. The graphics driver is interfaced with the display via the graphics hardware . The graphics hardware is optionally for example an integrated graphics chipset or a dedicated graphics processing unit GPU of the device . The display is optionally for example a pixel display such as a touch screen display of the device .

In an example embodiment the software application is a gaming application that requires generation of graphical image data viewable via the graphical display arrangement of the device during playing of a game. Moreover the user of the device opts in the example embodiment to capture the graphical image data generated during playing of the game.

In order to generate the graphical image data the software application makes one or more function calls to the graphics engine . The graphics engine acts as an interface between the software application and the graphics apparatus.

The graphics engine is optionally implemented at least in part in the software application . Alternatively the graphics engine is optionally implemented as an entirely separate routine from the software application . The graphics engine is optionally either created by an author of the software application or licensed from a third party.

It will be appreciated here that the software application and or the graphics engine is modified explicitly to integrate with the video capture API . In one example the graphics engine is optionally modified by the author of the software application in a case when the graphics engine is an open source graphics engine. In another example the graphics engine is optionally modified by an author of the graphics engine .

In this implementation the graphics engine is modified explicitly to call the video capture API which provides graphics capturing functionalities. Consequently upon receiving the function calls from the software application the graphics engine makes function calls to the video capture API to enable video capture and explicitly sends certain function calls intended to the graphics library to the video capture API .

In order to capture the graphical image data the video capture API is operable to modify the function calls before these function calls are sent from the video capture API to the graphics library to enable the SDK to access read copy and or modify the graphical image data generated by the graphics engine and or the graphics library .

Moreover the SDK is optionally operable to make a copy of the graphical image data generated by the graphics engine and or the graphics library from the temporary buffers and or the final buffer . When a particular function call passes through the video capture API the video capture API modifies that particular function call before it is sent to the graphics library so as to control the graphics library in such a way that the video capture component can copy the graphical image data from the temporary buffers and or the final buffer .

In a case where the graphics engine uses only one buffer the graphics library that temporary buffer is optionally also used as the final buffer and the modifications the SDK has done or does to the function calls enables the video capture component to read the data generated or modified by the graphics library in that buffer. When the graphics engine completes drawing an image frame in that buffer the graphics engine calls the video capture API which then calls the graphics library to present the completed image frame to the user. Accordingly the video capture API ensures that the video capture component stores a copy of the final buffer elsewhere in the device memory after which the graphics library calls the graphics driver to present the final buffer to the user. In an alternative embodiment the video capture component can store a copy of the temporary buffer or the final buffer before the image frame has been fully drawn namely to capture graphical image data before certain graphical elements such as user interface elements have been generated in that corresponding buffer.

In another case where the graphics engine uses multiple buffers namely the temporary buffers the graphics library writes the graphical image data to the temporary buffers . When the graphics engine completes drawing an image frame in the temporary buffers the graphics engine calls the video capture API which then calls the graphics library to present the completed image frame to the user. Accordingly the video capture API ensures that the graphics library composites the graphical image data from the temporary buffers into the final buffer which is readable by the video capture component . Once the composition is finished the video capture component will store a copy of the composited graphical image data from the final buffer elsewhere in the device memory after which the graphics driver will present the final buffer to the user. In an alternative embodiment the video capture component is operable to store a copy of the temporary buffer or the final buffer before the frame has been finished namely to capture graphical image data before certain graphical elements such as user interface elements have been generated.

Upon receiving the completed image frame the graphics driver controls the graphics hardware and or the display to present the completed image frame to the user.

Meanwhile the video capture component is operable to capture the graphical image data written into any of the temporary buffers or the final buffer and to store the graphical image data in the memory or into another internal storage of the device locally or further process it for example by using a video encoder software or hardware to compress frames of the graphical image data into a video file. The graphical image data thereby stored is optionally for example used to regenerate image frames at a later time for example to provide a video recording of the operation of the software application .

Beneficially the video capture component is optionally operable to upload and or stream content of the final buffer to a data store that is spatially remote from the device . The content is optionally streamed from the data store to one or more devices of other users for example for purposes of sharing game playing experiences but not limited thereto.

Furthermore the SDK including the video capture API and the video capture component are optionally arranged to be integrated into the software application to become an integral part thereof. The video capture API and the video capture component are optionally included in an Application Binary Interface ABI of the software application for example when the software application is linked together with object code libraries. Such linking is beneficially for example performed when an executable file is created or whenever the software application is used at run time. Consequently the video capture API and the video capture component optionally become a part of the software application .

Moreover the software application is optionally operable to allow the user to enable or disable graphics capturing functionalities provided by the SDK.

Now when the software application calls the graphics engine to generate the graphical image data the graphics engine explicitly calls the video capture API . Subsequently the video capture API modifies the function calls before passing them through to configure the graphics library so that the video capture component has full access to the graphical image data generated for example to read copy and modify such data thereby facilitating capturing of the graphical image data generated by the graphics engine and or the graphics library .

Beneficially executing the video capture API does not lead to measurable performance degradation as the video capture API does not generate the graphical image data itself. However capturing the graphical image data by the video capture component and storing or compressing it into video format potentially results in some performance degradation which can be substantially ignored when compared with performance degradation caused by executing the software application .

For example a video apparatus is optionally implemented on the device in a manner similar to the graphics apparatus to capture video and or digital audio data along with the graphical image data generated during the playing of the game. A video file consisting of the digital audio data along with the graphical image data is then beneficially uploaded to a remote server and or shared with other users.

As described earlier the SDK is arranged to be employed in a device such as the device . The device includes computing hardware that is operable to execute one or more software applications for generating graphical image data viewable via a graphical display arrangement of the device.

At a step the SDK is arranged to execute upon the computing hardware of the device concurrently with the software applications. In accordance with the step the SDK is optionally for example initiated when the software application makes one or more function calls to a graphics engine and or a graphics library.

At a step the SDK operates to intercept the function calls made by the software applications to the graphics engine and or the graphics library alternatively or additionally in the embodiment described with reference to the function calls are explicitly sent to the video capture API .

In accordance with the step the SDK optionally operates to wrap around the graphics engine and or the graphics library so that substantially all function calls to the graphics engine and or the graphics library pass through the SDK.

Next at a step the SDK operates to modify the function calls before these function calls are received by the graphics engine and or the graphics library as described earlier. This enables the SDK to access read copy and or modify the graphical image data generated by the graphics engine and or the graphics library and or otherwise modify the function calls in any way to control the operations of the graphics engine and or graphics library.

In accordance with the step the SDK optionally configures the graphics engine and or the graphics library to enable the video capture component to access read copy and or modify the graphical image data generated by the graphics engine and or the graphics library and or otherwise modify the function calls in any way to control the operations of the graphics engine and or graphics library.

Subsequently at a step the SDK operates to capture the graphical image data generated or modified in the temporary buffers or in the final buffer as described earlier. The video capture component is optionally implemented in a manner that is similar to the implementation of the video capture component video capture component or the video capture component .

The graphical image data captured at the step may be stored in an internal data memory of the device locally.

Moreover the method optionally includes an additional step at which the SDK operates to upload and or stream content of the video capture buffer to a data store that is spatially remote from the device.

Meanwhile a step image frames in the final buffer are presented to a user via the graphical display arrangement of the device.

Furthermore the method includes an optional step at which the SDK is arranged to be integrated into the software applications to become an integral part thereof preferably this is a default for embodiments of the disclosure.

The steps to are only illustrative and other alternatives can also be provided where one or more steps are added one or more steps are removed or one or more steps are provided in a different sequence without departing from the scope of the claims herein.

Embodiments of the present disclosure provide a software product stored on non transitory non transient machine readable data storage media wherein the software product is executable upon the computing hardware of the device for implementing the method as described in conjunction with . The software product is optionally for example downloadable from a software application store for example from an App store to the device .

Embodiments of the present disclosure are susceptible to being used for various purposes including though not limited to enabling users to capture graphical image data generated during use of software applications such as game playing without materially degrading performance of their portable devices and facilitating the functionality of capturing the graphical image data without any requirement to modify software applications and or graphics engines apart from simply including a SDK namely linking libraries in the ABIs of the software applications. Such SDK optionally provides additional functionality for example to enable users to control the graphical image data capture such functionality optionally requires modifications to be made to the software application to expose such functionality to users. Moreover as aforementioned embodiments of the present disclosure enable capture of a combination of image and or video content in combination with corresponding audio content.

Modifications to embodiments of the present disclosure described in the foregoing are possible without departing from the scope of the present disclosure as defined by the accompanying claims. Expressions such as including comprising incorporating consisting of have is used to describe and claim the present disclosure are intended to be construed in a non exclusive manner namely allowing for items components or elements not explicitly described also to be present. Reference to the singular is also to be construed to relate to the plural.

