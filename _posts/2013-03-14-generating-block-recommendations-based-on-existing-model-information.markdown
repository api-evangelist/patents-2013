---

title: Generating block recommendations based on existing model information
abstract: A device identifies models in a corpus of documents, and retrieves model information for the identified models. The device creates a block identifier for each block of the models based on the model information, and determines one or more blocks that connect to each block of the models, based on the model information. The device creates identifiers for the one or more blocks that connect to each block of the models, and assigns weights to the identifiers based on sources of the models or a number of times the one or more blocks connect to each block of the models. The device ranks the identifiers based on the weights assigned to the identifiers, and store the ranked identifiers and the block identifiers in a data structure.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471641&OS=09471641&RS=09471641
owner: The MathWorks, Inc
number: 09471641
owner_city: Natick
owner_country: US
publication_date: 20130314
---
The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

A modeling environment e.g. the Simscape software by The MathWorks Inc. that employs a physical network approach may include a set of block libraries and special simulation features for modeling physical systems. The physical network approach is particularly suited for simulating systems that consist of real physical components. This modeling environment permits creation of a network representation of a system under design based on the physical network approach. According to the physical network approach each system is represented by functional blocks that interact with each other by exchanging information through their connection nodes or ports. The nodes may be bidirectional and mimic physical connections between blocks.

However modeling environments often do not provide much insight into a correct way to connect blocks of physical system models. Thus a creator of a physical system model is unable to determine if blocks of the model are correctly connected until the model is simulated. When the model is simulated and blocks are incorrectly connected the modeling environment may output connection error messages. However the connection error messages are typically confusing and provide little insight into the correct way to connect the blocks of the model.

Systems and or methods described herein may provide recommendations for blocks that may connect to blocks of a physical system model. The systems and or methods may retrieve information associated with existing models from a corpus of documents and may determine relations between blocks of the existing models. The systems and or methods may assign weights to the relations between the blocks and may utilize the weights to generate the recommendations. When a new block of a new model is created the systems and or methods may provide recommendations for the new block based on the block relation information obtained from the existing models.

The device may provide rankings to the identifiers based on the weights assigned to the identifiers. In some implementations the device may provide higher rankings to identifiers with larger weights than rankings provided to identifiers with smaller weights. The device may store the rankings of the identifiers in the repository. In some implementations the device may store the identifiers and the rankings of the identifiers as a database a list or another type of data structure in the repository. The database of ranked identifiers may be utilized by the device to provide recommended blocks to a user creating a new model in a modeling environment as described below.

For the overview further assume that after the database of ranked identifiers is created a user utilizes the device to access a modeling environment e.g. a technical computing environment TCE based modeling environment . As further shown in the modeling environment may provide for display a modeling environment user interface to the user. The modeling environment user interface may enable the user to input a new model to the modeling environment. The user may create a new block e.g. a Constant Volume Chamber block for the new model via the user interface and the device may receive and provide the new block for display as shown in . The device may automatically compare the new block to some blocks of the existing models e.g. stored in the repository via the model information to determine a matching block in the database. In some implementations the device may make this comparison when the user selects or hovers over e.g. with a pointing device such as mouse the new block.

The device may provide for display recommended ranked identifier s of block s that connect to the matching block. As shown in the device may provide for display a first window that identifies suggested blocks for a first connection Connection and a second connection Connection of the new block e.g. the Constant Volume Chamber block . As further shown in the device may provide for display a second window that provides ranked identifiers e.g. a Heat Transfer block identifier and an Adiabatic Cup block identifier for blocks that may connect to the first connection of the Constant Volume Chamber block. In the overview further assume that the user selects the Heat Transfer block identifier from the second window and that device receives the selection of the Heat Transfer block identifier. Based on the selection the device may create a Heat Transfer block in the new model and may provide for display the new model with the Heat Transfer block. Further the device may connect the Heat Transfer block to the Constant Volume Chamber block and may provide for display the new model with the Heat Transfer block connected to the Constant Volume Chamber block as shown in .

Such an arrangement may provide insight into a correct way to connect blocks of a physical system model prior to simulating the model. The arrangement may greatly improve a time it takes to create a model by narrowing a number of blocks to which a particular block can connect to just blocks that are desired preferred or permitted to connect to the particular block. The arrangement may utilize intelligence stored in previously built models to determine block relations and to build the database of ranked identifiers. The arrangement may also prevent confusing connection error messages from being generated when a model is simulated.

A connection as described herein may include one or more nodes or ports provided between functional blocks. A connection may enable one functional block to interact and or exchange information with another functional block.

User interfaces as described herein may include graphical user interfaces GUIs and or non graphical user interfaces such as text based interfaces. The user interfaces may provide information to users via customized interfaces e.g. proprietary interfaces and or other types of interfaces e.g. browser based interfaces etc. . The user interfaces may receive user inputs via one or more input devices may be user configurable e.g. a user may change the sizes of the user interfaces information displayed in the user interfaces color schemes used by the user interfaces positions of text images icons windows etc. in the user interfaces etc. and or may not be user configurable. Information associated with the user interfaces may be selected and or manipulated by a user of a technical computing environment TCE e.g. via a touch screen display a mouse a keyboard a keypad voice commands etc. .

A document as the term is used herein is to be broadly interpreted to include any machine readable and machine storable work product. A document may include for example an e mail a file a combination of files one or more files with embedded links to other files a news group posting a blog a web advertisement a Uniform Resource Locator URL etc. In the context of the Internet a common document is a web page. Web pages often include textual information and may include embedded information such as meta information images hyperlinks etc. and or embedded instructions such as Javascript etc. .

Client device may include one or more computation devices such as for example a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation devices. In some implementations client device may include a TCE described below. In some implementations client device may connect with repository or may include repository .

Server device may include one or more server devices or other types of computation and communication devices. Server device may include a device that is capable of communicating with client device e.g. via network . In some implementations server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. In some implementations server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device . In some implementations server device may connect with repository or may include repository .

Repository may include a single memory device or multiple possibly distributed memory devices. Repository may store various types of information associated with models model information e.g. block relations block connections etc. etc. retrieved from corpus of documents .

As indicated above TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In some implementations TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In some implementations TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . In some implementations TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dassault Systtilde over e mes etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dassault Systtilde over e mes SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhapsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Corpus of documents may include existing models model information model examples model demos etc. created by tool experts physical systems experts model developers domain experts etc. Corpus of documents may be stored publicly such as on the Internet e.g. on web sites in databases etc. and or may be stored privately such as on a company intranet in internal company databases etc. In some implementations corpus of documents may be provided on a web site of a model developer such as a developer of TCE .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN or a cellular network an intranet the Internet or a combination of networks.

Although shows example components of environment in some implementations environment may include fewer components different components differently arranged components or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in some implementations device may include fewer components different components differently arranged components or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more tasks described as being performed by one or more other components of device .

As shown in process may include identifying models in a corpus of documents block . For example client device TCE may identify models in corpus of documents . In some implementations client device TCE may periodically or when instructed by a user crawl through corpus of documents to identify models in corpus of documents . In some implementations client device TCE may utilize keywords such as model block modeling environment names model software names etc. to identify models in corpus of documents . In some implementations client device TCE may utilize web crawlers to identify models in corpus of documents . A web crawler may start with addresses e.g. Uniform Resource Locators URLs of links to visit. For each address on the list the web crawler may visit the document associated with the address. The web crawler may identify models within the visited document associated with the address. The web crawler may also identify outgoing links within the visited document and add addresses associated with these links to the list of addresses. In some implementations client device TCE may utilize search engines e.g. by searching for keywords such as modeling Simulink model power train robot etc. to identify models in corpus of documents .

As further shown in process may include retrieving model information for the identified models block . For example client device TCE may retrieve model information associated with the identified models from corpus of documents . In some implementations the model information may include information associated with sources of the models e.g. public sources private sources reputable model sources etc. information identifying block s that connect to each block of the models e.g. block relationship information information identifying creators of the models information identifying block types e.g. an electrical block a mechanical block a resistor block a pump block etc. for the blocks of the models information identifying a number of times blocks connect to other blocks etc. In some implementations client device may store the model information in repository and or storage device .

As further shown in process may include determining block s that connect to each or some block of the models based on the model information block . For example client device TCE may utilize the model information to determine one or more blocks that connect each or some block of the models identified in corpus of documents . In some implementations once a first block is determined to connect to a second block in a model client device TCE may create an identifier for the connection between the first block and the second block. If client device TCE encounters another instance of the connection between the first block and the second block in another model client device TCE may not create another identifier for the connection but may implement a counter with the identifier. For example if client device TCE encounters the connection between the first block and the second block four times client device TCE may allocate a value of four to the counter. In some implementations client device TCE may analyze each or some block of the models and may create identifiers for first instances of connections between each block of the models and another block of the model.

In some implementations client device TCE may determine the connections between the blocks of the models by identifying nodes or ports interconnecting the blocks. Each block may include multiple nodes or ports and thus may connect to multiple other blocks. Each node or port may connect two blocks of the model together and may provide an indication of the connection or relationship between the two blocks of the model. In some implementations client device TCE may utilize functions e.g. a get parameter function a set parameter function a customization parameter an add block parameter an add line parameter a find system parameter etc. to determine the connections between the blocks of the models.

Returning to process may include storing identifiers for the block s that connect to each block of the models in a repository block . For example client device TCE may store in repository and or storage device the identifiers created for the first instances of the connections between each block of the models and another block of the model. In some implementations the identifiers may provide indications of relationships between the blocks of the models. In some implementations client device TCE may store the identifiers in a database a list or another type of data structure provided in repository and or storage device . In some implementations client device TCE may associate additional information with the identifiers such as for example block information e.g. block identifiers for each block of the models counters describing a number of times the connections are encountered information associated with sources of the models e.g. a private vetted database of models a public web site a modeling environment developer web site etc. block type information e.g. electrical type mechanical type etc. etc.

As further shown in process may include assigning weights to the identifiers based on sources of the models and or a number of times the block s connect to each block of the models block . For example client device TCE may assign weights to the identifiers based on sources of the models in corpus of documents . In some implementations client device TCE may assign higher weights to identifiers associated with models provided in a private source e.g. an internal company database than to identifiers associated with models provided in a public source e.g. a web site . In some implementations client device TCE may assign weights to the identifiers based on a number of times the connections associated with the identifiers are encountered in the models. For example client device TCE may utilize the values associated with the counters to assign weights to the identifiers e.g. an identifier associated with counter value of four may be weighted higher than an identifier associated with counter value two .

In some implementations client device TCE may utilize other information to assign weights to the identifiers. For example if a particular identifier is associated with a model created by model developer a tool expert a model expert or some other person with particular credentials client device TCE may assign a higher weight to the particular identifier than to identifiers associated with models created by unknown users. Client device TCE may assign higher weights to identifiers associated with models provided on a web site of a reputable modeling environment developer than to identifiers associated with models provided on a web site.

Returning to process may include providing rankings to the identifiers based on the weights assigned to the identifiers block . For example client device TCE may rank the identifiers based on the weights assigned to the identifiers. In some implementations if a particular block is associated with multiple identifiers client device TCE may rank the multiple identifiers from highest to lowest based on the weights assigned to the identifiers. For example the identifier with the highest weight may be ranked first the identifier with the second highest weight may be ranked second and so on.

As further shown in process may include storing the rankings of the identifiers in the repository block . For example client device TCE may store the rankings of the identifiers in repository and or storage device . In some implementations client device TCE may store the rankings of the identifiers the identifiers and or the additional information e.g. block identifiers counters model sources etc. in a database a list or another type of data structure provided in repository and or storage device . The rankings the identifiers and or the additional information may be utilized to provide recommendations for blocks that may connect to blocks of a physical system model as described below in connection with .

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

In example assume further that the user selects the public sources and or the private sources from user interface and selects a mechanism e.g. a Search for Models button link icon etc. displayed by user interface . The mechanism when selected may instruct client device TCE to search for models and or model information from the selected public sources and or private sources. In some implementations the user may not need to select the sources and client device TCE may search for models and or model information from all sources accessible by client device TCE or from a set of sources predefined for client device TCE .

Based on the instruction to search for models and or model information client device TCE may crawl through a public corpus of documents and or a private corpus of documents as indicated by reference number in . Public corpus of documents may include documents provided by the public sources selected by the user via user interface . Private corpus of documents may include documents provided by the private sources selected by the user via user interface . Client device TCE may crawl through corpus of documents to identify models and or model information stored in corpus of documents .

As further shown in client device TCE may retrieve model information associated with the identified models from corpus of documents . In some implementations model information may include information associated with sources of the models block relationship information information identifying creators of the models information identifying block types for the blocks of the models information identifying a number of times blocks connect to other blocks etc. In some implementations client device may store model information in repository and or storage device .

Client device TCE may utilize model information to determine one or more blocks that connect each block of the models identified in corpus of documents . For example as shown in model information may include a first model Model and a second model Model . The first model may include a first block Block connected to a second block Block and a third block Block . The second model may include the first block connected to the third block and a fourth block Block . Based on the first model and the second model client device TCE may determine block connections between the blocks of the first model and the second model as further shown in . For example client device TCE may determine that the first block Block connects to the second block Block one time to the third block Block two times and to the fourth block Block one time.

As shown in client device TCE may create identifiers for the determined block connections shown in . For example client device TCE may create an identifier e.g. Identifier for the first block Block connection to the second block Block . Client device TCE may create another identifier e.g. Identifier for the first block Block connection to the third block Block . Client device TCE may create still another identifier e.g. Identifier for the first block Block connection to the fourth block Block . In some implementations client device TCE may create a single identifier for a block connection even if client device TCE encounters the block connection more than one time. For example although the first block connects with the third block two times client device TCE may allocate a single identifier Identifier for the connection between the first block and the third block. However client device TCE may allocate a value of two to a counter associated with identifier Identifier .

As further shown in client device TCE may store identifiers in repository . In some implementations client device TCE may store identifiers in a database a list or another type of data structure provided in repository . In some implementations client device TCE may associate additional information with identifiers such as for example block information e.g. block identifiers for each block of the models counters describing a number of times the connections are encountered information associated with sources of the models block type information etc.

As shown in client device TCE may assign weights to identifiers . In some implementations weights may be generated by client device TCE based on sources e.g. publics sources private sources etc. for the models associated with identifiers . For example client device TCE may generate higher weights for identifiers associated with models provided in a private source than weights for identifiers associated with models provided in a public source. In some implementations client device TCE may assign weights to identifiers based on a number of times the connections associated with identifiers are encountered in the models. For example client device TCE may utilize the values associated with the counters to assign weights to identifiers . As shown in client device TCE may assign a higher weight e.g. two to a particular identifier e.g. Identifier than to other identifiers since the particular identifier is associated with a counter value of two.

Assignment of weights to identifiers may generate weighted identifiers . For example assignment of weight to Identifier may generate Weighted Identifier assignment of weight to Identifier may generate Weighted Identifier and assignment of weight to Identifier may generate Weighted Identifier . In assume that Weighted Identifier includes a greater value than Weighted Identifier and Weighted Identifier since weight of Identifier is greater than weights of Identifier and Identifier .

Client device TCE may provide rankings to weighted identifiers in order to generate weighted rankings as further shown in . For example client device TCE may rank Weighted Identifier first and may rank Weighted Identifier and Weighted Identifier second and third respectively. As further shown in client device TCE may store weighted rankings of identifiers in repository . In some implementations client device TCE may store weighted rankings identifiers and or the additional information e.g. block identifiers counters model sources etc. in a database a list or another type of data structure provided in repository .

In example after client device TCE finishes crawling or based on crawling corpus of documents and stores all of weighted rankings identifiers and or the additional information retrieved from corpus of documents client device TCE may generate a user interface as shown in . User interface may include information stating that the model relationship database has been created and stored and may include information requesting whether the user wants to create a new model. If the user wants to create a new model the user may select a mechanism e.g. a Yes button link icon etc. and client device TCE may provide for display a modeling environment for the user as described below in connection with . If the user does not want to create new model the user may select another mechanism e.g. a No button link icon etc. .

As shown in process may include accessing a database that provides ranked identifier s for block s that connect to each block of existing models block . For example client device TCE may access the model relationship database created and stored in repository and or storage device as described above in connection with . In some implementations a modeling environment provided by client device TCE may automatically access the model relationship database when needed.

As further shown in process may include providing for display a user interface for inputting a new model block . For example client device may execute a modeling environment e.g. TCE that generates a user interface for inputting a new model. Client device TCE may provide for display the user interface for inputting a new model to a user of client device TCE . In some implementations the user may create a new block diagram model via the user interface.

As further shown in process may include receiving input of a new block for the new model via the user interface block . For example the user may create a new block in the new block diagram via the user interface for inputting a new model. In some implementations client device TCE may provide a list of blocks that may be added to the new model and the user may select a block from the list of blocks. Client device TCE may provide for display the selected block in the user interface for inputting a new model. In some implementations the user may draw or add a new block to the user interface e.g. with a pointing device such as mouse and client device TCE may provide for display the block in the user interface.

Returning to process may include comparing the new block to each block identifier of the existing models to determine a matching block in the database block . For example client device TCE may compare properties of the new block to properties of blocks stored with the block identifiers in the model relationship database. If the properties of the new block match properties of a particular block stored with a block identifier in the model relationship database client device TCE may determine that the particular block is a matching block of the new block. In some implementations the properties of the blocks for the existing models may be stored in the model relationship database separately from the identifiers. However the properties of the blocks for the existing models may be associated with the identifiers in the model relationship database.

In some implementations client device TCE may automatically perform the comparison of the properties of the new block to the properties of blocks stored with the block identifiers in the model relationship database. In such an arrangement client device TCE may continuously perform the comparison for each new block added to the new model so that the user may easily create the new model based on recommendations provided by client device TCE as described below. In some implementations client device TCE may perform the comparison when the user selects or hovers over e.g. with a pointing device the new block.

As further shown in process may include providing for display recommended ranked identifier s of block s that connect to the matching block block . For example client device TCE may provide for display recommended ranked identifier s of block s that connect to the matching block. In some implementations the recommended ranked identifier s may include a ranked list of identifier s of block s that are recommended for connecting to the new block. In some implementations the recommended ranked identifier s may include a ranked list of identifier s of block s associated with internal vetted models e.g. models generated within a company or other organization . In such an arrangement the ranked list of identifier s of block s may be expanded e.g. upon user request to include identifier s of block s associated with external models e.g. models provided on a public web site .

In some implementations source s of the ranked list of identifier s of block s may be displayed to the user by client device TCE . In some implementations a first block associated with a first identifier of the ranked list of identifier s may be displayed as connected to the new block and the user may decide whether to accept the first block or to select another block. In some implementations the ranked list of identifier s of blocks may be ranked based on a block type hierarchy. For example if the new block is an electrical block e.g. an amplifier block the ranked list of identifier s may include electrical blocks at one hierarchy and specific electrical blocks e.g. a capacitor block a resistor block etc. at another hierarchy. In some implementations the ranked list of identifier s may include percentage information associated with the block s e.g. this block has been connected to the new block in 80 of the existing models .

Returning to process may include receiving selection of a particular ranked identifier block . For example the user may select a particular ranked identifier from the recommended ranked identifier s of block s that may connect to the new block and client device TCE may receive the selection of the particular ranked identifier. In some implementations the user may utilize a pointing device e.g. a mouse or another input device to select the particular ranked identifier from the recommended ranked identifier s .

As further shown in process may include connecting a particular block associated with the particular ranked identifier to the new block block . For example client device TCE may insert a particular block associated with the selected particular ranked identifier in the new model and may connect the particular block to the new block in the new model. In some implementations client device may retrieve the particular block from the modeling environment provided by client device . If the modeling environment does not include the particular block client device TCE may retrieve the particular block from existing models provided in corpus of documents .

Returning to process may include providing for display the new model with the new block connected to the particular block block . For example client device TCE may provide for display the new model with a port of the new block connected to a port of the particular block associated with the selected particular ranked identifier. In some implementations the connection between the new block and the particular block may be displayed with a line. Client device TCE may perform process for other ports of the new block for port s of the particular block and or for any additional blocks added by the user to the new model.

While shows process as including a particular quantity and arrangement of blocks in some implementations process may include fewer blocks additional blocks or a different arrangement of blocks. Additionally or alternatively some of the blocks may be performed in parallel.

The user may create a new block in the new model via user interface . For example as shown in the user may create a Constant Volume Chamber as new block . In some implementations client device TCE may provide a list of blocks that may be added to the new model and the user may select new block from the list of blocks.

Client device TCE may compare properties of new block to properties of blocks stored in model relationship database of repository as shown in . If the properties of new block match properties of a particular block e.g. a Constant Volume Chamber block stored in model relationship database client device TCE may determine that the particular block is a matching block of new block as indicated by reference number . In some implementations client device TCE may automatically perform the comparison of the properties of new block to the properties of blocks stored in model relationship database . In some implementations client device TCE may perform the comparison when the user selects or hovers over e.g. with a pointing device new block . As further shown in the particular block may be associated with identifiers of blocks that may connect to the particular block. For example identifiers may include an identifier for a Heat Transfer block an identifier for an Adiabatic Cup block and an identifier for a Valve block. In some implementations identifiers may be provided in a ranked list based on weights assigned to identifiers .

As shown in client device TCE may provide for display via user interface a first window that identifies suggested blocks for a first connection Connection and a second connection Connection of new block . As further shown in client device TCE may provide for display via user interface a second window that provides a ranked list of identifiers e.g. the Heat Transfer block identifier the Adiabatic Cup block identifier and the Valve identifier for blocks that may connect to the first connection of new block . In example further assume that the user selects the Heat Transfer block identifier from second window e.g. via a pointing device and that client device TCE receives the selection of the Heat Transfer block identifier.

Based on the selections client device TCE may connect a selected block e.g. a Heat Transfer block associated with the selected Heat Transfer block identifier to new block in the new model. In some implementations client device may retrieve the Heat Transfer block from the modeling environment provided by client device . If the modeling environment does not include the Heat Transfer block client device TCE may retrieve the Heat Transfer block from existing models provided in corpus of documents . Client device TCE may provide the Heat Transfer block to the new model. Client device TCE may provide for display via user interface the new model with a port of new block connected to a port of selected block as shown in . In some implementations the connection between new block and selected block may be displayed with a line. Client device TCE may perform the aforementioned functions for other ports of new block for port s of selected block and or for any additional blocks added by the user to the new model.

In some implementations a block may refer to a system with dynamic behavior e.g. as a series of ordered values and may refer to a textual description such as that of a model e.g. in Modelica . The textual description may contain instructions e.g. connect in Modelica to connect blocks. The connections may be based on ports that may have causal and non causal semantics. Also a port may be assigned a certain domain and this may determine which blocks are valid connections to this port. In some implementations client device TCE may provide recommendations for blocks that may connect to blocks of a physical system model based on ports and port types as opposed to blocks and block types . For example a constant volume chamber may include two ports a port in the pneumatic domain and a port in the thermal power domain. Each of these ports may include a separate list of ranked connection candidates. Client device TCE may display a different list of recommendations depending on which port a user wishes to connect.

With reference to assume that the user previously created a model as shown in a user interface and wants to check the model for discrepancies against information provided in model relationship database . Client device TCE may utilize model relationship database to check the connected blocks of the model shown in user interface . If client device TCE discovers discrepancies in the model of user interface based on the check client device TCE may highlight e.g. with colors flags indicators etc. the discrepancies in user interface . For example as further shown in client device TCE may highlight e.g. with a flag a discrepancy for the connection between a first block Block and a second block Block of the model e.g. the blocks involved may be underlined or outlined in red for an error and in yellow for a warning . In some implementations client device TCE may display a message such as a message indicating that Block should be replaced with Block or as shown in .

Systems and or methods described herein may provide recommendations for blocks that may connect to blocks of a physical system model. The systems and or methods may retrieve information associated with existing models from a corpus of documents and may determine relations between blocks of the existing models. The systems and or methods may assign weights to the relations between the blocks and may utilize the weights to generate the recommendations. When a new block of a new model is created the systems and or methods may provide recommendations for the new block based on the block relation information obtained from the existing models.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an ASIC or a FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used herein should be construed as critical or essential unless explicitly described as such. Also as used herein the articles a and an are intended to include one or more items and may be used interchangeably with one or more. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

