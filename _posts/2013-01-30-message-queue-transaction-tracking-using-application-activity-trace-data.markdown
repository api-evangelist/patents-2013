---

title: Message queue transaction tracking using application activity trace data
abstract: An approach is provided that detects inbound messages being put to message queues managed by a middleware message queuing platform. The approach retrieves activity trace data corresponding to each of the inbound messages, with the activity trace data maintained by the middleware message queuing platform. The approach generates inbound event records corresponding the inbound messages based on the activity trace data. The approach then detects outbound messages retrieved from the message queues. Activity trace data corresponding to the outbound messages is retrieved and the approach generates an outbound event record for each outbound message. The approach receives a transaction request from a requestor that corresponds to a message. The approach retrieves and returns the inbound event records and outbound event records that correspond to the requested message. The retrieved event records are used for transaction tracking: to build transaction flow topologies and to report transaction performance metrics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08683489&OS=08683489&RS=08683489
owner: International Business Machines Corporation
number: 08683489
owner_city: Armonk
owner_country: US
publication_date: 20130130
---
This application is a continuation of U.S. application Ser. No. 13 537 043 filed Jun. 28 2012 titled MESSAGE QUEUE TRANSACTION TRACKING USING APPLICATION ACTIVITY TRACE DATA and issued as U.S. Pat. No. 8 549 540 on Oct. 1 2013.

The present disclosure relates to an approach that tracks transactions through a middleware message queue environment by using application activity trace data.

Middleware message queues such as WebSphere MQ are message queuing technologies that allow users to create pass and consume messages programmatically in a networked environment independent of the underlying network topology or protocols. Transaction tracking technologies monitor application activity and transaction flows in order to determine transaction topologies and transaction performance metrics. To perform transaction tracking of middleware message queues data describing applications use of message queues and the underlying processes are collected. Traditionally middleware message queues do not expose the data necessary for a complete or efficient transaction tracking solution. Consequently transaction tracking agents are forced to construct a complete set of transaction tracking data from multiple inter dependent monitoring points. Having incomplete data consequently forces multiple concessions from transaction tracking solutions such as performance multiple instrumentation points are required accuracy lost data causing subsequent transaction tracking failures and the inability to dynamically enable disable data collection some level of monitoring is always required due to the inter dependencies .

An approach is provided that detects inbound messages being put to message queues managed by a middleware message queuing platform. The approach retrieves activity trace data corresponding to each of the inbound messages with the activity trace data maintained by the middleware message queuing platform. The approach generates inbound event records corresponding the inbound messages based on the activity trace data. The approach then detects outbound messages retrieved from the message queues. Activity trace data corresponding to the outbound messages is retrieved and the approach generates an outbound event record for each outbound message based on the activity trace data. The approach receives a transaction request from a requestor that corresponds to a message. The approach retrieves and returns the inbound event records and outbound event records that correspond to the requested message. The retrieved event records are used for transaction tracking to build transaction flow topologies and to report transaction performance metrics.

The foregoing is a summary and thus contains by necessity simplifications generalizations and omissions of detail consequently those skilled in the art will appreciate that the summary is illustrative only and is not intended to be in any way limiting. Other aspects inventive features and advantages of the present invention as defined solely by the claims will become apparent in the non limiting detailed description set forth below.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The embodiment was chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The following detailed description will generally follow the summary of the disclosure as set forth above further explaining and expanding the definitions of the various aspects and embodiments of the disclosure as necessary.

The following detailed description will generally follow the summary of the invention as set forth above further explaining and expanding the definitions of the various aspects and embodiments of the invention as necessary. To this end this detailed description first sets forth a computing environment in that is suitable to implement the software and or hardware techniques associated with the invention. A networked environment is illustrated in as an extension of the basic computing environment to emphasize that modern computing techniques can be performed across multiple discrete devices.

Northbridge and Southbridge connect to each other using bus . In one embodiment the bus is a Direct Media Interface DMI bus that transfers data at high speeds in each direction between Northbridge and Southbridge . In another embodiment a Peripheral Component Interconnect PCI bus connects the Northbridge and the Southbridge. Southbridge also known as the I O Controller Hub ICH is a chip that generally implements capabilities that operate at slower speeds than the capabilities provided by the Northbridge. Southbridge typically provides various busses used to connect various components. These busses include for example PCI and PCI Express busses an ISA bus a System Management Bus SMBus or SMB and or a Low Pin Count LPC bus. The LPC bus often connects low bandwidth devices such as boot ROM and legacy I O devices using a super I O chip . The legacy I O devices can include for example serial and parallel ports keyboard mouse and or a floppy disk controller. The LPC bus also connects Southbridge to Trusted Platform Module TPM . Other components often included in Southbridge include a Direct Memory Access DMA controller a Programmable Interrupt Controller PIC and a storage device controller which connects Southbridge to nonvolatile storage device such as a hard disk drive using bus .

ExpressCard is a slot that connects hot pluggable devices to the information handling system. ExpressCard supports both PCI Express and USB connectivity as it connects to Southbridge using both the Universal Serial Bus USB the PCI Express bus. Southbridge includes USB Controller that provides USB connectivity to devices that connect to the USB. These devices include webcam camera infrared IR receiver keyboard and trackpad and Bluetooth device which provides for wireless personal area networks PANs . USB Controller also provides USB connectivity to other miscellaneous USB connected devices such as a mouse removable nonvolatile storage device modems network cards ISDN connectors fax printers USB hubs and many other types of USB connected devices. While removable nonvolatile storage device is shown as a USB connected device removable nonvolatile storage device could be connected using a different interface such as a Firewire interface etcetera.

Wireless Local Area Network LAN device connects to Southbridge via the PCI or PCI Express bus . LAN device typically implements one of the IEEE 0.802.11 standards of over the air modulation techniques that all use the same protocol to wireless communicate between information handling system and another computer system or device. Optical storage device connects to Southbridge using Serial ATA SATA bus . Serial ATA adapters and devices communicate over a high speed serial link. The Serial ATA bus also connects Southbridge to other forms of storage devices such as hard disk drives. Audio circuitry such as a sound card connects to Southbridge via bus . Audio circuitry also provides functionality such as audio line in and optical digital audio in port optical digital output and headphone jack internal speakers and internal microphone . Ethernet controller connects to Southbridge using a bus such as the PCI or PCI Express bus. Ethernet controller connects information handling system to a computer network such as a Local Area Network LAN the Internet and other public and private computer networks.

While shows one information handling system an information handling system may take many forms. For example an information handling system may take the form of a desktop server portable laptop notebook or other form factor computer or data processing system. In addition an information handling system may take other form factors such as a personal digital assistant PDA a gaming device ATM machine a portable telephone device a communication device or other devices that include a processor and memory.

The Trusted Platform Module TPM shown in and described herein to provide security functions is but one example of a hardware security module HSM . Therefore the TPM described and claimed herein includes any type of HSM including but not limited to hardware security devices that conform to the Trusted Computing Groups TCG standard and entitled Trusted Platform Module TPM Specification Version 1.2. The TPM is a hardware security subsystem that may be incorporated into any number of information handling systems such as those outlined in .

Middleware message queuing platform is a message oriented middleware software application. Middleware message queuing platform allows independent and potentially non concurrent applications on a distributed system to communicate with each other. For example middleware message queuing platform allows service requestor and service provider to communicate through messages managed by queues maintained by the middleware message queuing platform. Some of the processes middleware message queuing platform executes to perform these services include processes and .

Middleware message queuing platform is a message queuing technology that allows processes to create pass and consume messages programmatically in a networked environment e.g. the Internet etc. independent of the underlying network topology or protocols. Transaction tracking technologies process monitor application activity and transaction flows to determine transaction topologies and transaction performance metrics. To perform transaction tracking of middleware message queuing messages the process collects data describing various applications use of message queues and the underlying processes that support the transport of application messages within the middleware message queuing platform. Traditionally middleware message queuing platforms did not expose data necessary for a complete or efficient transaction tracking solution. However in the approach provided herein middleware message queuing platform s process gathers data that may be utilized for transaction tracking purposes and stores the data as application activity trace data in memory area . As further described in message queue transaction tracking process consumes activity trace data and prepares transaction tracking data which is stored in memory area . show how the message queue transaction tracking process handles requests e.g. from users etc. for transaction tracking data pertaining to particular messages managed by middleware message queuing platform .

The process determines whether the read message queue activity record pertains to a put operation e.g. MQPUT etc. that was used to store put the data to the message queue decision . If the message queue activity record read at step pertains to a put operation then the process branches to the yes branch whereupon at predefined process the process handles the PUT operation see and corresponding text for processing details .

On the other hand if the message queue activity record read at step does not pertain to a put operation then decision branches to the no branch. The process then determines whether the read message queue activity record pertains to a get operation e.g. MQGET etc. that was used to retrieve get the data from the message queue decision . If the message queue activity record read at step pertains to a get operation then the process branches to the no branch whereupon at predefined process the process handles the GET operation see and corresponding text for processing details . On the other hand if the message queue activity record read at step does not pertain to a get operation then decision branches to the no branch whereupon at predefined process the process handles other types of operations see and corresponding text for processing details .

After the process handles the record read at step using either predefined process predefined process or predefined process as described above then at step the process stores the results of the operation handling in middleware message queuing transaction tracking data memory area . The process determines whether there are additional records queued in Application Activity Trace Data memory area to process as decision . If there are additional records to process then the process branches to the yes branch which loops back to read and process the next record as described above. If there are no more records to process at this time then the process branches to the no branch whereupon at step the process waits for the next record and when the next record arrives in queue the process loops back to read and process the record as described above.

At step the process retrieves inbound event linking stitching data from application trace data and stores the event linking stitching data as part of the inbound event record stored in transaction tracking data inbound correlation data . Inbound correlation data includes data extracted from the Application Activity Trace data that uniquely identifies the message instance e.g. msgid correlid msg length etc. .

At step the process retrieves timing data related to the PUT operation from Application Activity Trace Data and stores the timing data as part of the inbound event record stored in transaction tracking data inbound timing data . The difference between the PUT time for a message instance on a given message queue and the GET time for the same message on the same underlying message queue indicates an elapsed time that the message spent on the queue. Processing then returns to the calling routine see at .

At step the process retrieves outbound event linking stitching data from application trace data and stores the event linking stitching data as part of the outbound event record stored in transaction tracking data outbound correlation data . Outbound correlation data includes data extracted from the Application Activity Trace data that uniquely identifies the message instance e.g. msgid correlid msg length etc. .

At step the process retrieves timing data related to the PUT operation from Application Activity Trace Data and stores the timing data as part of the outbound event record stored in transaction tracking data outbound timing data . The difference between the GET time for a message instance on a given message queue and the PUT time for the same message on the same underlying message queue indicates an elapsed time that the message spent on the queue. Processing then returns to the calling routine see at .

At step the process retrieves inbound and outbound contextual data corresponding to the message selected by the requestor. The inbound and outbound contextual data describe a particular transaction. The data is retrieved from transaction tracking data with the inbound contextual data being retrieved from memory area within data and with the outbound contextual data being retrieved from memory area within data . At step the process also stores the retrieved data into requested transaction data memory area .

At step the process identifies the flow of the message through various message network configurations such as alias queues remote queues cluster queues shared queues and combinations thereof by utilizing correlation data. The correlation data is retrieved from transaction tracking data with the inbound correlation data being retrieved from data area and with the outbound correlation data being retrieved from data area . At step the process also stores the retrieved data into requested transaction data memory area .

At step the process identifies the timing of the selected message such as the amount of time the message spent on various message queues etc. The timing data is retrieved from transaction tracking data with the inbound timing data being retrieved from data area and with the outbound timing data being retrieved from data area . The process calculates a time difference between the inbound time included in the retrieved inbound timing data record and the outbound time included in the retrieved outbound timing data record with the time difference being an elapsed time that the selected message was queued in one or more queues managed by the middleware message queuing platform. At step the process also stores the retrieved data into requested transaction data memory area .

At step the process identifies sync point data e.g. for operations that will be committed rolled back etc. . The sync data is retrieved from transaction tracking data data area within transaction tracking data . At step the process also stores the retrieved data into requested transaction data memory area . At step the process provides the retrieved data corresponding to the requestor s request to the requestor e.g. transmits or provides requested transaction data to requestor . The retrieved event records are used for transaction tracking to build transaction flow topologies and to report transaction performance metrics. Processing thereafter ends at .

At step the process retrieves inbound and outbound contextual data corresponding to the selected message. The inbound and outbound contextual data describe a particular transaction. The data is retrieved from transaction tracking data with the inbound contextual data being retrieved from memory area within data and with the outbound contextual data being retrieved from memory area within data . At step the process also stores the retrieved data into transaction database .

At step the process identifies the flow of the message through various message network configurations such as alias queues remote queues cluster queues shared queues and combinations thereof by utilizing correlation data. The correlation data is retrieved from transaction tracking data with the inbound correlation data being retrieved from data area and with the outbound correlation data being retrieved from data area . At step the process also stores the retrieved data into transaction database .

At step the process identifies the timing of the selected message such as the amount of time the message spent on various message queues etc. The timing data is retrieved from transaction tracking data with the inbound timing data being retrieved from data area and with the outbound timing data being retrieved from data area . The process calculates a time difference between the inbound time included in the retrieved inbound timing data record and the outbound time included in the retrieved outbound timing data record with the time difference being an elapsed time that the selected message was queued in one or more queues managed by the middleware message queuing platform. At step the process also stores the retrieved data into transaction database .

At step the process identifies sync point data e.g. for operations that will be committed rolled back etc. . The sync data is retrieved from transaction tracking data data area within transaction tracking data . At step the process also stores the retrieved data into transaction database .

The process determines whether there are more message that were received within the prescribed time period decision . If there are more messages then decision branches to the yes branch which loops back to select and process the next message as described above. This looping continues until all of the message that fall within the defined period have been processed at which point decision branches to the no branch. At step the process repeats the selection of messages as described above based on a defined time period e.g. every five or ten minutes etc. . When the process repeats all of the messages within the time period are selected and processed as described above with the results being stored in tracking database .

User performs ad hoc queries against the data stored in tracking database . In this manner the user can analyze particular messages or sets of messages to better understand the flow of messages through the middleware message queuing platform.

One of the preferred implementations of the invention is a client application namely a set of instructions program code or other functional descriptive material in a code module that may for example be resident in the random access memory of the computer. Until required by the computer the set of instructions may be stored in another computer memory for example in a hard disk drive or in a removable memory such as an optical disk for eventual use in a CD ROM or floppy disk for eventual use in a floppy disk drive . Thus the present invention may be implemented as a computer program product for use in a computer. In addition although the various methods described are conveniently implemented in a general purpose computer selectively activated or reconfigured by software one of ordinary skill in the art would also recognize that such methods may be carried out in hardware in firmware or in more specialized apparatus constructed to perform the required method steps. Functional descriptive material is information that imparts functionality to a machine. Functional descriptive material includes but is not limited to computer programs instructions rules facts definitions of computable functions objects and data structures.

While particular embodiments of the present invention have been shown and described it will be obvious to those skilled in the art that based upon the teachings herein that changes and modifications may be made without departing from this invention and its broader aspects. Therefore the appended claims are to encompass within their scope all such changes and modifications as are within the true spirit and scope of this invention. Furthermore it is to be understood that the invention is solely defined by the appended claims. It will be understood by those with skill in the art that if a specific number of an introduced claim element is intended such intent will be explicitly recited in the claim and in the absence of such recitation no such limitation is present. For non limiting example as an aid to understanding the following appended claims contain usage of the introductory phrases at least one and one or more to introduce claim elements. However the use of such phrases should not be construed to imply that the introduction of a claim element by the indefinite articles a or an limits any particular claim containing such introduced claim element to inventions containing only one such element even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an the same holds true for the use in the claims of definite articles.

