---

title: System and methods for power and energy modeling in computing devices using system call tracing
abstract: A method for generating a power consumption and energy usage model for a computing device includes monitoring of the power consumption of the computing device with an external power monitor when the computing device is in a base power state, monitoring of the power consumption of the computing device during execution of a system call with a processor that interacts with a component in the computing device, and monitoring the power state of the computing device before the computing device returns to the base power state. The method further includes generating a finite state machine model of the power states and transitions between power states to model the power activities and energy consumption of the computing device in the absence of an external power monitor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09170912&OS=09170912&RS=09170912
owner: Purdue Research Foundation
number: 09170912
owner_city: West Lafayette
owner_country: US
publication_date: 20130409
---
This patent claims priority to U.S. Provisional Application No. 61 621 670 which is entitled Fine Grained Power Modeling for Smartphones Using System Call Tracing and was filed on Apr. 9 2012 the contents of which are hereby incorporated in their entirety by reference.

This application cross references a copending U.S. patent application Ser. No. 13 859 690 which is entitled SYSTEM AND METHOD FOR ENERGY USAGE ACCOUNTING IN SOFTWARE APPLICATIONS and was filed on Apr. 9 2013 the contents of which are hereby incorporated in their entirety by reference.

This document relates generally to systems and methods for monitoring electrical power usage and energy consumption in electronic devices and more particularly to systems and methods for estimating electrical power and energy consumption in computing devices that execute software programs.

In recent years advances in digital computing hardware and software have resulted in a proliferation of mobile computing devices that come in a wide range of form factors including devices that are worn on the body of the user and handheld devices such as smartphones and tablets. Modern mobile computing devices incorporate numerous components including but not limited to single and multi core central processing units CPUs graphical processing units GPUs random access memory RAM digital data storage components such as solid state drives SSDs radio transceivers that provide access to local area networks LAN and wide area networks WAN global positioning system GPS receivers digital cameras touch input display screens gyroscope and accelerometer sensors and audio output components. Mobile computing devices typically receive electrical power to operate the components from an integrated battery with a comparatively limited energy storage capacity. Thus efficient operation of the components in the mobile computing device is important to extending the effective useful life of the device before the battery needs to be recharged or replaced.

In traditional computing applications the CPU and more recently the GPU have been the predominant consumers of electrical power in the computing system. Existing techniques enable monitoring of the power for the CPU and GPU during operation of the computing system. In some embodiments the CPU and GPU include integrated hardware power monitoring components that enable fine grained reporting of the power consumption of the CPU and GPU based on the frequency and utilization rate of the components in the CPU and GPU. For example a modern CPU typically includes multiple execution cores cache and peripheral components that are formed in a single integrated circuit. One or more of the cores in the CPU are utilized when executing program instructions but a typical CPU also spends a large fraction of the time in an idle state where the entire CPU or various components in the CPU do not execute programmed instructions. Modern CPUs include dynamic clock speed adjustments power gating and other power control techniques that reduce the power consumption of the CPU when one or more components in the CPU are idle or utilized at less than full capacity. For example in one operating mode a CPU with four execution cores executes a series of program instructions with a single CPU core while the remaining cores are idle. The CPU reduces the clock speed of the idle cores and optionally deactivates the idle cores completely while the active core consumes more power during execution of the program instructions. Power monitoring hardware in the CPU enables identification of the power consumption of components in the CPU with high precision based on the utilization of the different components in the CPU. Modern GPUs similarly include different power states based on utilization and include similar power monitoring capabilities. CPUs and GPUs in mobile devices are typically integrated in a single system on a chip SoC configuration and can be considered as a single device with different sub components for power consumption monitoring in some embodiments. Existing software applications can retrieve information about the power consumption of the CPU and GPU and identify the power consumption of individual software programs with reference to the utilization rates of the CPU GPU and the programs that utilize the CPU GPU during operation.

While monitoring the power consumption in the CPU and GPU is useful in determining a portion of the energy consumption in a computing device the CPU and GPU are only responsible for a fraction of the power consumption in a modern computing device. In all computing devices and mobile devices particularly the additional components in the computing device often consume a significant portion of the total system power in different operating modes. Some existing mobile devices include coarse grained power consumption monitoring capabilities that enable identification of the aggregate power consumption for the entire mobile device and some existing power monitoring solutions further monitor the aggregate power consumption of individual components within the mobile device. The existing power monitoring solutions however do not enable identification of particular operations within individual software programs that lead to power consumption in the computing device or interactions between operations of multiple software programs in conjunction with different components in the mobile computing device. Consequently methods for characterizing and estimating the power consumption of different software programs with improved precision in a wide range of computing devices including mobile computing devices would be beneficial.

In one embodiment a method for generating a power consumption and energy usage model in a computing device has been developed. The method includes monitoring power consumption of a computing device in a first power state with an external electrical power monitor connected to the computing device executing program instructions stored in a memory corresponding to a first system call with a processor in the computing device the processor operating a component in the computing device in response to execution of the first system call monitoring the power consumption in a second power state in response to executing the first system call to identify a level of power consumption and a duration of the second power state the level of power consumption in the second power state being different than a level of power consumption in the first power state monitoring the power consumption in a third power state after a transition from the second power state to identify a level of power consumption and a duration of the third power state the level of power consumption in the third power state being different than the level of power consumption in each of the first power state and the second power state generating a finite state machine FSM model including the first power state the second power state and the third power state the FSM model including a transition from the first power state to the second power state being made with reference to the execution of the first system call a transition from the second power state to the third power state being made in response to expiration of the duration of the second power state and a transition from the third power state to the first power state being made in response to expiration of the duration of the third power state and storing the FSM model in the memory for estimation of energy usage of the computing device in response to execution of the first system call by the processor in conjunction with the at least one other component when the computing device is disconnected from the external power monitor.

In another embodiment a method for generating a power consumption and energy usage model in a computing device during execution of concurrent system calls has been developed. The method includes monitoring power consumption of a computing device in a first power state with an external electrical power monitor connected to the computing device executing program instructions stored in a memory corresponding to a first system call with a processor in the computing device the processor operating a first component in the computing device in response to execution of the first system call executing program instructions stored in the memory corresponding to a second system call with the processor in the computing device concurrently to the execution of the first system call the processor operating a second component in the computing device in response to execution of the second system call monitoring the power consumption in a second power state in response to executing the first system call and the second system call concurrently to identify a level of power consumption and a duration of the second power state the level of power consumption in the second power state being different than a level of power consumption in the first power state monitoring the power consumption in a third power state in response to a transition from the second power state occurring after the second power state to identify a level of power consumption and duration of the third power state the level of power consumption in the third power state being different than the level of power consumption in each of the first power state and the second power state generating a finite state machine FSM model including the first power state the second power state and the third power state the FSM model including a transition from the first power state to the second power state being made with reference to the concurrent execution of the first system call and the second system call a transition from the second power state to the third power state being made with reference to expiration of the duration of the second power state and a transition from the third power state to the first power state being made with reference to expiration of the duration of the third power state and storing the FSM model in the memory for estimation of energy usage of the computing device in response to concurrent execution of the first system call by the processor in conjunction with the first component and the second component when the computing device is disconnected from the external power monitor.

In another embodiment a computing device that generates a power consumption and energy usage model has been developed. The computing device includes a memory configured to store program data a processor operatively connected to the memory and a component connected to the processor to enable the processor to communicate with the component. The processor is configured to receive data from an external power monitor corresponding to power consumption of the computing device in a first power state execute program instructions stored in the memory corresponding to a first system call the processor operating a component in the computing device in response to execution of the first system call receive data from the external power monitor corresponding to power consumption of the computing device in a second power state in response to execution of the first system call to identify a level of power consumption and a duration of the second power state the level of power consumption in the second power state being different than a level of power consumption in the first power state receive data from the external power monitor corresponding to power consumption of the computing device in a third power state after a transition from the second power state to identify a level of power consumption and a duration of the third power state the level of power consumption in the third power state being different than the level of power consumption in each of the first power state and the second power state generate a finite state machine FSM model including the first power state the second power state and the third power state the FSM model including a transition from the first power state to the second power state being made with reference to the execution of the first system call a transition from the second power state to the third power state being made in response to expiration of the duration of the second power state and a transition from the third power state to the first power state being made in response to expiration of the duration of the third power state and store the FSM model in the memory for estimation of energy usage of the computing device in response to execution of the first system call by the processor in conjunction with the at least one other component when the computing device is disconnected from the external power monitor.

For the purposes of promoting an understanding of the principles of the embodiments described herein reference is now be made to the drawings and descriptions in the following written specification. No limitation to the scope of the subject matter is intended by the references. This patent also includes any alterations and modifications to the illustrated embodiments and includes further applications of the principles of the described embodiments as would normally occur to one skilled in the art to which this document pertains.

As used herein the term system call refers to any software command in a computing device that enables a program running in the computing device to send or receive data from or otherwise control the operation of one or more hardware components in the computing device. System calls are implemented by operating system OS software that controls access to hardware in the computing device through a software interface. For example the Portable Operating System Interface POSIX and Windows Application Programming Interface API are two examples of system call interfaces. The term system call refers to a set of software functions that are called or invoked by the user level program to access lower level frameworks and operating system services through a controlled interface. In many instances user programs do not interact with system calls directly but instead use higher layer libraries and software frameworks that wrap the functionality of system calls. For example the Android system incorporates a version of the Linux Kernel and additional software frameworks and libraries in user space. Some user level software programs are executed inside of software virtual machines VMs that isolate the software programs and provide an underlying software framework for interacting with hardware components in the computing device. In Android a native development toolkit NDK also enables non virtualized native applications to access selected libraries and the underlying Linux Kernel through for example compiled code from the C and C programming languages. The native applications may be ported from other platforms and in some instances include higher performance than virtualized applications. In versions of the Windows Phone operating system some user level applications are executed in virtual machines such as the common language runtime CLR while other programs execute system calls using software libraries within a single operating system instance that is executed by the hardware of the computing device.

As used herein the term power state refers to an identified level of power consumption of a single component or multiple components in a computing device during a mode of operation. For example a wireless transceiver in a computing device operates in different power states when the wireless transceiver is idle receiving data sending data or scanning for available wireless networks. In some power states the power consumption of a component or the entire computing device vary within a range in a single power state and a linear regression LR model or other estimation technique estimates the variations in power consumption in the power state. In some instances a component operates in a power state at a level of power consumption and for a time duration that corresponds to one or more input parameters to a system call. For example in the POSIX specification the write system call is used to write data to a file. A parameter in the write system call indicates the size of a data buffer that is to be written to the file. The write system call affects the power state of a data storage component such as a solid state disk SSD or other storage medium and the size of the data to be written to the storage component affect the length of the writing process and the total energy consumption during the writing process.

As described in more detail below in some instances the computing device executes a system call and the processor returns control to the calling program before all of the components in the computing device finish performing actions that consume electrical power. For example in the write system call the data storage device buffers written data and the system call returns control to the calling program before the data storage device completes the write operation and returns to a lower power state. In another operation a wireless network device sends packets of data and continues to consume power in a productive power state after the system call returns while the network data packets are transmitted. After the network component transmits the final data packet the network component returns to an intermediate power state that is below the productive power state when sending the data packets but above an idle state when the network device is not in use. As used herein the term productive power state refers to the power state that occurs during activity in a component that is performed in response to receiving the system call. A productive power state may have a longer duration than the apparent processing time of the system call from the time at which the system call is executed until the system call function returns control to the calling program. A power state that occurs when a component in the computing device consumes power after the completion of the productive power states for a system call is referred to as a tail power state. If the component remains inactive for a sufficient period of time in the tail power state the component returns to the base power state. As used herein the term base power state refers to a power state in which the component consumes a minimal amount of power during operation of the computing device.

As used herein the term finite state machine FSM refers to a model of operation for a computing device where the computing device operates in one of a plurality of states and one or more events that occur during operation of the computing device precipitate transitions between the states. FSMs are used in a wide range of computing applications and are described herein for use as a power consumption and energy usage model of a computing device during different modes of operation. In the power consumption and energy usage model each state of the FSM corresponds to a power state for either the entire computing device or selected components in the computing device. The transitions between power states are triggered through invocation of system calls completion of execution of system calls and from transitions between tail power states that occur in response to the operation of different components in the computing device after nominal completion of the system call.

As is known in the art the electrical power consumption of the computing device corresponds to the supply voltage E multiplied by the supply current I . In many mobile electronic devices the supply voltage E is held constant during operation of the device and the level of electrical current varies as the device increases and decreases power consumption during operation. For example some mobile computing devices receive power from lithium ion batteries that generate a supply voltage of 3.7 volts. In other embodiments an electrical power supply includes multiple voltage rails that each provides electrical power at one of a plurality of constant voltage levels such as 12 volts 5 volts and 3.3 volts to different components in a computing device. Thus the changes to the electrical power consumption in computing devices are sometimes referred to in terms of the electrical supply current. As is further known in the art the energy consumption of the computing device is the integral of the power consumption over time. Thus when the computing device operates in an identified power state for an identified time duration the energy consumption corresponds to the level of power consumption in the power state multiplied by the time duration in the power state.

In the computing device the processor includes one or more central processing unit CPU cores and a graphical processing unit GPU . In the computing device the CPU and GPU are combined into a single integrated circuit in a system on a chip SoC configuration. The CPU includes one or more execution cores that implement a general purpose instruction set including but not limited to instruction sets from the x86 ARM MIPS and POWER families. The GPU includes computational units including fixed function and programmable shader processors geometry and rasterization engines that enable generation of 2D and optionally 3D graphics through the display component using for example the OpenGL or Direct 3D application programming interfaces APIs . The CPU and GPU optionally share hardware resources and in some embodiments the GPU also performs computational tasks that are unrelated to the generation of graphics using for example the OpenCL API. In an alternative embodiment the CPU and GPU communication through an external I O channel such as the PCI express PCIe data bus standard. As described in more detail below the processor is responsible for execution of stored program instructions implement in an operating system software frameworks and system libraries and user level program instructions. The processor executes system calls that enable user level programs to invoke the operating system to access components in the computing device through one or more of the I O channels .

In the computing device the audio component is typically a digital signal processor DSP in association with filters amplifiers speakers and other hardware and software components that enable the computing device to generate audio output signals. In one embodiment the processor executes one or more software programs to decompress and decode audio data into a pulse code modulated PCM format or other suitable format for audible output of music voice and other sounds through the audio output component .

The random access memory RAM stores program data for executing programs as well as data corresponding to user files and temporary system data. RAM is typically a volatile memory module that does not retain information after the removal of electrical power from the computing device . The processor uses the RAM for temporary data storage during operation in addition to smaller memory caches that are typically incorporated with the CPU and GPU . The RAM is commonly used to store data that are read from the data storage component and held within a memory buffer for use by the OS and software applications. As described below system calls that nominally interact with the data storage component actually read or write buffered file data stored in the RAM for blocks of data that are temporarily held in the memory buffer.

The global positioning system GPS receiver includes a radio receiver and antenna that are typically configured to receive timing signals from multiple orbiting satellites to identify a geographic location of the computing device and optionally identify a rate and direction of travel for the computing device . In alternative embodiments the GPS includes additional radio receivers that receive signals from terrestrial radio transmitters and some GPS embodiments further include compasses altimeters accelerometers and gyroscopes that provide inertial navigation services in addition to receiving signals from external navigation systems. In some embodiments the processor requests geographic coordinates such as latitude and longitude coordinates from the GPS and the GPS caches the response for a brief time. Thus the GPS enters a higher power state to identify the location of the computing device when no location coordinate data have been requested for a predetermined period of time but the GPS sends cached location coordinate data in response to a subsequent request that occurs within a predetermined length of time.

The wireless network component includes one or more radio transceivers that implement wireless local area network WLAN and wireless wide area network WWAN functionality. Examples of WLAN transceivers include transceivers that implement the Bluetooth and the IEEE 802.11 Wi Fi families of protocols. Examples of WWAN transceivers include transceivers that implement the GSM CDMA UMTS LTE EDGE EVDO WiMAX and other WWAN standards that enable wireless and voice and data communication. In a mobile computing device configuration the computing device sends and receives wireless data packets via a wireless component that implements the physical layer of the standard network protocol stack that is implemented with the operating system software in the computing device . The wireless network component optionally implements telephony using GSM and CDMA protocols that interface with a cellular telephony network. In mobile computing devices the wireless network components often consume large amounts of electrical power. Many wireless network components transition between multiple power states to reduce power consumption when the wireless transceiver is idle or operating at low data rates while increasing power consumption to operate at higher data rates.

The camera is typically a digital camera that generates still photographs or video data in response to commands received from the processor . In some embodiments an illumination source such as a flash light or infrared illuminator provides artificial illumination for the camera. The camera typically draws minimal power when deactivated but the camera and associated illumination sources may draw substantial power over short periods for still photographs or for longer periods when generating videos.

The display component includes one or more devices that produce graphical displays of text pictures video and graphical user interfaces GUIs for controlling programs in the computing device . In a mobile computing device the display component typically includes a backlit liquid crystal display LCD or an organic light emitting diode OLED display component. The majority of power consumption associated with the display component is associated with generating an active emission of light to enable a user to view the display. In an LCD embodiment a backlight such as an array of light emitting diodes LEDs generates the light. In an OLED panel individual organic LED pixels emit light to form a visible display. The level of power consumption for the display component varies based on the amount of time when the display emits light and the brightness of the display output.

The input component includes touch input components such as capacitive and resistive touch interfaces that are integrated with the display and other input modes including but not limited to buttons dials switches keyboards mice touch pads gesture input and voice input components. The input component enables the user to enter input to control the operation of one or more software programs in the computing device .

The data storage component is a non volatile digital data storage component that stores operating system OS data framework and system library data program and user data and power state FSM model data . In a typical mobile device the data storage component is a solid state memory component such as a solid state drive SSD that is employs NAND flash or another memory storage technology that is adapted to use in mobile applications. Personal computer PC computing devices typically use one or more solid state magnetic disk or optical disk data storage components.

The user programs and data include a wide range of software programs that are installed by a user for execution by the computing device . User data also include data files such as photographs videos audio files word processing documents and spreadsheets databases stored email and text messages and any other data that the user of the computing device views or manipulates using the software programs in the computing device . The power state FSM model data include stored power state and power state transition FSM models that are generated using processes that are described more fully below in and .

The operating system OS data includes binary executable code that implements an operating system kernel and hardware driver software that enables the OS to control the operation of the various hardware components in the computing device . In the context of mobile computing devices common embodiments of the OS software include variants of the Windows CE and Windows NT kernels used in versions of Windows Mobile OS and Windows Phone OS the Linux kernel used in the Android OS and the XNU kernel used in Apple iOS . As used in this document the OS software refers to kernel level software that implements the system calls used by higher layer programs in addition to other services that are separated from user level software programs through kernel interfaces. In some software configurations the OS software also provides services for the generation of multiple virtual machines VMs that further isolate higher level programs. Other portions of an operating system are often referred to more broadly to include framework code such as system libraries graphical user interface GUI toolkits input interface libraries and the like. The framework code interfaces with the kernel services provided by the OS code but the processor executes the services and library functions in the framework as part of the user memory space that includes higher level user programs . For example a web browser executed on a smartphone is a user level program that typically use integrated libraries and services such as HTML and JavaScript engines in the framework program data . The framework program data include invocations of system calls to request services from the OS . In another embodiment the user programs can bypass the framework code to invoke system calls with the OS directly.

In the embodiment of both the OS code and framework code are instrumented to enable precise tracing of the execution of system calls and associated software functions in the computing device . As used herein the term instrumentation as applied to the OS and framework code refers to any software instructions that enable monitoring and recording of the execution of system calls including the identity of a system call a time at which a system call is invoked the data parameters that are passed to the system call any data that are returned from the system call and a call trace of the software function thread and process that invoked the system call including a log of previous system calls that may have been made in conjunction with the traced system call. Various forms of instrumentation including thunking operating system level tracing services such as dtrace and SystemTap debugging utilities like strace and program profilers can be used to instrument the OS code and framework code .

In the Android system the user level applications rarely invoke system calls directly. Instead the application invokes calls to frameworks services and lower level libraries that mask the complexity of the lower layer system call interface and enable higher level programs to interact with a large number of hardware components such as different GPS receiver models without requiring specific code for each hardware component model. The instrumentation of the OS and the software framework stack enables precise tracing of system calls and synchronization of system call execution with the monitored power consumption in the computing device that is used to generate FSM models for estimation of power and energy consumption in the computing device .

In the computing system the I O channels communicatively couple the processor to the other components in the computing device to enable the processor to operate the components and send receive data from the components. For example the processor typically includes a memory controller that enables the processor to send addressing read and write commands to the RAM through electrical traces that are formed in a printed circuit board. The processor uses other standardized I O channels including but not limited to the peripheral component interconnect PCI PCI express IC Universal Serial Bus USB IEEE 1394 Firewire serial AT attachment SATA small computer system interface SCSI and Ethernet I O channels to communicate with various components in the computing device . In the computing device many system call operations include reading or writing data in the RAM to one or more of the components through the I O channels . As depicted in the RAM is communicatively connected to the components through the I O channels using for example direct memory access DMA or other communication techniques that enable direct communication between the RAM and components in the computing device with little or no interaction with the CPU in the processor . Thus in some system calls the processor performs a minimal amount of processing to arbitrate access between components and the RAM to perform the direct memory access but the data transfer occurs independently from the operation of the processor .

In the configuration of an external power monitor is operatively connected to the computing device . The external power monitor is configured to monitor the electrical power consumption of the computing device during different modes of operation including monitoring the power consumption before during and after execution of system calls with the processor to identify power states in the computing device . Power states include a base power state when the computing device is activated but otherwise idle productive power states when the processor and one or more system components fulfill a request invoked through a system call and tail power states when one or more components in the computing device consume power at an elevated level from the base state but do not perform processing in conjunction with a system call. The power consumption data that are generated by the external power monitor are stored in a memory such as the data storage component or in the memory of an external computing device not shown . In one embodiment the external power monitor monitors the supply of electrical power to the computing device and temporarily replaces a battery or other energy storage component that is use to supply power to a mobile computing device and measure the power consumption at a predetermined rate such as once every 200 microseconds. After generation of the power state FSM data the external power monitor is disconnected from the computing device during normal operation of the computing device and the processor optionally estimates the power and energy consumption of the computing device using the power state FSM data without requiring the external power monitor . In one embodiment the external power monitor is a Monsoon PowerMonitor from Monsoon Solutions Inc. of Bellevue Wash.

As described below the computing device executes a series of system calls that generate activity through the I O channels to operate components in the computing device . During a power monitoring process the processor generates time stamps corresponding to the time at which the system calls are executed and are completed. Since many of the components in the computing device continue to consume electrical power at elevated levels in tail power states after the processor returns from the system call the power meter continues to monitor the power consumption after the return of the system call until the computing device returns to the base power state.

Process begins when the computing device operates in a predetermined base state and the power meter monitors the total power consumption of the computing device block . In the base state the CPU in the processor is operated at a fixed power consumption level and the other components in the computing device are placed in an idle state at a minimum operational power level. In one embodiment the CPU is operated at a fixed clock frequency with all of the processing cores caches and other functional units being activated in the base state. In the computing device the GPU is similarly operated at a fixed power level or is optionally deactivated if the GPU is not required for execution of some or all of the system calls in the computing device . The CPU is operated at the fixed power level in the base state and in other power states to minimize any changes in the power consumption due to the operation of the CPU . Instead the changes in power states of the computing device occur due to activation of components in the device in response to system calls the operation of the components in different power states and the return of the components to idle operation in the base state. The computing device consumes some electrical power in the base state but the electrical power consumption is less than during productive power states of the components in the computing device.

Process continues as the computing device executes a predetermined system call including a set of data parameters that are passed to the system call if applicable block . In the computing device the execution of the system call is monitored with the instrumented OS or software frameworks to identify the time at which the system call begins execution. The time of execution of the system call in the processor computing device is synchronized with timestamps for the output of the power monitor to enable identification of a change in power consumption for the computing device at the time of execution for the system call.

The power monitor monitors a transition in power state and a duration of the power state from the base state to another power state in response to the execution of the system call block . During an identified power state the power consumption of the computing device remains constant within a predetermined range of variation e.g. 10 mW . Thus the processor identifies the productive power state using for example a moving average of electrical current draw readings from the power monitor . When the power level deviates from the moving average value of the previous power state for a sufficient time e.g. 20 ms then the power monitoring data indicate the transition to a new power state. For example when the processor execute the system call the power consumption level changes to a new level that deviates from the power consumption level in the base state for transition to the productive power state.

The power monitor continues to monitor the power consumption of the computing system during process to identify when the computing system transitions to different productive power states tail power states and returns to the base power state block . Both the power level and duration of the power states are measured during process . The processor or an external computing device identify power states and transitions between power states after the execution of the system calls in process in a manner that does not affect the power consumption of the computing device when executing and monitoring the power states corresponding to the system calls.

In some configurations the processor in the computing device executes a series of system calls in a predetermined order to execute operations that are performed by software programs during regular operation of the computing device block . For example to write file data to the data storage component using the Android operating system the processor executes commands through the software framework and underlying OS to perform the open system call one or more read and write system calls and the close system calls. The open system call initiates accesses to a file associated with the user programs and data in the data storage component . In some embodiments the open system call returns quickly which causes the data storage component to enter a productive power state briefly followed by tail power state with a higher level of power consumption than the base state. The data storage component remains in the elevated tail power state until a measured time elapses after the productive power state ended and the data storage component returns to the base power state. During one configuration of process the processor executes one or more read and or write system calls while the computing device is in the tail power state. The power monitor measures the transitions from the tail power state to a productive power state while the write takes place and then returning to the tail power state.

In another configuration of the process the processor delays the execution of additional read or write system calls until the computing device returns to the base power state. The power monitor measures transitions between the base power state the productive power state when reading or writing data to the data storage component and any tail power states for each of a series of read or write system calls.

Additionally the instrumented OS software optionally identifies if the data corresponding to one or more read or write system calls are temporarily buffered in the RAM during the execution of the execution of the system call. If the data is buffered in the RAM the processor performs the system call using the buffered data without interacting with the data storage component and the system call does not generate a transition in power state. The OS includes low level instrumentation that identifies the state of RAM buffers used for file caches to identify if a particular invocation of a system call generates I O activity with the storage component or merely accesses the RAM . For example a memory cache typically stores a portion of a file or the entire file using one or more fixed size blocks of data. The instrumented OS identifies the portion of the file that is affected by the system call and identifies if the data blocks in the file are stored in the RAM and if so label the system call with a data access status flag. The data access status flag indicates that the blocks are cached then the system call does not result in access to the data storage component .

In another configuration of the process the processor executes a series of system calls at different rates to identify different power states for a component in the computing device . For example in one embodiment the wireless network component enters a first power state when executing system calls to transmit data packets at less than a threshold rate and enters a higher power state if the rate of packet transmission exceeds the threshold rate. Since the threshold rate for packet transmissions that produce transitions to different power states are not known in advance the system call sequences in one or more instances of the process are executed at different rates to identify the threshold rate for executing system calls that trigger the changes in productive power states. For example in one embodiment of the process the processor executes system calls to transmit packets with the wireless network component at a rate of less than fifty packets per second. The wireless network component consumes power to transmit the packets but due to the comparatively low transmission rate the network component operates at less than a maximum operating power level. The power monitor measures the power state for the computing device during transmission of data packets at the lower transmission rate. In one embodiment the system calls for transmitting data packets are executed at different rates and optionally with different numbers of data packets passed as parameters to the system calls to transition the operation of the wireless network component to a higher level power state in which the packets are transmitted in a higher bandwidth mode. In another embodiment a single system call includes a data parameter that produces either the lower bandwidth transmission or higher bandwidth transmission in the same manner as a sequence of individual system calls that are executed at different rates. During process the processor executes system calls to have the wireless network component sends packets at different rates ranging from low bandwidth to high bandwidth transmission rates. The power monitor monitors the power consumption levels and durations of the productive power states and the power consumption levels and durations of tail power states between the execution of system calls in the system call sequence.

An efficient process for identifying a threshold between the low productive power state and the high productive power state includes performing a binary search using a range of data parameters that are passed to a series of socket write system calls for transmission of packets at different sending rates. As discussed above different sending rates affect the power state of some components. Some parameter values are selected from a numerical range and the process is configured to select parameter values using a binary search sequence to efficiently search for the parameter value that corresponds to the threshold sending rate for identifying when the component such as the wireless network component transitions between different productive power states. The binary search scheme effectively covers the entire range of parameter values that are passed to the system call without having to execute the system call with every potential parameter value.

The binary search process performs repeated invocations of the write system call with different write parameter sizes to identify the ranges of the data parameter values that produce transitions to the lower power and higher power productive power states. For example a binary search process executes the write system call with the maximum data parameter value 2bytes and executes a series of write system calls with smaller data parameters that are reduced by a factor of two during each successive system call e.g. 2bytes 2bytes etc . The binary call search process continues until the system executes the socket write system call with 2bytes of data which results in a transition to the lower power consumption productive power state. The search process continues with parameter values inbetween 2 20 and 2 21 until the range is sufficiently narrowed down to a single threshold or a small range of thresholds. In the example above the binary search process identifies the first and second power states and the threshold data parameters that generate transitions to the power states using at most 32 system calls instead of requiring a system call for every potential data parameter value to the system call.

In addition to identifying if an invocation of a system call generates transitions to different productive power states the external power monitor measures the duration of the productive power states that are triggered after each set of data parameters to the system call. The duration of the power states for some system calls is substantially constant. For example in one embodiment the processor triggers a productive power state with a single duration whenever the open system call is invoked. The duration of the productive and tail power states for some system calls vary with reference to the parameters that are passed to the system call. For example the duration of the productive power state in the data storage component increases in proportion to the number of bytes of data that are passed to the write system call. During process the processor executes system calls with data parameters of varying sizes to identify variations in the duration of the power states that are triggered in response to invocation of the system call with the data parameters. A linear regression model is generated to estimate the duration of the power states using a comparatively small number of invocations of the system call with varying data parameters. For example in one embodiment the process executes the write system call to write 512 bytes of data 1024 bytes 9 of data 2 2048 bytes s of data 2 4096 bytes of data 2 etc. until reaching the maximum practical data size for the write system call. The power monitor measures the duration of the power states that are triggered by each invocation of the write system call and the process generates a linear regression model for use in estimating the time duration for the power states that are triggered by the write call over a wide range of write data sizes.

Process continues after completion of one system call or a sequence of system calls block the external power monitor continues to monitor the power state of the computing device in one or more tail power states until the computing device returns to the base power state block .

Process continues as the measured power states and transitions between power states are used to generate a finite state machine FSM model of the energy consumption for the entire computing device in both the productive and tail power states that are recorded in association with one or more of the system calls in process block . The power monitor measures the instantaneous power consumption of the computing device and generates longitudinal power consumption data of the computing device over time during process including transitions between the productive and tail power states and the length of time that the computing device spends in each power state. The measured power states form the individual states in the FSM. In addition to the power consumption level of each power state the measured length of time for the duration of the power state is stored within the FSM model. As described above the duration of power states that are triggered by the invocation of some system calls depend upon the values of data parameters that are passed to the system call and the FSM model includes the linear regression models to estimate the duration of the power states with reference to the data parameters that are passed to the system calls. In one embodiment the system calls that are executed within a predetermined period of time before entering the power state and maintaining the power state are used to identify transitions between the states in the FSM. Thus the FSM is identified with reference to both the measured power states of the computing device and the recorded system calls that operate components in the computing device to produce transitions between the power states.

In the power graph the smartphone sends packets at a rate of greater than fifty packets per second. The power state graph includes the initial power state n1 which transitions to a higher power state n3 as the transmission continues and the wireless transceiver transitions from a low bandwidth operating mode to high bandwidth operating mode. The phone remains in the n3 power state during transmission of the data packets and transitions to a tail power state n2 after transmission is completed while the transceiver remains on standby prior to returning to the base power state b. The FSM model depicts the transitions between the different power states. In the FSM model includes the states and transitions of the simpler FSM model for low rate packet transmission and the additional power states and transitions corresponding to the high rate packet transmission. While not expressly illustrated in the graphs and the FSM model also includes an immediate transition from the tail power state n2 directly to the base power state b if the processor executes a socket close system call that closes the network socket being used to send the packets through the wireless network component . The computing device returns to the base power state b in response to the socket close system call instead of waiting for the identified duration e.g. 1.7 seconds of the tail power state n2 to expire. Thus as illustrated in the FSM model graphs and a tail power state optionally includes a default timeout but intervening system calls can trigger transitions to productive power states or the base power state before the expiration of the tail power state occurs.

As described above some system calls that access data files stored in data storage component actually access buffered data in the RAM due to buffering and memory caching techniques implemented in the OS . Because an access to file data in the RAM does not access the data storage device the FSM model for system calls that bypass the data storage device includes a null transition that ignores the power states corresponding to the data storage component when a system call accesses the memory buffer in the RAM . The OS includes instrumentation code to trace the execution of the system call and to further identify if the RAM is storing the file data that are accessed as part of the system call or if the system call is directed to the data storage component .

The processor in the computing device uses the FSM models in the stored power state FSM data to estimate the energy consumption for the storage component read operation during operation when the external power monitor is disconnected from the computing device . Each FSM model enables estimation of energy consumption in the computing device through identification of the current power state and the length of time that the computing device spends in the power state. For example in the FSM model the mobile computing device enters the power state d1 in response to executing the read system call and remains in the power state d1 for the duration of the system call then transitions to the tail power state d2 before transitioning to the base power state b. The marginal energy consumption of the computing device above the base state b is identified by the increased current consumption during the power state d1 which is 190 mA in the FSM model multiplied by the duration of the system call. As described above the duration of the productive and tail states are identified from the power measurement data generated by the external power monitor during process . The duration of some power states is fixed while the duration of other power states is identified from the linear regression data associated with the observed durations of the productive power states and the values of data parameters that are passed to the system calls to trigger the productive power states. The power state then transitions to the power state d2 which consumes 110 mA of additional current above the base state b and is multiplied by the predetermined length of the tail power state d2 e.g. 5 seconds in the absence of additional system calls that affect the data storage component . In the FSM model if another read system call occurs during the tail power state d2 then the FSM model includes another transition from the tail power state d2 to the productive power state d1 during the read system call. The processor estimates the marginal energy usage of the read system call as a sum of the milliamp seconds for the power states d1 and d2 multiplied by the supply voltage for the computing device e.g. 3.7 volts .

While depicts a configuration where the computing device generates the FSM model data for the power consumption and energy usage model of its own operation the FSM model data can be used in other computing devices during development of hardware and software for the computing device . For example external computing devices that implement simulators and other design tools also use the FSM data to estimate the power consumption of the computing device in response to executing system calls. Thus the FSM models generated in process enable accurate estimation of the energy consumption of different software programs in the computing device without the need to execute the software on the computing device directly.

As depicted in the power consumption graphs and power states and FSM models in the FSM models include stored data corresponding to the power consumption that occurs during both productive power states and tail power states during operation of the computing device . The productive power states include power consumption measurements that occur while the processor executes instructions as part of system calls which corresponds to the utilization based power measurements of prior art power estimation techniques. Consequently the process incorporates the power consumption measurements that are identified in prior art utilization models but further includes tail power states and other power states that affect the energy consumption of the computing device beyond the measurement of power during execution of instructions in the processor .

To generate FSMs corresponding to a wide range of operating states in the computing device the process is repeated for different system calls that are compatible with the OS and software frameworks in the computing device . In one embodiment the system call sequences are extracted using system call profiling tools or source code analysis of user level programs on the computing device to ensure that the system calls are germane to the normal operational usage of the computing device . The process is also repeated using a single system call or sequence of system calls to cover a range of system call data parameters and expected frequency of system call sequences to characterize the power states that are reached during different operating modes of the computing device . In one embodiment an automated testing program generates sequences of system calls and process identifies the different power states and transitions between power states that occur during the system call sequences. The automated testing program enables the computing device to transition through one or more tail power states and return to the base power state before executing the next series of system calls. While execution of all potential sequences of system calls and sets of input parameters is infeasible in a real computing system the automated program executes sequences commonly used system calls to provide reasonable coverage of the power states and power state transitions that occur during operation of most software applications in the computing device. As described above the data parameters that are passed to some system calls can affect the power consumption level and duration of the productive and tail power states that result from the execution of the system call.

Process describes execution of system calls during which the processor in the computing device interacts with one or more of the components in the computing device through the I O channels . In most modern computing devices the processor is capable of executing multiple instructions and multiple system calls concurrently using for example superscalar execution very long instruction word VLIW execution symmetric multi processing SMP with multiple independent execution cores and simultaneous multi threading SMT within a single execution core or a combination thereof. In different configurations the computing device executes multiple software processes simultaneously executes a single software program that includes multiple concurrent execution threads or a combination of multiple processes and multiple threads. depicts a block diagram of a process for generating one or more FSMs of the different power states in a mobile computing device during concurrent processing of multiple system calls. In the discussion below a reference to the process performing a function or action refers to a processor executing programmed instructions stored in a memory to operate one or more components in a computing device to perform the function or action. Process is described in conjunction with the computing device of and the process of for illustrative purposes.

Process begins with concurrent execution of at least two instances of the process in the computing device blocks A N . While the number of concurrently executed processes and threads can vary based on the hardware and software configuration of the computing device in one embodiment the process executes up to N concurrent instances of the process where N corresponds to a maximum number of independent execution cores or execution threads in the processor . During process the external power monitor continues to monitor the execution of the concurrent system calls including system calls that execute simultaneously and are interleaved to affect the duration of tail power states with different components in the computing device block . The concurrently executed system call processes A N include a wide range of system calls and system call sequences that are expected to be performed concurrently during regular operation of the computing device . For example in a smartphone system one expected operating mode occurs when a user executes a media playback program to listen to music or display video concurrently with sending text messages using a wireless data network. One instance of the process executes system calls that are commonly used in the media player such as reads from the user data in the data storage component and system calls to the audio output component while the other instance of process executes system calls to receive text input from the input components and to send and receive text messages through the wireless network component .

The process generates one or more FSMs corresponding to power states that are measured during concurrent execution of multiple software processes or threads that either use different components in the computing device or contend for use of a single component. For example in one configuration two different software processes execute system calls to access the data storage component and the GPS concurrently. In another configuration two processes both request access to the data storage component simultaneously and the OS software manages the concurrent access requests to enable access to the data storage component in a manner that preserves the integrity of the data on the data storage component .

Process finishes with generation of one or more FSMs that model the energy states and energy state transitions for the computing device during the concurrent execution of multiple system calls and system call sequences block . In one configuration the total power consumption of the computing device at any one time corresponds to a sum of the individual power states for multiple processes or threads that execute concurrently. For example in the FSM model graphs and correspond to power states and transitions that occur during CPU utilization storage component disk utilization and low or high rate network utilization respectively in an HTC Magic smartphone. In a corresponding FSM model graph depicts an integration of the states and transitions in the same HTC Magic smartphone that includes the FSMs . In some operating modes the power state of the FSM model is simply the sum of power states from the corresponding FSMs . For example the power state in the FSM model occurs during a period of high CPU usage c1 from the FSM model and network usage tail power state n2 from the FSM model . The combined power state is simply the sum of the power consumption in the c1 and n2 power states from the FSMs and respectively.

While the power states in some devices can be identified as a sum of power states from simpler FSM models other hardware and software embodiments include more complex interactions when multiple components are activated simultaneously. For example in the FSM model graphs and correspond to power states and transitions that occur during CPU utilization storage component disk utilization and low or high rate network utilization respectively in an HTC Touch smartphone. In a corresponding FSM model graph depicts an integration of the states and transitions in the same HTC Touch smartphone that includes the FSMs . In the FSM model the HTC magic smartphone consumes an additional 200 mA of current when the CPU is in the high power state c1. In the power state of the FSM model graph the CPU is in the high power state c1 and the computing device consumes an additional 200 mA of current over the base state b when the data storage component is in the tail state d2 or the network component is in the tail power state n2. In the individual FSM model graphs the power states d2 and n2 consume an additional 110 mA each in the FSM model graphs and respectively. Consequently the combined FSM graph depicts emergent power consumption behavior that is measured in response to the concurrent operation of multiple components in the computing device. The processes and are used to generate FSM models that include different operating modes for both individual and concurrent operation of the components in the computing devices to enable accurate estimation of the energy consumption in a wide range of operating modes.

It will be appreciated that variants of the above described and other features and functions or alternatives thereof may be desirably combined into many other different systems applications or methods. Various presently unforeseen or unanticipated alternatives modifications variations or improvements may be subsequently made by those skilled in the art that are also intended to be encompassed by the following claims.

