---

title: Method and system for rapid upgrade through transactional analysis
abstract: A process for identifying functional and detailed design decisions in a core software architecture across multiple applications and clients includes comparing the results of two independent review sub processes to rapidly build an upgrade testing matrix. The two sub process include an independent functional review and a regression analysis using data extracts from historical data generated from client use of the core software architecture.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09152386&OS=09152386&RS=09152386
owner: TriZetto Corporation
number: 09152386
owner_city: Denver
owner_country: US
publication_date: 20130311
---
The embodiments are generally directed to a system and process for providing upgrades to software implemented business processes. More particularly the embodiments are directed to identifying usage characteristics e.g. functional decisions and detailed designs by users of a core architecture using an automated extraction process and providing upgrades in accordance with analysis thereof.

After initial implementation and deployment of software hosted SaaS client resident or some combination thereof there are inevitably changes or upgrades that are required to keep up with changing technical and business requirements. Many of such upgrades are driven by client usage characteristics. That is software that supports and enables many varied and configurable end user designs and functional decisions will likely require more frequent upgrades to keep pace with these constantly changing and evolving usage characteristics. There are numerous challenges to collecting and analyzing usage data across multiple clients and further challenges to testing and implementing universal and or client targeted upgrades to the software in an efficient and productive manner. For example in many cases identifying functional and detailed design decisions related to software applications is an entirely manual process. That is users must be queried and the responses collected and analyzed manually for further use in developing upgrades. This process is both time consuming and contains inaccuracies due to human error. Further on a client by client basis use cases differ. Some clients rely more heavily on certain applications in a suite than others. Similarly clients may use certain functionality within a specific application with more frequency or in a client specific configuration. It is nearly impossible to accurately discern this level of detail about client use of software using manual processes. Accordingly testing scope tends to either be over inclusive or contains inaccurate use scenarios.

Accordingly there is a need in the art for an improved system and process for identifying functional and detailed design decisions in a core software architecture across multiple applications and clients in order to accelerate the identification of testing scope for software upgrades. More particularly an improved process is needed for precision extraction of client standard implementation decisions to accelerate the timeframe for scope confirmation in order to dictate how transactions need to be administered to replicate client usage in order to identify test case selection.

In a first embodiment a process for developing a final upgrade matrix for testing at least one upgrade to implementation of software use and configuration in an existing customer environment is described. The process includes performing a review of the existing customer s perceived use of the software in the existing customer environment to populate an initial upgrade matrix with multiple initial transactions performing by at least one extraction component a data extract process by a processor on a database containing historical data resulting from the existing customer s actual use of the software to determine actual historical transactions comparing the multiple initial transactions with the actual historical transactions and removing each of the multiple initial transactions that does not align with an actual historical transaction from the initial upgrade matrix wherein the final upgrade matrix includes any remaining and aligned multiple transactions.

In a second embodiment a process for determining individualized testing scope for one or more software upgrades for a first individual customer is described. The process includes polling the first individual customer to populate a first initial testing scope matrix with first current use data extracting first actual use data by a processor running extract scripts on a database containing first historical use data for the first individual customer comparing the first current use data in the initial testing scope matrix with the first extracted actual use data to obtain first aligned data and updating the first initial testing scope matrix to include only first aligned data thereby forming a first final testing scope matrix.

In a third embodiment a process for determining generalized testing scope for one or more software upgrades for multiple customers of the software provider is described. The process includes polling each of the multiple customers to populate a generalized initial testing scope matrix with current use data extracting actual use data by a processor running extract scripts on a database containing historical use data for each of the multiple customers comparing the current use data in the generalized initial testing scope matrix with the extracted actual use data to obtain aligned data and updating the generalized initial testing scope matrix to include only aligned data thereby forming a final generalized testing scope matrix.

Referring to an exemplary general system configuration for a software application suite offered to clients as either provider hosted Software as a Service SaaS or as client hosted software. More particularly Clients A and B are representative of clients who provide input data D D to the provider hosted processing engine while Client C is representative of clients who host the processing engine in house or as part of client controlled infrastructure and thus perform processing in house. Client C does not necessarily provide input data to the provider but rather allows for access to and or provides output data Dfor inclusion in provider database . The Dand Dare generated by the provider core processing engine and stored in provider database . It should be noted that while a single database is shown this is for illustrative purposes only. One skilled in the art recognizes that multiple databases may be used. As described further herein the output data D D Dto D not limited and features thereof may be used to facilitate more efficient software upgrades. Generally this upgrade process is shown in as upgrade scope determination S based on both extracts from database and manual input and upgrade testing S detailed below .

By way of a particular example the software application suite may include applications and processing which facilitate the collection and processing of health care related data for the adjudication of health related claims for payment. Clients may include insurance companies self funded employers or other entities needing such services. Exemplary software application suites existing at the time of this filing include for example TriZetto s FACETS and QNXT products. Similarly the software application suite may include additional health care related functionality such as benefits administration software for self funded employers for managing administration of benefits plans and care management software such as TriZetto s Care Advance suite for managing insured population. Each individual application may be configured and or utilized by different clients in different ways. Accordingly a universal upgrade for all clients could fail to address such varied configuration and use and could even result in loss of availability of certain configurations and or functionality. As such identifying the universe of configurations and uses and either tailoring upgrades thereto or testing upgrades with the configurations and uses to ensure continued availability is critical to continued success of the software. But as is discussed briefly in the Background of the Embodiments ascertaining the universe of different configurations and uses across multiple clients is a laborious and time consuming process.

Referring to a more detailed flow of the upgrade process embodiment is described. The process includes both manual or semi manual review sub processes and automated sub processes for constructing the upgrade scope matrix. Initially a manual i.e. face to face Functional Review FR is commenced with each individual client S. The purpose of the FR is to ascertain details about the client s perception of their usage of the software application suite and functionality. One skilled in the art recognizes that the face to face process could be semi automated through the use of detailed surveys e.g. paper or web based surveys.

More particularly the FR explores usage through Transactions and Configuration. Taking the TriZetto FACETS product suite as an example exemplary Transactions may include Parent Group Group Subgroup Class Plan Definition Subscribers and Members. Exemplary Configurations may include System Administration SA Plan IDs Product IDs Network Set Stop Age Waiting Period and Benefit Summary. Accordingly client is queried regarding use non use of each Transaction S. For Transactions identified by the client as currently not being used these are labeled as out of scope S. For Transactions Trx identified by the client as currently in use these Trx are retained in the scope matrix pending confirmation S. Next the client is asked to identify Global Decisions GD and determine applicability to the retained Trx S and to identify Dependent Enhancements DE to retained Trx S results are added to the scope matrix pending confirmation. An example of a GD for Trx may relate to Group ID. Group ID is an 8 character field and the GD would determine if there smart coding involved and or if interfaces or extracts are coded for each Group ID An example of a Configuration GD is Billing Component Modify which is a decision that informs the user as to how premium rates are modified in accordance with underwriting. Accordingly an FR based scope matrix is established .

In a separate fully automated data mining exercise since the provider has a ready made populated database containing historical use data for the client the provider extracts Transactions and Configuration data in accordance with actual historical use as compared to perceived use by client reported using the FR using a series of extract scripts e.g. SQL scripts S. Again using the TriZetto FACETS product suite as a non limiting example Tables 1 to 8 below provide exemplary script code for representative Transactions within different application groups. These Tables are by no means exhaustive. Additionally separate script codes would be used for Configuration extracts. Taking the TriZetto FACETS product suite as an example exemplary Configurations may include System Administration SA Plan IDs Product IDs Network Set Stop Age Waiting Period and Benefit Summary. The scripts may be run on a predetermined amount of historical data e.g. data spanning a set time period such as a period of months or even years.

The FR scope matrix details and the mined data extracts are next compared to determine alignment with the existing client configuration S. That is the perceived client use details are compared to the historical truths extracted from the actual historical use data. Where the FR scope matrix details align with extracted truths these details are included in the final upgrade scope matrix for the client S. Where alignment is not confirmed the details Trx GD or DE as the case may be are not initially included in the final upgrade scope matrix but are instead considered to be out of scope S.

For both sets of out of scope details from steps S and S there are additional reviews to confirm that they should remain out of the final upgrade scope matrix. For example those transactions that were originally deemed out of scope during the FR are compared to the mined data extracts to either confirm out of scope S S or if determined to be in scope based on data extracts the transaction is reviewed with the client to make a final determination S. Similarly where the details from the FR scope matrix do not align with data extracts and are labeled as out of scope S the detail Trx GD or DE as the case may be is reviewed with the client to make a final determination S. Depending on consultation results transactions and or details are either confirmed out of scope S or they are added to the final upgrade scope matrix S. Once the finalized the upgrade scope matrix is tested S.

Both the finalized upgrade scope matrix and the script extracted data may be retained in a database data library . The automated SQL script will inherently capture the actual practical application efforts in a data library that could be leveraged by the provider for many different purposes. For example extracted data can be crossed referenced by the software provider with similar data extracts across multiple clients in order to track detailed application and functionality usage data. The software provider can use this cross referenced data to determine universal upgrades and changes and generally determined where to focus resources to enhance the software suite. For the application to for example the TriZetto FACETS product suite the extracted data does not include any personal health information PHI so there are no HIPPA issues affecting use. For individual clients who have previously been through the upgrade process described herein the individual client s most recent upgrade scope matrix may be used as the starting point for the next upgrade process thus saving considerable time. Additionally the upgrade matrices could become templates for similarly situated clients and loaded as part of the upgrade review process to further expedite the review process.

One skilled in the art recognizes that the examples provided in the present disclosure are not limited as such. There are numerous variations to components and functionality described as part of the overall architecture and processes of the platform that are known and would readily be considered to be within the scope of the invention.

