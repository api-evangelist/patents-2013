---

title: Optimizing restores of deduplicated data
abstract: For restoring deduplicated data, a method maintains a chunk index on a client computing system coupled to a client data store. The chunk index tracks chunks within files remaining on the client data store after storage of the files to a deduplicated server data store coupled to a server computing system. The method determines whether a valid entry for a first chunk exists in the chunk index. In addition, the method retrieves the first chunk from the server data store responsive to determining the valid entry for the first chunk does not exist in the chunk index. The method further retrieves the first chunk from the client data store specified in the valid entry of the chunk index responsive to determining that the valid entry exists in the chunk index and the first chunk resides in a first file at a first offset.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09396073&OS=09396073&RS=09396073
owner: International Business Machines Corporation
number: 09396073
owner_city: Armonk
owner_country: US
publication_date: 20130131
---
This is a continuation application of and claiming priority to U.S. patent application Ser. No. 12 719 108 entitled APPROACH FOR OPTIMIZING RESTORES OF DEDUPLICATED DATA and filed on Mar. 8 2010 for Matthew J. Anglin which is incorporated herein by reference.

The present invention generally relates to data storage and retrieval operations performed within a data storage system. The present invention more specifically relates to techniques for optimizing the restoration of deduplicated data that is stored on a remote server within a data storage system.

Data deduplication provides a number of techniques to remove redundant data during a backup operation thereby reducing required storage and potentially conserving network bandwidth. In a typical configuration a disk based storage system such as a storage management server or VTL virtual tape library has the capability to detect redundant data extents also known as chunks and reduce duplication by avoiding the redundant storage of such chunks. For example the deduplicating storage system could divide file A into chunks a h detect that chunks b and e are redundant and store the redundant chunks only once. The redundancy could occur within file A or with other files stored in the storage system.

Known techniques exist for deduplicating data objects. In a typical client server software system deduplication during storage activities can be performed at the data source client data target server or on a deduplication appliance connected to the server.

The restoration of deduplicated data from the server to the client involves reconstruction of the data from deduplicated chunks. In current deduplication systems the reconstruction process takes place on the server that sends each chunk of the fully reconstructed data to the client. Moreover even if the same chunk is found in many files or even in the same file selected for restore that chunk will be restored and transmitted from the server to the client multiple times.

Although deduplication provides benefits for backup and storage of client data it can adversely affect restore performance because of the time needed to reconstruct original data from numerous chunks especially if those chunks are fragmented in the storage server such as when the chunks are stored throughout multiple volumes or the chunks have been migrated to a tape volume . Additional inefficiency arises because existing deduplication systems resend all data to the client without regard to whether that data already exists on the client. Techniques are needed to optimize the restore of deduplicated data to clients within data storage systems.

The present disclosure provides a number of techniques for optimizing the performance of deduplicating storage management systems. In particular the presently described invention provides techniques for optimizing the restores of deduplicated data from a storage server.

One embodiment of the present invention provides for an enhanced storage and restore process used when storing and restoring deduplicated files respectively within the storage management system. In addition to standard deduplication processing performed during storage activities such as backup the client records a set of relevant storage attributes for a data chunk in a local client accessible index or database. During a restore of this file from the storage server the client will look up each chunk of the file in the local client accessible index. If the index indicates that a local copy of the chunk is available this local copy is used instead of transferring the data from the server. In the case that the chunk must be retrieved from the server the index is updated with an entry to the newly retrieved chunk. Therefore the client index is continually refreshed in an attempt to use as much data as possible from the client during subsequent file restores.

Some of the apparent advantages of the present invention include improved time for recovery from local disks and less processing performed on the server side storage system. Further improved efficiency of restore processing may be achieved because the chunks need not be sent if they already exist on the client. Operation of the present invention may further result in reducing or even eliminating data transfer during restore of deduplicated data conserving network bandwidth.

In one embodiment a method for performing an optimized restore of data within a storage management system allows a restoration of data from a combination of client side and server side data stores. One example configuration of a storage management system described herein includes a client computing system that is coupled to a client data store i.e. the original data source and a server computing system that is coupled to a deduplicated server data store i.e. the data backup target .

This method includes maintaining a chunk index or database on the client computing system to track the locations of chunks stored within files on the client data store. This index is updated when files stored to the server data store have a copy remaining on the client data store. Additionally this chunk index may be updated for client copies of files as they are restored to the client data store. Thus this chunk index may be used to maintain an updated directory of all locally stored copies of files and their chunks within the client data store.

During restoration of a specified file from the server data store to the client data store the storage management system operates to retrieve chunks from server and client locations. For each chunk of the specified file this will include determining whether a valid entry for the chunk exists in the client s chunk index. If a valid entry for the chunk does not exist in the chunk index the chunk will be retrieved from the server data store. If a valid entry does exist in the chunk index then the chunk will be retrieved from a location on the client data store as indicated in the chunk index. Finally when all chunks are retrieved the specified file will be reconstructed from the retrieved copies of the chunks and the specified file will be fully restored to the client data store.

Further embodiments provide the ability to manage and verify the restore operation and the data entries maintained in the client side chunk index. One embodiment tracks a number of values in the chunk index to help locate and verify the chunk in the client data store which may include a hash value of the chunk a length of the chunk a location of a file containing the chunk file attributes of the file containing the chunk and an offset of the chunk within the file containing the chunk.

Other embodiments include determining whether a valid entry for the chunk is provided by the chunk index such as validating existence of the chunk at the file location specified in the chunk index entry or verifying file attributes provided in the entry to verify that the file exists and is unchanged on the client data store. Another embodiment operates to retrieve the chunk from the server data store when unable to retrieve the chunk from the location on the client data store indicated in the chunk index. A still further embodiment operates to compare an end to end digest of the reconstructed specified file to a digest stored by the server computing system and therefore verify successful reconstruction of the specified file.

Another embodiment of the present invention provides for various server side operations to enable the optimized restore of deduplicated data onto a client computing system from a server computing system. These operations include the steps of receiving data of a file from the client data store for storage to the server data store and storing deduplicated chunks of the file within the server data store. Similar to the embodiments described above the client computing system maintains an index or other tracking capability to track locations of file chunks remaining on the client data store after storage to the server data store.

Later during a restore of the file to the client data store one or more chunks of the file are provided from the server data store. The optimized restore operation includes providing the chunk from the server data store when the client computing system determines that one or more chunks needed to reconstruct the file do not exist on the client data store. This determination may be made through use of the client side chunk index or other client tracking capabilities. Further the server computing system may provide an end to end digest of the file to the client computing system to enable successful verification of the file restore to the client data store.

Other embodiments of the present invention provide for a storage management system configuration comprising a processor a memory unit and instructions stored within the memory unit for performing an optimized restore of data from the storage management system as described herein. Additionally another embodiment of the present invention provides for a computer program product for performing the optimized restore of data from the storage management system with the computer program product comprising a computer readable storage medium having computer readable program code embodied therewith to implement the techniques described herein.

One aspect of the present invention relates to techniques for enhancing the storage and retrieval of data within a deduplicating storage management system. The following describes storage and restore processing in a typical deduplication processing configuration using various aspects of the present invention. Those skilled in the art will recognize that the storage system configuration and the deduplication and retrieval sequences used within storage management systems may vary but the storage and retrieval techniques described herein are also applicable to many other variations of storage management systems.

For example in a storage management backup system that utilizes incremental backup there is a large potential for improving restore performance when attempting to restore files to a client in order to overcome logical errors or trying to reconstruct to a previous point in time. The present invention leverages the attributes of incremental processing by making a heuristic assumption that many chunks needed to restore the files still exist on the local storage. The present invention is able to use these chunks by keeping a local index or database listing of chunks and their location on disk. Thus it becomes possible to utilize this index and only restore chunks that are not found locally at restore time. Moreover even if the disk is empty by tracking any chunks that have been restored it is possible to eliminate the restore of duplicate chunks during the transfer of other chunks within the same file.

In summary the optimized restore process applies some of the same logic performed in a backup during a data restore. During backup of the files with client side deduplication the client generally determines which chunks need to be sent to the server and which ones already exist on the server. In one embodiment of this invention during restore the client will only retrieve the minimum number of chunks needed from the server to perform the restore while retrieving all possible chunks for the restore from its client data store. This is accomplished through use of a client side chunk index that helps indicate which chunks may be retrieved locally and therefore which chunks need to be sent from the server with data.

The following disclosure provides a number of examples of typical backup and restore operations within a deduplicating storage management system. Those skilled in the art would recognize that the embodiments of the present invention would also include other storage operations not directly tied to a data backup such as archival and space management. For simplicity the following disclosure generally refers to backup and other storage activities transmitting data to the target server as storing and restoration or other retrieval activities from the target server as restoring .

As shown a deduplicated series of chunks specifically unique data chunks D D D and D are already stored on the storage volume and may be reassembled into one or more files as requested by the client . Thus depicted file F which remains on the client data store and consisting of chunks D D D D and Dis shown as having been previously backed up to the storage volume .

The specific storage operation to be performed within is the backup of file F to the storage volume . The file F consists of chunks D D D and D. The client performs client side deduplication and determines which chunks are unique and not already stored in the storage server and therefore only sends any necessary chunks to storage server . In this example client contacts the storage server and discovers that chunks Dand Dare already stored and do not need to be sent. Client further discovers that the remaining chunks in file Fare identical so one copy of chunk Dneeds to be sent for backup. Chunk Dis sent as in over the network and is ultimately stored within storage volume .

While this client side deduplication process is being performed all chunks of the file that are being sent up to the storage server are also being tracked in a client side index . This index keeps track of what chunks are stored on the client and remain even after a backup operation. Therefore during the backup of file F the existence and the location of its chunks on the client are recorded in index . Further during the backup of file F not only is the transferred chunk Dtracked in index but rather all chunks of F including chunks D the first instance of D chunk D and the second instance of chunk D are recorded in the index.

In this embodiment the client uses the client side chunk index to determine if any of the chunks needed for file reconstruction are stored locally on the client storage volume . From the index the client can determine that chunks Dand Dare stored locally within file F whereas Dis not stored in any local file and must be retrieved from the storage server . Thus the client operates to reconstruct file F by retrieving chunks Dand Dfrom file F and retrieving chunk Dfrom the storage server shown as being transmitted over network as chunk D .

Specifically the entries of the chunk index are produced as follows. The hash value is produced from a hash generation as typically done in deduplication processing with use of a hash algorithm such as MD5 or SHA 1 . The combination of the hash value and the chunk length may be used within the storage management system as the unique identifier for the chunk. Next the file path indicates the path to the file where the subject chunk can be found on the client. The file attributes indicates the size of the file where the chunk may be found along with a last modified date timestamp for the file. The client can use these file size and timestamp fields to verify that the file has not changed and therefore that the chunk within the file location is unchanged and valid. Finally the offset of the extent within this file provides an indication of where in the file the chunk can be retrieved from once the file has been located.

The fields depicted in the index are intended to store data indicating where a particular copy of a chunk is stored on the client and further to indicate whether the file containing the chunk has been changed or modified. Thus if the file containing the chunk has been removed changed or is inaccessible the chunk may be retrieved from the server. Additionally as shown multiple entries for each unique chunk can exist within the index due to the fact that multiple copies of the same chunk may remain in client storage in different file locations. Therefore the client can attempt to retrieve the chunk from another file on the client if the first file containing the chunk has changed or cannot be accessed.

In summary the purpose of maintaining a client chunk index is to keep track of chunks remaining on the client data store to enable use of as many client chunks as possible in lieu of retrieving each and every chunk from a remote storage server. Those skilled in the art would recognize that other types of data fields may be substituted or added to the index shown in in order to keep track of the files and chunks stored within the client data store. Alternatively other techniques may be used to determine whether a chunk is valid and unchanged on the client and is still available for use in reconstructing files.

The overall process for performing storage and restore operations with a deduplicating storage management system is further described within the following series of steps. Those skilled in the art would also recognize that additional steps may be substituted for other variations of deduplicating storage management systems.

First the client identifies each data chunk D in file F. As part of a client side deduplication process the client generates a hash value h D for the data chunk D. Before continuing with the storage of data chunk D on the server however the client also records identifying attributes of the data chunk D in a locally accessible index or database such as the attributes and data fields outlined in .

The remaining steps of the client side deduplication and backup process operate similar to existing deduplication processes including for example having the client querying the server to determine if the server already stores a data chunk with hash value h D and size l D . If the server responds yes the client simply notifies the server that chunk with hash h D and size l D is a part of file F and the server stores this information in its deduplication index. If the server responds no the client sends the data chunk D with its hash h D and size l D to the server and the server stores data chunk D in a storage pool and enters h D and l D into its deduplication index. If more chunks are to be processed for the file the above described process is repeated.

Additionally in a further embodiment the client will also generate an end to end digest of the data file with an algorithm such as cyclic redundancy check MD5 SHA 1 SHA 256 SHA 512 or Whirlpool and save it on the server. This digest will be subsequently used to validate the data during a restore operation which is particularly useful for restoring files from chunks retrieved from a combination of client and server locations.

The process for restoring files from a storage server is likewise modified for use with the client side chunk index according to the various embodiments of the present invention. The following restore process uses the client side chunk index to retrieve as many chunks as possible from existing file locations within client side data storage.

For each of the chunks the client looks up the chunk in its local index or database of chunks as in . If the local database does not have an entry for the chunk as in the client asks the server to send the data for this chunk as in step . The local database is updated and the entry for the chunk h D l D F A O is added to the client index as in step with the F A and O respectively indicating the location attributes and offset position of the retrieved chunk in the newly reconstructed file.

If an entry is found in the local index or database for the chunk as in the following technique is conducted in an attempt to retrieve a local copy of the chunk from the client data store. The index will provide an entry that shows that chunk Dis stored in file location Fat offset O the file Fhaving attributes A. Once this information is obtained from the client side chunk index a command will be issued to verify as in step that file Fcontains specified attributes A. This may include validating attributes such as validating the time stamp of Fto ensure that the file Fhas not been modified since the entry was added to the cache. Further a check may be performed verify that chunk Dis still contained in file Fat offset O.

If file Fdoes not exist the chunk cannot be accessed or the file has been modified as determined by different file attributes as in step then the database will be updated to remove the entry for the unavailable chunk as in step . Because the copy of the chunk cannot be retrieved from a known location on the client the client then asks the server to send the data for this chunk as in step . The local database is then updated as in step to add an entry for the chunk in the file F being reconstructed the entry h D l D F A O is updated with the new values of F the file that is being restored A its attributes and O offset within the file .

In a further embodiment multiple entries for copies of the identical chunk may exist in the client side chunk index. Therefore if one of the entries in the client side chunk index is invalid or otherwise points to a chunk that cannot be accessed the other entries in the client side chunk index are used. In lieu of retrieving the chunk from the server as in step other local copies of the chunk Das indicated in the client side chunk index may be used for reconstruction of the file F .

If the chunk Dis located within a file on the client as verified in the client will use a local copy of the chunk. This local copy of the chunk is identified by values h D and l D and can be found in file Fat offset Oas in as indicated by the client side chunk index. The local copy of the chunk is accessed and is used to reconstruct this chunk s portion within file F .

The restore process is repeated until there are no more chunks in F as in and the file F is completely reconstructed. Additionally in a further embodiment after reconstructing the file from all of the chunks the client generates an end to end digest of the reconstructed data file. The client compares a stored digest generated during the file storage to the digest now generated at restore time. If the two digests do not match then the client will recognize that the correct data chunks were not successfully retrieved from the client and or server. In response the client will then retry the restore of the data by retrieving all data chunks from the server rather than using any local copies of the data chunks.

In one embodiment the client side chunk index is updated during each storage and restore operation. Therefore the client side chunk index will contain constantly updated entries for files existing within the client data store while further providing an opportunity for the client to retrieve data from the most recently accessed file on the client. Also in one embodiment by enabling multiple entries to be written in the client side chunk index for the same data chunk during the storage and restore operation redundancy may be built into the retrieval of chunks on the client and multiple retrieval operations can be attempted as appropriate.

A further embodiment of the present invention enables adaptive rebuilding of data files on the client even allowing chunks to be retrieved from client files while the data files are being built from chunks during the reconstruction process. Thus a file containing duplicate chunks within itself may be partially rebuilt by using client stored chunks retrieved from earlier server retrieval operations. This is due to the fact that as the file is being restored entries for restored chunks are constantly being added to the client side chunk index. Therefore even if no chunks are initially stored on the client side if a chunk is used later in the same file then a now locally stored copy of the chunk can be used.

Although the illustrations provided above generally describe client side deduplication activities those skilled in the art would recognize that many of the techniques are also applicable with various operations of client side server side and appliance based deduplication storage systems. Further other variations to the structure and use of the client side chunk index may be used to improve the operation of the above described storage and restore techniques.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

Although various representative embodiments of this invention have been described above with a certain degree of particularity those skilled in the art could make numerous alterations to the disclosed embodiments without departing from the spirit or scope of the inventive subject matter set forth in the specification and claims.

