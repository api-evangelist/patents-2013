---

title: Scale-out of data that supports roll back
abstract: A computing resource monitoring service receives metrics data from customer applications and resources provided by a computing resource service provider. The metrics data is stored in observation journals within an observation journal logical data container. A map reduce processor is configured to obtain a current index file, the index file comprising a mapping of the metrics data stored within a metric store and a manifest comprising a listing of all processed observation journals. The map reduce processor may process the unprocessed observation journals to separate, sort and aggregate metrics data stored therein. This process generates index artifacts that may be merged with the index file, in an append-only process, to generate a new index file. An index pointer may be modified such that the map reduce processor refers to a different version of the index file in order to support roll back of metrics data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471610&OS=09471610&RS=09471610
owner: Amazon Technologies, Inc.
number: 09471610
owner_city: Seattle
owner_country: US
publication_date: 20130916
---
This application is subject matter related to U.S. patent application Ser. No. 14 028 446 filed Sep. 16 2013 entitled ROLL BACK OF SCALED OUT DATA the content of which is incorporated by reference herein in its entirety.

Computing resource monitoring systems have evolved and continue to evolve to keep up with the demands of the organizations that use them. Many organizations for example utilize computing resource monitoring systems for among other reasons evaluating one or more metrics associated with resources and applications that the organizations may utilize to support their businesses. Despite their many advantages many modern computing resource monitoring systems are prone to data corruption or defects resulting in potential data loss. For example if data undergoes an irreversible transformation and the transformed data includes one or more defects it may be difficult or impossible to reverse the process. Currently many modern computing resource monitoring systems utilize a horizontal partition to store one or more metrics that if lost may result in any metrics that reside within the partition being unavailable for all reads and writes at any point in time. Additionally these modern computing resource monitoring systems may be configured to modify or delete older data objects as new data is introduced. This in turn could exacerbate the damage resulting from data corruption or defective transformation of data. Adequately addressing these issues such as through provisioning additional resources to adequately provide data redundancy in the event of data corruption or irreversible defective transformation presents additional costs to the organizations that rely on the metric monitoring systems and the computing resource service provider that may provide the metric monitoring systems to its customers.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein relate to the storage and rollback of data metrics stored in an object based data storage system. In an embodiment an entity e.g. an organization may communicate with a computing resource monitoring service such as through appropriately configured application programming interface API calls to the service to request one or more metrics data pertaining to computing resources or applications provided to the customer by a computing resource service provider. The entity may be a customer of a computing resource service provider that operates various services such as data storage services virtual computer system services and or computing resource monitoring services. The metrics data may be persistently stored in one or more data objects within a metrics store within an object based data storage service operated by the computing resource service provider. Accordingly a customer may be able to interact with a metric store reader which may be configured to access the data object and obtain the desired metrics data for a particular resource or application that the customer may be using making the data available for the customer.

In various embodiments a datastore writer may be configured to receive observation metrics data from one or more monitored clients. These clients may be configured by the computing resource service provider to support and operate the variety of computing resources and applications that may be made available to one or more customers of the computing resource service provider. Accordingly these clients may also be configured to track and record metrics data. A datastore writer may be configured to obtain this metrics data and write the metrics data to one or more logs. These logs e.g. observation journals may be subsequently stored in an observation journal logical data container within an object based data storage system.

In various embodiments the computing resource monitoring service may comprise a map reduce processor for ordering and aggregating metrics data from one or more observation journals. The map reduce processor may be a distributed computer system configured to coordinate processing of data collectively by a plurality of distributed computing nodes of the system in accordance with one or more distributed programming models for processing data sets such as Map Reduce. For instance the map reduce processor may be configured to access the observation journal logical data container to access one or more observation journals which may comprise metrics data. Accordingly the map reduce processor may separate and order the metrics data according to the metric and observation time. Subsequently the map reduce processor may aggregate the metrics data into one or more data segments based on the metric identification and an observation time interval. For example the map reduce processor may aggregate metrics data based on one or more metrics observed over a ten minute interval. Once the metrics data has been aggregated into the one or more segments the segments may be written to one or more data objects and stored in an object based data storage service for future customer access. While Map Reduce is used for the purpose of illustration other distributed computing models may be used and when the data sets to be processed so allow various techniques of the present disclosure may be adapted for systems that do not utilize distributed processing.

In an embodiment the map reduce processor may be configured to emit a series of index artifacts that may comprise mappings based at least in part on the observation time range for a metric the name of the data object in which data associated with a metric is stored and the offset and length of the data associated with a metric within the data object. These index artifacts may be used to populate an index which may be used to locate and provision metrics data from the object based data storage service. Thus the index may enable a customer to submit a query to the computing resource monitoring service to obtain any metrics data currently stored within one or more data objects in the object based data storage service. The index may comprise a plurality of partitions each partition comprising data associated with a metric. The index and its constituent partitions may be stored within an object based data storage use for customer consumption. When a customer submits a query to a metric store reader for certain metrics data the metric store reader which may be configured to access the index to obtain and read index partitions from the object based data storage service may determine and locate the metrics data segments required to satisfy the query.

The map reduce processor may be configured to produce a compiled index. For instance when one or more observation journals are processed and the metrics data extracted from the observation journals has been ordered aggregated and stored in one or more data objects the map reduce processor may merge the newly generated index artifacts as well as the previous version of the index to create a new compiled index. This new compiled index and its constituent partitions may be uploaded to an object based data storage system. Subsequently the metric store reader may be configured to access this new version of the index for processing any customer metrics data queries. The compiled index may be configured to only allow appending of new index artifacts such that any prior data within the partitions in the index is not purged. Accordingly the metric store reader may continue to utilize a prior version of the index until it is necessary to access the newly compiled index.

In an embodiment the computing resource monitoring service may be configured to roll back to a previous version of the index. For instance the map reduce processor may be configured to utilize a prior version of the index from a list of indices stored within an object based data storage service. The prior version of the index may not include references to the corrupted or defective data since this data may have been generated after the creation of this prior version of the index. Accordingly the prior version of the index may additionally not refer to previously processed observation journals that may have been processed after the creation of this version of the index. As a result the map reduce processor configured to process any observation journals that have not been processed may process the previously processed observation journals that are not included in the prior version of the index.

The map reduce processor may be configured to once again separate order aggregate and store the metrics data included in these newly unprocessed observation journals and produce a new set of index artifacts. These index artifacts may then be merged with the prior version of the index and its associated partitions to form a compiled index that may include one or more segments that may correspond to metrics data and the data objects that include the metrics data. Since the data objects and indices utilize an append only model the corrupted or defective data may remain stored within the object based data storage service. However the new index may not refer to any segments comprising corrupted data thus preventing inadvertent access to this data. Accordingly the map reduce processor may modify an index pointer such that future operations within the computing resource monitoring service refer to this new version of the index.

In this manner the computing resource monitoring service may be configured to interact with an object based data storage service to persistently store metrics data and make the data available to customers of the computing resource service provider. In addition the techniques described and suggested herein facilitate additional technical advantages. For example because in some embodiments the computing resource service provider may configure the map reduce processor such that the map reduce processor may utilize a prior version of the index the computing resource monitoring service may process any observation journals previously processed to recompile metrics data that may have been corrupted or defective when originally processed. This in turn may reduce the cost of any downtime particularly for a customer that is in need of reviewing metrics data for a host of resources or applications the customer may be utilizing at any given point in time. Additional uses are also enabled by the various techniques described herein.

Accordingly as illustrated in the environment includes an index . The index may include a mapping of the various metrics data stored within the object based data storage service . The index may include one or more partitions each partition corresponding to a metric that is tracked by the various applications and or computing resources provided by a computing resource service provider. These partitions may be created to specify which data objects are currently being used to persistently store certain metrics data. The index may be used by a metric store reader to satisfy a customer query for metrics data. For instance a customer may submit a query such as through one or more appropriately configured API calls to the service to the metric store reader that includes a metric identification and a particular timestamp or range of time that the customer is interested in. Accordingly the metric store reader may be configured to refer to the index to locate the partition associated with the requested metric. Subsequently the metric store reader may be configured to use the partition to locate data objects within the object based data storage service that may include the requested metrics data. The metric store reader may be configured to make this metrics data available for customer reference and use.

The map reduce processor may also serve to transmit one or more executable instructions to the object based data storage service such that when executed by the object based data storage service causes the object based data storage service to remove any metrics data that has expired. For instance the computing resource monitoring service may be configured to retain certain metric data for a limited amount of time after which the expired metrics data is purged from the one or more data objects. In an embodiment the map reduce processor may be configured to modify the index such that any expired metrics data information within the partitions included in the index is also purged. This may serve to reduce the size of the index and reduce the amount of metrics data stored within the object based data storage service . The computing resource monitoring service may be configured to maintain one or more indices to provide the ability to roll back to a previous version of the index . For instance a computing resource service provider may configure the map reduce processor to cause the map reduce processor to use a previous version of the index in the event that an operation issue impacts the metrics data.

The index may be created after the map reduce processor has processed one or more observation journals and has extracted the metrics data from these observation journals. The map reduce processor may be configured to subsequently obtain the previous version of the index and its constituent partitions and merge it with new index artifacts to create a newly compiled index. This new searchable index may be stored within the object based data storage service for reference. Subsequently the computing resource monitoring service may be configured to modify an index pointer such that a metric store reader may be configured to refer to this newly created index and fulfill customer queries for certain metrics data.

The computing resource service provider may configure the map reduce processor to refer to a prior version of the index . For example the computing resource service provider may configure the map reduce processor to refer to a prior version of the index if an operation issue arises that impacts customer metrics data. This act may impact the manifest the map reduce processor is configured to refer to such that previously processed observation journals may not appear in the manifest. Accordingly the map reduce processor may be configured to interact with an observation journal logical data container within the object based data storage service to obtain one or more previously processed observation journals for processing. These previously processed observation journals based on the prior version of the index being utilized may no longer be considered to be previously processed as the manifest may not list these observation journals as having been processed.

Accordingly the map reduce processor may be configured to discover and process these observation journals while filtering out any observation journals that have been previously processed and are listed in the manifest. The map reduce processor may be configured to extract the metrics data from the observation journals sort and subsequently aggregate the metrics data based on the metrics data timestamps. This metrics data may be stored as one or more segments within one or more data objects for storage. Accordingly the environment may include a metric store for storing the data objects comprising the metrics data segments.

As a side effect of the map reduce processor extracting and storing the metrics data in a metric store the map reduce processor may generate one or more index artifacts. These artifacts may include mappings of the metric time range name of the data object that includes the metrics data segments and the offset and length of the metrics data within the data object. The map reduce processor may be configured to merge these index artifacts with the index currently being referenced. Since the index is based on an append only model no data within the index file may be deleted or overwritten. Rather the data in the index artifacts may be added to the index and its constituent partitions and the prior version of the index is stored to provide the ability to roll back to a previous version of the index. This new compiled index may thus be published to a metric store reader. The metric store reader may be configured to consult the newly compiled index to determine which data objects stored within the metric store comprise the metrics data necessary to satisfy a customer query.

As noted above a computing resource service provider may provide various computing resource services to its customers. For instance in this particular illustrative example the computing resource service provider provides at least three types of services. The services provided by the computing resource service provider in this example include a virtual computer system service an object based data storage service a computing resource monitoring service and one or more other services although not all embodiments of the present disclosure will include all such services and additional services may be provided in addition to or as an alternative to services explicitly described herein.

The virtual computer system service may be a collection of computing resources configured to instantiate virtual machine instances onto virtual computing systems on behalf of the customers of the computing resource service provider . Customers of the computing resource service provider may interact with the virtual computer systems service to provision and operate virtual computer systems that are instantiated on physical computing devices hosted and operated by the computing resource service provider . The virtual computer systems may be used for various purposes such as to operate as servers supporting a website. Other applications for the virtual computer systems may be to support database applications electronic commerce applications business applications and or other applications.

The object based data storage service may comprise a collection of computing resources that collectively operate to store data for a customer . The data stored in the object based data storage service may be organized into data objects. The data objects may have arbitrary sizes except perhaps for certain constraints on size. Thus the object based data storage service may store numerous data objects of varying sizes. The object based data storage service may operate as a key value store that associates data objects with identifiers of the data objects which may be used by the customer to retrieve or perform other operations in connection with the data objects stored by the data storage service . Access to the data storage service may be through appropriately configured API calls.

As will be described in greater detail in connection with the object based data storage service may be used to persistently store one or more local log files in a plurality of observation journal logical data containers. These local log files may be updated and uploaded to the observation journal logical data container at intervals specified by the operator of the computing resource service provider or the customer . The contents of an observation journal logical data container may have no particular arrangement such that any log file may comprise any metric with observations against any period of time.

Additionally the object based data storage service may comprise a metric store for the storage of pre computed metric statistics. The data for a given metric may be persistently stored and arranged contiguously in a data object such that it may be read in a single streaming request from a customer . Each data object configured to store these metrics may be additionally configured to have a specified storage capacity. Thus when a data object has reached the specified storage capacity newly created metrics data files may be stored in a new data object. The object based data storage service may also persistently store one or more indices which may be used by a metric store reader to locate and make available metrics data in order to fulfill a customer query. The metric store reader may be configured to obtain an index history file stored within the object based data storage service in order to select a current version of the index and its corresponding partitions.

The computing resource monitoring service may comprise a plurality of computing resource components collectively configured to provide long term and persistent retention of metrics data. Accordingly the computing resource monitoring service may include a map reduce processor that may be configured to interface with the object based data storage service to retrieve any unprocessed observation journals from an observation journal logical data container and to subsequently store aggregated metrics data in data objects that may be stored within the object based data storage service . The map reduce processor may be configured to additionally generate one or more index artifacts which may be used to create an index and its constituent partitions or to merger with an existing index and its constituent partitions.

Additionally the computing resource monitoring service may comprise a metric store reader which may be a computer system or component thereof configured to refer to an index. As noted above a customer may interact with the computing resource monitoring service to query certain metrics data for reference and use. Accordingly the metric store reader may be configured to refer to the index to locate and make available the queried metrics data. In this fashion the computing resource monitoring service may fulfill a customer query for metrics data.

The computing resource monitoring service may serve to roll back to a previous version of an index file in order to re process one or more observation journals. For instance the computing resource service provider may determine that there is an operational issue with the metrics data currently stored. For example an automated process may detect the operational issue or a human operator may notice the issue. Accordingly the computing resource service provider may pursuant to operator input access the computing resource monitoring service to configure a map reduce processor to refer to an earlier version of the index file. Accordingly the map reduce processor may utilize the earlier version of the index file to re process one or more observation journals and generate a new set of data objects and index artifacts for use by the computing resource monitoring service . This process may result in a new version of the index file that refers to this new set of data objects and may now be used to fulfill customer queries. The computing resource monitoring service may be configured to modify an index pointer subsequent to the roll back process in order to cause the various components that comprise the computing resource monitoring service to refer to this new index.

The computing resource service provider may additionally maintain one or more other services based on the needs of its customers . For instance the computing resource service provider may maintain a database service for its customers . A database service may be a collection of computing resources that collectively operate to run one or more databases for one or more customers . Customers of the computing resource service provider may operate and manage a database from the database service by utilizing appropriately configured API calls. This in turn may allow a customer to maintain and potentially scale the operations in the database. Other services include but are not limited to block level data storage services object level archival data storage services services that manage other services and or other services.

As noted above the computing resource service provider may maintain a computing resource monitoring service and an object based data storage service to support customer operations. The computing resource monitoring service and the object based data storage service may comprise a plurality of components that when configured to operate together may be used to persistently store metrics data and roll back to previous metrics data if an operation issue impacts customer metrics data. Accordingly is an illustrative example of an environment illustrating the various components that comprise these services in accordance with at least one embodiment. In the environment a computing resource monitoring service may be configured to interact with an object based data storage service to among other things persistently store one or more observation journals for obtaining metrics data and persistently store aggregated metrics data in one or more data objects. The computing resource monitoring service may provide a customer with a customer interface to access the computing resource monitoring service . A customer may utilize the customer interface through one or more communications networks such as the Internet. The customer interface may contain certain security safeguards to ensure that the customer has authorization to access the computing resource monitoring service . For instance in order to access the computing resource monitoring service a customer may need to provide a username and a corresponding password or encryption key when using the customer interface . Additionally requests e.g. API calls submitted to the customer interface may require an electronic signature generated using a cryptographic key such that the electronic signature is verifiable by the computing resource monitoring service such as by an authorization system not shown .

The customer may utilize the customer interface to customize the type of data that may be produced in tracking one or more metrics statistics. For example a customer may specify through the customer interface that it is preferable to track the central processing unit CPU utilization for a given application that the customer is currently using to support the customer s business. Accordingly the customer interface may be configured to transmit this request to a datastore writer . The datastore writer may be configured to obtain metrics data from all the various applications and computing resources provided by a computing resource service provider. Additionally the datastore writer may be configured to track metrics data according to customer requests such as those received through a customer interface . The datastore writer may be configured to spool all metrics data into local logs .

The logs generated by the datastore writer may be rotated and uploaded to an observation journal logical data container within an object based data storage service . The computing resource service provider may configure the computing resource monitoring service to upload these logs to the observation journal logical data container at certain time intervals or after a certain trigger. For instance each log may comprise a given storage capacity such that metrics data may be written to a log until there is no remaining storage capacity. Accordingly when the log has been filled it may be automatically stored within the observation journal logical data container . Alternatively the logs may be configured to continue to receive metrics data until a certain amount of time has passed. Once the amount of time has passed the log may be transferred and stored in the observation journal logical data container .

The logs stored in the observation journal logical data container may have no particular metric arrangement any log may comprise any metrics data with the time the metrics data was observed. For instance as noted above if the computing resource service provider has configured the computing resource monitoring service to continuously write metrics data to a log until the log is full the log may comprise metrics data spanning a wide time range. Alternatively if logs are stored in the observation journal logical data container after a certain time interval the logs may only comprise metrics data obtained over that time period.

The computing resource monitoring service may comprise a map reduce processor that may be configured to perform one or more actions utilizing the logs e.g. observation journals stored within the observation journal logical data container . The map reduce processor may be configured to operate at certain time intervals specified by the computing resource service provider to support the computing resource monitoring service . For instance the map reduce processor may be configured to operate once per day. However the time intervals and operations per time intervals are customizable and any such variations are to be considered within the scope of the present disclosure.

As will be described in greater detail in the map reduce processor may be configured to obtain any unprocessed observation journals from the observation journal logical data container while filtering out any observation journals that may have been processed previously. Subsequently the map reduce processor configured to process these observation journals may separate and order the metrics data extracted from the observation journals. For instance the map reduce processor may be configured to separate and order the data based on the metric identification of each metric. Accordingly this ordered metrics data may be aggregated and stored in one or more data objects which may be transferred and stored in a metric store . The metric store may comprise various data objects that comprise metrics data over a certain period of time. As will be described in greater detail in connection with the data objects may be stored within the metric store for a period of time after which the data objects may be purged automatically. This may serve to provide storage capacity for newly created data objects.

The metric store may also be configured to persistently store one or more versions of an index. The index may serve to identify where metrics data is stored within the metric store . Additionally the index may include a manifest which may be of use to the map reduce processor . The index may include one or more partitions. These partitions may include mappings for each metric within the metric store . Each partition may correspond to a metric such that the partition may include a listing of all locations and segments that comprise the metric data. As noted above the map reduce processor may be configured to only process observation journals that have yet to be processed. In order to distinguish these observation journals from previously processed observation journals the map reduce processor may be configured to obtain the current version of the index from the metric store and refer to the manifest to identify the observation journals that are to be processed.

In order to keep track of which data objects comprise certain metrics data the map reduce processor may also be configured to produce one or more index artifacts. These index artifacts may comprise mappings from metric time range to the name of the data object and the offset and length of the data segment for a metric stored within. Accordingly the map reduce processor may be configured to merge these index artifacts with the current version of the index as noted above to produce a new version of the index. This new version of the index and its constituent partitions may be subsequently stored within the metric store . As will be described in greater detail below this process may be an append only process such that the new version of the index includes all the metrics data from the previous iterations and the new metrics data.

Once the new version of the index and its constituent partitions have been created the computing resource monitoring service may be configured to modify an index pointer causing the various components comprising the computing resource monitoring service to refer to this new version of the index. The metric store reader may be configured to satisfy customer read requests such as those submitted through a customer interface . Accordingly the metric store reader may be configured to refer to the index pointer in order to select the current version of the index as created by the map reduce processor to determine which data objects comprise the data necessary to satisfy the customer request. The metric store reader may thus be configured to obtain the necessary data objects and make the metrics data available to the customer through the customer interface .

As noted above the map reduce processor may be configured to distill metrics data from one or more unprocessed observation journals and store aggregated metrics data in one or more data objects. Accordingly shows a diagram example of a map reduce process in accordance with at least one embodiment. As noted above the observation journals may include one or more metrics data obtained through a datastore writer. The datastore writer may obtain metrics data continuously from one or more applications and computing resources. Thus the datastore writer may continue to fill an observation journal until it has reached its storage capacity without performing any ordering operations.

The map reduce processor may be configured to process an observation journal and separate and order the metrics data into one or more ordered data segments . Each ordered data segment may comprise observations for a given metric identification. For instance as illustrated in each ordered data segment may comprise all observations for Metric A Metric B or Metric C from the processed observation journal . Additionally the map reduce processor may sort the metrics data within the ordered data segment by any category. For instance the metrics data may be sorted by the observation time. While observation times are used extensively throughout the present disclosure for the purpose of illustration other variables may be used to sort metrics data within an ordered data segment . For instance metrics data may be further sorted by the sample count sum and any other category specified by the computing resource service provider or the customer.

Once the metrics data has been separated and ordered into one or more ordered data segments the map reduce processor may be configured to aggregate this metrics data into aggregated data segments . The map reduce processor may be configured to aggregate the metrics data based on the observation time for each metric observation. For instance in this illustrative example the map reduce processor may aggregate all metrics data observed at one minute intervals. Thus two Metric A observations observed within a one minute interval may be aggregated into one aggregated data segment . Again while observation times are used extensively throughout the present disclosure for the purpose of illustration other variables may be used to determine aggregation of metrics data. The map reduce processor may be configured to assign these aggregated data segments to one or more data objects and upload these objects into an object based data storage service . As noted above the map reduce processor may be configured to simultaneously produce one or more index artifacts to map the locations of the metrics data within the object based data storage service .

As noted above each data object may comprise metrics data that has been sorted ordered and aggregated by a map reduce processor. Accordingly is a diagram illustrating an example of a data object storage format that may be used for storing metrics data in a data object in accordance with at least one embodiment. In order to support the index mapping process each data object may comprise a header which may be used to inspect a data object and determine the components stored therein.

Each metric data segment stored within the data object may additionally comprise its own segment header to further allow index mapping for finding metrics data. The segment header may include one or more features of the metric identification in order to simplify the mapping process. For instance a data segment that comprises Metric D data may include a segment header that includes a Metric D identifier or key. A computing resource service provider may thus be able to create a unique method of naming these segments to support index mapping. Accordingly when a customer submits a query for certain metrics data over a certain time range the metric store reader may be configured to refer to the index to locate the data object and the associated data segment to find all observations that may satisfy the customer query.

Once the metrics data has been aggregated the map reduce processor may be configured to transfer the aggregated metrics data to one or more data objects for storage. As noted above when metrics data is stored in a data object the map reduce processor configured to generate index artifacts to support processing of customer queries for metrics data may generate these index artifacts and prepare these artifacts for merger with a current version of the index and its constituent partitions. Thus the index artifacts and subsequently the compiled index may comprise mappings for each of the observations stored within the data objects .

As noted above the map reduce processor may be configured to process any unprocessed observation journals stored in an observation journal logical data container over certain time intervals. For instance for the purpose of illustration the map reduce processor may be configured to obtain unprocessed observation journals daily. However while the use of a daily cycle for performing these operations is used for the purpose of illustration the scope of the present disclosure is not so limited. For instance the computing resource service provider may configure the map reduce processor to operate at different time intervals or as a result of one or more triggers such as the creation of a number of observation journals etc.

Accordingly shows an illustrative example of storing metrics data in one or more data objects for a given time interval subsequent to a prior time interval in accordance with at least one embodiment. The diagram is similar to the environment illustrated in in that it includes an observation journal that may comprise one or more observations for processing. Accordingly the map reduce processor may be configured to separate order and aggregate the observations based on one or more criteria such as metric identification.

Once again when the metrics data has been aggregated the map reduce processor may be configured to assign each of the metrics data segments to one or more data objects . However as illustrated in both the metrics data may not necessarily be assigned to the same data object as in a prior set of operations. Accordingly there may be no guarantee or requirement that the metrics data be assigned to the same data object as the same type of metrics data processed in a prior set of operations. Additionally this new metrics data may be stored in new data objects associated with the current set of operations. For instance as illustrated in the metrics data may be stored in data objects associated with the day the map reduce processor has aggregated the new data. In an embodiment the computing resource monitoring service may include a defragmentation processor which may be configured to examine the partitions within an index to locate metrics data scattered in a variety of data objects and subsequently move said metrics data to individual data objects based on the type of metrics data.

As noted above the map reduce processor may be configured to create an index that includes one or more partitions. These partitions may include mappings to the metrics data stored within one or more data objects in order to support customer queries for metrics data. Accordingly shows an illustrative example of an index for storing one or more segments in accordance with at least one embodiment. The index and its constituent partitions may be written to allow keying the particular metrics data stored within a metric store based to one or more criteria. For instance the index may be keyed by metric identification and by date ranges to allow a metric store reader to locate the matching data segments necessary to fulfill a customer query. Accordingly the first layer of the index may include the one or more criteria which may be used to allow the index to quickly reject any queries that do not have any matching metrics data.

The index may additionally include a second layer or sub index that may comprise the metrics data segments that comprise the data associated with the metric. The sub index may be used to map these data segments based on one or more criteria included in each metrics data segment . For instance in this illustrative example the sub index may include mappings for the metrics data segments based on the time ranges included within each metrics data segment . While time ranges are used within this illustrative example for the purpose of illustration the scope of the present disclosure is not so limited. For instance the sub index mappings may be based upon other criteria such as data segment length data object name or the data segment offset.

When a customer query is submitted to the metric store reader such as through an appropriately configured API call to the service through a customer interface the metric store reader configured to examine an index to locate metrics data may locate the metrics data based on one or more criteria used to generate the mappings in the index. Accordingly the metric store reader once it has located the metrics data may refer to the sub index to locate the data segments necessary to fulfill the criteria that may be included in the customer request. Thus the metric store reader may be configured to utilize the index to locate and make available the metrics data that will fulfill the customer query.

In order to generate an initial index or an updated version of the index based upon the latest metrics data stored within one or more data objects in a metric store the map reduce processor may be configured to generate one or more index artifacts based upon the observation journals processed over the course of an operations cycle. Accordingly shows a diagram illustrating an example of generating an index artifact using metrics data in accordance with at least one embodiment. In the diagram the map reduce processor may be configured to generate aggregated metrics data segments that are subsequently stored in one or more data objects . As noted above each data object may comprise one or more metrics data segments that include metrics data based on one or more criteria.

In an embodiment an index artifact may be produced indicating the covered time range and location of each data segment stored within the metric store. For instance in this particular example the index artifact may comprise metrics data segments according to a time range for all of the metrics data of a particular type. For instance Metric G may include two data segments each spanning a certain amount of time. The index artifact may be written such that it illustrates the entire time range of the Metric G data and the location of these segments within the metric store. However the index artifact may be written such that the metrics are compiled based on other criteria such as data object identification commonality or data segment length.

As noted above these index artifacts may be used to generate an index or produce an updated version of an index for use in locating metrics data within one or more data objects in a metric store subject to a customer query. Accordingly shows a diagram illustrating an example of building an index using an index artifact in accordance with at least one embodiment. The index build process may occur once the map reduce processor has stored aggregated metrics data in one or more data objects within a datastore and the index artifacts have been generated. Accordingly the diagram may include one or more index artifacts generated based upon one or more observation journals processed over a given time period or triggering event. As noted above each index artifact may be organized such that metrics data may be located within the metric store. For instance the index artifact may include metrics data locations based on the type of metric.

As illustrated in an index may be created with two distinct layers which may be used to support the fulfillment of any customer queries for metrics data. The first layer of the index may include the metric identification as well as other criteria that may be used to reject any customer queries that do not include any matching metrics data. The second layer or sub index included in the index may include the metrics data segments that are stored within the metric store. These segments may be obtained from the index artifact as illustrated in .

Once the data segments have been incorporated from the index artifacts the completed index and the constituent partitions that comprise the index may be persistently stored within the metric store in an object based data storage service. Accordingly the map reduce processor may be configured to transmit one or more executable instructions to the metric store reader that when executed by the metric store reader may cause the metric store reader to utilize this new index . Alternatively the metric store reader may be configured to periodically poll the metric store to determine if any new indices have been stored within the metric store since the last poll. If there is a new index the metric store reader may be configured to obtain this new index to support customer queries for metrics data.

As noted above the map reduce processor may be configured to obtain a current version of the index along with the generated index artifacts to create a new version of the index. The index artifacts and the current version of the index may be merged to generate this new version of the index. This new version of the index may be created through an append only process such that older data segments may not be deleted but rather new segments may be added or appended to the partitions that comprise the index. Accordingly shows a diagram illustrating an example of appending an index using a new index artifact in accordance with at least one embodiment. In this illustrative example the map reduce processor may have generated a new index artifact during a different set of operations as opposed to the set of operations used to generate the index artifact illustrated in . The map reduce processor may be configured to obtain the current version of the index and merge it with the new index artifact .

The map reduce processor may be configured to append the data segments included in the new index artifact to the existing data segments included within the index . In the append only process the index may be modified such that the first layer of the index may include updated criteria for determining whether a customer query includes data segments stored within the metric store. The second layer or sub index of the index may be appended to include the new data segments included in the index artifact . In this manner any data segments within the metric store may be located by a metric store reader configured to process customer queries.

This new version of the index may be stored within the metric store for use by a metric store reader. Accordingly as noted above the map reduce processor may be configured to transmit one or more executable instructions that when executed by the metric store reader cause the metric store reader to use this new version of the index to locate metrics data necessary to fulfill a customer query. The computing resource monitoring service may retain a certain number of indices including the new version of the index within a metric store in order to provide the ability to roll back to a previous version of the index and accordingly re process any observation journals to re generate metrics data.

While the metric store may be configured to store several versions of the index the metric store may be configured to purge any indices based on one or more criteria. For instance the metric store may be configured to purge one or more indices that have been stored longer than a specified period of time. Alternatively the metric store may be configured to purge one or more indices based upon a triggering event. For example if the computing resource service provider has determined that a roll back is necessary to re create metrics data the map reduce processor may be configured to refer to a prior version of the index in order to process observation journals that may have been previously processed. Accordingly the map reduce processor may be configured to transmit executable instructions to the metric store to purge any indices currently stored within that were created after the current index in use by the map reduce processor.

In addition to purging any expired or obsolete indices the map reduce processor may also be configured to purge any expired or obsolete data segments within an index as well. Accordingly shows a diagram illustrating an example of removing one or more expired segments from an index in accordance with at least one embodiment. As noted above the index may be created through an append only process such that new data segments may be added to the index as the map reduce processor processes one or more observation journals. However the index may become too large if the append only process is permitted to go unfettered. Thus the map reduce processor may be configured to not only append newly created data segments from the index artifacts to the index file but also delete data segments based upon one or more criteria. For instance as illustrated in the map reduce processor may be configured to remove any expired data segments . In this illustrative example the map reduce processor may be configured to purge any data segments with a segment start time that exceeds fourteen days. Thus when the map reduce processor merges the index artifacts with a current version of the index the map reduce processor may locate and purge these expired data segments.

If all data segments for a particular metric are purged as part of this process the map reduce processor may be configured to additionally delete the first layer of the index associated with the metric in order to quickly reject any queries that do not have any matching metrics data. Meanwhile non expired data segments may remain unmodified within the index such that a customer query for such data may be fulfilled. The map reduce processor may be configured to additionally merge any available index artifacts to this index in order to create a new version of the index. It should be noted that as noted above the metric store may be used to store multiple versions of the index based upon one or more criteria. Accordingly if any expired data segments are deleted from the index the metric store may still retain a prior version of the index that includes the expired data segments to support roll back and redundancy.

The datastore writer may be configured to write observation metrics data received from the one or more monitored clients to one or more observation journals. The observation journals may be logs that may include a variety of metrics data based upon the configuration of the datastore writer. For instance the datastore writer may be configured to generate one or more observation journals with a limited storage capacity. Accordingly the datastore writer may be configured to publish metrics data to these observation journals until the observation journals are full e.g. reached storage capacity . Additionally in order to support rapid creation of the observation journals the datastore writer may be configured to blindly add metrics data to the observation journals in any order. As noted above a map reduce processor may be configured to separate and order the metrics data stored within the observation journal. Thus it may not be necessary for the datastore writer to order the metrics data by metric identification or timestamp.

While the datastore reader is writing metrics data to the one or more observation journals the datastore reader may also be configured to determine whether to upload the observation journals. For instance the datastore reader may be configured to upload the observation journals if these observation journals have reached storage capacity e.g. completely filled with metrics data . Additionally the datastore writer may be configured to upload the observation journals after a certain amount of time has passed e.g. daily weekly monthly etc. . If the observation journals have not reached storage capacity or the specified time period has not passed the datastore writer may continue to determine if the observation journals may be uploaded.

If the observation journals have reached their storage capacity or the specified time period has passed depending on the configuration of the datastore writer the datastore writer may consequently upload the observation journals to an observation journal logical data container. The observation journal logical data container may serve as an identifier within an object based data storage system to allow a map reduce processor to locate these observation journals. Accordingly the map reduce processor may be configured to perform one or more actions upon obtaining the observation journals from this observation journal logical data container. Once the observation journals have been uploaded the datastore writer may once again receive observation metrics data from the monitored clients and generate more observation journals. In this fashion the computing resource service provider may configure a computing resource monitoring service to continuously track metrics data and make this data available for processing.

As noted above a map reduce processor may be configured to extract observation journals from the observation journal logical data container in order to obtain metrics data for storage in one or more data objects. Accordingly shows an illustrative example of a process that may be performed by a properly configured map reduce processor for storing one or more metrics in data object in accordance with at least one embodiment. In the process the map reduce processor may be configured to first select any unprocessed journals from the observation journal logical data container for consumption e.g. metrics data extraction from the journal . As noted above the map reduce processor may be configured to initially obtain a manifest from a current version of an index to determine which observation journals have previously been processed. This may allow the map reduce processor to omit any observation journals that have been previously processed and as a result prevent duplication of metrics data stored in one or more data objects. In order to determine which version of the index to utilize the map reduce processor may be configured to refer to an index pointer stored within the object based data storage service to determine the location of the current version of the index.

Once the map reduce processor has obtained the unprocessed observation journals from the observation journal logical data container the map reduce processor may be configured to arrange the observations e.g. metrics data in the unprocessed observation journals by metric. For instance as illustrated in the map reduce processor may be configured to separate and order the metrics data in the unprocessed observation journals by metric identification. Additionally the map reduce processor may be configured to order these metrics based on one or more criteria. For example as illustrated in the metrics once separated based upon the metric identification may be ordered based upon the observation time of the metric entry. While the use of a timestamp is used extensively throughout the present disclosure to illustrate the ordering process the scope of the present disclosure is not so limited. For instance a map reduce processor may be configured to alternatively order the metrics based upon the metric sample count sum or other category tracked in the metric observation entry.

The map reduce processor may be configured to aggregate the observations from the observation journals into metrics data segments once the metrics data has been extracted and arranged as above. For instance the map reduce processor may be configured to aggregate the metrics data based on the observation time for each metric observation. For example as illustrated in the map reduce processor may aggregate all metrics data observed at one minute intervals. Thus two Metric A observations observed within a one minute interval may be aggregated into one data segment. It should be noted that a computing resource service provider may configure the map reduce processor to aggregate the metrics data based on any time interval and as such the use of a one minute interval should not limit the scope of the present disclosure. In addition while observation times are used extensively throughout the present disclosure for the purpose of illustration other variables may be used to determine aggregation of metrics data.

Once the observations e.g. metrics data have been aggregated into one or more metrics data segments the map reduce processor may be configured to write these data segments to one or more data objects. As noted above the data segments may be written to a data object independent of whether the same metric type has been stored in a different data object previously. In an embodiment the map reduce processor may be configured to concurrently generate one or more index artifacts that may include mappings for each data segment in the one or more data objects. This may support processing of a customer query for certain metrics data and making the metrics data available to the customer.

Subsequently the map reduce processor may be configured to store the one or more data objects comprising metrics data into a metric store within an object based data storage service. Concurrently the map reduce processor may compile a new version of the index and its constituent partitions which may include the newest metrics data from the one or more index artifacts and a prior version of the index. This new index and its constituent partitions may be persistently stored within the object based data storage service and may be published to a metric store reader in order to support customer queries for metrics data. Accordingly the stored data objects may be accessed by a customer through the use of a customer interface which may be configured to interface with a metric store reader.

As noted above the object based data storage service may be configured to persistently store one or more different versions of the index to enable roll back of metrics data. Accordingly shows an illustrative example of a process for restoring data objects and indices in accordance with at least one embodiment. The process may be initiated by a computing resource service provider which may configure a map reduce processor to perform the operations set forth. In the process the computing resource service provider may detect and issue with the processing of metrics data. For instance the computing resource service provider may detect that metrics data has been corrupted within one or more data objects stored within an object based data storage service. Alternatively the metrics data may be defective as a result of an error in programming the map reduce processor. While the use of problematic issues such as those described above are used extensively through the present disclosure to illustrate the roll back process the scope of the present disclosure is not so limited. For instance the computing resource service provider may initiate the roll back process and restore data objects and indices if it has discovered an improved method to process metrics data and wishes to implement this method to past metrics data.

As noted above the object based data storage service may be configured to persistently store one or more versions of an index within a metric store in order to support roll back. Accordingly once the computing resource service provider has determined that there is an issue with the processing of metrics data the computing resource service provider may configure the map reduce processor to select a prior version of the index. The configuration of the map reduce processor may cause the map reduce processor to locate this prior version of the index within the metric store. This prior version of the index may include a manifest comprising a listing of any unprocessed observation journals stored within an observation journal logical data container.

As noted above the map reduce processor may be configured to refer to the manifest included in the index the manifest including a listing of all previously processed observation journals. Accordingly the map reduce processor configured to process any unprocessed observation journals may identify any newly unprocessed journals within the observation journal logical data container that may need to be processed. These newly unprocessed journals may have been previously processed however the version of the index that may be utilized may not include these journals in the listing included in the manifest.

Once the map reduce processor has identified which observation journals require processing the map reduce processor may be configured to re process these newly unprocessed journals. As illustrated in the map reduce processor may be configured to extract metrics data from these unprocessed observation journals and arrange the metrics data by metric. The metrics data may subsequently be aggregated into one or more data segments for storage in one or more data objects.

As noted above the map reduce processor may be configured to write these data segments into one or more data objects which in turn may be persistently stored in a metric store within an object based data storage service. Additionally the map reduce processor may also be configured to generate one or more index artifacts which may include mappings for the metrics data stored in the data objects. These index artifacts may be merged with the current version of the index being used by the map reduce processor to generate a new version of the index. Thus the map reduce processor may be configured to restore the data objects and indices based upon the re processing of the observation journals. As noted above since the metric store may be configured to include data objects in an append only process these new data objects may be stored within the metric store along with the corrupted defective or obsolete data objects. However the index pointer may be updated to point to the version of the index just created and as such the corrupted defective or obsolete data objects may not be referred to and may not be subject to a customer query. Accordingly these data objects may be purged at a later date or upon completion of the roll back process.

As noted above a customer may utilize a customer interface provided by a computing resource monitoring service to submit a query for certain metrics data. Accordingly shows an illustrative example of a process for querying and retrieving a metric in accordance with at least one embodiment. The process may be performed by a properly configured metric store reader within a computing resource monitoring service. In the process a metric store reader may be configured to receive a query from a customer for certain metrics data. The query may be submitted to the metric store reader such as through one or more appropriately configured API calls to the service. The customer may submit these API calls to the service through a customer interface which may be configured to interface with the metric store reader within a computing resource monitoring service. The customer query may include a metric identifier as well as a time range for observations associated with the metric. Alternatively the customer may submit a query that may include metrics data that surpasses a certain customer defined threshold.

The metric store reader may be configured to interface with an object based data storage service to obtain metrics data from a metric store and to obtain one or more indices to support a customer query. Accordingly the metric store reader may be configured to retrieve an index pointer in order to locate the version of an index identified in the pointer. The index pointer may comprise a listing or version history of the indices stored within the metric store. Accordingly the index pointer may be configured such that the latest entry corresponds to a current version of an index. Thus when the metric store reader refers to this index pointer the metric store reader may utilize this current version of the index.

As noted above the index may be needed to locate metrics data necessary to satisfy the customer query. The index may include one or more partitions comprising mappings for the data objects that may be persistently stored within the metric store and the byte ranges that may comprise the queried metrics data. Each partition may correspond to a particular metric. Thus the metric store reader may be configured to hash the metric identification provided in the customer query to a particular partition within the index stored in the metric store. This partition may correspond to a database file persistently stored within the index in the metric store. The database file may include the location of the data segments corresponding to the metric within the one or more data objects stored in the metric store. Since the metric store may be configured to persistently store significant amounts of metrics data this database file may serve to support the customer query by providing an efficient method for locating specific metrics data.

Accordingly the metric store reader may be configured to retrieve this database file in order to locate the requested metrics data. The database file may include a listing of all the data objects stored in the metric store that include data segments associated with the requested metric. The database file may be arranged such that the metric identification may include a table of time ranges to data segments that may be used to determine which data objects comprise metrics data relevant to the customer query.

Thus once the database file has been retrieved and opened the metric store reader may be configured to submit a key query that may correspond to the metric requested by the customer. The metric store may be configured to use the key query to list any applicable data entries within the metric store that match the key query and the applicable time range provided by the customer. The data entries may include the corresponding name of the data object that includes the particular data segment necessary to fulfill the query.

Accordingly the metric store may be configured to use these data entries to find the applicable one or more data objects that comprise the data segments necessary to fulfill the query. The metric store may be configured to provide these locations to the metric store reader in order to support the customer query. Accordingly the metric store reader may be configured to transmit a request for the matching metrics data from these data objects.

Once the metrics data has been attained from the metric store the metric store may be configured to stream the requisite metrics data segments from the associated data objects to the metric store reader. In turn the metric store reader may be configured to provide this streaming capability to the customer through the customer interface. Thus the customer may be able to access the metrics data while potentially eliminating the need to duplicate these data segments within the metric store reader.

The illustrative environment includes at least one application server and a datastore . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate datastore. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein the term datastore refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment. The application server can include any appropriate hardware and software for integrating with the datastore as needed to execute aspects of one or more applications for the client device handling some even a majority of the data access and business logic for an application. The application server may provide access control services in cooperation with the datastore and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML or another appropriate structured language in this example. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed system.

The datastore can include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the datastore illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The datastore also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the datastore such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the datastore . The datastore is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the datastore might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of datastores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members used in the above conjunctive phrase at least one of A B and C and at least one of A B and C refers to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C to each be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

