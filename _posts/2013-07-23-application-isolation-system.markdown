---

title: Application isolation system
abstract: A facility for managing a document conversion environment is described. In various embodiments, the facility includes a native application associated with a native document type and an isolation service. The isolation service determines whether a native application associated with the native document type has started and when it has not started, starts the native application and causes the started native application to load and convert a native document to a common document format, wherein the isolation service starts a single instance of the native application and monitors the single instance of the native application so that it complies with specified a parameter, condition, or setting of operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09367531&OS=09367531&RS=09367531
owner: Open Text S.A.
number: 09367531
owner_city: Luxembourg
owner_country: LU
publication_date: 20130723
---
This application is a continuation of and claims the benefit of priority under 35 U.S.C. 120 of the filing date of U.S. patent application Ser. No. 12 101 657 filed Apr. 11 2008 entitled APPLICATION ISOLATION SYSTEM which claims the benefit of priority under 35 U.S.C. 119 to U.S. Provisional Patent Application No. 60 911 772 filed on Apr. 13 2007 entitled APPLICATION ISOLATION SYSTEM which are incorporated herein by reference in its entirety.

Server software is sometimes used for document conversions. As an example a RightFax server that was commercialized by the assignee of the present patent application converted documents from a native document format to a facsimile document format. A native document format is a document format that is associated with an application native application . Examples of native document formats and corresponding native applications are DOC files and Microsoft Word Workbooks and Microsoft Excel hypertext markup language documents and an Internet browser and so forth.

Some of these native applications supported an interface called automation which is also known as object linking and embedding OLE automation. The server software could command these applications using their OLE automation interfaces to open a document and print the document. When printing the document a printer driver can be specified such as to print the document in a common document format. Examples of common document formats include Adobe Portable Document Format Hewlett Packard Printer Control Language facsimile or Tagged Image File Format TIFF and Adobe PostScript . Using the RightFax server for example a user could provide a native document format file for sending via facsimile. The RightFax server would receive the document employ the native application to convert the document to a TIFF common document format and send the converted TIFF formatted document via facsimile services.

Document conversion server software such as the RightFax server is designed to function in high volume or high use environments and can receive and convert many documents from many users. When the server software receives multiple documents it conventionally would create multiple instances of the automated native application to convert several documents concurrently. However the native applications are generally designed for use by a single user at a time. When multiple instances of the native applications are launched concurrently they sometimes behave unexpectedly such as by freezing or crashing e.g. because of memory leaks prompts for user input and so forth . Oftentimes the native applications would freeze or crash for various unknown reasons. When this occurs the document conversion server software can also freeze or crash such as when the document conversion server software and the native application operate in the same process space.

Other technology exists for converting documents from a native document format to a common document format. The document conversion server software could employ this technology. However this technology commonly does not support all features of the native applications and so the resulting conversion often does not provide adequate fidelity. As an example when this technology receives a Word document containing an embedded Microsoft Excel chart or spreadsheet the technology may not produce output that is similar to what the native application e.g. Microsoft Word in this case would produce.

An application isolation system is described. In various embodiments the application isolation system isolates native applications from a document conversion server software server software so that the server software is unaffected by problems experienced by the native applications. The application isolation system can employ queues to facilitate document conversion such as queues for incoming native documents and outgoing converted documents. The application isolation system can employ a queue for enqueuing native documents for conversion. In various embodiments the application isolation system may employ one queue per native document type or one queue for all native document types. A user can employ an application such as a facsimile client application or simply a file browser to enqueue native documents for converting. As an example the user may employ a file explorer to copy a native document into a folder associated with documents enqueued for conversion and sending via facsimile. The application isolation system may also employ one or more queues for holding converted documents. As examples the application isolation system can employ a queue for various common document types such as facsimile or TIFF.

When the application isolation system detects that a native document is ready for conversion it can check whether a corresponding native application has been started. If it has not already started the application isolation system can start a native application that is capable of handling the enqueued native document. The application isolation system can then provide the enqueued native documents to the native application it starts for conversion. In some embodiments the application isolation system can provide the enqueued native documents to the native application one at a time. In other embodiments the application isolation system can provide the enqueued documents to the native application concurrently. By first checking whether the native application has already started the application isolation system can ensure that one instance of the native application executes.

In various embodiments the started native applications can execute within a process space identified by the application isolation system. As an example the application isolation system can be a service such as a Windows NT service NT service . The NT service can start the native application. In various embodiments the NT service may start multiple native applications such as one for each native document type that is to be converted. In various embodiments the started native applications may execute in separate process spaces or may execute within a single process space. The application isolation system can then command the native applications such as by employing an automation interface or other application programming interface API the native applications provide. As an example the application isolation system can command a native application to open an enqueued document and print it using a printer driver associated with a specified common document format. When the native application employs a specified printer driver the printer driver can receive printing commands from the native application and produce an output such as in TIFF or other common document format.

In various embodiments the application isolation system can use other mechanisms for converting files. As examples the application isolation system can print a native document to a file store a converted file in memory for viewing convert a native document to a format that can be used by another application and so forth.

The application isolation system can monitor each native application and print request to ensure that the native application is functioning as expected. A user e.g. an administrator can provide various configuration parameters conditions or settings to the application isolation system such as to allocate a specified amount of memory identify a maximum time for conversion specify a maximum number of attempts at document conversion and so forth. These parameters conditions and settings can together be referred to herein as simply parameters. The application isolation system can monitor or enforce these parameters. As an example the application isolation system can allocate the specified amount of memory to native applications it starts. When a process associated with a native application requests additional memory such as by allocating more memory using an operating system s memory allocation API the application isolation system can restart the native application. As another example when the application isolation system detects that a native application is taking more time than the identified maximum time to convert a document it can restart the native application and the document conversion process for that document. By restarting native applications when they take more time than anticipated the application isolation system can substantially reduce the latency between document conversions that sometimes occur e.g. when native applications complete processing a native document and thereby facilitate document conversions in high volume environments. Thus the application isolation system is able to monitor and manage the conversion and rendering of native documents by native applications. When multiple native documents of different types are converted the application isolation system can monitor and manage each corresponding native application.

In some embodiments the application isolation system can tune the maximum time such as based on measuring time to convert known documents or profiling the application isolation system over time. When a native application indicates that a document cannot be converted that the converted document has no content or other circumstances in which the application isolation system detects an error condition the application isolation system can reattempt document conversion a specified maximum number of times. When the maximum number of attempts is reached the application isolation system may restart the native application. The application isolation system can detect which conversion process has failed and thus which native application has failed. The application isolation system can report these and other errors as well as successful conversions or other operating information in a log such as an event log.

The application isolation system may also provide other tunable parameters. As an example the application isolation system may enable a user to set a maximum file size that can be converted specify document types that can or cannot be converted and so forth. The application isolation system may also provide notifications to users such as via a log electronic messaging and so forth.

As previously stated the application isolation system is an NT service in some embodiments. When the application isolation system fails the operating system can be configured to restart it automatically. When the application isolation system restarts it can ensure that the conversion process is restarted for documents it was in the process of converting when it failed. The application isolation system can store status such as which native documents are being converted in a persistent storage e.g. in a registry or flash random access memory so that it can check the prior status when it restarts after a failure. In some embodiments the application isolation system can also employ various queues to check status such as by checking the status of documents in the converted documents queue.

By configuring monitoring and automatically administering the conversion process using single instances of native applications the application isolation system causes the document conversion server software to be more robust and reliable. As an example the application isolation system can terminate and restart a native application that appears to be causing failures but ignore another native application that does not exhibit problems.

In some embodiments the application isolation system can be extended to employ native applications in various forms such as executable applications dynamic link libraries intermediate language code and so forth.

In various embodiments the application isolation system can employ various third party software such as native applications e.g. Microsoft Word queuing technology e.g. Microsoft Message Queuing operating systems e.g. Microsoft Windows Apple Macintosh Operating System and so forth.

In various embodiments the application isolation system can be used to isolate applications or other processes that perform various conversions such as documents from one type to another optical character recognition text to speech speech to text image recognition and so forth.

In various embodiments the application isolation system may receive an indication of a user or user group that has provided the native document and can cause the native application to load files corresponding to the user or user group such as font files user dictionaries templates and so forth. In other embodiments or when no user or group is specified the application isolation system may load similar files that are shared by multiple users or user groups.

The application isolation system will now be described with reference to the figures. Although the figures illustrate some embodiments one skilled in the art will understand that other embodiments and combinations of the illustrated embodiments are also possible. Some details that one skilled in the art would be presumed to know have been omitted from the figures.

The technology can also be employed in distributed computing environments where tasks or modules are performed by remote processing devices which are linked through a communications network e.g. a Local Area Network LAN Wide Area Network WAN or the Internet. In a distributed computing environment program modules or subroutines may be located in both local and remote memory storage devices. Aspects of the technology described below may be stored or distributed on computer readable media including magnetic and optically readable and removable computer discs stored as firmware in chips e.g. EEPROM chips as well as distributed electronically over the Internet or over other networks including wireless networks . Those skilled in the relevant art will recognize that portions of the technology may reside on a server computer while corresponding portions reside on a client computer. Data structures and transmission of data particular to aspects of the technology are also encompassed by the technology.

Referring to an embodiment employs a computer such as a personal computer or workstation having one or more processors coupled to one or more user input devices and data storage devices . The computer can also be coupled to an output device such as a display device or other optional output devices e.g. printer plotter speakers tactile or olfactory output devices etc. . The computer may be coupled to external computers such as via an optional network connection a wireless transceiver or both.

The input devices may include a keyboard and or a pointing device such as a mouse. Other input devices are possible such as a microphone joystick pen game pad scanner digital camera video camera and the like. The data storage devices may include any type of computer readable media that can store data accessible by the computer such as magnetic hard and floppy disk drives optical disk drives magnetic cassettes tape drives flash memory cards digital video disks DVDs Bernoulli cartridges RAMs ROMs smart cards etc. Indeed any medium for storing or transmitting computer readable instructions and data may be employed including a connection port to or node on a network such as a local area network LAN wide area network WAN or the Internet not shown in . Aspects of the technology may be practiced in a variety of other computing environments.

While some aspects of user interfaces have been illustrated one skilled in the art would recognize that other user interfaces are also possible.

At block the routine identifies a native application corresponding to the incoming document. In various embodiments the application isolation system can identify the native application based on the type of the incoming document. The type of the incoming document can be detected based on its filename suffix document contents etc.

At decision block the routine determines whether the identified native application is already executing. If the native application is already executing the routine continues at block . Otherwise the routine continues at block where it starts the identified native application. One skilled in the art would recognize that various error conditions could occur in which case the application isolation system may need to react accordingly such as by attempting to restart the native application or return with a failure. The routine then continues at block .

At block the routine causes the native application corresponding to the incoming document to load and print the document. The application isolation system can employ an automation interface or other API provided by the native application to load and print the document. In some embodiments the application isolation system may also specify a printer driver that the native application is to use. As an example when a user specifies a common document format into which the native document is to be converted the application isolation system may select a corresponding printer driver.

At block the routine invokes a check printed document subroutine to verify whether the native application correctly converted the native document. The check printed document subroutine is described in further detail below in relation to .

At decision block the routine determines whether the document printed successfully. If the document printed successfully the routine returns at block . Otherwise the routine continues at decision block .

At decision block the routine determines whether it has already tried to print the native document a specified number of times. The number of times can be specified by a user such as a system administrator. As an example the system administrator can specify the number of times to make an attempt using a user interface associated with the application isolation system e.g. the user interface illustrated in and described above. If the application isolation system has attempted to print the native document the specified number of times the routine returns at block where it may return an error. Otherwise the routine returns at block to retry printing the document.

At decision block the routine determines whether the native application is taking too long to print. As an example the routine determines whether the time difference between the present time and the time at which the application isolation system requested the native application to begin printing exceeds a threshold amount specified by an administrator or determined by the application isolation system to be a reasonable amount of time such as based on the document s size. If the native application is taking too long to print the document the routine continues at block . Otherwise the routine continues at decision block .

At block the routine shuts down the application and then attempts to restart the application at block . The routine then indicates at block that the document was not printed. The routine then continues at block where it returns.

At decision block the routine determines whether the native application is consuming too much memory. As an example the routine determines whether the native application has allocated more memory than was specified in a configuration setting associated with the application isolation system. If the native application is consuming too much memory the routine continues at block . Otherwise the routine continues at decision block .

At decision block the routine determines whether the native application printed the document. As an example the routine can determine whether an output file was printed the file has more than zero bytes or whether the file has content. If the native application printed the document the routine continues at decision block . Otherwise the routine continues at block . In some embodiments the routine may continue at block instead of block .

At decision block the routine determines whether a return value from the native application indicates that the native application successfully converted the document. If the return value indicates that the native application successfully converted the document the routine continues at block . Otherwise the routine continues at block . In some embodiments the routine may continue at block instead of block .

At block the routine indicates that the native application successfully printed the document. The routine then continues at block where it returns.

At decision block the routine determines whether the application isolation system previously shut down improperly. As an example the application isolation system may store an indication in a persistent storage that it previously shut down properly. If the application isolation system previously shut down improperly the routine continues at block . Otherwise if the application isolation system shut down properly the routine continues at block .

At block the routine checks which document or which document type previously caused the application isolation system to shut down improperly. At block the routine starts the corresponding native application in isolation. In some embodiments the application isolation system does not start other native applications even when native documents may be enqueued. At block the routine causes the started native application to load and print the document that previously caused the application isolation system to shut down improperly. At block the routine invokes the check printed document subroutine.

At decision block the routine determines whether the document printed successfully. If the document printed successfully the routine continues at block . Otherwise at block the routine removes the document from the queue and reports an error such as in a log. The routine then continues at block .

At block the routine starts the service normally. The application isolation system then continues to process enqueued native documents. The routine returns at block .

Although the illustrated embodiments are described in relation to converting documents using a printing mechanism other mechanisms can be employed. As an example the application isolation system can employ features provided by native applications to convert documents. Examples of features include a Save As command Convert command and so forth. Alternatively the application isolation system may provide additional components for performing the conversion from one document type to another.

In some embodiments the application isolation service can balance application management versus process speed. For example a facsimile server application architecture might depend on large volumes of PCL conversion. To use the application isolation service to manage such tasks may require additional processor time for inter process communication and also time to serialize tasks for the application isolation service. The application isolation service can be modified to permit parallelization so that it can handle a configurable or dynamically determined number of like tasks at once. This would permit concurrent parallel processing of PCL conversions with the stability and application runtime management benefits of the application isolation service.

In some embodiments the application isolation system manages a document conversion environment with components comprising a native application associated with a native document type and an isolation service. The isolation service determines whether a native application associated with the native document type has started and when it has not started starts the native application and causes the started native application to load and convert a native document to a common document format wherein the isolation service starts a single instance of the native application and monitors the single instance of the native application so that it complies with specified a parameter condition or setting of operation.

In some embodiments the application isolation system performs a method for managing document conversion in a document conversion environment comprising determining that a document having a native document type is awaiting to be converted identifying a native application corresponding to the native document type determining whether the identified native application is executing when the identified native application is not executing starting the native application commanding the native application to load and convert the document and monitoring the native application to ensure that it complies with a specified parameter condition or setting. In some embodiments computer executable instructions to perform this method are stored in a computer readable storage medium.

Various embodiments of the application isolation system are described above. It will be appreciated that the details set forth above are provided to describe the embodiments in a manner sufficient to enable a person skilled in the relevant art to make and use the disclosed embodiments. Several of the details and advantages however may not be necessary to practice some embodiments. Additionally some well known structures or functions may not be shown or described in detail so as to avoid unnecessarily obscuring the relevant description of the various embodiments. Although some embodiments may be within the scope of the claims they may not be described in detail with respect to the Figures. Furthermore features structures or characteristics of various embodiments may be combined in any suitable manner. Moreover one skilled in the art will recognize that there are a number of other technologies that could be used to perform functions similar to those described above and so the claims should not be limited to the devices or routines described herein. While processes or blocks are presented in a given order alternative embodiments may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed in parallel or may be performed at different times. The headings provided herein are for convenience only and do not interpret the scope or meaning of the claims.

The terminology used in the description is intended to be interpreted in its broadest reasonable manner even though it is being used in conjunction with a detailed description of identified embodiments.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in a sense of including but not limited to. Words using the singular or plural number also include the plural or singular number respectively. When the claims use the word or in reference to a list of two or more items that word covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

Aspects of the application isolation system may be stored or distributed on computer readable media including magnetically or optically readable computer discs hard wired or preprogrammed chips e.g. EEPROM semiconductor chips nanotechnology memory biological memory or other data storage media. Indeed computer implemented instructions data structures screen displays and other data under aspects of the application isolation system may be distributed over the Internet or over other networks including wireless networks on a propagated signal on a propagation medium e.g. an electromagnetic wave s a sound wave etc. over a period of time or they may be provided on any analog or digital network packet switched circuit switched or other scheme . Those skilled in the relevant art will recognize that portions of the application isolation system reside on various computing devices such as a server computer a client computer and so forth. Thus while certain hardware platforms are described herein aspects of the application isolation system are equally applicable to nodes on a network or other types of computing devices.

These and other changes can be made in light of the above Detailed Description. While the above description details certain embodiments and describes the best mode contemplated no matter how detailed various changes can be made. Implementation details may vary considerably while still being encompassed by the application isolation system disclosed herein. As noted above particular terminology used when describing certain features or aspects of the application isolation system should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the application isolation system with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the claims to the specific embodiments disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the claims encompasses not only the disclosed embodiments but also all equivalents.

