---

title: Extensibility for manipulation of medical data
abstract: A method for extending a functionality of a computing device programmed to obtain physiological measurements from a patient includes: registering, at the computing device, a plug-in module, the plug-in module providing additional functionality for the computing device; using the plug-in module to communicate with a medical device; commanding the medical device to obtain physiological information from a patient; receiving data associated with the physiological information from the medical device; and transferring the data to a central repository.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09641589&OS=09641589&RS=09641589
owner: Welch Allyn, Inc.
number: 09641589
owner_city: Skaneateles Falls
owner_country: US
publication_date: 20131010
---
This application claims the benefit of U.S. patent application Ser. No. 61 319 707 filed on Mar. 31 2010 the entirety of which including all exhibits thereto is hereby incorporated by reference.

Health care practitioners such as nurses and physicians use various types of health care equipment to assist with the task of providing health care to a patient. Some health care equipment is designed to perform multiple functions such as temperature measurement and blood pressure measurement. Such multi function equipment may be limited in functionality based on the types of activities and medical devices with which the equipment has been programmed to interface.

In one aspect a software platform for healthcare diagnostic applications includes a computing device including memory and a processor that when executing instructions stored on the memory creates a client side framework defining elements for use by platform client applications a composite application framework supporting extensible modules the composite application framework supporting construction of composite applications in which functionality is implemented by a container application which hosts plug in modules to support specific diagnostic functions a plug in module extending platform applications a composite application combining base application code with plug in modules to support a set of clinical functions and a domain specific framework for defined clinical measurement domains wherein the domain specific framework shares certain common code and resources with other modules and contain domain specific expandable sets of sensor measurement plug ins which obtain physiologic data of a type covered by a domain.

In another aspect a method for extending a functionality of a computing device programmed to obtain physiological measurements from a patient includes registering at the computing device a plug in module the plug in module providing additional functionality for the computing device using the plug in module to communicate with a medical device commanding the medical device to obtain physiological information from a patient receiving data associated with the physiological information from the medical device transferring the data to a central repository.

In yet another aspect a computer readable storage medium encodes instructions that when executed by a processor cause the processor to perform steps including registering at a computing device a plug in module the plug in module providing additional functionality for the computing device using the plug in module to communicate with a medical device commanding the medical device to obtain physiological information from a patient receiving data associated with the physiological information from the medical device transferring the data to a central repository.

The present disclosure relates to communicating and storing diagnostic tests with the purpose of supporting the extensibility of the test type and contained diagnostic measurements.

In creating a multi purpose diagnostic application one challenge is the ability to add and support new diagnostic test types and measurements over time. Examples of diagnostic test types which could be supported include vital signs resting ECG spirometry exercise ECG holter etc. A primary concern in adding new test types and measurements to an existing system is how to handle communicating and storing these new types while minimizing the changes to existing code and database structures.

The goal of this disclosure is to create an extensible communication and storage pattern for test and measurement types such that no changes are needed to these definitions as new diagnostic test and measurement types are added to the application.

A common solution to the problem of adding new diagnostic test types and measurement types to an existing application is to modify the storage subsystem s database structure to accommodate the new types and to modify application code to recognize and handle the new types. This has the advantage of not requiring database or application code changes allowing a new test type and or measurement types to be added by the addition of the plug in module.

Test result data is arranged in a common Test class data structure which contains a collection of one or more measurement specific classes. The Test class contains attributes and operations which are common to all tests no matter what test type they are. These common attributes include things like a unique test identifier the test type the date time the test was taken the user who performed the test etc. The common attributes are understood and used by a wide range of code which stores manages and summarizes test results. The measurement specific classes are derived from a common Measurement class such that they support a set of common operations to be performed on them by code which has no knowledge of the measurement specific data. There is one or more test measurement specific plug ins to support each new diagnostic test type measurements. These plug ins support the following functions 

For example a new test can be created as follows. The new test is populated with necessary data including the patient Patient test type TestType test measurements test.Measurements taken and any other available data. Example pseudo code for creation of the test is provided below 

A function call is used to save it to persistent storage. This new test can be used as a plug in to extend the functionality of existing medical devices.

This systems and methods disclosed herein allow the construction of a multi purpose diagnostic application in which new diagnostic test types and measurement types can be added without wholesale changes to application code and storage mechanisms. New diagnostic test types and measurement types can be added through the addition of application plug ins which define and support these new types.

In one example the system is a CONNEX system from Welch Allyn Inc. of Skaneateles Falls N.Y. although other systems can be used.

The network is an electronic communication network that facilitates communication between the client devices and the between the client devices and the interface system . An electronic communication network is a set of computing devices and links between the computing devices. The computing devices in the network use the links to enable communication among the computing devices in the network. The network can include routers switches mobile access points bridges hubs intrusion detection devices storage devices standalone server devices blade server devices sensors desktop computers firewall devices laptop computers handheld computers mobile telephones and other types of computing devices. In various embodiments the network includes various types of links. For example the network can include wired and or wireless links. Furthermore in various embodiments the network is implemented at various scales. For example the network can be implemented as one or more local area networks LANs metropolitan area networks subnets wide area networks such as the Internet or can be implemented at another scale.

The EMR system is a computing system that allows storage retrieval and manipulation of electronic medical records. As used herein a computing system is a system of one or more computing devices. A computing device is a physical tangible device that processes data. Example types of computing devices include personal computers standalone server computers blade server computers mainframe computers handheld computers smart phones special purpose computing devices and other types of devices that process data.

Each client device in the set of client devices is a computing device. The client devices can provide various types of functionality. For example the set of client devices can include one or more physiological monitor devices such as the physiological monitor device . In addition the set of client devices can include one or more desktop laptop or wall mounted devices. Such devices can have similar functionality to the physiological monitor device but are stationary instead of portable such as workstation devices such as the VM workstation . In addition the set of client devices can include one or more monitor devices. Such monitor devices can display representations of physiological parameters. A monitor device could for example be used by a clinician to monitor the physiological parameters of multiple patients at one time.

The client devices can communicate with each other through the network . In various embodiments the client devices can communicate various types of data with each other through the network . For example in embodiments where the set of client devices includes a set of physiological monitor devices and a monitor device each of the physiological monitor devices can send data representing measurements of physiological parameters of patients to the monitor device. In this way the monitor device can display representations of physiological parameters to a clinician.

The interface system is a computing system that acts as an interface between the EMR system and the client devices . Different EMR systems have different software interfaces. For example the EMR system used by two different hospitals can have two different software interfaces. The interface system provides a single software interface to each of the client devices . The client devices send requests to software interface provided by the interface system . When the interface system receives a request from one of the client devices the interface system translates the request into a request that works with the software interface provided by the EMR system . The interface system then provides the translated request to the software interface provided by the EMR system . When the interface system receives a response from the EMR system the interface system translates the response from a format of the EMR system to a system understood by the client devices . The interface system then forwards the translated response to an appropriate one of the client devices .

The client devices can send various types of data to the interface system for storage in the EMR system and can receive various types of data from the EMR system through the interface system . For example in some embodiments the client devices can send measurements of physiological parameters to the interface system for storage in the EMR system . In another example a monitor device can retrieve past measurements of physiological parameters of patients from the EMR system through the interface system .

A temperature measurement module is accessible from the front side of the physiological monitor device . A SpO2 module and a non invasive blood pressure NIBP module are accessible from a left hand side of the physiological monitor device . An upper handle portion enables the physiological monitor device to be carried by hand.

A front side of the physiological monitor device includes a display screen and an outer surface of the temperature measurement module . The temperature measurement module is designed to measure the body temperature of a patient. As used in this document a module is a combination of a physical module structure which typically resides within the physiological monitor device and optional peripheral components not shown that typically attach to and reside outside of the physiological monitor device .

The temperature measurement module includes a front panel . The front panel has an outer surface that is accessible from the front side of the physiological monitor device . The front panel provides access to a wall not shown storing a removable probe not shown also referred to as a temperature probe that is attached to a probe handle . The probe and its attached probe handle are tethered to the temperature measurement module via an insulated conductor . The probe is designed to make physical contact with a patient in order to sense a body temperature of the patient.

A left hand side of the physiological monitor device includes an outer surface of the SpO2 module and an outer surface of the NIBP module . The SpO2 module is a HCE module designed to measure oxygen content within the blood of a patient. The NIBP module is a HCE module designed to measure blood pressure of a patient.

As shown the SpO2 module includes a front panel . The front panel includes an outer surface that is accessible from the left side of the physiological monitor device . The front panel includes a connector that enables a connection between one or more peripheral SpO2 components not shown and a portion of the SpO2 module residing inside the physiological monitor device . The peripheral SpO2 components reside external to the physiological monitor device . The peripheral SpO2 components are configured to interoperate with the SpO2 module when connected to the SpO2 module via the connector . In some embodiments the peripheral SpO2 components include a clip that attaches to an appendage of a patient such as a finger. The clip is designed to detect and measure a pulse and an oxygen content of blood flowing within the patient.

As shown the NIBP module includes a front panel having an outer surface that is accessible from the left side of the physiological monitor device . The front panel includes a connector that enables a connection between one or more peripheral NIBP components not shown and a portion of the NIBP module residing inside the physiological monitor device . The peripheral NIBP components reside external to the physiological monitor device . The peripheral NIBP components are configured to interoperate with the NIBP module when connected to the NIBP module via the connector . In some embodiments the peripheral NIBP components include an inflatable cuff that attaches to an appendage of a patient such as an upper arm of the patient. The inflatable cuff is designed to measure the systolic and diastolic blood pressure of the patient the mean arterial pressure MAP of the patient and the pulse rate of blood flowing within the patient.

The physiological monitor device is able to operate within one or more workflows. A workflow is a series of one or more tasks that a user of the physiological monitor device performs. When the physiological monitor device operates within a workflow the physiological monitor device provides functionality suitable for assisting the user in performing the workflow. When the physiological monitor device operates within different workflows the physiological monitor device provides different functionality.

When the physiological monitor device is manufactured the physiological monitor device is configured to be able to operate within one or more workflows. After the physiological monitor device is manufactured the physiological monitor device can be reconfigured to operate within one or more additional workflows. In this way a user can adapt the physiological monitor device for use in different workflows as needed.

In various embodiments the physiological monitor device operates within various workflows. For example in some embodiments the physiological monitor device can operate within a monitoring workflow or a non monitoring workflow. Example types of non monitoring workflows include but are not limited to a spot check workflow and a triage workflow.

In example embodiments the names for the workflows can be defined by the user. For example the user can rename a triage workflow as ED 3 North or any other nomenclature as desired to provide more context to the user.

When the physiological monitor device is operating within the monitoring workflow the physiological monitor device obtains a series of measurements of one or more physiological parameters of a single monitored patient over a period of time. In addition the physiological monitor device displays on the display screen a monitoring workflow home screen. The monitoring workflow home screen contains a representation of a physiological parameter of the monitored patient. The representation is based on at least one measurement in the series of measurements. A representation of a physiological parameter is a visible image conveying information about the physiological parameter.

For example when the physiological monitor device is operating within the monitoring workflow the physiological monitor device can obtain a blood pressure measurement of a single patient once every ten minutes for six hours. In this example the physiological monitor device displays a monitoring workflow home screen that contains a representation of the patient s blood pressure based on a most recent one of the temperature measurements. In this way a user of the physiological monitor device can monitor the status of the patient.

When the physiological monitor device is operating within a non monitoring workflow the physiological monitor device obtains a measurement of one or more physiological parameters from each patient in a series of patients. In addition the physiological monitor device displays a non monitoring workflow home screen on the display screen . The non monitoring workflow home screen contains a representation of the physiological parameter of a given patient in the series of patients. The representation is based on the measurement of the physiological parameter of the given patient.

In one example when the physiological monitor device is operating within a spot check workflow the physiological monitor device obtains blood pressure measurements from a series of previously identified patients. In this other example the physiological monitor device displays a spot check workflow home screen containing a blood pressure measurement of a given patient in the series of previously identified patients. In this way a user of the physiological monitor device can perform spot checks on the blood pressures of patients who have already been admitted to a hospital.

As used in this document a patient is a previously identified patient when the physiological monitor device stores information regarding the identity of the patient. In another example when the physiological monitor device is operating within a triage workflow the physiological monitor device can obtain a single blood pressure measurement from each patient in a series of unidentified patients as the patients arrive at a hospital. In this example the physiological monitor device displays a triage workflow home screen containing a representation of the patients blood pressure based on the single blood pressure measurements of the patients. In this way a user of the physiological monitor device can perform triage on the series of unidentified patients as they arrive. As used in this document a patient is an unidentified patient when the physiological monitor device does not store information regarding the identity of the patient.

The monitoring workflow home screen is different than the non monitoring workflow home screen. Further as discussed below the navigation options associated with the different workflows allows for efficient monitoring based on the environment in which the device is used. In various embodiments the monitoring workflow home screen is different than the non monitoring workflow home screen in various ways. For example in some embodiments the monitoring workflow home screen includes at least one user selectable control that is not included in the non monitoring workflow home screen. In other embodiments a representation of a physiological parameter in the monitoring workflow home screen has a different size than a representation of the same physiological parameter in the non monitoring workflow home screen.

In some examples described herein the physiological monitor device is a portable device. In other examples the physiological monitor device is a non portable device such as a computing device like a workstation. Many configurations are possible.

Referring now to another example system for collecting measurements of physiological parameters of patients is shown. The system is similar to the system described above with the following distinctions.

The system is a client server service oriented architecture. A platform in the system provides various services including the Enterprise Gateway Service EGS Episodic Connectivity Service ECS and the client services . Devices and client applications such as a Vital Monitoring VM workstation access these services via a wired or wireless network connection over known protocols and interfaces such as the Windows Communication Foundation or WCF which is an application programming interface API in the .NET Framework for building connected service oriented applications. Other configurations are possible.

In a typical network topology a single server machine hosts all of the client services . The server also hosts a Microsoft SQL Server database which provides the persistent data store for the platform . All database access in the platform is through the client services .

Medical devices i.e. devices that interface or interact with a patient to obtain physiological data such as the physiological monitor device can connect to the platform in two ways. Devices can communicate indirectly with the client services via the ECS which provides the infrastructure for protocol and data transformation. Alternately medical devices can connect to the VM workstation via a hardwired USB or standard serial connection.

In either scenario the devices can communicate through known protocols such as the Welch Allyn Communications Protocol WACP . WACP uses a taxonomy as a mechanism to define information and messaging. Taxonomy can be defined as description identification and classification of a semantic model. Taxonomy as applied to a classification scheme may be extensible. Semantic class based modeling utilizing taxonomy can minimize the complexity of data description management by limiting categorizing and logically grouping information management and operational functions into families that contain both static and dynamic elements.

The EGS provides connectivity between the platform and external systems for transfer of patient visit and test information. The EGS interacts with the client services as well as external systems. The EGS supports the industry standard HL7 protocol for communicating with the external systems such as a Hospital Information System HIS .

In this example the VM workstation is an extensible client application built on the Windows Presentation Foundation WPF graphical subsystem for rendering user interfaces in Windows based applications from Microsoft Corporation of Redmond Wash. The VM workstation provides a graphical user interface UI for patient and test management. The VM workstation allows end users to acquire visualize update and save diagnostic medical data. As noted devices e.g. medical device can connect to the VM workstation via USB or serial connections. Plug ins allow test data to be imported or acquired through direct control of the connected device. Plug ins can also provide the ability to visualize and post process the test data.

The example ECS supports wired and wireless network based device connectivity. The ECS enables medical devices to connect and communicate with the platform via the network infrastructure. The ECS communicates with the medical devices receiving requests and processing them via interaction with the client services . In order to support new devices the ECS consumes plug ins for communicating with and processing data.

The example EGS supports interfacing with external hospital information systems e.g. HIS for the exchange of patient and test data. Default functionality allows data to be exported through HL7 messages or file I O. The EGS consumes plug ins which transform test and measurement data into formats expected by the external systems. The EGS can also be extended to support different network communication protocols that may be required by external systems.

In this example the client services provide basic data management services for test patient and clinician data. These services are responsible for managing the majority of the data within the platform . The core services also support user authentication server administration error logging and a publish subscribe service.

As described further below one or more of the VM workstation ECS and EGS can be extended by plug ins using types and interfaces defined for the platform .

In this embodiment various applications and services built on the platform e.g. VM workstation ECS and EGS are a compilation of the components shown in . In this example the architecture the VM workstation is shown.

In this example the VM workstation includes a plurality of logical components including applications plug ins and a core framework. These components form a layered architecture in which applications and plug ins form the upper layer and are dependent upon the definitions and functions implemented in the core framework.

The core framework provides the basic types and interfaces used by applications and plug ins. The types cover a variety of areas of functionality. The core framework is organized into groups and can be defined by one or more namespaces.

The primitives group represents the basic data structures such as name gender address etc. used by the more complex types and services defined within the core framework.

The entities group defines the basic objects like user clinician patient test measurement etc. and operations that can be applied to these objects. The entities group provides a collection of data structures which are used as object oriented abstractions of entities that are stored in the database. Each entity type typically has an underlying table in the database and each instance of the entity corresponds to a row in that table.

To retrieve entity data stored in the database the queries group provides capabilities to query the database. In most cases the application will pass entity data through method arguments but the query namespace provides a direct way to query the database from within the plug in. It supports construction of queries using an object oriented syntax. This group abstracts the user from requiring knowing details on how the objects are stored in the database.

Diagnostic measurements have numerical attributes. To represent these the quanta types are provided for commonly used quantities such as weight volume temperature pressure etc. These types encapsulate the quantity and include support for commonly used conversion calculations from one unit of measure to another.

The presentation types define common user interface elements such as styles templates user controls and dialogs. The platform supports internationalization and localization. The localization types provide support for dynamic culture switching and localization of UI screens.

The licensing types support software licensing of the system features. They include the ability to check if a specified feature is properly licensed and the ability to activate a license.

The configuration group provides types that support reading application settings and allow extending this set with custom settings.

The reporting group provides the types needed for formatting previewing and printing reports using a flexible layout mechanism.

The logging types supports logging application events and custom messages from components and plug ins.

The device communication group provides an abstraction layer that the application can use to communicate with connected medical devices.

The component model group defines the interfaces that form the base of all extension points defined in the core framework. It also provides types that determine how plug ins and components can declaratively specify their capabilities exports and dependencies imports through metadata.

The types in the core framework s applications namespace extend the base component model types to define interfaces that form the contracts between plug ins and applications. These interfaces are defined in terms of activities. The Application namespace provides a predefined library of activity interfaces one for each extension point.

In this example an activity is the most basic unit of work. Each application is divided into a series of tasks or workflows. Each workflow can be further imagined as a series of steps or activities.

Applications such as the VM workstation include workflows that execute one or more activities that are supplied by plug ins. Executing an application workflow implies executing the constituent activities. The library of activity interfaces for plug ins to implement provided by the core framework allows plug ins to control what exactly they need to do when application workflows invoke them.

The core framework s component model group defines the base activity interface. The Application group extends this to define a number of pre defined activity interfaces targeting supported workflows such as capturing a test reviewing a test etc. Plug ins can choose to participate in the application s workflow by implementing the interface of the activity involved in that workflow.

Each application includes basic infrastructure needed to coordinate and execute application workflows. This infrastructure includes an application controller which is responsible for providing an execution environment for activities. This includes setting up the main view which is the root window of the application and initializing other services needed by the application.

The application controller represents the logic that defines the workflows. Workflows can be either sequential or state driven in nature. State driven workflows respond to user s interaction with the application. An example of a sequential workflow is application startup which follows a predefined sequence. An example of a workflow that is state driven is the test compare workflow that requires input from the user to complete.

Activities often pass visual elements to the application. The application workflow then determines how to appropriately display these visual elements within the screens of the application.

Plug ins are used to customize the application behavior. Plug ins can extend various applications and services as described herein.

Plug ins are typically written to define new or modify existing medical diagnostic measurements via the Entities namespace. The core framework provides the infrastructure to add these measurement types to the platform . Plug ins can also define converters for transforming data into types that can be consumed by the platform .

Plug ins can provide activity implementations to add custom behavior to an application. These activities may provide views to support user interaction. Plug ins may also define custom layout for reports.

The VM workstation is a client application designed to aid the clinical user in workflows such as acquiring analyzing and processing diagnostic data and recording other pertinent observations during a medical diagnostic test. The extensibility of the VM workstation comes from the ability of developers to create plug ins that will be utilized by the application in each of these supported workflows.

For the platform a plug in is a collection of components that can be plugged in to add functionality to applications or services built on the platform. The amount of functionality defined in a plug in is configurable. Components can be gathered into one plug in or separated out amongst several as needed or desired.

Each application has a designated location for plug ins. Once the code needed for a plug in has been developed it is compiled into .NET assemblies. These assemblies are deployed to a subdirectory of the plug ins location along with a manifest file.

When the VM workstation starts it recursively searches the plug ins installation location and creates a list of assemblies to load by analyzing the manifest files. In this example the application uses the Managed Extensibility Framework MEF library in .NET to load the assemblies into a catalog for inclusion in the VM workstation . The application finds the plug in types in the catalog and includes them in the appropriate workflows and UI touch points.

In some examples an approval process e.g. by an administrator and or manufacturer of the platform is required before a plug in can be registered and executed by the VM workstation . In other examples no approval is needed.

The plug ins are used to extend the functionality of the VM workstation . For example one of the fundamental ways in which the VM workstation can be extended is through defining new test and measurement types. In the platform a test represents a diagnostic procedure performed on a patient. Diagnostic tests may entail recording many medical measurements. A test can be thought of as a container that holds these measurements.

To support new diagnostic procedures new test and measurement types can be defined and registered with the platform . Measurement definitions are registered independently of the test definitions and thus can be reused across various Test types.

Plug ins can be created that provide a user with an interface to manually enter and save the results of a test. Alternately the plug in may provide the user interface necessary to acquire the test using a medical device directly connected to the VM workstation .

The VM workstation provides the ability to review and update test instances that have been saved. Plug ins can be created to add new views for the review of test and measurement data. Plug ins can also provide the capability to update new or previously existing test instances.

To help end users examine a patient s medical history the VM workstation can be extended via plug ins to allow users to compare multiple test instances of the same test type in a single view.

Plug ins can be created to display a simplified summary of the test data. This allows the application to show a snapshot of the patient s most recent test data. The VM workstation provides the ability to generate a variety of reports on test data. New report templates can be created via plug ins to custom format the report data. Further the VM workstation provides the ability to define custom settings and manage them on an individual or group basis.

Medical devices e.g. medical device directly communicate with the VM workstation through the Device Connectivity Layer DCL . Plug ins can be written for the DCL to extend the list of supported devices message formats and communication protocols. Plug ins can be written to support native and third party devices such as new medical devices manufactured by the manufacturer of the platform or third parties that make use of the Welch Allyn Communication Protocol WACP as well as devices that make use of other proprietary protocols.

Referring now to a schematic representation of the VM workstation the client services and the medical device is shown. In this example the VM workstation executes a plug in that extends the functionality of the VM workstation .

For example the plug in can extend the functionality of the VM workstation so that the VM workstation can communicate with the medical device if the medical device is a new device manufactured after the manufacture and deployment of the VM workstation .

For example assume that the medical device is a device that measures pulse oximetry other examples include resting electrocardiogram ECG stress ECG and spirometry . Assume that the platform including the VM workstation was not manufactured to communicate with such a device. The plug in is created and registered with the VM workstation . Upon execution the plug in extends the capabilities of the VM workstation so that the VM workstation can communicate with the medical device . For example the VM workstation can instruct the medical device to take a pulse oximetry reading and report the result to the VM workstation .

In addition the plug in or in some examples a separate plug in can be used can be programmed to allow the workstation to communicate the pulse oximetry reading to the client services . In this manner the functionality of the VM workstation is extended so that the VM workstation can communicate with the new medical device command the new device to take and report readings and communicate those readings to the client services.

In yet other embodiments the plug in can also allow the VM workstation to manipulate the readings from the medical device . For example the plug in can allow the VM workstation to trend multiple pulse oximetry readings and present the results in a graphical format to the user of the VM workstation . Other functionality is possible.

Although only a single plug in is illustrated a plurality of plug ins can be used to further extend the functionality of the VM workstation . Further similar plug ins can be used to extend the functionality of other components of the platform such as the ECS and EGS .

There are significant advantages to the use of plug ins as described herein. For example the plug ins can be used to extend the functionality of devices such as the VM workstation to allow the devices to communicate with and manipulate data from new devices as well as new test types. This is accomplished without requiring the devices to be upgraded or reprogrammed. Instead the relevant plug ins can simply be registered and executed by the devices to extend the functionality.

As illustrated in the example of the VM workstation includes at least one central processing unit CPU a system memory and a system bus that couples the system memory to the CPU . The system memory includes a random access memory RAM and a read only memory ROM . A basic input output system containing the basic routines that help to transfer information between elements within the VM workstation such as during startup is stored in the ROM . The VM workstation further includes a mass storage device . The mass storage device is able to store software instructions and data.

The mass storage device is connected to the CPU through a mass storage controller not shown connected to the bus . The mass storage device and its associated computer readable data storage media provide non volatile non transitory storage for the VM workstation . Although the description of computer readable data storage media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable data storage media can be any available non transitory physical device or article of manufacture from which the VM workstation can read data and or instructions.

Computer readable data storage media include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable software instructions data structures program modules or other data. Example types of computer readable data storage media include but are not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROMs digital versatile discs DVDs other optical storage media magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the VM workstation .

According to various embodiments of the invention the VM workstation may operate in a networked environment using logical connections to remote network devices through the network such as a local network the Internet or another type of network. The VM workstation connects to the network through a network interface unit connected to the bus . It should be appreciated that the network interface unit may also be utilized to connect to other types of networks and remote computing systems. The VM workstation also includes an input output controller for receiving and processing input from a number of other devices including a keyboard a mouse a touch user interface display screen or another type of input device. Similarly the input output controller may provide output to a touch user interface display screen a printer or other type of output device.

As mentioned above the mass storage device and the RAM of the VM workstation can store software instructions and data. The software instructions include an operating system suitable for controlling the operation of the VM workstation . The mass storage device and or the RAM also store software instructions that when executed by the CPU cause the VM workstation to provide the functionality of the VM workstation discussed in this document. For example the mass storage device and or the RAM can store software instructions that when executed by the CPU cause the VM workstation to register the plug in and other operations.

Although components of the VM workstation are depicted in other devices such as the medical devices can include similar components.

Although various embodiments are described herein those of ordinary skill in the art will understand that many modifications may be made thereto within the scope of the present disclosure. Accordingly it is not intended that the scope of the disclosure in any way be limited by the examples provided.

