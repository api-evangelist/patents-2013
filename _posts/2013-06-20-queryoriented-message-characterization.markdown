---

title: Query-oriented message characterization
abstract: Processing messages. Messages are processed based on a characteristic derived from information in messages, metadata about messages, or other information external to messages. Values for one or more pieces of information are received. At least one of the values for one or more pieces of information is associated with a first message. Queries are received. The queries specify one or more of the pieces of information. At least a portion of the plurality of values for the one or more pieces of information is processed in conjunction with the one or more queries to create one or more normalized characteristics for the first message. The one or more normalized characteristics for the first message are in a same format irrespective of the format of the pieces of information. The first message, and/or other messages, is processed based on at least one of the one or more normalized characteristics.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08898144&OS=08898144&RS=08898144
owner: Microsoft Corporation
number: 08898144
owner_city: Redmond
owner_country: US
publication_date: 20130620
---
This application is a continuation of and claims priority to and the benefit of U.S. patent application Ser. No. 12 203 790 entitled QUERY ORIENTED MESSAGE CHARACTERIZATION which was filed on Sep. 3 2008 and which is expressly incorporated herein by this reference. U.S. patent application Ser. No. 12 203 790 is to issue as U.S. Pat. No. 8 473 455 on Jun. 25 2013. 

Computers and computing systems have affected nearly every aspect of modern living. Computers are generally involved in work recreation healthcare transportation entertainment household management etc.

Further computing system functionality can be enhanced by a computing systems ability to be interconnected to other computing systems via network connections. Network connections may include but are not limited to connections via wired or wireless Ethernet cellular connections or even computer to computer connections through serial parallel USB or other connections. The connections allow a computing system to access services at other computing systems and to quickly and efficiently receive application data messages from other computing system.

In a message processing application it is not uncommon for a stage of processing to require only a portion of the message as input when making a decision. An example of such a decision is message routing which may be based on a single field or portion of the message as opposed to the entire message payload. Furthermore the decision may only need a characterization of the message rather than the literal content. In the context of the message routing example the routing decision may only require an equitable but repeatable distribution of messages. In other words two messages with the same characteristic have the same routing applied but messages with different characteristics should be apportioned equally among the routing targets. Using a characteristic for message routing may be used in a fashion analogous to using a hash code for lookup in a table.

There are a variety of information sources that may be drawn upon to compute a characteristic. It is typical for a message to be segmented into several component parts such as a message envelope message body and message headers. The message transmission protocol contributes information such as HTTP headers SMTP headers TCP socket properties and so on depending on the protocols in use. Moreover a variety of other protocols that contribute information may be used in connection with the message as well such as SSL session keys and WS ReliableMessaging sequence identifiers. Both the quantities and kinds of information that might be used to form the characteristic are virtually limitless so an attempt to produce a complete enumeration may be a somewhat futile task.

Additionally the time at which the information needed to compute the characteristic becomes available varies. These variations take place not only from information source to information source but from fact to fact within an information source. As an extreme example some information may not be known until a message is sent. Due to the highly concurrent nature of a distributed system it is conceivable that the message might be received by another party processed and a response sent back before the calculation of the characteristic for sending the original message completes. The application needs to be able to handle these difficult race conditions.

Previous solutions have had multiple storage locations for the different classes of information that might be used to construct a message characteristic. Due to the variety of access methods for these storage locations and timings for the availability of information the construction of a characteristic has largely been a manual and ad hoc process.

The subject matter claimed herein is not limited to embodiments that solve any disadvantages or that operate only in environments such as those described above. Rather this background is only provided to illustrate one exemplary technology area where some embodiments described herein may be practiced.

Some embodiments described herein are directed to processing messages using a characteristic. Messages are processed based on a characteristic derived from at least one of information in messages metadata about messages or other information external to messages. One or more values for one or more pieces of information are received. At least one of the values for the one or more pieces of information is associated with a first message. One or more queries are received. The queries specify one or more of the one or more pieces of information. At least a portion of the plurality of values for the one or more pieces of information are processed in conjunction with the one or more queries to create one or more normalized characteristics for the first message. The one or more normalized characteristics for the first message are in a same format irrespective of the format of the pieces of information. The first message and or other messages are processed based on at least one of the one or more normalized characteristics.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Additional features and advantages will be set forth in the description which follows and in part will be obvious from the description or may be learned by the practice of the teachings herein. Features and advantages of the invention may be realized and obtained by means of the instruments and combinations particularly pointed out in the appended claims. Features of the present invention will become more fully apparent from the following description and appended claims or may be learned by the practice of the invention as set forth hereinafter.

One embodiment described herein formulates the construction of a message characteristic using a query over message content message metadata or other data. Access to the storage locations for information may be normalized and integrated into the query. Additionally in some embodiments the calculation of a characteristic coordinates with the messaging infrastructure so that the system can reason effectively about when information is available and when computation of the characteristic will be complete.

Referring now to an example is illustrated. illustrates a query engine . The query engine includes functionality for processing queries where the queries are queries against various sources of data such as messages which include message data or non message data obtainable from other sources. In particular some embodiments may be practiced such that a message characteristic may be specified using a query over message content metadata or other information. The query engine may include support for various languages . In one specific example a query may be formulated using XPath expressions as a query language.

Often query languages such as XPath have native functionality for accessing information in a limited variety of formats and from a limited variety of sources while not natively including functionality for access to other information. For example XPath includes native functionality for accessing information in an XML structured data structure such as a message formatted using XML but may not include functionality for determining other information from other services. Nonetheless the query language may be extended by including extensions to include functionality for accessing other services. In the XPath query language the extensions are referred to as selectors. Additionally some embodiments may include functionality for normalization of access to different storage locations using extensions to the query language. In some embodiments normalization of access to different storage locations may use a mutually agreed upon data structure. Optimization of computing multiple characteristics for the same message may be performed as will be described in more detail below by merging queries and executing them simultaneously or in parallel.

As illustrated in information sources may include a message which includes message data. The message may include information such as envelope data data in the message body data in the headers of the message etc. As noted above the query engine may include functionality for extracting the message data. For example in one embodiment the query engine may include functionality supporting the XPath query language for extracting data from XML formatted messages. Other query languages may also or alternatively be used. Notably the query engine may also include functionality for invoking various application programming interfaces APIs . APIs include programmed functionality for interacting with information sources to obtain data from the sources. Notably the languages may be considered in some respects to be APIs.

As noted previously illustrates that the query engine performs queries against the data sources. Based on the queries the query engine generates intermediate results which may be instance values of data. The intermediate results may include tables of data or other forms of data. For example the intermediate results may include information such as a specific time of day which may or may not be associated with the message a specific protocol used to transmit a message or other information. The intermediate results are typically not unit less results but rather represent some specific unit. For example the intermediate results may represent a time of day unit a protocol unit a transport unit or some other specific unit. Additionally the intermediate results may be of one or more different data types. For example the intermediate results may be integers floating points strings or other data types. Additionally a set of intermediate results may have a mix of different data types. For example a time may be expressed as one or more integers while a protocol may be expressed as one or more strings. Both the time integers and the protocol strings may be included in the same set of intermediate results .

The intermediate results can be used to create a characteristic by a characteristic computation module . The characteristic may be for example a number calculated using a hash algorithm or other numerical method to calculate a number based on the intermediate results . For example in one embodiment the characteristic may be a unit less 128 bit hash number that represents a globally unique identifier. The characteristic computation module may be embodied using computer hardware and software configured to calculate a hash or other representation such as for example a numerical representation.

As will be discussed in more detail below some embodiments may be practiced where coordination occurs between the computation of a message characteristic and the messaging infrastructure. In particular a messaging infrastructure may catalog the information that it can potentially supply for a query . For example the messaging infrastructure may be able to provide information regarding transports information regarding protocols etc. The messaging infrastructure can promise availability of information at a particular time. In some embodiments the promise is related to some functionality or performance of some action at the messaging infrastructure. Analysis of a query may be performed before characteristic computation at the characteristic computation module to determine what information will be needed. Optimizations of characteristic computation may be performed so as to perform calculations for a characteristic computation at more convenient times subject to constraints based on information availability

As will be discussed in more detail below some embodiments may be practiced where transformation of information is performed before and or after a query.

With reference once again to a more detailed example with specifics is illustrated. Consider a message for which it is desirable to compute a characteristic. The existence of this message can be presupposed without regard to how the message is or was generated. Thus this could be a message that is being sent being received or possibly even created out of thin air without any connection to a messaging operation. The message may be represented in a variety of formats. As an example consider a message represented using the Simple Object Access Protocol SOAP 1.2 format. Such a message will have storage locations for a message envelope a message body and any number of message headers. The message may also have associated with it metadata that is not contained within the message envelope such as local message properties delivery properties or information in the ambient environment. This metadata may be represented by the non message data illustrated at . Thus sources of data may be referred to as either sources of information from within the message or sources of information from outside the message.

To compute a characteristic for the message the available sources of information can be drawn upon. The computation of the characteristic will frequently require only a subset of the available information. This subset is described by a query specification including one or more queries . Each query includes an identifier and a query procedure. The query procedure defines how a value is extracted from the available information.

As an example of a query specification in one embodiment a query procedure is specified using an XPath expression. For example the message may be a purchase order in the SOAP format a fragment of which is as follows 

The XPath expression s Envelope s Body po PurchaseOrder purchaseOrderNumber specifies a portion of the message. In the present example the XPath expression specifies the value of the attribute named purchaseOrderNumber on the element named PurchaseOrder inside the element named Body inside the element named Envelope. In the present example the XPath expression is named PONumber to create an association between the identifier PONumber and the fact resulting from evaluating the XPath expression i.e. the number which represents a purchase order unit .

Upon supplying the query engine with a query specification including queries and necessary information sources such as the message and or access to sources that generate the non message date the query engine computes a table of named query results illustrated in the intermediate results .

In the illustrated example the calculation of the characteristic is defined in terms of the named query results to abstract the calculation process from how information was accessed or organized. New information sources can be added to the system either by unifying them with existing information sources or by extending the query engine with a new access method. For example the standard XPath language only provides access to message data. The XPath language could be extended with a new function as illustrated by the extensions to access non message data.

In one embodiment the HTTP Referer header is not part of the message data but could be accessed in a similar fashion using the XPath expression z GetProtocolData Referer to specify a portion of the non message data . In this case the value of the Referer property in the protocol data is not contained within the message. Although the SMTP From header comes from a different information source it too could be accessed using the GetProtocolData function. Thus the grouping of information to the same or different access methods can be done at the convenience of the developer.

With reference now to additional details of the query engine will now be discussed and in particular with respect to optimizing query processing. If multiple queries are performed against the same sources of information such as the message data and non message data it is often possible to perform the collection of queries more efficiently when taken together than one at a time. To do this in one embodiment the query engine includes a query optimization module which first transforms the original query specification including into an optimized query specification before executing the optimized query specification using the language API s as illustrated in . The optimized query specification when processed produces the same table of query results .

In one embodiment the query optimizer of the query engine joins together queries that have common subexpressions so that a single common subexpression is only evaluated once. Thus the query engine operating on a query specification containing the two queries s Envelope s Body PurchaseOrder1 and s Envelope s Body PurchaseOrder2 may only have to scan through the Envelope and Body elements of the message once to satisfy both queries.

Referring now to additional features of the query engine with respect to transforming data prior to and post processing is illustrated. In the illustrated embodiment the query engine composes with other components and as part of a processing pipeline . These components and act on the inputs and outputs respectively to the engine. One or more transformations may be applied at component to the information sources before being read by the engine and one or more transformation may be applied at component to the query results before the characteristic see is calculated. Each fact in an information source and each named query result may have an individually crafted transformation applied to them or transformations may be applied to groups of facts or query results.

Applications often have a preferred time for computing a characteristic . It is typical for the application to want to compute the characteristic as late as possible or as early as possible depending on the type of decision being made. However an application may be unable to compute the characteristic until all of the necessary information is available. An example of this conflict occurs when sending a message. It may desirable to compute the characteristic as early as possible so that the characteristic is known before any responses to sending the message are observed. However the information necessary to compute the characteristic may not be available until the message is partially or fully sent. An example of information that is not available until very late is a message identifier that is assigned by the delivery system when the message is written onto the wire.

Referring now to an example of one embodiment that addresses these concerns is illustrated. To reason about a conflict what information will be used by the characteristic computation and when that information will be available should be known. Prior to the message being sent by an application a messaging infrastructure is introspected to identify the variety of information that this particular configuration will generate. The messaging infrastructure may also make one or more statements about when each fact will be available. Statements may be promises that the facts will be available at a particular time or stage of processing. Also prior to the message being sent the query specification see may be introspected to determine the variety of information that this particular query specification will request.

The timeline axis T includes a time Trepresenting the message being transmitted out of the messaging infrastructure such as by transmitting the message onto the communication wire. The communication wire may be any one of a different number of media including network cables or wireless transport media. The completion of the computation may take place earlier or later than the message being transmitted depending on the promises made by the components .

In one embodiment the completion of the callback is used to solve races between sending and receiving messages. The application refrains from processing any received messages that might depend on the characteristic of a previously sent message until all of those characteristics have been computed.

The following discussion now refers to a number of methods and method acts that may be performed. It should be noted that although the method acts may be discussed in a certain order or illustrated in a flow chart as occurring in a particular order no particular ordering is necessarily required unless specifically stated or required because an act is dependent on another act being completed prior to the act being performed. illustrates a method of processing messages based on a characteristic derived from at least one of information in messages metadata about messages or other information external to messages. The method includes receiving one or more values for one or more pieces of information act . At least one of the values for one or more pieces of information may be associated with a first message. The method further includes receiving one or more queries act . The queries may specify one or more of the one or more pieces of information. For example illustrates a query specification including queries that may be used to obtain values from the information in the message and the non message data .

The method includes processing the one or more values for the one or more pieces of information in conjunction with the one or more queries to create one or more normalized characteristics for the first message act . The one or more normalized characteristics for the first message are in a same format irrespective of the format of the pieces of information. For example the one or more normalized characteristics may always be in the format of a 128 bit unit less number that represents a globally unique identifier. Other representations may be used alternatively.

The method further includes processing messages based on at least one of the one or more normalized characteristics act . Notably the messages processed may be messages for which the characteristics were calculated. In alternative embodiments the messages may be other messages. For example the method may include storing the one or more normalized characteristics for the first message and using the one or more normalized characteristics for processing one or more different messages. For example the characteristic s may be calculated for a message that is sent while the characteristic s are used to process messages sent in reply to the first message.

Embodiments of the method may further include creating an optimized query from one or more of the received queries. In some of these embodiments processing the one or more values for the one or more pieces of information in conjunction with the one or more queries to create one or more normalized characteristics for the first message act includes processing the optimized query. Creating an optimized query may include determining a portion of a query that is common to two or more queries and when processing a query merging common elements of the query to reduce overall processing. In an alternative embodiment creating an optimized query may include performing parallel execution on two or more queries.

As noted and illustrated at of the method may be performed where processing the one or more values for the one or more pieces of information in conjunction with the one or more queries to create one or more normalized characteristics for the first message act includes computing one or more intermediate results and calculating the one or more normalized characteristics from the intermediate results. The intermediate results may have units associated with them even when the one or more normalized characteristics do not. For the example the intermediate results may include results in time units network address units etc. In some embodiments various transformations to data may occur as illustrated at and of . For example the method may be practiced to include transforming one or more of the values for the one or more pieces of information prior to computing the one or more intermediate results. Additionally or alternatively the method may further include transforming one or more of the values for the one or more pieces of information after computing the one or more intermediate results and prior to calculating the one or more normalized characteristics from the intermediate results.

As noted some embodiments may be directed to environments where information is not immediately available to calculate a characteristic. Thus some embodiments include functionality for handling these situations. In particular the method may be practiced to include analyzing the one or more queries to determine what information is needed. A promise is received for the information at a particular time for the information needed. In this example the act of processing the one or more values for the one or more pieces of information in conjunction with the one or more queries to create one or more normalized characteristics for the first message act is performed after the information is received. The particular time specified in the promise may be a present time after a message is sent from a messaging infrastructure or any other appropriate time.

Embodiments of the present invention may comprise or utilize a special purpose or general purpose computer including computer hardware as discussed in greater detail below. Embodiments within the scope of the present invention also include physical and other computer readable media for carrying or storing computer executable instructions and or data structures. Such computer readable media can be any available media that can be accessed by a general purpose or special purpose computer system. Computer readable media that store computer executable instructions are physical storage media. Computer readable media that carry computer executable instructions are transmission media. Thus by way of example and not limitation embodiments can comprise at least two distinctly different kinds of computer readable media physical storage media and transmission media.

Physical storage media includes RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium which can be used to store desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer.

A network is defined as one or more data links that enable the transport of electronic data between computer systems and or modules and or other electronic devices. When information is transferred or provided over a network or another communications connection either hardwired wireless or a combination of hardwired or wireless to a computer the computer properly views the connection as a transmission medium. Transmissions media can include a network and or data links which can be used to carry or desired program code means in the form of computer executable instructions or data structures and which can be accessed by a general purpose or special purpose computer. Combinations of the above should also be included within the scope of computer readable media.

Further upon reaching various computer system components program code means in the form of computer executable instructions or data structures can be transferred automatically from transmission media to physical storage media or vice versa . For example computer executable instructions or data structures received over a network or data link can be buffered in RAM within a network interface module e.g. a NIC and then eventually transferred to computer system RAM and or to less volatile physical storage media at a computer system. Thus it should be understood that physical storage media can be included in computer system components that also or even primarily utilize transmission media.

Computer executable instructions comprise for example instructions and data which cause a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language or even source code. Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the described features or acts described above. Rather the described features and acts are disclosed as example forms of implementing the claims.

Those skilled in the art will appreciate that the invention may be practiced in network computing environments with many types of computer system configurations including personal computers desktop computers laptop computers message processors hand held devices multi processor systems microprocessor based or programmable consumer electronics network PCs minicomputers mainframe computers mobile telephones PDAs pagers routers switches and the like. The invention may also be practiced in distributed system environments where local and remote computer systems which are linked either by hardwired data links wireless data links or by a combination of hardwired and wireless data links through a network both perform tasks. In a distributed system environment program modules may be located in both local and remote memory storage devices.

The present invention may be embodied in other specific forms without departing from its spirit or essential characteristics. The described embodiments are to be considered in all respects only as illustrative and not restrictive. The scope of the invention is therefore indicated by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

