---

title: Non-invasive upgrades of server components in cloud deployments
abstract: A method, system, and computer program product for performing software upgrades. The method serves to preserve an inter-process connection between two endpoints during patching operations. The method commences by suspending at least some communication activity over the inter-process connection while preserving one or more functioning states of the inter-process connection. A patching facility produces a patched endpoint (e.g., a software component) by performing a patch operation to one of the endpoints of the inter-process connection while the at least some communication activity remains suspended. After patching, a process reconfigures at least some of the one or more preserved functioning states of the inter-process connection to connect to the patched endpoint. When the preserved functioning states of the inter-process connection have been restored, then communication activity resumes over the connection, using the patched endpoint. The inter-process communication can comprise one or more connections between a server process and a client process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483326&OS=09483326&RS=09483326
owner: ORACLE INTERNATIONAL CORPORATION
number: 09483326
owner_city: Redwood Shores
owner_country: US
publication_date: 20130711
---
The present application is related to co pending U.S. patent application Ser. No. 13 925 484 entitled FORMING AN UPGRADE RECOMMENDATION IN A CLOUD COMPUTING ENVIRONMENT filed on even date herewith which is hereby incorporated by reference in its entirety.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The disclosure relates to the field of enterprise software upgrades and more particularly to techniques for non invasive upgrades of server components in cloud deployments.

Cloud based provision of infrastructure as a service IaaS platforms as a service PaaS and software as a service SaaS have gained in popularity. A cloud service provider provisions any number of machines e.g. having a single processor or multiple processors or multi core processors etc. which machines can run an operating system e.g. Linux directly on the hardware or the machines can run virtual operating systems e.g. using virtual machines possibly including a hypervisor . This flexibility is a boon to cloud service providers and to their customers e.g. tenants alike yet the cloud model introduces new problems to be solved. For example while the cloud provisioning model makes it easy to deploy software applications to many nodes e.g. tens hundreds thousands or more the cloud provisioning model does not address the tasks involved in upgrading those applications. Upgrading software in an instance is generally accompanied by a blackout or brownout while the software is being upgraded. While the cloud provisioning model makes it convenient to deploy many nodes in a cascade the blackout or brownout experienced while the software is being upgraded can become quite severe especially in mission critical deployments. Still worse in a deployed client server situation where many e.g. tens hundreds thousands or more clients are connected to a single server a blackout or brownout can affect many tens hundreds thousands or more users.

What s needed is a technique or techniques to minimize or eliminate blackouts or brownouts while the cloud deployed server software is being upgraded. There is a need for an improved approach since none of the legacy technologies perform the herein disclosed techniques for non invasive upgrades of server components in cloud deployments.

The present disclosure provides an improved method system and computer program product suited to address the aforementioned issues with legacy approaches. More specifically the present disclosure provides a detailed description of techniques used in methods systems and computer program products for non invasive upgrades of server components in cloud deployments.

One embodiment comprises a computer implemented method to preserve an inter process connection between two endpoints during patching operations by suspending at least some communication activity over the inter process connection while preserving one or more functioning states of the inter process connection. The method includes producing a patched endpoint e.g. a software component by performing a patch operation to one of the endpoints of the inter process connection while the at least some communication activity remains suspended and then reconfiguring at least some of the one or more preserved functioning states of the inter process connection to connect to the patched endpoint. When the preserved functioning states of the inter process connection have been restored then the method can resume communication activity over the connection using the patched endpoint. The inter process connection can comprise a connection between a server process and a client process and the preserved functioning states of the inter process connection can comprise a keep alive operation.

Some embodiments initiate the suspension of communication activity over the inter process connection is performed using a surrogate process possibly responsive to a signal or an indication initiated by a cloud tenant. The suspension and restoration of communication activity over the inter process connection is performed using a process table which can be used by a surrogate process or a surrogate process manager.

Further details of aspects objectives and advantages of the disclosure are described below and in the detailed description drawings and claims. Both the foregoing general description of the background and the following detailed description are exemplary and explanatory and are not intended to be limiting as to the scope of the claims.

Embodiments of the present disclosure address solutions for implementing non invasive upgrades of server components in cloud deployments. More particularly disclosed herein and in the accompanying figures are exemplary environments methods and systems for implementing non invasive upgrades of server components in cloud deployments.

In the context of cloud provisioning e.g. IaaS PaaA or SaaS and more particularly in a deployment of a client server model where many e.g. tens hundreds thousands or more clients are connected to a single server server reliability uptime is highly valued by users. In many enterprise application situations a server may service many client connections yet establishing client connections are frequently expensive to create and are often fragile in that they can be easily broken . For example a connection that becomes unused nevertheless consumes resources and such resources should be reclaimed if the connection moves into disuse. Or if a connection is initially established by a client process and that client process dies the resources allocated to that connection should be reclaimed. Operating systems and virtual machines can autonomously tear down unused connections however as just indicated establishing client connections are frequently expensive to create and or a broken connection often precipitates unwanted effects e.g. lost work lost time etc. .

Legacy techniques perform patching by i stopping the running software ii patching the software image and iii re running the software with the patched software image. Unfortunately this legacy technique necessitates termination tear down and re establishing of client connections. In some cases a terminated connection can result in significant user perturbations e.g. an unwanted logout situation or a process freeze lost work lost time etc. .

Techniques are needed to preserve a connection even while a patching operation is underway. In an exemplary embodiment connections are preserved even while a patching operation is underway by 

Some of the terms used in this description are defined below for easy reference. The presented terms and their respective definitions are not rigidly restricted to these definitions a term may be further defined by the term s use within this disclosure.

Reference is now made in detail to certain embodiments. The disclosed embodiments are not intended to be limiting of the claims.

As shown the cloud infrastructure comprises a plurality of computing machines e.g. host H host H host H etc. configured for communication over a communication path to a database engine and a cloud server . The cloud infrastructure can be configured by an administrator and or by a user . Further a user can access and configure the cloud server via a graphical user interface e.g. GUI . Such a user might also configure e.g. initially configure and or maintain site storage which contains an executable instance e.g. executable instance E executable instance E etc. . Such an instance image comprises an instance image copy of a client process e.g. CP and an instance image copy of a server process e.g. SP . Site storage might also contain an initial copy of site information data .

Any host e.g. host H host H host H etc. can host software execute processes and maintain a process table e.g. process table process table process table etc. .

Further any host can communicate with any other host any host can communicate with the database engine and any host can communicate with the cloud server which can in turn maintain its own process table e.g. process table as shown .

More particularly a host can run any number of occurrences of a client process agent e.g. CP CP CP CP etc. and a host can also run any number of occurrences of server processes e.g. SP SP SP etc. and or other processes e.g. surrogate Q surrogate Q surrogate Q XP etc. . Any or all of the foregoing processes can be run on bare metal or can be run under an operating system or hypervisor. In exemplary embodiments the surrogate processes running on each host communicates with the cloud server . Various particular functions of the surrogate running on each host are discussed below.

The database engine serves as a repository for data which data can be stored and accessed as a relational database relation or as a file or as a memory resident data structure. As shown database engine comprises a paused process list a process to port list an image to host list and a host to tenant list .

In the particular embodiment of an instance of vendor built surrogate e.g. surrogate Q is accessible over the cloud infrastructure e.g. over a WAN and each host runs its own copy of the surrogate e.g. see surrogate Q surrogate Q and surrogate Q . The surrogate program can perform the following functions while practicing non invasive upgrades of server components 

The surrogate program can communicate with a cloud server using any protocol e.g. HTTP SOAP web services REST socket interactions etc. . In exemplary deployments such protocols are supported by the cloud vendor however it is possible that certain communications between the cloud server and surrogate programs can be performed using other protocols e.g. including custom protocols .

The cloud server runs a surrogate process manager . The cloud server and any process it runs can access any host and can access the storage device either natively e.g. via a file protocol or via a database engine connection possibly using a query language such as SQL. The surrogate process manager can access any aspect of any host. In the event that the bare metal or hypervisor software does not natively provide access to any particular aspect of the corresponding host the surrogate or surrogate process manager can be configured to provide the needed access using any protocol.

Following the embodiments within cloud deployment non invasive upgrades of server components can be practiced. For example 

In one exemplary embodiment a server process implements an enterprise software application e.g. accounts payable and a client process handles user interface aspects. A server process may support any number of clients via one or more connections and also a server process may connect to a database engine .

The above organization is purely exemplary. Other organizations are reasonable and envisioned one of which is presented in .

As shown the highest level of the hierarchy is the tenant see tenant level . A tenant may specify any number of images see image level which may be embodied as an executable instance e.g. executable instance E executable instance E etc. . An image can be associated with any number of hosts see host level and an image can be loaded onto any number of hosts e.g. host H host H etc. for execution. Continuing a given host can be executing any number of server processes see server processes to be patched . The server processes to be patched are exemplified by the aforementioned SP SP SP etc. and a particular server process to be patched can be in communication e.g. over a connection with one or more client processes see client processes to be paused . A particular connection can use one or more ports see ports used by a client to be paused . As shown ports are designated as O . . . O.

The foregoing hierarchical organization is merely illustrative and other organizations are possible. More particularly the operations and flows of the techniques described herein do not rely on any particular organization. Further the aforementioned lists e.g. paused process list process to port list image to host list and host to tenant list can be conveniently stored as a list or as a relation or in any data structure including persistent storage in a layout within a file system .

As earlier indicated in the discussion of the highest level of the shown hierarchy is a tenant. For the specific pause preserve update resume cycle a tenant may have indicated the tenant s desire for an upgrade of certain applications e.g. upgrade of the accounts payable application or other applications embodied as a server process thus that tenant is selected see operation and the images for that tenant are identified e.g. using a lookup from an image to host list as well as the hosts for that tenant are identified e.g. using a lookup from a host to tenant list . Given the identification of the tenant s hosts Hand the tenant s images E see operation the server processes from within Ethat are running on Hare identified and for each server process SPon H a process loop is entered see process loop .

The process loop commences by retrieving the client processes to be paused see operation . Such a retrieval can be facilitated by the process table on host H e.g. process table process table process table etc. . Or the client processes CPto be paused for a particular host can be retrieved using a protocol implemented by any of the server processes running on that particular host. Next an iterator e.g. see the loop test increment is formed and a port loop is entered. Having the client processes CPto be paused a list of ports e.g. ports corresponding to connections used by processes CPfor connecting to server process SP can be formed thus the port loop operation serves to identify a list of ports O to be paused. A process to port list can be used in port loop operation or any other technique for retrieval or identification of a list of ports to be paused can be employed. At this point in the pause preserve update resume cycle it is known which processes will be affected. That is it is known which client processes will be paused and which surrogate processes will be used as a proxy for the paused client processes and which server processes will be stopped then restarted with the upgraded patched images. It is further known or implied which new server processes are to be initiated e.g. using the upgraded patched images and which paused client processes are to be unpaused and resumed.

As earlier indicated the connections between a client process and a corresponding server process are to be held in a live state even while the server process to be patched is down or in the middle of the process of being restarted or otherwise not connected to its clients. As such operations within port loop serve to instruct a surrogate Qto connect to the ports identified in port loop operation . Once the surrogate Qhas successfully connected to the ports identified in port loop operation see operation the client process or processes for which the surrogate is acting as a connection proxy can be paused see operation . There is no need to kill the client process es . Moreover the remaining steps of the pause preserve update resume cycle require relatively few cycles and thus the real time consumed for executing the pause preserve update resume cycle might be undetectable by any user of the paused client processes and or the upgraded server processes.

The remaining steps of the pause preserve update resume cycle include a wait state see wait operation an operation to update the server process with the updated patched image see operation an operation to instruct the server surrogate to reconnect to the ports of port list O see operation and then to resume e.g. unpause the client process CP see operation .

The port loop is repeated for each process SPon each host H. Thus all of the server processes in the cloud deployment that are affected by the upgraded server image for that tenant are upgraded with minimal possibly undetectable brown out during the upgrade.

The context of cloud deployment shows a cloud server which in turn includes a surrogate process manager . The server image patching operations can be implemented as a feature of surrogate process manager . Specifically surrogate process manager can operate cooperatively with any one or more surrogate processes e.g. surrogate Q surrogate Q surrogate Q etc. . The shown server image patching operations commences upon receipt of a request to patch a particular server image see operation . Then an iterator is established such that all instances of a corresponding server process SPacross all instances of hosts used by the tenant are subjected to the upgrade. Thus for each occurrence on any host of server process SP data pairs are formed to comprise a host and a set of corresponding ports used by that server process see the notation in operation . Having the set of corresponding ports used by that server process e.g. in notation then operation serves to send instructions to the surrogate of the given host of the pair the instructions comprising one or more instructions to block any new requests for the port in the pair. For a short duration e.g. until the conclusion of server image patching operations new connections are refused. In some cases the connections are refused in a manner that would cause the requestor to retry. In other cases the connection is acknowledged to the requestor even though the connection does not become operable until a later moment. The behavior of the surrogate is further discussed in below.

The surrogate on a host can at least know the status of any of the ports in the pair and can reply to a query see operation . So long as there remain open connections e.g. connections that have not yet been taken over by the surrogate then the surrogate process manager loops through a wait state and query to know the status of any of the ports query see operation . When there are no further open connections see decision then processing can proceed to apply the patch. Specifically the patch for SPis applied. The application of a patch see operation can be implemented in a variety of ways possibly including killing the unpatched version then restarting SPfrom the patched image. Other possibilities include a particular implementation of SPwhereby a signal is sent to SPwhereafter SPgracefully terminates without forcefully killing the connections thus leaving the connections of the surrogate intact.

After the patch for SPis applied a new process SP is initiated see operation . When a new process SP has reached a stable state then the surrogate process manager sends unblocking instructions to the surrogate see operation .

In some embodiments a surrogate process blocks all connections from Host Hi to SPj and the surrogate process may implement a data structure for queuing incoming connection requests and releasing them once the surrogate manager has sent an unblock instruction for SP .

As earlier indicated in the context of cloud deployment the server image patching operations can be implemented as a feature or features of surrogate process manager which can operate cooperatively with any one or more surrogate processes e.g. surrogate Q surrogate Q surrogate Q etc. . In addition to the cooperation hereinabove described additional possibilities for cooperation are discussed hereunder as pertaining to and .

As heretofore discussed a surrogate process implements the surrogate blocking operation flow A. Specifically the surrogate process receives ports via the pairs see operation and for each port see iterator registers interrupts with the network layer see operation . Incoming requests for connections are thus routed to the surrogate which in turn can block any incoming connect to host requests see operation . In some embodiments of surrogate blocking operation flow A for any requests that were blocked see operation the details of the request and response are stored for later access. For example surrogate blocking operation flow A might make a non volatile e.g. file record of the id of the request the host and the blocked port see operation .

In another timeframe the blocking operations implemented in the surrogate blocking operation flow A can be unblocked. Unblocking operations are now briefly discussed.

The surrogate unblocking operation flow B can commence at any time. The unblocking operations commence upon or after receipt of ports via pairs corresponding to desired unblocking operations see operation . An iterator is formed see decision and for each pair an unblock loop is entered. Operations within the loop see operation check the status of the formerly blocked process SP and if the status of the formerly blocked process SPis still blocked see decision then an operation to unblock the blocked process is executed see operation . The loop repeats until all processes corresponding to the pairs have been unblocked. When all processes corresponding to all of the pairs see decision have been unblocked the flow terminates.

As shown system comprises at least one processor and at least one memory the memory serving to store program instructions corresponding to the operations of the system. As shown an operation can be implemented in whole or in part using program instructions accessible by a module. The modules are connected to a communication path and any operation can communicate with other operations over communication path . The modules of the system can individually or in combination perform method operations within system . Any operations performed within system may be performed in any order unless as may be specified in the claims. The embodiment of implements a portion of a computer system shown as system comprising a computer processor to execute a set of program code instructions see module and modules for accessing memory to hold program code instructions to perform configuring a plurality of hosts in a computing cloud to install an executable instance comprising a binary image of at least one client program and at least one server program to be upgraded see module modifying the binary image of at least one server program to be upgraded to create a modified server program binary image see module identifying at least one initial server process running on a host that is to be upgraded the at least one server process serving at least one client program using an initial functioning connection port see module preserving the functioning of the initial functioning connection port by migrating functions of the initial connection port to a surrogate server process having a substitute connection port see module pausing the execution of the client program while the surrogate server process maintains the functioning of the substitute connection port see module invoking an upgraded server process on the host after installing the modified server program binary image onto the host see module migrating the functioning of the substitute connection port to the upgraded server process see module and resuming the execution of the client program see module .

As shown system comprises at least one processor and at least one memory the memory serving to store program instructions corresponding to the operations of the system. As shown an operation can be implemented in whole or in part using program instructions accessible by a module. The modules are connected to a communication path and any operation can communicate with other operations over communication path . The modules of the system can individually or in combination perform method operations within system . Any operations performed within system may be performed in any order unless as may be specified in the claims. The embodiment of implements a portion of a computer system shown as system comprising a computer processor to execute a set of program code instructions see module and modules for accessing memory to hold program code instructions to perform suspending at least some communication activity over the inter process connection while preserving one or more functioning states of the inter process connection see module producing a patched endpoint by performing a patch operation to one of the endpoints of the inter process connection while the at least some communication activity remains suspended see module and reconfiguring at least some of the one or more preserved functioning states of the inter process connection to connect to the patched endpoint see module .

According to one embodiment of the disclosure computer system performs specific operations by processor executing one or more sequences of one or more instructions contained in system memory . Such instructions may be read into system memory from another computer readable usable medium such as a static storage device or a disk drive . In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the disclosure. Thus embodiments of the disclosure are not limited to any specific combination of hardware circuitry and or software. In one embodiment the term logic shall mean any combination of software or hardware that is used to implement all or part of the disclosure.

The term computer readable medium or computer usable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media and volatile media. Non volatile media includes for example optical or magnetic disks such as disk drive . Volatile media includes dynamic memory such as system memory .

Common forms of computer readable media includes for example floppy disk flexible disk hard disk magnetic tape or any other magnetic medium CD ROM or any other optical medium punch cards paper tape or any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM or any other memory chip or cartridge or any other non transitory medium from which a computer can read data.

In an embodiment of the disclosure execution of the sequences of instructions to practice the disclosure is performed by a single instance of the computer system . According to certain embodiments of the disclosure two or more computer systems coupled by a communications link e.g. LAN PTSN or wireless network may perform the sequence of instructions required to practice the disclosure in coordination with one another.

Computer system may transmit and receive messages data and instructions including programs e.g. application code through communications link and communication interface . Received program code may be executed by processor as it is received and or stored in disk drive or other non volatile storage for later execution. Computer system may communicate through a data interface to a database on an external data repository . A module as used herein can be implemented using any mix of any portions of the system memory and any extent of hard wired circuitry including hard wired circuitry embodied as a processor .

In the foregoing specification the disclosure has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the disclosure. For example the above described process flows are described with reference to a particular ordering of process actions. However the ordering of many of the described process actions may be changed without affecting the scope or operation of the disclosure. The specification and drawings are accordingly to be regarded in an illustrative sense rather than restrictive sense.

