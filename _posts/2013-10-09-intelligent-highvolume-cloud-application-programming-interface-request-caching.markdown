---

title: Intelligent high-volume cloud application programming interface request caching
abstract: A system for processing requests handled by an application programming interface is disclosed. The system may receive a plurality of requests which call functions that are hosted by the application programming interface. Once the plurality of requests are received, the system may group a subset of the requests into a pool of requests if the subset of requests call similar functions hosted by the application programming interface. Additionally, the system may combine a set of requests from the pool of requests into a set of calls if the set of requests in the pool of requests are received by the system during a specified time interval. Furthermore, the system may include pushing the set of calls to a database to obtain a result set for the set of requests in the set of calls. The system may then receive the result set in response to the set of calls.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09401953&OS=09401953&RS=09401953
owner: AT&T INTELLECTUAL PROPERTY I, L.P.
number: 09401953
owner_city: Atlanta
owner_country: US
publication_date: 20131009
---
The present application relates to techniques for processing and handling requests and more particularly to a system for providing intelligent high volume cloud application programming interface request caching.

In today s society end users regularly utilize network and other service providers to gain access to the Internet access software services request and receive various types of content access software applications place internet based calls and perform a variety of other tasks and functions. Some software applications have a large number of end users because the applications and services offer highly popular content and services. In order to handle the large volume of requests associated these end users such software applications often utilize content distribution networks and systems to serve the content and provide the services to the end users in an effective manner. This is particularly true when high performance reliability scalability and cost savings associated with distributing the content and providing the services are important to the companies that provide the software applications.

With the ever increasing popularity of cloud computing various functions and services that would traditionally be directly handled by the software applications that the end users are accessing are being outsourced to cloud application programming interfaces and other systems. Such application programming interfaces and other systems have become very popular and effective means for hosting various functions of software applications particularly when there are a large number of users making requests. Nevertheless in current solutions when large numbers of users send requests to access the same function that is hosted by an application programming interface the requests are typically placed in a queue with other requests associated with other functions that are also hosted by the application programming interface. After each request is removed from the queue via a given process whether it be first in first out or otherwise each request may be processed by various processing nodes and numerous calls may be made to the database containing the information that is responsive to each request.

In order to tackle such a large volume of requests and calls current solutions often require the use of multiple instances of the same database to handle the congestion created by such requests and calls in an acceptable amount of time. While employing load balancing across multiple well indexed databases is a way to mitigate traffic congestion to application programming interface calls this solution is hardware based. As a result in order to further improve the handling of large volumes of requests using traditional solutions the installation of additional hardware is typically required.

A system and accompanying methods for processing requests handled by an application programming interface are disclosed. In particular the system and methods may allow for micro optimized database use by grouping application programming interface requests based on which functions that each request calls. In order to accomplish this the application programming interface may receive a plurality of requests from various end users that are using an application that uses the functions that are hosted by the application programming interface. For example the application programming interface may be utilized by the application to store retrieve and manipulate data associated with certain features of the application. When the application programming interface receives the plurality of requests the application programming interface may group a subset of the requests into a pool of requests if the requests in the subset call the same or similar functions hosted by the application programming interface. Additionally the application programming interface may assign priorities to the requests based on which functions the requests call.

Once the subset of requests are grouped into a pool of requests the application programming interface may perform a query optimization by combing a set of requests within the pool of requests that have been received within a specified time interval into a single database call. For example the application programming interface may combine requests that all call a high score function used by a gaming application into a single database call if the requests were all received within the past one second of time. Once a set of requests within the pool of requests have been combined into a single call the application programming interface may transmit the single call to a database or other system to obtain a result set for the set of requests in the single call. Identifiers that uniquely identify one request from another may be appended into rows in the result set so as to distinguish a result associated with one request from a result associated with a different request. Now without having to further access the database the result set can be split based on the identifiers into individualized responses for each of the requests that were originally served to the application programming interface. The individualized responses may be transmitted to the corresponding devices that made the requests that correspond to the responses.

Such a solution can create tremendous cost savings particularly when there is a massive population of end users that are sending requests to access a particular application programming interface call in a cloud computing environment. By enabling micro optimized database use through the grouping of application programming interface requests based on which functions that the requests call and based on the time interval in which the requests were received the system can effectively reduce the demand for hardware expansion and provide an efficient means for handling requests.

In one embodiment a system for processing requests handled by an application programming interface is disclosed. The system may include a memory that stores instructions and a processor of a network provider that executes the instructions to perform various operations of the system. The system may receive a plurality of requests that call a plurality of functions that are hosted by the application programming interface. Then the system may perform an operation that includes grouping a subset of requests of the plurality of requests into a pool of requests if the subset of requests call similar functions of the plurality of functions. If a set of requests in the pool of requests are received during a specified time interval the system may perform an operation that includes combining the set of requests of the pool of requests into a set of calls numbering less than the number of requests in the set of requests of the pool of requests. In at least one embodiment the set of requests in the pool of requests may be combined into a single call. The system may then perform an operation that includes transmitting the set of calls to a database to obtain a result set for the set of requests in the set of calls. The result set may be generated based on executing the similar functions. Finally the system may perform an operation that includes receiving the result set in response to the set of calls.

In another embodiment a method for processing requests handled by an application programming interface is disclosed. The method may include utilizing a memory that stores instructions and a processor that executes the instructions to perform the various functions of the method. The method may include receiving a plurality of requests that call a plurality of functions that are hosted by the application programming interface. Additionally the method may include grouping a subset of requests of the plurality of requests into a pool of requests if the subset of requests call similar functions of the plurality of functions. Also the method may include combining a set of requests of the pool of requests into a set of calls if the set of requests in the pool of requests are received during a time interval. The number of calls in the set of calls may number less than the number of requests in the set of requests in the pool of requests. In at least one embodiment the set of requests in the pool of requests may be combined into a single call. Furthermore the method may include transmitting the set of calls to a database to obtain a result set for the set of requests in the set of calls. The result set may be generated based on execution of the similar functions. Finally the method may include receiving the result set in response to the set of calls.

According to yet another embodiment a computer readable device having instructions for providing differentiated services to traffic flows of a content distribution network is provided. The computer instructions which when loaded and executed by a processor may cause the processor to perform operations including receiving a plurality of requests that call a plurality of functions that are hosted by the application programming interface grouping a subset of requests of the plurality of requests into a pool of requests if the subset of requests call similar functions of the plurality of functions combining a set of requests of the pool of requests into a set of calls if the set of requests in the pool of requests are received during a time interval wherein a number of calls in the set of calls is less than a number of requests in the set of requests of the pool of requests transmitting the set of calls to a database to obtain a result set for the set of requests in the set of calls wherein the result set is generated based on the similar functions and receiving the result set in response to the set of calls.

These and other features of the systems and methods for processing requests handled by an application programming interface are described in the following detailed description drawings and appended claims.

A system and accompanying methods for processing requests handled by an application programming interface API are disclosed as shown in . In particular the system and methods may allow for micro optimized database use by grouping API requests based on which functions that each request calls. End users that are using an application that utilizes functions hosted by the API may send the plurality of requests to the API via the application . The API for example may be utilized by the application to store retrieve and manipulate data associated with the application . Once the API receives the plurality of requests from the end users the system may group a subset of the requests into a pool of requests if the requests in the subset call the same functions or similar functions hosted by the API . In certain embodiments the system may assign a priority level to each of the requests based on which function each request calls.

After the subset of requests are grouped into the pool of requests the system may perform a query optimization by combing a set of requests within the pool of requests into a single data base call if the set of requests within the pool of requests was received during a defined time interval. For example the system may combine a set of requests that call the same function used by a gaming application into a single database call if the requests were all received within a defined time interval. The system may transmit the single call to database or to another system to obtain a result set for the set of requests in the single call. Identifiers that uniquely identify one request from another may be appended into rows in the result set so that a result associated with one request may be distinguished from a result associated with a different request. Then without having to further access the database the result set may be split based on the identifiers into individualized responses for each of the requests that were originally served to the API . The individualized responses may then be transmitted to the corresponding devices that made the original requests that correspond to the responses.

Referring to the drawings and in particular to the system may provide a more efficient way to process API requests handled by the API by grouping the API requests based on the functions that the API requests call. The system may be configured to support but is not limited to supporting content delivery services cloud computing services voice over internet protocol services VoIP software as a service SaaS applications gaming applications and services productivity applications and services mobile applications and services and any other computing applications and services. The system may include one or more end users that may use end user device end user device or a combination thereof to access content data and services provided by application . In one embodiment the end user devices and may be computers servers mobile devices smartphones computer tablets or any other computing devices. In one embodiment the end user device may include a memory that includes instructions and a processor that executes the instructions from the memory to perform various operations that are performed by the end user device . The processor may be hardware software or a combination thereof. Similarly end user device may include a memory that includes instructions and a processor that executes the instructions from the memory to perform various operations that are performed by the end user device . The processor may be hardware software or a combination thereof.

The end users may utilize the end user devices and to access and interact with the application so as to obtain audio content video content text content image content gaming content web content any other type of content and information or data associated with the application . Additionally the end users may utilize the end user devices and to perform a variety of other tasks and functions with respect to the application . In certain embodiments the application may be a software application that may be a gaming application an internet based application a browser application a mobile application a productivity application a video application a music application a social media application a financial application a news application or any other type of application. In certain embodiments at least a portion of the application may be configured to execute directly on the end user devices and however in other embodiments the application may be configured to execute on the other devices and components in the system .

The application may utilize various functions hosted by the API to provide additional features and functionality to the end users using the application in an efficient manner. For example if the application is a gaming application the API may host functions that return high scores low scores user rankings and other information to the application so that the end user devices and can access this information. Notably the functions that the API can host may be unlimited in type and scope. For example the API may host functions associated with gaming calculation functions functions that allocate and manage memory functions that create manage and delete information and files functions associated with generating visual and auditory content functions associated with updating information messaging functions or any other types of functions that the application may use to support its end users. The API may also be utilized by the application to provide functionality and services that the application does not otherwise provide on its own. In one embodiment the API may be a software to software interface that enables the application to communicate with other applications to provide the services and functionality needed to support the application . The API may also include programming instructions and standards that enable the application to access and communicate with one or more other applications in the system or accessible by the system .

The API and the functions hosted by the API may be supported and executed by using any combination of the servers and in the communications network or outside of the communications network . In one embodiment the server may include a memory that includes instructions and a processor that executes the instructions from the memory to perform various operations that are performed by the server . Additionally the server may include a memory that includes instructions and a processor that executes the instructions from the memory to perform various operations that are performed by the server . Furthermore the server may include a memory that includes instructions and a processor that executes the instructions from the memory to perform various operations that are performed by the server . The processors and may be hardware software or a combination thereof. In certain embodiments the servers and may be network servers routers gateways computers mobile devices or any other suitable computing device.

The communications network of the system may be configured to link each of the devices in the system to one another and be configured to transmit generate and receive any information and data traversing the system . In one embodiment the communications network may include any number of additional servers in addition to the server the server and the server . The communications network may also include and be connected to a wireless network an ethernet network a satellite network a broadband network a cellular network a private network a cable network the Internet an internet protocol network a multiprotocol label switching MPLS network a content distribution network or any combination thereof. In one embodiment the communications network may be part of a single autonomous system that is located in a particular geographic region or be part of multiple autonomous systems that span several geographic regions.

The database of the system may be utilized to store and relay information that traverses the system cache content that traverses the system store data about each of the devices in the system and perform any other typical functions of a database. In one embodiment the database may be connected to or reside within the communications network . Additionally the database may include a processor and memory or be connected to a processor and memory to perform the various operation associated with the database . In one embodiment the database may be connected to the servers and server API application and end user devices and . The database may also store information relating to the requests traversing the system data relating to the functions hosted by the API and data responsive to the requests traversing the system . Furthermore the database may be configured to process queries sent to it by the API or by any other device in the system .

Operatively the system may process requests handled by the API in a manner that helps to reduce the need for hardware expansion or network build outs. In an example scenario the end users using end user device and may interact with application which may be a gaming application or any other type of application. The application may have a user interface that generates visual and auditory feedback to the end users when the end users interact with the application . Also if the application is a gaming application the application may enable the users to save user profile information obtain high scores and low scores chat with one another through the use of a chat function save their progress through the game pause the game restart the game or access any other functionality of features of traditional gaming applications. Various functions of the application may be outsourced to and hosted by the API . The API for example may host a saveData function which allows end users to save player data associated with the application and includes parameters player and data a getScores function which allows an end user to retrieve a high score and includes a player parameter a chat function which enables the end user to chat in the applications an update function which allows an end user to make an update in the application and a generatePlayerID function which enables an end user to create a player identifier for uniquely identifying the end user in the application . Of course the API can host any other desired or contemplated function that the application could utilize.

If a first end user using end device and a second end user using end device are both attempting to retrieve their high scores via the getScores function the application may send requests for each of the end users to the API to process the requests for the getScores function. These requests may enter a queue along with a multitude of other requests from other end users to be handled by the API . Instead of simply processing the plurality of requests on a first in first out FIFO basis or by using some other processing scheme a priority level may be assigned by the system to each of the requests based on which functions the requests call. For example requests for getScores function may be assigned a higher priority level in the queue than requests for the saveData function. From here the API may separate or otherwise group a subset of requests of the plurality of requests that call the same function or similar functions hosted by the API . For example if the request from end user device and the request from end user device both call the high score function hosted by the API the system may pool these two requests into a separate pool of requests. Similarly if a third user sends in a request for a similar function that would return a similar result set as the high score function sends in a request for a similar function that would have a similar function type as the high score function or calls a function that could otherwise be processed with the high score function the third user s request may also be combined into the separate pool of requests. For example if the third user calls the saveData function and this function can be processed with the getScores function the third user s request may be combined with the requests from the end user device and end user device . If a group of other users send in requests for the update function and the update function is not combinable with the getScores function then those requests may be placed in a separate pool from the pool of requests associated with the getScores function.

In one embodiment a function may be similar to another function if one function has at least one parameter in common with another function. In another embodiment a function may be similar to another function if one function would produce the same results another function. In another embodiment a function may be similar to another function if one function has a code structure that is at least thirty percent the same as the code structure for another function. In another embodiment a function may be similar to another function if one function has a portion of code structure that matches a portion of code structure in another function. In another embodiment a function may be similar to another function if one function performs the same operations as another function. In another embodiment a function may be similar to another function if one function adjusts or retrieves the same data as another function.

Once the plurality of requests are separated into different pools of requests based on which functions the requests call the system may determine if requests within each of the pools of requests were received during a defined time interval and then combine the requests received during the time interval into a set of calls such as database calls. The number of calls in the set of calls may be less than the number of requests within each pool of requests that were received during the defined time interval. In at least one embodiment the requests within the pool of requests received during the time interval may be combined into a single call. For example the system may perform a query optimization by combining all requests that call the getScores function within the last one second of time into a set of calls which may be a single call. As a further example and referring to end users Larry Dave and Norm all had requests that called the getScores function. Each of these requests from Larry Dave and Norm may be combined by the system into a single call or single structured query language SQL script. The single call or SQL script containing the requests from Larry Dave and Norm may be pushed or otherwise transmitted by the system to the database so that the database can return the result set associated with the requests in the single call.

Referring now also to once the database receives the single call containing the requests from Larry Dave and Norm the database can process the call and return a result set in a tabular format or other desired format. The result set can include all of the results requested in the single call. In order to distinguish one result from another in the result set the system may append the original WHERE clauses associated with each request to each resultant row generated in the result set table. In one embodiment unique identifiers that identify one request from another request may be appended to the rows in the result set table as well. Now without having to re access the database the system can split the result set off into individual responses for each of the corresponding requests that were originally sent into the API . The system may then transmit the individual responses the appropriate end users. For example in the cumulative result set including the high scores requested by Larry Dave and Norm was split into individual responses for Larry Dave and Norm. The system may then transmit the individualized responses to Larry David and Norm separately via the application . The application may then render their corresponding high scores returned from the getScore function on each of their devices separately. Notably the processes described herein may be applied to any type of function and for any type of application . Additionally the processes described herein may allow for combining requests that call functions that are not identical but are similar in type. For example CREATE DELETE and MODIFY queries of the same type may be combined to save database runtime. Furthermore requests may be combined based on what database tables they will access and what SQL functions they will employ.

Notably as shown in the system may perform any of the operative functions disclosed herein by utilizing the processing capabilities of server the storage capacity of the database or any other component of the system to perform the operative functions disclosed herein. The server may include one or more processors that may be configured to process any of the various functions of the system . The processors may be software hardware or a combination of hardware and software. Additionally the server may also include a memory which stores instructions that the processors may execute to perform various operations of the system . For example the server may assist in processing loads handled by the various devices in the system such as but not limited to grouping a subset of requests of a plurality of requests into a pool of requests if the subset of requests call similar functions combining a set of requests within the pool of requests into a set of calls if the set of requests in the pool of requests are received during a specified time interval transmitting the set of calls to database to obtain a result set for the set of requests in the set of calls generating the result set receiving the result set and performing any other suitable operations conducted in the system or otherwise. In one embodiment multiple servers may be utilized to process the functions of the system . The server and other devices in the system may utilize the database for storing data about the devices in the system or any other information that is associated with the system . In one embodiment multiple databases may be utilized to store data in the system .

Although illustrates specific example configurations of the various components of the system the system may include any configuration of the components which may include using a greater or lesser number of the components. For example the system is illustratively shown as including an end user device end user device application API communications network server server server server and database . However the system may include multiple end user devices and multiple applications multiple APIs multiple communications networks multiple servers and multiple databases or any number of any of the other components in the system . Furthermore in one embodiment substantial portions of the functionality and operations of the system may be performed by other networks and systems that are connected to system .

As shown in an exemplary method for processing requests handled by an API is schematically illustrated and may include at step receiving a plurality of requests that call one or more functions hosted by the API . The plurality of requests may be associated with various features and functions of an application . In certain embodiments the plurality of requests may be received by the API from the end user devices and via the application or directly from the end user devices and . At step the method may include determining if there is a subset of requests within the received plurality of requests that call similar functions identical functions or a combination thereof that are hosted by the API . In one embodiment the determination may be performed by the API the servers and the server any combination thereof or other appropriate device.

If it is determined that there is no subset of requests within the received plurality of requests that call similar functions identical functions or a combination thereof then the method may include at step processing the plurality of requests in a standard manner such as via a traditional priority queue. However if there is a subset of requests within the received plurality of requests that call similar identical functions or a combination thereof then the method may include at step grouping the subset of requests that call the similar functions identical functions or a combination thereof into a pool of requests. In one embodiment the grouping of the subset of requests into the pool of requests may be performed by the API the servers and the server any combination thereof or other appropriate device. At step the method may include combining a set of requests within the pool of requests that have been received during a defined time interval into a set of calls such as database calls. The number of calls in the set of calls may be less than the number of requests within the pool of requests that were received during the defined time interval. In at least one embodiment the requests within the pool of requests received during the time interval may be combined into a single call. In one embodiment the combining of the set of requests within the pool of requests that were receiving during the time interval may be performed by the API the servers and the server any combination thereof or other appropriate device.

At step the method may include transmitting the set of calls to database or other appropriate device to obtain a result set for the set of requests in the set of calls. In one embodiment the transmission of the set of calls may be performed by the API the servers and the server any combination thereof or other appropriate device. At step the method may include receiving the result set from the database or other appropriate device in response to the set of calls. In one embodiment the result set may be received from the database by the API the servers and the server any combination thereof or other appropriate device. At step the method may include splitting the result set into individualized responses corresponding to each of the individual requests in the set of calls. In one embodiment the splitting of the result set may be performed by the API the servers and the server any combination thereof or other appropriate device. Notably the splitting of the result set may be performed without have to re access the database . At step the method may include transmitting the individualized responses to the end user device and either directly or via the application . In one embodiment the transmitting of the responses may be performed by the API the servers and the server any combination thereof or other appropriate device.

In one embodiment the system and methods disclosed herein may include assigning a priority level to each request based on the type of function a request calls the device that made the request the type of information the request is seeking the type of information that the request is trying to update the type of application that is making the request on behalf of the end user or based on other desired factors. The requests may be processed by the system based on the priority level assigned to the requests. For example high priority requests may be processed prior to low priority requests or medium priority requests.

In one embodiment the system and methods may include receiving the result set in a table format or other desired format. In another embodiment the system and methods disclosed herein may include splitting the result sets based on WHERE clauses or identifiers appended to each row of the result set table. By appending WHERE clauses or identifiers to each row of the result set table one request may be uniquely identified from another request so that the result set may be effectively split by the system . Once the result set is split and the individualized responses are generated the responses may be sent to the appropriate devices that sent the original requests to the API . In one embodiment the system and methods described herein may further include utilizing any of the various components described in the system to perform the operative functions disclosed herein.

It is important to note that the methods described above may incorporate any of the functionality devices and or features of the system and subsystems described above or otherwise and are not intended to be limited to the description or examples provided herein.

Referring now also to at least a portion of the methodologies and techniques described with respect to the exemplary embodiments of the system can incorporate a machine such as but not limited to computer system or other computing device within which a set of instructions when executed may cause the machine to perform any one or more of the methodologies or functions discussed above. The machine may be configured to facilitate various operations conducted by the system . For example the machine may be configured to but is not limited to assist the system by providing processing power to assist with processing loads experienced in the system by providing storage capacity for storing instructions or data traversing the system or by assisting with any other operations conducted by or within the system .

In some embodiments the machine may operate as a standalone device. In some embodiments the machine may be connected e.g. using communications network another network or a combination thereof to and assist with operations performed by other machines such as but not limited to the end user device end user device the server the server the server the database or any combination thereof. The machine may be connected with any component in the system . In a networked deployment the machine may operate in the capacity of a server or a client user machine in a server client user network environment or as a peer machine in a peer to peer or distributed network environment. The machine may comprise a server computer a client user computer a personal computer PC a tablet PC a laptop computer a desktop computer a control system a network router switch or bridge or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The computer system may include a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit which may be but is not limited to a liquid crystal display LCD a flat panel a solid state display or a cathode ray tube CRT . The computer system may include an input device such as but not limited to a keyboard a cursor control device such as but not limited to a mouse a disk drive unit a signal generation device such as but not limited to a speaker or remote control and a network interface device .

The disk drive unit may include a machine readable medium on which is stored one or more sets of instructions such as but not limited to software embodying any one or more of the methodologies or functions described herein including those methods illustrated above. The instructions may also reside completely or at least partially within the main memory the static memory or within the processor or a combination thereof during execution thereof by the computer system . The main memory and the processor also may constitute machine readable media.

Dedicated hardware implementations including but not limited to application specific integrated circuits programmable logic arrays and other hardware devices can likewise be constructed to implement the methods described herein. Applications that may include the apparatus and systems of various embodiments broadly include a variety of electronic and computer systems. Some embodiments implement functions in two or more specific interconnected hardware modules or devices with related control and data signals communicated between and through the modules or as portions of an application specific integrated circuit. Thus the example system is applicable to software firmware and hardware implementations.

In accordance with various embodiments of the present disclosure the methods described herein are intended for operation as software programs running on a computer processor. Furthermore software implementations can include but not limited to distributed processing or component object distributed processing parallel processing or virtual machine processing can also be constructed to implement the methods described herein.

The present disclosure contemplates a machine readable medium containing instructions so that a device connected to the communications network other network or both can send or receive voice video or data and to communicate over the communications network other network or both using the instructions. The instructions may further be transmitted or received over the communications network other network or both via the network interface device .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure.

The terms machine readable medium or machine readable device shall accordingly be taken to include but not be limited to memory devices solid state memories such as a memory card or other package that houses one or more read only non volatile memories random access memories or other re writable volatile memories magneto optical or optical medium such as a disk or tape or other self contained information archive or set of archives is considered a distribution medium equivalent to a tangible storage medium. The machine readable medium or machine readable device may be non transitory. Accordingly the disclosure is considered to include any one or more of a machine readable medium or a distribution medium as listed herein and including art recognized equivalents and successor media in which the software implementations herein are stored.

The illustrations of arrangements described herein are intended to provide a general understanding of the structure of various embodiments and they are not intended to serve as a complete description of all the elements and features of apparatus and systems that might make use of the structures described herein. Other arrangements may be utilized and derived therefrom such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. Figures are also merely representational and may not be drawn to scale. Certain proportions thereof may be exaggerated while others may be minimized. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

Thus although specific arrangements have been illustrated and described herein it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific arrangement shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments and arrangements of the invention. Combinations of the above arrangements and other arrangements not specifically described herein will be apparent to those of skill in the art upon reviewing the above description. Therefore it is intended that the disclosure not be limited to the particular arrangement s disclosed as the best mode contemplated for carrying out this invention but that the invention will include all embodiments and arrangements falling within the scope of the appended claims.

The foregoing is provided for purposes of illustrating explaining and describing embodiments of this invention. Modifications and adaptations to these embodiments will be apparent to those skilled in the art and may be made without departing from the scope or spirit of this invention. Upon reviewing the aforementioned embodiments it would be evident to an artisan with ordinary skill in the art that said embodiments can be modified reduced or enhanced without departing from the scope and spirit of the claims described below.

