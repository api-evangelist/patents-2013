---

title: System and method for language translation in a hybrid peer-to-peer environment
abstract: An improved system and method are disclosed for peer-to-peer communications. In one example, the method enables an endpoint to send and/or receive audio speech translations to facilitate communications between users who speak different languages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09128927&OS=09128927&RS=09128927
owner: Damaka, Inc.
number: 09128927
owner_city: Richardson
owner_country: US
publication_date: 20130516
---
This application is a continuation of U.S. patent application Ser. No. 12 890 333 filed Sep. 24 2010 entitled SYSTEM AND METHOD FOR LANGUAGE TRANSLATION IN A HYBRID PEER TO PEER ENVIRONMENT the specification of which is incorporated herein in its entirety.

Current packet based communication networks may be generally divided into peer to peer networks and client server networks. Traditional peer to peer networks support direct communication between various endpoints without the use of an intermediary device e.g. a host or server . Each endpoint may initiate requests directly to other endpoints and respond to requests from other endpoints using credential and address information stored on each endpoint. However because traditional peer to peer networks include the distribution and storage of endpoint information e.g. addresses and credentials throughout the network on the various insecure endpoints such networks inherently have an increased security risk. While a client server model addresses the security problem inherent in the peer to peer model by localizing the storage of credentials and address information on a server a disadvantage of client server networks is that the server may be unable to adequately support the number of clients that are attempting to communicate with it. As all communications even between two clients must pass through the server the server can rapidly become a bottleneck in the system.

The present disclosure is directed to a system and method for peer to peer hybrid communications. It is understood that the following disclosure provides many different embodiments or examples. Specific examples of components and arrangements are described below to simplify the present disclosure. These are of course merely examples and are not intended to be limiting. In addition the present disclosure may repeat reference numerals and or letters in the various examples. This repetition is for the purpose of simplicity and clarity and does not in itself dictate a relationship between the various embodiments and or configurations discussed.

Referring to one embodiment of a peer to peer hybrid system is illustrated. The system includes an access server that is coupled to endpoints and via a packet network . Communication between the access server endpoint and endpoint is accomplished using predefined and publicly available i.e. non proprietary communication standards or protocols e.g. those defined by the Internet Engineering Task Force IETF or the International Telecommunications Union Telecommunications Standard Sector ITU T . For example signaling communications e.g. session setup management and teardown may use a protocol such as the Session Initiation Protocol SIP while actual data traffic may be communicated using a protocol such as the Real time Transport Protocol RTP . As will be seen in the following examples the use of standard protocols for communication enables the endpoints and to communicate with any device that uses the same standards. The communications may include but are not limited to voice calls instant messages audio and video emails and any other type of resource transfer where a resource represents any digital data. In the following description media traffic is generally based on the user datagram protocol UDP while authentication is based on the transmission control protocol internet protocol TCP IP . However it is understood that these are used for purposes of example and that other protocols may be used in addition to or instead of UDP and TCP IP.

Connections between the access server endpoint and endpoint may include wireline and or wireless communication channels. In the following description it is understood that the term direct means that there is no endpoint or access server in the communication channel s between the endpoints and or between either endpoint and the access server. Accordingly the access server endpoint and endpoint are directly connected even if other devices e.g. routers firewalls and other network elements are positioned between them. In addition connections to endpoints locations or services may be subscription based with an endpoint only having access if the endpoint has a current subscription. Furthermore the following description may use the terms user and endpoint interchangeably although it is understood that a user may be using any of a plurality of endpoints. Accordingly if an endpoint logs in to the network it is understood that the user is logging in via the endpoint and that the endpoint represents the user on the network using the user s identity.

The access server stores profile information for a user a session table to track what users are currently online and a routing table that matches the address of an endpoint to each online user. The profile information includes a buddy list for each user that identifies other users buddies that have previously agreed to communicate with the user. Online users on the buddy list will show up when a user logs in and buddies who log in later will directly notify the user that they are online as described with respect to . The access server provides the relevant profile information and routing table to each of the endpoints and so that the endpoints can communicate directly with one another. Accordingly in the present embodiment one function of the access server is to serve as a storage location for information needed by an endpoint in order to communicate with other endpoints and as a temporary storage location for requests voicemails etc. as will be described later in greater detail.

With additional reference to one embodiment of an architecture for the access server of is illustrated. The architecture includes functionality that may be provided by hardware and or software and that may be combined into a single hardware platform or distributed among multiple hardware platforms. For purposes of illustration the access server in the following examples is described as a single device but it is understood that the term applies equally to any type of environment including a distributed environment in which at least a portion of the functionality attributed to the access server is present.

In the present example the architecture includes web services e.g. based on functionality provided by XML SOAP .NET MONO web server using for example Apache or IIS and database using for example mySQL or SQLServer for storing and retrieving routing tables profiles and one or more session tables . Functionality for a STUN Simple Traversal of UDP through NATs Network Address Translation server is also present in the architecture . As is known STUN is a protocol for assisting devices that are behind a NAT firewall or router with their packet routing. The architecture may also include a redirect server for handling requests originating outside of the system . One or both of the STUN server and redirect server may be incorporated into the access server or may be a standalone device. In the present embodiment both the server and the redirect server are coupled to the database .

Referring to one embodiment of an architecture for the endpoint which may be similar or identical to the endpoint of is illustrated. It is understood that that term endpoint may refer to many different devices having some or all of the described functionality including a computer a VoIP telephone a personal digital assistant a cellular phone or any other device having an IP stack upon which the needed protocols may be run. Such devices generally include a network interface a controller coupled to the network interface a memory coupled to the controller and instructions executable by the controller and stored in the memory for performing the functions described in the present application. Data needed by an endpoint may also be stored in the memory. The architecture includes an endpoint engine positioned between a graphical user interface GUI and an operating system . The GUI provides user access to the endpoint engine while the operating system provides underlying functionality as is known to those of skill in the art.

The endpoint engine may include multiple components and layers that support the functionality required to perform the operations of the endpoint . For example the endpoint engine includes a softswitch a management layer an encryption decryption module a feature layer a protocol layer a speech to text engine a text to speech engine a language conversion engine an out of network connectivity module a connection from other networks module a p commerce e.g. peer commerce engine that includes a p commerce agent and a p commerce broker and a cellular network interface module .

Each of these components layers may be further divided into multiple modules. For example the softswitch includes a call control module an instant messaging IM control module a resource control module a CALEA Communications Assistance to Law Enforcement Act agent a media control module a peer control module a signaling agent a fax control module and a routing module.

The management layer includes modules for presence i.e. network presence peer management detecting peers and notifying peers of being online firewall management navigation and management media management resource management profile management authentication roaming fax management and media playback recording management.

The encryption decryption module provides encryption for outgoing packets and decryption for incoming packets. In the present example the encryption decryption module provides application level encryption at the source rather than at the network. However it is understood that the encryption decryption module may provide encryption at the network in some embodiments.

The feature layer provides support for various features such as voice video IM data voicemail file transfer file sharing class 5 features short message service SMS interactive voice response IVR faxes and other resources. The protocol layer includes protocols supported by the endpoint including SIP HTTP HTTPS STUN RTP SRTP and ICMP. It is understood that these are examples only and that fewer or more protocols may be supported.

The speech to text engine converts speech received by the endpoint e.g. via a microphone or network into text the text to speech engine converts text received by the endpoint into speech e.g. for output via a speaker and the language conversion engine may be configured to convert inbound or outbound information text or speech from one language to another language. The out of network connectivity module may be used to handle connections between the endpoint and external devices as described with respect to and the connection from other networks module handles incoming connection attempts from external devices. The cellular network interface module may be used to interact with a wireless network.

With additional reference to the cellular network interface module is illustrated in greater detail. Although not shown in the softswitch of the endpoint architecture includes a cellular network interface for communication with the cellular network interface module . In addition the cellular network interface module includes various components such as a call control module a signaling agent a media manager a protocol stack and a device interface. It is noted that these components may correspond to layers within the endpoint architecture and may be incorporated directly into the endpoint architecture in some embodiments.

Referring to a traditional softswitch architecture is illustrated with two endpoints and neither of which includes a softswitch. In the present example an external softswitch maintains a first signaling leg dotted line with the endpoint and a second signaling leg dotted line with the endpoint . The softswitch links the two legs to pass signaling information between the endpoints and . Media traffic solid lines may be transferred between the endpoints and via a media gateway .

With additional reference to the traditional softswitch architecture of is illustrated with a third endpoint that also does not include a softswitch. The external softswitch now maintains a third signaling leg dotted line with the endpoint . In the present example a conference call is underway. However as none of the endpoints includes a softswitch a media bridge connected to each endpoint is needed for media traffic. Accordingly each endpoint has at most two concurrent connections one with the softswitch for signaling and another with the media bridge for media traffic.

Referring to in one embodiment unlike the traditional architecture of and two endpoints e.g. the endpoints and of each include a softswitch e.g. the softswitch of . Each endpoint is able to establish and maintain both signaling and media traffic connections both virtual and physical legs with the other endpoint. Accordingly no external softswitch is needed as this model uses a distributed softswitch method to handle communications directly between the endpoints.

With additional reference to the endpoints and are illustrated with another endpoint that also contains a softswitch. In this example a conference call is underway with the endpoint acting as the host. To accomplish this the softswitch contained in the endpoint enables the endpoint to support direct signaling and media traffic connections with the endpoint . The endpoint can then forward media traffic from the endpoint to the endpoint and vice versa. Accordingly the endpoint may support multiple connections to multiple endpoints and as in no external softswitch is needed.

Referring again to in operation the softswitch uses functionality provided by underlying layers to handle connections with other endpoints and the access server and to handle services needed by the endpoint . For example as is described below in greater detail with respect to and incoming and outgoing calls may utilize multiple components within the endpoint architecture .

Referring to a sequence diagram illustrates an exemplary process by which the endpoint may initiate a call to the endpoint using various components of the architecture . Prior to step a user not shown initiates a call via the GUI . In step the GUI passes a message to the call control module of the softswitch to make the call. The call control module contacts the peer control module softswitch in step which detects the peer if not already done goes to the routing table softswitch for the routing information and performs similar operations. It is understood that not all interactions are illustrated. For example the peer control module may utilize the peer management module of the management layer for the peer detection. The call control module then identifies a route for the call in step and sends message to the SIP protocol layer of the protocol layer to make the call in step . In step the outbound message is encrypted using the encryption decryption module and the message is sent to the network via the OS in step .

After the message is sent and prior to receiving a response the call control module instructs the media control module softswitch to establish the needed near end media in step . The media control module passes the instruction to the media manager of the management layer in step which handles the establishment of the near end media.

With additional reference to the message sent by the endpoint in step is received by the endpoint and passed from the OS to the SIP protocol layer in step . The message is decrypted in step and the call is offered to the call control module in step . The call control module notifies the GUI of an incoming call in step and the GUI receives input identifying whether the call is accepted or rejected e.g. by a user in step . In the present example the call is accepted and the GUI passes the acceptance to the call control module in step . The call control module contacts the peer control module in step which identifies a route to the calling endpoint and returns the route to the call control module in step . In steps and the call control module informs the SIP protocol layer that the call has been accepted and the message is encrypted using the encryption decryption module. The acceptance message is then sent to the network via the OS in step .

In the present example after the call control module passes the acceptance message to the SIP protocol layer other steps may occur to prepare the endpoint for the call. For example the call control module instructs the media control module to establish near end media in step and the media control module instructs the media manager to start listening to incoming media in step . The call control module also instructs the media control module to establish far end media step and the media control module instructs the media manager to start transmitting audio in step .

Returning to the message sent by the endpoint step is received by the OS and passed on to the SIP protocol layer in step and decrypted in step . The message indicating that the call has been accepted is passed to the call control module in step and from there to the GUI in step . The call control module then instructs the media control module to establish far end media in step and the media control module instructs the media manager to start transmitting audio in step .

The following figures are sequence diagrams that illustrate various exemplary functions and operations by which the access server and the endpoints and may communicate. It is understood that these diagrams are not exhaustive and that various steps may be excluded from the diagrams to clarify the aspect being described.

Referring to and using the endpoint as an example a sequence diagram illustrates an exemplary process by which the endpoint may authenticate with the access server and then communicate with the endpoint . As will be described after authentication all communication both signaling and media traffic between the endpoints and occurs directly without any intervention by the access server . In the present example it is understood that neither endpoint is online at the beginning of the sequence and that the endpoints and are buddies. As described above buddies are endpoints that have both previously agreed to communicate with one another.

In step the endpoint sends a registration and or authentication request message to the access server . If the endpoint is not registered with the access server the access server will receive the registration request e.g. user ID password and email address and will create a profile for the endpoint not shown . The user ID and password will then be used to authenticate the endpoint during later logins. It is understood that the user ID and password may enable the user to authenticate from any endpoint rather than only the endpoint .

Upon authentication the access server updates a session table residing on the server to indicate that the user ID currently associated with the endpoint is online. The access server also retrieves a buddy list associated with the user ID currently used by the endpoint and identifies which of the buddies if any are online using the session table. As the endpoint is currently offline the buddy list will reflect this status. The access server then sends the profile information e.g. the buddy list and a routing table to the endpoint in step . The routing table contains address information for online members of the buddy list. It is understood that steps and represent a make and break connection that is broken after the endpoint receives the profile information and routing table.

In steps and the endpoint and access server repeat steps and as described for the endpoint . However because the endpoint is online when the endpoint is authenticated the profile information sent to the endpoint will reflect the online status of the endpoint and the routing table will identify how to directly contact it. Accordingly in step the endpoint sends a message directly to the endpoint to notify the endpoint that the endpoint is now online. This also provides the endpoint with the address information needed to communicate directly with the endpoint . In step one or more communication sessions may be established directly between the endpoints and .

Referring to a sequence diagram illustrates an exemplary process by which authentication of an endpoint e.g. the endpoint may occur. In addition after authentication the endpoint may determine whether it can communicate with the endpoint . In the present example the endpoint is online when the sequence begins.

In step the endpoint sends a request to the STUN server of . As is known the STUN server determines an outbound IP address e.g. the external address of a device i.e. a firewall router etc. behind which the endpoint is located an external port and a type of NAT used by the device. The type of NAT may be for example full cone restricted cone port restricted cone or symmetric each of which is discussed later in greater detail with respect to . The STUN server sends a STUN response back to the endpoint in step with the collected information about the endpoint .

In step the endpoint sends an authentication request to the access server . The request contains the information about endpoint received from the STUN server . In step the access server responds to the request by sending the relevant profile and routing table to the endpoint . The profile contains the external IP address port and NAT type for each of the buddies that are online.

In step the endpoint sends a message to notify the endpoint of its online status as the endpoint is already online and in step the endpoint waits for a response. After the expiration of a timeout period within which no response is received from the endpoint the endpoint will change the status of the endpoint from online as indicated by the downloaded profile information to unreachable. The status of a buddy may be indicated on a visual buddy list by the color of an icon associated with each buddy. For example when logging in online buddies may be denoted by a blue icon and offline buddies may be denoted by a red icon. If a response to a notify message is received for a buddy the icon representing that buddy may be changed from blue to green to denote the buddy s online status. If no response is received the icon remains blue to indicate that the buddy is unreachable. Although not shown a message sent from the endpoint and received by the endpoint after step would indicate that the endpoint is now reachable and would cause the endpoint to change the status of the endpoint to online. Similarly if the endpoint later sends a message to the endpoint and receives a response then the endpoint would change the status of the endpoint to online.

It is understood that other embodiments may implement alternate NAT traversal techniques. For example a single payload technique may be used in which TCP IP packets are used to traverse a UDP restricted firewall or router. Another example includes the use of a double payload in which a UDP packet is inserted into a TCP IP packet. Furthermore it is understood that protocols other than STUN may be used. For example protocols such as Internet Connectivity Establishment ICE or Traversal Using Relay NAT TURN may be used.

Referring to a sequence diagram illustrates an exemplary process by which the access server may aid the endpoint in establishing communications with the endpoint which is a buddy . After rendering aid the access server is no longer involved and the endpoints may communicate directly. In the present example the endpoint is behind a NAT device that will only let a message in towards the endpoint if the endpoint has sent a message out. Unless this process is bypassed the endpoint will be unable to connect to the endpoint . For example the endpoint will be unable to notify the endpoint that it is now online.

In step the endpoint sends a request to the STUN server of . As described previously the STUN server determines an outbound IP address an external port and a type of NAT for the endpoint . The STUN server sends a STUN response back to the endpoint in step with the collected information about the endpoint . In step the endpoint sends an authentication request to the access server . The request contains the information about endpoint received from the STUN server . In step the access server responds to the request by sending the relevant profile and routing table to the endpoint . In the present example the access server identifies the NAT type associated with the endpoint as being a type that requires an outbound packet to be sent before an inbound packet is allowed to enter. Accordingly the access server instructs the endpoint to send periodic messages to the access server to establish and maintain a pinhole through the NAT device. For example the endpoint may send a message prior to the timeout period of the NAT device in order to reset the timeout period. In this manner the pinhole may be kept open indefinitely.

In steps and the endpoint sends a STUN request to the STUN server and the STUN server responds as previously described. In step the endpoint sends an authentication request to the access server . The access server retrieves the buddy list for the endpoint and identifies the endpoint as being associated with a NAT type that will block communications from the endpoint . Accordingly in step the access server sends an assist message to the endpoint . The assist message instructs the endpoint to send a message to the endpoint which opens a pinhole in the NAT device for the endpoint . For security purposes as the access server has the STUN information for the endpoint the pinhole opened by the endpoint may be specifically limited to the endpoint associated with the STUN information. Furthermore the access server may not request such a pinhole for an endpoint that is not on the buddy list of the endpoint .

The access server sends the profile and routing table to the endpoint in step . In step the endpoint sends a message e.g. a ping packet to the endpoint . The endpoint may then respond to the message and notify the endpoint that it is now online. If the endpoint does not receive a reply from the endpoint within a predefined period of time it may close the pinhole which may occur simply by not sending another message and letting the pinhole time out . Accordingly the difficulty presented by the NAT device may be overcome using the assist message and communications between the two endpoints may then occur without intervention by the access server .

Referring to a sequence diagram illustrates an exemplary process by which the endpoint may request that it be added to the endpoint s buddy list. In the present example the endpoints and both remain online during the entire process.

In step the endpoint sends a registration and or authentication request message to the access server as described previously. Upon authentication the access server updates a session table residing on the server to indicate that the user ID currently associated with the endpoint is online. The access server also retrieves a buddy list associated with the user ID currently used by the endpoint and identifies which of the buddies if any are online using the session table. As the endpoint is not currently on the buddy list it will not be present. The access server then sends the profile information and a routing table to the endpoint in step .

In steps and the endpoint and access server repeat steps and as described for the endpoint . The profile information sent by the access server to the endpoint will not include the endpoint because the two endpoints are not buddies.

In step the endpoint sends a message to the access server requesting that the endpoint be added to its buddy list. The access server determines that the endpoint is online e.g. using the session table in step and sends the address for the endpoint to the endpoint in step . In step the endpoint sends a message directly to the endpoint requesting that the endpoint be added to its buddy list. The endpoint responds to the endpoint in step with either permission or a denial and the endpoint also updates the access server with the response in step . For example if the response grants permission then the endpoint informs the access server so that the access server can modify the profile of both endpoints to reflect the new relationship. It is understood that various other actions may be taken. For example if the endpoint denies the request then the access server may not respond to another request by the endpoint with respect to the endpoint until a period of time has elapsed.

It is understood that many different operations may be performed with respect to a buddy list. For example buddies may be deleted blocked unblocked buddy status may be updated and a buddy profile may be updated. For block unblock as well as status and profile updates a message is first sent to the access server by the endpoint requesting the action e.g. the endpoint . Following the access server update the endpoint sends a message to the peer being affected by the action e.g. the endpoint .

Buddy deletion may be handled as follows. If the user of the endpoint wants to delete a contact on a buddy list currently associated with the online endpoint the endpoint will first notify the access server that the buddy is being deleted. The access server then updates the profile of both users so that neither buddy list shows the other user as a buddy. Note that in this instance a unilateral action by one user will alter the profile of the other user. The endpoint then sends a message directly to the endpoint to remove the buddy the user of the endpoint from the buddy list of the user of endpoint in real time. Accordingly even though the user is online at endpoint the user of the endpoint will be removed from the buddy list of the endpoint .

Referring to a sequence diagram illustrates an exemplary process by which the endpoint may request that it be added to the endpoint s buddy list. In the present example the endpoint is not online until after the endpoint has made its request.

In step the endpoint sends a registration and or authentication request message to the access server as described previously. Upon authentication the access server updates a session table residing on the server to indicate that the user ID currently associated with the endpoint is online. The access server also retrieves a buddy list associated with the user ID currently used by the endpoint and identifies which of the buddies if any are online using the session table. The access server then sends the profile information and a routing table to the endpoint in step .

In step the endpoint sends a message to the access server requesting that the endpoint be added to its buddy list. The access server determines that the endpoint is offline in step and temporarily stores the request message in step . In steps and the endpoint and access server repeat steps and as described for the endpoint . However when the access server sends the profile information and routing table to the endpoint it also sends the request by the endpoint including address information for the endpoint .

In step the endpoint responds directly to the endpoint with either permission or a denial. The endpoint then updates the access server with the result of the response in step and also instructs the access server to delete the temporarily stored request.

Referring to a sequence diagram illustrates an exemplary process by which the endpoint may request that it be added to the endpoint s buddy list. In the present example the endpoint is not online until after the endpoint has made its request and the endpoint is not online to receive the response by endpoint .

In step the endpoint sends a registration and or authentication request message to the access server as described previously. Upon authentication the access server updates a session table residing on the server to indicate that the user ID currently associated with the endpoint is online. The access server also retrieves a buddy list associated with the user ID currently used by the endpoint and identifies which of the buddies if any are online using the session table. The access server then sends the profile information and a routing table to the endpoint in step .

In step the endpoint sends a message to the access server requesting that the endpoint be added to its buddy list. The access server determines that the endpoint is offline in step and temporarily stores the request message in step . In step the endpoint notifies the access server that it is going offline.

In steps and the endpoint and access server repeat steps and as described for the endpoint . However when the access server sends the profile information and routing table to the endpoint it also sends the request by the endpoint . Endpoint sends its response to the access server in step and also instructs the access server to delete the temporarily stored request. After the endpoint s next authentication process its profile information will include endpoint as a buddy assuming the endpoint granted permission .

Referring to in one embodiment a system includes a stateless reflector and two endpoints and such as the endpoints and described with respect to the preceding figures. In the present example each of the endpoints and are behind a device respectively that monitors and regulates communication with its respective endpoint. Each device in the present example is a firewall having NAT technology. As described previously a NAT device may present an obstacle in establishing a peer to peer connection because it may not allow unsolicited messages e.g. it may require a packet to be sent out through the NAT device before allowing a packet in . For example the NAT device positioned between the endpoint and network may only let a message in towards the endpoint if the endpoint has sent a message out. Unless the NAT device s status is shifted from not soliciting messages from the endpoint to soliciting messages from the endpoint the endpoint will be unable to connect to the endpoint . For example the endpoint will be unable to notify the endpoint that it is now online.

As will be described below in greater detail the stateless reflector is configured to receive one or more packets from an endpoint and reflect the packet to another endpoint after modifying information within the packet. This reflection process enables the endpoints and to communicate regardless of the presence and type of the NAT devices and . The stateless reflector is stateless because state information e.g. information relating to how an endpoint is to connect with other endpoints is stored by the endpoints as described previously. Accordingly the stateless reflector processes header information contained within a packet without access to other information about the network or endpoints such as the database of . Although only one stateless reflector is illustrated in it is understood that multiple stateless reflectors may be provided and that the endpoints and may each use a different stateless reflector. For example an endpoint may be configured to use a particular stateless reflector or may select a stateless reflector based on location NAT type etc.

Although each endpoint is shown with a separate NAT device it is understood that multiple endpoints may be connected to the network via a single NAT device. For example a LAN may access the network via a single NAT device and all communications between the endpoints connected to the LAN and the network must pass through the NAT device. However communications between the endpoints within the LAN itself may occur directly as previously described because the endpoints are not communicating through the NAT device. Furthermore if one of the endpoints or does not have a NAT device then communications with that endpoint may occur directly as described above even if the endpoints are not in the same network.

Each NAT device and includes an internal IP address on the side coupled to the endpoint for the NAT device and the side coupled to the endpoint for the NAT device and an external IP address on the side coupled to the network for both NAT devices . Each connection is also associated with an internal port and an external port. Therefore each connection includes both internal IP address port information and external IP address port information.

Generally a NAT device may be defined as full cone restricted cone port restricted cone or symmetric. A full cone NAT is one where all requests from the same internal IP address and port are mapped to the same external IP address and port. Therefore any external host can send a packet to the internal host by sending a packet to the mapped external address.

A restricted cone NAT is one where all requests from the same internal IP address and port are mapped to the same external IP address and port. Unlike a full cone NAT an external host can send a packet to the internal host only if the internal host has previously sent a packet to the external host s IP address.

A port restricted cone NAT is like a restricted cone NAT but the restriction includes port numbers. More specifically an external host can send a packet with source IP address X and source port P to the internal host only if the internal host has previously sent a packet to the external host at IP address X and port P.

A symmetric NAT is one where all requests from the same internal IP address and port to a specific destination IP address and port are mapped to the same external IP address and port. If the same host sends a packet with the same source address and port but to a different destination a different mapping is used. Only the external host that receives a packet can send a UDP packet back to the internal host.

Referring to a table illustrates one embodiment of a communication structure that may be used to traverse one or both of the NAT devices and of . The table provides five possible types for the NAT devices and no NAT full cone restricted cone port restricted cone and symmetric. It is understood that no NAT may indicate that no device is there that a device is there but does not include NAT functionality or that a device is there and any NAT functionality within the device has been disabled. Either of the NAT devices and may be on the originating side of the communication or on the terminating side. For purposes of convenience the endpoint is the originating endpoint and the endpoint is the terminating endpoint and the NAT device is the originating NAT device and the NAT device is the terminating NAT device. It is understood that the terms endpoint and NAT device may be used interchangeably in some situations. For example sending a packet to the endpoint generally involves sending a packet to the NAT device which then forwards the packet to the endpoint after performing the network address translation. However the following discussion may simply refer to sending a packet to the endpoint and it will be understood that the packet must traverse the NAT device .

As illustrated by the table there are twenty five possible pairings of NAT types and establishing communication between different NAT types may require different steps. For purposes of convenience these twenty five pairings may be grouped based on the required steps. For example if the originating NAT type is no NAT full cone restricted cone or port restricted cone then the originating NAT can establish communication directly with a terminating NAT type of either no NAT or full cone.

If the originating NAT type is no NAT or full cone then the originating NAT can establish communications with a terminating NAT type of either restricted cone or port restricted cone only after using the stateless reflector to reflect a packet. This process is described below with respect to .

Referring to the endpoint wants to inform the endpoint which is already logged on that the endpoint has logged on. The NAT device is either a no NAT or a full cone type and the NAT device is either a restricted cone or a port restricted cone type. Accordingly the endpoint wants to send a message to the endpoint but has not received a message from the endpoint that would allow the endpoint to traverse the NAT device .

Although not shown in prior to or during authentication the endpoints and both sent a request to a STUN server e.g. the STUN server of not shown in . The STUN server determined an outbound IP address an external port and a type of NAT for the endpoints and in this example for the NAT devices and . The STUN server then sent a STUN response back to the endpoints and with the collected information. The endpoints and then sent an authentication request to an access server e.g. the access server of not shown in . The request contains the information about endpoints and received from the STUN server . The access server responds to the requests by sending the relevant profile and routing table to the endpoints and . In addition each NAT device and may have a pinhole to the STUN server .

In the present example the NAT device has an external address port of 1.1.1.1 1111 and the NAT device has an external address port of 2.2.2.2 2222. The STUN server has an address port of 3.3.3.3 3333 and the stateless reflector has an address port of 4.4.4.4 4444. It is understood that the STUN server and or stateless reflector may have multiple addresses ports.

Referring to and with additional reference to in step the endpoint sends a packet to the stateless reflector . The packet contains header information identifying the source as the endpoint or rather the external IP address of the NAT device and the destination as the stateless reflector . The packet also contains custom or supplemental header information identifying the source as the STUN server and the destination as the endpoint . Accordingly the IP UDP header of the packet sent from the endpoint via the NAT device identifies its source as 1.1.1.1 1111 and its destination as 4.4.4.4 4444.

In step the stateless reflector modifies the packet header by replacing the IP UDP header with the source and destination from the custom header. In the present example the stateless reflector will modify the IP UDP header to identify the packet s source as 3.3.3.3 3333 and its destination as 2.2.2.2 2222. Identifying the packet s source as the STUN server enables the stateless reflector to send the packet through the pinhole in the NAT device that was created when the endpoint logged on. After modifying the header the stateless reflector sends the packet to the endpoint via the NAT device in step .

In step the endpoint sends an acknowledgement e.g. a 200 OK directly to the endpoint . The address of the endpoint is contained within the payload of the packet. The endpoint is able to send the acknowledgement directly because the NAT device is either a no NAT or a full cone type. Because the endpoint has opened a pinhole through the restricted or port restricted NAT device to the endpoint by sending a message to the endpoint the endpoint is now able to communicate directly with the endpoint as indicated by step .

Referring again to table of if the originating NAT type is either a no NAT type or a full cone type then the originating NAT can establish communications with a terminating NAT type that is symmetric only after using the stateless reflector to reflect a packet and then performing a port capture. This process is described below with respect to .

Referring to steps and are similar to the reflection process described with respect to and will not be described in detail in the present example. Because the terminating NAT type is symmetric the originating NAT needs the port of the terminating NAT in order to send packets through the NAT device . Accordingly in step the endpoint will capture the external port used by the NAT device to send the acknowledgement in step . This port along with the address of the NAT device may then be used when communicating with the endpoint as indicated by step .

Referring again to table of if the originating NAT type is either a restricted cone type or a port restricted cone type then the originating NAT can establish communications with a terminating NAT type that is either restricted or port restricted by using a fake packet and then using the stateless reflector to reflect a packet. This process is described below with respect to .

Referring to in step the endpoint sends a fake packet to the endpoint . Because the originating NAT type is a restricted cone type or a port restricted cone type the fake packet opens a pinhole to the terminating NAT that will allow a response from the terminating NAT to penetrate the originating NAT. After sending the fake packet the sequence proceeds with steps and which are similar to the reflection process described with respect to and will not be described in detail in the present example. The endpoints and may then communicate directly as indicated by step .

Referring again to table of if the originating NAT type is a symmetric type then the originating NAT can establish communications with a terminating NAT type that is either no NAT or full cone after a port capture occurs. This process is described below with respect to .

Referring to in step the endpoint symmetric NAT type sends a message to the endpoint . In step the endpoint captures the external port used by the NAT device in sending the message. This port along with the address of the NAT device may then be used when communicating with the endpoint directly as indicated by step .

Referring again to table of if the originating NAT type is a restricted cone type then the originating NAT can establish communications with a terminating NAT type that is symmetric by using a fake packet reflecting a packet using the stateless reflector and then performing a port capture. This process is described below with respect to .

Referring to in step the endpoint sends a fake packet to the endpoint . Because the originating NAT type is a restricted cone type the fake packet opens a pinhole to the terminating NAT that will allow a response from the terminating NAT to penetrate the originating NAT. After sending the fake packet the sequence proceeds with steps and which are similar to the reflection process described with respect to and will not be described in detail in the present example. In step the endpoint captures the external port used by the NAT device in sending the acknowledgement in step . This port along with the address of the NAT device may then be used when communicating with the endpoint directly as indicated by step .

Referring again to table of if the originating NAT type is a symmetric type then the originating NAT can establish communications with a terminating NAT type that is a restricted cone type by using a reflect a fake packet and a port capture. This process is described below with respect to .

Referring to steps and are similar to the reflection process described with respect to and will not be described in detail in the present example. In step in response to the reflected message from the endpoint the endpoint sends a fake packet to the endpoint . Because the terminating NAT type is a restricted cone type the fake packet opens a pinhole to the endpoint to allow messages from the endpoint to traverse the NAT device . Accordingly in step the endpoint can send the next message directly to the endpoint through the pinhole. In step the endpoint captures the external port used by the NAT device to send the message in step . This port along with the address of the NAT device may then be used by the endpoint when communicating directly with the endpoint as indicated by step .

Referring again to table of if the originating NAT type is a symmetric type and the terminating NAT type is a port restricted cone or if the originating NAT type is a port restricted cone and the terminating NAT type is symmetric then all signaling between the two NAT devices is relayed via the stateless reflector while media is transferred via peer to peer as described previously. If both the originating and terminating NAT types are symmetric then all signaling and media are relayed via the stateless reflector .

Accordingly the peer to peer communications described herein may be achieved regardless of the NAT type that may be used by an endpoint. The stateless reflector need not know the information for each client but instead reflects various packets based on information contained within the packet that is to be reflected. Both the custom header and payload may be encrypted for security purposes. However the stateless reflector may only be able to decrypt the custom header and the payload itself may only be decrypted by the terminating endpoint. This enables the stateless reflector to perform the reflection functionality while maintaining the security of the payload itself. As described above not all processes for traversing a NAT device may use the stateless reflector .

Referring to in another embodiment a peer to peer environment includes the two endpoints and the two NAT devices and and the stateless reflector of and another endpoint . Also illustrated are three possible routes between endpoints a private pr route a public pu route and a reflected rl route . illustrates the routes and between the endpoint and the endpoint and illustrates the routes between the endpoint and the endpoint . As will be discussed below in detail the endpoints and may contain logic that allows one of the three routes and to be selected in a dynamic and flexible manner rather than relying on the rule based system described above.

A rule based system may be fairly inflexible as such a system generally has a clear set of rules that are defined for various NAT situations and the current relationship between the two endpoints is handled according to those rules. Network configuration changes and other modifications may require revisions to the rules which is not convenient and may prevent the endpoints from communicating until the rules are revised. Accordingly in some embodiments the flexibility described below may enable the endpoints and to adapt to new network configurations without requiring updated rules as would be required in a strictly rule based system. In still other embodiments the logic within the endpoints and may be updated to handle new network configurations which also provides flexibility not found in strictly rule based systems.

Each endpoint and may include one or more virtual interfaces for communication with other endpoints. In the present example there are three virtual interfaces including a private virtual interface corresponding to the private route a public virtual interface corresponding to the public route and a relay virtual interface corresponding to the relay route . It is understood that the term virtual interface is used only for purposes of description to clarify that there are multiple possible routes. Accordingly the term virtual interface need not denote separate physical network interfaces on an endpoint but may use a single physical network interface.

As described above each endpoint and is generally associated with two IP address port pairs. The first IP address port pair may be the local i.e. private IP address port information that represents each of the endpoints and in the network that is inside the corresponding NAT device or . For example the first IP address port pair for the endpoint may be the physical address assigned to the endpoint by the corresponding NAT device . This first IP address port pair corresponds to the private virtual interface and may provide access via the private route to the endpoint by endpoints in the same local network e.g. the endpoint . The second IP address port pair may be the public IP address port information that represents each of the endpoints and in the network that is outside the corresponding NAT device or . For example the second IP address port pair for the endpoint may be the address that is returned to the endpoint by the STUN server as previously described e.g. the NAT s external IP address port pair assigned to the endpoint . This second IP address port pair for the endpoint corresponds to the public virtual interface and may provide access via the public route to the endpoint by endpoints both inside and outside the endpoint s local network. Each endpoint and is also aware of the address information of the reflector as described in previous embodiments which corresponds to the relay virtual interface of the endpoints. The relay route may be used in 5 4 4 5 and or 5 5 conditions according to the table of where one endpoint must send a packet first but is unable to do so because the other endpoint must send a packet first.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur between the endpoints and of when identifying which of the routes i.e. the private route the public route and the relay route will be used for communications. In the present example the endpoints and are in a local i.e. private network such as an Enterprise network a local area network LAN a virtual LAN VLAN or a home network. This local network is isolated from the public network by the NAT device or a similar network component. Although shown as a single NAT device it is understood that the NAT device may be a separate NAT device for each of the endpoints and . In contrast the endpoint is in a separate network that is only accessible by the endpoints and via a public network that forms all or part of the packet network .

The present example uses a SIP messaging model over UDP and so accommodates the transaction based SIP model within connection less UDP messaging. Because UDP is not transaction based certain message handling processes may be used to conform to SIP standards such as discarding multiple messages when the SIP model expects a message belonging to a specific transaction. However it is understood that the sequence may be implemented using many different messaging models. In the present example neither endpoint is online at the beginning of the sequence and the endpoints and are buddies. As described above buddies are endpoints that have both previously agreed to communicate with one another.

In steps and the endpoints and respectively send STUN requests to obtain their corresponding public IP address port pairs NATIP NATPort . In the present example the reflector is serving as a STUN server but it is understood that the STUN server may be separate from the reflector. The reflector responds to the STUN requests with the public IP address and port information for each of the endpoints and in steps and respectively.

As the two endpoints and are not logged in when the present example begins they must both authenticate with the access server . In step the endpoint sends an authentication request to the access server with its private and public IP address port pairs. In step the access server responds to the authentication request and as described previously returns information that includes the private and public IP addresses of any buddy endpoints that are currently logged in. However as the endpoint has not yet logged in the information received by the endpoint from the access server will not include any address information for the endpoint .

In step the endpoint sends an authentication request to the access server with its private and public IP address port pairs. In step the access server responds to the authentication request and as described previously returns information that includes the private and public IP addresses of any buddy endpoints that are currently logged in. As the endpoint is currently logged in the information received by the endpoint from the access server will include the private and public address information for the endpoint . Although not shown the endpoint may then send a message to the endpoint informing the endpoint that the endpoint is currently online. This message may contain the private and public address information of the endpoint . The message may be sent via the three different routes as described below with respect to later messaging or may be sent via one or more selected routes. For example the message may only be relayed i.e. sent via the relay route due to the high chance of success of that route.

At this point the endpoint wants to establish a communication session with the endpoint but does not know which of the three routes i.e. pr pu and rl should be used. In the previously described rule based system the endpoint would publish its NAT information which enables the endpoint to determine how to establish a connection. However in the present example such information is not published and the endpoint does not know whether the endpoint is in the same private network as the endpoint whether the endpoint is only accessible via a public network whether the endpoint is behind a NAT device or if the endpoint is behind a NAT device the settings of the NAT device full cone port restricted etc. . Accordingly the endpoint needs to dynamically determine which of the three routes to use with the endpoint .

Accordingly in step the endpoint interacts with the endpoint to determine which of the three routes should be used to send messages to the endpoint . Similarly in step the endpoint interacts with the endpoint to determine which of the three routes should be used to send messages to the endpoint which may not be the same route as that used by the endpoint to send messages to the endpoint . Steps and are illustrated in greater detail below with respect to . In step the two endpoints communicate via the determined route s .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur during steps and of in order to determine which of the routes are to be used. The endpoint may keep a table containing each buddy that is online and the route to be used for that buddy. For example when the route is unknown the table may have the information shown in Table 1 below 

The endpoint which is the originating endpoint in the present example sends out three presence messages in steps and . As the current example uses SIP messaging transported via UDP the message is a SIP INFO message. More specifically in step the endpoint sends a SIP INFO message to the private IP address port pair of the endpoint i.e. via the private route with an identifier such as a pr tag to indicate the route. In step the endpoint sends a SIP INFO message to the public NAT IP address port pair of the endpoint i.e. via the public route with an identifier such as a pu tag to indicate the route. In step the endpoint sends a SIP INFO message to the endpoint via the reflector i.e. via the relay route with an identifier such as an rl tag to indicate the route which is reflected to the endpoint in step .

The order in which the messages are sent may vary but the order follows a hierarchy of desired routes in the present embodiment that places the private route first i.e. most desirable the public route next and the relay route last i.e. least desirable . However it is understood that the order in which the messages are sent may vary or if the endpoint is capable of sending multiple messages simultaneously the messages may be sent at the same time.

The present example assumes that the endpoint receives one or more of the messages sent in steps and . If more than one message is received the endpoint may respond only to the first one received. So for example if the message sent via the private route is received before the messages sent via the public and relay routes the endpoint will respond only to the private route message and the later messages will be ignored. This reduces network traffic and provides for SIP compliance as the endpoint from a SIP perspective expects to receive a single 200 OK message in response to its SIP INFO message. Furthermore the response message may be sent back along the same route as the presence message to which the response is directed. So a response to the private route message will be sent back along the private route. Accordingly only one of steps A B and C may occur in the present example. Step C is dependent on the occurrence of step C because the response message will not be reflected unless the relay route is used.

The response message returned by the endpoint is a SIP 200 OK message that may include the tag extracted from the received INFO message to identify which of the routes was successful e.g. which route carried the message that was received first . For purposes of example the private route was successful and the table may then be updated as shown in Table 2 below 

It is noted that since the private route is successful the two endpoints and are in the same private network.

It is understood that the response message e.g. the SIP 200 OK may never be received by the endpoint . For example the private route may not be available from the endpoint to the endpoint due to network configuration settings. Accordingly if the SIP 200 OK is not received by the endpoint the endpoint may execute a retransmission process that resends the presence messages along the three routes. The resending may occur a set number of times for a set period of time or until some other limit is reached. For example the first set of presence messages may be sent 0.5 seconds after the initial messages are sent the second set of messages may be sent one second after that and each additional set of messages may be sent at time periods that are double the previous delay until a total of seven sets of messages are sent. At this time the endpoint may stop sending messages. If a response is received during the retransmission process the endpoint will stop retransmitting. However the response message will generally be received by the endpoint .

The outbound SIP INFO messages and the received SIP 200 OK message inform the endpoint of which route to use when sending communications to the endpoint . However this route may not work in reverse. In other words just because the endpoint can reach the endpoint via the private route to continue the example it does not necessarily follow that the endpoint can reach the endpoint using the same route. For example differences in the configurations of NAT devices or other network differences may mean one endpoint can be reached via a particular route even if the reverse route is not available.

Accordingly the endpoint sends out three presence messages in steps and . As the current example uses SIP messaging transported via UDP the message is a SIP INFO message. More specifically in step the endpoint sends a SIP INFO message to the private IP address port pair of the endpoint i.e. via the private route . In step the endpoint sends a SIP INFO message to the public NAT IP address port pair of the endpoint i.e. via the public route . In step the endpoint sends a SIP INFO message to the endpoint via the reflector i.e. via the relay route which is reflected to the endpoint in step .

The present example assumes that the endpoint receives one or more of the messages sent in steps and . If more than one message is received the endpoint may respond only to the first one received. Accordingly only one of steps A B and C may occur in the present example. Step C is dependent on the occurrence of step C because the response message will not be reflected unless the relay route is used. The response message returned by the endpoint is a SIP 200 OK message that identifies which of the routes was successful e.g. was received first .

If the first or only SIP INFO message received by the endpoint from the endpoint is received via the same route as that used by the endpoint to send messages to the endpoint e.g. the private route then the communication session is established with messages going both ways on that route. At this point the table may then be updated as shown in Table 3 below 

However the first or only SIP INFO message received by the endpoint from the endpoint may be received on a different route than that used by the endpoint to send messages to the endpoint . When this occurs the endpoint flags this as the endpoint responded to the INFO message via one route but is now communicating via another route. For example the endpoint responded on the private route but is now using the public route. One possibility for this discrepancy is that there is a router or other network device interfering with the return path i.e. the path used by the endpoint to send messages to the endpoint . Another possibility is that a message went faster one way than another way. For example while the endpoint may have received the private message from the endpoint i.e. the message of step of before the other messages the endpoint may have received the public message from the endpoint i.e. the message of step of before the public and relay messages.

When this occurs the endpoint may transition from the private route to the public route. This results in sending and receiving routes of pu pu as illustrated by Table 4 below 

The endpoint may also be configured to confirm that this transition is correct. To confirm the transition the endpoint executes a confirmation process and sends a confirmation message to the endpoint on the private route i.e. the route that the endpoint thinks it should be using to send messages to the endpoint . In the present example the confirmation message may include a SIP field named MAX FORWARDS that defines a maximum number of hops that a packet can take before being dropped. The MAX FORWARDS field has a standard default value of seventy but the endpoint may set the value to one i.e. MAX FORWARDS 1 . If the response message from the endpoint is received by the endpoint and has set the MAX FORWARDS field to 0 then the endpoint transitions back to the private route and uses that route for sending future messages. This results in different sending and receiving routes as illustrated by Table 5 below 

However if the endpoint does not receive a response message to its confirmation message it continues using the public route. This results in sending and receiving routes of pu pu as illustrated by Table 4 above.

Communications between the endpoints and as illustrated in may follow the same sequence of presence messages and responses as that described above with respect to . However since the endpoints and are in separate networks i.e. not the same local network the private route is not available and the private presence messages will fail to reach their destination. The presence messages may still be sent each way on the private route as the endpoints and do not know the location of the other endpoint but the messages will be dropped. For example the NAT devices and may both be routers that have an address of 192.168.1.1 in their respective home networks. The NAT device may assign a private address of 192.168.1.10 to the endpoint and the NAT device may assign a private address of 192.168.1.15 to the endpoint . Although these addresses appear to be in the same local network they are not. However as the endpoints and have no way of knowing whether the private addresses are in the same local network until they perform their strategic routing sequences they may both send their private presence messages along the private route even though the messages will both fail. Accordingly the endpoints and will use the public route and or the relay route when communicating.

Referring to a flowchart illustrates one embodiment of a method that may represent a process by which an endpoint such as the endpoint of establishes a connection with another endpoint as described with respect to above.

In step the endpoint sends outbound presence messages on the private public and relay routes. The presence messages may contain identifiers such as tags or other route indicators or the receiving endpoint may simply note which virtual interface i.e. pr pu or rl received a particular presence message and correlate the message with the route upon receipt. In step the endpoint receives a response message that indicates which of the presence messages was received first. For example the response message may include the tag from the presence message to identify the route corresponding to the received presence message. In step the endpoint selects the identified route as the initial outbound route for messages being sent to the other endpoint.

In step the endpoint receives one or more inbound presence messages from the other endpoint. In step the endpoint sends a response to the first received inbound presence message.

In step the endpoint determines whether the inbound route of the message received in step is the same route as the initial outbound route selected in step . If the routes are the same the method continues to step and uses the initial outbound route to send messages to the other endpoint. If the routes are not the same the method moves to step and sends a confirmation message to the other endpoint using only the initial outbound route. In step the endpoint determines whether a response to the confirmation message has been received. If no response to the confirmation message has been received the method moves to step and transitions to the inbound route as the new outbound route for messages being sent to the other endpoint. If a response to the confirmation message has been received the method continues to step and uses the initial outbound route to send messages to the other endpoint.

In step the endpoint may begin sending keep alive messages to the other endpoint to ensure that the outbound route remains open. For example one of the networks or NAT devices involved in the established session may undergo a configuration change or a failure while the two endpoints are online and so an existing route may become unusable. In such a case the endpoint may detect that the keep alive messages are failing and so may return to step to re establish a valid route. It is noted that the other endpoint may not need to re establish its outbound route. For example if the inbound and outbound routes for the endpoint are different the inbound route may remain valid even though the outbound route is invalid. Accordingly some steps of the method may be skipped in some scenarios.

It is noted that many different variations of the method may exist. For example the endpoint may transition to the inbound route as the new outbound route if it is determined in step that the routes are not the same rather than remaining on the initial outbound route. Then if a response is received to the confirmation message the endpoint may transition back to the initial outbound virtual interface. Furthermore as stated previously the response message may never be received by the endpoint and so some steps of the method may not occur or may occur in a different order as there may be no response message available to determine the initial outbound route. It is also noted that some steps of the method may be performed in a different order than shown. For example step may occur before step depending on network latency and other factors.

Referring to in another embodiment the endpoints and the two NAT devices and and the stateless reflector of are illustrated with a tunneling server or other access device and another endpoint . The tunneling server may provide access to other endpoints for an endpoint that does not have UDP access or access to another expected protocol. For example if the endpoint performs a STUN request and the request fails the network within which the endpoint is positioned may not support UDP e.g. the network may be an Enterprise network that has disabled UDP . For purposes of illustration the endpoints and are in a private network and not separated by the NAT device and the endpoint is separated from the endpoint by the NAT devices and .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of to establish a connection between the endpoints and . As with the previous discussion of the endpoints and may each maintain a table although this is not shown in the present example.

In step the endpoint sends a STUN request that fails. Based on the failure of the STUN request the endpoint determines that the network e.g. the NAT device has disabled UDP. It is understood that other indicators may be used to determine that UDP is not available. In step based on the unavailability of UDP the endpoint opens a TCP IP connection i.e. a tunnel with the tunneling server . This connection may use a port such as port of the NAT device which is the default TCP port for HTTP Secure HTTPS connections using the Transport Layer Security TLS or Secure Socket Layer SSL protocols. However it is understood that port is only an example and that other available ports may be used. In step the endpoint requests a shadow IP address and shadow port on the tunneling server . In step the tunneling server creates the shadow IP address and port and returns this information to the endpoint in step .

The shadow IP address and shadow port serve as the public address and port of the endpoint for other endpoints. In other words the shadow IP address port replace the NAT IP address port that would serve as the public contact information for the endpoint in an environment in which UDP is available to the endpoint e.g. as in . In some embodiments the shadow IP address port pairs may be placed on a shadow list as they are provisioned and the shadow list may be available to the access server and or endpoints. In other embodiments the access server and or endpoints may have a list or range of IP addresses ports that are known to be shadows. In still other embodiments the knowledge of whether an IP address port is a shadow is not available to the access server and or endpoints.

In step the endpoint authenticates with the access server via the tunnel using its local IP address port and shadow address port information. In step the access server authenticates the endpoint and sends the endpoint the contact information of online buddies including corresponding private public and shadow IP address port information.

Although not shown in the endpoint sends a request to a STUN server and receives its public IP address port information as described with respect to the endpoints and in . Since the endpoint is successful with its STUN request it does not need to use the tunneling server . In steps and the endpoint authenticates with the access server and receives the private IP address port and shadow IP address port of the endpoint . As discussed above the endpoint may or may not know that the endpoint is using a shadow depending on the particular implementation of the shadow list.

In steps and the endpoints and may establish a communication session as described previously with respect to . However the communications between the two endpoints and will use the tunnel between the endpoint and the tunneling server and the corresponding shadow IP address and port for the endpoint .

In embodiments where the endpoint knows that the endpoint is using a shadow the endpoint may not send a presence message via the private route as the endpoint knows that the private route is not available. In other embodiments the endpoint may send a presence message via the private route even though the route is not available.

Communications between the endpoints and as illustrated in may follow a similar sequence of presence messages and responses as that described above with respect to . However since the endpoints and are in the same local network the private route is available and the private presence messages may reach their destinations. The endpoint may not use a relay message to try to reach the endpoint since its failed STUN request will inform the endpoint that UDP is not available. In order to use the public and relay routes the endpoint will create a tunnel with the tunneling server as described above with respect to the endpoint . The public and relay messages may still work via the respective tunnels of the endpoints and .

Referring to in another embodiment an environment is illustrated in which an endpoint e.g. the endpoint of may communicate with a device that is not an endpoint. For example the device may not contain the endpoint engine described with respect to and may be unable to login to a peer to peer network associated with the access server and or may be unable to communicate directly with the endpoint due to the lack of required endpoint functionality. In some embodiments the device may be in a restricted environment in which case it may not be possible to provide the endpoint engine to the device due to the restrictions. For example the device may be a television set top box and such boxes are generally restricted environments that are closed to applications such as are needed for endpoint functionality. In other embodiments the device may not be capable of supporting the endpoint engine . For example the device may lack sufficient memory and or processing power for the endpoint engine and or may not have a suitable communications link. For example the device may be a television that is not capable of providing the needed environment for the endpoint engine .

In the present example a third party system handles communications to and from the device . The third party system may be any type of system and need not be ordinarily configured for communications with a device such as the endpoint . For example the device may be a television or a television set top box a tablet such as those commonly used by delivery services a cellular telephone or any other device capable of interacting with a user to receive input data from the user and or send output data to the user. The device may also represent a combination of other devices such as a television and television set top box combination with the television providing display and audio output for the set top box and input occurring via a remote control or other input device. It is understood that if the device does not have an output component e.g. a screen and or speaker and or some type of input device then the third party system may provide such functionality to the device.

The third party system may be a black box from the perspective of the peer to peer network components such as the endpoint and the access server . However although the third party system may be a black box in terms of its internal operation it may provide an Application Programming Interface API that enables an exterior system to communicate with the third party system. In some embodiments the third party system may be a proprietary system in which case the API may be provided by an operator of the third party system .

As is described below in greater detail the API of the third party system enables external systems and devices e.g. the endpoint to communicate with the third party system and devices internal to the third party system such as the device . Because the API is known communications between the endpoint and the device may be converted i.e. reformatted as needed. The third party system and or components within the peer to peer network may handle such conversions. This allows the device to behave as an endpoint without actually having the endpoint functionality that is on an endpoint such as the endpoint .

To facilitate communications between the endpoint and the device a peer to peer shadow server is provided. Although the shadow server may be configured in many different ways in the present example the shadow server may include a virtualized endpoint management module VEMM . The VEMM may maintain a list of mapped endpoints that represent devices that are not themselves endpoints such as the device . The mapped endpoints may be controlled in many different ways. For example the mapped endpoints may only include devices that are registered with the VEMM . In another example the mapped devices may be any devices that are accessible via the third party system . In still another example the mapped devices may be any devices that are accessible via the third party system that meet certain criteria e.g. have defined input and output capabilities or are subscribers of a service .

Each of the mapped endpoints represents a device that is able to interact with a real endpoint e.g. the endpoint that contains the needed functionality to perform as an endpoint such as the endpoint engine via the VEMM . For each of the mapped endpoints the VEMM provides a virtual endpoint that represents the mapped endpoint in the peer to peer network. Accordingly in the present example the device is a mapped endpoint that is represented by a virtual endpoint . It is understood that in the present embodiment the device may exist without a corresponding mapped endpoint but the mapped endpoint may not exist without the device . As the device may be one of many different devices or combinations of devices as described above it will frequently be referred to as the mapped endpoint in the following examples. From an operational perspective the VEMM may deal with the mapped endpoint rather than with the device .

The shadow server may be coupled to other components of a peer to peer environment such as the access server of a reflector STUN server such as the reflector of and a tunneling server such as the tunneling server of . As these are described in detail above and or in the text as incorporated by reference they are not described further in the present example. It is understood that the shadow server has access to servers just as the endpoint has access to such servers and the shadow server may use these servers when needed e.g. to authenticate a user or to perform NAT traversal functions .

In the present example the shadow server e.g. via the VEMM is coupled to the third party system via a signaling media interface that provides a head end signaling interface for handling signaling and a media transfer interface for handling media e.g. video audio and or data . Although shown as a separate component of the environment the signaling media interface may be part of the shadow server or part of the third party system . It is understood that the signaling media interface may not be configured as shown but provides the functionality needed to handle the signaling and media traffic of an endpoint as described previously.

In some embodiments the media signaling interface may not be needed and may be bypassed for some or all communications. In this case the following embodiments may be similar except that the media signaling interface may be removed. In still other embodiments the VEMM may only instantiate the virtual endpoint and may not be part of the communications after the instantiation is complete. In this case the following embodiments may be similar except that the VEMM may be removed except for virtual endpoint instantiation.

The VEMM may handle virtual client instantiation and management and may also handle traffic to and from the mapped endpoint . In some embodiments all signaling and media traffic may pass through the VEMM to and from the signaling media interface while in other embodiments one or both of the signaling and media traffic may pass directly between the virtual endpoint and the signaling media interface without passing through the VEMM . For example signaling traffic between the virtual endpoint and the signaling media interface may pass through the VEMM while media traffic may bypass the VEMM and go directly between the virtual endpoint and the signaling media interface .

In the following examples the peer to peer network may be based on a SIP messaging model over UDP while the third party system may use an entirely different proprietary or non proprietary protocol or set of protocols that is incompatible with the SIP UDP model. For example if the device is a television and is responsive only to satellite or cable television signals provided by the third party system then the device is not compatible with messaging using the SIP UDP model. Accordingly the signaling media interface or another component of the peer to peer network and or the third party system may handle the conversions and formatting needed in order for the peer to peer network and the third party system to communicate despite the differing protocols.

Although single components of the peer to peer network are illustrated in it is understood that multiple components may be used. For example multiple shadow servers may be used for load balancing and or other purposes and so the present disclosure is not limited to the configuration shown.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of when the device logs into the peer to peer network. In the present example the endpoint is a buddy to the mapped endpoint and or the virtual endpoint and so each has already authorized communications from the other buddy as described in previous embodiments. Furthermore the endpoint has already logged into the peer to peer network and is online prior to the initial step of the message sequence or at least prior to step . It is understood that all of the communications between the VEMM and the mapped endpoint may go through the third party system although the third party system is not explicitly shown in . Accordingly the communications may be converted or otherwise manipulated as needed in order to provide output to and to receive input from the device .

In step the mapped endpoint sends a login request to the signaling interface . In step the signaling interface passes the request to the VEMM . The signaling interface may simply pass the request on to the VEMM or may reformat the request as needed. It is understood that in some embodiments the mapped endpoint may not actually be mapped until the request is received by the VEMM . For example the device may send the request and when the request is received by the VEMM the VEMM may then map the device . Alternatively the mapping may exist prior to the request and the VEMM may view the request as being received from the mapped endpoint .

In step the VEMM determines whether a virtual endpoint already exists for the mapped endpoint . For example the mapped endpoint may have lost communication and may log in after restoring communication. If the virtual endpoint has remained alive during this time the VEMM may associate the current login request with the existing virtual endpoint and not create a new endpoint. If no virtual endpoint exists as determined in step the VEMM creates the virtual endpoint assuming sufficient memory and other technical requirements are met in step and receives confirmation of its creation in step . In the present example the virtual endpoint is an instanced endpoint that exists in the memory of the server once instantiated by the VEMM .

The virtual endpoint may return a value or other indicator to the VEMM indicating that it was successfully instantiated and is ready for use. If the instantiation fails a message may be returned to the device that the virtual endpoint cannot be created. This message may indicate simply that the login failed or may provide more detailed information. The instance may be destroyed when the mapped endpoint logs off or may be maintained based on settings of the VEMM . In the present example the virtual endpoint has the same capabilities as a real endpoint and so may perform the same functions as the endpoints described in previous embodiments. It is understood however that in some embodiments the functionality of the virtual endpoint may be limited by configuration or security settings of the shadow server and or the third party system .

In steps and the VEMM may send a message to the mapped endpoint to display a login screen. For example the message from the VEMM may notify the third party system that it needs to provide a particular display to the mapped endpoint . The third party system may then provide the needed display. This may happen in environments where the device is a device such as a television where the login window may be a video overlay that appears on the television screen. The instructions may prompt the cable or satellite operator to provide the video overlay using the cable or television equipment coupled to the television and controlled by the operator. In other embodiments the VEMM may send instructions to the mapped endpoint instructing the mapped endpoint to display the login screen. Accordingly the actual display process and the particular instructions may depend on the implementation of the device and the third party system .

In steps and the mapped endpoint provides login information e.g. user name and authentication information as previously described to the VEMM . In step the VEMM provides the login information to the virtual endpoint .

In step the virtual endpoint contacts the reflector and requests the public IP address and port information of the virtual endpoint. The process of obtaining this information and possible uses for this information are described in previous embodiments and are not described in detail in the present example. It is noted that step may occur without input from mapped endpoint as this step may rely on endpoint functionality of which the mapped endpoint is unaware. In step the virtual endpoint receives the public IP address and port information from the reflector .

In step the virtual endpoint logs into the access server by providing its username password local NAT IP address and port information and public IP address and port information to the access server. If the authentication fails a message may be sent by the virtual endpoint to the mapped endpoint indicating that the login has failed. In step the access server sends the buddy list associated with the login information to the virtual endpoint as described previously. In step the virtual endpoint sends the buddy list to the VEMM .

In steps and the VEMM sends a message to the mapped endpoint via the signaling interface to display the buddy list. For example the message from the VEMM may be used by the third party system to display the buddy list based on user interface elements provided or controlled by the third party system or the mapped endpoint .

In step the virtual endpoint sends a presence message to the endpoint to inform the endpoint that the mapped endpoint is online. In the present example the message is a SIP presence message and in step the endpoint responds with a 200 OK to the virtual endpoint . Although SIP is used for purposes of example it is understood that many different types of messaging may be used and the presence message and reply may not be SIP messages. In step the virtual endpoint informs the VEMM that the endpoint is online and in steps and the VEMM sends a message to the mapped endpoint via the signaling interface to indicate that the endpoint is online. In some embodiments steps and may not occur as the endpoint is online prior to the login of the mapped endpoint and will be in the buddy list with an online status when the buddy list is returned to the mapped endpoint.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of after the mapped endpoint is logged into the peer to peer network via the virtual endpoint . In the present example the mapped endpoint and the endpoint are buddies and have already approved communications as described in previous embodiments. In the present example the mapped endpoint is to place an audio call to the endpoint .

In steps and the mapped endpoint sends a message to the VEMM via the signaling interface to place the call. In step the VEMM forwards the message with or without additional formatting to the virtual endpoint . In step the virtual endpoint places the call by sending a message to the endpoint . In the present example the message is a SIP INVITE message. In step the endpoint responds to the virtual endpoint with a 200 OK message or another type of response message depending on the messaging type used to accept the call. If the call were to be rejected by the endpoint the following steps would denote rejection rather than acceptance.

In step the virtual endpoint sends a message to the VEMM notifying the VEMM that the call has been accepted by the endpoint . The message sent by the virtual endpoint may be the 200 OK message itself or may be another message. In steps and the VEMM sends a message to the mapped endpoint via the signaling interface that the call has been accepted and this is displayed on a user interface of the mapped endpoint.

In the present example the call may then proceed with audio encapsulated data passing between the mapped endpoint and the media interface as shown by arrow audio encapsulated packets passing between the media interface and the virtual endpoint as shown by arrow and data based on the real time transport protocol RTP or another suitable protocol passing between the virtual endpoint and the endpoint as shown by arrow . In some embodiments the audio encapsulated data may be in packet format depending on the messaging system used by the third party system and the device . For example if the device is a television and the third party system is a cable television company the messaging type for arrow would be compatible with cable television and may include overlays generated by a set top box or other controller for display on the television. If the device is a cellular telephone e.g. a phone based on a network protocol such as the Global System for Mobile Communications GSM or Code Division Multiple Access CDMA or another device that uses a cellular network and the third party system is a cellular telephone provider the messaging type would be compatible with the network type and the particular device.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of after the mapped endpoint is logged into the peer to peer network. In the present example the mapped endpoint and the endpoint are buddies and have already approved communications as described in previous embodiments. In the present example the mapped endpoint is to receive an audio call placed by the endpoint .

In step the endpoint sends a SIP invite message or other message depending on the messaging type being used to the virtual endpoint . In step the virtual endpoint sends the call request to the VEMM . The call request may be the SIP message itself or may be another message indicating that a call request has been received from the endpoint . In steps and the call request is forwarded to the mapped endpoint .

In step the mapped endpoint responds to the call request by rejecting or accepting the call. In the present example the request is accepted and the acceptance is passed to the virtual endpoint via the signaling interface and VEMM in steps and . In step the virtual endpoint sends a 200 OK message to the endpoint indicating that the mapped endpoint has accepted the call.

In the present example the call may then proceed with audio encapsulated data passing between the mapped endpoint and the media interface as shown by arrow audio encapsulated packets passing between the media interface and the virtual endpoint as shown by arrow and data based on RTP or another suitable protocol passing between the virtual endpoint and the endpoint as shown by arrow .

Referring again to in another embodiment three devices and correspond to mapped endpoints and respectively. The mapped endpoints are associated with virtual endpoints and respectively. As illustrated in the mapped endpoints and may communicate with one another via their respective virtual endpoints and . This enables the devices and which are not real endpoints to communicate via the peer to peer network in a manner similar to that of the device . The connection between the virtual endpoints and may route out of and back into the shadow server as illustrated by line or may occur internally as illustrated by line . It is understood that generally only one of lines or would exist. In the environment of the virtual endpoint is also coupled to the endpoint . For example the virtual endpoint may be anchoring a conference call with the virtual endpoint and the endpoint . Accordingly a virtual endpoint may behave like a real endpoint and have many different connections to other virtual and real endpoints.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of after the mapped endpoints and are logged into the peer to peer network. In the present example the mapped endpoints and are buddies and have already approved communications as described in previous embodiments. In the present example the mapped endpoint is to place a call to the mapped endpoint .

In steps and the mapped endpoint sends a message to the VEMM via the signaling interface to place the call. In step the VEMM forwards the message with or without additional formatting to the virtual endpoint . In step the virtual endpoint places the call by sending a message to the virtual endpoint . In the present example the message is a SIP INVITE message.

In step the virtual endpoint sends the call request to the VEMM . The call request may be the SIP message itself or may be another message indicating that a call request has been received from the virtual endpoint . In steps and the call request is forwarded to the mapped endpoint .

In step the mapped endpoint responds to the call request by rejecting or accepting the call. In the present example the request is accepted and the acceptance is passed to the virtual endpoint via the signaling interface and VEMM in steps and . In step the virtual endpoint sends a 200 OK message to the virtual endpoint indicating that the mapped endpoint has accepted the call.

In step the virtual endpoint sends a message to the VEMM notifying the VEMM that the call has been accepted by the virtual endpoint . The message sent by the virtual endpoint may be the 200 OK message itself or may be another message. In steps and the VEMM sends a message to the mapped endpoint via the signaling interface that the call has been accepted and this is displayed on a user interface of the mapped endpoint.

In the present example the call may then proceed with audio encapsulated data passing between the mapped endpoint and the media interface as shown by arrow and audio encapsulated packets passing between the media interface and the virtual endpoint as shown by arrow . Similarly audio encapsulated data passes between the mapped endpoint and the media interface as shown by arrow and audio encapsulated packets pass between the media interface and the virtual endpoint as shown by arrow . Data based on RTP or another suitable protocol passes between the virtual endpoint and the virtual endpoint as shown by arrow .

Although not shown in the virtual endpoint may add the endpoint to the call as described with respect to . This enables the virtual endpoint to establish a conference call with both virtual and or real endpoints.

Accordingly described above are embodiments illustrating how one or more virtual endpoints can be provided in a peer to peer network so that devices that are not themselves endpoints can communicate as peers within the network. Each virtual endpoint may have the same capabilities as a real endpoint and so may perform the same functions described in previous embodiments. Examples of such endpoint functions are described herein and in previously incorporated U.S. Pat. No. 7 570 636 and U.S. patent application Ser. No. 12 705 925. A mapped endpoint may send messages to the virtual endpoint that are to be passed to other endpoints but the virtual endpoint generally handles all endpoint functionality. In such embodiments the mapped endpoint may be viewed as a dumb terminal from the perspective of the peer to peer network that provides a user interface but provides no actual endpoint functionality.

Referring to in another embodiment an environment is illustrated in which communications between an endpoint e.g. the endpoint of and an endpoint e.g. the endpoint of may be recorded in real time. In the present example the environment includes the access server and a media server . Although shown as separate network components in it is understood that some or all of the functionality of the access server and media server may be combined in a single network component or may be further distributed. Although not shown one or more networks such as the packet network may be used to transfer data between the endpoint endpoint access server and media server .

In the present embodiment the endpoint and the endpoint are in a peer to peer communication session as is described in preceding embodiments. For purposes of example the communication session is an audio video session but it is understood that a communication session as described herein may include audio only video only data e.g. files such as documents and or images and or any other type of information that may be communicated between the endpoints and .

During the recording the endpoint sends e.g. streams all outbound media e.g. outbound information other than signaling information to the media server as indicated by arrow as well as sending it to the endpoint as part of the communication session . Similarly the endpoint sends e.g. streams all outbound media to the media server as indicated by arrow as well as sending it to the endpoint as part of the communication session . It is understood that streaming is used as an example in the present embodiment and the sending may not involve streaming in some embodiments. The access server tracks the recording session information on the media server and provides management capabilities for endpoints and or other network components to access the recording session information as indicated by arrow .

Although shown as one way arrows it is understood that the arrows and may represent two way communications. For example signaling messages for setting up and controlling the recording between each endpoint and and the media server may involve two way messaging in a request acknowledgement environment. Accordingly while the direction of the arrows and indicates the primary path for media i.e. streaming from each endpoint and to the media server some messages may be sent from the media server to one or both endpoints and . Similarly the two way arrows and may represent a substantially one way flow in some embodiments with most messages going one way but at least some messages going in the opposite direction. Arrows in similar figures in the following description represent information flows in the same manner.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of to record the communication session between the endpoint and the endpoint . In the present example the endpoints and are buddies and have already approved communications as described in previous embodiments. Furthermore the communication session between the endpoints and is ongoing at the beginning of the message sequence .

In step the endpoint notifies the access server that the endpoint is going to record the communication session . Although not shown the recording may be initiated by user input. For example the user of the endpoint may press a record button or otherwise notify the endpoint to begin recording. Alternatively the recording may be initiated by the endpoint or by another system component upon the occurrence of a defined event. For example the recording may be started automatically by the endpoint as soon as the communication session is established.

The notification of step may include information to be used by the access server in tracking the recording of the communication session . In the present example the information may include a unique key generated or otherwise known by the endpoint for the communication session . For example in a SIP environment a unique identifier named call ID may be used when the endpoint establishes the communication session with the endpoint . This identifier enables the endpoints and and other network components such as the access server and media server to uniquely identify the communication session and to group communications that are related to that session. Accordingly although call ID is used for purposes of example it is understood that any unique identifier may be used to identify the communication session to the access server . The information may also include the endpoints involved in the call e.g. the endpoint to the endpoint and one or more commands such as START to indicate that recording is to begin.

In step the access server sets up an entry for the endpoint and the communication session . As described previously the access server is not generally involved in an ongoing communication session such as the communication session except for authentication procedures and other described processes such as those needed to add and delete a buddy. Accordingly in the present example the access server is not aware of the communication session until notified by the endpoint . In order to track the recording session the access server sets up the entry in the database of or in another memory. For example the access server may create an entry containing information such as the originating endpoint e.g. endpoint and destination endpoint s e.g. the endpoint the start time of the recording session e.g. 1800 GMT on Aug. 10 2010 and an end time of the session when applicable. The end time may be set to zero or another placeholder until the recording is ended or may be updated by the access server periodically. An example entry is shown below with respect to Table 6 

In step the access server responds to the endpoint . In the present example the signaling occurs via SIP and so the access server responds with a 200 OK message. In addition the access server may send other information needed by the endpoint in starting the recording process such as an IP address of the media server .

In step the endpoint notifies the media server that a recording session is to begin and sends information such as the call ID and call type e.g. audio video or audio video . In step the media server sets up a session file to be used to store media information received for the communication session from the endpoint . In the present example the media server creates one or more tracks for the endpoint in the file. For example the media server may create an audio track and a video track for storing audio information and video information respectively. An example is illustrated in Table 7 below 

In step the media server sends the endpoint a 200 OK message or another message if the environment is not a SIP environment and a port on the media server to be used by the endpoint for the streaming media.

In step the endpoint sends a recording request to the endpoint . The present example provides for consultation which allows the endpoint to reject or accept the recording. For example a notification may be provided to a user of the endpoint that the endpoint is requesting to record the communication session and the user of the endpoint may then press a button to accept or reject the request. Although not shown if the endpoint rejects the recording the endpoint may notify the access server and media server that the recording is not needed and the access server and media server may then remove any entries and release any resources that have been reserved for recording the communication session . However as the endpoint accepts the recording request in the present example the endpoint sends a response to the endpoint indicating acceptance.

In a non consultation environment step may be omitted because the endpoint would not be allowed to deny the recording request. For example the request of may still occur but the user of the endpoint may not be informed of the recording or may be informed but not provided with an option to accept or reject it. In some embodiments in a non consultation environment step may occur but may be a 200 OK or other acknowledgement message rather than an acceptance.

In step the endpoint notifies the access server that the endpoint is going to record the communication session . The notification of step may include information to be used by the access server such as the unique identifier e.g. the call ID of the communication session the endpoints involved in the call e.g. endpoint to endpoint and one or more commands such as START to indicate that recording is to begin.

In step the access server sets up an entry for the endpoint and the communication session in the database or in another memory. As with the entry of step for the endpoint the access server may create an entry for the endpoint containing information such as the originating endpoint e.g. endpoint and destination endpoint s e.g. the endpoint the start time of the recording session e.g. 1800 GMT on Aug. 10 2010 and an end time of the session when applicable. In other embodiments the access server may update the entry of the endpoint with the information regarding the endpoint . An example entry is shown below with respect to Table 8 

In step the access server responds to the endpoint . In the present example the signaling occurs via SIP and so the access server responds with a 200 OK message. In addition the access server may send other information needed by the endpoint in starting the recording process such as an IP address of the media server .

In step the endpoint notifies the media server that a recording session is to begin and sends information such as the call ID and call type e.g. audio video or audio video . In step in the present example the media server checks the call ID identifies that a recording session already exists with that call ID and adds one or more additional tracks for the endpoint to the session file created in step . For example the media server may create an audio track and a video track for storing audio information and video information respectively. An example is illustrated in Table 9 below 

In other embodiments the media server may create a new session file for the endpoint that is separate from the session file created for the endpoint . It is understood that the recording may be stored in many different ways and the use of a single session file with multiple tracks is provided for purposes of illustration. In step the media server sends the endpoint a 200 OK message or another message if the environment is not a SIP environment and a port on the media server to be used by the endpoint for the streaming media.

In steps and the endpoints and respectively stream media to the media server for recording while continuing their ongoing communication session . In the present example outbound media from each endpoint and is sent to the media server and stored in the appropriate track. As indicated by arrow the media server records the received media.

Accordingly each endpoint and streams live audio and or video or other media to the media server for recording. As each endpoint and streams only its own outbound traffic in the present example the network load on any given endpoint is reduced. However as described below some embodiments may involve a single endpoint streaming both inbound and outbound traffic.

Referring to in another embodiment an environment is illustrated in which communications between the endpoint and endpoint of may be recorded in real time. In the present example the environment includes the access server and the media server of . In the present embodiment the endpoint and the endpoint are in the peer to peer communication session as is described with respect to . However rather than each endpoint and streaming its outbound media to the media server the endpoint sends e.g. streams both inbound and outbound media to the media server as illustrated by arrow . The endpoint does not communicate with the media server as all recording input to the media server is provided by the endpoint .

In some embodiments although not shown it is understood that the endpoint may instruct the endpoint to record both inbound and outbound media. For example the endpoint may have greater bandwidth than the endpoint and so may be more capable of sending the media that is to be recorded. In such embodiments the arrow would extend from the endpoint to the media server and there would be no arrow from the endpoint to the media server .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of . In the present example the endpoints and are buddies and have already approved communications as described in previous embodiments. Furthermore the communication session between the endpoints and is ongoing at the beginning of the message sequence .

In step the endpoint notifies the access server that the endpoint is going to record the communication session . The notification of step may include information to be used by the access server in tracking the recording of the communication session . Such information may include a unique key generated or otherwise known by the endpoint for the communication session e.g. the previously described call ID the endpoints involved in the call e.g. endpoint to endpoint and one or more commands such as START to indicate that recording is to begin.

In step the access server sets up an entry for the endpoint and the communication session . In order to track the recording session the access server sets up the entry in the database of or in another memory. For example the access server may create an entry containing information such as the originating endpoint e.g. endpoint and destination endpoint s e.g. the endpoint the start time of the recording session e.g. 1800 GMT on Aug. 10 2010 and an end time of the session when applicable. The end time may be set to zero or another placeholder until the recording is ended or may be updated by the access server periodically. An example entry is shown below with respect to Table 10 

In step the access server responds to the endpoint . In the present example the signaling occurs via SIP and so the access server responds with a 200 OK message. In addition the access server may send other information needed by the endpoint in starting the recording process such as an IP address of the media server .

In step the endpoint notifies the media server that a recording session is to begin and sends information such as the call ID and call type e.g. audio video or audio video . In step the media server sets up a session file to be used to store media information received for the communication session from the endpoint . In the present example the media server creates one or more tracks for the endpoint in the file. For example the media server may create an audio track and a video track for storing audio information and video information respectively. Because the endpoint is streaming both inbound and outbound traffic to the media server in the present example the media server may also create tracks at this time for audio and or video received at the endpoint from the endpoint . An example is illustrated in Table 11 below 

In some embodiments a single audio track may be recorded for both incoming and outgoing audio from the perspective of the endpoint . However it may be preferable to maintain separate audio tracks as shown in Table 11. In step the media server sends the endpoint a 200 OK message or another message if the environment is not a SIP environment and a port on the media server to be used by the endpoint for the streaming media.

In step the endpoint sends a recording request to the endpoint and in step the endpoint responds to the request with an acceptance. As consultation and non consultation processes are described with respect to steps and of these steps are not described in detail in the present example.

In step the endpoint streams both inbound and outbound media to the media server for recording while continuing the ongoing communication session with the endpoint . As indicated by arrow the media server records the received media.

Because the endpoint does not stream media to the media server in the present example there is no communication between the endpoint and the media server . Furthermore there may or may not be communication between the endpoint and the access server . For example in the present embodiment the endpoint does not contact the access server as is done in step of . Accordingly the access server does not set up a separate entry for the endpoint . However in some embodiments of the endpoint may perform step of and notify the access server of the recording session. In such embodiments the access server would then set up the session entry as illustrated in step of and Table 10 would be updated to include the data of Table 8 representing the entry for the endpoint . The access server may then respond to the endpoint with a 200 OK or other acknowledgement. The access server may not send the media server IP address information to the endpoint in such embodiments or the access server may send the IP address information and the endpoint may ignore it since the endpoint does not need to stream media to the media server .

Referring to in another embodiment an environment is illustrated in which an endpoint may access communications between the endpoint and endpoint of via the media server either as a recording or in real time as illustrated by an arrow . In the present example the endpoint obtains information from the access server regarding the communication session and then uses that information to receive the media from the media server . Although the embodiment illustrated in and the embodiments following show the endpoints and as separately streaming their outbound media to the media server it is understood that a single endpoint or may stream both inbound and outbound media as described with respect to .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of . The endpoint may or may not be a buddy of either of the endpoints and . The communication session between the endpoints and is ongoing at the beginning of the message sequence and being recorded by the media server as streamed from each endpoint and .

In step the endpoint sends a request for information to the access server . The request for information may include one or more criteria. For example the request may be for all recording session information for a particular endpoint such as the endpoint . Another example request may be for all recording session information between particular endpoints e.g. all recording sessions involving the endpoint and . Yet another example request may be for all recording sessions. Other criteria may also be specified such as particular dates times other endpoints involved in the recording session whether the recording session is currently ongoing etc.

In step the access server identifies entries corresponding to the requested information by accessing the database or other memory and retrieving the session entries corresponding to the request. For example if the requested information is for all recording sessions in which the endpoint was involved on Aug. 10 2010 the access server would identify the call ID 1j9GpLxk5uxtm9pr damaka.example.com of Table 6 and retrieve the needed information from that entry. In some embodiments the call ID may be sufficient while in other embodiments the access server may retrieve additional information such as the length of the recording session or start time to present if still ongoing and the status e.g. finished or still ongoing . If the endpoint was involved in other recorded communication sessions on Aug. 10 2010 then the access server would also retrieve the information for those entries. Although not shown it is understood that the access server may also ensure that the endpoint is authorized to access the requested information.

In step the access server sends the corresponding entry information to the endpoint . In the present example the information includes the call ID 1j9GpLxk5uxtm9pr damaka.example.com the status ongoing and the current length of the call e.g. fifteen minutes . The current length may also be sent as the start time with the end time being 0 or some other identifier that indicates the call is still ongoing.

In step the endpoint requests media corresponding to the recording session s from the media server . The request may vary based on whether the recorded session has ended or is still ongoing. For example if the request is for a recording session that is not ongoing the request may specify a particular start time in the recording e.g. at the beginning some particular time into the recording or when a certain endpoint joined the recording if such information is stored . However if the request is for a recording session that is ongoing the request may be for the media server to start from a specific time or to send the most current media to the endpoint . Alternatively the request may simply be for the most current information corresponding to the recording session and the media server may handle the request appropriately by sending either recorded media or by streaming current media to the endpoint . The request may also specify other information such as audio only if both audio and video are available.

In step the media server locates the identified recording session s and sends them to the endpoint in step . If the request is for current media corresponding to the recording session for the communication session the media server streams the received media to the endpoint in addition to recording it. If the request is for recorded media from an earlier time the media server locates the media and begins playback at the identified time. In some embodiments the media server may send the media to the endpoint with a delay. For example the media server may perform processing on some or all of the tracks before sending it to the endpoint .

In the present example to provide the recorded media to the endpoint the media server identifies the call ID and any tracks corresponding to that call ID. For purposes of simplicity the endpoint has requested only the audio portion of the recording session. The media server retrieves the two audio tracks 0 and 2 Table 9 and merges them before sending them to the endpoint . The merging creates a single audio stream or file that includes both tracks.

In some embodiments the media server may provide processing of the media prior to sending it to the endpoint . In the present embodiment the media server stores the received streams in the same format in which each stream is received. For example the stream from the endpoint to the media server e.g. the stream represented by arrow may be encoded using an audio codec such as the G.729 audio codec and the stream from the endpoint to the media server e.g. the stream represented by arrow may be encoded using another audio codec such as the G.711 audio codec. The media server will store each stream as received in G.729 or G.711. If the audio tracks are not compatible and cannot be merged when a request is received the media server may convert one or both tracks prior to the merge.

The endpoint may request that the media sent to it from the media server is in a different codec such as the Adaptive Multi Rate AMR codec. Accordingly the media server may convert the audio tracks into AMR if they are not already in AMR before sending them to the endpoint . The conversion may occur before or after the tracks are merged. In other embodiments the media server may send the tracks in their stored format s and let the endpoint perform the conversion.

Referring to in another embodiment an environment is illustrated in which the endpoint may send media e.g. audio to the endpoint as indicated by an arrow as well as access communications between the endpoint and endpoint of via the media server . Using the legs and the endpoint may participate in the communication session in a two way manner as it can both receive media via leg and send media via leg . As with in the present example the endpoint obtains information from the access server regarding the communication session and then uses that information to receive the media from the media server . In some embodiments the endpoint may add itself to the communication session and and in other embodiments the endpoint may request permission or may be invited by one or both of the endpoints and .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of in which the endpoint invites itself to the communication session . For example in an enterprise environment the endpoint may be on a master buddy list that all endpoints must accept as buddies. In such an environment the endpoints and or may not have specifically chosen the endpoint as a buddy but may recognize the endpoint as a buddy due to its presence on the master buddy list. In other environments one or both of the endpoints and may have added the endpoint as a buddy using an invite response process as described with respect to previous embodiments such as . The communication session between the endpoints and is ongoing at the beginning of the message sequence and being recorded by the media server as streamed from each endpoint and .

In the present example although not shown the endpoint may begin receiving media corresponding to the communication session as described with respect to . Accordingly inbound media is received as indicated by arrow of . Although illustrated as step in it is understood that the steps of may occur before during or after the steps of the message sequence of the present embodiment.

In step the endpoint sends a message to the endpoint requesting that the endpoint add the endpoint to the communication session. In some embodiments the endpoint may not be able to refuse the request. For example if the endpoint corresponds to a security officer or to another individual identified as having access rights the endpoint may automatically accept the request. In other embodiments the endpoint may present an option to its user to accept or reject the request. In the present example in step the endpoint responds by sending a 200 OK to the endpoint .

In step the endpoint sets up a bridge to send the media received from the endpoint to the endpoint as described previously and illustrated with respect to . Accordingly the endpoint anchors the leg in order for the endpoint to be able to send media into the communication session without connecting directly with the endpoint . However because the direct connection between the endpoint and the endpoint only carries one way media from the endpoint to the endpoint the bridge may simply serve to stream or otherwise forward the incoming media to the endpoint .

In step the endpoint sends an acknowledgement message such as a 200 OK to the endpoint . In step the endpoint may begin sending media to the endpoint and in step the endpoint sends the received media to the endpoint .

It is understood that in some embodiments media received by the endpoint may not be sent to the endpoint . For example the user of the endpoint may wish to privately speak to the user of the endpoint . In such cases the request of step may specify that the endpoint wants to send audio only to the endpoint . Accordingly step may setup the call leg but not a bridge and step would not occur since no audio would be forwarded. In some such embodiments the presence of the endpoint may be visible to the endpoint while in other embodiments the endpoint may be unaware of the presence of the endpoint .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of in which the endpoint invites the endpoint to the communication session . For example in an enterprise environment the endpoint may be on a master buddy list that all endpoints must accept as buddies. In such an environment the endpoints and or may not have specifically chosen the endpoint as a buddy but may recognize the endpoint as a buddy due to its presence on the master buddy list. In other environments one or both of the endpoints and may have added the endpoint as a buddy using an invite response process as described with respect to previous embodiments such as . The communication session between the endpoints and is ongoing at the beginning of the message sequence and being recorded by the media server as streamed from each endpoint and .

In step the endpoint sends an invitation to the endpoint to join the communication session . The invitation may include such information as the call ID the endpoints involved in the communication session and or other information. In the present example this invitation invites the endpoint into the ongoing communication session in real time although it is understood that some buffering or other delays may occur.

The endpoint may be aware of the presence of the endpoint in various ways. For example one or both endpoints and may view a list of all participants in the communication session . The list may be obtained by requesting it from the access server or from another source. Accordingly if the endpoint is listening to the communication session via the media server this may be visible to the endpoint and or endpoint . The endpoint may then invite the endpoint to join the communication session. If the endpoint is not a buddy the endpoint may establish a regular buddy relationship or a temporary buddy relationship e.g. only for the purpose of joining the communication session corresponding to the invite with the endpoint . Alternatively the endpoint may select the endpoint from its buddy list if the endpoint is available.

In step the endpoint assuming the endpoint is going to accept the invitation may contact the media server to begin receiving the media sent to the media server by the endpoints and . This may occur for example as described with respect to although the endpoint may not need to contact the access server because the endpoint may receive the information needed to access the recording session directly from the endpoint in step e.g. the endpoint may begin the message sequence at step . In the present example the endpoint may inform the media server that the endpoint wants the media in real time. The media server then sends the next packets it receives that correspond to the recording session identified by the call ID to the endpoint . Accordingly in step inbound media is received by the endpoint from the media server .

In step the endpoint sends an acceptance message to the endpoint indicating that the endpoint accepts the invitation to join the call. In some embodiments the endpoint may then send the call information e.g. the call ID to the endpoint if it did not do so in step .

In step the endpoint sets up a bridge to send the media received from the endpoint to the endpoint as described previously. However because the direct connection between the endpoint and the endpoint only carries one way media from the endpoint to the endpoint the bridge may simply serve to stream or otherwise forward the incoming media to the endpoint . In step the endpoint sends a ready message to the endpoint to indicate that the endpoint can start sending media to the endpoint . In other embodiments the endpoint may already be sending media to the endpoint and the endpoint may ignore the media until the bridge is established. In step the endpoint may begin sending media to the endpoint and in step the endpoint sends the received media to the endpoint .

It is understood that in some embodiments media received by the endpoint may not be sent to the endpoint . For example the invitation may be for the user of the endpoint to privately speak to the user of the endpoint . In such cases the request of step may indicate the nature of the request. Accordingly step may setup the call leg but not a bridge and step would not occur since no audio would be forwarded. In some such embodiments the presence of the endpoint may be visible to the endpoint while in other embodiments the endpoint may be unaware of the presence of the endpoint .

Referring to in another embodiment an environment is illustrated in which the endpoint may send media e.g. audio to the endpoint as indicated by an arrow send media to the media server for recording as indicated by an arrow and access communications between the endpoint and endpoint via the media server . Using the legs and the endpoint may participate in the communication session in a two way manner as described previously with respect to as it can both receive media via leg and send media via leg . As with in the present example the endpoint obtains information from the access server regarding the communication session and then uses that information to receive the media from the media server . In addition the endpoint sends its outbound media to the media server to be recorded. In some embodiments the endpoint may invite itself to the communication session as described previously with respect to and in other embodiments the endpoint may be invited by one or both of the endpoints and as described previously with respect to .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of in which the endpoint joins the communication session receives inbound media from the media server and sends outbound media to the endpoint and to the media server to be recorded. As represented by step the communication session between the endpoints and is ongoing at the beginning of the message sequence and being recorded not shown by the media server as streamed from each endpoint and .

In step the endpoint joins the communication session as previously described to send media to the endpoint . For example the endpoint may initiate the joining or may be invited . The endpoint also sets up a connection with the media server in order to receive audio from the endpoints and via the media server . As the processes of steps and are described in previous embodiments they are not described in detail in the present example.

In step the endpoint notifies the access server that the endpoint is going to record its outbound media for the communication session . The notification of step may include information to be used by the access server such as the unique identifier e.g. the call ID of the communication session the endpoints involved in the call e.g. endpoint to endpoints and and one or more commands such as START to indicate that recording is to begin.

Although not shown recording of the audio stream of the endpoint may be initiated by the endpoint by the endpoint either with or without consultation as described with respect to by the endpoint automatically e.g. all communications sessions are recorded or all participants in a communications session that is being recorded are automatically recorded or based on other criteria.

In step the access server sets up an entry for the endpoint and the communication session in the database or in another memory. As with the entries previously described with respect to the endpoints and the access server may create an entry for the endpoint containing information such as the originating endpoint e.g. endpoint and destination endpoint s e.g. the endpoints and the start time of the recording session e.g. 1800 GMT on Aug. 10 2010 and an end time of the session when applicable. In some embodiments the start time for the endpoint may be the time it begins recording rather than the start time of the initial recording. Some embodiments may track both the start time of the initial recording and the start time the endpoint joined the recording and may have an entry for the initial start time and an entry for the start time of the originating endpoint for a particular entry.

The access server may also update the entries for the endpoints and to reflect the inclusion of the endpoint in the call. The updates may simply add the endpoint to the previous entries as shown below in Table 12 may add the endpoint to the previous entries with additional information e.g. a time stamp to indicate when the endpoint joined the recording session may create new entries for the endpoints and or may otherwise handle the addition of the endpoint . Alternatively the access server may not update the previous entries for the endpoints and and may rely on the new entry for the endpoint to identify the endpoint and the other endpoints with which the endpoint is engaged in the communication session . An example with updated entries for the endpoints and and a new entry for the endpoint is shown below with respect to Table 12 

In step the access server responds to the endpoint . In the present example the signaling occurs via SIP and so the access server responds with a 200 OK message. In addition the access server may send other information needed by the endpoint in starting the recording process such as an IP address of the media server . The endpoint may already have the IP address of the media server from step but may still receive it or may receive an IP address for a different media server not shown .

In step the endpoint notifies the media server that a recording session is to begin and sends information such as the call ID and call type e.g. audio video or audio video . In step in the present example the media server checks the call ID and adds one or more additional tracks for the endpoint to the session file created previously for the recording session corresponding to the call ID. For example the media server may create an audio track for the endpoint . An example is illustrated in Table 13 below 

In step the media server sends the endpoint a 200 OK message or another message if the environment is not a SIP environment and a port on the media server to be used by the endpoint for sending the outbound media to the media server . It is noted that this may be a different port than is being used by the media server to send the audio from endpoints and to the endpoint .

In step the endpoint sends outbound media to the endpoint . As illustrated by step the endpoint may bridge the media to the endpoint as previously described. In step the endpoint sends outbound media to the media server . As indicated by arrow the media server records the received media.

Accordingly as with the endpoints and the endpoint may stream or otherwise forwards live audio and or video or other media to the media server for recording. However in the present example the endpoint receives inbound media corresponding to the endpoints and via the media server and is not coupled directly to the endpoint .

Referring to in another embodiment a flowchart illustrates one embodiment of a method that may represent a process by which an endpoint such as the endpoint of is involved in a communication session with the endpoint and begins recording outbound and or inbound media. Previously described illustrates an example of the endpoint recording only outbound media while illustrates an example of the endpoint recording both outbound and inbound media.

In step the endpoint establishes a peer to peer communication session with the endpoint as described in previous embodiments. For example the endpoint logs into the access server receives a profile and routing table identifies the endpoint as being available and initiates the communication session. Alternatively the endpoint may initiate the communication session. In step the endpoint determines whether only inbound media only outbound media or both inbound and outbound media is to be recorded. Although not shown it is understood that a recording command may be received by the endpoint prior to step whether initiated by a user by another endpoint by the endpoint itself or by other means.

In step the endpoint notifies the access server that the communication session is to be recorded. As described previously the endpoint may send a unique identifier e.g. a call ID and other information to the access server . In step the endpoint receives a response from the access server that may include information such as an IP address of the media server . Although not shown it is understood that the access server may deny the request and the method may end the endpoint may attempt to initiate the recording session again or the endpoint may provide additional information to the access server e.g. authentication credentials if needed for recording . In step the endpoint notifies the media server that the communication session is to be recorded and in step the endpoint receives a response that may include information such as port information to which the media is to be sent.

In step the endpoint may determine whether consultation is required. As previously described consultation and non consultation describe whether the endpoint needs the permission of the endpoint before the endpoint can record the inbound media from the endpoint . If no consultation is required the method moves to step where it continues the communication session and sends the media to be recorded to the media server . In step if consultation is required the endpoint sends a request message to the endpoint notifying the endpoint that the endpoint wants to record the media and requesting permission from the endpoint to do so. A determination is made in step as to whether the request is denied or granted. If the request is denied the method moves to step and the endpoint notifies one or both of the access server and media server that the recording session is canceled. If the request is granted the method moves to step where it continues the communication session and sends the media to be recorded to the media server .

In some embodiments it is understood that the endpoint may receive a message e.g. a 200 OK from the endpoint acknowledging the recording even if consultation is not required. In other embodiments not receiving a response from the endpoint in a consultation environment may be viewed by the endpoint as a denial of the recording request. In some embodiments although not shown it is understood that the endpoint may instruct the endpoint to record both inbound and outbound media. For example the endpoint may have greater bandwidth than the endpoint and so may be more capable of sending the media that is to be recorded.

Referring to in another embodiment a flowchart illustrates one embodiment of a method that may represent a process by which an endpoint such as the endpoint of is involved in a communication session with the endpoint and receives a notification to begin recording outbound media. Previously described illustrate two examples of outbound media from the endpoint being recorded.

In step the endpoint establishes a peer to peer communication session with the endpoint as described in previous embodiments. For example the endpoint logs into the access server receives a profile and routing table and responds to or initiates a request for the communication session from the endpoint . In step the endpoint receives a request from the endpoint to record the media corresponding to the communication session. In step the endpoint may determine whether permission is required. For example if consultation is required then the endpoint needs to give permission to the endpoint before the recording of the media from the endpoint begins. If consultation is not required then the media from the endpoint may be recorded without permission.

Accordingly if permission is required as determined in step the method moves to step where a determination is made as to whether permission is granted. If permission is not granted the endpoint sends a rejection response to the endpoint in step and the method ends. If permission is granted the endpoint sends an acceptance response to the endpoint in step .

After sending the acceptance response in step or if permission is not required as determined in step the method moves to step . In step a determination is made as to whether the endpoint is to send media to the media server . For example as illustrated in the endpoint may send outbound media directly to the media server while illustrates the endpoint sending media only to the endpoint for the communication session and the endpoint forwarding the media to the media server .

Accordingly if the endpoint is not to record media directly as illustrated in the method moves to step and the endpoint remains active in the communication session but does not send outbound media to the media server . If the endpoint is to record media directly the method moves to step and notifies the access server that the communication session is to be recorded. As described previously the endpoint may send a unique identifier e.g. a call ID and other information to the access server . In step the endpoint receives a response from the access server that may include information such as an IP address of the media server . In step the endpoint notifies the media server that the communication session is to be recorded and in step the endpoint receives a response that may include information such as port information to which the media is to be sent. In step the endpoint continues sending outbound media to the endpoint for the communication session and also sends the outbound media to the media server for recording.

Although not shown in some embodiments it is understood that the endpoint may receive an instruction or request from the endpoint to record both inbound and outbound media. In such embodiments the endpoint would also send inbound media received from the endpoint to the media server .

Referring to in another embodiment a flowchart illustrates one embodiment of a method that may represent a process by which an access server such as the access server of handles a notification from an endpoint such as the endpoint that a recording session is to begin. It is understood that the functionality provided by the access server in the current example may be provided by other components of a peer to peer hybrid system such as the media server . The access server may be that same access server that authenticated the endpoint when the endpoint logged into the peer to peer network or may be a different access server.

In step the access server is notified by the endpoint that the endpoint wants to begin recording. Although illustrated as a notification it is understood that the notification may represent a request to the access server . As previously described the notification or a later message may include information such as a unique identifier e.g. a call ID and the endpoints to be involved in the call. In step the access server sets up a session entry such as that described previously with respect to Table 6. The session entry may include the endpoints involved in the recording session the call ID a start time an end time and or other information.

In step the access server responds to the notification request. The response may include information such as an IP address of the media server . As illustrated in step the access server may communicate with the media server after setting up the session entry. For example the access server may communicate with the media server to obtain an end time length of recording and or other information. It is understood that such communications with respect to a particular recording session may occur during and or after the recording has ended. For example the access server may receive a request for a particular session entry and may communicate with the media server to ensure that the session entry on the access server is current. The access server may also communicate with the media server to ensure that the media server is available for the request. If the media server is not available the access server may identify an available media server and provide that media server s IP address to the requesting endpoint. In other embodiments the communications between the access server and the media server with respect to a particular recording session may end after the recording is ended and the access server is updated with the end time and or other information. In still other embodiments the endpoints and may update the access server when recording is ended instead of or in addition to the media server .

Referring to in another embodiment a flowchart illustrates one embodiment of a method that may represent a process by which an access server such as the access server of handles a request from an endpoint such as the endpoint for accessing recording session information. It is understood that the functionality provided by the access server in the current example may be provided by other components of a peer to peer hybrid system such as the media server . For example the endpoint may query the media server directly. The access server may be that same access server that authenticated the endpoint when the endpoint logged into the peer to peer network or may be a different access server.

In step the access server receives a request for recording session information. As previously described the request may include one or more criteria. For example the request may be for all recording session information corresponding to a particular endpoint e.g. the endpoint may be for all recording session information between particular endpoints e.g. all recording sessions involving the endpoints and or may be for all recording sessions e.g. for a list of recording sessions . Other criteria may also be specified such as particular dates times whether the recording session is currently ongoing etc.

In step the access server identifies entries corresponding to the requested information by accessing the database or other memory and retrieving the session entry or entries corresponding to the request. For example if the requested information is for all recording sessions in which the endpoint was involved on a particular date the access server may search the database for calls corresponding to the endpoint on that date and retrieve the needed information from the applicable entry or entries. In step the access server sends the corresponding entry information to the endpoint .

Referring to in another embodiment a flowchart illustrates one embodiment of a method that may represent a process by which a media server such as the media server of handles a request from an endpoint such as the endpoint for beginning a recording session. It is understood that at least some of the functionality provided by the media server in the current example may be provided by other components of a peer to peer hybrid system such as the access server . For example the endpoint may request the recording session from the access server and the access server may then communicate with the media server to establish the session. In such cases step and or step would involve communication with the access server rather than the endpoint . In the case of the endpoint of requesting the recording the media server may be that same media server from which the endpoint is receiving media corresponding to the communication session or may be a different media server.

In step the media server receives a request for beginning a recording session. The request may include such information as a unique identifier e.g. a call ID of the communication session the originating endpoint of the recording e.g. the endpoint other endpoints involved in the communication session e.g. the endpoint and other information.

It is understood that the media server may be configured to handle the storage of recording sessions in many different ways. For example a recording session may be stored as a single file with multiple tracks as previously described. In other examples a recording session may be stored as one or more files for each endpoint involved in the recording e.g. a single file for an endpoint with combined audio and video or a single file for each of the audio and video media from a single endpoint . Accordingly the actual manner of storage may vary depending on the configuration of the media server . For purposes of illustration the recording session is stored as a single session file with multiple tracks.

Accordingly in step a determination is made as to whether a session file already exists for the call ID corresponding to the request. The session file would exist if for example another endpoint had already requested a recording session corresponding to the same call ID. If the session file does not exist the session file is created in step and the method then moves to step . If the session file does exist the method moves to step without executing step .

In step continuing the present example of a single session file with tracks one or more tracks are added to the session file. For example the method may add one audio track and one video track corresponding to the endpoint to the session file. In step the media server responds to the request of step with information such as port information needed by the endpoint to send media to the media server for recording. In some embodiments if the endpoint already has the port information step may be an acknowledgement that the media server is ready for recording but may not include the port information. In step the media server receives media from the endpoint and stores the media in the appropriate track of the session file. As described previously the media may be stored in the format in which it is received or it may be converted by the media server prior to storage.

Referring to in another embodiment a flowchart illustrates one embodiment of a method that may represent a process by which a media server such as the media server of handles a request from an endpoint such as the endpoint for media from a recorded and or live recording session. It is understood that at least some of the functionality provided by the media server in the current example may be provided by other components of a peer to peer hybrid system such as the access server . For example the endpoint may request the media from the access server and the access server may then communicate with the media server to provide the media to the endpoint . In such cases step and or steps would involve communication with the access server rather than the endpoint . If the endpoint is recording its outbound media the media server may be recording the outbound media from the endpoint or the endpoint may recording using a different media server.

In step a request for recording session information is received. The request may include such information as a unique identifier e.g. a call ID the endpoints involved in the recording session a start time of the recording and or a particular time for playback to begin that only media from a particular endpoint be provided e.g. that media from other endpoints corresponding to the recording session be excluded and or other information. In some embodiments the media server may provide information in response to a request such as that described with respect to step of . In step the recording session or sessions are identified. For example the media server may search for a recording session by call ID.

In step a determination is made as to whether an earlier e.g. not current playback start time is specified for the playback of the recording session. For example if the recording is fifteen minutes long the playback start time may indicate that the playback is to start five minutes into the recording session. The playback start time may be identified in other ways such as when a particular endpoint started recording. In some embodiments multiple playback times may be identified the playback may be reversed and or forwarded as desired e.g. reverse and forward buttons may be provided via the endpoint to a user of the endpoint and or the playback may be controlled by events such as each time a grouping of media packets from a particular endpoint was recorded e.g. media packets separated from other media from the same endpoint by a defined amount of time such as five or more seconds or when interrupted by another endpoint s media .

If a start time is not specified as determined in step the method moves to step . In the present example if a start time is not specified the method views the request as a request for current media from an ongoing recording session. A current start time or other means of identifying that the request is for current media may also be employed and also moves the method to step . If a start time is specified the method moves to step .

In step a determination is made as to whether there is inbound media from the endpoint or endpoints corresponding to the requested recording session. If there is no inbound media the method repeats step until media is received or until another event occurs to stop step from repeating such as a timeout or an instruction to stop the method . If there is inbound media as determined in step the method continues to step .

In step a determination may be made as to whether the media needs to be converted. As described previously the media may be stored in the same format in which it was received and or a different format than is needed by the endpoint . If no conversion is needed the method moves to step . If conversion is needed the method converts the media in step before moving to step . In step the media server merges the tracks if needed. For example inbound media corresponding to audio from different endpoints may be merged prior to sending the audio to the endpoint . In other embodiments the media may be sent separately and merged or otherwise aligned by the endpoint . On some occasions there may be no media to merge if the media is only being received from a single endpoint. It is understood that conversion may occur before or after merging. In step the media received by the media server is sent to the endpoint .

If a start time is specified as determined in step the method moves to step . In step the start time is identified in the recording session. In step a determination may be made as to whether the media needs to be converted. If no conversion is needed the method moves to step . If conversion is needed the method converts the media in step before moving to step . In step the media server merges the tracks if needed. In step the recorded media is sent to the endpoint starting at the identified playback start time.

Referring to in another embodiment a flowchart illustrates one embodiment of a method that may represent a process by which an endpoint such as the endpoint of obtains media from a recorded and or live recording session. It is understood that at least some of the functionality provided by the access server and or media server in the current example may be provided by other components of a peer to peer hybrid system such as the media server and access server respectively. For example the endpoint may request the media from the access server and the access server may then communicate with the media server to provide the media to the endpoint . In such cases steps and or would involve communication with the access server rather than the media server . In another example the endpoint may request the session information directly from the media server . In such cases steps and would involve communication with the media server rather than the access server . The access server may be the same access server that authenticated the endpoint when the endpoint logged into the peer to peer network or may be a different access server. The media server may be the same media server that is recording media from the endpoint or may be a different media server.

In step the endpoint contacts the access server for session information. As described previously the request may define different criteria for identifying one or more endpoints or recording sessions including a unique identifier e.g. a call ID a time or a range of times in which a communication session occurred and other information that may be used to select a particular recording session. In step the session information is received from the access server . Although not shown it is understood that the method may include additional or alternate steps if session information matching the defined criteria does not exist or if the access server requests additional information. For example if the session information does not exist a message may be received from the access server indicating that the session information cannot be found. In another example a request for additional information may be received from the access server to select a recording session from multiple recording sessions or to specify that information pertaining to all of the recording sessions is desired.

In step the media server is contacted to obtain the media for the recording session. As described previously the request may obtain information such as the call ID a playback starting time to obtain stored media or a current starting time to obtain media that is currently being received by the media server and other information. Step may also include receiving information corresponding to one or more ports from the media server . In step the endpoint begins receiving media from the media server .

Referring to in another embodiment a flowchart illustrates one embodiment of a method that may represent a process by which an endpoint such as the endpoint of sends media into a communication session such as the communication session . Although not shown it is understood in alternative embodiments that the endpoint may contact multiple endpoints and may send media directly to those endpoints as described in previous embodiments corresponding to direct peer to peer communications. It is further understood that during the execution of the method the endpoint may be receiving media corresponding to the communication session from the media server as previously described.

In step the endpoint communicates with the endpoint in order to send media to the endpoint . As described previously the endpoint may initiate the communications or the endpoint may initiate the communications. Furthermore the environment may be a consultation environment where the non initiating endpoint has to grant permission or a non consultation environment where no such permission is needed. Accordingly in step a determination may be made as to whether permission is needed. If permission is not needed the method moves to step . If permission is needed the method moves to step where a determination is made as to whether permission has been granted. For example if the endpoint is the initiating endpoint the endpoint may send a message to the endpoint requesting permission and may receive a message from the endpoint either approving or denying permission. If the endpoint is the initiating endpoint the endpoint may receive a message from the endpoint requesting permission and may send a message to the endpoint either approving or denying permission. If permission is denied the method ends. If permission is granted the method moves to step .

In step the endpoint establishes a one way leg with the endpoint . In some embodiments the leg may be capable of handling two way traffic between the endpoints and even though the traffic will only flow from the endpoint to the endpoint . In step the endpoint sends outbound media to the endpoint via the leg. As described previously the endpoint may then provide a bridge and send the media to the endpoint .

Referring to in another embodiment an environment is illustrated in which the endpoint e.g. the endpoint of is associated with a user who speaks a different language than a user of the endpoint . This speech difference may make audible communications between the users of the endpoints and difficult or impossible. For example if the user of the endpoint speaks only English and the user of the endpoint speaks only Spanish then the two users will be unable to communicate easily by speaking and may be unable to communicate at all by speaking. Accordingly one or both of the endpoints and may perform one or two way translations or may have such translations performed by system components of a hybrid peer to peer network not shown such as has been described above.

In the present embodiment a language translation component is used to translate speech before sending the translated speech to the other endpoint. However other communications such as signaling are performed directly between the endpoint and the endpoint as indicated by arrow . Other media such as data video and or audio that does not need to be translated e.g. music or other non speech audio is also communicated directly between the endpoint and the endpoint . The original i.e. non translated speech audio is sent to the language translation component as indicated by arrow which translates the speech and sends the translated speech to the endpoint as indicated by arrow .

It is understood that the functionality provided by the language translation component may be provided by a system component of a hybrid peer to peer network not shown as illustrated in or some or all of the functionality provided by the language translation component may be provided by the endpoint itself. For example the endpoint may contain the speech to text engine the text to speech engine and or the language conversion engine of . Furthermore the system component illustrated in may be formed by various physical or logical components that operate with one another to provide the functionality described herein rather than a single component as shown.

Although not shown it is understood that the endpoint may authenticate with the hybrid peer to peer network via the access server of or a similar authorization system. During the authentication process the endpoint may obtain language information such as one or more languages used by the endpoint languages available via the language translation component and or similar information that may aid the user of the endpoint in communicating with the user of the endpoint . For example the endpoint may receive language information about the endpoint in a profile received from the access server .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of in which the endpoint uses translation functionality provided by the language translation component . In the present example the endpoints and are buddies and are able to communicate freely as described previously.

In step the endpoints and exchange signaling information directly with each other in order to establish a communication session as described in previous embodiments. This information may include information identifying which languages are available and or preferred a unique identifier such as a call ID that is used to identify the communication session being established encryption keys and or similar information. Media such as data video and or audio that does not need to be translated e.g. music or other non speech audio may also be communicated directly between the endpoint and the endpoint .

In step speech input is received by the endpoint from a user. For example the user may speak into a microphone and the endpoint may detect audio received via the microphone as speech. In other embodiments the endpoint may be configured to recognize speech regardless of the source. In still other embodiments the endpoint may enable a user to designate a file or a media stream as speech. For example a file containing speech may be tagged as speech by the user and treated by the endpoint as needing translation.

In step the endpoint sends the speech to the language translation component to be translated. The endpoint may inform the language translation component of information such as the original language of the speech input the language into which the translation is to occur the call ID and other information needed by the language translation component to translate and process the received speech. In step the language translation component translates the speech from one language into another language as requested. In step the language translation component sends the translated speech to the endpoint .

It is understood that in embodiments where the translation functionality is internal to the endpoint steps and may involve sending the speech to an internal module of the endpoint rather than to an external component as shown in . The internal module may then perform the translating and return the translated speech to another module of the endpoint for sending to the endpoint or may send the translated speech directly to the endpoint .

Referring to in another embodiment an environment is illustrated in which the endpoint e.g. the endpoint of is associated with a user who speaks a different language than a user of the endpoint . This speech difference may make audible communications between the users of the endpoints and difficult or impossible. For example if the user of the endpoint speaks only English and the user of the endpoint speaks only Spanish then the two users will be unable to communicate easily by speaking and may be unable to communicate at all by speaking. Accordingly one or both of the endpoints and may perform one or two way translations or may have such translations performed by system components of a hybrid peer to peer network not shown such as has been described above.

In the present embodiment the language translation component of is used to translate speech before the translated speech is sent to the other endpoint. Other communications such as signaling are performed directly between the endpoint and the endpoint as indicated by arrow . Other media such as data video and or audio that does not need to be translated e.g. music or other non speech audio is also communicated directly between the endpoint and the endpoint . The original i.e. non translated speech audio is sent to the language translation component as indicated by arrow which translates the speech and sends the translated speech to the endpoint as indicated by arrow . The endpoint then sends the translated speech directly to the endpoint as indicated by arrow .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of in which the endpoint uses translation functionality provided by the language translation component . In the present example the endpoints and are buddies and are able to communicate freely as described previously.

In step the endpoints and exchange signaling information directly with each other in order to establish a communication session as described in previous embodiments. This information may include information identifying which languages are available and or preferred a unique identifier such as a call ID that is used to identify the communication session being established encryption keys and or similar information. Media such as data video and or audio that does not need to be translated e.g. music or other non speech audio may also be communicated directly between the endpoint and the endpoint .

In step speech input is received by the endpoint from a user. For example the user may speak into a microphone and the endpoint may detect audio received via the microphone as speech. In other embodiments the endpoint may be configured to recognize speech regardless of the source. In still other embodiments the endpoint may enable a user to designate a file or a media stream as speech. For example a file containing speech may be tagged as speech by the user and treated by the endpoint as needing translation.

In step the endpoint sends the speech to the language translation component to be translated. The endpoint may inform the language translation component of information such as the original language of the speech input the language into which the translation is to occur the call ID and other information needed by the language translation component to translate and process the received speech. In step the language translation component translates the speech from one language into another language as requested. In step the language translation component sends the translated speech to the endpoint . In step the endpoint sends the translated speech directly to the endpoint .

It is understood that in embodiments where the translation functionality is internal to the endpoint steps and may involve sending the speech to an internal module of the endpoint rather than to an external component as shown in . The internal module may then perform the translating and return the translated speech to another module of the endpoint for sending to the endpoint or may send the translated speech directly to the endpoint .

Referring to in another embodiment an environment is illustrated in which the endpoint e.g. the endpoint of is associated with a user who speaks a different language than a user of the endpoint . In the environment the language translation component represents multiple system components of the hybrid peer to peer network. Although shown as part of the language translation component it is understood that the various components functions illustrated in may be distributed and need not be part of a single component and or may be part of the endpoint and or the endpoint .

The language translation component includes a speech to text STT module a text to speech TTS module and a language translation module . The STT module is configured to receive audio speech and convert the audio speech to text. The TTS module is configured to receive text and to convert the text to audio speech. The language translation module is configured to receive text from the STT module and translate the text from one language to another language e.g. from English into Spanish .

Although the term module is used for purposes of description it is understood that some or all of the STT module TTS module and language translation module may represent servers server arrays distributed systems or may be configured in any other way needed to provide the described functionality. For example the STT module may be a discrete server or may be a server array that performs load balancing as is known in the art. Accordingly different STT modules may be involved in handling speech received from the endpoint in a single communication session. An identifier such as a call ID may be used to distinguish the communication session occurring between the endpoint and from other communication sessions. Similarly the TTS module may be a discrete server or may be a server array that performs load balancing and different TTS modules may be involved in handling speech sent to the endpoint in a single communication session.

Each of the speech to text STT module text to speech TTS module and language translation module may be formed of off the shelf and or customized hardware and or software components. It is understood that even with off the shelf components some customization may take place in order to adapt the components to the hybrid peer to peer network in which the endpoints and operate. For example in the present embodiment an RTP layer is positioned between the STT module and the endpoint and an RTP layer is positioned between the TTS module and the endpoint . The RTP layers and may among other functions support encryption functionality between the STT module and the endpoint and between the TTS module and the endpoint .

In operation the STT module TTS module and language translation module are used to translate speech from the endpoint before the speech is sent to the endpoint . Although not shown it is understood that the process may be reversed for speech flowing from the endpoint to the endpoint . Other communications such as signaling are performed directly between the endpoint and the endpoint as indicated by arrow . During initial signaling the endpoint may begin a media connection with the endpoint for the communication session as indicated by arrow but may never finish establishing the media connection due to the need to translate the speech. For example the endpoint may begin establishing the media path with the endpoint but may hold the audio packets until the signaling is finished. The signaling may indicate that translation is requested using a translation indicator or another identifier and so the endpoint may not finish establishing the media connection as it would for a regular e.g. non translated call.

Other media such as data video and or audio that does not need to be translated e.g. music or other non speech audio is also communicated directly between the endpoint and the endpoint as indicated by arrow which may be the same as the arrow in some embodiments . The signaling and other media may use a route as previously described e.g. a private public or relay route and the arrows and may represent a single route or different routes.

In the present example the original i.e. non translated speech audio is sent to the STT module via the RTP layer as indicated by arrow . For purposes of example the arrow represents an RTP path. Accordingly the endpoint receives the speech audio as input packetizes the speech audio using RTP and sends the RTP packets to the STT module . The RTP layer is then used to convert the speech audio from RTP into a form that the STT module is able to use. The STT module converts the audio speech to text and send the text to the language translation module as indicated by arrow . In some embodiments after translating the text the language translation module may send the text to the STT module as indicated by which forwards the text to the endpoint as indicated by arrow . The endpoint may then display the translated text to the user of the endpoint . For example the text may be translated from a source language e.g. English to a destination language e.g. Spanish and then from the destination language back to the source language and the translated source language text may be sent to the endpoint so that the user can determine whether the translation in the source language is correct. The language translation module sends the translated text to the TTS module as indicated by arrow . The TTS module converts the translated text to audio speech and forwards the translated audio speech to the endpoint . The endpoint may then play the audio speech in the translated language.

With additional reference to one embodiment of a portion of the environment of is illustrated with each endpoint and being associated with an STT module and a TTS module. More specifically the endpoint is associated with the STT module and the TTS module . The endpoint is associated with the STT module and the TTS module . Each endpoint and sends its outgoing speech to its respective STT and . Similarly each endpoint and receives its incoming speech from its respective TTS module and

In some embodiments the functionality of the STT module TTS module and or language translation module may be included in the endpoint . For example the endpoint may translate the audio speech to text using an internal STT module send the text to an external language translation module receive the translated text convert the translated text to audio speech and send the translated audio speech to the endpoint . In other embodiments the endpoint may translate the audio speech to text using an internal STT module send the text to an external language translation module receive the translated text and send the translated text to the endpoint . The endpoint would then either display the translated text or convert the translated text to audio speech for playback. In still other embodiments the endpoint may have an internal language translation module .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of in which the endpoint uses translation functionality provided by the language translation module . In the present example the endpoints and are buddies and are able to communicate freely as described previously.

In step the endpoints and exchange signaling information directly with each other in order to establish a communication session as described in previous embodiments. This information may include information identifying which languages are available and or preferred a unique identifier such as a call ID that is used to identify the communication session being established one or more encryption keys e.g. an encryption key for each endpoint and and or similar information. Data such as files e.g. documents spreadsheets and pictures video and or audio that does not need to be translated e.g. music or other non speech audio may also be communicated directly between the endpoint and the endpoint . It is understood that step may continue during the following steps with signaling and other media being passed directly between the endpoints and during the message sequence .

In step speech input is received by the endpoint from a user. For example the user may speak into a microphone and the endpoint may detect audio received via the microphone as speech. In other embodiments the endpoint may be configured to recognize speech regardless of the source. In still other embodiments the endpoint may enable a user to designate a file or a media stream as speech. For example a file containing speech may be tagged as speech by the user and treated by the endpoint as needing translation.

In step the endpoint sends the speech to the STT module . The endpoint may obtain the network address e.g. IP address of the STT module from the profile received during authentication or may obtain the network address in other ways such as by querying the access server . The endpoint may send information to the STT module such as the source language the destination language into which the source language is to be translated the call ID of the communication session and or other information to be used in the translating process. It is understood that this information may be passed to the language translation component as needed. For example the call ID may be used in each step to distinguish the communication session for which the translation is being performed from other communication sessions undergoing translation.

In step the STT module converts the received speech to text and in step sends the text to the language translation module along with any needed information such as the source and destination languages. In step the language translation module translates the text from the source language to the destination language and in step returns the translated text to the STT module .

In the present example the STT module sends the translated to the endpoint in step . This text may then be displayed to the user of the endpoint to view the translation and in some embodiments to approve or reject the translation and or to request a new translation. In step the STT module sends the translated text to the TTS module . The TTS module converts the translated text to audio speech in step and in step sends the audio speech to the endpoint .

Referring to a flowchart illustrates one embodiment of a method that may represent a process by which an endpoint such as the endpoint of obtains a translation for audio speech to be sent to another endpoint such as the endpoint during a communication session. It is understood that during the execution of the method the endpoint may be receiving translated audio speech corresponding to the communication session with the endpoint . In the present example the communication session has been established prior to step of the method . The establishment of the communication session may identify that the endpoints and will be using different languages and the endpoint may retrieve or obtain information needed to translate audio speech based on information exchanged during the establishment of the call session. It also understood that signaling and non audio translated media may be sent by the endpoint directly to the endpoint and received by the endpoint directly from the endpoint during execution of the method .

In step the endpoint receives audio input representing speech. As previously described the speech audio may be tagged as such by a user may be identified based on its source e.g. a microphone may be identified by software and or hardware configured to identify speech and or may be identified in any other way.

In step a determination is made as to whether translation is required. For example if the user of the endpoint speaks only English and the user of the endpoint speaks only Spanish then a translation is needed. The need for a translation may be set by the user e.g. by selecting an option during call establishment or later may be automatic e.g. based on profiles of the endpoints and and or may be identified in any other way. If no translation is required the audio speech is sent directly to the endpoint in step . If a translation is required the method moves to step . In step the audio speech is sent to the STT module as described with respect to .

In step a determination is made as to whether translated text is expected from the STT module and if expected whether the translated text has been received. For example the endpoint may be configured to receive a text translation of the audio speech sent to the STT module in step . If so step may be used to determine whether the translated text has been received from the STT module . If not received the method may wait until the translated text is received until a timeout occurs or until another defined event happens. If no translated text is expected the method ends.

In step if a determination is made in step that translated text is expected and that the translated text has been received a determination is made as to whether approval is needed by the endpoint . For example STT module may require approval from the endpoint before sending the translated text to the TTS module . Accordingly in some embodiments the endpoint displays the translated text to the user of the endpoint and may then wait for input from the user. In other embodiments approval may be automatically granted by the endpoint . For example the user may approve some translations until satisfied with the translation quality and may then select an option automatically approving future translations.

If no approval is required as determined in step the method ends. If approval is required the method continues to step where a determination is made as to whether the approval is granted e.g. whether the user has provided input indicating approval of the translated text . If the approval is granted the method moves to step where the approval is sent to the STT module . If the approval is rejected the method moves to step where a determination is made as to whether a new translation is to be requested.

If a new translation is requested the method returns to step . It is understood that the endpoint may request a new translation and the STT module may then use a different language reference may select an alternate translation or may perform other actions to achieve the requested result. It is also understood that new translations may not be available in some embodiments. If no new translation is requested the method may continue to step where a rejection is sent to the STT module .

Referring to a flowchart illustrates one embodiment of a method that may represent a process by which the language translation component of receives translates and sends audio speech. It is understood that the language translation component is that illustrated in for purposes of example but may be configured differently. The user of the endpoint is communicating in English in the present example and the user of the endpoint is communicating in Spanish.

In step the STT module receives audio speech in English from the endpoint . The audio speech in the present example is received via the RTP interface but may be received in any format compatible with the endpoint and or STT module . The STT module may also receive information regarding the received text such as the original language e.g. English the destination language e.g. Spanish the call ID associated with the communication session and or other information.

In step the STT module converts the English audio speech to English text and sends the text to the language translation module . In step the language translation module converts the text from English to Spanish and sends the translated text to the STT module . In step a determination may be made as to whether the endpoint needs to approve the translation as described previously with respect to . If approval is needed the STT module sends the Spanish text back to the endpoint in step . In step a determination may be made as to whether the approval has been received. If the approval has not been received the method ends. If the approval has been received as determined by step or if no approval is needed as determined in step the method continues to step .

In step the TTS module receives the Spanish text from the STT module and converts the text into Spanish audio speech. In step the TTS module sends the Spanish audio speech to the endpoint via the RTP layer . Although RTP is used for purposes of example it is understood that the Spanish audio speech may be sent in any format compatible with the endpoint and or TTS module .

Referring to in another embodiment an environment is illustrated in which the endpoint e.g. the endpoint of the endpoint an endpoint and an endpoint are on a conference call using a conference bridge . The users of the endpoints and speak the same language while the users of the endpoints and each speak a different language. For example the users of the endpoints may speak only English the user of the endpoint may speak only German and the user of the endpoint may speak only Spanish. Although the users of the endpoints and may communicate easily due to their shared language the speech differences between the users of the endpoints and may make audible communications difficult or impossible. For purposes of illustration shows speech outgoing from the perspective of the endpoint and incoming from the perspective of the endpoints and . It is understood that each endpoint and may send and receive speech in a similar or identical manner.

To aid in communications between the users of the endpoints and each endpoint may access an STT module and a TTS module as described previously with respect to . For example the endpoint is associated with an STT module and a TTS module the endpoint is associated with an STT module and a TTS module the endpoint is associated with an STT module and a TTS module and the endpoint is associated with an STT module and a TTS module . It is understood that the STT modules and or the TTS modules may be the same module or may be part of one or more servers server arrays distributed systems endpoints or may be configured in any other way needed to provide the described functionality as described previously. In the present example each STT TTS module pair is illustrated as providing outgoing translation functionality only for their respective endpoints and . Accordingly each STT TTS module pair is illustrated with the STT module positioned nearest to the respective endpoint and . However it is understood that the same STT TTS modules or other STT TTS modules may provide incoming translation functionality for an endpoint in which case a TTS module may communicate directly with the endpoint as illustrated by the TTS module of .

The environment includes the language translation module that is coupled to the STT module and TTS module . The STT modules and the TTS modules may be coupled to the language translation module or may be coupled to another language translation module not shown .

The conference bridge provides bridging capabilities for a multi party conference call that includes the endpoints and . In the present example the conference bridge provides a separate pair of ports to each endpoint and . Accordingly the endpoint communicates with the conference bridge via an inbound port from the perspective of the conference bridge and an outbound port the endpoint communicates with the conference bridge via an inbound port and an outbound port the endpoint communicates with the conference bridge via an inbound port and an outbound port and the endpoint communicates with the conference bridge via an inbound port and an outbound port .

It is understood that the conference bridge may be configured differently with more or fewer inbound ports and or outbound ports. The inbound and or outbound ports may also be configured differently. For example instead of a single outbound port for each endpoint and the conference bridge may have an outbound port for each language e.g. English German and Spanish and an endpoint may connect to the port associated with a desired language. In another example all endpoints may send audio speech to a shared port or ports on the conference bridge. In some embodiments the conference bridge may also bridge the conference call with non endpoints such as telephones and computers that do not have the endpoint functionality described herein.

With additional reference to the endpoints and may communicate via the conference bridge for speech but may communicate directly for signaling and or non audio non translated media as described previously. For purposes of illustration shows direct communication paths and from the perspective of the endpoint but it is understood that such paths may exist directly between each pair of endpoints formed by the endpoints and . Accordingly the endpoint may send speech to the endpoints and via the conference bridge but may send signaling information and or a data file or stream e.g. a word processing document a spreadsheet a picture or a video stream directly to the endpoints and via paths and respectively. Alternatively or additionally the conference bridge may provide forwarding or other distribution capabilities for such communications in which case the paths and or may not exist or may carry less traffic e.g. only signaling traffic .

Referring again to in operation the endpoint receives speech input such as hello in English. The endpoint sends the speech input to the STT module as illustrated by arrow . The STT module converts the speech to text and sends the text to the language translation module as illustrated by arrow . The language translation module converts the text from English into German e.g. Guten Tag and Spanish e.g. Hola before sending the translated text back to the STT module as illustrated by arrow . The STT module sends the translated text to the TTS module as illustrated by arrow although the language translation module may send the translated text directly to the TTS module in some embodiments. The TTS module converts the translated German and Spanish text into German and Spanish audio speech and sends the audio to the inbound port on the conference bridge as illustrated by arrow .

The conference bridge identifies the endpoint as corresponding with German and the endpoint as corresponding to Spanish. For example the conference bridge may have a list of all endpoints that are connected to a call and the list may include the language associated with each endpoint. When the conference bridge receives packets from the endpoint that identify their language as German or Spanish the conference bridge may look up the endpoints having German or Spanish listed as their language and send the packets to the appropriate outbound ports. Accordingly the conference bridge sends the German audio speech to the outbound port associated with the endpoint as illustrated by arrow and sends the Spanish audio speech to the outbound port associated with the endpoint as illustrated by arrow . It is understood that the audio speech may be buffered or otherwise diverted temporarily by the conference bridge and that the audio speech may not move directly from the inbound port to the outbound ports and . The German audio speech is then sent to the endpoint via the outbound port as illustrated by arrow and Spanish audio speech is sent to the endpoint via the outbound port as illustrated by arrow .

In the present example the translated audio speech is sent directly to each endpoint and rather than to the STT or TTS associated with each endpoint. As the English audio speech has been converted to text translated and converted back into audio speech by the STT module and TTS module associated with the endpoint the translated audio speech can be sent from the conference bridge directly to the endpoints and . In other embodiments the speech may be sent as text from the STT module or language translation module to the conference bridge from the conference bridge to the TTS module of each endpoint and and converted into audio speech and passed to the associated endpoint and . If the text is sent from the STT module to the conference bridge without being translated the text may be sent to the language translation module from the conference bridge or the SST TTS modules of the endpoints and .

As the user of the endpoint uses the same language as the user of the endpoint there is no need to translate the speech before sending it to the endpoint . Accordingly the original audio speech is sent from the TTS module to the conference bridge as illustrated by arrow . For example the STT may receive the original audio speech and in addition to converting it to text for translation forward the original audio speech to the TTS module . In other embodiments the endpoint may send the original audio speech directly to the TTS module for forwarding. The TTS module may convert the translated text into German and Spanish speech as previously described and may also receive the original audio speech as forwarded by the STT . The TTS module may then forward the original audio speech to the inbound port on the conference bridge .

The conference bridge identifies the endpoint as corresponding with English and when the conference bridge receives packets from the endpoint that identify their language as English the conference bridge may look up the endpoints having English listed as their language and send the packets to the appropriate outbound ports. Accordingly the conference bridge sends the English audio speech to the outbound port associated with the endpoint as illustrated by arrow . The English audio speech is then sent to the endpoint via the outbound port as illustrated by arrow .

Referring to sequence diagrams illustrate one embodiment of message sequences and that may occur in the environment of in which the endpoint uses translation functionality provided by the language translation module . Some communications between the endpoints and are detailed with respect to rather than in .

Referring specifically to the endpoints and are all coupled to the conference bridge and may send signaling and or non audio non translated media directly to each other although it may be sent through the conference bridge in other embodiments. In the present embodiment signaling occurs directly e.g. does not pass through the conference bridge between the endpoint and the endpoints and as illustrated in steps and respectively. While is from the perspective of the endpoint signaling may also occur between the other endpoints in a similar or identical manner with each endpoint signaling the other endpoints directly. It is understood that this signaling may continue while a conference call is in session and may include setup and maintenance signaling for the conference call. For example the endpoints and may signal each other directly to establish the conference call and the signaling may contain parameters needed to establish the conference call such as source language for an endpoint target language1 target language2 target language x and identifiers of which endpoint is associated with each language such as endpoint English endpoint German endpoint Spanish and endpoint English. Signaling between the endpoints may be used to establish a communication route such as one or more of the private public and or relay routes described previously.

Non audio non translated media may also be transferred directly between the endpoint and the endpoints and as illustrated in steps and respectively. While is from the perspective of the endpoint such transfers may also occur between the other endpoints in a similar or identical manner with each endpoint transferring non audio non translated media to the other endpoints directly. It is understood that the non audio non translated media transfers may continue while a conference call is in session and may begin before the conference call is established and continue after the conference call ends. The non audio non translated media may be transferred via one or more of the private public and or relay routes as described for the signaling.

Referring specifically to which is directed to the endpoints and in steps and the endpoints and respectively contact the conference bridge and obtain one or more ports. In the present example the conference bridge assigns each endpoint and an inbound port from the perspective of the conference bridge and an outbound port as illustrated in .

In step speech input is received by the endpoint from a user. For example the user may speak into a microphone and the endpoint may detect audio received via the microphone as speech. In other embodiments the endpoint may be configured to recognize speech regardless of the source. In still other embodiments the endpoint may enable a user to designate a file or a media stream as speech. For example a file containing speech may be tagged as speech by the user and treated by the endpoint as needing translation.

In step the endpoint sends the speech to the STT module . The endpoint may obtain the network address e.g. IP address of the STT module from the profile received during authentication or may obtain the network address in other ways such as by querying the access server . The endpoint may include information such as the source language e.g. English the destination language s e.g. German and Spanish into which the source language is to be translated the call ID of the communication session and or other information to be used in the translating process. It is understood that this information may be passed to the language translation component as needed. For example the call ID may be used in each step to distinguish the communication session for which the translation is being performed from other communication sessions.

In step the STT module converts the received speech to text and in step sends the text to the language translation module along with any needed information such as the source and destination languages. In step the language translation module translates the text from the source language to the destination language and in step returns the translated text to the STT module . In some embodiments the language translation module may send the translated text directly to the TTS module

In step the STT module sends the translated text to the TTS module . The TTS module converts the translated text to audio speech in step . More specifically the TTS module converts the translated German text to German audio speech and converts the translated Spanish text to Spanish audio speech. In step the TTS module sends the translated audio speech to the conference bridge . In the present example the TTS module sends both languages simultaneously to the inbound port . For example the TTS module may send the languages via RTP and each language stream may be identified by an SSRC or another identifier. In other embodiments the TTS module may send the audio for each language to a different port. For example the conference bridge may establish a separate inbound port for each language and the TTS module may send the German audio speech to a German inbound port and the Spanish audio speech to a Spanish inbound port. In step the conference bridge sends the German audio speech to the endpoint and in step sends the Spanish audio speech to the endpoint . As described with respect to the conference bridge sends the audio speech directly to the endpoints and in the present example bypassing the SST TTS module pairs associated with each endpoint.

Referring to which is directed to the endpoints and a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of in which the endpoint communicates original audio speech to the endpoint . The actual translation of the original audio speech from English into German and Spanish for the endpoints and is not detailed in the present example but may occur in a manner that is similar or identical to that described with respect to . Accordingly as and have many identical or similar steps only steps directed specifically to the endpoint are described in detail in the present example.

In the present embodiment after ports are set up in steps and and the endpoint receives speech input in step the endpoint sends the original audio speech in English to the STT module in step . The STT module converts the original audio speech to text in step has it translated in steps and and sends the translated text and the original audio speech to the TTS module in step . The TTS module converts the speech to text in step and sends the English German and Spanish audio to the conference bridge in step . The conference bridge then sends the English audio speech to the endpoint in step . Accordingly the English audio speech originating from the endpoint may be sent without translation using the same mechanism e.g. the SST module and TTS module .

Referring to in another embodiment an environment is illustrated in which the endpoint the endpoint the endpoint and the endpoint are on a conference call using the conference bridge of . The environment may be similar or identical to the environment of except for an additional communication path between the endpoint and the conference bridge for original audio speech.

In the present example the endpoint sends the original audio speech to the STT module A as described with respect to . The STT module may then handle speech to text conversion translation and forwarding to the TTS module . The TTS module may then handle text to speech conversion and forwarding of the German and Spanish audio to the conference bridge . The endpoint also sends the original audio speech directly to the conference bridge as illustrated by arrow . Accordingly rather than sending the original audio speech only to the STT module for both translation and forwarding the endpoint sends the original audio speech to the STT module for translation and the conference bridge for forwarding.

Referring to which is directed to the endpoints and a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of in which the endpoint communicates original audio speech to the endpoint . The actual translation of the original audio speech from English into German and Spanish for the endpoints and is not detailed in the present example but may occur in a manner that is similar or identical to that described with respect to .

In the present embodiment after ports are set up in steps and and the endpoint receives speech input in step the endpoint sends the original audio speech in English to the STT module for translation in step . In addition the endpoint sends the original audio speech directly to the conference bridge in step . The conference bridge then sends the original audio speech to the endpoint in step .

Referring to in another embodiment an environment is illustrated in which the endpoint the endpoint the endpoint and the endpoint are on a conference call using the conference bridge of . The environment may be similar or identical to the environment of except that translation occurs after the original audio speech passes through the conference bridge . Accordingly the conference bridge may not be configured to identify languages associated with particular ports or endpoints in some embodiments. In such embodiments the conference bridge may send the audio speech to a particular network address without concern for whether the address is for an endpoint an STT module or another network component. In other embodiments the conference bridge may be configured to recognize languages in order to determine whether to send the speech audio to a particular address such as an endpoint or an STT module associated with an endpoint.

In operation the endpoint receives speech input such as hello in English. The endpoint sends the speech input as the original audio speech in English to the inbound port on the conference bridge as illustrated by arrow . The conference bridge sends the English original audio speech to the outbound port associated with the endpoint as illustrated by arrow the outbound port associated with the endpoint as illustrated by arrow and the outbound port associated with the endpoint as illustrated by arrow .

The English original audio speech is sent to the STT module associated with the endpoint via the outbound port as illustrated by arrow . The STT module converts the speech to text and sends the text to the language translation module as illustrated by arrow . The language translation module converts the text from English into German e.g. Guten Tag before sending the translated text back to the STT module as illustrated by arrow . The STT module sends the translated text to the TTS module as illustrated by arrow although the language translation module may send the translated text directly to the TTS module in some embodiments. The TTS module converts the translated German into German audio speech and sends the audio to the endpoint as illustrated by arrow .

The English original audio speech is also sent to the SST module associated with the endpoint via the outbound port as illustrated by arrow . The STT module converts the speech to text and sends the text to the language translation module as illustrated by arrow . The language translation module converts the text from English into Spanish e.g. Hola before sending the translated text back to the STT module as illustrated by arrow . The STT module sends the translated text to the TTS module as illustrated by arrow although the language translation module may send the translated text directly to the TTS module in some embodiments. The TTS module converts the translated Spanish into Spanish audio speech and sends the audio to the endpoint as illustrated by arrow .

The English original audio speech is also sent to the endpoint via the outbound port as illustrated by arrow . As the endpoint and endpoint are both associated with users who speak the same language the original audio speech is not passed to the STT module in the present embodiment. In other embodiments the original audio speech may be passed to the STT and forwarded to the endpoint rather than sent directly to the endpoint .

Referring to which is directed to the endpoints and a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of in which the endpoint uses translation functionality provided by the language translation module . The endpoint of is not illustrated in but the message sequence that would occur with respect to the endpoint may be similar or identical to the message sequence for the endpoint except that the language translation would be from English to Spanish rather than English to German.

Although not shown it is understood that the messaging of may be applied to the endpoints and of the present example. In steps and the endpoints and respectively contact the conference bridge and obtain one or more ports. In the present example the conference bridge assigns each endpoint and an inbound port from the perspective of the conference bridge and an outbound port as illustrated in .

In step speech input is received by the endpoint from a user and in step the endpoint sends the English original audio speech to the inbound port on the conference bridge . In step the conference bridge sends the English original audio speech to the STT associated with the endpoint and in step sends the English original audio speech to the endpoint . As the endpoint does not need to translate the English original audio speech the endpoint does not need to use the associated STT

In step the STT module converts the received speech to text and in step sends the text to the language translation module along with any needed information such as the source and destination languages. In step the language translation module translates the text from the English source language to the German destination language and in step returns the translated text to the STT module . In some embodiments the language translation module may send the translated text directly to the TTS module . In step the STT module sends the translated text to the TTS module . The TTS module converts the translated text to German audio speech in step . In step the TTS module sends the translated audio speech to the endpoint .

Referring to one embodiment of a computer system is illustrated. The computer system is one possible example of a system component or device such as an endpoint an access server or a shadow server. The computer system may include a central processing unit CPU a memory unit an input output I O device and a network interface . The components and are interconnected by a transport system e.g. a bus . A power supply PS may provide power to components of the computer system such as the CPU and memory unit . It is understood that the computer system may be differently configured and that each of the listed components may actually represent several different components. For example the CPU may actually represent a multi processor or a distributed processing system the memory unit may include different levels of cache memory main memory hard disks and remote storage locations the I O device may include monitors keyboards and the like and the network interface may include one or more network cards providing one or more wired and or wireless connections to the packet network . Therefore a wide range of flexibility is anticipated in the configuration of the computer system .

The computer system may use any operating system or multiple operating systems including various versions of operating systems provided by Microsoft such as WINDOWS Apple such as Mac OS X UNIX and LINUX and may include operating systems specifically developed for handheld devices personal computers and servers depending on the use of the computer system . The operating system as well as other instructions e.g. for the endpoint engine of if an endpoint may be stored in the memory unit and executed by the processor . For example if the computer system is an endpoint e.g. one of the endpoints and the SST module the TTS module the language translation module or the conference bridge the memory unit may include instructions for performing functions as described herein with respect to the various embodiments illustrated in sequence diagrams and flowcharts.

In another embodiment a method for communicating by a first endpoint in an ongoing peer to peer communication session between the first endpoint and a second endpoint in a hybrid peer to peer network comprises establishing by the first endpoint a communications route directly between the first endpoint and the second endpoint wherein signaling communications are sent directly from the first endpoint to the second endpoint via a signaling path provided by the communications route receiving by the first endpoint audio speech input in a first spoken language from a user of the first endpoint determining by the first endpoint whether the audio speech input is to be translated from the first spoken language to a second spoken language sending by the first endpoint the audio speech input to a language translation component accessible to the first endpoint via the hybrid peer to peer network if the audio speech input is to be translated from the first spoken language to the second spoken language wherein the first endpoint does not send the audio speech input directly to the second endpoint if the audio speech input is to be translated from the first spoken language to the second spoken language and sending by the first endpoint the audio speech input directly to the second endpoint via the communications route if the audio speech input is not to be translated from the first spoken language to the second spoken language. The method may further comprise sending by the first endpoint non audio data directly to the second endpoint via the communications route regardless of whether the audio speech input is to be translated from the first spoken language to the second spoken language. The method may further comprise receiving by the first endpoint a translation of the audio speech input from the language translation component and providing the translation of the audio speech input to the user of the first endpoint. The sending the audio speech input to the language translation component may include establishing by the first endpoint a signaling path with a speech to text module of the language translation component and sending the audio speech input to the speech to text module. The method may further comprise performing by the first endpoint an authentication process with an access server in the hybrid peer to peer network and receiving by the first endpoint a profile from the access server following the authentication process wherein the profile identifies the second endpoint as an endpoint with which the first endpoint has permission to communicate and identifies that the second endpoint is associated with the second spoken language. The method may further comprise receiving by the first endpoint a list of languages from the access server wherein the list of languages includes the first and second spoken languages and identifies spoken languages that can be translated by the language translation component. The method may further comprise receiving by the first endpoint a notification directly from the second endpoint that the second endpoint is associated with the second spoken language. The method may further comprise receiving by the first endpoint from the language translation component audio speech originating from the second endpoint wherein the audio speech originating from the second endpoint is translated from the second spoken language to the first spoken language by the language translation component before being received by the first endpoint and producing by the first endpoint the audio speech received from the language translation component as an audible sound. The method may further comprise establishing by the first endpoint a second communications route directly between the first endpoint and a third endpoint wherein signaling communications are sent directly from the first endpoint to the third endpoint via a signaling path provided by the second communications route identifying by the first endpoint that the third endpoint is associated with the first spoken language and sending by the first endpoint the audio speech input directly to the third endpoint via the second communications route.

In another embodiment a method for communicating by a first endpoint in a hybrid peer to peer network in an ongoing communication session with second and third endpoints via a bridge comprises identifying by the first endpoint that the first endpoint is associated with a first spoken language the second endpoint is associate with a second spoken language and the third endpoint is associated with a third spoken language sending by the first endpoint a request to the bridge for an inbound port and an outbound port to be provisioned on the bridge for the first endpoint notifying by the first endpoint a language translation component in the hybrid peer to peer network of the inbound port wherein the language translation component is accessible to the first endpoint via the hybrid peer to peer network and wherein the notifying instructs the language translation component to send audio received from the first endpoint to the inbound port sending to the language translation component by the first endpoint audio speech input received by the first endpoint from a user of the first endpoint wherein the audio speech input sent by the first endpoint is in the first spoken language and receiving by the first endpoint audio speech from the second and third endpoints directly from the outbound port on the bridge wherein the audio speech received by the first endpoint via the outbound port was sent by the second and third endpoints in the second and third spoken languages respectively and wherein the audio speech received by the first endpoint directly from the outbound port is received in the first spoken language. The method may further comprise identifying by the first endpoint that a fourth endpoint is associated with the first spoken language and sending by the first endpoint the audio speech received from the user of the first endpoint directly to the fourth endpoint without using the bridge. The method may further comprise identifying by the first endpoint that a fourth endpoint is associated with the first spoken language and sending by the first endpoint the audio speech received from the user of the first endpoint to the inbound port on the bridge. The method may further comprise sending by the first endpoint non audio data directly to at least one of the second and third endpoints wherein the non audio data does not pass through the bridge. The method may further comprise receiving by the first endpoint non audio data directly from at least one of the second and third endpoints wherein the non audio data does not pass through the bridge. The method may further comprise directly notifying the second and third endpoints by the first endpoint of the inbound and outbound ports wherein the notifying does not use the bridge. The method may further comprise receiving by the first endpoint notifications directly from each of the second and third endpoints of inbound and outbound ports corresponding to the second and third endpoints. The method may further comprise sending an indication by the first endpoint to the language translation component that the audio speech input is to be translated into the second and third languages.

In another embodiment a method for translating audio speech in a hybrid peer to peer network comprises receiving by a speech to text module first audio speech media from a first endpoint via a hybrid peer to peer network wherein the first audio speech media is in a first human language converting by the speech to text module the first audio speech media into original text sending by the speech to text module the original text to a language translation module translating by the language translation module the original text into translated text in a second human language sending by the language translation module the translated text to a text to speech module converting by the text to speech module the translated text into second audio speech media wherein the second audio speech media is in the second human language and sending the second audio speech media to a second endpoint in the hybrid peer to peer network. The sending the second audio speech media may be performed by the text to speech module. The method may further comprise sending by the speech to text module the translated text to the first endpoint. The method may further comprise waiting by the speech to text module for an approval of the translated text from the first endpoint before sending the original text to the language translation module. The sending the second audio speech media to the second endpoint may include sending the second audio speech media to a port on a bridge identified by the first endpoint. The method may further comprise translating by the language translation module the original text into translated text in a third human language sending by the language translation module the translated text to the text to speech module converting by the text to speech module the translated text into third audio speech media wherein the third audio speech media is in the third human language and sending the third audio speech media to a third endpoint by sending the third audio speech media to a port on the bridge identified by the first endpoint. The ports for the second and third audio speech media may be the same port. The method may further comprise receiving by the speech to text module instructions from the first endpoint identifying the first and second human languages.

In another embodiment an endpoint device comprises a network interface a processor coupled to the network interface and a memory coupled to the processor and containing a plurality of instructions for execution by the processor the instructions including instructions for performing an authentication process with an access server in a hybrid peer to peer network wherein the authentication process authorizes the first endpoint to access the hybrid peer to peer network receiving a profile from the access server identifying a second endpoint as an endpoint within the hybrid peer to peer network with which the first endpoint has permission to communicate determining that a user of the first endpoint has designated a first human language to be used by the first endpoint establishing a communications route directly between the first endpoint and the second endpoint wherein signaling communications are sent directly from the first endpoint to the second endpoint via the communications route determining that the second endpoint has designated a second human language to be used by the second endpoint receiving audio speech input in the first human language from the user of the first endpoint and sending the audio speech input to a language translation module for translation to the second human language. The endpoint device may further comprise instructions for sending non audio data directly to the second endpoint via the communications route. The instructions for determining that the second endpoint has designated that the second human language be used by the second endpoint may include instructions for obtaining an identifier representing the second human language from the profile. The instructions for determining that the second endpoint has designated that the second human language be used by the second endpoint may include instructions for obtaining an identifier representing the second human language directly from the second endpoint.

While the preceding description shows and describes one or more embodiments it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the present disclosure. For example various steps illustrated within a particular sequence diagram or flow chart may be combined or further divided. In addition steps described in one diagram or flow chart may be incorporated into another diagram or flow chart. Furthermore the described functionality may be provided by hardware and or software and may be distributed or combined into a single platform. Additionally functionality described in a particular example may be achieved in a manner different than that illustrated but is still encompassed within the present disclosure. Therefore the claims should be interpreted in a broad manner consistent with the present disclosure.

