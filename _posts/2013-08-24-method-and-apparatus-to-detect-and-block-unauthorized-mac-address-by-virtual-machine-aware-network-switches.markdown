---

title: Method and apparatus to detect and block unauthorized MAC address by virtual machine aware network switches
abstract: The disclosure relates to a method and apparatus for detecting and blocking unauthorized MAC addresses used by virtual machines. In one embodiment, the disclosure provides automated and consistent verification of VM traffic against values assigned to each VM by network administrator. In another embodiment, the disclosure provides for validating a newly discovered VM by comparing its attributes with the corresponding description of the known VMs stored at a database. A re-validation check may also be implemented. If the VM is validated, the VM will be processed according to network policy to support features including VMReady. If the VM fails validation, other actions can be taken.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09276953&OS=09276953&RS=09276953
owner: International Business Machines Corporation
number: 09276953
owner_city: Armonk
owner_country: US
publication_date: 20130824
---
The disclosure relates to preventing MAC spoofing. Specifically the disclosure relates to novel method and apparatus for identifying and validating newly discovered virtual machines VMs .

The term utility computing has been used to refer to a computational model in which processing storage and network resources software and data are accessible to client computer systems and other client devices e.g. mobile phones or media players on demand much like familiar residential utility services such as water and electricity. In some implementations the specific computational resources e.g. servers storage drives etc. allocated for access and use by client devices are specified by service agreements between the utility computing provider and its customers. In other implementations commonly referred to as cloud computing details of the underlying information technology IT infrastructure are transparent to the utility computing customers.

Cloud computing is facilitated by ease of access to remote computing websites e.g. via the Internet or a private corporate network and frequently takes the form of web based resources tools or applications that a cloud consumer can access and use through a web browser as if the resources tools or applications were a local program installed on a computer system of the cloud consumer. Commercial cloud implementations are generally expected to meet quality of service QoS requirements of cloud consumers which may be specified in service level agreements SLAs . In a typical cloud implementation cloud consumers consume computational resources as a service and pay only for the resources used.

Adoption of utility computing has been facilitated by the widespread utilization of virtualization which is the creation of virtual rather than actual versions of computing resources e.g. an operating system a server a storage device network resources etc. For example a virtual machine VM also referred to as a logical partition LPAR is a software implementation of a physical machine e.g. a computer system that executes instructions like a physical machine. VMs can be categorized as system VMs or process VMs. A system VM provides a complete system platform that supports the execution of a complete operating system OS such as Windows Linux AIX Android etc. as well as its associated applications. A process VM on the other hand is usually designed to run a single program and support a single process. In either case any application software running on the VM is limited to the resources and abstractions provided by that VM. Consequently the actual resources provided by a common IT infrastructure can be efficiently managed and utilized through the deployment of multiple VMs possibly associated with multiple different utility computing customers.

The visualization of actual IT resources and management of VMs is typically provided by software referred to as a VM monitor VMM or hypervisor. In various implementations a VMM may run on bare hardware Type 1 or native VMM or on top of an operating system Type 2 or hosted VMM .

In a typical virtualized computing environment VMs can communicate with each other and with physical entities in the IT infrastructure of the utility computing environment utilizing conventional networking protocols. Conventional networking protocols are commonly premised on the seven layer Open Systems Interconnection OSI model which includes physical data link network transport session presentation and application layers. VMs communicate with other network entities as if each VM is a physical network element. This is done by substituting a virtual network connection for the conventional physical layer connection.

Conventional switches also have the so called VMReady feature which automatically discovers VMs connected to a particular switch port. VMReady configures the switch ports for the discovered VM providing significant value to the network administrator by simplifying and automating switch configuration and by moving network policies on VM migration. VMReady identifies VMSs by their MAC address. An untrusted server or VM could identify itself by a trusted or known MAC address leading to MAC spoofing attacks. For example MAC addresses can be reused or duplicated for a different VM. Such reuse or duplication create security concern.

Therefore there is a need for a method and system for detecting identifying and validating MAC addresses assigned to newly discovered VMs.

The disclosure provides automated and consistent verification of VM traffic against values assigned to each VM by network administrator. Specifically an embodiment of the disclosure provides for validating a newly discovered VM by comparing its attributes with the corresponding description of the VM stored at a database. If the VM is validated the VM will be processed according to network policy to support features including VMReady. If the VM fails validation other actions can be taken. A pre validation process can be added according to one embodiment of the disclosure. Here once the validation requirement is triggered the static configuration of the relevant switch is queried to determine whether the port on which the VM resides is identified at the static configuration of the switch. If the relevant port is identified additional validation may be avoided. The pre validation process can be used as a stand alone process or may be combined one or more of the disclosed validation techniques.

In one embodiment the disclosure provides a method and protocol for using information about physical connectivity of a server and a switch together with VM attributes assigned by a VM manager and information in the incoming VM traffic to validate VM identity.

In another embodiment the disclosure relates to a method for verifying identity of VMs the method comprising receiving an initial message at a first VM from an associated switch the initial message relayed through a second VM the first VM managed by a first hypervisor retrieving data relating to the initial message from a database querying the data to determine whether the initial message arrived through a port communicating with the first hypervisor verifying identity of the first VM if the initial message is routed through the port communicating with the first hypervisor and validating the first VM address by querying the data to ascertain an attribution match on at least one of first VM MAC Address VM UUID switch port address or switch ID.

In still another embodiment a system for verifying identity of a VM comprises a processor circuit a memory circuit in communication with the processor circuit the memory circuit storing a program code executable on the processor circuit the program code configuring the processor circuit to i receive an initial message at a first VM from an associated switch the initial message relayed through a second VM the first VM managed by a first hypervisor ii retrieve data relating to the initial message from a database iii query the data to determine whether the initial message arrived through a port in communication with the first hypervisor iv verify identity of the first VM if the initial message is routed through the port communicating with the first hypervisor and iv validate the first VM address by querying the data to ascertain an attribution match on at least one of first VM MAC Address VM UUID switch port address or switch ID.

In yet another embodiment the disclosure relates to a non transitory computer readable medium comprising instructions configured to cause a computer to receive an initial message at a first VM from an associated switch the initial message relayed through a second VM the first VM managed by a first hypervisor retrieve data relating to the initial message from a database query the data to determine whether the initial message arrived through a trusted port in communication with the first hypervisor verify identity of the first VM if the initial message is routed through the trusted port in communication with the first hypervisor and validate the first VM address by querying the data to ascertain an attribution match on at least one of first VM MAC Address VM UUID switch port address or switch ID.

Software of a known physical network switch has stored a medium access control MAC address as a virtual machine VM identifier in configuration and data structures of the physical network switch to facilitate securing an associated virtualized computing environment. Dependence on the MAC addresses as VM identifier have several limitations. For example using MAC addresses as VM identifiers may allow a user of an end station i.e. a physical machine that has root privileges to spoof a source MAC address and gain unauthorized access to a virtual local area network VLAN . Another limitation is that a MAC address may be assigned to another VM or end station thereby creating several VMs with the same MAC address. Yet another limitation of using MAC addresses as VM identifiers is that an original VM may be destroyed and a MAC address of the original VM may be redistributed to a new VM. In short MAC addresses may be intentionally e.g. unauthorized access spoofing or unintentionally e.g. reassignment duplicated thereby nullifying uniqueness to the desired VM.

Among others Applicant s disclosure provides different validation techniques for identifying MAC address duplication or reassignment. By way of example a first validation mode may be implemented that performs a basic check to guard against MAC address spoofing. As another example a second validation mode may be implemented to perform a more elaborate check that addresses spoofing duplication and reassignment of MAC addresses. The first validation mode may be simpler and taster Than the second validation mode. The first validation mode can be deployed in environments where it is known that MAC address reassignment and duplication does not occur. While the examples of the disclosure are directed to VM controlled by hypervisors it should be appreciated that the techniques may be extended to other virtualization modes that provide secure application programming interfaces APIs to facilitate VM management and control.

The exemplary first and second validation modes may employ periodic discovery messages. The discovery messages can provide a switch identifier e.g. LP address and switch port number to a server port. Discovery messages interchangeably hello messages may not be generated by arbitrary systems on a network as by standard discovery messages cannot be forwarded by a physical network switch from one port to another port. As such a discovery message received by a VMM is guaranteed to have originated from a directly connected physical network switch.

Thus according to one embodiment of the disclosure a physical network switch periodically transmits a discovery message on each server port e.g. internal ports on bladed switches and specially marked server ports on top of rack ToR switches . A physical network switch may transmit discovery messages compliant with a Cisco discovery protocol CDP or a link layer discovery protocol LLDP .

The server software e.g. VMware ESX listens for discovery messages on all physical network interface cards NICs . Once received the discovery message data for each physical NIC is recorded on a database. The stored discovery message data can be retrieved e.g. using a VMware virtual infrastructure VI API by a physical network switch or other devices. The combination of discovery message advertisements on server ports and retrieval of selected port assignment data by a physical network switch using a secure API enables port identification used by VMM servers. Additional validation for example Cross checking a VM MAC address or other information to physical network switch port mapping can be implemented as supplemental validation mode.

In the first validation mode configuration of physical network switch software is allowed only on VMM e.g. ESX ports. By disallowing spoofing at the VMM i.e. VMs are allowed to use only MAC addresses assigned to them by the VMM VMM ports may be assumed to be spoof proof. VMM ports may additionally be identified by transmitting discovery messages from a physical network switch on server ports and using a secure API e.g. the VI API to scan through the discovery message data stored against each physical NIC in an inventory hierarchy e.g. the VMware vCenter inventory hierarchy . A given physical network switch port is deemed to be a VMM port if the switch port can be located in the scan. That is when some physical port in the VMM inventory has a same switch identifier and switch port identifier as a switch port in question the switch port is deemed to be a VMM port.

VMM port marking validation may require invocation in a number of different scenarios in which a physical network switch port has not yet been marked as a VMM port. For example when a VM interface is added to a VM group and a MAC address of the VM is already in a level 2 L2 table of a physical network switch i.e. the MAC address is already active on a switch port VMM port marking validation requires invocation. Alternatively when a VM interface is already in a VM group of a physical network switch and a MAC address of the VM Interface experiences a source miss on a port of the network switch commonly referred to as pre provisioning VMM port marking validation requires invocation.

Another consideration is a link up event on a port. If a port that is marked as a VMM port goes down a VMM port attribute for the port should be cleared in the event that the port is subsequently connected to an end station that is not managed by the VMM. Here when the link comes back up VMM port validation should be initiated. Link validation may be performed according to the source miss scenario or by proactively checking to determine if the VMM port remains intact before VMs begin transmitting traffic on the VMM port. Validation for the source miss scenario may be performed in band since the source miss is triggered by the first arriving packet from the VM.

Functionality may be affected if during validation subsequent packets from a VM are discarded. However since the first packets arriving from a VM at a physical network switch port are typically proxied by the VMM i.e. ESX sends a reverse address resolution protocol RARP packet with a MAC address of a VM as a source address and real packets from the VM arrive much later in time. In most cases validation completes success or failure ahead of the first non proxied packet s arrival from the VM. In general a time between the first proxied packet and the first actual packet from the VM is typically longer during VM startup than during live VM migration e.g. VMware VMotion . In the event that real packets from the VM get dropped during validation the discards are not expected to affect functionality with most upper level protocols e.g. transfer control protocol TCP . While a slight performance degradation may occur due to dropped packets discards are not unexpected during live migration.

In the second advanced validation mode software configuration at a physical network switch for a given VM interface may be applied after verifying the connectivity of the given VM interface. The VM MAC address is stored along with the universal unique identifier UUID of the VM to ensure unambiguous identification of VM interface. When a physical network switch starts receiving packets from a VM that is in a VM group of the network switch the switch checks to determine if the VM interface specified by the user i.e. in the configuration of the switch is the VM interface that is transmitting on the switch port where the packets are being received. The second validation mode may use similar techniques as the first validation mode. That is discovery messages are used along with secure API port assignment data retrieval e.g. from a VMware Virtual Center Inventory . A difference between the first and second validation modes is the level of validation. Instead of just checking if some physical interface in the VMware Virtual Center inventory is connected to the switch port as in the first validation mode the second validation mode may check additional parameters i.e. VM MAC address VM UUID switch port and switch ID between the network switch and the VMM inventory for consistency.

At the network switch the MAC address and UUID of the VM as well as the switch ID are stored in a current configuration file while the port number comes from the L2 table of the switch when the VM is active. The VI API client i.e. the physical network switch locates the VM interface in the VMware Virtual Center inventory based on the UUID and MAC address of the VM. The VI API client then reads the port assignment data of the corresponding physical NIC by mapping a port group of the VM interface to its virtual switch then to the physical NIC NICs that act as uplinks for the virtual switch . The port assignment data provides the switch ID and port number based on received discovery message data. In one or more embodiments the MAC address appearing on the switch port is deemed verified only if the four parameters match exactly. This check guards against spoofing MAC addresses duplicate MAC addresses and reused MAC addresses.

In one or more embodiments software executing on a physical network switch invokes a send routine periodically e.g. every minute to transmit a discovery message. The send routine transitions through a list of configured ports to determine which ports require transmission of advertisements with discovery message data. It should be noted that all internal ports and server ports are by default configured to send out advertisements and when some ports are removed the removed ports do not get saved in the configuration and as such do not survive reset . As used herein the term internal ports refer to embedded physical network switches which reside inside a blade server and have fixed server and non server ports and the term server ports refer to non embedded physical network switches which have ports that can connect to server and other physical network switches and as such require explicit designation of server ports . In one or more embodiments when a link comes up on a port which is configured to send out discovery messages a discovery message is immediately transmitted. In various embodiments UUIDs of configured VMs are saved in a configuration file to facilitate strict checking. A global array may be maintained at the network switch to hold port settings. In one or more embodiments two copies of the global array i.e. a first copy to hold settings when the configuration is not applied and a second copy that corresponds to a current configuration are maintained. In various embodiments each VM belonging to a VM group is tracked to determine when a MAC address of the VM requires verification.

The computing resources residing in physical layer of cloud are virtualized and managed by one or more VMMs or hypervisors. The VMMs present a virtualization layer including virtual entities e.g. virtual servers virtual storage virtual networks including virtual private networks virtual applications and virtual clients. The virtual entities which are abstractions of the underlying resources in physical layer may be accessed by client devices of cloud consumers on demand.

The VMM s also support a management layer which implements various management functions for the cloud . The management functions can be directly implemented by the VMM s and or one or more management or service VMs running on the VMM s and may provide functions such as resource provisioning metering and pricing security user portal services service level management security SLA planning and fulfillment. The resource provisioning function provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. The metering and pricing function provides cost tracking and billing or invoicing for consumption of the utilized resources. The utilized resources may include application software licenses. The security function provides identity verification for cloud consumers and tasks as well as protection for data and other resources. The user portal function provides access to the cloud computing environment for consumers and system administrators. The service level management function provides cloud computing resource allocation and management such that required service levels are met. The SLA planning and fulfillment function provides and procures anticipated cloud computing resources.

Workloads layer may be implemented by one or more consumer VMs. Workload layer provides examples of functionality for which the cloud computing environment may be utilized. Such examples include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing and transaction processing.

Each physical hosts executes a respective one of VMM which virtualizes and manages the resources of its respective physical host under direction of a human and or automated cloud administrator at a VMM management console which can be implemented using data processing system as depicted in coupled to physical hosts by IP network . VMM on physical host supports the execution of VMs VMM on physical host supports the execution of VMs and VMM on physical host supports the execution of VMs . As one example management console may be configured to execute VMware vCenter Server to manage VMMs . More or less than two VMs may be deployed on a physical host configured according to the present disclosure. In various embodiments VMs can include VMs of one or more cloud consumers and or a cloud provider. In the depicted embodiment each of VMs has one and may include multiple virtual network interface controller VNIC1 VNIC6 which provide network connectivity at least at Layers 2 and 3 of the OSI model.

Virtual switch is configured to forward at least some communications from to VNIC1 and VNIC2 of VMs respectively to physical network switch over network segment using physical NIC . Virtual switch is configured to forward at least some communications from to VNIC3 and VNIC4 of VMs respectively to physical network switch over network segment using physical NIC Similarly virtual switch is configured to forward at least some communications from to VNIC5 and VNIC6 of VMs respectively to physical network switch over network segment using physical NIC . In various embodiments physical switches. are configured to communicate e.g. via a secure API with management console to retrieve port assignment data to validate port assignments for VMs . In one or more embodiments management console may maintain the port assignment data for VMs or may facilitate access to part assignment data for VMs respectively that is maintained by VMMs 

Physical network switch reads port assignment data from port assignment data inventory via a secure API of a corresponding physical NIC by mapping a port group of the VM interface to an associated virtual switch then to a physical NIC that acts as an uplink for virtual switch . The port assignment data provides the switch ID and port number based on received discovery message data. In one or more embodiments a MAC address appearing on a switch port of physical network switch is deemed verified only if all four parameters i.e. VM MAC address VM UUID switch port and switch ID match exactly. As noted above verifying that all four parameters match exactly advantageously guards against spoofing MAC addresses duplicate MAC addresses and reused MAC addresses.

A validation trigger can occur if a message is directed at a VM. Alternatively routine validation checks can be implemented periodically. A pre validation step can be used to shorten the validation process. During pre validation or in response to an incoming message directed to a VM the static configuration of the affected relevant switch is queried to determine whether the port on which the VM resides is identified at the switch s configuration. If the port is identified in the static configuration additional validation can be avoided. The pre validation process can be used as a stand alone process or may be combined with one or more of the following validation techniques.

In one embodiment of the disclosure a so called Hello protocol is ran on switch ports P P and P. Periodically each switch port will send a Hello message in an L2 packet on each of its server feeing ports. The Hello packet contains an identification of the switch e.g. the Management IP Address and an identification of the port e.g. the port number on which the packet is sent. The Hello protocol may be an especially devised protocol or a conventional protocol such as CDP or LLDP. In one embodiment the Hello packets are sent peer to peer such that the packets are not forwarded by the switch. This will ensure that the switch port connected to the hypervisor NIC is the source of the Hello packet. The associated hypervisor maintains a database of the information in the received hello packet and the port number on which the Hello packet was received. Each hypervisor sends its database to central management device . Alternatively the database on each hypervisor can be queried from Central Management Device .

Because of the discovery messages Hello messages central management device will contain information about the switch port to which the hypervisors are connected. Switch may comprise a local cache of the database not shown or may query a database not shown associated with central management device on demand. Switch may query the database to determine if a particular switch port is connected to a VMware hypervisor. A switch port e.g. P P P connected which is connected to a VMware hypervisor is assumed to be a trusted port.

The process of starts at step when a new VM is discovered or as part of a periodically scheduled validation command. Switch may perform pre validation and or validation when a VM MAC address is detected on a new port. Switch may also perform trusted port checking whenever a link goes up or down. Pre validation check seeks to efficiently identify authenticity of the newly discovered VM. Pre validation starts by querying the static configuration stored on the switch. The static configuration file table is conventionally stored on the switch and among others maintains data directed to ports residing on each switch. If the static configuration identifies the port on which the target VM resides then the port and the VM are assumed to be trusted and further validation may not be need. On the other hand the network manager may optionally require additional validations through one or both of validation checks and . Once a port or VM is identified as trusted further validation may not be needed until a communication link is interrupted.

At step the Hello packet is sent to the identified port. At step the switch e.g. switch will query a database not shown to determine whether traffic from the newly seen VM is arriving from a trusted port e.g. P . If the basic validation check is successful traffic is forwarded to the VM as shown in step . If the basic validation check fails one or more of the user specified actions will occur. The user specified actions may include 1 generating a warning syslog 2 disabling the port 3 creating an access control list ACL to drop traffic from the suspected MAC or 4 conduct advance validation check .

In advance validation in addition to the port check of step the switch will check for VM MAC duplication and VM MAC reuse. At step the Hello packet s attributes are identified. This information is available from the packet itself.

At step the expected attributes of the Hello packet are retrieved from the database. When the user configures the VM MAC address the switch will query the database and ensures that the VM MAC is unique and the VM UUID will be retrieved from the database step and used for VM MAC validation check. The switch will also query the database to determine if traffic from the newly discovered VM is arriving from a trusted port and whether the following attributes match 

In one embodiment the MAC Address appearing on the switch port is deemed verified only if all four attributes match exactly. In another embodiment one or more attribute must match to validate authenticity. The attribute matching step is shown as step . The validation cheeks of guard against spoofing duplicate MAC address and reused MAC address. If the attribution match fails the VM is invalidated at step 

While the principles of the disclosure have been illustrated in relation to the exemplary embodiments shown herein the principles of the disclosure are not limited thereto and include

