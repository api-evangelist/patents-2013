---

title: Method and device for extracting a meta data fragment from a metadata component associated with multimedia data
abstract: A method and device for extracting, from a metadata component associated with a media resource, a metadata fragment associated with a given media fragment of the media resource, the method comprising and the device comprising means for obtaining at least one search expression, for finding the metadata fragment in the metadata component, based on the type of extraction parameters related to a request for obtaining the media fragment from the media resource and the structure of metadata component; parameterization of the or each obtained search expression with values based on values of the extraction parameters and extracting from the metadata component the metadata fragment using the or each parameterized search expression.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08938440&OS=08938440&RS=08938440
owner: Canon Kabushiki Kaisha
number: 08938440
owner_city: Tokyo
owner_country: JP
publication_date: 20130222
---
This application claims the benefit under 35 U.S.C. 119 a d of United Kingdom Patent Application No. 1203233.0 filed on Feb. 24 2012 and entitled A method and device for extracting a metadata fragment from a metadata component associated with multimedia data The above cited patent application is incorporated herein by reference in its entirety.

The present invention concerns a method and a device for extracting a metadata fragment from a metadata component associated with multimedia data. An exemplary application of the invention relates to the extraction of metadata fragments from XML documents related to a video or other type of multimedia file.

The Internet is becoming increasingly exploited by users and consumers for sharing data such as personal photos or videos. Multimedia resources available via the Internet are often associated with metadata. For example a video file may have associated metadata such as subtitles comments annotations ratings etc. An Internet trend particularly in relation to social networks is to comment rank share and recommend online videos to other users. As a consequence more and more metadata associated with online multimedia data such as videos is generated made available online and later aggregated with the online multimedia data. Other examples of metadata associated with multimedia data such as video data may include output data provided by object content recognition modules or information obtained from sensors embedded in a video recording device. When retrieving a part of a recorded and analysed video a user may be interested in obtaining in addition to the video data the analysis results for different purposes augmented display training monitoring . . . .

In 2008 W3C initiated a standardization process in order to specify an addressing scheme based on a uniform resource identifier URI mechanism. URI is an addressing scheme for identifying resources on the Internet and also provides features to address sub parts of a resource using what is referred to as a fragment identifier. Based on the fragment identifier the Media Fragments working group is defining syntax to address specific parts in media resources available on the internet. This syntax is referred to as Media Fragments URI. The specification defines the fragment syntax as well as the communication protocol to enable efficient transmission between a client and a server of media subparts that are addressed using the Media Fragments scheme. Indeed a Media Fragment aware server will interpret the Media Fragments request and will serve only the relevant part of the resource thus optimizing the usage of network bandwidth and saving user processing resources. Moreover this addressing scheme enables requests to be expressed that are independent of the media representation format.

The Media Fragments URI specification defines syntax for addressing specific parts of multimedia resources on the Web. Several kinds of addressing co exist temporal spatial track or through id.

Temporal addressing relates to time varying resources such as video or audio streams for example and enables a specific time segment or starting point in a media resource to be referenced. The following are examples of temporal Media Fragment addressing in a video resource 

The first URI references a temporal segment starting at the tenth second having a duration of 10 seconds and extracted from video.mp4 resource that is located on contentServer .

The second URI references for the same video resource a temporal segment starting at time t 35 seconds until the end .

Spatial addressing enables a spatial area in a video or in a picture to be referenced. The syntax is simple and specifies position of the top left corner x y followed by the width and height of the selected area. The following are examples of spatial Media Fragments 

The first URI references a spatial area from point 45 70 with a size of 480 340 pixels extracted from video.mp4 resource that is located on contentServer .

The second URI references for a picture a spatial area starting at point whose coordinates fall at 25 of original width and 25 of original height with a size of 50 in each dimension compared to the original size.

Track addressing enables one or more tracks to be referenced in the resource as illustrated in the examples below provided that the list of tracks composing the multimedia resource is known.

The first URI references the video track of the resource called movie.mp4 while the second references both video and audio

id based addressing enables one to reference a specific part of a multimedia resource that has been a priori indexed. Example 

This URI references a temporal segment of the movie.mp4 resource potentially combined with a track selection and or a spatial area for example to focus on the characters that the author has indexed with the identifier 

However applying a URI with the fragment identifier to request so referenced Media Fragments does not allow the media server to be informed of the specific part that is requested by a user. Indeed the content of fragment identifier is by definition processed at the user side since it is not transmitted from the client to the server. As a result the Media Fragments working group defined in its specification a transport protocol for Media Fragments request response for example on HTTP protocol. This consists in mapping the Media Fragments URI i.e. the fragment identifier onto the existing HTTP Range header. The client then issues a traditional GET HTTP request to the server with the so filled Range header to inform the media server of the requested parts in the media resource. Receiving the request the server then translates the HTTP Range parameters into extraction parameters for example from time duration 10 seconds to 20 seconds to perform on the resource. The server then extracts the requested content or a subset depending on random accessibility of the resource or the whole resource if no extraction is possible sends it back to the client using an HTTP response with a specific new HTTP header Content Range Mapping to indicate what has actually been extracted with its correspondence in byte ranges. This provides an efficient way to exchange pieces of multimedia resources between a client and a server.

For XML metadata XPath language has been specified by W3C. This language defines syntax for writing queries to extract specific parts of an XML document. XPath 1.0 language defines 4 data and 7 node types. XPath syntax also defines a grammar for building expressions that will be applied to an XML document in order to extract parts of interest. XPath expressions can be gathered into categories as follows 

These are expressions returning as an evaluation result an ordered set of nodes essentially LocationPath and Steps that correspond to the specification of a path to resolve into a tree representation of an XML document.

In order to be able to extract an XML fragment from an XML document at the time of writing of the XPath expression the content of the XML document should be known. This can be achieved by knowledge of XML schema information or by means of a user interface displaying the structure of the document so that a user can select parts of interests.

The Media Fragments URI techniques discussed above do not however focus on metadata addressing except when metadata is embedded into the media resource and reachable via track addressing. Metadata distinct from the media resource is the most common case on the Internet.

Moreover considering the variety of metadata and user generated content on the internet that may be related to a video file for example e.g. comments ratings annotations subtitles etc. an XPath technique alone is not sufficient to extract Media Fragments from metadata documents since XPath techniques do not enable blind addressing i.e. without knowledge about the document organization .

When a user requests specific parts of a video or multimedia presentation from an online server it would be desirable to be able to filter the metadata associated with the video or multimedia data by extracting only the relevant parts that correspond to the requested part in the video or multimedia presentation. This would avoid the transmission of useless information over the network and would limit the buffering requirements at the client side.

According to a first aspect of the invention there is provided a method of extracting from a metadata component associated with a media resource a metadata fragment associated with a given media fragment of the media resource the method comprising obtaining at least one search expression for finding the metadata fragment in the metadata component based on the type of extraction parameters related to a request for obtaining the media fragment from the media resource and the structure of metadata component parameterization of the or each obtained search expression with values based on values of the extraction parameters and extracting from the metadata component the metadata fragment using the or each parameterized search expression.

Thus a user performing a request for one or more media fragments of a media resource may also be provided with access to corresponding metadata fragments. This enables only the relevant part of the metadata to be transferred to the user s device thereby reducing the amount of data to be transferred and optimising usage of network bandwidth.

The type of search criteria corresponds to the type of access to the multimedia resource. For example the search criteria may comprise a spatial search criterion for obtaining multimedia data of the multimedia resource corresponding to a specific spatial zone of the multimedia resource and or a temporal search criterion for obtaining multimedia data of the multimedia resource corresponding to a specific time duration.

The method may include determining the structure of the metadata component in the case where the format of the metadata component is not identified.

Embodiments of the invention thus provide an inference module that analyzes metadata documents in order to associate parameterize able XPath expressions with each declared metadata document.

Determining the structure of the metadata component comprises analysing the metadata component to verify the presence of one or more pre defined keywords.

In an embodiment of the invention the parameterised search expressions are mapped to the metadata component. Thus the format identification step to determine the structure of metadata component may be omitted thereby optimising the extraction process.

In an embodiment the pre defined keywords are based on the extraction parameters for obtaining the media fragment

In an embodiment it is determined if the or each pre defined keyword is present as an attribute or an element in the metadata component.

In an embodiment determining the structure of the metadata component comprises detecting the presence of one or more keyword values.

The method may include a step of determining a further keyword for the at least one search expression based on a detected formatted value.

In an embodiment the further keyword stored replaces a least used predefined keyword previously stored.

The method may include determining a respective generic search expression for the or each parameterised search expression for future use in extracting metadata fragments from metadata components of the same type by replacing the parameter values with generic parameters.

In an embodiment the generic search expressions are mapped to the type of metadata component and stored.

In an embodiment the step of detecting the presence of one or more keyword values is performed as an optional background task when the metadata component is not time dependent.

In one embodiment in the case of multiple extraction parameter types the first most discriminant keywords are considered before they least discriminant ones.

A second aspect of the invention relates to a method of delivering a metadata fragment from a metadata component associated with a media resource the method comprising the steps of 

In embodiments of the invention the metadata component is defined in XML and the or each search expression comprises an XPath expression.

A third aspect of the invention provides a device for extracting from a metadata component associated with a media resource a metadata fragment associated with a given media fragment of the media resource the device comprising 

means for obtaining at least one search expression for finding the metadata fragment in the metadata component based on the type of extraction parameters related to a request for obtaining the media fragment from the media resource and the structure of metadata component 

means for parameterization of the or each obtained search expression with values based on values of the extraction parameters and

means for extracting from the metadata component the metadata fragment using the or each parameterized search expression.

A fourth aspect of the invention provides a device for delivering a metadata fragment from a metadata component associated with a media resource the device comprising 

means for extracting the metadata fragment from the metadata component using a device according to claim wherein the parameters representative of the media fragment are obtained from the media fragment request and

The device may be provided with means for performing the method according to the various embodiments of the invention.

At least parts of the methods according to the invention may be computer implemented. Accordingly the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system . Furthermore the present invention may take the form of a computer program product embodied in any tangible medium of expression having computer usable program code embodied in the medium.

Since the present invention can be implemented in software the present invention can be embodied as computer readable code for provision to a programmable apparatus on any suitable carrier medium. A tangible carrier medium may comprise a storage medium such as a floppy disk a CD ROM a hard disk drive a magnetic tape device or a solid state memory device and the like. A transient carrier medium may include a signal such as an electrical signal an electronic signal an optical signal an acoustic signal a magnetic signal or an electromagnetic signal e.g. a microwave or RF signal.

The application server system may for example be implemented as an accessible cloud service. The application server system is configured to manage user requests for media data and or metadata received from one or more user terminal devices. In order to handle requests the application server accesses description files that list the available video contents and their related resources such as metadata including user annotations ranking and or related videos and the like. These description files are used to show users the available data contents that the user can select and interact with. The data content is provided by various video provider servers and metadata provider servers . The application server system may retrieve data content manually by means of an application administrator or automatically by crawling the Web for annotation services or for feeds from video publishers .

A user by means of user terminal device can select data content for browsing and can navigate to the selected data content through hyperlinks. The user device includes an embedded Media Fragments client device for translating each navigation request into a Media Fragments request for transmission to the application server system . In addition to navigation the user can indicate the application from which he is interested in obtaining additional data. Some of the additional data may be displayed on video data thus requiring fast response from the application server system . Other data may be used to fill parts of the presentation page layout and may be less critical in terms of response time.

The application server device system contains a Media Fragments server device that is configured to process users requests to access specific parts temporal spatial of a media resource such as a video. The media fragments server device is connected to a database of XPath extractors which is connected to a format knowledge database via an XPath inference module .

The user terminal device and the application server may have a priori at connection start up for example agreed on rich content browsing i.e. obtaining information related to selected videos . In such a case the Media Fragments server device translates the user s request into an appropriate request to be applied to the metadata provider servers for retrieval of metadata Moreover the choice of whether or not to retrieve metadata content associated with a media resource has an impact on the behaviour trade off search response time of the XPath inference module .

To perform the request translation the Media Fragments server accesses databases. The first database is a format knowledge data base storing information keywords on existing metadata formats plus default keywords and the second is an XPath extractors database storing already defined XPath expressions.

It will be appreciated that embodiments of the invention is not limited to the described Media Fragments addressing protocol. Any addressing protocol between the user device and the application server system that enables specification of a search type with bound values in a media resource may also be used. For example the MPEG 21 Part 17 standard also provides a URI based addressing scheme. Typically a URL such as

A method of extracting from a metadata component associated with a media resource a metadata fragment associated with a given media fragment of the media resource according to an embodiment of the invention will now be described with reference to the flow chart of . The described method may be implemented in the system of to extract a metadata fragment associated with a media resource such as a video.

The method begins with an initialization step . In step information on commonly used metadata formats are stored in the format knowledge database .

The organization of the format knowledge database will be described in more detail with reference to .

The data table of the format knowledge database is populated with information taken from existing metadata formats that provide time and space organized information on video content like for example MPEG 7 W3C or 3GPP Timed Text tracks in MXF. An entry in the format knowledge table is created for each known format.

As an example in row of the format knowledge table is filled with W3C Timed Text information first the namespace identifying W3C Timed Text http www.w3.org ns ttml is stored. This namespace makes it possible to directly pre fill the XPath extractors database with search expressions relevant for known standards as detailed below. However keywords tag names can still be extracted from standard formats to populate keywords dictionary in step in order to be used when no standard format is identified. This corresponds for example to line of the format knowledge database .

The last line contains the list of keywords to look for when no standard format is identified i.e. there is no registered namespace in the format knowledge database . These keywords are preferably derived from already registered standard formats and stored respectively in and for time and space information. Thus when the format is not identified a first attempt is made to use pre defined keywords derived from the standard formats. These pre defined keywords correspond to and in line .

Keywords tag names can correspond to timing information or type for example begin end dur corresponding respectfully to a start time an end time and a time duration and to space information origin extent .

For the last line in the table of format knowledge database and for each type of access time space information associated with value formatting is also stored . For example W3C Timed Text specifies that time values must follow a given syntax. The syntax elements one or more characters h m s ms f t units are then stored as predefined value format keywords to later infer on possible time values. This is the same for space values where a px unit appears px is then stored as a pre defined value format keyword to identify space information values formatting. This process contributes to the population of a keywords dictionary in step .

Step involves associating in the resource description files a media file such as a video with references to metadata files for example through a list of URIs or a list of feeds. In step the XPath extractors database can be pre filled for metadata files compliant with known standards. As an example if for one video the description file contains references to a W3C Timed Text document this document can be associated with the XPath extractors associated with the W3C Timed Text documents registered in first lines of the XPath extractor s database table . After step the application server is then ready to process requests from a user s device.

An extraction request is received at the application server system in step . The received request identifies a video selected by the user through a URI e.g. http www.appserver.com video2 t 12 20. The Media Fragments Server of the application server system extracts in step the request parameters search dimensions time in the above example plus associated bound values 12 20 in the above example . When the transport protocol in use is HTTP this information can be retrieved simply by parsing the Range header information. In step the Media Fragments Server parses the part of a description file corresponding to the selected video. There may be one or more related metadata documents associated with the selected video annotations comments technical data . . . . Processing includes attempting to identify and extract relevant information from each of them one after the other. This process starts at step with the first component or metadata document related to the video . If it is determined in step that there is already an extractor registered for this type of document then the Media Fragments server only has to apply that extractor in step to the document in order to extract the relevant data. It may be noted that for metadata documents compliant with standards known by the application server system extractors may have been registered a priori in the XPath extractor database in step .

The Media Fragments server then iterates over any other metadata components indicated in the description file in step . In the case where no extractor is identified in step the inference step for inferring the most suitable extractor is performed. The inference step is performed by the XPath inference module of the application server system and will be described in further detail in what follows. In step the XPath extractor list is updated by adding a new XPath extractor definition to the XPath extractor database of the application server . The Media Fragments server then iterates until no further metadata component is to be processed for the current video step false and thus sends the response to the user request formatted in an XML message as illustrated in to the user terminal device .

The response is transmitted from the application server system to the user terminal device via HTTP. The metadata represented by the response can be for example part of an HTTP multipart message with the first part of the body corresponding to the requested video fragment specified in the Media Fragments client request . In the example of different metadata components matching the requested time interval t 12 20 are presented part is an XML fragment providing sub titles part includes user data providing rating information. It will be appreciated that the surrounding XML syntax around the metadata components is provided here as an example and could be any video metadata standards covering these kind of applications or a dedicated application format. In the extractor list update step for the current metadata component a new input is created in the XPath extractor table of database and the XPath expressions that produced results for the given query are recorded. Before recording the results and to be generic specific values of variables are removed and replaced by parameters using XPath variables.

It will be appreciated that a metadata component may include a metadata document such as an XML document representing metadata associated with a media resource such as a video or multimedia presentation thus representing a component of the said media resource.

Operation of XPath inference module of the application server system will now be described with reference to . Different sets of XPath expressions are used to respectively infer on document format structure and or values. is a flow chart illustrating steps of a method for inferring at least one XPath expression for extracting a metadata fragment from a metadata document in accordance with an embodiment of the invention.

An initial step of the method entails checking the format of the metadata document. In order to check this a first set of XPath requests is applied to the current metadata document. In step the XPath inference module obtains the registered namespace definitions from the format knowledge database . In step the XPath expressions are formed as follows for example each namespace definition leads to an XPath expression of type 

Expression to check presence of a registered namespace URI namespace uri  URI or namespace uri  URI 1 

 NS URI is an XPath value reference for representing the current namespace URI value to be tested that is registered in the format knowledge database . This limits the exploration of the metadata document to a depth level of the XML metadata document being structured into elements and values each element having a depth level corresponding to its position in a tree representation of the document root node having depth 0 which provides a good trade off between complexity and the likelihood of getting the most relevant namespace declarations. When the XPath value reference is applied to the current metadata document in step evaluation of the XPath expression enables it to be determined as to whether or not the metadata document complies with a metadata standard format in step . If a standard format is identified test true this format then provides the entry format in the XPath extractors table of database . Different XPath expressions are then registered in association with this entry format in step depending on the type of user s request for example spatial or temporal access to the video data. Parameters of the user s request for the media fragment are provided by the Media Fragments server in step and indicate the appropriate XPath expressions to be considered step with the range values to be considered typically a start time and an end time for temporal access . Once filled with user s requests parameters the XPath expressions to be applied to the current metadata component are loaded into the Media Fragments server in step in view of their evaluation in step of . Optionally in update step of which follows step an entry can be created in the data table of XPath extractors database to map the current metadata document using a unique identifier also inserted into description file to the appropriate XPath expression in order to avoid the previously described format identification step.

For document structure inference in the case where no format has been identified in step i.e. the metadata document provides no information on its organization or vocabulary in use the XPath inference procedure proceeds to step where an inference is made on structure and or values of the metadata document. For that the XPath inference module uses the list of keywords registered in row of the format knowledge table of data base to obtain keywords according to the user s request for the media fragment. A trial and error type procedure is then performed keywords are organized into search categories for example temporal vs. spatial and within these categories the keywords are organized into start parameters and end parameters. For example for a start parameter of a temporal access several potential keywords may be available t start start tstart time beg begin t . . . . Moreover the keywords can occur as attributes or elements. It is initially checked as to whether the metadata document contains at least one of these keywords step starts looking at attribute position using the following expression 

Then if it is determined in test step that no result is found for the keyword as an attribute the XPath inference engine retries in step with the same keyword regarded this time as an element using the expression below 

These 2 expressions both enable for some optimized XPath implementations the process to be immediately stopped once a first attribute or element with the name keyword is found. This thus limits the search time.

If the keyword is found as an element in test step the XPath inference engine interrupts the keyword list and jumps to the next request criterion in step for example a request criterion such as an end value or a duration for the temporal request. The corresponding list of keywords is then iterated as previously described until no further match is obtained or no further request criterion is to be processed.

Advantageously to save exploration time the XPath inference process can use from one request criterion to another the structural information obtained from previous search i.e. when the start parameter for a criterion is located on an attribute there is a high likelihood that the end parameter will also fall on an attribute. Then XPath inference engine can use this information to start a more relevant search between steps and and even limit the search to one of the two steps or i.e. attribute or element. The above steps enable verification of the presence and identification of the relevant keywords test true or an indication that none of the keywords is present in the metadata document test false . In each case the next step is to infer on document values.

For inference of document values two cases may be distinguished a first case in which information on structure is available test false and a second case when no information on structure has been deduced from the previous step test false . In the first case the XPath inference process proceeds to step in order to directly perform the extraction filtering of the metadata document. In the second case the XPath inference module infers on values in step in order to potentially detect timing or positioning information. This part can be activated when the user does not play with the application in the most reactive mode. Indeed value inference can be more costly than structure inference thus value interference could be used in a background process for future requests or when the request applies to non time critical metadata e.g. metadata that are not display overlaid for visual effects but rather are additional static textual information in relation to the media resource . Such metadata classification may in some embodiments of the invention be performed on the application server and provided to the user GUI. By selecting some of the metadata to receive along with the corresponding video data the user then indicates to the application server the types of metadata that he is interested in.

The next step then involves setting parameters of the user s request as bounds on the detected keywords value. For example given the user s request http www.appserver.com video2 t 12 20 and assuming detected keywords tstart and tend are found as attributes then the inference module builds up the following expression 

However this is the case when values are not formatted. If we consider for example the W3C Timed Text format it can be seen that time values called timeExpression are formatted according to a normative syntax. This is why a preliminary step is used to perform a joint inference validation of the values for the search dimension. First the value for the identified keyword of the first search criterion is extracted in step using one of the expressions below depending on the results of step and i.e. whether it is an attribute or element 

Expressions to get the first value for a given criterion s keyword keyword 1 text 5 attribute keyword 1 text 6 Next in step the value extracted in step is analysed for each registered value format information in the format knowledge database table the XPath inference module checks whether or not pre defined value format keywords for time temporal value formatting and for space spatial value formatting are present in the extracted value in the same step . This corresponds to verifying as to whether or not the formatting of the extracted value of the identified pre defined keyword is compliant with the type of said keyword the verifying is done for example by first detecting the presence of one or more pre defined value format keywords in the value of the pre defined keyword and then checking whether pre defined value format keywords that are detected as being present correspond to the type of the pre defined keyword.

For example a time value may be formatted using a combination of min and sec pre defined value format keywords. The pre defined value format keywords min and sec are for example compliant with the type time of t start and t end pre defined keywords. To detect whether this combination of keywords is used the XPath inference applies XPath expressions such as 

Expression to check the formatting of a value for a bound of a criterion s keyword contains value sec and contains value min 7 

Where value corresponds to the value extracted in step . If the expression returns true indicating that this combination of keywords is used then exploration of the format knowledge table in database can be stopped otherwise the process proceeds to the next combination of keywords until a matching one is found. Associated with each value format keyword are XPath expressions for conversion XPC as illustrated in of formatted values into numbers so that the extraction can be simply expressed as a numerical comparison. These conversion expressions can be used to transform the value obtained from expressions 5 or 6 into t start and t end parameters of expression 4 . When the format value has been identified for all bounds of all search criteria test false then the XPath inference module has succeeded in defining one or more XPath expressions to reach data matching the user s request. The final step is then to generalize the set of XPath expressions so that that set can be applied to similar requests with any bound values. As an example expression above would become 

Media Fragments server of the application server system and t start and t end being the results of conversion functions from the XPath extractor table of database . This is this set of generalized expressions that is registered in the XPath extractor table of database for future access and filtering of the current metadata document. This will avoid the need to apply inference steps and will provide a faster response time in metadata filtering.

For an update of format knowledge in a specific case where no information can be inferred from the metadata document structure test false if the user interaction with the applications server system does not require a rapid response the XPath inference engine can perform a deeper analysis in step of the values using the format knowledge table of database and as explained for the steps to . If a value matches the formatting test true the parent element or parent attribute node may be a potential keyword and is then appended into the last line of format knowledge table in association with current search criterion dimension.

More generally this corresponds to verifying whether the formatting of the values associated with non defined keywords i.e. no information can be inferred directly from them correspond to one or more pre defined value format keywords formatting match and if the value formatting corresponds to one or more pre defined value format keywords storing the non defined keyword as a pre defined keyword in the format knowledge table .

Optionally the insertion in table can be associated with the removal of the least accessed keywords so that keyword search time does not increase and so that the size of the table remains stable. This is done in step . The last step consists in building the one or more generic XPath expressions to reach the parent of the values that matched at step .

When the user s request contains several search directions ex spatial temporal an additional step can be inserted after step in the inference on structure. This additional step would include a loop on each search direction to check at which depth the matching keywords have been found in steps or . Indeed if a keyword for one search direction is detected on an attribute rather than on an element or when the keyword is found at lower depth it is potentially more discriminative than another keyword. Being more discriminative means that a matching metadata fragment can be detected without having to deeply parse the metadata document and thus the detection of the matching metadata fragment is faster. Thus it is interesting as another embodiment to have the detected keywords ranked according to their discriminant power or level while inferring on a document so that the resulting XPath expressions are built starting with sub expressions considering most discriminant keywords and then subsequent sub expressions considering the less discriminant keywords. By doing so the metadata extraction will be more simple reduced load of the XPath processor thus reducing the response time of the application server .

Considering temporal and or spatial access to video or multimedia presentation embodiments of the invention provide a generic i.e. without prior knowledge of the metadata files organization index DTD XML schema . . . solution for identifying and extracting the metadata fragments that are relevant for the requested part of the video or multimedia presentation.

The general principle of the described embodiments involves applying the Media Fragments requests for a video or a multimedia presentation to associated metadata via a translation of these requests into a set of XPath expressions. The set of XPath expressions to apply on metadata depends on the type of access that is made into the video mainly temporal or spatial and auto adjusts to the metadata documents organization.

In this way the embodiments of the invention provide a solution for efficiently extracting XML metadata fragments of relevance according to temporal and or spatial access to media resources such as video or multimedia presentation thus reducing the amount of information exchanged between for example a client and a server.

The device comprises a central processing unit CPU capable of executing instructions from program ROM on powering up of the device and instructions relating to a software application from a main memory after powering up of the device . The main memory may be for example of a Random Access Memory RAM type which functions as a working area of the CPU and the memory capacity thereof can be expanded by an optional RAM connected to an expansion port not illustrated . Instructions relating to the software application may be loaded into the main memory from a hard disc HD or the program ROM for example. Such a software application when executed by the CPU causes the steps of the method of embodiments of the invention for example as illustrated in to be performed on the device.

The device further includes a network interface enabling connection of the device to the communication network. The software application when executed by the CPU is adapted to receive data streams through the network interface from other devices connected to the communication network in the case of a receiving device and to transmit data streams through the network interface in the case of a transmitting device.

The device further comprises an operator interface to display information to and or receive inputs from an operator where appropriate.

Embodiments of the invention also provide some additional benefits such as a query system that is independent of metadata format and an auto learning and evolving system when new metadata are linked to a media resource inference is performed and relevant requests are stored.

Although the present invention has been described hereinabove with reference to specific embodiments the present invention is not limited to the specific embodiments and modifications will be apparent to a skilled person in the art which lie within the scope of the present invention.

For instance while in the foregoing examples have been described with reference to video data methods of embodiments of the invention may be applied to other types of media resources.

Many further modifications and variations will suggest themselves to those versed in the art upon making reference to the foregoing illustrative embodiments which are given by way of example only and which are not intended to limit the scope of the invention that being determined solely by the appended claims. In particular the different features from different embodiments may be interchanged where appropriate.

In the claims the word comprising does not exclude other elements or steps and the indefinite article a or an does not exclude a plurality. The mere fact that different features are recited in mutually different dependent claims does not indicate that a combination of these features cannot be advantageously used.

