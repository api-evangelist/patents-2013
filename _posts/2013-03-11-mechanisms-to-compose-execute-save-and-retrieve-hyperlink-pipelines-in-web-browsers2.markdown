---

title: Mechanisms to compose, execute, save, and retrieve hyperlink pipelines in web browsers
abstract: A method for composing and executing a plurality of hyperlink pipelines within a web browser, wherein the method comprises moving a first source hyperlink that corresponds to a first resource to a destination hyperlink that corresponds to a second resource, merging the first source hyperlink with the destination hyperlink to create a first hyperlink pipeline, moving a second source hyperlink that corresponds to a third resource to the first hyperlink pipeline, merging the second source hyperlink with the first hyperlink pipeline to create a second hyperlink pipeline, and executing the second hyperlink pipeline such that the second resource is invoked before the first resource and the third resource, and the first resource is invoked before the third resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09552338&OS=09552338&RS=09552338
owner: Futurewei Technologies, Inc.
number: 09552338
owner_city: Plano
owner_country: US
publication_date: 20130311
---
Modern web browsers are a computing platform on which web applications of various kinds such as Email search and WebRTC from different web sites can be executed at the same time. However today s web browsers limit the ability of web users web developers and or web sites to customize the resources. For example today s web browsers are generally limited to customizing resources based on user profiles and context information. Today s web browsers are unable to combine resources from different web sites for a web user. As a result the World Wide Web Consortium W3C and Internet Engineering Task Force IETF are in the process of standardizing relevant APIs and protocols in order to improve the WebRTC experience for web users web developers and web sites.

A variety of solutions exist in improving the customization options for resources. One solution involves the implementation of web mash up tools. Web mash up tools provide web users web developers and web sites an increase in the degree of customization through the use of dynamic and function compositions. Unfortunately web mash up tools are often very complex and difficult to implement using the current web infrastructure. In some instances an overhaul of the existing framework of web sites and web browsers are needed to utilize the web mash up tool. For instance many of the web mash up tools e.g. YAHOO PIPES may use dedicated composition servers for users to specify data workflows. Moreover the web mash up tools may use new web applications that include new function modules to implement a variety of functions that include fetching data from different sites and transforming filtering and combining the data into a new web page. Therefore web mash up tools excessively modify the current web infrastructure in order to provide customization features for resources within a web browser.

An alternative to the web mash up tools is the use of Web Intents currently being standardized by the W3C. Web Intents adapt the concept of intent and activity design patterns from the ANDROID operating system OS to web browsers. Web browsers adapted with Web Intents may be able to handle an action on the user s behalf by finding appropriate resources based on the user s preference. Although Web Intents may be relatively straight forward to implement into current web browsers Web Intent may not support a variety of customization options. For example web browsers adapted with Web Intents are unable to customize the resource selections once a web page is loaded into the web browser. Additionally users are unable to create and customize different intent compositions. Hence to improve the WebRTC experience a less complex but a more powerful solution is needed to customize a variety of resources within a web browser.

In one embodiment the disclosure includes an apparatus for forming a hyperlink pipeline that organizes a plurality of resources within a web browser comprising a processor configured to acquire a source hyperlink comprising a Uniform Resource Identifier URI that identifies a first resource acquire a destination hyperlink comprising a destination URI that identifies a second resource and a variable within a URI template and substitute the source URI for the variable within the URI template when the source hyperlink merges with the destination hyperlink to form the hyperlink pipeline wherein the URI is represented as a Uniform Resource Locator URL a URI reference or a Uniform Resource Name URN .

In yet another embodiment the disclosure includes an apparatus for forming a hyperlink pipeline that organizes a plurality of hyperlinks within a web browser comprising a processor configured to create a factory module wherein the factory module comprises a template attribute that indicates a Uniform Resource Identifier URI template wherein the URI template comprises a variable a name attribute that indicates the name of the variable a type attribute that indicates a list of accepted media type for the variable and a pipeline attribute that indicates the URI of the hyperlink pipeline and form a hyperlink pipeline by substituting a source URI that corresponds to a source hyperlink into the variable.

In yet another embodiment the disclosure includes a method for composing and executing a plurality of hyperlink pipelines within a web browser wherein the method comprises moving a first source hyperlink that corresponds to a first resource to a destination hyperlink that corresponds to a second resource merging the first source hyperlink with the destination hyperlink to create a first hyperlink pipeline moving a second source hyperlink that corresponds to a third resource to the first hyperlink pipeline merging the second source hyperlink with the first hyperlink pipeline to create a second hyperlink pipeline and executing the second hyperlink pipeline such that the second resource is invoked before the first resource and the third resource and the first resource is invoked before the third resource.

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although an illustrative implementation of one or more embodiments are provided below the disclosed systems and or methods may be implemented using any number of techniques whether currently known or in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques described below including the exemplary designs and implementations illustrated and described herein but may be modified within the scope of the appended claims along with their full scope of equivalents.

Disclosed herein are a method an apparatus and a system that may be used to create execute save and retrieve hyperlink pipelines that invoke resources within a web browser. A user may create a hyperlink pipeline of varying length using an assortment of computing based commands such as dragging and dropping and or copying and pasting different hyperlinks. Hyperlinks used to form the hyperlink pipeline may comprise a hyperlink factory module that may dictate if and how hyperlinks may be combined together. Each of the hyperlinks used to form the hyperlink pipeline may reference one or more resources e.g. video chatting that originate from one or more web services. After the creation of a hyperlink pipeline the user may activate the hyperlink pipeline e.g. by clicking on the hyperlink pipeline and execute a series of hyperlinks based on a user specified order. The user may arrange the hyperlinks within the hyperlink pipeline in a specified order during the construction of the hyperlink pipeline. The hyperlink pipeline may be saved into a local or remote storage by storing the pipeline factory and pipeline module. The hyperlinks within a hyperlink pipeline may be updated and validated each time a user re accesses the web browser.

User interface may be configured to operate and display information within one or more web browsers . Users such as web users web developers and or web site operators may interact with the user interface using web browser to access to a variety of resources . Web browser may be any software application for retrieving presenting and traversing resources from system such as CHROME FIREFOX INTERNET EXPLORER OPERA and SAFARI. In one embodiment web browser may be configured to access retrieve and view documents web applications and web services from the Internet. Some of these web services and web applications may include but are not limited to voice calling video chat and peer to peer file sharing. The web browser may be integrated with voice and video engines and configured to operate resources without the installation of plug ins and or other add ons. Web browser may be stored in a memory component within the user interface . Moreover the user interface may comprise processing unit e.g. central processing unit CPU that may be used to load web browser within user interface and execute web services and applications within web browser .

Web browser may be configured to access one or more pages that may be encoded in HTML extensible HTML XHTML and or other types of markup language. Web browser may be able to view pages such as public websites and or intranet sites which may be hosted by end nodes . In page A may be a web page that is hosted by end node A while page B may be a web page hosted by end node B . Another embodiment of system may have one of the end nodes e.g. end node A host information shown in for both pages A and B .

Pages may comprise hyperlinks that may navigate the web browser to different resources . Resource may be identified by a URI and may include web pages images videos calendars real time communications e.g. video chat and or any other type of web service or web application. Resources may be video data audio data text data and any other types of data that may be displayed and or executed using web browser . Resources may be stored on one or more end nodes and may be distributed remotely on different web services. illustrates that resources A and B may be stored within end node A while resources C and D may be stored within end node B . Prior to executing the hyperlinks resource authorizations such as OAuth Kerberos and Hypertext Transfer Protocol Secure HTTPS may have been granted to access resources via hyperlinks .

Web browser may invoke resources referenced by hyperlinks when a user executes hyperlinks e.g. a user clicks on the hyperlink . For example illustrates that hyperlinks A D are associated with resources A D respectively. When a user clicks on hyperlink A the web browser may invoke resource A by accessing resource A and sending the information back to web browser to perform the service e.g. video chat associated with resource A . The service associated with resource A may be displayed and or performed on page A or on a new page not shown in within web browser . Furthermore when a user clicks on hyperlink C the web browser may access resource C and perform the service associated with resource C on page B or on a new page not shown in within web browser . Hyperlinks may be displayed on the page in variety of formats such as a text an image a symbol a short video clip pop up windows and or any combination thereof. Using as an example hyperlink A may be displayed as text hyperlink A within page A . In another embodiment hyperlink A may be displayed as an image of web camera or video camcorder when resource A provides a video chatting service. Invoking resources will be discussed in more detail in .

In addition to hyperlinks pages may also comprise hyperlink pipelines . Hyperlink pipelines may comprise a plurality of hyperlinks arranged in a sequential order that may be dictated by a user. Hyperlink pipelines may be displayed on pages substantially similar to hyperlinks . When a user views pages the user may recognize hyperlinks that may be used to form a hyperlink pipeline . For example the web browser may display text surrounding the hyperlinks that may indicate whether a user may form a hyperlink pipeline using the hyperlinks . The hyperlink pipelines may be created such that system does not use a dedicated end node e.g. a composition server to specify the order of execution for the hyperlink pipelines . Furthermore a web browser may not need a web browser extension to create the hyperlink pipelines .

In one embodiment the user may create hyperlink pipelines by selecting and dragging the source hyperlink into a destination hyperlink. A source hyperlink may be the hyperlink that a user selects moves and or copies to combine with another hyperlink which may be referred to as the destination hyperlink. For example hyperlink pipeline C A may comprise hyperlink A and C and may be displayed as text hyperlink C A on page B . Moreover hyperlink A and C may be displayed in a text format on pages A and B respectively. A user may select the text of the hyperlink A e.g. source hyperlink from page A and drag the text over to page B using an input device e.g. clicking and holding down on a mouse button . The user may continue dragging e.g. continuing holding the mouse button down the text of hyperlink A onto page B so that the text of hyperlink A may overlap the text of hyperlink C e.g. destination hyperlink . Once hyperlink A overlaps hyperlink C the user may drop hyperlink A into hyperlink C e.g. by releasing the mouse button to form hyperlink pipeline C A . A second hyperlink pipeline C A B may be formed by dragging and dropping hyperlink B e.g. source hyperlink from page A into hyperlink pipeline C A e.g. destination hyperlink . Hyperlink pipelines may also be created by dragging and dropping hyperlinks within the same page . In one embodiment hyperlink pipelines may be displayed on pages as a hyperlink . Other methods such as copying and pasting and or using human gestures e.g. holding a source link with one finger and swiping the destination link towards the source with another finger may be used to merge hyperlinks together to form hyperlink pipelines . In one embodiment merging the hyperlinks together may not delete or remove the source hyperlink and destination hyperlink from page . In one embodiment the source hyperlink may be a URI. The URI may be represented as URL pointing to a remote resource on an end node a URI reference pointing to a local HTML element and or a URN comprising some string of characters such as a telephone number zip code and or currency that can serve as an input parameter to the destination hyperlink.

Hyperlink pipelines may be executed the same way hyperlinks are executed e.g. a user clicks on the hyperlink pipeline . A user may execute the hyperlink pipelines to invoke the different resources associated with the different hyperlinks within the hyperlink pipeline. In one embodiment hyperlinks within a hyperlink pipeline may be executed such that the resources referenced by the destination hyperlink are executed before resources referenced by the source hyperlink. For example hyperlink pipeline C A B may first execute resource C associated with hyperlink C then the resource A associated hyperlink A and finally the resource B associated with hyperlink B . As discussed above when creating hyperlink pipeline C A B hyperlink B was the source hyperlink used to combine with hyperlink pipeline C A and thus the web browser may execute hyperlink B last. Furthermore hyperlink A was the source hyperlink when creating hyperlink pipeline C A . As such web browser may execute hyperlink C before hyperlink A. Other execution orders may be employed when constructing hyperlink pipelines . Creating and executing the different resources embedded in the hyperlink pipeline will be discussed in further detail below.

A user may save the hyperlink pipelines into the local storage component within the user interface and or a remote storage location such as a network server and a universal serial bus USB flash drive. In one embodiment the hyperlink pipeline may be saved as an HTML document that includes factory and pipeline information that will be discussed in more detail in . The user may also save the hyperlink pipelines in other markup language documents. When the HTML document is loaded into the web browser the hyperlink pipelines saved within the HTML documents may be loaded into the user interface s memory. The resources associated with hyperlink pipeline may be validated in a variety of methods such as using preflight Hypertext Transfer Protocol HTTP GET requests. The validation procedure may handle resource moves and update the hyperlink pipeline . Once a hyperlink pipeline is validated a user may then execute the hyperlink pipeline.

The message exchange process starts when a user executes hyperlink pipeline D C A B by using an input device such as using a mouse to click on the hyperlink pipeline D C A B within web browser . Once the user clicks on the hyperlink pipeline D C A B the web browser may send a dereference message d D C A B to invoke resource D . In one embodiment the dereference message d D C A B may be encoded using a HTML protocol as defined in the IETF Request for Comments RFC 2616 published June 1999 which is incorporated herein as if reproduced by its entirety and may pass parameters that identify addresses of resources A D . Web browser may maintain and or encode the execution order when transmitting the dereference message d D C A B to resource D . Recall that hyperlink D may be executed first as the destination hyperlink and thus dereference message d D C A B is sent to resource D.

Once resource D receives the dereference message d D C A B resource D may be invoked by extracting the relevant parameters that pertain to resource D and send a dereference message d C A B to invoke resource C . Resource D may know to send dereference message d C A B to resource C based on the execution order information transmitted within dereference message d D C A B . Resource C receives dereference message d C A B since hyperlink C is executed after hyperlink D. Similar to dereference message d D C A B dereference message d C A B may pass parameters that identify the address of resources A C . Moreover dereference message C A B may include information regarding the execution order of the hyperlink pipeline D C A B similar to the dereference message d D C A B . Hence resource C may then transmit a dereference message d A to invoke resource A based on the order of execution.

Dereference message d A may be substantially similar to dereference message d C A B except that dereference message d A passes parameters associated with hyperlink A. The dereference message d A may include information regarding the execution order of the hyperlink pipeline D C A B . After resource A receives the dereference message d A from resource C resource A may send a response message r A back to resource C . In one embodiment prior to send response message r A one or more messages that are not shown in may be exchanged between resource A and resource C . These messages may perform authentication service selection and or other tasks as dictated by the resources. Another embodiment may have no message exchanges between the two resources. Resource A may not transmit a dereference message to another resource after being invoked because no additional parameters corresponding to another resource was sent within dereference message d A . Response message r A may be encoded using a HTTP protocol and may pass information as a result of invoking resource A back to resource C . Using as an example resource A may correspond to Bob s phone and thus response message r A may comprise information to communicate with Bob s phone.

After resource C receives response message r A resource C may send a dereference message d B that is substantially similar to dereference message d A to resource B . Resource B may then send a response message r B back to resource C . As discussed above in one embodiment messages not shown in may be exchanged between the two resources prior to transmitting response message response message r B . The response message r B may be substantially similar to response message r A except that response message r B may comprise information that is the result of invoking resource B. Using as an example response message r B may comprise information to communication with Alice s phone. 

Resource C may subsequently combine the information from response message r A and response message r B with its own information resulting from receiving deference message d C A B and send a response message r C A B to resource D . Recall that in one embodiment messages not shown in may be exchanged between the two resources prior to transmitting response message response message r C A B . Using as an example resource C may correspond to Carol s phone and thus response message r C A B may comprise information to establish communication between Carol s phone Alice s phone and Bob s phone. Once resource D receives a response message r C A B from resource C resource D may combine its own information with response message r C A B to generate and transmit response message r D C A B to web browser . As stated above messages not shown in may be exchanged between the two resources prior to transmitting response message r D C A B . At this point the web browser receives response message r D C A B and provides the service established in the hyperlink pipeline D C A B . In response message r D C A B sent to web browser would execute a call with Bob Alice and Carol using a separate conference server.

In one embodiment the dereference messages and and response messages and may be formatted as an HTTP message containing HTML and Extensible Markup Language XML . The formatting may vary and may depend on the resource that is receiving the dereference messages or the response messages. For example resource D may be configured to accept XML messages while resource C may be configured to accept HTML message. When web browser sends dereference message d D C A B to resource D the dereference message d D C A B may be formatted in XML. However when resource D sends dereference message d C A B to resource C the message may be formatted in HTML. Modification of the HTTP message format may be implemented through HTTP content negotiation as described in IETF RFC 2616.

The hyperlink factory module may comprise a template attribute a name attribute a type attribute a class attribute a maximum attribute a delimiter del attribute and a pipeline attribute. The template attribute may be a URI template as defined in the IETF RFC 6570 published March 2012 which is incorporated herein as if reproduced by its entirety. The URI template may comprise a single variable that may be substituted by URIs that corresponds to source hyperlinks. The name attribute may name the single variable in the URI template. The type attribute may list the accepted resource types for the variable while the class may list the accepted classes for the variable. For example a hyperlink associated with a resource that provides a video chat service may not be combined to form a hyperlink pipeline with hyperlink associated with a resource that corresponds to an image. The maximum attribute may indicate the maximum number of substitutions for the variable. The maximum attribute may have a default value of 1 and thus may allow one substitution. If the number of substitution is unlimited or is unbounded by a specific number then the maximum attribute may have a value of 1. The del attribute separates the multiple substitutions of the variable using a symbol such as symbol. The pipeline attribute may represent the URI of the hyperlink and may be reserved for when a user creates a hyperlink pipeline. Using as an example Table 1 is an example of encoding the hyperlink factory module for hyperlink using Microdata. Other markup languages may be used to encode the hyperlink factory module such as Microformat and Resource Description Framework RDFa .

The pipeline factory module may be substantially similar to the hyperlink factory module as shown in . The attributes from the pipeline factory module may be initially derived from destination hyperlink A . The hyperlink factory module from the destination hyperlink A may be copied and reused as the pipeline factory module . After merging the source hyperlink B with the destination hyperlink A attributes within the pipeline factory module may be updated with the attributes from the source hyperlink module . For example the template attribute from the destination s hyperlink factory module may be updated with the source URI from the source hyperlink module e.g. source hyperlink B to form the pipeline factory module . Although illustrates that hyperlink pipeline comprises two hyperlinks other embodiments of hyperlink pipelines may comprise more than two hyperlinks. In one embodiment source hyperlink B may not comprise a hyperlink factory module . In another embodiment where the source hyperlink B comprises a hyperlink factory module that may not be used to form hyperlink pipeline .

At step method determines whether the current substitution count is less than the maximum number of substitutions for the hyperlink. As discussed in the hyperlink factory unit may comprise a maximum attribute that indicates the maximum number of substitutions for hyperlink . In one embodiment when a source hyperlink is combined with a destination hyperlink method may use the hyperlink factory unit associated with the destination hyperlink to determine the maximum number of substitutions. Method may also determine the current substitution count based off the template attribute from the hyperlink factory unit associated with destination hyperlink. Method may compare the current substitution count with the maximum value obtained from the hyperlink factory unit associated with destination hyperlink. If the current substitution count has reached the maximum value then method stops. Conversely if the current substitution count has not reached the maximum value then method continues to step .

At step method may determine whether the type attribute from the source hyperlink matches one of the type attributes listed in the hyperlink factory unit associated with the destination hyperlink. Method may obtain the type attribute of the source hyperlink from the hyperlink module associated with source hyperlink. Recall that the type attribute indicates the media type of the resource associated with the source hyperlink. Method may compare the media type from the source hyperlink with one or more media types listed in the type attribute of the hyperlink factory unit associated with the destination hyperlink. If method determines that the media type from the source hyperlink does not match a media type attribute listed in the hyperlink factory unit method stops. However when a match does occur method may continue to step . As stated above the source hyperlink and or destination hyperlink may be hyperlink pipeline as described in .

At step method may determine whether the class attribute from the source hyperlink matches one of the class attribute listed in the hyperlink factory unit associated with the destination hyperlink. As discussed above the class attribute from the hyperlink module indicates the semantic class associated with the hyperlinks. Method may obtain the class from the hyperlink module associated with source hyperlink and may compare the class from the source hyperlink with one or more class listed in the class attribute of the hyperlink factory unit associated with the destination hyperlink. If method determines that the class from the source hyperlink does not match a class listed in the hyperlink factory unit method stops. However when a match does occur method may continue to step . At step method may create a hyperlink pipeline. Method may copy the hyperlink factor module from the destination hyperlink and use the hyperlink factor module as the pipeline factor module shown in . Method may update the attributes of the pipeline factory module . For example the variable within the template attribute may be updated by substituting the source URI and a del character. Method may also update the URI within the pipeline attribute found in the pipeline factor module . Method may also create the pipeline module and update the source attribute in the pipeline module with the source URI from the source hyperlink and the destination attribute from the destination URI from the destination hyperlink.

The schemes described above may be implemented on any general purpose computer system such as a computer or network component with sufficient processing power memory resources and network throughput capability to handle the necessary workload placed upon it. illustrates a schematic diagram of a general purpose computer system suitable for implementing one or more embodiments of the methods disclosed herein such as the user interface web browser end nodes hyperlink module hyperlink factory module pipeline module and pipeline factory module . The computer system includes a processor which may be referred to as a CPU that is in communication with memory devices including secondary storage read only memory ROM random access memory RAM transmitter receiver and input output I O device . Although illustrated as a single processor the processor is not so limited and may comprise multiple processors. The processor may be implemented as one or more CPU chips cores e.g. a multi core processor field programmable gate arrays FPGAs application specific integrated circuits ASICs and or digital signal processors DSPs and or may be part of one or more ASICs. The processor may be configured to implement any of the schemes described herein such as the user interface web browser hyperlink module hyperlink factory module pipeline module pipeline factory module and method . The processor may be implemented using hardware software or both.

The secondary storage is typically comprised of one or more disk drives or tape drives and is used for non volatile storage of data and as an over flow data storage device if the RAM is not large enough to hold all working data. The secondary storage may be used to store programs that are loaded into the RAM when such programs are selected for execution. The ROM is used to store instructions and perhaps data that are read during program execution. The ROM is a non volatile memory device that typically has a small memory capacity relative to the larger memory capacity of the secondary storage . The RAM is used to store volatile data and perhaps to store instructions. Access to both the ROM and the RAM is typically faster than to the secondary storage . The secondary storage ROM and or RAM may be non transitory computer readable mediums and may not include transitory propagating signals. Any one of the secondary storage ROM or RAM may be referred to as a memory or these modules may be collectively referred to as a memory. Any of the secondary storage ROM or RAM may be used to store hyperlinks pipelines as described herein. The processor may generate the hyperlinks pipelines and store the hyperlinks pipelines in memory and or retrieve the hyperlinks pipelines from memory.

The transmitter receiver may serve as an output and or input device of the user interface hyperlink module hyperlink factory module pipeline module and pipeline factory module . For example if the transmitter receiver is acting as a transmitter it may transmit data out of the computer system . If the transmitter receiver is acting as a receiver it may receive data into the computer system . The transmitter receiver may take the form of modems modem banks Ethernet cards universal serial bus USB interface cards serial interfaces token ring cards fiber distributed data interface FDDI cards wireless local area network WLAN cards radio transceiver cards such as code division multiple access CDMA global system for mobile communications GSM long term evolution LTE worldwide interoperability for microwave access WiMAX and or other air interface protocol radio transceiver cards and other well known network devices. The transmitter receiver may enable the processor to communicate with an Internet or one or more intranets. I O devices may include a video monitor liquid crystal display LCD touch screen display or other type of video display for displaying video and may also include a video recording device for capturing video. I O devices may also include one or more keyboards mice or track balls or other well known input devices.

It is understood that by programming and or loading executable instructions onto the computer system at least one of the processor the RAM and the ROM are changed transforming the computer system in part into a particular machine or apparatus e.g. invoking resources having the novel functionality taught by the present disclosure. It is fundamental to the electrical engineering and software engineering arts that functionality that can be implemented by loading executable software into a computer which can be converted to a hardware implementation by well known design rules. Decisions between implementing a concept in software versus hardware typically hinge on considerations of stability of the design and numbers of units to be produced rather than any issues involved in translating from the software domain to the hardware domain. Generally a design that is still subject to frequent change may be preferred to be implemented in software because re spinning a hardware implementation is more expensive than re spinning a software design. Generally a design that is stable that will be produced in large volume may be preferred to be implemented in hardware for example in an application specific integrated circuit ASIC because for large production runs the hardware implementation may be less expensive than the software implementation. Often a design may be developed and tested in a software form and later transformed by well known design rules to an equivalent hardware implementation in an application specific integrated circuit that hardwires the instructions of the software. In the same manner as a machine controlled by a new ASIC is a particular machine or apparatus likewise a computer that has been programmed and or loaded with executable instructions may be viewed as a particular machine or apparatus.

At least one embodiment is disclosed and variations combinations and or modifications of the embodiment s and or features of the embodiment s made by a person having ordinary skill in the art are within the scope of the disclosure. Alternative embodiments that result from combining integrating and or omitting features of the embodiment s are also within the scope of the disclosure. Where numerical ranges or limitations are expressly stated such express ranges or limitations should be understood to include iterative ranges or limitations of like magnitude falling within the expressly stated ranges or limitations e.g. from about 1 to about 10 includes 2 3 4 etc. greater than 0.10 includes 0.11 0.12 0.13 etc. . For example whenever a numerical range with a lower limit R and an upper limit R is disclosed any number falling within the range is specifically disclosed. In particular the following numbers within the range are specifically disclosed R R k R R wherein k is a variable ranging from 1 percent to 100 percent with a 1 percent increment i.e. k is 1 percent 2 percent 3 percent 4 percent 7 percent . . . 70 percent 71 percent 72 percent . . . 97 percent 96 percent 97 percent 98 percent 99 percent or 100 percent. Moreover any numerical range defined by two R numbers as defined in the above is also specifically disclosed. The use of the term about means 10 of the subsequent number unless otherwise stated. Use of the term optionally with respect to any element of a claim means that the element is required or alternatively the element is not required both alternatives being within the scope of the claim. Use of broader terms such as comprises includes and having should be understood to provide support for narrower terms such as consisting of consisting essentially of and comprised substantially of. Accordingly the scope of protection is not limited by the description set out above but is defined by the claims that follow that scope including all equivalents of the subject matter of the claims. Each and every claim is incorporated as further disclosure into the specification and the claims are embodiment s of the present disclosure. The discussion of a reference in the disclosure is not an admission that it is prior art especially any reference that has a publication date after the priority date of this application. The disclosure of all patents patent applications and publications cited in the disclosure are hereby incorporated by reference to the extent that they provide exemplary procedural or other details supplementary to the disclosure.

While several embodiments have been provided in the present disclosure it should be understood that the disclosed systems and methods might be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

In addition techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as coupled or directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein.

