---

title: Shared portal context session
abstract: The present disclosure involves systems, software, and computer implemented methods for sharing session state between portal application portlets associated with different domains. One example method includes setting a cookie for use in a portal environment. The cookie is encrypted with a key and stores at least a portion of a session state associated with a current portal session. The encrypted cookie is provided for storage at a client associated with the portal session. Execution of a portal application is initiated within the portal environment. The portal application is provided with a copy of the encrypted cookie. A copy of the key is provided to the portal application. The provided copy of the key is used to decrypt the cookie at the portal application. The session state stored in the cookie is used to set at least a portion of the session state of the portal application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09225515&OS=09225515&RS=09225515
owner: SAP Portals Israel Ltd
number: 09225515
owner_city: Ra'anana
owner_country: IL
publication_date: 20130913
---
The present disclosure relates to computer implemented methods software and systems for sharing session state between portal application portlets associated with different domains.

Enterprise portals are frameworks for integrating information people and processes across organizational boundaries. Portals can provide a secure unified access point often in the form of a web based user interface and are designed to aggregate and personalize information through application specific portlets and components. One hallmark of enterprise portals is the decentralized content contribution and content management which keeps the information always updated. In many cases specific portal pages may be defined by a highly experienced administrator using a portal content administration environment or a key user within a particular organization using specific tools to define aspects relationships and connections for and between content provided within specific portal pages.

The present disclosure involves systems software and computer implemented methods for sharing session state between portal application portlets associated with different domains. One example method includes setting a cookie for use in a portal environment. The cookie is encrypted with a key and stores at least a portion of a session state associated with a current portal session. The encrypted cookie is provided for storage at a client associated with the portal session. Execution of a portal application is initiated within the portal environment. The portal application is provided with a copy of the encrypted cookie. A copy of the key is provided to the portal application. The provided copy of the key is used to decrypt the cookie at the portal application. The session state stored in the cookie is used to set at least a portion of the session state of the portal application.

While generally described as computer implemented software embodied on tangible media that processes and transforms the respective data some or all of the aspects may be computer implemented methods or further included in respective systems or other devices for performing this described functionality. The details of these and other aspects and embodiments of the present disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

A portal page can provide access to services from multiple application servers via multiple portlets or application specific components that are included in the portal page. Each portlet or component can be associated with the domain of a particular application server for example. A developer of a portal page may desire for the portal page and its included portlets to have access to and to potentially change a shared session state available to the portal page and the included portlets. However a browser can implement a same origin policy prohibiting communication between objects of different domains. A same origin policy can permit scripts or other objects running on web pages originating from the same domain to access each other s data such as methods and properties and can prevent access to data across web pages on different domains. A same origin policy can be implemented to restrict revealing of data and performing state changing actions to prevent data loss and to maintain confidentiality and data integrity.

However the present disclosure provides methods and an infrastructure that allows portal page components to communicate changes to a shared session state by forwarding updates to a shared session cookie which represents the shared session state using a cross domain communication technique. For example communication can occur via iFrames associated with respective components. Sending messages using iFrame components can overcome for example a same origin policy implemented by the browser. For example an iFrame component can be configured to be associated with a particular application server domain while being embedded in a portal page that is associated with a different portal server domain. Sharing session state in a shared session cookie that is communicated through cross domain communication can overcome the same origin policy and can also provide a common area in which to share session state between servers which otherwise might store session data in different ways and in different locations.

The portal server provides a portal application such as to the client device . The portal application can include an embedded application associated with the first application server and an embedded application associated with the second application server . Upon initialization of the first application server or the second application server the respective first application server or second application server can send a request to the portal server for a key to use to decrypt information stored in a shared session cookie. The portal server can provide the key as a session specific key which can be used to decrypt one or more cookies associated with a particular session. That is in some implementations the key can only be used to decrypt cookies associated with the particular session and cannot be used to decrypt cookies associated with other sessions. Other sessions may be associated with other users other roles of the same user or other instances of a particular activity or process.

In some instances the portal server may send the key to the respective application servers on their initial interaction with a particular session without receiving a specific request for the key from those application servers. A key can be stored for example in memory of the portal server . In response to a request for the key or upon determination that the key should be provided the portal server can send a copy of the key to the first application server or the second application server . The provided key can be stored as a key in memory of the first application server or as a key in memory of the second application server .

In some implementations upon initialization of the first application server or the second application server the respective first application server or second application server sends a request to the portal server for a copy of a shared session cookie . In response to a request for a copy of the shared session cookie the portal server can send a copy of the shared session cookie to the first application server or the second application server . The provided copy of the shared session cookie can be stored as a cookie in the memory of the first application server or as a cookie in the memory of the second application server .

The client device may submit a request to the portal server for the portal application . In response to the request the portal server can provide the portal application or a presentation associated therewith to the client device . The portal server can also provide a copy of the shared session cookie . The copy of the shared session cookie can be stored for example as a cookie in memory of the client device in association with the domain of the portal server .

A received instance of the portal application can execute on the client device as illustrated by a client application . The client application allows the client device to request and view content on the client device . The client application can use parameters metadata and other information received at launch to access a particular set of data from the portal server the first application server or the second application server .

The client application can include user interface portions that are each associated with one of the portal server the first application server or the second application server or some other application server. For example the client application can include a portal iFrame a first application iFrame and a second application iFrame . The portal iFrame the first application iFrame and the second application iFrame respectively include a portal plug in a first application plug in and a second application plug in . Each of the portal iFrame the first application iFrame and the second application iFrame can include or be otherwise associated with other client side assets such as one or more scripts. The portal plug in the first application plug in and the second application plug in are agents or client side versions of the portal application a first server application associated with the first application server and a second server application associated with the second application server respectively.

The first application plug in or some other client side asset associated with the first server application can send a request to the first application server . The first application server can include a copy of the cookie in a response to the request. The copy of the cookie can be stored as a first application cookie copy in the memory of the client device in association with the domain of the first application server . Similarly the second application plug in or some other client side asset associated with the second server application can send a request to the second application server . The second application server can include a copy of the cookie in a response to the request. The copy of the cookie can be stored as a second application cookie copy in the memory of the client device in association with the domain of the second application server .

As part of the processing of a request from the first application plug in or some other client side asset associated with the first server application the first server application can update the cookie . For example the first server application can perform logic which updates a setting which is included in or associated with shared session state included in the cookie . The first server application can update one or more other cookies which are specific to the first server application e.g. that are not associated with session state shared within the context of the portal application . The first server application can use the key to decrypt the cookie change a payload associated with the cookie and increment a version number associated with the cookie . A copy of the updated cookie and possibly other cookies can be included in a response sent to the client device .

The first application plug in can detect that a version number associated with the copy of the updated cookie included in the response is different than a version number associated with the first application cookie copy in the memory . The first application cookie copy can be updated to match the copy of the updated cookie included in the response from the first application server . In response to detection of the changed version number the first application plug in can send a request to the portal plug in to forward the cookie update to other applications included in or associated with the portal application . For example the first application plug in can send a cross domain message to the portal iFrame using a window.postMessage call. The window.postMessage call can include a copy of the updated cookie.

In response to receiving the request to forward the cookie update the portal plug in can update the cookie to match the copy of the updated cookie. In some implementations the portal plug in sends an AJAX Asynchronous JavaScript and XML eXtensible Markup Language request to the portal server to update the shared session cookie . The portal plug in can also send a cross domain cookie update message to the second application plug in such as by using a window.postMessage call. The cookie update message can include a copy of the updated cookie. In response to receiving the cookie update message the second application plug in can update the second application cookie copy in the memory . In some implementations the second application plug in sends an AJAX request to the second application server to update the cookie . In implementations where an AJAX request is not sent to the second application server the second application server can receive the updated cookie in a next request sent to the second application server by the client device .

In some implementations a client side component can initiate an update to a copy of the shared session cookie. For example the second application plug in can perform logic which updates a setting included in the second application cookie copy . In some implementations the second application plug in sends an AJAX request to the second application server to update the cookie . In implementations where an AJAX request is not sent to the second application server the second application server can receive the updated cookie in a next request sent to the second application server by the client device . The second application plug in can send a request to the portal plug in to send a cookie forward update which can result in the eventual updating of the first application cookie copy the cookie the cookie and the cookie .

In some implementations a server side component associated with the portal application initiates an update to the shared session cookie . For example as part of the processing of a request from the client device the server side component associated with the portal application can update the shared session cookie . For example the server side component can perform logic which updates a setting which is included in or associated with shared session state included in the shared session cookie . The server side component can use the cookie key to decrypt the shared session cookie can change a payload associated with the shared session cookie and can increment a version number associated with the cookie . A copy of the updated shared session cookie can be included in a response sent to the client device .

The portal plug in can detect that a version number associated with the copy of the updated shared session cookie included in the response is different than a version number associated with the cookie . The cookie can be updated to match the copy of the updated shared session cookie included in the response from the portal server . In response to detection of the changed version number the portal plug in can forward the cookie update to other applications included in or associated with the portal application . For example the portal plug in can send cross domain messages to the first application iFrame and the second application iFrame using window.postMessage calls. The window.postMessage calls can include a copy of the updated cookie.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single portal server a single client device and two application servers the system can be implemented using two or more portal servers two or more client devices and more than two application servers. Indeed the portal server the client device the first application server and the second application server may be any computer or processing device such as for example a blade server general purpose personal computer PC Mac workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further the portal server and the client device may be adapted to execute any operating system including Linux UNIX Windows Mac OS Java Android iOS or any other suitable operating system. According to one implementation the portal server may also include or be communicably coupled with an e mail server a Web server a caching server a streaming data server and or other suitable server.

Interfaces and are used by the portal server the client device the first application server and the second application server respectively for communicating with other systems in a distributed environment including within the system connected to the network . Generally the interfaces and each comprise logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interfaces and may each comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated system .

The portal server the first application server and the second application server each include one or more processors or respectively. Each processor and may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally each processor and executes instructions and manipulates data to perform the operations of the portal server the first application server or the second application server respectively. Specifically each processor and executes the functionality required to receive and respond to requests from the client device for example.

Regardless of the particular implementation software may include computer readable instructions firmware wired and or programmed hardware or any combination thereof on a tangible medium transitory or non transitory as appropriate operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java JavaScript Visual Basic assembler Perl any suitable version of 4GL as well as others. While portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The memory and may include any type of memory or database module and may take the form of volatile and or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory and may store various objects or data including caches classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the portal server the first application server or the second application server respectively. In some implementations the portal server the first application server and or the second application server include multiple memories.

The client device may generally be any computing device operable to connect to or communicate with the portal server the first application server and the second application server via the network using a wireline or wireless connection. In general the client device comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the system of .

The client device includes one or more processors . Each processor included in the client device may be a central processing unit CPU an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally each processor included in the client device executes instructions and manipulates data to perform the operations of the client device . Specifically each processor included in the client device executes the functionality required to send requests to the portal server the first application server and the second application server and to receive and process responses from the portal server the first application server and the second application server .

The client device is generally intended to encompass any client computing device such as a laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example the client device may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the portal server the first application server the second application server or the client device itself including digital data visual information or a graphical user interface GUI .

The GUI of the client device interfaces with at least a portion of the system for any suitable purpose including generating a visual representation of the client application . In particular the GUI may be used to view and navigate various Web pages. Generally the GUI provides the user with an efficient and user friendly presentation of business data provided by or communicated within the system. The GUI may comprise a plurality of customizable frames or views having interactive fields pull down lists and buttons operated by the user. The GUI contemplates any suitable graphical user interface such as a combination of a generic web browser intelligent engine and command line interface CLI that processes information and efficiently presents the results to the user visually.

The memory included in the client device may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including user selections caches classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the client device .

There may be any number of client devices associated with or external to the system . For example while the illustrated system includes one client device alternative implementations of the system may include multiple client devices communicably coupled to the portal server the first application server the second application server and or the network or any other number suitable to the purposes of the system . Additionally there may also be one or more additional client devices external to the illustrated portion of system that are capable of interacting with the system via the network . Further the term client client device and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while the client device is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

Upon initialization of a first application server the first application server sends a request for a cookie key to a portal server . The portal server sends a response that includes the key. In some implementations the response includes a copy of a shared session cookie associated with the domain of the portal server . In such implementations the first application server can create a first domain cookie that is associated with the domain of the first application server using the copy of the shared session cookie and can store the first domain cookie at the first application server .

Upon initialization of a second application server the second application server sends a request for a cookie key to the portal server . The portal server sends a response that includes the key. In some implementations the response includes a copy of the shared session cookie. In such implementations the second application server can create a second domain cookie associated with the domain of the second application server using the copy of the shared session cookie and can store the second domain cookie at the second application server .

A browser included in a client device sends a request to the portal server for a portal application that is associated with the first application server and the second application server . The portal server sends a response that includes the portal application and the shared session cookie. The shared session cookie can be stored by the browser .

In response to user interaction with a portlet associated with the first application server a client side component associated with the first application server sends a request to the first application server . The first application server can perform server logic that includes the updating of data associated with the first domain cookie. The first application server can update a version number associated with the first domain cookie. The first application server sends a response that includes the updated first domain cookie to the client side component .

The client side component can detect a change in the version number of the first domain cookie included in the response received from the first application server . The client side component can send a request to a portal client side component to forward a cookie update to other applications. The request can include a copy of the updated first domain cookie.

The portal client side component can send a cross domain message that includes the updated first domain cookie to a client side component associated with the second application server . The cross domain message can be sent for example to an iFrame component associated with the client side component using a window.postMessage call. The client side component can set a second domain cookie in the domain of the second application server such as using a JavaScript setCookie function call to create or update a cookie stored by the browser to match the updated first domain cookie included in the cross domain message. In some implementations the client side component is configured to send an AJAX request upon setting the second domain cookie to automatically send the second domain cookie stored by the browser to the second application server . In some implementations the stored second domain cookie is not sent automatically by the client side component upon a cookie update but is sent when a next request is sent to the second application server . For example the client side component can send a request to the second application server in response to user interaction with a portlet associated with the second application server where the request includes a copy of the stored second domain cookie. Upon receipt of the request the second application server can update a copy of the second domain cookie accessible to the second application server .

The client side component can at a later point in time update a stored copy of the second domain cookie stored by the browser e.g. using a setCookie function call such as in response to user interaction. The cookie update can include the incrementing of a version number associated with the second domain cookie. The client side component can send a request to the portal client side component e.g. using a window.postMessage call to forward the cookie update to other applications. The portal client side component can send a cross domain message e.g. using window.postMessage that includes the updated second domain cookie to the client side component .

The client side component can update the first domain cookie stored by the browser e.g. using setCookie to match the updated second domain cookie included in the cross domain message . In implementations where the client side component is configured to automatically send an AJAX request to the first application server upon updating the first domain cookie the client side component sends an AJAX request to the first application server . The first application server can update a copy of the first domain cookie accessible to the first application server in response to the AJAX request .

The portal client side component can receive an update to the shared session cookie from the portal server . For example the portal client side component can send a request to the portal server and can receive a response that includes an update to the shared session cookie. For example processing in the portal server can change the shared session cookie. The change to the shared session cookie can include incrementing a version number associated with the shared session cookie.

Upon receipt of the response the portal client side component can detect a change in the version number of shared session cookie and can send cookie update requests as cross domain messages and e.g. using window.postMessage to the client side component and the client side component respectively. The client side component can update the first domain cookie stored by the browser in response to the cross domain message e.g. using setCookie . The client side component can update the second domain cookie stored by the browser in response to the cross domain message e.g. using setCookie .

At a shared session cookie is set for use in a portal environment the shared session cookie encrypted with a corresponding key the shared session cookie storing at least a portion of a session state associated with a current portal session. The shared session cookie can include for example a payload and a version identifier. The payload can store the session state data of the shared session cookie such as in a JSON format. The version identifier defines a version of the shared session cookie and can be used by portal applications to determine if an updated shared session state is available. In some implementations the payload is encrypted within the encrypted shared session cookie and the version identifier is not encrypted. In some implementations the version information is not encrypted.

At the encrypted shared session cookie is provided for storage at the client associated with the portal session. For example the shared session cookie can be provided to the client when a portal web page is provided to the client in response to a request received from the client for the portal web page.

At execution of a first portal application is initiated within the portal environment. For example a first portal server associated with the first portal application can be initialized and the first portal application can be launched. As another example a client side agent or version of the first portal application can be initialized at the client.

At the first portal application is provided with a copy of the encrypted shared session cookie. For example the copy of the encrypted shared session cookie can be provided to the first portal application using for example an API Application Programming Interface or a web interface.

At a copy of the session specific key associated with the encrypted shared session cookie is provided to the first portal application. For example the copy of the session specific key can be provided to the first portal application using for example an API or a web interface. The provided copy of the session specific key can be used to decrypt the shared session cookie at the first portal application. The session state stored in the shared session cookie can be used to set at least a portion of the session state of the first portal application. The session state can be associated for example with execution of the first portal application.

At execution of a second portal application within the portal environment is initiated within the portal environment. For example a second portal server associated with the second portal application can be initialized and the second portal application can be launched. As another example a client side agent or version of the second portal application can be initialized at the client. The second portal application is associated with a different domain than the first portal application.

At the second portal application is provided with a copy of the encrypted shared session cookie. For example the copy of the encrypted shared session cookie can be provided to the first portal application using for example an API or a web interface.

At a copy of the session specific key associated with the encrypted shared session cookie is provided to the second portal application. For example the copy of the session specific key can be provided to the second portal application using for example an API or a web interface. The provided copy of the session specific key can be used to decrypt the shared session cookie at the second portal application. The session state stored in the shared session cookie can be used to set at least a portion of the session state of the second portal application. The session state can be associated for example with execution of the second portal application.

At a request is received to update the shared session cookie from the first portal application based on at least one change to the session state. The change to the session state can be associated with execution of the first portal application. In some instances the first portal application may provide an already updated shared session cookie along with its request where the request is sent to cause propagation of the updated shared session cookie.

At the shared session cookie is updated based on the at least one change to the session state. The shared session key can be used to encrypt the changed session state within the shared session cookie. A version number associated with the shared session cookie can be incremented.

At an encrypted copy of updated shared session cookie is sent to the second portal application. For example the encrypted copy of the shared session cookie can be sent to the second portal application using for example an API or a web interface. The shared session cookie can then be used to update the cookie associated with the second portal application in effect updating the cookie across domains in the shared session.

At an application server startup sub process is invoked. The application server startup sub process can be invoked for example for a particular application server and can be invoked each time an application server that is associated with a portal environment is initialized.

At the application server receives a cookie key and one or more cookie names from a portal server in response to a request for the cookie key and cookie names.

As indicated by a note the cookie key can be used for example to encrypt and decrypt content associated with a shared session cookie. The cookie names can be for example names of cookies included in an array of cookies.

At an update shared session cookie sub process is invoked such as in response to an application associated with the application server updating the shared session cookie.

At the application updates the cookie e.g. using a setCookie call and increments a version number associated with the cookie.

At the application requests a cross domain cookie forward operation such as from a component associated with the portal server.

At a cross domain cookie forward sub process is invoked for example in response to the request from the application. The cross domain cookie forward sub process can be invoked for example for every application associated with the portal environment.

At a determination is made for a given application whether the given application is the application that requested the cookie forward operation. If the given application is the application that requested the cookie forward operation no forwarding is necessary and the cookie forward sub process completes for that application.

If the given application is not the application that requested the cookie forward operation the cookie is re created in the application using cross domain communication at . For example the application can receive a cross domain message that includes the shared session cookie. The application can re create the cookie by creating or setting a cookie in the domain of the application and by copying data from the received shared session cookie to the created or set cookie.

At a determination is made as to whether a cookie always in sync mode is true for the application. The cookie always in sync mode can be set so that a notification is automatically sent to an application server in response to a cookie update occurring at a client device.

If the cookie always in sync mode is true for the application a cookie update request e.g. an AJAX request is sent to the application server associated with the application at . The cookie update request can be processed for example as described above with respect to .

If the cookie always in sync mode is not true for the application an update request is not sent to the application server as indicated by a note . The updated cookie can be subsequently sent to the application server the next time the application sends a request to the application server.

The preceding figures and accompanying description illustrate example processes and computer implementable techniques. But system or its software or other components contemplates using implementing or executing any suitable technique for performing these and other tasks. It will be understood that these processes are for illustration purposes only and that the described or similar techniques may be performed at any appropriate time including concurrently individually or in combination. In addition many of the operations in these processes may take place simultaneously concurrently and or in different orders than as shown. Moreover system may use processes with additional operations fewer operations and or different operations so long as the methods remain appropriate.

In other words although this disclosure has been described in terms of certain embodiments and generally associated methods alterations and permutations of these embodiments and methods will be apparent to those skilled in the art. Accordingly the above description of example embodiments does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

