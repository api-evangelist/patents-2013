---

title: Exception based quality assessment
abstract: The embodiments may include an apparatus for measuring code quality using exceptions. The apparatus may include a runtime collector configured to intercept exceptions generated by an application, and collect exception information for each exception, during runtime of the application, based on instrumentation code included within the application. The apparatus may include a collection module configured to store the intercepted exceptions and corresponding exception information in a memory unit, an exception analyzer configured to analyze the intercepted exceptions based on the collected exception information stored in the memory unit, and a report generator configured to generate at least one report based on the analysis. The at least one report may provide an indication of code quality of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09052980&OS=09052980&RS=09052980
owner: BMC SOFTWARE, INC.
number: 09052980
owner_city: Houston
owner_country: US
publication_date: 20130220
---
Application stakeholders quality assurance personnel and customers that outsource software development are constantly searching for accurate tools that measure code quality and liability during an application s runtime period. Often times problems are hidden or suppressed in the binaries of the code and are not reported in the logs. In addition bad coding techniques and packaging may also contribute to problems in the source code. In addition source code may be too cumbersome to perform a complete error check or the source code is simply not available.

The embodiments may include an apparatus for measuring code quality using exceptions. The apparatus may include at least one processor and a non transitory computer readable storage medium including instructions executable by the at least one processor. The instructions may be configured to implement a runtime collector configured to intercept exceptions generated by an application and collect exception information for each exception during runtime of the application based on instrumentation code included within the application. Each exception may represent a potential error that occurred during runtime of the application. Also the instructions may be configured to implement a collection module configured to store the intercepted exceptions and corresponding exception information in a memory unit an exception analyzer configured to analyze the intercepted exceptions based on the collected exception information stored in the memory unit and a report generator configured to generate at least one report based on the analysis. The at least one report may provide an indication of code quality of the application.

The apparatus may further include an instrumentation engine configured to inject the instrumentation code within a base class associated with the exceptions such that constructors of the base class are monitored during runtime of the application. In one embodiment the base class associated with the exceptions may include java.lang.throwable class.

The runtime collector may be further configured to monitor the constructors of the base class and collect one or more arguments of a monitored constructor as the monitored constructor is called during the runtime of the application.

The exception information may include a fault line number indicating at least one code line that produced a corresponding exception class information indicating a class that produced the corresponding exception type information indicating a type of the corresponding exception a stack trace of the application that produced the corresponding exception a cause of the corresponding exception and or a message associated with the corresponding exception.

The exception analyzer may include a categorizer configured to derive a type of each exception and a location within the application that produced each exception based on the exception information and the categorizer may be configured to categorize the intercepted exceptions according to the type and or the location.

The exception analyzer may be further configured to derive an exception type count indicating a number of times a particular type of exception was generated a class exception count indicating a number of times a particular class or method produced an exception and or a faulting location count indicating a number of times a particular location produced an exception based on the exception information. The report generator may be further configured to generate the at least one report based on the exception type count the class exception count and or the faulting location count.

The exception analyzer may include an application grader configured to generate a score value representing a quality of the application based on the exception information and the at least one report may include the generated score value.

The application grader may be further configured to generate the score value based on a total number of exceptions type of exceptions number of uncaught exceptions and or number of unique locations that produced the exceptions. The at least one report may include the exceptions categorized by type of exception. The at least one report may include the exceptions categorized by location that produced the exceptions.

The embodiments may include a method for measuring code quality using exceptions. The method may include intercepting by at least one processor exceptions generated by an application and collecting by the at least one processor exception information for each exception during runtime of the application based on instrumentation code included within the application. Each exception may represent a potential error that occurred during runtime of the application. The method may include storing by the at least one processor the intercepted exceptions and corresponding exception information in a memory unit analyzing by the at least one processor the intercepted exceptions based on the collected exception information stored in the memory unit and generating by the at least one processor at least one report based on the analysis. The at least one report may provide an indication of code quality of the application.

The method may further include injecting by the at least one processor the instrumentation code within a base class associated with the exceptions monitoring by the at least one processor constructors of the base class and collecting by the at least one processor one or more arguments of a monitored constructor as the monitored constructor is called during the runtime of the application.

The exception information may include a fault line number indicating at least one code line that produced a corresponding exception class information indicating a class that produced the corresponding exception type information indicating a type of the corresponding exception a stack trace of the application that produced the corresponding exception a cause of the corresponding exception and or a message associated with the corresponding exception.

The analyzing by the at least one processor the intercepted exceptions based on the collected exception information stored in the memory unit may include deriving a type of each exception and a location within the application that produced each exception based on the exception information and categorizing the intercepted exceptions according to at least one of the type and the location.

The embodiments may include a non transitory computer readable medium storing instructions that when executed cause at least one processor to measure code quality using exceptions. The instructions may include instructions to intercept exceptions generated by an application and collect exception information for each exception during runtime of the application based on instrumentation code included within the application. Each exception may represent a potential error that occurred during runtime of the application. The instructions may include instructions to store the intercepted exceptions and corresponding exception information in a memory unit analyze the intercepted exceptions based on the collected exception information stored in the memory unit and generate at least one report based on the analysis. The at least one report may provide an indication of code quality of the application.

The instructions include instructions to inject the instrumentation code within a base class associated with the exceptions monitor constructors of the base class and collect one or more arguments of a monitored constructor as the monitored constructor is called during the runtime of the application.

The instructions to analyze the intercepted exceptions based on the collected exception information stored in the memory unit may include derive a type of each exception and a location within the application that produced each exception based on the exception information and categorize the intercepted exceptions according to at least one of the type and the location.

The instructions may include instructions to generate a score value representing a quality of the application based on the exception information and the at least one report may include the generated score value. The instructions to generate a score value representing a quality of the application based on the exception information may include generating the score value based on at least one of a total number of exceptions type of exceptions number of uncaught exceptions and number of unique locations that produced the exceptions.

The embodiments include an apparatus configured to measure code quality of an application using exceptions that are generated during runtime of the application. For example the apparatus may monitor and log the number and severity of exceptions generated in an application. Each exception may represent a potential error in the application code of the application. For example an exception may be a problem that arises during execution of the application such as the user entered invalid data a file that needs to be opened cannot be found or a network connection cannot be established.

According to the embodiments the application may execute a transaction script that simulates typical transactions when the application is deployed in a runtime situation. Then as the application is performing the transactions the apparatus may collect exceptions that are generated during runtime of the application as well as exception information for each generated exception. The exception information may include a fault line number indicating one or more code lines of the application that produced a corresponding exception as well as the class the type the stack trace the cause and or the message of each exception.

In particular the apparatus has the capabilities of catching and logging every exception that was generated during runtime of the application. Based on the collected exception information a report may be generated that categorizes the exceptions in a manner that exposes the code quality of the application. For example the report may indicate the total number of exceptions the number of unique locations in the application code that produced the exceptions as well as the number of exceptions that occurred within each type of exception. However many different types of reports may be generated that expose the code quality of the underlying application using the collected exception information.

The total number of exceptions may indicate the disruptiveness of the exceptions in the application e.g. if the application is constantly in an interrupt mode. Also the seriousness of the exceptions may be exposed by identifying the types of exceptions and the number of exceptions included within each type. For example some types of exceptions are more serious than other types and the report may provide an indication of the number of serious exceptions contained in the application. Also the report may provide whether there are any threads terminated by the exceptions and whether the exceptions are produced in a location under control of the developer or in a location under the control of a third party.

Also the apparatus may use exceptions to baseline between application versions or releases. For example a report provided by the apparatus may indicate if the exception count is increasing or decreasing between one or more previous versions of the application and a current version of the application whether there are new exception types and or new locations in the current version and or whether the types of exceptions are more or less serious than the previous version s . The generated reports may be used as evidence to assess the quality of the application in a manner that does not show favoritism. For example the exception based reports may provide an objective view of the application s quality which may contain the exact call sequence and code line location thereby providing an objective story of code quality by exposing the errors in the application.

According to one embodiment the apparatus may include the capabilities of generating a score value that may represent the quality of the application s code based on the collected exceptions and their corresponding exception information. In one particular example the score value may be computed based on the total number of exceptions the number of unique locations producing exceptions and or the types of exceptions as well as any other criteria as discussed herein. In a further example the score value may start at a certain value e.g. 800 and then a penalty value e.g. 150 may be applied to this value when the exception information meets a certain criteria such as the total number of exceptions being over a threshold value e.g. 100 . Then the final computed score value e.g. 650 may be presented to the application developer as a measure of the code quality of the application as a way to review the developer s work product. These and other features of the embodiments are further described with reference to the figures.

The apparatus may include at least one processor and a non transitory computer readable medium . The at least one processor may include one or more processors associated with the apparatus that are used carry out the functionalities operations of the apparatus . The non transitory computer readable medium may be any type of storage medium capable of storing instructions. The stored instructions when executed by the at least one processor may cause the at least one processor to perform the functionalities operations of the components of the apparatus as discussed herein.

The apparatus may include a simulator configured to simulate typical transactions when the application is deployed in a runtime situation. For example the simulator may simulate transactions with the application according to a transaction script . The transaction script may include instructions that allow the simulator to simulate desired transactions with the application . The simulator may include any type of known scripting tool that can generate specific requests to a target application such as the application . In more detail during runtime of the application according to the transaction script the application may receive a server request that starts or prompts the execution of the application code according to a call chain initiated by the server request. The server requests may be in the form of general Hypertext Transfer Protocol HTTP posts Java Message Service JMS messaging or Representational State Transfer REST Remote Procedure Calls RPC based web service requests and are generally the entry points into the application . In one example the server request may be a login to a banking transaction for example.

However before simulation of the application is carried out using the simulator an instrumentation engine may inject instrumentation code into the application such that any exceptions produced by the application according to the transaction script may be collected. For example the instrumentation engine may be configured to inject the instrumentation code within a base class of the application such that constructors of the base class are monitored intercepted during runtime of the application . In one implementation the base class may include java.lang.throwable class as further described below.

Generally instrumentation may refer to the concept of monitoring specific components in a system in order to measure the level of an application s performance to diagnose errors and or to write trace information. For example instrumentation code may be injected into selected locations in an application to monitor the desired methods operations of the application. The injected instrumentation code is executed when the instrumented methods of the application is called in order to collect any type of information specified by the instrumentation code. In other words instrumentation of a particular application component may permit the monitoring and collection of any type of information that an instrumented component utilizes such as its arguments metrics and or properties that occur within the call chain initiated by the server request.

Referring to when an error occurs in the application code the application may generate an exception which contains information about the error including its type and the state of the application as well as a snap shot of the call tree also referred to as a stack trace . Creating an exception and handing it to the runtime system may be referred to as throwing an exception . For example an exception may be considered a signal that is generated within a particular thread which is a part of a method that defines the process of the application . In one specific example the application may receive a number of requests from a number of different users and one of these threads may include an access request to a database or file. However if the file is missing an exception may be generated or thrown. For example the runtime platform executing the application may generate the exception or a developer may have inserted customized code that would generate the exception .

Each exception may represent a potential error in the application code such as Class Not Found Exception Undeclared Throwable Exception Invocation Target Exception etc. There may be hundreds of different types of exceptions . More generally the exception may be a problem that arises during execution of the application for many different reasons such as the user entered invalid a file that needs to be opened cannot be found or a network connection cannot be established. Also the exceptions may occur as a result of an unplanned code fault that results in altering the code path. Further the exceptions may include core Java exceptions and custom exceptions added by developers. However generally the exceptions may encompass any kind or type of exception capable of being generated in the application .

According to another aspect the exceptions may include checked exceptions and unchecked exceptions. Checked exceptions may include exceptions that have been anticipated by the developer. For example when code is developed the developer can anticipate a checked exception and insert a try catch block around the code. The try catch block may include instructions for handling the checked exception. In other words there are various methods in an application that must include a try catch block in order to have the application code compile. In one example a method call may indicate to open a file. However the application containing this method call will not compile unless the method call includes a try catch block in order to catch the exception in the event that the file cannot be located. Unchecked exceptions are generally runtime exceptions that are produced by the application in the event an unforeseen or should have foreseen error occurs in the application .

In any type of process defined by the application code during runtime of the application the application may receive an initial server request which prompts a first method call. The first method call may invoke a second method call which invokes a third method call and so forth. At some point within the method call sequence the application may generate an exception . Then the application may traverse the method call sequence in order to determine if any of the methods classes include the try catch block. When the application has traversed the entire method call sequence and has not located the try catch block the thread will terminate. This type of exception may be referred to an uncaught exception e.g. unchecked uncaught exception . For example an uncaught exception may refer to an exception that was generated by the application but the application does not include code that handles the exception . If an uncaught exception was generated on the main thread of the process e.g. the initial thread the application will terminate.

Conventionally only caught exceptions may be logged in a log file. For instance the insertion of the try catch block may catch exceptions and then optionally provide instructions to log them in the log file. Although there may be mechanisms that handle generated exceptions the developer may not have included instructions to log them. Therefore the identifying and logging of caught exceptions according to conventional methods are left to the discretion of the application developer. However the apparatus of may log every exception e.g. checked unchecked caught or uncaught thrown in the application .

Regardless of the type of exception for every exception that is generated or thrown in the application code the base class is invoked. For example in the context of Java based applications the base class may include the java.lang.throwable class which is the superclass of all errors and exceptions in the Java language. This base class is one of the first classes loaded in the Java runtime environment. Objects that are instances of this class or one of its subclasses are thrown by the JAVA machine or by a throw statement. Also it has been recognized that because the base class e.g. the java.lang.throwable class may be adjusted e.g. using a redefiner retransform of a class the base class may be instrumented as further described below.

The base class may represent a central point in the application which receives every exception generated in the application . For example any part of the application e.g. the Java Core classes third party classes or application specific classes eventually invokes the base class when the exception is generated. As such the base class may be considered the central point in the application that eventually receives every exception generated in the application . According to the embodiments as explained below the injected instrumentation code may be configured to instrument the base class such that the apparatus can collect and log every generated exception along with their corresponding exception information .

For example the instrumentation engine may be configured to inject the instrumentation code into the base class such that all possible constructors of the base class are monitored intercepted during runtime of the application . A constructor in a class may be considered a type of subroutine or method called to create an object which in this case creates the exception objects referred to as exceptions . In one example the base class may have one or more possible constructors . In further detail the base class associated with the exceptions may include the following constructors Throwable String Message that constructs a new throwable with specified detailed message Throwable String Message Throwable Cause that constructs a new throwable with the specified detail message and cause and Throwable Cause that constructs a new throwable with the specified cause and a detail message having the class the detail message of the cause.

The instrumentation code may be included within an instrumentation file on the instrumentation engine . The instrumentation file may also be referred to as a recording file rules file or a points file. The instrumentation engine may be configured to locate the appropriate location in the application e.g. the base class according to the instrumentation code specified in the instrumentation file inject the instrumentation code in at least one of the entries and exits of one or more associated constructors of the base class when the application is loaded. For example when the application is loaded the instrumentation engine may review every class associated with the application and if the instrumentation code applies to the loaded class the instrumentation engine may instrument the specified constructors by inserting the instrumentation code into the entries and or exits of the specified constructors .

A runtime collector may monitor the constructors during runtime of the call chain which may include the capture collection of parameters e.g. the exception information related to the specified constructors . The instrumentation code itself provides in part the logic for performing one or more data collection processes such as the capturing of the exception information as well as potentially altering the flow of the application . In more detail the runtime collector may be configured to intercept the exceptions generated by the application and collect exception information for each exception during runtime of the application based on the instrumentation code included within the application . For example when an instrumented constructor is called during execution of the transaction script the runtime collector executes the injected instrumentation code by collecting the information provided to the invoked constructor e.g. at the entry and or the information produced by the invoked constructor e.g. at the exit as further explained below.

The runtime collector may be configured to monitor the constructors of the base class and collect one or more arguments of the monitored constructor as the monitored constructor is called during runtime of the application . For example as the application is executing the transaction script the application code may generate the exceptions which eventually invoke the base class of the application . Depending on the type of exception at least one of the constructors may create an exception . By virtue of the injected instrumentation code within the base class the runtime collector may collected the generated exceptions and the exception information . For instance using the injected instrumentation code the runtime collector may collect the arguments provided to the constructors which may provide detailed information regarding each exception such as the exception information . Again every exception generated in the application eventually invokes the base class which constructs the exception using one or more of the constructors . As such by monitoring intercepting the base class via the injected instrumentation code the runtime collector may collect every exception generated in the application .

The exception information may include a fault line number indicating at least one code line in the application code that produced a corresponding exception class information indicating a class that produced the corresponding exception type information indicating a type of the corresponding exception a stack trace of the application that produced the corresponding exception a cause of the corresponding exception and a message associated with the corresponding exception . The stack trace may provide the location within the application code that produced the exceptions . In other words the stack trace may include a report of active stack frames at a certain point in time during the execution of the application .

A collection module may be configured to receive and store the intercepted exceptions and the exception information in a memory unit . In one example the memory unit may be a hash array. As the application is being executed according to the transaction script the collection module may log each intercepted exception and its corresponding execution information in the memory unit for further processing by an exception analyzer .

According to one embodiment the exception analyzer may be configured to analyze the intercepted exceptions and the corresponding exception information stored in the memory unit . For instance after the transaction script is completed the exception analyzer may analyze the collected exception information . Then a report generator may be configured to generate at least one exception based report based on the analysis where the at least one exception based report provides an indication of code quality of the application . The exception based report may provide the intercepted exceptions and at least a portion of the exception information in a manner that exposes the code quality of the application . As further explained below the exception based report may characterize the exceptions by exception type location or any other type of attribute associated with the exceptions . Also the exception based report may provide a total number of intercepted exceptions as well as the number of exceptions within each exception type and the number of unique locations within the application producing the exceptions .

The apparatus may include a display that provides the exception based report to the user. Also the display may provide a selection of runtime parameters used to generate the exception based reports. The runtime parameters may include an option that allows a user to change the frequency of the generated report an option that allows a user to enable the logging of all exceptions or certain types as well as any other parameter associated with the simulation of the application the collection of the exceptions exception information and the subsequent report generation.

Also according to one embodiment the transaction script may include instructions to simulate certain transactions with the application over a period of time such as two hours for example. A person may use the simulator to assess the quality of a version of the application and then receive an exception based report. Then if a subsequent version of the application is produced the simulator may simulate the subsequent version using the same transaction script e.g. the same transactions are executed over the same period of time thereby obtaining a new exception based report. Upon a comparison of the exception based report for the previous version of the application and the exception based report for the current version of the application the improvement or regression of the application may be determined. For example upon a comparison of the exception based reports it may be determined whether the exception count is increasing or decreasing between the previous version of the application and the current version of the application whether there are new exception types and or new locations in the current version and or whether the types of exceptions are more or less serious than the previous version.

The display may provide any type of exception based report generated by the report generator . However as explained later in the disclosure the display may provide an exception type report that categorizes the exceptions by type and an exception location report that categorizes the exceptions by location. The exception type report and the exception location report are specific types of reports where the embodiments encompass any type of reports that provides an arrangement of at least some of the intercepted exceptions and at least a portion of the exception information .

Further the display may provide a score value that indicates an overall code quality of the application . For example the score value may represent a value that provides an indication of the code quality of the application based on the stored exception information . As further described below the score value may be computed based on the total number of exceptions the number of unique locations producing the exceptions and or the types of exceptions as well as other criteria associated with the exceptions . Also it is noted that the reports generated by the report generator and the calculated score value does not necessarily have to be provided to the display but rather this information may be stored within one or more files associated with the apparatus and then transmitted to any interested party.

Referring to the exception analyzer may include a categorizer that is configured to derive the type of each exception and a location within the application code that produced each exception based on the exception information stored in the memory unit . For example as indicated above the memory unit may store the type of exception for each exception generated during runtime of the application . The categorizer may use the type information to classify the generated exceptions according to the type. Then the report generator may generate the exception type report that classifies the intercepted exceptions by the type. The exception type report may be provided to the display or stored within a file associated with the apparatus . The exception type report is illustrated in and explained later in the disclosure. Also the categorizer may use at least one of the fault line number class information and the stack trace in order to derive the location within the application code that produced each exception . Then the report generator may generate the exception location report that classifies the intercepted exceptions according to the derived locations. The exception location report may be provided to the display or stored in a file associated with the apparatus . The exception location report is illustrated in and explained later in the disclosure.

Also the categorizer may categorize the intercepted exceptions according to any other criteria e.g. other the location and type using the exception information or any information derived by the exception analyzer . For instance the categorizer may categorize the intercepted exceptions according to the class or method that produced the exception or various time periods that produced the exceptions for example.

In general the exception analyzer may analyze the intercepted exceptions based on the collected exception information to obtain a wide variety of information. In one example the exception analyzer may derive an exception type count indicating a number of times a particular type of exception was generated a class exception count indicating a number of times a particular class or method produced an exception and or a faulting location count indicating a number of times a particular location produced an exception based on the exception information . Then the report generator may generate the exception based report based on the exception type count the class exception count and or the faulting location count.

Further the exception analyzer may be configured to derive class information indicating the class that produced the corresponding exception method information indicating the method that produced the corresponding exception caught information indicating whether or not the corresponding exception was caught file information indicating the file that produced the corresponding exception time information indicating a time when the corresponding exception was generated and or message information indicating the message associated with the corresponding exception . Then the report generator may generate the exception based report based on the class information the method information the caught information the file information the time information and or the message information. With respect to the caught information the cause and or the message of the exception information may reveal if the application developer has accounted for the exception e.g. by including the try catch block into the application code . Uncaught exceptions may be considered more serious than caught exceptions.

Further the exception analyzer may include an application grader that may be configured to generate the score value representing a code quality of the application based on the exception information . The score value may be any type of numerical or alphabetical value indicating a level or grade of the application . For instance the score value may represent an overall code quality of the application using the exception information . In one embodiment the application grader may generate the score value based on the total number of exceptions the type of exceptions the number of uncaught exceptions the number of unique locations that produced the exceptions and or any other type of information obtained from the exception information . For example the application grader may generate the score value according to a weighting algorithm that applies weights or penalty values to values associated with the exception information .

In further detail if the total number of exceptions is above a threshold level the application grader may determine the associated penalty value and then apply that penalty value to a score by deducting the penalty value from the score. Similarly if the number of uncaught exceptions exceeds a certain threshold value the application grader may determine the associated penalty value and then apply that penalty value to the score by deducting the penalty value from the score. Similar reasoning may be applied to any other information obtained from the exception information or derived by the exception analyzer such as the number of unique locations producing the exceptions for example. However generally the embodiments encompass any type of algorithm that computes the score value from the exception information and or the information derived by the exception analyzer .

Also it is note that some types of exceptions are more serious than other types of exceptions . Therefore the exception analyzer may include a ranking unit that ranks the type of exceptions according to severity. For example a first type of exception may be considered more serious than a second type of exception . The ranking unit may assign a ranking value to each type of exception and the application grader may generate the score value based on the ranked types by adjusting the score value using the ranking values. The report generator may provide the score value on the display associated with the apparatus or store the score value in a file associated with the apparatus . Also the score value may be provided within any of the generated exception based reports such as the exception type report and the exception location report for example. The score value may be presented to the application developer as a measure of the code quality of the application as a way to review the developer s work product.

Therefore based on the exception based reports and or the score value the quality of the application may be assessed. For example the total number of exceptions may indicate the disruptiveness of the exceptions in the application e.g. if the application is constantly in an interrupt mode. Also the seriousness of the exceptions may be exposed by the identification of the types of exceptions and the number of exceptions included within each type. Also the stack trace of the exceptions may indicate whether there are any threads terminated by the exceptions and whether the exceptions are located in a location under control of the developer or in a location under the control of a third party.

Also the exception based reports and or the score value may provide a mechanism to baseline between versions or releases of the application . In this context the report generator may also include a comparison module that compares the results of the transaction script for a version of the application and the results of the transaction script for one or more other versions of the application and then generate an exception based report that provides the results of the comparison. For example the comparison report may indicate if the exception count is increasing or decreasing between a previous version of the application and a current version of the application whether there are new exception types and or new locations in the current version and or whether the types of exceptions are more or less serious than the previous version.

Exceptions generated by an application may be intercepted and exception information may be collected for each exception during runtime of the application based on instrumentation code included within the application where each exception represents a potential error that occurred during runtime of the application . For example the runtime collector may be configured to intercept exceptions generated by the application and collect exception information for each exception during runtime of the application based on instrumentation code included within the application where each exception represents a potential error that occurred during runtime of the application .

For example the instrumentation engine may be configured to inject the instrumentation code into the base class associated with the exceptions such that constructors of the base class are monitored during runtime of the application . The base class may represent a central point in the application which receives every exception generated in the application . Any part of the application e.g. the Java Core classes third party classes or application specific classes eventually invokes the base class when an exception is generated. As such the base class may be considered the central point in the application that eventually receives every exception generated in the application . In one implementation the base class associated with the exceptions may include java.lang.throwable class. When the application is loaded the instrumentation engine may be configured to locate the base class and inject the instrumentation code in at least one of the constructors . For example when the application is loaded the instrumentation engine may review every class associated with the application and if the instrumentation code applies to the loaded class the instrumentation engine may instrument the constructors by inserting the instrumentation code into the entries and or exits of the constructors .

The runtime collector may be configured to monitor the constructors of the base class and collect one or more arguments of a monitored constructor as the monitored constructor is called during runtime of the application . For example as the application is executing the transaction script the application code may generate the exceptions which eventually invoke the base class of the application . Depending on the type of exception at least one of the constructors may create an exception . By virtue of the injected instrumentation code within the base class the runtime collector may collected the generated exceptions and the exception information . For instance using the injected instrumentation code the runtime collector may collect the arguments provided to the constructors which may include detailed information regarding each exception such as the exception information explained above. Again every exception generated in the application eventually invokes the base class which constructs the exception using one or more of the constructors . As such by monitoring intercepting the base class via the injected instrumentation code the runtime collector may collect every exception generated in the application .

The intercepted exceptions and the corresponding exception information may be stored in a memory unit . For example the collection module may be configured to receive and store the intercepted exceptions and the exception information in the memory unit . In one example the memory unit may be a hash array. As the application is being executed according to the transaction script the collection module may log each intercepted exception and its corresponding execution information in the memory unit .

The intercepted exceptions may be analysed based on the collected exception information stored in the memory unit . For example the exception analyzer may be configured to analyze the intercepted exceptions and the corresponding exception information stored in the memory unit after the transaction script is completed. The exception analyzer may analyze the intercepted exceptions based on the collected exception information to obtain a wide variety of information. In one example the exception analyzer may derive an exception type count indicating a number of times a particular type of exception was generated a class exception count indicating a number of times a particular class or method produced an exception and or a faulting location count indicating a number of times a particular location produced an exception based on the exception information .

At least one report may be generated based on the analysis where the at least one report may provide an indication of code quality of the application . For example the report generator may be configured to generate at least one exception based report based on the analysis where the at least one exception based report provides an indication of code quality of the application . The exception based report may provide the intercepted exceptions and at least a portion of the exception information in a manner that exposes the code quality of the application . The exception based report may characterize the exceptions by exception type location or any other criteria of the stored exception information . Also the exception based report may provide a total number of intercepted exceptions as well as the number of exceptions within each exception type and the number of unique locations of the application producing the exceptions .

For example the exception type may list each type of exception generated during the runtime of the application . In the example of the exception type report provides a first exception type and a second exception type . Although two exception types are illustrated in the exception type report may include many other exception types depending on how many was generated by the application and then collected by the runtime collector .

The first exception type provides the name of the corresponding exception type java.lang.runtime.exception. The second exception type provides the name of the corresponding exception type java.lang.NullPointer.Exception. For each of these exception types the exception type report may provide detailed information based on the exception information and or the exception analyzer such as information .

For each exception type the unique locations field may provide a unique location number indicating a number of unique locations that produced the type of exception . In the example of for each of first exception type and the second exception type the number of unique locations is 1.

For each exception type the times thrown field may provide the number of times the application has generated the corresponding exception type and the timing fields may indicate the first time that the corresponding exception type was generated and the last time that the corresponding exception type was generated. For example the first time provides timing information specifying the date and or time that the first exception of the corresponding exception type was generated and the last time provides timing information specifying the date and or time that the last exception of the corresponding exception type was generated.

For each exception type the last class field may identify the class for the last exception that was generated within the corresponding exception type the last file field may identify the file for the last exception that was generated within the corresponding exception type the last uncaught field may specify whether the last exception of the corresponding exception type was uncaught the last message field may specify the message for the last exception of the corresponding exception type and the last stack trace field may specify the stack trace for the last exception of the corresponding exception type .

In the example of the exception location report classifies the exceptions according to their location which may be derived from the location identified by the stack trace field . However the exception location report may classify the exceptions according to any other fields that may indicate a location such as the corresponding methods or files for example. It is noted that the exception location report only illustrates a portion of the full report which may include many other exception locations. For example if a user would scroll through the exception location report the user would be able to view other exception locations.

In more detail within each unique location the class field may specify the class for the corresponding exception the method field may specify the method that produced the corresponding exception the file field may specify the file that produced the corresponding exception the uncaught field may specify whether the corresponding exception was uncaught and the exception name field may specify the name of the type of the corresponding exception . Also the times thrown field may provide the number of times the application has generated exceptions within that unique location and the timing fields may indicate the first time that an exception was generated within that location and the last time that the an exception was generated within that location. Further the message field may provide the message of the corresponding exception and the stack trace field may provide the code lines in the application that generated the corresponding exceptions .

Implementations of the various techniques described herein may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Implementations may implemented as a computer program product i.e. a computer program tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers. A computer program such as the computer program s described above can be written in any form of programming language including compiled or interpreted languages and can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

Method steps may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method steps also may be performed by and an apparatus may be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. Elements of a computer may include at least one processor for executing instructions and one or more memory devices for storing instructions and data. Generally a computer also may include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. Information carriers suitable for embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory may be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations may be implemented on a computer having a display device e.g. a cathode ray tube CRT or liquid crystal display LCD monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

Implementations may be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation or any combination of such back end middleware or front end components. Components may be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN e.g. the Internet.

While certain features of the described implementations have been illustrated as described herein many modifications substitutions changes and equivalents will now occur to those skilled in the art.

