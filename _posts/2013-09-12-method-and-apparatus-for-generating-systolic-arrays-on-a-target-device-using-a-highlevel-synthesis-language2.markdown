---

title: Method and apparatus for generating systolic arrays on a target device using a high-level synthesis language
abstract: A method for generating a description of a systolic array includes prompting a user to input information about the systolic array. A high-level synthesis language is generated that describes channels of processing elements of the systolic array and a topology of the processing elements in response to the information provided by the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09626165&OS=09626165&RS=09626165
owner: Altera Corporation
number: 09626165
owner_city: San Jose
owner_country: US
publication_date: 20130912
---
Embodiments of the present invention relate to tools for designing systems on target devices. More specifically embodiments of the present invention relate to a method and apparatus for generating systolic arrays on a target device such as field programmable gate arrays using a high level synthesis language.

Systolic arrays are a pipe network arrangement of processing elements that allow data to flow synchronously between neighboring processing elements. Each processing element may receive data from one or more neighboring PE process the data and transmit the processed data to one or more neighboring processing element. In a two dimensional systolic array data may be passed horizontally and vertically between PEs every clock cycle. Systolic arrays have been used in applications such as signal processing linear algebra string matching sorting searching and other applications.

The dedicated communication paths between processing elements and the processing elements ability to be configured to support pipelining allow systolic arrays to be efficient when performing computations. For example for some operations a systolic array may be able perform computations in O n time instead of O n time as required by other processing structures.

Target devices such as field programmable gate arrays FPGA are good candidates for systolic array implementation due to their parallel reconfigurable hardware. FPGAs are constructed with tiling blocks of memory and logic which match well with the requirements of systolic arrays. The programmable input outputs of FPGAs also work well with the high input output requirements of systolic arrays.

Designers responsible for programming FPGAs to implement systolic arrays are required to have extensive knowledge in both the algorithm performed by the systolic array and hardware acceleration. Designers are also met with the challenge of tuning the performance of the system which may be difficult and time consuming using hardware description language.

According to embodiments of the present invention methods and apparatus for generating a systolic array on a target device using a high level synthesis language are disclosed. Embodiments of the present invention allow for the generation of a description of a generic multi dimensional systolic array from a scripting language. The description may adapt to a high level synthesis language such as OpenCL Impulse C or other high level synthesis language that may be converted into a hardware description language.

According to an embodiment of the present invention a method for generating a description of a systolic array includes prompting a user to input information about the systolic array. A high level synthesis language is generated that describes channels of processing elements of the systolic array and a typology of the processing elements in response to the information provided by the user. According to an aspect of the present invention the high level synthesis language further describes data transmitters and data receivers associated with the systolic array an external interface associated with the systolic array and or components in the processing elements of the systolic array. According to an aspect of the present invention optimizations are performed on the high level synthesis language that describes the systolic array.

According to an embodiment of the present invention a method for generating a description of a systolic array in a high level synthesis language is disclosed. A description of a typology of the systolic array is generated in response to a dimension of the systolic array. A description of components in processing elements in the systolic array is generated in response to an algorithmic description of the processing elements. A description of channels between the processing elements is generated in response to a functional description of the processing elements. According to an aspect of the present invention optimizations are performed on the high level synthesis language that describes the systolic array. The optimizations may include external channel fan out minimization the addition of data buffers in the processing elements and or the reduction of clock latency for the processing elements by creating a zero depth FIFO for each non diagonal processor element connection.

In the following description for purposes of explanation specific nomenclature is set forth to provide a thorough understanding of embodiments of the present invention. It will be apparent to one skilled in the art that specific details in the description may not be required to practice the embodiments of the present invention. In other instances well known circuits devices procedures and programs are shown in block diagram form to avoid obscuring embodiments of the present invention unnecessarily.

Target devices such as field programmable gate arrays FPGAs structured application specific integrated circuits ASICs and ASICs are used to implement large systems that may include million of gates and megabits of embedded memory. According to an embodiment of the present invention an electronic design automation EDA tool is used to address the complexity of a large system to create and optimize a design for the system onto physical target devices.

At a description of a system in high level synthesis language is generated. According to an embodiment of the present invention a graphical user interface prompts a user to input information about the system. The information about the system may include features and functionalities of a systolic array and components and interfaces coupled to the systolic array. The information about the system may be in the format of a script or computer language. From the information of the system provided by the user a description of the system in high level synthesis language is generated. The high level synthesis language may be Open Computing Language OpenCL Impulse C or other high level synthesis language. OpenCL is a framework for writing programs that execute across heterogeneous platforms. OpenCL includes a language for writing kernels and application programming interfaces APIs that are used to define and control platforms.

At optimizations are applied to the high level synthesis language description of the system. According to an embodiment of the present invention based upon the system systolic array and or platform or type of target device in which the system is to be implemented an appropriate set of optimizations are applied to improve throughput and performance. The optimizations applied may include parallelism expansion external channel fan out minimization data buffering and latency reduction.

At the high level synthesis language description of the system is converted into hardware description language HDL . The HDL may be for example Verilog VHDL or other hardware description language. According to an embodiment of the present invention OpenCL kernel functions are converted into FPGA hardware accelerators interface IPs are added and interconnect logic is built.

At the HDL generated at is compiled into a program file. According to an embodiment of the present invention HDL compilation involves synthesis placement routing and timing analysis. According to an embodiment of the present invention HDL compilation also involves generation of report files that describe the target device s area usage and timing information.

At the target device is programmed using the program file generated at to implement the system. By programming the target device generic programmable resources on the target device may be used to implement function specific components as described in the high level synthesis language and HDL of the system.

At a description of the typology of the systolic array is generated in response to a dimension of the systolic array provided in the information. According to an embodiment of the present invention the dimension of the systolic array may be a multi dimensional systolic array of any specified length. For example the systolic array may be in the form of an l m n matrix where l m and n are integers.

At a description of components in the processing elements is generated in response to an algorithmic description of the processing elements provided in the information. According to an embodiment of the present invention the algorithmic description identifies the data received by a processing element and describes computations performed on the data by the processing element.

At a description of connections channels between processing elements is generated in response to a functional description provided in the information. The functional description identifies external and internal channels connected to each of the processing elements and the direction data is traveling on each of the channels.

At description of data transmitters and data receivers that are coupled to the processing elements via external channels is generated in response to the information. According to an embodiment of the present invention the description may describe the type of data location of the data and manner in which the data is transmitted to the systolic array. The description may also describe where to store and what to do with the data received from the systolic array. In one embodiment a description of a first channel between a data transmitter and processing elements and a second channel between the processing elements and a data receiver is generated. The description provide the processing elements with data inputs and outputs.

At a description of an external interface is generated in response to the information. According to an embodiment of the present invention a location of where input is read from and output is written to is described. According to an embodiment of the present invention the external interface may an external memory or an input output of the target device.

The arrows in shown pointing to and from each processing element in the systolic array represent connections channels for transmitting data. The connections are generated from a functional description provided by a user. The functional description identifies external and internal channels connected to each of the processing elements and the direction data is traveling on each of the channels.

A producer external data transmitter transmits data to the systolic array and a consumer external data receiver receives data from the systolic array . The producer is generated from a description of the producer provided by the user. The consumer is generated from a description of the consumer provided by the user.

An external interface is coupled to the producer . The protocol used by the external interface to communicate with the producer is specified from a description of the external interface .

It should be appreciated that the description of connections channels between processing elements may be generated in response to a functional description provided by a user in the form of an application program interfaces APIs . For example for connections between processing elements a user may provide a read API to describe a connection that inputs data to the processing element and a write API to describe a connection that outputs data from the processing element. The read API may be identify a name of the connection transmitting data to a processing element the component from which the data is originating from initialization values to use as input data at startup and feedback paths for processor elements that reside on the periphery of a matrix. The write API may identify a name of the connection transmitting data out of the processing element and the data being transmitted out of the processing element. An exemplary read API and write API are listed below.

The exemplary read API and write API listed above may instantiate a read connection between two processing elements and a write connection between two processing elements. Each processing element will associate the identity of a connection with the channel argument. The offset arguments identify a processing element which data is being transmitted from by providing a direction of the processing element. For the write API no offset argument is provided since data is assumed to be transmitted in the same direction from which it was received. For some systolic arrays it may be necessary for a processing element at one end of a matrix to feedback data to another end. The feedback argument may be used to identify a feedback path. In order to address special cases such as the initialization of a processing element and loading of data from an external an external source the flags argument is provided. The data argument is provided to identify data that is output on a write connection.

For connections between processing elements and external interfaces the user may also provide a read API to describe a connection that inputs data to the processing element and a write API to describe a connection that outputs data from the processing element. The read API may be identify a name of the connection transmitting data to a processing element and flags. The write API may identify a name of the connection transmitting data out of the processing element and the data being transmitted out of the processing element. An exemplary read API and write API between a processing element and an external interface are listed below.

The exemplary read API and write API listed above may instantiate a read connection between a processing element and an external channel and a write connection between a processing element and an external channel. Each processing element will associate the identity of a connection with the channel argument. In order to address special cases such as the initialization of a processing element and loading of data from an external an external source the flags argument is provided. The data argument is provided to identify data that is output to the external interface.

If the APIs listed above are used to describe a processing element that is replicated throughout a processing array an API that identifies a unique processing element that support different connections may be used. An exemplary API that may be used to identify the unique processing element is listed below.

The arguments x and y are provided to allow a user to identify which processing element in a matrix of processing elements of a systolic array is the unique processing element. The connections associated with this unique processing element may be described following this API.

The read API identifies the name of channel 2 2 in its first argument. The read API identifies the location or direction of the transmitting processing element that is sending data on internal channel 2 in the second and third arguments. In this example the values 1 1 represent directional coordinates of the transmitting processing element. INIT FIRST ONCE means that the very first PE in the 1 1 direction will initialize the PEs with a pre defined initialization value. This will be used to start the PE execution.

The write API also identifies the name of the channel 2 2 in its first argument. The write API includes a second argument which describes the data score computed by the processing element which is transmitted. The APIs describing internal channels 1 3 and 4 are illustrated on .

Referring back to at data buffering capabilities are added to the systolic array. One limitation of high level synthesis language is that it does not define data types with bit granularity. This may result in inefficient data packing. To address this processing elements in the systolic array may be implemented with data buffering capabilities. According to an embodiment of the present invention a register is provided in the PE which receives data. The register may be configured to be a length that is appropriate for optimal data transfer. The register buffers the data and data is transmitted out of the buffer only after the buffer is full. This reduces the frequency of access of the processing element.

Referring back to at processing elements are configured to reduce latency. Connections between processing elements are configured with a zero depth first in first outs FIFOs . An exception is made for diagonal connections between processing elements. Diagonal connections between processing elements are provided with a FIFO of depth to accommodate for delays associated with transmitting data between two processing elements. illustrates an example of the latency provided between processing elements.

At the system is placed. According to an embodiment of the present invention placement involves placing the mapped logical system design on the target device. Placement works on the technology mapped netlist to produce a placement for each of the functional blocks. According to an embodiment of the present invention placement includes fitting the system on the target device by determining which resources on the logic device are to be used for specific logic elements and other function blocks determined to implement the system during synthesis. Placement may include clustering which involves grouping logic elements together to form the logic clusters present on the target device. According to an embodiment of the present invention clustering is performed at an early stage of placement and occurs directly after synthesis during the placement preparation stage.

At the placed design is routed. During routing routing resources on the target device are allocated to provide interconnections between logic gates logic elements and other components on the target device. Routability optimization may also be performed on the placed logic design. According to an embodiment of the present invention the goal of routability optimization is to reduce the amount of wiring used to connect components in the placed logic design. Routability optimization may include performing fanout splitting logic duplication logical rewiring or other procedures. It should be appreciated that one or more of the procedures may be performed on the placed logic design.

At timing analysis is performed on the system designed by procedures and . According to an embodiment of the present invention the timing analysis determines whether timing constraints of the system are satisfied. As part of timing analysis slack analysis may be performed.

At the design for the system is modified in response to the timing analysis. According to an embodiment of the present invention the design for the system may be modified in response to determining that timing constraints have not been satisfied. The design for the system may be modified by a designer manually or alternatively the design may be modified automatically by the EDA tool by re executing one or more of procedures and .

At an assembly procedure is performed. The assembly procedure involves creating a program file that includes information determined by the procedures described at and . The program file may be a bit stream that may be used to program a target device.

According to an embodiment of the present invention the procedures illustrated in may be performed by an EDA tool executed on a first computer system. The data file generated may be transmitted to a second computer system to allow the design of the system to be further processed. Alternatively the data file may be transmitted to a second computer system which may be used to program the target device according to the system design. It should be appreciated that the design of the system may also be output in other forms such as on a display device or other medium. The target device may be programmed with the data file. By programming the target with the data file components on the target device are physically transformed to implement the system.

A network controller is coupled to the bus . The network controller may link the computer system to a network of computers not shown and supports communication among the machines. A display device controller is coupled to the bus . The display device controller allows coupling of a display device not shown to the computer system and acts as an interface between the display device and the computer system . An input interface is coupled to the bus . The input interface allows coupling of an input device not shown to the computer system and transmits data signals from the input device to the computer system .

A system designer may reside in the memory and be executed by the processor . According to an embodiment of the present invention the system designer may generate a description of a generic multi dimensional systolic array from a scripting language. The description may adapt to a high level synthesis language such as OpenCL Impulse C or other high level synthesis language that may be converted into a hardware description language. The system designer may prompt a user to input information about the systolic array. A high level synthesis language is generated that describes channels of processing elements of the systolic array and a typology of the processing elements in response to the information provided by the user. According to an aspect of the present invention the high level synthesis language further describes data transmitters and data receivers associated with the systolic array an external interface associated with the systolic array and or channels associated with the processing elements of the systolic array. According to an aspect of the present invention optimizations are performed on the high level synthesis language that describes the systolic array.

The system designer includes a designer manager . The designer manager is connected to and transmits data between the components of the system designer .

The system designer includes a high level synthesis language HLSL unit . The high level synthesis unit generates a description of a system in high level synthesis language from information about the system provided by a user. The information about the system may be in the format of a script or computer language. According to an embodiment of the present invention the high level synthesis language unit includes a graphical user interface unit configured to prompt a user to enter information about the systolic array. The graphical user interface unit may prompt the user for specific information about the systolic or prompt the user to input information which the user deems important in describing the systolic array. The high level synthesis language unit also includes a typology generation unit . The typology generation unit generates a description of the typology of the systolic array in response to a dimension of the systolic array provided in the information. The high level synthesis unit also includes a processing unit generation unit . The processing unit generation unit generates a description of components in the processing elements in response to an algorithmic description of the processing elements provided in the information. The high level synthesis unit also includes a connection generation unit . The connection generation unit generates connections channels between processing elements in response to a functional description provided in the information. The functional description identifies external and internal channels connected to each of the processing elements and the direction data is traveling on each of the channels. The high level synthesis unit also includes a transmitter receiver generation unit . The transmitter receiver generation unit generates a description of data transmitters and data receivers that are coupled to the processing elements via external channels in response to the information. The high level synthesis unit also includes an external interface generation unit . The external interface generation unit generates a description of the external interface in response to the information.

The system designer includes an optimization unit . The optimization unit applies an appropriate set of optimizations based upon the system systolic array platform or target device which the system is implemented on in order to improve throughput and performance. The optimizations applied may include parallelism expansion external channel fan out minimization data buffering and latency reduction as described with reference to .

The system designer includes an hardware description language HDL conversion unit . The HDL conversion unit converts the high level synthesis language description of the system into hardware HDL. The HDL description provides high level representations of a circuit in terms of the flow of signals or transfer of data between hardware registers and the logic operations performed on those signals. The HDL may be for example Verilog VHDL or other hardware description language.

The system designer includes a HDL compilation unit . According to an embodiment of the present invention the HDL compilation unit performs synthesis placement routing and timing analysis on the HDL of the system as described with reference to .

It should be appreciated that embodiments of the present invention may be provided as a computer program product or software that may include a computer readable or machine readable medium having instructions. The instructions on the computer readable or machine readable medium may be used to program a computer system or other electronic device. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks or other type of media machine readable medium suitable for storing electronic instructions. The techniques described herein are not limited to any particular software configuration. They may find applicability in any computing or processing environment. The terms computer readable medium or machine readable medium used herein shall include any medium that is capable of storing or encoding a sequence of instructions for execution by the computer and that cause the computer to perform any one of the methods described herein. Furthermore it is common in the art to speak of software in one form or another e.g. program procedure process application module unit logic and so on as taking an action or causing a result. Such expressions are merely a shorthand way of stating that the execution of the software by a processing system causes the processor to perform an action to produce a result.

The device includes memory blocks. The memory blocks may be for example dual port random access memory RAM blocks that provide dedicated true dual port simple dual port or single port memory up to various bits wide at up to various frequencies. The memory blocks may be grouped into columns across the device in between selected LABs or located individually or in pairs within the device . Columns of memory blocks are shown as .

The device includes digital signal processing DSP blocks. The DSP blocks may be used to implement multipliers of various configurations with add or subtract features. The DSP blocks include shift registers multipliers adders and accumulators. The DSP blocks may be grouped into columns across the device and are shown as .

The device includes a plurality of input output elements IOEs . Each IOE feeds an IO pin not shown on the device . The IOEs are located at the end of LAB rows and columns around the periphery of the device . Each IOE may include a bidirectional IO buffer and a plurality of registers for registering input output and output enable signals.

The device may include routing resources such as LAB local interconnect lines row interconnect lines H type wires and column interconnect lines V type wires not shown to route signals between components on the target device.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the embodiments of the invention. The specification and drawings are accordingly to be regarded in an illustrative rather than restrictive sense.

