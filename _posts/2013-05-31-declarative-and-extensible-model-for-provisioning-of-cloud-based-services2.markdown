---

title: Declarative and extensible model for provisioning of cloud based services
abstract: A method for offering a set of services is disclosed. The method may comprise storing, by a cloud infrastructure system, subscription order information identifying a service from a set of services provided by the cloud infrastructure system, the cloud infrastructure system comprising one or more computing devices. A computing device from the one or more computing devices may determine a service declaration for the service, the service declaration comprising information indicative of procedures for provisioning resources for enabling the service. A computing device from the one or more computing devices may cause the service to be provisioned based on the service declaration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09621435&OS=09621435&RS=09621435
owner: Oracle International Corporation
number: 09621435
owner_city: Redwood Shores
owner_country: US
publication_date: 20130531
---
The present application is a non provisional of and claims the benefit and priority under 35 U.S.C. 119 e of the following applications the entire contents of which are incorporated herein by reference for all purposes 

The present disclosure relates to computer systems and software and more particularly to techniques for facilitating and automating the provision of services in a cloud environment.

Cloud computing is a model for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services . The services provided or accessed through the cloud or network are referred to as cloud services. There is a lot of processing that needs to be performed by a cloud service provider to make cloud services available to a subscribing customer. Due to its complexity much of this processing is still done manually. For example provisioning resources for providing such cloud services can be a very labor intensive process.

This summary is not intended to identify key or essential features of the claimed subject matter nor is it intended to be used in isolation to determine the scope of the claimed subject matter. The subject matter should be understood by reference to appropriate portions of the entire specification of this patent any or all drawings and each claim.

According to some embodiments a method for offering a set of services is disclosed. The method may comprise storing by a cloud infrastructure system subscription order information identifying a service from a set of services provided by the cloud infrastructure system the cloud infrastructure system comprising one or more computing devices. A computing device from the one or more computing devices may determine a service declaration for the service the service declaration comprising information indicative of procedures for provisioning resources for enabling the service. A computing device from the one or more computing devices may cause the service to be provisioned based on the service declaration.

According to some embodiments a system may comprise one or more computing devices configurable to offer a set of cloud services a memory configurable to store subscription order information identifying a service from the set of cloud services and wherein a computing device from the one or more computing devices is configurable to determine a service declaration for the service the service declaration comprising information indicative of procedures for provisioning resources for enabling the service and cause the service to be provisioned based on the service declaration.

According to some embodiments one or more computer readable media storing computer executable instructions for a cloud infrastructure system configured to offer a set of cloud services that when executed may cause one or more computing devices in the cloud infrastructure system to store subscription order information identifying a service from the set of cloud services determine a service declaration for the service the service declaration comprising information indicative of procedures for provisioning resources for enabling the service and cause the service to be provisioned based on the service declaration.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of embodiments of the invention. However it will be apparent that various embodiments may be practiced without these specific details. The figures and description are not intended to be restrictive.

Certain embodiments of the present invention provide techniques for automating the provisioning managing and tracking of services provided by a cloud infrastructure system.

In certain embodiments a cloud infrastructure system may include a suite of applications middleware and database service offerings that are delivered to a customer in a self service subscription based elastically scalable reliable highly available and secure manner. An example of such a cloud infrastructure system is the Oracle Public Cloud provided by the present assignee.

A cloud infrastructure system may provide many capabilities including but not limited to provisioning managing and tracking a customer s subscription for services and resources in the cloud infrastructure system providing predictable operating expenses to customers utilizing the services in the cloud infrastructure system providing robust identity domain separation and protection of a customer s data in the cloud infrastructure system providing customers with a transparent architecture and control of the design of the cloud infrastructure system providing customers assured data protection and compliance with data privacy standards and regulations providing customers with an integrated development experience for building and deploying services in the cloud infrastructure system and providing customers with a seamless integration between business software middleware database and infrastructure services in the cloud infrastructure system.

In certain embodiments services provided by the cloud infrastructure system may include a host of services that are made available to users of the cloud infrastructure system on demand such as online data storage and backup solutions Web based e mail services hosted office suites and document collaboration services database processing managed technical support services and the like. Services provided by the cloud infrastructure system can dynamically scale to meet the needs of its users. A specific instantiation of a service provided by cloud infrastructure system is referred to herein as a service instance. In general any service made available to a user via a communication network such as the Internet from a cloud service provider s system is referred to as a cloud service. Typically in a public cloud environment servers and systems that make up the cloud service provider s system are different from the customer s own on premises servers and systems. For example a cloud service provider s system may host an application and a user may via a communication network such as the Internet on demand order and use the application.

A service in a computer network cloud infrastructure includes protected computer network access to storage a hosted database a hosted web server a software application or other service provided by a cloud vendor to a user or as otherwise known in the art. For example a service can include password protected access to remote storage on the cloud through the Internet. As another example a service can include a web service based hosted relational database and script language middleware engine for private use by a networked developer. As another example a service can include access to an email software application hosted on a cloud vendor s web site.

Cloud infrastructure system may provide the cloud services via different deployment models. For example services may be provided under a public cloud model where cloud infrastructure system is owned by an organization selling cloud services e.g. owned by Oracle and the services are made available to the general public or different industry enterprises. As another example services may be provided under a private cloud model where cloud infrastructure system is operated solely for a single organization and may provide services for one or more entities within the organization. The cloud services may also be provided under a community cloud model where cloud infrastructure system and the services provided by system are shared by several organizations in a related community. The cloud services may also be provided under a hybrid cloud model which is a combination of two or more different models.

As shown in cloud infrastructure system may comprise multiple components which working in conjunction enable provision of services provided by cloud infrastructure system . In the embodiment illustrated in cloud infrastructure system includes a SaaS platform a PaaS platform an IaaS platform infrastructure resources and cloud management functionality . These components may be implemented in hardware or software or combinations thereof.

SaaS platform is configured to provide cloud services that fall under the SaaS category. For example SaaS platform may provide capabilities to build and deliver a suite of on demand applications on an integrated development and deployment platform. SaaS platform may manage and control the underlying software and infrastructure for providing the SaaS services. By utilizing the services provided by SaaS platform customers can utilize applications executing on cloud infrastructure system . Customers can acquire the application services without the need for customers to purchase separate licenses and support.

Various different SaaS services may be provided. Examples include without limitation services that provide solutions for sales performance management enterprise integration and business flexibility for large organizations and the like. In one embodiment the SaaS services may include Customer Relationship Management CRM services e.g. Fusion CRM services provided by the Oracle cloud Human Capital Management HCM Talent Management services and the like. CRM services may include services directed to reporting and management of a sales activity cycle to a customer and others. HCM Talent services may include services directed to providing global workforce lifecycle management and talent management services to a customer.

Various different PaaS services may be provided by PaaS platform in a standardized shared and elastically scalable application development and deployment platform. Examples of PaaS services may include without limitation services that enable organizations such as Oracle to consolidate existing applications on a shared common architecture as well as the ability to build new applications that leverage the shared services provided by the platform. PaaS platform may manage and control the underlying software and infrastructure for providing the PaaS services. Customers can acquire the PaaS services provided by cloud infrastructure system without the need for customers to purchase separate licenses and support. Examples of PaaS services include without limitation Oracle Java Cloud Service JCS Oracle Database Cloud Service DBCS and others.

By utilizing the services provided by PaaS platform customers can utilize programming languages and tools supported by cloud infrastructure system and also control the deployed services. In some embodiments PaaS services provided by the cloud infrastructure system may include database cloud services middleware cloud services e.g. Oracle Fusion Middleware services and Java cloud services . In one embodiment database cloud services may support shared service deployment models that enable organizations to pool database resources and offer customers a database as a service in the form of a database cloud middleware cloud services provides a platform for customers to develop and deploy various business applications and Java cloud services provides a platform for customers to deploy Java applications in the cloud infrastructure system . The components in SaaS platform and PaaS platform illustrated in are meant for illustrative purposes only and are not intended to limit the scope of embodiments of the present invention. In alternate embodiments SaaS platform and PaaS platform may include additional components for providing additional services to the customers of cloud infrastructure system .

Various different IaaS services may be provided by IaaS platform . The IaaS services facilitate the management and control of the underlying computing resources such as storage networks and other fundamental computing resources for customers utilizing services provided by the SaaS platform and the PaaS platform.

In certain embodiments cloud infrastructure system includes infrastructure resources for providing the resources used to provide various services to customers of the cloud infrastructure system . In one embodiment infrastructure resources includes pre integrated and optimized combinations of hardware such as servers storage and networking resources to execute the services provided by the PaaS platform and the SaaS platform.

In certain embodiments cloud management functionality provides comprehensive management of cloud services e.g. SaaS PaaS IaaS services in the cloud infrastructure system . In one embodiment cloud management functionality includes capabilities for provisioning managing and tracking a customer s subscription received by the cloud infrastructure system and the like.

Various types of users may interact with cloud infrastructure system . These users may include for example end users that can interact with cloud infrastructure system using various client devices such as desktops mobile devices tablets and the like. The users may also include developers programmers who may interact with cloud infrastructure system using command line interfaces CLIs application programming interfaces APIs through various integrated development environments IDEs and via other applications. User may also include operations personnel . These may include personnel of the cloud service provider or personnel of other users.

Application services layer identifies various cloud services that may be offered by cloud infrastructure system . These services may be mapped to or associated with respective software components e.g. Oracle WebLogic server for providing Java services oracle database for providing database services and the like via a service integration and linkages layer .

In certain embodiments a number of internal services may be provided that are shared by different components or modules of cloud infrastructure system and by the services provided by cloud infrastructure system . These internal shared services may include without limitation a security and identity service an integration service an enterprise repository service an enterprise manager service a virus scanning and white list service a high availability backup and recovery service service for enabling cloud support in IDEs an email service a notification service a file transfer service and the like.

Runtime infrastructure layer represents the hardware layer on which the various other layers and components are built. In certain embodiments runtime infrastructure layer may comprise one Oracle s Exadata machines for providing storage processing and networking resources. An Exadata machine may be composed of various database servers storage Servers networking resources and other components for hosting cloud services related software layers. In certain embodiments the Exadata machines may be designed to work with Oracle Exalogic which is an engineered system providing an assemblage of storage compute network and software resources. The combination of Exadata and Exalogic provides a complete hardware and software engineered solution that delivers high performance highly available scalable secure and a managed platform for providing cloud services.

It should be appreciated that cloud infrastructure system depicted in may have other components than those depicted in . Further the embodiment shown in is only one example of a cloud infrastructure system that may incorporate an embodiment of the invention. In some other embodiments cloud infrastructure system may have more or fewer components than shown in may combine two or more components or may have a different configuration or arrangement of components.

Client computing devices and may be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems or any other computing device. For example client computing devices and may be any other electronic device such as a thin client computer Internet enabled gaming system and or personal messaging device capable of communicating over a network e.g. network described below . Although exemplary system environment is shown with three client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with cloud infrastructure system .

A network may facilitate communications and exchange of data between clients and and cloud infrastructure system . Network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.1x suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

Cloud infrastructure system may comprise one or more computers and or servers which may be general purpose computers specialized server computers including by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. The computing devices that make up cloud infrastructure system may run any of operating systems or a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI servers Java servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM and the like.

In various embodiments cloud infrastructure system may be adapted to automatically provision manage and track a customer s subscription to services offered by cloud infrastructure system . In one embodiment as depicted in the components in cloud infrastructure system include an Identity Management IDM module a services module a Tenant Automation System TAS module a Service Deployment Infrastructure SDI module an Enterprise Manager EM module one or more front end web interfaces such as a store user interface UI a cloud user interface UI and a support user interface UI an order management module sales personnel operator personnel and an order database . These modules may include or be provided using one or more computers and or servers which may be general purpose computers specialized server computers server farms server clusters or any other appropriate arrangement and or combination. In one embodiment one or more of these modules can be provided by cloud management functionality or IaaS platform in cloud infrastructure system . The various modules of the cloud infrastructure system depicted in are meant for illustrative purposes only and are not intended to limit the scope of embodiments of the present invention. Alternative embodiments may include more or fewer modules than those shown in .

In an exemplary operation at 1 a customer using a client device such as client device or may interact with cloud infrastructure system by browsing the various services provided by cloud infrastructure system and placing an order for a subscription for one or more services offered by cloud infrastructure system . In certain embodiments the customer may access store UI or cloud UI and place a subscription order via these user interfaces.

The order information received by cloud infrastructure system in response to the customer placing an order may include information identifying the customer and one or more services offered by the cloud infrastructure system that the customer intends to subscribe to. A single order may include orders for multiple services. For instance a customer may login to cloud UI and request a subscription for a CRM service and a Java cloud service in the same order.

Additionally the order may also include one or more service levels for the ordered services. As used herein and as will be discussed in greater detail below a service level for a service determines the amount of resources to be allocated for providing the requested service in the context of the subscription such as the amount of storage amount of computing resources data transfer facilities and the like. For example a basic service level may provide a minimum level of storage data transmission or number of users and higher service levels may include additional resources.

In addition in some instances the order information received by cloud infrastructure system may include information indicative of a customer level and the time period during which the service is desired. The customer level specifies the priority of the customer making the subscription request. In one example the priority may be determined based on the quality of service that the cloud infrastructure system guarantees or promises the customer as specified by a Service Level Agreement SLA agreed to between the customer and the provider of the cloud services. In one example the different customer levels include a basic level a silver level and a gold level. The time period for a service may specify the start date and time for the service and the time period for which the service is desired e.g. a service end date and time may be specified .

In one embodiment a customer may request a new subscription via store UI or request for a trial subscription via cloud UI . In certain embodiments store UI may represent the service provider s eCommerce store front e.g. www.oracle.com store for Oracle Cloud services . Cloud UI may represent a business interface for the service provider. Consumer can explore available services and sign up for interested services through cloud UI . Cloud UI captures user input necessary for ordering trial subscriptions provided by cloud infrastructure system . Cloud UI may also be used to view account features and configure the runtime environment located within cloud infrastructure system . In addition to placing an order for a new subscription store UI may also enable the customer to perform other subscription related tasks such as changing the service level of a subscription extending the term of the subscription increasing the service level of a subscription terminating an existing subscription and the like.

After an order has been placed per 1 at 2 the order information that is received via either store UI or cloud UI is stored in order database which can be one of several databases operated by cloud infrastructure system and utilized in conjunction with other system elements. While order database is shown logically as a single database in in actual implementation this may comprise one or more databases.

At 3 the order is forwarded to order management module . Order management module is configured to perform billing and accounting functions related to the order such as verifying the order and upon verification booking the order. In certain embodiments order management module may include a contract management module and an install base module. The contract management module may store contract information associated with the customer s subscription order such as the customer s service level agreement SLA with cloud infrastructure system . The install base module may include detailed descriptions of the services in the customer s subscription order. In addition to order information the install base module may track installation details related to the services product status and support service history related to the services. As a customer orders new services or upgrades existing ones the install base module may automatically add new order information.

At 4 information regarding the order is communicated to TAS module . In one embodiment TAS module utilizes the order information to orchestrate the provisioning of services and resources for the order placed by the customer. At 5 TAS component orchestrates the provisioning of resources to support the subscribed services using the services of SDI module . At 6 TAS module provides information related to the provisioned order received from SDI module to services module . In some embodiments at 7 SDI module may also use services provided by services module to allocate and configure the resources needed to fulfill the customer s subscription order.

At 8 services module sends a notification to the customers on client devices and regarding the status of the order.

In certain embodiments TAS module functions as an orchestration component that manages business processes associated with each order and applies business logic to determine whether an order should proceed to provisioning. In one embodiment upon receiving an order for a new subscription TAS module sends a request to SDI module to allocate resources and configure those resources needed to fulfill the subscription order. SDI module enables the allocation of resources for the services ordered by the customer. SDI module provides a level of abstraction between the cloud services provided by cloud infrastructure system and the physical implementation layer that is used to provision the resources for providing the requested services. TAS module may thus be isolated from implementation details such as whether or not services and resources are actually provisioned on the fly or pre provisioned and only allocated assigned upon request.

In certain embodiments a user may use store UI to directly interact with order management module to perform billing and accounting related functions such as verifying the order and upon verification booking the order. In some embodiments instead of a customer placing an order at 9 the order may instead be placed by sales personnel on behalf of the customer such as a customer s service representative or sales representative. Sales personnel may directly interact with order management module via a user interface not shown in provided by order management module for placing orders or for providing quotes for the customer. This for example may be done for large customers where the order may be placed by the customer s sales representative through order management module . The sales representative may set up the subscription on behalf of the customer.

EM module is configured to monitor activities related to managing and tracking a customer s subscription in cloud infrastructure system . EM module collects usage statistics for the services in the subscription order such as the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time. At 10 a host operator personnel who may be an employee of a provider of cloud infrastructure system may interact with EM module via an enterprise manager user interface not shown in to manage systems and resources on which services are provisioned within cloud infrastructure system .

Identity management IDM module is configured to provide identity services such as access management and authorization services in cloud infrastructure system . In one embodiment IDM module controls information about customers who wish to utilize the services provided by cloud infrastructure system . Such information can include information that authenticates the identities of such customers and information that describes which actions those customers are authorized to perform relative to various system resources e.g. files directories applications communication ports memory segments etc. IDM module can also include the management of descriptive information about each customer and about how and by whom that descriptive information can be accessed and modified.

In one embodiment information managed by the identity management module can be partitioned to create separate identity domains. Information belonging to a particular identity domain can be isolated from all other identity domains. Also an identity domain can be shared by multiple separate tenants. Each such tenant can be a customer subscribing to services in the cloud infrastructure system . In some embodiments a customer can have one or many identity domains and each identity domain may be associated with one or more subscriptions each subscription having one or many services. For example a single customer can represent a large entity and identity domains may be created for divisions departments within this large entity. EM module and IDM module may in turn interact with order management module at 11 and 12 respectively to manage and track the customer s subscriptions in cloud infrastructure system .

In one embodiment at 13 support services may also be provided to the customer via a support UI . In one embodiment support UI enables support personnel to interact with order management module via a support backend system to perform support services at 14 . Support personnel in the cloud infrastructure system as well as customers can submit bug reports and check the status of these reports via support UI .

Other interfaces not shown in may also be provided by cloud infrastructure system . For example an identity domain administrator may use a user interface to IDM module to configure domain and user identities. In addition customers may log into a separate interface for each service they wish to utilize. In certain embodiments a customer who wishes to subscribe to one or more services offered by cloud infrastructure system may also be assigned various roles and responsibilities. In one embodiment the different roles and responsibilities that may be assigned for a customer may include that of a buyer an account administrator a service administrator an identity domain administrator or a user who utilizes the services and resources offered by cloud infrastructure system . The different roles and responsibilities are described more fully in below.

At a customer s subscription order is processed. The processing may include validating the order in one example. Validating the order includes ensuring that the customer has paid for the subscription and ensuring that the customer does not already have subscriptions with the same name or that the customer is not attempting to create multiple subscriptions of the same type in the same identity domain for subscription types for which this is disallowed such as in the case of a CRM service . Processing may also include tracking the status of an order for each order that is being processed by cloud infrastructure system .

At a business process associated with the order is identified. In some instances multiple business processes may be identified for an order. Each business process identifies a series of steps for processing various aspects of the order. As an example a first business process may identify one or more steps related to provisioning physical resources for the order a second business process may identify one or more steps related to creating an identity domain along with customer identities for the order a third business process may identify one or more steps for related to performing back office functions such as creating a customer record for the user performing accounting functions related to the order and the like. In certain embodiments different business processes may also be identified for processing different services in an order. For example different business process may be identified to process a CRM service and a database service.

At the business process identified for the order in is executed. Executing the business process associated with the order may include orchestrating the series of steps associated with the business process identified in step . For example executing a business process related to provisioning physical resources for the order may include sending a request to SDI module to allocate resources and configure those resources needed to fulfill the subscription order.

At a notification is sent to the customer regarding the status of the provisioned order. Additional description related to performing steps and is provided in detail in .

In one embodiment order processing module receives an order from a customer from one or more input sources . For example order processing module may directly receive an order via cloud UI or store UI in one embodiment. Alternatively order processing module may receive an order from order management module or order database . Order processing module then processes the order. In certain embodiments processing the order includes generating a customer record which includes information about the order such as a service type a service level a customer level the type of resources the amount of the resources to be allocated to the service instance and a time period during which the service is desired. As part of the processing order processing module also determines whether the order is a valid order. This includes ensuring that the customer does not already have subscriptions with the same name or that the customer is not attempting to create multiple subscriptions of the same type in the same identity domain for subscription types where this is disallowed such as in the case of a fusion CRM service .

Order processing module may also perform additional processing on the order. Processing may include tracking the status of an order for each order that is being processed by cloud infrastructure system . In one embodiment order processing module may process each order to identify a number of states pertaining to the order. In one example the different states of an order may be an initialized state a provisioned state an active state an administration required state an error state and the like. An initialized state refers to the state of a new order a provisioned state refers to the state of an order once the services and resources for the order have been provisioned. An order is in an active state when the order has been processed by TAS module and a notification to that effect has been delivered to the customer. An order is in an administration required state when intervention by an administrator is needed to resolve the issue. The order is in an error state when the order cannot be processed. In addition to maintaining the order progress status order processing module also maintains detailed information about any failures encountered during process execution. In other embodiments and as will be discussed in detail below the additional processing performed by order processing module may also include changing the service level for a service in the subscription changing the services included in the subscription extending the time period of the subscription and canceling the subscription or specifying different service levels for different time periods in the subscription.

After an order has been processed by order processing module business logic is applied to determine whether the order should proceed to provisioning. In one embodiment as part of orchestrating the order business process identifier receives the processed order from order processing module and applies business logic to identify a particular business process to use for the order being processed. In one embodiment business process identifier may utilize information stored in a service catalog to determine the particular business process to be used for the order. In one embodiment and as discussed in multiple business processes may be identified for an order and each business process identifies a series of steps for processing various aspects of the order. In another embodiment and as discussed above different business processes may be defined for different types of services or combinations of services such as a CRM service or a database service. In one embodiment service catalog may store information mapping an order to a particular type of business process. Business process identifier may use this information to identify a specific business process for the order being processed.

Once a business process has been identified business process identifier communicates the particular business process to be executed to business process executor . Business process executor then executes steps of the identified business process by operating in conjunction with one or more modules in the cloud infrastructure system . In some embodiments business process executor acts as an orchestrator for performing the steps associated with a business process. For example the business process executor may interact with order processing module to execute steps in a business process that identifies workflows related to the order determines the overage of services in the order or identifies service components related to the order.

In one example business process executor interacts with SDI module to execute steps in a business process for allocating and provisioning resources for services requested in the subscription order. In this example for each step in the business process business process executor may send a request to SDI component to allocate resources and configure resources needed to fulfill the particular step. SDI component is responsible for the actual allocation of the resources. Once all the steps of the business processes of an order have been executed business process executor may send a notification to the customer of the processed order by utilizing the services of services component . The notification may include sending an email notification to the customer with details of the processed order. The email notification may also include deployment information related to the order to enable the customer to access the subscribed services.

In certain embodiments TAS module may provide one or more TAS Application Programming Interfaces APIs that enable TAS module to interact with other modules in cloud infrastructure system and for other modules to interact with TAS module . For example the TAS APIs may include a system provisioning API that interacts with SDI module via an asynchronous Simple Object Access Protocol SOAP based web services call to provision resources for the customer s subscription order. In one embodiment TAS module may also utilize the system provisioning API to accomplish system and service instance creation and deletion switch a service instance to an increased service level and associate service instances. An example of this is the association of a Java service instance to a fusion applications service instance to allow secure web service communications. The TAS APIs may also include a notification API that interacts with the services module to notify the customer of a processed order. In certain embodiments the TAS module also periodically propagates subscription information outages and notifications e.g. planned downtime to services component .

In certain embodiments TAS module periodically receives usage statistics for each of the provisioned services such as the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time from EM module . Overage framework utilizes the usage statistics to determine whether over use of a service has occurred and if so to determine how much to bill for the overage and provides this information to order management module .

In certain embodiments TAS module includes an order workflow identification module that is configured to identify one or more workflows associated with processing a customer s subscription order. In certain embodiments TAS module may include a subscription order generation framework for generating subscription orders for a customer when the customer places a subscription order for one or more services offered by the cloud infrastructure system . In one embodiment a subscription order includes one or more service components responsible for providing the services requested by a customer in the subscription order.

Additionally TAS module may also interact with one or more additional databases such as a Tenant Information System TIS database to enable the provisioning of resources for one or more services subscribed by the customer while taking into consideration historical information if any available for the customer. TIS database may include historical order information and historical usage information pertaining to orders subscribed by the customer.

TAS module may be deployed using different deployment models. In certain embodiments the deployment includes a central component that interfaces with one or more distributed components. The distributed components may for example be deployed as various data centers and accordingly may also be referred to as data center components. The central component includes capabilities to process orders and co ordinate services in cloud infrastructure system while the data center components provide capabilities for provisioning and operating the runtime system that provides the resources for the subscribed services.

In one embodiment the responsibilities of TAS central component include without limitation to provide a centralized component for receiving customer orders performing order related business operations such as creating a new subscription changing the service level for a service in the subscription changing the services included in the subscription and extending the time period of the subscription or canceling the subscription. The responsibilities of TAS central component may also include maintaining and serving subscription data needed by cloud infrastructure system and interfacing with order management module support UI cloud UI and store UI to handle all the back office interactions.

In one embodiment the responsibilities of TAS DCs and include without limitation performing runtime operations for orchestrating the provisioning the resources for one or more services subscribed by the customer. TAS DCs and also include capabilities to perform operations such as locking unlocking enabling or disabling a subscription order collecting metrics related to the order determining the status of the order and sending notification events related to the order.

In an exemplary operation of the distributed TAS system shown in TAS central component initially receives an order from a customer via cloud UI store UI via order management system or via order database . In one embodiment the customer represents a buyer who has financial information and the authority to order and or change a subscription. In one embodiment the order information includes information identifying the customer the type of services that the customer wishes to subscribe to and an account administrator who will be responsible for handling the request. In certain embodiments the account administrator may be nominated by the customer when the customer places an order for a subscription to one or more services offered by cloud infrastructure system . Based on the order information the TAS central component identifies the data region of the world such as Americas EMEA or Asia Pacific in which the order originates and the particular TAS DCs for e.g. or that will be deployed for provisioning the order. In one embodiment the particular TAS DC for e.g. from among DCs or that will be deployed for provisioning the order is determined based on the geographical data region in which the request originated.

TAS central component then sends the order request to the particular TAS DC in which to provision services for the order request. In one embodiment TAS DCs or identify a service administrator and an identity domain administrator responsible for processing the order request at the particular TAS DC. The service administrator and the identity administrator may be nominated by the account administrator identified in the subscription order. TAS DCs or communicate with SDI module to orchestrate the provisioning of physical resources for the order. SDI component in respective TAS DCs or allocates resources and configures those resources needed to fulfill the subscription order.

In certain embodiments TAS DCs or identify an identity domain associated with the subscription. SDI component may provide the identity domain information to IDM component shown in for identifying an existing identity domain or creating a new identity domain. Once the order is provisioned by the SDI module at respective TAS DCs or TAS central component may place information regarding the provisioned resources in a support system via support UI . Information may include for example displaying resource metrics related to the services and usage statistics of the services.

Once in operation at each data center EM module to periodically collects usage statistics for each of the provisioned services provisioned at that data center such as the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time. These statistics are provided to the TAS DC that is local to EM module i.e. at the same data center . In an embodiment the TAS DCs may use the usage statistics to determine whether overuse of a service has occurred and if so to determine how much to bill for the overage and provide the billing information to order management system .

In one embodiment the modules in SDI module may include one or more modules in SaaS platform and PaaS platform in cloud infrastructure system . In order to perform provisioning of resources for various services SDI module may interact with various other modules each customized to help with provisioning resources for a particular type of service. For example as illustrated in SDI module may interact with a Java service provisioning control module to provision Java cloud services. In one embodiment Java service provisioning control component may deploy a Java Cloud Service JCS assembly specified by SDI module that includes a set of tasks to be performed to provision Java cloud services. Infrastructure resources then determines the resources needed to provision the Java cloud services.

As other examples SDI module may interact with one or more modules such as a Virtual Assembly Builder VAB module an Application Express APEX deployer module a Virtual Machine VM module an IDM module and a database machine module . VAB module includes capabilities to configure and provision complete multi tier application environments. In one embodiment VAB module deploys a Middleware MW service assembly specified by SDI module to provision a MW service in cloud infrastructure system using the services provided by VM module . APEX deployer module includes capabilities to configure and provision database services. In one embodiment APEX deployer module deploys a database service assembly specified by SDI module to provision a database service in cloud infrastructure system using the resources provided by infrastructure resources . SDI module interacts with IDM module to provide identity services such as access management across multiple applications in cloud infrastructure system .

SDI WS module includes capabilities for receiving a step in the business associated with an order from business process executor of TAS component . In one embodiment SDI WS module parses each step of the business process and converts the step into an internal representation used by SDI module . In one embodiment each step of the business process associated with the order arrives through a web service processing layer for example via System Provisioning API discussed in in the form of a SOAP request to SDI WS module .

SDI request controller module is the internal request processing engine in SDI module and includes capabilities for performing asynchronous request processing concurrent request processing concurrent task processing fault tolerant and recovery and plug in support related to the order requests. In one embodiment SDI request controller module accepts each step of the business process associated with the order from SDI WS module and submits the step to SDI task manager module .

SDI task manager module translates each step specified in the business process into a series of tasks for provisioning the particular step. Once the set of tasks for a specific step have been provisioned SDI task manager module responds to business process executor in TAS module with operation results that includes an order payload with details of the resources provisioned to fulfill the particular step. SDI task manager module repeats this process until all the steps of the particular business process associated with the order are complete.

In certain embodiments SDI task manager module translates each step specified in the business process into a series of tasks by utilizing the services of SDI connector module . SDI connector module includes one or more connectors for handling the deployment of tasks specified by SDI task manager module to provision one or more services related to the order request. In certain embodiments one or more of the connectors may handle tasks that are specific to a particular service type while other connectors may handle tasks that are common across different service types. In one embodiment SDI connector module includes a set of connectors wrapper APIs that interface with one or more of the external modules shown in in cloud infrastructure system to provision the services and resources related to the order request. For example Application Express APEX connector interfaces with APEX deployer module to provision database services. Web Center Connector WCC interfaces with a web center module in cloud infrastructure system to provision web services. The web center module is a user engagement platform and includes capabilities for delivering connectivity between people and information in cloud infrastructure system .

In certain embodiments Middleware Applications MA connector interfaces with VAB module in cloud infrastructure system to provision middleware application services. NUVIAQ connector interfaces with VAB module to provision Java services. IDM connector interfaces with IDM module to provide identity and access management for users subscribing to services and resources in cloud infrastructure system . Virtual Assembly Builder VAB connector interfaces with VAB module in cloud infrastructure system to configure and provision complete multi tier application environments. Plug in connector interfaces with EM module to manage and monitor the components in cloud infrastructure system . HTTP server connector interfaces with one or more web servers in the PaaS platform to provide connection services to users in cloud infrastructure system .

SDI monitoring module in SDI module provides an inbound interface for receiving Java Management Extensions JMX requests. SDI monitoring module also provides tools for managing and monitoring applications system objects and devices in cloud infrastructure system . SDI data access module provides an inbound interface for receiving Java Database Connectivity JDBC requests. SDI data access module supports data access and provides object relational mapping java transaction API services data access objects and connection pooling in cloud infrastructure system . The SDI common library module provides configuration support for the modules in SDI module .

The embodiment of discussed above describes modules in the SDI module according to an embodiment of the present invention. depicts a simplified flowchart depicting processing that may be performed by the modules of the SDI module in the cloud infrastructure system in accordance with an embodiment of the present invention. The processing depicted in may be implemented in software e.g. code instructions program executed by one or more processors hardware or combinations thereof. The software may be stored in memory e.g. on a memory device on a non transitory computer readable storage medium . The particular series of processing steps depicted in is not intended to be limiting. Other sequences of steps may also be performed according to alternative embodiments. For example alternative embodiments of the present invention may perform the steps outlined above in a different order. Moreover the individual steps illustrated in may include multiple sub steps that may be performed in various sequences as appropriate to the individual step. Furthermore additional steps may be added or removed depending on the particular applications. One of ordinary skill in the art would recognize many variations modifications and alternatives. In one embodiment the processing depicted in may be performed by one or more modules in the SDI module discussed in detail in .

At a business process associated with a subscription order is received. In one embodiment SDI WS module in SDI module receives one or more steps in the business process associated with the subscription order from business process executor . At each step in the business process is translated into a series of tasks for provisioning resources for the subscription order. In one embodiment SDI task manager module in SDI module translates each step specified in the business process into a series of tasks by utilizing the services of SDI connector module . At the subscription order is provisioned based on the series of tasks. In one embodiment and as discussed in SDI connector module includes one or more connectors for handling the deployment of tasks specified by SDI task manager module to provision resources for the services in the subscription order.

As described above with respect to SDI task manager module translates each step specified in a business process into a series of tasks by utilizing the services of SDI connector module which may include one or more connectors for handling the deployment of tasks specified by SDI task manager module to provision one or more services related to the order request. One or more of the connectors may handle tasks that are specific to a particular service type while other connectors may handle tasks that are common across different service types. In one embodiment SDI connector module includes a set of connectors wrapper APIs that interface with one or more of the external modules shown in in cloud infrastructure system to provision the services and resources related to the order request. For example a NUVIAQ connector interfaces with VAB module to provision Java services.

In certain embodiments Nuviaq system may be configured to provide a runtime engine for orchestrating PaaS operations. Nuviaq system may provide a web service API to facilitate integration with other products and services. Nuviaq system also provides support for complex workflows in system provisioning application deployment and associated lifecycle operations and integrates with management and monitoring solutions.

In the embodiment depicted in Nuviaq system comprises a Nuviaq proxy a Nuviaq manager and a Nuviaq database . In certain embodiments Nuviaq manager provides an entry point into Nuviaq system providing secure access to PaaS operations via the web service API. Internally it tracks system state in the database and controls job execution on the workflow engine. In a public cloud Nuviaq manager may be accessed by the Tenant Provisioning system SDI and the Tenant Console to drive provisioning and deployment operations respectively.

In one embodiment Nuviaq manager executes jobs asynchronously via an internal workflow engine. A job may be a sequence of actions specific to a given PaaS workflow. Actions may be performed in order with failure in any step resulting in failure of the overall job. Many workflow actions delegate to external systems relevant to the workflow such as the EM command line interface cli . In one implementation Nuviaq manager application may be hosted in a 2 node WebLogic cluster with associated HTTP server e.g. Oracle HTTP Server or OHS instance running inside a firewall.

In certain embodiments Nuviaq proxy is the public access point to the Nuviaq API. In one embodiment only Public API may be exposed here. Requests received by proxy may be forwarded to Nuviaq manager . In one embodiment Nuviaq proxy runs outside the firewall whereas manager runs within the firewall. In one implementation Nuviaq proxy application runs on a WebLogic cluster running outside the firewall.

In certain embodiments Nuviaq database tracks various domain entities such as without limitation platform instance deployment plan application WebLogic domain jobs alerts and the like. Primary keys may be aligned with the Service Database where appropriate.

In one embodiment Platform Instance may contain all resources required for a WebLogic service for a given tenant.

Nuviaq system may rely on additional systems of cloud infrastructure system to carry out the workflows used the WebLogic cloud service. These dependencies may include dependencies on SDI IDM a virus scan system a service database CRM instances and the like. For example Nuviaq system may depend upon functions performed by an Assembly Deployer in SDI . In one embodiment the Assembly Deployer is a system to manage interactions with OVAB Oracle Virtual Assembly Builder and OVM Oracle Virtual Machine . Capabilities of the Assembly Deployer used by Nuviaq system may include without limitation functions for deploying an assembly un deploying an assembly describing assembly deployment scaling appliance and the like. In one implementation Nuviaq system accesses the Assembly Deployer via a web service API.

In certain embodiments security policies may require certain artifacts to be scanned for viruses before being deployed to an application. Cloud infrastructure system may provide a virus scan system for this purpose that provides scanning as a service for multiple components of the public cloud.

In certain embodiments a public cloud infrastructure may maintain a Service Database containing information about tenants e.g. customers and their service subscriptions. Nuviaq workflows may access to this data in order to properly configure a WebLogic service as a client to other services that the tenant also subscribes to.

Nuviaq system may depend on IDM for its security integration. In certain embodiments Java Service instances can be associated with a CRM instance. The association allows user applications deployed to their Java Service instance to access a CRM instance though Web Service calls.

Various entities may use services provided by Nuviaq system . These clients of Nuviaq system may include a Tenant Console which is an management server e.g. Oracle Management Server based user interface that customers may access to manage their applications on their platform instances several IDEs such as Oracle IDEs JDeveloper NetBeans and OEPE have been extended to offer access to application lifecycle management operations one or more Command Line Interfaces CLIs that are available to access lifecycle operations on the platform instances.

Provisioning use case for Nuviaq system A Provision Platform Instance use case is realized via the Create Platform Instance operation of the Nuviaq API. In the context of cloud infrastructure system a service instance with respect to the Nuviaq system corresponds to a Nuviaq platform instance. A platform instance is assigned a unique identifier is used on all subsequent operations related to this instance. A Platform Deployment descriptor provided to the Create Platform Instance action allows for properties to be set that modify the configuration of the platform instance to meet the subscription requirements of the tenant. These properties may include for example 

Install Update Application use case The Install Application operation deploys an application to a running WebLogic Server after validating that the application archive meets the security requirements of the Public Cloud. In one embodiment the Application Deployment descriptor provided to the Install Application action allows for properties to be set that modify the configuration of the application to meet the subscription requirements of the tenant. These properties may include for example 

Referring back to in certain embodiments TAS and SDI working in cooperation are responsible for provisioning resources for one or more services ordered by a customer from a set of services offered by cloud infrastructure system . For example in one embodiment for provisioning a database service the automated provisioning flow may be as follows for a paid subscription 

In some embodiments a customer may also be allowed to subscribe to a service on a trial basis. For example such a trial order may be received via cloud UI e.g. using cloud.oracle.com .

In certain embodiments cloud infrastructure system enables underlying hardware and service instances to be shared between customers or tenants. For example the database service may be provisioned as shown in in one embodiment. depicts multiple Exadata compute nodes and each providing a database instance provisioned for the database service. For example compute node provides a database instance for a database service. Each Exadata compute node may have multiple database instances.

In certain embodiments each database instance can comprise multiple schemas and the schemas may be associated with different customers or tenants. For example in database instance provides two schemas and each with its own tables. Schema may be associated with a first customer or tenant subscribing to a database service and schema may be associated with a second customer or tenant subscribing to the database service. Each tenant gets a completely isolated schema. Each schema acts like a container that can manage database objects including tables views stored procedures triggers etc. for the associated tenant. Each schema may have one dedicated tablespace with each tablespace having one data file.

In this manner a single database instance can provide database services to multiple tenants. This not only enables sharing of underlying hardware resources but also enables sharing of service instance between tenants.

In certain embodiments such a multi tenancy system is facilitated by IDM which beneficially enables multiple separate customers each having their own separate identity domains to use hardware and software that is shared in the cloud. Consequently there is no need for each customer to have its own dedicated hardware or software resources and in some cases resources that are not being used by some customers at a particular moment can be used by other customers thereby preventing those resources from being wasted. For example as depicted in a database instance can service multiple customers each with their respective identity domains. Although each such database service instance can be a separate abstraction or view of a single physical multi tenant database system that is shared among the many separate identity domains each such database service instance can have a separate and potentially different schema than each other database service instance has. Thus the multi tenant database system can store mappings between customer specified database schemas and the identity domains to which those database schemas pertain. The multi tenant database system can cause the database service instance for a particular identity domain to use the schema that is mapped to that particular identity domain.

The multi tenancy can also be extended to other services such as the Java Service. For example multiple customers can have a JAVA service instance placed within their respective identity domains. Each such identity domain can have a JAVA virtual machine which can be viewed as being a virtual slice of hardware. In one embodiment a job monitoring service e.g. Hudson can be combined with a JAVA enterprise edition platform e.g. Oracle WebLogic in the cloud to enable each separate identity domain to have its own separate virtual slice of the JAVA enterprise edition platform. Such a job monitoring service can for example monitor the execution of repeated jobs such as building a software project or jobs run by an operating system s time based job scheduler. Such repeated jobs can include the continuous building and or testing of software projects. Additionally or alternatively such repeated jobs can include the monitoring of executions of operating system run jobs that are executed on machines that are remote from the machine on which the job monitoring service executes.

The service blueprint component may include one or more computers and or severs which may be general purpose computers specialized server computers server farms server clusters or any other appropriate arrangement and or combination. The various components of the cloud infrastructure system depicted in are meant for illustrative purposes only and are not intended to limit the scope of embodiments of the present invention. Alternative embodiments may include more or fewer components than those shown in .

According to this embodiment at 5 TAS component orchestrates the provisioning of resources to support the subscribed services using the services of service blueprint component . At 6 TAS module provides information related to the provisioned order received from service blueprint component to services module . In some embodiments at 7 service blueprint component may also use services provided by services module to allocate and configure the resources needed to fulfill the customer s subscription order.

At 8 services module sends a notification to the customers on client devices and regarding the status of the order.

In certain embodiments service blueprint component functions as an orchestration component that manages business processes associated with each order and applies business logic to determine whether an order should proceed to provisioning. In one embodiment upon receiving an order for a new subscription service blueprint component allocates resources and configures those resources needed to fulfill the subscription order. Service blueprint component enables the allocation of resources for the services ordered by the customer. Service blueprint component provides a level of abstraction between the cloud services provided by cloud infrastructure system and the physical implementation layer that is used to provision the resources for providing the requested services.

In one embodiment the processing depicted in may be performed by one or more components in the TAS component and service blueprint component as will be described in detail in . Additional description related to performing steps and is provided in detail in . is similar to with the addition of service blueprint component .

In one embodiment the components depicted in perform the processing described in steps discussed in .

In some instances after an order has been processed by the order processing system the TAS component and service blueprint component apply business logic to determine whether the order should proceed to provisioning. In one embodiment service blueprint component allocates resources and configures those resources needed to fulfill the subscription order. Service blueprint component enables the allocation of resources for the services ordered by the customer.

As described above cloud infrastructure system may offer one or more cloud services that can be ordered or subscribed to by a customer. Each service generally has associated parameters and procedures for provisioning the computing resources needed for providing the service. For example the parameters may related to various business processing aspects of the service such as without limitation different service offerings proprietary client information used by the service ordering details for the services procedures for computing overages i.e. over use of the service usage metrics to be used for the service various custom attributes service associations customer notification templates pricing information billing information and the like. The procedures for provisioning computing resources may include without limitation procedures for allocation of physical storages physical components EM Integration creating an IDM footprint URL routing pod definitions tenant placement plugins per tenant footprint creation plugins monitoring configuration identity management footprint configuration network configuration and the like.

When cloud infrastructure system receives a subscription order from a customer ordering a service cloud infrastructure system performs processing to gather information related to the various parameters associated with the ordered service e.g. parameters related to business processing aspects of the ordered service and then use the provisioning procedures for the ordered service to order the service. Since one cloud service is different from another cloud service the parameters e.g. parameters related to business processing aspects and the provisioning procedures for the different services are typically very different. This diversity on a per service basis makes it quite difficult and complicated for cloud infrastructure system to automate service provisioning. This also cause the process of adding a new cloud service with its own new parameters and provisioning procedures to services offered by cloud infrastructure system to become difficult and complicated.

In certain embodiments a service declaration template is provided by cloud infrastructure system that can be filled in by a provider of a particular service and enables the service provider to declaratively specify the service related parameters e.g. business process aspects parameters provisioning aspects or procedures and other potential aspects for the particular service. The filled in template for a particular service then represents the service declaration for the particular service also sometime referred to as the service blueprint for the service . In certain embodiments a service declaration for a service comprises business processing aspects information for the service and binaries that drive resources provisioning aspects for the service.

A service declaration for a service provides an interface between the service provider and cloud infrastructure system that provisions the service. The service declaration template schema enables the service provider to specify service related parameters and information related to procedures for provisioning the service. The service declaration for a service makes available to cloud infrastructure system all the information that is needed by cloud infrastructure system for provisioning the service in a response to a customer subscription order. Upon receiving a subscription order for a cloud service cloud infrastructure system is configured to access the service declaration for the ordered service and then use information from the service declaration to provision the service. Service declarations thus help to evolve the provisioning infrastructure to a fully declarative model.

In one embodiment the service declaration template is an XSD document and a service declaration is an XML document. In another embodiment the service declaration template is an XML document. The service declaration template provides a particular schema to allow a provider of a cloud service to declaratively specify the execution flow for various provisioning lifecycle operations such as creation of a new subscription for a tenant termination of an existing subscription modification of a subscription etc. for the service.

The service declaration template may be used for internal cloud services provided by cloud infrastructure system itself or for external cloud services provided by third party service providers e.g. via the application store via cloud infrastructure system . For example if a service provider wants to add a new cloud service to the services offered by cloud infrastructure system the service provider create a service declaration for the new service by filling in the service declaration template. The service declaration is then provided to cloud infrastructure system which then uses the service declaration to offer the service to customers and to perform provision related processing when the new service is an ordered via a subscription order.

Service declarations provide an easy and flexible way for new services to be added to the service offerings of cloud infrastructure system . New services can be added to cloud infrastructure system in a dynamic manner and reflected in service offerings of cloud infrastructure system .

Moreover service declarations allow cloud infrastructure system components e.g. TAS SDI EM IDM URL Routing to be able to support new services being added to cloud infrastructure system without any code changes required to the components. In some instances all the infrastructure components can be based upon the declarative model and not have any service specific custom code.

For example XML based provisioning procedures specified in a service declaration for a service may include TAS business processing and multi tenant pod provisioning. TAS business processing can include service offerings custom attributes metrics overages associations and notification templates. Examples of multi tenant pod provisioning can include a physical footprint definition persistent schema to track relevant pod information e.g. pods per service type instances in a pod pod physical layout and per tenant service provisioning. Moreover per tenant service provisioning can include tasks to execute during provisioning e.g. IDM footprint EM Target creation URL routing Service specific plugin call optional per tenant physical footprint and persistent schema to track service instance footprint and id domain information.

In certain embodiments processing related service declarations is performed by service blueprint component . Service blueprint component may be configured to allow service providers to access a service declaration template and to submit service declarations. In one embodiment service blueprint component plays the role of SDI component and can replace SDI component . In some other embodiments service blueprint component XX may perform provisioning alongside SDI component .

In certain embodiments services offered by cloud infrastructure system are listed in a service catalog. Before a service can be offered to customers via the service catalog the service has to be first registered with cloud infrastructure system . As part of registering a new service a service declaration may be provided for the service that captures all aspects of how the service is to be provisioned. For example an XML service declaration may be provided.

For example a service provider may register a new database service. The service declaration for the new service may specify various parameters and provisioning procedures related to the database service. The parameters may identify the different service levels metrics related to the service and the like. For example the parameters may indicate that certain customer related information may be needed for provisioning the service such as a service name a password and the like. The business requirements related parameters in the service declaration may thus identify information needed to obtain the database service. Service declaration may also comprise information identifying procedures to be used for provisioning the service. At the time of provisioning cloud infrastructure system may perform a backend orchestration e.g. via BPEL based orchestrator to provision the service. The service declaration may also specify that provisioning requirements for a database service include information for the number of virtual machines VMs requested the scripts needed on the VMs required interfaces between the database service and other services and the like. In some instances the provisioning can be done using APIs.

Once a service is registered with cloud infrastructure system the service is added to the service catalog and offered to customers for ordering for example via the cloud UI. Once in the service catalog the service becomes instantly orderable and deployable in the cloud.

For example cloud infrastructure system may offer a Web service a Java service a database service and the like. Previously a database service developer may have registered the database service to be available on the cloud. By providing parameters in the blueprint that are requested the developer can define the database service in the blueprint and register the database. As a result the database service can be available for ordering for customers from the cloud UI.

Service declarations thus provide an extensible model for adding cloud services and making them available through cloud infrastructure system . Any new service can be registered using a service declaration. Once that service becomes orderable the service can be provisioned from by cloud infrastructure system using the service declaration. Service declarations help to automate the provisioning of services by making each service extendable for new orders. For example a customer may put in an order for a cloud service offered by cloud infrastructure system . The service declaration for the requested service provides into that is used for provisioning the service including ensuring that the service related business process aspects and the provisioning procedures are followed.

In certain embodiments service blueprint component may provide an interface that allows a service provider to fill a service declaration template. For example the service provider may be provided an XML format template to be filled in. The schema of the template generalizes the service related parameters so that the template can be used for multiple services.

In certain embodiments a service declaration can capture all the various operations that are possible in provisioning a service. For example the service declaration for a service may provide information indicating that an onboarding operation for the service involves creating an instance of the service and requires certain parameters e.g. user requirements if the service needs to scale out to be specified. The service declaration may also identify procedures for scaling the service such as when a service is ordered for 50 users today but may go up to 5 000 users in the future. As part of service provisioning TAS component can use the information from the service declaration for the service to automatically perform onboarding and scale up functions.

As shown in information related to service declaration templates and service declarations for one or more registered services may be stored in blueprint database . Database may store a request response schema POD schema blueprint registry and service instance schema .

In the embodiment shown in service blueprint component interfaces with TAS component and with DevOps development and operations infrastructure . TAS may use service provider APIs to interact with service blueprint . DevOps may use POD management APIs to interact with service blueprint component . The service provisioning APIs and pod management APIs include capabilities for receiving information related a business process associated with an order from the business process executor of the TAS component . In one embodiment the service provisioning API and pod management API can parse each step of the business process and convert the step into an internal representation used by service blueprint component . This internal representation may be based upon the schema representation in a service declaration. In one embodiment each step of the business process associated with the order arrives through a web service processing layer for example via the TAS API s discussed in in the form of a SOAP request to the service provisioning API and pod management API .

In some instances the service provisioning API and pod management API can be provides through a common API. However in certain embodiments there may be different pod instances for pod creation versus service installation creation. The service provisioning API can initiate service instances based on customer requests. The pod management API can initiate a pod creation.

The pod management API can be used in the creation of multi tenant services where a single physical deployment supports a large number of tenants on the cloud. In some instances the pods under the pod management API are created beforehand and ready when a customer order comes in. For example in the messaging service a messaging pod capable of serving a thousand tenants can be created without a customer request. Therefore when the customer request comes in the messaging pod can be ready to be used.

In certain embodiments requests received from TAS or DevOps using service APIs or POD management APIs may be queued in one or more input queues provided by service blueprint . For example a request received from TAS or alternatively steps in the parsed business process may be queued in queue . For example a service request may be received from TAS for provisioning a particular service ordered by a customer. TAS can use the service blueprint component to perform the provisioning of the service. A request to that effect may be received by service blueprint from TAS and queued in input request queue . A request processor may be configured to pick up requests queued in queue and provide each request to orchestrator . Requests received via POD management APIs may be queued in a corresponding input queue and a request processor corresponding to POD management may be configured to pick up the request from the queue and provide it to orchestrator to be fulfilled.

Request queue and request processor act as the internal request processing engines in the Service Blueprint component and may include capabilities for performing asynchronous request processing concurrent request processing concurrent task processing fault tolerance assessment and recovery and plug in support related to the order requests. In one embodiment the request queue and request processor can accept each step of the business process associated with the order from the service provisioning API and or the pod management API and submit the step to the orchestrator .

A request processor can be a generic component that enables reliable asynchronous message processing by storing the incoming requests in a queue while managing the state lifecycle of these incoming requests. For example a request processor maintains a queue of requests in a JMS queue and also maintains these requests in a request table. By controlling the lifecycle of these requests the request processor ensures reliable processing of these requests while supporting scale out deployments.

In certain embodiments request pollers may be provided that can be polling threads that monitor the requests in the request Queue and process the requests. In some instances every orchestration engine instance may have a pool of request pollers.

In certain embodiments a request can come in either for the service provisioning API or pod management API and the request can go into different request queues based on its origination. The request processor can pick up the request for processing by sending it to the Orchestrator .

Orchestrator is configured to execute requests received from the request processors. In certain embodiments orchestrator can be based upon BPEL Business Process Execution Language . BPEL orchestrator is configured to determine the service to which the request relates to and execute the request based upon the service declaration for the request service.

In one embodiment orchestration engine can include the following components Orchestration Engine endpoints Request Processor Request Pollers and BPEL based request processing engine. The orchestration engine can expose two endpoints a Service Provisioning endpoint to allow the business orchestration layer to provision and manage services e.g. for operations such as create delete associate archive and b the Management endpoint to manage the orchestration engine service itself e.g. for operations such as cancelRequest pauseRequest . The requests for service provisioning can be asynchronous requests and are queued by the request processor. In order to maintain compatibility with existing business orchestration layer TAS the orchestration engine can publish identical web services as existing SDI.

In certain embodiments orchestrator may be configured to access service declaration information stored in blueprint database and determine from the service declaration a series of tasks to be performed for fulfilling the request received from TAS . For example in one embodiment a BPEL based request processing engine can order the request and submit the request to BPEL orchestrator . BPEL orchestrator process is configured to fetching the service declaration Service Blueprint from the Service Blueprint endpoint extract the Execution Template for the service id and asynchronously calling the Task Executor Service Endpoint to execute the tasks defined in the template.

In another embodiment orchestrator may receive information stored in the service declaration for the service via blueprint parser . The BPEL based orchestrator may send a message to parser requesting task to be performed for fulfilling the request received from TAS for the particular service.

In one embodiment blueprint parser is configured to access the service declaration for the service being provisioned from blueprint database and determines based upon the information in the service declaration a series of tasks to be performed for fulfilling the provisioning request. In one embodiment parser may identify a business process specified in the service declaration and may translate each step specified in the process into a series of tasks for provisioning the particular step. Blueprint parser may also can send the list of tasks to orchestrator in the form of a task execution template which may be XML e.g. as an XML doc based and have a schema. In one embodiment the task execution template may be specified in the service declaration for the service being provisioned.

In certain embodiments provisioning operations may be a sequence of task executions. The operations are driven OOTB by a seeded task execution template that defines a fixed set of actions. The template for a service may be defined in the service declaration for the service and may identify specific tasks and the order in which these tasks need to be executed. Depending on the lifecycle operation a set of standard tasks can be executed for provisioning a service. Additionally the service may need to provide plug ins to perform certain tasks that are best handled by the service itself. The plug ins are treated as a black box by the orchestration engine . As described in the Service Provisioning Plug ins section services can override the entire Task Execution template or provide custom tasks to be executed at controlled points in the execution flow. The Task Execution template may leverage the task and task executor model described below.

In certain embodiments the overall flow for a given provisioning lifecycle operation on a service can be carried out as a sequence of task executions. The sequence of actions can be captured in the task execution template for the service in the service declaration for the service. As shown in the orchestration engine marshals a set of service agnostic tasks e.g. Create IDM Footprint task interleaved with any service specific tasks defined in the service declaration. According to one embodiment a task can be executed sequentially by calling the Task Executor Service.

In certain embodiments once the set of tasks for a specific step have been provisioned the blueprint parser responds to the business process executor in the TAS component with operation results that include an order payload with details of the resources provisioned to fulfill the particular step.

BPEL based orchestrator is configured to execute tasks in the task execution received from parser . The task execution framework may provide facilities for performing the tasks in a synchronous or asynchronous manner. For example as shown in task execution framework may include a synchronous task executor for synchronous execution of tasks and an asynchronous task executor for asynchronous execution of tasks.

In certain embodiments the task execution framework can be a common component that is used across the board by other modules to execute tasks. For instance for each provisioning lifecycle operation for a given service a task execution template can encapsulate the set of tasks that need to be executed. The template may be executed by the orchestration engine using the task execution service. This template may be modeled as a sequence of tasks with associated task executors.

According to some embodiments the synchronous task executor and or asynchronous task executor can take the XML document identifying the tasks to be performed to create the service. By parsing the XML the task executor can execute a sequence of actions to create a service. In some instances the sequences of action can be done sequentially. In other instances the sequence of events can be done in or out of order.

For asynchronous tasks the action itself may support polling. Therefore the asynchronous task executor can dispatch the action and keep polling until the action is done. Alternatively the action can be capable of calling back. For example the BPEL based orchestrator can dispatch the action and then forward a callback point for the asynchronous task executor to call back on.

The Task Execution framework can include a fa ade service which accepts synchronous or asynchronous task execution requests a set of task executors and a library of resources to perform the tasks. Upon receiving a task the service can invoke the task executor specified in the task with a bag of system and service properties. After completion the service returns a set of pre defined key value pairs which may be propagated to the next task by the caller.

In certain embodiments as shown in the task execution framework can include tasks task executors task execution template task executor service. In one embodiment a task may encapsulate a unit of work. A task can include a unique name and a reference to an executor that is responsible for doing the unit of work the task encapsulates. This model makes it possible for services to provide required plug ins by defining the executor for that particular task. For example a task to create a system footprint in IDM can be run by executing the CreateSystemInIDMExecutor at a point in the execution sequence determined by the OOTB execution template.

In certain embodiments a task executor can encapsulate the executable that needs to be called to perform the task. The task executor definition may include a unique name the built in executor type and a location parameter which can be interpreted based on the executor type. The definition can also specify optional output parameters that are returned as key value pairs after execution.

As shown in an executor type can be of a pre defined type such as but not limited to Java web service and shell script. For the Java type the executor can make calls to Java libraries in the runtime. The location parameter can be of the form ClassName MethodName. Reflection can be used to construct the object and invoke the method. The method to be invoked can accept a single Request parameter and return a Response object. For the web service type the executor can makes calls to a service supplied web service endpoint. For the shell script type the executor can execute shell scripts.

Responses from the task execution framework may be provided to orchestrator . The responses may be queued in one or more output queues provided by service blueprint component . One or more response processor may be configured to pick the responses from the output queues and send the responses back to the request originators using APIS or .

In certain embodiments blueprint database for physical provisioning can include a pod Definition schema e.g. pod Schema to define the physical footprint of a Service a Service Definition schema e.g. Request Response Schema to capture Service specific plug ins and a Service Configuration schema e.g. Service Instance Schema to capture EM IDM URL Routing and other service specific configuration. Under the business processing blueprint the blueprint database can also include a blueprint registry . Additionally the blueprint database can contain information regarding the request response the status changes and transitions. For example once a pod is created the entire definition of the pod can be stored in the blueprint database .

As described above with respect to orchestrator may use the services of a task execution framework to perform tasks. This task execution framework may include an asynchronous task executor that is configured to perform tasks in an asynchronous manner. illustrates an example of processing involved in performing a task asynchronously according to an embodiment of the present invention. In this example the specific task may be the creation of a VM for a service.

At an incoming request from the BPEL based Orchestrator is received by the Asynchronous Task Executor . For example the BPEL based Orchestrator can call out the Asynchronous Task Executor for a VM creation task.

At the Asynchronous Task Executor can store the request in the request response schema and request a BPEL callback URL from the request response schema . For example the VM creation task can be a callback creation task so the Asynchronous Task Executor can callout the plug in for creating the VM and.

At the VMCreator can use the Openstack REST API to create a server. At the Openstack REST API can return the polling URL to the VMCreator. At the polling URL can be stored in the database. At the Asynchronous task executor can get the polling URL.

At the Asynchronous task executor can poll the Openstack REST API for the VM creation status. At the Asynchronous task executor can store the response in the blueprint database . At the Asynchronous task executor can post a response to the BPEL based Orchestrator on the BPEL callback URL.

At cloud infrastructure system receives a request to register a new cloud service. At cloud infrastructure system receives a service declaration for the new service. At service declaration stored by cloud infrastructure system and service registered. At the registered service added to the service catalog and made available for ordering by a customer.

For example a developer can register a specific service in a service catalog by providing a service declaration for the specific service. In some instances a service can by registered into the service catalog by supplying an XML document conforming to the service blueprint e.g. XML schema that captures all aspects of its provisioning. Once a service is registered in the service catalog the service can become instantly orderable and deployable in the cloud thereby providing an extensible model for services to become available in the cloud.

At service blueprint component can receive subscription order information identifying a service ordered by a customer. At service blueprint component can identify a service declaration corresponding to the requested service. At service blueprint component can provision the requested service according to information in the service declaration for the service identified in .

For example the service catalog includes a menu of registered services that are orderable by a customer. In some instances a customer can request e.g. order a new service from service catalog. Additionally according to one embodiment there are certain requirements that a service developer may require from a customer in order for the customer to request the service. Service blueprint component can provision the requested service based on the service declaration corresponding to the requested service.

As described above a service declaration for a service may comprise various pieces of information that are used by the service blueprint component to automate provisioning of resource to enable the service. In certain embodiments the service declaration for a service comprises information related to 

In certain embodiment business processing aspects information in a service declaration may identify information related to business level attributes of the service including without limitation information related to service catalog registration information custom attributes information associations information service runtime information e.g. Metrics Scheduled Blackouts purchasing information overage information and the like. Some of these are discussed below.

The Service Catalog for cloud infrastructure system identifies all the services provided by cloud infrastructure system including all the options that each service may provide. The service catalog information for in the service declaration for a service e.g. stored as Blueprint Registry identifies the particular service and the various service related information that is used and captured in the service catalog for the service. For example the service declaration for a service may comprise information such as service details e.g. various service components service configurations trial configurations for the service and the like.

For example service details may identify details e.g. name display name description marketing material for the service. This information can be consumed by cloud infrastructure system to dynamically reflect new orderable services. The service configurations information may identify various supported configurations such as Basic Standard and Enterprise. The various configurations supported by a service are registered with TAS which can be done with the use of the element in the service declaration. A brief description and a display name used in notifications by cloud infrastructure system for this configuration can also be provided. Trial configuration elements information in the service declaration can be used by the service provider to control aspects of a service related trial and may include information such as trial duration underutilization configuration and extensions. The underutilization configuration aspect can include metrics to be used for utilization checks and the time periods to use for under utilization warning notifications. The extensions aspect can determine if extensions are allowed number of allowed extensions duration of extensions and other relevant information pertaining to extensions.

According to some embodiments every service registered in cloud infrastructure system can specify a set of custom attributes for which values have to be provided by the customer when the customer purchases or orders the service. For instance the CRM and HCM services require the values for service related attributes such as enterprise name of the customer language packs corporate address etc. to be supplied by the customer ordering the service. The custom attributes information in the service declaration for a service identifies these custom attributes. In one embodiment the attributes may be stored in TAS and may allow cloud infrastructure system Portal to use a model driven user interface to present a service specific UI for the customer. All attribute values collected in the UI may be propagated via TAS to the Physical Provisioning infrastructure e.g. service blueprint component or SDI .

A service instance for a service being deployed in cloud infrastructure system can support associations with other service instances. In some instances the associations can be subject to the user s privileges on the target service instance. The association can be declared to be mandatory or optional. Associations information in the service declaration for a service allows a service provider to identify such associations. Once associations are declared in the service declaration cloud infrastructure system may dynamically reflect the potential associations in the UI as part of the service creation purchase flow.

In certain embodiments TAS can send notifications to customers for various interactions such as but not limited to order activation order completion passwords. The notification messages sent to customers can be customized for each service. According to some embodiments the customizations can be classified into pluggable notification content and customized notification body.

A notification module may be provided to retrieve information from the TAS service catalog including but not limited to the service display name and description. In addition using the service declaration and related the XML based provisioning there can be pluggable notification content such as but not limited to the logo and marketing blurb that can be supplied by the service as part of its blueprint.

Furthermore in some rare cases a service may want to change the overall structure of the notification message. For instance the HCM service may require two SFTP accounts and the notification sent to the customer needs to provide information about both accounts as opposed to just one account for most other services.

The service declaration for a service may contain notification templates information identifying the notifications to be used for the service. This enables a service provider to control and customize the notifications for the service.

A service provider may supply service runtime information for a service in the service declaration for the service. This is used by cloud infrastructure system to process and present runtime information about the service. The runtime information processed by cloud infrastructure system for a service can include service metric data service state service availability data events affecting the service and the like.

Service metric data can include global information e.g. information applicable to all metrics of the service such as the tag name used by EM web service and metric specific information e.g. metric Id type unit current historical IsVisibleInPortal display info display name display description . In some instances IsVisibleInPortal can be specified if the metric is to be reported in the portal or if it is only used for intermediate computation of a derived metric. Furthermore additional display specific elements like display order and display category can be included in the metric specific information.

In certain embodiments derivation computation can also be included in the metric specific information. Derivation computation can be information used to compute the derived metric from the various source metrics for a service. These computations can be an aggregation over some criteria on multiple source metrics e.g. avg min max sum last . Additional parameters or details about the aggregation method can be captured by a list of properties. The exact details names and values of the properties can depend on the aggregation method and the fields over which the aggregation is required.

Service states e.g. service instance states can be pushed to TAS after collecting this information via the EM Agent. The EM Agent can use service provided Metric Collection APIs which can include a metric for service state along with other usage metrics to push the service states to the TAS. For example a generic operation through a TAS Web Service applicable for all service types using any service provider which can update its service instance state. In some instances EM can use a TAS Web Service API to push service instance states to TAS.

Accordingly the service declaration for a service can comprise information specifying EM integration described herein may be sufficient to have service instance states be reflected in the TAS repository and hence in the cloud portal.

In certain embodiments service availability information can be retrieved by TAS from EM using a Web Services API that is independent of the type of the service. Accordingly the service declaration may not need to cover service availability. Events affecting the services can be retrieved by TAS from EM using a Web Services API that is independent of the type of the service. Accordingly the service declaration may not need to cover scheduled blackouts.

The service declaration for a service may specify purchasing information for the service. The purchasing information may be used for configuring the service in back office accounting systems GSI . For each offering or service level of the service the service blueprint can specify the BOM bill of materials . The BOM can include information such as service part name and description license part name and description and pricing information. The pricing section of the BOM can include information such as currency code country code price and metric e.g. user month .

For each resource e.g. file storage data transfer there may be a limit on the amount of that resource that can be used by a particular offering of the service. If a service instance uses any resource beyond the amount allowed for the offering level of the service instance it incurs overage. The service declaration for a service can specify the information needed for calculating overage for the service.

The overage section of the service declaration can include information such as overage limits overage band definitions overage aggregation rules. Overage limits can specify the amount of a resource that can be used by the service without incurring overage. Overage band definitions can specify the amount of a resource that one overage unit allows. For example one overage unit may allow 5 GB of additional storage beyond the amount of storage allowed for the offering level. Overage aggregation rules can specify the aggregation operation to be used for aggregating resource usage values while calculating overage. For example for storage the aggregation operation may be max while for data transfer the overage operation could be sum. 

Some services have a requirement to have an implicit dependent service instance to be created as a by product of creation of the primary service instance. For instance for FA services a pre production instance gets created implicitly when a production service instance is created. In such scenarios TAS can keep track of the dependent relationship between the service instances and ensures that the lifecycle of the two service instances is synchronized e.g. implicitly delete pre production instance when production instance is deleted prevent deletion of pre production instance by itself . TAS can also define the relationship between the service instances in the Cloud Portal.

The service declaration for a service may comprise information defining such relationships. In certain embodiments the service declaration may model the relationships as a generic relationship model and not have explicit hard coded notions of pre production stage instance.

The blueprint database for physical provisioning can include a pod Definition schema e.g. pod Schema to define the physical footprint of a Service a Service Definition schema e.g. Request Response Schema to capture Service specific plug ins and a Service Configuration schema e.g. Service Instance Schema to capture EM IDM URL Routing and other service specific configuration. As previously mentioned under the business processing blueprint the blueprint database can also include a blueprint registry .

POD definition in the service declaration for a service can describe the various aspects that constitute a pod for the service. In certain embodiments the elements that make up the pod definition can be a Physical Footprint e.g. Oracle Virtual Assembly Builder OVAB Assembly OVAB Deployment Plan Tenancy Type On Demand Provisioning selection and Custom Attributes.

In some instances the physical footprint for a pod can be specified in an OVAB assembly based definition or VM template based definition. The OVAB assembly based definition can be used by a service to model its physical footprint. Alternatively a service can declare its physical footprint using VM templates and associated rehydration scripts. This may be useful if the OPC infrastructure supports a generic IaaS stack such as CloudStack or Openstack. This information may be included in the service declaration.

Furthermore if a service does not declare a physical footprint in its blueprint it may be assumed that the Service may set up its pods out of band and register the pods with cloud infrastructure system using the registerpod API.

In defining the physical footprint a service can specify the OVAB Assembly details the Deployment Plan template the Tenancy type and whether the pod should be capable of being provisioned on demand.

For the assembly location services that deploy their physical footprint using built OVAB based assemblies may upload their assemblies to the Assembly Registry and can then reference the assembly in their service declaration definitions. For example the element can be used to specify the location of the assembly within the Assembly Registry. SDI can take the responsibility of registering the uploaded assembly with OVAB for a given OPC deployment. The element is one for each configuration such as BASIC STANDARD ENTERPRISE that the service supports.

Furthermore the Assembly Registry can be a component that uses a file system store to upload large binaries and provide unique identifiers to the uploaded binaries that can then be used to reference the binary in other modules such as the blueprint.

In certain embodiments for the deployment plan and OVAB based assemblies OVAB may need a deployment plan which aids OVAB with deployment and rehydration of the services. Services may need to supply a deployment plan template as part of their overall Service Archive package that the provisioning layer may use to create an actual deployment plan during service provisioning. The deployment plan template may have predefined placeholder tags which may be replaced with actual values during provisioning to generate the OVAB deployment plan.

The on demand provisioning can specify if a service can be provisioned on demand. For example if there is no available capacity for the service the on demand provisioning element determines if the provisioning infrastructure should deploy a pod on the fly during the service creation flow. In some instances if this element is set to FALSE and there is no available capacity the provisioning request may be paused and an alert may be raised to allow the administrator to provision additional capacity.

The custom attributes information in the service declaration can capture a set of keys and values that a service may use for a pod definition. The attributes could be a key value pair or just a key whose values are realized at deployment by the provisioning infrastructure. An example of a custom attribute whose value is realized at deployment time could be pod usage. These attributes may be stored as part of the pod schema and passed to the pod APIs defined in the Tenant Placement section to allow the service to drive tenant placement decisions based on custom attribute values.

The pod Manager component in cloud infrastructure system can support a formal notion of a pool of pods. DevOps on Demand service instance creation flows may use pod Manager APIs to create pods to create pod pools and to locate pods in a pod pool. Once pods are located in pod pools services may be provided APIs to pull information about deployed pods pod pools so they can make informed decisions on aspects such as Tenant Placement in their plug ins. Alternatively the pool of pods information may be passed to the service plug ins.

For a given service multiple pods can be created a priori by DevOps or at runtime by service creation flows for cases where on demand pod creation is enabled in the blueprint . In some scenarios these pods can be related to each other in some way. A typical example of such a relationship is when a DR pod is created for a primary pod. This relationship needs to be tracked by the Physical Provisioning layer to accommodate DR flows as well as the Business Processing layer to expose DR instances via the Cloud Portal .

The service declaration for a service can declare any related pods that need to be created as part of creation of a primary pod for the service. It may be modeled as a generic pod relationship to allow room for other types of relationships as opposed to supporting explicit hard coded notions of DR .

Pod Pool relationships are more of a deployment aspect and may be established and maintained by DevOps. For instance DevOps may designate a specific pod Pool to be the DR pool for a given pod Pool this would imply that when a primary pod is created in pool 1 its DR related pod may be housed in the DR Pool for pool 1. In this example the decision to place the pod in the DR pool may be achieved using the service s tenant placement rules plug ins.

Custom plugins may be provided by a service such as Tenant Placement Plug ins and Service Provisioning Plug ins. Additionally the plug ins provided by a service may adhere to a common architecture comprising of tasks and TaskExecutors as described in the Task Execution Framework section. This information may be specified in the service declaration for the service.

The Tenant Placement module is responsible for determining the best pod to house a new service instance during instance creation. This placement can be based on various factors such as business requirements such as Gold customers SLA requirements etc. or physical constraints such as available capacity HA DR support etc. .

The cloud infrastructure system provisioning infrastructure can automate the various lifecycle operations for each service in conjunction with service declaration provided plus ins i.e. callbacks . For instance a service declaration for a service may provide plug ins such as provisioning lifecycle operation plug ins plug ins to modify the provisioning flow plug ins for tenant placement plug ins for DevOps initiated operations and the like. Provisioning lifecycle operation plug ins can be plug ins for the various operations such as but not limited to createService deleteService upsizeService associate and lock.

Plug ins to modify the provisioning flow may be driven by a Task Execution template. The provisioning flow can include the overall provisioning flow for the various lifecycle operations that may be seeded out of the box OOTB and further described in the physical provisioning orchestration engine section. A services can customize this execution flow by providing a whole new task execution template or injecting custom tasks into the execution flow at well defined execution points. In some instances the customized execution flow can be supported after the initial release. Additionally the pre defined provisioning flow may be modeled as a generic task execution template which can outline the set of tasks to be executed for each lifecycle operation. This information may be provided in the service declaration for the service.

Plug ins for tenant placement can provide custom plug ins to determine the best pod to house a newly created service instance. Plug ins for DevOps initiated operations can provide custom plug ins to allow DevOps to manage the services. These include operations such as but not limited to Start Stop RelocateInstance and Quarantine. Additionally the plug ins may be exposed as EM custom jobs using the EM framework as described in the EM Integration section.

A standardized plug in architecture can allow service teams to provide implementations for various provisioning actions. A plug in can be expressed as a task in the service declaration for a service. As part of calling the service provided plug in a formalized runtime execution environment with runtime context and libraries may also be provided.

The plug ins for lifecycle provisioning can be driven OOTB by a seeded task execution template. The template can determine the specific tasks and order. Depending on the operation there can be a set of standard tasks that are executed. Additionally services may be required to provide plug ins to perform certain tasks that are best handled by the service itself and which can be treated as a black box by the orchestration engine.

For example for each of create upsize and terminate operations a fixed set of tasks may be required as plug ins from service teams. According to some embodiments for the create service if it is a new system the plug in can create an IDM footprint for the system and an SFTP account creation. Additionally a create service plug in can create an IDM footprint for the service. A service supplied plug ins can create the per tenant footprint in a multi tenant pod e.g. DB Service inject personality into a pre provisioned anonymous instance from a pool of pods e.g. Java Service or create a pod on demand e.g. FA . In some instances the input parameters can include service name identity domain name size e.g. MINI BASIC STANDARD ENTERPRISE subscription type e.g. Trial Paid and all other properties as a list of key value pairs.

Additionally service supplied plug ins as specified in the service declaration for the service can be used for post deploy processes like installing language packs for FA or making the Enterprise Manager Grid Control EMGC discover DB. The SFTP account creation can be done at the service level. Furthermore if required by the network configuration element the service declaration can enable OHS configuration changes for URL routing.

For upsize service bookkeeping of additional resources may be reserved. Per the blueprint if the service uses any of the resources tracked by the provisioning infrastructure e.g. IP addresses the upsizing plug in can be required. The service supplied plug in to scale up can include the following input parameters new size and all other properties as a list of key value pairs.

For terminating service associate service supplied plug in can be used to disassociate. For instance if Java and DB are associated and DB is being terminated a plug in from Java service can be used to remove the data source from the WebLogic server. The input parameters specified in the service declaration may include service name identity domain name of the service being terminated and all other properties as a list of key value pairs.

Furthermore if required by the network configuration element in the blueprint the termination plug in can remove OHS configuration for URL routing. If archival is enabled the termination plug in can move service archive to an SFTP account. If archival is not enabled the termination plug in can delete all data and remove the SFTP accounts. Additionally the termination plug in can remove a target from the EMGC.

Additionally a service can supply a plug in for cleanup. The input parameters can include properties as a list of key value pairs. The clean up plug in can destroy and recover all resources that are being tracked by the provisioning infrastructure e.g. IP addresses volumes virtual OVAB home .

In addition to the required plug ins as part of the provisioning lifecycle operations services can also provide custom plug in. Plug ins for custom operation flows can inject custom tasks into the execution flow. This can be done in a controlled manner and at specific points allowed in the task execution sequence. Services are free to enhance or alter the provisioning flow using these custom tasks to do service specific actions. For example we may allow a custom task to be executed after we have created the IDM footprint for the system before the SFTP account creation. Additionally the whole flow for any operation can be overridden by providing a new Task Execution template.

Service configuration information in the service declaration for a service allows service providers to define various configuration elements for the service. It may include for example an EM integration section an IDM integration section and Network Configuration section to configure the network.

The EM integration information in the service declaration can provide definitions required to integrate with Enterprise Manager Cloud Control EMCC which allows monitoring and management of services via EM.

The main aspects of EM integration that each service may specify in the service declaration can include target type target discovery attributes and script metric collection plug in metric collection intervals monitoring account and custom jobs.

The target type can define the metadata required by EM to model a new monitor able target. The information provided in the service blueprint may be used to generate a target type XML document conforming to the EM target metadata XML schema. The target type XML document may then be registered with EM using an EM API. In some instances the target type template can be generated using EM tools edited manually as needed and registered into EMCC as well as into the EMCC Agent via the EM Extensibility development Kit EDK . The blueprint can further automate the target type using cleaner simpler programmatic APIs that may be invoked from the provisioning infrastructure during the service publishing process when the service is registered in the service registry.

The target discovery attributes and script can be the service instance specific attributes that are used to create a target in EM. The information provided in the service declaration may be used to invoke an EM API to create the target during the service instance creation flow. In some instances the target creation is done either by SDI e.g. as is the case for the DB service or by the service itself e.g. as is the case for the Java Service wherein Nuviaq performs this function using an EM CLI. The service declaration can evolve this into a REST API that can be invoked from the provisioning infrastructure in a common way across all services.

The metrics collection plug in defines the path to the plug in XML that may allow EM to collect metrics for the specific service instance. EM allows services to define the plug in using various mechanisms such as JMX REST Web Services Script etc. The OPC Service Blueprint may expose the XML schema defined by EM to capture the definition of the Metric Collection plug in.

The metric collection intervals aspect can control the schedule at which EMCC collects metrics for the service instance target.

The monitoring account aspect can define the account in the service to be used by the EMCC agent to collect metrics for the service instance target using the service provided metric collection plug in.

In the custom jobs aspect the EM can support the notion of custom jobs to be registered by services to perform custom functions such as Starting Stopping a service. The custom functions are then exposed to DevOps via the EM console. The OPC provisioning framework may define a standard set of verbs e.g. Start Stop Relocate Quarantine that may leverage the EM custom jobs framework to provide a common set of interfaces to DevOps across all services to perform service management functions via the EM console.

These service definitions are elements that may be specified in a service declaration for a service and enables the creation of the per Service Instance footprint created in the shared IDM infrastructure as part of service creation. This can include for example service name role templates and identity domain service admin role mapping. For example the service name can match the service name registered with TAS and SDI.

The role templates can be a set of per Service Instance roles that needs to be instantiated as part of service creation. Each of these roles may then become an assignable role for a service instance via the IDM console.

The identity domain admin service admin role mapping can define the set of roles that need to be granted to the Identity Domain users Service Admin users when these users get created as part of Service Instance creation.

In some instances the following aspects in the service declaration may be finalized with respect to IDM integration to define the XML schema to capture the following OAM policies CSR privileges SAML ID propagation during Association AppIDs Bind Credentials for the service runtime code to access ID Store OPSS store and Lifecycle of credentials keys to leverage OPC key refresh automation.

The network configurations can contain elements that define firewall rules URL routing and information required for defining consistent cloud URL name spaces. furthermore the Provisioning infrastructure layer may configure the BigIP load balancer and a pool of OHS nodes to route the URLs for the service.

In certain embodiments information related to the creation and use of pods for a service may be specified in the service declaration for the service. This information is then used by a pod manager during service provisioning.

In certain embodiments a pod manager is a module that is responsible for creation and management of pods across all services. According to some embodiments the pod manager can manage objects maintain a persistent schema monitor the capacity of available pods and support programmatic APIs to be used by DevOps. In some instances the pod manager can manage a pod or a pod pool.

For example a pod can be a logical entity that can represent a pre provisioned anonymous single tenant deployment e.g. as is the case for the Java service or a multi tenant stack i.e. physical or virtualized that serves multiple tenants e.g. as is the case for the DB service . In other words a pod can be a deployment of a service on a physical stack. A pod can house one or more service instances. Pods can be created a priori or can be created on demand when a service instance is created for a given customer.

For example a pod pool can be a pool of single tenant or multi tenant pods. A pool can be created to segregate collections of pods for many reasons e.g. different SLA requirements preferred customers variation in service configurations . When a Service Instance is created for a given customer the service instance may be housed in a pod from a given pool based on various criteria as defined in the tenant placement section.

Additionally the pod manager can maintain a persistent schema to track a list of pods per service a list of service instances in a pod a list of pod Pools Physical Footprint of each pod and Capacity information for each pod among other pod relevant information.

Moreover the pod manager can monitor the capacity of available pods and resources within each pod and raise alerts when a capacity threshold is hit.

Furthermore the pod manager can support programmatic APIs to be used by DevOps. The programmatic APIs can include createpod createpodPool listpods listpodPools registerpod for pods created out of band listServiceInstancesInpod and scalepod.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple busses.

Input subsystem may include one or more input devices such as a mouse a keyboard a pointing device a touchpad etc. In general input subsystem may include any device or mechanism for inputting information to computer system .

Output subsystem may include one or more output devices for outputting information from computer system . Examples of output devices include without limitation a display device a printer a projection device etc. In general output subsystem may include any device or mechanism for outputting information from computer system .

Processing unit s can include one or more processors one or more cores of processors combinations thereof and the like. In some embodiments processing unit s can include a general purpose primary processor as well as one or more special purpose co processors such as graphics processors digital signal processors or the like. In some embodiments some or all processing units can be implemented using customized circuits such as application specific integrated circuits ASICs or field programmable gate arrays FPGAs . In some embodiments such integrated circuits execute instructions that are stored on the circuit itself. In other embodiments processing unit s can execute instructions stored in working memory or on storage devices . In various embodiments processing units can execute a variety of programs or code instructions and can maintain multiple concurrently executing programs or processes. At any given time some or all of the program code to be executed can be resident in system working memory storage devices and or on computer readable storage media . Through suitable programming processing units can provide various functionalities described above for performing event stream related processing. In some embodiments computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

Storage device s may include memory devices such as disk drives optical storage devices and solid state storage devices such as a random access memory RAM and or a read only memory ROM which can be programmable flash updateable and or the like. Software programs code modules instructions which when executed by processing unit s to provide the functionality described above may be stored on storage devices . Storage devices may also provide a repository for storing data used in accordance with embodiments of the present invention.

Computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable memory storage devices plus storage media for temporarily and or more permanently containing computer readable information.

Communications subsystem may permit data to be exchanged with network and or any other computers. Communication subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . The communication may be provided using wired or wireless protocols. For example communication subsystem may enable computer to connect to a client device via the Internet. Communication subsystem may comprise a modem a network card wireless or wired an infra red communication device a GPS receiver etc.

Working memory subsystem may include a number of memories including a main random access memory RAM for storage of instructions and data during program execution and a read only memory ROM in which fixed instructions are stored. Software elements such as an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. may be stored in working memory . In an exemplary embodiment working memory may include executable code and associated data structures such as caches used for processing events and enabling variable duration windows processing as described above.

It should be appreciated that alternative embodiments of computer system may have more or less components with numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. Embodiments of the present invention are not restricted to operation within certain specific data processing environments but are free to operate within a plurality of data processing environments. Additionally although embodiments of the present invention have been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps.

Further while embodiments of the present invention have been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. Embodiments of the present invention may be implemented only in hardware or only in software or using combinations thereof. The various processes described herein can be implemented on the same processor or different processors in any combination. Accordingly where components or modules are described as being configured to perform certain operations such configuration can be accomplished e.g. by designing electronic circuits to perform the operation by programming programmable electronic circuits such as microprocessors to perform the operation or any combination thereof. Processes can communicate using a variety of techniques including but not limited to conventional techniques for interprocess communication and different pairs of processes may use different techniques or the same pair of processes may use different techniques at different times.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope as set forth in the claims. Thus although specific invention embodiments have been described these are not intended to be limiting. Various modifications and equivalents are within the scope of the following claims.

