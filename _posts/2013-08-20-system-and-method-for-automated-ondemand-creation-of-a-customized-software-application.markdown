---

title: System and method for automated on-demand creation of a customized software application
abstract: A web-based interface is provided for visually modeling a business-to-business or application integration process by selecting and associating predetermined process-representing visual elements. A customized, enterprise-specific executable software application (“dynamic runtime engine”) is automatedly produced by software running remotely. The dynamic runtime engine is created to include a generic application template, predefined “stock” codesets selected as a function of the modeled process, and a data profile codeset that includes input provided by the user for customizing the stock components for a specific integration process of a specific enterprise.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09176711&OS=09176711&RS=09176711
owner: Dell Products, LP
number: 09176711
owner_city: Round Rock
owner_country: US
publication_date: 20130820
---
This application is a continuation of U.S. patent application Ser. No. 12 110 607 entitled System and Method for Automated On Demand Creation of a Customized Software Application filed on Apr. 28 2008 now U.S. Pat. No. 8 533 661 which claims the benefit of U.S. Provisional Patent Application No. 60 914 484 filed on Apr. 27 2007 the disclosures of which are hereby expressly incorporated by reference in their entirety.

The present disclosure relates generally to a system and method for automated on demand creation of a software application that is customized for a specific user s needs and or computer network system such as a customized business integration software application executable to exchange data between diverse computing systems.

Conventional software development and distribution models have involved development of an executable software application and distribution of a computer readable medium such as a CD ROM to an end user. Upon receipt of the computer readable medium the end user executes installation files stored on the CD ROM to install the executable software application on the user s personal computer PC etc. When the software is initially executed on the user s PC the application may be further configured customized to recognize or accept input relating to aspects of the user s PC network etc. to provide a software application that is customized for a particular user s computing system. This simple traditional approach has been used in a variety of contexts with software for performing a broad range of different functionality. While this model might be satisfactory for individual end users it is undesirable in sophisticated computing environments.

Today most corporations or other enterprises have sophisticated computing systems that are used both for internal operations and for communicating outside the enterprise s network. Much of present day information exchange is conducted electronically via communications networks both internally to the enterprise and among enterprises. Accordingly it is often desirable or necessary to exchange information data between distinctly different computing systems computer networks software applications etc. The enabling of communications between diverse systems networks applications in connection with the conducting of business processes is often referred to as business process integration. In the business process integration context there is a significant need to communicate between different software applications systems within a single computing network e.g. between an enterprise s information warehouse management system and the same enterprise s SAP purchase order processing system. There is also a significant need to communicate between different software applications systems within different computing networks e.g. between a buyer s purchase order processing system and a seller s invoicing system.

Relatively recently systems have been established to enable exchange of data via the Internet e.g. via web based interfaces for business to business and business to consumer transactions. For example a buyer may operate a PC to connect to a seller s website to provide manual data input to a web interface of the seller s computing system or in higher volume environments a buyer may use an executable software application known as EDI Software or Business to Business Integration Software to connect to the seller s computing system and to deliver electronically a business document such as a purchase order without requiring human intervention to manually enter the data. Such software applications are readily available in the market today. These applications are typically purchased from software vendors and installed on a computerized system owned and maintained by the business in this example the buyer. The seller will have a similar complementary software application on its system so that the information exchange may be completely automated in both directions. In contrast to the present disclosure these applications are purchased installed and operated on the user s local system. Thus the user typically owns and maintains its own copy of the system and configures the application locally to connect with its trading partners.

In both the traditional and more recent approaches the executable software application is universal or generic as to all trading partners before it is received and installed within a specific enterprise s computing network. In other words it is delivered to different users systems identical generic form. The software application is then installed within a specific enterprise s computing network which may include data centers etc. physically located outside of an enterprises physical boundaries . After the generic application is installed it is then configured and customized for a specific trading partner after which it is ready for execution to exchange data between the specific trading partner and the enterprise. For example Walmart may provide on its website specifications of how electronic data such as Purchase Orders and Invoices must be formatted for electronic data communication with Walmart and how that data should be communicated with Walmart . A supplier enterprise is then responsible for finding a generic commercially available software product that will comply with these communication requirements and configuring it appropriately. Accordingly the software application will not be customized for any specific supplier until after that supplier downloads the software application to its computing network and configures the software application for the specific supplier s computing network etc. Alternatively the supplier may engage computer programmers to create a customized software application to meet these requirements which is often exceptionally time consuming and expensive.

The present disclosure provides a system and method for on demand creation of a customized software application in which the customization occurs outside of an enterprise s computing network. Thus the software application is customized for a specific enterprise before it arrives within the enterprise s computing network and is delivered to the destination network in customized form. Consistent with the present disclosure an employee within an enterprise can connect to a website and use a specially configured graphical user interface to visually model an integration process via a flowcharting process using only a web browser interface. During this modeling process the user selects from a predetermined set of process representing visual elements that are stored on a remote server such as the web server. By way of example the integration process could enable a bi directional exchange of data between its internal applications between its internal applications and its external trading partners or between internal applications and applications running external to the enterprise. Applications running external to the enterprise are commonly referred to as SaaS Software as a Service .

The user of the website then downloads and installs a container program also referred to herein as a dynamic runtime engine which is an executable software application capable of running on a computer within the enterprise s network which may include for example networks owned and or operated by third party data center providers such as OpSource Amazon etc. When started by the user this executable software application connects to the website and downloads an XML representation of the visual model representing the integration process and all requisite code needed to run the integration process. The required code includes a stock or generic application template selected predefined stock codesets that are selected as a function of the user s needs as defined by the modeled process and a data codeset that includes input provided by the user for customizing the stock components for a specific integration process. Additional components may be retrieved as required.

As changes are made to this model via the website or to the code that executes the model the executable software application will automatically check for and apply these changes as needed without requiring human intervention.

Each integration process represents a complete end to end interface. For example a process could be modeled to accept a purchase order PO from a retailer such as Walmart transform the PO into a format recognizable by a certain internal order management software application of the enterprise and then insert the contents of that PO directly into the enterprise s order management system.

The present disclosure provides a system and method for on demand real time creation of a customized executable software application that is automatedly created from a plurality of pre existing stock components and data provided by a user that relates to a specific enterprise integration process. The creation and customization occurs outside of an enterprise s computing network e.g. at a centralized network accessible server system. Accordingly the customized software application is configured for a specific enterprise s activities business processes and or computing network collectively integration process before it is received within that enterprise s computing network.

The present disclosure provides conventional application integration and B2B business to business integration capability but involves a novel manner of creating and or configuring software for doing so i.e. by providing a web browser application for a building a visual model for an integration process instead of using a locally installed application to build the integration processes. Further the user can then download install run a dynamic runtime engine software application which will download the corresponding code needed to execute the integration process. This is in contrast to traditional methods which entail installing one server application on the user s local system and then saving the integration processes to the server application.

For illustrative purposes an example provided in the context of development and distribution of business integration software is discussed below with reference to . is a block diagram showing diagrammatically a simplified network in accordance with the present disclosure. Actual network topology should be expected to be significantly more complex. As shown in the exemplary system includes conventional computing hardware of a type typically found in client server computing environments. More specifically the network includes a conventional user client device such as a conventional desktop PC enabling a user to communicate via a communications network such as the Internet. The exemplary user device is configured with conventional web browser software any web browser that is capable of supporting Adobe s Flash runtime environment such as Microsoft Corporation s Internet Explorer web browser software for interacting with websites via the network . The exemplary client device is positioned within an enterprise network behind the enterprise network s firewall which is of a conventional type. For illustrative purposes the enterprise network includes a business process system which may include conventional computer hardware and commercially available business process software such as QuickBooks SAP s MySAP ERP Oracle s OneWorld JD Edwards ERP Infor s WMS application or many others.

The exemplary network further includes conventional hardware and software providing trading partner systems for receiving and or transmitting data relating to business to business transactions. Such systems are conventional and well known in the art. For example Walmart may operate trading partner system to allow for issuance of purchase orders to suppliers such as the enterprise and to receive invoices from suppliers such as the enterprise in electronic data form as part of electronic data exchange processes of a type well known in the art.

It should be noted from the description above that the system network components described are thus conventional in nature with respect to electronic exchange of data information in a business process integration context. As described above in a conventional arrangement the enterprise s business process system might communicate directly with a trading partner s system to exchange data. Due to the cost and complexity of enabling this electronic exchange many enterprises have avoided this arrangement and instead continue to use manual processes to exchange business documents such as by telephone or fax. The present disclosure allows an enterprise to obtain the capabilities needed to conduct the electronic exchange of data with one or more trading partners internal applications or applications available via the Internet commonly referred to as SaaS Software as a Service . The present disclosure provides these capabilities in a unique fashion by providing the enterprise with a software application including the configuration information required for conducting the integration process and also the executable code needed to make the process run and specially configuring this application to run within the enterprise s network e.g. behind the firewall of the enterprise or within a third party hosted data center etc. considered to be part of the enterprise s network so that it may connect to various software applications running internal to the enterprise s network.

In accordance with the present disclosure a provider of a service service provider for creating on demand real time creation of customized software applications operates a service provider server system within the network . The system is specially configured in accordance with the present disclosure and is capable of communicating with devices in the enterprise s network . It should be noted that the communication between system and network is essentially uni directional in that communications communication sessions originate from network to system and not from system to network . Accordingly the network need not have its firewall modified to allow incoming traffic from communications sessions originating from system . is a flow diagram illustrating an exemplary method for automated on demand creation of a customized software application as viewed from the perspective of system .

More specifically the present disclosure provides that the service provider system is specially configured in accordance with the present disclosure to store certain pre defined i.e. pre built datasets in its memory. Such data includes a pre defined container also referred to herein as a dynamic runtime engine installation program that is executable at the enterprise system to install a pre defined dynamic runtime engine application as shown at step of . The dynamic runtime engine application is executable at the enterprise system to download from the server an application template. The application template is preferably provided in the form of an XML representation of the execution steps to be carried out by the customized software application which in this example provides business process integration functionality as modeled by the user using a provided graphical user interface. The application template includes references to specific pre built software code stored on the service provider system and how the pre built code should be configured for execution within an enterprise s computing network or other network of choice to provide for exchange of business integration data between the enterprise s computing system s within the enterprise s network and or between the enterprise s computing system s and trading partners systems external to the enterprise s network and or between the enterprise s internal computing system s and the enterprise s computing systems external to the enterprise s network commonly referred to as SaaS Software as a Service . For example the application template may be constructed as an integration of customer data between Salesforce and SAP using JAVA programming technology. Optionally one or more application templates are predefined and stored by the server e.g. for various different types of integration processes.

The application template is corresponds to the modeled integration process but is not itself configured for use with any particular enterprise or any particular trading partner. Accordingly the application template is not yet ready for execution to provide business integration functionality for any particular trading partner or enterprise. Instead the application template requires additional code and or data to be so configured. Preferably the application template has a conceptual design that is modular in nature and thus permits it to function with any selected ones of several different additional components as discussed below. The dynamic runtime engine installation program the dynamic runtime engine program and the application template may be used by different enterprises customers of the service provider.

Such pre built software code includes Connector codesets as shown at step of . Each Connector codeset includes code for communicating with a specific software application or system. For example the Connector codesets may be stored e.g. in a database as a combination of executable software code and XML containing configuration information about the usage of the Connector codeset. Each Connector codeset is configured to provide connectivity to specific software applications databases and or systems. Each Connector codeset is specially configured to enable communication with the application etc. in the proprietary API Application Programming Interface utilized by that application and or system.

Such pre built software code further includes Data Profile codesets. A data profile is needed specifically when the data being sent received must be parsed have its contents examined programmatically or otherwise be processed by the container application such as when data is routed based on the value of a particular field or when a piece of data is transformed from an XML format for example to a Flat File format. For example a Data Profile codeset may be stored e.g. in a database as a combination of executable software code and XML containing configuration information about the usage of the Data Profile codeset. For example a Data Profile codeset may describe the originating format and structure of certain data to be integrated the destination format and structure of such data a data map for retrieving data from certain fields in a source document and inserting it into a certain field in a destination document etc. For example a Data Profile codeset may exist for a purchase order to indicate originating and destination formats of a particular purchase order what the source document is where certain data in the source document must appear in the destination document etc. Each Data Profile codeset is associated with a specific data element to be integrated. The Data Profile codesets may be used by different enterprises customers of the service provider.

Further the Connector codeset is associated with a visual connector element that abstracts away the technical details of how this communication occurs greatly simplifying the process of communicating with the target application or system. Accordingly a user can visually configure the connector element and the associated Connector codeset by entering simple values into a dialog box within the application thus avoiding a need to write computer code and understand the underlying proprietary protocol being used. This permits a layperson to use the application to create a customized software application without the need for a computer programmer.

Preferably a respective Connector codeset is provided for each commercially available and or known software application system. For example there may be a Connector codeset for QuickBooks software another for a specific SAP system and another for Salesforce.com CRM which is a SaaS solution. It will be noted that these same Connector codesets may be used to communicate between different application software systems within a single enterprise system as discussed in greater detail below or they may be used to insert or extract data for exchange with an external trading partner.

Accordingly the Connector codesets are conceptually modular in that a corresponding Connector codeset may be selected for use in conjunction with the application template to provide a customized software application for exchanging data with specific software applications systems. Further the Connector codesets may be used by different enterprises customers of the service provider.

Further the present disclosure provides that the service provider system is specially configured in accordance with the present disclosure to store in its memory a Trading Partner codeset for each of several different trading partners as shown at step of . For example the Trading Partner codesets may be stored e.g. in a database or otherwise in a memory of the system as various XML documents each including respective data for each of a plurality of different trading partners. For example there may be an XML document including information for communicating with Walmart s trading partner system . The document may include respective communication parameters relevant for the respective trading partner such as an identification of the IP protocol to be used for communication such as HTTP an applicable security standard to be complied with such as AS2 an applicable URL or other network address information to be used for communication such as http www.walmart.com as2 electronic data interchange EDI parameters formats etc. to be used such as Interchange Id Application Id Primary and Secondary contact information etc. etc.

The Trading Partner codesets are conceptually modular in that any selected Trading Partner codeset e.g. XML document may be selected for use in addition to the application template to provide a customized software application for exchanging data with the trading partner. The Trading Partner codeset may be used by different enterprises customers of the service provider.

The system is further specially configured in accordance with the present disclosure to provide web server functionality for presenting a user accessible website. Communications between the user device and the system website may be performed using conventional communications technologies such as the HTTPS protocol.

The website is specially configured to provide a graphical user interface providing a visual designer environment permitting a user to define process flows between applications systems such as between trading partner and enterprise systems to model a customized business integration process as shown at step of . The graphical user interface may be used by different enterprises customers of the service provider.

The interface provides a menu of pre defined user selectable visual elements and permits the user to arrange them as appropriate to model a process. The elements may include visual drag and drop icons representing specific units of work required as part of the integration process such as invoking an application specific connector transforming data from one format to another routing data down multiple paths of execution by examining the contents of the data business logic validation of the data being processed etc. Information and computer executable instructions for presenting such a graphical user interface are stored in a memory of the service provider system .

This selection and arrangement of these elements by the user results in the system s receipt via the website of user input creating a model of the process as shown at step .

Further the graphical user interface allows the user to provide user input providing information relating to trading partners activities enterprise applications enterprise system attributes and or process attributes that are unique to a specific enterprises end to end business integration process. For example the graphical user interface may provide drop down or other user selectable menu options for identifying trading partners application connector and process attributes parameters settings etc and dialog boxes permitting textual entries by the user such as to describe the format and layout of a particular data set to be sent or received for example a Purchase Order. The providing of this input by the user results in the system s receipt via the website of such user provided information as a data codeset as shown at step .

XML representations of the model and the information provided by the user are stored by the system in association with the user s enterprise s account. This allows this information to be stored retrieved modified transmitted etc. It should be noted that information provided by the user that relates to the enterprise system may optionally be saved by the system for subsequent use by the user in modifying the customized application software or for developing customized application software for integrating other business processes. It should further be noted that trading partner data not previously stored by the system may be gathered by prompting the user to supply such information via the website interface and that such gathered information may subsequently be saved by the system for subsequent use by the same or other users.

By way of illustrative example the website interface may provide a visual menu of elements in a drag and drop environment permitting the user to create a visual model of business process activities desired to be handled by the customized software application. For example this may involve a user s identification of receipt of purchase orders as an activity or of issuance of invoices as an activity. By way of illustrative example shows a graphical user interface displayed within a web browser window . The exemplary graphical user interface displays an exemplary business process integration model in the form of a flow diagram modeling a shipment order business process. The visual model is created by a user within the visual designer environment via the website interface provided by the system .

The exemplary flow diagram of includes exemplary Inbound connector element Routing process elements Document Property elements Data Transformation process element and Outbound connector elements and Process End elements and . Various ones of these elements are selected from a menu of elements and arranged by the user relative to one another as appropriate to model a corresponding business process. The elements may require data input from a user. For example the inbound connector element selected from the menu by the user may be configured by the user for a specific enterprise and process by the user s selection of the element and completing dialog boxes selecting menu items etc. as appropriate. For example the user may provide as input for configuring data entry element that the data will be inbound from a SAP system. This may be performed via a data entry field displayed in the window upon selection of data entry element . The element in combination with any required data input is associated with a specific Connector codeset stored in the memory of the system . The outbound connector elements may be similarly configurable. For example the last step of the integration process may involve sending shipping order data to the SAP system. The Shipping Order will be prepared as an XML message which is a readily recognizable format. The XML message is then sent to the outbound connector and the outbound connector converts the XML message from this simple recognizable format into the proprietary format that is understood by the SAP system. This conversion and the need for it is transparent to the user configuring the integration process.

By way of further example the routing element may require input for routing logic to be applied the Document Properties element may require input for file naming file storage location etc. to be applied etc. There may be other elements as appropriate or necessary for modeling business processes as desired.

Each branch of the flow diagram represents an end to end business process to be integrated. In the example of the first top most branch may model a process involving receipt of data from a SAP system in a corresponding format routing the data according to prescribed logic e.g. 1 shipment further routing according to further logic e.g. 1 transforming the data from the SAP system format to the destination system format by Data Transformation process element to create an appropriately formatted XML document and then transmitting the transformed data to the destination system in accordance with the properties and attributes of the outbound application connector .

Examples of other common activities include synchronizing customer data between applications synchronizing product information between applications notification of receipt of goods ordered by a retailer receipt of a work related injury claim and many others.

As referenced above the website interface may provide menus dialog boxes or other input receiving fields or devices permitting textual or other entries by the user to provide information parameters settings attributes etc. that are specific to a certain enterprise trading partner process etc. e.g. as adding them as properties or attributes of one of the visual modeling elements. For example a user modeling an integration process for receiving purchase orders may select an outbound connector element and then provide input for the outbound connector element to identify a specific software application within the enterprise that should receive purchase order data the enterprises unique system parameters such as a hostname for the purchase order processing application a valid username and password for use of the purchase order processing system port listings for receiving posting data etc.

This modeling by the user results in the system s receipt via the website of user input modeling business processes to be integrated and user input providing information relating to specific trading partners the enterprise the process etc. Accordingly the system is aware of the applications on both the source and destination ends in this example the trading partner and enterprise ends and parameters for automating the business process and can use this information to dynamically and automatedly create a customized software application for integrating the modeled business process.

The system subsequently e.g. after storing the completed model transmits the dynamic runtime engine installation program stored in its memory to the enterprise system e.g. user device as shown at step . As discussed above execution of the dynamic runtime engine installation program within the enterprise network e.g. at user device installs an executable dynamic runtime engine application on the user device. When the dynamic runtime engine application is executed it initiates communication with the system .

In response to execution of the dynamic runtime engine application at the enterprise network the system selects pre defined codesets stored in its memory that will be required by the enterprise system to automatedly execute the modeled integration process as shown at step . The system selects codesets from all codesets stored in its memory as a function of the model i.e. the elements selected by the user in creating the model and as a function of the parameter setting etc. information provided by the user in step .

For example if the user has modeled a process by selecting inbound connector in step and the user has provided data identifying trading partner Z will provide the inbound data represented by inbound connector then the system will select the Connector codeset associated with an inbound connector and the Trading Partner codeset associated with trading partner Z and Data Profile s that correspond to the activities and or data being exchanged with trading partner Z. It may be known from the data provided by the user or from the Trading Partner codeset that the incoming data will be coming from software application A. Accordingly the system may further select a codeset relating to use of software application A and or any other codesets stored in the memory of system that are referenced by a codeset it has already selected.

This allows the system to determine which pre built software components XML documents are needed for the final executable software application. For example if the user has created a model including inbound connector and configured inbound connector to specific that the inbound data will be coming from a SAP system the system is configured to identify a corresponding pre built Connector codeset stored in its memory that is required for receiving data from the SAP system.

For example an integration process may be modeled that uses an AS2 application connector element which is associated with an AS2 Connector codeset required for communicating with the systems of many retailers such as Walmart and this same process could also utilize a database connector because the enterprise has developed a database where data received from Walmart is to be stored. In this example the integration process could be modeled to receive Purchase Orders from Walmart . It may contain several steps such as 1 invocation of the AS2 application connector as described above for securely receiving the incoming data from Walmart 2 a data transformation step to transform the data from Walmart s format to a format recognizable by the internal database system and 3 an invocation of the Database Connector to deliver the purchase order to the database system.

Accordingly the system receives via the website user input allowing the system to search its database and select from various pre stored code only those selected codesets data application templates etc. required to build a customized software application for automatedly integrating the modeled business process. The appropriate application template may be selected as a function of the process modeled by the user. When the selected codesets are combined with the selected application template and the user information codeset they collectively provide an executable customized software application for automatedly integrating the modeled business process.

The system then transmits to the enterprise network e.g. the user device the generic executable application template stored in its memory the codesets selected in step and a codeset capturing the information provided by the user in step as shown at step .

In the example of the application may be received and stored by either device or business process system . The application whether executed at the user device or business process system is then operable to exchange data between the business process system and a trading partner s system . For example the process may be scheduled to execute periodically e.g. every night every 2 hours etc. to exchange data.

Examples of data to be exchanged using the software include receipt of purchase orders from a trading partner system issuance of invoices to a trading partner system issuance of an advance shipment notice to system or many others. Any information that is communicated between organizations in a high volume and redundant manner is a candidate to be automated using integration software such as this. Numerous software applications exist today that can enable these types of automated exchanges. However due to the complexity of the setting up these processes capabilities such as this are typically in the domain of larger enterprises with more sophisticated IT capabilities. Smaller organizations are therefore negatively impacted by not being able to participate in automated exchanges such as this and are forced to pay exorbitant fees to outsourced EDI providers or avoid automating these processes at all and instead continue to use people centric processes such as phone fax email for exchange this information. Further as software applications known as Software as a Service or SaaS continue to emerge and gain popularity enterprises need to integrate their internal applications with these applications hosted by the SaaS provider. Again integrating these systems is complex and expensive requiring expensive consultants to setup and implement. The present disclosure opens a new window of opportunity for tech savvy employees of smaller enterprises to now participate in the benefits of integration. The present disclosure makes this possible by changing the technical capabilities and requirements of setting up deploying and maintaining integration processes. Using only a web browser a user can automate integration processes for a specific enterprise and then download the dynamic runtime engine application containing just the enterprise specific processes and run this dynamic runtime engine on the enterprise s existing infrastructure.

The dynamic runtime application is a very lightweight application because unlike other static software applications the dynamic runtime engine is able to install just the software components that are needed to execute the integration processes for a particular enterprise. Conventional integration server software applications have been distributed as a pre built application on a series of CD s where it must be manually installed and manually upgraded as new versions are made available by the software vendor.

Further the user interacts with the website to provide user input providing enterprise specific or process specific parameters settings data attributes etc. for customizing the generic business process element to the specific business process of a specific enterprise as discussed in greater detail above as shown at step .

The user can continue to utilize system to create new integration processes and can deploy the integration process to the same dynamic runtime engine previously installed or setup a new dynamic runtime engine for the new integration process to be downloaded and installed in.

After the integration process has been modeled to meet the requirements of the enterprise the enterprise system receives via the network a dynamic runtime engine installation program download of which is initiated by the user. Upon execution of the installation program by the user a dynamic runtime engine application is installed. Execution is initiated in a conventional manner e.g. by invoking a Start command from the menu of the operating system where the installation program has been installed. This application is installed by the user in the same network in which the applications to be integrated reside.

Upon execution of the dynamic runtime engine program within the user s network e.g. at user device or business process system the dynamic runtime engine connects to the service provider system via the network and initiates download of software components from the system that collectively will provide an executable customized process specific automated business integration software application. More specifically the dynamic runtime engine initiates transmission from the system to the enterprise network e.g. device of the generic application template and the codesets that have been selected see step because they are associated with the elements of the model built by the user or are referenced by the codesets associated with the elements of the model. Further the dynamic runtime engine initiates transmission from the system to the enterprise network of a codeset capturing enterprise process specific information provided by the user see step e.g. to configure the generic elements with enterprise process specific parameters attributes settings etc. These software components are transmitted from the system into the enterprise system i.e. to a destination within the enterprise system e.g. behind the enterprise system s firewall e.g. to user device or business process system . These software components may be transmitted in the form of one or more data files using conventional file transfer technologies such as HTTPS or FTP.

Accordingly the dynamic runtime engine downloads to the enterprise s network XML documents including the attributes settings parameters etc. provided by the user when modeling the process which are captured by the application template and the appropriate connector trading partner and or data profile codesets for a specific integration process. For example this may include the trading partner attributes of the partner being connected to data transformation rules data format layouts business logic rules specific error handling routines etc. The enterprise network receives this data as shown at step .

At this point the software components collectively provide the customized software application are ready for execution to exchange data. The application may run in an automated manner without requiring any human intervention.

The enterprise system then executes the customized software application e.g. by executing the application template as shown at step . Accordingly when the application template is executed the combination of the application template the downloaded pre built XML documents corresponding to the process modeled by the user and the XML documents capturing user input provided during modeling of the process are executed to provide a customized business process integration software application.

When the dynamic runtime engine executes a particular customized integration process the enterprise system transmits and or receives data in this example with the trading partner s system . For example Purchase Order data may be retrieved by the integration process out of system where it is transformed during execution of the integration process into the format required by system and is then transmitted to the trading partner s system via the communications network . In turn the trading partner s system receives this data using their own EDI integration software. This and other types of exchanges are of a conventional nature and are well known to those skilled in the art.

Subsequently the customized software application will report the results of all processes executed as they complete to system as shown at step . The user may then connect to system using a web browser via a device such as system to view the status of the dynamic runtime engine executions. Such information may include the status of a particular process execution success failure how many documents were processed how the long the process took to run etc. Only reporting information is transmitted from the enterprise system to the service provider system not the actual data being processed. This allows for reporting of errors etc. to allow for customer support troubleshooting etc.

It should be noted however that the customized application may be configured to be self updating. More specifically the dynamic runtime engine application is configured to check for components it requires to automate the modeled business process and to automatically initiate download of any updated component on the server newer than a corresponding component resident at the enterprise network thus updating the application. Accordingly the dynamic runtime engine is configured to connect to system to download both application settings for the application template as well as additional software components.

Further the dynamic runtime engine application is configured to check for a new revised model of a process e.g. as a result of a user s operation of the system to retrieve modify and save a previously constructed business process model and to retrieve any additional new or modified components from the server that are newer than a corresponding component resident at the enterprise network thus maintaining the application. Accordingly as new versions of software components running inside the dynamic runtime engine are available the dynamic runtime engine will download and apply those updates from system without requiring any human intervention.

Accordingly after the system is initially established the system can be used repeatedly by a single enterprise to model and automate various different business processes or by various different enterprises with various different enterprise system attributes and each enterprise can model and subsequently use an appropriate customized software application that is custom tailored to its specific needs. Further such customized applications can be developed on demand as needed in real time and without the need for programmers or programmer expertise etc. Instead the system exists as a website accessible for use essentially at will subject to any applicable subscription service level or other access restrictions.

It should be noted that the inventive method and system is not merely a conventional client server arrangement. Instead the software application to be executed within a specific enterprise system is custom built using pre built codesets selected as a function of user input and user input in view of specific enterprise system attributes and is pulled from the system by the dynamic runtime engine that is installed in system or system . This requires the software application to be designed and built under the assumption that it will not be executed in the same network in which it was built.

It should be further noted that although the example above discusses business to business integration between applications of a trading partner system and an enterprise system in different networks that the present disclosure is equally applicable to integrate between different applications within the enterprise system i.e. for application integration . For example a customized business integration software application may be built as described herein for use among customer relationship management CRM inventory control purchasing accounting or other enterprise systems within the enterprise system network. Also the present disclosure is equally applicable to integrate between applications within the enterprise system and applications running outside of the enterprise system commonly referred to as SaaS or Software as a Service solution i.e. for SaaS integration . For example a customized business integration software application may be built as described herein for storing customer information and this data must be synchronized with a customer relationship management CRM application such as salesforce.com. Salesforce.com is not running in the network and is instead accessible via the Internet.

The server may communicate with other computers or networks of computers for example via a communications channel network card or modem . The server may be associated with such other computers in a local area network LAN or a wide area network WAN . The server may be a server in a client server arrangement. All of these configurations as well as the appropriate communications hardware and software are known in the art.

Software programming code for carrying out the inventive method is typically stored in memory. Accordingly server stores in its memory microprocessor executable instructions. These instructions may include micro processor executable instructions stored in the memory and executable by the microprocessor to carry out any combination of the steps described above.

Also provided is a computer program product recorded on a computer readable medium for configuring conventional computing hardware to carry out any combination of the steps described above.

While there have been described herein the principles of the disclosure it is to be understood by those skilled in the art that this description is made only by way of example and not as a limitation to the scope of the disclosure. Accordingly it is intended by the appended claims to cover all modifications of the disclosure which fall within the true spirit and scope of the disclosure.

