---

title: Debug apparatus and methods for dynamically switching power domains
abstract: Methods and apparatus are provided that facilitate debugging operations for components in dynamic power domains. In an embodiment, an integrated circuit includes hardware sectors associated with observability circuits served by a debug data bus of a debug circuit. A controlled sector residing in a dynamically-controlled power domain may be turned off while the power domain of another sector remains on. To continue to have debug observability all the way through and after these power events, a debug data register is configured to provide data, such as configuration and/or programming data, to the observability circuit of the controlled sector via the debug data bus. A shadow register is configured to capture the data provided to the controlled sector's observability circuit. The shadow register data is used upon restoring power to the controlled sector to restore the controlled sector's observability circuit to a state when the controlled sector was previously powered on.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262293&OS=09262293&RS=09262293
owner: Advanced Micro Devices, Inc.
number: 09262293
owner_city: Sunnyvale
owner_country: US
publication_date: 20130916
---
Embodiments of the subject matter described herein relate generally to electronic circuits and more particularly relate to electronic circuits and debug operations performed thereon.

In development process of an integrated circuit IC it is desirable to ensure that the hardware works correctly in the expected operating space before the IC is shipped in volume. Generally the use of debug circuits and processes are well known in art to assist in the testing of ICs. U.S. Patent Publication No. 2012 0151263 A1 describes various embodiments of debug circuits and processes.

One challenge is to do a thorough job so that ICs are not deployed in the field and then significant problems are subsequently discovered e.g. by an original equipment manufacturer OEM . However this is not always possible. One reason is that insufficient time may be available for cycling the hardware through the entire validation space. Another reason is that certain aspects of the hardware and state machine functionality are opaque i.e. not easily observable .

For power saving and other purposes some hardware circuits may be designed to be selectively powered down and or powered off. Such circuits present additional issues in the testing of ICs.

Methods and apparatus are provided that facilitate debugging operations for components that may include different power domains. In an embodiment an integrated circuit IC includes a plurality of hardware sectors each hardware sector associated with a debug observability circuit that is served by a debug data bus of a debug circuit. The plurality of hardware sectors includes a controlled sector residing in a dynamically controlled power domain that may be turned off while the power domain of another sector remains on. However the need is to be able to maintain debug observability all the way through these power events. To address that a debug data register is configured to provide data such as configuration and or programming data to the debug observability circuit of the controlled sector via the debug data bus. A shadow register is configured to receive and store the data provided to the debug observability circuit of the controlled sector. Control circuitry is configured to utilize the data stored in the shadow register upon a restoration of power to the controlled sector to restore the debug observability circuit associated with the controlled sector to a state reflective of its state when the controlled sector was previously powered on.

In another embodiment a debug method for integrated circuit IC is disclosed. In an example method the method operates with respect to a plurality of hardware sectors. Each hardware sector is associated with a debug observability circuit that is served by a debug data bus of a debug circuit. The plurality of hardware sectors includes a controlled sector residing in a dynamically controlled power domain that may be turned off while the power domain of another sector remains on. The example method proceeds by providing data such as configuration and or programming data to the debug observability circuit of the controlled sector via the debug data bus. The data provided to the debug observability circuit of the controlled sector is also captured in a shadow register. The data captured in the shadow register is utilized upon a restoration of power to the controlled sector to restore the debug observability circuit associated with the controlled sector to a state reflective of its state when the controlled sector was previously powered on.

In a further embodiment a non transitory computer readable storage medium storing a set of instructions for execution by a general purpose computer to facilitate manufacture of an integrated circuit is provided. The instructions facilitate manufacture of an IC that includes a plurality of hardware sectors each hardware sector associated with a debug observability circuit that is served by a debug data bus of a debug circuit. The plurality of hardware sectors includes a controlled sector residing in a dynamically controlled power domain that may be turned off while the power domain of another sector remains on. A debug data register is configured to provide data such as configuration and or programming data to the debug observability circuit of the controlled sector via the debug data bus. A shadow register is configured to receive and store the data provided to the debug observability circuit of the controlled sector. Control circuitry is configured to utilize the data stored in the shadow register upon a restoration of power to the controlled sector to restore the debug observability circuit associated with the controlled sector to a state reflective of its state when the controlled sector was previously powered on.

The non transitory computer readable storage medium may include instructions that are hardware description language HDL instructions used for the manufacture of a device.

The following detailed description is merely illustrative in nature and is not intended to limit the embodiments of the subject matter or the application and uses of such embodiments. As used herein the word exemplary means serving as an example instance or illustration. Any implementation described herein as exemplary is not necessarily to be construed as preferred or advantageous over other implementations. Furthermore there is no intention to be bound by any expressed or implied theory presented in the preceding technical field background brief summary or the following detailed description.

Technologies and concepts discussed herein relate to debug techniques implemented using debug circuits which may be integrated with multiple electronic modules of an integrated circuit. Debug state machines DSMs are exemplary debug circuits that may be employed in a variety of contexts. For example a distinct DSM may be integrated with each of multiple cores of a multiple core central processing unit CPU as well as being integrated with other electronic modules of the CPU e.g. a Northbridge a Southbridge a Graphics Processing Unit GPU a special purpose processor other types of processors and so on in an embodiment. Embodiments also include apparatus and methods that facilitate inter communications between distinct DSMs within a single integrated circuit between DSMs of multiple integrated circuits of a multi chip module MCM and between DSMs of multiple packaged devices e.g. DSM inter communications from socket to socket . This inter communication is referred to herein as cross triggering. 

DSMs may provide significant visibility to what is occurring in the electronic modules with which they are integrated. By providing methods and apparatus by which DSMs may communicate with each other state related aspects of a system that involve simultaneous participation of multiple electronic modules e.g. multiple cores a Northbridge a Southbridge a GPU and so on may be more accurately debugged. In various embodiments the inter communications made possible with the cross triggers enables the activities of the various DSMs to be tracked and coordinated across an entire system. Accordingly the context of DSM activities across the entire system may be comprehended.

Before discussing the details of the various embodiments in detail certain terminology is defined below to enhance understanding of the various embodiments. As used herein a DSM refers to a discrete instantiation of debug circuitry e.g. a state machine that is integrated with an electronic module of a computing system and which is configured to detect one or more triggering events and to perform one or more responsive actions where both the triggering events and the actions are events that occur in the context of debug operations for the computing system.

A DSM is configured to provide visibility e.g. to external test equipment such as a Hardware Debug Tool HDT to the electronic module s functionality. The term integrated with as used herein to describe the coupling between a DSM and an electronic module means that the DSM is electrically and or communicatively coupled with portions of the electronic module that enable the DSM to detect signals produced by the electronic module and or other portions of the computing system within which the electronic module is integrated .

For example but not by way of limitation a DSM that is integrated with an electronic module may have access to one or more registers and or other data storage locations within the electronic module which enable the DSM to receive trace data that is produced and or received by the electronic module while the electronic module is performing various operations e.g. while the electronic module is executing software associated with a trace or test case . In an embodiment observability of the trace data is provided to a DSM by way of a debug bus which provides an interface between portions of the electronic module and the DSM with which it is integrated. A DSM that is integrated with an electronic module is included on the same die as the electronic module in an embodiment. The DSM may be included within the physical footprint of the electronic module or outside the physical footprint of the electronic module in various embodiments.

As used herein the term triggering event means an event detected by a DSM which causes the DSM to take a particular action e.g. based on a trigger to action mapping adhered to by the DSM . An event may be the receipt of a signal or a combination of signals the detection of a value e.g. a register clock or counter value or another event that is detectable by the DSM for example. Triggering events may be internal or external. An internal triggering event means an event that is generated within the DSM itself and which provides an impetus for the DSM to perform a responsive action. An external triggering event means an event that is generated or provided by a source external to the DSM e.g. a debug bus another DSM and so on and which also provides an impetus for the DSM to perform a responsive action.

One type of external triggering event is a cross trigger which is a signal that is conveyed over one or more dedicated communication lines between DSMs referred to herein as a cross trigger bus . Cross triggering is a term that is used to refer to communication methods and apparatus by which multiple DSMs of a computing system may communicate to coordinate their operations. U.S. Patent Publication No. 2012 0151263 A1 which is incorporated herein by reference as if fully set forth describes various modes of cross triggering.

Similar to triggering events actions also may be internal or external. An internal action is initiated by a particular DSM in response to a triggering event where the internal action has a direct effect within the DSM itself. For example but not by way of limitation an internal action may include the DSM performing a state transition generating a signal that is consumed within the DSM itself and updating a value in an internal register. In contrast an external action means a signal that is generated by a DSM in response to an internal or external triggering event where the external action is observable by other DSMs and or other components of the computing system. For example but not by way of limitation an external action may include the DSM generating a cross trigger on the cross trigger bus. In addition to providing cross triggers for analysis by other DSMs a DSM may perform the action of triggering external analysis equipment e.g. an HDT . DSMs also optionally may externally irritate as triggering events are detected where the term irritate may be defined as a DSM initiating or preventing events in logic external to the DSM.

The computing system may be implemented on a single die in an MCM and or as a plurality of discretely packaged devices e.g. socketed devices disposed on one or more printed circuit boards PCBs . In an embodiment DSMs that are integrated with multiple electronic modules of a single die communicate with each other over the cross trigger bus which also is an integral part of the die. In other embodiments discussed in more detail below DSMs of different die of an MCM may communicate cross triggers between each other and or DSMs in devices installed in different sockets of a PCB or multiple PCBs may communicate cross triggers between each other.

Computing system is contained on a motherboard a printed circuit board which includes one or more sockets busses slots connectors and conductors not illustrated with which various computing memory and other electrical components of the system are physically electrically and or communicatively coupled. More particularly computing system includes at least one microprocessor one or more input output I O peripherals and memory . Although computing system may include a number of other system components e.g. clocks power supplies other processing components discrete electronics and so on such components are excluded from and are not discussed herein for the purposes of clarity and simplicity.

The I O peripherals generally represent the hardware software and or firmware components configured to support communications to from the microprocessors and one or more peripheral or external devices. For example the I O peripherals may be realized as busses or other communications interfaces configured to support data transmission to from the microprocessors in accordance with one or more data communication protocols. Memory generally represents the main memory or primary memory for the computing system . Depending on the embodiment memory may be realized as a hard disk flash memory ROM memory RAM memory another suitable storage medium known in the art or any suitable combination thereof. Memory maintains data and or program instructions to support operations of the computing system and or microprocessors as will be appreciated in the art. In an exemplary embodiment memory that is implemented separately from microprocessors e.g. on another chip and or die may be understood as being external to microprocessors .

Microprocessor represents a discrete processing component that is implemented on a single die that is separately packaged from other system components whereas microprocessors represent processing components that form portions of an MCM i.e. an electronic package that includes multiple die and or other discrete components . Each of microprocessors may include one or more DSMs which may communicate and coordinate operations through the implementation of cross triggering. To implement die to die cross triggering cross triggers may be communicated between the DSMs via a Die to Die Communication Link DDCL or other communications interface between DSMs . In addition or alternatively cross triggering may be implemented between DSMs on die within different packages referred to herein as socket to socket cross triggering in another embodiment. For example cross triggering may be implemented between DSMs of microprocessors and which are housed in different packages.

Any one or more of microprocessors may comprise a SOC which includes a plurality of electronic modules each of which includes at least one DSM. is a block diagram of a SOC in accordance with an example embodiment. It should be understood that is a simplified representation of a SOC for purposes of explanation and ease of description and is not intended to limit the subject matter in any way. Practical embodiments of the SOC may include other devices and components for providing additional functions and features as will be understood.

In an exemplary embodiment SOC includes a plurality of processing cores each with an integrated DSM a plurality of trace data storage elements e.g. L2 caches and Trace Capture Buffers TCBs a Northbridge or memory controller with an integrated DSM a Southbridge with an integrated DSM a GPU with an integrated DSM and a cross trigger bus . Cross triggering to DSMs not illustrated on other die within the same package e.g. in an MCM and or other packages may be achieved via off chip DSM interface . Although depicts each of processing cores Northbridge Southbridge and GPU as including an associated DSM collectively some of these electronic modules may not include a DSM. In such cases the electronic module may instead simply port signals in and out as they relate to debug operations or some of these electronic modules may not support debug operations at all.

Although SOC is illustrated as including four cores a SOC may include more or fewer cores in other embodiments including as few as one single core . In addition although SOC is illustrated as including a single Northbridge Southbridge and GPU some or all of these electronic modules may be excluded from SOC e.g. they may be located off chip in other embodiments. Furthermore although SOC is illustrated as including only one Northbridge a SOC may include more than one Northbridge in other embodiments. Besides the processing components and busses illustrated in a SOC may include additional or different processing components busses and other electronic devices and circuitry in various embodiments.

Processing cores generally represent the main processing hardware logic and or circuitry for the SOC and each processing core may be realized using one or more arithmetic logic units ALUs one or more floating point units FPUs one or more memory elements e.g. one or more caches discrete gate or transistor logic discrete hardware components or any combination thereof. Although not illustrated in each processing core may implement its own associated cache memory element e.g. a level one or L1 cache in proximity to its respective processing circuitry for reduced latency.

Northbridge which also may be referred to as a memory controller in some systems is configured to interface with I O peripherals e.g. I O peripherals and memory e.g. memory . Northbridge controls communications between the components of SOC and the I O peripherals and or external memory. Southbridge which also may be referred to as an I O controller hub in some systems is configured to connect and control peripheral devices e.g. relatively low speed peripheral devices . GPU is a special purpose microprocessor which offloads and accelerates graphics rendering from cores .

In the illustrated embodiment caches and TCBs provide intermediary memory elements having reduced size relative to external memory for temporarily storing data and or instructions retrieved from external memory or elsewhere and or data produced by processing cores Northbridge Southbridge and GPU . For example in an embodiment caches and TCBs provide memory elements for storing debug information or trace data collected and or produced by DSMs during debug operations associated with the respective electronic modules with which they are integrated. In the illustrated embodiment caches are in close proximity to and coupled between a respective processing core and the Northbridge . In this regard caches may alternatively be referred to as core coupled caches and each core coupled cache maintains data and or program instructions previously fetched from external memory that were either previously used by and or are likely to be used by its associated processing core . Caches are preferably larger than L1 caches implemented by the processing cores and function as level two caches or L2 caches in the memory hierarchy. SOC also may include another higher level cache e.g. a level three or L3 cache not illustrated that is preferably larger than the L2 caches .

In an exemplary embodiment the SOC includes a test interface that comprises a plurality of pins dedicated for use in testing and or configuring the functionality of the SOC . In one embodiment the test interface is compliant with the IEEE 1149.1 Standard Test Access Port and Boundary Scan Architecture that is the Joint Test Action Group JTAG standards. Although the interconnections are not specifically illustrated in the DSMs are coupled to the test interface and receive signals and or bits from the test interface that establish or program a configuration for each DSM . In response each DSM operates according to the programmed configuration.

Each DSM may be configured e.g. programmed differently from the other DSMs in SOC and or in other parts of a computing system. More particularly a DSM may be programmed by establishing values in various DSM registers which essentially pre select which triggering events a DSM may take action in response to detecting and also pre select the corresponding actions. In addition certain triggering events and actions may not be programmable e.g. pre selectable and a DSM may take a particular action in response to a particular triggering event regardless of any DSM programming that may have been performed. As used herein the term widget refers to a software routine that is configured when executed to program a DSM in a particular way e.g. to establish particular DSM register values resulting in the pre selection of triggers state transitions and actions . In other words a widget may be considered a setup program for a DSM. A widget also may be defined as a machine readable program that enables a DSM to perform a set of state transitions in response to detecting that pre selected triggers were produced. Diagnostic software may be configured to coordinate the execution of a sequence of widgets to configure DSMs in various manners that provide a desired system visibility. The diagnostic software may be executed on the computing system e.g. computing system in which the DSMs are incorporated or on external test equipment.

According to an embodiment a DSM of an embodiment may support one or more functions selected from a group consisting of 1 trace start stop 2 trace filtering 3 cross triggering between DSMs 4 clock stopping 5 triggering external analysis equipment e.g. providing HDT interrupts and 6 providing a flexible microcode interface.

Cross triggering may be implemented via a cross trigger bus . Cross trigger bus may include one or more bi directional conductors which provide for signaling communication between DSMs . According to a particular embodiment cross trigger bus includes four parallel conductors although cross trigger bus may include more or fewer conductors in other embodiments. Cross trigger bus may be considered to be a communications interface between DSMs .

In response to detecting the occurrence of a triggering event for which a DSM automatically should respond or that the DSM has been programmed to respond to e.g. a pre select triggering event the DSM performs a corresponding action as mentioned previously. According to an embodiment a trigger to action map may be programmed into the DSM which instructs the DSM as to which particular action to perform when it detects a particular triggering event. The types of triggering events to which a DSM will respond and the responsive actions that the DSM will implement depend at least in part on the DSM s programming as mentioned above. In addition certain types of internal and external triggering events and certain types of internal and external actions may be commonly attributed to DSMs that are integrated with particular types of electronic modules e.g. DSMs through that are integrated with cores may take different actions in response to different triggering events from the actions taken in response to triggering events detected by a DSM that is integrated with Northbridge . For example but not by way of limitation a DSM may be programmed to take one or more actions in response to one or more triggering events as follows 

Internal triggering events A DSM may internally generate and respond to one or more internal triggering events selected from a group consisting of but not limited to a counter matching a first value a clock count matching a second value trace data matching a third value trace data exceeding a fourth value debug data matching a fifth value a debug bus bit having a pre defined state a debug bus bit transition occurring a random event occurring e.g. as determined based on seed polynomial match and mask registers and a flag being asserted.

External triggering events A DSM may detect and respond to one or more external triggering events selected from a group consisting of but not limited to receiving one or more signals from one or more sources external to the first electronic module wherein the one or more signals are selected from a group consisting of a cross trigger signal on the communications interface a trap signal a clock stop signal an error signal a performance monitor perfmon signal or event an interrupt a breakpoint a microcode based trigger e.g. breakpoints performance monitors interrupts and error events and a timer overflow.

Internal Actions In response to a triggering event a DSM may take one or more internal actions selected from a group consisting of but not limited to performing a state transition clearing a clock counter stopping a counter incrementing a general purpose counter toggling a state bit of a general purpose counter clearing a general purpose counter setting or clearing a flag toggling a random number and enabling a pseudo random event generator that may be used as a triggering event source for the DSM.

External Actions e.g. irritator actions In response to a triggering event a DSM may take one or more external actions selected from a group consisting of but not limited to generating a cross trigger signal on the communications interface e.g. asserting a cross trigger on the cross trigger bus a die to die cross trigger or a socket to socket cross trigger generating a core stop clock signal generating a die wide stop clock signal generating a self refresh signal for a memory e.g. memory generating a communication interface receive disable signal generating a trace store signal generating a machine check exception MCE signal generating a debug event signal triggering a debug microcode interrupt setting and clearing various bits in a DSM microcode register to be read by microcode upon a debug microcode interrupt starting storage of debug data to a state capture buffer e.g. to a TCB and or L2 cache stopping storage of debug data to a state capture buffer storing a clock count to a state capture buffer and changing the size of a queue.

Electronic module also includes one or more module units each of which may be configured to perform a set of actions or computations associated with the functionality of electronic module . DSM is integrated with the various module units by way of debug bus . Essentially debug bus functions as a conduit through which signals produced at various observability points within the module unit may be conveyed to DSM . Although only two observability points are shown in a multitude of observability points may be established along debug bus .

At each observability point various multiplexing structures may funnel data onto the debug bus . Some or all of the signals received via debug bus may be considered as triggering events by DSM which may invoke DSM to produce a cross trigger on a cross trigger bus as described in more detail elsewhere herein.

In the embodiment debug bus is configured as a ring bus although a debug bus may be differently configured as well e.g. a debug bus may have a parallel structure such as depicted in or similar star structure . In an embodiment debug bus is 64 bits wide although debug bus may be wider or narrower in other embodiments. An advantage to the ring bus structure is that the structure may provide data from numerous observability points without the necessity for extensive parallel routing. However the ring bus structure may have increased latency when compared with a parallel bus implementation particularly for observability points e.g. point that occur earlier in the ring bus.

DSM is integrated with various observability points of electronic module by way of debug bus and multiplexer MUX . Although MUX is shown as a single multiplexer MUX may be implemented as a hierarchical structure in other embodiments. In hierarchical debug bus structure a number of observability points may be linked in series with respect to other observability points that the bus serves.

Debug bus and MUX function as a conduit through which signals produced at the various observability points within electronic module may be conveyed to DSM . The output lines from MUX may be fed directly into DSM in an embodiment. Although only five observability points are shown in a multitude of observability points may be established on debug bus . At each observability point various multiplexing structures may funnel data onto the debug bus .

In the embodiment illustrated in debug bus is configured as a parallel bus. In an embodiment debug bus may have any number of parallel inputs to MUX although only five are shown in and the output lines may be 64 bits wide. Alternatively the output lines may be wider or narrower in other embodiments. Some or all of the signals received via output lines may be considered as triggering events by DSM which may invoke DSM to produce a cross trigger on a cross trigger bus as described in more detail elsewhere herein. An advantage to the parallel bus structure is that the structure may provide reduced latency when compared with the ring bus structure of . However the parallel bus structure may warrant more extensive parallel routing particularly when it is desirable to connect the debug bus to numerous observability points.

The actual circuitry of a DSM may have any of a number of configurations that are suitable to facilitate the performance of debug operations within a system. The observability points may be provided with debug bus wrapper circuitry to perform various debug processes in response to triggers with respect to the particular section of hardware being observed and to pass resultant debug data through the respective debug bus . In an embodiment the debug bus wrapper circuitry is integrated with its respective section of observed hardware and shares the power and or voltage domain of that section of hardware.

The power and or voltage domains of the respective sections of hardware observed at the observability points may differ from each other and from the power and or voltage domains of the respective DSM . One reason that the hardware sections may be configured with different power or voltage domains is to permit selected components to be switched off or powered at a lower level to conserve energy which may translate into longer battery life for battery powered devices.

For example in modern system on chip design various hardware sections may reside in dynamically controlled voltage domains. During a power off event a supply rail to an individual voltage domain may be completely shut off causing all digital state to be lost. Debugging in the presence of dynamically switching power domains is a challenge since the observability points e.g. the debug wrappers also lose their programmed states when the domain is powered down.

For debug it is desirable to have complete visibility of the functional hardware sectors before the power is removed and after the power is restored. Since the respective debug wrappers lose the programming state they were in prior to the power down event the debug bus does not have observation of a powered down sector when the sector powers up. In an example embodiment is provided that enables the debug bus to have observation as soon as the power is restored to be able to debug issues in the restoration process. The embodiment provides an example that addresses the issue by reprogramming the debug wrappers back to their original states to have a continued observation of the functional hardware sectors being debugged.

The example embodiment provided in illustrates a sample implementation where a debug bus data path traverses both an always on voltage domains and a dynamically powered voltage domain. In the example the debug circuitry includes a debug control circuitry that includes a DSM component a debug system register bus manager SRBM slave client that controls a debug SRBM register . A ring type debug bus is provided that communicates in series with a plurality of observability points associated with hardware sectors to provide test result data back to the DSM that may be stored in a trace capture buffer TCB . Although the debug bus in the example is of a ring configuration this example is equally applicable where the debug bus configuration is of another configuration such as depicted in or otherwise.

In the example of two hardware sectors are depicted that are integrated with respective debug wrappers where one sector resides in a dynamically controlled voltage domain and the other sector resides in an always on voltage domain. Although the term always on is used in this example the entire hardware component in which the debug circuitry resides may itself be selectively powered on and off. For example the debug circuitry associated with core of may be powered as a whole in the same selective manner that the core is powered with respect to the other cores and components of the SOC . As such always on is used as a term relative to the dynamically controlled voltage domain to indicate that the dynamically controlled voltage domain may be turned off while the always on domains remain on. This may also happen with respect to different dynamically controlled voltage domains since one such domain may be controlled differently from another such domain.

The example is non limiting. There may be any combination of hardware sector domains served by the debug bus including configurations where all of the hardware sectors reside in different dynamically controlled voltage domains.

The debug SRBM slave client coordinates the data sent over the debug bus in accordance with instructions received from a SRBM master controller . Data such as configuration and or programming data for the debug wrappers becomes deposited in the SRBM register which is then conveyed by the SRBM slave client via the debug bus to the appropriate debug wrapper to configure and or program the wrapper or to make changes in the wrapper s configuration or programming as may be desirable for a particular debugging procedure.

Where for example the debug bus is in a star configuration the SRBM register data may be directly conveyed to the respective wrappers as indicated by the dashed lines . In the case of the ring type debug bus the data is conveyed in series along the ring to the respective wrappers .

A power management controller is operable to control the power to the various power domains of the hardware sectors . It may also provide information as to which domains are on and which are off as well as information when a power state transition is to occur for a particular power domain.

To quickly restore for example the programming of a debug wrapper that resides in a dynamically controlled voltage domain a shadow SRBM register is provided to save copies of the data most recently used for programming such debug wrappers.

In the example the power management controller is responsible for controlling the power state transitions for the dynamically controlled power domains such as the one for hardware sector . The power management controller also communicates to the debug circuitry via the SRBM master controller .

The debug wrappers may be programmed using the SRBM network independent of the physical location of the programming registers. The power management controller may have access to all programmable registers of the debug bus via the same register network.

For a case when hardware sector of is being debugged and its domain gets powered down the wrapper loses its original programmed state. At a restoration of power the debug bus cannot properly access the hardware sector via its wrapper since the wrapper has lost its programming when the power was shut off. It will be recognized that there may be a plurality of sectors within a hardware component residing in the same dynamically controlled voltage domain that each has an associated debug wrapper. The example is equally applicable to such circumstance.

The debug circuitry power management controller and the master SRBM reside in an always on power domain and may act to immediately restore the programming configuration of debug wrapper through the use of shadow SRBM register .

The debug wrapper via the debug bus may be programmed by writing to the programmable SRBM register . The content of this register is then also stored in the shadow SRBM register so that it may later be read back by the power management controller to program the debug wrapper back to its pre off transition state after power is restored to the less on domain in which hardware sector resides.

In the example the power management controller is aware of the power state events and may auto initiate a read transaction from the shadow SRBM register . Programmable register circuitry may be added to the debug circuitry to indicate to the controller if a write transaction to the debug bus registers need to be executed to avoid performance penalty in functional modes.

An example of the functioning and a sample programming sequence for the register of the programmable register circuitry in the save and restore process is described below.

Register DBGSAVERESTORE EN 1 0 may be programmed in advance of the debug bus being used. Register is programmed with an indication of whether the save restore process is to be started DBGSAVERESTORE START.

The power management controller via the SRBM network may read register . DBGSAVERESTORE EN 0 0 may indicate that controller will restore the debug bus wrapper from the shadow SRBM register . DBGSAVERESTORE EN 1 1 may indicates that when DBGSAVERESTORE START 1 the Debug State Machine will be triggered to indicate that it should ignore data on the debug bus with respect to sectors residing in the dynamically controlled voltage domain in the example sectors .

The power management controller programming sequence may proceed as follows when the dynamically controlled voltage domain of for example sector powers up after getting powered down by the controller 

For the sake of brevity conventional techniques related to integrated circuit design caching memory operations memory controllers and other functional aspects of the systems and the individual operating components of the systems have not been described in detail herein. Furthermore the connecting lines shown in the various figures contained herein are intended to represent exemplary functional relationships and or physical couplings between the various elements. It should be noted that many alternative or additional functional relationships or physical connections may be present in an embodiment of the subject matter. In addition certain terminology may also be used in the following description for the purpose of reference only and thus are not intended to be limiting and the terms first second and other such numerical terms referring to structures do not imply a sequence or order unless clearly indicated by the context.

The foregoing description refers to elements or nodes or features being connected or coupled together. As used herein unless expressly stated otherwise connected means that one element node feature is directly joined to or directly communicates with another element node feature and not necessarily mechanically. Likewise unless expressly stated otherwise coupled means that one element node feature is directly or indirectly joined to or directly or indirectly communicates with another element node feature and not necessarily mechanically. Thus although the figures may depict one exemplary arrangement of elements additional intervening elements devices features or components may be present in an embodiment of the depicted subject matter.

While at least one exemplary embodiment has been presented in the foregoing detailed description it should be appreciated that a vast number of variations exist. It will also be appreciated that the exemplary embodiment or embodiments described herein are not intended to limit the scope applicability or configuration of the claimed subject matter in any way. Rather the foregoing detailed description will provide those skilled in the art with a convenient and edifying road map for implementing the described embodiment or embodiments. It will be understood that various changes may be made in the function and arrangement of elements without departing from the scope defined by the claims which includes known equivalents and foreseeable equivalents at the time of filing this patent application.

