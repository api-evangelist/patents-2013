---

title: Classifying sets of malicious indicators for detecting command and control communications associated with malware
abstract: Techniques may automatically detect bots or botnets running in a computer or other digital device by detecting command and control communications, called “call-backs,” from malicious code that has previously gained entry into the digital device. Callbacks are detected using an approach employing both a set of high quality indicators and a set of supplemental indicators. The high quality indicators are selected since they provide a strong correlation with callbacks, and may be sufficient for the techniques to determine that the network outbound communications actually constitute callbacks. If not, the supplemental indicators may be used in conjunction with the high quality indicators to declare the outbound communications as callbacks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09635039&OS=09635039&RS=09635039
owner: FireEye, Inc.
number: 09635039
owner_city: Milpitas
owner_country: US
publication_date: 20130515
---
The present invention relates generally to network security and more particularly to detecting malicious software operating in computers and other digital devices.

Malicious software or malware for short may include any program or file that is harmful by design to a computer. Malware includes computer viruses worms Trojan horses adware spyware and any programming that gathers information about a computer or its user or otherwise operates without permission. The owners of the computers are often unaware that these programs have been added to their computers and are often similarly unaware of their function.

Malicious network content is a type of malware distributed over a network via Web sites e.g. servers operating on a network according to an HTTP standard or other well known standard. Malicious network content distributed in this manner may be actively downloaded and installed on a computer without the approval or knowledge of its user simply by the computer accessing the Web site hosting the malicious network content the malicious Web site . Malicious network content may be embedded within objects associated with Web pages hosted by the malicious Web site. Malicious network content may also enter a computer on receipt or opening of email. For example email may contain an attachment such as a PDF document with embedded malicious executable programs. Furthermore malicious content may exist in files contained in a computer memory or storage device having infected those files through any of a variety of attack vectors.

Various processes and devices have been employed to prevent the problems associated with malicious content. For example computers often run antivirus scanning software that scans a particular computer for viruses and other forms of malware. The scanning typically involves automatic detection of a match between content stored on the computer or attached media and a library or database of signatures of known malware. The scanning may be initiated manually or based on a schedule specified by a user or system administrator associated with the particular computer. Unfortunately by the time malware is detected by the scanning software some damage on the computer or loss of privacy may have already occurred and the malware may have propagated from the infected computer to other computers. Additionally it may take days or weeks for new signatures to be manually created the scanning signature library updated and received for use by the scanning software and the new signatures employed in new scans.

Moreover anti virus scanning utilities may have limited effectiveness to protect against all exploits by polymorphic malware. Polymorphic malware has the capability to mutate to defeat the signature match process while keeping its original malicious capabilities intact. Signatures generated to identify one form of a polymorphic virus may not match against a mutated form. Thus polymorphic malware is often referred to as a family of virus rather than a single virus and improved anti virus techniques to identify such malware families is desirable.

Another type of malware detection solution employs virtual environments to replay content within a sandbox established by virtual machines VMs that simulates or mimics a target operating environment. Such solutions monitor the behavior of content during execution to detect anomalies and other activity that may signal the presence of malware. One such system sold by FireEye Inc. the assignee of the present patent application employs a two phase malware detection approach to detect malware contained in network traffic monitored in real time. In a first or static phase a heuristic is applied to network traffic to identify and filter packets that appear suspicious in that they exhibit characteristics associated with malware. In a second or dynamic phase the suspicious packets and typically only the suspicious packets are replayed within one or more virtual machines. For example if a user is trying to download a file over a network the file is extracted from the network traffic and analyzed in the virtual machine using an instance of a browser to load the suspicious packets. The results of the analysis constitute monitored behaviors of the suspicious packets which may indicate that the file should be declared malicious. The two phase malware detection solution may detect numerous types of malware and even malware missed by other commercially available approaches. Through its dynamic execution technique the two phase malware detection solution may also achieve a significant reduction of false positives relative to such other commercially available approaches. Otherwise dealing with a large number of false positives in malware detection may needlessly slow or interfere with download of network content or receipt of email for example. This two phase approach has even proven successful against many types of polymorphic malware and other forms of advanced persistent threats.

In some instances malware may take the form of a bot a contraction for software robot. Commonly in this context a bot is configured to control activities of a digital device e.g. a computer without authorization by the digital device s user. Bot related activities include bot propagation to attack other computers on a network. Bots commonly propagate by scanning nodes e.g. computers or other digital devices available on a network to search for a vulnerable target. When a vulnerable computer is found the bot may install a copy of itself and then continue to seek other computers on a network to infect.

A bot may without the knowledge or authority of the infected computer s user establish a command and control CnC communication channel to send outbound communicates to its master e.g. a hacker or herder or a designated surrogate and to receive instructions back. Often the CnC communications are sent over the Internet and so comply with the Hypertext Transfer Protocol HTTP protocol. Bots may receive CnC communication from a centralized bot server or another infected computer peer to peer . The outbound communications over the CnC channel are often referred to as callbacks and may signify that bots are installed and ready to act. Inbound CnC communications may contain instructions directing the bot to cause the infected computers i.e. zombies to participate in organized attacks against one or more computers on a network. For example bot infected computers may be directed to ping another computer on a network such as a bank or government agency in a denial of service attack often referred to as a distributed denial of service attack DDoS . In other examples upon receiving instructions a bot may a direct an infected computer to transmit spam across a network b transmit information regarding or stored on the infected host computer c act as a keylogger and record keystrokes on the infected host computer or d search for personal information such as email addresses contained in an email or a contacts file . This information may be transmitted to one or more other infected computers to the bot s master.

Further enhancement to effective detection of malware callbacks while avoiding false positives is desirable of course particularly as malware developers continue to create new exploits including more sophisticated bots and botnets having potentially serious consequences.

Techniques may automatically detect bots or botnets running in a computer or other digital device by detecting command and control communications called call backs from malicious code that has previously gained entry into the digital device. Callbacks are detected using an approach employing both a set of high quality indicators and a set of supplemental indicators. The high quality indicators are selected since they provide a strong correlation with callbacks and may be sufficient for the techniques to determine that the network outbound communications actually constitute callbacks. If not the supplemental indicators may be used in conjunction with the high quality indicators to declare the outbound communications as callbacks.

Detecting callbacks as described herein as a keystone of malicious attack and exploit analysis may permit embodiments of the invention to detect disparate forms of malware and even families of polymorphic virus that use the same communication mechanisms to obtain instructions and other communications in furtherance of their nefarious purposes.

Generally speaking a bot is a type of or part of an active infiltration attack often installing or operating in a two step process. The first step is the initial infection which may be a typically small package of malicious code malware whose function is to compromise the infected device. The second step involves that malware obtaining instructions as to malicious activity it is to perform including possibly downloading additional malware e.g. over the Internet or sending messages or data from the infected computer. This second step often involves establishing a CnC channel over which it may send a message providing its status or requesting CnC communications instructions . This is called a callback and the exchange of such communications may be referred to as callback activity.

The CnC may use an undocumented entry point or subvert and use a documented entry point to request instructions over a CnC channel which are often transmitted over the same or other channels. Often the CnC channel is established via a non standard port provided by the operating system of the infected device. In so doing the bot bypasses normal security and authentication mechanisms and thereby achieves unauthorized egress from the computer. A hallmark of bots is the manner by which they utilize egress points for callbacks is designed to remain undetected to the digital device s user and system network administrators.

Embodiments of the invention provide a computer implemented method for detecting callbacks from malicious code in network communications. The method includes generating a set of high quality indicators and a set of supplemental indicators associated with each of the network communications. The high quality indicators have a strong correlation with callbacks and the supplemental indicators having a lower correlation with callbacks than the high quality indicators. The method also includes classifying each of the network communications as to whether each constitutes a callback using the high quality indicators if sufficient to determine that the associated network communication constitutes a callback and otherwise using the supplemental indicators in conjunction with the high quality indicators.

In some embodiments the method may be practiced to generate the high quality indicators which may entail the steps of i extracting at least one of a destination URL destination IP address and destination domain from each network communication ii determining a reputation indicator associated with each of the at least one destination URL destination IP address and destination domain and thereupon ii including each of the reputation indicators in the set of high quality indicators used to classify the network communication. For performing the classification these embodiments may also assign a weight and a score to each of the reputation indicators.

In some embodiments the method may be practiced to generate the supplemental indicators which may entail the steps of i inspecting packet headers of each of the network communications to identify one or more protocol anomalies and ii evaluating each of the identified protocol anomalies by assigning a weight to each reflecting its correlation with callback activity and non callback activity as well as an overall score s for the supplemental indicators.

In another aspect of these embodiments a malware name may be identified and associated with discovered callbacks. This entails forming a malware marker from each network communication constituting a callback and performing a database look up using the malware marker to identify a malware name associated therewith. The malware name so identified may i have the same malware marker as the callback in which case these embodiments may declare the callback by that name ii have a high correlation with the malware marker but not the same malware marker in which case these embodiments may classify the callback as associated with a family related to the malware name iii not have a high correlation with any malware name in the database in which case these embodiments may declare that a new malware has been discovered.

While the foregoing description pertains to embodiments of the invention practicing a computer implemented method embodiments may constitute systems apparatus or computer program products as well as will be apparent from the following description.

Throughout this specification reference is made to HTTP communications protocols and protocol anomalies. HTTP is an application layer protocol widely used for data communications for the World Wide Web. The Request for Comment RFC 2616 Hypertext Transfer Protocol HTTP 1.1 specification sets out the semantics and other requirements for HTTP communications. HTTP resources are identified and located on a network by Uniform Resource Locators URLs . Employing a client server computing model HTTP provides data communication for example between one or more Web browsers running on computers or other electronic devices constituting the clients and an application running on a computer or other electronic device hosting a Web site constituting the server. HTTP is a request response protocol. For example a user clicks on a link on their Web browser which sends a request over the Internet to a web server hosting the Web site identified in the request. The server may then send back a response containing the contents of that site including perhaps text and images for display by the user s browser.

The HTTP specification defines fields of HTTP headers which are components of HTTP messages used in both requests and responses and define the operating parameters of an HTTP communication or transaction. The header fields are transmitted after the request or response line which is the first line of a message. As noted the HTTP semantics are well defined for example Header fields are colon separated name value pairs in clear text string format. Each field is terminated by a carriage return CR and line feed LF character sequence. The end of the header fields is indicated by an empty field resulting in the transmission of two consecutive CR LF pairs. Variations from the specified semantics constitute anomalies. Also the HTTP specification allows users to define their own fields and content though often practice and convention dictate how those fields are used and what content may be expected. Variations from those conventions may also be deemed anomalies. Finally sometimes malware authors will insert content into the fields such as malware names or other tell tail malware descriptors or indicators which serve as strong evidence of malicious activity. These too will be deemed anomalies for purposes of this specification.

For communication an HTTP header is added to an HTTP message and placed in a TCP UDP message sometimes more than one TCP UDP message per HTTP message which in turn is encapsulated as payload in an IP Datagram which is encapsulated as payload in a Layer 2 Frame which is sent as a signal over the transmission medium as a string of binary numbers. Each Layer 2 Frame has in order a Layer 2 header an IP header a TCP or UDP header a HTTP header HTTP data etc. and finally a Layer 2 footer. Taking this explanation one step further the IP layer includes in its header the information necessary for the packet to find its way to its final destination. More specifically for computer to computer communication across networks a source device forms packets for transmission by placing the IP address of the destination computer in the IP header of each packet involved in a communication session. The data packets are encapsulated as noted above and placed on the network and routed across the network to the destination having the specified IP address. In this specification reference will be made to packets which shall be used in a broad sense to include without limitation messages datagrams frames and of course packets unless the context requires otherwise. Accordingly packet capture techniques may yield the HTTP header IP address of the destination of an IP packet as well as domain identifiers from the URL of HTTP headers included in the IP packets.

The network interface is configured to receive outbound communications such as communications containing HTTP packets sent from one or more computing devices. The network interface may include a network tap adapted to make a copy of the outbound communications as further described hereinbelow.

The pre processor or pre processing engine is configured to receive the outbound communications or in some embodiments a copy thereof and to inspect the outbound communications to determine whether they should be submitted for further analysis by the analyzer .

The analyzer or analyzing engine is configured to perform an analysis on the outbound communications received from the pre processor . The analysis may take the form of static analysis as opposed to dynamic analysis involving execution as may be carried out in a virtual environment as described hereinbelow. The analyzer includes a recommender and a supplemental influencer generator . The purpose and operation of these two components will be described at some length.

The classifier or classification engine is configured to receive the results generated by both the recommender and the supplemental influencer generator for the purpose of classifying whether each of the outbound communications constitutes a command and control communication of a malicious nature. The classifier uses both a set of high quality indicators and a set of supplemental indicators for assessing each outbound communication. The high quality indicators provide a strong correlation between outbound communications and callbacks and may be sufficient for the techniques to determine that the outbound communications constitute callbacks. If not the supplemental indicators may be used in conjunction with the high quality indicators to declare the outbound communications as callbacks. The classifier assigns scores to the high quality indicators and supplemental indicators and uses the scores in ascertaining whether to classify each outbound communication as constituting a callback.

The report generator or reporting engine is configured to generate an alert and in some embodiments also a detailed report based on the output results of the analyzer and classifier . It also may generate a set of generic indicators high quality and supplemental which can be used to detect similar callbacks in future. In some embodiments the alert and or report may include a common name or label of a malware identified by the report generator . The furnished name is selected based on it having a high correlation with the associated outbound communication. In other words the outbound communication may have characteristics associated with a known malware the report generator will discover the known malware name and the alert and or report will present its name to guide actions to be taken e.g. of a remedial nature. In some cases the callback detection and analysis system will have discovered such a strong correlation with characteristics of a known malware that the communication will be deemed associated with that same malware and in other cases the callback detection and analysis system will have discovered a sufficiently high correlation with the known malware that the communication will be deemed a member of the same family as the named malware.

The user interface is configured for providing the alert and or report from the report generator e.g. to a user or administrator. The administrator may be a network administrator or a security operations technician responsible for dealing with exploits.

High quality indicators represent features or characteristics of the outbound communications that have high probative value in classifying whether the outbound communications are command and control communications. Consequently when identified for the outbound communications the high quality indicators have a high correlation with those associated with command and control communications. For example the high quality indicators may include negative reputation of the domains URLs or IP addresses associated with the outbound communications.

Supplemental indicators represent features or characteristics of the outbound communications that have lower probative value compared with the high quality indicators in classifying whether the outbound communications are command and control communications. Consequently when identified for the outbound communications the supplemental indicators have lower though positive correlations with those associated with command and control communications. For example the supplemental indicators may include select protocol anomalies in the outbound communications.

Returning to in step logic performs a classification on the outbound communications based on the high quality indicators and the supplemental indicators identified by the analyzing step .

Then in step logic generates an alert and or report providing details regarding the outbound communications including whether the outbound communications constitute command and control communications associated with malware. In some cases the alert and or report may also provide a name or label associated with the malware.

The description of embodiments of the invention will next deal with certain terms of art for which a short digression may aid understanding. As is well known in the art the term domain or domain name refers to a collection or string of characters that uniquely signify a domain within the Internet. A domain name is a significant part of a URL short for Uniform Resource Locator an Internet address used by Web browsers to locate a resource on the Internet. The resource can be any type of file stored on a server such as a Web page a text file a graphics file a video file or an application program.

As is also well known a URL contains at least three elements i the type of protocol used to access the file e.g. HTTP for a Web page the domain name or IP address of the server where the file resides and optionally the pathname to the file i.e. a description of the file s location . For example the URL given by http www.acme.com patent instructs a browser to use the HTTP protocol go to the www.acme.abc.com web server to access the file named patent . The domain name itself is structured hierarchically with the top level domain or TLD in this example being .com . Other commonly used TLDs include .net and .org. In addition to these there are TLDs for countries such as .US .AU and .UK. There are also TLDs for schools the military and government agencies namely .edu .mil and .gov. The term Second level domain refers to the string immediately to the left of that dot. In the above example the second level domain is acme . Third level domain in this example refers to www . Often the domain names will specify well known company names or perhaps it is better described as domains encapsulate or refer to host names and the host names often correspond to company names. Consider the example www.google.com. The second level domain here is google a domain registration currently owned by Google Inc. Consequently as can be understood from the above examples a URL can usually be parsed to indicate at least some of the following a host name a host s IP address a country a company name and an organization s name.

Returning to the figures is a block diagram depicting a pre processor in accordance with an illustrative embodiment of the invention. The pre processor has an extractor similarity detector and pre filter . The extractor is configured to receive outbound communications for example from the network interface of and to parse the packets of the outbound communication to extract select component parts thereof sometimes referred to as factors used in the analysis and naming aspects of the embodiments described herein. The factors may include a domain name a URL a host IP address user agent and or URI parameters among others.

The similarity detector sometimes referred to as a duplicity checker is configured to determine whether the callback detecting and analyzing system has previously analyzed the same outbound communications. The similarity detector may perform this for each outbound communication by forming a hash pursuant to a hash algorithm such as Md5 as is known is the art from select factors to identify the header of the communication performing a look up of the hash in a database of hashes identifying previously analyzed outbound communications as provided for example in repository . The database of repository may also contain the results of analysis of such communications. If the outbound communication currently being scrutinized is found in that is matches an entry in the repository and the entry identifies the corresponding outbound communication as constituting a command and control communication this result is reported in step as illustrated at arrow A and no further analysis of that communication is required. Of course in some cases it may be desirable to continue to analyze even such communications so as to acquire additional intelligence regarding the malware.

The pre filter or pre filtering engine is configured to obtain the domain name from the outbound communication to access a database stored in repository of whitelisted domains and determine whether the domain of the current outbound communication matches any of the entries of whitelisted domains. The whitelist of domains is a collection of domains believed to be safe i.e. free of malware. Safe domains may include those of well known companies organizations schools and government agencies and departments. Lists of such safe domains are commercially available publically available on the Internet or may be compiled for these purposes through various means.

The pre processor generates communication candidates deserving of further analysis. Those that have already been processed in earlier testing and found to be either malware or safe as determined by the similarity detector need not be further analyzed. Similarly those that correspond to any of the whitelisted domains as determined by the pre filter need not be further analyzed.

The HQI generator is configured to select and store indicators discovered in the outbound communications under test having a high correlation with command and control communications. The HQI generator includes a reputation checker an other strong indicator OSI detector and an indicator repository . The reputation checker is configured to check the reputation of e.g. the domain IP address or URL or a combination of two or more of the foregoing as extracted by the extractor from the packet headers included in the outbound communications. The reputation of the domain IP address and or URL may be a strong indication that the outbound communication is or is not a callback. The reputation checker may check for the reputation by looking up the factors in the indicator repository which contains a database of information providing the reputation for a plurality of factors. For example if the domain name is google.com the database may indicate a strong favorable reputation associated with Google Inc. The OSI detector will perform a similar check with respect to any of a variety of other indicators that may provide a high correlation to callback or non callback communications. These shall be discussed shortly.

The HQI evaluator or evaluation engine is configured to assign weights and scores to the discovered HQI and pass the scores to the classifier . The HQI evaluator includes a weight assignment engine and a scoring engine . The weight assignment engine is configured to assign a weight to each of the discovered HQI in accordance with its perceived correlation with callbacks. The weights may be for example an assignment of a numerical value between 1 and 10 where 1 is a low correlation and 10 is a high correlation. The weights may be based on experiential information that is historical information of indicators associated with previously identified callbacks or based on machine learning. The scoring engine receives the weighted HQI and develops an overall score for them. For example the overall score may be the highest weighted value of any of the HQI or the average median or mode of the values of the HQIs or may reflect only those HQI having a value above a certain threshold and then mathematically combined in some fashion e.g. average median or mode . It should be noted that in some embodiments of the invention plural HQI scores may be generated from the weighted values. For example a first score may be calculated based on a predetermined number of the highest weighted values and a second score may be calculated based on a predetermined number of the next highest weighted values. Each of the HQI scores is passed to the classifier. The HQI repository is configured to store the HQI score s and other information regarding the HQI.

In step logic generates HQI based on the received IP addresses. The IP address based HQI may include for example indicators based on information regarding reputation etc. For example for purposes of generating HQI related to reputation the logic looks up the received IP address if available in the indicator database to obtain information specifying a reputation associated therewith if such information is available and generates an IP address reputation indicator based on the information obtained from the indicator database.

In step logic generates HQI based on the received domain. The domain based HQI may include for example indicators based on for example information regarding reputation information from a publically available database such as the database called WHOIS information regarding TLD s information regarding traffic rates or rank for that domain etc. For example for purposes of generating HQI related to reputation the logic looks up the received domain if available in the indicator database to obtain information specifying a reputation associated therewith if such information is available and generates a domain reputation indicator based on the information obtained from the indicator database.

In step logic generates HQI based on a received URL. The URL based HQI may include for example indicators based on information regarding reputation number of parameters in the headers name of each parameter etc. For example for purposes of generating HQI related to reputation the logic looks up the received URL in the indicator database to obtain information specifying a reputation associated therewith if such information is available and generates an URL reputation indicator based on the information obtained from the indicator database. In step logic evaluates the generated HQI assigns weights to each develops an overall HQI store for the outbound communication and stores the HQI stores. Then the logic provides the HQI scores to the classifier .

The SI evaluator or evaluation engine is configured to assign weights and scores to the discovered SI and pass the scores to the classifier . The SI evaluator includes a weight assignment engine and a scoring engine . The weight assignment engine is configured to assign a weight to each of the discovered SI in accordance with their perceived correlation with callbacks. The weights may be for example a numerical value between 1 and 10 where 1 is a low correlation and 10 is a high correlation. The weights may be based on experiential information that is historical information of indicators associated with previously identified callbacks or based on machine learning. The scoring engine receives the weighted SI and develops an overall score for discovered SIs. For example the overall score may be the highest weighted value of any of the SI or the average median or mode of the values of the SIs or may reflect only those SI having a value above a certain threshold and then mathematically combined in some fashion e.g. average median or mode . It should be noted that in some embodiments of the invention plural SI scores may be generated from the weighted values. For example a first score may be calculated based on a predetermined number of the highest weighted values and a second score may be calculated based on a predetermined number ofthe next highest weighted values. Each of the SI scores is passed to the classifier. The SI repository is configured to store the SI score s and other information regarding the SI.

A further word must be added regarding the high quality indicators and supplemental indicators. Since malware evolves as malware writers devise alternative exploits and seek to evade detection the indicators used in embodiments of the invention will likely also evolve. Certain indicators may be regarded as HQI and will need to later be used as SI or vice versa. Indeed certain indicators used for HQI or SI may need to be dropped in their entirety in the future and other indicators may take their place. Accordingly the indicators described herein as usefully employed by the various embodiments should be regarded as examples.

Consequently it can now be understood that the high quality indicators may be used alone to determine whether or not the outbound communication constitutes a callback but even if they fail to indicate that a callback is present the supplemental indicators may be used to influence the classification or decision. Clearly the HQI and SI can now be seen as aptly named.

At this point it is worth emphasizing discovery that the outbound communication constitutes a callback indicates that the source of the outbound communication is infected with malware such as a bot and this may be a serious condition requiring immediate attention.

Returning to the reporting generator is configured as noted above to issue an alert reflecting the classification made by the classifier with respect to each outbound communication. The reporting generator includes a callback marker engine and a naming engine . The callback marker engine is configured to generate an identifier or marker for each callback discovered by the callback detection and analysis system . The naming engine uses the callback marker to attempt to identify a name of known malware that corresponds to the outbound communication either in that the newly discovered callback is likely the same as the known malware or in that the newly discovered callback is likely of the same family as the known malware. In either case the name is a useful designation and may be used by users and administrators as a suitable handle for the newly discovered malware may indicate the severity of the newly discovered malware and even may indicate the actions or remediation to be employed in light of the newly discovered malware. is a flowchart of method for operating the naming engine in accordance with an illustrative embodiment. In step logic receives packet information for an outbound communication constituting a callback and extracts select fields therefrom constituting a domain and URL pattern that may be used as a marker for the callback. For example the pattern may be temp www z.php t . In step logic correlates the pattern with those of reported bot callbacks by accessing a pattern database stored in repository . The database may be stored locally and updated from time to time with additional patterns for discovered bot callbacks. Next in step logic decides whether the current pattern is the same as any of the stored patterns. If it is in step logic reports the name of the malware having that pattern has been discovered. A look up in a database of the example pattern indicator given above may result in a match with an entry identifying it as a match for the malware known by the name Backdoor.CYGATE.A . If the two patterns are not the same in step logic decides whether the two patterns have a sufficiently high correlation which may be for example any correlation value above a pre determined threshold . If they do in step logic reports that the newly discovered malware is of the same family as the named malware having the highly correlated pattern. If no stored pattern has a sufficiently high correlation to the pattern of the newly discovered callback in step logic may reportthat a new type of malware has been discovered. The name and marker for the newly discovered malware may then be provided to a user or administrator via a user interface e.g. by a display or through wired or wireless communication of an alert or more fully through a report.

It can now be seen that aspects of the foregoing embodiments relate to assessing reputation information based on URL IP address and or domain metadata. Features that may provide an indication of reputation may include 

Additionally embodiments may involve using information or indicia of a reputation based at least in part on the corporate or business identity associated with the URL domain or IP address. The corporate reputation may be based at least in part on one or more of the following Better Business Bureau rating and ranking of the corporation e.g. in the Fortune 1000 Fortune 500 Fortune 100 corporate address how long the company has been in existence how long its Web site has been in existence whether the corporation has an IP address in a range of addresses with a poor reputation whether the corporation is associated with spamming or a spammer Web site popularity rank etc.

The foregoing reputation information may be collected in a database and or be available through reputation Web sites such as those associated with Better Business Bureau online TrustE P3P Hackersafe certification Fortune 1000 Hoovers D B Yellow Pages DMOZ The Open Directory Project Yahoo credit card certified online merchants or the like. Further information of reputation indicia may be had with reference to United States Patent Application 2013 0014020 filed Sep. 15 2012 and entitled Indicating Web site Reputations during Web site Manipulation of User Information whose disclosure is incorporated herein by reference.

The databases stored in various repositories described above may store data of a dynamic nature which is subject to change as more information is obtained regarding malware for instance. Various databases are described above as having data that may be developed using principles of machine learning. Machine learning refers to a process or system that can learn from data i.e. be trained to distinguish between good and bad or in this case between malicious and non malicious and classify samples under test accordingly or develop indicators having a high correlation to those that are malicious. Core principals of machine learning deal with representation and generalization that is representation of data instances e.g. reputation or anomaly information and functions performed on those instances e.g. weighting and scoring . Generalization is the property that the process or system uses to apply what it learns on a learning set of known or labeled data instances to unknown or unlabeled examples. To do this the process or system must extract learning from the labeled set that allows it to make useful predictions in new and unlabeled cases. For example weighting of indicators e.g. reputation or anomalies as practiced in some embodiments described above may entail machine learning to assure proper weights are assigned to the appropriate indicators of a current outbound communication to reflect their correlation with known malware. The data for assigning the weights may need to be updated from time to time whether on an aperiodic or periodic basis e.g. every three or six months to reflect changes in malware then identified. Similarly the data used for scoring as described above may also need to be updated from time to time for the same reason. One way of updating the data in either case is to use machine learning for example in a malware forensic lab to develop the appropriate data to adjust the weights and scores and for that matter the thresholds and databases used in the described embodiments.

The memory may include for example RAM and or ROM. The storage system also permanently or temporarily stores data. The storage system may include for example one or more hard drives and or flash drives or other form of mass storage. The storage in memory and storage is not to be regarded as being transitory in nature. The repositories may be implemented as either memory or storage system or a combination thereof.

The controller may also have a communication network interface an input output I O interface and a user interface . The communication network interface may be coupled with a communication network via a communication medium . The communications network interface may communicate with other digital devices not shown via the communications medium . The communication interface may include a network tap . The bus may provide communications between the communications network interface the processor the memory system the storage system the I O interface and the user interface .

The I O interface may include any device that can receive input from or provide output to a user. The I O interface may include but is not limited to a flash drive a compact disc CD drive a digital versatile disc DVD drive or other type of I O peripheral not separately shown . The user interface may include but is not limited to a keyboard mouse touchscreen keypad biosensor display monitor or other human machine interface not separately shown to allow a user to control the controller . The display monitor may include a screen on which is provided a command line interface or graphical user interface.

In various embodiments of the invention a number of different controllers for example each of a type as illustrated and described for controller may be used to implement the invention. For example a separate controllers may be used for each of the pre processor analyzer classifier and report generator of or for groups of or all of the foregoing components. Separate controllers may also be employed for the recommender and supplemental generator of . Moreover logic for implementing any of the methods described herein may be implemented in computer programs stored in persistent and non transitory memory locations such as in memory system or in peripheral storage devices coupled to the controller via the I O interface and executed by the processor . Likewise repositories described herein may be implemented in locations of the memory system and or such peripheral storage devices.

In some embodiments a malware detection system or station see located at a customer facility may implement both the network interface and pre processor with one or more controllers and a malware forensic system or station not shown e.g. located at a malware service provider s facility may implement the analyzer and classifier with one or more controllers. In these embodiments the malware detection station and the forensic station may be coupled for communication over a network. Of course other combinations of these components may be co located. These embodiments lend themselves to SaaS or Software as a Service business models with cloud based facilities. Additionally the malware detection system may be integrated into a firewall switch router or other network device.

Referring to an exemplary block diagram of a communication system deploying a plurality of malware content detection MCD systems N 1 e.g. N 3 communicatively coupled to a management system via a network is shown. In general management system is adapted to manage MCD systems . For instance management system may be adapted to cause malware signatures and other information generated as a result of malware detection by any of MCD systems to be shared with one or more of the other MCD systems including for example where such sharing is conducted on a subscription basis.

Herein according to this embodiment of the invention first MCD system is an electronic device that is adapted to i intercept data traffic that is routed over a public communication network or a private communication network between at least one server device and at least one client device and ii monitor in real time content within the data traffic. For purposes of detecting callbacks in the data traffic the MCD system intercepts and monitors data traffic outbound via private network from at least one client device . For purposes of detecting malicious content headed to the at least one client device the MCD system intercepts and monitors ingress traffic en route via public network e.g. the Internet to the at least one client device .

More specifically first MCD system may be configured to inspect content received via communication network and identify malware using at least two approaches. The first MCD system may implement the method described above in conjunction with to detect and analyze outbound communications constituting callbacks. In addition as a second approach the first MCD system may identify suspicious content in ingress traffic for playback in a virtual environment. The incoming content is identified as suspicious when it is assessed with a selected level of likelihood that at least one characteristic identified during inspection of the content indicates the presence of malware. Thereafter the suspicious content is further analyzed within a virtual machine VM execution environment to detect whether the suspicious content includes malware.

As noted the communication network may include a public computer network such as the Internet in which case an optional firewall represented by dashed lines may be interposed between communication network and client device . Alternatively the communication network may be a private computer network such as a wireless telecommunication network wide area network or local area network or a combination of networks. Likewise the private network may be a private computer network such as a wireless telecommunication network wide area network or local area network or a combination of networks.

The first MCD system is shown as being coupled with the communication network behind the firewall and with private network via a network interface . The network interface operates as a data capturing device referred to as a tap or network tap that is configured to receive data traffic propagating to from the client device and provide content from the data traffic to the first MCD system . In general the network interface receives and copies the content that is received from and provided to client device normally without an appreciable decline in performance by the server device the client device or the communication network . The network interface may copy any portion of the content for example any number of data packets.

It is contemplated that for any embodiments where the first MCD system is implemented as an dedicated appliance or a dedicated computer system the network interface may include an assembly integrated into the appliance or computer system that includes network ports network interface card and related logic not shown for connecting to the communication networks and to non disruptively tap data traffic and provide a copy of the data traffic to the heuristic module . In other embodiments the network interface can be integrated into an intermediary device in the communication path e.g. firewall router switch or other network device or can be a standalone component such as an appropriate commercially available network tap. In some embodiments also the network interface may be contained within the first MCD system . In virtual environments a virtual tap vTAP can be used to copy traffic from virtual networks.

Referring still to first MCD system may include a callback detection and analysis system which receives the outbound communications or a copy thereof from the network interface for analysis in accordance with the methods described hereinabove.

The first MCD system may also include components for detecting malware in a two stage malware detection approach including a static analysis employing heuristics and a dynamic analysis employing replaying i.e. executing the network traffic while observing its behavior to detect malware. For this the first MCD system includes a heuristic engine a heuristics database a scheduler a storage device an analysis engine and a reporting module . Also heuristic engine scheduler and or analysis engine may be software modules executed by a processor that receives the suspicious content performs malware analysis and is adapted to access one or more non transitory storage mediums operating as heuristic database storage device and or reporting module . In some embodiments the heuristic engine may be one or more software modules executed by a processor and the scheduler and the analysis engine may be one or more software modules executed by a different processor where the two processors are possibly located at geographically remote locations and communicatively coupled for example via a network.

In general the heuristic engine serves as a filter to permit subsequent malware analysis only on a portion of incoming content which effectively conserves system resources and provides faster response time in determining the presence of malware within analyzed content. As illustrated in the heuristic engine receives the copy of incoming content from the network interface and applies heuristics to determine if any of the content is suspicious . The heuristics applied by the heuristic engine may be based on data and or rules stored in the heuristics database . Also the heuristic engine may examine the image of the captured content without executing or opening the captured content. For example the heuristic engine may examine the metadata or attributes of the captured content and or the code image e.g. a binary image of an executable to determine whether a certain portion of the captured content matches or has a high correlation with a predetermined pattern of attributes that is associated with a malicious attack. According to one embodiment of the disclosure the heuristic engine flags content from one or more data flows as suspicious after applying this heuristic analysis.

Thereafter according to one embodiment of the invention the heuristic module may be adapted to transmit at least a portion of the metadata or attributes of the suspicious content which identify attributes of the client device to the analysis engine for dynamic analysis. Such metadata or attributes are used to identify the VM instance needed for subsequent malware analysis. For instance the analysis engine may be adapted to use the metadata to identify the desired software profile. Alternatively the analysis engine may be adapted to receive one or more data packets from the heuristic engine and analyze the packets to identify the appropriate software profile. In yet other embodiment of the disclosure the scheduler may be adapted to receive software profile information in the form of metadata or data packets from the network interface or from the heuristic module directly.

The scheduler may retrieve and configure a VM instance to mimic the pertinent performance characteristics of the client device . In one example the scheduler may be adapted to configure the characteristics of the VM instance to mimic only those features of the client device that are affected by the data traffic copied by the network interface . The scheduler may determine the features of the client device that are affected by the content by receiving and analyzing the data traffic from the network interface . Such features of the client device may include ports that are to receive the content certain device drivers that are to respond to the content and any other devices coupled to or contained within the client device that can respond to the content. Alternatively the heuristic engine may determine the features of the client device that are affected by the data traffic by receiving and analyzing the content from the network interface . The heuristic engine may then transmit the features of the client device to the scheduler and or analysis engine .

The storage device may be configured to store one or more VM disk files forming a VM profile database where each VM disk file is directed to a different software profile for a VM instance. In one example the VM profile database may store a VM disk file associated with a single VM instance that can be configured by the scheduler to mimic the performance of a client device on the communication network . Alternatively as shown in the VM profile database may store a plurality of VM disk files. Hence these VM disk files are provided to simulate the performance of a wide variety of client devices .

The analysis engine is adapted to execute multiple VM instances to simulate the receipt and or execution of different data flows of suspicious content by the client device as well as different operating environments. Furthermore the analysis engine analyzes the effects of such content upon the client device . The analysis engine may identify the effects of malware by analyzing the simulation of the effects of the content upon the client device that is carried out on each VM instance. Such effects may include unusual network transmissions unusual changes in performance and the like. This detection process is referred to as a dynamic malicious content detection.

The analysis engine may flag the suspicious content as malware according to the observed behavior of the VM instance. The reporting module may issue alerts indicating the presence of malware and using pointers and other reference information identify what message s e.g. packet s of the suspicious content may contain malware. Additionally the server device may be added to a list of malicious network content providers and future network transmissions originating from the server device may be blocked from reaching their intended destinations e.g. by firewall .

The embodiments discussed herein are illustrative. As these embodiments are described with reference to illustrations various modifications or adaptations of the methods and or specific structures described may become apparent to those skilled in the art. For example aspects of the embodiments may be performed by executable software such as a program or operating system. For example embodiments of the local analyzer may be implemented in an operating system. Of course the operating system may incorporate other aspects instead of or in addition to that just described as will be appreciated in light of the description contained in this specification. Similarly a utility or other computer program executed on a server or other computer system may also implement the local analyzer or other aspects. Noteworthy these embodiments need not employ a virtual environment but rather test for callback activity during normal execution of the operating system utility or program within a computer system.

It should be understood that the operations performed by the above described illustrative embodiments are purely exemplary and imply no particular order unless explicitly required. Further the operations may be used in any sequence when appropriate and may be partially used. Embodiments may employ various computer implemented operations involving data stored in computer systems. These operations include physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared and otherwise manipulated.

Any of the operations described herein are useful machine operations. The present invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purpose or the apparatus may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations or multiple apparatus each performing a portion of the operations. Where apparatus or components of apparatus are described herein as being coupled or connected to other apparatus or other components the connection may be direct or indirect unless the context requires otherwise.

The present invention may be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter read by a computer system. Examples of the computer readable medium include hard drives flash drives read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion. The computer readable medium can also be distributed using a switching fabric such as used in compute farms.

The terms logic module engine and unit are representative of hardware firmware or software that is configured to perform one or more functions. As hardware these components may include circuitry such as processing circuitry e.g. a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit etc. receiver transmitter and or transceiver circuitry semiconductor memory combinatorial logic or other types of electronic components. When implemented in software the logic modules engines and units may be in the form of one or more software modules such as executable code in the form of an executable application an operating system an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a script a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage. Software is operational when executed by processing circuitry. Execution may be in the form of direct execution emulation or interpretation.

The term computerized generally represents that any corresponding operations are conducted by hardware in combination with software and or firmware.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

It will be appreciated by those of ordinary skill in the art that modifications to and variations of the above described embodiments of a system and method of detecting callbacks and associated malware may be made without departing from the inventive concepts disclosed herein. Accordingly the specification and drawings are to be regarded as illustrative rather than restrictive and the invention should not be viewed as limited except as by the scope and spirit of the appended claims. It will be recognized that the terms comprising including and having as used herein are specifically intended to be read as open ended terms of art.

