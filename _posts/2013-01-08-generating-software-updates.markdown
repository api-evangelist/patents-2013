---

title: Generating software updates
abstract: Techniques for generating a software update include determining changes between a previous version of a software package and a new version of the software package. Whether each change can be implemented as automatic correction instructions that can be executed by a client computer system is determined. Automatic correction instructions are generated for changes that can be implemented as automatic correction instructions. Manual correction instructions are generated for changes that cannot be implemented as automatic correction instructions, including, for each of those changes, identifying a corresponding template for a text string for the change from a repository of templates and including the text string in the manual correction instruction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09164753&OS=09164753&RS=09164753
owner: SAP SE
number: 09164753
owner_city: Walldorf
owner_country: DE
publication_date: 20130108
---
This disclosure relates to correcting computer software and more particularly to updating computer software by automatically generated correction instructions.

An enterprise software developer can distribute software updates in various ways. One way is to distribute an entirely new version of the object or source code. Another way is to distribute correction instructions. For example a patch is a piece of software designed to update software or its supporting data. Some enterprise software is developed on a common platform which allows software updates to be deployed in a common way according to the common platform.

In some software environments an enterprise software developer can distribute correction instructions via a central computer system. The developer uploads the correction instructions to the central computer system and customers can then download the correction instructions and apply the correction instructions. In this manner the customers can avoid a costly upgrade to the software of downloading entirely new versions of the software.

The present disclosure relates to computer implemented methods software and systems for generating software updates for a software package. In some implementations changes between a previous version of the software package and a new version of the software package are determined. Whether each change can be implemented as one or more automatic correction instructions that can be executed by a client computer system is determined. Automatic correction instructions are generated for changes that can be implemented as automatic correction instructions. Manual correction instructions are generated for changes that cannot be implemented as automatic correction instructions including for each of those changes identifying a corresponding template for a text string for the change from a repository of templates and including the text string in the manual correction instruction.

Other general implementations include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform operations to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

A first aspect combinable with any of the general implementations includes sending the automatic correction instructions the manual correction instructions and update instructions to a computer system storing the software package wherein the computer system is configured to executing the update instructions thereby causing the computer system to execute the automatic correction instructions to update the software package and to display the manual correction instructions.

In a second aspect combinable with any of the general implementations determining whether the change can be implemented as one or more automatic correction instructions that can be executed by a client computer system comprises determining whether the change is a source code change or a change to a specified object on a list of objects if the change is a source code change or a change to a specified object determining that the change can be implemented in automatic correction instructions and if the change is not a source code change or a change to a specified object determining that the change cannot be implemented in automatic correction instructions.

In a third aspect combinable with any of the general implementations generating one or more automatic correction instructions for the one or more first changes comprises generating the automatic correction instructions so that when executed by a computer system the computer system will modify a stored copied of the previous version of the software package to correspond to the new version of the software package as specified by the change.

In a fourth aspect combinable with any of the general implementations identifying a corresponding template for a text string for the change from a repository of templates and including the text string in the manual correction instructions comprises populating the text string from the corresponding template with information specific to the change.

In a fifth aspect combinable with any of the general implementations the corresponding template includes a plurality of different text strings each in a different language and wherein including the text string in the manual correction instructions comprises selecting one of the different text strings to match a specified language of a computer system requesting the software update

In a sixth aspect combinable with any of the general implementations the templates in the repository of templates are specified at a uniform level of granularity.

A seventh aspect combinable with any of the general implementations includes determining that a first change lacks a corresponding template in the repository of templates and generating a new template for the first change by analyzing the first change and applying natural language processing.

Various implementations of a computing system according to the present disclosure may provide one or more of the following advantages. The manual effort of a software developer creating a software update can be reduced by automating creation of manual correction instructions. The text of some manual correction instructions can be written once by experts and saved for various references so as to maintain consistency and certain standards e.g. for clarity or granularity for manual correction instructions. Translation of the text of manual correction instructions need only be completed once instead of potentially many times saving time and money.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

In some implementations the developer distributes software updates via an update distribution system of one or more computers. For example the developer can develop software on an enterprise software platform and then distribute software updates in accordance with update procedures for the enterprise software platform.

The developer can create the software updates on the developer system or the update distribution system or both. For example the developer can makes changes to the software on the developer system and then send new and old versions of the software to the update distribution system which then develops the software update as a package of executable code or textual instructions or both. The update distribution system can then distribute the software update to the customer systems.

In some aspects computing system generates a software update. In some implementations generating the software update can include determining changes between a previous version of the software package and a new version of the software package. For each change computing system determines whether the change can be implemented as one or more automatic correction instructions that can be executed by a client computer system. Computing system generates automatic correction instructions if possible and generates manual correction instructions otherwise by identifying a corresponding template for a text string for the change from a repository of templates and including the text string in the manual correction instruction.

In some examples the software update system may store a plurality of various hosted applications while in some examples the software update system may be a dedicated server meant to store and execute only a single hosted application. In some instances the software update system may comprise a web server where the hosted applications represent one or more web based applications accessed and executed via the network by the client computing system to perform the programmed tasks or operations of the hosted application.

At a high level the software update system comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the distributed computing system . Specifically the software update system illustrated in is responsible for receiving application requests from one or more client applications associated with the client computing system of the distributed computing system and responding to the received requests by processing said requests in the associated hosted application and sending the appropriate response from the hosted application back to the requesting client application. In addition to requests from the client computing system illustrated in requests associated with the hosted applications may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single software update system the distributed computing system can be implemented using two or more servers as well as computers other than servers including a server pool. In some examples the software update system may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further the enterprise server computing system may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system.

As mentioned above the software update system includes an update generation engine . In summary the update generation engine determining changes between a previous version of the software package and a new version of the software package and generates automatic correction instructions if possible and generates manual correction instructions for other changes.

The software update system further includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the example distributed computing system . The interface is used by the software update system for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the client computing system as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system .

Regardless of the particular implementation software may include computer readable instructions firmware wired or programmed hardware or any combination thereof on a tangible medium transitory or non transitory as appropriate operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic assembler Perl any suitable version of 4GL as well as others. While portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The software update system further includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . The processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the enterprise server computing system . Specifically the processor executes the functionality required to receive and respond to requests from the client computing system .

The software update system also includes a memory . Although illustrated as a single memory in two or more memories may be used according to particular needs desires or particular implementations of the example distributed computing system . While memory is illustrated as an integral component of the enterprise server computing system in some implementations the memory can be external to the enterprise server computing system and or the example distributed computing system . The memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the software update system . Additionally the memory may include any other appropriate data such as VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files as well as others.

The software update system further includes a service layer . The service layer provides software services to the example distributed computing system . The functionality of the software update system may be accessible for all service consumers using this service layer. For example in one implementation the client computing system can utilize the service layer to communicate with the update generation engine . Software services provide reusable defined business functionalities through a defined interface. For example the interface may be software written in extensible markup language XML or other suitable language. While illustrated as an integrated component of the software update system in the example distributed computing system alternative implementations may illustrate the service layer as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The software update system further includes an application programming interface API . In some implementations the API can be used to interface between the update generation engine and one or more components of the software update system or other components of the example distributed computing system both hardware and software. For example in some implementations the update generation engine can utilize the API to communicate with the client computing system . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. While illustrated as an integrated component of the software update system in the example distributed computing system alternative implementations may illustrate the API as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the API may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The client computing system may be any computing device operable to connect to or communicate with at least the software update system using the network . In general the client computing system comprises a computer operable to receive transmit process and store any appropriate data associated with the example distributed computing system . The illustrated client computing system further includes an application . The application is any type of application that allows the client computing system to request and view content on the client computing system . In some implementations the application can be and or include a web browser. In some implementations the application can use parameters metadata and other information received at launch to access a particular set of data from the software update system . Once a particular application is launched a user may interactively process a task event or other information associated with the software update system . Further although illustrated as a single application the application may be implemented as multiple applications in the client computing system .

The illustrated client computing system further includes an interface a processor and a memory . The interface is used by the client computing system for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the software update system as well as other systems communicably coupled to the network not illustrated . The interface may also be consistent with the above described interface of the software update system or other interfaces within the example distributed computing system . The processor may be consistent with the above described processor of the software update system or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the client computing system including the functionality required to send requests to the software update system and to receive and process responses from the software update system . The memory may be consistent with the above described memory of the enterprise server computing system or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the client computing system .

Further the illustrated client computing system includes a GUI . The GUI interfaces with at least a portion of the example distributed computing system for any suitable purpose including generating a visual representation of a web browser. In particular the GUI may be used to view and navigate various web pages located both internally and externally to the software update system . Generally through the GUI an enterprise server computing system user is provided with an efficient and user friendly presentation of data provided by or communicated within the example distributed computing system .

There may be any number of client computing systems associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client computing system communicably coupled to the software update system using network alternative implementations of the example distributed computing system may include any number of client computing systems suitable for the purposes of the example distributed computing system . Additionally there may also be one or more client computing systems external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system using the network . Moreover while the client computing system is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The illustrated client computing system is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example the client computing system may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the enterprise server computing system or the client computing system itself including digital data visual information or a GUI as shown with respect to the client computing system .

The distributed computing system further includes a repository . In some implementations the repository is an in memory repository. The repository can be a cloud based storage medium. For example the repository can be networked online storage where data is stored on virtualized pools of storage.

With respect to the network generally the network facilitates wireless or wireline communications between the components of the distributed computing system i.e. between the computing systems and as well as with any other local or remote computer such as additional clients servers or other devices communicably coupled to network but not illustrated in . The network is illustrated as a single network in but may be a continuous or discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet.

In some instances a portion of the network may be a virtual private network VPN such as for example the connection between the client computing system and the software update system . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated distributed computing system . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations.

The update generation engine generates software updates for a software package. When a developer makes changes to the software package e.g. to fix bugs or add new features the developer can submit a new version of the software package to a version database . The version database includes one or more older versions of the software package. A version analyzer analyzes the new version to determine what changes the designer has made to the software package. The changes can be changes to the source code or to objects used by the software package or other kinds of changes.

A software update can include automatic correction instructions or manual correction instructions or both. Automatic correction instructions are generated by an automatic correction instructions generator and manual correction instructions are generated by a manual correction instructions generator .

Automatic correction instructions can be implemented on a customer s system by being executed by the customer s system. For example automatic correction instructions can be executable code executed by the customer s system requiring little to no intervention by a human system operator. Manual correction instructions require at least some intervention by a system operator. For example manual correction instructions can be text instructions that a system operator reads and then implements manually.

When the version analyzer determines changes that have been made to the software package the update generation engine determines for each change whether the change can be implemented as automatic correction instructions or not. In some implementations changes can be implemented as automatic correction instructions only if those changes are related to source code changes or changes to certain classes of objects or both. If the change can be implemented as automatic correction instructions the automatic correction instructions generator generates the instructions. For example the automatic correction instructions generator can generate executable code to edit source or object code of the software package.

If the change cannot be implemented as automatic correction instructions then the manual instructions generator generates manual correction instructions. In some implementations manual correction instructions are useful to implement changes to certain object types e.g. tables structures domains data elements or other changes for which automatic correction instructions are not available.

One way to generate manual correction instructions is to present a user interface element e.g. a dialog box with a text editor to a developer who can then manually enter the instructions. This can be time consuming error prone and can lead to nonstandard instructions. Moreover system operators implementing the manual instructions on customer systems can have difficulty following the instructions or spend a burdensome amount of time implementing the instructions.

Another way to generate manual correction instructions is to use static templates stored in a repository of static templates. For each object type that is being changed the repository stores an associated static template. The static template for an object type includes a standard list of instructions e.g. as text strings for the procedure for creation modification deletion or other operations for changing an object of the object type. This is useful for example because it can save the developer time from having to manually enter the manual correction instructions. Moreover this is useful for system operators implemented the manual correction instructions because the instructions can be made more regular or uniform or both.

The static templates can optionally include instructions in different languages. Typically the static templates include instructions at a uniform level of granularity i.e. so that every action that a system operator at the customer system has to perform is described with at least a certain amount of particularity. In this manner the manual instructions generator can generate manual instructions that can be easier to implement by system operators because gaps in the instructions e.g. resulting from overly broad descriptions of the tasks needed to be completed are reduced.

In some implementations a software update is stored at a software update system with references to the static templates and when a particular customer system requests the update the software update system generates at run time a particular instance of the software update tailored to that customer e.g. in a specified language for that customer or to update a specific version of the software package of the customer system. In some implementations the software update system generates and stores software updates for various systems when the development submits a new version and then responds to requests for the update by selecting the appropriate software update for the request.

In some implementations the update generation engine includes a language synthesis module . The language synthesis module generates new text to describe a task to be specified by manual correction instructions e.g. when no existing text is specified by a static template. This is useful for example so that a developer does not need to generate new text to generate manual correction instructions for a new operation. Instead the language synthesis module can analyze the kind of change made by the developer and generate new text that is descriptive of the change and consistent with the language and level of granularity used in the other static templates. The language synthesis module can be implemented using natural language processing NLP .

In step the software update system receives a new version of a software package from a developer. The new version can contain new or changed source code new or changed data objects or both. The new version can fix bugs or introduce new features or implement of types of changes.

In step the software update system compares the new version of the software package with a stored version of the software package to determine a number of changes. The system then determines whether for each change automatic correction instructions can be generated for the change.

In step the software update system generates automatic correction instructions for those changes where automatic correction instructions can be implemented. The automatic correction instructions can be executable code e.g. as described above with reference to .

In step the software update system generates manual correction instructions for those changes where automatic correction instructions cannot be implemented. For example the changes can be changes to objects not supported by automatic correction instructions. The software update system generates the manual correction instructions using static templates e.g. as described above with reference to .

In step the software update system merges the automatic correction instructions and manual correction instructions into a software update. The software update system stores the software update so that when a customer system requests the software update the software update system can respond by providing the software update.

At a customer system the software package can be updated by downloading the software update. The customer system itself implements the automatic correction instructions by executing code contained in the software update. The customer system then implements the manual correction instructions by displaying text of the manual correction instructions to a system operator who then completes the tasks specified by the manual correction instructions.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory program carrier for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example Linux UNIX Windows Mac OS Android iOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit .

Computers suitable for the execution of a computer program include by way of example can be based on general or special purpose microprocessors or both or any other kind of central processing unit. Generally a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a wide area network WAN e.g. the Internet and a wireless local area network WLAN .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order e.g. this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system modules and components in the implementations described above should not be understood as requiring such separation in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

