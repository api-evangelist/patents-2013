---

title: Updating code within an application
abstract: Disclosed are various embodiments for providing updateable code to a software library executed in a client device. Updateable code includes scripting language code and potentially other content employed by a software library invoked by an application executed by a client device. Updateable code can be updated upon launch of the application and/or upon invocation of a call associated with the software library.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471299&OS=09471299&RS=09471299
owner: Amazon Technologies, Inc.
number: 09471299
owner_city: Seattle
owner_country: US
publication_date: 20130325
---
Applications that are distributed via an application marketplace often employ code fragments functionality and or one or more software libraries for the purpose of facilitating interactions with systems and or services associated with the application marketplace. For example an application can be created by a developer for distribution via an application marketplace that is operated by another entity where the other entity can offer one or more software libraries with an application programming API interface that can be incorporated into the application. Updating of such functionality may require the creation of a new application binary.

The present disclosure relates to providing updates of software libraries that are employed by applications that are distributed via an application marketplace. Applications that are distributed via an application marketplace often employ code fragments functionality and or one or more software libraries for the purpose of facilitating interactions with systems and or services associated with the application marketplace. For example an application can be created by a developer for distribution via an application marketplace that is operated by another entity where the other entity can offer one or more software libraries with an application programming interface API that can be incorporated into the application. Updating of such functionality may require the creation of a new application binary.

Accordingly embodiments of the present disclosure can allow for the updating of content and or logic that is employed by a software library that is bundled with an application without requiring the generation of a new binary associated with the application. For example because an application marketplace is often operated by an entity that is different from a developer updates to functionality provided by the software libraries bundled with an application can be performed without requiring the creation of a new application binary and distribution of the application binary to user devices. Instead the application and or software library when invoked can request an update to certain functionality provided by the software library which is stored as scripting language code and or other elements that do not require updating of object code and or binary code of the application and a service associated with the application marketplace can transmit the appropriate updates which can then be stored within the client device on which the application is executing.

With reference to shown is an example scenario in which an application executed by a client device . In the scenario shown in the application can be distributed by an application marketplace. The application can also take advantage of features provided by the application marketplace and or any other third party service where these features are included within a software library that is bundled with the binary version of the application. For example a software library providing an API interface can provide user authentication and or identification functionality whereby a user can authenticate his or her identity to a game service a social networking service or any other identity service.

As shown in the example of the application executed by the client device can incorporate functionality in which a user may utilize an account held with a third party service for the purpose of tracking achievements social networking authentication billing or any other purpose. Accordingly the application can provide functionality allowing a user to authenticate his or her identity with the third party service as well as potentially view user profile information and other data provided by the third party service. Authentication of the user as well as the viewing of additional information retrieved from the third party service from within the application can be accomplished via API calls into a software library that is incorporated into the executable binary of the application. For example the third party service may provide a proprietary authentication protocol that is implemented within the software library such that the application makes a call to a black box API interface that returns an authentication result. In such a scenario the authentication logic is embedded within the third party service software library that is bundled with the application.

As shown in the application may also allow a user to view user profile information in a user interface where the user profile information is retrieved from a third party service. It should be appreciated that the example of user profile information retrieved from a third party service is a non limiting example shown for the purposes of discussion herein. Accordingly the user interface is populated with information retrieved from a third party service and potentially with images fonts etc. or other visual elements that are retrieved from the third party service. Additionally the user interface in the depicted example is also generated by the application s making of API calls into a software library associated with the third party service.

Accordingly embodiments of the disclosure allow for the updating of logic and or user interface elements that are provided by a software library without requiring the generating of a new application binary corresponding to the application and or restarting of execution of the application. As noted above the application may be created by a developer that is not the same as an entity operating the application marketplace and or one that provides the functionality of the software library. Embodiments of the disclosure can allow for updateable code to be stored within the software library and or accessible to the client device where the updateable code comprises scripting language code images text video or other elements that can be updated without requiring the creation of a new binary application that requires redistribution and reinstallation on client devices and or restarting of execution of the application. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

Turning now to shown is a networked environment according to various embodiments. The networked environment includes a computing environment and one or more clients in data communication via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that may be arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing environment for example include an application marketplace system application updating service and other applications services processes systems engines or functionality not discussed in detail herein. The application marketplace system may communicate with the client device using various protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP representational state transfer REST real time transport protocol RTP real time streaming protocol RTSP real time messaging protocol RTMP user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network .

The application marketplace system is executed to provide functionality relating to an application marketplace in which a multitude of applications may be submitted by developers and made available for purchase and or download by users. The application marketplace system may include functionality relating to electronic commerce e.g. shopping cart ordering and payment and other systems. The application marketplace system may support searching and categorization functionality so that users may easily locate applications that are of interest. The application marketplace system may include functionality relating to verification of compatibility of applications with various clients . The application updating service is executed to provide updateable code to client devices to update an application executed by the client device as will be described in further detail herein.

The data stored in the data store includes for example applications saved state data relating to applications that are executed by client devices application marketplace data updateable code and potentially other data. The applications correspond to those applications that have been submitted by developers and or others for example for inclusion in the application marketplace. The application may correspond for example to a game or other types of applications. As non limiting examples the application may correspond to a first person shooter game an action game an adventure game a party game a role playing game a simulation game a strategy game a vehicle simulation game and or other types of games. The application may be a game originally designed for execution in a general purpose computing device or in a specialized video game device such as for example a video game console a handheld game device an arcade game device etc. The applications may also correspond to mobile phone applications computer aided design CAD applications computer aided manufacturing CAM applications photo manipulation applications video editing applications office productivity applications operating systems and associated applications emulators for operating systems architectures and capabilities not present on a consumer device and other applications and combinations of applications. Where game applications are mentioned in the following text it is understood that game applications are merely examples of the many different types of applications .

The application when executed by a client device may expect to access one or more resources of the client device on which it is executed. Such resources may correspond to display devices input devices or other devices. In some cases the application may request exclusive access to one or more of the resources whereby no other applications may have access to the particular resources. Each application may include for example object code source code metadata and or other data. The object code corresponds to code that is executable by clients either natively by a processor or by way of a virtual machine executed by the processor.

The saved state data that is maintained by the application marketplace system includes various data relating to execution of applications by client devices . For example the saved state data may include information about progress of a user within execution of an application by users such as a level at which a user has progressed within a game scoring information achievement information relating to a game etc.

The data associated with the application marketplace data includes for example download information categories application usage data and or other data. The download information indicates the popularity either in terms of absolute number of downloads or in terms of relative popularity of the applications offered by the application marketplace data . The download information can also identify users either individually by a user account and or on an aggregate basis according to demographic category that have downloaded a particular application . The categories correspond to groupings of applications that may indicate similar applications and may be employed by users to more easily navigate the offerings of the application marketplace data . Non limiting examples of categories may include social networking applications mapping applications movie information applications shopping applications music recognition applications and so on. The application marketplace data can also include information about users such as user profile data user authentication information usage data of users with regard to application e.g. game progress high scores achievements .

Updateable code comprises scripting language code markup language imagery and or other data that can be transmitted to a client device to update a software library according to embodiments of the disclosure. The software library can be configured according to embodiments of the present disclosure to accept updateable code and store the updateable code within and or accessible to the client device . A software library can also be configured to execute logic and or utilize elements within the updateable code without requiring the creation of a new version of the application in which the software library is employed.

The client is representative of a plurality of client devices that may be coupled to the network . The clients may be geographically diverse. The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability.

The client may include a display device . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc. The client may include one or more input devices . The input devices may comprise for example devices such as keyboards mice joysticks accelerometers light guns game controllers touch pads touch sticks push buttons optical sensors microphones webcams and or any other devices that can provide user input. Additionally various input devices may incorporate haptic technologies in order to provide feedback to the user.

The client may be configured to execute various applications that are distributed via the application marketplace system . An application executed by a client device as is noted above can be bundled with one or more software library that provides functionality that is called by the application code.

For example a software library can provide device hardware APIs through which the application may access a device resource. As another example a software library can also provide functionality associated with the application marketplace system such as user authentication retrieval of user information for display within user interfaces of the application processing of payment transactions associated with the application marketplace system or other functionality that can be associated with the application marketplace system . As yet another example a software library can also provide functionality associated with a gaming service in which user achievements associated with one or more game applications can be tracked and or displayed scoring data associated with a user accounts or other user accounts can be tracked and or displayed or other information can be exchanged. Additionally a software library when invoked by an application can also retrieve and or display user interfaces that are rendered by the application and or code associated with the software library on a display device associated with the client . The updateable code is code associated with a software library that can be updated according to various embodiments of the present disclosure.

Next a general description of the operation of the various components of the networked environment is provided. To begin an application created by a developer can be created and distributed to a client device associated with a user via the application marketplace system . The application can be configured to employ functionality provided by a software library . For example the application can be configured to invoke an API call associated with the software library that in turn invokes updateable code . The updateable code is stored within the client device or storage accessible to the client device and comprises a scripting language code fragment provides various types of functionality. For example the scripting language code can provide an authentication workflow in which a user is authenticate with a third party service. In this example the authentication workflow can involve the rendering of user interface elements such as input fields in which a user can provide authentication credentials. User interface elements can also include various images video text fonts markup language style sheets and or any other elements that can specify user interface elements rendered by the client device .

The updateable code can be configured with logic that when invoked by the application performs logical operations and or displays other information or user interface elements that can be supported by a scripting language and or presentation language. For example the updateable code that authenticates a user can be configured to encourage the user to register with a particular third party service or display other promotional information based upon a determination by the logic programmed within scripting language code in the updateable code of a particular condition. As another example the updateable code can also allow retrieval of data from a service via the network for use by other native code associated with the software library and or the application .

The software library as well as the application can be implemented in native object code and or binary code that is natively compatible with the client device . In contrast the updateable code may comprise code that is implemented within an interpreted scripting language as well as other content that can be referenced by the interpreted scripting language and or other code within the software library . The updateable code can be organized into various portions that are linked with a particular functional call of the software library . The updateable code when embodied in the form of scripting language code can comprise JavaScript PHP Perl or any other scripting language. The updatable code can also comprise markup language or code that generates markup language which can correspond to user interface elements rendered by the client device . The updatable code can also include style sheets such as cascading style sheets CSS that specify presentation elements within the markup language and or other user interface elements associated with an API call to the software library .

Therefore upon execution of an application by a client device the application can determine whether the client device can access the application updating service e.g. whether the client device has network access . If so the application can be instrumented to invoke an API call associated with the software library that determines whether the updateable code should be updated. In one embodiment the software library can generate an update request that provides a version of the updateable code .

Such a request can be transmitted to the application updating service . The application updating service can then extract a version or version number of the updateable code from the update request and consult the version or version number of the latest updateable code stored within the data store . If the application instance executing within the client device is not configured with the latest version of the updateable code the application updating service can provide the latest version of the updatable code to the client device . In other words the application updating service can generate a code update that is transmitted to the client device .

Upon receiving the code update the software library can then store the updated version of the updateable code within the client device . Accordingly because the updateable code is provided in the form of scripting language code and or other content such as imagery video text configuration values etc. the updateable code can be updated without updating the application and or generating an updated application in binary form. In other words the updateable code can update the logical operation of the software library by updating scripting language code that is utilized by the software library .

In one example the logic of the application updating service can be implemented within the software library such that the software library can make a determination as to whether an updated version of updateable code is available. In such a scenario the software library can be configured to check a version number of code available via a network accessible code repository to determine whether an updated version of updateable code is available as compared to a version of the updateable code stored on the client device .

In one embodiment the application updating service can also be instrumented to obtain an update to updateable code corresponding to a software library from a developer that is in turn stored within the data store . The updated updateable code corresponding to the software library can then be pushed as a code update to an instance of an application and or software library that is stored within a client device . In this way a developer can update a software library by transmitting an update to updateable code to the application updating service which can in turn store the code update in the data store as well as push a code update to client devices on which the associated software library is employed.

Accordingly in this scenario the application updating service can identify one or more client devices from the application marketplace data in which the application and or the software library is installed. The application updating service can then distribute a code update that incorporates the updateable code to those client devices on which the application and or software library incorporating the updateable code are installed.

Turning now to shown are examples of an application executed on a client device according to embodiments of the present disclosure. In the depicted example the application invokes a software library that incorporates updateable code that includes scripting language code imagery text and or other data that is embedded within the updateable code and or retrieved from a third party service. In the example of the updateable code specifies user interface elements that are rendered by the client device when the application invokes an API call provided by the software library that in turns executes and or references the updateable code .

In the example of the updateable code retrieves information from a gaming service and or social networking system. The updateable code can also include 239 images markup language and or any other data that can specify and or direct the rendering of a user interface by the client device . Additionally the updateable code can also specify a location on the display device associated with the client in which the user interface should be placed. The updateable code can also modify logical operations executed by the software library that is utilized by the application . In this way an application can be updated without requiring the creation of a new application binary that is distributed to client devices and installed on the client device . Embodiments of the disclosure can provide a mechanism whereby an application can update itself by determining whether updateable code that is published in a code repository accessible via the network should be retrieved and updated within the client device . Accordingly the software library can be implemented as a software wrapper that executes scripting language code that is stored as updateable code within the client device thereby allowing the logical function of a software library to be updated without updating the entire application .

Continuing the example of reference is now made to . In the example shown in the updateable code is updated via the application updating service . Accordingly the updated updateable code may include alternative scripting language code that specifies different user interface elements such as varying fonts images text and or a different location within display device in which the user interface should be displayed. Accordingly in this way the updateable code can be updated by the application updating service to provide an updated user interface experience without requiring the creation of a new application binary as well as its distribution and installation on the client device . Additionally as other examples of scenarios in which updateable code can be employed the software library can employ updateable code to specify a format of and or retrieve data from a service that is accessible via the network . In this way a network accessible service and or the data format employed by the service can be updated without requiring the creation of a new application binary as well as its distribution and installation on the client device .

As noted above the updateable code can update any logical operation of any functionality employed by the software library . For example if the software library is relied upon by the application to perform authentication of the user with a service accessible via the network the software library can employ updateable code to execute the authentication workflow. Consequently the authentication workflow can be modified and updated via providing updateable code . In this scenario the authentication workflow can be updated by modifying when and in what scenarios information is presented to the user and or various operations are performed. In this way not only can content that is shown to a user be updated but logic that specifies when and in what scenarios content is shown to the user can also be updated. Similarly other logical operations can also be updated via use of updateable code such as calculations performed by the software library configuration settings of the software library or any other logical functions that can expressed in scripting language code that is bundled with the updateable coded .

Referring next to shown is a flowchart that provides one example of an application executed by a client device according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application employing a software library and updateable code as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client device according to one or more embodiments.

Beginning with box the application initiates execution on a client device . The application can be instrumented to check for an update to updateable code associated with software libraries upon execution and or upon invocation of a software library that employs updateable code . At box the application determines whether the client device has network access and or can access the application updating service . If not then the portion of the application ends execution. If so then in box the application generates a request for an updated version of the updateable code . Such a request can include a version associated with the current version of the updateable code that is stored within the client device . At box the application determines whether an updated version of the updateable code is available at and or received from the application updating service . If so then in box the application stores the updateable code within and or accessible to the client device .

Referring next to shown is a flowchart that provides one example of execution of the application updating service executed by a computing environment according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of an application updating service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the application updating service obtains a request to update updateable code from a client device executing an application that employs a software library including updateable code . In box the application updating service determine whether the updateable code employed by the client should be updated. In one embodiment the application updating service can make such a determination by extracting a version associated with the updateable code from the request and determining whether an updated version of the updateable code is available. If not then the portion of the execution of the application updating service ends. If so then in box the application updating service generates a code update that includes the updated version of the updateable code. In box the code update is transmitted to the requesting client device .

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the application marketplace system application updating service and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

With reference to shown is a schematic block diagram of the client device according to an embodiment of the present disclosure. The client device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. A display may also be coupled to the local interface .

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are an application and potentially other applications and or software. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the application marketplace system application updating service and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the application updating service and or application executed by a client device . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in flowcharts of may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in flowcharts of may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the application updating service application or any other application or service that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

