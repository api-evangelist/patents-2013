---

title: Trusted security zone enhanced with trusted hardware drivers
abstract: An electronic device comprises a processor, a permissive sector, a trusted security zone that is separate from the permissive sector, a hardware driver, a first trusted application, stored in the trusted security zone, that is configured to invoke the hardware driver in response to activation instructions, and a second trusted application, stored in the trusted security zone, that when executed on the processor, configures the processor to: amass information about an uncompromised state of the hardware driver, store the information about the uncompromised state of the hardware driver in the trusted security zone, and compare, in response to receipt of activation instructions by the first trusted application, the information about the uncompromised state of the hardware driver with a current state of the hardware driver, and perform an action in response to a result of the comparison.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09613208&OS=09613208&RS=09613208
owner: Sprint Communications Company L.P.
number: 09613208
owner_city: Overland Park
owner_country: US
publication_date: 20130313
---
Electronic devices in the future are expected to store or embody a variety of applications that may interact with confidential information such as credit card numbers bank account numbers authentication numbers personal data medical information and the like. Additionally electronic devices may promote users installing after market applications that may be infiltrated by malware such as viruses Trojans screen scrapers keyboard monitors and other nefarious software and or firmware.

In an embodiment an electronic device is disclosed. The electronic device comprises a processor a permissive sector a trusted security zone that is separate from the permissive sector a hardware driver and a first trusted application stored in the trusted security zone that is configured to invoke the hardware driver in response to activation instructions. The electronic device further comprises a second trusted application stored in the trusted security zone that when executed on the processor configures the processor to amass information about an uncompromised state of the hardware driver store the information about the uncompromised state of the hardware driver in the trusted security zone compare in response to receipt of activation instructions by the first trusted application the information about the uncompromised state of the hardware driver with a current state of the hardware driver and perform an action in response to a result of the comparison.

In an embodiment a method is disclosed. The method comprises activating an application stored in a trusted security zone of the electronic device wherein the application is configured to invoke a hardware driver. The method further comprises performing in response to activating the application a confidence check of the hardware driver comparing a current state of the hardware driver with an uncompromised state of the hardware driver stored in the trusted security zone of the electronic device evaluating in the electronic device the integrity of the hardware driver based on the comparing and performing by the electronic device an action in response to the result of the evaluating.

In an embodiment an electronic device is disclosed. The electronic device comprises a permissive sector a trusted security zone that is separate from the permissive sector a trusted version of a hardware driver stored in the trusted security zone a version of the hardware driver stored in the permissive sector of the electronic device and a first trusted application stored in the trusted security zone and configured to invoke the hardware driver in response to activation instructions. The electronic device further comprises a second trusted application stored in the trusted security zone and configured to compare in response to instructions directing the first trusted application to invoke the version of the hardware driver stored in the permissive sector the trusted version of the hardware driver with the version of the hardware driver stored in the permissive sector and enable the electronic device to perform an action in response to a result of the comparison.

These and other features will be more clearly understood from the following detailed description taken in conjunction with the accompanying drawings and claims.

It should be understood at the outset that although illustrative implementations of one or more embodiments are illustrated below the disclosed systems and methods may be implemented using any number of techniques whether currently known or not yet in existence. The disclosure should in no way be limited to the illustrative implementations drawings and techniques illustrated below but may be modified within the scope of the appended claims along with their full scope of equivalents.

In an embodiment an electronic device that implements trusted hardware drivers is described. The electronic device may be a mobile device such as a mobile phone a personal digital assistant a media player or other mobile device that implements hardware drivers. Alternatively the electronic device may be a desktop computer a laptop computer a notebook computer or other computer that implements hardware drivers. The electronic device comprises a trusted security zone. As described further below trusted security zones reduce the ability of nefarious applications and or programs that may have infiltrated the electronic device to read from or write to memory to read from or write to input output devices or to read from or write to communication ports while the subject processor and or electronic device is executing in the trusted security zone. An application executing in the trusted security zone can have a high level of confidence that an untrusted application is not executing on the electronic device at the same time and hence is prevented from interfering with or monitoring the activities of the application.

In order to interact with peripheral hardware the electronic device may invoke a corresponding driver. The driver may be a device driver a hardware driver or some other driver. It should be understood at the outset that while several embodiments of the present disclosure are discussed with reference to hardware drivers the use of the term hardware driver is not intended to limit the scope of the present disclosure rather the systems and methods disclosed herein may encompass all manner of drivers configured to facilitate communication between the electronic device and peripheral components.

The electronic device may comprise a plurality of hardware drivers corresponding to a plurality of peripheral hardware components. As is known to one skilled in the art hardware drivers are software programs that mediate between peripheral hardware and a processor. Hardware drivers may be configured to mediate between a processor of the electronic device and peripheral components including printers video adaptors network cards sound cards local buses low bandwidth I O buses computer storage devices digital cameras key boards monitors displays speakers mice and or other peripheral hardware devices.

In an embodiment applications executing in the trusted security zone may invoke hardware drivers in order to interact with peripheral hardware components. Hardware drivers may be subject to infiltration or attack by nefarious programs. Thus allowing a trusted application to invoke a non trusted hardware driver may compromise the environment of trust afforded by the trusted security zone. In order to preserve the integrity of the trusted security zone hardware drivers to be invoked by trusted applications may be established in trust or may be verified to be trusted. The electronic device may store a plurality of hardware drivers in the trusted security zone that may be readily invoked by trusted applications. Alternatively the electronic device may perform a confidence check on hardware drivers stored in a permissive sector and or in the trusted security zone before allowing them to be invoked by trusted applications.

In an embodiment the electronic device may perform a confidence check on a hardware driver stored either in the permissive sector or in the trusted security zone in response to activating a trusted application and may respond to a result of the confidence check. If the confidence check indicates that the hardware driver is uncompromised the electronic device may allow the trusted application to invoke the hardware driver and continue its action. Conversely if the confidence check indicates that the hardware driver has been compromised corrupted or otherwise modified the electronic device may prevent the trusted application from invoking the hardware driver.

A trusted security zone provides chipsets with a hardware root of trust a secure execution environment for applications and secure access to peripherals. A hardware root of trust means the chipset should only execute programs intended by the device manufacturer or vendor and resists software and physical attacks and therefore remains trusted to provide the intended level of security. The chipset architecture is designed to promote a programmable environment that allows the confidentiality and integrity of assets to be protected from specific attacks. Trusted security zone capabilities are becoming features in both wireless and fixed hardware architecture designs. Providing the trusted security zone in the main mobile device chipset and protecting the hardware root of trust removes the need for separate secure hardware to authenticate the device or user. To ensure the integrity of the applications requiring trusted data such as a mobile financial services application the trusted security zone also provides the secure execution environment where only trusted applications can operate safe from attacks. Security is further promoted by restricting access of non trusted applications to peripherals such as data inputs and data outputs while a trusted application is running in the secure execution environment. In an embodiment the trusted security zone may be conceptualized as hardware assisted security.

A complete trusted execution environment TEE may be implemented through the use of the trusted security zone hardware and software architecture. The trusted execution environment is an execution environment that is parallel to the execution environment of the main mobile device operating system. The trusted execution environment and or the trusted security zone may provide a base layer of functionality and or utilities for use of applications that may execute in the trusted security zone. For example in an embodiment trust tokens may be generated by the base layer of functionality and or utilities of the trusted execution environment and or trusted security zone for use in trusted end to end communication links to document a continuity of trust of the communications. For more details on establishing trusted end to end communication links relying on hardware assisted security see U.S. patent application Ser. No. 13 532 588 filed Jun. 25 2012 entitled End to end Trusted Communications Infrastructure by Leo Michael McRoberts et al. which is hereby incorporated by reference in its entirety. Through standardization of application programming interfaces APIs the trusted execution environment becomes a place to which scalable deployment of secure services can be targeted. A device which has a chipset that has a trusted execution environment on it may exist in a trusted services environment where devices in the trusted services environment are trusted and protected against attacks. The trusted execution environment can be implemented on mobile phones and tablets as well as extending to other trusted devices such as personal computers servers sensors medical devices point of sale terminals industrial automation handheld terminals automotive etc.

The trusted security zone is implemented by partitioning all of the hardware and software resources of the mobile device into two partitions a secure partition and a normal partition. Placing sensitive resources in the secure partition can protect against possible attacks on those resources. For example resources such as trusted software applications may run in the secure partition and have access to hardware peripherals such as a touchscreen or a secure location in memory. Less secure peripherals such as wireless radios may be disabled completely while the secure partition is being accessed while other peripherals may only be accessed from the secure partition. While the secure partition is being accessed through the trusted execution environment the main mobile operating system in the normal partition is suspended and applications in the normal partition are prevented from accessing the secure peripherals and data. This prevents corrupted applications or malware applications from breaking the trust of the device.

The trusted security zone is implemented by partitioning the hardware and software resources to exist in a secure subsystem which is not accessible to components outside the secure subsystem. The trusted security zone is built into the processor architecture at the time of manufacture through hardware logic present in the trusted security zone which enables a perimeter boundary between the secure partition and the normal partition. The trusted security zone may only be manipulated by those with the proper credential and in an embodiment may not be added to the chip after it is manufactured. Software architecture to support the secure partition may be provided through a dedicated secure kernel running trusted applications. Trusted applications are independent secure applications which can be accessed by normal applications through an application programming interface in the trusted execution environment on a chipset that utilizes the trusted security zone.

In an embodiment the normal partition applications run on a first virtual processor and the secure partition applications run on a second virtual processor. Both virtual processors may run on a single physical processor executing in a time sliced fashion removing the need for a dedicated physical security processor. Time sliced execution comprises switching contexts between the two virtual processors to share processor resources based on tightly controlled mechanisms such as secure software instructions or hardware exceptions. The context of the currently running virtual processor is saved the context of the virtual processor being switched to is restored and processing is restarted in the restored virtual processor. Time sliced execution protects the trusted security zone by stopping the execution of the normal partition while the secure partition is executing.

The two virtual processors context switch via a processor mode called monitor mode when changing the currently running virtual processor. The mechanisms by which the processor can enter monitor mode from the normal partition are tightly controlled. The entry to monitor mode can be triggered by software executing a dedicated instruction the Secure Monitor Call SMC instruction or by a subset of the hardware exception mechanisms such as hardware interrupts which can be configured to cause the processor to switch into monitor mode. The software that executes within monitor mode then saves the context of the running virtual processor and switches to the secure virtual processor.

The trusted security zone runs a separate operating system that is not accessible to the device users. For security purposes the trusted security zone is not open to users for installing applications which means users do not have access to install applications in the trusted security zone. This prevents corrupted applications or malware applications from executing powerful instructions reserved to the trusted security zone and thus preserves the trust of the device. The security of the system is achieved at least in part by partitioning the hardware and software resources of the mobile phone so they exist in one of two partitions the secure partition for the security subsystem and the normal partition for everything else. Placing the trusted security zone in the secure partition and restricting access from the normal partition protects against software and basic hardware attacks. Hardware logic ensures that no secure partition resources can be accessed by the normal partition components or applications. A dedicated secure partition operating system runs in a virtual processor separate from the normal partition operating system that likewise executes in its own virtual processor. Users may install applications on the mobile device which may execute in the normal partition operating system described above. The trusted security zone runs a separate operating system for the secure partition that is installed by the mobile device manufacturer or vendor and users are not able to install new applications in or alter the contents of the trusted security zone. It is anticipated that implementing trusted hardware drivers will further fortify the trusted security zone against nefarious programs.

Turning now to an electronic device is described. In an embodiment the electronic device comprises a memory a radio frequency transceiver RF XCVR a processor a plurality of peripheral hardware devices HW DEV a permissive sector and a trusted security zone . The memory may be partitioned into the permissive sector and the trusted security zone . The permissive sector may comprise a plurality of non trusted applications a plurality of hardware drivers HW DVR and or other non trusted information. The trusted security zone may comprise a plurality of trusted applications trusted information INF a plurality of trusted hardware drivers HW DVR and or other items stored in trust. As discussed hereinabove with reference to trusted security zones the hardware and software components of the electronic device may be partitioned into permissive sectors and trusted security zones. For example the processor may be divided into the permissive sector and the trusted security zone .

In an embodiment the processor may be a multi core processor for example a dual core or quad core processor wherein the permissive sector and the trusted security zone reside in separate cores. shows the processor as a single processor but it should be understood that the electronic device may comprise multiple processors and these processors may comprise a substantially similar separation of the permissive sector and the trusted security zone . Alternatively when the electronic device comprises multiple processors each processor may be designated as being either wholly in the permissive sector or wholly in the trusted security zone . Similar to their depiction in the processor the permissive sector and the trusted security zone are depicted as sharing the memory in . The permissive sector and the trusted security zone may occur as separate partitions of a single memory chip or they may occur in physically separate chips.

In an embodiment the plurality of hardware drivers and the plurality of trusted hardware drivers may each comprise drivers for a printer a video adaptor a network card a sound card a local bus low bandwidth I O buses a computer storage device a digital camera a key board a monitor a display speakers mice and or other drivers. The plurality of peripheral hardware devices may comprise a printer a video adaptor a network card a sound card a local bus a low bandwidth I O bus a computer storage device a digital camera a key board a monitor a display speakers mice and or other peripheral hardware devices.

In an embodiment the non trusted applications may invoke the hardware drivers in order to interact with the peripheral hardware devices . In an embodiment the trusted applications stored in the trusted security zone may also interact with the peripheral hardware devices . When one of the trusted applications is activated activity in the permissive sector ceases until all operations in the trusted security zone terminate in order to limit nefarious programs from breaching the trusted security zone . The trusted applications may invoke either the hardware drivers or the trusted hardware drivers to facilitate interaction with the peripheral hardware devices . In an embodiment the trusted applications may make calls in the trusted security zone for access to the trusted hardware drivers in response to receipt of instructions for use of the peripheral hardware devices . Alternatively the trusted applications may invoke the hardware drivers after their integrity is confirmed.

A first trusted application of the trusted applications may be configured to invoke either one of the hardware drivers or one of the trusted hardware drivers in response to activation instructions. Or in some cases the first trusted application may be configured to invoke a plurality of the hardware drivers and or the trusted hardware drivers in response to activation instructions. In an embodiment the electronic device may perform a confidence check on the hardware drivers and or the trusted hardware drivers in response to activation of the first trusted application and or in response to being powered on. The electronic device may be configured to perform the confidence check on the hardware drivers that are to be invoked by the first trusted application the trusted hardware drivers that are to be invoked by the first trusted application all of the hardware drivers or to perform the confidence check on a combination of the hardware drivers and the trusted hardware drivers . In an embodiment the electronic device may be configured to allow the first trusted application to invoke the trusted hardware drivers without performing the confidence check.

The confidence check may comprise performing an error detection action such as a checksum a bit count of the hardware driver a cyclic redundancy check a repetition code check a horizontal redundancy check a vertical redundancy check checking information about a parity bit checking a digital signature performing a cryptographic hash function or performing another type of check configured to evaluate the integrity of the hardware drivers and or the trusted hardware drivers . In an embodiment a second trusted application of the trusted applications may be configured to amass information about an uncompromised state of the hardware drivers and or the trusted hardware drivers and store the information as trusted information in the trusted security zone for use when the electronic device performs the confidence check.

The uncompromised state of the hardware drivers and the trusted hardware drivers may be a state that is free from sniffers malware Trojans spyware viruses and other nefarious programs. The hardware drivers and the trusted hardware drivers may be obtained in the uncompromised state and have information about their uncompromised state stored by the second trusted application as trusted information in the trusted security zone of the memory upon their installation in the electronic device . Information about the uncompromised state of the hardware drivers and the trusted hardware drivers may comprise information to be used in the confidence check. For example the information may be information about an error detection action such as a checksum a bit count of the hardware driver information about a cyclic redundancy check information about a repetition code information about a horizontal redundancy check information about a vertical redundancy check information about a parity bit a digital signature or information about a cryptographic hash function. In the case of a checksum the second trusted application may obtain a checksum value for the uncompromised state of the trusted hardware drivers and or the hardware drivers and store the value in the trusted security zone .

In an embodiment the electronic device may activate the second trusted application to perform the confidence check in response to receipt of activation instructions by the first trusted application . The confidence check may comprise comparing the information about the uncompromised state of a hardware driver to be invoked by the first trusted application with a current state of the hardware driver in question wherein the hardware driver in question may be either one of the hardware drivers or one of the trusted hardware drivers . The current state may be the state of the hardware driver in question before it is invoked and after the first trusted application has received activation instructions. The comparison may comprise comparing a checksum value obtained for the uncompromised state of the hardware driver in question with a checksum value obtained for the current state of said hardware driver. Alternatively the comparison may comprise comparing results of an error detection action performed on the uncompromised state and the current state of the hardware driver in question as described hereinabove with reference to the confidence check or it may comprise comparing results from another error detection action performed by the electronic device .

In an embodiment the electronic device may be configured to respond to a result of the comparison between the current state and the uncompromised state of the hardware driver in question. The response may be to allow the first trusted application to invoke the hardware driver in question in response to the result when the result indicates that the current state of the hardware driver in question corresponds to the uncompromised state of the hardware driver in question. The uncompromised state and the current state of the hardware driver in question may be said to correspond if the comparison indicates that the current state of the hardware driver in question is unaltered from the uncompromised state of the hardware driver in question. In this case the electronic device may have confidence that the trusted security zone will not be compromised by allowing the first trusted application to invoke the hardware driver in question when the result indicates that the two states of the hardware driver in question correspond.

Alternatively the electronic device may respond by replacing the current state of the hardware driver in question with the uncompromised state of the hardware driver in question the electronic device may prevent the first trusted application from invoking the hardware driver in question and or prompt the user with options in response to the result when the result indicates that the current state of the hardware driver in question does not correspond to the uncompromised state of the hardware driver in question. The electronic device may enact this response in order to inhibit nefarious programs from corrupting the trusted security zone .

Turning now to a communication system is described. In an embodiment the communication system comprises the electronic device a base transceiver station BTS a wireless access point AP a network a trusted server SVR and a hardware driver data store HW DVR DB . The electronic device may access the network through wireless communication with the base transceiver station and or the wireless access point . Additionally it is contemplated that the electronic device may be hardwired to the network . The network may be connected to the trusted server which may be connected to the hardware driver data store .

The electronic device may obtain drivers from the hardware driver data store . The drivers may be device drivers hardware driver or some other form of drivers configured to facilitate communication between the electronic device and peripheral components. The following embodiments will be discussed with reference to hardware drivers but it should be understood that the embodiments may alternatively implement other drivers as discussed hereinabove. In an embodiment the electronic device may obtain hardware drivers from the hardware driver data store in a manner that preserves the integrity of the trusted security zone . For example the electronic device may obtain the hardware drivers through end to end trusted communications infrastructure as described hereinabove. The hardware drivers may comprise the hardware drivers to be installed in the permissive sector and or the trusted hardware drivers to be installed in the trusted security zone . At the time of installation the second trusted application may gather information about the uncompromised state of the hardware drivers and store the information in the trusted security zone . The information may be information about the error detection action as described hereinabove with reference to . When the hardware drivers are stored in the permissive sector the hardware drivers may be configured for use by both the non trusted applications and the trusted applications . The electronic device may allow the non trusted applications to invoke the hardware drivers without first verifying the integrity of the hardware drivers however in order to preserve the trusted environment the electronic device will perform the confidence check on the hardware drivers before the trusted applications invoke the hardware drivers.

If the hardware driver to be invoked by one of the trusted applications is determined to be in the uncompromised state the electronic device may allow the trusted application to invoke the driver and proceed as normal. When the hardware driver to be invoked by the trusted application is determined to be compromised and or otherwise altered from the uncompromised state the electronic device may take action to prevent the trusted application from invoking the hardware driver in response to the determination. In an embodiment the electronic device may arrest the activity of the trusted application and prompt a user with an option to either continue and risk the integrity of the trusted security zone or abort the activities of the trusted application . Alternatively the electronic device may replace the compromised hardware driver with a new uncompromised hardware driver taken from the hardware driver data store .

In an embodiment hardware drivers may be obtained from the hardware driver data store and each hardware driver may have a version stored in the permissive sector and a version stored in the trusted security zone . A version may be a copy of the hardware driver. The electronic device may be configured to obtain hardware drivers from the hardware driver data store store the hardware drivers in the trusted security zone and copy a version of the hardware drivers stored in the trusted security zone into the permissive sector . The trusted applications may be configured to use exclusively trusted versions of the hardware drivers they may be configured to use exclusively versions of the hardware drivers stored in the permissive sector that have been confirmed to be in the uncompromised state or they may be configured to use versions of the hardware drivers interchangeably provided that the hardware drivers have been determined to be in the uncompromised state. In an embodiment when a hardware driver stored in the permissive sector is determined to be compromised and or otherwise changed from its uncompromised state the electronic device may copy an uncompromised version of the hardware driver from the trusted security zone to the permissive sector such that the trusted applications may invoke the driver with confidence.

In a method is described. The method will be discussed with reference to hardware drivers but it should be understood that the method may alternatively implement device drivers or other drivers as discussed hereinabove with reference to . At block an application that is stored in a trusted security zone of an electronic device and is configured to invoke a hardware driver may be activated. A confidence check on the hardware driver may be performed at block in response to activating the application. The confidence check may comprise activating a second application stored in the trusted security zone that is configured to perform the confidence check as described hereinabove with reference to and . The integrity of the hardware driver may be evaluated by comparing a current state of the hardware driver to an uncompromised state of the hardware driver stored in the trusted security zone at block . In an embodiment the comparison may be made by the second application stored in the trusted security zone. At block an action may be performed by the electronic device in response to the result of the evaluation. The action may be to allow the application to invoke the hardware driver when the result indicates that the hardware driver is in the uncompromised state. Alternatively the action may be to prevent the application from invoking the hardware driver when the result indicates that the hardware driver is compromised and or altered from the uncompromised state. The electronic device may replace the current state of the hardware driver with the uncompromised state of the hardware driver. Replacing the current state of the hardware driver with the uncompromised state of the hardware driver may comprise copying a version of the uncompromised state of the hardware driver from the trusted security zone into the permissive sector. The compromised and or altered hardware driver may then be removed from the electronic device. In an embodiment the electronic device may prompt a user with an option to either allow the application to invoke the hardware driver or to prevent the application from invoking the hardware driver when the result indicates that the hardware driver is compromised and or altered from the uncompromised state.

Performing the confidence check on the hardware driver when the application stored in the trusted security zone is activated may help to prevent the trusted security zone from being invaded by nefarious programs. By retaining a secure trusted security zone the user may experience greater security while operating the electronic device. For example with the trusted security zone intact the user may have confidence that credit card information and or other confidential personal information is not being accessed or viewed by nefarious programs while the user is interacting with such information in the trusted security zone.

The DSP or some other form of controller or central processing unit operates to control the various components of the mobile device in accordance with embedded software or firmware stored in memory or stored in memory contained within the DSP itself. In addition to the embedded software or firmware the DSP may execute other applications stored in the memory or made available via information carrier media such as portable data storage media like the removable memory card or via wired or wireless network communications. The application software may comprise a compiled set of machine readable instructions that configure the DSP to provide the desired functionality or the application software may be high level software instructions to be processed by an interpreter or compiler to indirectly configure the DSP .

The DSP may communicate with a wireless network via the analog baseband processing unit . In some embodiments the communication may provide Internet connectivity enabling a user to gain access to content on the Internet and to send and receive e mail or text messages. The input output interface interconnects the DSP and various memories and interfaces. The memory and the removable memory card may provide software and data to configure the operation of the DSP . Among the interfaces may be the USB port and the infrared port . The USB port may enable the mobile device to function as a peripheral device to exchange information with a personal computer or other computer system. The infrared port and other optional ports such as a Bluetooth interface or an IEEE 802.11 compliant wireless interface may enable the mobile device to communicate wirelessly with other nearby handsets and or wireless base stations.

The keypad couples to the DSP via the interface to provide one mechanism for the user to make selections enter information and otherwise provide input to the mobile device . Another input mechanism may be the touch screen LCD which may also display text and or graphics to the user. The touch screen LCD controller couples the DSP to the touch screen LCD . The GPS receiver is coupled to the DSP to decode global positioning system signals thereby enabling the mobile device to determine its position.

It is understood that by programming and or loading executable instructions onto the computer system at least one of the CPU the RAM and the ROM are changed transforming the computer system in part into a particular machine or apparatus having the novel functionality taught by the present disclosure. It is fundamental to the electrical engineering and software engineering arts that functionality that can be implemented by loading executable software into a computer can be converted to a hardware implementation by well known design rules. Decisions between implementing a concept in software versus hardware typically hinge on considerations of stability of the design and numbers of units to be produced rather than any issues involved in translating from the software domain to the hardware domain. Generally a design that is still subject to frequent change may be preferred to be implemented in software because re spinning a hardware implementation is more expensive than re spinning a software design. Generally a design that is stable that will be produced in large volume may be preferred to be implemented in hardware for example in an application specific integrated circuit ASIC because for large production runs the hardware implementation may be less expensive than the software implementation. Often a design may be developed and tested in a software form and later transformed by well known design rules to an equivalent hardware implementation in an application specific integrated circuit that hardwires the instructions of the software. In the same manner as a machine controlled by a new ASIC is a particular machine or apparatus likewise a computer that has been programmed and or loaded with executable instructions may be viewed as a particular machine or apparatus.

The secondary storage is typically comprised of one or more disk drives or tape drives and is used for non volatile storage of data and as an over flow data storage device if RAM is not large enough to hold all working data. Secondary storage may be used to store programs which are loaded into RAM when such programs are selected for execution. The ROM is used to store instructions and perhaps data which are read during program execution. ROM is a non volatile memory device which typically has a small memory capacity relative to the larger memory capacity of secondary storage . The RAM is used to store volatile data and perhaps to store instructions. Access to both ROM and RAM is typically faster than to secondary storage . The secondary storage the RAM and or the ROM may be referred to in some contexts as computer readable storage media and or non transitory computer readable media.

I O devices may include printers video monitors liquid crystal displays LCDs touch screen displays keyboards keypads switches dials mice track balls voice recognizers card readers paper tape readers or other well known input devices.

The network connectivity devices may take the form of modems modem banks Ethernet cards universal serial bus USB interface cards serial interfaces token ring cards fiber distributed data interface FDDI cards wireless local area network WLAN cards radio transceiver cards such as code division multiple access CDMA global system for mobile communications GSM long term evolution LTE worldwide interoperability for microwave access WiMAX and or other air interface protocol radio transceiver cards and other well known network devices. These network connectivity devices may enable the processor to communicate with the Internet or one or more intranets. With such a network connection it is contemplated that the processor might receive information from the network or might output information to the network in the course of performing the above described method steps. Such information which is often represented as a sequence of instructions to be executed using processor may be received from and outputted to the network for example in the form of a computer data signal embodied in a carrier wave.

Such information which may include data or instructions to be executed using processor for example may be received from and outputted to the network for example in the form of a computer data baseband signal or signal embodied in a carrier wave. The baseband signal or signal embedded in the carrier wave or other types of signals currently used or hereafter developed may be generated according to several methods well known to one skilled in the art. The baseband signal and or signal embedded in the carrier wave may be referred to in some contexts as a transitory signal.

The processor executes instructions codes computer programs scripts which it accesses from hard disk floppy disk optical disk these various disk based systems may all be considered secondary storage ROM RAM or the network connectivity devices . While only one processor is shown multiple processors may be present. Thus while instructions may be discussed as executed by a processor the instructions may be executed simultaneously serially or otherwise executed by one or multiple processors. Instructions codes computer programs scripts and or data that may be accessed from the secondary storage for example hard drives floppy disks optical disks and or other device the ROM and or the RAM may be referred to in some contexts as non transitory instructions and or non transitory information.

In an embodiment the computer system may comprise two or more computers in communication with each other that collaborate to perform a task. For example but not by way of limitation an application may be partitioned in such a way as to permit concurrent and or parallel processing of the instructions of the application. Alternatively the data processed by the application may be partitioned in such a way as to permit concurrent and or parallel processing of different portions of a data set by the two or more computers. In an embodiment virtualization software may be employed by the computer system to provide the functionality of a number of servers that is not directly bound to the number of computers in the computer system . For example virtualization software may provide twenty virtual servers on four physical computers. In an embodiment the functionality disclosed above may be provided by executing the application and or applications in a cloud computing environment. Cloud computing may comprise providing computing services via a network connection using dynamically scalable computing resources. Cloud computing may be supported at least in part by virtualization software. A cloud computing environment may be established by an enterprise and or may be hired on an as needed basis from a third party provider. Some cloud computing environments may comprise cloud computing resources owned and operated by the enterprise as well as cloud computing resources hired and or leased from a third party provider.

In an embodiment some or all of the functionality disclosed above may be provided as a computer program product. The computer program product may comprise one or more computer readable storage medium having computer usable program code embodied therein to implement the functionality disclosed above. The computer program product may comprise data structures executable instructions and other computer usable program code. The computer program product may be embodied in removable computer storage media and or non removable computer storage media. The removable computer readable storage medium may comprise without limitation a paper tape a magnetic tape magnetic disk an optical disk a solid state memory chip for example analog magnetic tape compact disk read only memory CD ROM disks floppy disks jump drives digital cards multimedia cards and others. The computer program product may be suitable for loading by the computer system at least portions of the contents of the computer program product to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system . The processor may process the executable instructions and or data structures in part by directly accessing the computer program product for example by reading from a CD ROM disk inserted into a disk drive peripheral of the computer system . Alternatively the processor may process the executable instructions and or data structures by remotely accessing the computer program product for example by downloading the executable instructions and or data structures from a remote server through the network connectivity devices . The computer program product may comprise instructions that promote the loading and or copying of data data structures files and or executable instructions to the secondary storage to the ROM to the RAM and or to other non volatile memory and volatile memory of the computer system .

In some contexts the secondary storage the ROM and the RAM may be referred to as a non transitory computer readable medium or a computer readable storage media. A dynamic RAM embodiment of the RAM likewise may be referred to as a non transitory computer readable medium in that while the dynamic RAM receives electrical power and is operated in accordance with its design for example during a period of time during which the computer is turned on and operational the dynamic RAM stores information that is written to it. Similarly the processor may comprise an internal RAM an internal ROM a cache memory and or other internal non transitory storage blocks sections or components that may be referred to in some contexts as non transitory computer readable media or computer readable storage media.

While several embodiments have been provided in the present disclosure it should be understood that the disclosed systems and methods may be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

Also techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein.

