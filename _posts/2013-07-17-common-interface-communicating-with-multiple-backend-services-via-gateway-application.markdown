---

title: Common interface communicating with multiple back-end services via gateway application
abstract: Systems and methods are disclosed for providing a common interface for communicating with multiple back-end services via a gateway application. In an example embodiment, a gateway application receives a first web service request and a second web service request. The first and second web service requests are generated by interactions with a graphical interface provided by the gateway application. The graphical interface can access a first service and a second service using different authentication protocols. The gateway application can respond to the first and second web service requests by executing a first function provided by the first service and a second function provided by the second service. Executing the first and second functions includes transmitting respective first and second service requests to the first and second services that are respective signed using a first authentication protocol for the first service and a second authentication protocol for the second service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09288281&OS=09288281&RS=09288281
owner: Adobe Systems Incorporated
number: 09288281
owner_city: San Jose
owner_country: US
publication_date: 20130717
---
This disclosure relates generally to computer implemented methods and systems and more particularly relates to providing a common interface for communicating with multiple back end services via a gateway application.

Applications accessible via a data network may utilize multiple back end services. For example a social media marketing application may communicate with multiple systems providing different services such as an analytics service a campaign development service a dashboard service etc. Different services may be implemented using different architectures. For example a first service may be implemented via Ruby on Rails a second service may be implemented via PHP and a third service may be implemented via Java.

Different services implemented using different architectures may not include functions for communicating with one another. For example a first service using state information e.g. a cookie for a session with a user may not be able to share the state information with a second service. A user accessing an application using state information from the first services may experience degraded performance or inconvenience if the application requires state information usable by the second service for proper functionality.

In an example embodiment a gateway application receives a first web service request and a second web service request. The first and second web service requests are generated by interactions with a graphical interface provided by the gateway application. The graphical interface can access a first service and a second service using different authentication protocols. The gateway application can respond to the first and second web service requests by executing a first function provided by the first service and a second function provided by the second service. Executing the first and second functions includes transmitting respective first and second service requests to the first and second services that are respective signed using a first authentication protocol for the first service and a second authentication protocol for the second service.

These illustrative embodiments are mentioned not to limit or define the disclosure but to provide examples to aid understanding thereof. Additional embodiments are discussed in the Detailed Description and further description is provided there.

Computer implemented systems and methods are disclosed for providing a common interface for communicating with multiple back end services via a gateway application. The gateway application can provide a common HTTP endpoint or other network endpoint for clients to access a variety of services and applications within a common graphical interface. The gateway application can perform authentication perform session management and provide a single and or uniform graphical interface layout. The gateway application can also transform incoming commands received via the graphical interface into service requests for routing to backend services implemented using different programming languages or other system architectures.

The following non limiting example is provided to help introduce the general subject matter of certain embodiments. A software application accessible by a client via a data network such as a web based application or other suitable application may provide a graphical interface. Providing the graphical interface can include accessing various back end services to generate HTML and or Javascript or other suitable graphical interface components renderable by a browser application. For example a user may access a social media marketing application via the Internet. A graphical interface for the software application may provide a menu of functions that the user can perform via the software application. The functions can be provided by different back end services. For example the same menu may include a first function for creating or managing the content of a marketing campaign and a second function for obtaining analytics regarding different marketing campaigns. A first service such as a marketing service may be accessible via the software application for performing functions related to creating or managing the content of a marketing campaign. A second service such as an analytics service may be accessible via the software application for performing functions related to obtaining analytics regarding different marketing campaigns. The software application can respond to the selection of one of the first or second functions in the graphical interface by identifying a respective one of the first or second services providing the function generating a request for the function usable by the service receiving a response from the service and output the response in the graphical interface.

In accordance with some embodiments a gateway application receives a service request via a graphical interface. The gateway application can provide the graphical interface by accessing various back end services to generate HTML and or Javascript or other suitable graphical interface components renderable by a browser application. The gateway application can transmit code for the graphical interface to a browser application executed at a computing system. The browser application can render the graphical interface provided by the gateway application based on the HTML and or Javascript or other suitable graphical interface components. The graphical interface can communicate with first and second services respectively operating on first and second architectures using different authentication protocols. The first architecture can be different from the second architecture. The gateway application can identify the first service or the second service for responding to the service request. The first service or the second service is identified based on parameters extracted from the service request. For example a request may be a Hypertext Transfer Protocol HTTP request that includes an identifier for one of the services and an identifier for a function provided by the identified service. The gateway application can extract the identifiers for the service and the function from the HTTP request. The gateway application transforms the command into a service request for communication with the first or second service. For example the gateway application can generate a service request that includes the identifier for the function provided by the service. The service request can be generated in a format that can be interpreted by the identified service such as a language independent data interchange format that can be parsed by different programming languages. A non limiting example of data formatted in a language independent data interchange format is a JavaScript Object Notation JSON message. The gateway application can sign the service request using an authentication protocol specific to the identified service. The gateway application can provide the service request to the identified service and receive data in response to the service request.

In some embodiments the service request includes shared session information managed by the gateway application. The shared session information managed by the gateway application includes filters such as a selected dataset a selected date range an authenticated username and or company and or a selected locale for a user. The gateway application can provide output to the graphical interface based on the response received by the gateway application from the identified service. For example the gateway application can modify the layout of the graphical interface and or present data returned by the identified service based on the response from the identified service.

Back end services may be configured to operate independently of one another to enable independent development of the services. For example as the functionality of an application or other software tool is expanded difficulties may arise in coordinating efforts among different developers providing different functions in the application or software tool. Separating an application into loosely coupled services can reduce such difficulties by allowing different functions in different services to be developed independently and integrated via a gateway application.

As used herein the term service is used to refer to one or more systems one or more applications and or a combination thereof for providing electronic content to entities via a data network and or performing one or more electronic services on behalf of entities via a data network. In some embodiments a service can require authentication such that the service is accessible by entities identified by or otherwise associated with client accounts or other suitable credentials and or authentication information. Non limiting examples of services include analytics applications social media applications etc.

As used herein the term gateway application is used to refer to an application that can provide access to data functions or other attributes of two or more services.

As used herein the term electronic content is used to refer to any type of media that can be rendered for display or use at a computing system or other electronic device. Electronic content can include text or multimedia files such as images video audio or any combination thereof. Electronic content can also include application software that is designed to perform one or more specific tasks at a computing system.

As used herein the term architecture is used to refer to a configuration of one or more applications that is used to define logical objects used by applications in a system properties of logical objects used by applications in the system communication protocols between logical objects and the like. An architecture can include a programming language used to implement applications in a system such as but not limited to Ruby on Rails PHP etc. An architecture can also include one or more authentication protocols for authenticating entities requesting access to a system. An architecture can also include one or more encryption protocols for securely communicating data with a system and or between components of a system.

As used herein the term authentication protocol is used to refer to one or more processes used to verify that an entity is authorized to access data functions or other attributes of a service or other system. Non limiting examples of authentication protocls used by back end services include an OAuth authentication protocol a Web Services Security WSSE authentication protocol etc.

As used herein the term signing is used to refer to encrypting or otherwise modifying a service request or other data message in a manner that demonstrates the authenticity of the service request or other data message to a recipient of the service request or other data message. For example service requests to be transmitted to a service using an OAuth authentication protocol can be digitally signed in accordance with one or more procedures specified by the OAuth authentication protocol.

As used herein the term entity is used to refer to an individual organization or other logical identity that can be uniquely identified by an application or service. An entity can be identified by reference to one or more client accounts and or by reference to a software identifier and or hardware identifier associated with an application and or device used to access a service.

As used herein the term cloud service is used to refer to one or more computing resources including computing systems and or applications that can be provided as an online service via a data network. The collection of computing systems and or hardware can be represented as a single service. The cloud service can provide a digital hub for browsing creating sharing and otherwise using electronic content using one or more applications provided via the cloud service.

As used herein the term back end service is used to refer to a service including one or more applications executed on a server system. A back end service can provide electronic content and or perform one or more operations in response to a request or command transmitted using a gateway application.

A gateway application can be used to coordinate between services having any difference in implementation architecture. In some embodiments differences in implementation architecture can include the first service being accessible via a first endpoint of a first communication channel different from a second endpoint of a second communication channel via which the second service is accessible such as the services being hosted on different computing systems or accessible via different ports. In other embodiments differences in implementation architecture can include the first service including at least one first function that is incompatible for communication with at least one second function included in the second architecture. For example one or more function calls of a first programming language may be incompatible with one or more function calls of a second programming language. In other embodiments differences in implementation architectures can include differences in authentication procedures for the different services.

As used herein the term communication channel is used to refer to a bi directional network connection established between a first computing system such as a first server providing a gateway application and a second computing system such as a second server providing a back end service. A non limiting example of a communication channel is a network connection between different devices on a common network domain.

As used herein the term network domain is used to refer to logical groups of computing devices connected to a computer network used to identify the computing devices in various forms of electronic communication such as the Internet e mail etc.

As used herein the term port is used to refer to a logical construct used as an endpoint for a communication channel by an operating system of a computing system. Applications hosted on a computing system can access data addressed to the port. For example the operating system of a computing system can address packetized data to a specific port on a server by including a port number identifying the destination port in the header of each data packet transmitted to the server. When the server receives the addressed data packets the operating system of the server can route the data packets to the port that is the endpoint for a socket connection or other communication channel.

As used herein the term function call is used to refer to an expression in a programming language identifying an action to be performed. A function call can include a name of the function and a list of inputs or other parameters on which the function will act.

Referring now to the drawings is a block diagram depicting example computing systems for implementing certain embodiments. The example computing systems include a server system server systems and a computing system in communication via one or more data networks .

The server system and the server systems respectively include processors . Non limiting examples of processors include a microprocessor an application specific integrated circuit ASIC a state machine or other suitable processing device. Each of the processors can include any number of computer processing devices including one. Each of the processors can be communicatively coupled to a computer readable medium such as memories respectively. The processors can execute computer executable program instructions and or access information stored in the memories 

The memories can store instructions that when executed by the processors cause the processor to perform operations described herein. The memories may be a computer readable medium such as but not limited to an electronic optical magnetic or other storage device capable of providing a processor with computer readable instructions. Non limiting examples of such optical magnetic or other storage devices include read only ROM device s random access memory RAM device s magnetic disk s magnetic tape s or other magnetic storage memory chip s an ASIC configured processor s optical storage device s floppy disk s CD ROM DVD or any other medium from which a computer processor can read instructions. The instructions may comprise processor specific instructions generated by a compiler and or an interpreter from code written in any suitable computer programming language. Non limiting examples of suitable computer programming languages include Ruby on Rails C C C Visual Basic Java Python Perl JavaScript ActionScript and the like.

The server systems can also respectively include buses . The buses can communicatively couple one or more components of each of the server systems respectively.

Each of the server systems can respectively include a number of external or internal devices such as input or output devices. For example the server systems are respectively depicted with input output I O interfaces for receiving input data from input devices and or providing output data to output devices.

A client application can be executed or otherwise used at the computing system . The client application can include one or more software modules for establishing communication with the service provider application . A non limiting example of a client application is a web browser application.

The server system can include any suitable computing system for hosting the service provider application . In one embodiment the server system may be a single computing system such as a server system. In another embodiment the server system may be a virtual server implemented using a number of computing systems connected in a grid or cloud computing topology.

The computing system can include any suitable computing device or system for communicating via a data network and executing the client application . Non limiting examples of suitable computing devices or systems include a desktop computer a tablet computer a smart phone or any other computing device or system suitable for using electronic content.

In some embodiments the gateway application can be accessed by a client application that is a web browsing application. The gateway application can provide a single HTTP endpoint or other logical endpoint for client applications to access different back end services . The gateway application can generate a common graphical interface that can be displayed via a web browser application or other suitable client application . For example the gateway application can provide a graphical interface for accessing one or more applications and or services provided by a cloud service executed on the server system or another computing system in communication with the server system .

The gateway application can provide the graphical interface by accessing the back end services to generate HTML and or Javascript or other suitable graphical interface components renderable by a browser application or other suitable client application executed at the computing system . The gateway application can transmit code for the graphical interface to the browser application or other suitable client application . The browser application or other suitable client application can render the graphical interface provided by the gateway application based on the HTML and or Javascript or other suitable graphical interface components.

The back end services can perform different types of operations in response to input received via the gateway application . For example a social media publishing back end service may process requests to publish to a social media service accessible via the client application and a reporting service may generate output data to be provided as a report to the client application .

The back end services can be implemented using or otherwise operate on different architectures. One non limiting example of a difference between architectures used to implement the back end services is the use of different authentication protocols for verifying that an entity is authorized for accessing the back end services . For example a first back end service may use an authentication protocol such as an OAuth authentication protocol and a second back end service may use an authentication protocol such as a WSSE authentication protocol. The different authentication protocols can utilize different processes for authenticating an entity. The gateway application can provide a logical abstraction layer such that the appropriate authentication protocols can respectively be used for each of the back end services . The gateway application can sign and or otherwise format service requests in a manner specific to a given one of the authentication protocols 

Another non limiting example of a difference between architectures used to implement the back end services is the use of different programming languages to implement the back end services . For example each of the back end services may be implemented using any of Ruby on Rails PHP Java etc. A programming language used to implement back end service may be incompatible for communication with programming language used to implement back end service . Another non limiting example of a difference between architectures used to implement the back end services is the use of different application programming interfaces API to implement the back end services . An API for a back end service may include functions for which the API of a back end service lacks a corresponding function call.

Another non limiting example of a difference between architectures used to implement the back end services is the use of different endpoints and or different communication channels to access the back end services . The use of different endpoints and or different communication channels can include but is not limited to the back end services being hosted on different network domains being hosted on computing systems with different network addresses being accessible via different ports etc.

The graphical interface can be generated based at least partially on one or more functions provided by the back end services . As depicted in functions accessible via the gateway application may be respectively provided by the back end services . Although each of the back end services is respectively depicted in as providing a single function for purposes of simplicity each of the back end services can provide any number of functions accessible via a graphical interface and or a gateway application .

The gateway application can combine visual representations of the functions in the graphical interface . For example a gateway application may provide access to the functions via a menu . The gateway application can include the menu in the graphical interface . The menu can include functions from the back end services . For example a menu can include commands corresponding to functions such as a marketing campaign function and analytics function . The client application can generate Ajax commands or other suitable commands in response to selections of commands in the graphical interface .

In some embodiments the graphical interface can be generated based on the permissions associated with a given entity with respect to the back end services . For example a client entity accessing the gateway application via the client application may have sufficient permission to access the function provided by the back end service and lack sufficient permission to access the function provided by the back end service . The gateway application can present a command in the menu and hide or otherwise exclude a command from the menu .

In some embodiments the gateway application can authenticate client entities accessing the gateway application via the client application . For example the gateway application can generate a prompt in the graphical interface for receiving authentication information about an entity. Non limiting examples of authentication information include a user name a password biometric data a personal identification number a digital certificate or some combination thereof. The authentication information can be used to verify that an entity is authorized to access functions provided by the back end services as described in greater detail below.

A session can include a period of time during which the client application can access services or applications via the gateway application . A session can be delineated by a first point in time at which an entity is authenticated using the gateway application and a second point in time at which the authentication is terminated e.g. via the entity logging out of the gateway application or the authentication expiring after a period of inactivity .

The gateway application can also perform session management for communication sessions between the gateway application and the client application . Session management can include tracking of activity by an entity during a session and or across multiple sessions. Non limiting examples of session management can include tracking which back end services are accessed by the client application which electronic content has been accessed by the client application etc. A state during a first session can be recreated in a second session such as by providing access to the same back end services and or electronic content in the second session that was accessed during the first session.

In some embodiments the gateway application may also include features specific to web browser interfaces. For example the gateway application may include common Javascript components or other suitable graphical interface libraries for integrating functions from different back end services . The Javascript components or other suitable graphical interface libraries can allow the gateway application to interact with back end services implemented using different back end architectures.

The common interface can include one or more objects commands or other features accessible via the gateway application . For example the common interface can include a title area that identifies a tool such as a Provider Social Marketing Application provided via a cloud service titled Provider Marketing Cloud. A tool can be a logical representation of a product or core solution for accessing a collection of back end services. The common interface can also include a menu that includes links to different functions provided by the back end services . For example as depicted in an Overview function accessible via a command of the menu can be provided by a dashboard back end service. An Analytics function accessible via a command of the menu can be provided by an analytics or reporting back end service. A Publisher function accessible via a command of the menu can be provided by a back end service used to publish postings or other electronic content to one or more social network services. An Application function accessible via a command of the menu can be provided by a back end service used to create one or more social networking applications. A Moderation function accessible via a command of the menu can be provided by a back end service used to moderate comments in response to postings published via the Publisher function. A Settings function accessible via a command of the menu can be provided by the gateway application to control one or more configuration settings for the display of the graphical interface .

The service interface can include features and or data provided by a selected one of the back end services . For example as depicted in the service interface can include data provided by the back end service . The data can include for example as a bar graph showing different levels of interaction in different social media services for published social networking content related to a marketing campaign. A menu provided in the service interface can be used to selectively display subsets of the data displayed based on one or more criteria. For example as depicted in a marketing campaign e.g. Campaign1 Campaign2 or Campaign3 can be selected from a menu provided in the service interface . The data can include a bar graph showing different levels of interaction in different social media services for published social networking content related to a marketing campaign Campaign1 .

As depicted in the client application can generate a command for one or more of the back end services via interaction with a command in the graphical interface . The command can identify one of the back end services a function provided by one of the back end services and one or more parameters for the back end service.

A non limiting example of a command is an HTTP request or other web request that includes a uniform resource locator URL . The HTTP request can be generated by for example the selection of one of the commands in a menu . The URL can include parameters usable by the gateway application to access integrate or otherwise use the operations of the one or more of the back end services 

In a non limiting example a user can select the commands from the graphical interface . Selecting the command can generate a command for a tool titled Social Marketing Application and a back end service titled Service1 having a function titled Overview . The request can include a URL such as SocialMarketingApplication Service1 overview . A first parameter in the URL may identify the tool e.g. SocialMarketingApplication . The tool can be used for determining the menu displayed to a user for controlling access to functions specific to the tool and provided by the back end services and or for determining the default page to be displayed in response to the user switching to the tool. A second parameter in the URL may identify which of the back end services are to be accessed via the gateway application e.g. Service1 . For example the command may identify the back end service . A third parameter in the URL may identify the function provided by the back end service e.g. overview . In some embodiments additional parameters in the URL may identify one or more inputs to be provided to the function

The gateway application can transform the command for transmission to one or more of the back end services identified by the command . The service request can include one or more parameters extracted from the command . A non limiting example of information extracted from the command is a data from one or more forms included in the graphical interface. For example data from one or more forms can be provided as data inputs to a function provided by the back end service

The service request can also include state information provided by the gateway application . State information can include information about a session established between the gateway application and the client application . State information can be stored to the memory . One non limiting example of state information is authentication information obtained by the gateway application from a client entity via the client application . In some embodiments the authentication information can be digitally signed by the gateway application via a suitable authorization protocol. A non limiting example of a suitable authorization protocol is OAuth. One non limiting example of OAuth signing may involve using a form of Oauth such as two legged Oauth. A two legged Oauth process may involve using a Hash Message Authentication Code HMAC . The HMAC can notify the target back end service that a request was generated by the gateway application and that the request includes valid credentials for a user and account. Another non limiting example of an authentication standard that the gateway application may use is a Restful form of WSSE. A Restful form of WSSE may provide a signature in a different format and sign a request using a mechanism that is similar to HMAC to guarantee authenticity of the request. In additional or alternative embodiments the authentication information can be digitally encrypted by the gateway application via a suitable encryption process. A non limiting example of a suitable encryption process is a keyed hash message authentication code HMAC process.

Another non limiting example of state information is a requested language in which data from the back end service is to be provided. For example the back end service may be configured to generate reporting data in different human readable languages e.g. English Chinese Tagalog etc. . The human readable language can be configured via the graphical interface . Another non limiting example of state information can include an output format for the data. For example a service request to a reporting back end service may identify a specific reporting format in which the data is to be arranged.

Providing state information in a service request from the gateway application to the back end service can allow the back end service to operate in a stateless manner. The back end service operating in a stateless manner can involve the back end service providing a response to a service request that is based on the information included in the service request and that is not based on any information included in previous requests.

The service request can also include shared session information managed by the gateway application . The shared session information managed by the gateway application includes filters such as a selected dataset a selected date range an authenticated username and or company and or a selected locale for a user.

The service request can be formatted such that the back end service can return data in response to the request. For example the service request can be include one or more HTTP headers and or extension headers that can be provided to the back end service . In some embodiments the gateway application can provide a set of pre defined headers describing a state to a given one of the back end services . The pre defined headers can be consistent between different back end services 

In some embodiments the service request can be formatted as a JSON message or other language independent format. A JSON message can include simple data structures in a language independent format. Each of the back end services can include a parsing component specific to a respective programming language used to implement the back end service. The parsing component can identify the data structures and content of a message formatted as a JSON message or other language independent format.

Although depict a single graphical interface generated for a single tool other implementations are possible. In some embodiments a gateway application can provide access to multiple tools and multiple back end services . The gateway application can generate custom graphical interfaces for accessing different back end services via different tools.

As depicted in the gateway application can access a mapping between back end services and tools provided by the gateway application . The tools are logical representation of a product or core solution for accessing a collection of back end services. For example a tool can be used to access back end services a tool can be used to access back end services and a tool can be used to access the back end service

The gateway application can generate a graphical interface the tools and one or more of the functions respectively provided by the back end services . For example the gateway application can generate a graphical interface for the tool that can be used to access functions as depicted in and or a graphical interface for the tool that can be used to access functions as depicted in .

The method involves receiving a first command and a second command generated by interactions with a graphical interface provided by the gateway application for communicating with the services as shown in block . For example the processor of the server system can execute the gateway application to receive commands from a client application as described above with respect to .

The method further involves responding to the first command by executing a first function of the first service by transmitting a first service request to the first service that is signed using a first authentication protocol for the first service as shown in block . For example the processor of the server system can execute the gateway application to execute a function by transmitting a service request to the back end service as described above with respect to .

The method further involves responding to the second command by executing a second function of the second service by transmitting a second service request to the second service that is signed using a second authentication protocol for the second service as shown in block . For example the processor of the server system can execute the gateway application to execute a function by transmitting a second service request to the back end service as described above with respect to .

The method involves receiving a command via a graphical interface that is configured for communicating with a first service operating on a first architecture and a second service operating on a second architecture as shown in block . For example the processor of the server system can execute the gateway application to receive a command from a client application as described above with respect to .

The method further involves identifying at least one of the first service and the second service for responding to the command based on parameters extracted from the command as shown in block . The parameters identify at least one function provided by the at least one of the first service and the second service. For example the processor of the server system can execute the gateway application to identify which of the service provide a function included in a command as described above with respect to .

The method further involves transforming the command into a service request for communication with the identified service as shown in block . For example the processor of the server system can execute the gateway application to transform the command into a service request as described above with respect to .

The method further involves providing output to the graphical interface based on a response from the identified service as shown in block . For example the processor of the server system can execute the gateway application to provide output to the graphical interface . The output provided to the graphical interface can include data provided by one of the services via a response in response to the service request . The output provided to the graphical interface can also include presentation messages received by the gateway application from one of the services in response to the service request as described above with respect to .

In some embodiments the gateway application can allow one backend service to communicate with another backend service in a manner that shares state and authentication information without having to re implement the routing and authentication information within the back end services . A gateway token can be extracted from a request to one of the back end services . The gateway token can be used to make a call to a second one of the back end services service via the gateway application . The gateway token can be provided to the gateway application via an Authorization header. The first back end service provides a URL of the format service request for the second back end service . Common state information is also available to the back end service receiving the request. For example a report generation service can aggregate statistics from different social media services and generate a single report output by having the report generation service call the social network services via the gateway application . Routing authentication and state management can be handled automatically via the gateway application .

Block can involve extracting a first parameter from the command that identifies one of the tools as shown in block . For example as described above the request can include a URL such as SocialMarketingApplication Service1 overview . The gateway application can extract a first parameter in the URL that identifies one of the tools e.g. SocialMarketingApplication .

Block can also involve extracting a second parameter from the command that identifies one of the back end services as shown in block . For example the gateway application may extract a second parameter such as Service1 that identifies one of the back end services are to be accessed via the gateway application e.g. a dashboard back end service a publishing service configured for publishing electronic content to a social media service an analytics service configured for analyzing interactions with the electronic published to the social media service and a moderation service configured for moderating responsive electronic content submitted via interactions with the social media service .

Block can also involve extracting a third parameter from the command that identifies a function provided by one of the back end services as shown in block . For example the gateway application can extract a third parameter such as overview from the URL that identifies an Overview function provided by a dashboard back end service.

Block can also involve identifying a language independent data interchange format that can be parsed by the identified service of the back end services as shown in block . For example the gateway application can identify JSON or another suitable data interchange format for which the architecture of the identified back end service has a suitable parsing component.

Block can also involve generating the service request that includes the third parameter in the language independent data interchange format as shown in block . For example the gateway application can transmit a JSON formatted message that includes the request overview to a back end service Service1 .

In some embodiments the response can include a layout specific to the one of the tools as identified by the first parameter as shown in block . For example for the graphical interface depicted in the gateway application can select the service interface used to render data received from an Overview service in a Social Marketing Application tool based on the first parameter having the value SocialMarketingApplication. The gateway application can provide the service interface and or an instruction to render the service interface with the response provided to the client application . In a non limiting example providing a layout specific to one of the tools can include executing one or more Javascript functions or functions from one or more other suitable graphical interface libraries to lay out data provided by an identified service in a graphical interface provided by the gateway application .

Numerous specific details are set forth herein to provide a thorough understanding of the claimed subject matter. However those skilled in the art will understand that the claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Unless specifically stated otherwise it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining and identifying or the like refer to actions or processes of a computing device such as one or more computers or a similar electronic computing device or devices that manipulate or transform data represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the computing platform.

The system or systems discussed herein are not limited to any particular hardware architecture or configuration. A computing device can include any suitable arrangement of components that provides a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor based computer systems accessing stored software that programs or configures the computing system from a general purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming scripting or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.

Embodiments of the methods disclosed herein may be performed in the operation of such computing devices. The order of the blocks presented in the examples above can be varied for example blocks can be re ordered combined and or broken into sub blocks. Certain blocks or processes can be performed in parallel.

The use of adapted to or configured to herein is meant as open and inclusive language that does not foreclose devices adapted to or configured to perform additional tasks or steps. Additionally the use of based on is meant to be open and inclusive in that a process step calculation or other action based on one or more recited conditions or values may in practice be based on additional conditions or values beyond those recited. Headings lists and numbering included herein are for ease of explanation only and are not meant to be limiting.

While the present subject matter has been described in detail with respect to specific embodiments thereof it will be appreciated that those skilled in the art upon attaining an understanding of the foregoing may readily produce alterations to variations of and equivalents to such embodiments. Accordingly it should be understood that the present disclosure has been presented for purposes of example rather than limitation and does not preclude inclusion of such modifications variations and or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art.

