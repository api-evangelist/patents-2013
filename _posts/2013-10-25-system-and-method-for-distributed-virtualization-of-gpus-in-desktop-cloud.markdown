---

title: System and method for distributed virtualization of GPUs in desktop cloud
abstract: Embodiments are provided to enable graphic processing unit (GPU) virtualization for high bandwidth or rate demanding applications, such as 3D gaming, where a client communicates with a host via a virtual desktop infrastructure (VDI). The distributed GPU virtualization allows one or more VMs or comparable hosts or components without GPU access to communicate with a GPU at a different component or physical machine in a data center or a network using remote direct memory access (RDMA). A first physical machine that excludes a GPU starts a remote display driver function to handle a request to render graphics from a client via gateway. A second physical machine that comprises a GPU is instructed to start a render function for the client using the GPU. The render function communicates with the remote display driver function at the first physical machine. The rendered graphics is then sent to the client via the gateway.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09412146&OS=09412146&RS=09412146
owner: Futurewei Technologies, Inc.
number: 09412146
owner_city: Plano
owner_country: US
publication_date: 20131025
---
The present invention relates to graphics processing and in particular embodiments to a system and method for distributed virtualization of graphic processing units GPUs in desktop cloud environment.

In applications where graphics processing for a user or client is implemented remotely such as on a virtual machine VM via a remote virtual desktop infrastructure VDI image video data e.g. for 3D graphics can be rendered into a suitable format for display using a graphics processing unit GPU on a remote physical server. The rendered data is then remotely displayed at the client device. OpenGL is a graphics library that depends on GPU. Programmers use OpenGL application programming interface API to access the library to write graphics intensive programs such as Computer Aided Design CAD or games. For some programs such as games the programs simulate real world objects with computer generated graphics.

OpenGL supports hardware based rendering for 3D graphics using a GPU where hardware vendors can provide drivers for GPU rendering. However some current physical machines with VMs may not comprise GPUs due to cost and possibly other resource limitations. In some scenarios no or a limited number of VMs in a data center or network may directly access and use a GPU. In such cases there is a need for a mechanism that enables the VMs without GPU access to access a GPU with sufficient performance to keep up with the fast data rate requirements of relatively high rate applications such as 3D gaming or any other high data rate demanding remote desktop based applications that require 3D graphics rendering such as 3D CAD tools.

In accordance with an embodiment a method for supporting distributed virtualization of graphic processing in a remote desktop environment includes detecting at a management and control component a request at a gateway from a client to render graphics for remote display at the client and instructing a first physical machine that excludes a graphic processing unit GPU to start a remote display driver function to handle the request wherein the first physical machine is assigned as a host for the client. A second physical machine that comprises a GPU is also instructed to start a render function for rendering graphics for the client using the GPU. The render function communicates with the remote display driver function at the first physical machine.

In accordance with another embodiment a network component for supporting distributed virtualization of graphic processing in a remote desktop environment a processor and a computer readable storage medium storing programming for execution by the processor. The programming includes instructions to detect a request at a gateway from a client to render graphics for remote display at the client. The network component instructs a first physical machine that excludes a GPU to start a remote display driver function to handle the request wherein the first physical machine is assigned as a host for the client. The network component further instructs a second physical machine that comprises a GPU to start a render function for rendering graphics for the client using the GPU wherein the render function communicates with the remote display driver function at the first physical machine.

In accordance with another embodiment a method for supporting distributed virtualization of graphic processing in a remote desktop environment includes receiving at a gateway a request from a client to render graphics for remote display at the client. The gateway then sends the request to a first physical machine that excludes a GPU to start a remote display driver function to handle the request wherein the first physical machine is assigned as a host for the client. The gateway also receives from a second physical machine that comprises a GPU graphics data associated with the request for remote display at the client. The graphics data is rendered using the GPU at the second physical machine. The gateway then forwards the graphics data to the client.

In accordance with another embodiment a network component for supporting distributed virtualization of graphic processing in a remote desktop environment a processor and a computer readable storage medium storing programming for execution by the processor. The programming includes instructions to receive a request from a client to render graphics for remote display at the client and send the request to a first physical machine that excludes a GPU to start a remote display driver function to handle the request wherein the first physical machine is assigned as a host for the client. The network component then receives from a second physical machine that comprises a GPU graphics data associated with the request for remote display at the client wherein the graphics data is rendered using the GPU at the second physical machine. The received graphics data is then forwarded from the network component to the client.

In accordance with another embodiment a method for supporting distributed virtualization of graphic processing in a remote desktop environment includes receiving at a first physical machine that excludes a GPU a request from a remote client via a gateway to render graphics for remote display at the client. The first physical machine is assigned as a host for the client. The method further includes starting at the first physical machine a remote display driver function to handle the request and sending graphics data associated with the request to a second physical machine that comprises a GPU to render the graphics data using the GPU.

In accordance with another embodiment a network component for supporting distributed virtualization of graphic processing in a remote desktop environment includes a processor and a computer readable storage medium storing programming for execution by the processor. The programming includes instructions to receive a request from a remote client via a gateway to render graphics for remote display at the client. The network component is assigned as a host for the client and the processor is a non GPU processor unsuitable for rendering the graphics data. The network component hence starts at the first physical machine a remote display driver function to handle the request and sends graphics data associated with the request to a second network component that comprises GPU to render the graphics data using the GPU.

In accordance with another embodiment a method for supporting distributed virtualization of graphic processing in a remote desktop environment includes receiving at a physical machine comprising a GPU instructions to start a render function for rendering graphics for a client using the GPU. The method further includes receiving from a remote display driver at a host physical machine that excludes a GPU graphics data for rendering wherein the host physical machine is assigned to handle remote display of the graphics at the client. The graphics data is rendered using the render function and the GPU and then sent to a gateway that forwards the graphics data to the client.

In accordance with yet another embodiment a network component for supporting distributed virtualization of graphic processing in a remote desktop environment includes at least one processor including a GPU and a computer readable storage medium storing programming for execution by the at least one processor. The programming including instructions to receive instructions to start a render function for rendering graphics for a client using the GPU and receive from a remote display driver at a host physical machine that excludes a GPU graphics data for rendering. The host physical machine is assigned to handle remote display of the graphics at the client. The network component then renders the graphics data using the render function and the GPU. The rendered graphics data is sent to a gateway that forwards the graphics data to the client.

The foregoing has outlined rather broadly the features of an embodiment of the present invention in order that the detailed description of the invention that follows may be better understood. Additional features and advantages of embodiments of the invention will be described hereinafter which form the subject of the claims of the invention. It should be appreciated by those skilled in the art that the conception and specific embodiments disclosed may be readily utilized as a basis for modifying or designing other structures or processes for carrying out the same purposes of the present invention. It should also be realized by those skilled in the art that such equivalent constructions do not depart from the spirit and scope of the invention as set forth in the appended claims.

The making and using of the presently preferred embodiments are discussed in detail below. It should be appreciated however that the present invention provides many applicable inventive concepts that can be embodied in a wide variety of specific contexts. The specific embodiments discussed are merely illustrative of specific ways to make and use the invention and do not limit the scope of the invention.

A virtualized GPU allows desktop clouds to support high end graphics such as for OpenGL and Direct3D D3D standards. Typical available GPU virtualization systems require using a GPU in the host e.g. a server or hypervisor at a data center . The host may communicate with a user or a client via a desktop application at the client device and using the cloud e.g. the Internet and or any other suitable network s . Some applications also require having a GPU at the host. For example a 3D video image processing virtual machine requires access to a GPU. Upgrading an existing host system to support a GPU can be challenging such as in terms of cost and design. For example in many host systems hardware does not support GPU at all due to card size energy consumption or other practical issues.

Emerging technologies such as remote direct memory access RDMA can be used to optimize communication performance inside a data center network. This may be suitable for GPU virtualization applications that use relatively high bandwidth. For instance GPU virtualization systems for 3D gaming may need about 100 megabits sec mbts of compressed data versus about 500 mbts of uncompressed data. This bandwidth is suitable for a distributed GPU system in a data center network. Embodiments are provided herein to enable a GPU virtualization solution for such high bandwidth rate demanding applications for instance for 3D gaming or other 3D imaging systems. The GPU virtualization solution uses distributed virtualization of GPUs in a desktop cloud environment e.g. where a client communicates with a host via a remote desktop or VDI and access via the cloud. The provided distributed GPU virtualization allows one or more VMs or comparable hosts components without GPU access to communicate with a GPU at a different component or physical machine in a data center or a network using a RDMA based protocol and a gateway to the client as described below. The embodiments herein can be implemented for virtualizing 3D gaming applications other imaging applications or any suitable application in a desktop cloud based graphics rendering environment that may benefit from improved fast communication performance of the system.

A first physical machine may be any suitable physical component or unit e.g. server hypervisor or network card that does not comprise a GPU or has no direct GPU access. The first physical machine comprises components or function blocks that may be implemented via software and or hardware including at least one virtual machine VM for handling client requests from the client via the gateway and a remote display driver for processing data for display at the client. The first physical machine or its components are configured to implement and run OpenGL and or D3D for desktop cloud based services or other similar resource demanding services and applications.

A second physical machine may be any suitable physical component or unit e.g. server hypervisor or network card that comprises a GPU or has a direct GPU access. The second physical machine comprises a plurality of component blocks that may be implemented via hardware software or both including a dispatcher for initiating one or more render servers e.g. an application via software . Each render server comprises an image compression block and a render for handling rendering requests from the remote display driver . The second physical machine also includes a GPU and a native display driver that handles communications between the render and the GPU .

The dispatcher at a second physical machine for instance when triggered by the management system may establish more than one render server to handle more than one request from one or more clients . At each render server the render forwards the graphics data for the client from the remote display driver to the native display driver for graphics rendering. The image compression block then receives the rendered graphics from the GPU via the native display driver with or without the render implements standard compression format e.g. MPEG with or without additional compression to meet the data rate or bandwidth requirement and hence high quality user experience in terms of speed and forwards the compressed data to the gateway .

The gateway may be any suitable physical or logical software component or unit that mitigates and handles communications including graphics rendering requests and returned compressed rendered graphics data between the client and each of the first physical machine and the second physical machine . The gateway may be an independent physical component from the first physical machine and the second physical machine . In some embodiments the gateway may be allocated on the same physical component with one or more other components for example with a first physical machine a second physical machine or the management system .

The client may be any device e.g. a computer or communication device such as a desktop computer a laptop computer a computer tablet or a smartphone. The client communicates with the first physical machine the host via the gateway to process a 3D or 2D graphics video image application for example to display 3D video for a game or 3D images for a CAD tool on the device via remote desktop or VDI through the cloud or Internet. Other applications that use the remote desktop or VDI and have similar bandwidth or data rate requirements may also use the architecture .

The management system may be any suitable physical or logical software component configured to control the operations of some of the other components blocks including the gateway the remote display driver and the dispatcher . Upon detecting a request for rendering graphics from the client the management system configures the gateway and starts the dispatcher and the remote display driver to handle the request.

In an embodiment when the VDI client sends a request to the VDI host the gateway intercepts the request and forwards it to the VM at a first physical machine . The VDI management system can also detect the request at the gateway and initiate the remote display driver . The VM forwards the needed request information to the remote display driver to render graphics for display. In turn the remote display driver communicates using RDMA with the render at a second physical machine . The RDMA permits the first physical machine to use the GPU resources at the second physical machine and bypass CPU processing at the first physical machine . The RDMA communication also allows sending relatively large data at relatively high speed between the physical machines for example within a data center. This high speed is suitable and sufficient to meet the data rate requirement e.g. for 3D graphics rendering in 3D gaming and achieve high quality user experience. The integration of the gateway in the architecture for distributed virtualization removes the need to send data back to the VM or the first physical machine before sending the data to the client which reduces delay. This also reduces the complexity and safety risks introduced by having otherwise multiple connections to the client . Having a single connection between the gateway and the client over the cloud reduces safety risks e.g. malicious attacks since all other connections between the components can be sufficiently secured in a data center. The connection between the gateway and the client may be a transmission control protocol TCP connection. Alternatively a more secure user datagram protocol UDP connection can be used between the gateway and the client .

At step an interface platform or operating system e.g. Windows e.g. at the client or the first physical machine connects to the remote display driver . At step the remote display driver sends a command to the render server to render graphics data. At step the render server translates the command for rendering. At step the render server initiates a command to start rendering start the render using the native display driver and the GPU . At step the render server captures the remote desktop screen or image the result from the render . At step the render server compresses the screen image e.g. in H.264 format using the image compression block . At step the render server sends the screen image stream to the gateway . At step other parts of the VDI protocol may send VDI messages regarding the request or its rendered graphics to gateway . At step the gateway integrates all the received data to one connection or session of the client . At step the gateway sends the compressed rendered graphics for display to the client . In other embodiments some of the steps above may be omitted combined or implemented in a different order in any other suitable manner that serves the same outcome or purpose. Additional steps or commands may also be added to this protocol.

The CPU may comprise any type of electronic data processor. The memory may comprise any type of system memory such as static random access memory SRAM dynamic random access memory DRAM synchronous DRAM SDRAM read only memory ROM a combination thereof or the like. In an embodiment the memory may include ROM for use at boot up and DRAM for program and data storage for use while executing programs. In embodiments the memory is non transitory. The mass storage device may comprise any type of storage device configured to store data programs and other information and to make the data programs and other information accessible via the bus. The mass storage device may comprise for example one or more of a solid state drive hard disk drive a magnetic disk drive an optical disk drive or the like.

The processing unit also includes one or more network interfaces which may comprise wired links such as an Ethernet cable or the like and or wireless links to access nodes or one or more networks . The network interface allows the processing unit to communicate with remote units via the networks . For example the network interface may provide wireless communication via one or more transmitters transmit antennas and one or more receivers receive antennas. In an embodiment the processing unit is coupled to a local area network or a wide area network for data processing and communications with remote devices such as other processing units the Internet remote storage facilities or the like.

While several embodiments have been provided in the present disclosure it should be understood that the disclosed systems and methods might be embodied in many other specific forms without departing from the spirit or scope of the present disclosure. The present examples are to be considered as illustrative and not restrictive and the intention is not to be limited to the details given herein. For example the various elements or components may be combined or integrated in another system or certain features may be omitted or not implemented.

In addition techniques systems subsystems and methods described and illustrated in the various embodiments as discrete or separate may be combined or integrated with other systems modules techniques or methods without departing from the scope of the present disclosure. Other items shown or discussed as coupled or directly coupled or communicating with each other may be indirectly coupled or communicating through some interface device or intermediate component whether electrically mechanically or otherwise. Other examples of changes substitutions and alterations are ascertainable by one skilled in the art and could be made without departing from the spirit and scope disclosed herein.

