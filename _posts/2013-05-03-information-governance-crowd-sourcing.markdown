---

title: Information governance crowd sourcing
abstract: A method, computer program product, and system for information governance crowd sourcing by, responsive to receiving a data quality exception identifying one or more data quality errors in a data store, identifying a performance level required to correct the data quality errors, selecting, from a crowd hierarchy, a first one or more crowds meeting the defined performance level, wherein the crowd hierarchy ranks the performance of one or more crowds, and routing, by operation of one or more computer processors, the one or more data quality errors to the selected crowds for correction.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286586&OS=09286586&RS=09286586
owner: International Business Machines Corporation
number: 09286586
owner_city: Armonk
owner_country: US
publication_date: 20130503
---
This application is a continuation of co pending U.S. patent application Ser. No. 13 446 681 filed Apr. 13 2012. The aforementioned related patent application is herein incorporated by reference in its entirety.

Embodiments described herein relate generally to the field of computer software. In particular embodiments described herein relate to information governance crowd sourcing.

The quality of information assets is a core concern of most modern enterprises. In many cases information quality has become a key aspect of projects such as data warehousing and application system consolidation. In other cases it is the main driving force for establishing master data management projects which aim to create and maintain master data i.e. customer supplier product employee account data at its core. Since these master data entities are critical to all major business processes the projects strive to maintain premium information quality metrics for the entire enterprise life cycle.

Information quality has multiple metrics which include but are not limited to spelling errors missing data duplicate data incorrect values inconsistent format incomplete format syntax violations violations of integrity constraints text formatting synonyms and homonyms. An error related to any of these metrics requires human intervention for a resolution yet current methods fail to optimize human resources for completing these tasks.

Embodiments provide a method product and system for performing an operation for information governance crowd sourcing by responsive to receiving a data quality exception identifying one or more data quality errors in a data store identifying a performance level required to correct the data quality errors selecting from a crowd hierarchy a first one or more crowds meeting the defined performance level wherein the crowd hierarchy ranks the performance of one or more crowds and routing by operation of one or more computer processors the one or more data quality errors to the selected crowds for correction.

Embodiments described herein provide techniques for responsive to data quality errors in an information system forwarding the data quality errors to crowds in a crowd sourcing environment for correction. In some embodiments an application is provided to perform the operations disclosed herein. In some embodiments the application detects one or more data quality errors. In other embodiments a user may manually detect and submit data quality errors to the application. Responsive to the data quality error the application may then identify a performance level required to correct the data quality errors based on the type of error and the privacy level of the data. The application may then select one or more crowds meeting the performance level from a crowd hierarchy wherein the crowd hierarchy ranks the performance of one or more crowds. The application may then route the data quality errors to the selected crowds for correction. Finally the application may then compute a wage for the crowds for correcting the one or more data quality errors.

Paid crowd sourcing extends the cloud computing paradigm to human resources by providing human workforce as a scalable resource remotely over a web platform. Such a configuration provides a powerful way of outsourcing microtasks to large groups of people over the Internet in order to increase the productivity of business processes. A paid crowd sourcing platform acts as a broker between requesters who publish microtasks and workers who complete those tasks in exchange for compensation. A substantial level of result quality can be achieved for basic tasks like natural language annotation image labeling and data labeling when introducing redundancy by passing the same task to multiple workers. In fact similar result quality can be achieved as when using domain experts even with a small level of redundancy. When leveraging microtasks in a business context it is crucial to understand what aspects are influencing the result quality and how a certain well defined level of result quality can be achieved for specific scenarios. Furthermore concrete approaches are required to actively and efficiently manage the result quality.

In the following reference is made to embodiments of the invention. However it should be understood that the invention is not limited to specific described embodiments. Instead any combination of the following features and elements whether related to different embodiments or not is contemplated to implement and practice the invention. Furthermore although embodiments of the invention may achieve advantages over other possible solutions and or over the prior art whether or not a particular advantage is achieved by a given embodiment is not limiting of the invention. Thus the following aspects features embodiments and advantages are merely illustrative and are not considered elements or limitations of the appended claims except where explicitly recited in a claim s . Likewise reference to the invention shall not be construed as a generalization of any inventive subject matter disclosed herein and shall not be considered to be an element or limitation of the appended claims except where explicitly recited in a claim s .

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the disclosure may be provided to end users through a cloud computing infrastructure. Cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus cloud computing allows a user to access virtual computing resources e.g. storage data applications and even complete virtualized computing systems in the cloud without regard for the underlying physical systems or locations of those systems used to provide the computing resources.

Typically cloud computing resources are provided to a user on a pay per use basis where users are charged only for the computing resources actually used e.g. an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user . A user can access any of the resources that reside in the cloud at any time and from anywhere across the Internet. In context of the present disclosure a user may access crowd sourcing applications or related data available in the cloud. For example the data exception emitter could execute on a computing system in the cloud and emit data quality exceptions. In such a case the crowd sourcing manager could receive the exception and store details related to the exception at a storage location in the cloud. Doing so allows a user to access this information from any computing system attached to a network connected to the cloud e.g. the Internet .

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present disclosure are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

For convenience the Detailed Description includes the following definitions which have been derived from the Draft NIST Working Definition of Cloud Computing by Peter Mell and Tim Grance dated Oct. 7 2009 which is cited in an IDS filed herewith and a copy of which is attached thereto.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based e mail . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes. A node in a cloud computing network is a computing device including but not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like. A cloud computing node is capable of being implemented and or performing any of the functionality set forth hereinabove.

The computer generally includes a processor connected via a bus to a memory a network interface device a storage an input device and an output device . The computer is generally under the control of an operating system . Examples of operating systems include the UNIX operating system versions of the Microsoft Windows operating system and distributions of the Linux operating system. UNIX is a registered trademark of The Open Group in the United States and other countries. Microsoft and Windows are trademarks of Microsoft Corporation in the United. States other countries or both. Linux is a registered trademark of Linus Torvalds in the United States other countries or both. More generally any operating system supporting the functions disclosed herein may be used. The processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. Similarly the memory may be a random access memory. While the memory is shown as a single entity it should be understood that the memory may comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips. The network interface device may be any type of network communications device allowing the computer to communicate with other computers via the network .

The storage may be a hard disk drive storage device. Although the storage is shown as a single unit the storage may be a combination of fixed and or removable storage devices such as fixed disc drives removable memory cards optical storage flash memory or solid state storage devices SSD . The memory and the storage may be part of one virtual address space spanning multiple primary and secondary storage devices.

The input device may be any device for providing input to the computer . For example a keyboard keypad light pen touch screen track ball or speech recognition unit audio video player and the like may be used. The output device may be any device for providing output to a user of the computer . For example the output device may be any conventional display screen or set of speakers along with their respective interface cards i.e. video cards and sound cards. Although shown separately from the input device the output device and input device may be combined. For example a display screen with an integrated touch screen a display with an integrated keyboard or a speech recognition unit combined with a text speech converter may be used.

As shown the memory contains an application which is illustrative of the types of applications containing data which may suffer from data quality errors. Examples of application include but are not limited to an MDM application data warehouse application an extract transform load application for integrating data from a source data system to a target data system or an enterprise service bus ESB where for example lookup values need to be transcoded from a source data system to a target data system. It should be obvious to those skilled in the art that application may be an application containing data whose quality is of importance. As shown the memory also contains a crowd sourcing manager . In some embodiments crowd sourcing manager is an application platform which responsive to data quality errors determines a set of requirements identifies a crowd capable of correcting the errors and routes the errors to the crowd for correction. In some embodiments the crowd sourcing manager is also configured to emit exceptions responsive to data quality errors. In still other embodiments the crowd sourcing manager is configured to receive user defined data quality errors.

As shown the memory also contains a data exception emitter . Data exception emitter is an application generally configured to monitor data for violations of predefined data quality standards. In some embodiments the data exception emitter is a listener to which the application can delegate a data quality processing exception based on the data quality processing type. Data exception emitter may then pass these data quality exceptions to the inbox of the crowd sourcing manager . For example data exception emitter may emit an exception to the crowd sourcing manager upon receiving notification that addresses in a database fail to meet standardization requirements. In some embodiments the functionality of data exception emitter is integrated into the crowd sourcing manager available as an application programming interface API to external applications such as application . In other embodiments the functionality of data exception emitter is integrated into applications themselves such as application . As depicted in the data exception emitter may run as a daemon installed on the system which provides APIs which applications such as application can invoke to consistently surface exceptions. In some embodiments data exception emitter provides a user interface UI which allows for the definition of a variety of exception types. Once the applications consume the data exception emitter APIs the data exception emitter would then communicate the exceptions to the crowd sourcing manager using notifications. Communication may be accomplished through any protocol including but not limited to the Java message service JMS a web service or a remote method invocation. In some embodiments crowd sourcing manager may be coded in the Java programming language which would enable it to receive exceptions in a well defined XML format. Java and all Java based trademarks and logos are trademarks or registered trademarks of Oracle and or its affiliates .

As shown storage also contains application data which is general data stored by an application such as application . Application data although depicted as a database may take any form suitable for storing data such as a text file data warehouse or relational database. Application data may be owned by multiple entities may be stored in several locations of a single computer or may span across multiple computers. As shown storage also contains crowd sourcing repository . The crowd sourcing repository stores policies related to the sensitivity of data for example the application data . Sensitivity of data may include different dimensions such as whether the data itself can be shared with other people or whether the source system containing the data can be accessed by external crowd workers to resolve certain data quality errors. Crowd sourcing repository may also store policies related to the crowd itself. Crowd sourcing repository may also provide policies centered around grouping of data quality exceptions based on type e.g. 10 address standardization data quality exceptions may be the defined as the smallest unit of work placed on a crowd sourcing platform based on these policies. As shown in one embodiment the crowd sourcing repository may be a database but it may any form sufficient to store data. In some embodiments the policies contained in crowd sourcing repository may be specified in XML for streamlined communication with crowd sourcing manager .

As shown the storage of computer also contains a crowd hierarchy used to rank crowds available to correct data quality exceptions. Generally speaking a hierarchy is an ordered set indicating the crowd s or individual s level in the hierarchy. A hierarchy may link entities in a vertical as well as a horizontal manner. Therefore those entities vertically higher are superior to those beneath them in the hierarchy while an entity is considered equal to those entities it is linked to horizontally. In some embodiments nodes in crowd hierarchy represent crowds in other embodiments nodes in crowd hierarchy represent individual workers. In some embodiments where crowd hierarchy represents individual workers the hierarchy may be replaced by a graph to better capture certain attributes of the workers. Although crowd hierarchy is shown as a database any suitable data structure capable of maintaining a hierarchy may be implemented and the particular format implemented should not be considered limiting of the disclosure.

The particular configuration shown in should not be considered limiting of the disclosure. Any possible configuration of the items in memory and storage are contemplated. For example application and crowd sourcing manager may be on the same or different computers application data crowd sourcing repository and crowd hierarchy may be on the same computer or different computers and may be on the same or different computers as application and crowd sourcing manager .

As shown the application architecture also has enterprise service bus ESB . Enterprise service bus is a general purpose ESB which is a model used for designing and implementing the interaction and communication between mutually interacting software applications in a service oriented architecture. The main duties of an ESB are to monitor and control routing of message exchange between services resolve contention between communicating service components control deployment and versioning of services marshal use of redundant services and cater for commonly needed commodity services like event handling and event choreography data transformation and mapping message and event queuing and sequencing security or exception handling protocol conversion and enforcing proper quality of communication services. ESB in some embodiments therefore serves as an intermediary for communications between application server crowd sourcing manager and crowd sourcing platforms . Application server is a server on which applications such as application are executed. ESB is also shown as having an instance of data exception emitter according to one embodiment described above. Data exception emitter is also shown in application server . This configuration therefore depicts an embodiment where the data exception emitter is installed as a daemon on the systems where the application and ESB are installed. In the case of the ESB the data exception emitter may emit ESB exceptions such as a data type exception when converting a message from a source to target application.

As shown the application architecture also contains crowd sourcing manager according to one embodiment disclosed herein. Generally crowd sourcing manager performs several important functions responsive to receiving an exception from data exception emitter . In the embodiment depicted in crowd sourcing manager contains components which perform specialized functions including performance management component inbound queues outbound queues anonymizer component crowd hierarchy manager workflow application quality management component and work cost calculator . The inbound queues and outbound queues are storage queues for data quality exceptions. In some embodiments multiple queues may be designated for each type of data quality exception classification. The inbound queues receive data quality exception messages from the data quality exception emitter storing the exception for later processing within crowd sourcing manager . The outbound queues send work packages to the appropriate crowd sourcing platforms. Based on the policies enforced by the workflow application the inbound messages are picked up and either sent individually or combined in work packages to appropriate crowd sourcing platforms based on data privacy and data security policies. In some embodiments the outbound queues persist a local copy of the transmitted work packages for tracking purposes if a result or multiple results if the task is sent multiple times to different crowd workers is returned. In some embodiments at the time the task sent via outbound queue a timer is started to determine whether results are being returned within the maximum processing time. Workflow application is an application generally configured to contain defined workflows for processing the data quality exceptions in inbound queues . Based on the policies in crowd sourcing repository workflow application routes the data quality exceptions in inbound queues to internal partner or external crowd sourcing platforms . Workflow application also monitors the performance of these crowd sourcing platforms as well as the accuracy of their work.

Quality management component assesses the quality of work assignments completed by individual crowd workers as well as groups of workers as a whole. Quality management component is invoked by workflow application as needed to update the crowd hierarchies in crowd hierarchy component . In such instances quality management component may return a level of work quality performed by a crowd or individuals in a crowd. The level of work quality may be an aggregate of all tasks completed or based on specific tasks completed.

Anonymizer component provides the ability to anonymize sensitive private data. In some embodiments anonymizer component can be invoked to mask data where appropriate to meet data security and data privacy policies without preventing the ability of crowd workers to work on data to complete data quality errors. Data masking includes replacing real data values with realistic values generated by a masking algorithm. Any suitable masking algorithm may be integrated in anonymizer component . In some cases data cannot be anonymized and therefore cannot be sent to an external crowd sourcing platform .

Crowd hierarchy manager creates and manages hierarchies of different worker communities within a crowd as well as across crowds. In some embodiments crowd hierarchy manager also creates and manages hierarchies of individual workers. depicts crowd hierarchy an exemplary hierarchy. A hierarchy created and managed by crowd hierarchy manager may be useful in information governance scenarios where based on the sensitivity of the data involved multiple levels of crowd sourcing are needed. In such a scenario users stewards at higher levels in the hierarchy perform necessary validation on the responses generated by a lower level crowd system. For example an internal set of data stewards at a higher level in the hierarchy may validate spelling corrections for certain business terms completed by an external crowd.

In creating crowd hierarchy or adding new crowds to crowd hierarchy crowd sourcing manager may take any number of approaches. Crowd sourcing manager may assign an initial score to all crowds whereby a newly created crowd would have a single level of nodes resulting in a hierarchy of equally ranked crowds. In other embodiments crowd sourcing manager may randomly arrange the crowds in crowd hierarchy . Generally crowd sourcing manager may take any suitable steps to create the crowd hierarchy or add new crowds to the crowd hierarchy .

In one embodiment crowd hierarchy is a hierarchy of different crowd systems where crowd hierarchy manager ranks each crowd system in the crowd hierarchy and assigns each crowd system a cumulative weight. The weight associated with a crowd indicates the overall authority of the crowd system in performing the tasks under the current assignment as well as in evaluating the tasks completed by other crowd systems in the crowd sourcing hierarchy. In some embodiments crowd hierarchy manager computes a set of weights corresponding to various relevant attributes of the crowd such as domain of expertise languages spoken geographic location etc. In some embodiments crowd hierarchy manager may compute a weight range representing minimum and maximum performance thresholds for the crowd. Crowd hierarchy manager may also update these weights via internal feedback mechanisms. In some embodiments crowd sourcing manager may compute weights based on the correctness of actual work completed. In some embodiments crowd sourcing manager may also use confidence levels and position in the crowd hierarchy to influence the computed weights.

For the purpose of computing weights in embodiments where crowd systems are ranked by crowd hierarchy manager a crowd system may be defined as a set S of people s i assigned to complete a crowd sourced task. A crowd profile may be defined as a tuple of the form S w where w is the profile weight associated with crowd system S. A crowd sourcing hierarchy C S i w i is defined as an ordered set of crowd systems S i and associated weights w i where i indicates the level in the hierarchy. For example in an exemplary hierarchy S  w  S  w  . . . . S  lies at the bottom of the hierarchy S  at the next level in the hierarchy and so on.

Based on these definitions crowd sourcing manager may compute and update the weights as follows. Let t be a task assigned to a crowd system S j. Further let f t denote expected output of the task t as decided by a crowd system S i where i j implying S i is more authoritative than S j and thus has the ability to judge the work done by S j . Let p denote the probability with which S i believes that the outcome of task t should be f t . This probability captures difference in opinions among the members of the crowd system S i. Lastly let g t denote the outcome of the task t as computed by the crowd system S j with probability q. This probability captures the difference in opinions among the members of the crowd system S j.

Finally assume there is a deterministic function J f t g t y y that is able to compare f t and g t and return a numeric value based on their similarity. For example if t is a task to correct typos then J can be a function comparing word distances. For example if the typo is Interrelation Business Machine f t is International Business Machines and g t is International Business Machines then J would return y. However if g t is Interrelational Business Machines then J would return a value in 0 y . If g t is Blue Jeans J would return a value closer to y. Given this generic scenario the following feedback relationships for weight computation by crowd hierarchy manager may be defined.

Assuming a predefined threshold T TR in the case where p is much greater than q e.g. p q T the crowd hierarchy manager uses the formula to compute the weight w j w j p q J f t g t K where K is a constant. This scenario indicates that a more authoritative crowd system is very confident about f t whereas the less authoritative crowd system has a low confidence level of g t . By using this formula S j receives a positive weight increment if J evaluates to a positive value since p q 0 however S j is also penalized for the overall low confidence even if the overall result of the task is correct by deducting the adjustable constant K.

In cases where p is much less than q e.g. q p T then crowd hierarchy manager uses the formula to compute the weight w j w j q J f t g t . This represents a scenario where a more authoritative crowd system is less confident about f t whereas a less authoritative crowd system has high confidence on g t . Thus using the formula crowd hierarchy manager simply rates S j based on their performance and no penalties are taken. However the crowd hierarchy manager may introduce a subtlety here since p is much less than q i.e. a large number of less authoritative people agree on an outcome while more authoritative people have considerable disagreement over the expected outcome . In these cases crowd hierarchy manager performs the following steps. First crowd sourcing manager determines if there is any crowd system S k that has more authority is higher up the hierarchy than S i and requests feedback on the expected outcome of task t. The expected outcome of S k can be y t . If J y t f t J y t g t then crowd hierarchy manager does nothing. However if J y t f t 

In the remaining permutations of p and q the crowd hierarchy manager computes the weight of S j using the following equation w j w j p q J f t g t . Thus the crowd hierarchy manager simply takes the modulo of p and q so that S j gets a reward if J f t g t 0 and a punishment if J f t g t 

As described above in another embodiment the crowd sourcing manager may compute a hierarchy with a finer granularity where each node along the hierarchy represents an individual worker instead of the entire crowd. In such an embodiment weights assigned reflect the quality of results delivered by each individual worker. In some embodiments a graph may be implemented in place of a hierarchy which represents non trivial relationships between individuals where it might not be possible to align the set of individuals along a simple hierarchy. For example one worker may be exceptional in certain domains of expertise yet have poor language skills. Another worker may have poorer knowledge in the domain of expertise yet possess superior language skills. By encoding this varying knowledge in a consumable form in a graph the crowd sourcing manager is enabled to make intelligent suggestions for routing assignments based on the specific requirements of the task. Crowd hierarchy manager may use the formulas described above in computing weights to be assigned in such an embodiment.

In still another embodiment the crowd hierarchy manager may compute a hierarchy of worker pools where each node along the hierarchy is representative of overlapping subsets across different crowd sets. For example the crowd hierarchy manager may compute a worker pool comprising the top five based on individual weights domain experts from a set of 100 domain experts and the top five language specialists from a different set thus forming a special worker pool comprising workers having domain expertise and special language skills.

Returning to also depicted is performance management component which is used to escalate tasks if the service level agreement SLA for a crowd sourcing task is violated. Performance management component also monitors the timer set when work is placed in the outbound queue. Violations of the SLA may be related to the accuracy of work completed or to the rate at which work is completed such that the work may not be completed within the specified amount of time. In embodiments where the violation is accuracy related for example if a task is given to a group of n crowd workers and the results for the first x assignments where x

Also shown in is work cost calculator . In some embodiments work cost calculator is invoked by workflow application to compute the cost for different task deployment strategies to different crowds. In some embodiments performance management component may invoke work cost calculator upon escalating a task to determine the costs of introducing additional workers or escalating to workers having higher quality or productivity weights. In some embodiments work cost calculator may be invoked to compute the estimated cost of correcting a set of data quality errors. The cost of correcting the data quality errors may be based on any number of variables including but not limited to the type of data quality errors the number of data quality errors the skill level required to correct the data quality errors the number of individuals required to correct the data quality errors the amount of time required to correct the data quality errors the amount of time within which the data quality errors must be corrected and whether corrections completed by a crowd must be verified by a crowd higher in the crowd hierarchy . For example some tasks like reconciling duplicate data records might be initially sent to only one crowd worker and incrementally be posted more often until a certain quality threshold is reached. To achieve such a result mechanisms such as dynamic majority vote DMV can be implemented. Alternatively a task can be posted multiple times and a mechanism computing a statistical result can be used to make a decision on the final result. For example in the case of duplicate records the statistic on which value has been identified by the crowd worker to be correct can be determined or the value taken by most of the crowd workers is considered to be the correct one. Methods such as these allow for grading the work of the crowd worker the closer the result of an individual crowd worker to the final result the better his work performance indicator is. Aggregating this data for crowd workers from the same platform can be used to determine the equality of work done on a certain crowd platform. If an individual worker overachieves or underachieves comparative to the average level of correctness delivered by the workers within his crowd system he might be moved to a more or less authoritative crowd system which has comparable attributes except for the average correctness delivered by its workers . In other embodiments work cost calculator may compute wages based on crowd profiles. In some embodiments work cost calculator defines a wage function for a crowd system S i for a task t as f w i t r w i J f t g t where r is the base rate which is set by the enterprise s cost spending expectations market standards or any suitable method. By implementing this equation work cost calculator captures three important concepts. First work cost calculator pays a crowd system a base wage captured by r w i irrespective of the task outcome expectation. Second work cost calculator marginally penalizes or rewards a crowd system based on the outcome of the task captured by r J f t g t . Finally work cost calculator decides a crowd system s base wage based on their previous work history and authority on the subject captured by multiplicative weight w i .

In one embodiment at step crowd sourcing manager may determine that the data quality exception is an address standardization exception. For example the data exception may be related to invalid zip code or state code formats. Upon determining an address standardization exception has been emitted the crowd sourcing manager proceeds to step where the crowd sourcing manager checks the sensitivity policy related to address standardization exceptions for the enterprise as defined in crowd sourcing repository . Upon referencing the crowd sourcing repository the crowd sourcing manager may determine that address standardization exceptions are not sensitive exceptions and therefore privacy is not a concern. Therefore any of the three crowd sourcing platforms may be sent the address standardization exceptions. The crowd sourcing manager then proceeds to step where a cost policy contained in crowd sourcing repository is checked to determine the enterprises planned budget for correcting address standardization exceptions. The crowd sourcing manager then proceeds to step depicted in where the crowd sourcing manager invokes the work cost calculator . At step work cost calculator generates an estimated cost of completing the corrections based on sending the tasks to all available crowd sourcing options. At step the crowd sourcing manager selects a crowd sourcing platform and places the address standardization task into the appropriate outbound queue . The crowd sourcing manager also creates the appropriate outbound queue if necessary. As stated above a timer is also started by workflow application upon placing the work package in the outbound queue . The crowd sourcing manager selects the crowd sourcing platform based on the information it has gathered by checking the cost policy sensitivity policy and invoking work cost calculator to find the most cost effective solution which will complete the task without violating any policies. For example the crowd sourcing manager may determine that it is more cost effective to route the task to an internal crowd upon determining that the internal crowd has available resources to take on the task thereby optimizing the productivity of the internal crowd. The crowd sourcing manager then proceeds to step where it loads the service level agreement into the performance management component for monitoring.

Before moving to step which is common to all types of data quality errors we may move to step depicted in where the crowd sourcing manager determines that the data exception type is a duplicate data exception. A duplicate data exception may be triggered as the result of having duplicate data records in the same relational database or redundancy across relational databases across multiple systems. Regardless of the type of duplicate data exception human intervention is necessary to remove the duplicate entries. The crowd sourcing manager thus moves to step where the crowd sourcing manager checks the sensitivity policy related to duplicate data exceptions for the enterprise as defined in crowd sourcing repository . The crowd sourcing manager then at step determines the data sensitivity level based on the sensitivity policy. If the data is not sensitive the crowd sourcing manager proceeds to step . If the data is fully sensitive the crowd sourcing manager proceeds to step . If the data is partially sensitive the crowd sourcing manager proceeds to step . At step depicted in the crowd sourcing manager invokes work cost calculator . At step work cost calculator generates an estimated cost of completing the corrections based on sending the tasks to all available crowd sourcing options including internal external or partner crowd sourcing platforms . At step described in more detail above with reference to step the crowd sourcing manager selects a crowd sourcing platform and places the duplicate data exception assignment into the appropriate outbound queue . The crowd sourcing manager then proceeds to step where it loads the service level agreement into the performance management component for monitoring.

Returning to step depicted in the crowd sourcing manager upon determining that the data sensitivity level is fully sensitive invokes the work cost calculator to compute the cost of having the work completed by an internal crowd sourcing platform . An internal crowd sourcing platform is required to prevent a violation of data privacy policies laws and regulations. At step described in detail above with reference to step the crowd sourcing manager selects an internal crowd sourcing platform and places the duplicate data exception assignment into the appropriate outbound queue . The crowd sourcing manager then proceeds to step where it loads the service level agreement into the performance management component for monitoring.

Returning to step depicted in the crowd sourcing manager upon determining that the data sensitivity level is partially sensitive determines whether anonymizer component can mask the data to protect sensitive portions. If the crowd sourcing manager determines that the anonymizer component can protect sensitive data the method proceeds to step otherwise the method proceeds to step . At step the crowd sourcing manager invokes the work cost calculator to generate an estimated cost of completing the corrections based on sending the tasks to all available crowd sourcing options including internal external or partner crowd sourcing platforms . At step the crowd sourcing manager invokes the anonymizer component to mask the sensitive data as described above. The crowd sourcing manager then proceeds to step . Returning to step the crowd sourcing manager upon determining that the anonymizer component cannot protect sensitive data invokes the work cost calculator to generate an estimated cost of completing the corrections based on sending the tasks to internal crowd platforms and partner crowd sourcing platforms . Upon calculating the work cost the method proceeds to step . At step described in more detail above with reference to step the crowd sourcing manager identifies the selected crowd sourcing platform and places the duplicate data exception assignment into the appropriate outbound queue . The crowd sourcing manager then proceeds to step where it loads the service level agreement into the performance management component for monitoring.

Before moving to step which is common to all types of data quality errors we may move to step depicted in where the crowd sourcing manager determines that the data exception type is a primary key foreign key data exception. Such an exception may be triggered in response to a lack of referential integrity in a database. For example in the database of a bank all accounts have to be attached to a customer. Therefore the customer table contains a primary key e.g. an ID which is referenced by a foreign key in the account table. If for any reason this foreign key does not match any of the primary keys in the customer table manual effort is typically required to sort out what went wrong. Upon determining that the data exception type is a primary key foreign key data exception the crowd sourcing manager proceeds to step where the crowd sourcing manager checks the sensitivity policy related to primary key foreign key data exceptions for the enterprise as defined in crowd sourcing repository . The crowd sourcing manager then at step determines the data sensitivity level based on the sensitivity policy. Because primary key foreign key exceptions arise in the context of a relational database access to the database may be needed to correct the exceptions. Therefore the policy requires at least some degree of sensitivity measures. In some cases even though source access is required a trusted partner employee may access the source. If the exception is only concerned with sensitivity of the data itself then the crowd sourcing manager proceeds to step . If correction of the exception requires access to the database then the sensitivity policy restricts the crowd sourcing manager to the selection of an internal crowd sourcing platform . In other words in most cases an employee of the enterprise owning the database must complete the corrections. In such an event the crowd sourcing manager proceeds to step .

At steps and depicted in the crowd sourcing manager invokes the work cost calculator . At step the work cost calculator computes the cost of completion on any available internal crowd sourcing platform or partner crowd sourcing platform . The method then proceeds to step . At step the work cost calculator computes the cost of completion on any available internal crowd sourcing platform . The method then proceeds to step described in more detail above with reference to step where the crowd sourcing manager identifies the selected crowd sourcing platform and places the primary key foreign key data exception assignment into the appropriate outbound queue . The crowd sourcing manager then proceeds to step where it loads the service level agreement into the performance management component for monitoring.

At step performance management component begins monitoring the task. At step performance management component determines whether the SLA agreement has been violated and monitors the rate and quality of completed assignments returned by the selected crowd. If at step performance management component determines that results have not been received or the SLA has been violated it returns to step for continuous monitoring. If at step performance management component determines that a violation has occurred the performance management component proceeds to step in order to assess the types of escalation steps it must take in response. At step depicted in the performance management component determines whether the violation is accuracy related. As described above an accuracy violation indicates that results being received are not of a sufficient accuracy and the task needs to be escalated to a crowd having a higher weight related to skill level. If the violation is accuracy related the method proceeds to step where the performance management component performs vertical crowd hierarchy escalation where a crowd with a higher rank in the hierarchy related to skill level is selected to complete the tasks which are rerouted to the new crowd for completion. Upon completing the escalation the method proceeds to step . If the violation is not accuracy related the performance management component proceeds to step where the performance management component determines whether the violation is time related. If the violation is time related at step the performance management component performs horizontal crowd hierarchy escalation to assign future tasks to more crowd workers at the same skill level to ensure that the overall number of tasks is completed on time. In other embodiments the performance management component may perform a vertical escalation at this step to reroute the tasks to members of a crowd having a higher rank for productivity. Upon completing the escalation the method proceeds to step . If the violation is not time related the method proceeds to step where it handles all other types of violations. These violations may include SLA violations where sensitive data was viewed or accessed by unauthorized crowd workers in which case the performance management component would reroute the assignment to crowd workers whose use of the data would not violate the SLA. At step the escalation action is triggered and the method returns to step depicted in to continue monitoring the process. If more assignments need to be passed to workers the method returns to step .

Consider the following example being an exemplary data model of a table containing customer information. The table has the attributes only a subset shown as shown in Table 1. If the row shown below is send to a tool doing address standardization the standardization with the default rule set will fail for the field Street. Modern tools are able to parse a string like Main Street 1 and identify that the token Main is a name Street is an indicator of the type of street e.g. Street vs. Avenue and the token 1 would be the house number since it s an integer and re assign the number 1 to the HOUSENUMBER field. Now in our example we have the string Main Street 1 001 456 9435278 where the tool with its default rules wouldn t know that the token 001 456 9435278 means since it does not have a rule for that it s easy for us humans to spot that someone entered the data erroneously and this is likely the phone number and should be placed in the PHONENUMBER column . In the context of the current disclosure the data exception emitter would emit an address standardization exception to the crowd sourcing manager and received in the inbound queue triggering a workflow there. Since the data exception emitter emitted the exception for address standardization with a registered exception type in step it would be determined that an Address Standardization Exception must be processed. Since in our example only the customer name in conjunction with the SSN is considered sensitive the check policy step would indicate that this exception can be routed to any crowd platform since no sensitive information is involved. In step and a cost check is made to see if the data exception maybe submitted to a crowd platform aligned with the company cost policies. So for example the company might have a contract with an external hybrid crowd sourcing company where the fee per address standardization exception would be 0.8 dollar exception and an internal crowd sourcing platforms with an operational cost of 0.75 dollar exception. However since the workload management component for the internal crowd indicates that it is busy it is decided to be sent to the external crowd. Since address standardization is per the configuration of our example considered to be a simple task to be done it is posted only once and sent to the external hybrid crowd sourcing provider. This crowd sourcing provider crowd system may be part of a larger crowd sourcing hierarchy maintained by the internal crowd sourcing platform or by the external crowd sourcing company. For simplicity assume there are 2 crowd systems in the hierarchy viz. a set of authoritative but expensive domain experts in address standardization within the company called S i and the crowd system comprising of people who work at the external company called S j. Also assume the weight of external crowd system is 4 and that of the internal system is 10. So in effect we have the following hierarchy S j 4 S i 10. Assume that the crowd workers in S j incorrectly assert that 001 456 9435278 is some combination of house number and zip code and classify it accordingly. In this case assume that S i knows with probability 1 knows for certain that the correct categorization must be phone number and nothing else. Also workers in S j are split in their opinion and although majority vote was house number and zip code the overall probability was 0.6 6 out of 10 people were in favor . The threshold T 0.5. In this scenario the crowd hierarchy manager computes the function J . . which in this case simply validates the classification that is being done by the crowd workers and returns a value e.g. 1. Next the crowd sourcing manager invokes the crowd hierarchy manager which reduces the weight of the crowd system S j w j 4 1 0.6 1 3.6 penalty for incorrectness . Finally the wage is computed for a fixed rate r 50 as 50 4 1 150. This wage reflects a base pay for the effort made 50 4 200 depending on the work history captured by the previous weight 4 and a penalty for not giving expected results for this work item 50 .

If at step performance management component determines that the tasks have been fully completed by the crowd and that the SLA has not been violated the method proceeds to step depicted in where the crowd sourcing manager invokes the quality management component . At step the quality management component assesses the quality of the completed work. At step the crowd sourcing manager invokes the crowd hierarchy manager to update the crowd hierarchy as described above. At step the crowd sourcing manager invokes work cost calculator to compute a wage and complete the workflow.

Referring now to illustrative cloud computing environment is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as Private Community Public or Hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring now to a set of functional abstraction layers provided by cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the disclosure are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM WebSphere application server software and database software in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide. .

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provide pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and information governance crowd sourcing.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While the foregoing is directed to embodiments of the present disclosure other and further embodiments of the invention may be devised without departing from the basic scope thereof and the scope thereof is determined by the claims that follow.

