---

title: Flow director-based low latency networking
abstract: Generally, this disclosure relates to low latency networking. A system may include processor circuitry comprising at least one processor; memory circuitry configured to store an application, a receive queue and a networking stack comprising a network device driver; a network controller comprising a flow director, the network controller configured to couple the host device to at least one link partner and the flow director configured to store one or more selected received packets in the receive queue, the selecting based, at least in part, on a packet flow identifier; and a network device driver configured to identify the receive queue in response to a polling request comprising the packet flow identifier; poll the receive queue; and process each received packet stored in the receive queue.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09621633&OS=09621633&RS=09621633
owner: Intel Corporation
number: 09621633
owner_city: Santa Clara
owner_country: US
publication_date: 20130315
---
The present disclosure relates to low latency networking and more particularly to flow director based low latency networking.

Financial Service Industry applications and new data center designs may require low latency and predictability i.e. low jitter in data communications. A traditional networking stack e.g. TCP IP may provide good compatibility for socket based applications but latency remains a challenging issue. An application may be configured to poll for received packets in order to reduce latency. Even with polling by the application device interrupts and DPC delayed procedure call scheduling for each interrupt may occur when packet s are received since a network device driver is typically unaware of polling by the application and may not disable interrupts. Both interrupt context switching and DPCs introduce varying delays that may increase latency and or increase latency variation i.e. jitter .

Although the following Detailed Description will proceed with reference being made to illustrative embodiments many alternatives modifications and variations thereof will be apparent to those skilled in the art.

Generally this disclosure relates to flow director based low latency networking. A method and system are configured to implement polling by a network device driver. A logical link controller is configured to provide a polling request to the network device driver in response to a receive request from an application. The network device driver is configured to identify a receive queue based at least in part on a packet flow identifier included in the polling request and to initiate polling. A network controller including a flow director is configured to select one or more received packets associated with the packet flow identifier and to store the selected packets in the receive queue. The flow director may be initialized with the packet flow identifier and a receive queue identifier. The network device driver is configured to poll the receive queue for received packets ready for processing and to process received packets. The network device driver may be configured to establish ownership of the receive queue and or disable interrupts. The network device driver may be configured to notify the logical link controller when the packet processing is completed. The network device driver may further release ownership of the receive queue and enable interrupts when the packet processing is completed.

Thus polling for received packets ready for processing may be performed by a network device driver utilizing a network controller that includes a flow director. Associating the receive queue with the packet flow identifier enables the network device driver to poll the appropriate receive queue. The network device driver may disable interrupts thereby eliminating effects of interrupt context switching and or DPC delayed procedure call scheduling on latency. Disabling interrupts may further eliminate latencies associated with interrupt moderation.

The host device generally includes processor circuitry memory circuitry a bridge chipset and a network controller . The processor circuitry is coupled to the memory circuitry and the bridge chipset . In some embodiments the bridge chipset may be included in processor circuitry . The bridge chipset is coupled to the memory circuitry and the network controller . The network controller is configured to provide the host device with network connectivity.

Processor circuitry may include a plurality of processors and or processor cores . . . . In some embodiments e.g. a NUMA non uniform memory access architecture processor circuitry may include the plurality of processors and or processor cores . . . and memory circuitry may include a plurality of node local memories. In these embodiments a subset of processor cores . . . may be associated with e.g. coupled to a respective node local memory. Each node local memory may then include similar elements as are included in memory circuitry .

Memory circuitry is configured to store one or more application s and or thread s . . . a networking stack and an operating system OS . OS may include but is not limited to a Microsoft Windows based operating system e.g. Windows Server 8 available from Microsoft Corporation Redmond Wash. a Linux based operating system e.g. Linux ESX etc. a UNIX based operating system e.g. FreeBSD and or other operating systems. The OS may be configured to allow polling receive queues for detecting received packets ready for processing. For example Windows Server 8 is configured to allow polling receive queues. Windows Server 8 is further configured to allow allocating registering receive queues prior to communication activity. This technique is configured to reduce latency during packet receive operations. It should be noted that while Windows Server 8 is one example of an operating system that may utilize a system and method consistent with the present disclosure the system and method is not limited to Windows Server 8.

The application s and or thread s . . . may be configured to send data and or message s to and to receive data and or message s from one or more of the link partner s A B . . . N via network controller and network . The data and or message s may be put into packets for transmission or may be extracted from received packets by for example networking stack . Content and configuration of network traffic may depend on a network and or communication protocol e.g. TCP IP UDP etc. Network traffic may include one or more packet flows. Normally a packet flow includes one or more fields that permit identification. For example the packet flow identifier for a TCP packet is typically a 5 tuple that includes a sequence of source IP address destination IP address source port number destination port number and an IP protocol value corresponding to TCP in this case .

Memory circuitry includes one or more transmit queue s TxQ s . . . and one or more receive queue s RxQ s . . . . In some embodiments e.g. NUMA architecture a transmit queue e.g. Tx Q may be logically paired with a receive queue e.g. Rx Q to form a Tx Rx queue pair QP . Each transmit queue . . . includes a transmit buffer . . . configured to store packets for transmission and a transmit descriptor . . . . Each receive queue . . . includes a receive buffer . . . configured to store received packets prior to protocol stack processing and a receive descriptor . . . . A packet flow identifier associated with packets to be transmitted may be included in a Tx descriptor e.g. Tx descriptor . The packet flow identifier may be stored in Tx descriptor when the associated packets are stored in the respective transmit buffer e.g. transmit buffer . A packet flow identifier associated with receive packets may be included in a Rx descriptor e.g. Rx descriptor . The receive flow identifier may be stored in the Rx descriptor when receive packets are retrieved from Rx FIFO and stored in a respective receive buffer e.g. receive buffer for processing. The Rx descriptors . . . may further include a field configured to indicate that a packet is ready for processing by e.g. networking stack and or an application . . . . A network device driver configured to poll a receive queue for received packets may be configured to poll the associated receive descriptor and the packet ready field as described herein.

Memory circuitry may include one or more interrupt vector s . . . . Each queue TxQ . . . and RxQ . . . may be associated with a respective interrupt vector . . . . When polling is not implemented the interrupt vector s . . . are configured to indicate a location of an interrupt service routine configured to process completed transmit requests and or receive packets for delivery to an application.

Memory circuitry is configured to store at least one networking stack that may include an application layer a sockets interface a protocol stack a logical link controller and a network device driver . An application layer e.g. application layer is configured to provide an interface between the networking stack and application s . . . . A sockets interface e.g. sockets interface corresponds to a programming interface that an application may use to send and receive data. The sockets interface is configured to provide an interface between application layer and the protocol stack . A protocol stack e.g. protocol stack may execute one or more programs to process packets. An example of a protocol stack is a TCP IP Transport Control Protocol Internet Protocol protocol stack comprising one or more programs for handling e.g. processing or generating packets to transmit and or receive over a network e.g. network . Another example of a protocol stack is a UDP IP User Datagram Protocol Internet Protocol protocol stack. A protocol stack may alternatively be comprised on a dedicated sub system such as for example a TCP offload engine and or network controller .

The logical link controller is configured to provide an interface between the protocol stack and the network device driver . The logical link controller is configured to receive a receive request from an application e.g. application via sockets interface and protocol stack . The receive request may include a packet flow identifier associated with the receive request. The packet flow identifier may be configured to identify a receive queue to be utilized for receiving packets associated with the packet flow identifier.

The receive request may further include an indicator corresponding to low latency networking. The low latency networking indicator is configured to inform the logical link controller that the receive queue should be polled for received packets ready for processing if possible. The logical link controller is configured to provide a corresponding hint to the network device driver that the receive queue should be polled for received packets if possible. The hint is configured to allow the network device driver to initiate polling if possible. For example polling may not be initiated if an interrupt service routine and or a delayed procedure call are in process when the hint is received.

The logical link controller may be configured to provide a filter identifier to the network controller as described herein. The filter identifier may correspond to the packet flow identifier. For example for a TCP IP socket a filter may correspond to a source IP address a destination IP address a source port number and a destination port number and may include an IP protocol value. The network controller may then use the filter identifier when selecting packets for storage in the receive queue associated with the packet flow identifier.

The network device driver may include a polling API Application Programming Interface . The polling API is configured to provide an interface for an application e.g. application to provide polling parameter s to network device driver and thereby to network controller and flow director . Polling parameter s may include but are not limited to an identifier corresponding to the packet flow identifier e.g. a filter identifier a receive queue identifier a duration of a polling interval e.g. 50 sec. a maximum number N of packets to poll a hint to maintain an associated interrupt disabled until enabled by the logical link controller and or a request to update a processor affinity of an associated interrupt vector. One or more of the polling parameter s may be provided to the network device driver . The polling parameters provided may depend on characteristics of the application and or the packet flow itself.

The network device driver is configured to determine a flow director capability of network controller . For example the network device driver may be configured to determine a number of queues and or a number of filters supported by the network controller and or flow director . The network device driver may then be configured to communicate the capabilities of the network controller to logical link controller .

If polling can be initiated the network device driver is configured to allocate a receive queue or a Tx Rx queue pair configured to receive packets associated with the packet flow identifier. For example a Tx Rx queue pair may be allocated if it is desired for received packets to be processed on a core associated with transmit packets e.g. a NUMA architecture. The network device driver is further configured to program the flow director to select received packets associated with the packet flow identifier for storage in the allocated receive queue thus enabling the network device driver to poll the allocated receive queue. The network device driver may be configured to notify the logical link controller that the flow director is programmed.

A flag may be utilized by an application configured to indicate to other applications whether a queue e.g. Rx Q is being processed by the application. For example a network device driver e.g. network device driver may be configured to set a queue flag when initiating polling in a selected receive queue. The set queue flag may then indicate to other applications that the selected receive queue is in use. The other applications are typically configured to avoid processing the same queue when this flag is set. The network device driver may then be configured to clear the queue flag when the processing is complete. In some embodiments the queue flag may be an atomic flag. Additionally or alternatively a spinlock may be implemented on the selected queue. Spinlock and queue flags are configured to facilitate synchronization of queue utilization and to prevent race conditions.

The logical link controller may be configured receive an indication that a receive packets operation has completed and to communicate this completion to the network device driver . The network device driver may then remove the associated filter identifier from the network controller . Removing the associated filter identifier is configured to close a communication between the host device and a link partner. The network device driver may then be configured to release the receive queue.

The network controller may include routing circuitry one or more transmit buffers Tx FIFO and one or more receive buffers Rx FIFO . The transmit buffer s Tx FIFO are configured to store packets prior to transmission and the receive buffer s Rx FIFO are configured to store received packets. In some embodiments the network controller may be configured to store the interrupt vector s . While interrupts are enabled the network controller is configured to provide an interrupt to processor circuitry when a packet is received or in response to completing transmission of a packet. The interrupt may be associated with interrupt vector s and or interrupt vector s . The particular interrupt vector utilized may related to the packet flow identifier. If polling is in process when an interrupt occurs an interrupt service routine pointed to by an interrupt vector is configured to return without scheduling a DPC delayed procedure call . Thus polling and host device interrupt service processing may be synchronized.

Routing circuitry may include a flow director and flow director data . Routing circuitry is configured to store a filter identifier and or a receive queue identifier in flow director data . For example the filter identifier may correspond to a packet flow identifier. The filter identifier i.e. packet flow identifier and the receive queue identifier may be stored in flow director data by network device driver . Flow director data is configured to associate a packet flow with a receive queue stored in the memory circuitry . Flow director data is configured to facilitate routing packets associated with a packet flow identifier to the receive queue associated with the packet flow thus enabling the network device driver to poll the appropriate receive queue.

The flow director is configured to process received packets to identify a packet flow and to identify a receive queue associated with the identified packet flow. For example when an application thread has data message s to transmit and packets corresponding to the data message s to be transmitted are stored in a Tx Rx Queue pair the network device driver may be configured to program flow director to route received network traffic for the same packet flow to the same Tx Rx Queue pair.

Thus a host device that includes a networking stack and a network controller including a flow director may be configured to implement polling by a network device driver for received packets that are ready for processing. The flow director may be initialized with a packet flow identifier and a receive queue identifier thereby enabling polling since only packets associated with the packet flow identifier may be placed in the receive queue by the network controller. The flow director is then configured to provide received packets associated with the packet flow identifier to the identified receive queue. In some embodiments the network device driver is configured to disable interrupts. The network device driver may then poll the receive queue for received packets ready for processing. Thus latency variation may be avoided and latency may be reduced.

Operation may include initializing a flow director. Operation may include receiving a polling request. For example the polling request may be received from a logical link controller in response to receiving a receive request from the application. Whether an interrupt service routine ISR or a delayed procedure call DPC are in process may be determined at operation . If the ISR or DPC are in process then program flow may return at operation . Thus polling may not be initiated when ISR and or DPC are in process providing synchronization between polling for received packet processing and interrupt driven received packet processing. If ISR and DPC are not in process a receive queue Rx Q to be polled may be identified at operation . For example the receive queue may be identified based on information provided with the polling request by the logical link controller. In some embodiments ownership of the identified receive queue may be established at operation . For example a flag may be set configured to indicate to other applications that the receive queue is being used. In another example a spinlock may be established.

In some embodiments interrupts may be disabled at operation . Disabling interrupts is configured to prevent interrupt servicing and DPCs thereby reducing or eliminating latency variation due to ISR and DPC processing and or interrupt moderation. Operation includes polling the receive queue. For example a receive descriptor field configured to indicate received packets ready for processing may be polled. Each received packet may be processed at operation . Whether packet processing is complete may be determined at operation . For example an application may be configured to communicate when packet processing is complete via e.g. logical link controller . If packet processing is not complete program flow may return to operation polling the receive queue. If packet processing is complete ownership of the receive queue may be released and interrupts may be enabled at operation . Program flow may return at operation .

Thus a network device driver may be configured to poll a receive queue for received packets associated with a packet flow identifier that are ready for processing. A flow director included in a network controller may be initialized with a filter corresponding to the packet flow identifier and with a receive queue identifier. The network controller may then be configured to place received packets associated with the packet flow identifier in the receive queue corresponding to the receive queue identifier. The network device driver may then poll the receive queue e.g. a receive queue descriptor field configured to indicate received packets that are ready for processing. In some embodiments interrupts may be disabled while the polling is occurring thus reducing any latency variation in received packet processing. Polling for received packets is configured to provide a relatively low latency receive packet processing in general.

Program flow may begin with allocating a filter identifier at operation . For example the filter identifier may be allocated by a logical link controller. The logical link controller may be further configured to determine whether a separate queue may be appropriate. An Rx Q or Tx Rx QP may be allocated at operation . Operation may include providing flow director data to a flow director at operation . Flow director data may include a packet flow identifier e.g. a filter identifier and or an Rx Q identifier or Tx Rx QP identifier . Operation may include notifying the logical link controller that the flow director is programmed. Program flow may then return at operation .

Thus a filter identifier and or an Rx Q identifier or a Tx Rx QP identifier may be allocated and a flow director may be initialized with a packet flow identifier and an Rx Q identifier or a Tx Rx QP identifier . The flow director may then be configured to direct received packet associated with the packet flow identifier to the identified Rx Q or Tx Rx QP .

While illustrate various operations according to an embodiment it is to be understood that not all of the operations depicted in are necessary for other embodiments. Indeed it is fully contemplated herein that in other embodiments of the present disclosure the operations depicted in and or other operations described herein may be combined in a manner not specifically shown in any of the drawings but still fully consistent with the present disclosure. Thus claims directed to features and or operations that are not exactly shown in one drawing are deemed within the scope and content of the present disclosure.

While the foregoing is prided as exemplary system architectures and methodologies modifications to the present disclosure are possible. For example an operating system in host memory circuitry may manage system resources and control tasks that are run on e.g. host device . For example OS may be implemented using Microsoft Windows HP UX Linux BSD ESX or UNIX although other operating systems may be used. In one embodiment OS shown in may be replaced by a virtual machine manager which may provide a layer of abstraction for underlying hardware to various operating systems running on one or more processing units.

Linux may comply or be compatible with ISO IEC 23360 1 2006 Linux Standard Base LSB core specification 3.1 Part 1 Generic specification and other parts of this standard released by International Organization for Standardization ISO and by the International Electrotechnical Commission IEC and or later versions of this standard. BSD an open source operating system may comply or be compatible with Release 9.0 January 2012 of FreeBSD maintained by the FreeBSD project supported by the FreeBSD Foundation and or later releases. ESX may comply or be compatible with VMware ESX and or VMware ESXi release 5.1 September 2012 available from VMware Inc. Palo Alto Calif. and or later releases.

Host device and or one or more of the link partners A B . . . N may further include an operating system OS not shown to manage system resources and control tasks that are run on e.g. node . For example the OS may be implemented using Microsoft Windows HP UX Linux or UNIX although other operating systems may be used. In some embodiments the OS may be replaced by a virtual machine monitor or hypervisor which may provide a layer of abstraction for underlying hardware to various operating systems virtual machines running on one or more processing units. The operating system and or virtual machine may implement one or more protocol stacks. A protocol stack may execute one or more programs to process packets. An example of a protocol stack is a TCP IP Transport Control Protocol Internet Protocol protocol stack comprising one or more programs for handling e.g. processing or generating packets to transmit and or receive over a network. A protocol stack may alternatively be comprised on a dedicated sub system such as for example a TCP offload engine and or network controller. The TCP offload engine circuitry may be configured to provide for example packet transport packet segmentation packet reassembly error checking transmission acknowledgements transmission retries etc. without the need for host CPU and or software involvement.

Other modifications are possible. For example memory circuitry may comprise one or more of the following types of memory semiconductor firmware memory programmable memory non volatile memory read only memory electrically programmable memory random access memory flash memory magnetic disk memory and or optical disk memory. Either additionally or alternatively memory circuitry may comprise other and or later developed types of computer readable memory. The host device and or one or more of the link partners A B . . . N may further include a direct memory access engine DMA configured to provide memory read and or write requests without the need for direct process involvement in such transactions.

Network may comprise a packet switched network. Network controller may be capable of communicating with link partner s A . . . N using a selected packet switched network communications protocol. One exemplary communications protocol may include an Ethernet communications protocol which may be capable permitting communication using a Transmission Control Protocol Internet Protocol TCP IP . The Ethernet protocol may comply or be compatible with the Ethernet standard published by the Institute of Electrical and Electronics Engineers IEEE titled IEEE 802.3 Standard published in March 2002 and or later versions of this standard. Alternatively or additionally network controller may be capable of communicating with link partner s A . . . N using an X.25 communications protocol. The X.25 communications protocol may comply or be compatible with a standard promulgated by the International Telecommunication Union Telecommunication Standardization Sector ITU T . Alternatively or additionally network controller may be capable of communicating with link partner s A . . . N using a frame relay communications protocol. The frame relay communications protocol may comply or be compatible with a standard promulgated by Consultative Committee for International Telegraph and Telephone CCITT and or the American National Standards Institute ANSI . Alternatively or additionally network controller may be capable of communicating with link partner s A . . . N using an Asynchronous Transfer Mode ATM communications protocol. The ATM communications protocol may comply or be compatible with an ATM standard published by the ATM Forum titled ATM MPLS Network Interworking 1.0 published August 2001 and or later versions of this standard. Of course different and or after developed connection oriented network communication protocols are equally contemplated herein.

As used in any embodiment herein the term module may refer to an app software firmware and or circuitry configured to perform any of the aforementioned operations. Software may be embodied as a software package code instructions instruction sets and or data recorded on non transitory computer readable storage medium. Firmware may be embodied as code instructions or instruction sets and or data that are hard coded e.g. nonvolatile in memory devices.

 Circuitry as used in any embodiment herein may comprise for example singly or in any combination hardwired circuitry programmable circuitry such as computer processors comprising one or more individual instruction processing cores state machine circuitry and or firmware that stores instructions executed by programmable circuitry. The modules may collectively or individually be embodied as circuitry that forms part of a larger system for example an integrated circuit IC system on chip SoC desktop computers laptop computers tablet computers servers smart phones etc.

Any of the operations described herein may be implemented in a system that includes one or more storage mediums having stored thereon individually or in combination instructions that when executed by one or more processors perform the methods. Here the processor may include for example a server CPU and or other programmable circuitry. Also it is intended that operations described herein may be distributed across a plurality of physical devices such as processing structures at more than one different physical locations. The storage medium may include any type of tangible medium for example any type of disk including hard disks floppy disks optical disks compact disk read only memories CD ROMs compact disk rewritables CD RWs and magneto optical disks semiconductor devices such as read only memories ROMs random access memories RAMs such as dynamic and static RAMs erasable programmable read only memories EPROMs electrically erasable programmable read only memories EEPROMs flash memories Solid State Disks SSDs magnetic or optical cards or any type of media suitable for storing electronic instructions. Other embodiments may be implemented as software modules executed by a programmable control device. The storage medium may be non transitory.

A method and system are configured to implement polling by a network device driver. A logical link controller is configured to provide a polling request to the network device driver in response to a receive request from an application. The network device driver is configured to identify a receive queue based at least in part on a packet flow identifier included in the polling request and to initiate polling. A network controller including a flow director is configured to select one or more received packets associated with the packet flow identifier and to store the selected packets in the receive queue. The flow director may be initialized with the packet flow identifier and a receive queue identifier. The network device driver is configured to poll the receive queue for received packets and to process received packets. The network device driver may be configured to establish ownership of the receive queue and or disable interrupts. The network device driver may be configured to notify the logical link controller when the packet processing is completed. The network device driver may further release ownership of the receive queue and enable interrupts when the packet processing is completed. Thus polling for packet processing may be performed by a network device driver utilizing a network controller that includes a flow director. Associating the receive queue with the packet flow identifier enables the network device driver to poll the appropriate receive queue. The network device driver may disable interrupts thereby eliminating effects of interrupt context switching and or DPC delayed procedure call scheduling on latency. Disabling interrupts may further eliminate latencies associated with interrupt moderation.

In one aspect there is provided a host device. The host device includes processor circuitry comprising at least one processor memory circuitry configured to store an application a receive queue and a networking stack comprising a network device driver a network controller comprising a flow director the network controller configured to couple the host device to at least one link partner and the flow director configured to store one or more selected received packets in the receive queue the selecting based at least in part on a packet flow identifier and a network device driver configured to identify the receive queue in response to a polling request comprising the packet flow identifier poll the receive queue and process each received packet stored in the receive queue.

Another example host device includes the forgoing components and the network device driver is further configured to initialize the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example host device includes the forgoing components and the network device driver is further configured to at least one of establish ownership of the receive queue and disable an interrupt associated with the receive queue.

Another example host device includes the forgoing components and the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example host device includes the forgoing components and the networking stack further comprises a logical link controller configured to provide the polling request in response to a receive request from the application.

Another example host device includes the forgoing components and the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example host device includes the forgoing components and the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

In another aspect there is provided a method. The method includes identifying a receive queue by a network device driver in response to a polling request comprising a packet flow identifier storing one or more selected received packets in the receive queue by a flow director the selecting based at least in part on the packet flow identifier polling the receive queue by the network device driver and processing each received packet stored in the receive queue.

Another example method includes the forgoing operations and further includes initializing the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example method includes the forgoing operations and further includes at least one of establishing ownership of the receive queue by the network device driver and disabling an interrupt associated with the receive queue.

Another example method includes the forgoing operations and further includes that the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example method includes the forgoing operations and further includes that the polling request is provided by a logical link controller in response to a receive request from an application.

Another example method includes the forgoing operations and further includes that the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example method includes the forgoing operations and further includes that the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

In another aspect there is provided a system. The system includes one or more storage mediums having stored thereon individually or in combination instructions that when executed by one or more processors results in the following identifying a receive queue by a network device driver in response to a polling request comprising a packet flow identifier storing one or more selected received packets in the receive queue by a flow director the selecting based at least in part on the packet flow identifier polling the receive queue by the network device driver and processing each received packet stored in the receive queue.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes initializing the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes at least one of establishing ownership of the receive queue by the network device driver and disabling an interrupt associated with the receive queue.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes that the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes that the polling request is provided by a logical link controller in response to a receive request from an application.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes that the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes that the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

In one aspect there is provided a host device. The host device includes processor circuitry comprising at least one processor memory circuitry configured to store an application a receive queue and a networking stack comprising a network device driver a network controller comprising a flow director the network controller configured to couple the host device to at least one link partner and the flow director configured to store one or more selected received packets in the receive queue the selecting based at least in part on a packet flow identifier and a network device driver configured to identify the receive queue in response to a polling request comprising the packet flow identifier poll the receive queue and process each received packet stored in the receive queue.

Another example host device includes the forgoing components and the network device driver is further configured to initialize the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example host device includes the forgoing components and the network device driver is further configured to at least one of establish ownership of the receive queue and disable an interrupt associated with the receive queue.

Another example host device includes the forgoing components and the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example host device includes the forgoing components and the networking stack further comprises a logical link controller configured to provide the polling request in response to a receive request from the application.

Another example host device includes the forgoing components and the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example host device includes the forgoing components and the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

In another aspect there is provided a method. The method includes identifying a receive queue by a network device driver in response to a polling request comprising a packet flow identifier storing one or more selected received packets in the receive queue by a flow director the selecting based at least in part on the packet flow identifier polling the receive queue by the network device driver and processing each received packet stored in the receive queue.

Another example method includes the forgoing operations and further includes initializing the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example method includes the forgoing operations and further includes at least one of establishing ownership of the receive queue by the network device driver and disabling an interrupt associated with the receive queue.

Another example method includes the forgoing operations and further includes that the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example method includes the forgoing operations and further includes that the polling request is provided by a logical link controller in response to a receive request from an application.

Another example method includes the forgoing operations and further includes that the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example method includes the forgoing operations and further includes that the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

In another aspect there is provided a system. The system includes one or more storage mediums having stored thereon individually or in combination instructions that when executed by one or more processors results in the following identifying a receive queue by a network device driver in response to a polling request comprising a packet flow identifier storing one or more selected received packets in the receive queue by a flow director the selecting based at least in part on the packet flow identifier polling the receive queue by the network device driver and processing each received packet stored in the receive queue.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes initializing the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes at least one of establishing ownership of the receive queue by the network device driver and disabling an interrupt associated with the receive queue.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes that the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes that the polling request is provided by a logical link controller in response to a receive request from an application.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes that the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example system includes instructions that when executed by one or more processors result in the forgoing operations and also includes that the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

In one aspect there is provided a host device. The host device includes processor circuitry comprising at least one processor memory circuitry configured to store an application a receive queue and a networking stack comprising a network device driver a network controller comprising a flow director the network controller configured to couple the host device to at least one link partner and the flow director configured to store one or more selected received packets in the receive queue the selecting based at least in part on a packet flow identifier and a network device driver configured to identify the receive queue in response to a polling request comprising the packet flow identifier poll the receive queue and process each received packet stored in the receive queue.

Another example host device includes the forgoing components and the network device driver is further configured to initialize the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example host device includes the forgoing components and the network device driver is further configured to at least one of establish ownership of the receive queue and disable an interrupt associated with the receive queue.

Another example host device includes the forgoing components and the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example host device includes the forgoing components and the networking stack further comprises a logical link controller configured to provide the polling request in response to a receive request from the application.

Another example host device includes the forgoing components and the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example host device includes the forgoing components and the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

In another aspect there is provided a method. The method includes identifying a receive queue by a network device driver in response to a polling request comprising a packet flow identifier storing one or more selected received packets in the receive queue by a flow director the selecting based at least in part on the packet flow identifier polling the receive queue by the network device driver and processing each received packet stored in the receive queue.

Another example method includes the forgoing operations and further includes initializing the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example method includes the forgoing operations and further includes at least one of establishing ownership of the receive queue by the network device driver and disabling an interrupt associated with the receive queue.

Another example method includes the forgoing operations and further includes that the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example method includes the forgoing operations and further includes that the polling request is provided by a logical link controller in response to a receive request from an application.

Another example method includes the forgoing operations and further includes that the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example method includes the forgoing operations and further includes that the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

In one aspect there is provided a host device. The host device includes processor circuitry comprising at least one processor memory circuitry configured to store an application a receive queue and a networking stack comprising a network device driver a network controller comprising a flow director the network controller configured to couple the host device to at least one link partner and the flow director configured to store one or more selected received packets in the receive queue the selecting based at least in part on a packet flow identifier and a network device driver configured to identify the receive queue in response to a polling request comprising the packet flow identifier poll the receive queue and process each received packet stored in the receive queue.

Another example host device includes the forgoing components and the network device driver is further configured to initialize the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example host device includes the forgoing components and the network device driver is further configured to at least one of establish ownership of the receive queue and disable an interrupt associated with the receive queue.

Another example host device includes the forgoing components and the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example host device includes the forgoing components and the networking stack further comprises a logical link controller configured to provide the polling request in response to a receive request from the application.

Another example host device includes the forgoing components and the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example host device includes the forgoing components and the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

In another aspect there is provided a method. The method includes identifying a receive queue by a network device driver in response to a polling request comprising a packet flow identifier storing one or more selected received packets in the receive queue by a flow director the selecting based at least in part on the packet flow identifier polling the receive queue by the network device driver and processing each received packet stored in the receive queue.

Another example method includes the forgoing operations and further includes initializing the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example method includes the forgoing operations and further includes at least one of establishing ownership of the receive queue by the network device driver and disabling an interrupt associated with the receive queue.

Another example method includes the forgoing operations and further includes that the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example method includes the forgoing operations and further includes that the polling request is provided by a logical link controller in response to a receive request from an application.

Another example method includes the forgoing operations and further includes that the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example method includes the forgoing operations and further includes that the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

In one aspect there is provided a system. The system includes means for identifying a receive queue by a network device driver in response to a polling request comprising a packet flow identifier means for storing one or more selected received packets in the receive queue by a flow director the selecting based at least in part on the packet flow identifier means for polling the receive queue by the network device driver and means for processing each received packet stored in the receive queue.

Another example system includes the forgoing components and includes the means for initializing the flow director with the packet flow identifier and a receive queue identifier corresponding to the receive queue.

Another example system includes the forgoing components and includes the means for at least one of establishing ownership of the receive queue by the network device driver and disabling an interrupt associated with the receive queue.

Another example system includes the forgoing components and includes that the polling request comprises at least one of a duration of a polling interval a maximum number of packets to poll a hint to maintain an associated interrupt disabled until enabled by a logical link controller and a request to update a processor affinity of an associated interrupt vector.

Another example system includes the forgoing components and includes that the polling request is provided by a logical link controller in response to a receive request from an application.

Another example system includes the forgoing components and includes that the packet flow identifier corresponds to a filter identifier related to a filter stored in the flow director the flow director configured to select one or more received packets based at least in part on the filter identifier.

Another example system includes the forgoing components and includes that the receive queue is included in a transmit receive queue pair configured to facilitate receive packet processing by a same processor as is configured to perform transmit packet processing.

The terms and expressions which have been employed herein are used as terms of description and not of limitation and there is no intention in the use of such terms and expressions of excluding any equivalents of the features shown and described or portions thereof and it is recognized that various modifications are possible within the scope of the claims. Accordingly the claims are intended to cover all such equivalents.

Various features aspects and embodiments have been described herein. The features aspects and embodiments are susceptible to combination with one another as well as to variation and modification as will be understood by those having skill in the art. The present disclosure should therefore be considered to encompass such combinations variations and modifications.

