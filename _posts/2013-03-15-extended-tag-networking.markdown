---

title: Extended tag networking
abstract: Techniques are provided for enabling tag networking. In one example, a network device (e.g., switch, router, etc.) is configured to receive a packet of a traffic flow and to analyze the traffic flow to determine the packet belongs to a particular type of traffic. The network device can then add and/or change a tag in a data field of the packet. The tag, among other things, serves as an identifier for the particular type of traffic flow. The tag is identifiable by a downstream node that is preconfigured to recognize the tag and to carry out logic in response to recognizing the tag. Advantageously, the tag functionality of the present approach provides a generalized way of adding information to packets; the information and the associated functionalities are customizable during a runtime of the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09325610&OS=09325610&RS=09325610
owner: Cisco Technology, Inc.
number: 09325610
owner_city: San Jose
owner_country: US
publication_date: 20130315
---
Embodiments presented in this disclosure generally relate to computer networking and more particularly to techniques for providing extended tag networking including functionality associated with tagging packets of a traffic flow.

Multiprotocol Label Switching MPLS is a mechanism in high performance telecommunications networks that directs data from one network node to the next based on short path labels rather than long network addresses avoiding complex lookups in a routing table. The labels identify virtual links e.g. paths between distant nodes rather than endpoints. MPLS can encapsulate packets of various network protocols. A network protocol is a system of digital message formats and rules for exchanging those messages in or between computing systems and in telecommunications. A protocol may have a formal description. Protocols may include signaling authentication and error detection and correction capabilities.

MPLS networks have an implied hierarchy based on label stacking. Label stacking is the encapsulation of an MPLS packet inside another MPLS packet. A result of stacking is the ability to tunnel one MPLS label switched path LSP inside another LSP MPLS with Traffic Engineering TE and or other MPLS features. In MPLS networking a label switched path LSP is a path through an MPLS network set up by a signaling protocol. The path is set up based on criteria in the forwarding equivalence class FEC .

The path begins at a label edge router LER which makes a decision on which label to prefix to a packet based on the appropriate FEC. It then forwards the packet along to the next router in the path which swaps the packet s outer label for another label and forwards it to the next router. The last router in the path removes the label from the packet and forwards the packet based on the header of its next layer for example IPv4. Due to the forwarding of packets through an LSP being opaque to higher network layers an LSP is also sometimes referred to as an MPLS tunnel.

Unfortunately there is not a general purpose mechanism in network stacks e.g. software implementations of network protocols for labeling traffic. MPLS uses labels to route or certify packets. However an MPLS enabled node e.g. switch only looks at the top label in front of the packet for the MPLS label. Further MPLS headers are rigid in the sense that a network programmer is limited in the way in which an MPLS header can be used to handle traffic.

Embodiments presented herein provide customizable generalized labels e.g. tags used to improve network traffic flows. A single platform kit extends the capabilities of routers and or controllers so that these devices can inspect the contents of packets including tags within the packets. While forwarding packets the router can add and or change a tag based upon the logic of an application that is preconfigured to handle the tag. That is embodiments presented herein support tagging network traffic in order to allow programmable applications running on a router to mange traffic flows based on the labels. For example this approach which may be referred to as software defined networking SDN brings programmability of data networking into the network elements directly. The single platform kit provides programming constructs e.g. application programming interfaces APIs that abstract a variety of network functions and support both packet tagging operations as well as operations based on the tags assigned to the packets of a given data flow.

For simplicity the term packet is used herein to generally refer to data packets and data frames. A frame is similar to a packet except a frame typically refers to Layer 2 data e.g. so called Ethernet Frames or Medium Access Control MAC Frames and typically includes both a header and a trailer whereas a Layer 3 packet e.g. an Internet Protocol IP packet does not include a trailer.

The tag within the framework of a single platform kit discussed below with reference to enables a network programmer to implement an application e.g. a service such as security that is both responsive to the tag and customizable at will automatically and or during run time. Tags e.g. tag when coupled with functionality of extending network behavior that responds to tags may be used for many purposes. For example by using the tagging functionality of the present approach a network programmer can provide various network services such as security Quality of Service QoS guarantees QoS feedback loops and or running new layers in the network stack. Generally tagging according the present approach provides a small piece of per packet labeling to convey information along with the packet. This tagging functionality is further discussed below with reference to .

The tag functionality can be extended for example by enabling a router to look up a particular tag dynamically by using the single platform kit and adding additional arbitrary behavior to the traffic flow. The tag functionality can be further generalized by attaching an MPLS header to the packet . Doing so allows a network application developer to use MPLS.

Advantageously multi label and hierarchical tag routing allows more fine grained control of packet flows than conventional approaches e.g. MPLS . By using tagging functionality within the context of a single platform kit the network becomes less about trying to interpret network flows and more about actually acting on flows identified by tags. That is tagging provides a general mechanism to add information to a packet. So a tag becomes a generalized way of communicating with the entire network e.g. any network device that is on the transmission path of the packet . Also a network programmer can define a protocol for particular traffic after a switch is purchased and installed on the network. The network programmer can even build and set protocols dynamically e.g. during network runtime .

The following description is presented to enable one of ordinary skill in the art to make and use the proposed techniques. Descriptions of specific embodiments and applications are provided only as examples and various modifications will be readily apparent to those skilled in the art. The general principles described herein may be applied to other embodiments and applications without departing from the scope of the disclosure. Thus the present disclosure is not to be limited to the embodiments shown but is to be accorded the widest scope consistent with the principles and features described herein. For purposes of clarity features relating to technical material that is known in the technical fields related to the proposed ideas are not described in detail here.

In context of this discussion a device generally includes hardware or a combination of hardware and software. A component is typically a part of a device and includes hardware or a combination of hardware and software.

The core layer includes a core network coupled to a management console which enables a network administrator to manage the data center . The core layer includes a fabric of network devices e.g. routers and or switches for high speed packet switching between multiple aggregation modules of the aggregation layer . The core layer serves as a gateway to connect other modules including for example an extranet a wide area network WAN and or an Internet edge among other modules. Links connecting the data center core layer are terminated at Layer 6 and typically use for example 20 GigE interfaces for supporting a high level of throughput performance and to meet oversubscription levels. The core layer has a high degree of redundancy and bandwidth capacity and thus is optimized for availability and performance. The core network can connect multiple aggregation layers and multiple access layers .

The aggregation layer includes network devices such as aggregation switches that are coupled to service switches in this example. An aggregation switch includes a switch that enables a high degree of high bandwidth port density capacity. Accordingly the aggregation layer is optimized for traffic distribution and link fan out capabilities to the switches of the access layer . Functionally nodes e.g. network devices in the aggregation layer typically serve as the Layer 3 Layer 6 boundary. Layer 3 is a data link layer of the Open Systems Interconnection OSI model that transfers data between network devices attached to the network and to detect and possibly correct errors that may occur in the physical layer Layer 2 . Layer 6 is a network layer of the OSI model that transfers variable length data sequences from a source host on one network to a destination host on a different network in contrast to the data link layer which connects hosts within a common network segment while maintaining the quality of service requested by the transport layer.

A service switch provides flexibility on how network services are defined and carried out on traffic within the data center . Examples of network services include without limitation security firewalls and subscriber management among other services.

The access layer includes network devices such as access switches that are couple to virtual servers and routers in this example. The access layer connects one or more clients e.g. hosts to the infrastructure via the one or more routers e.g. edge router providing network access typically at Layer 3 e.g. local area networks LANs and or virtual local area networks VLANs . A virtual server may include a hypervisor coupled to one or more virtual machines. The hypervisor is hardware or a combination of hardware and software that generates and runs the virtual machines. A virtual machine VM is a software implementation of a machine e.g. a computer that executes programs e.g. a loaded application like a physical machine. Virtual machines generally emulate the computer architecture and functions of a real world computer. One physical host computer and one hypervisor can run multiple virtual machines.

The data center incorporates software defined networking SDN which is an approach to building a computer network that involves separating and abstracting elements of the network. Applications running on clients routers and switches can add change and or respond to tags in packets of traffic flows. The elements include the control plane and the data plane. SDN decouples the system that decides where traffic is sent the control plane from the system that forwards traffic to the selected destination the data plane . This technology simplifies networking and enables new applications such as network virtualization in which the control plane is separated from the data plane and is implemented in a software application e.g. a virtual machine of the virtual server . The architecture of the data center architecture enables a network administrator to have programmable control of network traffic without requiring physical access to the network s hardware devices.

Network devices of the access layer provide access to compute resources and or storage resources . In this example compute resources include one or more blade servers coupled to blade switches. A blade server is a server computer with a modular design optimized to minimize the use of physical space and energy. The storage resources include storage devices coupled to blade switches and access switches in this example.

This example of shows the data center operating as a network cloud . Cloud computing includes the use of computing resources hardware and software that are delivered as a service over a network typically the Internet to the hosts . Cloud computing entrusts remote services with a user s data software and computation.

Conventional networks are typically provisioned monitored and maintained by a large toolkit of protocols and techniques from command line interface CLI to Extensible Markup Language XML Simple Network Management Protocol SNMP to syslog. While powerful and effective these tools are limited. For example these tools tend to provide a fixed set of functionality. While this generally works for whatever fixed purpose a tool is used the fixed set of functionality does not allow data center operators to compose or execute application programs on the network devices to meet specific network requirements of the operator. Accordingly extending tag networking enables network programmers to customize a network infrastructure by using SDN applications. So a network device that is added and or customized on the network is not restricted to the functionality supported by a given network device.

In one embodiment the single platform kit includes a toolkit that enables development automation and rapid service generation. For example the common framework includes a tool e.g. software application that can manage the observation of network flows that one or more network devices do not recognize. In the aggregate the tools for the networks devices automate extended tag networking. The single platform kit allows developers to extend and configure the capabilities of the network devices e.g. switches routers etc. of the data center . The single platform kit enables easier access to the data inside the data center and enables administrators to control the functionality of the data center . Thus the single platform kit transforms the network from being a sum of individual network devices having singular capabilities into a collaboration of network devices that share information provided by applications pushed out to the network devices.

The network can push e.g. upload an application onto the client via the single platform kit or the client can download the application from the network via the single platform kit . In one implementation for example the application includes logic e.g. program code that instructs the client how to analyze traffic transmitted to the network.

Similarly the management console can push e.g. upload an application onto the router via the single platform kit . The application includes logic e.g. program code that instructs the router how to analyze traffic passing through the router . In one implementation for example the application configures router to identify a type of traffic associated with a given flow. For instance the application could instruct the router to identify a flow as being a Skype communication data e.g. Skype as being the application associated with an initial transmission of one or more packets . In response to identifying Skype traffic for example the application could instruct the router to add a tag to each packet in this flow to identify data packets carrying Skype data.

Accordingly the router or client can use the tag e.g. tag of to identify the traffic s application e.g. Skype and or the sender. Other nodes in the data center network e.g. other switches routers can respond according to how SDN applications on those nodes are configured to handle the packet having the tag. Further because the single platform kit provides a common framework distinct nodes with distinct properties or capabilities can handle commonly tagged traffic flows in a consistent manner.

It is desirable for the router to be about as close as possible to the network edge to maximize computational efficiencies of the tag networking. For example as the router tags packets earlier e.g. closer to the network edge more nodes can respond to the tagging.

Analyzing a traffic flow on the router may be computationally expensive. However once a particular type of traffic is recognized the complexity of determining a tag to assign to packets of a traffic flow is not incurred by nodes that simply process the tagged packets of that flow. Subsequent packets are easier for the router to recognize after the router recognizes the initial stream of traffic. For example once the router recognizes a traffic flow as carrying a particular traffic type e.g. Skype packets other networks devices in the network do not need to redo the analysis because packets of that flow are tagged upon ingress to the router .

Accordingly the management console can also configure via the single platform kit the one or more nodes e.g. switches with functionality. The functionality includes reading e.g. recognize identify etc. tags performing a tag lookup and applying logic to each data packet having the tag. Such functionality may be implemented in the form of an application to which each node e.g. switch has access. The application includes logic e.g. program code that instructs the node how to read the tag and in response to perform a tag lookup to find the application and then to apply logic to the data packet according to the application . For example the logic may include instructions for carrying out a particular service e.g. security operations QoS operations traffic throttling operations etc. . In one instance the switch can recognize the tag that identifies packets of a Skype session. In response the switch may be instructed via the application to perform a tag lookup for application for handling the packet and then route such traffic through a particular part of the network.

Another example of a service is QoS guarantees. For example the application can be configured to provide end to end guaranteed performance e.g. ensure particular traffic experiences no more than a predetermined amount of latency . It will be apparent to a person skilled in the art that there are many other ways in which the application can apply different logic to packets via the application .

A tag lookup requires substantially fewer computations than the conventional alternative of performing a Deep Packet Inspection DPI on each packet. DPI is a form of computer network packet filtering that examines the data part and possibly also the header of a packet as the packet passes an inspection point e.g. a router configured to perform DPI searching for protocol non compliance viruses spam intrusions or defined criteria to decide whether the packet may pass or if the packet needs to be routed to a different destination or for the purpose of collecting statistical information. A tag lookup involves less than 50 instructions and more specifically about 10 to 20 instructions. In contrast a DPI on a packet involves roughly several thousand instructions. Given millions of packet flows through nodes the impact to improved traffic flow is tremendous because each node does not have to perform DPI e.g. thousands of instructions to determine the parameters of each packet.

In a case where the client sends traffic to the network the application instructs the client to send an inquiry to the network to determine if the network devices e.g. routers switches etc. are configured to handle a particular tag. If the client receives a response that the network devices can handle a particular tag then the application instructs the client to assign a tag to packets of a particular traffic before broadcasting the packets to the network. Accordingly the edge router does not have to add the tags to the packets.

Returning to the discussion of configuring router the application can change a tag assigned to a flow packet. For example if the tag that identifies the traffic is no longer necessary then the router can remove the tag from each packet having the tag. That way nodes downstream do not have to deal with any operations related to the tag. Alternatively the router can change a tag to cause nodes downstream to respond by running different logic related to the updated tag. An edge router may also be configured to add or remove a tag according to ingress and or egress filtering which is discussed below.

Accordingly by using the single platform kit the applications configure the network devices e.g. routers switches etc. throughout the network to read add and or change tags assigned to packets of network flows.

The router e.g. edge router which first assigns a tag to a packet is called an ingress router. The last router which removes the tag from the packet in a packet s path is an egress router. That is the ingress and egress routers refer to routers at the border of a tag based software defined networking environment. Removing a tag ensures an application that is not intended to read the tag does not interpret the tag as being a part of the packet. Routers in between edge routers are transit routers and typically do not need to add or remove a tag.

A packet s path is typically unidirectional. The routers are configured to label a packet switched through the network from one endpoint to another. Since bidirectional communication is typically desirable dynamic signaling protocols can set up a label switched path LSP in the other direction to compensate for this desirable functionality.

Most firewalls act as gatekeepers for networks or network segments and manage ingress and egress of data at a network boundary e.g. a boundary between a corporate local network and the internet . In fact if the feature set has been enabled a router can easily be considered to be a firewall for security purposes if the router does filtering of traffic on the network. As a gatekeeper for the network the router can carefully filter undesirable traffic that attempts to enter the network.

Although firewalls e.g. edge routers typically protect the network from incoming traffic firewalls can also prevent particular traffic from leaving the network. By using tags the firewall can restrict particular internal packets from exiting the network and or from going to certain parts of the network. Such a feature is part of egress filtering which can be just as important as the ingress filtering.

For added security a network administrator can use tags to employ Access Control Lists ACLs as the basic network access rule on all firewalls e.g. edge routers in both directions so all network traffic incoming or outgoing needs approval. This implementation takes some commitment to keep functional. However the implementation is highly secure.

At step the client analyzes the network traffic received at step . For example the client may have packets e.g. Skype packets that are intended to be sent to the network. The SDN application instructs the client to send an inquiry to the network to determine if the network is configured for handling a particular tag.

At step the client adds and or changes a tag in the packet e.g. data field of packet as needed according to instructions of the configured application . As described above with reference to in one implementation the application is an SDN application that instructs the client to analyze traffic or each packet and to add change a tag in each packet as necessary. At step the client sends the packet to the router .

At step the router receives a packet. In one implementation the router is an edge router that is located about as close as possible to the edge of the network.

At step the router analyzes the network traffic received at step . The SDN application instructs the router to inspect the network traffic to identify a pattern among particular packets and thereby determine those packets belong to a particular traffic flow. If tags are previously added to one or more packets of the traffic flow e.g. due to the client adding the tags then the analysis carried out by the router involves searching for and finding those added tags in the one or more packets.

At step the router adds and or changes a tag in the packet e.g. data field of packet according to instructions of the configured application . As described above with reference to in one implementation the application is an SDN application that instructs the router to analyze traffic or each packet and to add change a tag in each packet as necessary.

At step the router sends the packet to the next network device e.g. router switch etc. . For example the router can send the packet to switch .

At step the next node in this case switch receives the packet. For example the switch is a node that is located along the transmission path of the packet.

At step the switch reads the tag in the packet. For example the switch can read the packet data and thereby read the tag that is located among the packet data.

At step the switch performs a tag lookup to find logic e.g. program code instructions etc. associated with the tag. For example the switch is preconfigured with an application e.g. application of that includes instructions to be carried out in response to the switch identifying the tag.

At step the switch applies logic e.g. instructions for carrying out a network service according to an application e.g. application of . As one of many examples the switch may carry out security operations in response to performing the tag lookup.

At step the switch sends the packet to the next node. For example the next node may perform steps that are similar to the steps performed by the switch . The method continues with successive next nodes along the transmission path of the packet.

These methods may include other steps and or details that are not discussed in this method overview. Other steps and or details described herein may be a part of the methods depending on the implementation. Persons skilled in the art will understand that any system configured to implement the method steps in any order falls within the scope of the present invention.

The CPU can receive traffic that the CPU does not know how to handle can resolve the uncertainty internally and or can request for help from another network device and receive the help from whatever network device can provide the help.

The control device includes a parser a forwarding device an admission control device an output buffer an egress process device and a packet rewrite device . The forwarding device includes a tag component which is configured to carry out tagging operation as discussed above with reference to . In some embodiments the control device is an application specific integrated circuit ASIC . The control device is responsible for many of the switch features such as VLAN assignment Layer 3 table lookups Layer 6 table lookups buffer allocation and time stamping. In particular for layer 3 traffic the control device is responsible for the packet forwarding decisions.

The parser device parses incoming packets extracts fields e.g. headers trailers data etc. required to determine whether a given packet should be forwarded. A packet is a basic unit of communication over a digital network. A packet may also be called a datagram a segment a block a cell or a frame depending on the protocol. When data is transmitted a network device breaks down the data into similar data structures packets . A destination computer reassembles the original data chunk once the packets reach a destination. Packets that may be lost somewhere along the transmission path are handled by higher layer protocols e.g. TCP . The packet header typically identifies a protocol that specifies how the network device should handle the packet. The protocol may be in a header of a packet. The parser device then passes the parsed information to Layer 3 and or Layer 6 lookup devices. The packet data itself may include a tag as described above with reference to .

Next the control device sends the packet to the forwarding device for a learning phase. One function of the forwarding device is to acquire the tag that defines the manner in which the network device is supposed to handle the packet.

In some implementations the forwarding device also learns the source Media Access Control MAC address in the hardware for the given virtual local area network VLAN . Then depending on the destination MAC address lookup result the control device forwards the packet to an external lookup device e.g. a Layer 6 processing device the CPU and or all network devices of a particular VLAN. For Layer 6 the packet arrives at the external lookup device and the source IP address is looked up in the Layer 6 table. The external lookup device looks up and indexes the destination IP address in a next hop table which lists the outgoing interface of the network device and the destination MAC address. The outgoing interface provides an index in the Layer 6 interface table that supplies the source MAC address and the VLAN. Other lookup operations such as access control list ACL and network address translation NAT are also performed at this level. The packet rewrite device later uses this information to rewrite the packet after the packet has been parsed. The operations of the forwarding device can be performed in the hardware of the control device without placing undue load on the CPU .

The forwarding device passes the packet to the admission control device . The queuing replication and Data Center Transmission Control Protocol DCTCP processes occur at the admission control device . Depending on the amount of shared buffer space available the control device stores the packet in a reserved per port location the reserved per queue location or the dynamic shared space. All these spaces are part of a shared buffer. Then the control device sends the packets to a queue for scheduling. The control device makes a decision for packet replication at the output buffer . The replication occurs at the egress process device as the control device places the packets in queues for scheduling. The replication process does not replicate the packet. Instead the control device manages the packet by using a pointer in memory. During the packet rewrite process the control device generates a different header on each outgoing interface. A result is similar latency times across all the outgoing interfaces that are sending the same data.

While the forgoing is directed to embodiments of the present disclosure other and further embodiments of the disclosure may be devised without departing from the basic scope thereof. For example aspects of the present disclosure may be implemented in hardware or software or in a combination of hardware and software. One embodiment of the disclosure may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored. Such computer readable storage media when carrying computer readable instructions that direct the functions of the present disclosure are embodiments of the present disclosure.

In view of the foregoing the scope of the present disclosure is determined by the claims that follow.

