---

title: Two-stage TCP handshake
abstract: Techniques are disclosed for dividing a TCP handshake into multiple parts, in a system comprising an edge device, an intermediary computing node, and a destination computing node. A client sends a TCP SYN packet to the edge device, to establish a TCP connection with the destination computing node. The edge device performs the handshake, and then forwards an ACK packet to the intermediary computing node. The intermediary computing node uses that ACK packet to generate a second SYN packet, and uses that SYN packet to perform a TCP handshake with the destination computing node. Then, TCP sequence numbers are converted between what is expected by the client and destination in packets sent between the two.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09602330&OS=09602330&RS=09602330
owner: Amazon Technologies, Inc.
number: 09602330
owner_city: Seattle
owner_country: US
publication_date: 20130523
---
Providing defense mechanisms against computer hackers and attacks on computing infrastructure has been an increasingly significant concern with the growing importance of network based computing. With the growth of network based computing over the Internet and the growing reliance on commercial network based computing services protecting computers and servers connected to a network from malicious network based attacks has become a significant issue for businesses and organizations. For example hackers may attack a computing service over a network using denial of service DOS attacks. SYN flooding is a type of a DOS attack. In a SYN flood attack an attacker sends a large number of SYN synchronize packets to a target system in an attempt to overload the target system s resources so that the target is unable to respond to legitimate SYN packets and other legitimate requests. Computing service providers must account for and protect against such attacks while maintaining an effective level of service to their customers.

One technique to mitigate the effects of a SYN flood attack involves separating a TCP handshake across multiple entities as depicted for example in . Consider an example scenario where a datacenter comprises a router sometimes referred to as a gateway an intermediary server and a destination computing node that is the destination for TCP connection requests that may be the target of a SYN flood attack . in this example the router may be the first point of contact for outside computing nodes that are attempting to establish a TCP connection request with the destination computing node. The router may be configured to receive a high rate of TCP SYN packets and send responsive TCP SYN ACK packets. After the router determines that a request for a TCP handshake originated from an actual outside computing node and therefore unlikely to be participating in a SYN flood attack by sending an TCP ACK packet to the router the router may then cause the destination computing node to complete a TCP handshake to establish a connection with the outside computing node. In this way the destination computing node may be protected from receiving illegitimate SYN packets that are part of a SYN flood attack.

As stated above when the router receives an ACK packet from an outside computing node referred to herein as a source computing node the router may then cause the destination computing node to complete a TCP handshake to establish a connection. For example the router may forward this ACK packet to an intermediary computing node where the destination computing node is a virtual machine instance the intermediary computing node may be a physical host upon which the virtual machine instance executes . This intermediary computing node may use the ACK packet to generate a second SYN packet to send to the destination computing node. For example the intermediary computing node may generate the second SYN packet to identify the source of the SYN packet as the source computing node. The intermediary computing node may determine an IP address for the source computing node based on the ACK packet that it receives from the router. The intermediary computing node may then send this second SYN packet to the destination computing node to initiate another TCP handshake which also involves another SYN ACK packet and another ACK packet . Once this second TCP handshake has been established the first TCP handshake being between the source computing node and the router and the second TCP handshake being between the intermediary computing node and the destination computing node the source computing node and the destination computing node may communicate via the established TCP connection.

As described above there may be two handshakes involved in creating this TCP connection between the source computing node and the destination computing node. Each handshake may include establishing a separate TCP sequence number for the communications. In such scenarios the intermediary computing node may convert between these sequence numbers. That is the intermediary computing node may keep track of the sequence numbering schemes used by the source computing node and the destination computing node respectively. When the intermediary computing node receives a TCP packet from the source computing node that is directed to the instance the intermediary computing node may convert a sequence number in that packet from a sequencing scheme used by the source computing node to a sequencing scheme used by the destination computing node before sending that converted packet to the destination computing node. Likewise When the intermediary computing node receives a TCP packet from the destination computing node that is directed to the source computing node the intermediary computing node may convert a sequence number in that packet from a sequencing scheme used by the destination computing node to a sequencing scheme used by the source computing node before sending the packet to the source computing node.

By performing a TCP handshake between a source computing node and an destination computing node in this manner the effects of a SYN flood attack may be mitigated. depicts such a SYN flood attack in more detail and the following figures depict ways in which a SYN flood attach may be mitigated according to the present embodiments.

In a SYN flood attack an attacker sends a string of spurious SYN requests to a target system in an attempt to consume the target system s resources and render the target system unresponsive. Specifically a SYN flood attack causes the target system to reserve resources for a large number of connections and wait for expected ACK messages that never arrive. For example an attacker can send a string of SYN messages and 1 never send the expected ACK messages or 2 spoof a source IP address in the spurious SYN messages with false source IP addresses. In the latter case the target system sends SYN ACK messages to the false IP addresses. Of course since the false IP addresses did not actual send the initial SYN messages no ACK messages are ever sent back to the target system.

In a normal TCP connection when a client sends a SYN message to a server computer the server computer typically binds a port in preparation for the connection. When the server computer generates a SYN ACK message the server computer also creates an entry in a SYN queue. A SYN queue is a queue for storing half open connections awaiting SYN handshake completion. During a SYN attack the SYN queue entries continue to queue up due to the growing number of half open connections as the attacker continues to generate more spurious SYN packets that in turn take up more entries in the queue. A server computer typically waits for an expected ACK message for a specified timeout period before cancelling the connection request and recovering the connection resources. During that time the attacker can continue to flood the server computer with more connection requests. Eventually the server computer will run out of available ports and will not accept any new connection requests without dropping connections from the queue resulting in a denial of service to legitimate connection requests.

One countermeasure for guarding against denial of service attacks is the use of SYN cookies. This technique protects against a SYN flood attack by not allocating resources on the target system when SYN messages are received. In the SYN cookie technique a server computer that receives a SYN message sends back a SYN ACK response to the client but does not reserve any resources e.g. does not bind a port in preparation for the connection and does not enter a SYN queue entry. However the SYN ACK message encodes information that can be used to recover the connection information if needed. If the server computer subsequently receives a legitimate ACK response from the client the server computer reconstructs the connection information using the information encoded in the SYN ACK response and establishes the connection.

More specifically when establishing a normal TCP connection the SYN ACK response includes a sequence number that per the TCP protocol can be any value as determined by the server computer. The client in response to receiving the SYN ACK will increment i.e. add 1 to the received sequence number and include the incremented sequence number in the ACK message.

In the SYN cookie technique the sequence number in the SYN ACK response is specially constructed so that it can be used to reassemble the connection information if needed. For example the sequence number may be a 32 bit number generated by concatenating a time stamp a maximum segment size MSS value that the server computer would have stored as the SYN queue entry and a unique identifier e.g. a unique number that is only known to the gateway device and the server computers or the output of a cryptographic function computed over the server IP address and port number the client IP address and port number and the time stamp.

When a client sends an ACK message to the server computer in response to the server computer s SYN ACK message the client adds the value 1 to the sequence number contained in the SYN ACK message and includes the incremented sequence number in the ACK message. When the server computer receives the ACK message from the client the server computer subtracts 1 from the incremented sequence number to recover the initial sequence number sent to the client. The server computer may then check the time stamp against the current time to determine if the connection is expired. The server computer may also check if the unique identifier returned in the ACK message matches the unique identifier sent in the SYN ACK message. If a cryptographic function was used then the server computer may recompute the output of the cryptographic function to determine whether the output received in the SYN ACK message matches the recomputed output and is therefore valid. The server computer also decodes the MSS value from the received sequence number and uses it to reconstruct the SYN queue entry. The requested TCP connection can then be established per the normal process.

The computing environment depicted in illustrates an example of a data center that can provide computing resources to users and which may be referred herein singularly as a user or in the plural as the users via user computers and which may be referred herein singularly as a computer or in the plural as the computers via a communications network . Data center may be configured to provide computing resources for executing applications on a permanent or an as needed basis. The computing resources provided by data center may include various types of resources such as data processing resources data storage resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example data processing resources may be available as virtual machine instances. The instances may be configured to execute applications including Web servers application servers media servers database servers and the like. Data storage resources may include file storage devices block storage devices and the like.

Each type or configuration of computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity. Customers may choose to allocate a number of small processing resources as Web servers and or one large processing resource as a database server for example.

Data center may include servers and which may be referred herein singularly as a server or in the plural as the servers that provide computing resources available as virtual machine instances and which may be referred herein singularly as a virtual machine instance or in the plural as the virtual machine instances . The virtual machine instances may be configured to execute applications including Web servers application servers media servers database servers and the like. Other resources that may be provided include data storage resources not shown and may include file storage devices block storage devices and the like.

The availability of virtualization technologies for computing hardware has provided benefits for providing large scale computing resources for customers and allowing computing resources to be efficiently and securely shared between multiple customers. For example virtualization technologies such as those provided by VMware or other virtualization systems may allow a physical computing device to be shared among multiple users by providing each user with one or more virtual machine instances hosted by the physical computing device. A virtual machine instance may be a software emulation of a particular physical computing system that acts as a distinct logical computing system. Such a virtual machine instance provides isolation among multiple operating systems sharing a given physical computing resource. Furthermore some virtualization technologies may provide virtual resources that span one or more physical resources such as a single virtual machine instance with multiple virtual processors that spans multiple distinct physical computing systems.

Referring to communications network may for example be a publicly accessible network of linked networks and possibly operated by various distinct parties such as the Internet. In other embodiments communications network may be a private network such as for example a corporate or university network that is wholly or partially inaccessible to non privileged users. In still other embodiments communications network may include one or more private networks with access to and or from the Internet.

Communication network may provide access to computers . Computers may be computers utilized by users or other customers of data center . For instance user computer or may be a server a desktop or laptop personal computer a tablet computer a wireless telephone a personal digital assistant PDA an e book reader a game console a set top box or any other computing device capable of accessing data center . User computer or may connect directly to the Internet e.g. via a cable modem or a Digital Subscriber Line DSL . Although only two user computers and are depicted it should be appreciated that there may be multiple user computers.

Computers may also be utilized to configure aspects of the computing resources provided by data center . In this regard data center might provide a Web interface through which aspects of its operation may be configured through the use of a Web browser application program executing on user computer . Alternatively a stand alone application program executing on user computer might access an application programming interface API exposed by data center for performing the configuration operations. Other mechanisms for configuring the operation of the data center including deploying updates to an application might also be utilized.

Servers and shown in may be standard servers configured appropriately for providing the computing resources described above and may provide computing resources for executing one or more applications. In one embodiment the computing resources may be virtual machine instances . In the example of virtual machine instances each of the servers may be configured to execute an instance manager or which may be referred herein singularly as an instance manager or in the plural as the instance managers capable of executing the virtual machine instances. The instance managers may be a virtual machine monitor VMM or another type of program configured to enable the execution of virtual machine instances on servers for example. As discussed above each of the virtual machine instances may be configured to execute all or a portion of an application.

It should be appreciated that although the embodiments disclosed above discuss the context of virtual machine instances other types of implementations can be utilized with the concepts and technologies disclosed herein. For example the embodiments disclosed herein might also be utilized with computing systems that do not utilize virtual machine instances.

In the example data center shown in a router may be utilized to interconnect the servers and . Router may also be connected to gateway which is connected to communications network . Router may manage communications within networks in data center for example by forwarding packets or other data communications as appropriate based on characteristics of such communications e.g. header information including source and or destination addresses protocol identifiers etc. and or the characteristics of the private network e.g. routes based on network topology etc. . It will be appreciated that for the sake of simplicity various aspects of the computing systems and other devices in this example are illustrated without showing certain conventional details. Additional computing systems and other devices may be interconnected in other embodiments and may be interconnected in different ways.

It should be appreciated that the network topology illustrated in has been greatly simplified and that many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. These network topologies and devices should be apparent to those skilled in the art.

It should also be appreciated that data center described in is merely illustrative and that other implementations might be utilized. Additionally it should be appreciated that the functionality disclosed herein might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art. It should also be appreciated that a server gateway or other computing device may comprise any combination of hardware or software that can interact and perform the described types of functionality including without limitation desktop or other computers database servers network storage devices and other network devices PDAs tablets cellphones wireless phones pagers electronic organizers Internet appliances television based systems e.g. using set top boxes and or personal digital video recorders and various other consumer products that include appropriate communication capabilities. In addition the functionality provided by the illustrated modules may in some embodiments be combined in fewer modules or distributed in additional modules. Similarly in some embodiments the functionality of some of the illustrated modules may not be provided and or other additional functionality may be available.

Servers and of may be implemented using computing device of . depicts a general purpose computer system that includes or is configured to access one or more computer accessible media. In the illustrated embodiment computing device includes one or more processors and or which may be referred herein singularly as a processor or in the plural as the processors coupled to a system memory via an input output I O interface . Computing device further includes a network interface coupled to I O interface .

In various embodiments computing device may be a uniprocessor system including one processor or a multiprocessor system including several processors e.g. two four eight or another suitable number . Processors may be any suitable processors capable of executing instructions. For example in various embodiments processors may be general purpose or embedded processors implementing any of a variety of instruction set architectures ISAs such as the x86 PowerPC SPARC or MIPS ISAs or any other suitable ISA. In multiprocessor systems each of processors may commonly but not necessarily implement the same ISA.

System memory may be configured to store instructions and data accessible by processor s . In various embodiments system memory may be implemented using any suitable memory technology such as static random access memory SRAM synchronous dynamic RAM SDRAM nonvolatile Flash type memory or any other type of memory. In the illustrated embodiment program instructions and data implementing one or more desired functions such as those methods techniques and data described above are shown stored within system memory as code and data .

In one embodiment I O interface may be configured to coordinate I O traffic between processor system memory and any peripheral devices in the device including network interface or other peripheral interfaces. In some embodiments I O interface may perform any necessary protocol timing or other data transformations to convert data signals from one component e.g. system memory into a format suitable for use by another component e.g. processor . In some embodiments I O interface may include support for devices attached through various types of peripheral buses such as a variant of the Peripheral Component Interconnect PCI bus standard or the Universal Serial Bus USB standard for example. In some embodiments the function of I O interface may be split into two or more separate components such as a north bridge and a south bridge for example. Also in some embodiments some or all of the functionality of I O interface such as an interface to system memory may be incorporated directly into processor .

Network interface may be configured to allow data to be exchanged between computing device and other device or devices attached to a network or networks such as other computer systems or devices for example. In various embodiments network interface may support communication via any suitable wired or wireless general data networks such as types of Ethernet networks for example. Additionally network interface may support communication via telecommunications telephony networks such as analog voice networks or digital fiber communications networks via storage area networks such as Fibre Channel SANs storage area networks or via any other suitable type of network and or protocol.

In some embodiments system memory may be one embodiment of a computer accessible medium configured to store program instructions and data as described above for implementing embodiments of the corresponding methods and apparatus. However in other embodiments program instructions and or data may be received sent or stored upon different types of computer accessible media. Generally speaking a computer accessible medium may include non transitory storage media or memory media such as magnetic or optical media e.g. disk or DVD CD coupled to computing device via I O interface . A non transitory computer accessible storage medium may also include any volatile or non volatile media such as RAM e.g. SDRAM DDR SDRAM RDRAM SRAM etc. ROM etc. that may be included in some embodiments of computing device as system memory or another type of memory. Further a computer accessible medium may include transmission media or signals such as electrical electromagnetic or digital signals conveyed via a communication medium such as a network and or a wireless link such as those that may be implemented via network interface . Portions or all of multiple computing devices such as those illustrated in may be used to implement the described functionality in various embodiments for example software components running on a variety of different devices and servers may collaborate to provide the functionality. In some embodiments portions of the described functionality may be implemented using storage devices network devices or special purpose computer systems in addition to or instead of being implemented using general purpose computer systems. The term computing device as used herein refers to at least all these types of devices and is not limited to these types of devices.

A network set up by an entity such as a company or a public sector organization to provide one or more services such as various types of cloud based computing or storage accessible via the Internet and or other networks to a distributed set of clients may be termed a provider network. Such a provider network may include numerous data centers hosting various resource pools such as collections of physical and or virtualized computer servers storage devices networking equipment and the like needed to implement and distribute the infrastructure and services offered by the provider network. The resources may in some embodiments be offered to clients in units called instances such as virtual or physical computing instances or storage instances. A virtual computing instance may for example comprise one or more servers with a specified computational capacity which may be specified by indicating the type and number of CPUs the main memory size and so on and a specified software stack e.g. a particular version of an operating system which may in turn run on top of a hypervisor .

A number of different types of computing devices may be used singly or in combination to implement the resources of the provider network in different embodiments including general purpose or special purpose computer servers storage devices network devices and the like. In some embodiments a client or user may be provided direct access to a resource instance e.g. by giving a user an administrator login and password. In other embodiments the provider network operator may allow clients to specify execution requirements for specified client applications and schedule execution of the applications on behalf of the client on execution platforms such as application server instances Java virtual machines JVMs general purpose or special purpose operating systems platforms that support various interpreted or compiled programming languages such as Ruby Perl Python C C and the like or high performance computing platforms suitable for the applications without for example requiring the client to access an instance or an execution platform directly. A given execution platform may utilize one or more resource instances in some implementations in other implementations multiple execution platforms may be mapped to a single resource instance.

In many environments operators of provider networks that implement different types of virtualized computing storage and or other network accessible functionality may allow customers to reserve or purchase access to resources in various resource acquisition modes. The computing resource provider may provide facilities for customers to select and launch the desired computing resources deploy application components to the computing resources and maintain an application executing in the environment. In addition the computing resource provider may provide further facilities for the customer to quickly and easily scale up or scale down the numbers and types of resources allocated to the application either manually or through automatic scaling as demand for or capacity requirements of the application change. The computing resources provided by the computing resource provider may be made available in discrete units which may be referred to as instances. An instance may represent a physical server hardware platform a virtual machine instance executing on a server or some combination of the two. Various types and configurations of instances may be made available including different sizes of resources executing different operating systems OS and or hypervisors and with various installed software applications runtimes and the like. Instances may further be available in specific availability zones representing a data center or other geographic location of the underlying computing hardware for example.

In some embodiments the provider network may be organized into a plurality of geographical regions and each region may include one or more availability zones. An availability zone which may also be referred to as an availability container in turn may comprise one or more distinct locations or data centers configured in such a way that the resources in a given availability zone may be isolated or insulated from failures in other availability zones. That is a failure in one availability zone may not be expected to result in a failure in any other availability zone. Thus the availability profile of a resource instance is intended to be independent of the availability profile of a resource instance in a different availability zone. Clients may be able to protect their applications from failures at a single location by launching multiple application instances in respective availability zones. At the same time in some implementations inexpensive and low latency network connectivity may be provided between resource instances that reside within the same geographical region and network transmissions between resources of the same availability zone may be even faster .

Client intends to establish a TCP handshake with instance . However in client establishes a TCP handshake with edge device . Then edge device communicates with physical host so that physical host establishes a separate TCP handshake with instance . In this separate TCP handshake instance intends that it is establishing a TCP handshake with client . Then as described in more detail in communications between client and instance involve client and instance using different sequences for sequence numbers with physical host translating between the two sequences as physical host receives incoming and outgoing TCP communications.

The communication flow of begins with client sending SYN packet to edge device . In response to receiving SYN packet edge device may determine a sequence number for the TCP communication stream. After determining a sequence number for the TCP communication stream edge device may send SYN ACK packet to client . In response to receiving SYN ACK packet client may send ACK packet to edge device . At this point the TCP handshake has been established from the point of view of client .

Once the TCP handshake has been established from the point of view of client edge device along with physical host works to establish a TCP handshake from the point of view of instance . Edge device forwards ACK packet received from client in the form of ACK packet which is forwarded to physical host . While the two ACK packets are depicted here with different reference numerals this is for clarity and there are embodiments where ACK packet and ACK packet are identical. In embodiments it is not an ACK packet that is sent from edge device to physical host but some other indication that the router has established a TCP handshake with the client that prompts the physical host to establish another TCP handshake with the instance.

When physical host receives ACK packet physical host generates a SYN packet from ACK packet and sends SYN packet to instance . To instance SYN packet appears to have been originated from client . Upon receiving SYN packet instance determines a sequence number for the TCP communication stream. Instance then sends a SYN ACK packet to physical host . Physical host responds by sending an ACK packet to instance which from the point of view of instance appears to have been originated from client .

Thus both client and instance are under the impression that they have established a TCP handshake with the other entity. Client and instance may then communicate via a TCP connection with physical host modifying sequence numbers in the TCP packets to fit in the respective expected sequence schemes of client and instance . This is described in more detail with respect to .

Operation depicts receiving a SYN packet. This may be SYN packet of . After operation the operating procedures of move to operation .

Operation depicts determining whether the SYN packet is valid. In embodiments determining whether the SYN packet is valid may comprise using checksum of to determine that no data in the header of packet has been corrupted where checksum is a checksum for the header of packet . If the SYN packet is valid the operating procedures of move to operation . If the SYN packet is not valid the operating procedures of move to operation where the operating procedures of end after possibly issuing an error message that indicates that the SYN packet is not valid .

Operation depicts determining a sequence number. This initial sequence number may be generated to be effectively random so that it may not be guessed by a third party that desires to spoof TCP packets sent between the client and the instance. Then future packets in the TCP communication between the client and the instance may increment the sequence number by one so that an order of the packets may be ascertained from the sequence numbers. After operation the operating procedures of move to operation .

Operation depicts generating a SYN ACK packet. This may be a TCP packet that has both the SYN and ACK bits set to On or True. Additionally this SYN ACK packet may switch the values stored in the source port and destination port fields e.g. source port and destination port of from the SYN packet received in operation since the SYN ACK packet is being sent back to the client that originated the SYN packet. After operation the operating procedures of move to operation .

Operation depicts sending the SYN ACK packet to the client computing node. This may be SYN ACK packet of . After operation the operating procedures of move to operation .

Operation depicts receiving an ACK packet. This may be ACK packet of . After operation the operating procedures of move to operation .

Operation depicts determining whether the ACK packet is valid. While there are embodiments that make some or all of these operations optional operation is depicted with a dashed line to illustrate here that it is an optional operation. Where operation is not implemented the operating procedures of may flow from operation to operation .

Where operation is implemented in embodiments this operation may be performed in a similar manner as operation . If the ACK packet is valid the operating procedures of move to operation . If the ACK packet is not valid the operating procedures of move to operation where the operating procedures of end after possibly issuing an error message that indicates that the ACK packet is not valid .

Operation depicts forwarding the ACK packet to a physical host for the instance. In embodiments the ACK packet received in operation is forwarded to the physical host without alteration. In other embodiments the packet is encapsulated or otherwise altered before the encapsulated ACK packet is sent to the physical host. For example the packet may be encapsulated given a custom IP header or in the case of packet in an IPv6 format for example an address field of the packet may be modified. These techniques may be used to include metadata with the packet. This metadata may indicate a sequence number sequencing scheme or secret used to generate a sequencing scheme used by the router the secret may be a piece of data such as one used to generate cryptographically secure numbers for the sequencing scheme so that the instance may use the same sequencing scheme. This metadata may also indicate various TCP options that were identified by the client when sending the SYN packet received in operation . These TCP options may indicate for example a maximum segment size whether SACK is permitted whether a trailer checksum may be used whether TCP compression filter may be used or whether quick start response may be used. After operation the operating procedures move to operation where the operating procedures of end.

The operating procedures of depict embodiments where a TCP connection handshake is performed by a router. There may also be embodiments where the router performs some TCP connection handshaking and passes through other SYN packets to the client for the client to perform the TCP connection handshake. depicts such embodiments. depicts example operating procedures for a router performing a TCP handshake with a client where the router may selectively pass through SYN packets to the destination according to embodiments. As with the operating procedures of may be implemented by edge device of as edge device communicates with client and physical host of . The operating procedures of begin with operation and then move to operation .

Operation depicts receiving a SYN packet. This operation may be performed in a similar manner as operation of . After operation the operating procedures of move to operation .

Operation depicts determining a rate of SYN packets that are being received that are destined for the instance. This may be measured in a number of packets received by the router that are destined for the instance in a given time period. This rate may change over time as more or fewer packets are received that are destined for the instance within the given time period. Where this rate changes over time the operating procedures of may be repeated and whether selective pass through is implemented may be changed based on this new rate. The rate at which these packets are received may be compared to two thresholds 1 a lower threshold below which all packets are passed through to the instance and 2 an upper threshold above which all packets are processed by the router via sending a SYN ACK to the originator of the packets rather than passing the SYN packet to the instance . Where the rate is between these two thresholds the router may process some of the packets and pass some of the packets through to the instance.

Where the rate of SYN packets being received is below a lower threshold the operating procedures of move to operation . Where the rate of SYN packets being received is above an upper threshold the operating procedures of move to operation of . That is the router completes the TCP handshake with the client and then sends an ACK to the physical host which then completes its own handshake with the instance to establish a TCP handshake from the client to the host.

Where the rate of SYN packets being received is above the lower threshold and below the upper threshold the operating procedures of move to operation . Operation depicts determining whether to pass the SYN packet through to the instance. Operation may flow from operation where it is determined that some packets should be passed through to the instance and some should be processed by the router because the rate of packets being received is at this middle level where it is above the lower threshold but below the upper threshold. In this case a rate of packets to pass through to the instance may be determined. For instance this rate of packets to pass through may be inversely proportional to the rate of packets being received. Let the difference in packets being received between the lower threshold and the upper threshold be 100 packets per second. Then where the rate of packets being received is 30 packets per second above the lower threshold 70 of the packets may be passed through to the instance. Or where the rate of packets being received is 60 packets per second above the lower threshold 40 of the packets may be passed through to the instance.

Whether a particular packet should be passed through or not may be determined for example using a random number generator. Continuing with the example above where 40 of the packets are passed through to the instance a random number may be generated that varies over integers from 1 100. Where that random number is between 1 and 40 the packet may be passed through to the instance and otherwise the packet may be processed by the router. Where it is determined not to pass the SYN packet through to the instance the operating procedures of move to operation of as described above. Where it is determined to pass the SYN packet through to the instance the operating procedures of move to operation .

Operation depicts sending the SYN packet to the instance. This may comprise sending the SYN packet to the physical host which will forward the packet to the instance. In embodiments metadata may be added to the SYN packet before sending it to the instance similar to that described for operation of . For example the router may add metadata to the packet that indicates a rate at which SYN packets destined for the instance are being received. After operation the operating procedures of move to operation where the operating procedures of end.

Operation depicts receiving an ACK packet from a router. This ACK packet may be ACK packet of . After operation the operating procedures of move to operation .

Operation depicts determining whether the ACK packet is valid. This operation may be implemented in a similar manner as operation of . Where the ACK packet is valid the operating procedures of move to operation . Where the ACK packet is invalid the operating procedures of move to operation where the operating procedures of end.

Operation depicts sending a SYN packet to the instance. This SYN packet may be SYN packet of . After operation the operating procedures of move to operation .

Operation depicts receiving a SYN ACK packet from the instance. This SYN ACK packet may be SYN ACK packet of . After operation the operating procedures of more to operation .

Operation depicts determining whether the SYN ACK packet is valid. This operation may be implemented in a similar manner as operation of . Similar to as described with respect to operation of operation may be optional. Where operation is not implemented the process flow of may move from operation to operation . Where in operation it is determined that the SYN ACK packet is valid the operating procedures of move to operation . Where the SYN ACK packet is invalid the operating procedures of move to operation where the operating procedures of end.

Operation depicts sending an ACK packet to the instance. This ACK packet may be ACK packet of . After operation the operating procedures of move to operation where the operating procedures of end.

The communication flow of begins with client sending packet to edge device . Packet is destined for instance . Edge device receives packet and forwards it to physical host depicted here as sending packet to physical host . This is labeled as packet as opposed to packet for ease of identification and because edge device may have altered the packet before sending it to physical host .

When physical host receives packet physical host determines how to alter the sequence number of the packet. For example a sequence that client uses to identify packets that it sends to instance and a sequence that instance uses to identify packets that it sends to client may differ even though they are part of the same TCP communication between client and instance . In these embodiments client may identify packets with a sequence number using a first offset and instance may identify packets with a sequence number using a second offset. The difference between the first offset and the second offset may be a delta and physical host may add this delta to a sequence number in packets received from client before sending those packets to instance and subtract this delta from a sequence number in packets received from instance before sending those packets to client or vice versa where the offset used by instance is smaller than the offset used by client . Physical host then alters the sequence number of packet and sends this altered packet to instance depicted here as packet . In embodiments altering the sequence number may comprise converting a sequence number in the packet from a numbering scheme used by the client to a numbering scheme used by the instance. These numbering schemes may be determined by the host based on packets the host has received. For instance the numbering scheme used by the client may be determined based at least in part on a sequence number identified in the ACK packet sent from the router to the host and a numbering scheme used by the instance may be determined based at least in part on a sequence number identified in the SYN ACK packet sent from the instance to the host.

Before edge device sends packet to physical host edge device may add metadata to the packet. For instance edge device may encapsulate the packet add an IP header to the packet modify an address in the packet where the packet is in an IPv6 Internet Protocol version 6 format or otherwise add metadata to the packet. This metadata may comprise a TCP option indicated in the SYN packet received from the client. Where this metadata is such a TCP option the router may buffer the SYN packet while establishing the TCP handshake with the client then add this metadata about the TCP option to an ACK packet that the router generates and stop buffering this SYN packet.

This metadata may also comprise metadata that indicates things that the router has determined. For example this metadata may comprise an indication that the ACK packet has been validated by the router a rate of SYN packets being received by the router that are destined for the instance an indication of an amount of trust associated with the client that the router possesses or an indication of the sequence numbering scheme used by the client and the router and determined during the TCP handshake between the client and the router.

A similar communication flow occurs when instance sends a responsive packet to client or instance sends a packet to client that is not in response to a packet received from client . Instance sends packet to physical host . This packet is destined for client . Physical host receives packet and in response determines how to alter the sequence number of this packet. This may be done in a similar manner as determining how to alter the sequence number of packet as described above. Physical host then alters the sequence number of packet and sends the resulting altered packet packet to edge device . Edge device receives packet and in response sends packet to client .

Operation depicts receiving a packet. In embodiments this may be packet where the packet is originated by the client and destined for the instance or packet where the packet is originated by the instance and destined for the client of . After operation the operating procedures of move to operation .

Operation depicts determining whether to alter a sequence number of the packet. It may be that the original TCP handshake with the client is performed by the router and that the client and the instance are using different sequences to number the packets that they originate. This may be implemented by determining whether the original TCP handshake was performed by the router in which case the sequence number of the packet may be altered or whether the router passed through the original SYN packet from the client to the instance so that the instance might perform the handshake in which case the sequence of the packet may not be altered since the client and the instance are using the same sequence numbering as determined by their TCP handshake . Where it is determined to alter the sequence number of the packet the operating procedures of move to operation . Where it is determined not to alter the sequence number of the packet the operating procedures of move to operation .

Operation depicts altering the sequence number of the packet. The physical host may maintain a mapping between the sequence used by the client and the sequence used by the instance such as a number that is added to a sequence number in a packet originated by the client and that is subtracted from a sequence number in a packet that is originated by the instance . The physical host may then use this mapping to alter the sequence number such as is described with respect to alter sequence number for a packet originated by the client and alter sequence number for a packet originated by the instance in . After operation the operating procedures of move to operation .

Operation depicts sending the packet to the destination. Where the packet that was received in operation was packet this may comprise sending packet to the instance provided that it was determined to alter the sequence number in operation otherwise this sent packet may be one where the sequence number is not altered . Where the packet that was received in operation was packet this may comprise sending packet to the client via the router provided that it was determined to alter the sequence number in operation otherwise this sent packet may be one where the sequence number is not altered . After operation the operating procedures of move to operation where the operating procedures of end.

The top of TCP packet is marked with 0 16 and 31 to indicate a number of bits in TCP packet . For example these numbers indicate that source port and destination port each have a size of 16 bytes. It may be appreciated that this is a logical depiction of TCP packet and that TCP packet may be implemented as a contiguous sequence of bits that is not divided up into 32 bit chunks. TCP packet begins with source port and destination port . Source port and destination port identify sockets at which higher layer in the OSI Open Systems Interconnect model may receive TCP services. Acknowledgement number indicates a sequence number assigned to the next byte of data that the sender of the packet expects to receive.

Options flags other fields padding may contain a variety of information. For example it may contain a data offset that indicates the number of 32 bit words in the TCP header. It may contain flags that indicate a variety of control information. It may indicate a size of the sender s receive window the sender s buffer space available for incoming data. It may contain checksum information used to determine whether the TCP packet was damaged in transmission across a communications network. It may include a pointer to a first urgent data byte in TCP packet . It may specify various TCP options and may also include padding to increase its length to 32 bytes or e.g. some multiple of 32 bytes . As depicted options flags other fields padding is shown as having a length of 32 bytes. This is illustrative and there may be embodiments where it has a longer or shorter length. Data is the data payload of TCP packet and may have a variable length.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop or laptop computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. Such systems may comprise at least one memory that bears instructions that upon execution by at least one processor cause the system to effectuate certain results as described herein.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP transmission control protocol internet protocol OSI open systems interconnection FTP file transfer protocol UPnP universal plug and play NFS network file system CIFS common internet file system and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a non transitory computer readable medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It may be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to non transitory volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the embodiments as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It may be understood however that there is no intention to limit the embodiments to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the embodiments as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments and does not pose a limitation on the scope of the embodiments unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the embodiments.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the embodiments. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the embodiments to be practiced otherwise than as specifically described herein. Accordingly this embodiment includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the embodiments unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

