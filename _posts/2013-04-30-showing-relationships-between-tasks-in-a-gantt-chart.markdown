---

title: Showing relationships between tasks in a Gantt chart
abstract: A system for showing a dependency relationship between a first task and a second task in a Gantt chart. The system displays the first task. The system also displays at least one selector. The at least one selector is associated with the first task. Tasks dependent upon the first task are accessible via the at least one selector. The second task is dependent upon the first task. The system also receives a selection of the second task via the at least one selector. The system also displays the second task.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336502&OS=09336502&RS=09336502
owner: ORACLE INTERNATIONAL CORPORATION
number: 09336502
owner_city: Redwood Shores
owner_country: US
publication_date: 20130430
---
One embodiment is directed generally to a computer system and in particular to a computer system that generates and displays a Gantt chart.

Gantt charts illustrate start dates and finish dates of elements of a project. An element of a project can correspond to a task or an activity of the project for example. The Gantt chart of a project can show the dependency relationships that exist between the elements of the project. Different kinds of dependency relationships between elements can include finish to start finish to finish start to start and start to finish.

In a finish to start relationship a second element does not start before a first element is finished. In a finish to finish relationship the second element does not finish before the first element is finished. In a start to start relationship the second element does not start before the first element starts. Finally in a start to finish relationship the second element does not finish before the first element starts.

One embodiment is a system for showing a dependency relationship between a first task and a second task in a Gantt chart. The system displays the first task. The system also displays at least one selector. The at least one selector is associated with the first task. Tasks dependent upon the first task are accessible via the at least one selector. The second task is dependent upon the first task. The system also receives a selection of the second task via the at least one selector. The system also displays the second task.

One embodiment provides an improved interface for showing the dependencies between elements such as tasks of a Gantt chart. Embodiments improve the overall readability of Gantt charts by avoiding the use of dependency lines as described in more detail below. Embodiments of the present invention can 1 for a given task show the dependent tasks which depend from the given task 2 show the relationships between different tasks and 3 navigate from a given task to a dependent task that depends from the given task.

First properly rendering dependency lines for a large number of dependent tasks can be costly in terms of using computing processing resources. For example referring again to in order to properly render dependency line between task and task the system must determine whether task will be located above or below task as shown by the Gantt chart. Specifically in order for dependency line to be drawn in a manner that properly connects task and task the relative positioning between task and task must generally be determined beforehand.

However the relative positioning between task and task and the rendering of line may be affected by the positioning of other tasks. For example task may affect the relative positioning of task with respect to task by virtue of task being positioned between task and . As such because the relative positioning of tasks e.g. the positioning of task with respect to task may be affected by other tasks on the Gantt chart to properly render dependency lines between tasks the system would generally first need to 1 retrieve information relating to all of the tasks of a Gantt chart and 2 determine the proper positioning of the tasks at interest with respect to the retrieved tasks. Performing 1 and 2 to render dependency lines within a Gantt chart generally becomes very costly to perform in cases where the number of tasks is large.

Other difficulties also arise when rendering dependency lines to show dependencies between tasks. For example when different tasks within a Gantt chart cannot be displayed upon a single screen e.g. because the different tasks cannot all fit on one screen a user may need to scroll downwards or upwards in order to see all of the tasks. If many dependency lines connect the different tasks and extend beyond the bounds of the single screen the user may be confused by the many dependency lines and may thus have difficulty ascertaining the dependencies between the different tasks.

In view of the above problems with the prior art one embodiment is an improved method of showing dependencies between elements such as tasks in a Gantt chart. As described above one embodiment improves the readability of Gantt charts by avoiding the use of dependency lines to show dependencies between different elements. As previously described above one of the difficulties generally associated with the prior art is that the rendering of dependency lines may be costly to perform because the rendering system must receive information regarding the relative positioning between many tasks in order to properly render the dependency lines between the tasks of interest. In contrast to the prior art one embodiment allows a user to avoid rendering dependency lines and thus to avoid the requirement of sending information regarding the relative positioning of tasks. Therefore one embodiment reduces the amount of information that is required to be sent to a system for the displaying of dependencies in a Gantt chart allowing the dependencies of a Gantt chart to be displayed at less cost compared to the prior art.

In addition to displaying the dependencies of a Gantt chart at less cost one embodiment also more clearly shows the dependencies which exist between different tasks of the Gantt chart compared to the approaches of the prior art.

Computer readable media may be any available media that can be accessed by processor and includes both volatile and nonvolatile media removable and non removable media and communication media. Communication media may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media.

Processor may be further coupled via bus to a display such as a Liquid Crystal Display LCD . A keyboard and a cursor control device such as a computer mouse may be further coupled to bus to enable a user to interface with system .

In one embodiment memory stores software modules that provide functionality when executed by processor . The modules include an operating system that provides operating system functionality for system . The modules further include dependency relationships module for a system that shows dependency relationships between elements in a Gantt chart as disclosed in more detail below. System can be part of a larger system. Therefore system will typically include one or more additional functional modules to include additional functionality such as data processing functionality for retrieving and displaying dependency relationships between elements in a Gantt chart as discussed in more detail below. A database is coupled to bus to store data used with modules and .

In one embodiment instead of drawing rendering dependency lines between a given task and a dependent task a menu is provided on the given task which shows the tasks that are dependent upon the given task. When a user accesses the menu provided on the given task a locating identifying value is retrieved for the dependent task. For example when a user accesses the menu provided on the given task a rowKey value can be retrieved for the dependent task. Information relating to the dependent task can then be retrieved based on the locating identifying value of the dependent task e.g. the rowKey value . The user may also navigate to the dependent task via the menu.

In other words upon retrieving information relating to the dependent task the menu may then be populated and rendered with the information relating to the dependent task. A user may then select the information relating to the dependent task. If the user selects the information relating to the dependent task one embodiment automatically scrolls through the Gantt chart to an appropriate row that corresponds to the dependent task to show the dependent task in a highlighted state. Once a user is finished viewing the dependent task the user can navigate back to the given task by performing an undo operation.

In one embodiment a Gantt component with the above described functionality is customizable by a developer that is using the Gantt component. For example the developer can specifically customize the Gantt component to use the above described menus to locate and view dependent tasks. The developer can customize the Gantt component by modifying specific attributes of the Gantt component. In one example the Gantt component may have an attribute such as a dependencyLinesVisible attribute which can be changed to allow popup menus to show the above described menus. The developer may set the dependencyLinesVisible attribute via set getDependencyLinesVisible methods for example. The attribute of the Gantt component may also allow the developer to render dependency lines if the developer chooses to do so. Developers may use different application programming interfaces APIs to interact with the Gantt component.

In one embodiment a user or a developer may choose between different ways of showing dependencies between tasks of a Gantt chart. One option could be to show the dependencies by rendering dependency lines. A second option could be to show the dependencies by using menu items as previously described above. Another option could be to not show the dependencies at all.

As described above in certain embodiments a menu is provided on a given task which shows the tasks that are dependent upon the given task. In one embodiment the user may also customize the menu. For example a user may choose to receive different types of information via the menu information such as taskName startTime and endTime from the menu for example. This information when shown in the menu associated with the given task corresponds to showing at least one dependent task s identifying name the dependent task s starting time and the one dependent task s ending time respectively.

Successor selector shows the dependent tasks that depend on the ending time of task . In one embodiment a dependent task depends on an ending time of a given task if the dependent task has a finish start or a finish finish dependency relationship with the given task.

Referring to screenshot as described above task can be associated with a predecessor selector . A user can access a data tip via predecessor selector as described in more detail below.

Referring to screenshot as described above a submenu that lists dependent tasks that depend on the starting time of the given task can be accessed from predecessor selector .

Next referring to screenshot a user can access Predecessor Bar from the list of dependent tasks . One embodiment then navigates to dependent task which corresponds to Predecessor Bar .

In view of the above one embodiment allows a user to selectively choose which dependent tasks of a given task should be displayed navigated to. Embodiments of the present invention also allow a user to identify and reference dependent tasks that depend from a starting time and or an ending time of a given task.

As discussed above in one embodiment a given task can have one or more selectors e.g. predecessor selectors and or successor selectors that allow for the displaying of submenus that show dependent tasks of the given task. These selectors may appear as buttons that can be disabled by default. The selectors can neighbor the tasks that they are associated with. For example the buttons can prepend and or append to a given task. For example a button corresponding to a predecessor selector can prepend to the given task. A button corresponding to a successor selector can append to a given task. Referring again to successor selector appends to task . Predecessor selector prepends to task .

In one embodiment if a user clicks on a button corresponding to a selector a corresponding submenu will pop up and show different dependency types. As described above different dependency types may include a start to start type a start to finish type a finish to start type and a finish to finish type. As described above in one embodiment a predecessor selector submenu contains information relating to dependent tasks that have a start to start or a start to finish relationship with the given task. A successor selector submenu contains information relating to dependent tasks that have a finish to start or a finish to finish relationship with the given task. Once a user selects a dependent task the chart region auto scrolls to reveal the dependent task. In cases where the task is wider than the viewable area that portion of the task that is out of view will be clipped from view.

In one embodiment each button corresponding to a selector may have 3 states an enabled state a mouse over state and a mouse down state. The above described tool tips that are prompted by a mouse over state may be directed to the relevant functionality of the button that is being hovered over by the mouse. For example the tool tip that is prompted by a mouse hovering over the prepended button is directed to functionality relating to the predecessor selector. The tool tip that is prompted by a mouse hovering over the appended button is directed to functionality relating to the successor selector. The prepended button and or the appended button can be hidden if there is no dependency relationship corresponding to the prepended button and or the appended button.

One embodiment allows a user to navigate through different parts of a Gantt chart by using keyboard navigation. The user can undo navigation steps through the dependent tasks by invoking the keyboard combination Ctrl Z while the Gantt chart is focused upon by the viewing window. While a given task is focused upon in one embodiment a user may move focus to a predecessor selector of the given task by pressing Ctrl LeftArrow . In one embodiment the user may move focus to a successor selector of the given task by pressing Ctrl RightArrow . In one embodiment the user may open a submenu of a selector by pressing Enter while the selector is focused upon. In one embodiment the user can open a menu of a given task by pressing Ctrl Alt M while the given task is focused upon.

To illustrate the operation of one embodiment suppose that a given task is focused upon has active focus by a viewing window. If the user chooses a selector the interface will move the focus to a predecessor selector or a successor selector. If the user then presses Enter a submenu appears. If the user then presses DownArrow then submenu options corresponding to the selector are focused upon. If the user then presses Enter then a submenu option becomes selected the submenu dismisses and the Gantt auto scrolls to reveal a dependent task corresponding to the selected submenu option.

In one embodiment a set of gestures corresponding to the previously described mouse interactions is provided. Specifically each type of mouse interaction has a corresponding gesture. These gestures can be used in conjunction with devices which do not have a mouse cursor. Examples of such devices include tablet devices or mobile devices. A gesture including finger down hold corresponds to a mouse interaction of hovering. A gesture including finger down hold release corresponds to a mouse interaction of right click. A gesture including tap corresponds to a mouse interaction of left click. 

At one embodiment displays a first task. As previously described the first task can correspond to a task e.g. task of within a Gantt chart. As previously described the first task can be displayed via various interfaces e.g. interface of .

At one embodiment displays at least one selector. The at least one selector is associated with the first task. Tasks dependent upon the first task are accessible via the at least one selector. The second task is dependent upon the first task.

At one embodiment receives a selection of the second task via the at least one selector. As described above in one embodiment a given task may have an associated predecessor selector and or a successor selector and a user may make a selection via the associated selector.

At one embodiment displays the second task. As described above in one embodiment the system may automatically navigate a user to the second task.

As described above one embodiment more clearly shows the dependencies between tasks of a Gantt chart. For example one embodiment more clearly shows these dependencies and improves the overall readability of Gantt charts by avoiding the use of dependency lines. Embodiments of the present invention can 1 for a given task show the dependent tasks which depend from the given task 2 show the relationships between different tasks and 3 navigate from a given task to a dependent task that depends from the given task.

Several embodiments are specifically illustrated and or described herein. However it will be appreciated that modifications and variations of the disclosed embodiments are covered by the above teachings and within the purview of the appended claims without departing from the spirit and intended scope of the invention.

