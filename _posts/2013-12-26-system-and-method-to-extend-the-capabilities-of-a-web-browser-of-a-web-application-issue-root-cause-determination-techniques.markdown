---

title: System and method to extend the capabilities of a web browser of a web application issue root cause determination techniques
abstract: Disclosed is a system and method for extending the web application root cause determination functionality to a web browser. In one aspect, the present invention plots the network topology diagram for the web application by executing network trace commands. In another aspect, the present invention allows user to upload their web application network topology diagram. In another aspect, the present invention allows user to build their web application network topology diagram using UI Devices Toolkit. The present invention collects the information relating to the web application issue from various entities such as network infrastructure devices, servers through ICMP, SNMP, TRAP, SYS/APPLOG, HTTP and Network traffic analysis. In one aspect, the present invention highlights the entity in the web application network topology diagram based on the collected information and provides the experts recommended suggestion for the issue through Internet web search query.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09154383&OS=09154383&RS=09154383
owner: 
number: 09154383
owner_city: Pearland
owner_country: US
publication_date: 20131226
---
This application claims the benefit of U.S. Patent Application Ser. No. 61 747 675 filed on Dec. 31 2012 the entire contents of which are hereby incorporated by reference.

The present invention relates generally to extend the capability of a web browser to determine the root cause for an issue occurred in the web application more specifically pin point which entity causes the issue in the network topology diagram presented in the web browser plug in panel window and provide suggestion web search query for the issue occurred in the web application.

In a real time production environment it is hard to identify the root cause for any critical issues like performance security threats broken authentication security mis configuration etc. While participating in the investigation for the root cause technical support team validates the issues in production environment using the structured monitoring and operations processes according to the established frameworks such as Information Technology Infrastructure Library ITIL Information Technology IT Services Management and Information Technology IT Operational Frameworks. The technical support team investigates the root cause by troubleshooting the possible devices such as network infrastructure device application servers and database server. Using common troubleshooting and diagnostic tools such as Performance Monitor and diagnostic approaches such as cause effect diagrams it is real hard for technical support team to identify the root cause and resolution for the issue.

In order to find where exactly issue is occurring or to find the root cause of web application issue the web application support team needs to depend on multiple team members from network infrastructure team database team and computer server team. The web application support team needs to look for their appropriate time to discuss the issue. In addition they need to spend a lot of time doing information gathering about the web application and the issue prior to actually identifying the root cause and troubleshooting the issue. Thus it could take several days to resolve a simple issue in production environment.

A traditional web browser does not provide the capability to find the root cause of web application issue. Although popular browser extensions such Firebug HTTPWatch Fiddler or Web Developer tools provides the ability to extend the web browser functionality for analyzing HTTP traffic and allowing inspect edit and monitor CSS HTML JavaScript and Net requests in the web document. However these extensions do not provide ability to pinpoint which component causes the issue and lack of providing information related to the issue outside of client computer.

However there are multiple entities to be examined to determine the root cause of an issue such entities are network infrastructure devices like Firewall Load Balancer Network Interface Card NIC and computer servers like web application server Domain Name Server Proxy Server and Database Server configuration HTTP and Network Traffic analysis. There are multiple tools like network tracer dump file analyzer system log viewer database profiler log parser and HTTP analyzer that are available to intercept the issue in various aspects to find the root cause by the technical support team. Also popular systems include OpenView from Hewlett Packard Corporation Unicenter from Computer Associates IBM Tivoli Framework exists for managing entire enterprise level networks and application. Another example of such a system is the Solarwinds Orion Network Performance Monitor and Application Monitor. However these systems does not provide the web browser extension that helps user to determine the root cause for an issue and does not pin point on which component causes the issue and what are the recommended solution from internet experts for the specified issue.

In another aspect these commercial systems provide a vast amount of information that requires special understanding of result codes. These codes cannot be interpreted easily by everyone and needs some additional knowledge. These systems show the time duration taken for the web pages to render but does not provide the ability to show which device of the network infrastructure or computer server caused the delay or and why it took that much amount of time to complete the web application request.

In addition to determine the root cause the web application support team needs to go the through log files of each network infrastructure device and the computer servers presented in the web application network topology diagram. Each log will be huge and may contain a lot of general logging information about the device. This general logging information is unrelated to the issue at hand. The vast content may make it harder for the web application support team to find and extract logging information related to the issue.

In order to use the diagnostic tools web application support team needs to be trained to use these tools for finding the root cause. There is no such system or method to provide an easy and elegant way to identify the root cause of the issue at the client i.e. application support team personnel web browser plug in panel without logging into the individual computer server or network infrastructure devices.

In order to overcome such problems there is a need for a method or system to extend the web browser capabilities for identifying the root cause of web application issue and providing the experts recommendation for the issue through web search. Such systems disclosed in many U.S. patent applications and patent document but none of the system disclosed to provide the functionality via web browser plug in.

In light of the shortcomings of the various currently available systems there is still a need for a quick and simple method for identifying the issue occurred in a web application. In particular there is an interest in a troubleshooting tool that allows a user to easily identify the issue and provide the possible workaround or resolution for the issue over the web browser.

The following presents a simplified summary of the invention in order to provide a basic understanding of the invention. This summary is not an extensive overview of the invention. It is not intended to identify key critical elements of the invention or to delineate the scope of the invention. Its sole purpose is to present some concepts of the invention in a simplified form as a prelude to the more detailed description that is presented later.

The present invention is computer implemented web browser plug in software that assists the web application support team to identify where exactly the issue is being caused and what is the root cause of the issue in a graphical representation of the network topology diagram of the web application. The present invention gathers the entities of network topology in which the web application is deployed in several ways. In one embodiment the present invention plots the network topology diagram for the web application by executing network trace commands using ICMP protocol to discover the various computer server and network infrastructure devices presented in the web application implementation. In some embodiments the present invention provides the ability to upload a network topology diagram of the web application and then present invention extracts the information about computer server and network infrastructure devices from the uploaded network topology diagram. In some embodiments the present invention provides the UI Devices Toolkit to plot the web application network topology diagram by adding removing devices. The collected information from the network topology diagram of web application is stored in the database. Once all the computer server and network devices of the web application are identified the network topology diagram is shown in the present invention i.e. web browser plug in panel window.

The present invention looks for the network topology diagram of given web application when user initiates the principle operation of present invention using Capture button. The Capture button initiates the validation of provided entity information in the network topology diagram by executing the network trace using ICMP protocol for the given web application URL. The difference in detected devices for the given web application URL will be corrected in the network topology diagram. In some embodiments the present invention initiates the network trace using ICMP protocol to detect the devices if no network topology diagram is presented and plots the network topology diagram according to the detected devices. In one embodiment the present invention installs the client service agent on the detected devices. If any device refuses or present invention is not able to install the client service agent on a particular device then present invention enables the monitoring agent on the device to notify to the present invention if any event occurred during the web application issue. Each client service agents are configured to monitor and report to the present invention if device activities and file system changes during the web application issue. Once the prerequisites have been established then present invention initiates the network trace between the devices and highlights the network path in the network topology diagram accordingly. The HTTP related trace information is extracted from the captured network packets and stored in the database. This information will be displayed when user clicks on the highlighted network path from the network topology diagram.

During a web application issue if any Client Service or monitoring agent detects activity changes in the device then it will notify to the present invention. In response to the notification the present invention highlights the notified device in the network topology diagram. The present invention further collects more information about the activity or file system changes in the device. The collected information is being evaluated and schematized to build a user friendly message for the event occurred in the device. The user friendly message may contain symptoms cause files changed during the event and suggestion using user preferred web search engine. The user preferred web search engine settings are retrieved from the web browser where the present invention is going to used. The present invention displays the custom notification on demand basis when user clicks on the highlighted server network infrastructure device.

Accordingly it is a principal object of the invention to assist the web application support team by extending the web browser functionality on identifying the root cause for the issues in the web application.

It is an object of the invention to provide improved method thereof in a system for the purposes described which is inexpensive dependable and fully effective in accomplishing its intended purposes.

It is an object of the invention to provide a web browser plug in that helps to highlight the graphical path between the server network infrastructure devices of web application as the web request is serviced.

It is an object of the invention to allow user to build the network topology diagram by adding or removing the graphical representation of server network infrastructure device to from the network topology diagram of the web application.

It is an object of the invention to allow a user to quickly identify the issue by providing the exception log information for the critical activity when the user clicks on the device during the time interval of the request.

Still another object of the invention is to suggest the experts recommended solution for the issue in the web application by providing web search query URL with corresponding error code or description.

This summary is provided to introduce the subject matter of determining the root cause of an issue in the web application these and other objects of the present invention will become readily apparent upon further review of the following detailed description and drawings.

The exemplary embodiments described herein detail for illustrative purposes and are subject to many variations in structure and design. The terminology used in the description of the invention herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used in the description of the invention and the appended claims the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will also be understood that the term and or as used herein refers to and encompasses any and all possible combinations of one or more of the associated listed items.

As used herein the term entity or device or managed device means Server or Network Infrastructure device and database means Network Topology Database. It will further be understood that the terms comprises and or comprising when used in this specification specify the presence of stated features steps operations elements and or devices but do not preclude the presence or addition of one or more other features steps operations elements devices and or groups thereof.

FIG. .is an exemplary diagram of a computer network in which system and method consistent with the principles of the invention may be implemented. Network may include the client connected to multiple servers and network infrastructure devices through Network . A client and two servers and two network infrastructure devices have been illustrated as connected to Network for simplicity. In practice there may be more or fewer servers and network infrastructure devices.

FIG. .is an exemplary diagram of Client showing Messages communicating with Managed Devices and in Network . Client includes client entities with Web Browser and Web Browser extension Plug In software and executes applications to monitor the Managed Devices. Managed Devices may include entities Network Infrastructure Devices and Servers . Managed Devices includes the Monitoring Agent .

The Network Management Protocol NMP is used for exchanging of messages between a Web Browser Plug in and Monitoring Agent . The Monitoring Agent may include SNMP agent or Remote Network Monitoring RMON Probe or Client Service Agent installed by the present invention. The Web Browser Plug in acts as Network Management System NMS that sends Messages to Monitoring Agent in various Managed Devices. The Monitoring Agent employs a small set of commands to exchange information. The Web Browser Plug in sends request messages to query against the Monitoring Agent and the Monitoring Agent responds by sending response messages with the values for the requested variables. The Monitoring Agent can also respond by sending trap messages and report occurrence of certain events to the Web Browser Plug In NMS .

Client may be defined as a device such as a personal computer a wireless telephone a personal digital assistant PDA a laptop or another type of computation or communication device a thread or process running on one of these devices and or an object executable by one of these devices.

Monitoring Agent may be defined as a software program readable by a machine tangibly embodying a program of instructions executable by the machine to collect the data from device and reports the data as needed to the Web Browser Plug In NMS . Monitoring Agent may include a Simple Network Management Protocol SNMP agent or Remote Network Monitoring RMON probe and or an executable software program to collect active and passive measurements about the device.

Network may include a local area network LAN a wide area network WAN a telephone network such as the Public Switched Telephone Network PSTN an Intranet the Internet or a combination of networks. Client servers and Network Infrastructure Devices may connect to Network via wired wireless and or optical connections.

Network Infrastructure Devices may include a network managed entity. A network managed entity may be defined as a device such as a Router a Switch a Gateway a Bridge a Proxy Server a Firewall a Network Address Translator a Protocol Converter a Wireless Network Interface Controller a Modem a bridge router a multiplexer an ISDN terminal adapter a line driver a digital media receiver a thread or process running on one of these devices and or an object executable by one of these devices.

Servers may include a server managed entity. A server managed entity may be defined as a device such as Web Server Proxy Server Domain Name Server Database Server Web Front End Server File Server Email Server E Commerce Server Real time Communication Server Content Management Server FTP Server Streaming Media Server Directory Server Print Server Mobile Information Server and Application Server. While servers are shown as separate entities it may be possible for one or more of servers to perform one or more of the functions of another one of more of servers . For example it may be possible that two or more of servers are implemented as a single server. It may also be possible for a single one of servers to be implemented as two or more separate and possibly distributed devices.

FIG. .is a diagram of a portion of an exemplary computer readable medium that may be used by a Client . In one implementation computer readable medium may correspond to Memory in FIG. . of a Client . The computer readable medium comprises of Operating System Web Browser Software Web Browser Plug In Service Management and Plug in software . Operating system may include operating system software such as the Microsoft Windows Apple MacOs UNIX or Linux Operating Systems. Web Browser software may include software associated with a web browser such as the Microsoft Internet Explorer Netscape Navigator Mozilla Firefox Google Chrome. or Apple Safari browser.

The present invention i.e. plug in software displays a graphical user interface object to be presented within a web browser window. The graphical user interface object may operate in conjunction with the web browser. In another implementation the graphical user interface object may be part of the web browser. In this latter implementation the web browser may perform the functions of the graphical user interface object. For example the graphical user interface object may interface between the web browser and network .

The Web Browser Plug In software of the present invention may be activated upon initiation of the Web Browser . Alternatively the Web Browser Plug In software of the present invention may be activated when instructed by a user. In either case the Web Browser Plug In software of the present invention may take the form of a graphical user interface object as described above. The Web Browser Plug In software of the present invention for presenting and implementing the Web application issue root cause identification functionalities described herein.

As shown in the FIG. . the Web Browser provides Services which the Plug In can use including a way for Plug In to register themselves with the Web Browser and a protocol for the exchange of data with Plug In Manager . Plug in depend on the Services provided by the Web Browser . Conversely the Web Browser operates independently of the plug in making it possible for end users to add and update plug in dynamically without needing to make changes to the Web Browser . Application programming interfaces APIs provide a standard interface allows creating plug in that interact with the web browser.

FIG. .is a diagram of a portion of an exemplary computer readable medium that may be used by Server and Network Infrastructure Device . In one implementation computer readable medium may correspond to Memory in FIG. . of a Server and Network Infrastructure Device . In one implementation computer readable medium may include an operating system Client Agent Interaction Service Module Monitoring Module and Data Collection Module .

More specifically operating system may include operating system software such as the Microsoft Windows Apple MacOs UNIX Network Operating Systems Cisco IOS APPLE IOS or Linux Operating Systems.

FIG. .is an exemplary diagram of a client server and network managed entities hereinafter called distributed client server entity which may correspond to client and or one or more Network Management Protocol NMP enabled devices such as Servers and Network Infrastructure Devices . The distributed client server entity may include a bus a processor a main memory a read only memory ROM a storage device an input device an output device and a communication interface . Bus may include a path that permits communication among the elements of the distributed client server entity.

Processor may include a processor microprocessor or processing logic that may interpret and execute instructions. Main memory may include a random access memory RAM or another type of dynamic storage device that may store information and instructions for execution by processor . ROM may include a ROM device or another type of static storage device that may store static information and instructions for use by processor . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits an operator to input information to the distributed client server entity such as a keyboard a mouse a pen voice recognition and or biometric mechanisms etc. Output device may include a mechanism that outputs information to the operator including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables the multi tier entity to communicate with other devices and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network such as network .

As will be described in detail below the distributed client server consistent with the principles of the invention may perform certain web application issue root cause identification related operations. The distributed client server entity may perform these operations in response to processor executing software instructions contained in a computer readable medium such as memory . A computer readable medium may be defined as a physical or logical memory device and or carrier wave.

The software instructions may be read into memory from another computer readable medium such as data storage device or from another device via communication interface . The software instructions contained in memory may cause processor to perform processes that will be described later. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes consistent with the principles of the invention. Thus implementations consistent with the principles of the invention are not limited to any specific combination of hardware circuitry and software.

FIG. .is an exemplary diagram illustrating concepts consistent with the principles of the invention. As shown in FIG. . a plug in icon may be associated with the web browser that is besides the address bar of the web browser. A user may activate web application issue root cause identification plug in software in FIG. . when clicking on the icon . The Web application issue root cause identification plug in software displays the User Interface in the bottom portion of a web browser window.

The User Interface panel provides the features of plug in user interface such as Capture button Stop button Clear button Analyze button Filter button Statistics button Tools button Display region . The Capture button provides user to start the principle operation of the present invention. The Stop button provides to stop the operation Clear button provides to delete the network topology diagram presented in the display region . The Analyze button provides detailed network trace information. The Filter button provides ability choose a specific device network trace or display the information available in Network Topology Database for the specific device. The Statistics Button displays network connections both incoming and outgoing routing tables and a number of network interface statistics. The Tools button provides ability to build the network topology diagram and it comprises of Upload Network Topology Diagram menu Add Device menu and Remove Device menu. The Upload Topology Diagram menu provides user to choose the network topology diagram from a file system for the given web application URL . Add Device menu to insert a device from UI Devices Toolkit to build a network topology diagram for the given web application URL . Remove Device menu to delete a device from the built network topology diagram.

FIG. .is an exemplary diagram illustrating the aspect of providing the ability to upload or construct network topology diagram of web application. In one aspect user may upload the network topology diagram of web application by selecting the upload network topology diagram from tools menu . The present invention displays file upload window that contains a text box control and a browse button that enable users to select a network topology diagram to upload. The present invention notifies the user that it uses the web browser logged on credentials to enable the Monitoring agents on the devices presented in the uploaded network topology diagram . Add Device provides an option to add the device into the network topology diagram or to build a new network topology diagram for the web application. User may choose the graphical representation of device from the UI Devices Toolkit . Also user may leverage the UI Devices Toolkit to add new device into the existing network topology diagram if required. The present invention provides an option to remove the device from network topology diagram by using Remove device .

FIGS. . .are diagrams that illustrate the graphical user interface for the example of operation according to an implementation consistent with the principles of the invention. FIG. .illustrates the detailed operation of the invention user clicks on the plug in icon to initiate the operation which displays the plug in interface in the bottom of web browser. As shown in FIG. . the invention shows the outcome to reach web application URL that there is no issue occurred while rendering the web document for the web application URL with time duration to reach each devices presented in the network topology of web application.

FIG. .illustrates an exemplary example of present invention. A user receives an exception as page can not be displayed in the web browser window for the web application URL . The present invention highlights the device by changing the color of the device in the response of Trap notification received from Directory server while performing the HTTP request for the given URL . User clicks on the Directory Server to know more about issue occurred in the Directory Server . The plug in shows detailed user friendly message for the issue occurred in the Directory Server along with suggestion using web search .

FIG. .illustrates another example for operation of present invention. The web browser exhibits the exception as Server Application Unavailable for the web application URL . The application pool of web site stop working due to that server object logs an entry in the event log of web application server . Due to this the monitoring agent of web application server sends the Trap notification to the plug in using Network command. The Core Engine initiates the depiction engine to highlight the web application server as changing the color of the web application server using the user interface module . The Core Engine of the present invention triggers the Networking Manager to retrieve the information related to the Trap from the web application server . The monitoring agent collects the information related to the Trap and sends it to the present invention as response. Once the information is received the Core Engine builds the user friendly error message with the user preferred search engine URL and appends with collected keywords from the received information and then stores it in the depiction back end . This user friendly error message pops up when user clicks on the highlighted device .

As another example shown in FIG. . the present invention highlights the DNS server as the root cause for exception displayed in the browser. As illustrated in the user friendly error message popup the Trap got generated in the DNS server during the web request. The plug in receive the information related to the Trap from the DNS server monitoring agent. The Core Engine checks if any existing entries for the event id and DNS Server error. There is no match available in the Root Cause Knowledge Base for the received error hence the Core Engine does not fill the words in the Cause section on the template which is provided by the Message Template Provider . However the Core Engine builds a user friendly error message by extracting keywords i.e. Event ID DNS Server from the received information and appending it with user preferred web search URL .

Similarly as shown in FIG. . another example of present invention is presented. Users of the web application are already connected to their web site URL and they click a link on the home page to visit another Web page on their site they receive the following error message There is an unexpected error occurred . It is hard to find out where exactly the issue is caused as there are no detailed exception details displayed in the web browser. Nevertheless the present invention provides more detail on the device causing the issue by highlighting the device in the diagram. During accessing the URL presented in the web browser address bar the Database Server service is stopped due to NetLogon service does not start on the service. The root cause for the issue occurred in the database is being identified because there is an entry available in the Root Cause Knowledge Base . Once the root cause information is retrieved from the Root Cause Knowledge Base the Core Engine fills the root cause information in the Cause section of user friendly error message template. After the keywords i.e. Error 1068 MSSQLSEREVR from taken from the received information of database server device the Core Engine appends it with user preferred web search URL and displays the user friendly error message for the exception displayed when user requested.

FIGS. . .are the flow charts illustrating the principles of present invention. In Act the principle operation is initiated by the user action using capture button. When capture button is clicked by user the present invention initiates a network trace to discover the devices for the given web application URL. In one embodiment the web browser plug in provides ability to user to upload the network topology diagram and another embodiment the web browser plug in provides ability to user to build the network topology diagram using UI Devices Toolkit.

In Act the present invention installs the Client Service Agent on each of the devices associated with the web application. If installation was not successful the present invention enables the Simple Network Management Protocol SNMP agent on the device to notify the plug in for device activity or system file changes as shown in Act . If installation is successful it configures the client agent service to monitor device state and notify plug in if any file or device states changes as shown in Act .

In Act the present invention extracts the device information like IP address device role and provides the IP addresses of the detected devices to the Networking Manager which stores the information to the Network Topology Database as show in Act . Based on the received information the network topology diagram is plotted as shown in Act .

In Act the present invention captures the network packets between devices relating to the given web application URL. In Act the present invention splits the packet information based on protocols such as TCP HTTP UDP related to the web request and stores them into the Network Topology Database as shown in Act .

In Act the present invention highlights the network path as the request moves between the devices according to the captured network and HTTP information. In Act when user clicks on the highlighted network path in between the devices it displays the captured network packet information in a user friendly message as shown in Act .

FIG. .illustrates the principle of operation in accordance to the present invention when TRAP issue has been identified in the fault device and notified to the plug in .

In Act when TRAP manager receives the notification from fault device it notifies the Networking Manager to notify the Core Engine to highlight the device in the web application network topology diagram.

In Act the Networking Manager sends a request to the faulted device to collect syslog message and any information available related to the error. The faulted device sends the response with information related to the error from the device. The information could be collected from the application log web server log syslog or device Information Base. This information is being detected by the Monitoring Agent for the event changes that happened during the web request. Event changes could be system activity change or file change presented in the device. In Act the received information is being optimized to construct the custom error message by extracting the error code from the received information.

In Act the core engine leverages the web browser plug in to retrieve the user preferred web browser search engine settings. The web browser provides the ability to access a search engine using Search Plug in without having to go to the engine s website first. A search plug in is a small text file that tells the browser what information to send to a search engine and how the results are to be retrieved. In addition it provides an ability to user to set their preferred search engine.

In general most of the web browsers search plug in stores the user defined settings in the XML file. Example for the Firefox web browser the present invention retrieves the user preferred search engine from Condition attribute of the MozParam XML node websearch base query URL is being retrieved from template attribute of URL XML node and value of q parameter.

In Act the extracted error code as mentioned in the Act will be checked with Root Cause Knowledge Base to determine if any existing entries available for the error code. If not the keywords extracted from the received information is appended with the search engine URL as shown in the Act .

In Act the user friendly error message template is being built using the keywords best bets from the received error message of faulted device and appending the keywords best bets with web search query URL. Keywords best bets may include the identification number of event for the related error occurred in the faulted device managed device type and error description.

In Act if user clicks on the highlighted device in the network topology diagram then the present invention displays the built user friendly message as shown in Act .

FIG. .. illustrates the principle of operation of Client Service Agent in accordance to the present invention.

In Act the Client Service Agent or network monitoring agent is being enabled and establishes the relationship between the device and plug in . In one embodiment the client agent is being configured to monitor the file system and device state changes. In another embodiment the network monitoring agent is configured to monitor the file system and device state changes.

As shown in Act when any event such as file or device state changes occurs during the web application request the TRAP is generated relating to the occurred event and it is being sent to the Plug in NMS as shown in Act .

In Act when Client Service Agent or network monitoring agent receives the request from NMS i.e. Plug in it collects the data related to the event occurred in the device.

In Act the Client Service Agent or network monitoring agent retrieves the information related to the occurred event from the changed file system or device log and then sends them to the plug in as shown in Act .

Functional Architecture for Extending the Web Browser Capabilities of Web Application Issue Root Cause Identification

The User Interface Layer comprises of User Interface and User Interface UI Devices Toolkit . The User Interface subsystem is the layer between the user and the Core Engine and provides features such as Capture button Stop button Clear button Analyze button Filter button Statistics button Tools button Display region in FIG. . .

The UI Devices Toolkit is closely coupled with User Interface and provides multiple stencils of servers and network infrastructure devices to user to construct the network topology diagram for the given web application URL. It represents both Server and Network Infrastructure Devices in FIG. . .

The Plug In Core Module comprises of Depiction Engine Depiction Back end Web Browser Plug in Service Interface HTTP Event Manager Networking Manager Network Topology Database Message Template Provider Exception Message Handler Root Cause Knowledge Base and Core Engine .

The Depiction Engine is responsible for drawing the graphical user interface and retrieves the information of adverse event detected from Depiction back end to the screen. The Depiction Engine renders content based on Depiction back end which provides a set of platform independent data structures including geometrical primitives color definitions font specifications image abstraction rendering context adverse event context exception context font metrics image regions and alpha blender.

Depiction back end is responsible for temporarily holding the information needed by Depiction Engine and it acts a temporary database that stores the information provided by the Core Engine. It closely coupled with Depiction engine and Core Engine where Depiction engine leverages the information to display in the user interface .

The Web Browser Plug in Service Interface refers to a point of interaction between Core Engine of present invention and web browser. This allows a Core Engine to function independently while using interfaces to communicate with web browsers. In some of embodiments it provides the mapping interface between Core Engine with web browser engine by registering the present invention into web browser plug in repository. In some of embodiments the Core Engine leverages the web browser plug in service interface to retrieve the user preferred search engine settings.

The HTTP Event Manager comprises the HTTP Event Gatherer and Event Schematizer . It is closely coupled with Networking Manager and Core Engine . Once the network trace is received from the Networking Manager the HTTP Event Manager triggers the Event Gatherer module to fetch the HTTP protocol information from the captured network trace. The fetched HTTP protocol related information is send to the Event Schematizer to parse and build a user readable friendly message to present in the Plug In User Interface Module . This provides a user friendly message of the captured network trace that is comprehendible by the users whom do not have knowledge about HTTP result code or network capture details.

The Networking Manager holds the network management system entities that monitors and controls the network managed devices. In one embodiment in response to the Core Engine request to detect the devices for the given web application URL Networking Manager leverages the ICMP Trace module of Tracapture Manager to initiate the ICMP trace to detect devices. The Networking Manager invokes Agent Handler to enable the Client Service Agent on the detected devices. There are four basic commands used by Networking Manager to monitor and control the managed devices read write trap and traversal operations. The read command examines the variables that are kept by the managed devices. The write command changes the values of the variables stored by the managed devices. A traversal operation looks to find out what variables a managed device supports and gathers information from the supported variable tables. The trap command is used by the managed devices to report the occurrence of certain events to Networking Manager .

The Networking Manager may set the values in the information base of Client Service Agent to monitor the log File System changes and device counter measure changes. The Client Service Agent may use the File System Watcher entity to listen for changes of the log files in a device. In one embodiment Networking Manager leverages the Packet Capture module of Tracapture Manager to initiate the Network Trace between devices.

The captured network packet information is being stored in the Temp table of Network Topology Database . The collected trace is simultaneously sent to HTTP Event manager to separate the HTTP related information. When TRAP message received by the TRAP manager the Networking Manager triggers the Core Engine to highlight the fault device in the network topology diagram that is presented in the display region . The Networking Manager sends the request to receive the log messages related to the Trap notification. Each activity is being stored in the Networking Topology Database .

The Network Topology Database is a collection of network trace and managed device data items organized as a set of formally described tables from which data can be accessed easily. It comprises of four major database tables such as Webs ManagedDevices Temp NetTrace and each database tables are organized using a model of vertical columns and horizontal rows the cell being the unit where a row and column intersect. Webs table that holds the web application information presented in the display region . The network topology information of given web application URL is stored in the table and identified by a unique key index value i.e. siteid . The device name or description IP address of managed device information are being extracted from the given network diagram and these managed device information are being stored in ManagedDevices table. ManagedDevices table has DeviceId as a primary index key and siteid as a foreign key. Temp Table holds the network trace information from one device to another device and this information is stored in the From To and Trace columns. When networking manager receives the network packet capture from one device to another device it stores the information in the Temp table. This stored information is sent to the HTTP Event Manager to isolate the HTTP related information. The detailed packet capture information is being stored in the NetTrace table.

The Message Template Provider holds the user friendly exception message templates. The Core Engine leverages the Message Template Provider while constructing the user friendly exception message for error message occurred in the web application.

The Exception Handler analyzes the received error message by extracting the best bet or keywords from the received error message. When an error message is received the Exception Handler extracts the keywords and checks against Root Cause Knowledge Base . If no matching entry is found the error message is stored with error id and keywords along with web search suggestion URL. If a matching entry is found Exception Handler retrieves the entry for the error id and keywords and appends with the web search suggestion URL.

The Root Cause Knowledge Base is a special kind of database for storing managed devices error log messages. Each log message is being stored with log or error id as unique index key. The Core Engine checks if any existing information is available in the Root Cause Knowledge Base for the received log error message. If there is no entry available in the Root Cause Knowledge Base for the received log error message then the received error or log message is stored in the Root Cause Knowledge Base along with web search suggestion URL for future purpose.

The Core Engine leverages the Web browser Plug in Service Interface to register with the web browser and exchange the data with web browser. It loads plug in user interface in FIG. . when user types the URL. It triggers UI Devices Toolkit when user wants to construct the network topology diagram for their web application URL. In one of the embodiment Core Engine triggers Networking Manager to validate the constructed network topology diagram by using ICMP trace for the given web application URL. In another embodiment the Core Engine initiates the Networking Manager to do a ICMP trace for the given web application URL. The detected devices information is being used to plot the network topology diagram in the display region . The detected device information is being stored in the Network Topology Database .

When a user initiates the operation by clicking on the Capture button the Core Engine triggers Networking Manager to initiate the network trace between each device presented in the network topology diagram. It invokes HTTP Event Manager to identify the devices in the network trace and highlights the network path in the network topology diagram for the identified devices. In one embodiment the Core Engine builds the user readable trace information between the devices and stores them in the Depiction back end . When user clicks on the highlighted network path in the network topology diagram it displays the user readable trace information. In another embodiment the Core Engine highlights the faulted device when Trap Notification is received from the managed device presented in the network topology diagram. In another embodiment the Core Engine triggers the Networking Manager to send the request to retrieve the detailed log information for the Trap Notification. In one embodiment the Core Engine retrieves the best bets keywords from the received detailed log information to append with web search suggestion URL. The Core Engine leverages the Web Browser Plug in Service Interface to determine the user preferred search engine settings from web browser to generate the web search query URL and builds the user friendly message with web search suggestion URL for the faulted device. In addition the Core Engine leverages Exception Handler to check if any log entries are available for the received error log message. Once the user friendly message is constructed with web search suggestion it stores them in the depiction back end and displays it in the user interface when user clicked on the highlighted device.

The Tracapture Manager sends a sequence of Internet Control Message Protocol ICMP echo request to detect a list of devices in the path to reach the given web application destination host. It captures the network packets at full network speed between each device presented in the network topology diagram of the web application. It comprises of two modules such as ICMP Trace and Packet Capturer .

The ICMP Trace module contains a client interface to Internet Control Message Protocol ICMP . It is being used by the Tracapture Manager to verify an end to end network path is operational and provides information on each of the intermediate devices to be found along the network path from the sender to the receiver. ICMP Trace module uses ICMP echo messages that are addressed to the target IP address.

As data streams flow across the network the packet capturer captures each packet and provides it to the Networking Manager to decode the packet s raw data and analyze its content according to the appropriate specifications provided by the Core Engine . The captured information is decoded from raw digital form into a human readable format that permits users of the present invention to easily review the exchanged information. It may use pcap application programming interface API for capturing network traffic in addition it may use libpcap or Winpcap library depending on the device operating system supports.

The Agent Handler provides the interface between the Networking Manager and the monitoring agents presented in the devices. The Agent Handler looks for the Client Agent Service Agent installed by the present invention in the detected device for the given web application network topology. If Agent Handler could not find the Client Service Agent then it may uses the SNMP or RMON Probe to communicate with managed devices . There are four basic commands used by Agent Handler to communicate with the managed devices read write trap and traversal operations. The read command examines the variables that are kept by the managed devices. The write command changes the values of the variables stored by the managed devices. A traversal operation looks to find out what variables a managed device supports and gathers information from the supported variable tables. The trap command is used by the managed devices to report the occurrence of certain events to the Agent Handler .

TRAP Handler receives and logs Traps from the managed devices. Trap Handler allows the instantaneous reporting of alert notifications to Networking Manager . Each trap is decoded and the data is presented to the Networking Manager .

LOG Handler sends a message request to retrieve Trap related information from the device. It may also request the monitoring agent in the devices to collect file system changes when the event occurred. File system changes may include application log web server log event or sys log changes. The received log information is sent to Networking Manager to extract the keywords best bets to construct the user friendly message.

The Client Service Agent comprises of Client Agent Interaction Service Monitoring Module and Data Collection Module . The Client Service Agent communicates with Agent Interaction Service of web browser plug in . The Client Agent Interaction Service is being used to establish the communication path between Client Service Agent and Agent Interaction Service .

The Monitoring Module monitors the device object changes such as the log File System changes and device counter measure changes. The Monitoring Module may use the File System Watcher entity to listen for changes of the log files in a device. When changes on the device objects are detected then it triggers the TRAP to the Agent Handler through Client Agent Interaction Service .

The Data Collection Module responds to the Networking Manager for the detailed information for the generated TRAP. The Data Collection Module then collects the changed objects from the device and filters the changed objects information for the time period of the event.

The following example illustrates the more features of present invention for the exemplary web application hosted in the intranet environment. are the examples representing the some embodiments of present invention operation. In some embodiments graphical user interface .includes the following elements or a subset or superset thereof Upload network topology diagram that is uploading the computer network diagram for intranet web application Add device that provides to include one or more device into the computer network diagram of intranet web application Remove device that provides to delete device from the network diagram. FIG. .illustrates how user builds the network topology diagram for the given web application URL . In some embodiments the present invention provides an ability to build a network topology diagram on the fly using Add device and UI Devices Toolkit FIG. . . As shown in FIG. . a network topology diagram of intranet web application given URL which is subjected to inspect includes the following devices device type role and their internet protocol addresses or a subset or superset thereof user user s desktop machine IP address of user desktop machine role network path network switch IP address of network switch Domain Name Server DNS IP address of DNS role Proxy Server IP address of Proxy Server role Directory Server IP Address of Directory Server role Web Server IP Address of Web Server role Database Server IP Address of Database Server role .

In some embodiments the present invention displays the Packet Capture information that includes the human readable friendly information that displays a detailed packet capture when user hovers on the highlighted network path as shown in the FIG. .. This information is being retrieved from the Trace table of Network Topology Database . As mentioned earlier the network packet information in between each devices are being stored in the network topology database . The network capture information includes where the request originated from protocol being used what contains in each frame similarly the HTTP capture information includes byte count time taken byte sent byte received method HTTP status result code type of the file and URL.

In some embodiments the present invention provides information about time taken to complete the network path between one devices to another device as shown in FIG. .

As illustrated in the FIG. . user is receiving the page cannot be displayed error message for the given URL . User would like to troubleshoot where or which device causes the issue so user web application support professional activates the plug in i.e. present invention and builds the network topology diagram as mentioned in the FIG. .and then initiates the capture button to troubleshoot the issue. While web application request goes through the network switch there is a trap generated from the network switch due to LAN failure. This Trap is notified to the web browser plug in and plug in requests for detailed information related to the trap from the network switch . The monitoring agent on the network switch collects the information related to trap and sends it to the web browser plug in where the received information is being constructed as user friendly error message along with web search suggestion .

FIG. .illustrates another example to show why user is receiving HTTP Error 401.2 Unauthorized for the given web application URL . During the web application authentication the Directory Server throws a failed authentication message on the syslog due to this and a Trap is generated and notified to the present invention. The present invention spontaneously highlights the Directory Server as response to the received Trap and collects detailed Trap related information from device using Network commands. The detailed message is being displayed as user friendly error message indicating his her user account got locked indicating the reason for the unauthorized exception. As illustrated in the Core Engine of the present invention found a match for the received error message id from the Root Cause Knowledge base . The Cause section in the user friendly message template is filled with user account may got locked .

FIG. .illustrates an exemplary graphical user interface to show the reason for the general error message displayed in the web page. In this particular example the present invention highlights Domain Name Server to show the root cause for the error message displayed. When user hover on the DNS server the present invention displays the user friendly message to show that there is a DNS write failed on the DNS server which caused them to receive the error message .

As exemplary graphical user interface illustrates in FIG. . the present invention identifies the root cause of an issue that displayed in the web browser window by highlighting the database server as there is a critical event occurred which stops web application to work. The web application suddenly stopped working and shows an unclear error message displayed in the web browser window that makes IT support professional or user to get confused and hard to debug. But the present invention shows the reason for the unclear error message displayed in the web browser window by highlighting database server and collects the information related to the Trap generated from the Database Server and sends to the plug in. The plug in displays the user friendly error message when user clicks on the highlighted database server .

The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or to limit the invention to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain the principles of the invention its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated.

For example while series of acts have been described with regard to FIG. . the order of the acts may be modified in other implementations consistent with the principles of the invention. Further non dependent acts may be performed in parallel.

It will be apparent to one of ordinary skill in the art that aspects of the invention as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement aspects consistent with the principles of the invention is not limiting of the invention. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that one of ordinary skill in the art would be able to design software and control hardware to implement the aspects based on the description herein.

