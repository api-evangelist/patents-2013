---

title: Enforcement of trick-play disablement in adaptive bit rate video content delivery
abstract: Disclosed is a comprising generating a top level manifest file for a media asset or stream that includes program event information, providing the top level manifest file and corresponding element manifest files to a real-time adaptive bitrate (“ABR”) packager, and receiving a request for a media-segment file from a client, wherein the ABR packager is configured to interpret the program event information, and wherein the ABR packager is configured to restrict trick-play operations if a program event is detected in a requested media-segment file and restriction criteria are met.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09537920&OS=09537920&RS=09537920
owner: Google Technology Holdings LLC
number: 09537920
owner_city: Mountain View
owner_country: US
publication_date: 20130515
---
The present application claims priority to U.S. Provisional Patent Applications 61 649 227 filed on May 18 2012 and 61 798 418 filed on Mar. 15 2013.

The present disclosure is related generally to video display and more particularly to enforcing disablement of trick plays in adaptive streaming.

The dissemination and playback of media programs has undergone substantial changes in the past decade. Previously media programs which may include audio video or both were disseminated either by analog broadcast conventional satellite or cable or by dissemination of films to movie theaters.

These traditional dissemination and playback means remain in use after the advent of digital technology. However digital technologies have had a profound effect on the dissemination and playback of media programs. For example digital technology permitted the use of digital video recorders DVRs . DVRs while similar in function to standard analog video cassette recorders provide a number of additional useful functions including live pause the ability to record one program while playing back another and the integration of the electronic program guides with DVR functionality so that the recording of media programs could be scheduled far in advance .

Digital technology also permitted the dissemination and playback of media programs via the Internet with improved signal processing. These methods of dissemination and playback have become competitive with traditional means. Dissemination of media programs via the Internet may occur either by simple downloading progressive downloading or streaming.

For progressive download a media file having the media program is downloaded via the Internet using dial up DSL ADSL cable T1 or other high speed connection. Such downloading is typically performed by a web server via the Internet.

Simple downloading downloads the bytes of the media file in any convenient order while progressive download downloads bytes at the beginning of a file and continues downloading the file sequentially and consecutively until the last byte. At any particular time during progressive downloading portions of the file may not be immediately available for playback. In some situations the entire file must be downloaded first before a media player can start playback. In other progressive download situations media players are able to start playback once enough of the beginning of the file has downloaded however the media player must download enough information to support some form of playback before playback can occur. Playback of progressively downloaded media files is often delayed by slow Internet connections and is also often choppy or presents a high likelihood of stopping after only a few seconds. Once a progressively downloaded media program has been completely downloaded it may be stored on the end user computer for later use.

Streaming delivers media content continuously to a media player and media playback occurs simultaneously. The end user is capable of playing the media immediately upon delivery by the content provider. Traditional streaming techniques originate from a single provider delivering a stream of data to a set of end users. High bandwidth and central processing unit CPU power are required to deliver a single stream to a large audience and the required bandwidth of the provider increases as the number of end users increases.

Unlike progressive downloading streaming media can be delivered on demand or live. Wherein progressive download requires downloading the entire file or downloading enough of the entire file to start playback at the beginning streaming enables immediate playback at any point within the file. End users may skip through the media file to start playback or change playback to any point in the media file. Hence the end user does not need to wait for the file to progressively download. Typically streaming media is delivered from a few dedicated servers having high bandwidth capabilities.

Typically progressively downloaded media are transmitted to the user computer at a rate that is faster than playback. The media program player buffers these data and may indicate how much of the media program has been buffered by providing an indicator usually as a part of a progress bar. A control is often provided that allows the user to go to any point in the program that has already been buffered by selecting the control and moving it to a different location along the progress bar. This allows the user to randomly access any buffered portion of the media program.

Adaptive Bit Rate ABR streaming is a technology that combines aspects of streaming and progressive download to provide streaming of media content by breaking the content into a sequence of small HTTP based file segments each segment containing a short interval of playback time of content whose total playback time may be many hours in duration such as a movie or the live broadcast of a sports event. An ABR player provides streaming playback by requesting an appropriate series of segments as determined by a manifest or playlist file and user requests such as play pause rewind etc. For example the user may use HTTP Get or Byterange requests to obtain such media segments.

Turning to the drawings wherein like reference numerals refer to like elements techniques of the present disclosure are illustrated as being implemented in a suitable environment. The following description is based on embodiments of the claims and should not be taken as limiting the claims with regard to alternative embodiments that are not explicitly described herein.

In a first aspect of the present disclosure a method comprises generating a top level manifest file for a media asset or stream that includes program event information providing the top level manifest file and corresponding element manifest files to a real time adaptive bitrate packager and receiving a request for a media segment file from a client wherein the ABR packager is configured to interpret the program event information and wherein the ABR packager is configured to restrict trick play operations if a program event is detected in a requested media segment file and restriction criteria are met.

In a second aspect a system is disclosed comprising a video coder configured to receive a program stream including program event information and configured to output multiple adaptive bitrate streams memory configured to record the multiple ABR streams and an ABR packager configured to request at least one of the multiple ABR streams from memory and to deliver the at least one of the multiple ABR streams to a client.

With reference to an exemplary playback device includes a general purpose computing device including a processing unit CPU or processor and a system bus that couples various system components including the system memory such as read only memory ROM and random access memory RAM to the processor . The system can include a cache of high speed memory connected directly with in close proximity to or integrated as part of the processor . The system may be configured to copy data from the memory or a storage device to the cache for quick access by the processor . In this way the cache provides a performance boost that avoids processor delays while waiting for data. These and other modules can control or be configured to control the processor to perform various actions. Other system memory may be available for use as well. The memory can include multiple different types of memory with different performance characteristics. It can be appreciated that the disclosure may operate on a computing device with more than one processor or on a group or cluster of computing devices networked together to provide greater processing capability. The processor can include any general purpose processor and a hardware module or software module such as module module and module stored in storage device configured to control the processor as well as a special purpose processor where software instructions are incorporated into the actual processor design. The processor may essentially be a completely self contained computing system containing multiple cores or processors a bus memory controller cache etc. A multi core processor may be symmetric or asymmetric.

The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. A basic input output system BIOS stored in ROM or the like may provide the basic routine that helps to transfer information between elements within the computing device such as during start up. The computing device further includes storage devices such as a hard disk drive a magnetic disk drive an optical disk drive tape drive or the like. Other hardware or software modules are contemplated. The storage device is connected to the system bus by a drive interface. The drives and the associated computer readable storage media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computing device . In one aspect a hardware module that performs a particular function includes the software component stored in a non transitory computer readable medium in connection with the necessary hardware components such as the processor bus output device and so forth to carry out the function. The basic components are known to those of skill in the art and appropriate variations are contemplated depending on the type of device such as whether the device is a small handheld computing device a desktop computer or a computer server.

Although some implementations employ a hard disk it should be appreciated by those skilled in the art that other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards digital versatile disks cartridges random access memories read only memory a cable or wireless signal containing a bit stream and the like may also be used in the exemplary operating environment. Non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

To enable user interaction with the computing device an input device represents any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems enable a user to provide multiple types of input to communicate with the computing device . The communications interface generally governs and manages the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

For clarity of explanation the illustrative system embodiment is presented as including individual functional blocks including functional blocks labeled as a processor or processor . The functions these blocks represent may be provided through the use of either shared or dedicated hardware including but not limited to hardware capable of executing software and hardware such as the processor that is purpose built to operate as equivalent to software executing on a general purpose processor. For example the functions of one or more processors presented in may be provided by a single shared processor or multiple processors. Illustrative embodiments may include microprocessor or digital signal processor DSP hardware read only memory for storing software performing the operations discussed below and random access memory for storing results. Very large scale integration VLSI hardware embodiments as well as custom VLSI circuitry in combination with a general purpose DSP circuit may also be provided.

The logical operations of the various embodiments may be implemented as 1 a sequence of computer implemented steps operations or procedures generally instructions running on a programmable circuit within a general use computer 2 a sequence of computer implemented steps operations or procedures running on a specific use programmable circuit or 3 interconnected machine modules or program engines within the programmable circuits. The system shown in can practice all or part of the disclosed methods can be a part of the disclosed systems and can operate according to instructions in the disclosed computer readable storage media. Such logical operations can be implemented as modules configured to control the processor to perform particular functions according to the programming of the module. For example illustrates three modules Mod Mod and Mod which are modules configured to control the processor . These modules may be stored on the storage device and loaded into RAM or memory at runtime or may be stored as would be known in the art in other computer readable memory locations.

Content delivery describes the delivery of media content such as audio or video or computer software and games over a delivery medium such as broadcasting or the Internet. Content delivery generally has two parts delivery of finished content for digital distribution with its accompanying metadata and delivery of the end product to the end user.

As used herein streaming media are media received by and presented to an end user while being delivered by a streaming provider using Adaptive Bit Rate streaming methods. The name refers to the delivery method of the medium rather than to the medium itself. The distinction is usually applied to media that are distributed over telecommunications networks e.g. on line as most other delivery systems are either inherently streaming e.g. radio television or inherently non streaming e.g. books video cassettes audio CDs . Hereinafter on line media and on line streaming using Adaptive Bit Rate methods are referred to as media and streaming. 

Adaptive Bit Rate streaming is a technology that works by breaking the overall media stream into a sequence of small HTTP based file downloads each download loading one short segment of an overall potentially unbounded transport stream. As the stream is played the client e.g. a media player may select from a number of different alternate streams containing the same material encoded at a variety of data rates allowing the streaming session to adapt to the available data rate. At the start of the streaming session the player receives a manifest containing the metadata for the various sub streams which are available. Since its requests use only standard HTTP transactions Adaptive Bit Rate streaming is capable of traversing a firewall or proxy server that lets through standard HTTP traffic unlike UDP based protocols such as RTP. This also allows a content delivery network to readily be implemented for any given stream. ABR streaming methods have been implemented in proprietary formats including HTTP Live Streaming HLS by Apple Inc. and HTTP Smooth Streaming by Microsoft Inc. ABR streaming has been standardized as ISO IEC 23009 1 Information Technology Dynamic Adaptive Streaming over HTTP DASH Part 1 Media presentation description and segment formats.

An increasing number of video playback devices such as the Apple iPad prefer video content to be delivered via ABR streaming rather than streamed continuously. The iPad using Apple s HLS format receives the manifest as an m3u8 file that contains links and media uniform resource identifiers URIs to each of the segments or chunks of video content and processes the manifest file to retrieve and play back each media segment in turn.

Having disclosed some components of a computing system the disclosure now turns to which illustrates an example media streaming system embodiment . The communications between the entities depicted in can occur via one or more wired or wireless networks. Further the devices can communicate directly via the World Wide Web or via an application programming interface. A playback device such as a tablet device smartphone desktop or portable computer set top box Internet enabled television media center PC or any other suitable device first makes a request to a media server for playback of media content. Typically the media server resides in a network such as the Internet or a third party content distribution network such as Akami or Limelight .

In HLS the media server receives the request and generates or fetches a manifest file to send to the playback device in response to the request. Example formats for the manifest file include the m3u and m3u8 formats. An m3u8 file is a specific variation of m3u encoded using UTF 8 Unicode characters. The m3u file format was initially used in the WINAMP Media Player for only audio files but has since become a de facto playlist standard on many media devices for local and streaming media including music and other media types. Many media devices employ variations of the m3u file format any of which can be used according to the present disclosure. A manifest file can include links to media files as relative or absolute paths to a location on a local file system or as a network address such as a URI path. The m3u8 format is used herein as a non limiting example to illustrate the principles of manifest files including non standard variants.

The manifest file includes a list of Uniform Resource Locators URLs pointing to different representations of the requested segmented media content. Before or at the time of the request the media server generates or identifies the media segments of the requested media content as streaming media content . The media segments of the streaming media content are generated either by the media server the content producer or some other entity by splitting the original media content . Upon receiving the manifest file the playback device can fetch a first media segment for playback from the streaming media content then during playback of that media segment fetch a next media segment for playback after the first media segment and so on until the end of the media content.

Referring to a system is shown that includes client components and server components in communication with each other and the message flows for typical adaptive streaming. Flows related to security between the client components and server components have been omitted for clarity.

Client components may include an application graphic user interface App GUI and ABR player . Server components may include a content publishing server which may be configured to store or produce multi bitrate media steams and manifest files.

In a first step a user navigates through movie listings and selects an audiovisual media asset for viewing. In some embodiments the audiovisual media asset is linked to a URL pointing to a high level playlist.

In a next step the ABR player requests a top or high level manifest file for the audiovisual media asset that includes information about the ABR profiles and links to the manifests corresponding to each media bandwidth.

In a next step the ABR player looks at the high level manifest and either starts by requesting the lowest bandwidth manifest file or optionally may do some bandwidth availability estimation and select the corresponding bandwidth manifest file.

In a next step ABR player requests a 2nd level manifest for the corresponding bandwidth. In a next step ABR player determines the media segment file in the 2nd level manifest.

In a next step ABR player requests media segment files in succession. In a next step ABR player continuously monitors the media buffer fullness to determine if it is necessary to request lower or higher bandwidth media segment representations. For example if the bandwidth conditions change the player may be configured to select the corresponding bandwidth manifest file and select media segments in succession.

In a next step when the end of the manifest file is reached the ABR player signals the App GUI that playback of the audiovisual media asset is complete. This signaling that the stream playback is complete is shown as step .

In an embodiment a screen display on a video monitor or similar device comprises a first image position comprising one or more still images A B a second image position comprising one still image and a third image position comprising one or more other still images A B. Image positions and display still images that were generated from the audiovisual media. The still images are displayed in sequential order as they appear in the audiovisual media with the first or earliest images in position and last or later images in position . The screen display also may comprise a movement icon and a progress bar .

In an embodiment a streaming media processor e.g. processor which is typically part of playback device displays screen display in response to user input from an input device e.g. playback device requesting a navigation or seek function. For example assume that a user is viewing a movie using the playback device and a streaming video protocol and then presses a fast forward button on playback device or selects and drags the slider of a media player application. In response to this action the streaming media processor changes the display to show screen display . The streaming media processor no longer displays the streaming media but displays a set of still images that have been sampled from the movie or program in the form represented in screen display . In an embodiment a full screen full motion display of the audiovisual media is changed to screen display which shows five of the still images in successive positions . Further the images in display move successively from right to left as fast forward control proceeds. In one embodiment the streaming video is frozen and the still image or images are overlaid on top of the frozen video which may be darkened or dimmed to emphasize the overlaid stills.

In one embodiment media processor displays screen display in response to the user selecting and dragging the slider of a media player application. In response to this action the media player application replaces or overlays the display which generates and sends a forward or rewind command to processor depending on the direction the slider is moved. In response to the forward or rewind command the media player application replaces or overlays the display of the streaming media with a set of still images representing the content of the program at a time point close to that represented by the position of the slider. Further images in display may move successively from right to left or left to right as the user continues to drag the slider forward or backward. When the user releases the slider or pauses dragging the slider for a period of time the media processor may begin to re buffer the content at a time point close to that represented by the position of the slider. When a sufficient portion of the media at the new time point is buffered the media processor replaces the displayed still images with playback of the buffered content. The thumbnail image displayed based on the last position of the slider may have a time offset corresponding to the start of a media segment file that can be retrieved by the ABR player from the content server to begin playback at the desired location.

While illustrates a screen display comprising three images positions and the screen display may comprise more than three image positions or less than three image positions. For example screen display may comprise a single image position comprising one of the still images. Continuing the example as a forward or rewind command is received by media processor the displayed still image is replaced with a sequentially adjacent still image from still images e.g. the next nearest still image to the time point of the replaced still image in the time direction of the navigation or seek operation .

Referring now to during a fast forward operation image A disappears and appears to have moved off the screen to the left. Image B replaces image A and concurrently the image in position moves leftward to position to replace image B. Image A moves leftward into the second position . Image B moves leftward to replace image A. A new image from among the previously downloaded still images replaces the image B. As a result the user appears to be moving through the program at fast forward speed in the direction indicated by the arrow at the bottom of . The process however does not involve displaying the audiovisual media using a streaming media protocol but rather involves successively displaying the separately received still images in successively different positions on the screen and concurrently moving the images to their new positions to provide an illusion of rapidly moving through the streaming data of the audiovisual media.

In an embodiment repeated selection of a fast forward button or rewind button on playback device causes the system to toggle through successive still images and thus the user can rapidly advance at periodic intervals through the program. Alternatively the same function may be implemented in response to a user pressing and holding a fast forward or rewind button.

In another embodiment dragging the slider of a media player application causes the system to toggle through successive still images. The rate at which the user drags the slider across the screen can be used by the system to determine the rate of display of successive still images.

Movement icon indicates a speed of fast forward or rewind operation among multiple available speeds. In an embodiment repeated selection of a fast forward button or rewind button on playback device causes the system to toggle through successively higher movement speeds for the current trick play mode fast forward or rewind until the highest movement speed is reached. Selecting the same button again then causes a return to the lowest available movement speed for that trick play mode. As a movement speed changes the movement icon changes to illustrate the then current speed.

Images move among different positions in screen display at a greater or lesser speed depending on the selected movement of the progress bar. In an embodiment a speed change may be accomplished by selectively skipping certain of the still images and not displaying them so that the program appears to be advancing more rapidly. Alternatively a speed change may be accomplished by causing certain of the still frames in the first image position or the third image position never to be displayed in the second image position but to jump directly to the opposite side of the screen into either the first image position or third image position as appropriate. For example in the arrangement of to implement a faster speed still image A might move directly to the position of still image B or still image A and might never appear in the second position . Alternatively a speed change may be accomplished by changing the amount of time during which each of the still images is displayed on the screen that is the presentation time of the images. A combination of two or more of these techniques also may be used.

The rate of display of the still images may be used to give the appearance of faster or slower progression through the program material. For example if still images have been collected at 10 second program intervals then displaying one still per second gives the appearance of progressing through the program material at 10 times 10 the normal viewing speed displaying every second still image at two thirds of a second per still gives the appearance of 30 speed displaying every fourth still image at half second intervals gives the appearance of 80 speed and so on. Thus the rate of display of the still images may be used to hint at higher speeds of traversing the program material but does not stress the media processor in the way that displaying all the frames of the program material at the equivalent rate of display would stress the processor.

Progress bar may illustrate a relative amount of the audiovisual medium that has been played and may also include one or more markers such as vertical bars to indicate relative positions within program of the still images that are shown in display . One or more of the still images of display may be indicated in the progress bar . For example the progress bar may comprise a marker only for the still image in the second image position .

In some embodiments the progress bar is included within a slider component of a media player application. In such embodiments the slider may be used to invoke trick play operations by selecting and dragging the slider forward or backward using a cursor control device such as a mouse.

In an embodiment chapter points within audiovisual media are represented using markers on progress bar . In an embodiment as the user drags the slider of a media player application the progress bar snaps to the nearest chapter point in the direction the slider is being moved. The chapter points may be represented by still images such as and . These chapter point images are usually provided in predetermined intervals such as 10 second program intervals as described above. The progress bar releases from the chapter point only after the user has moved the slider sufficiently far away from the marker representing the chapter point. A distinct audio signal may accompany the action of snapping progress bar to a chapter point.

In an embodiment each still image that is displayed in the second image position is displayed in a size larger than the sizes of images in first and second image positions . This approach gives the second image position more prominence and gives the user a focal point while still providing the user with image references in the first and second positions to indicate what came before and what comes next.

As described above the user may move through an audiovisual medium by skipping over chapter points using a trick play operation. However one of the primary goals of any video delivery system is generating revenue from advertising. This is an ongoing challenge between content providers who want to ensure ad delivery and viewers who want to avoid ad delivery e.g. by using trick play .

A technique that may be used in live streaming and video on demand applications is trick play disablement. For example when a playlist or top level manifest file transitions to program event content e.g. ad content a flag may be transmitted to a set top box STB to disable trick play operations such as fast forward or jump. This may prevent the end user from avoiding the presentation of the ad. However this approach relies on instructions in the STB to enforce the trick mode disablement. Because the STB is a closed device controlled by a system provider content providers may be assured that trick play disablement will be enforced. There is no such assurance for programs running on mobile devices in general such as tablets or smartphones. In fact programs running on these devices may be purposely designed to enable end users to avoid ads.

Referring to an example system includes an Encoder configured to distribute compressed video content from a Content Program Provider over any number of possible distribution networks e.g. satellite fiber the Internet etc. to a Service Provider with the goal of delivering this content to subscriber client devices as an ABR streaming service. In the content may be re encoded by a Transcoder into a format acceptable for ABR streaming and recorded in a Network Digital Video Recorder NDVR appliance for on demand delivery. An ABR Packager is responsible for communicating with each client and preparing packaging individual ABR streams in real time as requested by each client. The ABR Packager may retrieve client specified stream segments from the NDVR and translate them into the appropriate ABR format on a per client or session basis. The ABR Packager may also communicate with an Ad Decision System ADS to determine which if any local advertisements or alternate content to substitute during an ad break e.g. ad opportunity . Associated trick play restrictions may also be conveyed via this interface.

ABR Packager communicates with and delivers content to each client via Content Delivery Network . In some embodiments each client is an ABR player. For example a particular client may be instructed to obtain specific content e.g. an On Demand movie or recorded broadcast program from the ABR Packager . The ABR Packager then communicates with the NDVR appliance to obtain the top level and second level manifests for that content. These manifests may include details concerning the placement of advertisements or ad opportunities e.g. avails within that content. The ABR Packager may then communicate with the ADS to determine the playback restrictions if any that must be applied for that specific content and client. If no ADS is present or available the ABR Packager may be configured to permit or prevent trick play operations that allow the client to skip the advertisements included in the content. The ABR Packager subsequently retrieves file segments from the NDVR appliance as requested by the client and delivers them to the client with restriction on the timing of their delivery dependent upon configuration of the ABR Packager and rules established by the ADS for that content and client and for that specific time or session.

The encoded content may include program events notably advertisement events or placement opportunities for ad insertion signaled by the Content Program Provider using a protocol such as SCTE 35 e.g. as metadata . These metadata are passed by Transcoder to the NDVR . When this content is subsequently retrieved from or streamed by NDVR to ABR Packager the specific timeframe for each ad insertion event or placement opportunity may be included in messaging to the ABR Packager . This information may once again be conveyed in band using SCTE 35 signaling or the NDVR may generate a special manifest file denoting the specific content segments containing advertisements or opportunities. This manifest could be a standard HLS m3u8 playlist or DASH manifest for example including special tags not intended for end user client device consumption.

Using this ad information ABR Packager knows which particular ABR segments it delivers correspond to advertisement events and can take action to prevent or allow client fast forwarding or skipping of said segments. This trick play enforcement policy may be static or dynamic e.g. as governed by the ADS depending on any number of conditions e.g. the time a program was originally aired the number of times a particular client has viewed the program the validity of the advertisement e.g. an ad aired during winter may not be applicable for summer client preference e.g. a premium subscriber versus a basic subscriber and so on.

An example of a trick play enforcement process by the ABR Packager is illustrated in . As shown a client initiates a session at block with the ABR Packager to retrieve specific program segments. As long as the client requests non ad segments that do not span an ad or placement opportunity as indicated by arrow the system remains in the Normal Segment Delivery state . Otherwise once an ad segment is requested as indicated by arrow the system transitions to an Ad Segment Delivery state and a trick play restriction timer is set corresponding to the signaled duration of the ad or consecutive ads . In this state client requests for content segments after the current ad break are denied by the ABR Packager . In another embodiment the ABR Packager may instead reply with the next un retrieved ad segment thereby forcing the client device to download decode and play the ad. Once the timer expires as indicated by arrow the system reverts to the Normal Segment Delivery state in which unfettered trick play operation is supported.

In a client requests a regular segment segment from ABR Packager . ABR Packager retrieves segment from recorded program and provides it to client .

In client similarly requests a regular segment segment from ABR Packager . ABR Packager retrieves segment from recorded program and provides it to client .

FIGS. C and C are alternate embodiments of how a trick play enforcement system may operate when a client requests a segment that will skip ad segments. In FIG. C client requests a next segment that is past an ad segment segment N 6 as indicated by arrow . In response ABR Packager rejects the client s request until an Ad Timer expires as indicated by . In FIG. C when the client requests a next segment that is past an ad segment segment N 6 the ABR Packager forces the delivery of the next sequential segment segment as indicated by arrow instead of the requested segment.

In view of the many possible embodiments to which the principles of the present discussion may be applied it should be recognized that the embodiments described herein with respect to the drawing figures are meant to be illustrative only and should not be taken as limiting the scope of the claims. Therefore the techniques as described herein contemplate all such embodiments as may come within the scope of the following claims and equivalents thereof.

