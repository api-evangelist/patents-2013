---

title: Message validation in a service-oriented architecture
abstract: Message validation in a service-oriented architecture defines a message structure using XML data types. Context-independent validity constraints are specified using an XML schema. Context-specific validity constrains are specified in an intermediary data structure for a specific service operation. A service interface including the XML schema and the intermediary data structure is published.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959066&OS=08959066&RS=08959066
owner: International Business Machines Corporation
number: 08959066
owner_city: Armonk
owner_country: US
publication_date: 20131018
---
The present application is a divisional of U.S. patent application Ser. No. 13 150 833 filed on Jun. 1 2011 and entitled Message Validation in a Service Oriented Architecture which is incorporated herein by reference.

This invention relates in general to the field of message validation in a service oriented architecture SOA and in particular the invention relates to enabling context specific validation.

State of the art service interfaces are defined with the Web Service Definition Language WSDL that uses Extensible Markup Language XML schemas for example the XML Schema published as a World Wide Web Consortium W3C referred to as XML Schema Definition XSD to specify input and output messages. Heterogeneous parties can work together in an SOA ecosystem only if they share a common vocabulary hence the wide adoption of standard object models.

Standard data structures reused in multiple contexts must contain a generic superset of the data required by each individual service. As a result service interfaces based on these generic objects are not well specified particularly from the point of view of message validation. Consider the case of two service interfaces defined using the same Customer type. One service interface requires the DateOfBirth field of Customer the other does not. It is then unclear whether or not DateOfBirth should be a mandatory attribute of Customer. If it is not a mandatory field the first interface is not well specified. If it is a mandatory field the second interface will contain unnecessary constraints.

The opposite design approach uses messages decoupled from object models. Messages become containers of a flat list of attributes lists that include only the data required by the service. The interface is strictly specified but it has little semantic value because it is not expressed in terms of the reference object model. Moreover when a composite service is built by aggregating multiple atomic services a set of data transformations is required to create different data types for different services. This has a significant impact on development costs and runtime performance.

According to one embodiment of the present invention a method validates messages in a service oriented architecture. A message structure is defined using XML data types. Context independent validity constraints are specified using an XML schema. Context specific validity constraints are specified for a specific service operation in an intermediary data structure. A service interface including the XML schema and the intermediary data structure is published.

According to one embodiment of the present invention a method validates messages in a service oriented architecture. A message is received according to an XML data type. The message is validated using a processor according to context independent validity constraints of an XML schema with reference to XML schema definitions. The message is validated using the processor according to context specific validity constraints of an intermediary data structure for a specific service operation with reference to intermediary data structure definitions.

According to one embodiment of the present invention a computer program product validates messages in a service oriented architecture. The computer program product comprises a computer readable storage medium having computer readable program code embodied therewith. The computer readable program code is configured to define a message structure using XML data types to specify context independent validity constraints using an XML schema to specify context specific validity constraints for a specific service operation in an intermediary data structure and to publish a service interface including the XML schema and the intermediary data structure.

According to one embodiment of the present invention a system validates messages in a service oriented architecture. The system comprises a processor and memory connected to the processor wherein the memory is encoded with instructions. The instructions when executed comprise instructions for receiving a message for a service implementation instructions for validating with a first validator according to context independent validity constraints of an XML schema with reference to XML schema definitions in a file system and instructions for validating the message with a second validator according to context specific validity constraints of an intermediary data structure for a specific service operation with reference to intermediary data structure definitions in a file system.

For simplicity and clarity of illustration elements shown in the figures have not necessarily been drawn to scale. For example the dimensions of some of the elements may be exaggerated relative to other elements for clarity. Further where considered appropriate reference numbers may be repeated among the figures to indicate corresponding or analogous features.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

A method and system are described for specifying and enforcing message validation in a service oriented architecture SOA . The described method and system enable context specific validation of generic context independent objects.

An intermediary data structure referred to as a view is used between service interfaces and data types. Service interfaces are defined in terms of standard data types while context specific constraints are captured by views. A view is an intermediate data structure that defines the elements of a data type that are mandatory in the context of a service. In one embodiment the intermediate data structure is defined using a query language although other computer languages may be used. Defining the data structure using a query language enables efficient navigation of the data structure.

A service runtime environment validates service requests and service responses according to the constraints defined by the data types and views. The described system enables the definition of strict context specific validation rules for standard generic object models. Calls to multiple service interfaces defined according to the described system can be orchestrated without the need of multiple data transformations this reduces development cost and improves runtime performance.

Referring to a schematic diagram shows a representation of a first service interface and a second service interface which are defined using a common data type .

Referring to a schematic diagram shows a representation of a first service interface and a second service interface each of which are defined using a common data type . In accordance with the described method and system intermediary data structures are defined between the service interfaces and the common data type .

A first intermediary data structure referred to as View is provided with context specific constraints between the first service interface and the context independent common data type . A second intermediary data structure referred to as View is provided with context specific constraints between the second service interface and the context independent common data type . The described method and system can be applied to any interface exchanging XML.

In one embodiment a service oriented architecture SOA is implemented by service providers and service consumers which define and use services. WSDL is used in conjunction with Simple Object Access Protocol SOAP and an XML schema to provide web services over the Internet. A client program connecting to a web service can read the WSDL to determine what operations are available on the server. The client can then use SOAP to actually call one of the operations listed in the WSDL.

A service in WSDL is a set of system functions that have been exposed to web based protocols. An interface defines a web service the operations that can be performed and the messages that are used to perform the operation. Types are provided in WSDL to describe the data. XML schema is used inline or referenced for this purpose.

In another embodiment a Representational State Transfer REST architecture for distributed hypermedia systems may be used to define a SOA. A RESTful web service also called a RESTful web application programming interface API is a simple web service implemented using Hypertext Transfer Protocol HTTP and the principles of REST.

In both cases an XML schema is used as a description of a type of XML document typically expressed in terms of constraints on the structure and content of documents of that type above and beyond the basic syntactical constraints imposed by XML itself. These constraints include data types that govern the content of elements and attributes.

There are languages developed specifically to express XML schemas. The Document Type Definition DTD language which is native to the XML specification is a schema language with relatively limited capability but that also has other uses in XML aside from the expression of schemas. Two more expressive XML schema languages in widespread use are XSD and RELAX NG REgular LAnguage for XML Next Generation .

The process of checking to see if an XML document conforms to a schema is called validation which is separate from XML s core concept of syntactic well formedness. All XML documents must be well formed but it is not required that a document be valid unless the XML parser is validating in which case the document is also checked for conformance with its associated schema. DTD validating parsers XML Schema W3C XSD parsers and RELAX NG parsers are known.

Documents are only considered valid if they satisfy the requirements of the schema with which they have been associated. These requirements typically include such constraints as 

Validation of an instance document against a schema can be regarded as a conceptually separate operation from XML parsing. In practice however many schema validators are integrated within an XML parser.

An XML schema language for example XSD or DTD can be used to express a set of rules to which an XML document must conform in order to be considered valid according to that schema. An XML schema allows the content of an element or attribute to be validated against a data type.

An example embodiment is described with reference to . The service interfaces are defined with Web Service Definition Language WSDL that uses XML schemas XSD to specify input and output messages. The XML schemas specify data types XSD types .

The intermediary data structures use a query language for example an XML query language such as XML Path Language XPath to define elements of the common data type that are mandatory in the context of a service.

Referring to a block diagram shows an embodiment of the described system for message validation in a service runtime environment. A messaging system for example an enterprise messaging system has an abstraction layer providing a platform implementing a service for example an enterprise service bus . The platform provides a service implementation . The service implementation is modified to support the described intermediary data structure validation.

The platform includes a data type validator and an intermediary data structure validator . The data type validator includes a definition reader and a parser . The data type validator uses its definition reader to reference a file system including context independent data type definitions . The parser of the data type validator parses a message using a mapping framework.

The intermediary data structure validator includes a definition reader and a parser . The intermediary data structure validator uses its definition reader to reference a file system including context specific intermediary definitions . The definition reader of the intermediary data structure validator also references the context independent data type definitions in the file system . The parser of the intermediary data structure validator parses a message using a mapping framework.

A message in the form of a service request or a service response according to a data type is received at the platform and validated by the data type validator which uses the context independent data type definitions and by the intermediary validator which uses the context specific intermediary definitions and the context independent data type definitions .

The validators can be implemented by a Java Java is a registered trademark of Oracle and or its affiliates class reading the definitions from the file system and parsing the request message using a common XML to Java mapping framework for example Service Data Objects SDO .

In one embodiment the data type validator is an XML schema validator and the intermediary data structure validator is an XML view validator. The definitions are corresponding XML schema definitions and XML view definitions. A message is a data type in the form of an XML schema XSD type.

Referring to an exemplary system for implementing aspects of the invention includes a data processing system suitable for storing and or executing program code including at least one processor coupled directly or indirectly to memory elements through a bus system . The memory elements can include local memory employed during actual execution of the program code bulk storage and cache memories which provide temporary storage of at least some program code in order to reduce the number of times code must be retrieved from bulk storage during execution.

The memory elements may include system memory in the form of read only memory ROM and random access memory RAM . A basic input output system BIOS may be stored in ROM . System software may be stored in RAM including operating system software . Software applications may also be stored in RAM .

The system may also include a primary storage means such as a magnetic hard disk drive and secondary storage means such as a magnetic disc drive and an optical disc drive. The drives and their associated computer readable media provide non volatile storage of computer executable instructions data structures program modules and other data for the system . Software applications may be stored on the primary and secondary storage means as well as the system memory . The computing system may operate in a networked environment using logical connections to one or more remote computers via a network adapter .

Input output devices can be coupled to the system either directly or through intervening I O controllers. A user may enter commands and information into the system through input devices such as a keyboard pointing device or other input devices for example microphone joy stick game pad satellite dish scanner or the like . Output devices may include speakers printers etc. A display device is also connected to system bus via an interface such as video adapter .

Referring to a flow diagram shows one embodiment of the described system as carried out at a service provider. A service provider defines a service interface at block . The service provider defines message structures using data types of an XML schema at block . The service provider specifies context independent validation constraints in the XML schema at block . The service provider specifies context specific validation constraints using an intermediary data structure for example using an XML query language at block . The service provider publishes the service interface at block .

In one embodiment the service provider defines a service interface using WSDL and the message structures using XSD types of an XML schema. The service provider specifies context independent validation constraints in the XML schema. The service provider specifies context specific validation constraints using an XML query language to provide an intermediary data structure in the form of an XML view. The service provider publishes the service interface in the form of WSDL XSD and XML Views. In one embodiment the message structures may be defined using DTD types.

Referring to a flow diagram shows a further aspect of the described system. A service consumer creates a service request message according to a data type at block . The consumer populates the request according to the constraints of an intermediary data structure for example as an XML query language data structure at block . The consumer sends the request to the service provider at block .

The service provider receives the request at block . The service provider validates the message on the basis of the constraints expressed by the XML schema including referencing context independent data type definitions at blocks and . The service provider validates the message on the basis of the constraints expressed by the intermediary data structure including referencing the context specific intermediary data structure definitions at blocks and .

In one embodiment the service consumer creates a service request message according to an XSD type in accordance with an XML view provided by an XML query language. The service provider validates the message on the basis of the XSD type including referencing XML schema definitions. The service provider also validates the message on the basis of the XML view referencing the XML view definitions.

An example of a context independent customer data structure defined by the following XML schema follows 

In the above schema the context independent customer data structure requires name surname date of birth and contact details. The contact details include address and phone number. As both the address and phone number are defined as a minimum of 0 occurrences these are not mandatory.

The following XML View can be used to specify that customer name and customer address are mandatory in the context of a specific service interaction 

In the above the element attribute of the WSDL syntax is maintained and the new view attribute is added to the message part.

The message instance includes the attributes of customer name and customer address and therefore can be validated in the specific context of the service operation. A message instance only including the attributes of customer name and customer phone number would not be validated in the specific context of the service operation.

In this way the XML schema defines a set of elements or attributes not all of which may be required. The XML View specifies the elements or attributes of the schema which are required in the specific context.

An embodiment of the present invention removes the hard link between validation constraints and data types. As a result the validation constraints associated to one service operation can be modified without impacting all the other services using the same type thus bringing a tighter declaration of the parameters and constraints which apply to individual calls decoupled from the data types behind them to the web service infrastructure.

The described method and system forms declarative specifications of multiple contexts containing different sets of constraints which apply in each context. The declarations are incorporated as part of the published specification of the service referred to by interface call definitions as appropriate.

The corresponding structures materials acts and equivalents of all elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

Having thus described the invention of the present application in detail and by reference to embodiments thereof it will be apparent that modifications and variations are possible without departing from the scope of the invention defined in the appended claims.

