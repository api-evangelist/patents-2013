---

title: Systems and methods of analyzing a software component
abstract: A particular method includes receiving, at a device, a request to analyze a software component. The request indicates a target operating system. The method also includes generating a virtual machine at a computing device. The virtual machine implements the target operating system. The method further includes executing the software component in the target operating system on the virtual machine and generating data indicating effects of executing the software component on the virtual machine.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336025&OS=09336025&RS=09336025
owner: The Boeing Company
number: 09336025
owner_city: Chicago
owner_country: US
publication_date: 20130712
---
The present disclosure is generally related to systems and methods of analyzing a software component.

Malware includes software components that may be used to disrupt computer operation gather sensitive information gain access to private computer systems or for other undesirable purposes. The malware may be designed to take advantage of security vulnerabilities of various systems e.g. an operating system an application or a browser plug in . Reverse engineering to determine effects of executing the malware may enable discovery of particular security vulnerabilities targeted by the malware and may enable detection of the malware.

Analyzing effects of executing the malware may be a labor intensive process that takes hours days or even weeks. An analysis tool to analyze the malware may be limited to a particular operating environment. The particular operating environment may not be representative of a target operating environment of interest to an analyst. Moreover collective evaluation of the malware by a team of analysts may be cumbersome to undertake.

Systems and methods to analyze a software component are disclosed. The disclosed embodiments enable analyzing effects of executing the software component in a virtual machine. The virtual machine may implement a target operating system indicated in a request to analyze the software component. Procedures to analyze the software may be recommended based on comparing a digital identifier of the software component to digital identifiers in a database. For example a particular analysis procedure may be recommended to analyze the software component in response to the digital identifier being related to another digital identifier in the database. Kernel level events and application level events of the virtual machine may be monitored during execution of the software component. The software component may be analyzed based on the detected kernel level events and the application level events.

In a particular embodiment a method includes receiving at a device a request to analyze a software component. The request indicates a target operating system. The method also includes generating a virtual machine at a computing device. The virtual machine implements the target operating system. The method further includes executing the software component in the target operating system on the virtual machine and generating data indicating effects of executing the software component on the virtual machine.

In another particular embodiment a system includes a processor and a memory. The memory stores instructions that when executed by the processor cause the processor to perform operations. The operations include receiving at a device a request to analyze a first software component. The request indicates a target operating system. The operations also include generating a virtual machine at a computing device. The virtual machine implements the target operating system. The operations further include executing the first software component in the target operating system on the virtual machine and generating first data indicating effects of executing the first software component on the virtual machine.

In another particular embodiment a computer readable storage device stores instructions that when executed by a processor cause the processor to perform operations. The operations include receiving at a device a request to analyze a software component. The request indicates a target operating system. The operations also include generating a virtual machine at a computing device. The virtual machine implements the target operating system. The operations further include executing the software component in the target operating system on the virtual machine and generating first data indicating effects of executing the software component on the virtual machine.

Thus particular embodiments facilitate analysis of software components. A software component may be analyzed in a virtual machine implementing a requested operating environment that represents a client operating environment. Collective evaluation of the software component may be facilitated by recommending procedures to analyze the software component based on information regarding other evaluations.

The features functions and advantages that have been described can be achieved independently in various embodiments or may be combined in other embodiments further details of which are disclosed with reference to the following description and drawings.

Referring to a block diagram of a particular embodiment of a system to analyze a software component is disclosed and generally designated . The system may include an analysis system coupled to or in communication with one or more client system s . The analysis system may also include be coupled to or be in communication with a correlation engine and a database . The analysis system may include a processor and a memory . The analysis system may also include an analysis manager coupled to the client system s via a programming interface e.g. an application programming interface API . The analysis manager may be coupled to a virtual machine generator to a virtual machine host and to a data analyzer . The data analyzer may be coupled to the database and to the correlation engine .

The analysis system may include fewer or more components than illustrated in . For example the analysis system may include more than one processor may include more than one memory or both. The analysis system may include a networked or distributed computing system. In a particular illustrative embodiment the analysis system may include a communications device a personal digital assistant PDA a mobile location data unit a mobile phone a cellular phone a portable computer a tablet computing device or a combination thereof. Such devices may include a user interface e.g. a touch screen voice recognition capability or other user interface capabilities.

The memory may store instructions e.g. analysis system instructions . One or more of the functional modules of the analysis system may correspond to the analysis system instructions . The analysis system instructions may be executable by the processor to perform various operations. For example the processor may perform operations including receiving a request e.g. a request from a client system e.g. the client system s to analyze a software component e.g. malware . To illustrate an analyst may send the request from the client system s to analyze the software component to the analysis system via a programming interface e.g. the programming interface . The programming interface may forward the request to an analysis manager e.g. the analysis manager . In a particular embodiment the request may include or identify the software component . The analysis manager may generate a digital identifier of the software component . The analysis manager may store the software component in the database along with the digital identifier. In a particular embodiment the digital identifier may be a hash signature of the software component . For example the analysis manager may generate the hash signature using a message digest algorithm 5 MD5 algorithm a secure hash algorithm 1 SHA 1 a secure hash algorithm 256 SHA 256 or a ssdeep algorithm.

In response to the request the analysis manager may set up an environment to isolate effects of executing the software component during the analysis. For example the analysis manager may request a virtual machine generator e.g. the virtual machine generator to generate a virtual machine e.g. a virtual machine that implements a target operating system e.g. a target operating system OS . The virtual machine generator may generate the virtual machine in a virtual machine host e.g. the virtual machine host . The virtual machine may implement the target operating system .

Images of a plurality of operating systems including the target operating system may be stored in a database e.g. the database . The virtual machine may be generated using a copy of the image of the target operating system . The image of the target operating system may be received from or identified by the client system s . In a particular embodiment the request may indicate the target operating system . For example the request may include the image of the target operating system or an identifier of the target operating system . The virtual machine may be generated to emulate a particular client operating environment indicated in the request . For example the analyst may be interested in analyzing the behavior of the software component in the particular client operating environment without putting the actual client operating environment at risk from harmful effects of executing the software component . In a particular embodiment the target operating system may be a custom operating system derived from an image from a golden master source. In a particular embodiment the target operating system may include an open source operating system or a proprietary operating system.

The analysis manager may set up a sensor layer e.g. a sensor layer between the software component and the virtual machine to monitor execution of the software component as further described with reference to . The sensor layer may include sensor functions such as a kernel level sensor e.g. a kernel level sensor an application level sensor e.g. an application level sensor or both. The analysis manager may couple the software component to the sensor layer . For example the analysis manager may inform the software component that a particular dynamic link library DLL is to be used during execution. The particular DLL may correspond to the application level sensor . As another example the analysis manager may install a kernel level software program in a kernel of the target of operating system . The kernel level software program may correspond to the kernel level sensor .

The analysis manager may initiate execution of the software component in the target operating system on the virtual machine . The software component may be coupled to or communicate with the virtual machine via the sensor layer . The sensor layer may monitor the virtual machine . For example the kernel level sensor the application level sensor or both may detect function calls memory modification file access network access registry modification file system modification system resource utilization sub process creation or a combination thereof.

For example when the software component initiates an application level function call e.g. an application level event to the target operating system the application level function call may be directed to the application level sensor e.g. the particular DLL . To illustrate the application level sensor may detect the application level function call before execution of an application level function associated with the application level function call. The application level sensor may store data e.g. the behavior data regarding the detected application level function call. The data regarding the application level function call may identify the application level function one or more arguments of the application level function call a timestamp indicating when the application level function call is detected or a combination thereof. The application level sensor the virtual machine or both may also generate and store data e.g. the behavior data regarding effects of executing the application level function.

A particular application level event may result in multiple corresponding kernel level events. Each of the corresponding kernel level events may be initiated by the software component in response to the software component initiating the particular application level event. For example execution of the application level function may result in one or more corresponding kernel level function calls. The sensor layer may store data e.g. the behavior data identifying the particular application level event and the multiple corresponding kernel level events. In a particular embodiment the software component may initiate a kernel level event without initiating an intervening application level event.

Each kernel level event e.g. each kernel level function call may be detected by the kernel level sensor e.g. the kernel level software program . For example the kernel level sensor may detect a kernel level function call before execution of a kernel level function associated with the kernel level function call. The kernel level sensor may store data e.g. the behavior data regarding the detected kernel level function call. The data regarding the kernel level function call may identify the kernel level function one or more arguments of the kernel level function call a timestamp indicating when the kernel level function call is detected or a combination thereof. The kernel level sensor the virtual machine or both may also store data e.g. the behavior data regarding effects of executing the kernel level function.

An effect of executing the software component e.g. a kernel level event an application level event or both may include modifying a memory location accessing a file accessing a network modifying a registry modifying a file system utilizing a system resource creating a sub process effects of executing the sub process or a combination thereof. The behavior data may be stored in the database along with the digital identifier of the software component .

The data analyzer may analyze the software component in an iterative process. For example the data analyzer may receive the behavior data and send a command e.g. a command to modify an operating condition of the target operating system . The command may include hiding a file from the software component executing an application or application function enabling network access by the software component disabling network access by the software component modifying a date of the target operating system modifying a time of the target operating system or a combination thereof. To illustrate the data analyzer may send the command to the target operating system to advance a clock of the target operating system to analyze effects of executing the software component over a particular time period. Subsequent to sending the command the data analyzer may receive the behavior data indicating results of executing the software component with the modified operating condition of the target operating system . In a particular embodiment the iterative analysis process may be based on an analysis tool used to analyze the software component a recommended procedure to analyze the software component analysis data e.g. analysis data generated by the data analyzer correlation analysis data e.g. correlation analysis data received from the correlation engine or a combination thereof.

The analysis manager may send analysis data e.g. the analysis data to the client system s . The data analyzer may initiate display of at least a portion of the analysis data at the client system s by sending the analysis data to the client system s . The analysis data may indicate results of analyzing the software component . For example the analysis data may include or correspond to at least a portion of the behavior data one or more recommended procedures to analyze the software component one or more recommended procedures to detect execution of the software component at another computing device one or more recommended procedures to prevent the effects of executing the software component when the software component is executed at another computing device at least a portion of the correlation analysis data a report regarding the analysis of the software component or a combination thereof. The data analyzer may store the analysis data in the database along with an identifier of the software component .

The data analyzer may send at least a portion of the behavior data to a correlation engine e.g. the correlation engine . The correlation engine may correspond to instructions e.g. the analysis system instructions executed by a processor e.g. the processor . In a particular embodiment the portion of the behavior data sent to the correlation engine may be selected by the analyst. For example the analysis manager may send the analysis data indicating the behavior data to the client system s . The analyst may choose to focus the correlation analysis on particular aspects of the behavior data and may select the portion of the behavior data to send to the correlation engine .

In a particular embodiment the analyst may also or in the alternative select one or more criteria of comparison. For example the analyst may want to compare the software component with other software components based on one or more criteria of comparison. The criteria of comparison may include an at least partial match of a digital identifier a date range of detection an effect of execution a kernel event an application event an author a source a location or a combination thereof.

The client system s may send a second request e.g. the request to the analysis manager . The request may indicate the selected portion of the behavior data may indicate the selected one or more criteria of comparison or a combination thereof. The data analyzer may send or make accessible the portion of the behavior data the selected one or more criteria of comparison to the correlation engine or both to the correlation engine .

The correlation engine may compare the portion of the behavior data to information in a database e.g. the database . For example the correlation engine may compare the behavior data to data corresponding to another software component. In a particular embodiment the correlation engine may identify the other software component based on the other software component satisfying the one or more criteria of comparison. In a particular embodiment the correlation engine may identify the other software component based on at least a partial match of an identifier of the other software component and the identifier of the software component .

For example the information in the database may include digital identifiers of other software components that have been analyzed using an analysis system e.g. the analysis system . The digital identifiers may each correspond to a hash signature of a particular software component. The correlation engine may compare the digital identifier of the software component to the digital identifiers of the other software components. The correlation engine may determine that the software component is related to a second software component in response to determining that the digital identifier of the software component is related to e.g. similar to the digital identifier of the second software component. To illustrate the correlation engine may determine that the digital identifier of the software component is related to the digital identifier of the second software component based on at least a partial match of the digital identifier of the software component and the digital identifier of the second software component.

In a particular embodiment the information in the database may correspond to behavior data analysis data or both from an earlier analysis of the other software component e.g. the second software component . The information in the database may also include information regarding a detected execution of the other software component e.g. date location etc. . For example the other software component may have been detected executing at another computing device e.g. the client system s at a particular date. The execution of the other software component may have been detected using procedures recommended by the earlier analysis of the other software component. The other computing device e.g. the client system s may have provided information regarding the detected execution to the database . The information regarding the detected execution of the other software component may help the analyst determine how related software components are spreading from one computing device to another how recently the other software component was detected or both.

The correlation engine may provide correlation analysis data e.g. the correlation analysis data to the data analyzer based on the comparison of the portion of the behavior data to information in the database . The correlation analysis data may include information regarding the other software component. For example the correlation analysis data may indicate a digital identifier of the other software component a timestamp associated with a prior detection of the other software component a location associated with the prior detection of the other software component a source associated with the other software component an author associated with the other software component analysis data regarding application level events kernel level events or both associated with the other software component analysis data regarding effects of executing the other software component or a combination thereof.

The correlation engine may store the correlation analysis data in the database along with the digital identifier of the software component . The data analyzer may include the correlation analysis data in the analysis data to send to the client system s .

The data analyzer may identify similar effects distinct effects or both of executing the software component and the other software component. For example the data analyzer may compare the behavior data and the correlation analysis data to generate data indicating the similar effect the distinct effects or both. The data analyzer may include the generated data in the analysis data . In a particular embodiment the data analyzer may determine whether the other software component has a same effect upon execution as the software component and may generate data regarding the other software component based on the determination. For example the data analyzer may generate data indicating that the other software component and the software component have a particular effect upon execution in response to determining that the other software component and the software component have the particular effect. The data analyzer may include the generated data regarding the other software component in the analysis data .

The data analyzer may determine a particular procedure of analyzing the software component based on the correlation analysis data . The particular procedure may include determining whether effects of executing the software component are similar to effects of executing the other software component. The particular procedure may include hiding a file from the software component enabling network access by the software component disabling network access by the software component modifying a date of the target operating system modifying a time of the target operating system determining whether a particular kernel level event occurs during execution of the software component whether a particular application level event occurs during execution of the software component using a particular analysis tool to analyze the software component executing the software component in a particular operating system e.g. the target operating system executing the software component in a particular operating environment e.g. with the particular operating system a particular set of applications a particular set of values of system variables a particular memory configuration a particular network configuration etc. or a combination thereof.

For example the correlation analysis data may indicate that executing the other software component had a particular effect in response to particular operating conditions. In this example the particular procedure may include creating the particular operating conditions to determine whether execution of the software component results in the particular effects. To illustrate the correlation analysis data may indicate that the other software component attempted to access a particular network after a particular time period e.g. 1 week of execution of the other software component. The particular procedure may include identifying whether the effects of executing the software component and the other software component are similar by comparing the behavior data to the analysis data regarding the effects of executing the other software component. For example the particular procedure may include simulating the particular operating conditions e.g. by advancing a clock of the virtual machine to simulate elapse of the particular time period. As another example the particular procedure may include determining whether the behavior data indicates that the software component attempted to access the particular network after the particular time period of execution.

As another example the correlation analysis data may indicate that a particular analysis tool was used to analyze the other software component. Using the same analysis tool to analyze the software component may facilitate comparing the results of analyzing the software component and the other software component. In this example the particular procedure may include using the particular analysis tool to analyze the software component .

As an additional example the correlation analysis data may indicate that using the particular analysis tool to analyze the other software component is recommended e.g. by an analyst . An analysis tool that is recommended to analyze a related software component may be useful in analyzing the software component . In this example the particular procedure may include using the particular analysis tool to analyze the software component . In a particular embodiment the data analyzer may perform the particular procedure in response to receiving the correlation analysis data .

In a particular embodiment the data analyzer may recommend the particular procedure by indicating the recommended procedure in the analysis data . The data analyzer may initiate display of a plurality of analysis options including the recommended procedure at the client system s by sending the analysis data to the client system s . The analyst may select one or more of the plurality of analysis options e.g. the recommended procedure to analyze the software component . The client system s may send a request e.g. the request indicating the one or more selected analysis options e.g. the recommended procedure . In this embodiment the data analyzer may perform the one or more selected analysis options e.g. the recommended procedure in response to the request . For example the data analyzer may send a command e.g. the command to advance the clock of the target operating system . The data analyzer may receive data e.g. the behavior data indicating results of using the recommended procedure to analyze the software component . The data analyzer may store the behavior data in the database along with the digital identifier of the software component . The data analyzer may include the behavior data in the analysis data and may send the analysis data to the client system s .

In a particular embodiment the request may indicate a particular analysis tool e.g. a behavioral analysis tool a static analysis tool or both . For example the analyst may select the particular analysis tool to analyze the software component . The data analyzer may send the command based on a particular command indicated by the particular analysis tool e.g. the behavioral analysis tool . As another example the data analyzer may select a portion of the behavior data to include in the analysis data based on the particular analysis tool e.g. the behavioral analysis tool . As another example the data analyzer may perform a static analysis of the software component based on the particular analysis tool e.g. the static analysis tool . In a particular embodiment the data analyzer may perform the static analysis prior to during or subsequent to execution of the software component or a combination thereof.

In a particular embodiment the request may indicate a particular reporting format e.g. a standardized reporting language . For example the analyst may select a particular reporting format for generating a report. The data analyzer may generate the report in the particular reporting format e.g. based on the behavioral data a static analysis of the software component or both . The data analyzer may store the report in the database along with an identifier of the software component . The analysis manager may include the report in the analysis data sent to the client system s .

The data analyzer may determine a procedure to detect execution of the software component at a second computing device e.g. the client system s . The procedure to detect execution of the software component may be determined based on the effects of executing the software component . For example the behavior data may indicate a particular set of effects of executing the software component . To illustrate the behavior data may indicate that an effect of executing the software component includes making particular changes to a particular memory location. Based on the behavior data the procedure to detect execution of the software component may include determining whether a corresponding memory location of the second computing device includes the particular changes. In a particular embodiment the data analyzer may recommend the procedure to detect execution of the software component by indicating the recommended procedure in the analysis data .

The data analyzer may determine a procedure to prevent one or more effects of executing the software component when the software component is executed on a second computing device. For example the behavior data may indicate that an effect of executing the software component includes accessing a particular network location. Based on the behavior data the procedure to prevent one or more effects of executing the software component may include disabling access to the particular network location. In a particular embodiment the data analyzer may recommend the procedure to prevent one or more effects of executing the software component by indicating the recommended procedure in the analysis data .

When analysis of the software component is complete the analysis manager may initiate removal of the virtual machine . For example the analysis manager may request the virtual machine host to remove the virtual machine in response to a request e.g. the request from the client system s . To illustrate the analyst may send the request to indicate that monitoring execution of the software component may be stopped that the virtual machine may be removed or both. The virtual machine host may remove the virtual machine . Operation of the system is further described with reference to .

The system may enable analysis of a software component. The behavior of the software component may be analyzed in an operating environment that emulates a client operating environment. Collaborative evaluation of the software component may be facilitated by comparing behavior data of the software component to information regarding other software components during analysis of the software component.

Referring to a diagram illustrating monitoring behavior that may be implemented by the system of is shown and is generally designated . illustrates operating system layers that may correspond to protection rings of an operating system e.g. the target operating system of . The protection rings may be arranged in a hierarchy from most privileged e.g. Ring 0 to least privileged e.g. Ring 3 . Ring 0 may be the level that interacts most directly with physical hardware e.g. the processor the memory or both of . A kernel may run in Ring 0 of the target operating system whereas applications may run in Ring 3 of the target operating system . Device drivers e.g. first device drivers and second device drivers may run in Rings and of the target operating system .

The kernel level sensor running in Ring 0 may be more difficult to detect and hence more difficult to circumvent by the software component than the application level sensor running in Ring 3 of the target operating system . The application level sensor may provide data that is easier for the analyst to understand than the data provided by the kernel level sensor . Using both the kernel level sensor and the application level sensor may result in a robust and efficient software component analysis system.

Referring to a diagram of a particular embodiment of a basic information user interface that may be displayed by the system of is shown and is generally designated . The basic information user interface may include information regarding a software component e.g. the software component of . For example the basic information user interface may include or identify a title an assigned name a file name an extension a sample identifier a classification a packer an owner a date time group DTG found a message digest algorithm 5 MD5 value a secure hash algorithm 1 SHA 1 value a secure hash algorithm 256 SHA 256 value and a ssdeep algorithm value . The basic information user interface may also include an update input .

During operation the analyst may send a request e.g. the request to the analysis manager via the programming interface . In response to the request the analysis manager may initiate display of the basic information user interface . For example the request may indicate a software component e.g. the software component . In response to the request the analysis manager may send data regarding the software component to the client system s . The client system s may display the basic information user interface based on the data regarding the software component . In a particular embodiment the values may be editable. The analyst may edit one or more of the values and select the update input to save the edited values in a database e.g. the database . In a particular embodiment the sample identifier may uniquely identify the software component . The message digest algorithm 5 MD5 value the secure hash algorithm 1 SHA 1 value the secure hash algorithm 256 SHA 256 value and the ssdeep algorithm value may each correspond to a hash or other identifier that may be compared to a corresponding value of other software components to determine whether the software component matches or is similar to one or more of the other software components.

Thus the basic information user interface may enable an analyst to verify and update information regarding a software component.

Referring to a diagram of a particular embodiment of an analysis creation user interface that may be displayed by the system of is shown and is generally designated . In the embodiment illustrated in the analysis creation user interface may include a title identifying a software component e.g. the software component may include one or more analysis options to indicate tools to analyze the software component may include one or more reports options to indicate report formats for results of the analysis and may include a submit input for submitting one or more selections of the options. The analysis creation user interface includes the title of behavioral analysis options static analysis options reports options and a submit input . The options may include one or more inputs. Each input may be associated with a particular analysis tool or a particular report format. An input associated with an unavailable analysis tool or an unavailable report format may not be selectable. An input that is not selectable may be displayed in a different font than a selectable input. An input associated with a recommended analysis tool or a recommended report format may be highlighted. An input that is highlighted may be displayed in a different font than other inputs may be displayed with a particular symbol e.g. may be preselected or a combination thereof.

For example the behavioral analysis options includes a plurality of inputs e.g. the first input and the second input each input may be associated with a particular behavioral analysis tool. The first input and the second input may be displayed in different fonts colors or other distinct display formats. To illustrate the first input may be displayed with a black font color indicating that the first input is selectable and the second input may be displayed with a grey font color indicating that the second input is not selectable. As another example the static analysis options includes an input that may be associated with a particular static analysis tool. As another example the reports options includes a plurality of inputs each of the inputs may be associated with a particular report format e.g. a standardized report format .

During operation the analyst may send a request e.g. the request to the analysis manager via the programming interface . In response to the request the analysis manager may initiate display of the analysis creation user interface . For example the request may identify or include a software component e.g. the software component . In response to the request the analysis manager may send data associated with the analysis creation user interface to the client system s . The analysis manager may recommend selections within the analysis creation user interface . The client system s may display the analysis creation user interface . The analyst may select one or more inputs of the options and may select the submit input . The client system s may send data indicating the selection of the one or more inputs to the analysis manager . The analysis manager may analyze the software component based on the one or more analysis tools reporting formats or both corresponding to the one or more inputs as further described with reference to .

Thus the analysis creation user interface may enable the analyst to specify particular analysis tools to be used to analyze the software component. The analyst may also specify particular standardized reporting formats for the results of the analysis. The analysis creation user interface may allow changes of the system to be easily conveyed to the analyst. For example when a new analysis tool is added to the system the analyst may see an input related to the new analysis tool in the analysis creation user interface and may select the new analysis tool in the usual manner. The analysis creation user interface may also allow the analysis manager to recommend analysis procedures.

Referring to a flow chart of a particular illustrative embodiment of a method of analyzing a software component is shown and is generally designated . The method may be executed by the system of .

The method may include receiving at a device a request to analyze a software component at . The request may indicate a target operating system. For example the analysis manager of may receive the request to analyze the software component . The request may indicate the target operating system .

The method may also include generating a virtual machine at a computing device at . The virtual machine may implement the target operating system. For example the virtual machine generator of may generate the virtual machine . The virtual machine generator may generate the virtual machine in response to the analysis manager receiving the request as further described with reference to . The virtual machine may implement the target operating system . For example the virtual machine may load an instance of an image corresponding to the target operating system .

The method may further include executing the software component in the target operating system on the virtual machine at . For example the analysis manager may initiate execution of the software component in the target operating system on the virtual machine as further described with reference to .

The method may also include generating data indicating effects of executing the software component on the virtual machine at . For example the sensor layer the virtual machine or both of may generate the behavior data indicating the effects of executing the software component on the virtual machine as further described with reference to .

The method may further include storing the data in a database along with an identifier of the first software component at . For example the sensor layer the virtual machine or both of may store the behavior data in the database along with an identifier of the software component .

The method may also include analyzing the generated data at . For example the data analyzer may analyze the behavior data as further described with reference to .

Alternatively or in addition the method may include removing the virtual machine from the computing device after execution of the software component at . For example the analysis manager may initiate removal of the virtual machine from the analysis system after execution of the software component as further described with reference to .

Thus the method may be used to analyze a software component. For example the software component may be executed in a requested operating system on a virtual machine and the effects of executing the software component may be analyzed. The method may allow easy set up of a test environment and may facilitate collaboration and sharing of results.

Referring to a flow chart of a particular illustrative embodiment of a method of analyzing a software component is shown and is generally designated . In a particular embodiment the method may correspond to operation of .

The method may include generating a report based on the data at . The report may be generated using a standardized reporting language. The request may indicate the standardized reporting language. For example the data analyzer of may generate a report based on the behavior data . The report may be generated using a requested standardized reporting language as further described with reference to .

The method may also include storing the report in the database along with the identifier of the first software component at . For example the data analyzer of may store the report in the database along with the identifier of the software component .

Thus the method may enable generating a report regarding the analysis of the software component in a standardized reporting language. Sharing of data may be simplified by using the standardized reporting language.

Referring to a flow chart of a particular illustrative embodiment of a method of analyzing a software component is shown and is generally designated . In a particular embodiment the method may correspond to operation of .

The method may include comparing the data to information in a database at . For example the data analyzer of may compare the behavior data to information e.g. the correlation analysis data from the database as further described with reference to .

The method may also include identifying similar effects of executing the first software component and a second software component based on the comparison of the data to the information in the database at identifying distinct effects of executing the first software component and the second software component based on the comparison of the data to the information in the database at and generating second data indicating the similar effects and the distinct effects at . The information in the database may be related to the second software component. For example the correlation engine of may send or make accessible information from a database e.g. the database to the data analyzer . The information may be related to the second software component. The data analyzer may identify similar effects distinct effects or both of executing the software component and the second software component based on the comparison of the behavior data to the correlation analysis data . The data analyzer may generate data indicating the similar effects and the distinct effects.

The method may further include identifying a second software component that has a same effect upon execution as the first software component where the second software component is identified based on the information in the database at and generating second data indicating the second software component at . For example the data analyzer may determine that the correlation analysis data indicates that a second software component has the same effect or a similar effect upon execution as the software component . The data analyzer may generate data identifying the second software component. For example the software component may have a particular effect upon execution and the analyst may be interested in identifying other software components that have the same particular effect upon execution.

Thus the method may enable comparing a software component with another software component. For example the method may identify similar and distinct effects of executing the compared software components. As another example the method may identify other software components that have a same effect upon execution as the software component.

Referring to a flow chart of a particular illustrative embodiment of a method of analyzing a software component is shown and is generally designated . In a particular embodiment the method may correspond to operation of .

The method may include comparing the data to second data at . The second data indicates publicized effects of executing the first software component. For example the data analyzer of may compare the behavior data to data indicating publicized effects of executing the software component . In a particular embodiment the data indicating publicized effects may be received from the client system s . For example the request may include the data indicating the publicized effects. To illustrate the publicized effects may be indicated by a source that provided the software component to the client system s . In a particular embodiment the data indicating the publicized effects may be stored in the database . For example the data analyzer may store the data indicating the publicized effects in the database along with an identifier of the software component . In a particular embodiment the publicized effects may include results of a prior analysis by the analysis system . For example the publicized effects may include results of a prior analysis of the software component a prior version of the software component or a version of the software component received by the analysis system from sources other than the client system s .

The method may also include determining whether the effects of executing the first software component on the virtual machine match the publicized effects based on the comparison at . For example the data analyzer of may determine whether the effects of executing the software component indicated by the behavior data match the publicized effects. The data analyzer may generate data indicating whether the effects of executing the software component match the publicized effects. The data analyzer may store the generated data in the database . The data analyzer may include the generated data in the analysis data .

Thus the method may enable determining whether effects of executing a software component match publicized effects of executing the software component. The effects of executing the software component may be different from the publicized effects because the publicized effects are associated with another version of the software component or a different operating environment or because the publicized effects are incorrect. The method may enable the analyst to determine the differences between the effects of executing the software component and the publicized effects.

Referring to a flow chart of a particular illustrative embodiment of a method of analyzing a software component is shown and is generally designated . The method may be executed by the system of .

The method may include receiving a request at a first device from a second device to analyze a first software component at . The request may include or identify the first software component. For example the analysis manager of may receive the request to analyze the software component as further described with reference to .

The method may also include generating at the first device a first digital identifier of the first software component at . For example the analysis manager of may generate a digital identifier of the software component as further described with reference to . For example the digital identifier of the software component may be a hash signature. To illustrate the analysis manager may generate the hash signature using a message digest algorithm 5 MD5 algorithm a secure hash algorithm 1 SHA 1 a secure hash algorithm 256 SHA 256 or a ssdeep algorithm.

The method may further include performing a comparison of the first digital identifier to one or more second digital identifiers in a database at . For example the correlation engine of may compare the digital identifier of the software component to one or more second digital identifiers in the database as further described with reference to .

The method may also include determining whether the first digital identifier is related to a particular second digital identifier of the one or more second digital identifiers based on the comparison at . The first digital identifier may be related to the particular second digital identifier when the first digital identifier at least partially matches the particular second digital identifier. For example the correlation engine of may determine that the digital identifier of the software component is related to a particular digital identifier of the one or more second digital identifiers based on determining that the digital identifier of the software component at least partially matches the particular digital identifier.

The method may further include generating first data indicating recommended procedures to analyze the first software component based on the comparison at . For example the data analyzer of may generate data indicating recommended procedures to analyze the software component based on determining that the digital identifier of the software component is related to the particular digital identifier as further described with reference to . To illustrate software components with related digital identifiers may be copies of each other different versions of each other or related in other ways. Related software components may have similar behavior. The procedures recommended by the data analyzer may include determining whether executing the software component in the target operating system has similar effects as executing the particular software component with the related digital identifier.

The method may also include storing the first data in the database along with the first digital identifier at . For example the data analyzer of may store data indicating the recommended procedures in the database . The data analyzer may include the data indicating the recommended procedures in the analysis data . The method may proceed to .

As illustrated in the method may continue at from . The method may include analyzing the first software component based on the recommended procedures at . For example the data analyzer of may analyze the software component based on the recommended procedures as further described with reference to .

The method may include initiating display of a plurality of analysis options indicating the recommended procedures at receiving a user selection indicating one or more analysis options of the plurality of analysis options at and analyzing the first software component based on the one or more selected analysis options at . For example the analysis manager of may initiate display of a plurality of analysis options including the recommended procedures by sending the analysis data to the client system s . The analysis data may indicate the recommended procedures. In response to the analysis data the client system s may display the plurality of analysis options. The analyst may select one or more of the analysis options. The client system s may send data indicating the selected one or more analysis options to the analysis manager . The data analyzer may analyze the software component based on the selected one or more analysis options.

The method may also include generating second data indicating results of the analysis at . For example the data analyzer of may generate data indicating the results of analyzing the software component as further described with reference to .

The method may further include storing the second data in the database along with first digital identifier at . For example the data analyzer of may store the generated data in the database . The method may also include sending to the second device the second data indicating the results of the analysis at . For example the data analyzer of may include the generated data in the analysis data and may send the analysis data to the client system s .

The method may further include initiating display of the results of the analysis at . For example the data analyzer may initiate display of the generated data by sending the analysis data to the client system s . The client system s may display the analysis data in response to receiving the analysis data .

Referring to a flow chart of a particular illustrative embodiment of a method of analyzing a software component is shown and is generally designated . The method may be executed by the system of .

The method may include executing a software component on a virtual machine executing at a computing device at . For example the analysis manager of may initiate execution of the software component on the virtual machine as further described with reference to .

The method may also include monitoring kernel level events of an operating system executing on the virtual machine at . For example the kernel level sensor of may monitor kernel level events of the target operating system as further described with reference to .

The method may further include monitoring application level events of the operating system at . For example the application level sensor of may monitor application level events of the target operating system as further described with reference to . A particular application level event may result in multiple corresponding kernel level events.

The method may also include storing first data identifying the particular application level event and the multiple corresponding kernel level events in a memory at . For example the sensor layer of may store data identifying the particular application level event and the multiple corresponding kernel level events in the memory the database or both.

The method may further include analyzing effects of executing the software component on the virtual machine based on the kernel level events and the application level events at . For example the data analyzer of may analyze the effects of executing the software component on the virtual machine based on the kernel level events and the application level events as further described with reference to .

The method may also include generating second data indicating recommended procedures to detect based on the effects of executing the software component execution of the software component at a second computing device at . For example the data analyzer of may generate data indicating recommended procedures to detect execution of the software component at another computing device as further described with reference to . The recommended procedures to detect execution a software component may be used to detect malware or to prepare malware detection definitions for use in a security software application.

The method may further include generating third data indicating recommended procedures to prevent the effects of executing the software component when the software component is executed at a second computing device at . For example the data analyzer of may generate data indicating recommended procedures to prevent the effects of executing the software component when the software component is executed at another computing device as further described with reference to . The recommended procedures to prevent effects of executing a software component may be used to mitigate security vulnerabilities of a system or to prepare strategies for use in a security software application.

Thus method may enable monitoring events initiated by a software component both at the application level and at the kernel level. The kernel level monitoring may be difficult to detect and hence difficult to circumvent by the software component. The application level monitoring may generate data that is easy to understand for an analyst. Having both kernel level monitoring and application level monitoring may result in a robust and user friendly analysis system.

Referring to a flow chart of a particular illustrative embodiment of a method of analyzing a software component is shown and is generally designated . In a particular embodiment the method may correspond to operation of .

The method may include detecting a kernel level function call before execution of a kernel level function associated with the kernel level function call at . For example the kernel level sensor of may detect a kernel level function call before execution of a kernel level function associated with the kernel level function call as described with reference to .

The method may also include storing third data regarding the detected kernel level function call at . For example the kernel level sensor of may store data regarding the detected kernel level function call as described with reference to .

The method may further include executing the kernel level function at . For example the processor of may execute the kernel level function on the virtual machine as further described with reference to . In a particular embodiment the kernel level sensor may passively observe the detected kernel level function call and store the data regarding the detected kernel level function call. In another particular embodiment the kernel level sensor may intercept the detected kernel level function call store the data regarding the detected kernel level function call and initiate execution of the kernel level function associated with the detected kernel level function call.

The method may also include storing fourth data regarding effects of executing the kernel level function on the virtual machine at . For example the kernel level sensor the virtual machine or both of may store data regarding effects of executing the kernel level function on the virtual machine as further described with reference to .

Thus method may enable monitoring of kernel level events initiated by the software component . Data regarding the kernel level events and the effects of executing the kernel level events on a virtual machine may be stored for analysis. The kernel level events may include events initiated to implement an application level event. In this case the kernel level sensor the virtual machine or both may store data identifying the application level event to which the kernel level events are related.

Referring to a flow chart of a particular illustrative embodiment of a method of analyzing a software component is shown and is generally designated . In a particular embodiment the method may correspond to operation of .

The method may include detecting an application level function call before execution of an application level function associated with the application level function call at . For example the application level sensor of may detect an application level function call before execution of a corresponding application level function as further described with reference to .

The method may also include storing third data regarding the detected application level function call at . For example the application level sensor the virtual machine or both of may store data regarding the detected application level function call as further described with reference to .

The method may further include executing the application level function at . For example the processor of may execute the application level function on the virtual machine as further described with reference to . In a particular embodiment the application level sensor may passively observe the detected application level function call and store the data regarding the detected application level function call. In another particular embodiment the application level sensor may intercept the detected application level function call store the data regarding the detected application level function call and initiate execution of the application level function associated with the detected application level function call.

The method may also include storing fourth data regarding effects of executing the application level function on the virtual machine at . For example the application level sensor the virtual machine or both of may store data regarding effects of executing the application level function on the virtual machine as further described with reference to .

Thus method may enable monitoring of application level events initiated by the software component . Data regarding the application level events and the effects of executing the application level events on a virtual machine may be stored for analysis.

The computing device may include the processor of . The processor may communicate with the memory the virtual machine generator the virtual machine host the programming interface the analysis manager the data analyzer the correlation engine of one or more storage devices one or more input output interfaces one or more communications interfaces or a combination thereof. In a particular embodiment the virtual machine generator the virtual machine host the programming interface the analysis manager the data analyzer and the correlation engine are instructions e.g. the analysis system instructions stored in the memory and executable by the processor to perform functions described with respect to .

The memory may include volatile memory devices e.g. random access memory RAM devices nonvolatile memory devices e.g. read only memory ROM devices programmable read only memory and flash memory or both. The memory may include an operating system which may include a basic input output system for booting the computing device as well as a full operating system to enable the computing device to interact with users other programs and other devices. The memory may include one or more application programs such as a software component analysis application e.g. an application that is executable to analyze a software component. The memory may include the analysis system instructions of which may be executable by the processor e.g. instructions that are executable to analyze a software component.

The processor may also communicate with one or more storage devices . For example the one or more storage devices may include nonvolatile storage devices such as magnetic disks optical disks or flash memory devices. The storage devices may include both removable and non removable memory devices. The storage devices may be configured to store an operating system images of operating systems applications and program data. In a particular embodiment the storage devices may include the database of . In a particular embodiment the memory the storage devices or both include tangible non transitory computer readable media.

The processor may also communicate with one or more input output interfaces that enable the computing device to communicate with one or more input output devices to facilitate user interaction. The input output interfaces may include serial interfaces e.g. universal serial bus USB interfaces or Institute of Electrical and Electronics Engineers IEEE 1394 interfaces parallel interfaces display adapters audio adapters and other interfaces. The input output devices may include keyboards pointing devices displays speakers microphones touch screens and other devices. The processor may detect interaction events based on user input received via the input output interfaces . Additionally the processor may send a display to a display device via the input output interfaces .

The processor may communicate with other computer systems via the one or more communications interfaces . The one or more communications interfaces may include wired Ethernet interfaces IEEE 802 wireless interfaces other wireless communication interfaces or other network interfaces. The other computer systems may include host computers servers workstations and other computing devices. For example the other computer systems may include the client system s the database the correlation engine of or a combination thereof.

Thus in particular embodiments a computer system may be able to analyze a software component. For example the analysis system instructions may be executable by the processor to analyze a software component within a virtual machine running a target operating system.

Embodiments described above are illustrative and do not limit the disclosure. It is to be understood that numerous modifications and variations are possible in accordance with the principles of the present disclosure.

The illustrations of the embodiments described herein are intended to provide a general understanding of the structure of the various embodiments. The illustrations are not intended to serve as a complete description of all of the elements and features of apparatus and systems that utilize the structures or methods described herein. Many other embodiments may be apparent to those of skill in the art upon reviewing the disclosure. Other embodiments may be utilized and derived from the disclosure such that structural and logical substitutions and changes may be made without departing from the scope of the disclosure. For example method steps may be performed in a different order than is shown in the figures or one or more method steps may be omitted. Accordingly the disclosure and the figures are to be regarded as illustrative rather than restrictive.

Moreover although specific embodiments have been illustrated and described herein it is to be appreciated that any subsequent arrangement designed to achieve the same or similar results may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all subsequent adaptations or variations of various embodiments. Combinations of the above embodiments and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the description.

The Abstract of the Disclosure is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description various features may be grouped together or described in a single embodiment for the purpose of streamlining the disclosure. This disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect the claimed subject matter may be directed to fewer than all of the features of any of the disclosed embodiments.

