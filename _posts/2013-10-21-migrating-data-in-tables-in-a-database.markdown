---

title: Migrating data in tables in a database
abstract: Techniques for migrating data in a database include identifying an update to one or more data entries of a source table; determining that a status of a trigger associated with the source table indicates to update a logging table, and in response: updating, in a first transaction, (i) the one or more data entries of the source table, and (ii) one or more data entries of the logging table based on the user input, and copying content of the source table to a target table; and determining that the status indicates to update the target table, and in response: updating, in a second transaction, (i) the one or more data entries of the source table and (ii) one or more data entries of the target table based on the user input, and updating the content of the target table based on the one or more data entries of the logging table.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09436724&OS=09436724&RS=09436724
owner: SAP SE
number: 09436724
owner_city: Walldorf
owner_country: DE
publication_date: 20131021
---
This disclosure relates to data migration between tables and more particularly zero downtime maintenance during data migration between tables.

Globally positioned software customers do not accept outages of their business application software. Software customers typically demand uninterrupted business application software particularly with respect to Internet and mobile applications and expect such business application software to be available all day every day of the year with little to no downtime.

Software updates and upgrades mainly include persistency migration and as a result current deployment procedures may include business downtime which can be a huge issue for a customer since business downtime may correlate with a loss in revenue systems being down cannot contribute to the business processes creating revenue and reputation the services the customer offers to the end users which might be customers and consumers of our customers are down for a certain period of time .

The present disclosure relates to computer implemented methods software and systems for data migration between tables. In some implementations an update to one or more data entries of a source table is identified. In some examples a status of a trigger associated with the source table is determined to indicate to update a logging table and in response updating in a first transaction i the one or more data entries of the source table and ii one or more data entries of the logging table based on the user input and copying content of the source table to a target table. In some examples the status of the trigger associated with the source table is determined to indicate to update the target table and in response updating in a second transaction i the one or more data entries of the source table and ii one or more data entries of the target table based on the user input and updating the content of the target table based on the one or more data entries of the logging table.

Other general implementations include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform operations to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

In a first aspect combinable with any of the general implementations identifying the update further includes receiving a user input that comprises the update.

In a second aspect combinable with any of the previous aspects copying the content of the source table to the target table further includes segmenting the content of the source table into one or more segments and copying each segment of the content from the source table to the target table.

In a third aspect combinable with any of the previous aspects copying each segment of the content from the source table to the target table further includes locking the segment of content currently being copied from the source table to the target table and restricting modification of the content associated with the segment of content of the source table based on the locking.

In a fourth aspect combinable with any of the previous aspects locking the respective segment of content currently being copied from the source table to the target table further includes locking one or more table rows of content associated with the segment of the source table content.

In a fifth aspect combinable with any of the previous aspects copying content of the source table to the target table further includes excluding the one or more data entries of the source table that were updated in the first transaction from being copied to the target table.

In a sixth aspect combinable with any of the previous aspects the source table is associated with a first structure.

A seventh aspect combinable with any of the previous aspects further includes creating the target table the target table associated with a second structure differing from the first structure and associating the second structure with the content of the source table to be copied to the target table.

An eighth aspect combinable with any of the previous aspects further includes identifying a first table name associated with the source table replacing the first table name associated with the source table with a second table name and associating the first table name with the target table.

Various implementations of a computing system according to the present disclosure may have one or more of the following features. For example such features include an always available system that includes active database tables.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

In some examples the illustrated enterprise server computing system may store a plurality of various hosted applications while in some examples the enterprise server computing system may be a dedicated server meant to store and execute only a single hosted application. In some instances the enterprise server computing system may comprise a web server where the hosted applications represent one or more web based applications accessed and executed via the network by the client computing system to perform the programmed tasks or operations of the hosted application.

At a high level the illustrated enterprise server computing system comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the distributed computing system . Specifically the enterprise server computing system illustrated in is responsible for receiving application requests from one or more client applications associated with the client computing system of the distributed computing system and responding to the received requests by processing said requests in the associated hosted application and sending the appropriate response from the hosted application back to the requesting client application. In addition to requests from the client computing system illustrated in requests associated with the hosted applications may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single enterprise server computing system the distributed computing system can be implemented using two or more servers as well as computers other than servers including a server pool. In some examples the enterprise server computing system may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further the enterprise server computing system may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system.

The illustrated enterprise server computing system includes a table copy module . At a high level in some aspects the table copy module identifies an update to a source table. The table copy module further determines a status of a trigger associated with the source table. In some implementations the status indicates to update a logging table. In response the table copy module updates in a first transaction the source table and the logging table based on the user input. Further the table copy module copies content of the source table to a target table. In some implementation the status indicates to update the target table. In response the table copy module updates in a second transaction the source table and the target table based on the user input. Further the table copy module updates the content of the target table based on the logging table.

The illustrated enterprise server computing system further includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the example distributed computing system . The interface is used by the enterprise server computing system for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the client computing system as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system .

Regardless of the particular implementation software may include computer readable instructions firmware wired or programmed hardware or any combination thereof on a tangible medium transitory or non transitory as appropriate operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic ABAP assembler Perl any suitable version of 4GL as well as others. While portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The illustrated enterprise server computing system further includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . The processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the enterprise server computing system . Specifically the processor executes the functionality required to receive and respond to requests from the client computing system .

The illustrated enterprise server computing system also includes a memory . Although illustrated as a single memory in two or more memories may be used according to particular needs desires or particular implementations of the example distributed computing system . While memory is illustrated as an integral component of the enterprise server computing system in some implementations the memory can be external to the enterprise server computing system and or the example distributed computing system . The memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the enterprise computing system . Additionally the memory may include any other appropriate data such as VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files as well as others.

The illustrated enterprise server computing system further includes a service layer . The service layer provides software services to the example distributed computing system . The functionality of the enterprise server computing system may be accessible for all service consumers using this service layer. For example in one implementation the client computing system can utilize the service layer to communicate with the design engine . Software services provide reusable defined business functionalities through a defined interface. For example the interface may be software written in extensible markup language XML or other suitable language. While illustrated as an integrated component of the enterprise server computing system in the example distributed computing system alternative implementations may illustrate the service layer as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The illustrated enterprise server computing system further includes an application programming interface API . In some implementations the API can be used to interface between the design engine and one or more components of the enterprise server computing system or other components of the example distributed computing system both hardware and software. For example in some implementations the design engine can utilize the API to communicate with the client computing system . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. While illustrated as an integrated component of the enterprise server computing system in the example distributed computing system alternative implementations may illustrate the API as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the API may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The client computing system may be any computing device operable to connect to or communicate with at least the enterprise server computing system using the network . In general the client computing system comprises a computer operable to receive transmit process and store any appropriate data associated with the example distributed computing system . The illustrated client computing system further includes an application . The application is any type of application that allows the client computing system to request and view content on the client computing system . In some implementations the application can be and or include a web browser. In some implementations the application can use parameters metadata and other information received at launch to access a particular set of data from the enterprise server computing system . Once a particular application is launched a user may interactively process a task event or other information associated with the enterprise server computing system . Further although illustrated as a single application the application may be implemented as multiple applications in the client computing system .

The illustrated client computing system further includes an interface a processor and a memory . The interface is used by the client computing system for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the enterprise server computing system as well as other systems communicably coupled to the network not illustrated . The interface may also be consistent with the above described interface of the enterprise server computing system or other interfaces within the example distributed computing system .

The processor may be consistent with the above described processor of the enterprise server computing system or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the client computing system including the functionality required to send requests to the enterprise server computing system and to receive and process responses from the enterprise server computing system . The memory may be consistent with the above described memory of the enterprise server computing system or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the client computing system .

Further the illustrated client computing system includes a GUI . The GUI interfaces with at least a portion of the example distributed computing system for any suitable purpose including generating a visual representation of a web browser. In particular the GUI may be used to view and navigate various web pages located both internally and externally to the enterprise server computing system . Generally through the GUI an enterprise server computing system user is provided with an efficient and user friendly presentation of data provided by or communicated within the example distributed computing system .

There may be any number of client computing systems associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client computing system communicably coupled to the enterprise server computing system using network alternative implementations of the example distributed computing system may include any number of client computing systems suitable for the purposes of the example distributed computing system . Additionally there may also be one or more client computing systems external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system using the network . Moreover while the client computing system is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The illustrated client computing system is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example the client computing system may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the enterprise server computing system or the client computing system itself including digital data visual information or a GUI as shown with respect to the client computing system .

The illustrated distributed computing system further includes a repository . In some implementations the repository is an in memory repository. The repository can be a cloud based storage medium. For example the repository can be networked online storage where data is stored on virtualized pools of storage.

With respect to the network generally the illustrated network facilitates wireless or wireline communications between the components of the distributed computing system i.e. between the computing systems and as well as with any other local or remote computer such as additional clients servers or other devices communicably coupled to network but not illustrated in . The network is illustrated as a single network in but may be a continuous or discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet.

In some instances a portion of the network may be a virtual private network VPN such as for example the connection between the client computing system and the enterprise server computing system . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated distributed computing system . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations.

In general the table copy procedure includes creating the target table empty and equipping the source table with triggers. In some examples the triggers enable identifying changes to the source table and writing the changes to a logging table. Data entries are copied from the source table to the target table in an initial data transfer IDT . In some examples the trigger is then configured to update the target table in addition to writing the changes to the logging table. In some examples the trigger is switched to cease updating the logging table. A subsequent IDT procedure copies all entries e.g. changes recorded in the logging table to the target table.

Thus the table copy procedure ensures that content in the target table is consistent with respect to updates to the source table. The IDT can be done during productive use of the source table including inserting updating and deleting of content of the source table. Further data transfer after the initial transfer of content from the source table to the target table is without latency thus enabling zero downtime maintenance. In some examples zero downtime maintenance includes absolute zero downtime maintenance. In some examples zero downtime maintenance includes substantially zero downtime maintenance.

The timeline includes two procedures a data changes with recording and replay procedure data changes procedure and a data copy with replay procedure data copy procedure . In some examples the data changes procedure corresponds to the source table and the logging table and the data copy procedure corresponds to the target table. The data changes procedure includes a recording sub procedure and a replay procedure . The data copy procedure includes a segmentation procedure a transfer procedure and a replay procedure .

In some implementations an update to one or more data entries of a source table is identified. Specifically the table copy module can identify an update to the source table. In some examples the table copy module identifies user input that includes the update. For example a user associated with the client computing device can provide user input including the update. In some examples the table copy module can receive the user input that includes the update e.g. via the network from the client computing module . In some examples the table copy module can receive the user input that includes the update in response to a request for such user input or automatically.

For example at a time t the update to the source table is identified. Specifically the data changes procedure is initiated that is a change to the source table is identified and the table copy procedure including the data changes procedure is initiated.

In some examples the user input can include an insert of one or more data entries to the source table an update of one or more data entries of the source table or deletion of one or more data entries of the source table.

In some implementations a status of a trigger associated with the source table is determined to indicate to update a logging table. Specifically the table copy module can determine that the status of the trigger associated with the source table indicates to update the logging table. In response to determining that the status of the trigger associated with the source table indicates to update the logging table in a single first transaction the one or more data entries of the source table are updated and one or more data entries of the logging table are updated. The updating of the source table and the logging table is based on the user input. For example the table copy module updates the logging table and the source table in a single transaction based on the user input.

In some examples at a time t the source table and the logging table updated in a single transaction based on the user input. Specifically the recording sub procedure is initiated to update the source table and the logging table in a single transaction.

Additionally in response to determining that the status of the trigger associated with the source table indicates to update the logging table content is copied from the source table to the target table. For example the table copy module copies the content from the source table to the target table e.g. initial data transfer IDT .

In some examples at a time t the content is copied from the source table to the target table. For example the data copy procedure is initiated to copy the content from the source table to the target table.

In some implementations copying of the content from the source table to the target table further includes segmenting the content of the source table into one or more segments. Specifically in some examples the copy table module segments the content of the source table into segments. For example at the time t the segmentation procedure is initiated as a part of the data copy procedure to segment the source table into one or more segments. Furthermore copying of the content from the source table to the target table further comprises copying each segment of the content from the source table to the target table. Specifically the copy table module copies each segment of the content from the source table to the target table. For example at a time t the transfer procedure is initiated as a part of the data copy procedure to transfer copy each segment of the content from the source table to the target table.

In some implementations copying each segment of the content from the source table to the target table further includes locking the segment of the content currently being copied from the source table to the target table. Specifically in some examples the copy table module locks the segment of the content currently being copied. Locking of the segment of the content currently being copied can include preventing concurrent write operations by a user e.g. of the client computing device . Locking of the segment of the content currently being copied facilitates consistency between the source table and the target table. For example write operations that start after the segment is read and commit before the segment is written to the target table may result in potential data inconsistencies between the source table and the target table as there is no guarantee that these segments e.g. rows are transferred again at a later time.

Furthermore in some implementations copying each segment of the content from the source table to the target table further includes restricting modification of the content associated with the segment of content of the source table based on the locking. Specifically in some examples the copy table module restricts modification of the segment of content based on the locking of the same. For example restricting modification of the segment of content can include preventing accessing to the segment and or preventing updating inserting or deleting data entries of the segment of content.

In some implementations locking of the respective segment of content currently being copied from the source table to the target table further includes locking one or more table rows of content associated with the segment of the source table content. Specifically in some examples the copy table module locks table rows of content associated with the segment of content currently being copied. For example one or more rows or individual cells of the segment or the entire segment is locked.

In some implementations copying of the content of the source table to the target table further includes excluding the one or more data entries of the source table that were updated in the first transaction from being copied to the target table. Specifically the copy table module excludes data entries that were updated in the single first transaction from being copied to the target table. For example the data entries e.g. rows or individual cells of the source table are excluded from being transferred copied during the IDT from the source table to the target table. In some examples the data entries of the source table excluded from being transferred from the source table to the target table that have been previously transferred from an online data transfer ODT .

In some examples copying of the content of the source table to the target table further includes excluding data entries with keys. For example data entries with the same key that are excluded from being copied to the target table.

In some further implementations the source table is associated with a first structure e.g. a table data structure . Additionally the target table is created and is associated with a second structure that is different from the first structure. In some further implementations copying of the content of the source table to the target table further includes associating the second structure of the target table with the content of the source table to be copied to the target table. Specifically in some examples the copy table module associates the second structure with the content of the source table to be copied to the target table. For example the source table and the target table can differ in structure by among other ways 1 key fields may be added to the target table 2 non key fields may be added to the target table 3 non key fields may be removed from the source table 4 data types of both key fields and non key fields may be changed from the source table to the target table and 5 the sequence of fields may be different between the source table and the target table.

In some implementations that status of the trigger associated with the source table is determined to indicate the target table is to be updated. Specifically the table copy module can determine that the status of the trigger associated with the source table indicates to update the target table. In response to determining that the status of the trigger associated with the source table indicates to update the target table in a single second transaction the one or more data entries of the source table are updated and one or more entries of the target table are updated. The updating of the source table and the target table is based on the user input. For example the table copy module updates the target table and the source table in a single transaction based on the user input.

In some examples at a time t the source table and the target table are updated in a single transaction based on the user input. Specifically the replay sub procedure is initiated to update the source table and the target table in a single transaction.

Additionally in response to determining that the status of the trigger associated with the source table indicates to update the target table the content of the target table is updated based on the one or more data entries of the logging table. For example the table copy module content of the target table is updated based on the entries of the logging table e.g. online data transfer ODT .

In some examples at a time t the content of the target table is updated based on the entries of the logging table. For example the replay procedure is initiated to update the content of the target table based on the entries of the logging table. For example during the IDT a key is read from the logging table. The IDT submits a select for update to the source table for the key with no wait. If the IDT obtains the lock the key is copied to the target table. If the IDT does not obtain the lock the IDT continues and tries again later. The IDT iterates these steps until the logging table is empty.

In some implementations determining that the status of the trigger associated with the source table indicates to update the target table further includes determining that the status of the trigger indicates to cease updating the logging table. Specifically the table copy module can determine that the status of the trigger associated with the source table further indicates to cease updating the logging table.

In some examples after the replay procedure is concluded e.g. the logging table is empty the target table includes all of the content of the source table and further changes to the source table e.g. by a user of the client computing device are written in the same transaction to the target table. Thus there is no latency and data transfer is transcationally consistent. For example at time t the target table and the source table are in sync with each other.

In some further implementations a first table name associated with the source table is identified. Specifically in some examples the copy table module identifies the name of the source table. The source table name can be included by metadata associated with the source table and can be a name displayed to the user via a GUI e.g. the client computing device . Furthermore the first table name associated with the source table is replaced with a second table name. For example the copy table module replaces the name of the source table with a new differing table name. In some examples the second table name differs from the first table name. Additionally the first table name is associated with the target table. Specifically in some examples the copy table module associates the first table name that was previously associated with the source table with the target table.

In some examples at a time t a smart switch procedure is initiated to switch the names of the source table and the target table as mentioned above. Specifically the target table is associated with the name of the source table and the source able is associated with a new name. As a result productive use by the user e.g. of the client computing system is switched from the source table to the target table.

In some implementations an application from the one or more applications accesses the source table to write content to the source table and or receive content from the source table . For example the application can insert update or delete one or more data entries of the source table . The trigger module identifies that an update has been received to one or more data entries of the source table . Based on the trigger associated with the source table the trigger module updates the logging table or the target table . For example the trigger module updates the source table and the logging table in the same transaction when the trigger indicates to update the logging table and updates the source table and the target table in the same transaction when the trigger indicates to update the target table .

The shadow schema facilitates the smart switch of the table names between the source table and the target table. Specifically the alias temporary table includes a copy of the content from the source table but is associated with a differing table name than what is associated with the source table . For example the alias temporary table is associated with the table name alias. The alias logging table is further associated with the logging table and includes a copy of the content from the logging table . The alias source table is associated with the target table and includes a table name associated with the source table . Thus a smart switch of the table names occurs.

Furthermore the transferrer module appropriately copies content from the alias temporary table e.g. the content of the source table and the content from the alias logging table e.g. the content of the logging table to the alias source table as described above.

Specifically method illustrates portions of the data changes procedure as a method and portions of the data copy procedure as a method . Furthermore method illustrates that methods and occur in parallel and further that the data changes procedure and the data copy procedure occur in parallel.

In step the application changes one or more data entries of the source table . In step the trigger module enables performing a data modification language DML on the source table e.g. an update delete or insertion of one or more data entries . In step based on the status of the trigger the trigger module further enables modification of the logging table e.g. in the same transaction . In step based on the status of the trigger the trigger module further enables DML on the target table e.g. in the same transaction .

In step the transferrer module transfers data from the source table to the alias temporary table transfers data from the logging table to the alias logging table and transfers data from the alias temporary table to the alias source table . In step the transferrer module reads entries from the alias logging table and in step the transferrer module locks the currently read entries on the alias logging table . In step the transferrer module replays the currently read data to the alias source table .

At step an update to one or more data entries of a source table is identified. In some examples the update includes receiving user input. In some examples the update includes an insert update or delete to the one or more data entries of the source table. At step a status of a trigger associated with the source table is determined to indicate to update a logging table. At step in a first transaction i the one or more data entries of the source table are updated and ii one or more data entries of the logging table are updated based on the user input. At step content of the source table is copied to a target table. In some examples the one or more data entries of the source table that were updated in the first transaction are excluded from being copied to the target table. At step the status of the trigger associated with the source table is determined to indicate to update the target table. At step in a second transaction i the one or more data entries of the source table are updated and ii one or more data entries of the target table are updated based on the user input. At step the content of the target table is updated based on the one or more data entries of the logging table.

At step the content of the source table is segmented into one or more segments. At step each segment of the content is copied from the source table to the target table. At step the segment of content currently being copied from the source table to the target table is locked. In some examples one or more table rows of content associated with the segment of the source table content are locked. At step modification of the content associated with the segment of content of the source table is restricted based on the locking.

At step the target table is created. In some examples the target table is associated with a second structure differing from the first structure. At step the second structure is associated with the content of the source table to be copied to the target table. At step a first table name associated with the source table is identified. At step the first table name associated with the source table is replaced with a second table name. At step the first table name is associated with the target table.

In some further implementations for ODT the updates of insertion updating and deleting data entries e.g. of the source table are distinguished. For example for insert and update operations for every field in the source table the corresponding field identified by name in the target table is filled with the new value either as an insert row is new or has not yet been transferred by IDT or an update. Prerequisite for such is that the data types in the source table and target table are compatible i.e. the value from the source field can be entered into the target field without conversion. In some examples for fields that exist only in the source table or the target table are omitted. Specifically the omitted fields in the target table are filled with either the default value for the particular data type field or null. Fields that exist only in the source table are ignored. Additionally the key field values of the affected row are written to the logging table either as insert or update. Furthermore for example for delete operations the rows identified by the key values are deleted from the target table and the logging table. In some examples exceptions resulting from the row not existing in either of these tables can be ignored as this indicates that the row has not yet been transferred by ODT or IDT.

In some further implementations for IDT a database view access view is used to exclude ODT transferred rows as a transfer source and the target table as transfer destination. The access view combines information from the source table and the logging table to restrict the full source data set to those rows not yet transferred by ODT. Modifications except delete operations of the source table are transparent as they are immediately reflected in the logging table and excluded from the data set read via the access view. Delete operations result in the deleted row disappearing from the result set. The data read via the access view is segmented and the data transfer is executed. The segment to be transferred is locked against concurrent write access to prevent a production transaction to alter and commit parts of the segment data between the read and commit point in time of the IDT transaction.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory program carrier for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example Linux UNIX Windows Mac OS Android iOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit .

Computers suitable for the execution of a computer program include by way of example can be based on general or special purpose microprocessors or both or any other kind of central processing unit. Generally a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a wide area network WAN e.g. the Internet and a wireless local area network WLAN .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order e.g. this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system modules and components in the implementations described above should not be understood as requiring such separation in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

