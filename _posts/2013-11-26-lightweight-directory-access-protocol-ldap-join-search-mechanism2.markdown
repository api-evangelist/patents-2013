---

title: Lightweight directory access protocol (LDAP) join search mechanism
abstract: Complex search tasks are performed relative to an LDAP directory with a minimal quantity of LDAP search operations. Search tasks that follow relationships between LDAP entries can be performed, even under circumstances in which those relationships are not represented by the hierarchical structure of the LDAP directory. A client application can specify an LDAP control that the client application sends to the LDAP server along with the LDAP search operation. The LDAP server's receipt of the LDAP control can cause the LDAP server to modify the behavior of the search operation so that the LDAP server follows potentially non-hierarchical specified relationships between the LDAP entries in determining the set of entries to return as results of the search operation. As a result, the LDAP server can return a complete set of related result entries to the client application in response to a single LDAP search operation directed by the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09608958&OS=09608958&RS=09608958
owner: Oracle International Corporation
number: 09608958
owner_city: Redwood Shores
owner_country: US
publication_date: 20131126
---
The present application claims priority under 35 U.S.C. 119 e to Provisional U.S. Patent Application Ser. No. 61 777 932 filed Mar. 12 2013 and titled LIGHTWEIGHT DIRECTORY ACCESS PROTOCOL LDAP JOIN SEARCH MECHANISM the contents of which are incorporated by reference herein.

The present application relates to the processing of lightweight directory access protocol LDAP searches.

The Lightweight Directory Access Protocol LDAP is a network protocol for accessing directories. It is based on the X.500 a Comit Consultatif International T l phonique et T l graphique CCITT standard for directory services that is part of the Open Systems Interconnection OSI suite of services. The X.500 directory service is a global directory service. Its components cooperate to manage information about objects such as countries organizations people machines and so on in a worldwide scope. It provides the capability to look up information by name a white pages service and to browse and search for information a yellow pages service .

The information is held in a directory information base DIB . Entries in the DIB are arranged in a tree structure called the directory information tree DIT . Each entry is a named object and consists of a set of attributes. Each attribute has a defined attribute type and one or more values. The directory schema defines the mandatory and optional attributes for each class of object called the object class . Each named object may have one or more object classes associated with it.

The X.500 namespace is hierarchical. An entry is unambiguously identified by a distinguished name DN . A distinguished name is the concatenation of selected attributes from each entry called the relative distinguished name RDN in the tree along a path leading from the root down to the named entry. Users of the X.500 directory may subject to access control interrogate and modify the entries and attributes in the DIB.

Although the concepts of distinguished names and relative distinguished names are core to the X.500 model the X.500 standard itself does not define any string representation for names. What is communicated between the X.500 components is the structural form of names. The reasoning behind this is that the standard is sufficient to allow different implementations to interoperate. String names are not communicated between different implementations. Instead they are necessary only for interaction with end users. For that purpose the standard allows any representation not necessarily only string representations.

Each system that is based on the X.500 model such as the LDAP defines its own string representation. For example in the LDAP a DN s RDNs are arranged right to left separated by the comma character . For example a name that starts with c us at the top and leads to cn Rosanna Lee at the leaf may be expressed in the string 

Internet Engineering Task Force IETF Request For Comments RFC 1777 defines what is now called version 2 of the LDAP or LDAP v2 . LDAP v2 is a protocol that can be easily implemented with special focus on being able to build small and simple clients. One way that LDAP v2 achieves simplification is by using a lot of strings and minimizing wherever possible the use of structures. DNs for example are represented in the protocol as strings as are attribute type names and many attribute values. The protocol consists of the client s sending requests to the server to which the server responds though not necessarily in the same order in which the requests were sent. Each request is tagged with an ID so that requests and responses can be matched. The protocol works over either Transmission Control Protocol TCP or User Datagram Protocol UDP although the TCP version is most commonly used. Because of the focus on clients the LDAP community also defines standards for the string representation of DNs in IETF RFC 1779 search filters in IETF RFC 1960 and attribute syntaxes in IETF RFC 1778 for a C language based application programming interface API in IETF RFC 1823 and for the format of uniform resource locators URLs for accessing LDAP services in IETF RFC 1959 . IETF RFCs 1777 1779 1960 1778 1823 and 1959 available online at ietf.org are incorporated by reference herein.

Various operations are defined in the LDAP v2. The bind operation is used to start a connection with the LDAP server. The LDAP is a connection oriented protocol. The client specifies the protocol version and the client authentication information. The unbind operation is used to terminate the connection with the LDAP server. The search operation is used to search the directory. The client specifies the starting point base object of the search the search scope the object only its children or the subtree rooted at the object and a search filter as discussed in IETF RFC 1960 . It can also supply other information to control the search such as the names of the attributes to return and the size and time limits. The search results consist of LDAP entries and the attributes requested that satisfy the filter. The modify operation is used to modify an existing entry. The client specifies the name of the entry to be modified and a list of modifications. Each modification consists of an attribute and information regarding whether its values are to be added deleted or replaced. The add operation is used to add a new entry. The client specifies the name of the new entry and a set of attributes for the new entry. The delete operation is used to remove an existing entry. The client specifies the name of the entry to remove. The modify RDN operation is used to change the RDN of the last component of an existing entry that is to assign the entry a new name in the same context . The client specifies the DN for the entry and the new RDN. The compare operation is used to test whether an entry has an attribute value pair. The client specifies the name of the entry and the name and value to check. The abandon operation is used to terminate an outstanding request. IETF RFC 1960 available online at ietf.org is incorporated by reference herein.

One of the most useful features that an LDAP directory offers is its yellow pages or search service mentioned above in the discussion of operations. An application can compose a query consisting of attributes of entries that the application is seeking and submit that query to the directory. The directory then returns a list of entries that satisfy the query. For example an application could ask the directory for all entries with a bowling average greater than 200 or all entries that represent a person with a surname beginning with Sch. The simplest form of search requires that the application specify a set of attributes that an entry must have and the name of the target context in which to perform the search. In addition to specifying a search using a set of attributes an application can specify a search in the form of a search filter. A search filter is a search query expressed in the form of a logical expression. The syntax of search filters is described in IETF RFC 2254. The following search filter specifies that the qualifying entries must have an sn attribute with a value of Geisel and a mail attribute with any value 

Each item in the filter is composed using an attribute identifier and either an attribute value or symbols denoting the attribute value. For example the item sn Geisel means that the sn attribute must have the attribute value Geisel and the item mail indicates that the mail attribute must be present. Each item is enclosed within a set of parentheses as in sn Geisel . These items are composed using logical operators such as conjunction to create logical expressions as in the immediately foregoing example. Each logical expression can be further composed of other items that themselves are logical expressions as in the following search filter 

This example requests either entries that have both a sn attribute of Geisel and the mail attribute or entries whose sn attribute begins with the letter L. IETF RFC 2254 available online at ietf.org is incorporated by reference herein.

The LDAP v3 defined in RFC 2251 is designed to address some of the limitations of the LDAP v2 in the areas of internationalization authentication referral and deployment. It also allows new features to be added to the protocol without also requiring changes to the protocol. This is done by using extensions and controls. In addition to the repertoire of predefined operations such as search and modify the LDAP v3 defines an extended operation. The extended operation takes a request as an argument and returns a response. The request contains an identifier that identifies the request and the arguments of the request. The response contains the results of performing the request. The pair of extended operation request response is called an extension. For example there can be an extension for Start TLS which is a request for the client to the server to activate the Start TLS protocol. These extensions can be standard defined by the LDAP community or proprietary defined by a particular directory vendor . Another way to add new features is by using a control. The LDAP v3 allows the behavior of any operation to be modified through the use of controls. Any number of controls may be sent along with an operation and any number of controls may be returned with its results. For example a sort control can be sent along with a search operation where the sort control can tell the LDAP server to sort the results of the search according to a name attribute. Like extensions such controls can be standard or proprietary. IETF RFC 2251 available online at ietf org is incorporated by reference herein.

In the LDAP v3 a control can be either a request control or a response control. A request control is sent from the client to the server along with an LDAP operation. A response control is sent from the server to the client along with an LDAP response. An application typically does not deal directly with the control interface. Instead it deals with classes that implement this interface. The application gets control classes either as part of a repertoire of controls standardized through the IETF or from directory vendors vendor specific controls . The request control classes can have constructors that accept arguments in a type safe and user friendly manner and the response control classes can have access methods for getting the data of the response in a type safe and user friendly manner.

When a client sends a request control to a server it specifies the control s criticality. The criticality determines whether the server can ignore the request control. When the server receives a critical request control the server either processes the request with the control or rejects the entire request. When a server receives a noncritical request control the server processes the request either with the control or by ignoring the control. The server does not reject the request simply because the server does not support the control. Additionally a designer defining a control assigns that control a unique object identifier OID . For example the sort control has an identifier of 1.2.840.113556.1.4.473.

Although the LDAP provides an operation for searching a directory for entries whose attributes have specified values using the search operation can be quite unwieldy when the performance of certain kinds of tasks is desired. One kind of task to which the search operation is not particularly well suited is a search for entities that are formally related to each other in a manner that is not captured by the hierarchical structure of the directory itself. For example although each person s entry in a business organization s directory might indicate attributes that identify the entries of the person s friends the hierarchical structure of the directory is not likely to be constructed based on friendships and so there is not necessarily an easy way of determining a specified person s extended network of friends using the search operation. As matters currently stand if a particular entry indicated that a particular person has three friends then an application would issue a first search operation to the LDAP server to obtain the particular entry from the LDAP server and then the application would inspect the friends attributes of that particular entry to determine who the particular person s immediate friends are. Next to find the friends of those people as part of an overarching attempt to discover the particular person s extended friends network the application would issue subsequent separate search operations to the LDAP server for each immediate friend to obtain that immediate friend s entry from the LDAP server and then the application would inspect the friends attributes of each of those entries to determine who the friends of the particular person s immediate friends are.

As can be imagined the multiplicity of LDAP search operations complicates the design of a client application that performs such tasks relative to an LDAP directory. The multiplicity of LDAP search operations additionally degrades the performance of the overarching search task due to the consumption of a significant quantity of processing cycles on machines executing the client application and the LDAP server. The multiplicity of LDAP search operations also increases the expense of the overarching search task in terms of networking resources due to the significant network bandwidth that is consumed by each request response exchange between the client application and the LDAP server.

Certain embodiments of the invention involve techniques for performing complex search tasks relative to an LDAP directory with a minimal quantity of LDAP search operations. Such techniques are especially useful for performing search tasks that follow relationships between LDAP entries often specified by references in one LDAP entry to another LDAP entry particularly under circumstances in which those relationships are not represented by the hierarchical structure of the LDAP directory. According to one technique a client application specifies an LDAP control that the client application sends to the LDAP server along with the LDAP search operation. The LDAP server s receipt of the LDAP control causes the LDAP server to modify the behavior of the search operation so that the LDAP server follows potentially non hierarchical specified relationships between the LDAP entries in determining the set of entries to return as results of the search operation. As a result the LDAP server returns a complete set of related result entries to the client application in response to a single LDAP search operation received from the client application.

The foregoing together with other features and embodiments will become more apparent when referring to the following specification claims and accompanying drawings.

In the following description for the purposes of explanation specific details are set forth in order to provide a thorough understanding of embodiments of the invention. However it will be apparent that the invention may be practiced without these specific details.

According to an embodiment of the invention client application can specify a special relationship following LDAP request control that client application sends to LDAP server along with an LDAP search operation. The specification of the LDAP request control can include a unique OID for the LDAP request control an indication that the LDAP request control is critical and an identifier of an LDAP directory attribute that indicates the inter entry relationships that the LDAP search is to follow in constructing search results. For example the LDAP request control can take the form 

In this case 1.3.6.1.4.1.26027.2.3.1 is the OID true expresses criticality and friend is the LDAP directory attribute that indicates the inter entry relationships that the LDAP search is to follow in constructing search results. Because friend is the specified attribute LDAP server can modify the performance of the search operation that it performs upon receiving the LDAP request control along with the LDAP search operation so that LDAP server potentially includes depending on the search s scope in its search some immediately related LDAP directory entries that are specified as values of the base LDAP directory entry s friends attribute s and potentially again depending on the search s scope some non immediately related LDAP directory entries that are specified as values of the friends attributes of those immediately related LDAP directory entries and so on and so forth.

Essentially the inclusion of the relationship following LDAP request control with the LDAP search operation causes LDAP server to expand its search along specified relationships e.g. friends by following references indicated as values of the specified relationship indicating attributes e.g. friends . In one embodiment of the invention LDAP server can be designed or modified or otherwise configured to recognize the special LDAP request control identified by its unique OID. In such an embodiment of the invention LDAP server can be designed or modified or otherwise configured to modify all LDAP search operations that are accompanied by this special LDAP request control so that those LDAP search operations are executed in a relationship following manner such as that described above.

In an embodiment of the invention client application can send to LDAP server an LDAP search operation that specifies as parameters a search base a search scope and a search filter. In an embodiment of the invention the receipt of the relationship following LDAP request control along with the LDAP search operation causes LDAP server to interpret these parameters in the following manner in its execution of the search operation relative to LDAP directory .

LDAP server can interpret the value of the search base parameter to identify the particular LDAP directory entry at which the search operation is to be started LDAP server can follow the inter entry references specified by this particular LDAP directory entry to discover the next level of LDAP directory entries that may qualify as search results after which LDAP server can follow the inter entry references specified by those LDAP directory entries to discover yet the next level of LDAP directory entries that may qualify as search results and so on and so forth . The specification of the base entry can have a significant impact on the constitution of the search results returned inasmuch as some LDAP directory entries might not be related to some other LDAP directory entries by inter entry references indicated as values of the control specified attribute.

LDAP server can interpret the value of the search scope parameter to identify the depth or the quantity of levels to which the inter entry references of the LDAP directory entries are to be followed in compiling the search results. Put another way LDAP server can interpret the value of the scope parameter to identify the maximum number of links away from the base LDAP directory entry that LDAP server is permitted to follow in compiling the search results. In the foregoing discussion links refers to relations that exist due to a reference in one LDAP entry to another LDAP entry links does not refer to the hierarchical relationships between LDAP entries that inherently exist due to the LDAP directory s structure.

For example if the scope parameter is base then LDAP server can exclude from the search results all LDAP directory entries that are not immediately related to or are more than one link away from the base LDAP directory entry. For another example if the scope parameter is one then LDAP server can exclude from the search results all LDAP directory entries that are more than two links away from the base LDAP directory entry. For another example if the scope parameter is sub then LDAP server can include in the search results all LDAP directory entries that can be discovered by following the inter entry references regardless of how distant in links those LDAP directory entries are from the base LDAP directory entry. For another example if the scope parameter is subordinate then LDAP server can include in the search results all LDAP directory entries that would be returned if the scope parameter were sub except for the base LDAP directory entry itself which is excluded from the search results .

LDAP server can interpret the value of the search filter parameter to identify criteria that an LDAP directory entry must satisfy in order to be included in the search results regardless of whether that LDAP directory entry can be discovered by repeatedly following inter entry relationships radiating outward from the base LDAP directory entry. Thus even if a particular LDAP directory entry falls within the specified search scope that particular LDAP directory entry can be excluded from the search results if the values of that particular LDAP directory entry s attributes fail to satisfy the criteria that the search filter parameter specifies. For example the search filter parameter might specify as a criterion that a particular LDAP directory entry s location attribute must have a value that is within a specified distance away from a location attribute of the base LDAP directory entry s location attribute. Under such circumstances all LDAP directory entries whose location attribute values were beyond the specified distance away from the base LDAP directory entry s location attribute value would be excluded from the search results even if those LDAP directory entries were directly referenced by the control specified attribute of the base LDAP directory entry.

In block the LDAP server can receive from a client application an LDAP request control along with an LDAP search operation. The LDAP request control can specify an OID that causes the LDAP server to recognize the LDAP request control as being a control that instructs the LDAP server to perform the search operation in a manner that follows inter entry references in compiling search results.

In block in response to receiving the LDAP request control the LDAP server can modify the performance of the search operation to follow inter entry references in compiling search results. In block the LDAP server can add to a queue of LDAP directory entries a base LDAP directory entry that is specified as a parameter of the LDAP search operation. In block the LDAP server can determine whether any LDAP directory entries remain in the queue of LDAP directory entries. If at least one LDAP directory entry remains in the queue of LDAP directory entries then control passes to block . Otherwise if the queue of LDAP directory entries is empty then technique ends the LDAP server has at this point returned the complete set of search results to the client application as a response to the LDAP search operation that the LDAP server received from the client application in block .

In block the LDAP server can remove from the queue of LDAP directory entries the particular LDAP directory entry that is on the top of that queue and can set the current LDAP directory entry to be that particular LDAP directory entry. In block the LDAP server can determine whether the current LDAP directory entry is within a search scope that is specified as a parameter of the LDAP search operation. If the current LDAP directory entry is within the specified search scope then control passes to block . Otherwise if the current LDAP directory entry is not within the specified search scope then control passes back to block under such circumstances the LDAP server does not add the current LDAP directory entry to the set of search results that the LDAP server is compiling.

In block the LDAP server can determine whether the current LDAP directory entry s attribute values satisfy all filter criteria that are specified as a parameter of the LDAP search operation. If the current LDAP directory entry s attribute values satisfy all those filter criteria then control passes to block . Otherwise if the current LDAP directory entry s attribute values fail to satisfy at least one of those filter criteria then control passes to block under such circumstances the LDAP server does not return the current LDAP directory entry as a search result.

In block the LDAP server can return the current LDAP directory entry as one of the search results that the LDAP server is retrieving. Control then passes to block .

In block the LDAP server can add to the queue of LDAP directory entries all LDAP directory entries that are referenced by values of the current LDAP directory entry s relationship attribute. As is discussed above the relationship attribute to be examined can be the attribute that is specified as a parameter in the LDAP request control that the LDAP server received along with the LDAP search operation in block . Thus for example if the LDAP request control specifies friend as a parameter then the LDAP server can add to the queue of LDAP directory entries all LDAP directory entries that are referenced by values of the current LDAP directory entry s friend attribute. In one embodiment of the invention the LDAP server can add these related LDAP directory entries to the queue of LDAP directory entries even if the current LDAP entry is to be excluded from the search results due to its failure to satisfy the search filter criteria. In an embodiment of the invention the LDAP server can refrain from adding to the queue of LDAP directory entries any LDAP directory entries that the LDAP server has previously added to the queue during the execution of this particular instance of the LDAP search operation in order to avoid following infinite loops the LDAP server can maintain a separate list of such previously added LDAP directory entries. Control then passes back to block .

As can be seen from the discussion of above in an embodiment of the invention the LDAP server returns each search result to the client application as that search result is located.

Following is an example of an LDAP directory entry that could be specified within an LDAP directory relative to which technique could be performed. As will be seen below the example LDAP directory entry includes among other attributes three friend attributes that have values that refer to other LDAP directory entries within the same LDAP directory. Technique can follow such inter entry references in executing a relationship following search operation as described above. Significantly these references might not be and in an embodiment are not apparent at all from the inherent hierarchical structure of the LDAP directory tree 

If the LDAP request control specified friend as the attribute that specified the inter entry relationships that the LDAP server were to follow in performing the search operation then the values of these friend attributes of the above example LDAP directory entry would in one embodiment cause the LDAP server to examine the LDAP directory entries having user.0 user.1 and user.2 as the respective values of their uid attributes to determine whether these LDAP directory entries also fell within the search scope and satisfied the search filter criteria. If these directory entries fell within the search scope and satisfied the search filter criteria then these entries could be returned within the LDAP search results even if they were not hierarchically descended from the base search entry or any other particular entry in the LDAP directory. Provided that the search scope was not at that point exhausted the friend attributes of these LDAP directory entries could then be examined and potentially followed in like manner.

At operation the client sends to the LDAP server a search request that specifies the control discussed herein a base entry a scope a filter and a relationship attribute. Starting at operation the LDAP server begins to process the search request in the special inter entry link following manner dictated by the control. Notably in an embodiment the client does not send any further request to the LDAP server prior to the conclusion of the search at operation .

At operation the LDAP server returns to the client as a search result the first generation base entry assuming that the base entry is within the specified scope and that the base entry satisfies the specified filter. The LDAP server then follows each of the links expressed by each of the base entry s attributes that have the same name but not necessarily the same value as the specified relationship attribute.

At operation the LDAP server returns to the client as a search result a second generation Entry 1 that the LDAP server followed from a link expressed in the base entry assuming that Entry 1 is within the specified scope and that Entry 1 satisfies the specified filter. Assuming that the specified scope is not yet exhausted the LDAP server will eventually follow each of the links expressed by each of Entry 1 s attributes that have the same name but not necessarily the same value as the specified relationship attribute.

The LDAP server may continue through each of the base entry s links in a similar manner eventually reaching the last such link to a second generation Entry N. At operation the LDAP server returns to the client as a search result Entry N that the LDAP server followed from a link expressed in the base entry assuming that Entry N is within the specified scope and that Entry N satisfies the specified filter. Assuming that the specified scope is not yet exhausted the LDAP server will eventually follow each of the links expressed by each of Entry N s attributes that have the same name but not necessarily the same value as the specified relationship attribute.

At operations through the LDAP server returns to the client as search results third generation Entries 1 1 through 1 M that the LDAP server followed from links expressed in Entry 1 assuming that Entries 1 1 through 1 M are each within the specified scope and that those entries satisfy the specified filter. Assuming that the specified scope is not yet exhausted the LDAP server will eventually follow each of the links expressed by each of Entry 1 1 s through Entry 1 M s attributes that have the same name but not necessarily the same value as the specified relationship attribute.

The LDAP server may continue through each of the second generation entry s links in a similar manner eventually reaching the last such links to third generation Entries N 1 through N M. At operations through the LDAP server returns to the client as search results third generation Entries N 1 through N M that the LDAP server followed from links expressed in Entry N assuming that Entries N 1 through N M are each within the specified scope and that those entries satisfy the specified filter. Assuming that the specified scope is not yet exhausted the LDAP server will eventually follow each of the links expressed by each of Entry N 1 s through Entry N M s attributes that have the same name but not necessarily the same value as the specified relationship attribute.

Eventually the search scope may be exhausted and or no more links may remain to be followed. At that point the LDAP server optionally may send to the client an indication that the search is complete at operation . Notably each of the search results in the foregoing operations are returned in response to a single client request . The client does not need to send multiple requests to the LDAP server to cause the LDAP server to follow the inter entry links indicated by the values of the request specified relationship attribute.

In one embodiment mechanisms exist to halt a search even if the specified scope has not yet been exhausted and even if qualifying inter entry links still remain to be followed. For example in one embodiment prior to the conclusion of the search the client may send to the LDAP server an extended cancel request. In an embodiment the receipt of such a request causes the LDAP server to halt and discontinue the current search ending with the last result returned if any. For another example in one embodiment the LDAP server can be configured exclusive of any direction by the client to halt and discontinue all searches that exceed a specified maximum quantity of search results. For yet another example in one embodiment the LDAP server can be configured exclusive of any direction by the client to halt and discontinue all searches whose execution times exceed a specified maximum execution time. Under such conditions the LDAP server can optionally inform the client of the reason that the search was halted and discontinued so that the client is aware that the result set might not be complete. Additionally or alternatively in one embodiment the client can specify such maximum quantity and or maximum search time limits to the LDAP server along with the search request and the LDAP server accordingly abides by such constraints.

Client computing devices may be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows and or Apple Macintosh operating systems cell phones or PDAs running software such as Microsoft Windows Mobile and being Internet e mail SMS Blackberry or other communication protocol enabled and or workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems . Alternatively client computing devices and may be any other electronic device such as a thin client computer Internet enabled gaming system and or personal messaging device capable of communicating over a network e.g. network described below . Although exemplary system environment is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

System environment may include a network . Network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP SNA IPX AppleTalk and the like. Merely by way of example network can be a local area network LAN such as an Ethernet network a Token Ring network and or the like a wide area network a virtual network including without limitation a virtual private network VPN the Internet an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the IEEE 802.11 suite of protocols the Bluetooth protocol known in the art and or any other wireless protocol and or any combination of these and or other networks.

System environment also includes one or more server computers which may be general purpose computers specialized server computers including by way of example PC servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to LDAP server of which has been configured to recognize and respond to the relationship following LDAP request control discussed above.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP servers FTP servers CGI servers Java servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM and the like.

System environment may also include one or more databases . Databases may reside in a variety of locations. By way of example one or more of databases may reside on a storage medium local to and or resident in server . Alternatively databases may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases may include relational databases such as Oracle 10g which are adapted to store update and retrieve data in response to SQL formatted commands.

Computer system may additionally include a computer readable storage media reader a communications subsystem e.g. a modem a network card wireless or wired an infra red communication device etc. and working memory which may include RAM and ROM devices as described above. In some embodiments computer system may also include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

Computer readable storage media reader can further be connected to a computer readable storage medium together and optionally in combination with storage device s comprehensively representing remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing computer readable information. Communications system may permit data to be exchanged with a network and or any other computer described above with respect to the system environment.

Computer system may also comprise software elements shown as being currently located within working memory including an operating system and or other code such as an application program which may be a client application Web browser mid tier application RDBMS etc. . In an exemplary embodiment working memory may include executable code and associated data structures such as caches used for the techniques described above. It should be appreciated that alternative embodiments of computer system may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices data signals data transmissions or any other medium which can be used to store or transmit the desired information and which can be accessed by a computer.

Although specific embodiments of the invention have been described various modifications alterations alternative constructions and equivalents are also encompassed within the scope of the invention. Embodiments of the present invention are not restricted to operation within certain specific data processing environments but are free to operate within a plurality of data processing environments. Additionally although embodiments of the present invention have been described using a particular series of transactions and steps it should be apparent to those skilled in the art that the scope of the present invention is not limited to the described series of transactions and steps.

Further while embodiments of the present invention have been described using a particular combination of hardware and software it should be recognized that other combinations of hardware and software are also within the scope of the present invention. Embodiments of the present invention may be implemented only in hardware or only in software or using combinations thereof.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that additions subtractions deletions and other modifications and changes may be made thereunto without departing from the broader spirit and scope as set forth in the claims.

