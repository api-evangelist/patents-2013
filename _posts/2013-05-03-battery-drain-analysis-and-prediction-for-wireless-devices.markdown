---

title: Battery drain analysis and prediction for wireless devices
abstract: Technologies for wireless device battery analysis and prediction are disclosed. A described technology includes extracting first attributes associated with first applications; collecting data samples from wireless devices that are configured to execute one or more of the first applications, each of the data samples including (i) one or more application identifiers identifying one or more processes executing on a wireless device during a time duration, and (ii) battery drain information associated with the time duration; determining battery usage characteristics of the extracted first attributes based on correlations among a portion of the data samples; extracting second attribute(s) associated with a second application; identifying one or more of the extracted first attributes that correspond respectively to the second attribute(s); and using one or more of the determined battery usage characteristics that correspond respectively to the one or more identified first attributes to determine a battery usage profile for the second application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09286568&OS=09286568&RS=09286568
owner: Asurion, LLC
number: 09286568
owner_city: Nashville
owner_country: US
publication_date: 20130503
---
Wireless devices such as cellphones smartphones or tablets include a battery to provide a portable source of energy enabling wireless device users to move around freely without being connected to a power supply. Wireless devices can download and install applications such as games video teleconference utilities or word processing applications which have different respective battery usage properties that impact battery life. Further different device activities and settings e.g. network usage camera usage brightness setting communication mode also have different battery usage properties that can impact battery life. Wireless devices can display remaining battery life information e.g. a number of bars or colored portions displayed within a rectangular area that corresponds to a remaining battery capacity level.

This document describes among other things technologies relating to wireless device battery analysis and prediction. In one aspect a described technique includes collecting wireless device information including battery drain information relating to a battery of a wireless device determining based on the collected wireless device information a plurality of prediction outcomes corresponding respectively to a plurality of different battery usage prediction models determining accuracies respectively for the battery usage prediction models generating weight values respectively for the battery usage prediction models based on the determined accuracies and generating a battery prediction result for the wireless device based on the prediction outcomes and the generated weight values. Other forms of this aspect may include corresponding systems apparatus and computer software encoded on a non transitory computer readable storage medium.

These and other implementations may include one or more of the following features. The battery usage prediction models can include a static model that is configured to extrapolate a battery usage profile for a new application from data collected for one or more other applications that have been previously measured for battery usage. In some implementations the battery usage profile is based on an extrapolation of one or more similarities between the new application and the one or more other applications. Collecting the wireless device information can include extracting one or more attributes of a new application. Determining the prediction outcomes can include retrieving from a database one or more battery usage characteristics for the one or more extracted attributes of the new application extrapolating a battery usage profile for the new application based on the one or more retrieved battery usage characteristics for the one or more extracted attributes and producing within a static model of the battery usage prediction models a prediction outcome based on the extrapolated battery usage profile. Determining the prediction outcomes can include producing within a dynamic model of the battery usage prediction models a prediction outcome based on the battery drain information. In some implementations the dynamic model is responsive to changes in the battery drain information that are observed via two or more measurements of the battery. Generating the weight values can include setting for a first duration a weight value for the static model higher than weight values for the one or more dynamic models in response to a detection of the new application executing on the wireless device and setting for a second duration the weight value for the static model based on the relative performance of the static model with respect to the one or more dynamic models the second duration being subsequent to the first duration. Implementations can include determining an estimated time to a depleted state of the battery based on the battery prediction result. Implementations can include sending a battery measurement sample to a server the battery measurement sample including one or more process identifiers of processes executing on the wireless device and receiving from the server battery prediction information corresponding to the one or more process identifiers. Determining the prediction outcomes can include using the battery prediction information.

In another aspect a technique for battery analysis and prediction includes extracting first attributes associated with a plurality of first applications collecting data samples from a plurality of wireless devices that are configured to execute one or more of the first applications each of the data samples including i one or more application identifiers identifying one or more processes executing on a wireless device during a time duration and ii battery drain information associated with the time duration determining battery usage characteristics of the extracted first attributes based on correlations among at least a portion of the data samples extracting one or more second attributes associated with a second application identifying one or more of the extracted first attributes that correspond respectively to the extracted second attributes and using one or more of the determined battery usage characteristics that correspond respectively to the identified first attributes to determine a battery usage profile for the second application. Other forms of this aspect include corresponding systems apparatus and computer software encoded on a non transitory computer readable storage medium.

These and other implementations may include one or more of the following features. Determining the battery usage characteristics comprises generating statistical coefficients for the extracted first attributes. In some implementations the battery usage profile for the second application is based on one or more of the statistical coefficients. In some implementations the battery usage profile includes a predicted battery drain rate. Implementations can include receiving an identifier associated with the second application from a wireless device and providing based on the received identifier the battery usage profile to the wireless device.

In another aspect a system for battery analysis and prediction can include a storage device and a processor where the storage device can be configured to store wireless device information including battery drain information relating to a battery of a wireless device. The processor can be communicatively coupled with the storage device and can be configured to i determine based on the wireless device information a plurality of prediction outcomes corresponding respectively to a plurality of different battery usage prediction models ii determine accuracies respectively for the battery usage prediction models iii generate weight values respectively for the battery usage prediction models based on the accuracies and iv generate a battery prediction result for the wireless device based on the prediction outcomes and the weight values. In some implementations the system includes a server that includes the process and the storage device.

In another aspect a system for battery analysis and prediction can include a storage device and a processor where the storage device can be configured to store data samples from a plurality of wireless devices that are configured to execute one or more of a plurality of first applications each of the data samples including i one or more application identifiers identifying one or more processes executing on a wireless device during a time duration and ii battery drain information associated with the time duration. The processor can be communicatively coupled with the storage device and can be configured to extract first attributes associated with the plurality of first applications ii determine battery usage characteristics of the first attributes based on correlations among at least a portion of the data samples iii extract one or more second attributes associated with a second application iv identify one or more of the first attributes that correspond respectively to the second attributes as identified first attributes and v use one or more of the battery usage characteristics that correspond respectively to the identified first attributes to determine a battery usage profile for the second application.

Particular configurations of the technology described in this document can be implemented so as to realize one or more of the following potential advantages. A described technology can be used to combine prediction outcomes in a way that provides smoother prediction results over time for display on a wireless device. A described technology can be used to score a new application in terms of battery usage without having to directly measure battery usage of a new application. A described technology can be used to increase overall accuracy of a battery life prediction.

Details of one or more implementations of the subject matter described in this document are set forth in the accompanying drawings and the description below. Other features aspects and potential advantages of the subject matter will become apparent from the description the drawings and the claims.

With increasing demands placed on a wireless device s battery wireless service providers can provide mechanisms for analyzing an application s battery usage and predicting battery life to manage energy consumption. Such mechanisms can identify applications executing on a device and characterize their battery depletion rate with respect to other applications in the general application population e.g. high medium or low battery drain rates. Further such mechanisms can estimate when a wireless device will power down based on an estimated battery depletion rate and provide guidance to device users to prolong battery life.

A static prediction model can base its prediction outputs on one or more sources such as a process list or a statistical database . The statistical database can store information such as relationships between application attributes and corresponding battery usage information that have been inferred by analyzing battery drain rates for multiple applications. The static prediction model can use information from the statistical database to extrapolate battery usage for new applications e.g. applications that have not yet been analyzed using their own battery drain rate observations. In some implementations one or more components of the battery life prediction architecture can be implemented by a data processing apparatus such as a server. For example a server can host the statistical database . In some implementations a server can compute prediction model outputs based on battery monitor values received from a wireless device.

A model accuracy determiner can generate weight values for the prediction models respectively. A weight value can be based on for example an accuracy of a model. In some implementations a weight value can be expressed as a fractional value where a higher fractional value indicates a more accurate model. In some implementations a weight value for a model can be based on a moving average of error values for the model. In some implementations weight values can be initialized to a default value such as 1 N where N is the number of models feeding into the unified client model . The model accuracy determiner can generate an error value by comparing a prediction value from a model with a corresponding value from the battery monitor . The model accuracy determiner can use a buffer to synchronize prediction values and battery monitor values in time. A prediction display engine can receive a battery prediction result from the unified client model and generate information to display on a wireless device such as a predicted battery depletion time frame.

At the process determines based on the collected wireless device information a plurality of prediction outcomes corresponding respectively to a plurality of different battery usage prediction models. The battery usage prediction models can include a static model and a dynamic model. In some implementations a static model can be configured to extrapolate a battery usage profile for a new application from data collected for one or more other applications that have been previously measured for battery usage. In some implementations a battery usage profile for a new application is based on an extrapolation of one or more similarities between the new application and the one or more other applications. Collecting the wireless device information at can include extracting one or more attributes of the new application. Determining the prediction outcomes at can include retrieving from a database one or more battery usage characteristics for the one or more extracted attributes of the new application extrapolating a battery usage profile for the new application based on the one or more retrieved battery usage characteristics for the one or more extracted attributes and producing within a static model of the battery usage prediction models a prediction outcome based on the extrapolated battery usage profile. Determining the prediction outcomes at can include producing within a dynamic model of the battery usage prediction models a prediction outcome based on the battery drain information. The dynamic model can be responsive to changes in the battery drain information that are observed via two or more measurements of the battery.

At the process determines accuracies respectively for the battery usage prediction models. Determining accuracies can include comparing a predicted value for a duration with an observed value for that duration. At the process generates weight values respectively for the battery usage prediction models based on the determined accuracies. At the process generates a battery prediction result for the wireless device based on the prediction outcomes and the generated weight values. Generating a battery prediction result can include combining the weighted versions of the prediction outcomes. The process can include determining an estimated time to a depleted state of the battery based on the battery prediction result.

In some implementations generating the weight values at can include setting for a first duration a weight value for the static model higher than weight values for the one or more dynamic models in response to a detection of the new application executing on the wireless device. Generating the weight values at can include setting for a second subsequent duration the weight value for the static model based on the relative performance of the static model with respect to a dynamic model.

At the process collects data samples such as battery measurement samples from a plurality of wireless devices that are configured to execute one or more of the first applications. A data sample can include one or more application identifiers identifying one or more processes executing on a wireless device during a time duration and battery drain information associated with the time duration. In some implementations a data sample includes a process identification string and the process extracts an application identifier from the string. In some implementations a battery drain rate is derived from two or more data samples that each contain a battery capacity level value. In some implementations a data sample includes a battery drain rate.

At the process determines battery usage characteristics of the extracted first attributes based on correlations among at least a portion of the data samples. Determining the battery usage characteristics can include performing a statistical analysis such as a multiple linear regression MLR analysis hierarchical clustering analysis or principle component analysis PCA . Other types of statistical analysis are possible.

At the process extracts one or more second attributes associated with a second application. Unlike the first applications the second application has typically not be observed yet for battery usage. At the process identifies one or more of the extracted first attributes that correspond respectively to the extracted second attributes. At the process uses one or more of the determined battery usage characteristics that correspond respectively to the identified first attributes to determine a battery usage profile for the second application. A battery usage characteristic can include a battery drain rate. In some implementations a battery usage characteristic includes one or more coefficients that are generated by a statistical analysis.

In some implementations determining the battery usage characteristics at can include generating statistical coefficients for the extracted first attributes. In some implementations a battery usage profile for the second application is based on one or more of the statistical coefficients. In some implementations a battery usage profile can include a score indicating a relative degree of battery consumption relative to other applications. In some implementations a battery usage profile includes a predicted battery drain rate.

The wireless device can send and receive data packets over one or more wireless interfaces. For example the wireless device s processor can send and receive data packets via one or more transceivers and antennas . Various examples of wireless interface technology include interfaces based on Long Term Evolution LTE Global System for Mobile Communications GSM IEEE 802.11a b g n ac and Code Division Multiple Access CDMA technologies such as CDMA2000 and WCDMA. Other types of wireless interface technologies are possible. The wireless device can download application software over one or more of these wireless interfaces and store the application software on a memory structure such as the NVM structure or the RAM structure .

The NVM structure stores software such as a wireless device OS and application software such as a battery prediction application . The processor can load software from the NVM structure into the RAM structure and can start to execute the software from the RAM structure . In some implementations the processor directly executes software from the NVM structure . In some implementations the processor includes multiple processor cores.

The battery prediction application can receive data from the battery monitor about the battery . Such data can include a voltage value battery capacity level value temperature value charging state e.g. charging or discharging or a combination thereof. In some implementations the battery monitor includes a digital voltage meter a digital ammeter a temperature sensor or a combination thereof. In some implementations the wireless device can download the battery prediction application from an application store via the transceiver and install it on the NVM structure . In some implementations the battery prediction application is pre installed on the device . In some implementations the device sends a battery measurement sample to a server the battery measurement sample including one or more process identifiers of processes executing on the wireless device and data collected from the battery monitor . In some implementations the device can be configured to receive from the server battery prediction information corresponding to one or more process identifiers within a battery measurement sample. The device can use among other things the battery prediction information to form battery prediction results that can be displayed on the display of the device .

The static analysis process can include extracting application attributes from an application package. In some implementations extracting application attributes can include determining whether a particular library is used by the application and if used assigning an attribute. For example if an application links to a networking library then the process can assign a network usage attribute to the application. Various examples of application attributes include user interface background mode types e.g. audio location VoIP network Bluetooth gyroscope usage accelerometer usage network usage location usage intense graphics rendering e.g. use of a 3D graphical rendering engine and streaming audio usage. Additional examples of application attributes include number of frameworks framework identifiers an application programming interface API list a number of APIs linked libraries service handlers and permissions. Other types of application attributes are possible. In some implementations the data storage process receives and stores application identifiers and associated application attributes that are sent by the static analysis process .

A wireless device battery measurement collection process can receive battery measurement samples from wireless devices. Such battery measurement samples can include a battery drain rate data for a measurement period and a list of process identifiers corresponding to processes that were active during the measurement period. The collection process can exclude measurements taken during a device charging state e.g. device is plugged into an electrical outlet. In some implementations battery measurement samples can include a battery level e.g. current battery capacity level as a percentage of the total capacity timestamp one or more process identifiers device identifier e.g. electronic serial number ESN or an International Mobile Station Equipment Identity IMEI and or a device maker model string. In some implementations the data storage process receives and stores battery measurement samples that are forwarded from the collection process via the dynamic analysis process .

The correlation process can retrieve information such as application identifiers application attributes and battery measurement samples from the data storage process . The correlation process can use a statistical analysis technique such as a MLR model to determine which attributes are statistically significant and apply the resulting coefficients output from the MLR model as a score for each attribute. In some implementations the correlation process can use a statistical analysis technique such as PCA or k means clustering to determine which attributes are statistically significant. The correlation process can be executed on a periodic basis e.g. hourly daily or weekly to update the coefficients based on additional samples new applications or both.

The correlation process can extract a list of process identifiers from a battery measurement sample. The correlation process can query a database e.g. such as a database stored within storage device of to find matching process names that have been scored statically and identify attributes for each process. In some implementations the process retrieves an attribute vector for each application identified by a process identifier within a sample where each element of the attribute vector represents a different attribute. In some implementations elements can be a 1 or a 0 where a 1 valued element indicates that an attribute is associated with an application and a 0 valued element indicates that an attribute is not associated with the application. The correlation process can generate an aggregated attribute vector for the sample. In some implementations an aggregated attribute vector is a summation of all retrieved vectors for a sample. In some implementations an aggregated attribute vector is a result of performing an element wise logical OR operation of all of the retrieved vectors for a sample. Such an aggregated attribute vector can form the independent variables within a MLR model. In some cases one or more processes identified within a measurement sample may not have been scored by the correlation process . In such cases the value of the dependent variable can be adjusted based on i the percentage of applications statically scored within the sample and ii the change in battery capacity level given by the sample divided by the time period duration. The independent and dependent variables are then input into a MLR model such as . . . where represents the k th model coefficient xrepresents the k th element of an aggregated attribute vector for an i th observation and represents an error term. The MLR model can be used to determine which attributes are statistically significant. Attributes that are deemed statistically significant can then be input into the MLR model again to provide the coefficients or weights for each of the attributes. In some implementations an attribute is determined to be statistically significant and added to the second MLR iteration if an associated P value is less than 5 e.g. having a confidence interval of greater than 95 .

The determined coefficients can be used to score applications that are stored via the data storage process . In some implementations if an application attribute was not found to be statistically significant then the weight will be set to 0 for that attribute. Iterating through each application stored via the data storage process the correlation process can produce a static score sum for an application by summing together coefficients that correspond to application attributes that are present in the application. In some implementations a percentile score can be computed for an application based on the static score sum relative to an entire population score. Score data can be provided to a wireless device for on device battery life prediction. A static score sum can be used to predict battery life. A percentile score can be used to indicate a degree of relative battery usage. For example percentile scores can be grouped into categories and assigned labels such as high medium low ranges which can be display to a user of a wireless device.

A dynamic analysis process can receive battery measurement samples from the collection process and perform one or more real time analyses. In some implementations the dynamic analysis process can measures battery depletion across a population of wireless devices to determine whether an application tends to consume more less or the same power as other apps in the population. In some implementations dynamic analysis process can send prediction information to a wireless device. The prediction information for example can be formulated based on the list of process identifiers within a battery measurement sample. The prediction information can include one or more sets of information each set include a process identifier mean battery depletion rate of the corresponding application a rank value e.g. percentile of mean as compared to other applications diff value e.g. percentage difference of the mean of this application compared to the overall mean and statistical model values such as a P value of a t statistic. In some implementations the dynamic analysis process includes a service that responses to a battery measurement sample from a device by extracting process identifiers obtaining pre calculated statistical information such as weights or scores about the corresponding applications and sending the pre calculated statistical information to the device. The device can use the pre calculated statistical information to enhance battery depletion rate predictions.

In some implementations the correlation process can perform statistical analysis on observed client battery depletion data points and their relation to application attributes. The correlation process can collate reduce and compile measurements into usable battery depletion events calculate the battery depletion rate observed while each app was loaded into memory and use previously extracted information about the application to extrapolated a rate that may be observed for other apps. In some implementations the correlation process can detect battery depletion events based on the measurements. In some implementations the correlation process retrieves measurements from the data storage process ordered by device identifier and timestamp of submission. Each measurement can be compared to a previous measurement. For example if the battery level has increased for the same device identifier the measurement can be skipped since the device s battery was most likely recharged during the measurement period. Battery depletion events can be defined by two consecutive measurements on the same device between which the battery level has not risen. Each battery depletion event can have a battery depletion percentage and an elapsed time. A depletion rate can be calculated by dividing the battery depletion over the elapsed time. Once the rate is determined the correlation process can use a configuration file of known system process names to remove system processes from a measurement s process identifier list to produce a list of processes that correspond to user controllable applications. The battery depletion rate for that event is then divided by the number of remaining apps to produce a reduced rate the reduced rate can be associated with the remaining applications. In some implementations the correlation process can use extracted application attributes as independent variables in a MLR model with the observed battery depletion rates serving as the dependent variable. The resulting coefficients can be used to extrapolate a battery depletion rate for an application that has not yet been observed on a user s device.

Various implementations of the systems and techniques described here can be realized in digital electronic circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium computer readable medium refers to any computer program product apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

To provide for interaction with a user the systems and techniques described here can be implemented on a computer having a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input.

The systems and techniques described here can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the systems and techniques described here or any combination of such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN a wide area network WAN peer to peer networks having ad hoc or static members grid computing infrastructures and the Internet.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Although a few implementations have been described in detail above other modifications are possible. Moreover other mechanisms for detecting impersonation on a social network may be used. In addition the logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. Other steps may be provided or steps may be eliminated from the described flows and other components may be added to or removed from the described systems. Accordingly other implementations are within the scope of the following claims.

