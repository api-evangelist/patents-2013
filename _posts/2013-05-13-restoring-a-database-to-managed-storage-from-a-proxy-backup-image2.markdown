---

title: Restoring a database to managed storage from a proxy backup image
abstract: The present disclosure describes implementing a virtual image file system, or IMGFS. A mount point directory is created in a local file system, where the local file system organizes files on a storage device. The mount point directory corresponds to a proxy backup image file stored on the storage device. The proxy backup image file stores an image file system. The image file system is mounted on the local file system at the mount point directory, using a virtual file system that implements an interface configured to access the image file system. In some embodiments, a notification is provided to a recovery manager that indicates the recovery manager should catalog one or more database files of the proxy backup image file. One or more database files can be restored to a second storage device, such as a group of physical disks that are managed as a single storage unit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09632877&OS=09632877&RS=09632877
owner: Veritas Technologies LLC
number: 09632877
owner_city: Mountain View
owner_country: US
publication_date: 20130513
---
The present disclosure relates to performing backup and restore operations and more particularly to restoring a proxy backup image of a database to managed storage.

An ever increasing reliance on information and computing systems that produce process distribute and maintain such information in its various forms continues to put great demands on techniques for providing data storage and access to that data storage. Business organizations can produce and retain large amounts of data. While data growth is not new the pace of data growth has become more rapid the location of data more dispersed and linkages between data sets more complex.

An organization can implement a backup scheme to backup or protect data located on various computing devices of the organization such as databases. An organization may use a number of disparate software applications directed to managing such data. However certain interactions between the software applications may not be supported where particular functionalities are not available to the organization due to this lack of support. The organization may not discover this lack of functionality until after the functionality is needed possibly causing the organization to lose data.

While the present disclosure is susceptible to various modifications and alternative forms specific embodiments of the present disclosure are provided as examples in the drawings and detailed description. It should be understood that the drawings and detailed description are not intended to limit the present disclosure to the particular form disclosed. Instead the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present disclosure as defined by the appended claims.

The present disclosure describes embodiments for implementing a virtual image file system referred to as IMGFS IMaGe File System . A mount point directory is created in a local file system where the local file system organizes files on a storage device. The mount point directory corresponds to a proxy backup image file stored on the storage device. The proxy backup image files stores an image file system. The stored image file system is mounted on the local file system at the mount point directory using a virtual image file system. The virtual file system implements an interface configured to access the image file system.

In some embodiments a notification is provided to a recovery manager that indicates the recovery manager should catalog one or more database files of the proxy backup image file. File attributes and or file content of the database files can be provided to the recovery manager which can be read by the virtual file system from the image file system. One or more database files can be restored to a second storage device such as a group of physical disks that are managed as a single storage unit.

Recovery manager is a database management application that manages backup restore and recovery operations for a database such as target database . Recovery manager is executed or hosted on one or more host systems. A host system can be implemented using for example a desktop computer a laptop computer a workstation a server or the like. An example of such computing devices is described subsequently in connection with .

Target database is an object and or relational database that stores an organized collection of data. Target database consists of a number of database files which are further discussed below in relation to . Multiple databases not shown can be implemented in backup and restore system using cluster database software. Target database is stored in one or more storage devices.

Target database instance is a set of memory structures and processes that manage the database files of target database . Target database instance provides access to target database e.g. provides access to the data stored in target database . A database instance is associated with only one database at a time but each database can be associated with one or more database instances. In the embodiment shown target database instance is associated with target database . One or more database instances can be executed concurrently on a host system but preferably each database instance is executed on a separate host system. Target database instance is executed or hosted on a host system that is communicatively coupled to target database .

Recovery manager is configured to be communicatively coupled with target database instance in order to manage backup restore and recovery operations for target database . In one embodiment the host systems of recovery manager and target database instance are communicatively coupled via a communications channel or a network. An example network is a local area network LAN utilizing Ethernet IEEE 802.11x or some other communications protocol. In one embodiment the host systems of recovery manager and target database instance are communicatively coupled using connectivity software. In another embodiment recovery manager and target database instance are hosted on the same host system and are configured to communicate internally within the host system.

Storage manager is a volume manager and file system for files stored in storage disk group . An example storage manager is an ASM Automatic Storage Management manager. Storage manager controls or manages a storage disk group which is a group of physical disks that are controlled as a single storage unit. Storage manager stores files e.g. database files as managed files in storage disk group . A managed file is completely contained within a single storage disk group but is arbitrarily allocated across a number of physical disks in the storage disk group. Storage manager controls the file name and location of managed files. Storage disk group serves as backup storage for target database where storage disk group stores one or more backup image files. A backup image file includes a secondary or backup copy of one or more database files of target database . Storage disk group can also be configured as a fast recovery area FRA for target database where storage disk group serves as a centralized repository for database files of target database .

Storage devices N are each configured to store file data of a number of files such as backup image files database files and the like. Storage devices N serve as backup storage for target database e.g. can store one or more backup image files that include copies of database files of target database . Each of storage devices N is associated with a respective one of local and or network file systems N . Each file system is responsible for organizing the files of the respective storage device into logical groups using for example directories or folders. One or more file systems N are hosted on various host systems or locally hosted e.g. hosted on the same host system as target database instance . File systems are further discussed below in relation to .

Storage device is also configured to store file data of a number of files such as backup image files database files and the like. Storage device serves as tertiary backup storage for target database e.g. can store one or more backup image files that include copies of database files of target database . Storage device is also associated with a local file system not shown responsible for organizing the files stored on storage device which is further discussed below in relation to . Storage device operates under control of media manager which is executed or hosted on a host system such as a media server. An example media manager is NetBackup available from Symantec Corp. of Mountain View Calif. Recovery manager and media manager are configured to communicate with one another. In one embodiment recovery manager and media manager are hosted on different host systems. In another embodiment recovery manager and media manager are hosted on the same host system. Media manager is further discussed below in relation to .

In order to implement a backup restore or recovery operation for target database recovery manager allocates one or more connections or channels for communication with target database instance . Each channel corresponds to one of a number of database server sessions N on target database instance . A database server session is a background process that is directed by recovery manager to perform a backup restore or recovery operation e.g. database server session executes backup restore and recovery commands received from recovery manager via an allocated channel . One or more database server sessions N are allocated on target database instance where each database server session is capable of accessing target database e.g. accessing the data stored in target database . Recovery manager communicates with a corresponding database server session via a disk channel when storing a backup image file to disk or via a tape channel when storing a backup image file to tape or other storage device controlled by a media manager.

In one embodiment a database server session that performs a backup operation is responsible for reading backup data e.g. reading a copy of one or more database files from target database and transferring the backup data to a destination storage device or to media manager that controls the destination storage device . In one embodiment the backup data is stored in storage device as a backup image file that includes a copy of one or more database files of target database . In one embodiment a database server session that performs a restore operation uses backup data from an existing backup image file on storage device to overwrite one or more database files located in target database in one of storage devices N or in storage disk group . In one embodiment a database server session that performs a recovery operation uses one or more restored database files to apply changes to a database which is target database or a database located in one of storage devices N or storage disk group .

Traditionally a backup operation is performed in one of two modes a stream mode and a proxy mode. In stream mode recovery manager controls the data transfer between target database and the destination storage device via a database server session. For example backup data is received from the database server session at media manager that controls destination storage device where the backup data is received in a recovery manager specific and or proprietary format such as in backup sets and backup pieces. A backup set is a logical structure that includes one or more backup pieces. A backup piece is a logical grouping e.g. a file that includes backup data. The backup data or the copies of one or more database files is arbitrarily included in the backup pieces of the backup sets. The backup sets are then stored in the format received e.g. as is in storage device as a stream backup image file. Often the recovery manager does not provide an open API application programming interface that would allow manipulation of the backup data stored in recovery manager specific and or proprietary format in a stream backup image file.

Proxy mode can be used if media manager supports such a mode e.g. recovery manager queries media manager to determine if the media manager supports a proxy mode . In proxy mode recovery manager hands control of the data transfer to media manager . Recovery manager sends a list of data files to media manager indicating that the files specified in the list of files need to be backed up e.g. added to a backup image file . Media manager reads a copy of each file included in the list of data files via the database server session and stores the files as regular OS operating system files in a proxy backup image file. The resulting proxy backup image file is stored as a sparse file in a destination storage device under control of the media manager such as storage device .

The mode used to generate a backup image file is also the same mode used to restore from the backup image file. In other words a backup image file generated in stream mode referred to as a stream backup image file is used in a stream restore operation while a backup image file generated in proxy mode referred to as a proxy backup image file is used in a proxy restore operation.

During a stream restore operation e.g. initiated by recovery manager using a tape channel media manager reads data from the stream backup image file stored in storage device and sends the data to recovery manager . Recovery manager then writes the data to the destination location which is located in one of storage devices N storage disk group or target database . During a proxy restore operation e.g. initiated by recovery manager using a tape channel media manager receives a destination database file path or destination location from recovery manager . Media manager then reads data from the proxy backup image file stored in storage device and writes the data to the destination database file which is located in one of storage devices N or target database .

Since storage manager internally controls the location of managed files media manager cannot learn the destination location in storage disk group and thus cannot directly write to storage disk group using native OS operating system commands from a proxy backup image file. Further since the backup data is arranged arbitrarily in a stream backup image file and no open APIs application programming interfaces are available for translation media manager cannot translate the backup data of a proxy backup image file into a stream backup image file. However recovery manager is configured to communicate with storage manager in order to read and write managed files and thus can be used to migrate data into storage disk group .

A number of alternatives have been developed using recovery manager to restore a proxy backup image to storage disk group . For example the recovery manager restores a proxy backup image file to a temporary file system where the restored database files in the temporary file system is then copied into storage disk group e.g. the restored database files are read from the temporary file system and transmitted to storage disk group via recovery manager . This alternative requires extra disk space for the temporary file system and extra time to complete the restore to storage disk group e.g. time to perform both restore to file system and copy to storage disk group which takes twice as long as directly restoring data to the storage disk group . In another example the recovery manager backs up the target database as a regular file system where the backed up database files are copied into storage disk group e.g. the backed up database files in the regular file system are read from the regular file system and transmitted to storage disk group via recovery manager . This alternative similarly requires extra disk space for the regular file system and extra time to complete the restore to storage disk group e.g. time to perform both backup as file system and copy to storage disk group which takes twice as long as directly restoring data to the storage disk group .

The present disclosure provides for implementation of IMGFS or a virtual image file system that provides a view to an image file system stored in a proxy backup image file. IMGFS is used to directly restore data to storage disk group from proxy backup image file which includes copies of one or more database files of target database . IMGFS is configured to provide access to the database files stored within proxy database image file . The proxy backup image file is mounted to a local file system at a mount point directory using IMGFS . IMGFS provides an interface configured to access the image file system stored in the proxy backup image file allowing the database files stored within proxy backup image file to be viewed within the mount point directory. Recovery manager is also notified of the presence of the database files within the proxy backup image file where recovery manager refers to the database files in a future restore or recovery operation of target database e.g. recovery manager requests the media manager to restore one or more database files from the proxy backup image file . File data of the one or more database files stored in the proxy backup image file can be used to perform a restore process by reading file data directly from the proxy backup image file as if the proxy backup image file were a regular file system and transmitting the file data to storage disk group via recovery manager . In one embodiment such a restore operation is performed using a disk channel rather than for example a tape channel . IMGFS can be implemented on a host system that is communicatively coupled to storage device e.g. hosted on the media server that controls storage device . IMGFS is further discussed below in relation to and proxy backup image files are further discussed below in relation to .

In light of the present disclosure it will be appreciated that target database storage device storage devices N and physical disks of storage disk group can be implemented by any type of computer readable storage medium including but not limited to internal or external hard disk drives HDD optical drives e.g. CD R CD RW DVD R DVD RW and the like flash memory drives e.g. USB memory sticks and the like tape drives removable storage in a robot or standalone drive and the like. Alternatively it will also be appreciated that in light of the present disclosure backup and restore system can include other components such as routers firewalls and the like that are not germane to the discussion of the present disclosure and will not be discussed further herein. It will also be appreciated that other configurations are possible. For example recovery manager target database instance and IMGFS can be hosted on different computing devices or on a single computing device and so on.

The letter N is used to indicate a variable number of devices or components. For example a variable number of storage devices are implemented in the backup and restore system. Although the letter N is used in describing a variable number of instances of each of these different devices and components a repeated use of the letter N does not necessarily indicate that each device and component has a same number of N instances implemented in the backup and restore system.

In one embodiment recovery manager maintains metadata about target database in a recovery catalog which recovery manager uses to determine which database files to use in a restore and or recovery operation for target database . Such database metadata includes names locations e.g. a full or relative file path that indicates a location creation times and SCNs system change numbers further discussed below in relation to of database files e.g. data files control files redo logs and archived redo logs of target database copies of database files and backup image files that include the database files which is stored in various storage devices in backup and restore system . The database metadata also includes tablespaces scripts and settings. A database file has a corresponding recovery catalog entry that contains metadata corresponding to the database file.

Media manager provides backup and restore services to recovery manager by storing data to and reading data from storage device . Media manager maintains metadata about backup image files in a backup catalog which is used to perform backup and restore operations for target database . Such backup metadata includes names and locations e.g. a full or relative file path that indicates a location of backup image files stored in one or more storage devices controlled by media manager such as storage device . Media manager is configured to communicate with recovery manager either directly via a media manager interface compatible with recovery manager or indirectly via a database server session.

In one example recovery manager initiates a backup operation for target database in proxy mode where media manager is responsible for generating a proxy backup image file for target database . The resulting proxy backup image file is stored in storage device such as one of proxy backup image files N . Proxy backup image file includes a copy of one or more database files of target database . Recovery manager records the name and location of proxy backup image file in an associated entry in recovery catalog . Media manager also records the name and location of proxy backup image file in an associated entry in backup catalog . In one embodiment the location of a proxy backup image file is the file path of proxy backup image file according to the local file system of storage device which is further discussed below in relation to .

Since media manager is responsible for generating and storing the proxy backup image file recovery manager does not immediately know where the particular database files are stored within proxy backup image file and or storage device . The present disclosure provides that media manager mounts proxy backup image file to the local file system of storage device at a mount point directory using IMGFS which attaches or grafts the image file system e.g. database files and directories of proxy backup image file onto the local file system at the mount point directory. As a result the database files stored within proxy backup image file become accessible as a number of files and or directories at the mount point directory. The database files can then be accessed by file system calls via IMGFS just as if proxy backup image file were a regular file system. Thus recovery manager can determine the locations of the particular database files that are stored within proxy backup image file via IMGFS . In one embodiment the location of a particular database file is the file path of the particular database file according to the local file system of storage device that includes the image file system mounted at the mount point directory which is further discussed below in relation to .

Continuing the above example once proxy backup image file is mounted using IMGFS media manager notifies recovery manager that additional database files that are located at the location of proxy backup image file need to be cataloged. Recovery manager requests file attributes of each database file stored within proxy backup image file from IMGFS . A new recovery catalog entry is created for each database file stored in proxy backup image file and added to recovery catalog . A recovery catalog entry corresponding to a particular database file includes file attributes of the particular database file and the location of the particular database file.

In one embodiment when recovery manager initiates a future restore or recovery operation for target database recovery manager consults recovery catalog to determine the location of the particular database files that should be restored. Recovery manager requests the contents of the particular database files from media manager using file system calls that are conveyed to IMGFS . IMGFS is further discussed below.

An OS operating system executing on media server divides memory space into user space and kernel space . Kernel space is reserved for executing the kernel or the basic component of the OS that manages the media server s resources e.g. hardware and software resources . User space is reserved for executing user applications e.g. software programs and libraries .

VFS virtual file system provides the kernel with access to a number of different file systems such as local and network file systems N . VFS which is implemented in kernel space serves as an abstraction layer or interface that enables an application e.g. running in user space to access file data located in various local and or network file systems N . A user application issues a file system call to the kernel which is directed to VFS . VFS locates the file system in which the requested file is located and handles the data access for the requested file e.g. requests file data of the requested file from the identified file system and returns the file data to the user application .

IMGFS is a virtual file system that provides a view into a proxy backup image file that stores an image file system. IMGFS serves as an interface between proxy backup image file and VFS that enables an application e.g. media manager running in user space to access file data located in the stored image file system. IMGFS can be implemented in kernel space or user space . Implementing IMGFS in kernel space requires editing the kernel code to implement IMGFS such as editing kernel code to include various components of IMGFS including IMGFS daemon and IMGFS proxy which are further discussed below . Kernel code can be edited by privileged users e.g. users with administrative rights to implement IMGFS. However since even small errors made while editing kernel code can result in an inoperable media server it may be preferable to implement IMGFS in user space using a loadable kernel support module. Further non privileged users e.g. users without administrative rights that cannot edit kernel code can also implement IMGFS in user space using a loadable kernel support module.

In the embodiment shown IMGFS is implemented in user space using various components that include IMGFS kernel support module IMGFS daemon and IMGFS proxy . IMGFS kernel support module is a loadable kernel support module e.g. extends functionality of the kernel that includes library and protocol support for IMGFS. IMGFS kernel support module provides a kernel compatible interface to VFS allowing access to the image file system stored in proxy backup image file via VFS without needing to edit kernel code.

When VFS receives a file system call for a requested file and determines the requested file is located in IMGFS VFS forwards the file system call to IMGFS kernel support module . IMGFS kernel support module then forwards the file system call to IMGFS daemon . IMGFS daemon supports a number of file system calls such as opendir open directory readdir read directory closedir close directory stat return file attributes open open file read read file and close close file . IMGFS daemon is configured to parse the parameters of file system call and issues a corresponding request to IMGFS proxy which performs the request. IMGFS proxy provides APIs application program interfaces that are configured to interpret or translate the raw data stored in the proxy backup image file into one or more database files e.g. regular OS files and or directories e.g. regular OS directories . In other words IMGFS proxy is configured to access the image file system stored in the proxy backup image file.

For example IMGFS proxy can receive a request to read file data of a requested file. File data can include file attributes of the requested file and or file content of the requested file. Once IMGFS proxy has retrieved the requested file data from proxy backup image file e.g. has read file data from the image file system IMGFS proxy returns the file data to IMGFS daemon which in turn returns the file data to IMGFS kernel support module . The file data is passed from IMGFS kernel support module to VFS on to media manager and finally on to recovery manager . IMGFS daemon and IMGFS proxy are further discussed below in relation to .

The example file system directory structure illustrated in is a hierarchical file system directory structure that organizes files e.g. backup image files stored in storage device . Root directory is the root or top most directory of the local file system directory structure which contains a number of directories and files. A number of subdirectories or nested directories can be created in root directory . Parent directory is one such subdirectory and serves as a working directory in the local file system of storage device in which one or more proxy backup image files N can be stored. As will be appreciated one or more proxy backup image files N can also be stored elsewhere in the local file system outside of parent directory .

As part of the proxy backup process that generates a new proxy backup image file media manager requests that a new file directory be created in the local file system e.g. sends a request to the local file system to generate a new directory for the newly generated backup proxy image file. The new file directory has a full file path that uniquely identifies the file directory from other directories in the local file system. The newly generated backup proxy image file is stored in the corresponding new file directory. In one embodiment a new file directory is generated within root directory for each newly generated proxy backup image file. In another embodiment multiple proxy backup image files can be stored in a single file directory . Once stored each proxy backup image file has a full file path that uniquely identifies the proxy backup image file from other files in the local file system.

The naming convention for creating new mount point directories is based on a number of identifiers obtained from the backup catalog. For example the media manager obtains the backup type ID identifier policy ID client ID and backup ID identifier of the newly generated proxy backup image file. The backup type ID identifies the type of the proxy backup image file e.g. a proxy backup image file can be a full backup or a partial backup . The policy ID identifies the backup policy used to generate the proxy backup image file. A backup policy describes how the proxy backup image file is generated such as indicating the particular files that should be backed up e.g. which files should be included in a proxy backup image file and when and how often the files should be backed up e.g. when and how often a proxy backup image file should be generated . The client ID identifies the client system that hosts the files that are being backed up e.g. the target database host system . The backup ID identifies the particular proxy backup image file.

In order to create a new mount point directory one or more directories such as a series of subdirectories or nested directories are generated for each identifier obtained from the backup catalog that is associated with the newly generated proxy backup image file. In one example the relative file path of the new mount point directory is

Root directory can include one or more backup type directories N one or more policy directories N one or more client directories N and one or more backup ID directories N . Backup type directories policy directories and client directories may be shared directories. For example illustrates that client directory contains both backup ID directory and . A full file path can point to the same location of the new mount point directory which is written in reference to root directory of the local file system e.g. the full file path includes the intervening directories from the root directory down to the proxy backup image file .

Using the file path of the BackupType Policy Client BackupID directory associated with the newly generated proxy backup image file as the mount point directory media manager can mount the newly generated proxy backup image file to the local file system at the mount point directory using IMGFS. In the example shown proxy backup image file has been mounted at backup ID directory which for clarity is illustrated as mount point directory in where backup ID directory in has not yet been mounted . Once attached to the local file system mount point directory appears to contain the image file system stored in the proxy backup image file which includes one or more directories referred to herein as IMGFS directories and one or more database files of newly generated proxy backup image file . Thus one or more IMGFS directories N and database files N viewed in mount point directory correspond to the one or more database directories N and database files e.g. data files N control file and archived redo log N that are stored in the proxy backup image file . Mount point directory which corresponds to backup ID directory in similarly appears to contain one or more IMGFS directories N and one or more database files N that correspond to proxy backup image file .

In one example the relative file path of a particular database file stored within the proxy backup image file is

In one embodiment IMGFS can be implemented using a loop device or a pseudo device that treats a file e.g. a proxy backup image file as a block device e.g. a hard disk drive . The loop device and its functionality is implemented by IMGFS kernel support module. The loop device is associated with the proxy backup image file. The loop device is then mounted on or logically connected to the local file system at the specified mount point directory. The loop device provides an API to access the image file system stored within the proxy backup image file by interpreting or translating the raw data of the proxy backup image file into one or more database files e.g. regular OS files and or directories e.g. regular OS directories . Thus file data can be read from the image file system stored in the proxy backup image file and made available to recovery manager via VFS.

The process continues to operation where the media manager requests and receives backup data of the particular database files from the database file system via a database server session e.g. the media manager sends open and read requests for the particular database files . Media manager then stores the backup data as a proxy backup image file in a storage device controlled by the media manager. The process continues to operation where the media manager creates a mount point directory in the local file system of the storage device where the mount point directory corresponds to the proxy backup image file.

The process continues to operation where the media manager mounts the proxy backup image file at the corresponding mount point directory using IMGFS to view the image file system e.g. a partial or full copy of the database file system that includes the particular database files stored within the proxy backup image file. Operation thus attaches the image file system which includes the database files stored within the proxy backup image file to the local file system of the storage device at the corresponding mount point directory. The process continues to operation where the media manager notifies the recovery manager to catalog the files stored in the proxy backup image file which are now accessible via IMGFS. The media manager indicates that the database files stored in the proxy backup image file which are now visible and accessible as a regular file system via IMGFS are backup files that have been created per the recovery manager s previous backup request and should now be added to the catalog.

In response recovery manager initiates a catalog function that will record information about each file stored in the proxy backup image file. Starting at a directory relative to the mount point directory recovery manager walks through the image file system of the proxy backup image file and requests file attributes e.g. using file system calls of the database files that are included in the image file system. An example catalog command is

The process continues to operation where the media manager responds to the recovery manager s requests for file attributes by reading file attributes of each file stored in the proxy backup image file. In one embodiment the media manager forwards file system calls for file attributes from recovery manager to IMGFS which is further discussed below in relation to . In another embodiment the media manager issues the file system calls. IMGFS responds to the file system calls by sending the file attributes to the media manager.

The process continues to operation where the media manager provides the file attributes to the recovery manager to add to the recovery catalog. In one embodiment recovery manager creates a recovery catalog entry for each database file stored in the image file system. The metadata stored in the recovery catalog entries is used by the recovery manager to determine which database files to use in a restore or recovery operation for the target database. In one embodiment the media manager also notifies the recovery manager once file attributes of all database files have been sent. The process optionally continues to operation where the media manager unmounts the proxy backup image file once the catalog operation is complete. In another embodiment the media manager may continue to keep the proxy backup image file mounted. The process then ends.

The restore request can also indicate that the destination storage device is a storage disk group managed by a storage manager where the destination location cannot be determined indicating that file data should be provided to the recovery manager which will direct the file data to the destination location via the storage manager . In one embodiment the recovery manager sends identifiers e.g. name or file path indicating a location of the database file of one or more particular database files to be restored from the proxy backup image file. The recovery manager determines which particular database files to restore based on metadata stored in the recovery catalog. In another embodiment the restore request may request that the entire database be restored. An example restore database command is

The process continues to operation where the media manager determines which proxy backup image file includes the database files specified in the restore request. The media manager also determines the corresponding mount point directory which can be obtained from the backup catalog in one embodiment. In such an embodiment the media manager mounts the determined proxy backup image file at the corresponding mount point directory using IMGFS. Operation can be skipped if the proxy backup image file is still mounted. In one embodiment if the mount point directory has not yet been created for the proxy backup image file operation can also include operations of to create the mount point directory and mount the proxy backup image file as discussed above. In one embodiment if the database files included in the proxy backup image file have not yet been cataloged operation can also include operations of to catalog the files as discussed above. Operations may be repeated for each proxy backup image file that includes one of the specified database files.

The process continues to operation where the media manager responds to the recovery manager s restore request by reading file content of the specified database files from the proxy backup image file which are visible and accessible via IMGFS. In one embodiment the media manager requests file content of the specified database files by issuing file system calls e.g. using open and read for the file content to IMGFS which is further discussed below in relation to . IMGFS responds by sending the file content to the media manager.

The process continues to operation where the media manager provides the file content to the recovery manager since the media manager does not know the destination location in the storage disk group . In an embodiment where the media manager knows the destination location of one or more destination database files e.g. the database files being restored the media manager can open each destination database file in the destination file system e.g. a network file system the database file system or other accessible file system in the backup and restore system and write the file content to the destination database file. In such an embodiment the media manager would notify the recovery manager when the restore operation is complete e.g. all file content has been written to the one or more destination database files .

The process continues to operation where the recovery manager in response to receiving the file content from media manager directs the file content to the storage disk group. The process optionally continues to operation where media manager unmounts the proxy backup image file once the restore operation is complete. In another embodiment the media manager may continue to keep the proxy backup image file mounted. The process then ends.

The process continues to operation where IMGFS daemon parses the parameters of the file system call and produces an IMGFS request that corresponds to the file system call. IMGFS supports a number of file system calls such as opendir readdir closedir stat open read close. In the embodiment shown the IMGFS request can be a request for file attributes as discussed in relation to or for file content as discussed in relation to . The process continues to operation where IMGFS daemon sends the IMGFS request to IMGFS proxy. The process continues to operation where IMGFS proxy accesses the proxy backup image file to read file data e.g. file attributes or file content responsive to the IMGFS request.

The process continues to operation of where IMGFS proxy returns the file data to IMGFS daemon. The process continues to operation where IMGFS daemon returns the file data to IMGFS kernel support module which returns the file data to VFS. The process continues to operation where VFS returns the file data to the media manager. The process continues to operation where the media manager returns file data to recovery manager. The process then ends.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. Additionally applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem or interface .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code for the automatically performing operations on such applications based on their dependencies on other applications such as described above with reference to the process of etc. to implement the present disclosure can be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Memory is also used for storing temporary variables or other intermediate information during the execution of instructions by the processor . The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 UNIX Linux or another known operating system.

Moreover regarding the signals described herein it will be understood that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present disclosure may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

Similarly servers and generally represent host computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications such as system s that host media manager s in system s that host target database and target database instance and or computer system in among others. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet. In one example server can represent system s that host database server session and server can represent system s that host an implementation of virtual file system IMGFS .

As illustrated in one or more storage devices N can be directly attached to server . Similarly one or more storage devices N can be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N can represent network attached storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS . In one example storage devices N can store target database that is accessible via database server session while storage devices N can store proxy backup image files that are accessible via IMGFS .

Servers and can also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between multiple storage devices. SAN fabric can facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric can also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and with reference to computer system of a communication interface can be used to provide connectivity between each client system and and network . Client systems and can be able to access information on server or using for example a web browser or other client software. Such software can allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the embodiments disclosed herein can be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the embodiments disclosed herein can also be encoded as a computer program stored in and run by server and server and distributed to client systems and over network .

In some examples all or a portion of the computing devices in and can represent portions of a cloud computing or network based environment. Cloud computing environments can provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. can be accessible through a web browser or other remote interface. Various functions described herein can be provided through a remote desktop environment or any other cloud based computing environment.

In addition one or more of the components described herein can transform data physical devices and or representations of physical devices from one form to another. For example IMGFS in can transform information received from a database server session into a proxy backup image file.

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

