---

title: Automatic conversation techniques
abstract: Automatic conversation techniques are described. An apparatus may comprise a computing device having an incoming message module operative to receive an incoming message, a conversation identification module communicatively coupled to the incoming message module, the conversation identification module operative to determine the incoming message is part of a conversation thread, and associate the incoming message with the conversation thread by setting a conversation identifier property of the incoming message to a conversation identifier for the conversation thread, and a conversation manager module communicatively coupled to the conversation identification module, the conversation manager module operative to determine a conversation rule is associated with the conversation thread, and apply the conversation rule to the incoming message. Other embodiments are described and claimed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09338114&OS=09338114&RS=09338114
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09338114
owner_city: Redmond
owner_country: US
publication_date: 20130218
---
This patent application is a continuation of co pending U.S. patent application Ser. No. 12 144 642 now issued as U.S. Pat. No. 8 402 096 filed Jun. 24 2008 and entitled Automatic Conversation Techniques the disclosure of which is incorporated herein in its entirety by reference.

Electronic mail E mail applications provide users with the ability to store messages in logical folders within the interface similar to that provided by many file systems. E mail applications also may allow users to group stored messages into logical conversations. Each conversation is a group of related messages including a root message and replies to the root message or to one another. When arranged by conversation messages are displayed in a user interface of the e mail application as a list of conversations grouped by message subject or thread. The conversations may be sorted by date and the messages within each conversation may be sorted based on who replied to whom.

Despite the convenience offered by the conversation groups some e mail applications limit operations for a conversation to individual conversation items. For example a user may not desire to engage in a conversation thread discussing lunch options with some colleagues. The user may need to delete the individual conversation items as they arrive to keep their inbox clear. Such operations may be tedious and time consuming for a user particularly given the increasing volumes of e mail messages a user might receive on any given day. Consequently improvements to item management and display techniques are needed to solve these and other problems and to enhance the experience of users in various usage scenarios.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Various embodiments are generally directed to automatic conversation techniques for a message application. Some embodiments are particularly directed to automatic conversation actions that may be applied across an entire conversation group or thread for a message application such as an e mail application for example.

One embodiment for example may comprise an apparatus such as a computing device having a message application program. The message application program may comprise among other elements an incoming message module operative to receive an incoming message. The message application program may also comprise a conversation identification module communicatively coupled to the incoming message module the conversation identification module operative to determine the incoming message is part of a conversation thread and associate the incoming message with the conversation thread by setting a conversation identifier property of the incoming message to a conversation identifier for the conversation thread. The message application program may further comprise a conversation manager module communicatively coupled to the conversation identification module the conversation manager module operative to determine a conversation rule is associated with the conversation thread and apply the conversation rule to the incoming message. Other embodiments are described and claimed.

These and other features and advantages will be apparent from a reading of the following detailed description and a review of the associated drawings. It is to be understood that both the foregoing general description and the following detailed description are explanatory only and are not restrictive of aspects as claimed.

Various embodiments include physical or logical structures arranged to perform certain operations functions or services. The structures may comprise physical structures logical structures or a combination of both. The physical or logical structures are implemented using hardware elements software elements or a combination of both. Descriptions of embodiments with reference to particular hardware or software elements however are meant as examples and not limitations. Decisions to use hardware or software elements to actually practice an embodiment depends on a number of external factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints. Furthermore the physical or logical structures may have corresponding physical or logical connections to communicate information between the structures in the form of electronic signals or messages. The connections may comprise wired and or wireless connections as appropriate for the information or particular structure. It is worthy to note that any reference to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Various embodiments may be directed to automatic conversation techniques for a message application. The automatic conversation techniques may be implemented for any message application. Examples of message applications may include without limitation an e mail message application text message application short message service SMS message application multimedia message server MMS message application voice message application video message application and so forth. In one embodiment the automatic conversation techniques may be described with reference to an e mail application by way of example and not limitation. Specific implementations may implement the automatic conversation techniques with other messaging applications however and still fall within the scope of the embodiments.

Various embodiments may be directed to automatic conversation techniques for a message application such as an e mail application. In general an e mail application allows users to compose send and receive messages over electronic communication systems. In some embodiments the described techniques may be implemented by one or more elements of a client server e mail messaging system. In such embodiments the server may support a variety of messaging clients accept requests and data from clients process the requests store the data and return the processing results to the clients. Accordingly one or more of the item aggregation and display techniques may be implemented as features within client based e mail applications server based e mail applications including a web based e mail applications providing access to e mail services via a web browser and or by other types of applications programs or services that interact with e mail.

In some embodiments one or more of the automatic conversation techniques can be implemented within an e mail client application or software program such as MICROSOFT OFFICE OUTLOOK application software from Microsoft Corporation Redmond Wash. In such embodiments the described techniques may be performed by the e mail client application in either an online or offline mode. In an offline mode the e mail client application may perform one or more automatic conversation techniques on locally stored or cached e mail messages. It can be appreciated that the described techniques may be implemented by any type of e mail client in accordance with the described embodiments including without limitation Messaging Application Programming Interface MAP I clients Hypertext Transfer Protocol HTTP clients Post Office Protocol 3 POP3 clients Internet Message Access Protocol IMAP or IMAP4 clients Network News Transfer Protocol NNTP clients and so forth.

Alternatively or additionally one or more automatic conversation techniques may be implemented as features within a server based e mail application or software program such as MICROSOFT EXCHANGE SERVER from Microsoft Corporation Redmond Wash. The server may provide e mail calendaring contacts and tasks functionality and support for mobile and web based access to information as well as data storage. The server may comprise or communicate with a message store for storing items including e mail messages and other data in mailboxes and folders and may provide an interface for communicating with various e mail clients and allowing access to the message store. The server also may comprise or communicate with a directory containing information about the users of the system and configuration information which may be used by a message transfer subsystem to perform various routing and transfer operations for e mail messages intended for recipients on the server another server in the same organization and or for recipients on the Internet or other messaging systems.

In some embodiments the server may support various Web services including web access mobile access and synchronization functionality Internet Information Services IIS and Internet Server Application Programming Interface ISAPI applications providing SMTP NNTP IMAP4 and POP3 services to allow Internet users to access to messaging data over a variety of Internet access protocols and HTTP based protocols including remote procedure call RPC over HTTP communication. In some implementations data may be formatted as compressed Wireless Binary XML WbXML data to make efficient use of bandwidth for mobile clients. In addition to standard Internet protocols the server also may support communication over proprietary or non standard protocols when used by a company or other organization.

The e mail application may provide users with the ability to store messages in logical folders within the interface similar to that provided by many file systems. It can be appreciated that the term folder may refer to any collection of items however stored and or represented in a user interface. While some operating systems or applications may not use the term folder when referring to a collection of items such scenarios are intended to be covered by embodiments that describe and illustrate folders.

The e mail application also may allow users and or logic to group stored messages into logical conversations to form a conversation group or conversation thread. Each conversation may comprise a group of related messages including for example a root message and replies to the root message or to one another. When a user selects to arrange messages by conversation the messages are displayed in a user interface of the email application as a list of conversations which may be grouped by message subject or thread. The conversations may be sorted by date and the messages within each conversation may be sorted based on who replied to whom.

In some cases the messages of a conversation may be stored across multiple folders. For example users may manually organize messages into various folders. Users also may set one or more filtering rules for automatically separating e mail messages into certain folders based on sender subject or other criteria. In addition a reply message sent by a user may be stored within the sent items folder of the user.

Despite the convenience offered by the conversation threads some e mail applications limit operations for a conversation to individual conversation items. For example a user may not desire to engage in a conversation thread discussing lunch options with some colleagues. The user may need to delete the individual conversation items as they arrive to keep their inbox clear. Such operations may be tedious and time consuming for a user particularly given the increasing volumes of e mail messages a user might receive on any given day.

To solve these and other problems various embodiments may implement various automatic conversation techniques for a message application. Some embodiments are particularly directed to automatic conversation techniques that may be applied across an entire conversation group or conversation thread for a message application such as an e mail application for example.

One embodiment for example may comprise an apparatus such as a computing device having a message application program such as an e mail application program. The message application program may comprise among other elements an incoming message module operative to receive an incoming message. The message application program may also comprise a conversation identification module communicatively coupled to the incoming message module the conversation identification module operative to determine the incoming message is part of a conversation thread and associate the incoming message with the conversation thread by setting a conversation identifier property of the incoming message to a conversation identifier for the conversation thread. The message application program may further comprise a conversation manager module communicatively coupled to the conversation identification module the conversation manager module operative to determine a conversation rule is associated with the conversation thread and apply the conversation rule to the incoming message. In this manner a user needs to establish a conversation rule once and the conversation rule is automatically applied to all the stored messages in a conversation thread as well as new incoming messages that are part of the same conversation thread. As a result a user may have an enhanced messaging experience.

More particularly the conversation manager module implements automatic conversation techniques in the form of conversation level actions that may be applied across an entire conversation group or conversation thread. Conversation level actions typically affect some or all messages in the entire conversation thread. By way of contrast item level actions typically affect a single message item. Examples of conversation rules may include without limitation an always delete conversation rule an always move conversation rule an always categorize conversation among others. These are merely a few examples and any number of conversation level actions may be implemented for a conversation thread as desired for a given implementation. The embodiments are not limited in this context.

As used herein the terms system subsystem component and module are intended to refer to a computer related entity comprising either hardware a combination of hardware and software software or software in execution. For example a component can be implemented as a process running on a processor a processor a hard disk drive multiple storage drives of optical and or magnetic storage medium an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a server and the server can be a component. One or more components can reside within a process and or thread of execution and a component can be localized on one computer and or distributed between two or more computers as desired for a given implementation. The embodiments are not limited in this context.

In the illustrated embodiment shown in the operating environment may comprise among other elements a client computing device and a server computing device . The computing devices may be implemented utilizing any suitable electronic device having computing capabilities and communications capabilities. Examples for computing devices may include without limitation a mobile device a personal digital assistant a mobile computing device a smart phone a cellular telephone a handset a one way pager a two way pager a messaging device a computer a personal computer PC a desktop computer a laptop computer a notebook computer a handheld computer a server a server array or server farm a web server a network server an Internet server a work station a mini computer a main frame computer a supercomputer a network appliance a web appliance a distributed computing system multiprocessor systems processor based systems consumer electronics programmable consumer electronics television digital television set top box wireless access point base station subscriber station mobile subscriber center radio network controller router hub gateway bridge switch machine or combination thereof. Although the operating environment as shown in has a limited number of nodes in a certain topology it may be appreciated that the operating environment may include more or less nodes in alternate topologies as desired for a given implementation.

The computing devices may be communicatively coupled via a network and appropriate wireless or wired communications media. The computing devices may coordinate operations between each other. The coordination may involve the uni directional or bi directional exchange of information. For instance the computing devices may communicate information over the network . The network may comprise a packet switched network a circuit switched network or a combination of both. The information can be implemented as data messages sent across various network interfaces. Exemplary network interfaces include parallel interfaces serial interfaces and bus interfaces.

The computing devices may implement respective computing systems . The computing systems may include various computing elements such as one or more processors co processors memory units chipsets controllers peripherals interfaces oscillators timing devices video cards audio cards multimedia input output I O components and so forth. The computing systems may implement among other elements respective client application programs and server application programs . In the example illustrated in the client application programs may comprise an e mail client application and other applications and the server application programs may comprise an e mail server application and other applications . In various implementations the e mail client application and or e mail server application may perform one or more item aggregation and display techniques in accordance with the described embodiments.

The applications may comprise one or more types of application programs supporting operation of the client computing device . Exemplary application programs may include without limitation a web browser application telephone application e.g. cellular VoIP PTT networking application messaging application e.g. 1M SMS MMS calendar application contacts application tasks application word processing application spreadsheet application database application media application e.g. video player audio player multimedia player digital camera video camera media management location based services LBS application gaming application and so forth.

The applications may comprise one or more types of application programs supporting operation of the server computing device . In various implementations the applications may include server application programs supporting operation of the server computing device as an e mail server a web server and or file server in accordance with the described embodiments. In some cases one or more of the applications may comprise a network server or web based version of one or more of the applications . In such cases the applications may operate separately such as when the client computing device is offline or may interoperate when the client computing device is online and connected to the server computing device via the network .

The computing systems also may comprise respective operating systems suitable for controlling the operation of the client computing device and the server computing device . In some embodiments the operating systems may comprise respective client and server versions of an operating system such as a MICROSOFT WINDOWS operating system from Microsoft Corporation Redmond Wash. It can be appreciated that other suitable operating systems may be used for the client computing device and or the server computing device .

The computing devices may comprise or communicate with a data store for item storage such as e mail messages and other data in mailboxes and folders. With reference to the data store may be implemented by a database . In such implementations the server computing device may provide the client computing device with access to the database when connected via the network . Alternatively or additionally the client computing device may directly access the database via the network . While shown as being separate elements for purposes of illustration it can be appreciated that in some embodiments the database may form part of the client computing device and or the server computing device . It also can be appreciated that the data store can reside on the client computing device the server computing device and or the database and that in some embodiments the client computing device the server computing device and or the database may store respective data stores which may be synchronized with each other.

In addition to respective computing systems the computing devices may implement respective communications system . The communications systems may include various communications elements such as a transmitter receiver transceiver radio network interface baseband processor antenna amplifiers filters and so forth. In one embodiment for example the computing devices may be implemented using a computing and communications architecture as described with reference to .

The computing device further includes a mass storage device for storing an operating system such as the operating system as well as other program modules and program data . The mass storage device also may store various application programs as described in greater detail below.

The mass storage device is connected to the processor through a mass storage controller not shown connected to the system bus . The mass storage device and its associated computer readable media provides non volatile storage for the computing device . Although the description of computer readable media contained herein refers to a mass storage device such as a hard disk or CD ROM drive it should be appreciated by those skilled in the art that computer readable media can be any available media that can be accessed by the computing device . By way of example and not limitation computer readable media may comprise computer storage media and communication media. Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to RAM ROM EPROM EEPROM flash memory or other solid state memory technology CD ROM DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the computer.

According to various embodiments the computing device may operate in a networked environment using logical connections to remote computers through a network which in some implementations may be a Transmission Control Protocol TCP and Internet Protocol IP network such as the Internet. The computing device may connect to the network through a network interface e.g. a wired or wireless network interface connected to the system bus . It can be appreciated that the network may comprise any type of network in accordance with the described embodiments including without limitation a wide area network WAN a local area network LAN and or a cellular telephone network and that the network interface may support various transport layers such as GPRS CDMA 1 RTT IEEE 802.11 and others for connecting to a variety of networks and or remote computer systems.

The computing device may include an I O controller for receiving and processing input from a number of input devices . A user may enter commands and information into the computing device through various input devices such as a keyboard and pointing device such as a mouse trackball or touch pad. Other examples of input devices may include a microphone joystick game pad satellite dish scanner or the like. The input devices may be connected to the processor through the I O controller that is coupled to the system bus but may be connected by other interfaces and bus structures such as a parallel port game port or a universal serial bus USB . The I O controller also may provide output to various output devices such as a monitor or other type of display device that is connected via the I O controller to the system bus . In various implementations the display device may present one or more user interfaces UIs to a user in accordance with the described embodiments. In addition to a display device the I O controller may provide output to a printer speakers and other peripheral devices.

As mentioned above a number of program modules and data files may be stored in the mass storage device and RAM of the computing device . In the example illustrated in the mass storage device and RAM may store the operating system as well as one or more client application programs including the e mail client application and other applications . It can be appreciated that in some implementations the mass storage device and RAM may store the operating system as well as one or more server application programs including the e mail server application and other applications .

According to various embodiments the e mail client application and or the e mail server application may implement one or more automatic conversation techniques. In one embodiment for example the e mail client application and or the e mail server application may be implemented as described with reference to .

As shown the e mail application may include item storage . While the item storage is shown as part of the e mail application for purposes of illustration and not limitation it can be appreciated that the item storage can reside in various locations in accordance with the described embodiments. For instance the item storage may reside on the client computing device the server computing device and or the database . As one non limiting example the item storage of the e mail application can reside within the program data of the computing device either in a database and or in one or more files. As another non limiting example the item storage can reside all or in part in a directory specified by the user in the file system of an operating system such as operating system or operating system . As another non limiting example the item storage can reside all or in part on the database which may be accessed or hosted by the server computing device .

In the example illustrated in the item storage includes an inbox folder a junk folder a sent items folder one or more other e mail folders and one or more archive files . It can be appreciated that the term folder or file may refer to any collection of items however stored and or represented in a user interface. While some operating systems or applications may not use the term folder when referring to a collection of items such scenarios are intended to be covered by embodiments that described and illustrate folders. It also can be appreciated that other folder variations and files may be implemented in accordance with the described embodiments.

The e mail application may provide the user with the ability to store items in certain logical folders such as the inbox folder the junk folder the sent items folder and one or more other e mail folders such as a user created folder for storing items associated with a certain sender or recipient subject e.g. project content e.g. text attachment or other criteria. The user may interface with the e mail application and manually organize items into various folders. The user also may set one or more filtering rules for automatically separating items into certain folders based on sender recipient subject content or other criteria. In addition replies message sent by the user in response to other messages may be stored within the sent items folder . The users also may store older items in one or more archive files which may be implemented as one or more Personal Storage Table extension .pst files on the local hard drive of the user and or any other suitable archiving data structure.

The e mail application may allow the user to group stored messages into logical conversations. Each conversation may comprise a group of related items including for example a root message and replies to the root message or to one another. In some cases the related items of a conversation may be stored across multiple storage locations such as across two or more of the inbox folder junk folder sent items folder other e mail folders and archive files .

As shown the e mail application may include item management logic which may be responsible for carrying out some or all of the item aggregation and display techniques described herein. In the example illustrated in the item management logic includes various modules with each module representing discrete sets of logic for various operations performed by the item management logic .

The item management logic also may comprise other logic for operating the e mail application which may support various other operations and capabilities. Exemplary operations and capabilities may include sending and receiving operations storing and organizing operations filtering operations sorting operations searching operations previewing operations capabilities for synchronization capabilities for accessing messaging data including web access and mobile access capabilities for detecting the online offline state of users capabilities for integrating the e mail application with calendar contacts and tasks functionality and or any other features in accordance with the described embodiments.

In some implementations the item management logic may reside within the e mail application as part of the client application programs on the client computing device or as part of the server application programs on the server computing device . It can be appreciated however that the item management logic can alternatively or additionally be embodied as computer executable instructions stored on one or more types of computer readable storage media in a variety of locations in accordance with the described embodiments.

Although the example illustrated in includes a particular set of logic it can be appreciated that the item management logic provides an exemplary implementation of the general functionality. It is to be understood that the sequence of logic does not necessarily have to be executed in the order presented unless otherwise indicated. In addition while the item management logic may be described as performing a certain sequence of steps other sequences of steps may also be performed according to alternative embodiments. Moreover some individual steps performed by the item management logic may include multiple sub steps that may be performed in various sequences as appropriate to the individual step. Furthermore additional steps may be performed or some steps may be omitted by the item management logic depending on the particular implementation.

In the illustrated embodiment shown in the item management logic may be subdivided into an incoming message module a conversation identification module a conversation manager module a message retrieval module and an outgoing message module . It should be appreciated that these modules may share one or more common instructions. Furthermore it should be appreciated that the item management logic may include other message modules in addition to the illustrated modules to provide additional message functionality. For instance the item management logic may include a message module that filters out spam e mail messages.

When executed by processor incoming message module interacts with operating system to receive incoming e mail messages that are received from network by network interface . For instance incoming message module may use an interface provided by operating system to configure a callback that causes operating system to provide incoming e mail messages to incoming message module . When incoming message module receives an incoming e mail message incoming message module may perform one or more e mail processing operations on the incoming e mail message. For instance incoming message module may determine whether the incoming e mail address includes a to property a cc property or a bcc property that specifies an e mail address associated with an active account maintained by the computing devices . In this example incoming message module may generate an outgoing bounce message when the to property the cc property or the bcc property of the incoming e mail message specifies an e mail address associated with an inactive account that was previously maintained by the computing devices . After incoming message module performs the e mail processing operations on the incoming e mail message incoming message module may provide the incoming e mail message to conversation identification module .

The item management logic may include the conversation identification module communicatively coupled to the incoming message module . The conversation identification module is operative to determine the incoming message is part of a conversation thread. The conversation identification module associates the incoming message with the conversation thread by setting a conversation identifier property of the incoming message to a conversation identifier for the conversation thread.

When executed by processor conversation identification module receives incoming e mail messages from incoming message module and attempts to identify an existing conversation associated with the incoming e mail message. If conversation identification module cannot successfully identify an existing conversation associated with the incoming e mail message conversation identification module may associate the incoming e mail message with a new conversation.

The conversation identification module may determine whether a message is part of an existing conversation in a number of different ways. In one embodiment for example the conversation identification module executes an algorithm that associates the incoming e mail message with an existing conversation when one or more of the following conditions occur 

The occurrence of one of these conditions may represent an exemplary set of preconditions for allowing the conversation identification module to associate the incoming e mail message with an existing conversation. There may be implementations however in which additional conditions could occur before the conversation identification module associates the incoming e mail message with an existing conversation. For instance one implementation may associate a received message with an existing conversation when condition 2 occurs only if condition 1 does not occur.

Additionally or alternatively the conversation identification module does not act to associate e mail messages with conversations. Rather the conversation identification module may perform actions to associate e mail messages with conversations. This includes both incoming e mail messages and outgoing e mail messages.

After conversation identification module associates the incoming e mail message with an existing conversation or associates the incoming e mail message with a new conversation conversation identification module may store in a message database the incoming e mail message along with a conversation identifier that identifies the conversation associated with the incoming e mail message. In one implementation message database includes a table that includes a row for each email message and a column for each property of an e mail message. For instance the table may include a column for a to property of an e mail message a from property of the e mail message a cc property of the e mail message a date property of the email message a subject property of the e mail message a body property of the email message and so on. Furthermore in this instance the table may include a column for a conversation identifier that identifies the conversation associated with the e mail message. An example is provided in Table 1 as follows 

The item management logic may include the message retrieval module communicatively coupled to the conversation manager module . When executed by processor message retrieval module enables users to retrieve e mail messages stored in message database . When the e mail application is implemented by the server computing device for example message retrieval module may receive periodic requests from the e mail client application on the client computing device to retrieve new messages that specify an e mail address associated with a user of the client computing device . In response to such requests message retrieval module may identify any new e mail messages in message database that have not previously been sent to the client computing device . If message retrieval module identifies any such new e mail messages message retrieval module may send the identified e mail messages along with the conversation identifiers of the e mail messages to the client computing device . Upon receiving the identified e mail messages the e mail client application on client computing device may present a user interface view in which the identified e mail messages along with previously retrieved e mail messages are grouped by conversation with which the e mail messages are associated. For instance client computing device may present a user interface view in which e mail messages that are associated with a conversation are presented as trees of e mail messages. In another instance client computing device may present an interface that includes separate lists of e mail messages for each conversation.

The item management logic may include the outgoing message module communicatively coupled to the message retrieval module . When executed by processor outgoing message module enables users to send outgoing e mail messages. For example outgoing message module may receive a request from the e mail client application on the client computing device to send an outgoing e mail message. In this example outgoing message module may associate the outgoing e mail message with a conversation identifier and incorporate this conversation identifier into the outgoing e mail message. After outgoing message module associates the outgoing e mail message with the conversation identifier and incorporates this conversation identifier into the outgoing e mail message as a conversation identifier property of the e mail message outgoing message module may instruct operating system to send the outgoing e mail message on network .

The item management logic may include the conversation manager module communicatively coupled to the conversation identification module . The conversation manager module may be generally arranged to implement various automatic conversation techniques. The conversation manager module implements automatic conversation techniques in the form of conversation level actions that may be applied across an entire conversation group or conversation thread managed by the e mail application . Conversation level actions typically affect some or all messages in the entire conversation thread. By way of contrast item level actions typically affect a single message item.

One of the main tenets of helping users reduce information overload with the conversation functionality is giving them an easy way to act on a conversation model. The conversation model now intelligently represents the group of messages with which the user is interacting. There are two main groups of actions that the new conversation model will support. First the conversation model promotes what were previously item level only actions to the conversation level and the introduction of a new set of actions specifically for conversation items. The promotion of item level actions is about batching together actions that used to be performed individually on messages such as Flag Categorize Assign and so forth so that the user needs to set a single conversation rule for an entire conversation. For example the user can flag a conversation thread and use that to easily flag the latest message in the conversation thread. Furthermore having conversation level views allows the e mail application to introduce the second category of actions particularly those that act specifically on the conversation thread itself. These are a set of operations that leverage the semantic of a conversation such as always delete or always move conversation rules.

The conversation manager module is operative to create a conversation rule for a conversation thread. An operator or user may create a conversation rule for a conversation thread by selecting one or more messages from a conversation thread and assigning a conversation rule to the one or more messages. The conversation rule defines a set of conversation level actions to perform on existing and future messages having a common conversation identifier ID property for a conversation thread. The existing messages may be stored in the message database . The future messages may include new incoming messages to the e mail application received from a remote device across the network and the network interface . Some examples of conversation rules include without limitation an always delete conversation rule an always move conversation rule an always categorize conversation among others. Each of these conversation rules are described further below.

Once the conversation manager module creates a conversation rule for a conversation thread the conversation manager module stores the conversation rule in a conversation action table CAT . The CAT is a new table designed to store the information needed to drive conversation level actions. The CAT is where a conversation object has an ongoing action associated with it. It is a table in the PST that contains an entry for each conversation which has an ongoing action or set of actions. The basic structure of the CAT is shown in Table 2 as follows 

The conversation manager module is operative to create an always delete conversation rule to automatically route the incoming message to a deleted items folder. The always delete conversation rule is a power user feature that allows a user to automatically move new items that arrive in a conversation to a Deleted Items folder thereby eliminating the incoming message from an Inbox folder. A user may create an always delete conversation rule by selecting a user interface element such as a user interface button on a user interface ribbon.

When a user selects a single conversation item such as a message for a conversation to bring the single conversation item in focus and selects the user interface button for Always Delete the conversation manager module initiates operations to create the always delete conversation rule. The conversation manager module first determines if the conversation already has a pre existing always delete conversation rule in place. This may be accomplished by checking a property on the conversation item to determine if a parent conversation item has the ongoing action associated with it. This property is set for the message when the CAT processing occurs. The conversation manager module generates a user interface view such as a dialog box having the following properties as shown in Table 3 

When the user clicks OK all of the individual messages in the current folder for the conversation are moved to the Deleted Items folder. An entry is created in the CAT for this conversation using its PR CONVERSATION ID if one does not exist already. New conversation items that arrive to this conversation and match the PR CONVERSATION ID will automatically be moved to the Deleted Items folder. This logic is subject to the expiration guidelines set in the CAT.

When multiple conversation items have focus and a user selects the user interface button for Always Delete the conversation manager module initiates operations to create the always delete conversation rule. The conversation manager module first determines whether the current folder for the selected conversation items is the Deleted Items folder. If not the conversation manager module generates a user interface view such as a dialog box having the following properties as shown in Table 4 

When the user clicks OK all of the individual messages in the current folder for the selected conversations are moved to the Deleted Items folder. An entry is created in the CAT for each of the conversations using the PR CONVERSATION ID. New items that arrive to these conversations and match the PR CONVERSATION ID will automatically be moved to the Deleted Items folder. This logic is subject to the expiration guidelines set in the CAT.

A user can disable the Always Delete ongoing action on a conversation in a number of different ways. To disable an always delete conversation rule for a conversation the user may go to the Deleted Items folder.

When a single conversation item has focus and is currently subject to the always delete conversation rule and the current folder is the Deleted Items folder then a ribbon user interface will display a Disable Always Delete user interface button to remove the always delete conversation rule from the conversation thread. Selecting the user interface button causes the conversation manager module to generate a user interface view such as a dialog box having the following properties as shown in Table 5 

When multiple conversation items are in focus and are currently subject to the always delete conversation rule and the current folder is the Deleted Items folder then a ribbon user interface will display a Disable Always Delete user interface button to remove the always delete conversation rule from the conversation thread. Selecting the user interface button causes the conversation manager module to generate a user interface view such as a dialog box having the following properties as shown in Table 6 

It is worthy to note that the conversation manager module does not check the enabled disabled state of every conversation when in a multi select state since this could affect performance of the e mail application such as causing a slow down in view rendering. To improve performance the conversation manager module does not check each conversation but rather will default to assuming all of them have the ongoing action associated with it. Alternatively the conversation manager module could check the enabled disabled state of every conversation when in a multi select state for a given implementation when performance is not an issue.

The conversation manager module is operative to create an always move conversation rule to automatically route the incoming message to a target items folder. The always move conversation rule is another power user feature that enables the user to easily move items in a specific conversation to a folder of their choosing. It is much lighter weight than creating a regular rule and is accessed off of the Move To Folder ribbon button.

When a single conversation item has focus and a target folder is chosen a ribbon user interface will display a Always Move user interface button to initiate operations for generating an always move conversation rule to move messages to the target folder. Selecting the user interface button causes the conversation manager module to generate a user interface view such as a dialog box having the following properties as shown in Table 7 

When the user clicks OK all of the individual messages in the current folder for the conversation are moved to the chosen folder. The conversation manager module creates a new entry in the CAT for this conversation using its PR CONVERSATION ID if one does not exist already. The conversation manager module evaluates and automatically moves new conversation items with a matching PR CONVERSATION ID to the target folder. This logic is subject to the expiration guidelines set in the CAT.

When multiple conversation items have focus and a target folder is chosen a ribbon user interface will display a Always Move user interface button to initiate operations for generating an always move conversation rule to move messages for multiple conversations to the target folder. Selecting the user interface button causes the conversation manager module to generate a user interface view such as a dialog box having the following properties as shown in Table 8 

When the user clicks OK all of the individual messages in the current folder for the selected conversations are moved to the chosen folder. The conversation manager module creates an entry in the CAT for these conversations using their PR CONVERSATION ID if one does not exist already. If the PR CONVERSATION ID already has an always move conversation rule associated with it this overwrites that rule. It will also reset the expiration time to a default time. New items that arrive to this conversation and match the PR CONVERSATION ID will automatically be moved to the selected folder. This logic is subject to the expiration guidelines set in the CAT.

There are a few exception cases for an always move conversation rule. For example if a user chooses Deleted Items as the destination folder for the always move conversation rule it is essentially the same as an always delete conversation rule. When the conversation is selected in the Deleted Items folder the Always Delete button will toggle to its deactivate state.

A user can disable an always move conversation rule in a number of different ways. For example when a single conversation item has focus the conversation manager module may determine whether the conversation item is currently subject to a pre existing always move conversation rule. This may be accomplished by checking a property on the conversation item to determine if a parent conversation item has the ongoing action associated with it. This property is set for the message when the CAT processing occurs. A ribbon user interface will display a Disable Always Move user interface button to remove the always move conversation rule from the conversation thread. Selecting the user interface button causes the conversation manager module to generate a user interface view such as a dialog box having the following properties as shown in Table 9 

When multiple conversation items have focus a ribbon user interface will display a Disable Always Move user interface button to remove the always move conversation rule from the conversation threads. Selecting the user interface button causes the conversation manager module to generate a user interface view such as a dialog box having the following properties as shown in Table 10 

The conversation manager module is operative to create an always categorize conversation rule to automatically assign a category for the incoming message. Assigning a category to a conversation item automatically enables ongoing categorization for the entire conversation thread.

When assigning a category using an appropriate Always Categorize user interface button from the ribbon user interface on a single conversation item the selected categories are applied to all of the items in all folders for that conversation. This is an ongoing action and a CAT entry is automatically created. This is additive to other categories that may exist for any individual messages. For example assume a conversation thread has messages 1 2 3 and 4 where message 1 has a category A message 3 has a category B and all messages 1 4 are in an Inbox folder. If a user selects the conversation thread and applies the Always Categorize action with the category C the results are additive as follows 

Whenever a new incoming message arrives at the incoming message module and the conversation identification module identifies the incoming message as part of a conversation thread the conversation manager module determines whether a conversation rule is associated with the conversation thread and if so applies the conversation rule to the incoming message. The conversation manager module consults the CAT and performs subsequent message handling operations on the incoming message in accordance with the various conversation rules associated with the conversation thread.

By way of example assume a user named Michael likes to stay on top of a lot of mail during the course of the day. He has rules that move distribution list mail to different folders but still works hard to keep track of the regular mail he receives in his Inbox. One of his colleagues starts up an e mail thread to his team distribution list which Michael receives in his Inbox about the upcoming college basketball playoffs. Michael is not interested in participating in this year s pool and would like to remove the thread from his Inbox. He choose the Always Delete action and the entire thread is moved to his Deleted Items folder. As his colleagues continue to talk on the thread all subsequent replies are silently placed right in Michael s Deleted Items keeping his inbox clear of the noise of that conversation while not forcing him to make a one off rule or remove himself from that usually important alias.

In another example assume a user named Paul is a filer and constantly moves mail to different folders based on the project or person that sent it. As new conversations arrive in his inbox Paul can easily act on just the messages that have arrived in that folder and move them to wherever he d like. A specific conversation about the Morandi project pops up and continues to be active so Paul uses the Always Move action to easily have new items in that conversation go the Morandi Project folder when they arrive.

In yet another example assume a user named Mary categorizes new messages as they arrive. As subsequent replies arrive for a conversation Mary needs to manually categorize each item individually each time a new one arrives. Mary uses the Always Categorize action to recognize that new items have arrived in the conversation and automatically apply the correct categories from the first message to the rest of the conversation.

In addition to applying conversation rules for incoming messages the conversation manager module also applies conversation rules to stored messages. The message database stores a plurality of messages for each conversation thread. When the conversation manager module creates a new conversation rule for the conversation thread the conversation manager module applies the conversation rule to the plurality of stored messages for the appropriate conversation thread.

Operations for the above described embodiments may be further described with reference to one or more logic flows. It may be appreciated that the representative logic flows do not necessarily have to be executed in the order presented or in any particular order unless otherwise indicated. Moreover various activities described with respect to the logic flows can be executed in serial or parallel fashion. The logic flows may be implemented using one or more hardware elements and or software elements of the described embodiments or alternative elements as desired for a given set of design and performance constraints. For example the logic flows may be implemented as logic e.g. computer program instructions for execution by a logic device e.g. a general purpose or specific purpose computer .

In the illustrated embodiment shown in the logic flow may receive an incoming message at block . For example incoming message module interacts with operating system to receive incoming e mail messages that are received from network by network interface . For instance incoming message module may use an interface provided by operating system to configure a callback that causes operating system to provide incoming e mail messages to incoming message module . When incoming message module receives an incoming e mail message incoming message module may perform one or more email processing operations on the incoming e mail message. After incoming message module performs the e mail processing operations on the incoming e mail message incoming message module may provide the incoming e mail message to conversation identification module .

The logic flow may determine the incoming message is part of a conversation thread at block . For example conversation identification module receives incoming e mail messages from incoming message module and attempts to identify an existing conversation associated with the incoming e mail message. If conversation identification module cannot successfully identify an existing conversation associated with the incoming e mail message conversation identification module may associate the incoming e mail message with a new conversation. The conversation identification module may utilize any number of different algorithms and conditions to explicitly or implicitly determine whether a message is part of a conversation thread. The embodiments are not limited in this context.

The logic flow may associate the incoming message with the conversation thread at block . For example if the incoming message module identifies the incoming message as part of an existing conversation thread the conversation identification module associates the incoming message with the conversation thread by assigning the incoming message a common conversation identifier in the appropriate property for the incoming message. If the incoming message module does not identify the incoming message as part of an existing conversation thread however the conversation identification module associate the incoming e mail message with a new conversation by assigning it a new conversation identifier. After conversation identification module associates the incoming e mail message with an existing conversation or associates the incoming e mail message with a new conversation conversation identification module may store in a message database the incoming e mail message along with a conversation identifier that identifies the conversation associated with the incoming e mail message.

The logic flow may determine a conversation rule is associated with the conversation thread at block . For example the conversation manager module searches a CAT to determine whether a conversation rule is associated with the conversation thread. The conversation manager module may search the CAT using any number of different search criteria such as the conversation identifier for example.

The logic flow may apply the conversation rule to the incoming message at block . For example when the conversation manager module locates a conversation rule associated with the conversation thread the conversation manager module applies the located conversation rule to the incoming message. The conversation manager module performs certain message processing operations on the incoming message as defined by the conversation rule such as deleting the incoming message moving the incoming message categorizing the incoming message forwarding the incoming message to another e mail application for another user replying to the incoming message copying the incoming message or any other message processing operations made available by a given e mail application . The conversation manager module may also use an incoming message and corresponding conversation rule to actuate or trigger subsequent operations for other messages stored by the message database or application programs executing on the computing devices .

In one embodiment for example the article of manufacture and or the computer readable storage medium may store logic comprising executable computer program instructions that when executed by a computer cause the computer to perform methods and or operations in accordance with the described embodiments. The executable computer program instructions may include any suitable type of code such as source code compiled code interpreted code executable code static code dynamic code and the like. The executable computer program instructions may be implemented according to a predefined computer language manner or syntax for instructing a computer to perform a certain function. The instructions may be implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language such as C C Java BASIC Perl Matlab Pascal Visual BASIC assembly language and others.

Various embodiments may be implemented using hardware elements software elements or a combination of both. Examples of hardware elements may include any of the examples as previously provided for a logic device and further including microprocessors circuits circuit elements e.g. transistors resistors capacitors inductors and so forth integrated circuits logic gates registers semiconductor device chips microchips chip sets and so forth. Examples of software elements may include software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. Determining whether an embodiment is implemented using hardware elements and or software elements may vary in accordance with any number of factors such as desired computational rate power levels heat tolerances processing cycle budget input data rates output data rates memory resources data bus speeds and other design or performance constraints as desired for a given implementation.

Some embodiments may be described using the expression coupled and connected along with their derivatives. These terms are not necessarily intended as synonyms for each other. For example some embodiments may be described using the terms connected and or coupled to indicate that two or more elements are in direct physical or electrical contact with each other. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still cooperate or interact with each other.

It is emphasized that the Abstract of the Disclosure is provided to comply with 37 C.F.R. Section 1.72 b requiring an abstract that will allow the reader to quickly ascertain the nature of the technical disclosure. It is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description it can be seen that various features are grouped together in a single embodiment for the purpose of streamlining the disclosure. This method of disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter lies in less than all features of a single disclosed embodiment. Thus the following claims are hereby incorporated into the Detailed Description with each claim standing on its own as a separate embodiment. In the appended claims the terms including and in which are used as the plain English equivalents of the respective terms comprising and wherein respectively. Moreover the terms first second third and so forth are used merely as labels and are not intended to impose numerical requirements on their objects.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

