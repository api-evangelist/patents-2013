---

title: Randomization of processor subunit timing to enhance security
abstract: Technologies are generally provided for a system to enhance security and prevent side channel attacks of targeted functions. Side channel attacks assume that the targeted functions operate at same speed each time, and observe timing data of the targeted functions to glean secure information. According to some examples, an enhanced security system may alter a processing speed of one or more subunits of a processor executing the targeted function(s) to transparently change an instantaneous performance of the processor in an unpredictable manner. The performance time of the targeted function(s) may thereby be randomized. A virtual machine manager (VMM) may identify a security risk for a targeted function, and trigger one or more subunits of the processor to operate at a reduced frequency. After completion of the targeted function, the subunits may be returned to a default performance speed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09419993&OS=09419993&RS=09419993
owner: EMPIRE TECHNOLOGY DEVELOPMENT LLC
number: 09419993
owner_city: Wilmington
owner_country: US
publication_date: 20131212
---
This Application is the National Stage filing under 35 U.S.C 371 of PCT Application Ser. No. PCT US13 74510 filed on Dec. 12 2013. The PCT Application is herein incorporated by reference in their entirety.

Unless otherwise indicated herein the materials described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

The move to cloud computing platforms brings flexible computing that reaps economies of scale enabling service providers to make better use of resources. Cloud computing providers may enable several virtual machines from different clients and service providers to be multiplexed on a single physical machine or datacenter. Hosting multiple virtual machines from multiple different clients at a single datacenter may bring security challenges such as a risk of side channel attacks from malicious clients. Side channel attacks use timers or other means to glean secure information from the processing times of co resident processes. For example the side channel attacker may use an elapsed time for key hashing to determine properties of the key. Timing can also be used to detect colocation with a target a necessary step to execute a datacenter attack which may be done by observing timing associated with various cache or branch hardware to detect signature computing patterns and timing. Side channel attack elements may be based on mutual hardware and rely on thoroughly characterized timing of target functions. The timing data may need to be precise and repeatable and the attack may depend on the presumption that the target functions operate at a same speed each time. Any deviations from the expected time may be used to infer values being computed. Any variation that can make a return time of a target function less predictable may strengthen an application against side channel detection and attack.

According to some examples the present disclosure describes methods to enhance security of targeted functions. An example method may include determining a preferred security timing obscuration detecting initiation of execution of a targeted function at a processor detuning a performance of one or more subunits of the processor associated with the targeted function based on the security timing obscuration determining whether the targeted function is still in operation and in response to a determination that the targeted function has completed operation returning the performance of the one or more subunits to a previous state before the detuning.

The present disclosure also describes servers hosted at a datacenter configured to enhance security of targeted functions. An example server may include one or more virtual machines configured to be executed on the server each virtual machine configured to provide computing services including data storage and data processing and a virtual machine manager configured to manage the one or more virtual machines. The virtual machine manager may be further configured to determine a preferred security timing obscuration detect initiation of a targeted function at a processor of at least one virtual machine of the datacenter reduce a performance speed of at least one subunit of the processor associated with the targeted function based on the security timing obscuration determine whether the targeted function is still in operation and in response to a determination that the targeted function has completed operation return the performance of the at least one subunit to a previous state before the performance speed reduction.

The present disclosure also describes cloud based datacenters configured to enhance security of targeted functions. An example datacenter may include one or more servers configured to execute one or more virtual machines each virtual machine configured to provide computing services including data storage and data processing and a virtual machine manager configured to manage the one or more virtual machines. The virtual machine manager is further configured to determine a preferred security timing obscuration detect initiation of a targeted function at a processor of at least one virtual machine of the datacenter detune a performance of at least one subunit of the processor associated with the targeted function based on the security timing obscuration determine whether the targeted function is still in operation and in response to a determination that the targeted function has completed operation return the performance of the at least one subunit to a previous state before the performance speed reduction.

The present disclosure further describes a computer readable storage medium with instructions stored thereon which when executed on one or more computing devices execute a method to enhance security of targeted functions performed including determining a preferred security timing obscuration detecting initiation of operation of a targeted function at a processor detuning a performance of one or more subunits of the processor associated with the targeted function based on the security timing obscuration determining whether the targeted function is still in operation and in response to a determination that the targeted function has completed operation returning the performance of the one or more subunits to a previous state before the detuning.

The foregoing summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects embodiments and features described above further aspects embodiments and features will become apparent by reference to the drawings and the following detailed description.

In the following detailed description reference is made to the accompanying drawings which form a part hereof. In the drawings similar symbols typically identify similar components unless context dictates otherwise. The illustrative embodiments described in the detailed description drawings and claims are not meant to be limiting. Other embodiments may be utilized and other changes may be made without departing from the spirit or scope of the subject matter presented herein. The aspects of the present disclosure as generally described herein and illustrated in the Figures can be arranged substituted combined separated and designed in a wide variety of different configurations all of which are explicitly contemplated herein.

This disclosure is generally drawn inter alia to methods apparatus systems devices and or computer program products related to enhanced security of targeted functions.

Briefly stated technologies are generally provided for a system to enhance security and prevent side channel attacks of targeted functions. Many side channel attacks assume that the targeted functions operate at same speed each time and observe timing data of the targeted functions to glean secure information. An enhanced security system according to some examples may alter a processing speed of one or more subunits of a processor executing the targeted function s to transparently change an instantaneous performance of the processor in an unpredictable manner. The performance time of the targeted function s may thereby be randomized. A virtual machine manager VMM may identify a security risk for a targeted function and trigger one or more subunits of the processor to operate at a reduced frequency. After completion of the targeted function the subunits may be returned to a default performance speed.

A datacenter as used herein refers to an entity that hosts services and applications for customers through one or more physical server installations and one or more virtual machines executed in those server installations. Customers of the datacenter also referred to as tenants may be organizations that provide access to their services for multiple users. One example configuration may include an online retail service that provides retail sale services to consumers users . The retail service may employ multiple applications e.g. presentation of retail goods purchase management shipping management inventory management etc. which may be hosted by one or more datacenters. Thus a consumer may communicate with those applications of the retail service through a client application such as a browser over one or more networks and receive the provided service without realizing where the individual applications are actually executed. This scenario contrasts with configurations where each service provider would execute their applications and have their users access those applications on the retail service s own servers physically located on retail service premises. One result of the networked approach described herein is that applications and virtual machines on a datacenter may be vulnerable to side channel attacks that take advantage of timing data of targeted functions to extract secure information.

While some example embodiments have been described using datacenter environments herein embodiments are not limited to implementation at datacenters. Randomization of processor subunit timing to enhance security may also be implemented for example in various computing devices such as desktop computers or even mobile devices when virtualization is being used to compartmentalize applications for security.

As shown in a diagram a physical datacenter may include one or more physical servers and each of which may be configured to provide one or more virtual machines . For example the physical servers and may be configured to provide four virtual machines and two virtual machines respectively. In some embodiments one or more virtual machines may be combined into one or more virtual datacenters. For example the four virtual machines provided by the physical servers may be combined into a virtual datacenter . The virtual machines and or the virtual datacenter may be configured to provide cloud related data computing services such as various applications data storage data processing or comparable ones to a group of customers such as individual users or enterprise customers via a cloud .

According to some embodiments a customer with an application and or virtual machines being executed at the physical datacenter may wish to implement a system to secure the application and or the virtual machines against side channel attacks from malicious clients. Side channel attackers may use timers to glean information from observed processing times of processes being executed on one or more virtual machines at the physical datacenter. A malicious client may also have an application or virtual machine executed at the physical datacenter and the malicious client may use his application to obtain secure information from a target virtual machine at the same datacenter. The malicious client may observe an elapsed time for a process associated with a victim executed at a target virtual machine. For example the malicious client may observe the elapsed time for a key hashing process in order to determine properties of the key for key decryption and password extraction. In another example a side channel attacker may use known timing of target processes associated with one or more victims executed at the physical datacenter to determine a functional path profile for the target processes. The side channel attacker may then use timing of operations within a target function for example an encryption to extract the encryption key. The side channel attacker may observe timing of processes e.g. reads writes etc. associated with various cache and or branch hardware at co resident virtual machines in order to detect signature computing patterns and timing of processes associated with a particular virtual machine.

Side channel attacks may depend on repeated observations of the same target functions being executed at a target virtual machine for one or more customer or datacenter applications and may assume that the target function operates at substantially the same speed each time. Since side channel attacks rely on characterized timing of target functions the timing data may need to be precise and repeatable for the side channel attacker to determine secure information based on the timing. Any deviations from the timing may be used to infer a value being computed. In a system according to same embodiments timing of targeted functions of an application may be altered to randomize an execution speed of a targeted function and to make the timing unpredictable in order to secure against side channel attacks. The embodiments also modify power usage that may defend against power channel attacks.

A diagram of illustrates an example processor architecture partitioned into groups of functional subunits of an example processor. Examples of groups of functional subunits include a clock domain a clock domain a clock domain a clock domain and a clock domain . The clock domain may include a fetch subunit and a decode subunit. The fetch subunit may retrieve an example set of instructions from a cache or a memory associated with the processor. The decode subunit may decode the instructions to allow the instructions to be translated for further processing. In addition the clock domain of the processor may include a rename subunit a dispatch subunit and a read subunit. The rename subunit may manage operations associated with renaming the instructions to appropriate micro operations after decoding of the instructions. The dispatch subunit may manage operations associated with dispatching the instructions to the read subunit for further processing. The read subunit may manage operations associated with reading the instructions and transmitting the instructions to processing subunits associated with the instruction type.

The read subunit may transmit instructions associated with integer operations to the clock domain of the processor. The clock domain may include an integer INT issue subunit and an execute subunit. The integer issue subunit may process integer based instructions. The execute subunit may execute the processed integer instruction. In addition the clock domain of the processor may receive floating point FP instructions from the read subunit and process the instructions in an FP issue subunit. The FP based instructions may be executed by an execute subunit of the clock domain . Furthermore instructions related to memory storage may be processed by a memory MEM issue subunit of the clock domain of the processor. An execute subunit of the clock domain may execute the memory instructions. The clock domains and may transmit executed instructions to a write back subunit which may aggregate the instructions. The write back subunit may transmit the instructions to the memory or other peripherals associated with the processor. Moreover a retire subunit may execute operations associated with cleaning remnants from processing the set of instructions. The operations executed by the retire subunit may include emptying of registers associated with the clock domains and .

The diagram also illustrates a subunit block diagram of an example processor. The processor may include a multitude of subunits such as an integer arithmetic logic unit INT ALU subunit a translation look ahead buffer TLB subunit a unified reorder buffer ROB subunit an L1 instruction L1 cache subunit an L1 decode L1D cache subunit a load store queue LSQ subunit an FP ALU subunit a fetch decode rename regular expression file REGFILE subunit as some examples. Each subunit may be configured to perform a specific operation for an overall function performed by the processor.

In some systems the datacenter may instruct the processor to increase performance and energy efficiency by varying voltage and frequency levels to near threshold levels of the processor. In an example scenario a subset of the subunits of the processor may fail at the near threshold levels as the subset may not be able to efficiently function at the near threshold levels. If the one or more of the subunits fail then the performance of the processor may also diminish as a result. A subunit that fails at a near threshold level may be a limiting or weak subunit. In an example embodiment it may be possible to allow a limiting or weak subunit to operate at a reduced performance level. An example of a reduced performance level may include a reduced frequency level. Allowing the limiting or weak subunit to operate at the reduced performance level may allow the processor to maintain a sufficient performance level. The processor may achieve operation of the limiting or weak subunit at the reduced performance level by slowing down or detuning one or more groups of functional subunits at one of the clock domains and or by slowing down a performance of an individual subunit of the processor. For example any of the processor subunits may be slowed or detuned to a half speed frequency while the remaining subunits may be run at higher frequencies in order to preserve an overall high performance of the processor. By slowing down or detuning a performance of one or more subunits of the processor the remaining processor subunits may be operated at higher frequencies to increase the performance of the processor without risking a performance failure.

In the graphical illustration demonstrated in a diagram a performance of a processor that includes a multitude of subunits may be preserved while one or more of the subunits are slowed to a half speed performance. An x axis of the illustration represents a normalized frequency of the processor and a y axis represents a normalized performance of the processor. A datacenter hosting the processor may instruct the processor to detune one or more subunits associated with the processor to manage the one or more limiting or weak subunits during a frequency increase of the processor to extract additional performance from the processor. Each illustrated drop of the normalized performance that is at frequency points represents a time point where a processor subunit has been detuned to slow the subunit to half speed frequency. At frequency point there may have been no subunit half speed reductions and the processor may be operating at a baseline frequency and may provide a baseline performance . At the frequency point a first subunit may have been detuned to slow the first subunit to half speed while the overall frequency of the processor increases. At subsequent performance drop points that is the frequency points and additional subunits may be detuned to slow the subunits to half speed while the normalized frequency of the processor continues to increase. By the time the processor is operating at about 1.4 the baseline frequency demonstrated at the frequency point the normalized performance of the processor may be increased past the baseline performance demonstrating an increased performance of the processor despite detuning at least two of the subunits to half speed frequencies as instructed by the datacenter.

Additionally at a maximum performance level a total of six of the processor subunits have been detuned to half speed frequencies. The maximum performance level may demonstrate that the processor is capable of achieving an increased performance level by selectively slowing down or detuning limiting or weaker subunits to allow the processor to run faster and more efficiently. Furthermore as demonstrated in diagram the processor may include six or more different subunit performance capabilities such that any combination of one or more of the subunits may be detuned to vary the frequency of the processor. For example six different subunits may effectively have six bits of performance states or sixty four possible performance profiles which may result in different amounts of time to process a piece of encryption. Any increase in the number of available detuning levels further increases the available variations in performance.

A system according to embodiments may take advantage of the ability to alter a frequency of one or more subunits of the processor to rapidly and transparently change the performance of the processor in an unpredictable manner in order to randomize the performance time of a targeted function executed at the processor. Randomization of the performance time of one or more targeted functions of a processor may enhance security against side channel attacks. Because a side channel attacker depends on precise measurement of functions to infer secure information randomizing the processing time and power of the function may prevent the side channel attacker from discerning secure information. In an example scenario performance changes may be altered by a virtual machine manager VMM at a hardware level of the processor without modifying or informing any software and without demanding any particular software compatibility such that performance may be altered across a multitude of operating systems. The VMM may trigger a pipeline delay at the hardware level of a processor in order to vary the performance time of the targeted function. The pipeline delay may be triggered by causing one or more subunits of the processor to perform the targeted function at a reduced speed such as a half speed frequency. Additionally the variation in performance may be smoothly altered by changing the amount of processor subunit detuning based on a perceived security situation. The perceived security situation may be determined based on certificates of collocated instances observed risky behavior and or signals of partial concern from an intrusion detection system.

As illustrated in a diagram a VMM may manage processes of a multitude of virtual machines at a datacenter. The VMM may facilitate monitoring performance of a processor associated with one or more of the virtual machines at the datacenter monitoring for security risks and implementing a process of randomizing a performance of one or more targeted functions of the processor at the datacenter.

In a system according to embodiments the VMM may perform an operation RECEIVE INDICATION OF DESIRED SECURITY TIMING OBSCURATION X and determine the preferred security timing obscuration based on a perceived level of security risk. In some examples the security timing obscuration may be a normalized value e.g. X in a range from zero to one where zero may indicate no security obscuration and one may indicate a highest security obscuration. The value of the security timing obscuration may increase from zero to one as the perceived level of security risk increases. The input for determining the security timing obscuration may be based on a perceived security situation determined by the VMM . The perceived security situation may be determined based on a number an identity and certificates of collocated instances observed risky behavior and or signals of partial concern from an intrusion detection system operating at the datacenter. For example an intrusion detection system executed at the datacenter may monitor processes at the datacenter and may observe a perceived security risk. The perceived security risk may be communicated from the intrusion detection system to the VMM . The perceived security risk may in some embodiments be communicated by another source such as an application or operating system. For example an application may communicate a higher security risk when processing payment information.

After the security timing obscuration has been determined by the VMM the VMM may perform an operation OPERATION OF TARGETED FUNCTION BEGINS where the initiation of the operation of a targeted function at the processor may be detected or initiated by the VMM . An example targeted function may include encryption payment processing privilege escalation or other similar process of the processor . The targeted function of the processor may be identified by the VMM at the datacenter through profiling. Profiling may include use of a profiling type virtual instrumentation and building of a flow table of frequently used automated processes at the VMM for performance monitoring detecting problems optimization and similar processes. The profiling type virtual instrumentation may run a process through a profiler to measure an array of variables and collect information on processor usage memory usage cache data memory bandwidth and time based data. A flow table may be built from the profile and may allow for automated finding and identification of targeted functions to be protected at the datacenter. For example the datacenter may use the profiling and flow table to automatically identify vulnerable targeted functions within a customer application at the datacenter without manual intervention or modification.

Additionally the datacenter may provide code decorators for various coding languages that may flag a targeted function for security protection. An example code decorator may be added by the datacenter to a targeted function code to serve as a signal to the VMM to execute defense timing resistance for security protection against side channel attacks. In further examples targeted functions may be identified by an application or operating system sending information before and after the operation for example through an API or system call.

In an example embodiment after detecting an initiation of the targeted function the VMM may perform an operation RANDOMIZE PROCESSOR SUBUNIT PERFORMANCE FOR DEFENDED VM BASED ON X . At the operation a performance of the processor subunits associated with the targeted function may be randomized based on the determined security timing obscuration value to provide security. The processor subunits performance may be randomized by detuning one or more of the subunits for example where the detuning reduces a performance speed of the subunit to a half speed or a different value. The amount of detuning may be based on the security timing obscuration value. For example at a lower perceived security risk that is a security timing obscuration value less than or equal to 0.5 the subunits may be detuned less aggressively. Similarly at a higher perceived security risk the subunits may be detuned more aggressively. An aggressiveness of the detuning may refer to a number of subunits that are detuned concurrently to a lower frequency and or a length of time the subunits are detuned.

In an example scenario if the processor has eight bits of possible subunit alteration that is eight subunits the security timing obscuration value may be used as a proportion to indicate a number probability and or frequency of subunits being detuned to half speed performance and for how long the subunit s are to operate at half speed. A change in performance of each of the one or more subunits may alter an effective instruction level performance of the processor in random and unpredictable ways. Additionally the change in subunit performance may affect an overall timing and a relationship between the timing and any content or encrypted keys specifically randomizing timing relationships relied upon by a side channel attacker. Furthermore subunit performance modification may be limited by the VMM to the processor and subunit s executing the targeted function being protected. For example if a virtual machine associated with the processor moves the targeted function out of context then the targeted function may be determined to be no longer in operation to result in the subunit s being returned to a previous state before detuning.

In another example scenario a timing analysis of example side channel attacks may indicate that timing for a targeted function may need to be accurate in a range from about 1.18 to 1.8 for a successful side channel attack. Changing the performance timing of the targeted function such that at least a few percent uncertainty is injected into an attacker s baseline timing measurement may thwart a timing based side channel attack.

After one or more of the subunits have been detuned at the operation the VMM may perform a decision operation IS THE TARGETED FUNCTION STILL IN OPERATION . In response to determining that the targeted function is still in operation the VMM may return to operation and continue to randomize detuning one or more of the processor subunits. In response to determining that the targeted function is no longer in operation the VMM may perform an operation RESTORE PROCESSOR SUBUNIT S TO PRESET STATE where the performance of the one or more subunits of the processor may be returned to their previous performance state prior to detuning.

Embodiments may be implemented via hardware software and or combinations of hardware and software components. The software components may operate with communication or signaling systems to enhance security of targeted functions.

While embodiments have been discussed above using specific examples components scenarios and configurations in and they are intended to provide a general guideline to be used to enhance security of targeted functions. These examples do not constitute a limitation on the embodiments which may be implemented using other components optimization schemes and configurations using the principles described herein. For example other approaches may be implemented than those provided as example.

For example a computing device may be used as a server desktop computer portable computer smart phone special purpose computer or similar device. In an example basic configuration the computing device may include one or more processors and a system memory . A memory bus may be used for communicating between the processor and the system memory . The basic configuration is illustrated in by those components within the inner dashed line.

Depending on the desired configuration the processor may be of any type including but not limited to a microprocessor P a microcontroller C a digital signal processor DSP or any combination thereof. The processor may include one more levels of caching such as a cache memory one or more processor cores and registers . The example processor cores may each include an arithmetic logic unit ALU a floating point unit FPU a digital signal processing core DSP Core or any combination thereof. An example memory controller may also be used with the processor or in some implementations the memory controller may be an internal part of the processor .

Depending on the desired configuration the system memory may be of any type including but not limited to volatile memory such as RAM non volatile memory such as ROM flash memory etc. or any combination thereof. The system memory may include an operating system one or more applications and program data . The application may include a subunit detuning module which may be an integral part of the application or a separate application on its own.

The subunit detuning module may facilitate reducing a performance of one or more processor subunits to a half speed frequency based on a determined security risk. The program data may include among other data security data determined by a virtual machine manager at a datacenter and or captured by an intrusion detection system at the datacenter for example as described herein.

The computing device may have additional features or functionality and additional interfaces to facilitate communications between the basic configuration and any desired devices and interfaces. For example a bus interface controller may be used to facilitate communications between the basic configuration and one or more data storage devices via a storage interface bus . The data storage devices may be one or more removable storage devices one or more non removable storage devices or a combination thereof. Examples of the removable storage and the non removable storage devices include magnetic disk devices such as flexible disk drives and hard disk drives HDD optical disk drives such as compact disk CD drives or digital versatile disk DVD drives solid state drives SSD and tape drives to name a few. Example computer storage media may include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data.

The system memory the removable storage devices and the non removable storage devices are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD solid state drives or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which may be used to store the desired information and which may be accessed by the computing device . Any such computer storage media may be part of the computing device .

The computing device may also include an interface bus for facilitating communication from various interface devices for example one or more output devices one or more peripheral interfaces and one or more communication devices to the basic configuration via the bus interface controller . Some of the example output devices include a graphics processing unit and an audio processing unit which may be configured to communicate to various external devices such as a display or speakers via one or more A V ports . One or more example peripheral interfaces may include a serial interface controller or a parallel interface controller which may be configured to communicate with external devices such as input devices for example keyboard mouse pen voice input device touch input device etc. or other peripheral devices for example printer scanner etc. via one or more I O ports . An example communication device includes a network controller which may be arranged to facilitate communications with one or more other computing devices over a network communication link via one or more communication ports . The one or more other computing devices may include servers client devices smart appliances and comparable devices.

The network communication link may be one example of a communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any information delivery media. A modulated data signal may be a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF microwave infrared IR and other wireless media. The term computer readable media as used herein may include both storage media and communication media.

The computing device may be implemented as a part of a general purpose or specialized server mainframe or similar computer that includes any of the above functions. The computing device may also be implemented as a personal computer including both laptop computer and non laptop computer configurations.

Example embodiments may also include methods to enhance security of targeted functions. These methods can be implemented in any number of ways including the structures described herein. One such way may be by machine operations of devices of the type described in the present disclosure. Another optional way may be for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some of the operations while other operations may be performed by machines. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program. In other embodiments the human interaction can be automated such as by pre selected criteria that may be machine automated.

Example methods may include one or more operations functions or actions as illustrated by one or more of blocks and . The operations described in the blocks through may also be stored as computer executable instructions in a computer readable medium such as a computer readable medium of a computing device .

An example process to enhance security of targeted functions may begin with block DETERMINE PREFERRED SECURITY TIMING OBSCURATION where a virtual machine manager e.g. VMM at a datacenter may identify a perceived security risk and may determine a preferred security timing obscuration value.

Block may be followed by block DETECT INITIATION OF A TARGETED FUNCTION AT A PROCESSOR where initiation of operation of a targeted function at the processor may be detected. The targeted function of the processor may be identified by the VMM e.g. VMM at the datacenter through automated profiling.

Block may be followed by block DETUNE A PERFORMANCE OF SUBUNIT S OF THE PROCESSOR ASSOCIATED WITH THE TARGETED FUNCTION BASED ON THE SECURITY TIMING OBSCURATION where a performance of one or more of the processor subunits associated with the targeted function may be reduced to a half speed or other frequency by the VMM based on the determined security timing obscuration value.

Block may be followed by block DETERMINE WHETHER THE TARGETED FUNCTION IS STILL IN OPERATION where the VMM e.g. VMM may determine if the targeted function is still in operation. In response to a determination that the targeted operation is still in operation the VMM e.g. VMM may continue to detune one or more of the processor subunits.

Block may be followed by block RETURN THE PERFORMANCE OF THE SUBUNIT S TO A PREVIOUS STATE BEFORE DETUNING. where in response to detection that the targeted function is no longer in operation the performance of the one or more subunits of the processor may be returned to their previous performance state before the detuning by the VMM .

The blocks included in the above described process are for illustration purposes. Enhancement of security of targeted functions may be implemented by similar processes with fewer or additional blocks. In some embodiments the blocks may be performed in a different order. In some other embodiments various blocks may be eliminated. In still other embodiments various blocks may be divided into additional blocks or combined together into fewer blocks.

In some embodiments as shown in the computer program product may include a signal bearing medium that may also include one or more machine readable instructions that when executed by for example a processor may provide the functionality described above with respect to and . Thus for example referring to the processor in the subunit detuning module executed on the processor may undertake one or more of the tasks shown in in response to the instructions conveyed to the processor by the signal bearing medium to perform actions associated with enhancement of security of targeted functions as described herein. Some of those instructions may include for example one or more instructions to determine preferred security timing obscuration detecting initiation of a targeted function at a processor to detune a performance of subunit s of the processor associated with the targeted function based on the security timing obscuration to determine whether the targeted function is still in operation and to return the performance of the subunit s to a previous state before detuning according to some embodiments described herein.

In some implementations the signal bearing medium depicted in may encompass a computer readable medium such as but not limited to a hard disk drive a solid state drive a Compact Disc CD a Digital Versatile Disk DVD a digital tape memory etc. In some implementations the signal bearing medium may encompass a recordable medium such as but not limited to memory read write R W CDs R W DVDs etc. In some implementations the signal bearing medium may encompass a communications medium such as but not limited to a digital and or an analog communication medium for example a fiber optic cable a waveguide a wired communications link a wireless communication link etc. . Thus for example the computer program product may be conveyed to one or more modules of the processor of by an RF signal bearing medium where the signal bearing medium may be conveyed by the wireless communications medium for example a wireless communications medium conforming with the IEEE 802.11 standard .

According to some examples the present disclosure describes methods to enhance security of targeted functions. An example method may include determining a preferred security timing obscuration detecting initiation of execution of a targeted function at a processor detuning a performance of one or more subunits of the processor associated with the targeted function based on the security timing obscuration determining whether the targeted function is still in operation and in response to a determination that the targeted function has completed operation returning the performance of the one or more subunits to a previous state before the detuning.

According to other examples the security timing obscuration may be a scaled value in a range from zero to one based on a perceived security risk. The method may also include determining the security timing obscuration based on at least one of an indication from an intrusion detection system at a datacenter observed risky behavior a number of collocated tasks evaluated locally at the processor and identity of collocated tasks evaluated locally at the processor. Detecting initiation of the targeted function at the processor may include detecting one or more of an encryption a payment processing and a privilege escalation. Detecting initiation of the targeted function at the processor may further include employing one or more of profiling type virtual instrumentation and building a flow table.

According to further examples the method may further include increasing detuning the one or more subunits in response to a detected high security risk. Detuning the performance of one or more subunits of the processor may include identifying a number of bits of possible subunit alteration associated with the processor and applying the security timing obscuration as a proportion to indicate how many of the bits are detuned and how long each bit is detuned.

According to yet other examples detuning the performance of one or more subunits processor may further include reducing a frequency of the one or more subunits. The method may also include enabling a virtual machine manager executed at a datacenter to detune the one or more subunits of the processor. The method may further include in response to a determination that the targeted function is still in operation continuing detuning the one or more subunits of the processor. The method may also include in response to a determination that the targeted function is moved out of context returning the performance of the one or more subunits to the previous state before the detuning.

The present disclosure also describes servers hosted at a datacenter configured to enhance security of targeted functions. An example server may include one or more virtual machines configured to be executed on the server each virtual machine configured to provide computing services including data storage and data processing and a virtual machine manager configured to manage the one or more virtual machines. The virtual machine manager may be further configured to determine a preferred security timing obscuration detect initiation of a targeted function at a processor of at least one virtual machine of the datacenter reduce a performance speed of at least one subunit of the processor associated with the targeted function based on the security timing obscuration determine whether the targeted function is still in operation and in response to a determination that the targeted function has completed operation return the performance of the at least one subunit to a previous state before the performance speed reduction.

According to some examples the security timing obscuration may be a scaled value in a range from zero to one based on a perceived security risk. The virtual machine manager may also be configured to determine the security timing obscuration based on at least one of a received indication from an intrusion detection system of the datacenter observed risky behavior a number of collocated tasks evaluated locally at the processor and identity of collocated tasks evaluated locally at the processor. The virtual machine manager may further be configured to detect one or more of an encryption a payment processing and a privilege escalation to detect initiation of the targeted function at the processor and or detect the initiation of the targeted function through one or more of profiling type virtual instrumentation and building a flow table.

According to further examples the virtual machine manager may further be configured to further reduce the performance speed of the at least one subunit in response to a detected high security risk. The virtual machine manager may also identify a number of bits of possible subunit alteration associated with the processor and apply the security timing obscuration as a proportion to indicate how many of the bits are detuned and how long each bit is detuned. The virtual machine manager may also be configured to reduce a frequency of the at least one subunit to reduce the performance speed of the at least one subunit.

According to other examples the virtual machine manager may reduce a frequency of the at least one subunit to a half speed frequency randomly select the subunit of the processor to reduce the performance speed and or in response to a determination that the targeted function is still in operation continue the reduction of the performance speed of the at least one subunit of the processor. The virtual machine manager may further return the at least one subunit to a previous performance speed before the reduction in response to a determination that the targeted function is moved out of context. The virtual machine manager may further be configured to provide a code decorator to flag a function of the processor as a targeted function.

The present disclosure also describes cloud based datacenters configured to enhance security of targeted functions. An example datacenter may include one or more servers configured to execute one or more virtual machines each virtual machine configured to provide computing services including data storage and data processing and a virtual machine manager configured to manage the one or more virtual machines. The virtual machine manager is further configured to determine a preferred security timing obscuration detect initiation of a targeted function at a processor of at least one virtual machine of the datacenter detune a performance of at least one subunit of the processor associated with the targeted function based on the security timing obscuration determine whether the targeted function is still in operation and in response to a determination that the targeted function has completed operation return the performance of the at least one subunit to a previous state before the performance speed reduction.

According to some examples the security timing obscuration may be a scaled value in a range from zero to one based on a perceived security risk. The virtual machine manager may be further configured to determine the security timing obscuration based on at least one of a received indication from an intrusion detection system of the datacenter observed risky behavior and a number and identity of collocated tasks evaluated locally at the processor. The virtual machine manager may also be configured to detect one or more of an encryption a payment processing and a privilege escalation to detect initiation of the targeted function at the processor detect the initiation of the targeted function through one or more of profiling type virtual instrumentation and building a flow table and or increase a reduction of the performance of the at least one subunit in response to a detected high security risk.

According to further examples the virtual machine manager may further be configured to identify a number of bits of possible subunit alteration associated with the processor and apply the security timing obscuration as a proportion to indicate how many of the bits are detuned and how long each bit is detuned. The virtual machine manager may also reduce a frequency of the at least one subunit to detune the performance of the at least one subunit reduce a frequency of the at least one subunit to a half speed frequency detune the one or more subunits of the processor and or provide a code decorator to flag a function of the processor as a targeted function.

The present disclosure further describes a computer readable storage medium with instructions stored thereon which when executed on one or more computing devices execute a method to enhance security of targeted functions performed including determining a preferred security timing obscuration detecting initiation of operation of a targeted function at a processor detuning a performance of one or more subunits of the processor associated with the targeted function based on the security timing obscuration determining whether the targeted function is still in operation and in response to a determination that the targeted function has completed operation returning the performance of the one or more subunits to a previous state before the detuning.

There is little distinction left between hardware and software implementations of aspects of systems the use of hardware or software is generally but not always in that in certain contexts the choice between hardware and software may become significant a design choice representing cost vs. efficiency tradeoffs. There are various vehicles by which processes and or systems and or other technologies described herein may be effected for example hardware software and or firmware and that the preferred vehicle will vary with the context in which the processes and or systems and or other technologies are deployed. For example if an implementer determines that speed and accuracy are paramount the implementer may opt for a mainly hardware and or firmware vehicle if flexibility is paramount the implementer may opt for a mainly software implementation or yet again alternatively the implementer may opt for some combination of hardware software and or firmware.

The foregoing detailed description has set forth various embodiments of the devices and or processes via the use of block diagrams flowcharts and or examples. Insofar as such block diagrams flowcharts and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams flowcharts or examples may be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof. In one embodiment several portions of the subject matter described herein may be implemented via Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs digital signal processors DSPs or other integrated formats. However those skilled in the art will recognize that some aspects of the embodiments disclosed herein in whole or in part may be equivalently implemented in integrated circuits as one or more computer programs running on one or more computers for example as one or more programs running on one or more computer systems as one or more programs running on one or more processors for example as one or more programs running on one or more microprocessors as firmware or as virtually any combination thereof and that designing the circuitry and or writing the code for the software and or firmware would be well within the skill of one of skill in the art in light of this disclosure.

The present disclosure is not to be limited in terms of the particular embodiments described in this application which are intended as illustrations of various aspects. Many modifications and variations can be made without departing from its spirit and scope as will be apparent to those skilled in the art. Functionally equivalent techniques and apparatuses within the scope of the disclosure in addition to those enumerated herein will be apparent to those skilled in the art from the foregoing descriptions. Such modifications and variations are intended to fall within the scope of the appended claims. The present disclosure is to be limited only by the terms of the appended claims along with the full scope of equivalents to which such claims are entitled. It is also to be understood that the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting.

In addition those skilled in the art will appreciate that the mechanisms of the subject matter described herein are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the subject matter described herein applies regardless of the particular type of signal bearing medium used to actually carry out the distribution. Examples of a signal bearing medium include but are not limited to the following a recordable type medium such as a floppy disk a hard disk drive a Compact Disc CD a Digital Versatile Disk DVD a digital tape a computer memory etc. and a transmission type medium such as a digital and or an analog communication medium for example a fiber optic cable a waveguide a wired communications link a wireless communication link etc. .

Those skilled in the art will recognize that it is common within the art to describe devices and or processes in the fashion set forth herein and thereafter use engineering practices to integrate such described devices and or processes into data processing systems. That is at least a portion of the devices and or processes described herein may be integrated into a data processing system via a reasonable amount of experimentation. Those having skill in the art will recognize that a typical data processing system generally includes one or more of a system unit housing a video display device a memory such as volatile and non volatile memory processors such as microprocessors and digital signal processors computational entities such as operating systems drivers graphical user interfaces and applications programs one or more interaction devices such as a touch pad or screen and or control systems including feedback loops and control motors.

A typical data processing system may be implemented using any suitable commercially available components such as those typically found in data computing communication and or network computing communication systems. The herein described subject matter sometimes illustrates different components contained within or connected with different other components. It is to be understood that such depicted architectures are merely exemplary and that in fact many other architectures may be implemented which achieve the same functionality. In a conceptual sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality may be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermediate components. Likewise any two components so associated may also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality and any two components capable of being so associated may also be viewed as being operably couplable to each other to achieve the desired functionality. Specific examples of operably couplable include but are not limited to physically connectable and or physically interacting components and or wirelessly interactable and or wirelessly interacting components and or logically interacting and or logically interactable components.

With respect to the use of substantially any plural and or singular terms herein those having skill in the art can translate from the plural to the singular and or from the singular to the plural as is appropriate to the context and or application. The various singular plural permutations may be expressly set forth herein for sake of clarity.

It will be understood by those within the art that in general terms used herein and especially in the appended claims for example bodies of the appended claims are generally intended as open terms for example the term including should be interpreted as including but not limited to the term having should be interpreted as having at least the term includes should be interpreted as includes but is not limited to etc. . It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended such an intent will be explicitly recited in the claim and in the absence of such recitation no such intent is present. For example as an aid to understanding the following appended claims may contain usage of the introductory phrases at least one and one or more to introduce claim recitations. However the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles a or an limits any particular claim containing such introduced claim recitation to embodiments containing only one such recitation even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an for example a and or an should be interpreted to mean at least one or one or more the same holds true for the use of definite articles used to introduce claim recitations. In addition even if a specific number of an introduced claim recitation is explicitly recited those skilled in the art will recognize that such recitation should be interpreted to mean at least the recited number for example the bare recitation of two recitations without other modifiers means at least two recitations or two or more recitations .

Furthermore in those instances where a convention analogous to at least one of A. B and C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention for example a system having at least one of A B and C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . It will be further understood by those within the art that virtually any disjunctive word and or phrase presenting two or more alternative terms whether in the description claims or drawings should be understood to contemplate the possibilities of including one of the terms either of the terms or both terms. For example the phrase A or B will be understood to include the possibilities of A or B or A and B. 

While various compositions techniques systems and devices are described in terms of comprising various components or steps interpreted as meaning including but not limited to the compositions techniques systems and devices can also consist essentially of or consist of the various components and steps and such terminology should be interpreted as defining essentially closed member groups.

As will be understood by one skilled in the art for any and all purposes such as in terms of providing a written description all ranges disclosed herein also encompass any and all possible subranges and combinations of subranges thereof. Any listed range can be easily recognized as sufficiently describing and enabling the same range being broken down into at least equal halves thirds quarters fifths tenths etc. As a non limiting example each range discussed herein can be readily broken down into a lower third middle third and upper third etc. As will also be understood by one skilled in the art all language such as up to at least greater than less than and the like include the number recited and refer to ranges which can be subsequently broken down into subranges as discussed above. Finally as will be understood by one skilled in the art a range includes each individual member. Thus for example a group having 1 3 cells refers to groups having 1 2 or 3 cells. Similarly a group having 1 5 cells refers to groups having 1 2 3 4 or 5 cells and so forth.

While various aspects and embodiments have been disclosed herein other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purposes of illustration and are not intended to be limiting with the true scope and spirit being indicated by the following claims.

