---

title: Application recommendation using stored files
abstract: The disclosed technology can enable files to be stored with a networked environment. The files can be associated with information (e.g., properties) such as a file name, a file type, a date/time at which a respective file was last accessed, a number of times a respective file was accessed, data representing the contents of a respective file, and other information. Based at least in part on analyzing the information, the disclosed technology can select or identify a file and/or a file property (e.g., a file type) that the disclosed technology predicts to be most relevant to the user. The disclosed technology can then recommend applications based at least in part on the selected or identified file and/or file property (e.g., file type).
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09189491&OS=09189491&RS=09189491
owner: DROPBOX, INC.
number: 09189491
owner_city: San Francisco
owner_country: US
publication_date: 20131112
---
The present patent application is a continuation of and claims the benefit of U.S. Non Provisional application Ser. No. 13 730 268 filed Dec. 28 2012. Said application is expressly incorporated herein by reference in its entirety.

The present technology pertains to making recommendations to users or customers of content for the users to acquire or purchase and more specifically pertains to recommending content items such as software applications using information associated with stored files of users. In some embodiments the technology is applied to a shared and synchronized content management system having a plurality of user accounts for storing content such as files remotely at a central location such as the Cloud or Internet.

Software applications also known as simply applications or apps are becoming ubiquitous in all aspects of modern life. People use applications on their computing devices every day as mobile applications are growing in number and in function. For example some users have applications to add photographic effects to the pictures they take. Some users have mobile apps to write edit and view documents while traveling on business. Other apps allow multiple users to communicate with one another. There are also gaming apps for users who like to play computer games on their computing devices. In fact many computing device platforms have application marketplaces that provide applications for a wide variety of purposes. Users can access the application marketplaces to download install and use various apps.

With the increasingly large number of app choices it can be difficult to determine which apps may be relevant and of interest to a particular user. In some cases even the user may not know which apps are relevant or of interest to him her. Determining which apps to present to the user can often be an inaccurate or imprecise task. Presenting apps of little or no interest to the user can be inefficient in terms of utilizing computing resources and can also reduce the overall satisfaction of the user experience associated with acquiring and using apps.

Features and advantages of the disclosure will be set forth in the description which follows and in part will be obvious from the description or can be learned by practice of the herein disclosed principles. The features and advantages of the disclosure can be realized and obtained by means of the instruments and combinations particularly pointed out hereinafter. These and other features of the disclosure will become more fully apparent from the following description and accompanying drawings or can be learned by the practice of the principles set forth herein.

Disclosed are systems methods and non transitory computer readable storage media for application recommendation using files stored with a networked storage environment. Various embodiments of the present disclosure enable files to be stored with the networked environment. The files can be associated with a user of the networked environment. For example the user can create an account with the networked environment log into his her account using a computing device and upload files to be stored with the networked environment under his her account. The files stored on the networked environment can be synced with any computing device that is logged into the user s account independent of the platform e.g. operating system of the computing device. The syncing of the stored files can also enable any modification to the files made with one device to be reflected on other devices when the other devices access the files. Moreover the user can also access files shared by another user s .

Each of the stored files can be associated with information e.g. file properties such as a file name a file type i.e. a file format a date and time the respective file was last accessed e.g. uploaded modified opened etc. a number of times the respective file was accessed data representing contents of the respective file etc. In some embodiments systems methods and non transitory computer readable storage media of the present disclosure can analyze the information associated with the stored files to predict which of the stored files is most relevant i.e. is of the highest interest and or most likely to be relevant to the user. For example a system consistent with the present disclosure can be configured to assume that the last i.e. most recently accessed file is most likely to be relevant to the user. In another example the system can decide that the file that has been accessed the most number of times is likely to be the most relevant to the user. In each of these examples the system can identify or select the most relevant file s and make recommendations to the user for applications based on information associate with the identified selected file s . For example if the system identifies or selects an image file as being relevant to the user then the system can recommend applications to the user that are related to images such as image editing apps.

In some embodiments the information associated with the user s stored files can be analyzed in attempt to predict which file property ies e.g. file type s associated with the stored files are most relevant to the user. For example the system can decide that the most common file type among the stored files is likely to be the most relevant and or most likely to be relevant to the user. In one example if 90 of the files stored with an account of a user are MP3 files then the system can predict that the MP3 file type is the most relevant to the user. The system can identify or select the MP3 file type as the file type for which applications are to be recommended. As such in this example the system can recommend MP3 playing apps MP3 editing apps and other apps relating to the MP3 file type.

In other embodiments information pertaining to the composition or profile of stored files of user accounts can be associated with the applications that prior users have chosen to acquire and stored in a database. Consequently a stored file profile can be generated for a particular user and compared with similar profiles in the database to obtain application recommendations to send to the user.

Accordingly various embodiments of the present disclosure can use stored files i.e. including information associated with the stored files to determine which applications to recommend to particular users.

Various embodiments of the disclosure are discussed in detail below. While specific implementations are discussed it should be understood that this is done for illustration purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without parting from the spirit and scope of the disclosure.

The disclosed technology addresses the need in the art for application recommendation using files stored with a networked environment. The disclosed technology can enable files to be stored with the networked environment. The files can be associated with information e.g. properties such as a file name a file type a date time at which a respective file was last accessed a number of times a respective file was accessed data representing the contents of a respective file and other information. Based at least in part on analyzing the information the disclosed technology can select or identify a file and or a file property e.g. a file type that the disclosed technology predicts to be most relevant to the user. The disclosed technology can then recommend applications based at least in part on the selected or identified file and or file property e.g. file type .

An exemplary system configuration is shown in wherein electronic devices communicate via a network for purposes of exchanging content and other data. The system can be configured for use on a wide area network such as that illustrated in . However the present principles are applicable to a wide variety of network configurations that facilitate the intercommunication of electronic devices. For example each of the components of system in can be implemented in a localized or distributed fashion in a network.

In system a user can interact with content management system through client devices . . . collectively connected to network by direct and or indirect communication. Content management system can support connections from a variety of different client devices such as desktop computers mobile computers mobile communications devices e.g. mobile phones smart phones tablets smart televisions set top boxes and or any other network enabled computing devices. Client devices can be of varying type capabilities operating systems etc. Furthermore content management system can concurrently accept connections from and interact with multiple client devices .

A user can interact with content management system via a client side application installed on client device . In some embodiments the client side application can include a content management system specific component. For example the component can be a stand alone application one or more application plug ins and or a browser extension. However the user can also interact with content management system via a third party application such as a web browser that resides on client device and is configured to communicate with content management system . In either case the client side application can present a user interface UI for the user to interact with content management system . For example the user can interact with the content management system via a client side application integrated with the file system or via a webpage displayed using a web browser application.

Content management system can make it possible for a user to store content as well as perform a variety of content management tasks such as retrieve modify browse and or share the content. Furthermore content management system can make it possible for a user to access the content from multiple client devices . For example client device can upload content to content management system via network . The content can later be retrieved from content management system using the same client device or some other client device .

To facilitate the various content management services a user can create an account with content management system . The account information can be maintained in user account database . User account database can store profile information for registered users. In some cases the only personal information in the user profile can be a username and or email address. However content management system can also be configured to accept additional user information.

User account database can also include account management information such as account type e.g. free or paid usage information e.g. file edit history maximum storage space authorized storage space used content storage locations security settings personal configuration settings content sharing data etc. Account management module can be configured to update and or obtain user account details in user account database . The account management module can be configured to interact with any number of other modules in content management system .

An account can be used to store content such as documents text files audio files video files etc. from one or more client devices authorized on the account. The content can also include folders of various types with different behaviors or other mechanisms of grouping content items together. For example an account can include a public folder that is accessible to any user. The public folder can be assigned a web accessible address. A link to the web accessible address can be used to access the contents of the public folder. In another example an account can include a photos folder that is intended for photos and that provides specific attributes and actions tailored for photos an audio folder that provides the ability to play back audio files and perform other audio related actions or other special purpose folders. An account can also include shared folders or group folders that are linked with and available to multiple user accounts. The permissions for multiple users may be different for a shared folder.

The content can be stored in content storage . Content storage can be a storage device multiple storage devices or a server. Alternatively content storage can be a cloud storage provider or network storage accessible via one or more communications networks. Content management system can hide the complexity and details from client devices so that client devices do not need to know exactly where the content items are being stored by content management system . In one variation content management system can store the content items in the same folder hierarchy as they appear on client device . However content management system can store the content items in its own order arrangement or hierarchy. Content management system can store the content items in a network accessible storage SAN device in a redundant array of inexpensive disks RAID etc. Content storage can store content items using one or more partition types such as FAT FAT32 NTFS EXT2 EXT3 EXT4 ReiserFS BTRFS and so forth.

Content storage can also store metadata describing content items content item types and the relationship of content items to various accounts folders or groups. The metadata for a content item can be stored as part of the content item or can be stored separately. In one variation each content item stored in content storage can be assigned a system wide unique identifier.

Content storage can decrease the amount of storage space required by identifying duplicate files or duplicate segments of files. Instead of storing multiple copies content storage can store a single copy and then use a pointer or other mechanism to link the duplicates to the single copy. Similarly content storage can store files more efficiently as well as provide the ability to undo operations by using a file version control that tracks changes to files different versions of files including diverging version trees and a change history. The change history can include a set of changes that when applied to the original file version produce the changed file version.

Content management system can be configured to support automatic synchronization of content from one or more client devices . The synchronization can be platform agnostic. That is the content can be synchronized across multiple client devices of varying type capabilities operating systems etc. For example client device can include client software which synchronizes via a synchronization module at content management system content in client device s file system with the content in an associated user account. In some cases the client software can synchronize any changes to content in a designated folder and its sub folders such as new deleted modified copied or moved files or folders. The client software can be a separate software application can integrate with an existing content management application in the operating system or some combination thereof. In one example of client software that integrates with an existing content management application a user can manipulate content directly in a local folder while a background process monitors the local folder for changes and synchronizes those changes to content management system . Conversely the background process can identify content that has been updated at content management system and synchronize those changes to the local folder. The client software can provide notifications of synchronization operations and can provide indications of content statuses directly within the content management application. Sometimes client device may not have a network connection available. In this scenario the client software can monitor the linked folder for file changes and queue those changes for later synchronization to content management system when a network connection is available. Similarly a user can manually stop or pause synchronization with content management system .

A user can also view or manipulate content via a web interface generated and served by user interface module . For example the user can navigate in a web browser to a web address provided by content management system . Changes or updates to content in the content storage made through the web interface such as uploading a new version of a file can be propagated back to other client devices associated with the user s account. For example multiple client devices each with their own client software can be associated with a single account and files in the account can be synchronized between each of the multiple client devices .

Content management system can include a communications interface for interfacing with various client devices and can interact with other content and or service providers . . . collectively via an Application Programming Interface API . Certain software applications can access content storage via an API on behalf of a user. For example a software package such as an app on a smartphone or tablet computing device can programmatically make calls directly to content management system when a user provides credentials to read write create delete share or otherwise manipulate content. Similarly the API can allow users to access all or part of content storage through a web site.

Content management system can also include authenticator module which can verify user credentials security tokens API calls specific client devices and so forth to ensure only authorized clients and users can access files. Further content management system can include analytics module module that can track and report on aggregate file operations user actions network usage total storage space used as well as other technology usage or business metrics. A privacy and or security policy can prevent unauthorized access to user data stored with content management system .

Content management system can include sharing module for managing sharing content publicly or privately. Sharing content publicly can include making the content item accessible from any computing device in network communication with content management system . Sharing content privately can include linking a content item in content storage with two or more user accounts so that each user account has access to the content item. The sharing can be performed in a platform agnostic manner. That is the content can be shared across multiple client devices of varying type capabilities operating systems etc. The content can also be shared across varying types of user accounts.

In some embodiments content management system can be configured to maintain a content directory identifying the location of each content item in content storage . The content directory can include a unique content entry for each content item stored in the content storage.

A content entry can include a content path that can be used to identify the location of the content item in a content management system. For example the content path can include the name of the content item and a folder hierarchy associated with the content item. For example the content path can include a folder or path of folders in which the content item is placed as well as the name of the content item. Content management system can use the content path to present the content items in the appropriate folder hierarchy.

A content entry can also include a content pointer that identifies the location of the content item in content storage . For example the content pointer can include the exact storage address of the content item in memory. In some embodiments the content pointer can point to multiple locations each of which contains a portion of the content item.

In addition to a content path and content pointer a content entry can also include a user account identifier that identifies the user account that has access to the content item. In some embodiments multiple user account identifiers can be associated with a single content entry indicating that the content item has shared access by the multiple user accounts.

To share a content item privately sharing module can be configured to add a user account identifier to the content entry associated with the content item thus granting the added user account access to the content item. Sharing module can also be configured to remove user account identifiers from a content entry to restrict a user account s access to the content item.

To share content publicly sharing module can be configured to generate a custom network address such as a uniform resource locator URL which allows any web browser to access the content in content management system without any authentication. To accomplish this sharing module can be configured to include content identification data in the generated URL which can later be used to properly identify and return the requested content item. For example sharing module can be configured to include the user account identifier and the content path in the generated URL. Upon selection of the URL the content identification data included in the URL can be transmitted to content management system which can use the received content identification data to identify the appropriate content entry and return the content item associated with the content entry.

In addition to generating the URL sharing module can also be configured to record that a URL to the content item has been created. In some embodiments the content entry associated with a content item can include a URL flag indicating whether a URL to the content item has been created. For example the URL flag can be a Boolean value initially set to 0 or false to indicate that a URL to the content item has not been created. Sharing module can be configured to change the value of the flag to 1 or true after generating a URL to the content item.

In some embodiments sharing module can also be configured to deactivate a generated URL. For example each content entry can also include a URL active flag indicating whether the content should be returned in response to a request from the generated URL. For example sharing module can be configured to only return a content item requested by a generated link if the URL active flag is set to 1 or true. Thus access to a content item for which a URL has been generated can be easily restricted by changing the value of the URL active flag. This allows a user to restrict access to the shared content item without having to move the content item or delete the generated URL. Likewise sharing module can reactivate the URL by again changing the value of the URL active flag to 1 or true. A user can thus easily restore access to the content item without the need to generate a new URL.

While content management system is presented with specific components it should be understood by one skilled in the art that the architectural configuration of system is simply one possible configuration and that other configurations with more or less components are also possible.

With reference now to an exemplary webpage for storing files in a networked environment such as a shared content management system is shown. The exemplary webpage can provide folders and or directories in which to store files e.g. data . For example a user of a computing device can access the content management system using the computing device and create an account with the content management system. Using the computing device the user of the content management system can upload and or save files in the content management system under his her account. The files stored in the content management system can be synced with the user s account such that the files can be accessed from any device logged into the user s account independent of the platform e.g. operating system of the device. The files can be synced such that when there is a modification and or update to a file from one device the modified updated file can be updated to copies of files stored on other devices as well.

The user s account can have a root directory such as Storage for storing files in the networked environment. There can also be subfolders and or subdirectories under the root directory. For example the user of the networked environment can create a folder called Photos Folder as a subdirectory of Storage . In this example the user can have created Photos Folder with the intention for Photos Folder to store the user s photographs. Within Photos Folder there can be another subfolder called Family Vacation . In this example the user can have created Family Vacation with the intention for Family Vacation to store photographs related to a family trip of the user.

In the example of Photos Folder can include files such as Profile Picture.jpg and Funny Cat.gif which can be images that have been uploaded and stored in Photos Folder . Each of the files can be associated with information including but not limited to name file type i.e. file format and date time at which the file was most recently accessed e.g. when the file was uploaded when the file was shared when the file was opened viewed previewed when the file was selected clicked on when the file was modified etc. . Name file type and last accessed date time shown in are for illustrative purposes only and are not always required. Although not shown in each of the files can also be associated with other information such as a file size an author a number of times a file has been accessed a number of times a file has been accessed within a specified time period etc.

The file type for Family Vacation can be a folder. The file type for Profile Picture.jpg can be an image or more specifically a JPG image. For Funny Cat.gif the file type can be an image or more specifically a GIF image. Moreover information associated with Profile Picture.jpg can show that Profile Picture.jpg was last accessed e.g. saved uploaded created opened shared modified etc. on Nov. 30 2012 at 5 03 PM. Also Funny Cat.gif can be associated with information that specifies that Funny Cat.gif was most recently accessed on Nov. 29 2012 at 1 10 PM.

In some embodiments systems methods and non transitory computer readable storage media in accordance with the present disclosure can analyze information associated with the files stored in the content management system to select or identify a file. In some embodiments the selection or identification of the file can be based on selection criteria or identification criteria that attempt to predict which of the stored files is most relevant to the user i.e. which of the files is probably the most relevant to the user as of now . For example the information associated with the files can be analyzed in attempt to determine a file that has a highest likelihood of being most relevant to the user as of the present time . Accordingly the selection criteria can be configured to take into account the information associated with the files stored.

In some embodiments systems methods and or non transitory computer readable storage medium of the present disclosure can assume that the most recently accessed file is likely to be most relevant to the user. Accordingly the selection of the file can be based on the last accessed information associated with the files. In other words the file that is selected can be the file that was most recently accessed as compared to the other files.

In some embodiments the file that has been accessed the most can be assumed to be most relevant to the user. In one example the file that is selected can be the file that has the highest number of times of being accessed. In another example the file that is selected can be the file with the most number of times being accessed within a specified time period e.g. last hour last 24 hours last week last month etc. .

Furthermore in some embodiments systems methods and or non transitory computer readable storage medium of the present disclosure can assume that files associated with a most commonly occurring particular file type are most relevant to the user. As such the particular file type can be selected instead of or in addition to selecting a particular file. In some embodiments the most common file type that is associated with the files stored in the user s account can be selected. In one example if the user uses his her account with the content management system to primarily store images then the majority of his her files stored on the content management system will likely be images. If so the image file type can be selected.

In another example it can be assumed that the most common file type among a set of files that have been accessed within a specified time period e.g. within the last hour within the last 24 hours within the last week etc. is the most relevant. For example if there were 100 files stored in the user s account and 10 of the files were accessed within a specified time period e.g. within the last 24 hours then the most common file type associated with those 10 files will be selected. If four files were images three files were text documents and three files were slideshow documents then the image file type is the most common file type and can be selected.

Based on the selected or identified file and or file type the systems methods and or non transitory computer readable storage medium can determine which application s to suggest to the user. For example if the most relevant file s and or file type s relate to images then photography editing applications can be recommended to the user. If the most relevant file s and or file type s relate to word processing documents then word processing applications can be recommended.

In some embodiments the applications provided by application marketplace can be created by application developers. Each application can also be associated with information such as an application category an application type file compatibility etc. The information associated with each application can be provided by the application developer publisher or can be obtained by application marketplace during an analysis and or review process of a respective application.

As shown in the example of application marketplace can present and provide access to recommended applications . As previously discussed systems methods and or non transitory computer readable storage medium of the present disclosure determine which applications to recommend. Systems methods and or non transitory computer readable storage medium can make recommendations for apps based at least in part on the file s and or file type s that have been selected or identified as being most likely to be relevant to the user. For example if the selection or identification criterion is based on the last accessed file then Profile Picture.jpg see can be selected as likely being most relevant to the user. Then applications capable of processing e.g. opening editing utilizing executing working with etc. Profile Picture.jpg can be recommended.

If Profile Picture.jpg is selected then applications recommended using Profile Picture.jpg i.e. using information and or a property ies associated with Profile Picture.jpg can include apps that relate to Profile Picture.jpg such as apps that are compatible with the JPG image file type that can edit images that can add effects to photographs etc. For example recommended apps can include Remove Red eye Vintage Effects Photo Crop Photos into Cartoons and or other apps. Moreover in some embodiments application marketplace can also present top most popular best rated etc. applications along with recommended apps .

In one example meeting notes.txt can be selected. If the selection is based on last accessed information then meeting notes.txt can be selected because it is the file that was most recently accessed.

In another example a file type can be selected from the plurality of file types e.g. document TXT type image JPG GIF type video MP4 type . In this example the file type can be selected to be the most common file type. As such the filed type can be selected to be an image type because there are two files having the image type one file having a document type and one file having a video type. Thus the image type is the most common among the stored files.

In a further example a file type can be selected from a subset of the plurality of file types where the subset includes file types that are associated with files that have been accessed within a specified time period. For this example the current date can be Dec. 2 2012 and the specified time period can be within the past week such that only Meeting notes.txt Profile Picture.jpg and Funny Cat.gif are files that have been accessed within the specified time period. As such the subset of file types includes one document instance and two image instances. Thus the image file type can be the selected file type.

In some embodiments a combination of a file s and a file type s can be selected. This can increase the number of applications to be recommended and can increase the possibility that a recommended application will be relevant to the user. Assuming for example that meeting notes.txt and the image file type have been selected then applications can be recommended for meeting notes.txt and for the image file type as shown in .

Assuming that meeting notes.txt and the image file type see have been selected applications can be recommended based on the selection of meeting notes.txt and the image file type. Accordingly recommended apps can include for example image apps and document apps which are related to meeting notes.txt and the image file type respectively.

In some embodiments recommended apps can include apps that are configured to process e.g. open view edit utilize work with etc. meeting notes.txt and the stored files that are associated with the image file type e.g. Profile Picture.jpg and Funny Cat.gif in . As shown in recommended image apps can include for example Remove Red eye Vintage Effects Photo Crop and Photos into Cartoons . In some embodiments recommended image apps must be able to process image types including the JPG type as well as the GIF type because Profile Picture.jpg is of the JPG type and Funny Cat.gif is of the GIF type. Moreover recommended document apps can include for example Mobile Word Processing Cool Fonts Citation Checker and Spell Checker .

According to an alternate embodiment the recommended apps presented can be determined by comparing a profile of the files stored in the user s account in the content management system with a database of apps that were most commonly selected by other users having similar stored file profiles. For example users having stored files relating to certain text and mp4 types names sizes etc. may have commonly selected an application relating to a particular game etc.

For example as shown in the user can click on a stored file such as Profile Picture.jpg . In this example when the user clicks on Profile Picture.jpg file Profile Picture.jpg can be selected as being most relevant to the user and a preview for the file can be rendered and displayed. In some embodiments Preview can be a smaller and or lower resolution rendering of Profile Picture.jpg file . As shown in there can also be an option to open the full version of Profile Picture.jpg via Open button . Further there can be an input area e.g. button that when enabled triggered causes applications recommended based on the selection of Profile Picture.jpg and or its file type to be provided. For example the user can tap on input area to cause window to be displayed. Window can provide access to applications recommended using Profile Picture.jpg . In this example because the selection was of Profile Picture.jpg photo related apps such as Remove Red eye and Vintage Effects can be recommended and provided.

In some embodiments the user can interact with e.g. select click on etc. the icons provided for recommended apps Remove Red eye and Vintage Effects in order to access them. For example a download installation and or execution of recommended apps can be initialized triggered by a user interaction with the icon for the recommended apps. In another example the user interaction with the icon for the recommended apps can cause an application marketplace to be presented which can provide access to the recommended apps.

As shown in the content management system can provide a root directory folder Storage . Under root directory folder Storage there can be files and subdirectories subfolders. Examples of files stored in root folder Storage can include meeting notes.txt Profile Picture.jpg Funny Cat.gif and Trailer.mp4 . Each of the files stored can be associated with information such as a name a file type a last accessed time and or other information e.g. including file content . An example of a subdirectory subfolder can be Scheduling folder which can also store files.

In one example the user can interact with e.g. select click on tap tap and hold etc. an input area for accessing meeting notes.txt . In some embodiments the user interaction with respect to the input area for accessing meeting notes.txt can cause meeting notes.txt to be selected identified. For example because the user tapped meeting notes.txt the system can decide that meeting notes.txt has a high likelihood of being relevant to the user. As such applications can be recommended using meeting notes.txt including using information associated with meeting notes.txt . In other words applications can be identified based on their relatedness relevance to meeting notes.txt and or information associated with meeting notes.txt .

When the user interacts with e.g. tap and hold the input area for accessing meeting notes.txt the computing device embodiment can present options for accessing meeting notes.txt . As shown in the user has the choice of opening meeting notes.txt e.g. with an application that is configured as the default application for accessing meeting notes.txt . or opening the file with an application chosen by the user. If the user chooses the button for Open With more options for accessing meeting notes.txt can be provided as shown in .

In addition the computing device can also enable more applications e.g. that are not yet installed on the device to be recommended for the user. The user can choose to find more applications e.g. applications that are related to and or capable of processing meeting notes.txt . As discussed above the computing device can assume that meeting notes.txt and or its document file type is most relevant to the user and thus select meeting notes.txt and or its document file type . Then the computing device can identify applications suitable for meeting notes.txt and or its document file type based on comparing the information associated with meeting notes.txt and information associated with applications in order to find similarity relatedness relevancy and or compatibility. When the user chooses Find more applications the recommended applications can be present to the user as shown in .

The screenshot of shows applications that are not already installed on the device and that are recommended for the user to use with respect to meeting notes.txt . The recommended applications can include for example Mobile Word Processing app and Cool Fonts app .

In some embodiments the exemplary computing device embodiment can also provide an input area e.g. button Browse more applications that when enabled triggered by the user can present and or provide access to more recommended applications.

In some embodiments when the user interacts with e.g. taps on a recommended app a download installation and or execution of the recommended can be initiated. In some embodiments when the user interacts with e.g. taps on a recommended app an interface e.g. application marketplace for downloading installing and or executing the recommended app can be provided to the user such that the user can download install and or execute the recommended app via the interface.

At step information associated with a subset of the plurality of files is analyzed. The subset can be either an equal subset in which all files in the plurality are in the subset or a proper strict subset in which the plurality has more files than the subset . In some embodiments the information can include at least one of a file type associated with each file in the subset a number of times that each file in the subset has been accessed a time at which each file in the subset was most recently accessed or content included in each file in the subset. Accessing a file can include but is not limited to uploading saving modifying updating viewing previewing opening and or executing the file.

Step can include identifying at least one file from the subset of the plurality of files. The identifying of the at least one file can be based at least in part on the analysis of the information in step . At step a set of applications is identified that are compatible with the identified at least one file. In some embodiments a set of applications is identified that are compatible with at least one property associated with the identified at least one file. For example the system can identify one application e.g. image editing app that is compatible with a file type e.g. image file type associated with a file e.g. image file identified based on the analysis of the information in step .

A first file type can be identified that is associated with a majority of files in the plurality of files at step . For example if there were 10 files in the plurality of files fours files being of an image file type three files being of a spreadsheet document type and three files being of an audio file type then the first file type would be the image file type. The system can also identify a second file type associated with at least one file that was most recently accessed at step . For example the system can identify the file that was last accessed e.g. most recently accessed by the user and the second file type would be the file type of the file that was last accessed. Step can include identifying a third file type associated with at least one file that has a largest number of times being accessed. For example if a text document file was accessed by the user 10 times while other files have been accessed less than 10 times then the third file type would be a text document file type.

At step the system can select at least one of the first file type the second file type or the third file type. In some embodiments the selection can be based on implemented configuration settings e.g. settings implemented by the content management system . Then at step the system can identify one or more applications associated with the at least one selected file type. In some embodiments the at least one application can be identified from a plurality of applications in an application library. For example the system can identify one or more applications associated with a selected image file type. The one or more identified applications can be one or more image editing applications included in an application marketplace.

In some embodiments recommending an application for a file can be based on analyzing the contents of the file. For example if a text document file has a significant number of misspellings then a spell checker application can be recommended for the text document file. In another example if slideshow presentation file has a significant number of references to dates then a calendar application can be recommended. In a further example if an image file is analyzed and the image file is determined to show a person with red eyes due to camera flash then a red eye reduction removal application can be recommended.

In some embodiments a relevancy level relative to the user can be assessed for each file or each file type stored in the networked environment at the user s account. The relevancy level for each file can indicate a likelihood that the file will be relevant to the user. A file with a high relevancy level can have a high likelihood of being relevant to the user. In some embodiments the relevancy level can be a score calculated for each file based on the information associated with a respective file.

In some embodiments a file stored on the networked environment at the user s account can be a file that is shared with the user by another user. The information associated with the file can include identifying information for a set of applications used by the other user to access the file. In some embodiments determining which applications to recommend to the user can be based on the identifying information for the set of applications used by the other user.

In some embodiments advertisements can also be recommended using files stored in the networked environment including using information about the files stored in the networked environment . For example if a video file is selected identified as being likely to be most relevant to the user then advertisements relating to videos can be recommended to the user. If the video file is a trailer for a movie then ads can be recommended for renting the movie purchasing the movie and or purchasing movie theater tickets for the movie. In another example if an audio file associated with a musical artist is selected identified as being probably most relevant to the user then ads related to the musical artist s music and or tickets to the artist s concert can be recommended and presented to the user.

To enable user interaction with the computing device an input device can represent any number of input mechanisms such as a microphone for speech a touch sensitive screen for gesture or graphical input keyboard mouse motion input speech and so forth. An output device can also be one or more of a number of output mechanisms known to those of skill in the art. In some instances multimodal systems can enable a user to provide multiple types of input to communicate with the computing device . The communications interface can generally govern and manage the user input and system output. There is no restriction on operating on any particular hardware arrangement and therefore the basic features here may easily be substituted for improved hardware or firmware arrangements as they are developed.

Storage device is a non volatile memory and can be a hard disk or other types of computer readable media which can store data that are accessible by a computer such as magnetic cassettes flash memory cards solid state memory devices digital versatile disks cartridges random access memories RAMs read only memory ROM and hybrids thereof.

The storage device can include software modules for controlling the processor . Other hardware or software modules are contemplated. The storage device can be connected to the system bus . In one aspect a hardware module that performs a particular function can include the software component stored in a computer readable medium in connection with the necessary hardware components such as the processor bus display and so forth to carry out the function.

Chipset can also interface with one or more communication interfaces that can have different physical interfaces. Such communication interfaces can include interfaces for wired and wireless local area networks for broadband wireless networks as well as personal area networks. Some applications of the methods for generating displaying and using the GUI disclosed herein can include receiving ordered datasets over the physical interface or be generated by the machine itself by processor analyzing data stored in storage or . Further the machine can receive inputs from a user via user interface components and execute appropriate functions such as browsing functions by interpreting these inputs using processor .

It can be appreciated that exemplary systems and can have more than one processor or be part of a group or cluster of computing devices networked together to provide greater processing capability.

For clarity of explanation in some instances the present technology may be presented as including individual functional blocks including functional blocks comprising devices device components steps or routines in a method embodied in software or combinations of hardware and software.

In some embodiments the computer readable storage devices mediums and memories can include a cable or wireless signal containing a bit stream and the like. However when mentioned non transitory computer readable storage media expressly exclude media such as energy carrier signals electromagnetic waves and signals per se.

Methods according to the above described examples can be implemented using computer executable instructions that are stored or otherwise available from computer readable media. Such instructions can comprise for example instructions and data which cause or otherwise configure a general purpose computer special purpose computer or special purpose processing device to perform a certain function or group of functions. Portions of computer resources used can be accessible over a network. The computer executable instructions may be for example binaries intermediate format instructions such as assembly language firmware or source code. Examples of computer readable media that may be used to store instructions information used and or information created during methods according to described examples include magnetic or optical disks flash memory USB devices provided with non volatile memory networked storage devices and so on.

Devices implementing methods according to these disclosures can comprise hardware firmware and or software and can take any of a variety of form factors. Typical examples of such form factors include laptops smart phones small form factor personal computers personal digital assistants and so on. Functionality described herein also can be embodied in peripherals or add in cards. Such functionality can also be implemented on a circuit board among different chips or different processes executing in a single device by way of further example.

The instructions media for conveying such instructions computing resources for executing them and other structures for supporting such computing resources are means for providing the functions described in these disclosures.

Although a variety of examples and other information was used to explain aspects within the scope of the appended claims no limitation of the claims should be implied based on particular features or arrangements in such examples as one of ordinary skill would be able to use these examples to derive a wide variety of implementations. Further and although some subject matter may have been described in language specific to examples of structural features and or method steps it is to be understood that the subject matter defined in the appended claims is not necessarily limited to these described features or acts. For example such functionality can be distributed differently or performed in components other than those identified herein. Rather the described features and steps are disclosed as examples of components of systems and methods within the scope of the appended claims.

