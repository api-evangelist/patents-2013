---

title: Providing an error log to a mobile device
abstract: Techniques for providing an error log include establishing, by a hub computing system, a connection with a back-end computing system, the back-end computing system executing a first computer-implemented programming language; receiving, at the hub computing system, a request for an error log from an Open Data Protocol (OData) application that resides on a mobile communications device, the mobile communications device executing a second computer-implemented programming language different than the first computer-implemented programming language, and the error log including error log entries associated with a runtime processing of a data model; registering, on the hub computing system, the error log as an OData service configured to be provided over an OData channel between the hub computing system and the mobile communications device; and providing, by the hub computing system, the error log to the OData application as the OData service over the OData channel.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09146802&OS=09146802&RS=09146802
owner: SAP SE
number: 09146802
owner_city: Walldorf
owner_country: DE
publication_date: 20130627
---
This disclosure relates to providing an error log to a mobile communications device and more particularly providing an error log as an OData service to a mobile communications device.

An error log tool is helpful in analyzing the problems during runtime processing within a system architecture e.g. a distributed computing environment . The error provides detailed context information about errors that have occurred to a user within the system. Thus the user can analyze such errors presented by the error log.

The present disclosure relates to computer implemented methods software and systems for providing an error log. In some implementations a connection is established by a hub computing system with a back end computing system. The back end computing system executes a first computer implemented programming language. A request is received at the hub computing system for an error log from an Open Data Protocol OData application that resides on a mobile communications device. The mobile communications device executes a second computer implemented programming language different than the first computer implemented programming language. The error log includes error log entries associated with a runtime processing of a data model. The error is registered on the hub computing system as an OData service configured to be provided over an OData channel between the hub computing system and the mobile communications device. The error log is provided by the hub computing system to the OData application as the OData service over the OData channel.

Other general implementations include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform operations to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

In a first aspect combinable with any of the general implementations the second computer implemented programming language includes an iOS based or Android based programming language.

In a second aspect combinable with any of the previous aspects providing the error log to the OData application includes providing the error log though a web based graphical user interface.

A third aspect combinable with any of the previous aspects further includes authorizing the mobile communications device to receive the error log.

In a fourth aspect combinable with any of the previous aspects providing the error log to the OData application further includes formatting the error log for display on a graphical user interface of the mobile communications device.

In a fifth aspect combinable with any of the previous aspects registering the error log as an OData service includes generating a model provider class and a data provider class that are each associated with the error log.

In a sixth aspect combinable with any of the previous aspects registering the error log as an OData service includes registering the model provider class and the data provider class to provide the error log as the OData service.

A seventh aspect combinable with any of the previous aspects further includes generating a data object access class and based on the generated data object access class providing access to an application programming interface API associated with the error log.

Various implementations of a computing system according to the present disclosure may have one or more of the following features. For example such features include identification of the precise time and location of errors determining how often an error has occurred performing route cause analysis and reproduction and correction of errors.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

In some examples the illustrated enterprise server computing system may store a plurality of various hosted applications while in some examples the enterprise server computing system may be a dedicated server meant to store and execute only a single hosted application. In some instances the enterprise server computing system may comprise a web server where the hosted applications represent one or more web based applications accessed and executed via the network by the client computing system to perform the programmed tasks or operations of the hosted application.

At a high level the illustrated enterprise server computing system comprises an electronic computing device operable to receive transmit process store or manage data and information associated with the distributed computing system . Specifically the enterprise server computing system illustrated in is responsible for receiving application requests from one or more client applications associated with the client computing system of the distributed computing system and responding to the received requests by processing said requests in the associated hosted application and sending the appropriate response from the hosted application back to the requesting client application. In addition to requests from the client computing system illustrated in requests associated with the hosted applications may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers.

As used in the present disclosure the term computer is intended to encompass any suitable processing device. For example although illustrates a single enterprise server computing system the distributed computing system can be implemented using two or more servers as well as computers other than servers including a server pool. In some examples the enterprise server computing system may be any computer or processing device such as for example a blade server general purpose personal computer PC Macintosh workstation UNIX based workstation or any other suitable device. In other words the present disclosure contemplates computers other than general purpose computers as well as computers without conventional operating systems. Further the enterprise server computing system may be adapted to execute any operating system including Linux UNIX Windows Mac OS or any other suitable operating system.

The illustrated enterprise server computing system further includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the example distributed computing system . The interface is used by the enterprise server computing system for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the client computing system as well as other systems communicably coupled to the network not illustrated . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system .

Regardless of the particular implementation software may include computer readable instructions firmware wired or programmed hardware or any combination thereof on a tangible medium transitory or non transitory as appropriate operable when executed to perform at least the processes and operations described herein. Indeed each software component may be fully or partially written or described in any appropriate computer language including C C Java Visual Basic ABAP assembler Perl any suitable version of 4GL as well as others. While portions of the software illustrated in are shown as individual modules that implement the various features and functionality through various objects methods or other processes the software may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The illustrated enterprise server computing system further includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . The processor may be a central processing unit CPU a blade an application specific integrated circuit ASIC a field programmable gate array FPGA or another suitable component. Generally the processor executes instructions and manipulates data to perform the operations of the enterprise server computing system . Specifically the processor executes the functionality required to receive and respond to requests from the client computing system .

The illustrated enterprise server computing system also includes a memory . Although illustrated as a single memory in two or more memories may be used according to particular needs desires or particular implementations of the example distributed computing system . While memory is illustrated as an integral component of the enterprise server computing system in some implementations the memory can be external to the enterprise server computing system and or the example distributed computing system . The memory may include any memory or database module and may take the form of volatile or non volatile memory including without limitation magnetic media optical media random access memory RAM read only memory ROM removable media or any other suitable local or remote memory component. The memory may store various objects or data including classes frameworks applications backup data business objects jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto associated with the purposes of the enterprise computing system . Additionally the memory may include any other appropriate data such as VPN applications firmware logs and policies firewall policies a security or access log print or other reporting files as well as others.

The illustrated enterprise server computing system further includes a service layer . The service layer provides software services to the example distributed computing system . The functionality of the enterprise server computing system may be accessible for all service consumers using this service layer. For example in one implementation the client computing system can utilize the service layer to communicate with the design engine . Software services provide reusable defined business functionalities through a defined interface. For example the interface may be software written in extensible markup language XML or other suitable language. While illustrated as an integrated component of the enterprise server computing system in the example distributed computing system alternative implementations may illustrate the service layer as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The illustrated enterprise server computing system further includes an application programming interface API . In some implementations the API can be used to interface between the design engine and one or more components of the enterprise server computing system or other components of the example distributed computing system both hardware and software. For example in some implementations the design engine can utilize the API to communicate with the client computing system . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. While illustrated as an integrated component of the enterprise server computing system in the example distributed computing system alternative implementations may illustrate the API as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the API may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The client computing system may be any computing device operable to connect to or communicate with at least the enterprise server computing system using the network . In general the client computing system comprises a computer operable to receive transmit process and store any appropriate data associated with the example distributed computing system . The illustrated client computing system further includes an application . The application is any type of application that allows the client computing system to request and view content on the client computing system . In some implementations the application can be and or include a web browser. In some implementations the application can use parameters metadata and other information received at launch to access a particular set of data from the enterprise server computing system . Once a particular application is launched a user may interactively process a task event or other information associated with the enterprise server computing system . Further although illustrated as a single application the application may be implemented as multiple applications in the client computing system .

The illustrated client computing system further includes an interface a processor and a memory . The interface is used by the client computing system for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the enterprise server computing system as well as other systems communicably coupled to the network not illustrated . The interface may also be consistent with the above described interface of the enterprise server computing system or other interfaces within the example distributed computing system .

The processor may be consistent with the above described processor of the enterprise server computing system or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the client computing system including the functionality required to send requests to the enterprise server computing system and to receive and process responses from the enterprise server computing system . The memory may be consistent with the above described memory of the enterprise server computing system or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the client computing system .

Further the illustrated client computing system includes a GUI . The GUI interfaces with at least a portion of the example distributed computing system for any suitable purpose including generating a visual representation of a web browser. In particular the GUI may be used to view and navigate various web pages located both internally and externally to the enterprise server computing system . Generally through the GUI an enterprise server computing system user is provided with an efficient and user friendly presentation of data provided by or communicated within the example distributed computing system .

There may be any number of client computing systems associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client computing system communicably coupled to the enterprise server computing system using network alternative implementations of the example distributed computing system may include any number of client computing systems suitable for the purposes of the example distributed computing system . Additionally there may also be one or more client computing systems external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system using the network . Moreover while the client computing system is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The illustrated client computing system is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example the client computing system may comprise a computer that includes an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the enterprise server computing system or the client computing system itself including digital data visual information or a GUI as shown with respect to the client computing system .

The illustrated distributed computing system further includes a repository . In some implementations the repository is an in memory repository. The repository can be a cloud based storage medium. For example the repository can be networked online storage where data is stored on virtualized pools of storage.

With respect to the network generally the illustrated network facilitates wireless or wireline communications between the components of the distributed computing system i.e. between the computing systems and as well as with any other local or remote computer such as additional clients servers or other devices communicably coupled to network but not illustrated in . The network is illustrated as a single network in but may be a continuous or discontinuous network without departing from the scope of this disclosure so long as at least a portion of the network may facilitate communications between senders and recipients. The network may be all or a portion of an enterprise or secured network while in another instance at least a portion of the network may represent a connection to the Internet.

In some instances a portion of the network may be a virtual private network VPN such as for example the connection between the client computing system and the enterprise server computing system . Further all or a portion of the network can comprise either a wireline or wireless link. Example wireless links may include 802.11a b g n 802.20 WiMax and or any other appropriate wireless link. In other words the network encompasses any internal or external network networks sub network or combination thereof operable to facilitate communications between various computing components inside and outside the illustrated distributed computing system . The network may communicate for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and other suitable information between network addresses. The network may also include one or more local area networks LANs radio access networks RANs metropolitan area networks MANs wide area networks WANs all or a portion of the Internet and or any other communication system or systems at one or more locations.

In general the back end computing system stores and provides an error log to the hub computing system . The error log includes error log entries associated with a runtime processing of a data model e.g. a software module executing on the enterprise computing system . The back end computing system is in communication with the hub computing system e.g. over the network . The back end computing system includes an Open Data Protocol OData model and data provider and a gateway framework module . In some examples OData is a data access protocol designed to provide standard CRUD create read update and delete access to a data source e.g. the back end computing system .

In general the hub computing system receives the error log and provides the error log as an OData service over an OData channel between the hub computing system and the mobile communications device . The hub computing system is in communication with the back end computing system and the mobile communications device . The hub computing system includes a gateway framework module a representational state transfer REST and OData library and a hypertext transfer protocol HTTP framework module .

In general the mobile communications device receives the error log as an OData service over the OData channel between the mobile communication device and the hub computing system . The mobile communications device is in communication with the hub computing system . The mobile communications device includes an OData application e.g. the OData application resides on the mobile communications device . In some examples the mobile communication system is analogous to the client computing system . In some examples the mobile communications device includes a smartphone computing device a tablet computing device a phablet computing device a personal digital assistant PDA or other mobile computing device operating a mobile operating system e.g. an iOS based Android based Windows Mobile based BlackBerry or Symbian based mobile computing platform .

In some implementations a connection is established by the hub computing system with the back end computing system . Specifically the gateway framework module of the hub computing system issues a remote function call RFC to the back end computing system and particularly to the gateway framework module of the back end computing system . In some examples by issuing the RFC to the back end computing system the hub computing system is able to communicate with the back end computing system including exchange of data between the hub computing system and the back end computing system .

Further in some examples the back end computing system executes a first computer implemented programming language such as a propriety programming language or other high level programming language . Additionally in some examples the hub computing system executes a second computer implemented programming language differing from the first computer implemented programming language. For example the second computer implemented programming language can include one of the programming languages of PHP ASP Java C or C . To that end when the hub computing system and the back end computing system execute differing computer implemented programming languages by issuing the RFC by the hub computing system to the back end computing system the hub computing system and the back end computing system are able to communication and exchange data.

In some examples the hub computing system establishes a connection with the back end computing system in response to a request for the error log from the mobile communications device .

In some implementations in response to receiving the RFC from the hub computing system the back end computing system retrieves an error log associated with a runtime processing of a data model. For example the error log includes error log entries related to OData processing within the system including errors associated with the OData application e.g. wrong data from the OData application and or errors in OData implementation e.g. implementations in the back end computing system .

In some examples retrieving the error log includes accessing the error log from the OData model and data provider . For example the OData model and data provider can provide access to the error log. The error log can be stored in a repository e.g. the repository and the OData model and data provider access the repository to provide the error log.

The hub computing system receives a request for the error log from the OData application . Specifically a user e.g. a developer administrator support consultant or end user associated with the mobile communications device can initiate the request e.g. using a graphical user interface GUI for the error log utilizing the OData application . In response to the initiation of the request for the error log the mobile communications device provides the request to the hub computing system over a network e.g. the network using a HTTP application protocol established between the hub computing system and the mobile communications device . Specifically the mobile communications device provides the request for the error log to the HTTP framework module . The HTTP framework module of the hub computing system receives the request for the error log.

In some examples the mobile communications device executes a computer implemented processing language different from the computer implemented language that the back end system executes.

The hub computing system registers the error log as an OData service that can be provided over an OData channel between the hub computing system and the mobile communications device . Specifically registering the error log received from the back end computing system can include converting a format of the error log such that the mobile communications device and the OData application are able to analyze and display data of the error log e.g. on a GUI of the mobile communications device . For example the REST and OData library can convert the format of the error log associated with the computer implemented processing language of the back end computing system to a format that the mobile communications device is able to utilize e.g. an OData service . Specifically the hub computing system and particularly the REST and the OData library register the error log as an OData service that the mobile communications device and particularly the OData application can utilize such that the error log can be displayed by the mobile communications device and analyzed e.g. by a user of the mobile communications device .

To that end by registering the error as an OData service the OData service is provided over an OData channel that is established or that is previously established between the hub computing system and the mobile communications device . Specifically in some implementations registering the error log as an OData service includes generating a model provider class and a data provider class that are each associated with the error log. For example the OData model and data provider generates the model provider class and the data provider class that are associated with the error log. Furthermore the model provider class and the data provider class are registered e.g. on the hub computing system to provide the error log as the OData service. In some further implementations a data object access DAO class is generated to provide an application programming API associated with the error log. For example the back end computing system generates the DAO class to provide access to the error log such that the error log can be registered as an OData service.

The hub computing system provides the error log to the OData application as the OData service over the OData channel. Specifically the hub computing system provides e.g. over the network the error log that is accessed by from the back end computing system in the format of an OData service to the OData application of the mobile communications device . In some examples the error log is provided to the OData application as the OData service through a web based graphical user interface. For example the error log as the OData service is formatted such that a web browser of the mobile communications device is able to appropriately graphically render the error log such that the error log can be displayed by the mobile communications device and analyzed e.g. by a user of the mobile communications device . In some examples the error log is formatted for display on a GUI of the mobile communication device . For example the error log is formatted such that the GUI is able to appropriately display the error log based on the dimensions of the GUI e.g. a screen size of the mobile communications device that includes the GUI .

In some further implementations the mobile communications device is authorized to receive the error log as the OData service. Specifically the mobile communications device is registered by the hub computing system as a registered e.g. approved system for receiving the error log as the OData service. For example the mobile communication device can include a third party device and thus to maintain the security e.g. integrity of the error log and the system the mobile communications device is registered with the hub computing system . Thus only registered mobile communications devices can receive the error log as the OData service.

The GUI includes an overview portion of the error log and an error context portion of the error log. The overview portion lists errors including a line field an entry field a date field a time field a user field an error ID field an error count field and an error text field . Specifically for each error the line field and the entry field include information about where the error occurred e.g. in source code the date field and the time field include information about when the error occurred the user field includes information about what user is associated with the error or the user currently viewing the error log the error ID field includes information about the identification ID number associated with the error the error count field includes information associated with a number of occurrences of the error and the error text field includes text information associated with the error. In some examples the error count field facilitates a reduction in the amount of data stored in the error log as it counts the number of times of an identical error according to standard parameters including user name service name message class and message number within a given time period e.g. one hour .

When a particular error is selected from the error log of the overview portion the error context portion displays detailed context information about the particular error. In some examples the context information can be expanded or collapsed based on the desired level of detail e.g. the level of detail the user desires . The context information is organized accordingly to name and value.

In step a hub computing system establishes a connection with a back end computing system. The back end computing system executes a first computer implemented programming language. For example a connection is established by the hub computing system with the back end computing system . Specifically the gateway framework module of the hub computing system issues a remote function call RFC to the back end computing system and particularly to the gateway framework module of the back end computing system .

In step at the hub computing system a request is received for the error log from an OData application that resides on a mobile communications device. The mobile communications device executes a second computer implemented programming language different than the first computer implemented programming language of the back end computing system . The error log including error log entries associated with a runtime processing of a data model. For example the hub computing system receives a request for the error log from the OData application . Specifically a user e.g. a developer administrator support consultant or end user associated with the mobile communications device can initiate the request e.g. using a graphical user interface GUI for the error log utilizing the OData application . In some examples the second computer implemented programming language of the mobile communications device includes an iOS based or Android based programming language.

In step the mobile communications device is authorized to receive the error log. For example the mobile communications device is authorized to receive the error log as the OData service. Specifically the mobile communications device is registered by the hub computing system as a registered e.g. approved system for receiving the error log as the OData service.

In step the error log is registered on the hub computing system as an OData service that can be provided over an OData channel between the hub computing system and the mobile communications device. For example the hub computing system registers the error log as an OData service that can be provided over an OData channel between the hub computing system and the mobile communications device . Specifically registering the error log received from the back end system can include converting a format of the error log such that the mobile communications device and the OData application are able to analyze and display data of the error log e.g. on a GUI of the mobile communications device .

In step the error log is provided by the hub computing system to the OData application as the OData service over the OData channel. The hub computing system provides the error log to the OData application as the OData service over the OData channel. Specifically the hub computing system provides e.g. over the network the error log that is accessed by from the back end computing system in the format of an OData service to the OData application of the mobile communications device . In some examples the error log is provided to the OData application as the OData service through a web based graphical user interface. In some examples the error log is formatted for display on a GUI of the mobile communication device .

In step a model provider class and a data provider class are registered that are each associated with the error log. For example the OData model and data provider generate the model provider class and the data provider class that are associated with the error log. In step the model provider class and the data provider class are registered to provide the error log as the OData service. In step a data object access DAO class is generated to provide access to an application programming interface API associated with the error log For example the back end computing system generates the DAO class such to provide access to the error log such that the error log can be registered as an OData service.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory program carrier for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example Linux UNIX Windows Mac OS Android iOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit .

Computers suitable for the execution of a computer program include by way of example can be based on general or special purpose microprocessors or both or any other kind of central processing unit. Generally a central processing unit will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a central processing unit for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a wide area network WAN e.g. the Internet and a wireless local area network WLAN .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order e.g. this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system modules and components in the implementations described above should not be understood as requiring such separation in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

