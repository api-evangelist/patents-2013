---

title: Techniques for managing computing resources
abstract: Techniques for managing computing resources are disclosed. In one particular embodiment, the techniques may be realized as a method for managing computing resources including receiving a desired resource configuration, determining currently available resources, determining, via at least one computer processor, whether the currently available resources satisfy the desired resource configuration, and determining a resource implementation based on the determination of whether the currently available resources satisfy the desired resource configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639502&OS=09639502&RS=09639502
owner: Veritas Technologies LLC
number: 09639502
owner_city: Mountain View
owner_country: US
publication_date: 20130116
---
The present disclosure relates generally to managing virtual machine states and more particularly to techniques for managing computing resources.

Virtual machines provide increased flexibility and functionality for computing resources in a clustered computing environment. However conventional virtual machine management requires that a user or an administrator specify the states for particular virtual machines by for example specifying which virtual machines are to start or be online and which virtual machines are to stop or be offline. This is very time consuming and difficult for a user or an administrator as the virtual machines may be spread across multiple nodes in a clustered computing environment the virtual machine resources may change over time and the desired virtual machine implementation configuration may change over time. In view of the foregoing it may be understood that there may be significant problems and shortcomings associated with traditional virtual machine management technologies.

Techniques for managing computing resources are disclosed. In one particular embodiment the techniques may be realized as a method for managing computing resources comprising receiving a desired resource configuration determining currently available resources determining via at least one computer processor whether the currently available resources satisfy the desired resource configuration and determining a resource implementation based on the determination of whether the currently available resources satisfy the desired resource configuration.

In accordance with other aspects of this particular embodiment the method further comprises implementing the determined resource implementation.

In accordance with other aspects of this particular embodiment the method further comprises notifying a user when it is determined that the currently available resources do not satisfy the desired resource configuration.

In accordance with other aspects of this particular embodiment the method further comprises monitoring the currently available resources to determine whether the currently available resources have changed.

In accordance with other aspects of this particular embodiment the method further comprises identifying which specific resources have changed when it has been determined that the currently available resources have changed and determining whether the changed resources satisfy the desired resource configuration.

In accordance with other aspects of this particular embodiment the method further comprises notifying a user when it is determined that the changed resources do not satisfy the desired resource configuration.

In accordance with further aspects of this particular embodiment the desired resource configuration is specified by a user via a user interface.

In accordance with other aspects of this particular embodiment the method further comprises determining whether an updated resource configuration has been received and determining whether the currently available resources satisfy the updated resource configuration when it has been determined that the updated resource configuration has been received.

In accordance with other aspects of this particular embodiment the method further comprises notifying a user when it is determined that the currently available resources do not satisfy the updated resource configuration.

In accordance with other aspects of this particular embodiment the method further comprises determining an updated resource implementation to satisfy the updated resource configuration.

In accordance with other aspects of this particular embodiment the currently available resources include at least one virtual machine.

In accordance with additional aspects of this particular embodiment the currently available resources include a plurality of virtual machines arranged at a plurality of computing nodes.

In accordance with additional aspects of this particular embodiment each of the plurality of virtual machines are within one of a plurality of service groups and a plurality of applications are implemented across the plurality of virtual machines

In accordance with additional aspects of this particular embodiment the desired resource configuration includes predicate logic.

In accordance with additional aspects of this particular embodiment the predicate logic includes a plurality of Boolean conditions.

In accordance with additional aspects of this particular embodiment the Boolean conditions include at least one of and or nor xor greater than and less than.

In accordance with additional aspects of this particular embodiment the predicate logic indicates a desired first state for a first plurality of resources and a desired second state for a second plurality of resources.

In accordance with additional aspects of this particular embodiment desired first state is online the first plurality of resources are within a first computing node the desired second state is online and the second plurality of resources are within a second computing node different from the first computing node.

In another particular embodiment the technique may be realized as a at least one non transitory processor readable storage medium storing a computer program of instructions configured to be readable by at least one processor for instructing the at least one processor to execute a computer process for performing a method for managing computing resources comprising receiving a desired resource configuration determining currently available resources determining via at least one computer processor whether the currently available resources satisfy the desired resource configuration and determining a resource implementation based on the determination of whether the currently available resources satisfy the desired resource configuration.

In another particular embodiment the technique may be realized as a system for managing computing resources comprising one or more processors communicatively coupled to a network wherein the one or more processors are configured to receive a desired resource configuration determine currently available resources determine whether the currently available resources satisfy the desired resource configuration and determine a resource implementation based on the determination of whether the currently available resources satisfy the desired resource configuration.

The present disclosure will now be described in more detail with reference to particular embodiments thereof as shown in the accompanying drawings. While the present disclosure is described below with reference to particular embodiments it should be understood that the present disclosure is not limited thereto. Those of ordinary skill in the art having access to the teachings herein will recognize additional implementations modifications and embodiments as well as other fields of use which are within the scope of the present disclosure as described herein and with respect to which the present disclosure may be of significant utility.

With reference to computer system of modem network interface or some other method may be used to provide connectivity from one or more of client systems and to network . Client systems and may access information on server A N using for example a web browser or other client software not shown . Such a client may allow client systems and to access data hosted by any one of servers A N or one of storage devices A N N N and or N .

Networks and may be local area networks LANs wide area networks WANs the Internet cellular networks satellite networks or other networks that permit communication between clients servers and other devices communicatively coupled to networks and . Networks and may further include one or any number of the exemplary types of networks mentioned above operating as a stand alone network or in cooperation with each other. Networks and may utilize one or more protocols of one or more clients or servers to which they are communicatively coupled. Networks and may translate to or from other protocols to one or more protocols of network devices. Although networks and are each depicted as one network it should be appreciated that according to one or more embodiments networks and may each comprise a plurality of interconnected networks.

Storage devices A N N N and or N may be network accessible storage and may be local remote or a combination thereof to any one of servers A N. Storage devices A N N N and or N may utilize a redundant array of inexpensive disks RAID magnetic tape disk a storage area network SAN an internet small computer systems interface iSCSI SAN a Fibre Channel SAN a common Internet File System CIFS network attached storage NAS a network file system NFS optical based storage or other computer accessible storage. Storage devices A N N N and or N may be used for backup or archival purposes. For example storage devices N N and or N may be used to store data replicated from storage devices A N .

According to some embodiments clients and may be smartphones PDAs desktop computers laptop computers servers other computers or computing devices or other devices coupled via a wireless or wired connection to network . Clients and may receive data from user input a database a file a web service and or an application programming interface.

Servers A N may be application servers archival platforms backup servers network storage devices media servers email servers document management platforms enterprise search servers or other devices communicatively coupled to network . Servers A N may utilize one of storage devices A N N N and or N for the storage of application data backup data or other data. Servers A N may be hosts such as an application server which may process data traveling between clients and and a backup platform a backup process and or storage. According to some embodiments servers A N may be platforms used for backing up and or archiving data. One or more portions of data may be backed up or archived based on a backup policy and or an archive applied attributes associated with the data source space available for backup space available at the data source or other factors.

A plurality of virtual machines may be implemented across servers A N. Each server A N client or device A N A N may function as a node within a clustered computing environment. Multiple engine processes may run across the nodes to support various applications including for example a web application. The applications may be grouped within different service groups that each include at least one virtual machine. The virtual machines within a first service group may be dependent upon a second service group and each service group may support the varying applications. Further the applications may be spread across multiple virtual machines running on multiple nodes within different service groups. The virtual machines may be managed according to Veritas Business Service from Symantec Corporation. Further the clustering configuration may be implemented by the Vertias Cluster Server from Symantec Corporation.

According to some embodiments server A may contain one or more portions of software for virtual machine management such as for example virtual machine management module . As illustrated one or more portions of the virtual machine management module may reside at a network centric location. For example server A may be a server a firewall a gateway or other network element that may perform one or more actions to manage virtual machines. According to some embodiments network may be an external network e.g. the Internet and server A may be a gateway or firewall between one or more internal components and clients and the external network. According to some embodiments virtual machine management module may be implemented as part of a cloud computing environment.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM may be the main memory into which the operating system and application programs may be loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system may be stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit a removable disk unit e.g. Universal Serial Bus drive or other storage medium. According to some embodiments virtual machine management module may be resident in system memory .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code to implement the present disclosure may be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Code to implement the present disclosure may also be received via one or more interfaces and stored in memory. The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 OS X UNIX Linux or another known operating system.

Power manager may monitor a power level of battery . Power manager may provide one or more APIs Application Programming Interfaces to allow determination of a power level of a time window remaining prior to shutdown of computer system a power consumption rate an indicator of whether computer system is on mains e.g. AC Power or battery power and other power related information. According to some embodiments APIs of power manager may be accessible remotely e.g. accessible to a remote backup management module via a network connection . According to some embodiments battery may be an Uninterruptable Power Supply UPS located either local to or remote from computer system . In such embodiments power manager may provide information about a power level of an UPS.

The description below describes network elements computers and or components of a system and method for virtual machine management that may include one or more modules. As used herein the term module may be understood to refer to computing software firmware hardware and or various combinations thereof. Modules however are not to be interpreted as software which is not implemented on hardware firmware or recorded on a processor readable recordable storage medium i.e. modules are not software per se . It is noted that the modules are exemplary. The modules may be combined integrated separated and or duplicated to support various applications. Also a function described herein as being performed at a particular module may be performed at one or more other modules and or by one or more other devices instead of or in addition to the function performed at the particular module. Further the modules may be implemented across multiple devices and or other components local or remote to one another. Additionally the modules may be moved from one device and added to another device and or may be included in both devices.

The VM configuration reception module may receive a desired virtual machine management configuration from a user or an administrator. The desired configuration may be received via a graphical user interface or any other appreciate input device. The received virtual machine management configuration may then be passed to a virtual machine management daemon. For example the daemon may be a VBS daemon that receives the user specific virtual machine configuration. The desired configuration may specify when particular virtual machine resources are to start or stop. In addition the desired configuration may specify a particular set of resources to bring online or states for the resources. Further the desired configuration may utilize predicate logic to specify the desired virtual machine resource configuration using various Boolean conditions. The Boolean conditions may include AND OR NOR XOR greater than less than at least etc. Accordingly the user or administrator may set a wide variety configurations that do not require the identification of particular virtual machines for particular nodes.

The VM resource determination module may determine the physical and virtual machine resources currently available within a clustered computing environment. For example the VM resource determination module may determine which virtual machines are currently available across multiple nodes which applications are supported by the virtual machines the service groups and the interdependency between the service groups. The VM resource determination module may determine the available resources in any of a plurality of ways. For example the VM resource determination module may broadcast a request for a response indicating the availability of the resources. In some embodiments the resources within the computing environment may periodically report their respective availability to the VM resource determination module .

The VM resource comparison module may compare the virtual and or physical machine resources determined to be currently available by the VM resource determination module with the desired virtual or physical machine management configuration received by the VM configuration reception module . In some embodiments the VM resource comparison module may compare each of the elements specified in the virtual machine management configuration with the determined available computing resources. For example the VM resource comparison module may directly compare the nodes the service groups the applications the clusters and any other specified aspects of the configuration. In addition the VM resource comparison module may determine whether the currently available resources may satisfy the Boolean conditions specified in the predicate logic of the desired configuration. In one example the VM resource comparison module may determine whether the conditions of N number of virtual machines on Node A AND M number of virtual machines on Node B specified in the desired configuration are satisfied by the currently available resources. The VM resource comparison module may compare the currently available resources with any additional Boolean conditions or specific conditions included in the desired configuration.

The VM configuration determination module may determine which virtual machine resources to utilize or implement to satisfy the desired virtual machine management configuration specified by the user via the VM configuration reception module based on the results of the comparison from the VM resource comparison module . For example the VM configuration determination module may determine the particular resources i.e. server cluster node virtual machine service group application etc. to be implemented to satisfy the desired configuration. In some instances the VM resource comparison module may identify multiple resources that may satisfy the desired conditions. As a result the VM configuration determination module may select from the multiple resources that satisfy the desired configuration the particular resources to be implemented and the states i.e. online offline etc. for those resources.

The VM implementation module may then implement the resource configuration determined by the VM configuration determination module . In some embodiments the VM implementation module may transmit a command to the specified resources to bring those resources to the selected state. For example the VM implementation module may transmit a command to a first plurality of virtual machines across multiple nodes to start or bring those resources online and another command to a second plurality of virtual machines to stop or bring a second set of nodes offline. The VM implementation module may confirm whether the requested resources are brought to their proper states following the transmission on the commands. In one embodiment the resources may report their states when they change to the virtual machine management module .

The VM resource monitoring module may monitor the resources within the computing environment to determine the availability of the resources and any change in the availability of resources. In addition the VM resource monitoring module may monitor the resources within the computing environment to determine the current states start stop etc. of the resources. The VM resource monitoring module may monitor the physical and virtual machine resources determined to be currently available by the VM resource determination module . In addition the VM resource monitoring module may monitor any additional physical and virtual machine resources within the clustered computing environment that may not be identified by the VM resource determination module . The VM resource monitoring module may determine the availability and states of the resources periodically or upon the occurrence of a particular event. For example the VM resource monitoring module may determine the availability and states of all of the resources upon a change of the desired configuration a change of the availability of a currently utilized resource or any other event.

The notification module may present information regarding the management of the at least one virtual machine. For example the notification module may present this information to a user via a graphical user interface on a display or in any other appropriate mechanism.

At block a desired virtual machine management configuration may be received. The desired configuration may be received from a user or administrator. In some embodiments the desired virtual machine management configuration may be received via the VM management configuration reception module . The desired virtual machine configuration may specify the desired states of virtual machines using predicate logic. In addition the configuration may specify the states of the virtual machines spread across multiple nodes and service groups supporting various applications. For example the configuration may specify whether a certain number of first virtual machines are to start be online or be up on a first node when a specified number of second virtual machines are to be on a second node without specifying the particular states for particular resources. The configuration may also specify when to stop or bring offline certain virtual machines on the various nodes.

Furthermore the configuration may specify an arbitrary predicate logic to manage the states of the virtual machines spread across the nodes which support the various applications. The predicate logic may include any one of a variety of Boolean conditions e.g. AND OR NOR XOR etc. . For example the configuration may specify that n number of virtual machines on a first node must be up OR n 1 virtual machines on a second node must be up online. Additionally the configuration may specify that n number of virtual machines on a first node AND m number of virtual machines on a second node must be up OR x number virtual machines on a third node must be up online. It will be understood that a user may specify varying configurations of the virtual machines based on any combination of Boolean conditions. Further by utilizing the arbitrary predicate logic it is not necessary for a user to specify the desired states for particular resources but rather general requirements. Additionally the desired configuration could specify physical machines to be utilized in conjunction with the predicate logic. Further the desired configuration could specify applications and resources within the machines.

At block the resources may be brought online. In some embodiments additional operations may be performed on the resources. The process may then proceed to block .

At block the currently available virtual machine resources may be determined. In some embodiments the currently available virtual machine resources may be determined by the VM resource determination module . For example the VM resource determination module may determine which physical resources are online or available which nodes are online or available which virtual machines are online or available the service group configuration within the nodes the engine processes running on the nodes and the applications being executed by the virtual machines. Additionally the currently available physical machines within the clustered environment may be determined independent of a virtual machine configuration. The process may then proceed to block .

At block the currently available virtual machine resources determined at block are compared to the VM management configuration received at block . In some embodiments the VM resource comparison module may compare the currently available virtual machine resources determined at block to the VM management configuration received at block . For example the number of virtual machines desired may be compared to the number of virtual machines available. In addition further aspects of the available virtual machines in the clustered environment e.g. node service group application etc. may be compared to the desired configuration. Further the available physical machines in the clustered environment may be determined. The process may then proceed to block .

At block it may be determined whether the currently available virtual machine resources determined at block satisfy the VM management configuration received at block based on the comparison at block . In some embodiments the VM resource comparison module further determine whether the currently available virtual machine resources satisfy the VM management configuration. For example it may be determined if the number of currently available virtual machines satisfies the desired number of virtual machines. Further when the desired configuration specifies physical machines instead of virtual machines the currently available physical machines may be compared to the desired configuration. Additionally when the received VM management configuration specifies a predicate logic it may be determined if the Boolean conditions specified in the predicate logic may be satisfied by the currently available virtual machines or currently available physical machines.

In one embodiment the predicate logic for the desired configuration may specify n number of virtual machines on node A within cluster AND m number of virtual machines on node B within cluster . In addition the predicate logic may specify preferable resources. In this instance it may be determined at block whether the currently available virtual machine resources may satisfy these conditions. If it is determined that the currently available virtual machine resources do not satisfy the desired confirmation then it may be determined whether a different set of machines may satisfy the specified configuration. Further if it is determined that the currently available virtual machine resources determined at block do not satisfy the desired configuration received at block then the process may proceed to block

At block the user may be notified that the currently available virtual machine resources do not satisfy the desired configuration via the notification module . Upon notification that the currently available virtual machine resources do not satisfy the desired VM management configuration a user or administrator may then specify an alternate configuration using different predicate logic or may specify a particular configuration. Additionally the user or administrator may modify the underlying virtual machine resources by specifying a different set of machines to satisfy the desired configuration.

If it is determined that the currently available virtual machine resources determined at block do satisfy the desired VM management configuration received at block then the process may proceed to block . At block the specific virtual machine resources within the available virtual machines needed to satisfy the desired configuration are identified. In some embodiments the specific virtual machine resources and the configuration of the specific virtual machine resources may be determined by the VM configuration determination module . For example the VM configuration determination module may determine that to satisfy the desired configuration VM VM VM and VM within cluster C and VM VM and VM within cluster C on NODE A AND VM VM VM and VM on NODE B are to be brought online or up. After the specific virtual machine resources and the configuration of the resources are determined the process proceeds to block . Additionally when the desired configuration specifies physical machine resources the particular physical machine resources necessary to satisfy the desired configuration including the predicate logic may be identified.

At block the virtual machine configuration including the specific virtual machine resources determined at block may be implemented. In some embodiments the VM implementation module may implement the determined virtual machine configuration. For example the VM implementation module may transmit to each of the specific virtual machines identified at block a command to start bring online. The commands may be transmitted over a network to each of the appropriate nodes and virtual machines. Additionally when the desired resources are physical machines a command to bring the specified physical machines may be transmitted. It will be understood to those skilled in the art the specific content of the command to bring online the specific resources.

At block it may be determined whether the currently available VM resources have changed. In some embodiments the VM resource monitoring module may determine whether the resources have changed. The VM resource monitoring module may periodically determine or continuously monitor the virtual machine resources that are currently available. Additionally the VM resource monitoring module may determine the virtual machine resources that are currently available when requested by a user or administrator. In some embodiments the VM resource monitoring module may transmit a status request to each of the virtual machine resources and determine the available resources based on a response from the virtual machines. The VM resource monitoring module may then compare the newly determined resources with the resources previously determined to be available. If it is determined at block that the currently available resources have not changed the process proceeds to block .

At block the currently implemented virtual machine configuration may be maintained. In some embodiments the VM implementation module may maintain the currently implemented virtual machine configuration. The VM implementation module may transmit a command to each of the resources currently online to maintain their state or may await transmitting any additional commands to the resources until it is determined that the available resources have changed or the desired configuration has changed.

If it is determined at block that the currently available resources have changed then the process may proceed to block . At block the currently available virtual machine resources may be determined. In some embodiments the VM resource determination module may determine which of the virtual machine resources are currently available and how the resources have changed. For example it may be determined that NODE A VM VM that is currently being utilized by the current configuration is now unavailable. Additionally it may be determined that NODE Z VM VM that is currently not being utilized is now available. The process may then proceed to block .

At block the currently available virtual machine resources determined at block are compared to the desired configuration received at block . In some embodiments the VM resource comparison module may compare the currently available virtual machine resources determined at block to the VM management configuration received at block . The comparison of the resources performed at block is similar to the comparison of the resources described above with respect to block . In addition the specific change in currently available resources may be identified. The process may then proceed to block .

At block it may be determined whether the currently available virtual machine resources determined at block satisfy the desired configuration including the predicate logic received at block based on the comparison at block . In some embodiments the VM resource comparison module may determine whether the currently available virtual machine resources satisfy the desired configuration based on the change of resources identified at block . For example if it is determined that a resource outside of the implemented configuration has become unavailable or available then it may be determined that the currently available resources still satisfy the desired confirmation and the proceed may proceed to block . Additionally if it is determined that a resource within the implemented configuration has become unavailable the process may proceed to block if the desired configuration may be still be satisfied by the available resources i.e. NODE Z VM VM .

Alternatively if it is determined that a resource within the implemented configuration has become unavailable and the currently available resources determined at block do not satisfy the desired configuration it may be determined whether a different set of machines may satisfy the specified configuration. Further if it is determined that the currently available resources do not satisfy the desired configuration the process may proceed to block . At block the user may be notified via the notification module . Upon notification that the currently available virtual machine resources do not satisfy the desired VM management configuration a user or administrator may then specify an alternate configuration using predicate logic or a specific configuration.

At block the specific virtual machine resources within the available virtual machines needed to satisfy the desired configuration are identified. In some embodiments the specific virtual machine resources and the configuration of the specific virtual machine resources may be determined by the VM configuration determination module . When it is determined at block that a resource outside of the currently implemented configuration has become unavailable it may be determined that the current implementation is to be maintained.

Additionally when it is determined at block that a resource outside of the currently implemented configuration has become available it may be determined that the newly available resource is preferable over the currently utilized resources. As a result a new configuration utilizing the newly available resource may be determined. Further if it is determined that a resource within the currently implemented configuration has become unavailable but that the available resources may still satisfy the desired configuration based on the predicate logic then a new configuration utilizing the presently available resources may be determined. The process may then proceed to block .

At block the virtual machine configuration including the specific virtual machine resources determined at block may be implemented. In some embodiments the VM implementation module may implement the determined virtual machine configuration. The implementation of the determined configuration at block is similar to the implementation of the configuration described above with respect to block . Each of the above noted process steps may be implemented for physical machine resources as well as virtual machine resources.

At block it may be determined whether an updated virtual machine configuration has been received. In some embodiments the updated virtual machine configuration may be received via the VM management configuration reception module . The updated configuration may specify different resources to be utilized. For example the updated configuration may indicate a different predicate logic utilizing a different set of Boolean conditions e.g. AND OR NOR XOR etc. desired by the user or administrator. The reception of the updated configuration at block is similar to the reception of the initial configuration described above with respect to block . If it is determined that an updated configuration has not been received the process may proceed to block .

At block the currently implemented virtual machine configuration may be maintained. In some embodiments the VM implementation module may maintain the currently implemented virtual machine configuration. The maintaining of the current resource configuration at block is similar to the maintaining of the configuration described above with respect to block .

Alternatively if it is determined that an updated configuration has been received at block the process may proceed to block . At block the currently implemented configuration may be determined. In some embodiments the VM configuration determination module may determine the currently implemented configuration. Additionally it may be determined how the currently implemented configuration is different from the updated configuration received at block . For example it may be determined that the current configuration requires that n number of virtual machines on NODE A AND m number of virtual machines on NODE B must be online whereas the updated configuration requires that n number of virtual machines on NODE A AND m number of virtual machines on NODE B OR m 5 number of virtual machines on NODE C must be online. The proceed may then proceed to block .

At block the currently available virtual machine resources may be determined. In some embodiments the VM resource determination module may determine which of the virtual machine resources are currently available. Additionally the VM resource monitoring module may determine whether the resources have changed and how the available resources have changed. The determination of the available resources and how the resources have changed at block are similar to the processes of blocks and . The process may then proceed to block .

At block it may be determined whether the updated configuration received at block may be satisfied by the currently available resources determined at block . In some embodiments the VM resource comparison module may determine whether the currently available virtual machine resources satisfy the updated configuration based on the currently available resources determined at block . The determination of whether the currently available resources satisfy the updated configuration at block is similar to the processes of blocks and . If it is determined that the currently available resources may not satisfy the updated configuration at block the process may proceed to block .

At block the user or administrator may be notified via the notification module that the currently available resources may not satisfy the updated configuration. Upon notification that the currently available virtual machine resources do not satisfy the desired VM management configuration a user or administrator may then specify an alternate configuration using predicate logic or a specific configuration.

Alternatively if it is determined at block that the currently available virtual machine resources determined may satisfy the updated VM management configuration received at block then the process may proceed to block . At block the specific virtual machine resources within the currently available virtual machines needed to satisfy the updated configuration are identified. In some embodiments the specific virtual machine resources and the configuration of the specific virtual machine resources may be determined by the VM configuration determination module . The determination of the updated virtual machine configuration at block is similar to the determination of the virtual machine configuration at blocks and . After the virtual machine configuration has been determined the process may proceed to block .

At block the updated virtual machine configuration including the specific virtual machine resources determined at block may be implemented. In some embodiments the VM implementation module may implement the updated virtual machine configuration. The implementation of the updated configuration at block is similar to the implementation of the configuration described above with respect to block and block . Furthermore each of the above steps may be implemented for physical machine resources as well as virtual machine resources.

At this point it should be noted that virtual machine management in accordance with the present disclosure as described above may involve the processing of input data and the generation of output data to some extent. This input data processing and output data generation may be implemented in hardware or software. For example specific electronic components may be employed in a virtual machine management module or similar or related circuitry for implementing the functions associated with virtual machine management in accordance with the present disclosure as described above. Alternatively one or more processors operating in accordance with instructions may implement the functions associated with virtual machine management in accordance with the present disclosure as described above. If such is the case it is within the scope of the present disclosure that such instructions may be stored on one or more non transitory processor readable storage media e.g. a magnetic disk or other storage medium or transmitted to one or more processors via one or more signals embodied in one or more carrier waves.

The present disclosure is not to be limited in scope by the specific embodiments described herein. Indeed other various embodiments of and modifications to the present disclosure in addition to those described herein will be apparent to those of ordinary skill in the art from the foregoing description and accompanying drawings. Thus such other embodiments and modifications are intended to fall within the scope of the present disclosure. Further although the present disclosure has been described herein in the context of at least one particular implementation in at least one particular environment for at least one particular purpose those of ordinary skill in the art will recognize that its usefulness is not limited thereto and that the present disclosure may be beneficially implemented in any number of environments for any number of purposes. Accordingly the claims set forth below should be construed in view of the full breadth and spirit of the present disclosure as described herein.

