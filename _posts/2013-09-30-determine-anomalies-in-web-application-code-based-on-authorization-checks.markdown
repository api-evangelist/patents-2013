---

title: Determine anomalies in web application code based on authorization checks
abstract: Example embodiments disclosed herein relate to determining an anomaly of a missing authorization or inconsistent authorization in web application code. The web application code is analyzed to identify methods that have authorization checks associated and labeling the identified methods as related to authorization checks. Unidentified methods are associated as non-authorization check methods. The methods are compared to determine the anomaly.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09171168&OS=09171168&RS=09171168
owner: Hewlett-Packard Development Company, L.P.
number: 09171168
owner_city: Houston
owner_country: US
publication_date: 20130930
---
Software security testing is used to identify vulnerabilities in an application such as a Web application. Static Code Analysis is the analysis of computer software that is performed without actually executing programs. Dynamic Analysis is the analysis of computer software performed on executing programs.

Embodiments described herein provide techniques for performing testing of applications such as web applications. When a company desires to know how secure a web application the company has in production is or going to be put into production the company often uses a security testing solution. The idea of different types of entities having different privileges has been common since early software systems. As software systems become more ubiquitous and are used for tasks ranging from shopping to medical records providing secure access control continues to remain important. Gaps in the enforcement of access control policy of a software system can lead to privilege escalation. This may allow unauthorized access to sensitive resources and or operations.

Correct placement of authorization checks in web applications has challenges. It requires intimate knowledge of the system its entities and their roles which is why missing authorization checks is a widespread security vulnerability. Examples of events that may be triggered by such a security vulnerability include leaks to earnings results leaks of account numbers names leaks of records etc. Accordingly embodiments described herein describe approaches to automatically detect missing and or inconsistent authorization checks in web applications using static analysis.

In certain examples a missing authorization check can be an authorization check that is not present in a method but the system considers should be present e.g. because it is present in protecting a method called on the same variable or a variable of the same type in another circumstance . An inconsistent authorization check can be the scenario where an authorization check is present in a method but the system considers that it is an anomaly because another type of authorization check was used for a similar scenario.

The application code of a web application under test is processed via static analysis. Methods in the application are identified that have authorization checks associated with them ACMETHODs . Also methods that do not have associated authorization checks are identified NACMETHODs . The identification can be based on configuration files relevant code annotations programmatic application programming interfaces APIs or similar approaches. Specifications are generated for both the ACMETHODs and the NACMETHODs. The specifications can include lists of methods called inside them variables classes these methods are called on combinations thereof or the like. Anomalies are detected by cross checking the specifications of NACMETHODs with those of appropriate ACMETHODs. Anomalies that can be considered errors or vulnerabilities can be determined and information about the errors can be collected. The information about the errors e.g. type of error location of error possible approaches to fix the error etc. can be generated. This information can be saved in a log record output to a security auditor or developer etc.

Advantageously the approaches provided herein can provide remediation information in order to correct the issues discovered. For example the location of the code can be provided to a security auditor or developer running the security test. Further inconsistent authorization checks can be found using these approaches.

Application source code of a web application can be provided to a static code analysis module of the device . A static source code analyzer is a program that analyzes applications without actually executing the applications. Static analysis works by constructing a model of the code via parsing either source code or binary files as well as one or more configuration files that accompany the application and applying one or more kinds of analysis techniques e.g. dataflow controlflow etc. to the model. Static analysis can include multiple phases.

The static code analysis module can analyze the web application code to identify methods in the web application code that have authorization checks associated. This can be based on a configuration file annotations programmatic APIs or combinations thereof. As such there are several different approaches to specify access control in web applications. For example JAVA J2EE Banking web applications may use SPRING SECURITY for access control. An association module can associate the identified methods as authorization check methods ACMETHODs and one or more non identified methods of the web application code as non authorization check methods NACMETHODs . As such a mapping between methods used in the application and authorization checks can be made.

Methods that have authorization checks associated with them can be marked. Also in some examples classes that have at least one ACMETHOD can be marked as an ACCLASS. Methods in ACCLASS s that are not ACMETHODs can be marked as NACMETHODs.

The static code analysis module can traverse configuration files to collect information about specified authorization checks. For example Examples 1 and 2 demonstrate 2 different ways access control can be specified in a SPRING SECURITY configuration file.

Other types of frameworks e.g. .NET framework STRUTS framework etc. can have similar configuration files that can be used. Configuration files can include information about the authorization checks used by the framework one or more frameworks and or the application specifically. Moreover the configuration files can be in formats defined by the framework and can be specific to the web application. In the Example 1 case where tag allows the specification of Uniform Resource Locator URL patterns to be guarded by access control expressions a mapping between URL patterns and access checks is created. Then a mapping between all the methods used in the application and URLs is created. Then the mappings are taken together and a mapping between methods used in an application and authorization checks is derived.

For the Example 2 case where the tag uses Aspect oriented programming to insert authorization checks before a set of methods that match a pattern a mapping between pointcut patterns and authorization checks is created. Then methods that exist in an application are mapped to pointcut patterns. Further the two are taken together to derive the mapping between methods used in an application and authorization checks. Mappings between methods and authorization checks defined in configuration files used in frameworks other than Spring Security can be derived similarly.

Additionally or alternatively information is collected about authorization checks specified via annotations. For example Example 3 demonstrates one way to define an authorization check hasRole ROLE USER on a method using an annotation PreAuthorize on that method create . Annotations can be put on methods themselves classes and super classes containing these methods as well as callers of these methods. The set of checks propagated from callers are intersected. If the callers are all doing different things this might indicate inconsistent authorization.

Programmatic APIs can be used similarly to annotations. For example consider the following pseudo code of 

Here an authorization check isAdmin is done before the call of method deleteliser . Here isAdmin can correspond to the preAuthorize and deleteUser would be considered an ACMETHOD because it is protected by isAdmin . The programmatic APIs can be provided as a specification using annotation or a configuration file or be determined by parsing the code because the naming convention can be descriptive.

A specification module can be used to generate specifications for the ACMETHODs and the NACMETHODs. The respective specifications can include lists of methods of the web application code called within them and associated variables and classes.

To generate specifications for ACMETHODs and NACMETHODs it is determined what security sensitive operations are performed by access checked methods so that the specification module has a way of comparing them with the methods that do not have access checks. There are many ways to determine how to gather and represent access checks. For simplicity method calls inside methods can be used to represent operations. In other examples other code can be used to represent operations. In one example security sensitive operations are method calls and or assignment statements that happen inside of ACMETHODs. As noted other approaches to represent operations can be used. For each method call the specification module extracts the object instance on which that call was made. Then the specification module can compare operations based on whether the operations access the same variable or same type. This would give us four levels of similarity for comparing operations SAMEVAR SAMEMETHOD same method is called on the same variable SAMEVAR DIFFMETHOD different method is called on the same variable SAMETYPE SAMEMETHOD same method is called on the same type and SAMETYPE DIFFMETHOD different method is called on the same type .

For example given the code in Example 4 it can be determined that both getCocktail and deleteCocktail perform the operation this.cocktails get . Therefore they fall under the SAMEVAR SAMEMETHOD category.

Given the above Example 4 the specification module can create a specification shown in Example 5 for the getCocktail method since it has a security check.

The specification module can do this by manipulating the static analysis module to flag method calls inside ACMETHODs and NACMETHODs and generate vulnerabilities to represent them. In one example for every vulnerability the device would collect information about the variable and type the methods are called on.

The comparison module can compare the NACMETHODs to the ACMETHODs to determine at least one anomaly representative of missing authorization inconsistent authorization or a combination thereof in the web application code based on the specifications.

In one example for every NACMETHOD the comparison module compares the set of operations performed by it against those performed by ACMETHODs. If the comparison module is able to identify matches then the comparison module marks this NACMETHOD method as being anomalous. Similarly the error determination module can mark the NACMETHOD as an error based on the comparison. The comparison module can compare operations based on the four categories discussed above.

Once anomalous NACMETHODs are determined suggestions for remediation can be provided. The support module can determine an approach to correct the error and or generate information about the error. Such information can include the location of the error what the error is why it was determined to be an error examples of what a programmer could do to correct the error etc. In one example the error could be that the NACMETHOD was detected to have a missing or inconsistent authorization check. Various descriptions can be used for why the error was determined. For example in the case of a missing check it can be outputted via the output module that the NACMETHOD performs the same operations as at least one ACMETHOD and the ACMETHOD s has an authorization check. For an inconsistent check it can be outputted that an ACMETHOD performs the same operations and has a different authorization check. The support module can determine which check to add if missing or how to modify an existing check. As such the output module can output a representation e.g. an identifier of the anomaly or anomalies a reason why the anomaly or anomalies is an error and the approach to remediate.

For example Example 6 explains what to do to fix missing authorization check in the code shown in Example 4.

In this scenario the function deleteCocktail can be identified as having the error. The Add Check can signify both the reason for the anomaly missing check and an approach to correct the error by adding the PreAuthorize check to deleteCocktail .

A processor such as a central processing unit CPU or a microprocessor suitable for retrieval and execution of instructions and or electronic circuits can be configured to perform the functionality of any of the modules described herein. In certain scenarios instructions and or other information such as configuration files the web application code etc. can be included in memory or other memory. Input output interfaces may additionally be provided by the computing device . For example input devices such as a keyboard a touch interface a mouse a microphone etc. can be utilized to receive input from an environment surrounding the computing device . Further an output device such as a display can be utilized to present or output information to users. Examples of output devices include speakers display devices amplifiers etc. Moreover in certain embodiments some components can be utilized to implement functionality of other components described herein. Input output devices such as communication devices like network communication devices or wireless devices can also be considered devices capable of using the input output interfaces .

Each of the modules may include for example hardware devices including electronic circuitry for implementing the functionality described herein. In addition or as an alternative each modules may be implemented as a series of instructions encoded on a machine readable storage medium of device and executable by processor . It should be noted that in some embodiments some modules are implemented as hardware devices while other modules are implemented as executable instructions.

With the above approaches the determination and remediation suggestions are advantageously provided automatically. Further the detection of issues is done statically rather than at runtime which means that a running application instance is not required for the testing to be performed. Further the approaches allow for the detection of inadequate inconsistent authorization checks for web applications.

A device implementing method may begin by analyzing web application code to identify methods in the web application code that have authorization checks associated with them . The identified authorization check methods can be labeled or otherwise marked as authorization check methods ACMETHODs . Unidentified methods can also be labeled as non authorization check methods NACMETHODs . As noted above the ACMETHODs can be determined based on one or more of a configuration file annotations and programmatic APIs.

At specifications for the ACMETHODs and the NACMETHODs can be determined. As noted above method calls inside methods can be considered operations. Security sensitive operations can be considered methods that are inside an ACMETHOD. As such a set of security sensitive operations performed by the ACMETHODs can be determined. These security sensitive operations can be marked in the specifications. The respective specifications can include lists of methods of the web application code called within them and associated variables and or classes.

At at least one anomaly representative of missing authorization and or inconsistent authorization in the web application code can be determined based on the specifications. This can be based on a comparison of NACMETHODs and ACMETHODs. As noted above the comparison can be based on whether the respective methods access the same variable and or the same type. In certain examples a variable is a storage location and an associated symbolic name that includes some known or unknown quantity or information. Further in some examples a type is a classification identifying one of various types of data e.g. integer float Boolean certain structures certain classes etc. . In some examples certain types may not be used for the comparison. For example particular structures or classes may be used for the type analysis.

At the device can analyze web application code to identify methods in the web application code that have authorization checks associated. As noted above the identification can be based on at least one of a configuration file annotations and programmatic APIs. Then at the identified methods can be labeled as ACMETHODs. The non identified methods can be labeled as NACMETHODs . It should be noted that the marking need not include the strings ACMETHOD or NACMETHOD but other approaches can be used for the labeling e.g. a flag or other value .

At specifications for the ACMETHODs and the NACMETHODs can be determined. The specifications can be determined as noted above. For example a set of security sensitive operations performed by the ACMETHODs can be determined. The respective security sensitive operations can be marked in the respective specifications. As noted above in some scenarios an operation can be considered a method call within the respective methods.

At the NACMETHODs can be compared to the ACMETHODs to determine one or more anomaly representative of missing authorization and or inconsistent authorization in the web application code based on the specifications. The comparison can be based on whether the respective methods access the same variable and or the same type. The comparison can also be based on whether the same method or different method is associated with the variable or type. In one example if the same variable or type is accessed or written to by an ACMETHOD it stands to reason that a NACMETHOD accessing or writing to the same variable or type should also be protected. If this protection is missing the NACMETHOD can be considered to have an anomaly associated. In other examples the specifications can be used to determine whether the same or different authorizations are used to protect a variable or type. As such if two different authorization approaches are used to protect a variable or type the authorization can be considered inconsistent.

At anomalies can be marked as errors based on an analysis of the anomaly. In one scenario the analysis can include whether there are any exceptions e.g. a particular type may not wish to be considered an anomaly or error e.g. because it has broad associated variables . In some scenarios basic types e.g. int float etc. may be considered exceptions. As such the particular types may not be processed for anomaly detection. A list of anomalies and or errors can be generated. The list can include the anomalies errors the location of the anomalies errors a reason for why they are considered anomalies errors approaches to correct the error or combinations thereof. At an approach to correct the error can be determined. As noted above the approach can be based on what authorization is missing or inconsistent. Then at the device can output the anomaly or anomalies found. Further the device can output a reason for why the anomaly is an error the location of the anomaly the approach to correct the error or combinations thereof.

Processor may be at least one central processing unit CPU at least one semiconductor based microprocessor at least one graphics processing unit GPU other hardware devices suitable for retrieval and execution of instructions stored in machine readable storage medium or combinations thereof. For example the processor may include multiple cores on a chip include multiple cores across multiple chips multiple cores across multiple devices e.g. if the computing device includes multiple node devices or combinations thereof. Processor may fetch decode and execute instructions to implement methods and or . As an alternative or in addition to retrieving and executing instructions processor may include at least one integrated circuit IC other control logic other electronic circuits or combinations thereof that include a number of electronic components for performing the functionality of instructions .

Machine readable storage medium may be any electronic magnetic optical or other physical storage device that contains or stores executable instructions. Thus machine readable storage medium may be for example Random Access Memory RAM an Electrically Erasable Programmable Read Only Memory EEPROM a storage drive a Compact Disc Read Only Memory CD ROM and the like. As such the machine readable storage medium can be non transitory. As described in detail herein machine readable storage medium may be encoded with a series of executable instructions for performing methods and or .

Computing device may execute identification instructions to analyze web application code to identify methods in the web application code that have authorization checks associated and labeling these identified methods as ACMETHODs and labeling unidentified methods as NACMETHODs. The specification instructions can be executed by the processor to determine specifications for the ACMETHODs and the NACMETHODs as described above. Moreover the comparison instructions can be executed to compare the NACMETHODs to the ACMETHODs to determine at least one anomaly representative of a missing authorization an inconsistent authorization or a combination thereof based on the specifications.

