---

title: System and methods for enabling WiFi hotspot
abstract: A system and methods for enabling a disabled mobile device feature are disclosed. According to an embodiment, device information regarding a mobile device is collected. Based on the device information, a search is performed for a set of instructions to enable the device feature. A selected set of instructions is performed on the mobile device, and if execution fails to enable the feature, another set of instructions is selected and performed. The sets of instructions are continually updated and stored based on experience. In an embodiment, the method is performed with a mobile application on a mobile phone. The mobile application includes a user interface to allow the user to access and use disabled or hidden features of the mobile phone.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08634820&OS=08634820&RS=08634820
owner: Silicon Valley Technology Partners
number: 08634820
owner_city: Saratoga
owner_country: US
publication_date: 20130410
---
This application claims the benefit of U.S. Provisional application Ser. No. 61 669 075 filed Jul. 8 2012 which is incorporated by reference in its entirety herein.

Device manufacturers typically design wireless devices with many hardware capabilities not all of which are used in the same way by different service providers. For example service providers alter and customize mobile phone hardware and software to localize devices and their features for appropriate markets. However this customization is also used to remove features that are native to the device. One example is removal of features that are native to the Android operating system on a mobile phone. The alteration of the Android operating system usually varies by device and by service provider. For example service providers might alter the Android operating system source code in order to hide or mask certain features. Not all alterations achieve the same result for all devices or versions of the Android operating system. Therefore different techniques are employed for different phone hardware sets and different service providers to achieve the same goals. As an example a phone using the Android operating system typically has a wireless hotspot feature or capability but the feature can be hidden or masked. That is access to the feature is not apparent to a user of the device using the commands available. In some instances the use of the feature may be limited in various ways by either the phone manufacturer or the wireless service provider. In some cases the manufacturers remove the user interface to a WiFi hotspot. In other cases they modify the system in order to place restrictions limiting the use of the WiFi hotspot.

Embodiments of a method and system for enabling various features on a mobile device are described. Embodiments described herein allow a user to access the hotspot feature on various mobile devices according to various methods depending upon the way in which the hotspot feature is masked hidden or otherwise made unavailable. For purposes of illustrating the invention as claimed herein a mobile phone is used as an example of a device. However any device that has the capability of functioning as a wireless communication hotspot can be part of the system as described.

In an embodiment various features might not be accessible to a user of the mobile device when the phone is originally acquired as configured by one or more of the device manufacturer and the wireless service provider. For example some mobile devices have the capability to act as wireless hotspots that other devices can tether to in order to wirelessly communicate. For example the Android operating system added a WiFi hotspot feature that allows a device s WiFi system not just to connect to a WiFi access point but to act as an access point and allow other devices to connect to it. Typically an Android device that has a cellular modem data connection for example a 3G or 4G network will share that Internet connection through its WiFi access point allowing laptops tablets smart phones and other devices to access the Internet. While various wireless communications protocols exist WiFi is an example of a common wireless protocol that will be used in this document as an example of such a protocol. Any other wireless protocol is equally applicable to embodiments described. Any wireless capable device is applicable to embodiments described. Because a variety of alterations are made to devices in order to mask or hide features various methods for making hidden features usable again are described herein.

The data can be accessed through the Internet for use on the mobile application once the mobile application is downloaded to the mobile device . The mobile application embodying the invention can be acquired through HTML websites Google Play application marketplace and other Android operating system application marketplaces through the Internet . The mobile application can be loaded on to mobile device typically from databases in various ways. The application can be downloaded to device using device . The application can be loaded by plugging in a flash memory card or by connecting the mobile device through a universal serial bus USB cable to a personal computer PC and transferring application installation data through the PC operating system. Alternatively the application is downloaded by connecting wirelessly to a personal computer or by connecting to a second mobile device and transferring the application installation data to the mobile device .

In various embodiments application allows the user to access and enable a wireless hotspot feature of the device that would not otherwise be accessible. illustrates various device screens for an Android operating system device. Embodiments described below enable a user to access and activate the WiFi hotspot feature even if it not available as shown in .

When neither process nor process succeeds to unlock the hidden feature the mobile application resorts to another process as described below. is a diagram of the data exchange between the mobile application and the mobile application servers during process . Process includes communicating with the mobile application databases through the Internet . The mobile application first collects various mobile device data for the device including serial number manufacturer model software version and wireless carrier service provider as shown by . The mobile application then sends an HTTP Request which contains the device data to the mobile application servers through the Internet . The mobile application server then searches databases for API instruction sets that might unlock the locked device feature. Any API instruction sets that are found are sent via an HTTP Response back to the device through the Internet . Mobile application then executes the API instruction set provided in the HTTP Response . If the instruction set contained in HTTP Response unlocks the hidden feature then the execution was successful. If the execution was not successful a fail message for example message appears. At this point the user can decide to use another process or alternatively process repeats until a HTTP Response provides an appropriate instruction set.

In some instances the mobile device has a feature which requires authentication by the service provider before the feature can be activated. When use of the hotspot feature requires authentication the device communicates through Internet to carrier servers seeking authentication or permission to unlock use of the requested feature. This authentication is transparent to the user. Once the required authentication or permission is received the user of mobile device has access to the hotspot settings shown in . is a flow diagram of process demonstrating how mobile application handles service provider requirements for authentication or permission before using hidden features. The user turns on mobile application as shown by . Mobile application collects data on the device as shown in . Mobile application then assesses whether carrier permission is required to turn on the hotspot feature as shown in . If no carrier permission is required then application proceeds with one of the above described processes to unlock the hidden hotspot feature. If carrier permission is required the application loads the necessary carrier permission virtualization and executes the necessary API instruction to turn on the hotspot feature as shown in . If the device requires process in order to obtain hotspot capability process is performed every time the application is invoked.

The mobile application uses one or more of the above mentioned processes to unlock the hidden feature. In an embodiment the mobile application uses whatever method is most beneficial for the user and has the highest chance of success at any given time of operation. The mobile application decides through a system of trial and error and by analyzing mobile device data which process is best to use at that time. This includes the mobile device application communicating with mobile application servers and or using internal mobile application data. For example if the user downloads mobile application on to a device that fails to be unlocked with process then the mobile application uses process or process to unlock the hidden feature. For another example if device data that is gathered by mobile application shows that the device has low connectivity or bandwidth at this given time mobile application first executes process and process which do not require communication and HTTP exchanges with mobile application servers to produce the API instruction sets required to unlock the hidden feature. Then if process or process does not work mobile application will execute process no matter how long it takes with slow internet connectivity to unlock hidden features. This benefits the user as the mobile application resorts to more bandwidth consuming communication only when more economical methods fail.

As previously mentioned the data regarding APIs and different devices is continually updated as different users use the mobile application on different devices and with different carriers. Similarly the methods as described are adaptive in that a set of heuristic IF THEN rules are used to determine the appropriate sequence of API calls or instruction based on characteristics of the device. The success or failure of the various sequences of API calls causes the mobile application to update its rules for choosing API sequences as it learns additional mobile device software version and service provider combinations.

