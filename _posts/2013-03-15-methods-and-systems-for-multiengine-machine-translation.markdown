---

title: Methods and systems for multi-engine machine translation
abstract: Systems and methods for multi-engine machine translations are disclosed. Exemplary methods and systems involve normalizing and/or tokenizing a source string using user-specific translation data. The user-specific translation data may include glossary data, translation memory data, and rule data for use in customizing translations and sequestering sensitive data during the translation process. The disclosed methods and systems also involve using one or more machine translation engines to obtain a translation of the normalized and/or tokenized source string.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141606&OS=09141606&RS=09141606
owner: Lionbridge Technologies, Inc.
number: 09141606
owner_city: Waltham
owner_country: US
publication_date: 20130315
---
This application claims the benefit of Provisional Application No. 61 617 341 filed on Mar. 29 2012 which is herein incorporated by reference in its entirety.

The present disclosure is directed generally to methods and systems for machine translation. More particularly the present disclosure is directed to methods and systems for secure accurate and customizable machine translation cloud based multi engine machine translation and machine translation as a service.

Existing machine translation systems produce translations in a variety of languages. Although many such translation systems leverage scale to provide high quality translations they provide only limited opportunities to customize translations or preserve customer specific terminology and branding. Users of such systems may not be able to prevent for example the translation of brand names or be able to customize the translation of difficult to translate phrases such as specialty terminology and idioms that tend to be rich in metaphors and cultural nuances. As a result of these limitations existing translation systems often produce the somewhat awkward or terminologically inaccurate translations that have come to be associated with machine translation.

Moreover as existing translation systems are generally trained on text that is accurately spelled and grammatically sound they are ill equipped to translate text generated from the use of informal real time modes of communication such as Short Message Service SMS or Instant Message IM . Consequently when these systems encounter the inherently imprecise text resulting from such communications they often produce translations that are replete with errors. These translation errors occur at least because machine translation systems are not presently designed to handle the use of slang abbreviations and non standard punctuation spelling and grammar commonly found in text resulting from real time modes of communication.

Existing machine translation systems also present security challenges when used to translate information of a proprietary or sensitive nature. For example by transmitting sensitive content over insecure communication channels present systems routinely risk exposing such content to unintended parties. Some translation systems also transmit content to third party translation providers or engines without retaining control over the provider s further use or dissemination of the transmitted content. As a result once an end user provides such systems with translation content that includes sensitive information such as credit card numbers there is no guarantee that the information will not be made available to other parties or otherwise inappropriately used during or even after the end of the translation transaction.

Although some specialty translation systems attempt to provide some degree of customization and security they nevertheless exhibit the drawbacks noted above and are generally only able to support translation between a select few languages. Accordingly there is a need in the art to develop machine translation methods and systems that overcome at least the above identified limitations of prior art systems and provide high quality machine translations under a variety of use conditions.

The present disclosure includes exemplary methods for multi engine machine translation. The exemplary methods involve receiving a source string for translation from an end user application such as a real time chat application and identifying predefined translation data such as glossary data and user defined regular expressions for use in translating the source string. These methods may include normalizing the source string to address for example the use of abbreviations and non standard spelling which tend to cause translation errors. They may also include tokenizing the source string using the identified pre defined translation data and using one or more machine translation engines to obtain a translation of the tokenized source string.

In various embodiments tokenizing the source string may comprise identifying one or more portions of the string as meeting search criteria specified in the predefined translation data replacing the identified portions of the source string with unique temporary textual elements tokens and associating each of the tokens with target textual elements. The target textual elements may correspond for example to sensitive data identified in the source string for sequestration or to custom translations specified in the pre defined translation data.

In order to produce translations that reflect correct grammatical agreement between adjacent words and the desired translation of tokenized strings some embodiments also conduct grammatically sensitive tokenization. Grammatically sensitive tokenization allows a machine translation engine to recognize tokens as being part of longer n grams and consequently allows the engine to learn how a given term or phrase is used in the context of adjacent words and phrases.

Grammatically sensitive tokenization utilizes grammatically sensitive tokens. These tokens are similar to the temporary textual elements used in the basic tokenization process described above but are known e.g. through training by one or more machine translation engines. This knowledge allows such engines to return translated text in which the grammatically sensitive token is treated as if it were a word that has certain grammatical features e.g. gender and number .

According to many embodiments the translation obtained as a translated string from the one or more machine translation engines retains the tokens inserted during the tokenization process. The translated string may thereafter be further processed by replacing each of the tokens in the translated string with the associated target textual element.

Normalizing the source string may include identifying one or more portions of the source string as meeting predefined search criteria and replacing each of the identified portions with a corresponding normalized string. For example a pre defined regular expression or letter pattern may be used as a search criteria to identify all instances of the commonly used abbreviation brb in the English language source string. Thereafter the source string may be normalized by replacing all identified incidences of brb with the full form be right back. 

The present disclosure also includes exemplary systems for multi engine machine translation. Some embodiments of these systems comprise a memory for associating a user s unique identifier with predefined translation data and one or more processors for executing an application. The application may receive a source string for translation and an associated user s unique identifier from an end user application such as an instant message application. The identified may be used to identify the user s predefined translation data.

After tokenizing and perhaps normalizing the source string using the predefined translation data exemplary systems may communicate the tokenized source string to one or more remote translator engines for translation. The engines have no knowledge of or access to the predefined translation data or any data from the source string that have for example been sequestered or removed from the source string during the tokenization process. Exemplary systems may thereafter obtain a translated string from the one or more remote translator engines and further process the translated string to generate a finalized translated string for communication to the end user application.

Reference will now be made in detail to various exemplary embodiments examples of which are illustrated in the accompanying drawings. Wherever possible the same reference numbers will be used throughout the drawings to refer to the same or like parts.

Methods and systems disclosed herein have many practical applications. For example exemplary embodiments may be used to obtain machine translations of text from remote and or third party translation engines without providing the engines or any unauthorized entity access to sensitive or proprietary information that may be present in the text. The term engine as used herein refers to one or more software and or firmware components and or applications that are functionally related and or together perform a service e.g. translation of text .

The methods and systems described herein may also be used to customize the translation of text while utilizing the services of remote or third party translation engines that have no knowledge of or access to the data used for the customization.

Exemplary methods and systems for multi engine machine translation are described below in conjunction with . Without departing from the spirit of the exemplary methods various embodiments may be altered to delete steps change the order of steps and or include additional steps. And without departing from the spirit of the exemplary systems various embodiments may also be altered to delete and add components and or change the configuration of the described components.

The term user as used herein includes individual human users and entities such as corporations or other organizations.

In method and in various embodiments described herein the source string the indication of the target language and the user identification information may be received together or separately. The source string may be one or more sentences in a human language such as Spanish and may contain various alphanumeric characters. The target language may be any human language that is different from the source language and into which the source string is to be translated. The user identification information referred to in step may be a unique identifier used to identify a particular known user such as an individual or organization. In many embodiments the known user is pre registered or otherwise connected with an entity associated with the operation of the exemplary methods and systems described herein.

Further the source string target language and the user identification information may be received via any type of communication link or network that allows transmission of data from one device or network component to another. A network used to receive this information may be a Local Area Network LAN or a Wide Area Network WAN and may be wireless wired or any combination thereof.

As previously stated method includes a step of identifying using the received user identification information user specific translation data stored in a memory step . The memory may be a device tool and or physical media that stores information in a computer accessible form. Embodiments of such memories include various types of data management and retrieval tools such as databases and data structures as well as storage media including volatile and non volatile computer memory such as SD Card MMC Card Mini SD Micro SD Internal Storage RAM PROM EPROM and EEPROM compact disks optical disks and magnetic tape.

User specific translation data includes data that may be used to process the source string before and or after it has been translated by a translator. Such data includes without limitation glossary data translation memory data and source identification rule data.

Glossary data may include for example a collection of words or phrases that should not be translated referred to hereafter as do not translate data and a collection of words or phrases that have corresponding pre determined translations referred to hereafter as specialty translation data . Do not translate data that appears in the source string appears unchanged in the finalized translated string generated in step . Examples of such data include brand names company names and names of individuals. Specialty translation data includes without limitation terminology that is specific to a company an industry or a technology and that requires translation in a very specific way to ensure for example consistency and clarity across languages. Examples of such data include the names of parts processes and interface elements. In various embodiments glossary data is stored in a database or data structure that links at least a source word or phrase in a source language with a target word or phrase in a target language. The target word or phrase may represent a preferred translation of the source word or phrase from the source language into the target language or may simply be a copy of the source word or phrase.

Translation memory data is used in the translation of text that has been identified as potentially difficult to translate. Such data may include for example the preferred translations of a particular idiom or expression e.g. the straw that breaks the camel s back from a source language into a set of target languages. In various embodiments translation memory data is stored in a database or data structure that links at least a source word phrase or sentence in a source language with a target word phrase or sentence in a target language which represents a preferred translation of the source word phrase or sentence.

In various embodiments translation memory data may be used to provide translations of complete sentences or translation units e.g. a heading or other textual element that is not a complete grammatical sentence but is nevertheless considered a whole unit for translation purposes . In such embodiments a glossary item may be used to translate a word or phrase that is part of a longer sentence or translation unit and that requires a special translation e.g. a translation that differs from the translation that would otherwise be generated by the underlying third party translation engine .

Source identification rule data is data that may be used to identify particular portions of a source string for further processing and may include for example sequestration rules and normalization rules. Sequestration rules are rules for identifying within a source string particular types of potentially sensitive data such as customer account numbers telephone numbers or credit card numbers the disclosure of which may violate for example company regulations or policy. Normalization rules may be used to identify misspellings or commonly used short forms associated with particular words or phrases. Normalization rules and the process of normalization are described in greater detail in the context of . In some embodiments a source identification rule may be associated with a particular language expressed as a regular expression and stored in a database or a data structure in a memory. Regular expressions are well known in the art and provide a concise means for specifying and recognizing patterns of characters in textual strings.

As illustrated method also includes the step of tokenizing the source string step . In various embodiments tokenization comprises identifying one or more portions of the source string as meeting at least one search criterion replacing each of the identified portions in the source string with a unique temporary textual element a token and associating each of the temporary textual elements with a target textual element that may already be present in the user specific translation data or that may be securely stored as sequestered data.

The search criterion may be embodied in a literal string or a regular expression that is used to search a source string for substrings that meet the criterion. For example the search criterion may be any phrase that starts with the word they and ends with the word you. This criterion may be specified as a regular expression which when applied to the famous lines First they ignore you then they ridicule you then they fight you then you win results in the following three matched substrings they ignore you they ridicule you and they fight you. The identity of the source of this quote is uncertain.

The unique temporary textual elements are generated alphanumeric tokens for insertion into the source string as placeholders for corresponding portions of the source string that have for example been identified as private information for sequestration e.g. an account number or that have been identified by the user specific translation data as requiring no translation or a particular user specified translation.

Target textual elements that are associated with the unique temporary textual elements may correspond to data items already present in the user specific translation data or to sequestered portions of the source string. For example suppose that a user s translation data contains glossary data indicating that the English phrase hounds of midnight when translated into German should result in the German word Mitternachtshunde . In such a case if an English source string for translation into German and associated with the user in question contains the phrase hounds of midnight this phrase when encountered in a source string will be replaced by a temporary textual element e.g. . This temporary textual element will also be associated in memory with the target textual element Mitternachtshunde during the final step of the tokenization process. As another example if a user s name e.g. Mark Smith occurs in a source string presented for translation and the user s glossary data indicates that his name be sequestered prior to translation the substring Mark Smith in the source string will be replaced by a temporary textual element e.g. . This temporary textual element will be associated in memory with the target textual element Mark Smith during the tokenization process.

In some embodiments when a search criterion is embodied in a literal string and a source string is searched for substrings that match the search criterion a substring may be identified as matching the search criterion or literal string even though their isn t an exact match. For example the search may ignore inadvertent or semantically insignificant differences between the substring and the literal string. In many embodiments the case of the characters in the source string may be ignored during such searches although the case of a string used to replace a token inserted during tokenization may not be ignored. In various embodiments the case sensitivity of source string searches associated with glossary data or translation memory data may be presented to a user or customer as a selectable option via a user interface such as the ones described in the context of .

Further white space may be normalized when searching a source string for strings specified in glossary or translation memory data. Such normalization may allow a substring in a source string that has two or more white spaces between words e.g. iPhoneS to match an otherwise identical string in the glossary or translation memory data e.g. iPhoneS . But two words in a source string e.g. i Phone may be prevented from matching a single word in the glossary or translation memory data e.g. iPhone . Additionally intra sentence punctuation such as commas dashes semicolons and points of ellipsis which are often used inconsistently or incorrectly may be ignored without sacrificing semantic accuracy when searching a source string for matches against data in the glossary or translation memory.

Further because the initial word in a sentence is conventionally capitalized in languages that use the Latin alphabet casing of the initial word of a sentence may be ignored when matching that word or phrases beginning with that word against entries in the glossary or translation memory data. In some embodiments such a rule may be employed regardless of whether a user prefers to generally ignore casing for source string searches against glossary and translation memory data. Moreover regardless of the casing of a particular target translated string in the glossary or translation memory data if such a string is used to replace a token that begins a sentence the first letter of the replacement string may be capitalized.

Although hyphenation can be used to indicate subtle distinctions in meaning it is often used inaccurately or inconsistently. Accordingly in some embodiments hyphenation may be ignored when a source string is searched for matches against glossary or translation memory data. For example by ignoring hyphenation the string single table tournament present as a glossary entry may match not only the substring single table tournament in the source string but also the substrings single table tournament and single table tournament .

In various embodiments users may be allowed to specify by way of a user translation profile for example that particular words or phrases in the source string be treated as do not translate data that should not be translated by any third party machine translation engine being utilized for performing translations. Substrings that are part of a source string may be indicated as do not translate data by surrounding the substrings with predefined characters e.g. escape characters or changing the formatting of such substrings e.g. via italicizing or bolding . As a result besides explicitly identifying certain strings as do not translate data within a user s glossary data or using regular expressions to identify potentially sensitive or private information sensitive or private information may also be flagged by using special characters and or formatting in source strings themselves. In some embodiments mechanisms are provided for defining such special characters or formatting associating such information with a user translation profile and or user specific translation data. Users may also be able to define opening and closing do not translate delimiters that may act as default delimiters e.g. . . . as used in the example below to which all user defined delimiters or flags may be required to map. To accommodate identification of do not translate strings in the manners indicated above the tokenization process may involve an additional pass over the source string to identify substrings that are flagged as do not translate substrings using the formatting or special characters described above. Identified substrings may thereafter be handled as do not translate data e.g. tokenized and not provided to a third party translation engine . However any such formatting or flagging with special characters may be removed from the final translated string.

A user whose primary application submits text in HTML indicates in their translation profile that all items that are marked as bold and italic e.g. . . . should be treated as do not translate data items. Thereafter a translation is requested for the following input text Press Enter to continue. In many embodiments the user defined do not translate mark up may thereafter be placed within default or user defined escape characters yielding Press Enter to continue. During tokenization the text delimited by the escape characters e.g. . . . are searched for and replaced with a uniquely identifiable token yielding the tokenized string Press GL12345678 to continue. The text delimited by the escape characters is then saved to memory as a do not translate data item associated with the user s glossary data and the tokenization translation and post translation processing proceeds as usual.

Using one or more user interface tools a user may be able to indicate do not translate items with ease. For example a user may simply right click on portion of text to indicate the presence of do not translate items.

In some embodiments in order to simplify and or improve the sequestration of private data all numeric strings in the source string may be replaced with tokens that consist of a randomized number of a standardized length that is unique to the particular translation request associated with the source string. Tokenizing all numerical strings in this way may avoid the need to create and execute multiple computationally expensive regular expressions and may more reliably sequester and preserve the integrity of private data. Additionally using a uniquely identifying number as part of a token may allow reliable replacement of the original sequestered string associated with the token even if the order in which the token appears in the translated string has changed. However generating a unique number and appending the number to the randomized number may be unnecessary in some embodiments if the randomized number itself represents a unique token for the translation task at hand. Further tokens that consist of a randomized number potentially add an additional level of security against unauthorized mining of source string data for potentially private data.

In this example let us assume that for a given source string all numerical strings are identified. Identified numerical strings may include for example decimals dashes and parentheses. In this example let us also assume that the source string is Mi n mero de tel fono es 617 555 5555 y el n mero de mi Visa es 1234 5678 1234 5678. For each numerical string identified in the source string the following acts are performed. A unique numerical identifier of a normalized length e.g. three digits is created e.g. 100 for the string 617 555 5555 and 101 for the string 1234 5678 1234 5678 . Additionally a randomized numerical string e.g. 93847 for the string 617 555 5555 and 28374 for the string 1234 5678 1234 5678 is created that is also of a normalized length e.g. five digits . Next the randomized string is appended to the numerical identifier to form the token used for tokenization e.g. 10093847 and 10128374 respectively . Using a token of normalized length provides additional security by masking the length of the underlying sequestered string. The identified numerical string is thereafter replaced with the formed token and an association between the formed token and the identified numerical string is stored in memory. In this example the tokenized string is Mi n mero de tel fono es 10093847 y el n mero de mi Visa es 10128374. After the tokenization is completed the tokenized string may be sent to a third party translation engine for translation. Upon receipt of a translated string corresponding to the tokenized string each inserted token is identified and replaced with its associated numerical string. For example the returned translated string comprising the tokens inserted during tokenization may be My phone number is 10093847 and my Visa number is 101128374. The final translated string may therefore be My phone number is 617 555 5555 and my Visa number is 1234 5678 1234 5678.

As illustrated method also includes the step of obtaining a translated string from a translator step . The translator receives the tokenized source string for translation but cannot access without permission the user specific translation data or any data sequestered from the tokenized source string. The translator may also utilize to whatever extent necessary the services of a human translator. According to many embodiments the translated string not only contains at least a partial translation of the tokenized source string but also contains each of the unique temporary textual elements that were present in the tokenized source string prior to the translator s translation of the tokenized source string.

Method also includes the step of processing the translated string obtained from the translator to generate a finalized translated string step . Processing the translated string may in various embodiments comprise replacing each unique temporary textual element found in the translated string with an associated target textual element. In a previous example the temporary textual element was inserted into a source string in place of the sequestered string Mark Smith during the tokenization process to yield a tokenized source string. Continuing on with this example we note that a translated string corresponding to this tokenized source string and generated by a third party translator engine or application will also contain the placeholder temporary textual element . The temporary textual element remains unchanged in the translated string because the temporary textual element is unknown to the translator and is therefore reliably retained in the translated string or because the formatting of the element may indicate to the translator that the element is not to be translated. In this example processing the translated string to generate a finalized translated string involves replacing the temporary textual element with the sequestered string Mark Smith .

Grammatical agreement generally refers to the way a word in a sentence changes or inflects to reflect the grammatical features of a related word in the same sentence. When the form of one word correctly matches the grammatical features of a related word the two words are said to be in agreement. In English for example the sentence I bought a books sounds very wrong because the singular determiner a is not in agreement with the plural noun books. Grammatical features that are commonly reflected by agreement are person e.g. first second and third number e.g. singular and plural and case e.g. nominative and accusative .

In the examples below for instance the change of the English word book from singular to plural requires changes not only in the translation of the word book in Spanish French and German but also to the equivalents of the article the and the adjective red.

In many human languages agreement is critical to an unambiguous understanding of a sentence. Grammatically sensitive tokenization allows a user to not only preserve custom terminology during translation but also have grammatical agreement between a translated word and adjacent words in the sentence.

The basic tokenization discussed previously in the context of may replace for example a substring in a source string that matches a string in glossary data with a token that is unknown to a machine translation engine used to perform a translation of the source string. The token may be unchanged during the translation process and may later be replaced by a custom translated string from the glossary. In grammatically sensitive tokenization the machine translation engine may be trained to recognize a series of tokens within a natural language context. A machine translation system that allows grammatically sensitive tokenization may therefore include such tokens in n gram analyses of bilingual and monolingual training material and may recognize such tokens as words in the source and target languages just as they recognize and handle any other words.

During grammatically sensitive tokenization for example a source language glossary data entry identified in a source string may be replaced with a token that shares the same relevant grammatical properties as the corresponding target language glossary data entry. The token may be recognized by the machine translation system and be consistently translated by the system regardless of context. Accordingly grammatically sensitive tokenization facilitates the appropriate translation of a glossary term present in a source string by replacing the term in the source string with a grammatically sensitive token that is for example both part of a machine translation engine s statistical models and translated both consistently and grammatically correctly by the machine translation engine. Thereafter the translation system searches the translated string returned from the machine translation engine for the grammatically sensitive token and replaces the token with associated data such as a desired or custom translation as specified in the glossary.

A first type of grammatically sensitive tokenization may involve training machine translation engines on prepared training materials and adding grammatically flagged tokens to a machine translation engine s statistical models such that non word tokens e.g. GL101111 are recognized by the engine as a lexical item that tends to occur in particular grammatical contexts.

A second type of grammatically sensitive tokenization may involve using token words that share some relevant grammatical characteristics with a glossary data item for which a translation could be reliably predicted. In this type of tokenization the source language words that are used as grammatically sensitive tokens may need to be chosen carefully. In some embodiments it may be preferable if 1 the token words occur frequently enough in common usage to be adequately modeled by a machine translation engine and 2 are rare enough so that the risk of replacing a non token use of the word with a target word or phrase is a translated string is not too high. In various embodiments multiple token candidates for each grammatical flag are identified and the first such candidate is used as the grammatically sensitive token unless that particular candidate string already appears in the source string in which case the second such candidate is considered. If all candidate tokens already appear in the source text the basic tokenization process is resorted to.

Grammatically sensitive tokenization may be implemented by associating grammatically sensitive token data with user specific translation data stored in memory. The grammatically sensitive token data may be stored for example in a database table where each record is associated with the following information a grammatical flag a machine translation engine designation and a collection of grammatically sensitive tokens. In some embodiments such a table would be accessible only to linguistic or other administrators with authority to edit the database. A user interface may be provided to allow such persons to add to delete from or otherwise modify records in the table. Additionally glossary data items may be associated with an optional grammatical flag that signifies grammatical properties of a target string.

In various embodiments the translation request received in step includes user identification information a source string for translation an indication of the language of the source string e.g. a source language and an indication of a target language into which the source string is to be translated. The source string may be any character string and the user identification information may be any type of identification information previously discussed in the context of method . And the translation request may be received via any type of network or communication link also discussed in the context of method .

Decoding the translation request step comprises using the received user identification information to identify at least one memory comprising user specific translation data. In this step a user may also be authenticated using for example the received user identification information. When authentication is successful the translation process progresses to step on failure an error message may be returned to the application from which the translation request is received.

In addition to comprising glossary data translation memory data and or source identification rule data user specific translation data may also comprise normalization data. Normalization data includes for example commonly misspelled words and corresponding corrected versions commonly used word phrase short forms and their corresponding full forms and regular expressions for identifying non standard text such as slang common misspellings common abbreviations and common grammatical errors.

Decoding the translation request in step may also involve determining whether the source string of the translation request exceeds a character limit. In many embodiments however such a determination may be made and steps to enforce the character limit may be taken before the decoding step by the application generating the translation request. The character limit may be imposed for example by a third party translation engine utilized for responding to the translation request. If the source string exceeds the character limit the source string may be broken into two or more strings. This may be accomplished by identifying a terminal punctuation mark or other sentence marker in the source string that appears closest to but not after the character that causes the source string to reach the character limit.

For example if the character limit is 2 000 characters and a source string has 2 200 characters then in step the source string may be searched backwards from the 2 000character until a period a question mark an exclamation point a colon or a paragraph break is found. The source string may thereafter be broken into source string 1 and source string 2 and each may separately be processed using steps before translated strings associated with each of source strings 1 and 2 are combined in step .

In step the source string is normalized. Normalization as used herein refers to the manipulation of text to make it better conform to language specific standards of grammar spelling and punctuation. When translated using a machine translation system normalized text is more likely to yield accurate translations. And when performed before the tokenizing process normalization is more likely to result in better translation customization particularly if the regular expressions or literal strings used to identify substrings for tokenization expect the use of standard punctuation spelling and or grammar.

The normalization in step involves identifying one or more portions of the source string as meeting a language specific search criterion and replacing each of the identified portions of the source string with a corresponding normalized string specified in the user specific translation data. For example the substrings luv and 4ever included in the source string luv you 4ever may be identified for normalization and thereafter replaced by corresponding corrected versions love and forever to yield the normalized source string love you forever. 

The process of tokenization as explained in the context of involves removing an element from the source string and replacing it with a temporary textual element token that will not be recognized by a machine translation engine as a word requiring translation. As previously stated tokenization generally requires further processing following the receipt of a translated string from a machine translation engine any temporary textual elements inserted during tokenization are replaced with corresponding substrings that contain for example sequestered material or customized translations of particular words phrases. By contrast the process of normalization does not require any processing following the translation of the normalized string by a machine translation engine.

Further to identify a candidate portion of the source string for normalization the source string may be searched using a predefined string e.g. 4ever or a regular expression. In some embodiments a predefined string will match a substring in the source string when the substring 1 begins the source string and is followed by a white space 2 is preceded and followed by a white space 3 is preceded by a white space and is followed by sentence punctuation or 4 is preceded by a white space and is the last element of the source string. For source languages whose writing systems do not conventionally use a white space to delimit words language appropriate strategies are applied for searching the source string for predetermined normalization strings or regular expressions.

Tokenizing the normalized source string step of method may be performed as described in the context of step of the notable difference being that in the tokenization step of the source string was not necessarily normalized prior to being tokenized. In various embodiments normalization may occur after tokenization has been performed.

The normalized and tokenized source string may be communicated to a translator step of method via any network or type of communication link described above in the context of . And the steps of obtaining a translated message from the translator step and processing the translated string obtained from the translator to generate a finalized translated string step may be performed as described in connection with steps and respectively of .

In step a source string associated with the translation request is searched to identify a substring that matches a data item in the user specific translation data. Step involves a determination as to whether or not the data item has an associated grammatical flag. If no grammatical flag is found to be associated with the data item the substring matching the data item is handled in accordance with the basic tokenization process discussed for example in the context of step . On the other hand if a grammatical flag is found to be associated with the data item then in accordance with step a determination is made as to whether grammatically sensitive token data associated with the user specific translation data contains a grammatical flag that matches the grammatical flag associated with the data item. If no matching flag is found then the substring matching the data item is handled in accordance with the basic tokenization process step . If a matching flag is found then a determination is made as to whether or not there exists at least one grammatically sensitive token associated with the matched grammatical flag where such token is not already present in the source string step . If it is determined that no such token exists then the substring matching the data item is handled in accordance with the basic tokenization process step . If it is determined that at least one such token exists then grammatically sensitive tokenization is performed where the identified substring in the source string is replaced with the first such grammatically sensitive token and the replaced substring is associated with the grammatically sensitive token in a memory step .

In many embodiments after a translated string is returned from a machine translator the translated string is searched in order to identify grammatically sensitive tokens. For each such token that is found the token is replaced in the translated string with an associated target string associated in memory with the grammatically sensitive token. In such embodiments a search for basic tokens used in the basic tokenization approach described for example in the context of and the task of replacing such basic tokens in the translated string is performed after all grammatically sensitive tokens identified in the translated string have been dealt with.

An extensible method for encoding grammatical attributes in a string of digits a grammatical flag is described below. Grammatical flags allow grammatical attributes of words and phrases to be compared efficiently. In some embodiments grammatical flags may support only a single part of speech e.g. nouns and may only have three associated grammatical attributes e.g. part of speech gender and number . In other embodiments grammatical flags may provide support for additional parts of speech and be associated with richer and more numerous grammatical attributes which provide the potential for broader grammatical agreement.

Grammatical flags may be several digits long e.g. three digits where the digits represent for example a part of speech e.g. noun a gender e.g. feminine or masculine and a number e.g. singular or plural . User specific translation data may contain one or more database tables for specifying grammatical flags. The following table indicates exemplary values that may be associated with three digits of grammatical flags.

In the grammatically sensitive tokenization example presented below a grammatical flag is associated with the glossary data entry that links the source term motherboard in English with the Spanish target term placa madre . This grammatical flag and an associated token may be encoded as follows. The grammatical flag associated with the glossary data entry indicates that the desired translation placa madre is a noun is feminine and is singular. Based on the exemplary values displayed in the table above the grammatical flag associated with placa madre may be the string . This grammatical flag may then be appended to a token prefix such as GFTK to yield the token GFTK.

The following example illustrates grammatically sensitive tokenization using an English to Spanish translation of the source string I need a new motherboard. Exemplary glossary data and grammatically sensitive token data that are utilized are shown below 

In a machine translation performed without any tokenization the source string is forwarded to a machine translation engine or system after it is received without any portions of the source string being replaced by tokens. If only basic tokenization is performed then a search of the source string results in the substring motherboard being identified and this substring is thereafter replaced with a neutral token such as GLSRDHDItAZ. If grammatically sensitive tokenization is performed then a search of the source string results in the substring motherboard being identified and this substring is thereafter replaced with the grammatically sensitive token GFTK.

With no tokenization the translated string returned from the machine translation engine utilized for the translation may be the string Necesito una motherboard nueva . Since no tokens were inserted the final translated string will also be the same string as indicated above. Accordingly with no tokenization there is the risk of arriving at a translation that has correct grammar but an incorrectly translated term. In this case the user would have wanted motherboard to translate to placa madre per the user s glossary data but without tokenization the specialty translation was missed.

Using basic tokenization as described in the context of for example the translated string may be Necesito un nuevo GLSRDHDItAZ . This translated string may then yield the final translated string Necesito un nuevo placa madre after the token GLSRDHDItAZ is replaced with the glossary term placa madre. This translation uses the correct desired translation for the term motherboard in accordance with the user s glossary data but contains imperfect grammar because the indefinite article and adjective are masculine and do not agree with the gender of the translated term placa madre.

Using grammatically sensitive tokenization the translated string may be for example Necesito una GFTK nueva . This results in the final translated string Necesito una placa madre nueva after the token GFTK is replaced with the associated glossary term place madre. This translated string not only uses the correct desired translation for the term motherboard in accordance with the user s glossary data but also has perfect grammar because the indefinite article and adjective are both feminine and in agreement with the gender of the translated term place madre. Moreover the word order is also correct.

The meaning of a verb in a given sentence and therefore its translation is often determined by grammatical arguments in that sentence. These arguments may be other words in the sentence that have a bearing on the verb. While there may be several possible arguments the ones that present the biggest challenge to successful tokenization are the subject of the verb or the thing that acts Arg and the direct object of the verb or the thing that is acted upon Arg .

In the example below the three English sentences are identical but for one word which in this case is the direct object of the verb run. The three Spanish and German translations of the word run are however all different.

In each case the meaning of the verb run changes because of the nature of the direct object the value of Arg . In the first sentence runs means manages or leads because it has as its direct object a word that signifies an organization. In the second sentence runs means operates because it has as its direct object a word that signifies a devise. And in the third sentence runs means races because it is followed by a word that signifies a foot race.

Accurate translation is often based on the meaning of words in the context of their use. Therefore the fact that run means different things in these sentences indicates that it may be translated into a given target language with different words as is the case with the above translations into Spanish and German. Grammatically sensitive tokenization may solve or at least mitigate such problems if for example grammatical flags encode semantic categories which allow a machine translation system to choose more appropriate grammatically sensitive tokens that are flagged with richer semantic attributes indicative of such traits as human ness or animate ness.

In some embodiments when translating from certain source languages to certain target languages e.g. from Russian to English multiple source terms in a glossary or translation memory each with a slightly different grammatical ending may reasonably translate to the same target term. Some embodiments may address such a scenario by ensuring that each source term is entered as a separate glossary or translation memory entry and mapped to the same target translation. Other embodiments may address this scenario by defining and using one or more regular expressions to capture 1 the root of the multiple related source terms and or 2 the ending variations. All identified substrings matching such regular expressions may then be mapped to the same target translation.

A module as used herein refers broadly to a software hardware or firmware component. For example a software module may be executable computer code that is part of a larger application and that exchanges data with other software applications and or other modules within the same application.

User application may be any type of software application that allows a user to generate textual input suitable for translation. For example user application may be a web based customer support application with a graphical user interface that allows customers of an organization to input comments or concerns in a variety of languages. The user application may also allow users to dictate comments using their voice and thereafter convert the comments to a textual string suitable for translation. Non limiting examples of user application include TransWidget TextControl Sametime Live Person chat or any application that utilizes the GeoFluent Controlled Application Programming Interface API . In various embodiments of system user application seemlessly interfaces with the other components of system and exchanges information with one or more of these components without requiring any modifications. This may be accomplished by having one or more of the other components of system implement an API provided by user application .

Translation request is a software object or any data structure or construct suitable for transferring information between applications executing on the same or different processors. In the embodiment of system translation request comprises the following information user identification information source language target language and source string .

User identification information may be any type of identification information described in the context of . Source language is an indication of a language that source string is presently associated with and therefore the starting point of any translation of source string . Target language is an indication of a language that source string should be translated to and therefore an end point of a translation of source string . Source string may be any type of character string described in the context of .

In some embodiments communication module may be a stand alone application executing on one or more processors. In other embodiments it may be part of an application that executes other components of system such as tokenization module and normalization module . In system communication module is communicatively linked via the depicted links to normalization module tokenization module translation output generation module and remote translator engine . The links represent any type of communication link discussed in the context of . Although communication module normalization module tokenization module and translation output generation module may execute on processors located remotely from each other they are implemented to work in conjunction with each other and with remote translator engine such that they together produce translations of a higher quality than translations produced by remote translation engine alone. These modules also work in conjunction with one another to protecting a user s private data from exposure to remote translator engine .

Communication Module receives translation request from user application . There are a variety of techniques known in the art e.g. inter process communication techniques using which software applications may communicate data to one another any of these techniques may be used to communicate translation request from user application to communication module . In some embodiments communication module may actively obtain translation request from user application while in others communication module may receive translation request after user application transmits translation request to communication module . In various embodiments user application may not be aware of the existence of communication module and may simply insert translation request into a queue accessible to communication module when translation request is ready for use. In such situations communication module may routinely poll the queue and obtain a copy of translation request after it is available. Alternatively user application may directly transmit the translation request to communication module . Further communication module may implement and or make available one or more APIs that allow one or more applications e.g. user application normalization module or remote translator generation program to communicate and or exchange data with itself.

In various embodiments of system communication module communicates translation request to the normalization module for normalization. In other embodiments normalization module may receive translation request directly from user application .

Normalization module receives the translation request and performs normalization as described for example in the context of . A normalized string generated as a result of the normalization process is then received by tokenization module and tokenized as described for example in the context of . Normalization module and tokenization module may be stand alone applications executing on one or more processors that are communicatively linked via the depicted links to each other to communication module and to one or more memories that store the depicted user specific translation data sequestered data and user specific translation data . The links represent any type of communication link discussed in the context of .

User specific translation data and are stored in any type of memory discussed in the context of . The user identification information may be associated with and used to identify user specific translation data and user specific translation data for use by normalization module during for the normalization process tokenization module for the tokenization process and translation output generation module for post translation processing.

User specific translation data includes glossary data translation memory data and source identification rule data which may be any type of glossary data translation memory data and source identification rule data respectively that were previously discussed in the context of .

In some embodiments normalization module uses the user identification information to access normalization data stored for example in a database or data structure. Normalization data may associate one or more terms or phrases for normalization in a particular language with a corresponding normalized word or phrase in the same language. Normalization data may also include one or more normalization rules in the form of regular expressions.

Normalization module searches source string for one or more words or phrases for normalization stored as part of normalization data . Alternatively and or additionally normalization module may search source string using one or more regular expressions identified by normalization data to identify one or more terms or phrases for normalization. Each such regular expression may also be associated with a corresponding normalized word or phrase.

Once normalization module has identified one or more words or phrases for normalization in source string the identified words or phrases are replaced in the source string with corresponding normalized words or phrases from normalization data .

As a non limiting example if source string were the English language string I ll brb and normalization data included the term for normalization brb associated with the normalized phrase be right back the substring brb in the source string would be identified for normalization by normalization module . Normalization module would then replace the sub string brb with the corresponding normalized phrase be right back to yield a normalized source string I ll be right back .

In various embodiments of system tokenization module receives or retrieves a normalized source string from the normalization module through the depicted link and uses user specific translation data to tokenize the normalized source string. According to some embodiments tokenization module uses user identification information to identify user specific translation data as a source for translation data associated with translation request . In other embodiments normalization module or communication module may share information identifying user specific translation data with tokenization module .

Tokenization module thereafter identifies one or more portions of the normalized source string as meeting at least one search criterion. The at least one search criterion may be reflected in a literal string present in glossary data or translation memory data or a regular expression present in source identification rule data . Tokenization module then replaces each of the identified portions in the source string with unique temporary textual elements tokens and associates each of the temporary textual elements with a corresponding target textual element that is already present in glossary data or translation memory data or that corresponds to a portion of the normalized source string saved in memory as part of sequestered data .

The following is a non limiting example of tokenization as performed in system . Suppose that a normalized string received by tokenization module is the string My name is Jane. I ve been a customer of Oracle for six years. A regular expression stored in source identification rule data identifies the substring Jane as private data for sequestration as part of sequestered data . Accordingly a copy of the substring Jane is associated with a unique textual element for example and stored along with the associated textual element in a database housing sequestered data . The identified substring Jane is also replaced in the string being tokenized with the textual element . Further the substring Oracle is identified using glossary data as a word that should not be translated. Accordingly tokenization module replaces the substring Oracle with the unique textual element and stores an association in a memory between the textual element and the item in glossary data used to identify the substring Oracle . The tokenized string generated by tokenization module in this example would be My name is . I ve been a customer of for six years. 

As explained in the context of the unique temporary textual elements may be alphanumeric tokens inserted into source strings as placeholders prior to translation by a third party translation engine or application. These placeholders may be linked in memory to private information for sequestration to particular predetermined translated words or phrases to allow for custom translations or to words or phrases that require no translation.

After source string has been normalized and tokenized communication module receives or retrieves the tokenized source string and transmits it to remote translator engine . Remote Translator Engine is any type of translator discussed in the context to . In other embodiments tokenization module directly communicates the tokenized string to the remote translator engine .

As depicted in the communication module receives or retrieves a translation of the tokenized source string from remote translator engine and communicates the translated string to translation output generation module . In other embodiments module receives or retrieves the translated string directly from remote translator engine .

Once translation output generation module has access to the translated string it processes the translated string to generate a finalized translated string. The process of generating the finalized translated string may in various embodiments comprise replacing each unique temporary textual element found in the translated string with an associated target textual element from glossary data translation memory data and or sequestered data . After the finalized translated string is generated module makes it available to user application . In some embodiments module makes the finalized translated string available to communication module which in turn sends or otherwise makes available to user application the finalized translated string.

Continuing the non limiting example presented above a Spanish translation of the tokenized source string returned from remote translator engine may be the string Me llamo . He sido un cliente de durante seis anos. Upon gaining access to this translated string translation output generation module may access sequestered data to retrieve the target textual element associated with the unique textual element . For example an entry in a database table stored in memory and associated with sequestered data may link with the name Jane. This entry may have been created by tokenization module during the tokenization process. Module may also access another memory associated with user identification information to locate and retrieve an entry in glossary data previously associated with . Module may then replace the textual element with the associated glossary entry. Accordingly the finalized translated string produced by module may be Me llamo Jane. He sido un cliente de Oracle durante seis anos. 

Translation request is communicated from user application to translation improvement module in any of the ways discussed in the context of . Translation improvement module includes normalization module tokenization module and translation output generation module which are similar to or the same as corresponding identically named modules depicted in .

In system normalization module tokenization module and translation output generation module represent one or more related processes or applications that are executed on the same one or more processors. These processes or applications may share data between themselves at runtime in any of a variety of ways known in the art. In some other embodiments translation improvement module may not logically comprise a normalization tokenization and a translation output generation module. Rather in such embodiments translation improvement module may be executed as a monolithic application or process that itself performs at least all of the normalization tokenization and output generation functions discussed herein.

Normalization module receives the translation request and performs normalization as discussed for example in the context of . A normalized string generated as a result of the normalization process is then received by tokenization module and tokenized as previously discussed. As depicted in translation improvement module is communicatively coupled to a memory that stores user specific translation data to user application and to remote translator engine .

User specific translation data includes at least the following data stored on one or more memories normalization data translation memory data source identification rule data and glossary data . Additionally system also includes sequestered data that is stored in the same or a different memory or memories that house translation data . The user identification information of translation request may be associated with and used to identify translation data for use by translation improvement module during for normalization tokenization and or translation output generation.

In a manner similar to that discussed in the context of normalization module uses normalization data to normalize source string and tokenization module uses one or more of glossary data translation memory data source identification rule data and sequestered data to tokenize the normalized source string . After source string has been normalized and tokenized it is communicated to remote translator engine for translation. Translation improvement module thereafter receives or retrieves a translation of the normalized and tokenized source string from remote translator engine and translation output generation module processes the translated string in a manner similar to that described in the context of to generate a finalized translated string. After the finalized translated string in generated translation output generation module makes it available to user application .

Memory stores at least user specific translation data and general translation data . In some embodiments user specific translation data and general translation data may be housed in separate memories. User specific translation data includes for example usage data translation memory data source identification rule data glossary data and normalization data . And general translation data includes for example usage data translation memory data source identification rule data glossary data and normalization data . Translation memory data and source identification rule data and glossary data and and normalization data and may be any type of translation memory data source identification rule data glossary data and normalization data respectively described in the context of .

Translation profile interface is a user interface associated with an application that allows an authorized human user and or an authorized automated process such as an automated script to add to delete from or otherwise update data stored in memory . For example translation profile interface may be a web interface to one or more databases in memory that stores user specific translation data and general translation data . It may help users create and update glossary translation memory and source identification rule data by providing for example a checklist of the various types of information that could be sequestered and preserved in translation e.g. account numbers telephone numbers and prompting users to identify words or phrases in specific source languages that may be categorized as Do Not Translate items for inclusion as part of the user s glossary data.

Translation profile interface may be used to create a customer or user profile that allows the customer or user to specify and manage the exactness with which source strings must match data in user specific translation data such as glossary or translation memory data. Such information could then be used to adjust algorithms used for tokenization and normalization. For users who generate source strings from chat forums for example matching criterion may be loosened in order to allow misspelled or ill punctuated source strings to match semantically related strings present in the glossary or translation memory. Users may also be able to use user translation profile interface to set and change default preferences for case sensitivity for the normalization of white space and for indicating whether or not punctuation may be ignored when searching source strings against data from the glossary or translation memory. Automatically set defaults for searches against translation memory data may indicate that searches are to be case insensitive white space is to be normalized and intra sentence punctuation is to be ignored. Automatically set defaults for searches against glossary data may be identical to the above defaults except that the default for intra sentence punctuation may be to always take such punctuation into account i.e. NOT to ignore intra sentence punctuation .

Translation profile interface may be used to create a new user account with the provision of certain identifying information such as the name and address of the entity for whom a new user account is being created applicable language directions and one or more third party translation engines that may be utilized for translations associated with the user account.

Translation profile interface may also allow the creation of a user profile comprising one or more language directions one or more specified applications e.g. a remote translation engine for use in performing translations or an application that will be used to generate translation requests and an associated tenancy which identifies user specific translation data e.g. user specific translation data associated with a particular user.

The user in system may be any user described in the context of . For example the user may be a linguist who is familiar with the language needs of a particular business customers and the business policies with respect to sequestering private customer information such as customer names and account numbers. Using translation profile interface such a user may create or modify regular expressions and save them as part of source identification rule data . Note that rule data is depicted as being associated with user specific translation data which in turn may be associated with a single human user or an entity user such as a business. When translation data is associated with a user that is a business it may be applied to translations provided for any customer or other entity associated with the business.

The user in system may also create or modify regular expressions for storage as part of source identification rule data which is depicted as being associated with general translation data . While data stored as part of translation data is generally applicable to translations associated with one or more specific users such as a particular business entity and its customers general translation data is applicable to users who may not have any predefined translation data and or who are interested in applying additional translation data not specifically created in accordance with their privacy and or other business policies.

With appropriate authorization user may also use translation profile interface to create or update translation memory data e.g. translation memory data or glossary data e.g. glossary data or or normalization data e.g. normalization data or .

In a non limiting exemplary use of system user is an authorized representative of Z inc. the provider of a customer support application that allows its users to exchange text messages with customer support staff at various businesses. A subset of these businesses require that various words and phrases are never translated that various other words and phrases are translated in specific ways and that certain types of data be sequestered from any third party or remote translation engines used to translate messages. And another subset of these businesses however do not have any stated policies surrounding the translation of customer messages.

Continuing on with this example when user attempts to use translation profile interface he or she may first be prompted to provide identification information e.g. a user name and password in order to determine if user is authorized to access translation profile interface . If user is determined to have the requisite authority to access translation profile interface user may thereafter attempt to add regular expressions for recognizing and sequestering private information e.g. account numbers of a particular format to the user specific translation data associated with a particular business B inc. At this point user s authorization to edit the user specific translation data of B inc. may need to be verified using additional information submitted by user . Alternatively this verification may not require the provision of any further information from user and may be done using the identification information already provided by user . For example the graphical user interface of translation profile interface may determine which set s of translation data user is authorized to update when user is originally granted permission to access translation profile interface and thereafter only make visible to user the user specific translation data that he or she is allowed to view and or edit.

If user is authorized to access the user specific translation data for B inc. he she may 1 add to the source identification rule data associated with B inc. a regular expression for identifying account numbers that appear in a particular alphanumeric configuration 2 add to the glossary data of B inc. an entry that specifies that a particular English phrase should not be translated from English into any other language and or 3 add to the normalization data associated with B inc. an entry identifying a specific misspelling of a word routinely used by B inc s customers and the corresponding standard spelling for that word.

In addition to the functions of the translation improvement module described in the context of module of system may be used to record and periodically update usage data stored as a part of a user s translation data . The usage data may comprise source string s submitted for translation on behalf of an associated user information identifying the remote translator engine s that were used the time taken to complete the translation process es statistical data on whether glossary or translation memory data being found in source string s submitted for translation statistical data on regular expressions stored as part of the user s source identification rule data being utilized in translations and the finalized translation string s generated.

If permitted by the associated user such usage data may also be stored as part of the usage data associated with general translation data and made available to other users of system . Usage data and may be used to identify for example commonly occurring patterns in source strings and commonly occurring translation errors which may thereafter be used to update user specific translation data and or general translation data .

Bilingual Training Material In various embodiments implementation of grammatically sensitive tokenization may require creation of bilingual training material for each supported language direction. Such material may have example sentences and their translations for a number of grammatically sensitive tokens for each grammatical flag that is supported. For example the bilingual training material for translations between English and Spanish may comprise training material for grammatical flags indicating a masculine noun in the singular a masculine noun in the plural a feminine noun in the singular and a feminine noun in the plural.

Monolingual Training Material In various embodiments implementation of grammatically sensitive tokenization may require creation of monolingual training material for each supported language direction. Such material may comprise natural language texts in which all of the created tokens are represented in equal amounts.

In many embodiments training material such as the above identified material may be used to create an instance of a third party machine translation system that recognizes grammatically sensitive tokens and treats the tokens as if they were words with the associated grammatical characteristics. Such machine translation systems may then be used in the process of grammatically sensitive tokenization.

As is illustrated in the use of a third party translation engine by itself without the added benefits of translation customization and data sequestration can lead to some undesirable results. For example although the names of individuals and business entities are best left untranslated the Spanish name Estivan is translated to Steven in English and the word Solar in the company name Solar Energy Solutions is translated to Solares. Additionally the format of the account number 5474 345J 324M is altered to 5474345j324m. Such format changes are best avoided however as they can introduce errors in format sensitive systems that may later be required to interpret the format altered account numbers. Further calentador solar is translated to heater solar which is not grammatically sound.

By contrast the finalized translated string that results from a translation performed in accordance with the exemplary embodiment avoids these undesirable results. The identification and sequestration of private information results in the name Estivan Rodriguez and the account number 5474 345J 324M remaining unchanged in the finalized translated string as expected. The use of glossary data to identify and preserve text that should not be translated ensures that company names such as Solar Energy Solutions remain untranslated. And the use of translation memory data for customizing translations ensures that the Spanish calentador solar is appropriately translated to solar heater in English. Lastly private information such as user names Estivan Rodriguez account numbers 5474 345J 324M and telephone numbers 212 555 1234 are only processed by trusted or private servers are never compromised by transmission through insecure channels and are never made available to untrusted remote or third party translation engines.

The user interface depicted in may also include a means for selecting or otherwise specifying grammatical attributes for a desired translation. The selected or specified grammatical values for a given glossary data item may be converted into a grammatical flag that is thereafter associated with the glossary data item.

Other embodiments of the subject matter of this disclosure will be apparent to those skilled in the art from consideration of the specification and practice of the disclosed embodiments. Accordingly it is intended that the specification and examples disclosed herein be considered exemplary only.

