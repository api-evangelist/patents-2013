---

title: Monitoring a situation by comparing parallel data streams
abstract: Disclosed herein is a computer-implemented method of monitoring a situation by determining a set of one or more cases in case-based reasoning (CBR) the method comprising: receiving a data stream comprising information on a monitored situation; generating a plurality of parallel data streams from the received data stream; generating, for each of the parallel data streams, an overall similarity score between the parallel data stream and one of a plurality of cases, wherein each overall similarity score is generated from a comparison between one of the plurality of data streams and a different case; and determining a set of one or more cases in dependence on the generated overall similarity scores.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09613362&OS=09613362&RS=09613362
owner: BAKER HUGHES INCORPORATED
number: 09613362
owner_city: Houston
owner_country: US
publication_date: 20131017
---
The present invention relates to case based reasoning. More particularly embodiments of the invention provide efficient effective adaptable and scalable case based reasoning techniques that can be applied in a broad range of industries such as the finance healthcare and energy industries.

Predictive analytics is a tool for making and supporting decisions. Predictive analytics involves analysing historical data in order to predict future events and thereby automatically propose or take actions.

The majority of known predictive analytics systems are offline or batch processing systems that do not operate in real time. The data used in the predictive analytics is separate from that used in operational systems and the data may be hours days weeks or even months old before analytics algorithms are applied to it. These techniques are not appropriate for applications in which it is necessary for the predictive analytics to be performed in real time. Such applications may be for example the monitoring of an oil well drilling operation or an operation by a physician in which it is necessary for problems to be detected and proposals to be generated very quickly.

A known technique for performing real time predictive analytics is complex event processing CEP. CEP systems generate alerts based on previously created rules for monitoring data. Such rule based systems are inherently limited by the difficulty in defining and maintaining the rules. While a near real time rule may be applied to data the analytics required to create the rule is slow and not real time. Moreover the created rules are inflexible and incapable of adapting to changes in the data. The analysis needed to create and update rules is therefore undertaken offline. Accordingly rule based systems tend to only be used in stable and predictable environments in which it is possible to define a set of rules for all circumstances and for automatic actions to be taken.

Rule based techniques are not appropriate for applying predictive analytics in fast changing environments. Furthermore there are scenarios in which it is not appropriate for automatic actions to be taken. If a critical or complicated decision is to be made for example by an oil well operator during a drilling operation or by a physician during surgery it is neither feasible nor desirable to take humans out of the decision making process.

Case based reasoning CBR is a real time predictive analytics technique that does not experience the above described problems of rule based techniques.

CBR systems detect and propose solutions to problems using information obtained from a plurality of cases stored in a case base. Each of the stored cases comprises a description of a problem and a description of a solution. The cases are typically generated manually based on actual experienced problems and devised solutions by system operators. Advantageously CBR systems are able to provide system operators with detailed and reasoned solutions to complicated problems.

The application of predictive analytics to scenarios increasingly requires the use and handling of big data. Big data refers to a collection of data sets so large and complex that they become difficult to process using traditional data processing applications. For example such big data could be encountered when applying predictive analytics within the financial services industry as a vast quantity of financial information is continuously generated and transferred between computing systems all over the world.

A problem with known CBR systems is that they are not designed for supporting and providing real time operation on big data.

According to a first aspect of the invention there is provided a computer implemented method of monitoring a situation by determining a set of one or more cases in case based reasoning CBR the method comprising receiving a data stream comprising information on a monitored situation generating a plurality of parallel data streams from the received data stream generating for each of the parallel data streams an overall similarity score between the parallel data stream and one of a plurality of cases wherein each overall similarity score is generated from a comparison between one of the plurality of data streams and a different case and determining a set of one or more cases in dependence on the generated overall similarity scores.

Preferably each of the overall similarity scores is generated by one of a plurality of comparison agents and each of the comparison agents receives one of the plurality of data streams.

Preferably the method further comprises each comparison agent generating an overall similarity score by receiving one of the plurality of data streams generating a further plurality of parallel data streams wherein each of the generated further plurality of parallel data streams is dependent on the received one of the plurality of data streams generating for each of said generated further plurality of parallel data streams a similarity score in dependence on a comparison between information on a feature in the generated further data stream and stored information on the feature of a case wherein each of the similarity scores of said generated further plurality of data streams is generated in dependence on a comparison with stored information on a different feature of the same case and generating an overall similarity score between the received one of the plurality of data streams and the case in dependence on the generated similarity scores.

Preferably the method further comprises determining to include a case in the set of one or more cases if the overall similarity score for the case is above a predetermined threshold level.

Preferably the determined set of cases has a predetermined number of two or more cases and the method comprises determining the predetermined number of cases for including in the set as the cases with the highest overall similarity scores.

Preferably the method further comprises displaying information dependent on each of the determined one or more cases.

Preferably each case comprises information that describes a situation in one of the finance industry healthcare industry or energy industry.

According to a second aspect of the invention there is provided a case based reasoning CBR engine for monitoring a situation by determining a set of one or more cases wherein the CBR engine is configured to perform any of the above described methods.

According to an third aspect of the invention there is provided a non transitory computer readable storage medium storing a computer program that when executed by a computing device controls the computing device to perform any of the above described methods.

Embodiments of the invention provide CBR techniques that are advantageous over known predictive analytics techniques. Embodiments allow CBR systems to be realised that are fast and scalable as required for real time operation on big data. Moreover the CBR systems according to embodiments are adaptable and can be used for many applications.

CBR systems according to embodiments are particularly effective in the energy finance and healthcare industries.

In the oil industry the CBR techniques of embodiments identify and prevent drilling problems and thereby greatly reduce both costs and drilling time. The techniques are especially advantageous in complex drilling operations and multi well operations as they are able to manage high volumes of data and to quickly recognise trends and indicators. The CBR techniques are also applicable to the energy industry in general and are not limited to the oil industry. For example they may be used to detect and prevent problems in the electrical power generation industries.

In the finance industry it is highly desirable for financial services organisations to have effective systems for predicting and detecting volatility due to any problems that may be caused by IT and service outages capacity and risk issues compliance pressures and trading errors. These problems can result in very large financial losses and serious damage to reputations and customer confidence. Although there are already financial services organisations that have IT systems and data for predicting business compromising events the CBR techniques according to embodiments provide an analytics tool on top of the existing data capture technology to generate proposals for preventing problems from occurring and solving any problems that have occurred. The CBR techniques also provide better assurance for staying in compliance with regulatory requirements and protecting organisations from third party mistakes. Risk and compliance officers can look at actual past events default rates VAR etc. to measure the risk of using similar strategies in the future. Organisations can also detect anomalous events occurring within the industry to protect themselves from other organisations mistakes.

In the healthcare industry CBR techniques according to embodiments enable hospitals to improve the quality of patient care and reduce costs. The CBR techniques apply real time analysis to identify and manage impacting events by providing physicians with evidence based decision support.

There are many ways of incorporating a CBR system into the control of a situation. For example the type of implementation as shown in may be used in which the monitored situation in this example a drilling operation the data analysis server comprising the CBR system and the operations centre are all remote from each other and communicate over a network such as a local network or the internet. Alternatively the data analysis server and or operations centre may be local to the situation.

An example of how CBR could be implemented in a hospital is for patients being operated on to all have their temperature blood pressure and other characteristics continuously monitored. The monitored parameters could be transmitted to a data analysis server comprising a CBR system within the hospital. For each patient any detected problems and proposed solutions are then displayed in the operating theatre to the surgeon operating on the patient. There may also be an operations centre within the hospital in which the results from the CBR system for all of the operations that are occurring at that time are displayed so that all of the operations can be monitored together.

An overview of how the CBR techniques according to embodiments are advantageous over known CBR techniques is provided below.

In order to compare information obtained from a monitored situation to stored information in a case the CBR techniques according to embodiments create a comparison agent for each of the cases in a case base. A comparison agent is an instantiation of a case containing information describing how to compare a previous situation described by the case with a current situation. Each comparison agent comprises computational units that hold all the information required for comparing a feature of a stored case with data streams describing the current situation. The computational units are created in dependence on one or more values of parameters of a stored case feature a function defining how to determine a similarity as well as any other information required for comparison such as weighting information or minimum and maximum values. A plurality of parallel data streams are generated from a received data stream that comprises information on monitored parameters of a situation. The plurality of data streams are then streamed into the computational units of the comparison agents. Each computational unit then compares a subset of the parameters in the streamed data with their stored parameters that correspond to a feature of a case to generate a similarity score between the received data stream and the feature. All of the features of a case have a corresponding computational unit that computes the similarity between one or more parameters describing a monitored situation and the feature that describes a past situation. An overall similarity score between a monitored situation and the case is then calculated in dependence on the similarity score calculated for each feature.

Advantageously received data is streamed directly into the computational units of comparison agents. This allows a very fast comparison of features to be performed. Embodiments differ from and are faster than all known CBR techniques as these require the additional step of first generating a file comprising information on monitored parameters of a situation referred to herein as a current case and then comparing the current case with stored case information.

In addition in embodiments all of the comparison agents operate in parallel with each other. This is a lot faster than known CBR systems that sequentially compare a current case with each case of a case base.

A further advantage is provided by the way in which each comparison agent generates an overall similarity score. The comparison agents are configured not only with stored parameter information for a case but also with weight information of parameters and functions that describe how the comparison agent should compare received and stored information. This allows a more sophisticated and tuneable comparison technique to be applied and the generated similarity score is therefore more accurate.

In addition the CBR cycle for generating new or revised solutions to problems is faster and more efficient than known CBR cycles.

CBR techniques according to embodiments are performed by a CBR engine supported by a CBR platform. The CBR platform is able to integrate with other existing systems and can therefore be used in many applications. The CBR platform and in particular the CBR engine within the platform are also highly scalable.

Each case comprises a description of a problem shown as a situation description and a description of a solution shown as advice. Stored information within each of these sections may be further categorised into sub sections such as dynamic and static data for the situation description. Within each sub section the stored information may be further categorised further sub sections. Although not shown in there may be a number of further categorisations of the stored information into smaller and smaller sub sections.

The smallest sub sections of stored information for the situation description are features of the case . Each problem that a case solves is represented by a set of features with each feature comprising stored values of a parameter. Values of the same parameter can also be obtained from a monitored situation.

Each feature may be combined with other features to form an aggregate feature. The features that are combined to form the aggregate feature are the child features of the aggregate feature. Each aggregate feature may itself be a child feature of another aggregate feature.

The structure of the situation description of each case is defined by a case description graph. The case description graph may be a directed acyclic graph DAG a tree or other types of structure. The nodes of the graph denote the features of the case while the edges or paths between the nodes correspond to the relationships between the nodes. That is to say a leaf node in a tree structure corresponds to a feature that does not depend on any other feature and the other nodes within the tree structure correspond to aggregate features.

Features can have any data type. For example the data type can be just a number with a unit or a symbol or it can be more complex such as a set a vector or a sequence of numbers or symbols. Features can even be natural language text. There is no restriction on the format or type of the features describing a case .

The comparison between a stored case in a case base and an input data stream from a monitored situation is performed by comparing the parameter information stored within the features on a feature by feature basis. Aggregate features have at least one input that is an output from another feature comparison. Although parameters within the received data stream may also be directly input to an aggregate feature aggregate features typically have only outputs from other feature comparisons as inputs. The output of a feature comparison is a similarity score while the aggregated similarity score for all features of a case is an overall similarity score for the comparison between the stored case and the received data stream.

For every feature including the aggregate features comparison information is defined. The comparison information may include weights comparison functions and any other configuration information such as max and min values for numeric similarity measures or range limits for sequences. A comparison function is a function that measures the similarity of one or more received and stored parameters to thereby generate a similarity score that is a measure of the similarity between a feature of a case and information from a monitored situation. The comparison function for a feature may use any of the other information in the comparison information such as weights of parameter values when generating a similarity score for the feature.

All of the features that receive parameters in the data stream may comprise weights that are applied to the stored parameter information and or the parameters in the data stream. Each aggregate feature may also comprise weights that are applied to each of its inputs. The weights allow the contributions of each of the features to be controlled and therefore the relative importance of each feature to be included in the information describing a situation. Local weights can be distinct for each feature and are individual for each case . Local weights need to be stored on a case by case basis. Global weights apply to different cases in the same manner and need only be stored centrally. Global weights become local weights once they are customised for individual cases .

In addition to weighting the one or more parameters that describe features every feature may also have a comparison function that defines how the feature is to be compared against input parameters from the data stream. The comparison function for a feature can be any mathematical function that generates a result in dependence on the parameters. Each comparison function can be individualised to each feature. Features may be provided with a default comparison function or a comparison function that has been determined by a system operator.

All of the cases according to embodiments comprise metadata for storing the comparison information for all of the features of each case . Metadata can also comprise further information describing a case such as units and textual descriptions of the features to help system operators understand each feature.

The above described case structure according to embodiments differs from the case structure used in known CBR systems that do not store metadata in the cases themselves. Advantageously each case can be modelled individually. The original compiler of a case has full control over which features are chosen to describe the case how stored and measured information is compared for each of the features and how an overall similarity score is generated for the case . If required the metadata for each case can also be modified at a later stage by a system operator in order to change how the case is compared with monitored data. A system operator can therefore tune the comparison of the case .

With regard to the case solution if it is not required for the solution to be automatically modified by a computer then this can be a textual description of how to solve the problem. Otherwise the case solution needs to be represented in a format that can be understood by a computer. This advantageously allows a solution to be automatically devised that is based on a plurality of similar cases to the current situation. How to represent a case solution so that it can be understood by computers is known in the art.

Each case can be stored as an XML file such as the example shown in . There are a number of alternative forms in which each case can be stored such as serialised code.

All of the cases are stored in a case base. The case base may be for example a single database a plurality of databases distributed across a plurality of hardware devices a directory on a server or a plurality of directories on one or more servers.

In order to compare the cases in a case base with monitored information on a situation from a received data stream a comparison agent is created for each case in the case base. Each comparison agent is created in dependence on the case description graph for the situation description of the case .

An example of a comparison agent for comparing parameters in a received data stream with a case is shown in . A computation unit has been created for each feature of the case . The relative arrangement of the computation units has been defined by the case description graph for the case and the comparison information of the case has been used to configure how each computation unit operates.

Computation Node is a computation unit that has been configured to generate a comparison result between a received and a stored value of a voltage. In addition to being created with the stored value of the voltage Computation Node has been configured to compare the stored and received value of the voltage according to the comparison information of the feature that Computation Node corresponds to. The comparison information includes a Similarity Measure that is a mathematical function that describes how a result is generated as well as a Configuration that specifies limits on the voltage values.

Computation Node has been configured to generate a comparison result between a received and stored value of a status. It has been created with a stored value of the status and has been configured to compare the stored and received value of the status according to the comparison information of the feature that Computation Node corresponds to.

Computation Node has been created for an aggregate feature. Computation Node receives as inputs the outputs from Computation Nodes and . It has been configured to weight and combine its inputs according to the comparison information of the aggregate feature that it corresponds to in order to generate an overall comparison result i.e. overall similarity score.

The retrieval agent receives overall similarity scores from each of the comparison agents. On the basis of the received overall similarity scores the retrieval agent determines if there are any cases in the case base with similar situation descriptions to the situation being monitored. One strategy that may be used by the retrieval agent is to retrieve all cases that have an overall similarity score that is above a pre determined threshold level. Alternatively the retrieval agent may use the strategy of always retrieving the same predetermined number of cases the retrieved cases having the highest overall similarity scores. Other retrieval strategies are also possible.

In step the method generates a plurality of parallel data streams wherein each of the generated plurality of data streams is dependent on the received data stream.

In step the method generates for each of the generated data streams a similarity score for a feature of a case wherein each similarity score is generated in dependence on a comparison between information in the generated data stream and stored information on the feature of a case and each of the similarity scores is generated in dependence on a comparison with stored information on a different feature of the same case .

In step the method generates an overall similarity score between the received data stream and the case in dependence on the generated similarity scores.

In step the method generates for each of the parallel data streams an overall similarity score between the parallel data stream and one of a plurality of cases wherein each overall similarity score is generated from a comparison between one of the plurality of data streams and a different case .

In step the method determines a set of one or more cases in dependence on the generated overall similarity scores.

In step the method obtains one or more parameter values and comparison information for each of a plurality of features of a case wherein the comparison information of each feature defines a configuration of a computation unit.

In step the method creates for each of the plurality of features a computation unit in dependence on the obtained one or more parameter values and the comparison information of the feature such that the created computation unit is configured to generate an output in dependence on the obtained one or more parameter values and the comparison information of the feature.

The above described embodiments of the invention provide significant advantages over known CBR systems.

Advantageously a similarity score for each feature of a case is generated by a computation unit that receives a data stream or data streams of parameters from the monitored situation. The similarity score for each feature is therefore generated extremely quickly and this allows the CBR techniques of embodiments to be applied in real time.

A further advantage is provided by filtering the received data stream so that only the required data streams of parameters are sent to the computation unit for each feature. This reduces the amount of data transmission within the CBR platform.

The arrangement of the comparison units in has been defined by the case description graph for the case that the comparison agent corresponds to. In for example it is clear that computation units F F and F correspond to leaf nodes of a tree structure and that AF corresponds to the root node of the tree.

Advantageously since the comparison agent for each case is built according to a case description graph such as a tree each comparison agent can be flexibly configured. This allows a system operator to accurately control how each case is compared with received information and how each overall similarity score is generated.

Moreover show very simple comparison agents that require very few computation units. The comparison agent of an actual case that describes for example a drilling operation may contain computation units that correspond to hundreds or even thousands of features and the comparison agent would be a lot larger and more complicated. A tree based design is particularly advantageous for such large comparison agents since inputting streams of data parameters directly into a parallel arrangement of computation units allows an overall similarity score to be generated quickly.

The above described techniques for generating an overall similarity score between stored information for a case and received information from a monitored system are a completely different approach to generating an overall similarity score from that used in known CBR systems.

The design of all known CBR systems has been based on the concept that to find a similar case in a case base to a situation it is first necessary to create a current case i.e. a description of the monitored situation and to compare the current case with descriptions of problems in each of the cases in a case base. Known CBR systems have therefore always performed the time consuming process of building a current case that describes the current situation. A further problem with creating such a current case is that the same current case is compared with each case. This is inefficient since a comparison agent may be provided with parameter information that it does not require. In particular in a distributed system to send the current case to all case comparison agents results in a lot of information being unnecessarily transported within the system. This increases the network traffic and slows down the system.

The system design of advantageously allows the input of a plurality of parallel data streams directly into comparison agents. The process of generating a current case and the overhead of transmitting the entire current case within the system is therefore avoided. In addition by filtering each of the data streams that are sent to each of the comparison agents the data streams only comprise the data streams of parameters that are required for each case . This reduces the amount of information that is communicated within the system. Furthermore the parallel arrangement of comparison agents allows features of cases to be matched in parallel. This is not possible with and is a lot faster than all known CBR systems.

The output from the retrieval agent shown in is one or more similar cases . From these retrieved cases a solution to a problem that has been identified from the received data stream from the monitored situation can be generated and provided to a system operator. One way of easily generating a solution is to directly copy the solution provided in the case with highest overall similarity score. More advanced solutions may be generated by adapting the solution s provided in the one or more retrieved cases so as to generate a solution that is dependent on the solution s in one or more of the retrieved cases . A system operator may also provide a completely new solution not dependent on any of the solutions of the retrieved cases as the solution to a problem that has been determined from the received data stream.

For each problem that is determined from a received data stream and for which a solution has been generated by any of the above described techniques a new case may be generated for which the situation description is dependent on the monitored situation determined from the received data stream and the advice is dependent on the generated solution. The determination to generate such a new case and to store the new case in the case base may be made by a system operator or performed automatically.

The retrieval agent operates as described above and determines one or more similar cases in dependence on the outputs of the comparison agents and .

The reuse agent outputs information from cases for display to a system operator. The output information may be copied from the solution of only one case or the output information may be a solution generated automatically by the reuse agent in dependence on two or more solutions from retrieved cases .

The retrieval and revise agents may operate in substantially the same way as these agents operate in known CBR cycles.

The purpose of the revise agent is to ensure that the proposed solution is appropriate for the current monitored situation. The revise agent can adapt the solution generated by the reuse agent or provide a completely new solution not dependent on the solution generated be the reuse agent . The generation of a solution by the revise agent may be performed automatically such as in response to automatic testing determining that adaption of the solution is required or controlled partially or fully by a system operator. To the extent that a solution for a case is generated the revise agent may perform in substantially the same way as the operation of a revise agent in a known CBR cycle.

In embodiments a situation description agent not explicitly shown in receives the data stream from the monitored situation and generates a current case i.e. a file comprising a description of the situation. In the situation description agent is located within the revise agent and so the data stream is input directly to the revise agent . In alternative implementations the situation description agent may be separate from the revise agent .

The current case created by the situation description agent may have the same format as that used to store the description of a problem information for cases in the case base . The situation description agent operates independently of the comparison agents and may be configured parallel to the comparison agents. In an embodiment the situation description agent only generates the current case in response to receiving a request for the current case from the revise agent . The revise agent only sends the request to the situation description agent when it has generated an adapted or new solution. In an alternative embodiment the situation description agent automatically generates the current case without requiring a request to be received from the revise agent and the generated current case is automatically sent to the revise agent .

The revise agent receives the current case from the situation description agent. The revise agent then generates a new case based upon the generated solution and the current case. The new case preferably comprises metadata with comparison information as described above for the other cases in the case base .

The retain agent stores the new case generated by the revise agent in the case base . The case may be stored as for example an XML file or serialised code as described above for the other cases stored in the case base . The retain agent also creates a new comparison agent for the case and reconfigures the system so that the new comparison agent is supported and operates in the same way as that described above for the other comparison agents and . Accordingly an additional data stream of parameters is created and transmitted to the new comparison agent and the overall similarity score generated for the new case is input to the retrieval agent.

To create a CBR engine all of the CBR agents except the comparison agents are first created. The retain agent then creates a comparison agent for each case stored in the case base according to the above described techniques. The computation units of the CBR engine are thereby created in dependence on the comparison information for each feature of each case . The process of creating each agent may also be referred as instantiation.

In operation information on the most relevant cases to a monitored situation is preferably displayed to a system operator using a case radar as described in U.S. Pat. No. 8 170 800 which is incorporated herein by reference.

In step the method determines a set of one or more cases from a plurality of cases in dependence on a received data stream comprising information on a monitored situation wherein each case comprises information describing a problem and information describing a solution to the problem and the process of determining the set of one or more cases is performed without comparing the description of the problems of any of the plurality of cases with a previously generated current case comprising information describing the monitored situation.

In step the method generates information describing a solution in dependence on information obtained from the determined set of one or more cases and or in dependence on information received from a user interface.

In step the method generates a current case information describing the monitored situation in dependence on the received data stream.

In step the method generates a new case in dependence on the generated information describing a solution and the generated current case.

Advantageously the CBR cycle allows proposed solutions to be provided to a system operator with the proposed solutions being obtained from original cases for a specific situation from generic cases or from modified cases .

In known CBR cycles a current case comprising a description of a situation is first created and the cases in the case base are searched with the current case. To build a new case the already created current case is combined with an adapted or new solution.

The CBR cycle according to embodiments is faster and or more computationally efficient than known CBR cycles as the process of generating and sending a current case to all comparison agents is not required before the content of the case base is searched. The situation description agent may operate in parallel with the comparison agents so that the current case is generated at the same time as the content of the case base is searched. Alternatively the situation description agent may only create a current case in response to an instruction from the revise agent or an operator that the current case is required. This latter approach is more computationally efficient since the current case is only created when necessary.

The high level architecture of a CBR system comprising a CBR platform according to embodiments is shown in . The CBR platform is designed to be scalable flexible and adaptable so that it can be used in many different applications and is able to be integrated with a wide variety of data sources and third party systems. The CBR platform provides real time decision support in dependence on received streamed data.

The CBR platform comprises a system for scaling the deployment of data analysis components in a CBR application. The CBR platform is designed to be able to support very high data throughput and seamless scaling of an application by adding processing nodes such as computer servers and distributing computation across nodes in run time.

APIs are provided for data input to and output from the CBR platform . These allow persistent data storage and also provide tools for data analysts and platform administrators. The APIs may be part of and integral with the CBR platform or they may be separate from the CBR platform . The UIs data sources persistence database and external data interpretation agents do not form part of the CBR platform and may be custom devices for a specific application.

The data source API enables integration with a variety of data sources via data connectors typically implemented as short programs that connect data streams that represent information on a monitored situation from one or more data sources to the CBR platform . The live and static data connectors receive information from respective live and static data sources and map the information to a unified data format. The data source API is provided so that the data connectors can be customised for different implementations. Default connectors may be used but the API also enables the implementation of custom data connectors developed specifically for the application that the CBR platform is required to support.

External of the CBR platform is a persistence database for permanently storing some or all of the data that is input to and or generated within the CBR platform . In particular any new cases generated by a revise agent may be stored in the persistence database. The persistence database may be that of a third party or a default database provided with the CBR platform . It can be implemented according to any known storage solution such as one or more databases or directories. The stored data in the persistence database can be used to replay situations in order to validate data interpretation agents and cases . Additional advantages of having such a persistence database are that it can be used to store the current data within the CBR platform to thereby allow fast system recovery if there is a system failure. Such an external database also facilitates the handling of big data.

The persistence database is supported through the persistence API . The persistence database can be integrated with the CBR platform with short programs that translate between the CBR platform and the data storage solution that may be a custom data storage solution.

Each application may have data interpretation agents internal and or external of the CBR platform . Tasks that may be performed by the data interpretation agents include pre processing data and filtering out noise before the data is fed into the CBR engine . The data interpretation agents may mine the unified data in order to identify patterns in it using pattern recognition methods. The pattern recognition methods may be standard or customised. The agents are typically highly modular and while some are application specific others can be reused to identify similar patterns or perform similar noise filtering across a plurality of different applications. For example an agent may use statistical methods to recognize when there is a sudden increase in a time series of data. An example of a more complex agent is one that may analyse trends in a set of parameters to detect certain patterns such as when a few of the parameters have erratic values relative to the others. The data interpretation agents may therefore generate information for detecting specific events or just single or streams of numerical values for use in any of the case comparison processes.

The data interpretation agents communicate with the CBR platform through the agent API . The agent API is shown within the CBR platform in but may alternatively be on the edge of the CBR platform in the same way that the other APIs in are shown. The agent API also enables third party developers to create custom agents. The agent API provides the CBR engine with information for detecting specific events such as overpull or tight spot events during a drilling operation. The agent API may also provide the CBR engine with parameter information for use by the comparison agents in generating similarity scores and this information may be in the form of single parameter values or one or more data streams of parameter values. That is to say the CBR engine may treat a data stream received from the agent API as if it were a data stream within the received data stream from a monitored situation and use the data stream to generate the overall similarity score for a case .

Default or custom UIs of applications can communicate with the platform through the Application API .

Data analysts may be provided with UIs that enable them to view raw or analysed data going through the CBR platform view case data add custom data interpretation agents test data interpretation agents and case matching capture cases and configure cases and the case library.

Platform administrators are provided with UIs that can be used for server cluster installation and configuration.

The results of the CBR engine may be displayed to a system operator using a case radar as described in U.S. Pat. No. 8 170 800. The radar provides a highly intuitive visualization that allows a system operator to easily identify relevant cases .

Advantageously the CBR platform is highly adaptable and can be easily integrated into a wide range of applications. In addition the CBR platform in particular the CBR engine within the CBR platform is highly scalable can therefore be used in applications that require a larger case base to be searched and or large cases within the case base to be searched. The CBR engine can easily adapt to different sizes of case base. A case base may increase in size if new cases are added or decrease if some of the existing cases in the case base are deemed not relevant to the current situation and do not need to be used in comparisons.

A further advantage is that the CBR platform can be implemented by a distributed computing system. This increases the scalability flexibility and adaptability of the CBR platform .

Applications that the CBR platform is suitable for range from the oil and gas industry in which the cases are typically very large and the case comparisons computationally demanding to the financial services industry in which the case comparisons are typically less computationally demanding but the case base a lot larger.

For example in the above described techniques a comparison agent is created for each case in the case base. An advantage of this approach is that the retrieval agent determines one or more similar cases in dependence on all of the case information in the case base. An alternative approach is to first determine a subset of potentially relevant cases from the case base and only generate comparison agents for the subset of cases . This requires the additional process of filtering the cases in the case base so that the subset only includes cases that are potentially relevant. However the determination of one or more cases is faster and more computationally efficient since fewer comparison agents are required.

The case shown in has separate dynamic and static data. This separation is not essential and the dynamic and static data may be fully or partially intermingled.

As shown in a filter is provided that filters a received data stream into different data streams of parameters. This filtering is not essential and the data stream could have applied unfiltered to each computation unit. This would increase the amount of communicated information within each comparison agent but avoid the requirement of having a filter at the input to the comparison agent.

Similarly in it is not essential to filter the received data stream so that comparison agents are only provided with data streams of parameters that they require. Not filtering the received data stream increases the amount of communicated information within the CBR engine but the processing requirements at the input to the CBR engine are reduced.

As described above embodiments of the CBR platform are particularly powerful tools for the energy finance and healthcare industries. Embodiments are in no way restricted to these applications and the CBR engine may be used in any industry. In particular the CBR engine can provide a powerful tool in the automobile industry the fish farming industry and for the control of energy grids. Embodiments are particularly effective for applications in any domain in which humans are required to make decisions based on the information stored in real time data streams.

The flowcharts and description thereof herein should not be understood to prescribe a fixed order of performing the method steps described therein. Rather the method steps may be performed in any order that is practicable. Although the present invention has been described in connection with specific exemplary embodiments it should be understood that various changes substitutions and alterations apparent to those skilled in the art can be made to the disclosed embodiments without departing from the spirit and scope of the invention as set forth in the appended claims.

Some of the above described embodiments are described with references to flowcharts and or block diagrams of methods apparatuses and systems. One skilled in the art will appreciate that each block of the flowcharts block diagrams and or their combinations can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer s or computer system s special purpose computer s or computer system s other programmable data processing apparatus or the like to produce a machine such that the instructions executed via the processor of the computer computer system programmable data processing apparatus or the like create mechanisms for implementing the functions specified within the blocks of the flowcharts and or block diagrams and or within corresponding portions of the present disclosure.

These computer program instructions may also be stored in a computer readable memory or medium and direct a computer computer system programmable data processing apparatus or the like to function in a particular manner such that the instructions stored in the computer readable memory or medium produce an article of manufacture including instruction means which implement the functions specified in the blocks of the flowchart s and or block diagram s and or within corresponding portions of the present disclosure.

One skilled in the art will understand that any suitable computer readable medium may be utilized. In particular the computer readable medium may include but is not limited to a non transitory computer readable medium such as a tangible electronic magnetic optical electromagnetic infrared and or semiconductor system device and or other apparatus. For example in some embodiments the non transitory computer readable medium includes a tangible medium such as a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory HP OM or Flash memory a compact disc read only memory CD ROM and or some other tangible optical and or magnetic storage device. In other embodiments the computer readable medium may be transitory such as for example a propagation signal including computer executable program code portions embodied therein.

The computer program instructions may also be loaded onto a computer computer system other programmable data processing apparatus or the like to cause a series of operational steps to be performed on the computer computer system other programmable data processing apparatus or the like to produce a computer implemented method or process such that the instructions executed on the computer computer system other programmable data processing apparatus or the like provide steps for implementing the functions acts specified in the flowchart and or block diagram block s and or within corresponding portions of the present disclosure.

In some embodiments of the present disclosure the above described methods and or processes could be performed by a program executing in a programmable general purpose computer or computer system. Alternative embodiments are implemented in a dedicated or special purpose computer or computer system in which some or all of the operations functions steps or acts are performed using hardwired logic or firmware.

Further as used herein the terms unit and engine may be understood to refer to computing software firmware hardware and or various combinations thereof.

