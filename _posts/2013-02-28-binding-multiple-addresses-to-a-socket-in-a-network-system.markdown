---

title: Binding multiple addresses to a socket in a network system
abstract: A TCP/IP socket extension may bind a single socket to more than one IP address. The socket API extension may allow a user to bind a socket to a list of IP addresses instead of a single IP address. Additional socket APIs may allow applications to bind an existing socket to one or more additional IP addresses. Bind-specific support may enhance a user's capability to specify one or more IPv4 addresses and/or IPv6 addresses or other addresses to bind to a generic server information handling system (IHS). The method may convert a generic server IHS into a bind-specific server IHS that accepts new connections over both the IPv4 and IPv6 network transports and/or other network transports without requiring changes to the server IHS. A modified TCP/IP stack may provide support for multiple sockets. The method may map multiple address/port/protocol tuples to the same socket.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09148455&OS=09148455&RS=09148455
owner: International Business Machines Corporation
number: 09148455
owner_city: Armonk
owner_country: US
publication_date: 20130228
---
This patent application is a continuation of and claims priority to the U.S. patent application entitled Binding Multiple Addresses To A Socket In A Network System inventors Brabson et al. Ser. No. 13 692 456 filed Dec. 3 2012 that is assigned to the same Assignee as the subject patent application the disclosure of which is incorporated herein by reference in its entirety.

The disclosures herein relate generally to communicating with applications in information handling systems IHSs that use transmission control protocol internet protocol TCP IP . TCP IP applications use sockets to communicate with each other. A TCP IP server may create within its TCP IP application a socket and bind the socket to a port IP pair to facilitate communication with a TCP IP client.

In one embodiment a method is disclosed that includes creating by an information handling system IHS a socket in the IHS. The method also includes mapping by the IHS multiple IP addresses to the socket. The method further includes listening by the socket for connection requests on the multiple IP addresses. The method still further includes receiving by the socket connection requests for the multiple addresses via a multiple protocol network.

In another embodiment a method is disclosed that includes creating by an information handling system IHS a plurality of sockets in the IHS. The method also includes mapping by the IHS a respective IP address to each of the sockets of the plurality of sockets. The method further includes binding by the IHS each socket of the plurality of sockets to a respective IP address. The method still further includes listening by each of the sockets for connection requests on the multiple IP addresses. The method also includes receiving by each of the sockets connection requests for each of the sockets respective IP address via a multiple protocol network.

In the disclosed communication system a client user application in a client information handling system IHS may connect to a server network application in a server information handling system IHS over a multiple protocol network. The server network application may bind a single TCP IP socket in the server IHS to multiple IP address port tuples in the server IHS. This binding may form a communication connection between the client user application in the client IHS and the server user application in the server IHS thus providing communications over the multiple protocol network.

Server IHS includes a network interface controller that couples to bus to enable server IHS to connect by wire or wirelessly to a network such as multiple protocol IP network . Server IHS may take the form of a desktop server portable laptop notebook or other form factor computer or data processing system. Server IHS may take other form factors such as a gaming device a personal digital assistant PDA a portable telephone device a communication device or other devices that include a processor and memory. Server IHS may also take the form of a portable laptop notebook gaming device PDA or any battery powered device.

Server IHS may include a computer program product on digital media such as a CD DVD or other media. In one embodiment digital media includes server user application and a server network application on computer program product . Nonvolatile storage stores these applications as server network application and server user application . In one embodiment nonvolatile storage may store server network application as part of operating system as shown in . When server IHS initializes server IHS loads operating system including server network application and server user application into system memory for execution as operating system server network application and server user application . Operating system which may include server network application governs the operation of server IHS . In an alternative embodiment server network application may be an application that is separate and distinct from operating system . Server network application includes a TCP IP stack . Server network application also includes a socket library for storing IP addresses. In one embodiment server network application also includes a TCP IP socket a hash table and an IP address list .

Client user application and server user application may use client socket and TCP IP socket respectively to communicate with one another over a multiple protocol network . In response to a request from client user application client network application may create client socket in client IHS over which to send a connect request to a server IHS . As seen in FIG. A the server IHS may create a TCP IP socket on which to accept new connection requests from client IHS . The server IHS may use the socket call to create a new TCP IP socket the bind call to associate the TCP IP socket with a local port and IP address and the listen call to enter the TCP IP socket into the listening state so that the server IHS may accept new connection requests from client IHS . The server network application may bind this TCP IP socket to one port IP address pair which may be a specific address for example 9.27.76.12 or may be a generic address for example 0.0.0.0 . In the disclosed methodology the server network application may bind this TCP IP socket to multiple port IP address pairs as described in more detail below. In one embodiment TCP IP socket may be in the TCP IP stack .

In one embodiment an extension to the TCP IP socket may allow the single TCP IP socket to bind to more than one IP address. Operating systems like operating system may include an application programming interface API not specifically shown that allows application programs to control and use network sockets like TCP IP socket . The extension to the socket API may allow the user application to bind a socket to an IP address list instead of a to single IP address. Additional socket APIs may allow a server user application to bind an existing TCP IP socket to one or more additional IP addresses. More specifically enhanced bind specific support in z OS z OS is a trademark of IBM Corporation may allow users to specify one or more IPv4 addresses and or IPv6 addresses to which a generic server IHS may bind. Hash table of may map a TCP IP socket to an IP address port tuple. In one embodiment enhanced bind specific support may convert a generic server IHS into a bind specific server IHS that may accept new connections over both the IPv4 and IPv6 network transport protocols without requiring any changes to the server IHS .

In one embodiment the TCP IP stack of the network application supports multiple TCP IP sockets . Instead of mapping a single address port protocol tuple to one TCP IP socket multiple address port protocol tuples may map to the same TCP IP socket . In one embodiment to map multiple address port protocol tuples to the same TCP IP socket server network application may add TCP IP socket to the socket hash table multiple times.

Server IHS configures the TCP IP socket to allow TCP IP socket to listen on multiple IP addresses. These IP addresses may be IPv4 addresses IPv6 addresses or they may be a combination of the addresses of these two protocols or other protocols. In one embodiment server IHS may configure TCP IP socket to listen on more than two IP addresses. TCP IP socket is thus an enhanced TCP IP socket. The enhanced TCP IP socket may allow a server network application that supports a single TCP IP socket to be configured as a bind specific server IHS . A server network application configured to support a single TCP IP socket as a bind specific server may continue to accept connections over both the IPv4 and IPv6 network transport protocols. Allowing a single TCP IP socket to listen on multiple IP addresses may avoid costly changes to client user applications .

In an alternative embodiment socket library may provide multiprotocol support. The socket library may open one or more TCP IP sockets within the same TCP IP stack each time that an application socket is bound to an IP address. Each time that a socket binds to an IP address socket library may open one or more TCP IP sockets within the TCP IP stack . The socket layer may include TCP IP stack and TCP IP socket and may present a single socket interface to the server network application while managing multiple TCP IP sockets for communicating with the TCP IP stack . The socket layer provides the socket library with application programming interfaces for TCP IP sockets that enable inter process communications. Server user applications may perform operations on the TCP IP sockets such as a request to accept a new connection. In response to such a connection request socket library may pass the connection request to each TCP IP socket . The socket library may use asynchronous socket APIs to send multiple accept calls to the TCP IP stack over each TCP IP socket . Alternatively the socket library may perform a select on all TCP IP sockets associated with the server user application .

Configuration options outside of the server network application may change a generic server IHS into a bind specific server IHS at the network application layer. The network application layer may include server application . A bind specific server IHS may accept connections over IPv4 IPv6 or a combination of the two network transport protocols or other protocols. Changing a generic server IHS to a bind specific server IHS may avoid costly changes to client user applications.

The flowchart of shows how server network application of the server IHS may connect at the TCP IP socket to client user application in client IHS using multiple network protocols. The flowchart of depicts an embodiment at the TCP IP stack layer of the server IHS . The TCP IP stack layer may include TCP IP stack and TCP IP socket . Operating system of server IHS may employ socket library to store IP addresses. In one embodiment server network application includes TCP IP stack and socket library . Process flow commences at start block . The server network application creates a TCP IP socket in the TCP IP stack of server network application in operating system as per block . The server network application binds a single listening TCP IP socket at the TCP IP stack in the server IHS to multiple IP address port tuples such as INADDR ANY or IN6ADDR ANY generic addresses to form a specific IP address port pair by the TCP IP stack prior to completing the accept call as per block . The multiple IP address port tuples may include IP addresses exhibiting different network protocols. The address INADDR ANY is a generic representative IP network address. The address IN6ADDR ANY is a generic representative IPv6 network address.

TCP IP stack reads its configuration from the operating system as per block and retrieves the IP address list from the server network application as per block . The list of IP addresses associates IP addresses with a particular socket. The list of IP addresses may include IP addresses of IPv4 or IPv6 network protocols or combination of those protocols or other protocols. Socket library may include the hash table . TCP IP stack adds the IP address socket mappings into the TCP hash table as per block . The server network application listens for incoming connection requests on the newly created TCP IP socket as per block .

The client user application of client IHS sends a connection request to the server IHS as per block . This connection request includes a destination IP address that is an address for which the server network application in the server IHS listens such as one of those addresses added to the hash table as discussed above. The server network application accepts a new connection over that socket as per block . The TCP IP stack locates the application s TCP IP socket in its hash table of socket library as per block . The TCP IP stack posts back to the outstanding accept call from the client user application with a newly accepted connection for that particular client user application as per block . The disclosed methodology ends at block . The IP address port tuple serves as a key in the hash table. More than one key in the hash table may point to the same socket. The multiple IP address port tuples may include IP addresses exhibiting different network protocols. The server network application now has a connection to the client user application .

The flowchart of shows how server network application operating in the operating system of the server IHS may connect to client user application in client IHS by using multiple network protocols. The flowchart of depicts an embodiment at the socket library layer of the server IHS . Operating system may include a socket library for storing IP addresses. Process flow commences with start block . Server network application creates a TCP IP socket in operating system of server IHS as per block . The server network application binds a single listening TCP IP socket at the TCP IP stack in the server IHS to multiple IP address port tuples such as INADDR ANY or IN6ADDR ANY generic addresses to form a specific IP address port pair by the TCP IP stack prior to completing the accept call as per block . Multiple IP address port pairs may include IP addresses exhibiting different network protocols. The socket library reads its configuration from the operating system as per block . The socket library acquires the IP address list that associates IP addresses with specific TCP IP socket from server network application as per block . The IP address list may include combinations of IPv4 and or IPv6 addresses. The socket library creates one socket for each IP address in the IP address list as per block . The socket library binds TCP IP socket to a single IP address from IP address list as per block . The socket library invokes a select on the newly created sockets as per block . The socket library accepts a connection over a socket when one of those sockets becomes available as per block . The socket library posts back to an outstanding accept call from the server network application listening on a single TCP IP socket accepting a new connection for server network application as per block . The disclosed methodology ends at end block . The server network application in server IHS now has a connection to the client user application .

The flowchart of shows how server network application in the operating system of the server IHS may connect to client user application in client IHS using multiple network protocols. The flowchart of shows an embodiment in which the server network application binds a single TCP IP socket to multiple addresses. Operating system may include a socket library for storing IP addresses. Process flow commences with start block . The server network application creates an entry for TCP IP socket in TCP IP stack as per block . The server network application binds a single listening TCP IP socket at the TCP IP stack in the server IHS to multiple IP address port tuples to form a specific IP address port pair by the TCP IP stack prior to completing the accept call as per block . The multiple IP address port tuples may include IP addresses exhibiting different network protocols. The TCP IP stack adds the IP addresses to socket mappings into the hash table of socket library as per block . The server network application adds additional IP address bindings to the single socket as per block . Server network application listens for incoming connections on the newly created TCP IP socket as per block . Client user application of client IHS sends a connection request to server IHS using a destination IP address for which server network application monitors or listens one of the addresses added to the hash table as per block . Server network application accepts a new connection over that TCP IP socket as per block . The TCP IP stack takes that entry in the hash table and creates the TCP IP socket as per block . The TCP IP stack posts back to the outstanding accept call from the server network application with a new accepted connection for that particular client user application as per block . Operation ends with end block . The server network application now has a connection to the client user application .

The disclosed methodology enables a single socket to listen on multiple IP addresses. In one embodiment these IP addresses may be IPv4 IPv6 or a combination of IPv4 and IPv6 addresses. For applications that support a single socket this methodology enables configuration of such applications as a bind specific server that accepts connection requests over both the IPv4 and IPv6 network protocol transports. Users who employ configuration options outside of applications may change a generic server into a bind specific server that is capable of accepting connections over both network protocol transports. The disclosed methodology may avoid potentially costly changes to customer applications.

As will be appreciated by one skilled in the art aspects of the disclosed methodology may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the and flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowcharts of and and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowcharts of described above.

The flowcharts of and illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products that perform network analysis in accordance with various embodiments of the present invention. In this regard each block in the flowcharts of and may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in and . For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of and and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

