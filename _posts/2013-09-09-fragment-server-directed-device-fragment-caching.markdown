---

title: Fragment server directed device fragment caching
abstract: The media stream delivery system encodes and fragments media streams into numerous media stream fragments maintained on fragment servers. Devices obtain fragments to reconstruct media streams including live real-time media streams for playback on the devices. A device may perform caching of media stream fragments so that particular fragments need not be accessed again from a fragment server. A fragment server or even a content provider can analyze and monitor characteristics of media streams, viewing behavior, content popularity, etc., to identify fragments for caching at the playback devices. Caching indicators along with time period indicators may be included in the media stream fragments.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09491213&OS=09491213&RS=09491213
owner: MobiTV, Inc.
number: 09491213
owner_city: Emeryville
owner_country: US
publication_date: 20130909
---
The present invention claims priority of pending U.S. patent application Ser. No. 13 232 913 filed Sep. 14 2011 which is incorporated herein by reference in its entirety.

Media streams typically involve encoding or re encoding prior to transmission to devices and users associated with the devices. In many instances media streams are encoded into a format such as H.264 MPEG 4 Part 10 . H.264 is a block oriented motion compensation based codec that is widely used in Blu ray Discs and streaming Internet sources. H.264 encoding can be resource intensive and specialized hardware is often used to accelerate encoding particularly at high quality levels. In many implementations live stream encoding servers are configured with application specific hardware to receive one or more channels or media streams and encode the channels or media streams into particular formats. The encoding servers may have the capacity to perform real time live encoding on up to half a dozen media streams simultaneously. Devices receive media streams and perform decoding for playback.

However mechanisms for caching media streams for more efficient playback are limited. Consequently the techniques and mechanisms of the present invention provide improved mechanisms for performing media stream caching.

Reference will now be made in detail to some specific examples of the invention including the best modes contemplated by the inventors for carrying out the invention. Examples of these specific embodiments are illustrated in the accompanying drawings. While the invention is described in conjunction with these specific embodiments it will be understood that it is not intended to limit the invention to the described embodiments. On the contrary it is intended to cover alternatives modifications and equivalents as may be included within the spirit and scope of the invention as defined by the appended claims.

For example the techniques of the present invention will be described in the context of fragment servers. However it should be noted that the techniques of the present invention may also apply to fragment server variations and media stream servers. In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. Particular example embodiments of the present invention may be implemented without some or all of these specific details. In other instances well known process operations have not been described in detail in order not to unnecessarily obscure the present invention.

Various techniques and mechanisms of the present invention will sometimes be described in singular form for clarity. However it should be noted that some embodiments include multiple iterations of a technique or multiple instantiations of a mechanism unless noted otherwise. For example a system uses a processor in a variety of contexts. However it will be appreciated that a system can use multiple processors while remaining within the scope of the present invention unless otherwise noted. Furthermore the techniques and mechanisms of the present invention will sometimes describe a connection between two entities. It should be noted that a connection between two entities does not necessarily mean a direct unimpeded connection as a variety of other entities may reside between the two entities. For example a processor may be connected to memory but it will be appreciated that a variety of bridges and controllers may reside between the processor and memory. Consequently a connection does not necessarily mean a direct unimpeded connection unless otherwise noted.

The media stream delivery system encodes and fragments media streams into numerous media stream fragments maintained on fragment servers. Devices obtain fragments to reconstruct media streams including live real time media streams for playback on the devices. A device may perform caching of media stream fragments so that particular fragments need not be accessed again from a fragment server. A fragment server or even a content provider can analyze and monitor characteristics of media streams viewing behavior content popularity etc. to identify fragments for caching at the playback devices. Caching indicators along with time period indicators may be included in the media stream fragments.

A variety of mechanisms are used to deliver media streams to devices. Different devices and different networks may require different variants of a media stream. Some devices may request a higher bit rate or higher resolution stream while changes in network conditions may necessitate switching to a stream having a lower quality level. Some devices may be able to handle higher resolutions while others may have limited processing resources or limited screen real estate. Consequently many systems will encode numerous variants of each media stream. For example a media provider covering 152 channels may encode 8 variants of each channel for a total of 1216 variants. In some instances a media provider may actually encode each channel into 8 variants of a particular codec such as MPEG 4 part 10 or H.264.

Conventional MPEG 4 files require that a player on a device parse the entire header before any of the data can be decoded. Parsing the entire header can take a notable amount of time particularly on devices with limited network and processing resources. Consequently the techniques and mechanisms of the present invention provide a fragmented MPEG 4 framework that allows playback upon receiving a first MPEG 4 file fragment. A second MPEG 4 file fragment can be requested using information included in the first MPEG 4 file fragment. According to various embodiments the second MPEG 4 file fragment requested may be a fragment corresponding to a higher or lower bit rate stream than the stream associated with the first file fragment.

MPEG 4 is an extensible container format that does not have a fixed structure for describing media types. Instead MPEG 4 has an object hierarchy that allows custom structures to be defined for each format. The format description is stored in the sample description stsd box for each stream. The sample description box may include information that may not be known until all data has been encoded. For example the sample description box may include an average bit rate that is not known prior to encoding.

According to various embodiments MPEG 4 files are fragmented so that a live stream can be intelligent encoded in a distributed architecture on dynamically scalable hardware recorded and played back in a close to live manner. MPEG 4 files can be created without having to wait until all content is written to prepare the movie headers. To allow for MPEG 4 fragmentation without out of band signaling a box structure is provided to include synchronization information end of file information and chapter information. According to various embodiments synchronization information is used to synchronize audio and video when playback entails starting in the middle of a stream. End of file information signals when the current program or file is over. This may include information to continue streaming the next program or file. Chapter information may be used for video on demand content that is broken up into chapters possibly separated by advertisement slots.

MPEG 4 fragments may be maintained on fragment servers. Devices request fragments from the fragment server in order to reconstruct particular media streams for playback. In some examples fragments correspond to a particular live stream variant that is reconstructed as additional fragments are made available.

According to various embodiments devices maintain fragments in a caching layer and check the caching layer before accessing a fragment server to obtain the fragment. Various network nodes between a fragment server and a device may also operate to cache particular fragments or even portions of fragments. Caching reduces latency required to obtain a particular fragment for playback and also reduces network resource consumption. Device caching schemes may include first in first out FIFO buffers that will maintain recent fragments for a particular period of time. However many conventional caching algorithms do not work particularly well for media stream fragments. Consequently the techniques of the present invention provide mechanisms for devices to recognize characteristics of a media stream and viewing characteristics of a user in order to more intelligently select fragments or portions of fragments for caching.

According to various embodiments a device monitors and analyzes viewing characteristics of particular users as well as characteristics of media streams in order to identify fragments that may be requested more than once. The device may determine that particular fragments corresponding to introduction and end sequences for particular programs are repeatedly accessed by a particular user on a device. Fragments corresponding to those repeated introduction and end sequences may be maintained for extended periods of time in a caching layer that can be efficiently accessed during playback. In other examples repeated sequences such as repeated program and advertisement sequences etc. are automatically identified and maintained in a local caching layer.

According to various embodiments a fragment server can also perform media stream and device characteristics monitoring and analysis. According to various embodiments a fragment server has more information about what fragments are more frequently accessed or what fragments will be more frequently accessed. In particular embodiments a fragment server knows that a particular advertisement sequence will be played a particular number of times over the next 24 hours and indicates to various devices that fragments corresponding to the advertisement sequence should be cached. In particular embodiments flags and or time period indicators may be included in individual fragments to indicate how long fragments should be maintained at device caching layers.

Request for fragments are exposed as separate files to clients and files should play on players that handle fragmented MPEG 4. Live or near live video on demand VOD and digital video record DVR content can all be encoded on distributed and dynamically scalable encoding resources and fragmented for local caching and playback.

After the media stream is delineated into GOPs a work dispatcher is notified that a GOP is available. According to various embodiments the work dispatcher determines if it is the one assigned to work on it as well as what should be done with the GOP. According to various embodiments the work dispatcher may determine that the GOP should be encoded into 8 different variants. In particular embodiments the work dispatcher creates a description of what needs to be done assigns a weight or priority level to the job and sends the job to job queues . According to various embodiments job queues are first in first out FIFO queues that are empty most of the time. Encoders fraggers request jobs and obtain them from the job queues . According to various embodiments jobs may be ordered in a job queue based on weight. In particular embodiments encoders fraggers may select higher priority jobs first from the job queues.

In particular embodiments different priority jobs are placed in different priority job queues. Multiple jobs may be taken from the higher priority job queues before a single job is taken from the lower priority job queues. According to various embodiments highest priority jobs are processed before lower priority jobs. In particular embodiments queues are assigned percentage of service values. A high priority queue may get serviced 40 of the time. A medium priority queue 30 of the time and the remaining queues 20 and 10 of the time by the encoders fraggers. According to various embodiments hundreds or thousands of encoders fraggers reside in a system. In particular embodiments the same device performs both encoding and fragmentation but it should be noted that separated devices can be used to perform these operations. According to various embodiments additional encoder fraggers can be dynamically brought online when resource usage reaches a particular threshold. Alternatively encoder fraggers can be taken offline when resources usage falls beneath a particular floor. According to various embodiments encoder fragger is a virtual machine that may reside on one or more physical servers that may or may not have specialized encoding hardware. In particular embodiments a cloud service determines how many of these virtual machines to use based on established thresholds.

According to various embodiments a unique identifier is provided for each GOP and a log of each step is maintained. After the encoder fragger completes processing a job and outputs an encoded fragment the encoded fragment is maintained in distributed and redundant storage . In one example distributed and redundant storage is a virtualized scale out network attached storage system. The distributed and redundant storage allows a system to maintain numerous fragments on any number of virtualized storage devices.

According to various embodiments fragments on distributed and redundant storage are accessible by fragment server . The fragment server provides the caching layer with fragments for clients. The design philosophy behind the client server API minimizes round trips and reduces complexity as much as possible when it comes to delivery of the media data to a client device. The fragment server provides live streams and or DVR configurations.

According to various embodiments a client device uses a media component that requests fragmented MPEG 4 files allows trick play and manages bandwidth adaptation. In particular embodiments each client device receives a media stream that is behind a live stream by 12 seconds or more. There may also be server buffering. According to various embodiments GOP delineation encoding fragmentation can occur within a server buffering timeframe. By having numerous encoder fraggers capacity can be increased or decreased by percentage points at any time. According to various embodiments the encoding and fragmentation system at data center can be accessed by devices during media stream playback. Device may request fragments from fragment server . In particular embodiments the device may perform local caching. It should be noted that a variety of nodes may reside between a device and a fragment server .

After the media stream is delineated into GOPs an elastic load balancer is used to distribute work to work dispatchers and . According to various embodiments a live stream variant encoding manager monitors live stream variant consumption. If particular variant are not being consumed jobs for creating those variants are no longer performed. If particular not yet available variants are requested then jobs creating those variants can be generated by the work dispatcher at the request of the live stream variant encoding manager . If a work dispatcher fails right as it takes a notification another notification occurs to a different work dispatcher. Two notifications for the same GOP will end up on two different machines. At each work dispatcher and there may also be a proxy. According to various embodiments the GOP delineator resides on a different data center than the work dispatchers and . Using proxies at work dispatchers and allows for a single transfer of a media stream GOP between data centers.

According to various embodiments the work dispatchers and determine characteristics of a particular job and what should be done with the GOP. According to various embodiments the work dispatchers and may determine that the GOP should be encoded into 8 different variants. In particular embodiments the work dispatchers and create descriptions of what needs to be done and send jobs to job queues . According to various embodiments job queues include an active job queue and a standby job queue. According to various embodiments job queues are first in first out FIFO queues that are empty most of the time. Timeouts may be associated with each job in the queue. Encoders fraggers and request jobs and obtain them from the job queues . In particular embodiments encoders fraggers and are identical and can be dynamically activated or deactivated. According to various embodiments hundreds or thousands of encoders fraggers reside in a system.

In particular embodiments the same device performs both encoding and fragmentation but it should be noted that separated devices can be used to perform these operations. According to various embodiments additional encoder fraggers can be dynamically brought online when resource usage reaches a particular threshold. Alternatively encoder fraggers can be taken offline when resources usage falls beneath a particular floor. According to various embodiments encoder fragger and is a virtual machine that may reside on one or more physical servers that may or may not have specialized encoding hardware. In particular embodiments a cloud service determines how many of these virtual machines to use based on established thresholds.

According to various embodiments encoders fraggers and are stateless. According to various embodiments a unique identifier is provided for each GOP and a log of each step is maintained. If a particular encoder fragger fails at any point in the process another encoder fragger can perform encoding and fragmentation operations. After the encoders fraggers and complete the jobs and generate encoded fragments the encoded fragments are maintained in distributed and redundant storage . In one example distributed and redundant storage is a virtualized scale out network attached storage system. The distributed and redundant storage includes nodes and allowing a system to maintain numerous fragments on any number of virtualized storage devices.

According to various embodiments fragments on distributed and redundant storage are accessible by fragment servers and . The fragment servers and provide a caching layer with fragments for clients. The design philosophy behind the client server API minimizes round trips and reduces complexity as much as possible when it comes to delivery of the media data to a client device. The fragment servers and provide live streams and or DVR configurations. According to various embodiments fragment servers also operate without state. In particular embodiments fragments servers operate using HTTP get requests. According to various embodiments each process allows a flow to continue without having a centralized control point. An elastic load balancer distributes fragment requests from a cloud front provided to devices and . According to various embodiments devices and monitor and analyze media streams to determine what fragments should be cached. In some examples devices and cache any fragment that has been determined to be redundant to any fragment previously requested. Fragments can be compared using identifiers hashes etc.

It is determined that if the same fragment has been obtained at least twice it is likely that the fragment will need to be accessed again. In particular embodiments the device identifies sequences corresponding to advertisements program introductions program endings etc. and caches fragments associated with those identified sequences. Particular advertisements introductions and endings etc. may be more likely repeated. If a viewer is identified as frequently watching a particular program fragments associated with introduction sequences ending sequences and advertisements for that program may be cached.

According to various embodiments a client device uses a media component that requests fragmented MPEG 4 files allows trick play and manages bandwidth adaptation. In particular embodiments each client device receives a media stream that is behind a live stream by 12 seconds or more. Caching can reduce delay and or network resource usage. According to various embodiments GOP delineation encoding fragmentation can occur within a server buffering timeframe. By having numerous encoder fraggers capacity can be increased or decreased by percentage points at any time. According to various embodiments a system provides not only localized redundancy but geographic redundancy as well. A complete system including load balancers work dispatchers encoders fraggers storage fragment servers etc. may be replicated at a geographically separate data center.

At a work dispatcher determines that a GOP is available. According to various embodiments the GOP delineator and the work dispatcher reside in different data centers and it is desirable to have a single GOP transfer instead of redundant GOP transfers. At the work dispatcher creates descriptions of multiple jobs corresponding to different encoding quality levels and places the jobs in work queues. According to various embodiments the jobs are assigned different weights and or priority levels. An encoder fragger at pulls the job from the job queue and encodes the GOP into a format such as H.264. Encoded fragments are maintained on distributed storage at . A user can then continuously access the encoded fragments at a particular quality level through a fragment server at that allows real time or near real time Internet Protocol IP distribution of the media stream fragments.

At the fragment server includes metadata such as a flag and or a time period during which a particular fragment should be cached at a device. The metadata may be included in the fragment itself or may be included out of band.

According to various embodiments the fragment writer command line arguments are the SDP file of the channel to record the start time end time name of the current and next output files. The fragment writer listens to RTP traffic from the live video encoders and rewrites the media data to disk as fragmented MPEG 4. According to various embodiments media data is written as fragmented MPEG 4 as defined in MPEG 4 part 12 ISO IEC 14496 12 . Each broadcast show is written to disk as a separate file indicated by the show ID derived from EPG . Clients include the show ID as part of the channel name when requesting to view a prerecorded show. The fragment writer consumes each of the different encodings and stores them as a different MPEG 4 fragment.

In particular embodiments the fragment writer writes the RTP data for a particular encoding and the show ID field to a single file. Inside that file there is metadata information that describes the entire file MOOV blocks . Atoms are stored as groups of MOOF MDAT pairs to allow a show to be saved as a single file. At the end of the file there is random access information that can be used to enable a client to perform bandwidth adaptation and trick play functionality.

According to various embodiments the fragment writer includes an option which encrypts fragments to ensure stream security during the recording process. The fragment writer will request an encoding key from the license manager. The keys used are similar to that done for DRM. The encoding format is slightly different where MOOF is encoded. The encryption occurs once so that it does not create prohibitive costs during delivery to clients.

The fragment server responds to HTTP requests for content. According to various embodiments it provides APIs that can be used by clients to get necessary headers required to decode the video seek to any desired time frame within the fragment and APIs to watch channels live. Effectively live channels are served from the most recently written fragments for the show on that channel. The fragment server returns the media header necessary for initializing decoders particular fragments and the random access block to clients. According to various embodiments the APIs supported allow for optimization where the metadata header information is returned to the client along with the first fragment. The fragment writer creates a series of fragments within the file. When a client requests a stream it makes requests for each of these fragments and the fragment server reads the portion of the file pertaining to that fragment and returns it to the client.

According to various embodiments the fragment server uses a REST API that is cache friendly so that most requests made to the fragment server can be cached. The fragment server uses cache control headers and ETag headers to provide the proper hints to caches. This API also provides the ability to understand where a particular user stopped playing and to start play from that point providing the capability for pause on one device and resume on another .

In particular embodiments client requests for fragments follow the following format http HOSTNAME frag CHANNEL BITRATE ID COMMAND ARG e.g. http frag.hosttv.com frag 1 H8QVGAH264 1270059632.mp4 fragment 42. According to various embodiments the channel name will be the same as the backend channel name that is used as the channel portion of the SDP file. VoD uses a channel name of vod . The BITRATE should follow the BITRATE RESOLUTION identifier scheme used for RTP streams. The ID is dynamically assigned. For live streams this may be the UNIX timestamp for DVR this will be a unique ID for the show for VoD this will be the asset ID. The ID is optional and not included in LIVE command requests. The command and argument are used to indicate the exact command desired and any arguments. For example to request chunk this portion would be fragment .

The URL format makes the requests content delivery network CDN friendly because the fragments will never change after this point so two separate clients watching the same stream can be serviced using a cache. In particular the headend architecture leverages this to avoid too many dynamic requests arriving at the Fragment Server by using an HTTP proxy at the head end to cache requests.

According to various embodiments the fragment controller is a daemon that runs on the fragmenter and manages the fragment writer processes. We propose that it uses a configured filter that is executed by the Fragment Controller to generate the list of broadcasts to be recorded. This filter integrates with external components such as a guide server to determine which shows to record and the broadcast ID to use.

According to various embodiments the client includes an application logic component and a media rendering component. The application logic component presents the UI for the user and also communicates to the front end server to get shows that are available for the user and to authenticate. As part of this process the server returns URLs to media assets that are passed to the media rendering component.

In particular embodiments the client relies on the fact that each fragment in a fragmented MPEG 4 file has a sequence number. Using this knowledge and a well defined URL structure for communicating with the server the client requests fragments individually as if it was reading separate files from the server simply by requesting URLs for files associated with increasing sequence numbers. In some embodiments the client can request files corresponding to higher or lower bit rate streams depending on device and network resources.

Since each file contains the information needed to create the URL for the next file no special playlist files are needed and all actions startup channel change seeking can be performed with a single HTTP request. After each fragment is downloaded the client assesses among other things the size of the fragment and the time needed to download it in order to determine if downshifting is needed or if there is enough bandwidth available to request a higher bitrate.

Because each request to the server looks like a request to a separate file the response to requests can be cached in any HTTP Proxy or be distributed over any HTTP based CDN.

The fragment may be cached for a short period of time at caching layer . The mediakit identifies the fragment number and determines whether resources are sufficient to play the fragment. In some examples resources such as processing or bandwidth resources are insufficient. The fragment may not have been received quickly enough or the device may be having trouble decoding the fragment with sufficient speed. Consequently the mediakit may request a next fragment having a different data rate. In some instances the mediakit may request a next fragment having a higher data rate. According to various embodiments the fragment server maintains fragments for different quality of service streams with timing synchronization information to allow for timing accurate playback.

The mediakit requests a next fragment using information from the received fragment. According to various embodiments the next fragment for the media stream may be maintained on a different server may have a different bit rate or may require different authorization. Caching layer determines that the next fragment is not in cache and forwards the request to fragment server . The fragment server sends the fragment to caching layer and the fragment is cached for a short period of time. The fragment is then sent to mediakit .

Particular examples of interfaces supports include Ethernet interfaces frame relay interfaces cable interfaces DSL interfaces token ring interfaces and the like. In addition various very high speed interfaces may be provided such as fast Ethernet interfaces Gigabit Ethernet interfaces ATM interfaces HSSI interfaces POS interfaces FDDI interfaces and the like. Generally these interfaces may include ports appropriate for communication with the appropriate media. In some cases they may also include an independent processor and in some instances volatile RAM. The independent processors may control such communications intensive tasks as packet switching media control and management.

According to various embodiments the system is a fragment server that also includes a transceiver streaming buffers and a program guide database. The fragment server may also be associated with subscription management logging and report generation and monitoring capabilities. In particular embodiments functionality for allowing operation with mobile devices such as cellular phones operating in a particular cellular network and providing subscription management. According to various embodiments an authentication module verifies the identity of devices including mobile devices. A logging and report generation module tracks mobile device requests and associated responses. A monitor system allows an administrator to view usage patterns and system availability. According to various embodiments the fragment server handles requests and responses for media content related transactions while a separate streaming server provides the actual media streams.

Although a particular fragment server is described it should be recognized that a variety of alternative configurations are possible. For example some modules such as a report and logging module and a monitor may not be needed on every server. Alternatively the modules may be implemented on another device connected to the server. In another example the server may not include an interface to an abstract buy engine and may in fact include the abstract buy engine itself. A variety of configurations are possible.

In the foregoing specification the invention has been described with reference to specific embodiments. However one of ordinary skill in the art appreciates that various modifications and changes can be made without departing from the scope of the invention as set forth in the claims below. Accordingly the specification and figures are to be regarded in an illustrative rather than a restrictive sense and all such modifications are intended to be included within the scope of invention.

