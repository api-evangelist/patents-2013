---

title: Document synchronization solution
abstract: A method for synchronizing a database with displayed data, includes providing a data feed to receive data from the database to provide displayed document data, detecting a database change to the data within the database by a database synchronizer to provide a change event, polling the database synchronizer using an HTTP message to detect the change event, and pushing the database change to the displayed document data to update the displayed document data in accordance with the database change and the polling. The polling includes long polling and short polling. A polling servlet within the database synchronizer performs the polling by the database synchronizer. The database synchronizer updates the displayed document data by way of a data structure. The data structure is a queue.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09251236&OS=09251236&RS=09251236
owner: International Business Machines Corporation
number: 09251236
owner_city: Armonk
owner_country: US
publication_date: 20131230
---
This patent application is a continuation of U.S. patent application Ser. No. 12 033 156 filed Feb. 19 2008 which patent application is incorporated herein by reference in its entirety.

This invention relates to the field of the synchronization of documents and more particularly the synchronization of a document displaying data stored in a database.

It is useful for multiple users usually at geographically distributed locations to work on the same document at the same time. In order to permit collaboration of this type changes made to the document by one user should be displayed to all of the other users on their individual views of the document. Thus the view of the users collaborating on the document at the same time can be constantly synchronized.

The data used to populate the document can be stored anywhere. Preferably it can be stored in a database such as an IBM DB2 database. Alternately data can be keyed or pasted into the document or entered into the document in any manner available. If the data is stored in a database the user initiating a collaboration session can load the data from the database populate the document invite additional users to join the session and begin working collaboratively with the invited users. Additional users can be invited to access and or request access during the collaboration session and be admitted while the session is in progress typically by the initiating user.

It is known in the art to provide systems permitting such collaboration and synchronization of documents. For example GOOGLE provides GOOGLE Docs to permit groups of users to synchronize document collaboration in this manner using the internet and their web browsers. The data represented in the synchronized document can be stored in a database prior to a collaboration session. A user can read the data from the database to populate the document at the time the collaboration session begins.

A method for synchronizing a database with displayed data includes providing a data feed to receive data from the database to provide displayed document data detecting a database change to the data within the database by a database synchronizer to provide a change event polling the database synchronizer using an HTTP message to detect the change event and pushing the database change to the displayed document data to update the displayed document data in accordance with the database change and the polling. The polling includes long polling and short polling. A polling servlet within the database synchronizer performs the polling by the database synchronizer. The database synchronizer updates the displayed document data by way of a data structure. The data structure is a queue.

A method for synchronizing a database with a collaboration document wherein a plurality of collaborating users make a plurality of collaboration changes to the collaboration document includes determining a collaboration change of the plurality of collaboration changes using an HTTP message to provide a determined collaboration change pushing the determined collaboration change to the database synchronizing the plurality of collaboration changes to provide a synchronized collaboration document polling a database synchronizer to detect a database change to the data within the database to provide a change event and pushing the change event to the synchronized collaboration document by the database synchronizer. The determined collaboration change is pushed by way of the data synchronizer. The change event is pushed by way of a data structure. The data structure is a queue.

Referring now to there is shown an embodiment of document collaboration and synchronization solution . The document collaboration and synchronization solution can access data stored in an external database and display the accessed data as a collaboration document in a document collaboration system . The document data comprising all or a portion of the collaboration document can be transmitted from the external database to the document collaboration system by way of a database collaboration synchronizer having a client event queue .

The document collaboration system can supervise the editing and synchronizing of the collaboration document while the collaborating users within a collaboration group view and modify it. Thus all of the collaborating users of the collaboration group can view a synchronized version of the collaboration document during a collaboration session within the document collaboration and synchronization solution . The collaborating users can also save information they have changed during the collaboration session into the external database by way of the database collaboration synchronizer during and or after the collaboration session.

During a collaboration session an external application can alter the data that is stored in the external database while the document collaboration system simultaneously displays the data as the collaboration document . The data of the collaboration document can be displayed in a browser or in any other type of data display. Furthermore the database collaboration synchronizer can detect the changes made by the external application to the external database . Additionally the database collaboration synchronizer can push the detected change events to the document collaboration system during the collaboration session in order to update the collaboration document . The change events in the external database can be propagated to the collaboration document according to the URL of the collaboration document the table names and the feednames of the data in the collaboration document as described in more detail below.

In order to detect changes made to the external database during a collaboration session the database collaboration synchronizer can include a log reader daemon . The log reader daemon can read a database log within the external database . The database log can keep track of all transactions involving changes to the data stored in the external database including the data represented by the collaboration document .

Accordingly the database collaboration synchronizer within the solution can use the database log and the log reader daemon to detect changes to data stored in the external database while the data is displayed in the collaboration document within the document collaboration system . Furthermore the database collaboration synchronizer can use the log reader daemon to push the deleted change events to the collaboration document during the collaboration session.

Thus the collaborating users can view and operate upon a collaboration document that displays the changes made to the external database during a collaboration session by the external application on an on going basis. Accordingly the external application can operate substantially like a virtual collaborating user within the document collaboration and synchronization solution .

For example the external database can store the inventory information of a manufacturing company. The collaboration document in the document collaboration system can represent the inventory information as the inventory information is stored in the external database . The collaborating users of the collaboration group can be various groups within the manufacturing company that may need to use the inventory information. For example the collaborating users can be departments of the manufacturing company such as the accounting marketing or sales departments. The external application can be an application for updating the company inventory information stored in the external database as the company manufactures new items and puts them into inventory or as officials of the company remove items from the inventory.

Therefore each of the collaborating users in the various departments of the company can perform their operations upon a collaboration document while viewing the most recent inventory information as stored in the external database and displayed in the collaboration document . Additionally other external entities not shown similar to the external application can view the most recent changes that are made by the departments of the company using the collaboration document . Such other entities can view the changes to the document because the database collaboration synchronizer pushes the changes to the external database .

A collaborating user of the collaboration group can direct the database collaboration synchronizer to perform a save operation into the external database by way of the document collaboration system . In a preferred embodiment of the invention the ability to perform the save operation can be limited to the initiating user . The collaborating user performing the save operation can initiate it by depressing a save button . The save button can be provided in the displays of the collaborating users . In alternate embodiments the save to the external database can be performed by other functionalities including an event driven save or an automatic save functionality.

The database collaboration synchronizer can determine that the collaboration group has requested a save operation by monitoring the document collaboration system using the document status daemon . When the document status daemon detects a request to save the collaboration document the document status daemon can receive the change from the collaboration group and push it to the external database .

Thus the data in the external database is synchronized with the changes made to the collaboration document by the collaborating users of the requesting collaboration group . When the changes made by the collaboration group are stored in the external database in this manner they are recorded in the database log . Therefore the changes made to the collaboration document by the collaboration group can be viewed by the external application or any other applications that may be coupled to the external database .

Accordingly in the foregoing manner the document synchronization and collaboration solution can maintain synchronization of the collaboration document as viewed by the collaborating users and the corresponding data in the external database . The database collaboration synchronizer can receive changes made to the collaboration document by the collaboration group and push them to the external database . Additionally the database collaboration synchronizer can push changes made by the external application to the document collaboration system . The document collaboration system propagates the changes to the collaboration document received from the database collaboration synchronizer to the collaborating users of the collaboration group .

Referring now to there is shown a more detailed representation of an embodiment of the database collaboration synchronizer within the document collaboration and synchronization solution . The database collaboration synchronizer includes the client event queue as previously described. The client event queue can include a header and an event list

The header within the client event queue can include information provided by the initiating user such as the feedname the client IP address of the document collaboration system and a document URL. The header can also include any security token received during the initiation process or the timestamp of the last time the document collaboration system requested change event information from the database collaboration synchronizer . In a preferred embodiment of the invention the header can indicate whether the client event queue is a spreadsheet queue or a queue for some other type of collaboration document . Furthermore the header can include any other information useful in facilitating the propagation of information between the external database and the document collaboration system .

The event list within the client event queue can include an ordered list of the change events occurring within the external database for the data displayed as the collaboration document within the document collaboration system . Furthermore the event list can be empty if no change events are waiting to be pushed to the collaboration document .

The database collaboration synchronizer can create the client event queue at the time an initiating user registers for a collaboration session. In one embodiment of the invention the initiating user can provide the feedname corresponding to required document data when initiating a collaboration session in order to obtain access to the document data when the user is authenticated using the authentication block . The database collaboration synchronizer determines whether the feedname provided in this manner already exists within the client event queue . If the feedname does not exist in the client event queue the synchronizer can create a header in the client event queue . The table name s corresponding to the feedname is previously defined in configuration data. The synchronizer can then place the table name and feedname information into the client event queue . Thus the manner in which the client event queue stores these relationships permits the routing of changes through the database collaboration synchronizer .

For example the log reader daemon can detect a change made to a table within the external database that stores data displayed in the collaboration document . The database collaboration synchronizer can locate the table name of the changed table in the client event queue . The synchronizer can thus use the corresponding feedname within the client event queue to route the change made to the table in the external database through to the collaboration document within the document collaboration system . When the database collaboration synchronizer pushes the change event to the document collaboration system it can delete the event from the client event queue .

In the preferred embodiment of the document collaboration and synchronization solution the log reader daemon can identify changes to the external database by parsing the entries in the database log . The log entry information used by the log reader daemon to extract the metadata from the database log can include the table name and the type of update performed on the data. The table name can be translated into zero one or more feednames based on the feeds provided by the initiating user at the time of registration. The types of updates can include whether the change event is an insert an update or a delete.

The metadata information extracted from the database log by the log reader daemon can include the primary key of the changed table the number of columns in the changed table and the type of data contained in the columns. Each time the log reader daemon parses the information within the database log it can set a cursor to the point of the last entry in the database log that is parsed. Thus in a subsequent reading of the database log the log reader daemon can parse only the new log entries. When the log reader daemon uses the cursor to find a new log entry indicating a new change to the external database it can translate the change event into a queue event and enter the queue event into the event list of the client event queue as previously described.

A queue event in the event list can be represented as a data structure containing the key value of the changed row in the database table within the external database that stores the corresponding data displayed in the collaboration document . The queue event data structure can also indicate whether the change is an insert an update or a delete. Additionally the queue event data structure can include summary field values. Alternate embodiments of the client event queue can include detail columns or any other information useful for propagating information between the external database and the collaboration document .

In a preferred embodiment of the solution the log reader daemon places into the client event queue only changes made to data that is being displayed in the collaboration document . Thus the log reader daemon can act as a filter for filtering changes made to the external database by the external application . The determination whether change data is to be displayed in the collaboration document can be made according to the table name or feedname provided by the initiating user at the beginning of the collaboration session.

When the log reader daemon places a queue event into the client event queue the document status daemon can determine that the collaboration group is waiting for the change. If the document status daemon determines that the collaboration group is waiting for the change the database collaboration synchronizer can push the change from the client event queue to the collaboration document within the document collaboration system immediately. If a collaboration group is not waiting the change can remain on the client event queue until the polling servlet receives a polling request. When the polling servlet issues the polling request the database collaboration synchronizer can push the change to the collaboration document . In either case the document collaboration system can then propagate the change to the collaborating users within the collaboration group . Thus in this manner the external application can operate substantially as a virtual collaborating user by the document collaboration and synchronization solution .

Similarly the database collaboration synchronizer can use the relationships specified in the client event queue to push changes made to the collaboration document from the document collaboration system to the external database . When a collaborating user presses the save button the document collaboration system can initiate an HTTP message. The HTTP message from the collaborating user informs the document status daemon of the save request. In one embodiment the database collaboration synchronizer can include the save servlet .

The document status daemon locates the feedname corresponding to the changed collaboration document in the client event queue . The database collaboration synchronizer can then determine the corresponding table name within the external database using the relationships stored in the header of the client event queue . The database collaboration synchronizer can then propagate the change from the collaboration document to the external database according to the corresponding table name indexed to the feedname by the client event queue . Accordingly the document collaboration and synchronization solution can extend an RSS feed with real time change data polling and notification to the external database . Additionally the solution can provide the ability to change the external database according to an RSS client while the RSS client receives changes from the external database .

In a preferred embodiment a collaboration user can make an HTTP request to the polling servlet to await changes from the external database . The HTTP request can be a long polling request wherein the request remains open until the log reader daemon identifies a relevant change to the data in the external database or the HTTP request times out. A collaborating user or an administrator of the database collaboration synchronizer can configure a timeout length for the polling request. If the log reader daemon identifies a change prior to the timeout and places a corresponding queue event in the event list of the client event queue the polling servlet can respond to the HTTP request with the change data. The document collaboration system can update the document data of the collaboration document according to the polling results.

In an alternate embodiment of the invention the polling process may use a standard polling request in which a collaboration user periodically generates an HTTP request and the generated HTTP request does not remain open. This type of polling can be referred to as short polling. In the short polling embodiment the polling servlet maintains the address of the collaboration user sending the HTTP request and initiates an HTTP response to that user when the client event queue contains changes to the external database . If a short polling request arrives when the client event queue has no changes for the collaboration group the database collaboration synchronizer can send a negative response to the collaboration group .

Referring now to there is shown a more detailed block diagram representation of the document collaboration system for permitting the collaborating users to collaborate on a collaboration document . The collaboration document can be a text document a spreadsheet document a form based html page document or any other type of document. In a preferred embodiment of the document synchronization and collaboration solution the document collaboration system can be any system for synchronizing the changes made to any type of collaboration document by the collaboration users . For example the document collaboration system can be a system such as one of the application programs made available within the GOOGLE Docs suite of applications. Accordingly the document collaboration system can be the web based spreadsheet GOOGLE Spreadsheets. GOOGLE Spreadsheets is similar in functionality to other known stand alone spreadsheet applications such as Microsoft Excel. The GOOGLE Docs suite of applications is comparable to Microsoft Office.

The document collaboration system can include the data application programming interfaces APIs for use by programmers who create web based applications such as an application implementing the document collaboration and synchronization solution . Accordingly the data APIs are a software toolkit that can be used by the solution to assist in the exchange of information between the database collaboration synchronizer and the document collaboration system . Within GOOGLE Docs the data APIs can be referred to as the GData APIs. Documentation for the GData APIs can be found at http code.GOOGLE.com apis gdata . Documentation for GOOGLE Spreadsheet data API can be found at http code.GOOGLE.com apis spreadsheets developers guide protocol.html AuthSubHTTP.

The data APIs within the document collaboration system can include for example an authentication method for use with the authentication block in the synchronizer when initiating a collaboration session. The authentication process can include providing the initiating user with a security token for storage in the header of the client event queue when the initiating user registers. As part of the registration process the initiating user can also provide the URL and the feed for storage in the header . The feed can include a feedname a table name or a key range. Furthermore a table may be defined to be part of zero one or more feeds. The key range can be a low key a high key or a list of keys. The feed can also include summary fields which can include one or more columns from the table.

The data APIs can also include a data import method . The document status daemon and the document collaboration system can use the data import method for example in populating the collaboration document with data from the external database . Additionally the XML handler method can format and transmit XML messages between the synchronizer and the document collaboration system . For example the document change method can issue an HTTP message when a collaborating user presses the save button to signal a save servlet within the synchronizer that the user has requested a save operation for saving a version of the collaboration document . The document status daemon can receive the change from the document collaboration system and push the changes made to the collaboration document onto the client event queue for propagation to the external database in response to the HTTP messages issued by the document change message .

Furthermore those skilled in the art will understand that any number of additional methods having any useful functionalities may be provided within the data APIs of the document collaboration system . Additionally those skilled in the art can revise a web server program implementing the document collaboration and synchronization solution to make use of any additional APIs provided in the document collaboration system whenever they are available.

In one preferred embodiment of the invention the data APIs can use standards such as the Atom 1.0 the RSS 2.0 syndication formats and the Atom Publishing Protocol as understood by those skilled in the art. The feeds of the data APIs can conform to and be extended in conformity to these standards. This permits application programmers to use standardized commands within a web based program implementing the solution to push information to or pull information as required thereby facilitating their work. Because the GData framework of GOOGLE Docs can use standard HTTP and web syndication protocols it is possible to transmit data requests and responses using traditional syndication aggregators feed readers JavaScript AJAX based clients in a web browser stand alone applications and various other systems. A programmer can use any programming language that allows sending of HTTP requests and handling of XML based responses for synchronization of collaboration document and the external database data to implement the solution .

The RSS feed names in the document collaboration and synchronization solution are defined in configuration data that includes for example the table name or view name the primary key columns used to uniquely identify a row of data and the columns that are defined to be summary fields. Other columns can be considered to be detail data an optional key range or a filter predicate that restricts the feed definition to certain rows of the table or view.

The document collaboration system can also provide a chat feature for the collaboration users . In order to allow the collaborating users to access the chat feature their displays can have a chat button for opening a chat window on their displays. Using the chat windows on their displays the collaborating users can see who else is collaborating on a collaboration document during a collaboration session. Additionally the collaborating users can chat with the each other using the chat windows.

Referring now to there is shown an embodiment of the document collaboration and synchronization solution . The document collaboration and synchronization solution is an alternate embodiment of the document collaboration and synchronization solution . Within the solution multiple collaboration groups can collaborate on their respective collaboration documents during their respective collaboration sessions. The document collaboration system within the solution can individually supervise each of the collaboration groups as previously described. In a preferred embodiment of the document collaboration and synchronization solution the document collaboration synchronizer can synchronize multiple external databases storing the data displayed in the collaboration documents 

The document collaboration system can supervise the editing and synchronizing of the collaboration document as the collaborating users not shown within the collaboration group view and modify it as previously described. Thus all of the collaborating users within the collaboration group can simultaneously view a synchronized version of the collaboration document showing all of the changes made by the users during the collaboration session. Each of the collaboration groups can have its own chat feature for communication with the collaborating users therein.

Each collaboration document in the solution can have its own URL entered by the initiating user at the time of registration. The initiating user of each collaboration group can start its document status daemon within the document collaboration synchronizer for detecting changes in its collaboration document at the time of registration. In an alternate embodiment not shown a single document status daemon can detect the changes made to multiple collaboration documents or to all of the collaboration documents 

Each collaboration group can also have its own client event queue . Each client event queue can have its own header and its own event list. The client event queues in the document collaboration synchronizer can form a queue set . The client event queues within the queue set can propagate changes made to each of the collaboration documents respectively through to the external databases . Additionally the client event queues can route changes made to the external databases through to the corresponding collaboration documents . The structure of the queue set thus permits rapid lookups by the log daemon and the polling servlet to facilitate propagation in both directions through the document collaboration synchronizer . When the document collaboration and synchronization solution begins operation the queue set can be empty. The first client event queue can be created when an initiating user within the first collaboration group registers. Thus the size of the queue set can increase or decrease as collaboration groups log on log off or time out.

Each client event queue can begin in an empty state at the time of registration by its initiating user. The client event queue maintains its header information regardless of the presence of events. The key can index the queue set . Nested java hash maps can implement the . In a preferred embodiment of the invention the outer hash map can be a hash map of key feedname value an inner hash map of key client address value queue header . In an alternate embodiment of the invention not shown the document collaboration and synchronization solution can include a single events client queue for synchronizing the external databases and the collaboration documents 

The data APIs within the document collaboration system can detect a change made to a collaboration document and generate an HTTP message containing the feednames to the changed collaboration document accordingly. The corresponding document status daemons can receive the HTTP message and place the change into the client event queue of the changed collaboration document . Using the information stored in the client event queue including the relationships between the table names and the feednames the document collaboration synchronizer can determine the corresponding table or tables and transmit the change to the correct external database or external databases 

The log reader daemon of the database collaboration synchronizer can read the records within the database logs of any number of external databases within the solution . Based on the names of the tables having changed data as indicated by the log records in the database logs the log reader daemon can determine whether there are any feednames corresponding to the table in the queue set . Therefore the log reader daemon can determine whether any collaboration group is waiting for the changed data. If any collaboration group is waiting the log reader daemon creates a client event and pushes it onto the event list of the correct client event queue 

Thus when the log reader daemon detects changes to the data in the external databases it can push the changes to the collaboration documents displaying the changed data according to the relationships stored in the client event queues . In a preferred embodiment of the invention a change which is pushed onto multiple client event queues for multiple collaboration groups can be saved as a single instance within the queue set . References to the single instance of the change can be provided for each client event queue where the change is to be pushed. When the change is pushed to all of the collaboration groups waiting for it the synchronizer can delete the instance.

Each external database can have its own external application for making changes to data stored within itself. Additionally in a preferred embodiment of the invention each external application can view the data and make changes in any of the remaining external databases . Furthermore it will be understood by those skilled in the art that the external applications can perform their operations upon the external databases at any time regardless of whether the collaboration groups are actively collaborating upon any collaboration documents 

While the invention has been described in detail and with reference to specific examples thereof it will be apparent to one skilled in the art that various changes and modifications can be made therein without departing from the spirit and scope thereof.

