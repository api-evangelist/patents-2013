---

title: Dynamic package creation for predictive page load optimization
abstract: Embodiments optimize web page downloads through a customized manifest to reduce latency and network data consumption. A proxy device creates or selects a pre-defined manifest identifying page resources associated with the web page. The manifest is customized by identifying the page resources already cached on a computing device. A single package of resources representing the web page is created. The single package of resources excludes the identified page resources already cached on the computing device. The computing device renders the web page using the single package and the page resources already cached. Some embodiments perform web crawling to create manifests for other web pages.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09282137&OS=09282137&RS=09282137
owner: MICROSOFT TECHNOLOGY LICENSING, LLC
number: 09282137
owner_city: Redmond
owner_country: US
publication_date: 20130315
---
This application is a continuation in part of prior U.S. patent application Ser. No. 13 480 498 filed May 25 2012 the entirety of which is incorporated by reference herein.

Complex web pages are often assembled dynamically at a client by having the client fetch multiple resources from multiple endpoints. This results in high latencies increased network data consumption and sometimes frustrating and disjointed page rendering experiences. While some existing systems offer the delivery of pre packaged content by combining multiple resources to reduce downloads from the endpoints in a package these systems rely on static packaging which has several downsides. For example static packages often lead to over push conditions where the client either has to download a package that contains some resources that are already present with the client or has to fetch additional resources from origin sites. In both of these examples the client has to download additional network data.

Further at least because each client has different configurations and states there is no one optimal static package for every client. For example static packages may differ according to the type of resources in the web page time e.g. include resources that changed recently in one package and resources that have not changed recently in another package the size of the resources e.g. group the smaller resources together in one package and the like. As such any given static package may benefit some clients for some web pages but does not benefit other clients for other web page.

Embodiments of the disclosure optimize web page downloads with a customized manifest. In response to a request for a web page a computing device receives from a proxy device a manifest identifying resources associated with the web page. The computing device modifies the manifest to identify those resources associated with the web page that are already cached by the computing device. The computing device sends the modified manifest to the proxy device. In response the computing device receives from the proxy device a single package of resources that has been created based on the modified manifest. The single package excludes the identified resources associated with the web page that are already cached by the computing device. The computing device renders the web page using the single package in conjunction with the identified resources associated with the web page that are already cached by the computing device.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Referring to the figures embodiments of the disclosure optimize web page downloads using dynamic packaging of resources. Packaging places content together so that the content may be retrieved from a content delivery network e.g. a CDN via a single hypertext transfer protocol HTTP request rather than sending several individual requests to download the same content from content sources. In some embodiments a proxy device creates or selects a manifest e.g. a pre defined manifest identifying page resources associated with a web page in response to a request for the web page from a computing device . The computing device customizes the manifest to identify one or more cached resources available on the computing device . The proxy device dynamically creates a single package of resources for the web page based on the customized manifest. The single package of resources excludes the identified cached resources .

Aspects of the disclosure reduce a quantity of network traffic e.g. latency or bandwidth consumed by the computing device while rendering web pages. For example network roundtrip communications and network data consumption are reduced thereby reducing battery usage and processing on the computing device . Aspects of the disclosure further enable the computing device to decide based on the information in the manifest which resources are to be provided to computing device to render or otherwise display the web page.

In this manner dynamic packaging eliminates the transmittal of data that is already present on the computing device to render web pages thus leading to decreased network data consumption. Further large amounts of data may be compressed before transmittal to the computing device which results in higher compression gain on overall network traffic when compared to compressing each resource separately. Dynamic packaging further allows initialization of a single decompression stream on the computing device or other client instead of using multiple decompression streams. Thus if a page resource is not already compressed by an origin s site the page resource is compressed before being transmitted to the computing device .

In an example scenario dynamic packaging of resources in a single package reduces page latency by eliminating queue time wait time and transmission time of the HTTP requests by aggregating the requests into one or two HTTP requests.

Referring to an exemplary block diagram illustrates a plurality of computing devices communicating with the proxy device the content delivery network and origin sites or other content sources for downloading web pages. The computing devices include for example computing device through computing device M. The computing devices represent any devices executing instructions e.g. as application programs operating system functionality or both to implement the operations and functionality associated with the computing devices . The computing devices may include a mobile computing device or any other portable device. In some embodiments the computing device includes a mobile telephone laptop tablet computing pad netbook gaming device and or portable media player. The computing device may also include less portable devices such as desktop personal computers kiosks and tabletop devices. Additionally the computing device may represent a group of processing units or other computing devices.

In some embodiments the computing device has at least one processor and a memory area . The processor includes any quantity of processing units and is programmed to execute computer executable instructions for implementing aspects of the disclosure. The instructions may be performed by the processor or by multiple processors executing within the computing device or performed by a processor external to the computing device . In some embodiments the processor is programmed to execute instructions such as those illustrated in the figures e.g. .

In some embodiments the processor represents an implementation of analog techniques to perform the operations described herein. For example the operations may be performed by an analog computing device and or a digital computing device.

The computing device includes one or more computer readable media such as the memory area . The memory area includes any quantity of media associated with or accessible by the computing device . The memory area may be internal to the computing device as shown in external to the computing device not shown or both not shown . In some embodiments the memory area includes read only memory and or memory wired into an analog computing device.

The memory area stores among other data one or more applications . The applications when executed by the processor operate to perform functionality on the computing device . Exemplary applications include mail application programs web browsers calendar application programs address book application programs messaging programs media applications location based services search programs and the like. The applications may communicate with counterpart applications or services such as web services accessible via a network . For example the applications may represent downloaded client side applications that correspond to server side services executing in the cloud.

The memory area further stores a plurality of cached resources that may be used when rendering the web page.

The computing devices communicate with the proxy device via the network . Exemplary networks include wired and wireless networks. Exemplary wireless networks include one or more of wireless fidelity Wi Fi networks BLUETOOTH brand networks cellular networks and satellite networks. In some embodiments the proxy device is remote from the computing devices . In other embodiments the proxy device is local to the computing devices or one of the computing devices .

Referring next to an exemplary flow chart illustrates operation of the computing device to download and render the web page. While the operations illustrated in are described as being performed by the computing device in some embodiments the operations may be performed by any other computing entity such as a cloud service or a web service.

In the example shown in one of the computing devices sends a request for the web page to the proxy device . For example a request for a resource associated with the web page may be sent. In other embodiments the computing device sends the request to one or more of the origin sites and the request is either intercepted by the proxy device or re routed to the proxy device .

As further described with reference to the proxy device accesses or creates the manifest associated with the requested web page and transmits the manifest to the computing device .

At the computing device checks whether the manifest for the requested web page has been received in response to the request. The manifest represents a description of the page resources associated with the web page e.g. which page resources are used to render the web page . In some embodiments the manifest is identified by a uniform resource locator URL .

In some embodiments the received manifest is a new manifest created by the proxy device in response to the request from the computing device . In other examples the manifest is predefined created previously and or accessible by the proxy device from one or more local or remote data stores.

At the computing device compares the cached resources stored in the memory area to the page resources in the manifest . At the computing device modifies the manifest to identify the page resources that are stored in the memory area as at least a portion of the cached resources . In some embodiments the computing device creates and or maintains an inventory catalog or other identification of the resources available in the memory area of the computing device . This may be done intermittently periodically regularly or otherwise on an ongoing basis.

In some embodiments identifying the resources associated with the web page that are cached by the computing device comprises comparing timestamps from the manifest of the resources associated with the web page with timestamps from the computing device of the resources as cached by the computing device . In other embodiments identifying those resources associated with the web page that are cached by the computing device comprises comparing identifiers from the manifest of the resources associated with the web page with identifiers from the computing device of the resources as cached by the computing device .

In some embodiments modifying the manifest comprises tagging or flagging in the manifest those resources associated with the web page that are cached by the computing device . In other embodiments the manifest is modified by removing deleting from the manifest those resources associated with the web page that are cached by the computing device . For example the manifest may be modified by deleting one or more of the metadata index and or identifiers associated with the cached resources . In other examples the manifest may be modified by setting a flag corresponding to the page resources that are stored in the memory area as the cached resources .

In an alternative embodiment the computing device constructs an exclusion list and or inclusion list to modify the manifest . For example the computing device creates an inclusive list or exclusive list based on the quantity of the cached resources versus the quantity of resources identified in the manifest . For example the exclusion list is constructed when the majority of resources in the manifest are already cached on the computing device . The exclusion list and or inclusion list include for example a comma separated list of ranges. Each range identifies a resource in the version of the manifest stored by the proxy device as for example an offset into the resource list in that manifest .

The computing device provides the modified manifest to the proxy device at . For example the modified manifest may be sent to the proxy device by sending a single hypertext transfer protocol HTTP request for the web page.

As further described with reference to the proxy device creates a package of resources customized to the current cache state of the computing device . In some embodiments the package is serialized to a byte array before being provided to the computing device .

Aspects of the disclosure are operable with the package in any format. In some embodiments the package is formatted in multipurpose Internet mail extensions MIME format and using a message transmission optimization mechanism MTOM . Appendix A provides an example of the package in MIME format. The proxy device inserts resources in the package in any order. The proxy device may order the resources to match the order of resources as identified the manifest . In other embodiments the order of the resources in the package may be different than the order of the resources identified in the manifest . The proxy device may provide the computing device with metadata identifying the sequence of resources in the package.

In other embodiments the proxy device also provides metadata identifying the resources associated with the web page that are not cached by the computing device yet have been excluded or otherwise omitted from the package. In an example the package contains 10 resources associated with the web page. If two of these resources are not available to the proxy device at the time the request for the package arrives the proxy device may use this metadata to indicate to the computing device that the proxy device is not able to include these resources. In such embodiments the computing device fetches the resources identified in the metadata from the origin sites when attempting to render the web page. Alternatively or in addition the computing device may delay or block rendering of the web page until each of the resources have been received at some subsequent time e.g. a second or two .

At the computing device receives from the proxy device the single customized package of resources representing the web page. The single package of resources excludes the page resources identified in the manifest that are stored in the memory area as the cached resources . The proxy device generates the single package in response to receiving the modified manifest from the computing device . This dynamic packaging eliminates prevents and or avoids pushing data already present on the computing device .

The computing device renders the web page at using the received single package of resources in combination with the page resources already stored in the memory area .

In an example embodiment the manifest for the requested web page may not be available or created on the proxy device . If the manifest does not exist on the proxy device then page resources associated with the web page are fetched by the computing device from the content delivery network the origin sites and or other content sources. In such scenarios the computing device generates a page report for the downloaded web page. The page report identifies the resources associated with the downloaded web page. The computing device sends the page report to the proxy device . As further described and shown with reference to the proxy device creates the manifest for the downloaded web page from the page report.

Referring next to an exemplary block diagram illustrates the proxy device storing computer executable components for building resource packages dynamically. The proxy device represents any computing device programmed to perform the operations illustrated in and . For example the proxy device may represent a cloud computing device a server computing device or another computing device associated with the computing device .

The proxy device includes or has access to one or more computer readable media such as a memory area . The memory area may be internal or external to the proxy device not shown or both not shown . The memory area stores in addition to the manifests for one or more web pages the data identifying web page resources e.g. content and locations e.g. network locations from which resources may be obtained. For example the network locations may include the content delivery network the origin sites and or a cache of the proxy device . In some embodiments the cache stores compressed versions of one or more resources.

The memory area also stores one or more computer executable components. Exemplary components include a communications interface component a storage component a customization component and a manifest component . The communications interface component when executed by at least one processor of the proxy device causes the processor to receive a request for the web page from the computing device . In some embodiments the communications interface component includes a network interface card and or computer executable instructions e.g. a driver for operating the network interface card. In some embodiments the communications interface component is operable with near field communication NFC tags.

The storage component when executed by the processor of the proxy device causes the processor to identify the manifest associated with the web page. The manifest identifies resources associated with the web page. The communications interface component of the proxy device causes the processor to send the manifest identified by the storage component to the computing device . The communications interface component subsequently receives a modified manifest from the computing device . The modified manifest identifies those resources cached by the computing device such as described with reference to .

The customization component when executed by the processor of the proxy device causes the processor to define a single package of resources for the web page. The single package excludes those resources cached by the computing device . The communications interface component further executes to send the single package to the computing device for the computing device to render the web page using the single package and using the resources cached by the computing device or accessed from the content delivery network or the origin sites .

The manifest component when executed by the processor of the proxy device causes the processor to create the manifest for the web page based on a page report received from the computing device . The page report received from the computing device for example identifies the resources associated with the web page. In an example the manifest component creates the manifest to include the properties of the resources. As another example the manifest component pre resolves domain name service DNS names associated with the resources.

The manifest component may further execute to intermittently update the manifest based on a frequency of access to the manifest by the computing devices . In some embodiments the manifest component executes out of band from the communications interface component the storage component and the customization component . The out of band execution of the manifest enables the manifest to be updated without introducing latency into the execution of the communications interface component the storage component and the customization component . For example the communications interface component the storage component and the customization component operate on a first communication channel with the computing device and the manifest component operates on a second communication channel.

Referring next to a flow chart illustrates operation of the proxy device to build a single package based on the modified manifest. While the operations illustrated in are described as being performed by the proxy device in some embodiments the operations may be performed by any other computing entity such as a cloud service or a web service.

The proxy device listens for requests from the computing device for one or more resources at . In another exemplary embodiment the requests from the computing device include information associated with the cached resources .

In the example of in response to receiving a request at for a resource associated with the web page from the computing device the proxy device identifies the manifest associated with the web page at and provides the identified manifest to the computing device at . In this example the proxy device already stores e.g. in the memory area a previously created manifest for the web page.

In other examples not shown in response to receiving a first request for the web page from the computing device e.g. after determining that the manifest for the web page is not available to the proxy device the proxy device creates the manifest for the web page and provides the created manifest in response to subsequent requests for the web page. For example the proxy device may communicate with the content delivery network the origin sites and or other content sources to obtain and catalog each of the resources. The proxy device then defines the manifest for the web page to include an identification of the resources. The defined manifest is stored in the memory area for use in servicing subsequent requests for the web page.

As described with reference to the computing device modifies the manifest to identify page resources that are stored in the memory area as the cached resources .

The modified manifest is received by the proxy device at . Based on the modified manifest the proxy device defines a single package of resources at that exclude the resources already cached by the computing device . The single package is dynamically built and customized by the proxy device based on the current state of the computing device .

Referring next to an exemplary flow chart illustrates operation of the proxy device to create and or update the manifest . While the operations illustrated in are described as being performed by the proxy device in some embodiments the operations may be performed by any other computing entity such as a cloud service or a web service.

The proxy device receives a page report describing the web page at from for example the computing device a web crawler or other entity. The page report identifies the resources associated with the web page. At the proxy device derives or otherwise creates crawl seed data from the page report. Web crawling is then performed based on the created seed data at . The web crawling based on the crawl seed data identifies at other web pages and resources for which manifests may be created or updated and stored by the proxy device . For example the proxy device creates the manifest for the identified web pages at by identifying the resources associated therewith. The created manifests are then stored in the memory area for use when servicing future requests for the identified web pages. As another example the proxy device updates at existing manifests based on the information obtained during the web crawling.

Referring next to an exemplary block diagram illustrates the cache in the memory area of the proxy device . The exemplary cache includes but is not limited to the manifests page resources resource metadata exclusion indexes and resource exclusions .

Each manifest identifies the page resources used to render one or more of the web pages. In some examples the pages resources are retrieved by the proxy device from the content delivery network origin sites and or other content sources and are compressed for storage in the cache . In other embodiments the proxy device does not store actual copies of the page resources but rather stores an address to each of the page resources . When dynamically creating the customized packages in response to a request from the web page the proxy device then obtains the page resources via the address.

The resource metadata represent data describing the page resources . The resource metadata includes for example information indicating that the resource is not compressible an expiration time of the resource a version of the resource headers a hash of the resource and or whether the resource should be included or should not be included in the single package.

In an example if the resource metadata indicates that the resource has expired then the version of the resource stored in cache is included in the single package. If the resource has an expiration time and if the resource has been modified since the request the resource is accessed from the content delivery network . The expiration time in the resource metadata is also updated. If the resource has no expiration time the resource is re fetched from the origin sites and a predefined expiration time is defined for the resource that indicates the time to reuse this resource for another user.

The exclusion indexes represent indices of the resources exclusions in the manifest that are to be excluded from inclusion in the single package. The resource exclusions include one or more properties such as exclusion reason exclusion time resource URL and content type.

In one of the examples the manifest component creates new resource exclusion and defines a reason for exclusion of the resource a time of the resource exclusion a URL of the resource and a content type of the resource for the excluded resource.

In an example scenario the computing device modifies the manifest by providing information that indicates the resources up to a particular index in the manifest should not be included in the single package. The proxy device then creates the single package that includes the resources that have the index that is higher than the index provided by the computing device .

Referring next to an exemplary sequence diagram illustrates downloading of the web page. The computing device e.g. via a network stack or other component sends an application programming interface API such as a GetManifest Web Page call to the proxy device . The proxy device searches the memory area for the manifest corresponding to the requested Web Page. If the manifest is found the proxy device provides the manifest to the user device .

The computing device modifies the manifest to identify the page resources that are stored in the memory area as the cached resources . The modified manifest is returned to the proxy device . For example the modified manifest is sent along with a GetSingleResource call to the proxy device . Before sending the GetSingleResource request the manifest is evaluated to determine if the request may be sent to the proxy device . If no the resources for the web page are fetched from the origin sites .

The proxy device checks the resource metadata in the memory area to determine whether any of the page resources requested in the modified manifest has expired. For example if the proxy device determines that a particular resource is unchanged or otherwise not expired then the last version of the resource may be provided up to a predetermined time e.g. sixty seconds to the computing device .

In other examples the resource metadata indicates that one or more requested page resources are not present in the memory area of the proxy device . The proxy device fetches these page resources from the origin site or the content delivery network . The fetched page resources are compressed at the proxy device . If the fetched resource is found to be compressible it is cached in the proxy device and the resource metadata is updated.

The proxy device prepares the single package of resources representing the web page. The single package of resources excludes the identified cached resources stored in the memory area . The single package is built dynamically by the proxy device and sent to the computing device . The web page is rendered by the computing device after receiving the single package of resources. The computing device renders the web page by using the resources from the single package in combination with the cached resources stored in the memory area .

Referring next to an exemplary sequence diagram illustrates a sequence of operations to deliver the single package of resources. The user initiates a browsing session and requests for the web page not shown . A client connection component of the computing device receives the request and creates a transaction instance. A proxy transactions manager of the computing device identifies the start of the new page session. The proxy transactions manager creates a new page session tracker instance and inserts the transaction instance into the session tracker instance. The proxy transactions manager establishes a connection with a server connection manager . The server connection manager then establishes a connection with a web server .

The proxy transactions manager further on start of the new page session connects to a resource cache manager . The resource cache manager initializes its cache. In some examples the client connection component sends a request for resources to the web server in parallel. The web server provides the requested resources to the client connection component and completes the response by providing all the requested resources. The client connection component receives the requested resources from the web server and forwards them to the browser for rendering the web page. The proxy transactions manger updates the page session tracker instance based upon the received resources. In some examples the request for resources to the web server is sent when the resource cache manager does not have any cached resource corresponding to the requested resources.

The proxy transactions manager initiates a page manifest download request to manifest retriever . The manifest retriever sends the request to the proxy device . The manifest retriever receives in parallel the response from the proxy device . The resource cache manager parses the manifest and builds a list of resources associated with the current web page session. The resource cache manager browses a list of the cached resources and builds a list of resources to download from the proxy device in the form of a single package. The list of resources to download is built by identifying the resources from the manifest resource list that are not cached on the computing device .

The resource cache manager builds a package request and sends the request to the package retriever . The package retriever receives a resource package from the proxy device and parses the resource package. The resource cache manager receives the parsed retrieved package extracts the resources of the package and caches the resources.

The browser receives the response from the resource cache manager corresponding to the request for the web page and issues one or more additional manifest resource requests concurrently. The client connection component receives the request parses the request identifies the page session identifier inserts transactions into a matching session tracker instance and initiates a process to build a response for the request.

The client connection component receives a final request for a current page session. The resource cache manager completes the response to the final session request closes the page tracker instance clears the cache creates a report for the completed page tracker instance and uploads the report to the proxy device .

In some embodiments the proxy device maintains different versions of the manifest and each individual manifest version contains information about state of resources stored at the respective location and version of the web page last seen by a user. The different versions of the manifests allow efficient refreshing of the cached resources at the computing device . For example a latest version of the manifest may indicate a latest version of the web page. When the latest version of the manifest is provided to the computing device and the computing device has cached resources associated with older version of the web page then the computing device modifies the manifest to indicate that the page resources associated with the newer version of the web page are to be provided to the computing device . The page resources associated with the newer version of the web page results in the efficient refreshing of the cached resources .

In some embodiments the modified manifest allows the proxy device to determine which resources to send and when to send the resources to the computing device . For example the modified manifest provides information representing a sequence or order in which the resources are to be sent to the computing device . The proxy device discovers the page resources not stored in the cache and fetches these pages resources from the origin sites to render the web page.

In another example scenario the resource is provided to the computing device from the proxy device on the GetSingleResource call. The exclusion time of the resource exclusions is compared with a pre defined threshold time. If exclusion time is equal to pre defined threshold time then there have been no exclusions for the web page performed and the resource included is in compressed form. If the exclusion time is not equal to the pre defined threshold time the exclusion indexes are obtained for the web page from the cache .

In exemplary embodiments the proxy device performs batch job processing periodically for creating new manifests based on number of requests received from a plurality of the computing devices .

At least a portion of the functionality of the various elements in and may be performed by other elements in these figures or an entity e.g. processor web service server application program computing device etc. not shown in these figures.

In some embodiments the operations illustrated in and may be implemented as software instructions encoded on a computer readable medium in hardware programmed or designed to perform the operations or both. For example aspects of the disclosure may be implemented as a system on a chip or other circuitry including a plurality of interconnected electrically conductive elements.

The term Wi Fi as used herein refers in some embodiments to a wireless local area network using high frequency radio signals for the transmission of data. The term BLUETOOTH as used herein refers in some embodiments to a wireless technology standard for exchanging data over short distances using short wavelength radio transmission. The term cellular as used herein refers in some embodiments to a wireless communication system using short range radio stations that when joined together enable the transmission of data over a wide geographic area. The term NFC as used herein refers in some embodiments to a short range high frequency wireless communication technology for the exchange of data over short distances.

Exemplary computer readable media include flash memory drives digital versatile discs DVDs compact discs CDs floppy disks and tape cassettes. By way of example and not limitation computer readable media comprise computer storage media and communication media. Computer storage media include volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media are tangible and mutually exclusive to communication media. In some embodiments computer storage media are implemented in hardware. Exemplary computer storage media include hard disks flash drives and other solid state memory. In contrast communication media typically embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and include any information delivery media.

Although described in connection with an exemplary computing system environment embodiments of the disclosure are capable of implementation with numerous other general purpose or special purpose computing system environments configurations or devices.

Examples of well known computing systems environments and or configurations that may be suitable for use with aspects of the invention include but are not limited to mobile computing devices personal computers server computers hand held or laptop devices multiprocessor systems gaming consoles microprocessor based systems set top boxes programmable consumer electronics mobile telephones network PCs minicomputers mainframe computers distributed computing environments that include any of the above systems or devices and the like. Such systems or devices may accept input from the user in any way including from input devices such as a keyboard or pointing device via gesture input touch input and or via voice input.

Embodiments of the invention may be described in the general context of computer executable instructions such as program modules executed by one or more computers or other devices. The computer executable instructions may be organized into one or more computer executable components or modules. Generally program modules include but are not limited to routines programs objects components and data structures that perform particular tasks or implement particular abstract data types. Aspects of the invention may be implemented with any number and organization of such components or modules. For example aspects of the invention are not limited to the specific computer executable instructions or the specific components or modules illustrated in the figures and described herein. Other embodiments of the invention may include different computer executable instructions or components having more or less functionality than illustrated and described herein.

Aspects of the invention transform a general purpose computer into a special purpose computing device when configured to execute the instructions described herein.

The embodiments illustrated and described herein as well as embodiments not specifically described herein but within the scope of aspects of the invention constitute exemplary means for optimizing web page downloads through a customized manifest in one content response using one connection to one endpoint in a web service.

The embodiments illustrated and described herein as well as embodiments not specifically described herein but within the scope of aspects of the invention constitute exemplary means for downloading the web page with a single hypertext transfer protocol HTTP response to a single HTTP request.

The order of execution or performance of the operations in embodiments of the invention illustrated and described herein is not essential unless otherwise specified. That is the operations may be performed in any order unless otherwise specified and embodiments of the invention may include additional or fewer operations than those disclosed herein. For example it is contemplated that executing or performing a particular operation before contemporaneously with or after another operation is within the scope of aspects of the invention.

When introducing elements of aspects of the invention or the embodiments thereof the articles a an the and said are intended to mean that there are one or more of the elements. The terms comprising including and having are intended to be inclusive and mean that there may be additional elements other than the listed elements. The term exemplary is intended to mean an example of The phrase one or more of the following A B and C means at least one of A and or at least one of B and or at least one of C. 

Having described aspects of the invention in detail it will be apparent that modifications and variations are possible without departing from the scope of aspects of the invention as defined in the appended claims. As various changes could be made in the above constructions products and methods without departing from the scope of aspects of the invention it is intended that the matter contained in the above description and shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

