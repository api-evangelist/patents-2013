---

title: Providing service using run local daemon
abstract: A requestor seeks support to perform a particular service using a local daemon. A daemon of a responder provides a resource profile identifying resources to perform the service and information about their use. The resources, such as program code or libraries, are acquired from the responder daemon, or from another source or entity. The local daemon implements the one or more resources in accordance with the resource profile, and performs the particular service. Updated resources may be provided from time to time to the local daemon with respect to the particular service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09491115&OS=09491115&RS=09491115
owner: Amazon Technologies, Inc.
number: 09491115
owner_city: Reno
owner_country: US
publication_date: 20130905
---
Users send various requests for services to computing devices on a network. Sometimes a first service calls upon a second service to perform a function in accordance with the user s request. E commerce merchants and other network entities seek to reduce latency and improve client satisfaction when performing requested services in such an environment.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. However various aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout.

Different computing devices coupled to a network or networks may provide different services. A user of a client device may request a particular service or function by accessing a web server or other computing device by way of the Internet or another network pathway. The particular service may be performed and corresponding results or work product may be provided to the requesting user. In turn a particular computing device on such a network may be configured to perform one or more different services that is a first service a second service and so on. Additionally a particular computing device may have resources to function in accordance with one or more operating systems.

As used herein resources may refer to things that may be communicated or exchanged between services or service entities in order to enable a particular function or process. Non limiting examples of resources include program code service libraries java archives JARs data structures database access codes encryption keys uniform resource locators URLs Internet protocol IP addresses and so forth. Other communicable resources may also be used.

Sometimes a request is received by a first service that is dependent on other services to perform the particular task. The first service may generate a request to a second service that performs the task. The first service or the second service may then provide results to the requesting client device depending upon the specifics of the request operating protocols or other factors. For example a user of a client device may issue a request to generate a listing of merchandise prices to be provided as a viewable or storable file. The request may be received by a first service within a computing device network wherein the first service is configured to provide a landing webpage but is lacking resources to produce the price listing. The first service sends a request to a second service within the same or another computing device that generates the price listing and then sends it to the requesting client device.

The ability to send requests between respective services is central to the power and versatility of computing device networks. A virtual division of labor is realized such that any number of particular or specialized functions may be performed by respectively configured services. However various factors influence the speed of processing a given request and the apparent latency experienced by the requesting user. Non limiting examples of such factors include the present workload of a given service varying communicational bandwidths between nodes or services within a network capacity for different operating systems or services to cooperate with each other and so forth.

A daemon is a computer program that runs as a background process in a multitasking computing device or network of such devices. In one scenario each service of a plurality of services is performed by a respective daemon and such daemons may be invoked or adopted to operate when needed. Furthermore respective daemons may communicate data or other information between one another. In this way daemons may be resourced or configured essentially implemented at will so as to perform respective functions on an as needed basis.

For example a first service may receive a user request to compile a listing of customers. However the first service is not configured to perform the requested service nor is it desirable to call upon a second service due to a limited network communication speed of that second service. Rather the first service requests support from the second service so as to enable a daemon to generate the customer listing wherein the daemon will operate locally with respect to the first service. Such a daemon is referred to as a first run local daemon or first RLD for purposes of illustration.

Continuing the present example the second service communicates the support request or related information to a second RLD that has the particular resources to compile the customer listing. The second RLD responds by providing a resource profile as well as one or more resources to the first RLD. The resource profile or resource footprint indicates the resources used to provide the service. The resource profile may also include information about hardware resources. For example the resource profile may specify an amount of memory to be used estimate processor usage by the service identify hardware functions to be accessed or provide other data indicative of the hardware or other resources used to provide the service.

Information in the resource profile may be normalized or converted to a value which is meaningful across different hardware platforms. In one implementation the resource profile may include a metric indicative of processor usage by the service. Different computing devices may exhibit different processor usage in performing the same service due to differences in hardware. For example a first processor type may execute the service in fewer clock cycles than a second processor type due to the hardware differences. As a result comparison of raw clock cycles may lead to erroneous spawning on a computer device which has insufficient processor resources. By normalizing or converting the metrics the resource profile may be meaningfully used across different computing devices.

The first RLD issues an acknowledgement of receipt to the second RLD. The first RLD uses the resource profile and the resources to perform the requested service or to spawn the requested service using the resource profile and the resources. Thus the first RLD compiles the customer listing and provides it to the requesting user. The first RLD may now retain its present resources and configuration ready to perform another service. Alternatively the first RLD may end access to respective data storage end or close running tasks or perform other operations so as to kill the present configuration or resources and return to an original pre request state.

In another implementation the spawned service may be terminated once the present request has been fulfilled. For example the resource profile may indicate that the implemented or spawned service is to be deleted right after use because certain data or aspects thereof are changing with time and may become obsolete. Other post service operations may also be performed. In another example the resource profile may include data or information regarding the implementation or use of the resources. In some implementations should the resources available to the first RLD be insufficient to meet the needs indicated in the resource profile the first RLD would not perform or spawn the requested service.

In general and without limitation the resourcing and invocation of run local daemons in order to provide respective services is contemplated herein. A first service or requestor requests support from a second service or responder in regard to a particular service. The second service sends information corresponding to the request to a daemon local to the second service or second RLD. The second RLD provides a resource profile to a first RLD that is local to the first service. The second RLD may also provide one or more of the resources to the first RLD as well or such resources may be acquired from another entity.

The first RLD implements the resources and performs the particular service in accordance with the resource profile. A result or work product of the service is then provided to a user client device that initiated the original service call. Updated resources or other revised information may be provided to the first RLD such that the particular service is kept current. Respective variations on the foregoing may also be used in accordance with the methods devices and systems described herein.

A client device is associated with a user while a client device is associated with a user . As depicted the client device is a desktop computer configured to perform business or technical task by way of respective program code i.e. software access various websites present visual or audible content to the user and so forth. In turn the client device is depicted as a smart phone having respective resources and configured to perform various operations. The two respective client devices are illustrative and non limiting and other systems numbers of client devices or types may also be used.

The client devices are respectively configured to communicate data or other information with each other or other computing devices by way of one or more networks . The network s may include or be defined by the Internet or access thereto a local area network LAN a wide area network WAN wireless networks and so forth.

Also depicted is a first service . The first service may be provided by a computing device such as a web server or other apparatus. The first service may include electronic circuitry program code or instructions stored on computer accessible media or other constituency. The first service includes an operating system . The first service also includes a run local daemon RLD that operates locally from the perspective of the operating system .

The first service also includes a service A that is configured to perform a particular function or range of functions when invoked or called by the operating system . For purposes of illustration the service A is always available to the operating system and is thus considered a permanent aspect of the first service . However the service A may be upgraded or modified from time to time in the interest of error correction additional or modified functionality access to evolving data structures or encoding and so on.

Further depicted is a second service . The second service may be provided by the same computing device as the first service or by another computing device or web server. Thus one or more computing devices may be used. The second service may include electronic circuitry program code or instructions stored on computer accessible media or other constituency. The second service includes an operating system . The operating system may be the same as or different than the operating system .

The second service also includes a run local daemon RLD that operates locally from the perspective of the operating system . The second service also includes a service B that is configured to perform a particular function or range of functions when invoked or called by the operating system . Thus the service B is available or on call to the operating system . The service B may be upgraded or modified from time to time in the interest of error correction enhanced functionality and so on.

The first service and the second service and their respective elements and are considered distinct domains or environments. Such is the case whether the first service and the second service are provided by the same computing device or by separate and distinct computing devices without regard for respective geographic locations. The first service and the second service may be considered remote to one another.

In one illustrative and non limiting implementation the first service and the second service may communicate independently with the respective client devices by way of the network s . The first and second services and may also communicate but not necessarily so through the network s at respectively different bandwidths e.g. data exchange rates . The first service and the second service may also communicate with each other by way of the network s or by one or more pathways . In one implementation the first service and the second service are aspects of a single computing device and exchange data or other signals with one another by one or more internal busses.

The RLD may spawn or perform one or more particular services if provided with information regarding the operation and use of the required resource or resources and the actual resource s or access thereto. As depicted for non limiting illustration the first service may invoke and perform the service B locally if the RLD is provided with the corresponding resource profile and resources.

For example the user may be seeking a list of camera lenses compatible with a particular camera from an online merchant that deals in such equipment. The user accesses a computing device i.e. web server associated with the online merchant and issues a service request describing the sought after list of lenses. The service request is received by the first service which is provided by the computing device accessed by the user .

Continuing the present example the operating system parses or otherwise processes the service request and determines that the requested operation is not performed by the service A nor by the RLD in its present configuration. The operating system then sends a request for support to the second service seeking resources and information such that the RLD may perform or spawn the needed service B . In the present example the second service is also provided by the computing device as accessed by the user .

The operating system receives the request for support and sends corresponding information to the RLD . In the present example the RLD and the service B function respectively and cooperate with each other so as to generate listings such as that requested by the user . However the second service is currently heavily loaded and thus undesirable latency may be apparent to the user if the requested task were presently handled there by.

In the ongoing example the RLD generates a resource profile and bundles the needed resources and then provides them to the RLD . For instance the resource profile may list the resources used to perform the service B may indicate how they are implemented or cooperate or provide other salient information. In turn the resources may include an IP address of a camera equipment database information as to how to query the database a formatting template for use in producing the requested listing and so forth. As depicted the resource profile and the resources are used to spawn the service B by way of operations or implementations performed by the RLD .

As such the service B may be performed locally with respect to the operating system . The operating system now provides information germane to the service request to the service B which generates the desired listing of lenses. The listing of lenses defines work product that is communicated to the client device as a service result .

The illustrative example described above is one of any number of scenarios wherein a run local daemon is resourced so as to spawn or perform a particular service not previously provided within the corresponding domain. As just described the first service assumed the role of requestor and the second service assumed the role of responder in regard to performing the desired service by way of the RLD . In another example such roles may be reversed or RLD support may be requested or provided by another service or entity remote to the computing device .

Initially a service A sends a request asking for RLD support to a service B . For instance a user of a client device has accessed the requestor seeking a table of merchandise pricing correlated to a geographic location a work product that the service B normally provides. Thus the request indicates that the requestor is seeking to perform the table generation function locally. The service B then parses the request and sends corresponding information to a run local daemon . The RLD is local to the responder and cooperates with the service B during normal operations.

Thereafter the RLD provides a resource profile and one or more resources to a run local daemon . The run local daemon then sends an acknowledgment indicating receipt of the resource profile and the resource s to the run local daemon . The RLD is local to the requestor and is configured to be called or invoked by the service A . The RLD issues a spawn so as to implement the one or more resources such as price calculation program code and so forth in accordance with information included in the resource profile .

The requestor is now effectively reconfigured and equipped to perform service B locally. The service A which may be or include an operating system e.g. may invoke the service B . A service request indicating the sought after merchandise pricing table is then sent to the service B . The corresponding table of merchandise pricing is generated by the service B and provided as a service result to the requesting client device .

In the foregoing illustration the responder provides one or more resources as required by the request . That is the responder is able to fully satisfy the request such that the service B is provided locally to the requestor . Other instances are contemplated in which one or more needed resources must be acquired from sources distinct from the responder that receives the request for RLD support. Such an instance is addressed in the next illustration.

The requestor and the responder are depicted as distinct computing devices such as web servers in the interest of clarity. However the requestor and the responder may be provided as respective domains within a single computing device . The maintenance server is a distinct device with respect to both the requestor and the responder .

In one implementation the maintenance server is a computing device or is analogous thereto having respective constituency and configuration to support operations of the requestor the responder or both. Such constituency of the maintenance server may include without limitation program code directed to performing various functions or services a module to install updated resources in the requestor or the responder and so forth.

A service A sends a request for RLD support to a service B . The request indicates that the requestor is seeking to perform a service B locally such as the decoding of sensitive customer related data. The service B then sends information germane to the request to the run local daemon . The RLD cooperates with the service B during data decoding operations.

Thereafter the RLD provides a resource profile to the run local daemon . The resource profile identifies one or more resources needed to perform the service B and their respective and cooperative operations. The resource profile may also include data or information used by the RLD to configure itself to perform the service B . It is noted that the RLD does not provide any of the actual resources in the present example. For instance the resources may include decoding keys or processes program code and so on.

Next the run local daemon generates a request specifying the sought after resources and provides the request to the maintenance server . The maintenance server responds by accessing the one or more resources and provides them to the RLD .

The RLD implements the one or more resources in accordance with information included within the resource profile . The RLD is now resourced and configured to perform the service B locally to the requestor . Thus the customer related data may now be decoded by the service B and the corresponding service result may be provided to a requesting client device or other entity.

Additionally one or more updated resources may be provided from time to time from the maintenance server to the run local daemon . In this way the service B may be kept augmented or modified as needed.

The I O interface s may couple to one or more I O devices . The I O devices may include input devices such as one or more of a keyboard mouse and so forth. The I O devices may also include output devices such as a display audio speakers haptic output devices and so forth. In some embodiments the I O devices may be physically incorporated with the client device or may be externally placed.

The client device may also include one or more communication interfaces . The communication interfaces are configured to provide communications between the client device and other client devices computing devices routers access points web servers and so forth. The communication interfaces may include wireless capabilities or devices configured to couple to one or more networks including PANs LANs WLANs WANs and so forth. The client device may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the client device .

As shown in the client device includes one or more memories . The memory comprises one or more computer readable storage media CRSM . The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the client device .

The memory may include at least one operating system OS module . The OS module is configured to manage hardware devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks daemons and so forth.

A user interface module may be configured to provide one or more application programming interfaces. The user interface module may also provide data to the client device that is configured to open or retrieve files enable the rendering of webpages or their contents or as needed for other operations such as hypertext markup language HTML files. The user interface module is configured to accept inputs and send outputs using the I O interfaces the communication interfaces or both.

A communication module is configured to support communication with the client device other devices or entities computing devices routers and so forth using the one or more networks . In some implementations the communication module may support encrypted communications. For example hypertext transport protocol secured HTTPS or transport layer security TLS may be supported.

The memory may also include one or more application modules . The application modules may be configured or modified and selectively provided to other computing devices to other client devices and so on. Thus various devices can be updated or enhanced as new application modules are generated existing application modules are amended or improved and so on. The application modules may respectively perform business tasks technical operations or other functions in accordance with corresponding program code i.e. software .

The memory may also include other modules respectively configured to perform other functions of the client device . For non limiting example the other modules may include one or more respective web browsers enabling access to or presentation of respective webpages provided by computing devices network search functions and so forth.

The memory may also include a datastore to store data and information. The datastore may use a flat file database linked list tree executable code or other data structure to store the information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including servers network attached storage devices and so forth.

As depicted the datastore may store one or more service requests as respectively sent from the client device to one or more computing devices . Such service requests may be used in auditing tasks performed by the user quality assurance of the results received and so on. The datastore may also store one or more service results . The stored service results may include any work product data information or file provided by the RLD in response to a corresponding service request . Thus stored service results are available for repeated or future use provision to other client devices and so forth.

Other data may also be stored in the datastore . For example the other data may include account information encryption keys access codes to respective computing devices mapping of the respective services provided by the computing devices and so forth.

The computing device may include one or more I O interface s to allow the processor s or other portions of the computing device to communicate with the user devices or other computing devices the maintenance server and so on. The I O interfaces may comprise I2C SPI USB RS 232 and so forth.

The I O interface s may couple to one or more I O devices . The I O devices may include one or more input devices such as a keyboard mouse and so forth. The I O devices may also include output devices such as one or more of a display audio speakers haptic output devices and so forth. In some embodiments the I O devices may be physically incorporated with the computing device or they may be externally placed.

The computing device may also include one or more communication interfaces . The communication interfaces are configured to provide communications between the computing device the client devices the maintenance server routers access points and so forth. The communication interfaces may include wireless functions devices configured to couple to one or more networks including PANs LANs WLANs WANs and so forth. The computing device may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the computing device .

The computing device includes one or more memories . The memory comprises one or more CRSM. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the computing device . The memory may include at least one operating system module . Respective OS modules are configured to manage hardware devices such as the I O interfaces the I O devices the communication interfaces and provide various services to applications or modules executing on the processors . In one implementation the OS module s include the operating system and the operating system .

Also stored in the memory may be one or more of the following modules. These modules may be executed as foreground applications background tasks and so forth. A user interface module may be configured to provide one or more application programming interfaces. The user interface module may also generate or provide one or more user input devices or user selection devices to a client device . Such user interfaces may be encoded as hypertext markup language HTML files extensible markup language XML files or in another suitable format or language. The user interface module is configured to accept inputs and send outputs using the I O interfaces the communication interfaces or both.

A communication module is configured to support communication with the client devices one or more other computing devices or entities and so forth using the one or more networks . In some implementations the communication module may support encrypted communications. For example hypertext transport protocol secured HTTPS or transport layer security TLS may be supported.

The memory may also include one or more service modules . The service module s may include or be configured and resourced to perform the service A or the service B or both. The service module s may also include resources or configuration to perform other services functions or operations as well.

The memory may also include the RLD and the RLD as respectively previously described. Thus the computing device includes the run local daemons and as associated with the service A and the service B respectively. The RLD and the RLD may be individually resourced and configured to perform different services or functions as needed.

Other modules may also be present. For example a service support module may request or access particular resources on behalf of the RLD or the RLD or both . Other modules or functionalities may also be implemented.

The memory may also include a datastore to store information. The datastore may use a flat file database linked list tree executable code or other data structure to store the information. In some implementations the datastore or a portion of the datastore may be distributed across one or more other devices including servers network attached storage devices and so forth.

The datastore may store one or more service requests as received from respective ones of the client devices . The datastore may also store one or more service results or analogous work product as generated or produced by the RLD or the RLD and provided to corresponding ones of the client devices .

The datastore may also store other data . For example the other data may include textual graphic or audio data to be provided a requesting client device one or more scripts to automate respective functions and so on. The other data may also include one or more data structures that may be queried modified amended and so forth. Such data structures may be present for example if the computing device is implemented as the maintenance server .

Block requests support to provide a particular service locally. For purposes of a present example the requestor receives a service request from the client device specifying the calculation of a table of sales tax values. Service A of the requestor is not presently configured to perform the requested calculation. The service A sends a support request to the service B of the responder . The request indicates the nature of the service to be performed.

Block provides a resource profile from a run local daemon of the responder to a run local daemon of the requestor . In the present example the RLD is prompted by the service B in regard to the sales tax calculations specified in the service request . The RLD responds by providing a resource profile to the run local daemon of the requestor . The resource profile may include a listing of required resources instructions regarding the operation or use of each resource or other data or information.

Block provides one or more resources from the run local daemon of the responder to the run local daemon of the requestor . In the present example the RLD also provides one or more respective resources to the RLD . Such resources may include a sales tax data structure an arithmetical module or executable program code or other things as required in accordance with the service request .

Block sends and acknowledgement from the requestor to the responder. In the present example the RLD sends an acknowledgement to the RLD indicating receipt of the resource profile and the one or more respective resources .

Block spawns resources in the requestor based on the response profile. In the present example the RLD spawns i.e. installs or configures the one or more respective resources . Such implementation is done according to usage or operations information provided in the resource profile . The service B is now resourced and configured to calculate sales tax values and generate corresponding results locally to the requestor .

Block invokes the specific service local to the requestor . In the present example the service A invokes the service B to generate the table of sales tax values in accordance with the service request . The service B operates such that the requested sales tax table is generated as a service result . The table of sales tax values may now be provided to the original requesting entity the client device .

Block requests support to provide a particular service locally. For purposes of a present example the requestor receives a service request from the client device specifying a database query. Service A of the requestor is not presently configured to perform the requested query and sends a corresponding request to the service B of the responder . The request indicates the nature of the service to be performed.

Block provides request information to a run local daemon of the responder. In the present example the service B of the responder provides information to the RLD describing the service request that is the database query that the requestor seeks to perform. The RLD parses the information and determines what resources are required and their respective operations accordingly.

Block provides a resource profile from a run local daemon of the responder to a run local daemon of the requestor. In the present example the RLD provides a resource profile to the RLD of the requestor . The resource profile may include a listing of one or more required resources instructions regarding the use of each resource or other data pertaining to performing the database query.

Block requests one or more resources from a maintenance server. In the present example the RLD request one or more resources from the maintenance server as identified in the resource profile . Thus the RLD seeks the needed resources from the maintenance server as these were not provided by the RLD .

Block provides one or more resources from the maintenance server to the run local daemon of the requestor. In the present example the maintenance server provides one more resources to the run local daemon . Such resources may include a database query template information such as field names or formatting information or other data as required in accordance with the service request .

Block implements the one or more resources in the run local daemon in accordance with the response profile. In the present example the RLD implements installs or configures itself using the one or more resources . Such implementation is done according to usage or operations information provided in the resource profile . The RLD is now resourced and configured to perform the database query as a service B .

Block invokes the run local daemon the requestor to perform the specific service. In the present example the service A invokes the RLD to perform the requested database query. RLD performs service B such that the database query is performed. In one implementation the database itself may be a resource of the maintenance server . The database may be a resource of another computing device coupled to one of the networks . The database query generates a service result which may now be provided to the original requesting client device .

Block provides resource updates from the maintenance server to the run local daemon of the requestor. In the present example the maintenance server provides update resources to the RLD from time to time in accordance with various changes or modifications that may be made to improve service performance and so on.

Those having ordinary skill in the art will readily recognize that certain components steps or operations illustrated in in the figures above can be eliminated taken in an alternate order or otherwise rearranged. Moreover the methods described above may be implemented as one or more software programs for a computer system and are encoded in a computer readable storage medium as instructions executable on one or more processors.

The computer readable storage medium CRSM can be any one of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium and so forth. Separate instances of these programs can be executed on or distributed across separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case and a variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations.

Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art and it is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

