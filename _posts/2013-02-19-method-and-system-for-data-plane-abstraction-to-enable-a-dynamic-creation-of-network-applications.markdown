---

title: Method and system for data plane abstraction to enable a dynamic creation of network applications
abstract: The method includes receiving, by a data plane definition language compiler, a first data plane definition describing customized functionality of a data plane of a first network application, and compiling the data plane definition to generate a first set of customized data processing modules and a program interface that allows a control plane of the network application to access the first set of customized data processing modules. The method also includes loading the first set of customized data processing modules into a data plane container, wherein the network application is executed via a network operating system, and wherein, upon execution of the network application the customized data processing module causes the data plane container of the network application to process packets differently than prior to loading the customized data processing module in the data plane container.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09395960&OS=09395960&RS=09395960
owner: PLUMGRID, INC.
number: 09395960
owner_city: Sunnyvale
owner_country: US
publication_date: 20130219
---
Since the inception of computer networks the size of networks has grown exponentially. Today any number of computing devices may be connected over a network and data and services provided by those devices may be accessed from any number of locations. With that growth the complexity of managing and troubleshooting networks has dramatically increased.

At the same time a new set of applications in the area of data centers and cloud computing are pushing the requirements of dynamic provisioning and dynamic instantiation of the network infrastructure. These requirements are rapidly expanding in other segments of the IT infrastructures where networking applies.

In traditional computer networks data paths are implemented by interconnecting switches routers and other network devices throughout the network. Traditional computer networks can be too rigid and complex for these new environment requirements. Network virtualization is a set of evolving concepts aiming at allowing network administrators to have control over traffic across the network without physically modifying network devices. Network virtualization is one of the use cases usually associated to software defined networking solutions.

In general in one aspect the invention relates to method for network application development. The method includes receiving by a data plane definition language compiler a first data plane definition describing customized functionality of a data plane of a first network application and compiling the data plane definition to generate a first set of customized data processing modules and a program interface that allows a control plane of the network application to access the first set of customized data processing modules. The method also includes loading the first set of customized data processing modules into a data plane container wherein the network application is executed via a network operating system and wherein upon execution of the network application the customized data processing module causes the data plane container of the network application to process packets differently than prior to loading the customized data processing module in the data plane container.

In general in one aspect the invention relates to a method of network application development. The method includes receiving by a control plane object model compiler an uncompiled object model of the control plane of a first network application and compiling the uncompiled object model to generate a compiled object model of the control plane of the network application and a programmatic interface for the network application. The method also includes loading the user interface into an interface gateway wherein upon execution of the first network application the interface gateway communicates with the compiled object model of the control plane using the programmatic interface and wherein the control plane of the network application communicates with a first set of customized data processing modules of a data plane of the first network application.

In general in one aspect the invention relates to a computer program product including computer readable code executable by a processor to receive by a data plane definition language compiler a first data plane definition describing customized functionality of a data plane of a first network application and compile the data plane definition to generate a first set of customized data processing modules and a program interface that allows a control plane of the network application to access the first set of customized data processing modules. The computer readable code is also executable by a computer processor to load the first set of customized data processing modules into a data plane container wherein the network application is executed via a network operating system and wherein upon execution of the network application the customized data processing module causes the data plane container of the network application to process packets differently than prior to loading the customized data processing module in the data plane container.

The above summary contains simplifications generalizations and omissions of detail and is not intended as a comprehensive description of the claimed subject matter but rather is intended to provide a brief overview of some of the functionality associated therewith. Other systems methods functionality features and advantages of the claimed subject matter will be or will become apparent to one with skill in the art upon examination of the following figures and detailed written description.

In the following detailed description of exemplary embodiments of the invention specific exemplary embodiments in which the invention may be practiced are described in sufficient detail to enable those skilled in the art to practice the invention. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present invention is defined by the appended claims and equivalents thereof.

The terminology used herein is intended to describe particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless otherwise indicated. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by executable computer program instructions or computer code . These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus implement the methods processes functions acts specified in the one or more blocks of the flowchart s and or block diagram s .

These computer program instructions may also be stored in a tangible computer readable storage device that can direct a computer to function in a particular manner such that the computer readable storage device is an article of manufacture or computer program product including instructions which implement the method process function act specified in the one or more blocks of the flowchart s and or block diagram s . The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process method such that the instructions which execute on the computer or other programmable apparatus implement the method process functions acts specified in one or more blocks of the flowchart s and or block diagram s .

It is understood that the use of specific component device and or parameter names such as those of the executing utility logic described herein are for example only and not meant to imply any limitations on the invention. The invention may thus be implemented with different nomenclature terminology utilized to describe the components devices or parameters herein without limitation. Each term utilized herein is to be given its broadest interpretation given the context in which that terms is utilized.

Turning to the figures depicts a network application architecture as exists in the prior art. Specifically depicts a current data flow for a network application architecture. As depicted includes a provisioning interface and a network application . A user such as a network application administrator can transmit commands to the network application via provisioning interface . The provisioning interface may include for example a graphical user interface GUI a command line interface or an application programming interface API .

Network application includes control plane and data plane . Control plane includes a southbound API . Control plane receives commands such as provisioning commands from a user and based on control plane logic internal to control plane control plane directs data plane on how to perform certain networking functions on network data packets in the data plane .

The communication between control plane and data plane is conducted through a set of APIs. Southbound API allows data to pass between the control plane and the data plane in order to provide instructions to the data plane . Specifically southbound API allows data to be transmitted from control plane .

In one or more embodiments the control plane of the network application includes an orchestration API a network operating system API and a southbound API . Each of orchestration API NOS API and southbound API is a programmatic interface that includes computer code executable by a computer processor to allow users or external modules to interoperate with the control plane . Specifically orchestration API allows a user or other management module to communicate with control plane . NOS API is a programmatic interface that includes computer code that allows the control plane to communicably connect to a network operating system . Southbound API is a programmatic interface that allows the control plane to communicate with the data plane in order to control the behavior of data plane .

In one or more embodiments. NOS includes an application services API and a data plane services API . Application services API is a programmatic interface that interacts with NOS API to allow NOS to communicate with control plane . In addition in one or more embodiments NOS Application services API receives instruction from an infrastructure administrator or other management module in the system. NOS data plane services API is a programmatic interface that allows NOS to communicate with data plane .

As depicted data plane includes NOS API and DP API . In one or more embodiments NOS API is a programmatic interface that allows NOS to communicate with data plane via NOS data plane services API . DP API is a programmatic interface that allows data pane to receive management instructions from control plane via southbound API .

Each of the control plane data plane and NOS may be managed by one or more human mechanical or computational administrators. As depicted network application admin manages the control plane while infrastructure admin manages the NOS . However those skilled in the art will appreciate that any of network application admin and infrastructure admin may be replaced by a single entity or one or more computing modules.

According to one or more embodiments the system depicted in allows for the instantiation of multiple concurrent Network Applications although for purposes of clarity depicts only a single instantiation of a Network Application. The communicable linkage between the southbound API of the control plane and the data plane API allows communication from the control plane to bypass to NOS and communicate directly with the data plane .

As depicted in an SDK may be utilized to generate a set of new network applications not previously envisioned when the data plane container or NOS were created. SDK includes computer readable code executable by a computer processor to provide a development tool that allows the development of a particular network application including generating customized network environment. SDK may be a set of tools compilers workflows and programmatic interface such as an application program interface API or a more complete development environment to allow for generation of network applications. The flow of data is enumerated within . However the order each data flow is marked does not necessarily indicate the order in which data flows throughout the system.

At SDK is utilized in generating data plane DP definition and control plane CP definition for a particular network application. Although depicts DP definition and CP definition being handled by a single instance of SDK DP definition and CP definition may be generated on separate instances of SDK and even by separate parties on separate computing devices across a distributed computing environment or network. According to one or more embodiments DP definition and CP definition are received in a domain specific language.

According to one or more embodiments DP definition describes a customized functionality of a data plane of a network application. In one or embodiments SDK processes the DP definition to generate DP API and customized data processing module for the network application. At SDK deploys DP API into data plane and at SDK deploys the customized data plane module into the data plane .

In one or more embodiments customized data processing module causes the data plane to process packets differently than it would prior to loading customized data processing module . In one or more embodiments customized data processing modules are configured to perform functions configurable by a user. Those functions may include for example parse lookup update and modify. According to one or more embodiments the function of parse determines a structure of an incoming block of data into the data plane. According to one or more embodiments the function of lookup identifies a set of relevant rules for a specific packet from a set of tables. According to one or more embodiments the function of update includes modifying an internal state of the data processing module based on the combination of rules extracted from the lookup state and the incoming packet. According to one or more embodiments the function of modify includes a set of rewrite capabilities to generate new headers of blocks of data that will be sent out of the data processing module.

According to one or more embodiments CP definition is uncompiled computer code for an object model of the control plane for the particular network application. In one or more embodiments SDK processes the CP definition to generate a compiled control plane object model and southbound API as well as an orchestration API . At SDK deploys the orchestration API into control plane . At SDK deploys the compiled CP object model into control plane . At SDK deploys the southbound API into control plane .

In one or more embodiments the various components of the control plane and data plane of a particular network application need to be linked. The link may be generated by SDK as part of processing either DP definition or CP definition . Alternatively the link between the various components may be generated separately from the CP and DP components and may be generated by a third party that did not generate either the CP or DP components. As depicted the linked code is deployed at and allows the southbound API and DP API to become communicably connected.

In one or more embodiments the linkage between the control plane and the data plane prevents the control plane of a particular network application to interact with the data plane of another network application. Thus the control plane of a first network application and the control plane of a second network application may concurrently communicate with a single data plane container to access their respective customized data processing modules. In one or more embodiments the separation between each network application s control plane and corresponding data plane is enforced by the instructions that NOS applies to data plane .

At block the DPDL compiler obtains header files corresponding to the configuration of the data plane definition. In one or more embodiments header files are stored in a header file store that may be a database or any other data structure configured to store header files. In one or more embodiments the DPDL compiler references the header file store to determine how to compile the data plane definition. At block the DPDL compiler generates a set of customized data processing modules and at block the DPDL compiler generates an API to allow a control plane of the network application to access the set of customized data processing modules generated at block .

The method continues at block and the DPDL compiler with the help of the NOS loads the generated set of customized data processing modules into a data plane container. At block the DPDL compiler loads the generated API into the application store. The method ends at block .

The method begins at block . At block a control plane object model compiler CPOM compiler receives an uncompiled object model of a control plane of a network application. In one or more embodiments the object model is received in a domain specific language.

At block the CPOM compiler compiles the uncompiled object model to generate a compiled object model. At block and the CPOM compiler compiles the uncompiled object model to generate a program interface that allows a user or module to communicate with the control plane of the network application.

The method continues at block and the CPOM compiler loads the object model into an application server . In one or more embodiments the CPOM compiler may load the object model into the same or similar location as the location of a corresponding API of the network application as described with respect to . The method continues at block and the CPOM compiler loads the program interface into an interface gateway with the help of the NOS. The method ends at block .

At block SDK generates control plane code to trigger a call of defined API s in the data plane header files in response to a change of state in the object model.

At block SDK loads libraries into the NOS framework to initialize the network application. At block SDK compiles the generated control plane code and at block SDK deploys the network application. The method ends at block .

In each of the flow charts described above one or more of the methods may be embodied in a computer readable medium containing computer readable code such that a series of steps are performed when the computer readable code is executed on a computing device. In some implementations certain steps of the methods are combined performed simultaneously or in a different order or perhaps omitted without deviating from the spirit and scope of the invention. Thus while the method steps are described and illustrated in a particular sequence use of a specific sequence of steps is not meant to imply any limitations on the invention. Changes may be made with regards to the sequence of steps without departing from the spirit or scope of the present invention. Use of a particular sequence is therefore not to be taken in a limiting sense and the scope of the present invention is defined only by the appended claims.

The diagram flow begins with programming module transmitting a data plane definition to a DPDL compiler that according to one or more embodiments is located within SDK . In one or more embodiments programming module may be a functional computing component generating the DP definition or may be a human user providing the DP definition .

Upon receiving data plane definition DPDL compiler accesses header store to identify the appropriate header file. In one or more embodiments DPDL compiler assesses the configuration of the DP definition to determine the appropriate header file.

In response to compiling the data plane definition DPDL compiler generates a data plane API and one or more customized data processing modules . In one or more embodiments the generated DP API allows communication between the data plane and the control plane for the network application. In one or more embodiment the customized data processing module causes the data plane container of the network application to process packets differently than prior to loading the customized data processing module in the data plane container . The data processing module may be composed by a single instance or multiple instances. Multiple instances of the data processing module may be presented as a single instance through a data plane abstraction or as multiple instances at the request of the Network Application developer.

The flow diagram begins with programming module transmitting the object model code to a CPOM compiler that according to one or more embodiments of the invention is located within SDK .

Upon receiving object module code CPOM compiler generates a programmatic interface and loads the programmatic interface into API gateway . According to one or more embodiments programmatic interface allows a user or functional module to communicate with the control plane of the network application. CPOM compiler also generates a compiled object model and loads the compiled object model into application store .

Data required to generate the network application comes from at least three sources including a software development kit SDK a header store and an application developer . SDK includes computer readable code executable by a computer processor to provide a development tool that allows the development of a particular network application including generating customized network environment. SDK may be a set of tools compilers workflows and programmatic interface such as an application program interface API or a more complete development environment to allow for generation of network applications. SDK is utilized by a user to generate control plane object model and data plane code . In one or more embodiments control plane object model . In one or more embodiments some or all of the code generated by SDK may be received or generated utilizing input received by Application Developer .

Header store includes various headers that indicate how a particular configuration of computer code should be handled by the compiler and provides the proper NOS API . In one or more embodiments SDK accesses header store to determine a particular configuration of a control plane or data plane definition in order to generate NOS API .

The final code received by compiler in is provided by an App Developer . In one or more embodiments App Developer provides control plane code .

Upon receiving the control plane object model the data plane code the NOS API and the control plane code compiler generates network application binary code . Network application binary code may then be deployed.

DPS includes numerous components logically connected by Interconnect . Specifically depicts DPS including Memory central processing unit CPU . also interchangeably referred to as a processor Storage Input Output I O controller and network interface card NIC . In addition. depicts that DPS may be connected via NIC to Network Storage A N and a second DPS across Network .

Those skilled in the art will appreciate that CPU can also be any kind of hardware processor. I O controller allows a user to interface with DPS . As depicted I O controller provides an interface for such devices as Display Device Keyboard and Mouse . According to one or more embodiments Display Device may include output means such as a liquid crystal display LCD a plasma display a cathode ray tube CRT monitor or any other kind of display device.

Memory may be random access memory RAM cache memory flash memory or any other kind of storage structure that is configured to store computer instructions code executable by CPU and or data utilized during such execution. As depicted Memory includes Operating System . Operating System may be any platform that manages the execution of computer code and manages hardware resources.

Memory also includes a plurality of functional modules such as application development module DPDL compiler and CPOM compiler . It is appreciated that one or more of these modules can be distributed across network .

As depicted DPS also includes Storage . Storage may be any kind of computer storage device such as a hard disk an optical drive such as a compact disk drive or digital video disk DVD drive and a flash memory drive. Storage includes predefined header files and workflow data store .

Those skilled in the art will appreciate that the software aspects of an illustrative embodiment of the present invention are capable of being distributed as a computer program product in a variety of forms and that an illustrative embodiment of the present invention applies equally regardless of the particular type of computer readable storage device used to actually store the software aspects of the invention.

While the invention has been described with reference to exemplary embodiments it will be understood by those skilled in the art that various changes may be made and equivalents may be substituted for elements thereof without departing from the scope of the invention. In addition many modifications may be made to adapt a particular system device or component thereof to the teachings of the invention without departing from the essential scope thereof. Therefore it is intended that the invention not be limited to the particular embodiments disclosed for carrying out this invention but that the invention will include all embodiments falling within the scope of the appended claims. Moreover the use of the terms first second etc. do not denote any order or importance but rather the terms first second etc. are used to distinguish one element from another.

