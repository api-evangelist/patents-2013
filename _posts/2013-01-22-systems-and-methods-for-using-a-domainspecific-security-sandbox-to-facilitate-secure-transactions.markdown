---

title: Systems and methods for using a domain-specific security sandbox to facilitate secure transactions
abstract: Computer systems, methods, and computer readable media for facilitating a secure transaction are provided in which a client application is executed on a client computer. The client application initiates a request to a first domain comprising (i) a credential for the client application, (ii) a transaction identifier that uniquely identifies the request, and (iii) optionally, an identification of a user of the client application. Responsive to this request, the client receives a validated transaction module from the first domain. The client application loads the validated transaction module into a separate domain security sandbox that is segregated from memory space in which the client application is run. The validated transaction module conducts a validated transaction between the second domain and the validated transaction module. Separately, through the client application, a determination is made as to whether the transaction is complete by querying the first domain.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09160717&OS=09160717&RS=09160717
owner: GOOGLE INC.
number: 09160717
owner_city: Mountain View
owner_country: US
publication_date: 20130122
---
This patent application is a continuation of and claims priority to U.S. patent application Ser. No. 12 788 173 filed May. 26 2010 now U.S. Pat. No. 8 364 959 issued Jan. 29 2013 and entitled Systems and Methods for Using a Domain Specific Security Sandbox to Facilitate Secure Transactions. The entire contents of the above identified priority application are hereby fully incorporated herein by reference.

The present application relates generally to systems and methods for using a domain specific security sandbox to facilitate secure transactions.

The number of potentially insecure applications running on client computers that nevertheless require secure real time transaction services continues to grow. One non limiting example of such applications are FLASH based gaming applications that require replenishment of virtual currency in order to buy in game upgrades like level unlocks virtual equipment virtual special weapons and cheats directly to gamers. Securing such real time transactions is needed in the art to protect users and application developers from fraudulent acquisition of account information identity theft and other forms of fraud.

One known method for securing such transactions is the concept of using a shared secret secret key cryptography . Secret key cryptography involves the use of a single key. Given a message and the key encryption produces unintelligible data which requires the key to decrypt. See for example Section 2.4 of Kaufman Network Security Prentice Hall Inc. Upper Saddle River N.J. which is hereby incorporated by reference. However the shared secret method does not work in instances where one of the applications is not secure. For example many popular programming applications are executed by FLASH players and are not secure. Typically when a shared secret algorithm is used there is a remote web server calling a local web server. The secret is safe on the remote web server and the local web server and is not communicated between the two servers. This fails when the application is written in FLASH or other programs that are downloaded to a client computer and run for example within the client s browser. In the case of FLASH when a user requests a FLASH application a SWF file that contains bytecode that is interpreted by a FLASH player is down loaded to the client computer and run interpreted by a FLASH player within the client s browser. The bytecode in the SWF file can be inspected at the client computer to determine the secret. Thus secrets cannot be contained within a FLASH SWF file.

Given the above background what is needed in the art are improved systems and methods for authenticating electronic transactions originated from applications that may not be secure.

The present disclosure addresses the needs in the art by making novel use of server cross domain policies as well as domain specific security sandboxes. There are two embodiments disclosed. In the first embodiment a client application makes a request for a transaction module from a first domain that has an unrestrictive cross domain policy. Once the client application receives the transaction module it is executed in its own domain specific security sandbox such that the source URL of the transaction module the URL of the first domain is preserved. The transaction module completes the transaction by interacting with a second domain that has a cross domain policy that restricts interaction to those programs and processes whose source URL is the first domain.

The second embodiment takes the process a step further. In the second embodiment responsive to a need to make an in application secure transaction a client application makes a first request associated with an in application secure transaction. The first request is sent over the Internet or a computer network to a first domain that has an unrestrictive cross domain policy. Responsive to this request the first domain sends the client application a request module. Once the client application receives the request module it is executed in its own domain specific security sandbox first sandbox such that the source URL of the request module the URL of the first domain is preserved. The request module operating in the first sandbox makes a request for a transaction module from a second domain that has a cross domain policy that restricts interaction to those programs and processes whose source URL is the first domain. The second domain sends the client application the transaction module. Once the client application receives the transaction module the transaction module is executed in its own domain specific security sandbox second sandbox such that the source URL of the transaction module the URL of the second domain is preserved. The transaction module completes the transaction by interacting with a third domain that has a cross domain policy that restricts interaction to those programs and processes whose source URL is the second domain.

By exploiting cross domain policies and the natural ability to run programs in their own domain specific security sandboxes without the power for calling applications to introspect the present disclosure provides highly secure systems methods and computer readable media for facilitating a secure in application transaction.

First Embodiment from a Client Perspective. One implementation of the first embodiment of the present disclosure from a client perspective comprises a computer system for facilitating a secure transaction. The computer system comprises one or more processing units and a memory coupled to at least one of the one or more processing units. The memory stores instructions that are executed by at least one of the one or more processing units. For purposes of illustration this computer system may be regarded as a client computer in which a client application is executed directly from a local data store associated with the computer system or that is executed from a remote client application server. In the embodiment a request associated with a secure in application transaction is generated through the client application at a time when the client application is executing. The request comprises i a credential for the client application ii a transaction identifier that uniquely identifies the request and iii optionally an identification of a user of the client application. The request for the secure in application transaction is submitted over the Internet or a computer network to a first domain that has an unrestrictive first cross domain policy. Responsive to this submission a validated transaction module is received from the first domain. Accordingly the source URL of the transaction module is identified as the first domain.

The client application executes the validated transaction module such that the validated transaction module is loaded into a separate domain specific security sandbox within the memory of the computer system. The separate domain specific security sandbox is segregated from memory space in the memory in which the client application is run. The separate domain specific security sandbox is associated with and limited to programs that identify their source URL as being the first domain. The validated transaction module is executed such that the identity of the source URL of the validated transaction module is not altered or destroyed. Moreover the validated transaction module does not grant the client application the power to introspect the validated transaction module.

The validated transaction module while it is executing in the separate domain specific security sandbox issues a transaction call to a second domain. The second domain has a second cross domain policy that limits interaction between the second domain and programs external to the second domain to those external programs whose source URL is the first domain. A validated transaction is conducted between the second domain and the validated transaction module.

The instructions further include instructions that are run concurrently with any or all of the above identified processes or after all of the above identified processes have been run. Such instructions include instructions for determining through the client application by querying the first domain whether the transaction was completed thereby facilitating a secure transaction.

In some instances the computer system further comprises a display having a screen real estate. In some such instances the client application is manifested on a portion of the screen real estate and the validated transaction module is manifested on a subset of the portion of the screen real estate. This advantageously gives the user of the client application the impression that the in application transaction is a seamless transaction that is being run from within the client application.

In some instances the secure in application transaction is an in game transaction to buy an in game upgrade using an account associated with the identity of the user. In some instances the in game upgrade is a level unlock a purchase of virtual equipment a purchase of a virtual special weapon a purchase of a cheat or a purchase of virtual currency. In some instances the client application is a social networking application a financial services application an accounting application or a tax preparation application.

In some instances the first domain and the second domain are hosted by the same server that is accessible to the computer system over the Internet or the computer network. In other instances the first domain and the second domain are each hosted by a separate server and are each accessible to the computer system over the Internet or the computer network.

In some instances the client application is a FLASH application and the validated transaction module is a FLASH SWF application that is loaded by the client application.

First Embodiment from a Server Perspective. The present disclosure also contemplates the above identified first embodiment from the perspective of one or more servers that service a client. For instance one such implementation of this server perspective provides a computer system comprising one or more processing units and a memory coupled to at least one of the one or more processing units. The memory stores instructions that are executed by at least one of the one or more processing units. The memory comprises a first domain characterized by a first cross domain policy that is unrestrictive a second domain characterized by a second cross domain policy that limits interaction between the second domain and programs external to the second domain to those external programs whose source URL is the first domain a database of valid application credentials a transaction database that is readable from the first domain and the second domain and an unbranded transaction module.

In some instances the computer system comprises a first computer and a second computer and the above identified memory comprises memory resident in the first computer and memory resident in the second computer. In such instances the first cross domain policy the database of valid application credentials and the unbranded transaction module may be resident in the memory of the first computer while the second cross domain policy may be resident in the memory of the second computer. Further in such embodiments access to the transaction database is possible from the first computer and the second computer. In some alternative instances the computer system is a single computer.

The memory comprises instructions for receiving at the first domain over the Internet or a computer network a request from a client application running on a client computer. The request is associated with a secure in application transaction. The request comprises i a credential for the client application ii an identification of a user of the client application ii a transaction identifier that uniquely identifies the request and iii optionally an identification of a user of the client application. The memory comprises instructions for verifying the credential for the client application against the database of valid application credentials. The memory further comprises instructions for keying the request into the transaction database. The memory further comprises instructions for dynamically generating a validated transaction module. In one embodiment one or more credentials are injected into the unbranded transaction module. Examples of such injection security methods are found in for example U.S. patent application Ser. No. 12 607 005 entitled Systems and Methods for Authenticating an Electronic Transaction filed Oct. 27 2009 which is hereby incorporated by reference herein in its entirety. In other embodiments disclosed herein other methods are used to obtain parameters from the domain that provides the transaction module and these parameters serve to validate the transaction module.

The memory further comprises instructions for providing from the first domain the validated transaction module to the client computer. The memory further comprises instructions for receiving at the second domain a transaction call that originates from the validated transaction module executing on the client computer where the source URL of the validated transaction module complies with the second cross domain policy. The memory further comprises instructions for conducting a validated transaction between the second domain and the validated transaction module running on the client computer. The memory further comprises instructions for storing at the second domain a record of the completed transaction in the transaction database.

Concurrent to some or all of the above mentioned processes or after all of the above mentioned processes are completed additional processes are run. These processes include receiving at the first domain a query from the client application running on the client computer as to whether the transaction has been completed. The query includes the transaction identifier that uniquely identifies the request. These processes further include determining at the first domain by looking up the transaction identifier in the transaction database whether the transaction has been completed. These processes further include notifying responsive to the receiving and the determining the client application running on the client computer of the status of the transaction.

In embodiments in which the computer system is divided into a first server and second server the above identified processes that are performed at or by the first domain are completed by the first server while the above identified processes that are performed at or by the second domain are completed by the second server. One of skill in the art will appreciate that the first domain may comprise a first plurality of computers and the second domain may comprises a second plurality of computers. For instance one server may be a mirror site to another server within a domain. In another example one server may be a backup server to another server within a domain. In still another example one domain may comprise a plurality of servers that handle a common load through conventional load balancing techniques. Those of skill in the art will appreciate that the present disclosure fully contemplates all of these different scenarios.

Second Embodiment from a Client Perspective. One implementation of the second embodiment of the present disclosure from a client perspective comprises a computer system comprising one or more processing units and a memory coupled to at least one of the one or more processing units. The memory stores instructions that are executed by at least one of the one or more processing units. The instructions include instructions for executing a client application where the client application is executed directly from a local data store or is executed from a remote client application server. The instructions include instructions for generating through the client application at a time when the client application is executing a first request associated with a secure in application transaction. The instructions include instructions for submitting the first request for the secure in application transaction over the Internet or a computer network to a first domain that has an unrestrictive first cross domain policy. The instructions further include instructions for receiving responsive to the submitting a request module where the source URL of the request module is identified as the first domain.

The instructions further include instructions for causing the client application to execute the request module such that the request module is loaded into a first domain specific security sandbox within the memory. The first domain specific security sandbox is segregated from memory space in the memory in which the client application is run. The first domain specific security sandbox is associated with and limited to programs that identify their source URL as being the first domain. The request module is executed such that the identity of the source URL of the request module is not altered or destroyed. The request module does not grant the client application the power to introspect the request module.

The instructions include instructions for generating through the request module at a time when the request application is executing a second request associated with the secure in application transaction. The second request comprises i a credential for the client application ii a transaction identifier that uniquely identifies the second request and iii optionally an identification of a user of the client application. The instructions further include instructions for submitting the second request for the secure in application transaction over the Internet or computer network to a second domain that has a second cross domain policy that limits interaction between the second domain and programs external to the second domain to those external programs whose source URL is the first domain. The instructions further include instructions for receiving responsive to the submitting a transaction module from the second domain in which the source URL of the transaction module is identified as the second domain 

The instructions further include instructions for causing the client application to execute the transaction module such that the transaction module is loaded into a second domain specific security sandbox within said memory. The second domain specific security sandbox is segregated from memory space in the memory in which the client application is run the second domain specific security sandbox is associated with and limited to programs that identify their source URL as being the second domain. The transaction module is executed by the causing such that the identity of the source URL of the transaction module is not altered or destroyed. The transaction module does not grant the client application the power to introspect the validated transaction module 

The instructions further include instructions for issuing from the transaction module while it is executing in the second domain specific security sandbox a transaction call to a third domain. The third domain has a cross domain policy that limits interaction between the third domain and programs external to the third domain to those external programs whose source URL is the second domain. The instructions include instructions for conducting a validated transaction between the third domain and the transaction module.

The instructions further include instructions that are run concurrently with any or all of the above identified processes or after all of the above identified processes have been run. Such instructions include instructions for determining through the client application by querying the first domain whether the transaction was completed thereby facilitating a secure transaction.

In some instances the computer system further comprises a display having a screen real estate where upon execution of the client application the client application is manifested on a portion of the screen real estate. In such instances the validated transaction module is manifested on a subset of the portion of the screen real estate.

In some instances the secure in application transaction is an in game transaction to buy an in game upgrade using an account associated with the identity of the user. In some instances the in game upgrade is a level unlock a purchase of virtual equipment a purchase of a virtual special weapon a purchase of a cheat or a purchase of virtual currency. In some instances the client application is a social networking application a financial services application an accounting application or a tax preparation application.

In some instances the first second and third domain are each hosted by the same server that is accessible to the computer system over the Internet or the computer network. In some instances the first second and third domain are each hosted by a separate server and are each accessible to the computer system over the Internet or the computer network. In some instances the client application is a FLASH application and the validated transaction module is a FLASH SWF application that is loaded by the client application.

Second Embodiment from a Server Perspective. The present disclosure also contemplates the above identified second embodiment from the perspective of one or more servers that service a client. For instance one such implementation of this server perspective provides a computer system for facilitating a secure transaction. The computer system comprises one or more processing units and a memory coupled to at least one of the one or more processing units. The memory stores instructions that are executed by at least one of the one or more processing units.

The memory comprises a first domain characterized by a first cross domain policy that is unrestrictive a second domain characterized by a second cross domain policy that limits interaction between the second domain and programs external to the second domain to those external programs whose source URL is the first domain and a third domain characterized by a third cross domain policy that limits interaction between the third domain and programs external to the third domain to those external programs whose source URL is the second domain. The memory further comprises a database of valid application credentials a transaction database that is readable from the first domain second and third domain an unbranded transaction module and a request module.

In some instances the computer system comprises a first second and third computer and the above identified memory comprises memory resident in the first computer memory resident in the second computer and memory resident in the third computer. In such instances the first cross domain policy and the request module may be resident in the memory of the first computer. The second cross domain policy the database of valid application credentials and the unbranded transaction module may be resident in the memory of the second computer. The third cross domain policy may be resident in the memory of the second computer. Further in such embodiments access to the transaction database is possible from the first computer the second computer and the third computer. In some alternative instances the computer system is a single computer.

The memory comprises instructions for receiving at the first domain over the Internet or a computer network a first request from a client application running on a client computer where the first request is associated with a secure in application transaction. The memory further comprises instructions for providing from the first domain the request module to the client computer. The memory comprises instructions for receiving at the second domain over the Internet or the computer network a second request from the request module running on the client computer where the second request is associated with the secure in application transaction and where the second request comprises i a credential for the client application ii a transaction identifier that uniquely identifies the request and iii optionally an identification of a user of the client application. In such instances the source URL of the request module complies with the second cross domain policy.

The memory further comprises instructions for verifying the credential for the client application against the database of valid application credentials. The memory further comprises instructions for keying the second request into the transaction database. The memory further comprises instructions for dynamically generating a validated transaction module. For instance in some embodiments the validated transaction is generated by injecting one or more credentials into the unbranded transaction module. Examples of such injection security methods are found in for example U.S. patent application Ser. No. 12 607 005 entitled Systems and Methods for Authenticating an Electronic Transaction filed Oct. 27 2009 which is hereby incorporated by reference herein in its entirety. In other embodiments disclosed herein other methods are used to obtain parameters from the domain that provides the transaction module and these parameters serve to validate the transaction module. The memory further comprises instructions for providing from the second domain the validated transaction module to the client computer. The memory further comprises instructions for receiving at the third domain a transaction call that originates from the validated transaction module executing on the client computer where the source URL of the validated transaction module complies with the third cross domain policy. The memory further comprises instructions for conducting a validated transaction between the third domain and the validated transaction module running on the client computer. The memory further comprises instructions for storing at the third domain a record of the completed transaction in the transaction database.

Concurrent to some or all of the above mentioned processes or after all of the above mentioned processes are completed additional processes are run. These processes include receiving at the first domain a query from the client application running on the client computer as to whether the transaction has been completed. The query includes the transaction identifier that uniquely identifies the request. These processes further include determining at the first domain by looking up the transaction identifier in the transaction database whether the transaction has been completed. These processes further include notifying responsive to the receiving and the determining the client application running on the client computer of the status of the transaction.

In some instances the secure in application transaction is an in game transaction to buy an in game upgrade using an account associated with the identity of the user. In some instances the in game upgrade is a level unlock a purchase of virtual equipment a purchase of a virtual special weapon a purchase of a cheat or a purchase of virtual currency. In some instances the client application is a social networking application a financial services application an accounting application or a tax preparation application.

In some instances the first second and third domain are hosted by the same server that is accessible to the client computer over the Internet or the computer network.

In some instances the first domain is hosted by a first server the second domain is hosted by a second server and the third domain is hosted by a third server. The first second and third server are each accessible to the client computer over the Internet or the computer network. In some such instances the above identified memory comprises a first memory resident in the first server a second memory resident in the second server and a third memory resident in the third server. In some such instances the first cross domain policy and the request module are resident in the first memory of the first server. In some such instances the second cross domain policy the database of valid application credentials and the unbranded transaction module are resident in the second memory of the second server. In some such instances the third cross domain policy is resident in the memory of the third server.

In some embodiments the client application is a FLASH application and wherein the validated transaction module is a FLASH SWF application.

In embodiments in which the computer system is divided into a first second and third server the above identified processes that are performed at or by the first domain are completed by the first server the above identified processes that are performed at or by the second domain are completed by the second server and the above identified processes that are performed at or by the third domain are completed by the third server. One of skill in the art will appreciate that the first domain may comprise a first plurality of computers the second domain may comprises a second plurality of computers and the third domain may comprises a third plurality of computers. For instance one server may be a mirror site to another server within a domain. In another example one server may be a backup server to another server within a domain. In still another example one domain may comprise a plurality of servers that handle a common load through conventional load balancing techniques. Those of skill in the art will appreciate that the present disclosure fully contemplates all of these different scenarios.

The present disclosure details novel advances over known systems and methods for authenticating an electronic transaction that is communicated by application that is potentially not secure. The present disclosure makes use of server cross domain policies as well as domain specific security sandboxes. There are two embodiments disclosed. In the first embodiment illustrated in a client application makes a request for a transaction module from a first domain that has an unrestrictive cross domain policy . Once the client application receives the transaction module it is executed in its own domain specific security sandbox such that the source URL of the transaction module the URL of the first domain is preserved. The transaction module completes the transaction by interacting with a second domain that has a cross domain policy that restricts interaction to those programs and processes whose source URL is the first domain .

The second embodiment illustrated in takes the process a step further. In the second embodiment responsive to a need to make an in application secure transaction a client application B makes a first request that is associated with an in application secure transaction. The first request is sent over the Internet or a computer network to a first domain that has an unrestrictive cross domain policy . Responsive to this request the first domain sends the client application B a request module . Once the client application B receives the request module the request module is executed in its own domain specific security sandbox first sandbox such that the source URL of the request module the URL of the first domain is preserved. The request module operating in the first sandbox makes a request for a transaction module from a second domain B that has a cross domain policy B that restricts interaction to those programs and processes whose source URL is the first domain .

In some embodiments upon receipt of the request for the transaction module from the client application B the second domain B injects security information into an unbranded version of the transaction module thereby forming secure transaction module and sends the client application B the secure transaction module . Once the client application B receives the secure transaction module the transaction module is executed in its own domain specific security sandbox second sandbox such that the source URL of the secure transaction module the URL of the second domain is preserved. The transaction module completes the transaction by interacting with a third domain that has a cross domain policy that restricts interaction to those programs and processes whose source URL is the second domain .

In some embodiments the second domain B provides an unbranded version of transaction module without modifying the content of the transaction module . In other words in some embodiments credentials are not necessarily injected into an unbranded version of the transaction module to thereby form secure transaction module . In such embodiments once the request module receives the unbranded transaction module it is able to validate the transaction module with parameters provided by the second domain B. In this way the request module is able to validate the transaction module thereby allowing the transaction module to be deemed transaction module without injecting parameters into transaction module . Then the transaction module is executed in its own domain specific security sandbox second sandbox such that the source URL of the secure transaction module the URL of the second domain B is preserved. The transaction module completes the transaction by interacting with a third domain that has a cross domain policy that restricts interaction to those programs and processes whose source URL is the second domain B.

By exploiting cross domain policies and the natural ability to run programs in their own domain specific security sandboxes without the power for calling applications to introspect the present disclosure provides highly secure systems methods and computer readable media for facilitating a secure in application transaction.

Now that an overview of the novel systems and methods for conducting secure in application transactions have been disclosed a more detailed description of a system in accordance with the first embodiment of the present disclosure is described in conjunction with . As such illustrates the topology of an environment in accordance with the present disclosure.

In the topology there is a secure interface server a client device and a transaction server . Of course other topologies are possible for instance the secure interface server can in fact comprise several servers. Moreover typically there are hundreds thousands hundreds of thousands of client devices or more. The exemplary topology shown in merely serves to describe the features of the first embodiment of the present disclosure in a manner that will be readily understood to one of skill in the art.

The secure interface server will typically have one or more processing units CPU s a network or other communications interface a memory one or more magnetic disk storage and or persistent devices optionally accessed by one or more controllers one or more communication busses for interconnecting the aforementioned components and a power supply for powering the aforementioned components. Data in memory can be seamlessly shared with non volatile memory using known computing techniques such as caching Memory and or memory can include mass storage that is remotely located with respect to the central processing unit s . In other words some data stored in memory and or memory may in fact be hosted on computers that are external to the secure interface server but that can be electronically accessed by the secure interface server over an Internet intranet or other form of network or electronic cable illustrated as element in using network interface .

The secure interface server is connected via Internet network to one or more client devices . illustrates the connection to only one such the client device . It is possible for the client device to be a personal computer e.g. desktop or laptop computer or any form of mobile computing device e.g. an I phone Blackberry and the like .

The transaction server will typically have one or more processing units CPU s a network or other communications interface a memory one or more magnetic disk storage and or nonvolatile devices optionally accessed by one or more optional controllers one or more communication busses for interconnecting the aforementioned components and a power supply for powering the aforementioned components. Data in memory can be seamlessly shared with non volatile memory using known computing techniques such as caching Memory and or memory can include mass storage that is remotely located with respect to the central processing unit s . In other words some data stored in memory and or memory may in fact be hosted on computers that are external to the transaction server but that can be electronically accessed by the transaction server over an Internet intranet or other form of network or electronic cable illustrated as element in using network interface .

Referring to an exemplary method in accordance with a first embodiment of the present disclosure is described. The method details the steps taken by a secure interface server a client device and a transaction server to interactively service a transaction in accordance with the present disclosure.

Step . In step a client device runs a client application from a local data store e.g. memory or memory of or obtains and runs the client application from a remote application server not shown over the Internet or computer network. In some instances the client application is a social networking application e.g. FACEBOOK MYSPACE a financial services application an accounting application or a tax preparation application.

Step . At some point while the client application is running on the client device the client application invokes request module to make a request for a secure in application transaction. In some instances the secure in application transaction is an in game transaction to buy an in game upgrade using an account associated with the identity of a user of the client application. Examples of in game upgrades include but are not limited to a level unlock a purchase of virtual equipment a purchase of a virtual special weapon a purchase of a cheat or a purchase of virtual currency.

Typically the secure in application request includes an application credential information identifying a client application user and a unique transaction identifier. The application credential is a credential associated with the client application that identifies the application developer. For instance in some embodiments the client application is a game application and the application credential identifies the game application developer. The application credential can be used to determine who to credit an in application transaction. For example if the in application transaction involves payment of funds by a user of the client application the application credential is used to identify who is to be credited these funds. In general the application credential is used to identify a first party to the in application transaction. Similarly information identifying the client application user can be used to determine the second party to the in application transaction. For example typically the second party is the user of the client application who wishes to perform a secure in application transaction mandated by the client application in order to further a goal e.g. an additional game level more user features etc. that is made possible if the in application transaction is completed. The unique transaction identifier is used to track the status of the in application transaction. In typical embodiments the format of the application credential information identifying a client application user and a unique transaction identifier is predetermined in accordance with the requirements of the secure interface server and or the transaction server . For instance the application credential may be a serial number provided to the application developer for use in all in application transaction. Furthermore the information identifying a client application user may be registration information uniquely associated with the user that was created when the user created an account with the application developer and or when the user created an account with the secure interface server or the transaction server and or when the application developer registered the user with the secure interface server or the transaction server . Regardless of implementation the information identifying a client application user uniquely identifies a user to the secure interface server and or the transaction server . Similarly in preferred embodiments the unique transaction identifier uniquely identifies a single in application transaction conducted by a user of the client application .

Thus in summary upon completion of step there is generated through the client application and the associated request module at a time when the client application is executing on the client device a request associated with a secure in application transaction where the request comprises i a credential for the client application ii an identification of a user of the client application and iii a transaction identifier that uniquely identifies the request. The request for the secure in application transaction is submitted over the Internet or a computer network to the secure interface server first domain which has an unrestrictive first cross domain policy .

Step . In step the request for the secure in application transaction is received over the Internet or computer network by transaction module serving application running on the secure interface server with information identifying the application user a unique transaction identifier and the application credential. In some embodiments the request received at step does not include the identity of the user. In such embodiments the identity of the user is only communicated by transaction module to transaction server module of the transaction server .

Step . In step the application credential for the client application is verified against a database of valid application credentials . In some embodiments the database of valid application credentials comprises an identification of each legitimate application developer that may use the secure interface server and the transaction server to conduct secure transactions.

Step . If the application credential provided with the application request received in step is not verified No meaning that the application credential is not present in the database of valid application credentials or the database indicates that the credential is invalid or inactivated then the transaction ends . In some embodiments not shown the client application is notified of this failure. In some embodiments not shown the application developer is notified of this failure. If the application credential provided with the application request received in step is verified Yes meaning that the application credential is present in the database of valid application credentials process control passes on to step .

Step . In step the request is keyed into the transaction database . In some embodiments this involves adding a unique entry into the transaction database for the disclosed single transaction. In some embodiments in which the request includes an identity of the user of the client application the transaction entry is added to an account associated with this user. The transaction is not performed in step . For example no sum of money is credited or debited to the user identified in the transaction during step . Such debiting or crediting if it is to occur at all occurs at later stages in the disclosed method. Transaction database is accessible by both the secure interface server and the transaction server . In some embodiments the secure interface server and the transaction server are different servers. In some embodiments the secure interface server and the transaction server is the same server with separate cross domain policies and domains.

Step . In step the transaction module serving application dynamically brands the unbranded transaction module e.g. in SWF file format with sufficient information to establish the validity of the transaction module for the requested transaction and sends the branded transaction module to client device as transaction module . In some embodiments this is accomplished by having the transaction module serving application dynamically generate a validated transaction module by injecting one or more credentials into the unbranded transaction module . Examples of such injection security methods are found in for example U.S. patent application Ser. No. 12 607 005 entitled Systems and Methods for Authenticating an Electronic Transaction filed Oct. 27 2009 which is hereby incorporated by reference herein in its entirety.

In some embodiments the second domain provides a secure transaction module to the request module and or client application on client device without modifying the content of the unbranded transaction module . In some such embodiments the request for the transaction module that is sent to the secure interface server from the client device is serviced by providing an unbranded transaction module along with parameters external to the unbranded transaction module that serve to validate the transaction module. The request module is able to validate the transaction module thereby allowing the transaction module to be deemed transaction module without injecting parameters into transaction module . In some embodiments a credential that is either injected into the transaction module or that is provided as one or more parameters external to the transaction module is a user identifier key. In some embodiments the application user identifier key is provided with the request received in step originating from the client device . In some embodiments the application user identifier key is associated with an account that the user has with the application developer and this account is serviced by the secure interface server and the transaction server . In some embodiments the application user identifier key is provided by a third party such as FACEBOOK or MYSPACE.

In some embodiments a credential that is injected into the transaction module or that is provided as one or more parameters external to the transaction module is a salting value based on a reference time. In some embodiments this salting value is a Coordinated Universal Time UTC associated with request. For example the salting value may be UTC at a time during e.g. at the beginning of at the end of at a time during the exercise of step step step step step step or step or some other predetermined function of the time when the request was either originated by client device or received by the secure interface server . UTC is a time standard based on International Atomic Time TAI with leap seconds added at irregular intervals to compensate for the Earth s slowing rotation. Leap seconds are used to allow UTC to closely track UT which is mean solar time at the Royal Observatory Greenwich. In some embodiments the salting value is the integer divide of UTC and some time increment such as one hour eight hours twelve hours or the like.

In some embodiments a credential that is injected into the transaction module or that is provided as one or more parameters external to the transaction module is a secret key that is shared by the secure interface server and the transaction server . A feature of the secret key is that it is not communicated across Internet network and only the application developer the host of the transaction server and the host of the secure interface server know its identity. See for example Section 2.4 of Kaufman Prentice Hall Inc. Upper Saddle River N.J. which is hereby incorporated by reference.

In some embodiments a credential that is injected into the transaction module or that is provided as one or more parameters external to the transaction module is the application user identifier provided with the request received in step . In some embodiments any combination of the foregoing credentials is injected into the transaction module prior to sending it to the client application or that is provided as one or more parameters external to the transaction module. In some embodiments any combination of the foregoing credentials are used to a generate the temporary signing key. For example in some embodiments these credential are truncated together or otherwise combined and then one way hashed to generate a signing key that is injected into the transaction module rather than or in addition to injecting the foregoing credentials and or providing them external to the transaction module. In some embodiments other credentials in addition to or instead of the foregoing are injected into the transaction module .

Step . In step the client application executes the transaction module in a separate domain specific security sandbox associated with and limited to programs identifying the secure interface server as their source URL. For example in some embodiments the client application is a FLASH program and the transaction module is in the form of a SWF file that is loaded and executed by the client application during step . In such embodiments the client application interrogates the transaction module to determine its source URL. In this instance the source URL of transaction module is the URL of the secure interface server . Thus the client application loads and executes the transaction module in a domain specific security sandbox that is dedicated to programs from the domain of secure interface server . In other words during step the client application executes the validated transaction module such that the validated transaction module is loaded into a separate domain specific security sandbox within memory where i the separate domain specific security sandbox is segregated from memory space in said memory in which the client application is run ii the separate domain specific security sandbox is associated with and limited to programs that identify their source URL as being the domain of the secure interface server iii the validated transaction module is executed by the client application such that the identity of the source URL of the validated transaction module is not altered or destroyed and iv the validated transaction module does not grant the client application the power to introspect the validated transaction module . Thus advantageously transaction module is able to run in a secure manner on client device even though it was loaded by client application . The client application cannot introspect the transaction module . In other words the client application cannot read any values stored by the transaction module . This is highly advantageous because the user of the client application can enter sensitive information into the transaction module without any risk of having the client application obtain such sensitive information.

Step . In step transaction module issues a transaction call while the module is executing in the separate domain specific security sandbox. The transaction call is issued to a second domain that of the transaction server . The transaction server has a second cross domain policy that limits interaction between the transaction server and programs external to the transaction server second domain to those external programs whose source URL is that of the secure interface server first domain .

Steps and . In step a determination is made as to whether the calling transaction module names the secure interface server as its source URL. As described above in step this is a necessary condition for interacting with the transaction server because the cross domain policy of the transaction server limits external interaction to only those programs whose source URL is that of the secure interface server . Because transaction module was served by the secure interface server to the client device and loaded by the client application in such a manner that the source URL of the transaction module was preserved the transaction module should satisfy condition Yes and thus process control should move to step . If the client application attempted to load transaction module in such a manner that the source URL of the transaction module was not preserved e.g. by using FLASH a loadBytes call then condition will not be satisfied No and process control will pass to step where the transaction will fail. In such instances the record of the transaction will be removed from the transaction database .

Step . If process control reaches step the transaction server module operating on the transaction server permits API to interact with the transaction module in order to perform the requested transaction. In some embodiments additional security measures are taken before the transaction commences. Examples of such security measures are disclosed in U.S. patent application Ser. No. 12 607 005 entitled Systems and Methods for Authenticating an Electronic Transaction filed Oct. 27 2009 which is hereby incorporated by reference herein in its entirety. See for example steps 214 through 218 disclosed in U.S. patent application Ser. No. 12 607 005.

Step . In step a user conducts the transaction using transaction module and API . During this transaction the user may enter financial information or other forms of information such as credit card information debit card information ATM information e.g. personal identification number PAYPAL account information automatic clearing house ACH transfer information banking information billing address information mailing address information personal information e.g. social security number date of birth answers to personal questions etc. coupon information rebate information membership information subscription information login information password information security tokens e.g. RSA challenge numbers and the like. Advantageously because transaction module is operating in its own domain specific security sandbox on the client device the client application and request module cannot obtain the information entered by the user in step .

Step . The information entered by the user in step is processed by API to thereby credit or debit the user. It will be appreciated that steps and may be repeated a number of times in order to complete the transaction. For example API may issue one or more challenges or requests from the user. The user using transaction module enters this information. If the user enters the correct challenge information API proceeds to later stages of the transaction by requesting more information from the user. Further the status of the transaction is stored in transaction database using the unique transaction identifier assigned to the transaction. It is to be noted that in typical embodiments both the transaction server and the secure interface server have access to transaction database . The secure interface server creates an entry for the transaction in step using the unique transaction identifier assigned to the transaction while the transaction server records the status of the transaction e.g. completed failed amount credited amount debited etc. during step .

Steps . In preferred embodiments the instance of API is used for a single transaction. Thus in such preferred embodiments the instance of API that was used to facilitate the transaction terminates. In other embodiments API is persistent across multiple transactions. Regardless of which form of embodiment is used transaction server module ceases deeming the instance of the transaction module that it was interacting with in steps and as valid. This advantageously enhances the security of the discloses systems and methods since in a worse case scenario the transaction module can only be used with a single user for a single unique transaction. In step the transaction module is terminated.

Steps . As noted above the transaction module operates in its own domain specific security sandbox on the client device and the transaction module does not grant the client application the power to introspect. Therefore the client application does not ascertain directly from the transaction module whether the in application transaction was completed much less whether the in application transaction was successfully completed such that the user is to be granted whatever privilege was associated with the in application transaction e.g. more game points etc. . Therefore concurrently with some or all of the aforementioned steps or after all of the aforementioned steps have been completed the client application polls the transaction database using the secure interface server to determine the status of the transaction. It is to be appreciated that while both the secure interface server and the transaction server have access to the transaction database the secure interface server has a permissive cross domain policy while the transaction server has a restrictive cross domain policy . Thus unless the source URL of the client application is the URL of the secure interface server the client application will be unable to interact directly with the transaction server . Thus the client application would be unable to poll the transaction database using the transaction server .

In typical embodiments the client application polls the transaction database on the secure interface server on a periodic basis e.g. every minute every five minutes every half hour etc. until the transaction database indicates that the transaction is completed. In typical embodiments this query is very limited. In typical embodiments the client application provides the unique transaction identifier and the application credential. If the application credential is valid against the database of valid application credentials the status of the transaction uniquely associated with the transaction identifier provided by the client application is sent back to the client application running on the client over the Internet or computer network. In typical embodiments the client application is not permitted to obtain personal information from the transaction database .

Now that the details of the processing steps associated with an instance of the first embodiment have been disclosed the advantages of the present application may be emphasized. A secure transaction may be performed using a client application in which the client application cannot gain knowledge of secure information needed to conduct the transaction. Nevertheless using a unique transaction identifier for the transaction the client application can determine whether the transaction was successful. Thus using the disclosed system the client application can support in application transactions in a secure manner without having to set up the disclosed secure platform e.g. secure internet server and the transaction server . For example the secure platform can be run by a separate entity. This reduces the costs for developing the client application.

In Transaction User Interface. In some embodiments the look and feel of the in application transaction is enhanced by creating the appearance that the transaction module is controlled by the client application . In some embodiments this is done through an application programming interface associated with the request module . The client application uses the application programming interface to allocate a portion of the screen real estate being used by the client application to open up the transaction module . In one example the transaction module is a 300 by 400 pixel interface and the client application when making the transaction request specifies the coordinates on the screen where this 300 by 400 pixel interface may open. Thus advantageously in such embodiments even though the transaction module is running in its own domain specific security sandbox the client application and the transaction module appear to be the same application. In some embodiments the API interface associated with the request module further includes parameters for specifying the fonts and colors used in the transaction module . Such parameters further the appearance that the client application and the transaction module are the same application. In typical embodiments client application runs in its own window and all pixel coordinates provided to the transaction module through the API of request module are in reference to this window.

Secure Interface Server Transaction Server . In typical embodiments as depicted in the secure interface server and the transaction server are each a separate physical server. In some alternative embodiments the secure interface server and the transaction server are hosted by the same physical server. In such embodiments this physical server is accessible to the client device over the Internet or a computer network .

Second Embodiment. A second embodiment of the present disclosure is illustrated in . In more detail a system in accordance with the second embodiment of the present disclosure is described in conjunction with . As such illustrates the topology of an environment in accordance with the present disclosure. In the topology there is a secure interface server B a client device B a transaction server and a request module server . Of course other topologies are possible for instance the secure interface server B can in fact comprise several servers. Moreover typically there are hundreds thousands hundreds of thousands of client devices B or more. The exemplary topology shown in merely serves to describe the features of the second embodiment of the present disclosure in a manner that will be readily understood to one of skill in the art.

The client device B of and each of the modules hosted by the client device B are identical to their like named counterparts in the client device of with the exception that at the time the client application B of the client device B is invoked by the client device B the client application B does not include the entirety of the request module .

The transaction server of and each of the modules hosted by the transaction server of are identical to their like named counterparts in the transaction server of .

The secure interface server B of and each of the modules hosted by the secure interface server B are identical to their like named counterparts in the secure interface server of with the exception that the cross domain policy B of the secure interface server B restricts interaction between the secure interface server B and those programs whose source URL is the domain of the request module server .

As illustrated in request module server will typically have one or more processing units CPU s a network or other communications interface a memory one or more magnetic disk storage and or persistent devices optionally accessed by one or more controllers one or more communication busses for interconnecting the aforementioned components and a power supply for powering the aforementioned components. Data in memory can be seamlessly shared with non volatile memory using known computing techniques such as caching Memory and or memory can include mass storage that is remotely located with respect to the central processing unit s . In other words some data stored in memory and or memory may in fact be hosted on computers that are external to the request module server but that can be electronically accessed by the request module server over an Internet intranet or other form of network or electronic cable illustrated as element in using network interface .

Referring to an exemplary method in accordance with the second embodiment of the present disclosure is described. The method details the steps taken by a secure interface server B a client device a transaction server and a request module server to interactively service a transaction in accordance with the second embodiment of the present disclosure.

Steps . The method disclosed in embodiment 2 takes the method of embodiment 1 a step further by requiring that the client application B obtain the request module from request module server when the client application B is invoked. In the embodiment disclosed in the client application B already had a copy of this request module . In some embodiments in which client application B is a FLASH application the request module is a compiled SWC file in embodiment 1 whereas in embodiment 2 the request module is a SWF file.

In step client device B invokes the client application B from local data store or from a remote application server. At the time client application B is invoked the client application B does not include a request module for facilitating in application secure transactions. In step the client application B initiates a transaction by asking for request module from request module server . In step responsive to the request of step transaction request module serving application processes the request and sends request module to client device . In some embodiments of step transaction request module serving application only provides the request module to the client application B if the client application B provides an application credential that the transaction request module serving application verifies against the database of valid application credentials .

Step . In step the client application B executes the request module in a separate domain specific security sandbox first sandbox associated with and limited to programs identifying the request module server as their source URL. For example in some embodiments the client application B is a FLASH program and the request module is in the form of a SWF file that is loaded and executed by the client application B during step . In such embodiments the client application B interrogates the request module to determine its source URL. In this instance the source URL of the request module is the URL of the request module server . Thus the client application B loads and executes the request module in a domain specific security sandbox that is dedicated to programs from the domain of the request module server . In other words during step the client application B executes the request module such that the request module is loaded into a separate domain specific security sandbox within memory where i the separate domain specific security sandbox is segregated from memory space in the memory in which the client application B is run ii the separate domain specific security sandbox is associated with and limited to programs that identify their source URL as being the domain of the request module server iii the request module is executed by the client application B such that the identity of the source URL of the request module is not altered or destroyed and iv the request module does not grant the client application B the power to introspect the request module . Thus advantageously the request module is able to run in a secure manner on the client device B even though it was loaded by the client application B. The client application B cannot introspect the request module . In other words the client application B cannot read any values stored by the request module .

Step . At some point while the client application B is running on the client device B the client application B invokes request module to make a request for a secure in application transaction. Typically the secure in application request includes an application credential information identifying a client application B user and a unique transaction identifier. In typical embodiments the format of the application credential information identifying a client application B user and a unique transaction identifier is predetermined in accordance with the requirements of the secure interface server B and or the transaction server . Regardless of implementation the information identifying a client application B user uniquely identifies a user to the secure interface server B and or the transaction server and or request module server . Similarly in preferred embodiments the unique transaction identifier uniquely identifies a single in application transaction conducted by a user of the client application B.

Thus in summary upon completion of step there is generated through the client application B and the associated request module at a time when the client application B is executing on the client device B a request associated with a secure in application transaction where the request comprises i a credential for the client application B ii an identification of a user of the client application B and iii a transaction identifier that uniquely identifies the request. The request for the secure in application transaction is submitted over the Internet or a computer network to the secure interface server B. Here unlike the first embodiment the secure interface server B has a restrictive cross domain policy B that requires applications that interact with the secure interface server B to have a source URL that is the domain of the request module server . In some embodiments particularly those where the application credential was already presented to the request module server in step the request sent in step and processed in step may not have the application credential. In some embodiments the request sent in step and processed in step may not have the identity of the user of the client application B.

Step . As discussed above with reference to step the request for the secure in application transaction is received over the Internet or computer network by transaction module serving application running on the secure interface server B with information identifying the application user optionally a unique transaction identifier and the application credential optionally . In some embodiments the request received at step does not include the identity of the user. In such embodiments the identity of the user is only communicated by transaction module B to the transaction server module of the transaction server .

Step . In some embodiments of step the application credential for the client application B is verified against a database of valid application credentials . In some embodiments this verification was already done in step . In some embodiments this verification is done in both steps and . In some embodiments the database of valid application credentials comprises an identification of each legitimate application developer that may use the secure interface server B and the transaction server to conduct secure transactions. In step an additional check is made to ensure that the source URL of the request module is verified against the cross domain policy B of the secure interface server B.

Step . if the application credential provided with the application request received in step is not verified and or the source URL of the request module is not that of the domain of the request module server No the transaction ends in failure. In some embodiments not shown the client application B is notified of this failure. In some embodiments not shown the application developer is notified of this failure. If the application credential provided with the application request received in step is verified and the source URL of the request application is that of the domain of the request module server Yes process control passes on to step of . In other words the second embodiment includes steps through of the first embodiment.

Steps Through . The transaction module operates in its own domain specific security sandbox on the client device B and the transaction module does not grant the client application B the power to introspect. Therefore the client application B does not ascertain directly from the transaction module whether the in application transaction was completed much less whether the in application transaction was successfully completed such that the user is to be granted whatever privilege was associated with the in application transaction e.g. more game points etc. . Therefore concurrently with some or all of the aforementioned steps or after all of the aforementioned steps have been completed the client application B polls the transaction database using the request module server to determine the status of the transaction.

It is to be appreciated that while the secure interface server B the transaction server and the request module server each have access to the transaction database the request module server has a permissive cross domain policy in embodiment 2 while the transaction server has a restrictive cross domain policy and the secure interface server B has a restrictive cross domain policy B. Thus unless the source URL of the client application is the URL of the secure interface server B the client application B will be unable to interact directly with the transaction server . Moreover unless the source URL of the client application is the URL of the request module server the client application B will be unable to interact directly with the secure interface server B. Thus in such instances the client application B would be unable to poll the transaction database using the transaction server or the secure interface server B

In typical embodiments the client application B poles the transaction database on the request module server on a periodic basis e.g. every minute every five minutes every half hour etc. until the transaction database indicates that the transaction is completed. In typical embodiments this query is very limited. In typical embodiments the client application B provides the unique transaction identifier and the application credential. If the application credential is valid against the database of valid application credentials the status of the transaction uniquely associated with the transaction identifier provided by the client application B is sent back to the client application B running on the client device B over the Internet or computer network. In typical embodiments the client application B is not permitted to obtain personal information from the transaction database .

All references cited herein are incorporated herein by reference in their entirety and for all purposes to the same extent as if each individual publication or patent or patent application was specifically and individually indicated to be incorporated by reference in its entirety for all purposes.

The present invention can be implemented as a computer program product that comprises a computer program mechanism embedded in a computer readable storage medium. For instance the computer program product could contain the program modules shown in and or . These program modules can be stored on a CD ROM DVD magnetic disk storage product or any other tangible computer readable data or program storage product.

Many modifications and variations of this invention can be made without departing from its spirit and scope as will be apparent to those skilled in the art. The specific embodiments described herein are offered by way of example only. The embodiments were chosen and described in order to best explain the principles of the invention and its practical applications to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. The invention is to be limited only by the terms of the appended claims along with the full scope of equivalents to which such claims are entitled.

