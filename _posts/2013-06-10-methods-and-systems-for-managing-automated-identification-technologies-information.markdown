---

title: Methods and systems for managing automated identification technologies information
abstract: Computer-readable storage media and methods are described in relation to management, control, and distribution of automated identification technology (AIT) information and data associated with sensors and tags utilized for asset identification and tracking. The method includes generating a gateway for at least one of read and write access to deployed identification sensors and tags associated with a set of assets, the sensors and tags incorporating a plurality of disparate native solution formats, providing data storage and management with hierarchical functionality in a common data format for information passing through the generated gateway, the information related to the assets as provided by the deployed identification sensors and tags, executing a service framework for data delivery to and from the deployed sensors and tags via a publish and subscribe middleware service layer that provides access to the gateway through a common middleware interface, and providing a user interface through which commands to the common middleware interface are generated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047332&OS=09047332&RS=09047332
owner: The Boeing Company
number: 09047332
owner_city: Chicago
owner_country: US
publication_date: 20130610
---
This application is a continuation of U.S. patent application Ser. No. 12 961 119 filed Dec. 6 2010 and issued on Jun. 11 2013 as U.S. Pat. No. 8 463 888 which is incorporated herein by reference in its entirety.

The field of the disclosure relates generally to automated identification technologies and more specifically to methods and systems for managing the information created through various automated identification technology types.

Automated identification technologies AIT generally refers to in combination of such known identification and location technologies such as radio frequency identification RFID both passive and active unique identification UID tags ultra wideband UWB radio frequency identification systems Wi Fi and global positioning systems GPS to name a few. Systems that incorporate one or more AIT s may often be referred to as a hybrid AIT system or solution.

Across large enterprises such as an aircraft manufacturer multiple solutions of these AITs are incorporated for example for the tracking of various component parts replaceable units tooling etc. that go into the fabrication and support of a modern platform such as an aircraft. However these multiple AITs are generally disparate and disparate and distributed management of differing RFID solutions across an enterprise leads to inefficiencies as well as the loss of information that could have been shared across multiple divisions within the enterprise.

As mentioned the various divisions within an enterprise often do not have ubiquitous visibility of all AIT tracked items in the manufacturing testing and support processes. In addition to being inefficient not having ubiquitous visibility is also ineffective as it does not allow for an integrated approach for data collection metrics reporting information security systems integration and scalability in a distributed environment.

In one aspect one or more computer readable storage media having computer executable instructions embodied thereon are provided wherein when executed by at least one processor the computer executable instructions cause at least one processor to transform data from diverse automated identification components delivered in multiple native solution formats to a common data structure format within an Extensible Markup Language XML framework associate the transformed automated identification component data with specific locations to generate spatial location data for the assets associated with respective automated identification components and providing access to the transformed and associated automated identification component data via a user interface.

In another aspect an asset tracking system is provided. The asset tracking system includes a first computer system associated with a first location and configured to transmit using a first data format data relating to a first identification device associated with a first physical asset when a presence of the first identification device is detected by the first computer system the first data format associated with the first identification device a second computer system associated with a second location and configured to transmit using a second data format data relating to a second identification device associated with a second physical asset when a presence of the second identification device is detected by the second computer system the second data format associated with the second identification device and an asset tracking gateway device coupled in communication with the first computer system and the second computer system. The asset tracking gateway device is configured to receive the data relating to the first and second identification devices in the respective first and second data formats convert the data in the first and second data formats to a common data format store a first asset identification event in association with the data relating to the first identification device in the common data format the first asset identification event including a location and a time at which the presence of the asset was detected by the first computer system and store a second asset identification event in association with the data relating to the second identification device in the common data format the second asset identification event including a location and a time at which the presence of the asset was detected by the second computer system.

The features functions and advantages that have been discussed can be achieved independently in various embodiments or may be combined in yet other embodiments further details of which can be seen with reference to the following description and drawings.

The embodiments described herein relate to Automated Identification Technologies AITs and particularly to an AIT information management system and architecture framework that identifies the specific layers of functionality to manage disseminate and process all types of AIT information and data for AITs such as RFID and UID. The AIT information management system further provides for single source visibility and solution management for disparate AIT solutions including RFID radio frequency identification both passive and active UID unique identification tags ultra wideband UWB wireless Wi Fi and GPS global positioning system .

Referring more particularly to the drawings embodiments of the disclosure may be described in the context of aircraft manufacturing and service method as shown in and an aircraft as shown in . During pre production aircraft manufacturing and service method may include specification and design of aircraft part identification and serialization and specialized material procurement .

During production component and subassembly manufacturing and system integration of aircraft takes place. Thereafter aircraft may go through certification and delivery in order to be placed in service . While in service by a customer aircraft is scheduled for routine maintenance and service which may also include modification reconfiguration refurbishment and so on .

Each of the processes of aircraft manufacturing and service method may be performed or carried out by a system integrator a third party and or an operator e.g. a customer . For the purposes of this description a system integrator may include without limitation any number of aircraft manufacturers and major system subcontractors a third party may include for example without limitation any number of venders subcontractors and suppliers and an operator may be an airline leasing company military entity service organization and so on.

As shown in aircraft produced by aircraft manufacturing and service method may include airframe with a plurality of systems and interior . Examples of systems include one or more of propulsion system electrical system hydraulic system and environmental system . Any number of other systems may be included in this example. Although an aerospace example is shown the principles of the disclosure may be applied to other industries such as the automotive industry.

Apparatus and methods embodied herein may be employed during any one or more of the stages of aircraft manufacturing and service method . For example without limitation components or subassemblies corresponding to component and subassembly manufacturing may be fabricated or manufactured in a manner similar to components or subassemblies produced while aircraft is in service.

Also one or more apparatus embodiments method embodiments or a combination thereof may be utilized during component and subassembly manufacturing and systems integration for example without limitation by substantially expediting assembly of or reducing the cost of aircraft . Similarly one or more of apparatus embodiments method embodiments or a combination thereof may be utilized while aircraft is in service for example without limitation to maintenance and service may be used during system integration and or maintenance and service to determine whether parts may be connected and or mated to each other.

The description of the different advantageous embodiments will be presented for purposes of illustration and description and is not intended to be exhaustive or limited to the embodiments in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art. Further different advantageous embodiments may provide different advantages as compared to other advantageous embodiments. The embodiment or embodiments selected are chosen and described in order to best explain the principles of the embodiments the practical application and to enable others of ordinary skill in the art to understand the disclosure for various embodiments with various modifications as are suited to the particular use contemplated.

Turning now to a diagram of a data processing system is depicted in accordance with an illustrative embodiment. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is presents with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example without limitation a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example without limitation persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example without limitation a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices such as other disparate AIT systems. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communication links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example without limitation input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on computer readable media such as persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a computer readable media such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer readable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples.

In some illustrative embodiments the memory may be physically located in a separate computing device such that program code may be downloaded over a network to persistent storage from another device or data processing system for use within data processing system . For instance program code stored in a computer readable storage medium in a server data processing system may be downloaded over a network from the server to data processing system . The data processing system providing program code may be a server computer a client computer or some other device capable of storing and transmitting program code .

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown.

As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example without limitation memory or a cache such as that found in an interface and memory controller hub that may be present in communications fabric .

The AITIMS as described herein manages automated identification technology data. This data is transferred from the sensors or tags to the readers and location engines and then processed through a gateway event management engine. Such meta information is then associated with each referenced item or tag for a common framework identification process.

In the illustrated embodiment the system architecture for the AITIMS divides the below described components into logical layers to produce a solution which is maintainable extensible and promotes lower level solution flexibility replication and reuse. The underlying components of the AITIMS solution are loosely coupled and act as part of the complete integrated solution. As a result AITIMS is a fully integrated architecture solution where internal components communicate through messaging protocols in gateway event management and service layers. The inner layer requests are governed by the messaging protocol as system service contracts. As further described the core architecture contains all the functional component features for the management control and distribution of AIT information and data. Each tier is focused on providing a specific type of functionality to the delivered requirement. The key principles of this architecture are the collection and management of the data the business system logic and the robustness of the user interface.

The AITIMS is designed into a framework that helps to drive a service oriented architecture SOA information management environment. An access layer includes three components specifically an inward facing graphical user interface an outward facing component and a multi application integration service . In one embodiment inward facing graphical user interface is driven through a web based portal and a series of web services. In an embodiment outward facing component consists of a GUI component that works through an external reverse proxy secure portal through a firewall for example for customer and supplier integration and use. The multi application integration service includes a common application programming interface API that allows for the AITIMS architecture model to be integrated into adjoining or adjacent computing applications and systems. In one embodiment an outward facing component that works to establish secure functionality for external suppliers and customers of a business. In another embodiment a role based security framework is implemented to provide security measures to all applicable internal and external AIT solutions.

A service layer includes an integrated unique identification IUID delivery session layer an active and passive radio frequency identification RFID delivery session layer and a publish and subscribe middleware service layer . The integrated unique identification IUID delivery session layer delivers and controls the unique identification components and activities internally and externally. The active and passive radio frequency identification RFID delivery session layer delivers and controls the radio frequency identification components and activities internally and externally. The publish and subscribe middleware service layer provides the functionality to allow system and application developers to configure deploy and issue queuing commands directly to the AITIMS infrastructure through the common middleware interface.

An integration layer includes data storage and management at an enterprise level with hierarchical functionality for both data storage and management RFID layer and data storage and management IUID layer . These data storage and management components act as the formal repository for the automated identification data elements and related files internally and externally. A mapping and geo services component layer within the integration layer distinctively recognizes specific assets associated with specific sites and acts as a spatial location service. The mapping and geo services component layer also provides a synchronous mapping component for active or passive RFID services and systematic logic so that it operates seamlessly in a distributed environment. A gateway and event engines layer and a security framework layer work in a synchronous manner to provide the access to AIT information gathered from the sensors or tags at various sites. The security framework layer ensures all access control risks are formally mitigated and prompts are set normally open to assure proper authorization. Location calculation functions are handled by the specific Location Engines of each specific solution as described in the following paragraph.

A solutions layer may include a multitude of AIT solutions at either the enterprise or at the various sites of activities. The layer may include some or all of the components that make up AIT solutions including for example passive RFID solutions UID solutions GPS solutions UWB solutions Wi Fi solutions and other solutions that may be utilized by an enterprise such as active RFID solutions. More specifically solutions layer contains all of the necessary components which may or may not involve location engines portals readers receivers antennas scanners and tag verifiers that are utilized to enable specific RFID or UID solutions to work successfully.

The core responsibility of the tags layer is to provide a depiction for all of the RFID active and passive and UID tags that are commissioned or activated at relevant facilities and or suppliers. The tags layer acts as the commissioning gateway into the AITIMS architecture model.

AIT tags and sensor devices process a signal transmission either through an active or passive scanning process and provide the specific data elements to the readers that are a part of the solution framework within the tags layer .

With regard to the security framework layer security business objects are the business objects that implement specific security settings. The security business objects contain the logic and business rules on how and what data should be filtered based on predefined security settings. The security business objects also contain the logic to invoke filtering and optionally a rule engine to resolve complex security hierarchies for the data as needed. Access control for the AITIMS framework is designed so that all permissions are set to a normally open condition and thus initially restricting all users. Users are granted certain privileges and access controls are administered and opened up manually through an administrators control panel. When invoked user profiles are set to control access to data reports and specific system content and functionality.

Data inbound to the mapping and geo services layer passes through data mapping during the gateway transformation process. A value from the source solution system in solutions layer is associated to the value in AITIMS based on business logic for map and location associations. The mapping reference table is user manageable so a translation mapping component object model can be built up over time to handle not only initial event data but ongoing data and events of an asset throughout its lifecycle. Data associated with all the deployed RFID and IUID tags incorporates a meta information schema assigned by the gateways and event engine within gateways and event engine layer for mapping and information association characteristics. is a diagram of a map with tag association.

Data storage and management IUID RFID layers and include a data access layer shown in that serves three main purposes. First the data access layer accepts data access requests from the manager layer which performs the necessary queries on the database and returns the data results in the form of domain objects back to the manager layer. Second the data access layer is responsible for maintaining a mapping of domain object attributes to database table column allowing the system to know which object attribute is populated with which database table field during a query operation. Lastly the data access layer manages the connection to the actual data source itself.

The data access policy controller within the security framework layer acts as a gate keeper between data returned from the UI controller and the solution business event objects. The data access policy controller also applies security criteria to the data based on its characteristics and requestor as well as filtering out the data restricted to the requestor and allows only the appropriate data to be routed into the appropriate business object associations. Since all other business functions are realized through business objects data event leakage is prevented from the source. The data access tier contains the data access objects DAO s that are used to execute queries into the database. The data access layer also manages the connection to the data source manager .

Mapping files as well as the configuration files are all part of the data access tier. The data access objects mapped to the databases are generated by an object relational management ORM framework. Using an ORM framework to generate the domain objects the data access tier will lead to reduction in code and increased system performance. An out of the box open source ORM framework is able to implement certain optimizations like caching outer join association fetching within the data model and batching of updates inserts deletes to the database occur much more efficiently than typical handwritten JDBC. All application data that is related to AITIMS is stored in a relational database. The AITIMS database stores tag identification data and attachments in the database as a binary large object BLOB data type. In one embodiment AITIMS includes a primary database the on line transaction process OLTP main database and two secondary databases a reporting and event staging database and an integration or tag log files database. The secondary databases will service tag event management reports and integration function needs without impacting the solution system s ability to perform core functions such as event management and reporting.

Data storage and management is further illustrated by the data access control and storage model of . Business objects from the UI controller service layer are provided to the data access layer and formatted therein as a query to a data source layer . Query results from the data source layer are passed to the data access layer for formatting as a response that is then forwarded to the UI controller service layer for eventual output at a user interface.

The AITIMS Graphical User Interface GUI Layer serves three main purposes. The first purpose is to display data and information in a user friendly format. Secondly the UI layer provides facilities for the user to navigate around within the components of the architecture and AIT solutions. Lastly the UI layer provides users a rich experience interacting with the solution. The output of the UI layer is both the physical HTML pages that are displayed in the user s web browser as well as the objects that are sent from the Service layer that contains updates to data within the system. A GUI serving the functions described herein is implied however the design of that GUI is left to the programmer.

Referring to a UI controller layer receives its input from a service layer which passes up data in the form of domain objects. The communication between the UI controller layer and the service layer is managed by a live cycle data services LCDS controller . Coming into the UI controller layer the LCDS controller converts system domain objects to a data object that is known by the UI controller layer . Coming out of the UI controller layer the LCDS controller converts command objects to a domain object that is recognized by the service layer through association.

The UI controller layer is organized into a model view controller based architecture. The framework is used within the user interface to facilitate data synchronization between the client and the server while keeping the programming of the view layer detached from the event management layer. A set of reusable UI components or UI controls are constructed for viewing by a user via end user viewer . The set of UI controls contains built in universal mechanisms for security layout style or skinning data source life cycle logging marshalling and inter control tag communication with a disciplined set of interfaces attributes and events that can be reused on AITIMS pages. The main function is that the UI controls containing AITIMS system logic are reused by module UIs for AIT Solution functions. In one embodiment the AITIMS user interface is constructed on top of an Adobe Flex framework. Flex is a development and deployment framework for cross platform rich Internet applications based on Adobe Flash.

The platform supports module UI objects built with the macromedia format of the XML framework .mxml files and rendering of the UI following the XML syntax and in real time Interactivity will be achieved through the use of language frameworks such as ActionScript which is the core language of Flash Player. The main function of this UI framework is to provide basic UI functions without having specific logic hardcoded into the UI.Input additional UI definition and system logic from UI components. Output basic framework level and UI component controls passing data and user instruction to lower system solution layers. The role of the UI View processor in the AITIMS architecture is to define events and bind them to data stored in the service layer model. Components on the UI view can bind to higher Value Objects or other properties in the Model data solutions layer for further association of asset identity and tracking.

In one embodiment the UI controller layer is implemented as a single session front controller. The front controller instance which receives every view generated event dispatches the events to the assigned command class based on the event s declared type either RFID or IUID from the service layer of activities. The command class then processes the event by running the command class execute method. The execute method will be able to update the central control model as well as invoke a service layer class which typically involves communication with the data stores and or event manager.

Within the IUID and RFID delivery session layers and requests are made to the data access layers and by the UI controller service layer . The data access class performs the necessary UID and or RFID database operation and returns the results back to the UI controller service layer in the form of domain objects. The reporting component of the delivery session interfaces with the GUI and includes modules responsible for generating displaying and exporting available reports in AITIMS.

Referring to there are multiple report types within AITIMS. One report includes data on the transactional level which displays AITIMS documents and records details such as a report on a list of released assets for a specific user. The other reports aggregate data derived from transactional records which includes data metrics such as logistics management throughout a period of time based on quantitative formulas with multiple factors. In addition the aggregated data reports often contain functionalities for drill down drill up analysis. The AITIMS reporting architecture includes multiple solutions to provide support for multiple types of reports as shown in the report generator model in .

As shown in selection of middleware is independent of the AITIMS solution architecture. Data element queue adapters are deployed into AITIMS middleware servers to bring the event data from the source solution data management systems to AITIMS and vise versa. For AITIMS data integration the middleware data adapters will perform no data transformations or associations as these are performed at the event management layer. defines the inner workings of the queuing mechanism for the internal application to application A2A message broker for the middleware component .

The multiple application integration component of AITIMS is a robust application programming interface API module which provides the capability for interfacing the AITIMS with external systems. These components include data adapters for scenarios where integration between AITIMS and an external system occurs using direct access and web services for scenarios where integration between AITIMS and an external system occurs using a standard web service design by approach. Wherever applicable the integration component will reuse all the tiers of the core architecture except for the UI or the presentation tier.

In one embodiment AITIMS implements HTTP HTTPS and XML Transmit over a simple object access protocol SOAP . The principle data interchange format is XML and Multipurpose Internet Mail Extensions MIME for tag event management in distributed environments.

In one embodiment the AITIMS architecture introduces hot backup sessions for all the event data. The replication to the session database from the event database provides one copy of the transaction database. A redundant Oracle server instance will provide backup to the production databases. Application servers and database servers are clustered to provide a seamless failover in the production environment. The pre production environment is the replication of the production environment including code and data and is also used as the stand by failover server in catastrophic events.

An exception handling framework provides a mechanism for exception handling within the AITIMS architecture in one embodiment by defining an exception class hierarchy and delegates to support the development of new exceptions and propagation of exceptions. The Java language specification defines two types of exceptions an exception and a runtime exception. Within the AITIMS framework these are handled differently by the architecture framework in that the former is called as the checked exception and the latter is considered a runtime exception. The checked exceptions are related to functional processing exceptions and have to be explicitly propagated whereas the runtime exceptions are related to internal system and fatal exceptions and are propagated up the stack. The exception handling framework provides two types of exceptions in the form of base exception and base runtime exception which are derived from exception and runtime exception respectively and the IExceptionable interface. Logging provides the user developers or the administrator with detailed context for application event failures at the server level. Using a logger hierarchy supported by standard open source logging frameworks the logging service in AITIMS controls which log statements are output and at what granularity helping to reduce the volume of logged output and minimize the cost of logging for the application. AITIMS logs all exceptions to log files. If an exception is suppressed for any reason a message will be sent to the administrator of the system and the event manager of the tags.

A transaction history provides a secondary logging at the tag data level. The purpose of the transaction history is to keep track of who changed what and when it was changed. AITIMS implements a server side solution to provide universal transaction event history tracking using shadow tables for each data table. Transaction history is tracked for all tables that can be updated through the AITIMS User Interface. Transaction history contains two parts the type of update INSERT UPDATE DELETE and the specific event data for the update. The shadow table is used as a stack that keeps track of the tag updates. The record in the shadow table is generally one step behind the record of the original table.

The transaction history table contains all fields of the original table with the addition of an additional column for Action . Action stores the type of update All original transaction tables will contain the following common fields PK Tag Data Fields Asset Identification Creation Date Deleted by Deletion Date and Operation INSERT UPDATE DELETE . From the implementation perspective populating the transaction history tables will be done through the Base DAO. Transaction history will be applicable to all tables that are modified through the application. Tables that are modified directly through the database will not affect tag data transaction history.

Each document has a page for transaction history. On this page the user will be able to view the transaction history of that particular asset. This includes the transaction history of all its parent child record of events. Transaction history tables are named Z  which defines the transaction history for a particular event and is consistent between all modules. A template is re used between modules. An additional field to the AITIMS domain base object contains the business operation field for the transaction history. Each module that utilizes this field automatically computes this value.

Event management tools are provided within AITIMS for complete monitoring capabilities for the administrators and end users. Through the error handling and logging plus the messaging protocol in the service layer the system captures all levels of event information and provides information transparency on the health of the system. These messages are persisted into the database and can be used to inform the user of the system status from all levels. The data can be used in dashboard displays or reports with appropriate security controls and grouping for analysis.

The methods described herein may be encoded as executable instructions embodied in a computer readable medium including without limitation a storage device or a memory area of a computing device. Such instructions when executed by one or more processors cause the processor s to perform at least a portion of the methods described herein. Storage devices include one or more of a hard drive a solid state memory device and or an optical disk that is operable to store data such as computer executable instructions.

This written description uses examples to disclose various embodiments which include the best mode to enable any person skilled in the art to practice those embodiments including making and using any devices or systems and performing any incorporated methods. The patentable scope is defined by the claims and may include other examples that occur to those skilled in the art. Such other examples are intended to be within the scope of the claims if they have structural elements that do not differ from the literal language of the claims or if they include equivalent structural elements with insubstantial differences from the literal languages of the claims.

