---

title: Executing a populated code template to generate a browser-executable software program to present a web page as a mobile application
abstract: A browser-executable software program for presenting a web page that provides the “look and feel” and functionality of a mobile application can be automatically generated from a mobile application specification. The mobile application specification identifies one or more predetermined content component types and one or more associated content sources. For each content component type, a copy of a corresponding code generation template is populated with a URL for each corresponding content source and executed to produce browser-executable program code. The browser-executable program code is then embedded into a populated copy of a navigation container code template to form a complete browser-executable software program, which is integrated into an HTML page. The HTML page can be returned in response to a request from a browser executing on a networked mobile wireless telecommunication computing device and the HTML page carries the browser-executable software program to the browser.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09501458&OS=09501458&RS=09501458
owner: Weever Apps Inc.
number: 09501458
owner_city: 
owner_country: CA
publication_date: 20131218
---
This application is a Continuation of U.S. Non Provisional application Ser. No. 13 407 745 filed on Feb. 28 2012 which claims priority to U.S. Provisional Application No. 61 448 139 filed on Mar. 1 2011 the teachings of which are hereby incorporated by reference.

The present disclosure relates to browser executable software programs for networked mobile wireless telecommunication computing devices and more particularly to the use of such browser executable software programs to present a web page as a mobile application.

Networked mobile wireless telecommunication computing devices such as smartphones and tablet computers have recently come into widespread use and as a result there has been an increasing focus on providing mobile applications or apps that is software programs that are tailored to these networked mobile wireless telecommunication computing devices rather than to laptop or desktop computers. Mobile applications run directly on the operating system of the networked mobile wireless telecommunication computing device. As a result developing mobile applications requires a knowledge of the relevant operating system such as iOS for iPhone and iPad devices offered by Apple Inc. and Android offered by Google Inc. and entails a fairly involved process since each mobile application must be developed more or less from scratch.

Many networked mobile wireless telecommunication computing devices especially those sold to consumers include a Web browser as part of the basic original equipment manufacturer OEM software package. A Web browser referred to herein simply as a browser is a software program that can retrieve and present information on the World Wide Web referred to herein as the Web and typically can also run specialized programs written in a suitable scripting language. Such programs are referred to herein as browser executable software programs . Because of the ubiquity of browsers as part of the OEM software provided with networked mobile wireless telecommunication computing devices there has recently been some movement towards the use of browser executable software programs to mimic a mobile application. Browser executable software programs that mimic mobile applications are designed to cause the browser to present a web page that appears to the user to be a mobile application and can import and present content from specific locations on the Web. For example content from an entity s existing web site and or content hosted at a third party web site like Facebook or Flickr may be presented by such a browser executable software program. Developing such browser executable software programs is less involved than developing true mobile applications i.e. mobile applications that run directly on the relevant operating system. However development of browser executable software programs nonetheless requires knowledge of the relevant programming language and browser and knowledge of the presentation format of any content that is to be obtained from the Web and also requires that the relevant computer program code be manually developed based on that knowledge for each browser executable software program. Thus while a browser executable software program that presents a web page as a mobile application is easier and faster to develop than a true mobile application development of such browser executable software programs still requires considerable time and effort by a skilled programmer or team of programmers.

The development of browser executable software programs to present a web page that appears to the user to be a mobile application is effectively automated. An entity wishing to create such a browser executable software program need only provide basic specifications that identify the type and source of existing Web based content to be used and the complete browser executable software program can be automatically generated stored and transmitted to end users in response to a request.

A computer implemented method for generating a browser executable software program to present a web page as a mobile application comprises receiving a mobile application specification for a mobile application and automatically generating a browser executable software program based on the mobile application specification. The browser executable software program includes a mobile application interface fa ade for presentation as a user interface to the browser executable software program.

In an exemplary embodiment the mobile application specification comprises at least one content component type identifier and at least one content source identifier with each content source identifier being associated with a content component type identifier. In this embodiment automatically generating the browser executable software program based on the mobile application specification comprises the following steps. For each content component type identifier a code generation template copy of a corresponding code generation template is retrieved from a library of predefined code generation templates. For each content source identifier a URL for the content source identified by that content source identifier is determined from that content source identifier and the determined URL is inserted into the code generation template copy for the content component type identifier with which that content source identifier is associated to create a populated code generation template copy. The browser executable program code is then generated from each populated code generation template copy.

Automatically generating the browser executable software program based on the mobile application specification may further comprise embedding the browser executable program code into a copy of a populated navigation container code template. In a preferred embodiment the browser executable program code is JavaScript.

In an exemplary embodiment each content component type identifier is either a content organization type identifier or a content presentation type identifier. Preferably each code generation template corresponding to a content organization type identifier comprises a communication portion for generating browser executable program code for transmitting content requests and receiving content in response to a request a storage portion for generating browser executable program code for storing the content received in response to a content request a controller portion for generating browser executable program code for receiving user input and determining a view according to the user input and a presentation portion for generating browser executable program code for presenting the content within the mobile application interface fa ade. In such an embodiment inserting the determined URL into the code generation template copy preferably comprises inserting the determined URL into a communication portion copy of the code generation template copy.

The computer implemented method for generating a browser executable software program to present a web page as a mobile application may further comprise storing the browser executable software program receiving from a remote mobile wireless telecommunication computing device a request designating the browser executable software program and responsive to the application request transmitting the browser executable software program to the networked mobile wireless telecommunication computing device.

Referring first to a flow chart illustrating an exemplary method for generating a browser executable software program to present a web page as a mobile application is indicted generally at . At step the method receives a mobile application specification for a mobile application and at step the method automatically generates a browser executable software program from the mobile application specification. At step the method stores the browser executable software program. At step the method receives from a remote networked mobile wireless telecommunication computing device a request designating the browser executable software program and at step responsive to the request received at step the method transmits the browser executable software program to the mobile wireless telecommunication computing device. The browser executable software program resulting from step includes a mobile application interface fa ade and presents the mobile application interface fa ade as the user interface to the browser executable software program. A number of conventions have developed for the appearance and interaction features of mobile applications and the mobile application interface fa ade preferably follows one of these conventions.

Activating one of the navigation icons such as by touching it in the case of touchscreen device or selecting it with a curser or pointer will cause the content display region of the user interface to display one or more content elements of the content type indicated by that navigation icon . Thus activating a navigation icon indicating photos may cause the content display region to present a series of thumbnail images that can be selected to enlarge a corresponding image and activating a navigation icon indicating Twitter may cause the content display region to present content relating to one or more Twitter feeds. Activating one of the content elements can for example cause the content display region of the user interface to display a full screen version of the activated content element .

In some cases there may be more navigation icons than can be effectively displayed in the navigation region or more content elements than can be effectively displayed in the content display region . In such cases only a subset of navigation icons or a subset of content elements may be displayed at once and a user can reveal other navigation icons or content elements by scrolling. Similarly if a single content element is too large for the content display region only a portion may displayed and the user can scroll to access other portions of that content element .

As will be explained in more detail below the browser executable software program resulting from step of the method is not an independent software program running directly on the operating system of the remote networked mobile wireless telecommunication computing device. Rather the browser executable software program will execute within a browser running on the operating system of the remote networked mobile wireless telecommunication computing device. The browser executable software program will cause the browser to present the mobile application interface fa ade to the user preferably with the mobile application interface fa ade occupying all or substantially all of the screen without any of the browser user interface being visible. Where the mobile application interface fa ade follows the convention for mobile applications shown in it will appear to the user that he or she is using a mobile application rather than a Web page within a browser. Although it is preferred that the mobile application interface fa ade follows the convention shown in this is not necessary and the mobile application interface fa ade may present any suitable user interface.

Reference is now made to which is a schematic representation of an exemplary mobile application specification of the type received at step of the method in . The mobile application specification may be generated for example by filling out an HTML form on a remote computer system and transmitting it to the computer system that will implement the method .

The mobile application specification comprises at least one and preferably a plurality of content component type identifiers each identifying a predetermined content component type. As explained further below the system that generates browser executable software programs to present a web page as a mobile application will support certain predetermined content component types and will store a code generation template for each such content component type. The content component types comprise content organization types and content presentation types and the content component identifiers comprise content organization type identifiers A and content presentation type identifiers B each of which is described in further detail below.

The mobile application specification further comprises one or more content source identifiers with each content source identifier associated with one of the of content component type identifiers . As will be explained further below each content organization type identifier A has at least one content source identifier associated therewith and each content presentation type identifier B has either a content source identifier or content data associated therewith. Each content source identifier will identify a content source e.g. a location on the Web from which can be retrieved content according to the content component type identified by the associated content component type identifier . In the simplest case the content source identifier may be a uniform resource locator URL the content source identifier may however be any suitable identifier that enables a URL for the relevant content source to be determined. For example the content source identifier may be a Twitter handle or a Facebook name.

The mobile application specification may further comprise style information specifying aspects of the desired appearance of the web page that will be presented as a mobile application along with one or more images that may be included for example as a splash screen or as an icon. The style information and images are optional as the web page that will be presented as a mobile application may use a default style and default images.

Each content organization type identifier A identifies a particular content organization type. As used herein the term content organization type refers to a pre existing content organization scheme that is used on the Web and for which content is published according to a known application programming interface API . Depending on the particular content organization scheme a content organization type may be the entire content organization scheme or may be a portion thereof. For example content posted by users at the Facebook web site may include status updates event listings and photo albums and each of these may be treated as a separate content organization type rather than treating all Facebook content as a single content organization type.

Preferably the API for a particular content organization scheme is known because it is a published API typically in such cases the API will be published by the creator of the particular content organization scheme. For example Twitter Identi.ca Flickr Facebook Foursquare Vimeo Wufoo as well as YouTube and certain Google services all have published APIs. In other cases a content organization type may be a content organization scheme for which no official API has been published but for which a sufficiently accurate API has been empirically determined. Optionally a standardized API may be developed for use with less common content organization schemes or with content organization schemes for which there is no suitable outward facing API in such cases an extension can be installed by a content publisher to present the content according to the standardized API or the content publisher may develop and interpose a translation layer which converts from the native API of that content organization scheme into the standardized API. The use of a standardized API allows a content publisher to make their content available to be presented by an automatically generated browser executable software program as described herein.

Illustrative examples of content organization types that may be defined in association with the systems methods and computer program products described herein include but are not limited to the following 

As will be explained below in general the retrieved content for a particular content organization type will be presented by the browser executable software program resulting from the method using a predetermined presentation format. Optionally the presentation format for the retrieved content for a particular content component type may be customized and customization information associated with a particular content component type identifier may be included in the mobile application specification .

Each content presentation type identifier B identifies a particular content presentation type. A content presentation type is a presentation format for particular content typically such content is retrieved from the Web. Where a content source identifier is associated with a content presentation type identifier B the relevant content may be retrieved according to that content source identifier . Where the mobile application specification includes content data the computer system implementing the method may place that data on the Web at a known location and in a known format for later retrieval. Although both content organization types and content presentation types will result in the relevant content being presented by the browser executable software program using a predetermined presentation format content organization types focus on how the content is organized at its source while content presentation types focus on how the content is presented.

Illustrative examples of content presentation types that may be defined in association with the systems methods and computer program products described herein include but are not limited to the following 

Reference is now made primarily to which shows a flow chart illustrating in more detail an exemplary implementation of step of the method in to which shows an exemplary code generation template and to which is a schematic representation of a system for generating a browser executable software program to present a web page as a mobile application.

In the exemplary embodiment illustrated in step of the method in namely automatically generating a browser executable software program from the mobile application specification is carried out as described below.

The system stores a code generation template corresponding to each supported content component type i.e. each supported content organization type and content presentation type and these code generation templates are used to generate browser executable program code for that content component type. At step the method retrieves for each content component type identifier a copy C of a corresponding code generation template from a library of predefined code generation templates . Where only a single content component type identifier is included in the mobile application specification only a single code generation template copy C will be retrieved where the mobile application specification includes a plurality of content component type identifiers then a plurality of separate code generation template copies C will be retrieved as shown in .

At step the method determines from each content source identifier a URL for the content source identified by that content source identifier . In the simplest case the content source identifier is or includes a URL and the determination is a simple matter of extracting the URL from the content source identifier . The content source identifier may also be a unique identifier associated with a content organization type such as a Twitter handle or a Facebook name in such cases the API for that content organization type may be used to determine the URL by applying the API rules to the unique identifier.

At step the method inserts the determined URL for each content source identifier into the code generation template copy C for the content component type identifier with which that content source identifier is associated to generate populated code generation template copies C. In general there will be at least one content source identifier associated with each content organization type identifier A and there may also be additional content source identifiers associated with one or more of the content presentation type identifiers B. Some code generation template copies C may receive only a single URL while others may receive more than one this will depend on the nature of the content component type to which the code generation template corresponds.

Referring now to an exemplary code generation template is shown schematically. In the illustrated embodiment the code generation templates comprise PHP computer usable program code which when a populated copy C of the code generation template is executed outputs JavaScript computer usable program code that will form part of the browser executable software program and provide functionality within the browser of a networked mobile wireless telecommunication computing device. PHP is a general purpose scripting language suitable for Web development and JavaScript is a prototype based scripting language that can be implemented within a browser to manipulate the appearance of the browser and the Web page and thereby present a desired user interface. Other suitable general purpose scripting languages besides PHP may also be used for code generation templates such as Python Perl ASP or others or a suitable general purpose programming language such as C or C that has sufficient functionality for server side operations may also be used.

The exemplary code generation template shown in comprises a communication portion a storage portion a controller portion and a presentation portion . Generally speaking the JavaScript program code that will eventually form part of the browser executable software program is encapsulated as JavaScript program code units within the PHP program code and the PHP program code when the populated copy C of the code generation template is executed identifies the appropriate JavaScript units and assembles them. Thus for a given code generation template one or more communication JavaScript units are encapsulated within the communication portion one or more storage JavaScript units are encapsulated within the storage portion one or more controller JavaScript units are encapsulated within the controller portion and one or more presentation JavaScript units are encapsulated within the presentation portion .

The populated copy of the communication portion of each code generation template will when the populated copy C thereof is executed output communication JavaScript that will be used to transmit content requests such as HTTP get or post requests from the browser software program to the URL that was inserted into the code generation template at step of the method and to receive content in response to the content request. The URL for the content source is typically inserted into the copy of the communication portion so that the communication JavaScript outputted by the populated copy C of the code generation template can direct the content requests to the URL. The URL may be provided to the communication portion of each code generation template as a variable.

When the populated code generation template copy C is executed the copy of the storage portion included in the copy C outputs storage JavaScript that will be used to store in a memory of the networked mobile wireless telecommunication computing device the content received in response to a content request. The storage portion of each code generation template associated with a content organization type identifier A will be highly dependent on the content organization type as the storage JavaScript output by the storage portion will receive content organized according to that content organization type typically the storage JavaScript will include a data map for isolating desired elements from the returned content. For example the storage JavaScript encapsulated in the storage portion of the code generation template for a Facebook wall may be configured to identify and store only status updates and not photos or videos for example to limit storage requirements. The encapsulated storage JavaScript in the storage portion will usually be based on the API for the corresponding content organization type whether published or determined empirically or may be based on a standardized API as described above.

The copy of the controller portion of each code generation template when the populated copy C thereof is executed outputs controller JavaScript that will receive user input and determine a view according to the user input and execution of the copy of the presentation portion of the populated copy C outputs presentation JavaScript that will present the content within the mobile application interface fa ade . The presentation portion of each code generation template will also be highly dependent on the content component type either a content organization type or a content presentation type since the presentation JavaScript generated by the presentation portion will typically have to drive the browser to display the relevant content according to the relevant content component type. For example some content component types may include video or image files while other content component types may not and the presentation format on the networked mobile wireless telecommunication computing device should correspond sensibly to the presentation format of the same content on a desktop or laptop computer.

Optionally for certain content presentation types for which content data is included in the mobile application specification instead of the content data being placed on the Web at a known location and in a known format the content data can be inserted into the relevant code generation template copy C so that the content data will be embedded in the presentation JavaScript. In such cases the communication portion and the storage portion may be omitted from the code generation template for that content presentation type.

Returning now to at step the method shown in generates the browser executable software program from the populated code generation template copies C.

Steps and and may be performed in any suitable order. For example the URLs can be determined step before during or after retrieval of the code generation template copies C step and the URLs once determined may be inserted step into each code generation template copy C as it is retrieved or insertion may be delayed until all code generation template copies C have been retrieved. Similarly browser executable program code may be generated from each populated code generation template copy C immediately after insertion of the URL in that code generation template copy C or only after all code generation template copies have been populated.

Now referring specifically to in the illustrated embodiment a remote computer system transmits a mobile application specification to the system which includes a builder module for controlling generation of the browser executable software program . Although only a single builder module is shown in in other embodiments a plurality of builder modules may be used with each builder module performing one or more functions.

The builder module obtains the component type identifier s and the associated content source identifier s and or content data from the mobile application specification . For each content component type identifier in the mobile application specification the builder module retrieves a copy C of the corresponding code generation template from the library of predefined code generation templates . The builder module extracts the URL s from the content source identifiers and inserts each URL into the appropriate code generation template copy C as well as inserting any content data or a URL linking thereto into the appropriate code generation template copy C to produce populated code generation template copies C. The builder module also retrieves a copy C of a navigation container code template from a navigation container code storage and populates the navigation container code template copy C with information from the mobile application specification including for example titles for various screens and identifiers for navigation icons . The builder module then causes the populated code generation template copies C to be executed to produce JavaScript program code and embeds the JavaScript program code in the populated navigation container code template copy C.

The navigation container code template and hence the navigation container code template copy C is also JavaScript program code and defines the organization of the mobile application interface fa ade as described further below. The navigation container code defines a layout of the mobile application interface fa ade including the size shape and screen position of the navigation region content display region and information bar . As such the navigation container code comprises an initial portion and a terminal portion and the builder module inserts the JavaScript program code output from execution of the code generation template copies C between the initial portion and the terminal portion of the navigation container code template copy C to produce the completed browser executable software program in JavaScript. The builder module then stores the browser executable software program in a program library for later transmission to a requesting networked mobile wireless telecommunication computing device.

The order of execution of the code generation template copies C will determine the order in which navigation icons are arranged in the mobile application interface fa ade . Although the order of execution of the code generation template copies C may be predetermined or random preferably a desired arrangement of navigation icons is included in the mobile application specification and the desired arrangement is used to determine the order of execution of the code generation template copies C. Where there are multiple code generation template copies C the JavaScript program code output by execution of the second and each subsequent code generation template copy C is appended to the JavaScript program code output by the preceding code generation template C.

Preferably as part of the storage process the competed browser executable software program is minified for efficiency of transmission. Optionally the completed browser executable software program may be obscurified or obfuscated.

As noted above the mobile application specification may include style information specifying aspects of the desired appearance of the web page that will be presented as a mobile application along with one or more images . The style information may include specifications of size color font animation and the like. In addition the style information may also include identification of graphics for the navigation icons . For example a user may be permitted to choose from a plurality of different predefined graphics for a navigation icon corresponding to a given content component type identifier . When the mobile application specification is received the builder module obtains the style information and any images and passes them to a cascading style sheet CSS generator . The CSS generator uses the style information to determine which CSS elements to retrieve from a CSS data library . The CSS generator then uses the retrieved CSS elements along with any images to create a CSS corresponding to the browser executable software program and stores the CSS in a CSS storage . Optionally a default CSS may be used in which case the CSS generator may be omitted.

Although shows creation of only a single browser executable software program and associated CSS this is simply for ease of illustration. The system shown in may be used to create and simultaneously store a plurality of different browser executable software programs . . . and associated cascading style sheets only one of which is shown and a copy of any one of the plurality of different browser executable software programs . . . may be provided to a networked mobile wireless telecommunication computing device in response to a request designating that particular browser executable software program.

Continuing to refer to in the illustrated embodiment a networked mobile wireless telecommunication computing device which is different from the remote computer transmits a request to the system for a web page that is to be presented as a mobile application. The request is transmitted by the browser and may take the form of a URL such as www.weeverapp.com apps NAME. Typically the program library will store a plurality of different browser executable software programs . . . and NAME designates the desired browser executable software program and can be extracted from the URL and used to determine which browser executable software program . . . to return. The request is received by a delivery module which obtains a copy of an HTML template and populates it and then retrieves a copy C of the corresponding CSS and a copy C of the designated browser executable software program and integrates them into the populated copy of the HTML template to create an HTML page . The HTML page includes the CSS copy C and the browser executable software program copy C and is returned by the delivery module to the browser on the networked mobile wireless telecommunication computing device as a response to the request .

In one embodiment where the browser executable software program is intended for use on a networked mobile wireless telecommunication computing device having a touch screen the HTML page will include a reference to a suitable library of JavaScript touch screen functions. Examples of suitable libraries include Sencha Touch http www.sencha.com products touch offered by Sencha Inc. 1700 Seaport Boulevard Suite 120 Redwood City Calif. 94063 USA jQuery Mobile http jquerymobile.com and jQTouch http www.jqtouch.com . The referenced library will contain JavaScript functions that are called by the browser executable software program alternatively the required functions may be included within the JavaScript encapsulated in the code generation templates . The references to the library of JavaScript touch screen functions may be added when populating the copy of the HTML template allowing for version updates.

The HTML page returned to the browser may include an image file for use as a launch icon on a main screen of the networked mobile wireless telecommunication computing device as well as a title which can be embedded in the title tag of the HTML page . Where the browser and or operating system of the networked mobile wireless telecommunication computing device provides an inbuilt add to home screen or similar function an icon comprising the image from the image file and the title can be made to appear on the main screen of the networked mobile wireless telecommunication computing device . The icon will reference the URL that specifies the desired browser executable software program and activating this icon will in accordance with the inbuilt functionality of the browser and or operating system launch the browser if the browser is not already running and cause the browser to request the URL that specifies the desired browser executable software program .

The browser executable software program can run in any suitable browser preferably the JavaScript of the browser executable software program is configured to use the functionality of WebKit based browsers which are in common use on many networked mobile wireless telecommunication computing devices. It is within the capability of one skilled in the art now informed by the herein disclosure to adapt a JavaScript program for use in non WebKit based browsers.

The browser executable software program and hence each copy C thereof defines a mobile application interface fa ade which will preferably make the browser in which the browser executable software program is executing appear to the user as a mobile application. More particularly when executing in the browser the browser executable software program will drive the browser to present the mobile application interface fa ade as the user interface to the browser executable software program . The mobile application interface fa ade comprises a display layout structure for selectively displaying content on a screen of a networked mobile wireless telecommunication computing device.

Reference is now made to which shows the networked mobile wireless telecommunication computing device of running the browser with the browser executable software program running in the browser and presenting its mobile application interface fa ade . Preferably even though the browser executable software program is running in the browser the mobile application interface fa ade will occupy all or substantially all of the screen without any of the user interface of the browser being visible hence the browser is shown with dashed lines in . Alternatively the mobile application interface fa ade may appear within the main window not shown of the browser .

Preferably the mobile application interface fa ade follows the convention for the appearance and interaction features of mobile applications shown and described in . Thus the mobile application interface fa ade which acts as the user interface to the browser executable software program comprises a navigation region in the form of a bar extending along the bottom of the screen an information bar extending along the top of the screen and a content display region occupying the remainder of the screen between the navigation region and the information bar . Navigation icons appear within the navigation region with each navigation icon indicating a content type symbolically textually or both. One or more content elements are displayed in the content display region . Where there are more navigation icons than can be effectively displayed in the navigation region or more content elements than can be effectively displayed in the content display region only a subset are displayed and the user may scroll to access the remainder.

Each of the navigation icons corresponds to a content component type identified by one of the content component type identifiers . By activating a particular navigation icon such as by pressing on the icon in the case of a touch screen device a user can cause the browser to present content obtained using one or more URLs derived from the content source identifier s associated with the corresponding content component type identifiers . For example one or more content elements based on the content retrieved from the URL s may be displayed in the content display region in response to a selection and selection of one of the content elements may present further content retrieved from the associated URL.

Control of the browser executable software program via the mobile application interface fa ade is accomplished by the controller JavaScript communication JavaScript storage JavaScript and presentation JavaScript generated by executing the code generation template copy C corresponding to the content component type to which the navigation icon and the associated content elements correspond. Activation of the relevant navigation icon or content element is detected by the controller JavaScript. The controller JavaScript then sends a signal to the communication JavaScript and the communication JavaScript then sends a content request for the relevant content. The relevant portions of the content received in response to the content request are stored by the storage JavaScript with such storage being detected by the controller JavaScript. The controller JavaScript then notifies the presentation JavaScript which retrieves the stored content and presents it on the screen of the networked mobile wireless telecommunication computing device and may also invoke other hardware such as speakers.

Thus a browser executable software program for presenting a web page that provides the look and feel and functionality of a mobile application can be automatically generated from a mobile application specification that identifies one or more predetermined content component types and one or more associated content sources.

Each predefined code generation template for a given content organization type is based on the API published determined empirically or standardized for that content organization type as well as a desired presentation format and automatically generates JavaScript program code that appropriately requests stores and presents content according to that content organization type. Similarly each code generation template for a given content presentation type is developed based at least on the desired presentation format and automatically generates JavaScript program code that presents the data appropriately. The resulting JavaScript is then automatically embedded in a populated copy C of a JavaScript navigation container code template to create a complete browser executable software program . Thus a person wishing to create a browser executable software program to present a web page as a mobile application need not be familiar with JavaScript or any other programming language . The use of one or more predefined HTML templates that is automatically populated by the delivery module also avoids the need for this person to have any knowledge of HTML programming and the CSS generator can automatically build a CSS so as to avoid any need for this person to be familiar with CSS methodology. Accordingly the system enables a person having no familiarity with JavaScript HTML or CSS methodology to create a browser executable software program to present a web page as a mobile application. All the person needs to do is specify the particular content component types he or she wishes to use and the sources of the corresponding content and optionally provide style information and images. This information may be obtained simply by having the person fill out an HTML form on a remote computer system and transmit it to the system .

Any suitable networked mobile wireless telecommunication computing device such as a smartphone tablet computer or the like may be used in accordance with the systems methods and computer program products disclosed herein.

The methods described herein may be implemented on any suitable computer or microprocessor based system including a distributed system comprising a plurality of individual computers coupled to one another. An illustrative computer system in respect of which the methods herein described may be implemented is presented as a block diagram in . The illustrative computer system is denoted generally by reference numeral and includes a display input devices in the form of keyboard A and pointing device B computer and external devices . While pointing device B is depicted as a mouse it will be appreciated that other types of pointing device may also be used.

The computer may contain one or more processors or microprocessors such as a central processing unit CPU . The CPU performs arithmetic calculations and control functions to execute software stored in an internal memory preferably random access memory RAM and or read only memory ROM and possibly additional memory . The additional memory may include for example mass memory storage hard disk drives optical disk drives including CD and DVD drives magnetic disk drives magnetic tape drives including LTO DLT DAT and DCC flash drives program cartridges and cartridge interfaces such as those found in video game devices removable memory chips such as EPROM or PROM emerging storage media such as holographic storage or similar storage media as known in the art. This additional memory may be physically internal to the computer or external as shown in .

The computer system may also include other similar means for allowing computer programs or other instructions to be loaded. Such means can include for example a communications interface which allows software and data to be transferred between the computer system and external systems and networks. Examples of communications interface can include a modem a network interface such as an Ethernet card a wireless communication interface or a serial or parallel communications port. Software and data transferred via communications interface are in the form of signals which can be electronic acoustic electromagnetic optical or other signals capable of being received by communications interface . Multiple interfaces of course can be provided on a single computer system .

Input and output to and from the computer is administered by the input output I O interface . This I O interface administers control of the display keyboard A external devices and other such components of the computer system . The computer also includes a graphical processing unit GPU . The latter may also be used for computational purposes as an adjunct to or instead of the CPU for mathematical calculations.

The various components of the computer system are coupled to one another either directly or by coupling to suitable buses.

The methods described herein may be provided as computer program products comprising a computer readable storage medium such as non volatile memory having computer readable program code embodied therewith for executing the method.

The above systems and methods may be implemented entirely in software or by way of a combination of hardware and software. In a preferred embodiment implementation is by way of software which includes but is not limited to firmware resident software microcode and the like. Furthermore the above systems and methods may be implemented in the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. In such embodiments the computer program product may reside on a computer usable or computer readable medium in a computer such as the memory of the computer or on a computer usable or computer readable medium external to the computer or on any combination thereof.

Reference has been made herein to Joomla WordPress Twitter Identi.ca Facebook Flickr Picasa Foursquare YouTube Vimeo Wufoo and Google Calendar.

Joomla is an open source CMS that can be used to publish content to the Web. Details of Joomla are available at http www.joomla.org. WordPress is an open source CMS and blogging tool details of which can be found at http wordpress.org.

Twitter is an online social networking service through which users can post text based messages or tweets consisting of up to 140 characters. More information about Twitter is available at the official web site whose URL is http twitter.com. The open source social networking service identi.ca based on the StatusNet software tool is similar to Twitter in that users can send text updates or notices of up to 140 characters in length and provides some features presently not available in Twitter. The URL for the official identi.ca web site is http identi.ca. Because of the short message length Twitter and identi.ca are also known as micro blogging services.

Facebook is a social networking service that allows users to among other things post status updates to a personal web page or wall publicize events and post photos. The URL for the official web site for Facebook is www.facebook.com.

Picasa and Flickr as those terms are used herein refer to the web sites hosted at the URLs www.picasa.google.com and www.flickr.com respectively which are web sites that allow users to post images for viewing by others.

Foursquare is a location based social networking service for smartphones and other networked mobile wireless telecommunication computing device which enables users to check in at locations that are nearby as determined by the locating system on the networked mobile wireless telecommunication computing device e.g. GPS receiver hardware on the smartphone in . Among other features Foursquare allows users to upload photos. The URL for the official website for Foursquare is https foursquare.com.

YouTube and Vimeo are web sites that allow users to upload and view videos. The URL for the YouTube web site is http www.youtube.com and the URL for the Vimeo web site is http vimeo.com.

 Wufoo refers to a specific Web application used to build online forms which is offered by Infinity Box Inc. having an address at 12157 W. Linebaugh Ave. PMB 327 Tampa Fla. 33626 USA. The URL for the Wufoo web site is http wufoo.com.

Google Calendar is a calendar time management web application offered by Google Inc. having an address at 1600 Amphitheatre Parkway Mountain View Calif. 94043. The URL for the Google Calendar web site is https www.google.com calendar.

One or more currently preferred embodiments have been described by way of example. It will be apparent to persons skilled in the art that a number of variations and modifications can be made without departing from the scope of the claims.

