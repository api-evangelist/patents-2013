---

title: Scalable web real-time communications (WebRTC) media engines, and related methods, systems, and computer-readable media
abstract: Scalable Web Real-Time Communication (WebRTC) media engines, and related methods, systems, and computer-readable media, are disclosed herein. In one embodiment, a method for providing a scalable WebRTC media engine comprises instantiating one or more virtual WebRTC agents, each corresponding to one or more of a plurality of WebRTC clients. The method further comprises establishing a plurality of WebRTC interactive flows, each connecting one of the one or more virtual WebRTC agents with the corresponding one or more of the plurality of WebRTC clients. The method also comprises receiving contents of the plurality of WebRTC interactive flows as input from the one or more virtual WebRTC agents, and synthesizing the contents of the plurality of WebRTC interactive flows. The method additionally comprises directing the synthesized contents as output to one of more of the plurality of WebRTC interactive flows via the corresponding one or more virtual WebRTC agents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09065969&OS=09065969&RS=09065969
owner: Avaya Inc.
number: 09065969
owner_city: Basking Ridge
owner_country: US
publication_date: 20130630
---
The technology of the disclosure relates generally to Web Real Time Communications WebRTC interactive sessions.

Web Real Time Communications WebRTC represents an ongoing effort to develop industry standards for integrating real time communications functionality into web clients such as web browsers to enable direct interaction with other web clients. This real time communications functionality is accessible by web developers via standard markup tags such as those provided by version 5 of the Hypertext Markup Language HTML5 and client side scripting Application Programming Interfaces APIs such as JavaScript APIs. More information regarding WebRTC may be found in WebRTC APIs and RTCWEB Protocols of the HTML5 Real Time Web by Alan B. Johnston and Daniel C. Burnett 2012 Digital Codex LLC which is incorporated herein in its entirety by reference.

WebRTC provides built in capabilities for establishing real time video audio and or data streams in both point to point interactive sessions and multi party interactive sessions. The WebRTC standards are currently under joint development by the World Wide Web Consortium W3C and the Internet Engineering Task Force IETF . Information on the current state of WebRTC standards can be found at e.g. http www.w3c.org and http www ietf.org.

To establish a WebRTC interactive session e.g. a real time video audio and or data exchange two web clients may retrieve WebRTC enabled web applications such as HTML5 JavaScript web applications from a WebRTC application server. Through the web applications the two web clients engage in a media negotiation to communicate and reach an agreement on parameters that define characteristics of the WebRTC interactive session. This media negotiation is known as a WebRTC offer answer exchange. Once the WebRTC offer answer exchange is complete the web clients may then establish a direct peer connection with one another and may begin a real time exchange of media or data. The peer connection between the web clients typically employs the Secure Real time Transport Protocol SRTP to transport real time media flows and may utilize various other protocols for real time data interchange.

In multi party WebRTC interactive sessions each participating web client may be directly connected to every other participating web client in what is referred to as a full mesh or fully distributed architecture. However the full mesh architecture may impose significant burdens on computing resources and bandwidth utilization. Multi party WebRTC interactive sessions may also be handled by a central media server to which every web client is connected. Implementing such a central media server may pose challenges due to new media extensions employed by WebRTC as well as variations between implementations of a WebRTC media stack in different web client types and client versions.

Embodiments disclosed in the detailed description provide scalable Web Real Time Communications WebRTC media engines. Related methods systems and computer readable media are also disclosed. In some embodiments a WebRTC server through which two or more WebRTC clients seek to establish a WebRTC interactive session provides a scalable WebRTC media engine. The WebRTC media engine instantiates one or more virtual WebRTC agents and causes each of the two or more WebRTC clients to establish a WebRTC interactive flow with the one or more virtual WebRTC agents. The WebRTC media engine then synthesizes audio and or video content from the established WebRTC interactive flows and provides the resulting synthesized content to the WebRTC interactive flows via the one or more virtual WebRTC agents. In this manner the WebRTC media engine may provide synthesizing of WebRTC interactive flow content in a scalable fashion without requiring a full mesh architecture and without placing an excess burden on local computing resources.

In this regard in one embodiment a method for providing a scalable WebRTC media engine is provided. The method comprises instantiating by a WebRTC media engine executing on a computing device one or more virtual WebRTC agents each corresponding to one or more of a plurality of WebRTC clients. The method further comprises establishing a plurality of WebRTC interactive flows each connecting one of the one or more virtual WebRTC agents with the corresponding one or more of the plurality of WebRTC clients. The method also comprises receiving contents of the plurality of WebRTC interactive flows as input from the one or more virtual WebRTC agents. The method additionally comprises synthesizing the contents of the plurality of WebRTC interactive flows. The method further comprises directing the synthesized contents as output to one or more of the plurality of WebRTC interactive flows via the one or more virtual WebRTC agents.

In another embodiment a system for providing a scalable WebRTC media engine is provided. The system comprises at least one communications interface and a WebRTC server associated with the at least one communications interface. The WebRTC server comprises a WebRTC media engine configured to instantiate one or more virtual WebRTC agents each corresponding to one or more of a plurality of WebRTC clients. The WebRTC media engine is further configured to establish a plurality of WebRTC interactive flows each connecting one of the one or more virtual WebRTC agents with the corresponding one or more of the plurality of WebRTC clients. The WebRTC media engine is also configured to receive contents of the plurality of WebRTC interactive flows as input from the one or more virtual WebRTC agents. The WebRTC media engine is additionally configured to synthesize the contents of the plurality of WebRTC interactive flows. The WebRTC media engine is further configured to direct the synthesized contents as output to one or more of the plurality of WebRTC interactive flows via the one or more virtual WebRTC agents.

In another embodiment a non transitory computer readable medium is provided. The non transitory computer readable medium has stored thereon computer executable instructions to cause a processor to implement a method comprising instantiating one or more virtual WebRTC agents each corresponding to one or more of a plurality of WebRTC clients. The method implemented by the computer executable instructions further comprises establishing a plurality of WebRTC interactive flows each connecting one of the one or more virtual WebRTC agents with the corresponding one or more of the plurality of WebRTC clients. The method implemented by the computer executable instructions also comprises receiving contents of the plurality of WebRTC interactive flows as input from the one or more virtual WebRTC agents. The method implemented by the computer executable instructions additionally comprises synthesizing the contents of the plurality of WebRTC interactive flows. The method implemented by the computer executable instructions further comprises directing the synthesized contents as output to one or more of the plurality of WebRTC interactive flows via the one or more virtual WebRTC agents.

With reference now to the drawing figures several exemplary embodiments of the present disclosure are described. The word exemplary is used herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments.

Embodiments disclosed in the detailed description provide scalable Web Real Time Communications WebRTC media engines. Related methods systems and computer readable media are also disclosed. In some embodiments a WebRTC server through which two or more WebRTC clients seek to establish a WebRTC interactive session provides a scalable WebRTC media engine. The WebRTC media engine instantiates one or more virtual WebRTC agents and causes each of the two or more WebRTC clients to establish a WebRTC interactive flow with the one or more virtual WebRTC agents. The WebRTC media engine then synthesizes audio video and or data content from the established WebRTC interactive flows and provides the resulting synthesized content to the WebRTC interactive flows via the one or more virtual WebRTC agents. In this manner the WebRTC media engine may provide synthesizing of WebRTC interactive flow content in a scalable fashion without requiring a full mesh architecture and without placing an excess burden on local computing resources.

In this regard in one embodiment a method for providing a scalable WebRTC media engine is provided. The method comprises instantiating by a WebRTC media engine executing on a computing device one or more virtual WebRTC agents each corresponding to one or more of a plurality of WebRTC clients. The method further comprises establishing a plurality of WebRTC interactive flows each connecting one of the one or more virtual WebRTC agents with the corresponding one or more of the plurality of WebRTC clients. The method also comprises receiving contents of the plurality of WebRTC interactive flows as input from the one or more virtual WebRTC agents. The method additionally comprises synthesizing the contents of the plurality of WebRTC interactive flows. The method further comprises directing the synthesized contents as output to one or more of the plurality of WebRTC interactive flows via the one or more virtual WebRTC agents.

In a plurality of WebRTC interactive flows N pass between the computing device and a corresponding plurality of computing devices N . It is to be understood that the computing devices and N may all be located within the same public or private network or may be located within separate communicatively coupled public or private networks. Some embodiments of the interactive communications system of may provide that each of the computing devices and N may be any computing device having network communications capabilities such as a smartphone a tablet computer a dedicated web appliance a media server a desktop or server computer or a purpose built communications device as non limiting examples. The computing devices and N include communications interfaces and N respectively for connecting the computing devices and N to one or more public and or private networks. In some embodiments the elements of the computing devices and N may be distributed across more than one computing device and N . While shows two computing devices and N for the sake of illustration i.e. N 2 it is to be understood that the number of computing devices in embodiments of the exemplary interactive communications system may be greater than two.

The computing devices N of include WebRTC clients N respectively. Each of the WebRTC clients N may be a WebRTC enabled web browser application a dedicated communications application a mobile application or an interface less application such as a daemon or service application as non limiting examples. The WebRTC clients N implement the protocols codecs and Application Programming Interfaces APIs necessary to provide real time WebRTC interactive sessions between the computing devices N respectively and the computing device .

As seen in the computing devices N are communicatively coupled to respective audio in devices N e.g. microphones for receiving audio input and audio out devices N for example speakers or headphones for generating audio output. The computing devices N are further communicatively coupled to respective video in devices N such as cameras webcams or other video sources for receiving video input and video out devices N e.g. displays for displaying video output. The audio in devices N the audio out devices N the video in devices N and or the video out devices N may be integrated into the respective computing devices N and or they may be peripheral devices and or virtual devices communicatively coupled to the respective computing devices N . In some embodiments the computing devices N may be communicatively coupled to more or fewer devices than illustrated in .

To establish a WebRTC interactive session each of the WebRTC clients N downloads a WebRTC web application not shown from a WebRTC application provider of the WebRTC server via corresponding Hyper Text Transfer Protocol HTTP Hyper Text Transfer Protocol Secure HTTPS connections N . In some embodiments the WebRTC web application may comprise an HTML5 JavaScript web application that provides a rich user interface using HTML5 and uses JavaScript to handle user input and to communicate with the WebRTC application provider . The WebRTC clients N then engage in a WebRTC offer answer exchange by exchanging WebRTC session description objects not shown via the WebRTC application provider . The exchanged WebRTC session description objects are used to determine the media types and capabilities for the desired WebRTC interactive session.

Typically after the WebRTC offer answer exchange is complete WebRTC interactive flows are established directly between the WebRTC clients N via one or more peer connections. For example in a full mesh architecture the WebRTC clients N are all connected to each other with each of the WebRTC clients N receiving and synthesizing the WebRTC interactive flows received from the other WebRTC clients . However this may result in the consumption of significant computing resources and or network bandwidth and may provide limited scalability and compatibility between and among the WebRTC clients N .

In this regard virtual WebRTC agents X are provided by the scalable WebRTC media engine . In some embodiments the number X of virtual WebRTC agents may be less than or equal to the number N of WebRTC clients i.e. 1 X N . In the example of as the WebRTC application provider receives the WebRTC offer answer exchange from the WebRTC clients N the scalable WebRTC media engine instantiates the virtual WebRTC agents X corresponding to the WebRTC clients N . In some embodiments the scalable WebRTC media engine may instantiate the virtual WebRTC agents X by launching one or more instances of a WebRTC client such as a web browser on the computing device . Some embodiments may provide that the virtual WebRTC agents X are executed within a virtual instance of an operating system.

After instantiation the virtual WebRTC agents X are each directed by the scalable WebRTC media engine to download a virtual WebRTC application not shown from a virtual WebRTC application provider . Some embodiments may provide that the virtual WebRTC application provider is communicatively coupled to the scalable WebRTC media engine . In some embodiments the virtual WebRTC application provider may be integrated into or otherwise constitute an element of the scalable WebRTC media engine and or the WebRTC application provider . The virtual WebRTC application includes specialized instructions for interfacing with the WebRTC APIs of the virtual WebRTC agents X . The virtual WebRTC agents X may communicate via the virtual WebRTC application with the WebRTC clients N respectively and with the scalable WebRTC media engine .

The scalable WebRTC media engine causes the virtual WebRTC agents X to establish the WebRTC interactive flows N with the corresponding WebRTC clients N . In doing so the scalable WebRTC media engine and or the virtual WebRTC agents X may modify the data being passed between the WebRTC clients N to facilitate the establishment of the WebRTC interactive flows N . For example data related to the location and or identity of the endpoints of each of the WebRTC interactive flows N may be modified to permit the virtual WebRTC agents X to act as proxies for their corresponding WebRTC clients N .

Once the WebRTC interactive flows N are established the scalable WebRTC media engine receives content of the WebRTC interactive flows N as input from the virtual WebRTC agents X . In some embodiments the scalable WebRTC media engine provides virtual audio receivers Rx X virtual video receivers X and or virtual data receivers X to which the corresponding virtual WebRTC agents X are communicatively coupled. As the WebRTC interactive flows N commence the virtual WebRTC agents X forward audio signals received from the corresponding WebRTC interactive flows N to the virtual audio receivers X . The virtual WebRTC agents X also forward video signals received from the corresponding WebRTC interactive flows N to the virtual video receivers X and forward data received from the corresponding WebRTC interactive flows N to the virtual data receivers X .

The scalable WebRTC media engine then synthesizes the content of the WebRTC interactive flows N received from the virtual WebRTC agents X . Some embodiments may provide that the synthesizing of the content of the WebRTC interactive flows N is carried out by a media synthesizing functionality provider of the scalable WebRTC media engine . Synthesizing the content of the WebRTC interactive flows N may include selectively combining audio video and or data content of the WebRTC interactive flows N to generate synthesized content. Synthesizing the content of the WebRTC interactive flows N may also include generating and adding audio video and or data content to the content of the WebRTC interactive flows N . For example the scalable WebRTC media engine may inject content into the WebRTC interactive flows N by adding content to an input from the virtual audio receivers X the virtual video receivers X and or the virtual data receivers X . In some embodiments synthesizing the content of the WebRTC interactive flows N may include applying an audio processing algorithm. As non limiting examples an N loudest algorithm i.e. including the N loudest participants in the audio content a loudest and longest algorithm prioritizing audio sources that are loudest or that have been generating output for the longest amount of time or an N 1 algorithm including all audio sources except those associated with a receiving endpoint or combinations thereof may be applied to an audio content of the WebRTC interactive flows N . Some embodiments may provide that synthesizing the contents of the plurality of WebRTC interactive flows may include selecting a video content of one or more of the plurality of WebRTC interactive flows combining video contents of two or more of the plurality of WebRTC interactive flows modifying a video content of one or more of the plurality of WebRTC interactive flows or combinations thereof. According to some embodiments disclosed herein custom synthesized content may be generated for specific ones of the virtual WebRTC agents X and or the WebRTC clients N .

The synthesized content is then directed by the scalable WebRTC media engine as output to the WebRTC interactive flows N via the virtual WebRTC agents X . In some embodiments the media synthesizing functionality provider is configured to direct the synthesized content to virtual audio transmitters Tx X virtual video transmitters X and or virtual data transmitters X to which the corresponding virtual WebRTC agents X are communicatively coupled.

In the example of the virtual WebRTC agents X are instantiated by the scalable WebRTC media engine . This arrangement may be useful in circumstances in which the WebRTC clients N are known to be incompatible or to have limited compatibility. As a non limiting example the WebRTC clients N may be web browsers having differing levels of support for the WebRTC APIs. To remedy such incompatibilities the specific client type and or client version of one or more of the WebRTC clients N may be determined by the WebRTC application provider and or the scalable WebRTC media engine . In some embodiments the client type and or client version of one or more of the WebRTC clients N may be determined based on data received as part of a WebRTC offer answer exchange a query response exchange between the scalable WebRTC media engine and the WebRTC clients N an HTTP header or other data provided by the WebRTC clients N . The scalable WebRTC media engine may then instantiate the virtual WebRTC agents X having a client type and or version corresponding to the client type and or version of the respective WebRTC clients N . As a result because each of the WebRTC clients N directly communicates with a virtual WebRTC agent of the same type and version incompatibilities between the WebRTC clients N may be resolved.

Conversely in situations in which the WebRTC clients N are known to be compatible the scalable WebRTC media engine may provide a WebRTC interactive session between the WebRTC clients N using a single virtual WebRTC agent. Providing a single virtual WebRTC agent may conserve computing resources of the computing device and further increase the scalability of the WebRTC server . This embodiment is discussed in greater detail below with respect to .

To generally describe exemplary operations of the scalable WebRTC media engine of for providing the virtual WebRTC agents X is provided. For the sake of clarity elements of are referenced in describing . In the example of operations begin with the scalable WebRTC media engine instantiating one or more virtual WebRTC agents X each corresponding to one or more of a plurality of WebRTC clients N block . Some embodiments may provide that a single virtual WebRTC agent is instantiated if the plurality of WebRTC clients N is determined to be compatible. In some embodiments a virtual WebRTC agent may be established for each of the plurality of WebRTC clients N if the plurality of WebRTC clients N is determined to be incompatible. As a non limiting example the scalable WebRTC media engine may instantiate the one or more virtual WebRTC agents X by launching one or more instances of a WebRTC client such as a web browser on the computing device .

The scalable WebRTC media engine then establishes a plurality of WebRTC interactive flows N each connecting one of the one or more virtual WebRTC agents X with a corresponding one or more of the plurality of WebRTC clients N block . According to some embodiments herein the scalable WebRTC media engine and or the virtual WebRTC agents X may modify the data being passed between the WebRTC clients N to facilitate the establishment of the WebRTC interactive flows N . For example data relating to the location and or identity of the endpoints of each of the WebRTC interactive flows N may be modified to permit the virtual WebRTC agents X to act as proxies for their corresponding WebRTC clients N .

The scalable WebRTC media engine next receives contents of the plurality of WebRTC interactive flows N as input from the one or more virtual WebRTC agents X block . In some embodiments this may be accomplished through the use of virtual audio receivers virtual video receivers and virtual data receivers provided by the scalable WebRTC media engine as illustrated in . The WebRTC media engine then synthesizes the contents of the plurality of WebRTC interactive flows N block . Some embodiments may provide that the synthesizing of the contents of the WebRTC interactive flows N is carried out by a media synthesizing functionality provider of the scalable WebRTC media engine . Synthesizing the contents of the WebRTC interactive flows N may include selectively combining audio video and or data content of the WebRTC interactive flows N to generated synthesized content.

The scalable WebRTC media engine then directs the synthesized contents as output to the plurality of WebRTC interactive flows N via the one or more virtual WebRTC agents X block . Some embodiments may provide that the scalable WebRTC media engine directs the synthesized content using virtual audio transmitters X virtual video transmitters X and or virtual data transmitters X to which the corresponding virtual WebRTC agents X are communicatively coupled. Thus the scalable WebRTC media engine may provide synthesizing of content from the plurality of WebRTC interactive flows N in an efficient and scalable manner while automatically resolving any potential incompatibility issues between the plurality of WebRTC clients N .

To illustrate exemplary communications flows during the establishment of a WebRTC interactive session using the virtual WebRTC agents X of is provided. In the WebRTC client the virtual WebRTC agent the WebRTC server the virtual WebRTC agent X and the WebRTC client N of are each represented by vertical dotted lines. It is to be understood that the WebRTC server includes the WebRTC application provider and the scalable WebRTC media engine which for the sake of clarity are omitted from this example. It is to be further understood for this example that the WebRTC clients and N have each downloaded a WebRTC enabled web application such as an HTML5 JavaScript WebRTC application from the WebRTC server .

As seen in the establishment of a WebRTC interactive session via the virtual WebRTC agents and X begins with the WebRTC client N sending a session description object SDP to the WebRTC server in this example via an HTTPS connection . The WebRTC session description object is referred to as SDP Object A and is indicated by arrow . SDP Object A represents the offer in a WebRTC offer answer exchange and specifies the media types and capabilities that the WebRTC client N supports and prefers for use in the WebRTC interactive session.

The WebRTC server i.e. the scalable WebRTC media engine instantiates the virtual WebRTC agent X corresponding to the WebRTC client N as indicated by arrow . In some embodiments a client type and or a client version of the WebRTC client N may be determined based on the SDP Object A a query response exchange between the scalable WebRTC media engine and the WebRTC client N an HTTP header or other data provided by the WebRTC client N . The virtual WebRTC agent X may be instantiated having a client type and or a client version that is known to be compatible with the WebRTC client N . The WebRTC server then forwards the SDP Object A to the WebRTC client as indicated by arrow .

After the WebRTC client receives the SDP Object A from the WebRTC server the WebRTC client in response sends a WebRTC session description object referred to as SDP Object B via HTTPS to the WebRTC server as indicated by arrow . The SDP Object B in this example represents the answer in the WebRTC offer answer exchange. The WebRTC server then instantiates the virtual WebRTC agent corresponding to the WebRTC client as indicated by arrow . Some embodiments may provide that a client type and or a client version of the WebRTC client may be determined based on the SDP Object B a query response exchange between the scalable WebRTC media engine and the WebRTC client an HTTP header or other data provided by the WebRTC client . The virtual WebRTC agent may be instantiated having a client type and or a client version known to be compatible with the WebRTC client . The WebRTC server in turn forwards the SDP Object B to the WebRTC client N as shown by arrow .

With continuing reference to the WebRTC clients and N then begin hole punching to determine the best way to establish direct communications with the virtual WebRTC agents and X respectively. This is indicated by bidirectional arrows and in . Hole punching is a technique often using protocols such as Interactive Connectivity Establishment ICE in which both of the WebRTC clients and N establish a connection with an unrestricted third party server not shown that uncovers external and internal address information for use in direct communications.

Once the ICE hole punching indicated by arrows and is successful the WebRTC clients and N begin key negotiations to establish a secure peer connection. In a typical peer to peer architecture the key negotiations take place directly between the WebRTC clients and N . However in this example each of the WebRTC clients and N negotiates with its corresponding virtual WebRTC agent and X as indicated by bidirectional arrows and . If key negotiations are successfully concluded peer connections are established between the WebRTC client and the virtual WebRTC agent and between the WebRTC client N and the virtual WebRTC agent X as indicated by bidirectional arrows and .

Upon establishing peer connections with their corresponding virtual WebRTC agents and X the WebRTC clients and N begin exchanging WebRTC media and or data flows. As seen in the WebRTC media and or data flows pass from the WebRTC clients and N to their respective virtual WebRTC agents and X as indicated by bidirectional arrows and . The virtual WebRTC agents and X then send the content of the WebRTC interactive flows and N to the WebRTC server as shown by bidirectional arrows and . The WebRTC server synthesizes the contents of the WebRTC interactive flows and N and directs the synthesized contents to the virtual WebRTC agents and X as indicated by bidirectional arrows and . The virtual WebRTC agents and X then forward the synthesized contents to the corresponding WebRTC clients and N as shown by arrows and . In this manner the WebRTC server may selectively synthesize the contents of the WebRTC interactive flows N and provide the synthesized contents to the WebRTC clients and N .

As noted above with respect to the scalable WebRTC media engine may enable a WebRTC interactive session between the WebRTC clients N using a single virtual WebRTC agent if the WebRTC clients N are known to be compatible. To illustrate this embodiment is provided. In the exemplary interactive communications system of is shown. In this example however it is assumed that the WebRTC clients N are known to be compatible. For instance the WebRTC clients N may be WebRTC enabled web browsers of the same type and version. Thus in the embodiment of the scalable WebRTC media engine instantiates a single virtual WebRTC agent to which the WebRTC clients N may connect. The virtual WebRTC agent downloads a virtual WebRTC application not shown from the virtual WebRTC application provider at the direction of the scalable WebRTC media engine . The virtual WebRTC application may contain specialized instructions for enabling the virtual WebRTC agent to communicate with the WebRTC clients N and with the scalable WebRTC media engine . In some embodiments the virtual WebRTC application may enable the scalable WebRTC media engine to control how the virtual WebRTC agent directs audio video and or data content to the WebRTC clients N .

In the example of the scalable WebRTC media engine causes the virtual WebRTC agent to establish the WebRTC interactive flows N with the WebRTC clients N . The virtual WebRTC agent may then employ its built in WebRTC APIs to direct contents of the WebRTC interactive flows N to the media synthesizing functionality provider of the scalable WebRTC media engine for synthesizing. In some embodiments the virtual WebRTC agent may provide media synthesizing functionality itself using the WebRTC APIs. After synthesizing the virtual WebRTC agent may direct a resulting synthesized content from the scalable WebRTC media engine into the WebRTC interactive flows N .

In processing begins with the scalable WebRTC media engine determining a client type and or a client version of a first WebRTC client and a second WebRTC client N block . Some embodiments may provide that this determination may be made based on a WebRTC offer answer exchange on an HTTP header or on other data provided by the WebRTC clients and or N . Based on the client type and or the client version the scalable WebRTC media engine determines whether the first WebRTC client and the second WebRTC client N are known to be compatible block .

If the first WebRTC client and the second WebRTC client N are determined to be compatible the scalable WebRTC media engine may enable a WebRTC interactive session between the first WebRTC client and the second WebRTC client N using a single virtual WebRTC agent as discussed above with respect to . Accordingly the scalable WebRTC media engine instantiates a virtual WebRTC agent that is compatible with both the first WebRTC client and the second WebRTC client N block . As a non limiting example the scalable WebRTC media engine may execute a WebRTC client of the same client type and or version as the first WebRTC client and or the second WebRTC client N . The scalable WebRTC media engine then establishes a first WebRTC interactive flow between the first WebRTC client and the virtual WebRTC agent block . The scalable WebRTC media engine also establishes a second WebRTC interactive flow N between the second WebRTC client N and the virtual WebRTC agent block . Processing then resumes at block of .

Returning to decision block of if the scalable WebRTC media engine determines that the first WebRTC client and the second WebRTC client N are not fully compatible the scalable WebRTC media engine may enable a WebRTC interactive session between the first WebRTC client and the second WebRTC client N using two virtual WebRTC agents and X as discussed above with respect to . Accordingly processing resumes at block of . The scalable WebRTC media engine instantiates the first virtual WebRTC agent that is compatible with the first WebRTC client block . The scalable WebRTC media engine also instantiates the second virtual WebRTC agent X that is compatible with the second WebRTC client N block . In some embodiments the virtual WebRTC agents and X have a same client type and or client version as the WebRTC clients and N respectively.

The scalable WebRTC media engine then establishes a first WebRTC interactive flow between the first WebRTC client and the first virtual WebRTC agent block . The scalable WebRTC media engine also establishes a second WebRTC interactive flow N between the second WebRTC client N and the second virtual WebRTC agent X block . Because each of the first WebRTC client and the second WebRTC client N are interacting directly with their respective compatible virtual WebRTC agents and X no compatibility issues should arise with respect to the WebRTC interactive flows and N . Processing then resumes at block of .

Referring now to the scalable WebRTC media engine receives contents of the WebRTC interactive flows and N as input from the virtual WebRTC agents and X or from the virtual WebRTC agent as appropriate block . In some embodiments this may be accomplished through the use of virtual audio receivers virtual video receivers and virtual data receivers provided by the scalable WebRTC media engine as illustrated in . The scalable WebRTC media engine then synthesizes the contents of the WebRTC interactive flows and N block . Synthesizing the content of the WebRTC interactive flows and N may include selectively combining audio video and or data content of the WebRTC interactive flows and N to generate synthesized content.

The scalable WebRTC media engine then directs the synthesized contents as output to the WebRTC interactive flows and N via the virtual WebRTC agents and X or the virtual WebRTC agent as appropriate block . Some embodiments may provide that the scalable WebRTC media engine directs the synthesized content using virtual audio transmitters virtual video transmitters and or virtual data transmitters to which the corresponding virtual WebRTC agents X are communicatively coupled. The scalable WebRTC media engine next determines whether there are at least two active WebRTC interactive flows among the WebRTC interactive flows and N block . If the WebRTC interactive flows and N are still active processing returns to block of . Otherwise the scalable WebRTC media engine terminates the remaining active WebRTC interactive flow or N as appropriate block .

The exemplary computer system includes a processing device or processor a main memory as non limiting examples read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. and a static memory as non limiting examples flash memory static random access memory SRAM etc. which may communicate with each other via a bus . Alternatively the processing device may be connected to the main memory and or the static memory directly or via some other connectivity means.

The processing device represents one or more processing devices such as a microprocessor central processing unit CPU or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor a reduced instruction set computing RISC microprocessor a very long instruction word VLIW microprocessor a processor implementing other instruction sets or a processor implementing a combination of instruction sets. The processing device is configured to execute processing logic in instructions and or cached instructions for performing the operations and steps discussed herein.

The computer system may further include a communications interface in the form of a network interface device . It also may or may not include an input to receive input and selections to be communicated to the computer system when executing the instructions . It also may or may not include an output including but not limited to display s . The display s may be a video display unit as non limiting examples a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device as a non limiting example a keyboard a cursor control device as a non limiting example a mouse and or a touch screen device as a non limiting example a tablet input device or screen .

The computer system may or may not include a data storage device that includes using drive s to store the functions described herein in a computer readable medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The functions can include the methods and or other functions of the processing system a participant user device and or a licensing server as non limiting examples. The one or more sets of instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system . The main memory and the processing device also constitute machine accessible storage media. The instructions and or may further be transmitted or received over a network via the network interface device . The network may be an intra network or an inter network.

While the computer readable medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media as non limiting examples a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions . The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions and or for execution by the machine and that cause the machine to perform any one or more of the methodologies disclosed herein. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

The embodiments disclosed herein may be embodied in hardware and in instructions that are stored in hardware and may reside as non limiting examples in Random Access Memory RAM flash memory Read Only Memory ROM Electrically Programmable ROM EPROM Electrically Erasable Programmable ROM EEPROM registers a hard disk a removable disk a CD ROM or any other form of computer readable medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an Application Specific Integrated Circuit ASIC . The ASIC may reside in a remote station. In the alternative the processor and the storage medium may reside as discrete components in a remote station base station or server.

It is also noted that the operational steps described in any of the exemplary embodiments herein are described to provide examples and discussion. The operations described may be performed in numerous different sequences other than the illustrated sequences. Furthermore operations described in a single operational step may actually be performed in a number of different steps. Additionally one or more operational steps discussed in the exemplary embodiments may be combined. It is to be understood that the operational steps illustrated in the flow chart diagrams may be subject to numerous different modifications as will be readily apparent to one of skill in the art. Those of skill in the art would also understand that information and signals may be represented using any of a variety of different technologies and techniques. As non limiting examples data instructions commands information signals bits symbols and chips that may be referenced throughout the above description may be represented by voltages currents electromagnetic waves magnetic fields or particles optical fields or particles or any combination thereof.

The previous description of the disclosure is provided to enable any person skilled in the art to make or use the disclosure. Various modifications to the disclosure will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other variations without departing from the spirit or scope of the disclosure. Thus the disclosure is not intended to be limited to the examples and designs described herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

