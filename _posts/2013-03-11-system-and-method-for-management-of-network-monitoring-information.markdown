---

title: System and method for management of network monitoring information
abstract: A system and method for management of network monitoring information includes a data collector for collecting real-time network information from network switching units, an aggregator for periodically aggregating the collected real-time network information and generating corresponding history information, a preprocessor for periodically determining results for first queries based on the collected real-time network information and the history information, a data storage system, and a data retriever for retrieving information from the data storage system. The data storage system stores the collected real-time network information, the aggregated history information, and the preprocessed results of the first queries. The data storage system also periodically purges the stored real-time information based on a first time-to-live value and the stored history information based on a second time-to-live value. The information is retrieved based on the stored real-time network and history information, the stored preprocessed results of the first queries, the first queries, and second queries different from the first queries.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09210053&OS=09210053&RS=09210053
owner: DELL PRODUCTS L.P.
number: 09210053
owner_city: Round Rock
owner_country: US
publication_date: 20130311
---
The present disclosure relates generally to information handling systems and more particularly to management of network monitoring information.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option is an information handling system IHS . An IHS generally processes compiles stores and or communicates information or data for business personal or other purposes. Because technology and information handling needs and requirements may vary between different applications IHSs may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in IHSs allow for IHSs to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition IHSs may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

Additionally some embodiments of information handling systems include non transient tangible machine readable media that include executable code that when run by one or more processors may cause the one or more processors to perform the steps of methods described herein. Some common forms of machine readable media include for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM any other memory chip or cartridge and or any other medium from which a processor or computer is adapted to read.

Computer networks form the interconnection fabric that enables reliable and rapid communications between computer systems and data processors that are in both close proximity to each other and at distant locations. These networks create a vast spider web of intranets and internets for handling all types of communication and information. Making all of this possible is a vast array of network switching products that make forwarding decisions in order to deliver packets of information from a source system or first network node to a destination system or second network node. Due to the size complexity and dynamic nature of these networks sophisticated network switching products are often required to continuously make forwarding decisions and to update forwarding information as network configurations change. In order to recognize and or adapt to changing conditions in the network it may be helpful to monitor network activity.

Accordingly it would be desirable to provide improved systems and methods for managing network monitoring information.

According to one embodiment a information handling system includes a data collector configured to collect real time network monitoring information from one or more network switching units an aggregator configured to periodically aggregate the collected real time network monitoring information and generate corresponding history information a preprocessor configured to periodically determine results for one or more first queries based on the collected real time network monitoring information and the aggregated history information a data storage system and a data retriever configured to retrieve information from the data storage system. The data storage system is configured to store the collected real time network monitoring information the aggregated history information and the preprocessed results of the one or more first queries. The data storage system is further configured to periodically purge the stored real time monitoring information based on a first time to live value and periodically purge the stored history information based on a second time to live value. The information is retrieved from the data storage system based on the stored real time network monitoring information the stored aggregated history information the stored preprocessed results of the one or more first queries the one or more first queries and one or more second queries different from the one or more first queries.

According to another embodiment a method of managing network monitoring information includes collecting real time network monitoring information from one or more network switching units periodically aggregating the collected real time network monitoring information and generating corresponding history information periodically determining results for one or more first queries based on the collected real time network monitoring information and the aggregated history information storing the collected real time network monitoring information storing the aggregated history information storing the preprocessed results of the one or more first queries in a data storage system retrieving information from the data storage system periodically purging the stored real time monitoring information based on a first time to live value and periodically purging the stored history information based on a second time to live value. The information is retrieved from the data storage system based on the stored real time network monitoring information the stored aggregated history information the stored preprocessed results of the one or more first queries the one or more first queries and one or more second queries different from the one or more first queries.

In the following description specific details are set forth describing some embodiments consistent with the present disclosure. It will be apparent however to one skilled in the art that some embodiments may be practiced without some or all of these specific details. The specific embodiments disclosed herein are meant to be illustrative but not limiting. One skilled in the art may realize other elements that although not specifically described here are within the scope and the spirit of this disclosure. In addition to avoid unnecessary repetition one or more features shown and described in association with one embodiment may be incorporated into other embodiments unless specifically described otherwise or if the one or more features would make an embodiment non functional.

For purposes of this disclosure an IHS may include any instrumentality or aggregate of instrumentalities operable to compute classify process transmit receive retrieve originate switch store display manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control entertainment or other purposes. For example an IHS may be a personal computer a PDA a consumer electronic device a display device or monitor a network server or storage device a switch router or other network communication device or any other suitable device and may vary in size shape performance functionality and price. The IHS may include memory one or more processing resources such as a central processing unit CPU or hardware or software control logic. Additional components of the IHS may include one or more storage devices one or more communications ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse and a video display. The IHS may also include one or more buses operable to transmit communications between the various hardware components.

According to some embodiments data collector may use any of numerous network monitoring tools. Merely by way of example capabilities and features of data collector will be discussed in the context of one such tool sFlow. In some examples other network monitoring tools may be substituted for sFlow. sFlow is a tool for monitoring network wireless and or host devices including network switching devices. sFlow may use sampling to achieve scalability of monitoring in high speed networks such as the network . In some examples sFlow may use random sampling of packets in network traffic and or network flows. In some examples sFlow may use periodic sampling of counters. In some examples the counters may count network events and or network activity. These random and counter samples may be sent to a server which is often referred to as a sFlow collector. In some examples the sFlow collector may be the data collector . In some examples the samples may be sent using packets and or datagrams. During operation the sFlow collector may constantly receive the sFlow packets analyze information associated with the sFlow samples included in the sFlow packets and generate reports based on the information associated with the sFlow samples.

According to some embodiments sFlow samples may be used to discover interesting network characteristics. In some examples sFlow may be used to troubleshoot network problems by detecting abnormal traffic patterns and or controlling network congestion by identifying congested network links. In some examples sFlow may be used to audit and or analyze network security by detecting unknown sources in the sFlow samples. In some examples sFlow may be used to profile routes by detecting the most active routes and specific flows carried by the routes based on forwarding information included in the sFlow samples. In some examples sFlow may support accounting and billing by determining network usage from the sFlow samples.

According to some embodiments a significant quantity of data may need to be captured by the sFlow collector despite the use of sampling. In some examples the quantity of data may require a large amount of resources to capture and analyze the sFlow samples. In some examples the monitoring and sampling requirements for a single port such as one of the one or more ports may be large. In some examples when a single 10 Gbit port with a 70 input and output utilization uses a sampling rate of 512 25 sFlow packets are generated with each sFlow packet including 1400 bytes. Monitoring of this single port by the sFlow collector requires the collector to capture and analyze 25 1400 35 000 bytes per second. In some examples when this single port is representative of other ports in a data center which includes 1000 switches with each switch including 48 ports a total amount of data includes 25 48 1000 1.2 million samples per second and 25 48 1000 1400 bytes per second which is over 1.5 Gbytes per second of data. In some examples the large number of samples and quantity of data may be problematic for most data storage systems including relational databases.

According to some embodiments the sFlow samples and corresponding data include several features that may still permit the capture and analysis of sFlow samples for an entire data center. In some examples the sFlow data may be flat. There are typically no complex relationships between the sFlow data from several sFlow samples even those sFlow samples from a same switch or port. In some examples this means that a relational database may not be needed to capture and analyze the sFlow samples. In some examples the capture and analysis of sFlow data may only require insertion deletion and query operations. In some examples this means that no update operation may be required thus avoiding overhead associated with transactions in relational databases. According to some embodiments these features of the sFlow data may make Not Only SQL NoSQL a suitable data storage and retrieval option for network monitoring using sFlow.

In some examples each managed object using the NoSQL schema may be described using a three part shorthand. A first part of the shorthand includes the row key as represented by a Rkey . A second part of the shorthand includes the column family key and value as represented by a notation of cf key value . This identifies a value for the key in the column family cf. A third part of the shorthand includes the time stamp as represented by a ts .

NoSQL has shown some success in applications working with large datasets having flat data and no update operation requirement including applications working with event recording datasets. However these applications have been typically limited to batch processing applications that are mining and or warehousing data. According to some embodiments additional capabilities may be needed to provide real time and or near real time analysis of network monitoring information.

The distributed storage system includes a master server a standby master server and one or more region servers . In some examples the distributed storage system may be implemented using a Hadoop Distributed File System HDFS . In some examples the master server may be a name node the standby master server may be a standby name node and the one or more region servers may each be data nodes. The master server is a primary server for receiving requests to store and or retrieve data from the distributed storage system . The standby master server serves as a backup for the master server . In the distributed storage system the master server distributes the storage and retrieval of data to the one or more region servers . In some examples each of the one or more region servers may include persistent storage. Some common forms of persistent storage include for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM DVD ROM any other optical medium RAM PROM EPROM FLASH EPROM any other memory chip or cartridge and or any other medium from which a processor or computer is adapted to read from and write data to. In some examples use of the storage API to access the master server may result in the master server delegating some or all of storage API operation to the one or more region servers .

The column entry is a composite of a column family a key and a value for the managed object. In some examples the column entry may be analogous to the shorthand . In the NoSQL schema managed objects may belong to one of two column families. A real time column family abbreviated r is associated with real time metrics associated with sFlow samples as shown by a representative real time column entry . A history column family abbreviated h is associated with aggregated metrics based on multiple sFlow samples as shown by a representative history column entry . The real time column entry includes the r designation for the real time column family as well as a metricID and a value. The metricID identifies the metric that is associated with the real time column entry and the value is the value of the metric. In some examples a source IP address from a sample packet may be recorded as r IpSrc 1.2.3.4 and a TCP source port number as r TcpSrc 8080 .

The history column entry includes the h designation for the history column family as well as a metricID an aggType and a value. The metricID identifies the metric that is associated with the history column entry the aggType identifies a type of aggregation and the value is an aggregated value of the metric. In some examples the type of aggregation may include Min Max Average Count Sum and the like. In some examples the Min Max and Average aggregation types may be used with interface metrics such as ifInErrors ifOutErrors ifInOctets and ifOutOctets. In some examples when real time metrics from the real time column family are aggregated over a time period aggregations using the Min Max and Average operations may be computed over the time period. In some examples the time period may be any reasonable time period including 1 minute 5 minutes 10 minutes 15 minutes 30 minutes and the like. In some examples aggregations for the ifInOctets metric may be recorded as h ifInOctets MIN 0 h ifInOctets MAX 50 and h ifInOctets AVG 22 . In some examples the Count aggregation type may be used to count occurrences. In some examples aggregations for IpSrc and TcpSrc may be recorded as h IpSrc1.2.3.4 CNT 1357 and h TcpSrc8080 CNT 68 respectively to record 1357 occurrences of the IP source address 1.2.3.4 and 68 occurrences of the TCP port 8080 during the aggregation time period.

According to some embodiments use of the NoSQL schema may provide several advantages. In some examples the row key may be used by the distributed storage system to select a region server from among the one or more region servers to store the managed object. In some examples using the deviceIp and ifIndex in the leading position of the row key may result in more even distribution of the sFlow information across the one or more region servers . In some examples a short column family e.g. r and h and or key e.g. TcpSrc may speed up indexing of the managed objects during data insertion. In some examples a short column family and or key may also facilitate efficient retrieval of the managed objects. In some examples separating real time sFlow information from aggregated history sFlow information into separate column families e.g. real time and history may support a more flexible data retention policy as the separate column families may be managed separately. In some examples the separate column families may improve retrieval time by separating real time information from aggregated history information.

Referring back to the network monitoring system further includes a data retriever for retrieving data from the distributed storage system . In some examples the data retriever may be coupled to a computer and or terminal to allow a user to request retrieval of data from the distributed storage system and to view the retrieved data. In some examples the computer may include a graphical user interface GUI that allows the user to select and or create queries and or reports. The data retriever may access the data in the distributed storage system using a query API . In some examples the data retriever and the query API may provide support for both static and dynamic queries.

In some examples static queries may include commonly used queries that are known and or anticipated when the data retriever is developed. In some examples the static queries may be built into the data retriever . In addition because the static queries are known in advance a preprocessor may be used to pre compute results of the static queries before the static queries are requested. In some examples the user may often be interested in the real time and historical throughput for ports of various switches. In some examples the user may want a daily report of the top 10 TCP port occurrences over the previous 24 hours. In some examples when a static query is requested the data retriever and the query API may retrieve some or all results of the static query directly from a pre computed query results stored in the distributed storage system .

In some examples dynamic queries may include queries that are not known until run time. In some examples the user may create the queries using the GUI. In some examples a dynamic query might include a request for the top 25 TCP port occurrences in the past 21 days. In some examples the dynamic queries may be sent to the distributed storage system using the query API . In some examples the query API may include a filter API that can match managed objects stored in the distributed storage system to a dynamic query. In some examples the distributed storage system and or the query API may provide enhancements that use the distributed nature of the distributed storage system to improve a response time of dynamic queries. In some examples a series of inter related stored procedures dynamic remote procedure call RPC extensions and or endpoints may be deployed on the master server the standby master server and or the one or more region servers . When a query is sent to the master server the master server may distribute processing for the query to each of the one or more region servers . In some examples endpoints may be deployed on the master server the standby master server and or the one or more region servers that count the number of instances of a particular filter pattern e.g. getCount Filter filter . Each of the one or more region servers may include a first version of getCount that simply counts a number of matching instances in the managed objects stored in the corresponding region server and return the count. The master server and the standby master server may include a second version of getCount that triggers getCount in all of the one or more region servers and then computes a total of all the returned results. In some examples the distributed processing of the query may be supported by the Apache HBase EndPoint and Co processor APIs.

According to some embodiments the data retriever may support queries related to automated network monitoring. In some examples the supported network monitoring may include detecting abnormal traffic patterns controlling network congestion analyzing network security profiling routes supporting billing and accounting and the like. In some examples the automated network monitoring queries may be triggered periodically based on a timer.

The preprocessor may use a map reduce interface to periodically pre compute the results of static queries. In some examples the preprocessor may be triggered using a periodic timer. In some examples the preprocessor may access the distributed storage system when the distributed storage system is under utilized and or idle. In some examples to support the top 10 TCP source port occurrences in the previous 24 hours static query the preprocessor using the map reduce interface may periodically scan the real time and or history column families to obtain corresponding managed objects compute the results of the query and store the results into a corresponding results table in the distributed storage system . When the data retriever later executes the static query the query API may be used to retrieve the results of the query from the corresponding results table.

The network monitoring system further includes an aggregator . The aggregator may use a map reduce interface to periodically aggregate real time data in the real time column family into the history column family and stored in the distributed storage system . In some examples the aggregator may be triggered using a periodic timer. In some examples the aggregator may access the distributed storage system when the distributed storage system is under utilized and or idle. In some examples the periodic timer may trigger aggregation of the real time data using any reasonable aggregation period including 1 minute 5 minutes 10 minutes 15 minutes 30 minutes and the like. In some examples the aggregator may improve responsiveness to queries in a fashion similar to the preprocessor . By periodically computing the aggregations queries may access the aggregations in the history column family faster than the aggregations could be recomputed at the time of the respective queries by using only real time managed objects which are much larger in number. In some examples use of the aggregator may provide other efficiencies to the network monitoring system . In some examples real time information may only be needed for a short period of time. As the real time information ages its direct usefulness may be reduced and may be replaced by the aggregated information in the history column family. Thus periodic use of the aggregator may support purging of any real time information older than the most recent data aggregation period. In some examples the data aggregation period may be any reasonable aggregation period including 1 minute 5 minutes 10 minutes 15 minutes 30 minutes and the like.

The network monitoring system further includes a data purger . The data purger may use a deletion API to periodically remove unwanted and or unneeded managed objects stored in the distributed storage system . In some examples purging of the sFlow information may be achieved by using the deletion API to set a time to live TTL value for each column family. Any managed objects with a time stamp older than the corresponding TTL value before the present may be purged. In some examples because the real time information is aggregated for each aggregation period the TTL value for the real time column family may be set to the aggregation period or slightly longer. In some examples when the aggregation period is 15 minutes the TTL value for the real time column family may be set to 15 minutes. In some examples when the real time information must be retained longer e.g. for auditing the TTL value for the real time column family may be changed using the data purger . In some examples the purging of the real time information may help limit a total amount of data that needs to be stored by the distributed storage system . In some examples the TTL value for the history column family may be longer than the TTL value for the real time column family. In some examples the TTL value for the history column family may be one month six months one year and or the like.

At the process real time data is collected. In some examples the real time data may be associated with network status of network switching devices network devices network links and the like. In some examples the real time data may be sampled data. In some examples the real time data may be sFlow information. In some examples the real time data may be collected from one or more network switching devices e.g. the one or more network switching devices . In some examples the real time data may be collected by the data collector and or the storage manager .

At the process the real time data is stored. Once the real time data is collected during the process the real time data is stored. In some examples the processes and may occur continuously as the real time data is constantly collected and stored. In some examples the real time data may be stored using a distributed storage system e.g. the distributed storage system . In some examples the distributed storage system uses HDFS. In some examples the real time data may be stored using a NoSQL based database. In some examples the NoSQL based database may be Apache HBase. In some examples the real time data may be stored into a real time column family using the NoSQL schema .

At the process the real time data is aggregated. In some examples the real time data may be aggregated into history data. In some examples the process may be performed at least in part by the aggregator . In some examples the aggregated real time data may be stored in a history column family in the distributed storage system. In some examples aggregations may be based on aggregation types including Min Max Average Count Sum and the like. In some examples the process may be triggered using a periodic timer. In some examples the process may be performed during under utilized and or idle time. In some examples the periodic timer may trigger aggregation of the real time data using any reasonable aggregation period including 1 minute 5 minutes 10 minutes 15 minutes 30 minutes and the like.

At the process real time and history data are preprocessed. In some examples the preprocessed real time and history data may support static queries by pre computing the results of corresponding static queries. In some examples results from preprocessing the real time and history data may be stored in the distributed storage system for later retrieval. In some examples the process may be performed at least in part by the preprocessor . In some examples the process may be triggered using a periodic timer. In some examples the process may be performed during under utilized and or idle time.

At the process real time data is purged. The real time data may be purged when it is no longer needed to support network monitoring. In some examples the real time data may be purged based on a real time TTL value associated with the real time data. In some examples the real time TTL value may be associated with the real time column family. In some examples any real time data having a time stamp older than the corresponding real time TTL value before the present may be purged. In some examples the real time TTL value may be set at least in part using the data purger . In some examples the real time TTL value may be approximately equal to the aggregation period associated with the process . In some examples the process may be triggered periodically. In some examples the process may be performed during under utilized and or idle time.

At the process history data is purged. The history may be purged when it is no longer needed to support network monitoring. In some examples the history data may be purged based on a history TTL value associated with the history data. In some examples the history TTL value is associated with the history column family. In some examples any history data having a time stamp older than the corresponding history TTL value before the present may be purged. In some examples the history TTL value may be set at least in part using the data purger . In some examples the history TTL value may be one month six months one year and or the like. In some examples the process may be triggered periodically. In some examples the process may be performed during under utilized and or idle time.

At the process data is retrieved. In some examples data may be retrieved from the real time data the history data the stored results from the preprocessing performed during the process and or combinations thereof. In some examples data may be retrieved to support queries and or reports. In some examples the queries may include static queries and dynamic queries. In some examples the static queries may use the stored results from the preprocessing performed during the process . In some examples the data may be retrieved using distributed processing. In some examples the queries may be specified by a user. In some examples the process may be performed at least in part by the data retriever .

At the process the retrieved data is used. The data retrieved during the process may be used to support network monitoring. In some examples the supported network monitoring may include detecting abnormal traffic patterns controlling network congestion analyzing network security profiling routes supporting billing and accounting and the like. In some examples the data may be displayed to the user using the computer and or terminal .

Some embodiments of the data collector the data collector the storage manager the distributed storage system the data retriever the computer the preprocessor the aggregator and or the data purger may include non transient tangible machine readable media that include executable code that when run by one or more processors may cause the one or more processors to perform the processes of method as described above. Some common forms of machine readable media that may include the processes of method are for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM any other memory chip or cartridge and or any other medium from which a processor or computer is adapted to read.

Although illustrative embodiments have been shown and described a wide range of modification change and substitution is contemplated in the foregoing disclosure and in some instances some features of the embodiments may be employed without a corresponding use of other features. One of ordinary skill in the art would recognize many variations alternatives and modifications. Thus the scope of the invention should be limited only by the following claims and it is appropriate that the claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein.

