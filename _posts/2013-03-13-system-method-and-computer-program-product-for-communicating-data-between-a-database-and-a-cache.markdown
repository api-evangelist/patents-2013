---

title: System, method and computer program product for communicating data between a database and a cache
abstract: In accordance with embodiments, there are provided mechanisms and methods for communicating data between a database and a cache. These mechanisms and methods for communicating data between a database and a cache can enable improved application quality and performance, enhanced client application interaction, increased system performance, etc.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09081869&OS=09081869&RS=09081869
owner: salesforce.com, inc.
number: 09081869
owner_city: San Francisco
owner_country: US
publication_date: 20130313
---
This application is a continuation of U.S. application Ser. No. 13 049 809 filed Mar. 16 2011 Which claims the benefit of U.S. Provisional Patent Application No. 61 314 517 filed Mar. 16 2010 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

One or more implementations relate generally to data communication and more particularly to data communication between a database and a cache.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

Conventional systems commonly utilize resources located within the system to provide system based services e.g. applications etc. to one or more users For example a system may provide a hypertext markup language HTML user interface UI to users where the UT utilizes a local database of the system. Unfortunately such system based services have been associated with various limitations.

Just by way of example certain system based services e.g. HTML UIs etc. may not have the interface flexibility visual features or other capabilities of system services that are run from within an internet browser e.g. Adobe Flash applications etc. . However techniques are needed to communicate data from the system to the browser based services. Accordingly it is desirable to provide techniques that enable efficient and reliable data communication between system databases and browser based services.

In accordance with embodiments there are provided mechanisms and methods for communicating. data between a database and a cache. These mechanisms and methods for communicating data between a database and a cache can enable improved application quality and performance enhanced client application interaction increased system performance etc.

In an embodiment and by way of example a method for communicating data between a database and a cache is provided In one embodiment a database of a system is identified. Additionally a cache separate from the database that is associated with an application residing within a browser is identified. Further data is communicated between the database and the cache.

While one or more implementations and techniques are described with reference to an embodiment in which communicating data between a database and a cache is implemented in a system having an application server providing a front end for an on demand database system capable of supporting multiple tenants the one or more implementations and techniques are not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. The one or more implementations encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments do not necessarily address any of these deficiencies. In other words different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers.

Next mechanisms and methods for communicating data between a database and a cache will be described with reference to example embodiments.

Additionally it should be noted that as described above such multi tenant on demand database system may include any service that relies on a database system that is accessible over a network in which various elements of hardware and software of the database system may be shared by one or more customers e.g. tenants . For instance a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers Various examples of such a multi tenant on demand database system will be set forth in the context of different embodiments that will be described during reference to subsequent figures.

Furthermore as shown in operation a cache separate from the database that is associated with an application residing within a browser is identified. In one embodiment the application may be associated with the system. For example the application may be a feature provided by the system In another embodiment the application may provide a service or other feature of the system. For example the application may include a graphical approval process editor that enables customers of the system to add remove view or manipulate one or more approval processes utilizing a visual user interface UI . In another example the approval process interface may manage a description of each approval process e.g. by depicting a visual representation of the approval process etc. . In yet another example the approval process may route submitted approval processes through the system.

Further still in one embodiment the application may run in a browser e.g. an end user s browser etc. inside a browser based application runtime e.g. Adobe Flash etc. . In another embodiment the application may be created utilizing a software development kit associated with the browser based application runtime e.g. Adobe Flex etc. . In yet another embodiment the cache may provide one or more components of the application with data. For example the cache may include a client side cache external to the system e.g. located within the browser etc. and may provide one or more interface components of the application with a one or more objects from the database of the system. For instance the cache may provide the UI components of the graphical approval process editor with a view of objects of the database that comprise an approval process. In yet another embodiment a network connection may exist between the database and the cache.

Further as shown in operation data is communicated between the database and the cache. In one embodiment communicating the data may include sending data from the database to the cache. For example communicating the data may include retrieving the data e.g. one or more objects such as approval processes etc. from the database compiling the data into a form recognizable by the application and sending the data to the cache. In another embodiment communicating the data may include sending data from the cache to the database. In still another embodiment communicating the data may include synchronizing data between the cache and the database.

Additionally in one embodiment communicating the data may be performed by a cache module e.g. an application server etc. . In another embodiment communicating the data may be performed utilizing an application programming interface API . For example an API may be generated utilizing a protocol specification e.g. simple object access protocol SOAP etc. and the API may retrieve data from the database and may provide it to the cache. See for example U.S. patent application Ser. No. 10 870 695 filed Jun. 16 2004 which is hereby incorporated by reference in its entirety and which describes exemplary techniques for exposing system database data utilizing SOAP web services.

Further in one embodiment one or more descriptions of the data e.g. metadata etc. may be obtained from the database utilizing the protocol specification. For example the SOAP protocol may utilize an extensible markup language XML which may be self describing and may provide a metadata description associated with the data to the application. Additionally the one or more descriptions may be stored at the cache 

Further still in one embodiment a data dictionary may be utilized to obtain the descriptions of the data retrieved from the database. For example a universal data dictionary UDD may provide metadata associated with the data retrieved from the database. In this way the UDD may be leveraged to provide metadata descriptions of the retrieved data from the database. Additionally in one embodiment the application may utilize the descriptions of the data to perform one or more actions associated with the data. For example the graphical approval process editor may utilize the metadata provided by the UDD to identify and utilize approval process objects retrieved from the system database.

Also in one embodiment the synchronizing may include saving the data in the cache at the object level e.g. performing object level caching of the data etc. . For example a one to one relationship may be maintained between objects stored in the database and objects stored in the cache. In another example if changes are made to specific objects within the application e.g. as a result of a user changing the objects utilizing the application etc. such changes may be temporarily stored in the cache which may remember the relationships between data stored therein . Additionally the specific objects that have been changed may be returned to the database of the system and those specific objects may then be updated at the system according to the changes made in the cache.

In this way only the data that has been changed using the application may be sent independently from the rest of the data in the cache back to the database e.g. instead of a document representing all data within the cache etc. . Additionally in one embodiment one or more individual objects may be retrieved from the database to the cache thereby resulting in more efficient cache refreshing of individual objects. In another embodiment data in the cache may be refreshed from the database asynchronously. Additionally in yet another embodiment the cache may employ a proxy architecture that may preserve the data identity of data in the cache across refreshes. still another embodiment data in the cache may be updated and written back to the database at a time chosen by the application e.g. in response to an end user selecting a save icon etc. .

Further in one embodiment a change may be made to data in the database by an entity other than the application. For example a client running outside of the browser may access data in the database and may perform an out of band alteration of the data. Additionally a copy of the data may also be stored in the cache before it is changed by the entity. In another embodiment the copy of the data stored in the cache may be automatically updated in response to the change made by the entity.

For example a cache representation may be created for a specific object and code may be created that is attached to that object. Further if out of band updates are made at the server the state may automatically be changed and the application may be notified. In this way out of band changes may be automatically accounted for within the cache thereby increasing performance and preserving data identities.

As shown a system database is in communication with an application server over a network connection where the application server includes a SOAP servlet Additionally the application server is in communication with a browser environment that includes an application . Further the application includes a client side cache and a user interface . In one embodiment the application may request data from the database via the SOAP servlet of the application server . For example the application may request data to be displayed in the browser environment .

Additionally in one embodiment in response to the request received from the application server the database may return the requested data to the application server . In another embodiment the database may also return metadata describing the data to the application server . For example the database may also return to the application server metadata describing the shape of the data e.g. properties of the data types of fields of the data a type of object included within the data dynamic fields that are included within the data etc. .

In yet another embodiment the application server may utilize a data dictionary e.g. a UDD etc. to describe to the application the data and metadata retrieved from the database . For example using the metadata and the data dictionary the SOAP servlet within the application server may recognize the shape of data objects e.g. approval process objects etc. within the data from the database and may compile the data into a form usable by the application . Additionally the compiled representation of the data that is recognizable by the application may be stored in the client side cache .

Further in another embodiment the cache may exist at the bottom of a typical three tier architecture and objects in the database may be read by the application . In another embodiment when the application has loaded the database objects they may be streamed out to the end user s browser via XML where they may be re materialized as objects in the cache e.g. within a Grape application etc. .

In this way the metadata and the data dictionary may be leveraged in order to translate the data retrieved from the database such that data and data relationships are described and pertinent entities as well as conditions are identified. As a result the application may know what to expect when it received the data to properly utilize the data thereby overcoming the locality of data between the database and the browser environment .

As shown a cache domain includes a plurality of cache objects . Further a plurality of user interface components and are in communication with one or more of the cache objects within the cache domain . In one embodiment the cache domain may include the organizing structure of the cache of an application running within a browser environment. In another embodiment the cache objects may provide a single coherent view of a portion of data located in a separate system database. In yet another embodiment the cache domain may provide services by which cache objects are created refreshed destroyed made discoverable to the user interfaces etc.

Additionally in one embodiment client applications may only have need of a single cache domain which may exist for the life of the application instance. In another embodiment code components in the user interfaces may be free to refer to and interact with one or more cache objects as they might any model objects in a typical model view controller architecture. In yet another embodiment cache objects are also free to refer to other cache objects 

As shown a cache domin includes a cache object which serves as a proxy to a wrapped bit of state . In one embodiment the wrapped bit of state may be retrieved from a server or other system. In another embodiment the wrapped bit of state may include a simple struct that represent pieces of the XML payload and which may be code generated from a web service definition language WSDL of a protocol e.g. SOAP etc. .

Additionally in one embodiment the cache state may be updated asynchronously while maintaining object identity. For example references to and among cache object and other cache objects may remain valid after the read.

As shown a cache domain containing a cache object is in communication with an application server that includes a SOAP servlet . In one embodiment when a read to the cache domain is triggered anew version of an xml state is received from a server via the application server and injected into the cache object . In another embodiment the old state may be discarded. In this way a state of the cache object may be effectively updated in place. 

Additionally in one embodiment UI components which may need to refer to some object in the data model may do so by object reference rather than by utilizing an identifier. Further when the cache read happens the UI components may not have to go back into the cache to look up the new version of the model object since the object they were already pointing at may be updated in place In this way the design of UI code may be significantly simplified objects may be refreshed in the cache at will such as with asynchronous polling etc. .

As shown a cache domain of an application that contains a cache object is in communication with a database of a system via an app server . In one embodiment when the cache object is changed e.g. as a result of end user action in a user interface etc. it may be marked dirty and may be scheduled for write back to the database . For example at a time of the application s choosing e.g in response to user events the firing of an asynchronous tinier etc. the dirtied cache object may be pushed back to the database of the server via XML and may be written to the database .

In another embodiment stale writes may be detected via an optimistic concurrency mechanism. For example update timestamps may be maintained in the cache domain and may be compared with timestamps in the database .

Environment is an environment in which an on demand database system exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database system which is system .

An on demand database system such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database systems may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database system and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database system may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database system users accessing the on demand database system via user systems or third party application developers accessing the on demand database system via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN. LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript. ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned co pending U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manages retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might he coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to he able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. Pat No. 7 779 039 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

