---

title: Extending infrastructure security to services in a cloud computing environment
abstract: A cloud deployment appliance (or other platform-as-a-service (IPAS) infrastructure software) includes a mechanism to deploy a product as a “shared service” to the cloud, as well as to enable the product to establish a trust relationship between itself and the appliance or IPAS. The mechanism further enables multiple products deployed to the cloud to form trust relationships with each other (despite the fact that each deployment and each product typically, by the nature of the cloud deployment, are intended to be isolated from one another). In addition, once deployed and provisioned into the cloud, a shared service can become part of a single sign-on (SSO) domain automatically. SSO is facilitated using a token-based exchange. Once a product registers with a token service, it can participate in SSO. This approach enables enforcement of consistent access control policy across product boundaries, and without requiring a user to perform any configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09426155&OS=09426155&RS=09426155
owner: International Business Machines Corporation
number: 09426155
owner_city: Armonk
owner_country: US
publication_date: 20130418
---
This disclosure relates generally to establishing a trusted computing environment across distinct security domains in the context of a cloud compute environment.

An emerging information technology IT delivery model is cloud computing by which shared resources software and information are provided over the Internet to computers and other devices on demand. Cloud computing can significantly reduce IT costs and complexities while improving workload optimization and service delivery. With this approach an application instance can be hosted and made available from Internet based resources that are accessible through a conventional Web browser over HTTP. An example application might be one that provides a common set of messaging functions such as email calendaring contact management and instant messaging. A user would then access the service directly over the Internet. Using this service an enterprise would place its email calendar and or collaboration infrastructure in the cloud and an end user would use an appropriate client to access his or her email or perform a calendar operation.

Cloud compute resources are typically housed in large server farms that run network applications typically using a virtualized architecture wherein applications run inside virtual servers or so called virtual machines VMs that are mapped onto physical servers in a data center facility. The virtual machines typically run on top of a hypervisor which is a control program that allocates physical resources to the virtual machines.

It is known in the art to provide an appliance based solution to facilitate rapid adoption and deployment of cloud based offerings. One such appliance is IBM Workload Deployer which is based on the IBM DATAPOWER 7199 9005 product family. Typically the appliance is positioned directly between the business workloads that many organizations use and the underlying cloud infrastructure and platform components. Because of this unique position the appliance can receive and act upon operational data and it can monitor application workload demand conditions and adjust resource allocation or prioritization as required to achieve established service level agreements. IBM Workload Deployer IWD also may be used to manage a shared multi tenant environment where isolation and security are important.

IBM Workload Deployer and more generally platform as a service PAS infrastructure software IPAS can be extended by installing additional services for the cloud computing environment. Some examples include for example caching services to add a data caching capability to virtual applications monitoring services to monitor health and performance status of virtual applications and the like. Often the new service is provided by a commercial product that has its own built in security mechanisms including for example user management authentication and access control. While it can be quite advantageous to add such services there is no simple way to integrate such products with the cloud computing infrastructure to provide users seamless security integration with single sign on SSO behavior and consistent and unified access control policy. This is because typically these additional services are installed in a manner similar to any new deployment meaning that they are installed into their own separate security domain for isolation .

To illustrate the problem it is well known that different monitoring products frequently are used to monitor different parts and aspects of a system s resources. Thus for example there are monitor products that monitor health status and performance of physical resources such as the virtual machine CPU memory and disk storage usage other monitoring tools monitor database health utilization and throughput performance. When installing such disparate products in an IBM Workload Deployer or IPAS environment an administrator may receive a general warning that say a virtual machine is not functioning properly. To view the general status in more detail the administrator then clicks on a resource link to one monitoring product but by doing so but then he or she discovers that the problem is caused by a database subsystem being monitored by another product. In this process the administrator moves from one monitoring product to a different one which involves traversing through different trust domains and different resource representations. This requirement greatly complicates the deployment and management operations.

Currently there is no easy way to link multiple products together to integrate them with the cloud computing infrastructure and to present an integral management system.

According to this disclosure a cloud deployment appliance or other platform as a service IPAS infrastructure software includes a mechanism to deploy a product as a shared service to the cloud as well as to enable the product to establish a trust relationship between itself and the appliance or IPAS. The mechanism further enables multiple products deployed to the cloud to form trust relationships with each other despite the fact that each deployment and each product typically by the nature of the cloud deployment are intended to be isolated from one another . In addition once deployed and provisioned into the cloud a shared service can become part of a single sign on SSO domain automatically. SSO is facilitated using a token based exchange. Once a product registers with a token service it can participate in SSO. This approach enables enforcement of consistent access control policy across product boundaries and without requiring a user to perform any configuration.

The foregoing has outlined some of the more pertinent features of the invention. These features should be construed to be merely illustrative. Many other beneficial results can be attained by applying the disclosed invention in a different manner or by modifying the invention as will be described.

With reference now to the drawings and in particular with reference to exemplary diagrams of data processing environments are provided in which illustrative embodiments of the disclosure may be implemented. It should be appreciated that are only exemplary and are not intended to assert or imply any limitation with regard to the environments in which aspects or embodiments of the disclosed subject matter may be implemented. Many modifications to the depicted environments may be made without departing from the spirit and scope of the present invention.

With reference now to the drawings depicts a pictorial representation of an exemplary distributed data processing system in which aspects of the illustrative embodiments may be implemented. Distributed data processing system may include a network of computers in which aspects of the illustrative embodiments may be implemented. The distributed data processing system contains at least one network which is the medium used to provide communication links between various devices and computers connected together within distributed data processing system . The network may include connections such as wire wireless communication links or fiber optic cables.

In the depicted example server and server are connected to network along with storage unit . In addition clients and are also connected to network . These clients and may be for example personal computers network computers or the like. In the depicted example server provides data such as boot files operating system images and applications to the clients and . Clients and are clients to server in the depicted example. Distributed data processing system may include additional servers clients and other devices not shown.

In the depicted example distributed data processing system is the Internet with network representing a worldwide collection of networks and gateways that use the Transmission Control Protocol Internet Protocol TCP IP suite of protocols to communicate with one another. At the heart of the Internet is a backbone of high speed data communication lines between major nodes or host computers consisting of thousands of commercial governmental educational and other computer systems that route data and messages. Of course the distributed data processing system may also be implemented to include a number of different types of networks such as for example an intranet a local area network LAN a wide area network WAN or the like. As stated above is intended as an example not as an architectural limitation for different embodiments of the disclosed subject matter and therefore the particular elements shown in should not be considered limiting with regard to the environments in which the illustrative embodiments of the present invention may be implemented.

With reference now to a block diagram of an exemplary data processing system is shown in which aspects of the illustrative embodiments may be implemented. Data processing system is an example of a computer such as client in in which computer usable code or instructions implementing the processes for illustrative embodiments of the disclosure may be located.

With reference now to a block diagram of a data processing system is shown in which illustrative embodiments may be implemented. Data processing system is an example of a computer such as server or client in in which computer usable program code or instructions implementing the processes may be located for the illustrative embodiments. In this illustrative example data processing system includes communications fabric which provides communications between processor unit memory persistent storage communications unit input output I O unit and display .

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor SMP system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices. For example persistent storage may be a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user.

Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for execution by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and executed by a processor in processor unit . The program code in the different embodiments may be embodied on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for execution by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code. The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can be varied from the illustrative examples shown. As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form.

In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Computer program code for carrying out operations of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C C Objective C or the like and conventional procedural programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Those of ordinary skill in the art will appreciate that the hardware in may vary depending on the implementation. Other internal hardware or peripheral devices such as flash memory equivalent non volatile memory or optical disk drives and the like may be used in addition to or in place of the hardware depicted in . Also the processes of the illustrative embodiments may be applied to a multiprocessor data processing system other than the SMP system mentioned previously without departing from the spirit and scope of the disclosed subject matter.

As will be seen the techniques described herein may operate in conjunction within the standard client server paradigm such as illustrated in in which client machines communicate with an Internet accessible Web based portal executing on a set of one or more machines. End users operate Internet connectable devices e.g. desktop computers notebook computers Internet enabled mobile devices or the like that are capable of accessing and interacting with the portal. Typically each client or server machine is a data processing system such as illustrated in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. A data processing system typically includes one or more processors an operating system one or more applications and one or more utilities. The applications on the data processing system provide native support for Web services including without limitation support for HTTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these standards is presumed.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models all as more particularly described and defined in Draft NIST Working Definition of Cloud Computing by Peter Mell and Tim Grance dated Oct. 7 2009.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based e mail . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes. A representative cloud computing node is as illustrated in above. In particular in a cloud computing node there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients hand held or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like. Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

Referring now to by way of additional background a set of functional abstraction layers provided by a cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM ZSERIES systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM PSERIES systems IBM XSERIES systems IBM BLADECENTER systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM WEBSPHERE application server software and database software in one example IBM DB2 database software.

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provides pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and others e.g. enterprise specific functions in a private cloud .

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Thus a representative cloud computing environment has a set of high level functional components that include a front end identity manager a business support services BSS function component an operational support services OSS function component and the compute cloud component. The identity manager is responsible for interfacing with requesting clients to provide identity management and this component may be implemented with one or more known systems such as the Tivoli Federated Identity Manager TFIM that is available from IBM Corporation of Armonk N.Y. In appropriate circumstances TFIM may be used to provide federated single sign on F SSO to other cloud components. The business support services component provides certain administrative functions such as billing support. The operational support services component is used to provide provisioning and management of the other cloud components such as virtual machine VM instances. The cloud component represents the main computational resources which are typically a plurality of virtual machine instances that are used to execute a target application that is being made available for access via the cloud. One or more databases are used to store directory log and other working data. All of these components included the front end identity manager are located within the cloud but this is not a requirement. In an alternative embodiment the identity manager may be operated externally to the cloud. The service provider also may be operated externally to the cloud.

It is known to provide an appliance based solution to facilitate rapid adoption and deployment of both Infrastructure and Platform as Service offerings. As described above one such appliance is IBM Workload Deployer IWD and this appliance also may be used to manage a shared multi tenant environment where isolation and security are of utmost importance. The secure nature of the physical appliance sometimes referred to herein as a box typically is provided by a self disabling switch which is triggered if the appliance cover is removed. This physical security enables the appliance to serve as a secure vault for credentials which can be tied to virtual images throughout their entire lifecycle in storage being dispensed running in the cloud or being removed from the cloud . IBM Workload Deployer also contains a storage driver that streamlines the storage of image customizations. It also serves as a dedicated store for both pre loaded and customized middleware virtual images and patterns. The appliance also includes advanced compression and storage techniques that enable a large number of these virtual images each of which may be sizeable to be stored.

In operation the appliance can provision standard and customized middleware virtual images and patterns that can be securely deployed and managed within private or on premise cloud computing environments. These virtual images can help organizations to develop test and deploy business applications easily and quickly thus ending the manual repetitive and error prone processes that are often associated with creating these complex environments. Upon completion resources are returned to the shared resource pool automatically for future use and are logged for internal charge back purposes. The appliance also manages individual user and group access to resources providing IT managers with the control needed to optimize efficiency at a fine grain level.

Typically the appliance includes hardware and firmware cryptographic support to encrypt all the data on hard disk. This data includes without limitation event log data. No users including administrative users can access any data on physical disk. In particular the operating system e.g. Linux locks down the root account and does not provide a command shell and the user does not have file system access. When an administrator performs a backup of the appliance the backup image is encrypted to protect the confidentiality of the data. When restoring an encrypted image a decryption key thus is needed to decrypt the backup image to enable the data to be restored to the appliance.

Referring to a representative operating environment includes the physical appliance which interfaces to the cloud . The appliance may be implemented using a data processing system such as described above with respect to . Preferably the appliance includes a Web 2.0 based user interface UI a command line interface CLI and REST based application programming interfaces APIs . The appliance provides a management function that enables the rapid deployment of cloud based solutions. To that end the appliance provides storage for i data used to manage user and group access to resources ii for pre loaded and or customizable middleware virtual images and iii for configurable patterns and script packages . Patterns are logical descriptions of both the physical and virtual assets that comprise a particular solution. The management function and interfaces provide a template based approach to construction that permits the rapid creation and modification of an otherwise complex set of hardware and software components. In particular the use of patterns allows an organization to construct an individual element or integrated solution one time and then to dispense the final product on demand. Typically there are two types of patterns virtual system patterns provide the most flexibility and customization options of the two types. It consists of an operating system and potentially additional software solutions such as WebSphere Application Server. Virtual application patterns are optimized and are constructed typically for the purpose of supporting a singular workload.

As also seen in the on premise or private cloud environment on which the middleware application runs typically constitutes hypervisors networking infrastructure and storage devices that are allocated to the appliance. A representative environment may be implemented in the manner described above with respect to .

The references herein to IBM Workload Deployer are exemplary and should not be taken to limit the disclosed technique which may be implemented on any appliance or more generally machine having the general characteristics and operating functionality that has been described. Specific references to IWD should be construed to include both the above identified product as well as other technologies that implement the functionality referenced above.

By way of additional background it is assumed that the cloud environment and a deployment appliance such as described operates in a trust framework which comprises a number of aspects. In this framework public key technology is used to secure communications. The framework leverages a suite of security services that provide user authentication token service and a certificate authority. Every server process operative within the trust framework has its own e.g. RSA token and an RSA key pair. Trademark rights are claimed by a third party in the designation RSA. The server s identity and roles are represented by a server RSA token which is signed by the token service every request is endorsed by a server RSA key. Preferably each cloud deployment has its own agent RSA token and RSA key pair. The agent s identity and roles are represented by an agent RSA token which is signed by a deployment administrator RSA key every request is signed by an agent RSA key. In addition the integrity and confidentiality of requests are protected by transport layer encryption such as SSL. Every server and every deployment has an SSL certificate and private key issued by the certificate authority.

In a cloud computing environment such as described virtual machines VMs are regularly provided to handle different workload for different cloud customers. Because a VM is presumed to be provisioned in an unsecured environment however each VM should be in its own security zone. Each VM requires its own identity token keys and certificates as well as a way to establish a trust relationship back to the cloud provider preferably across different security domains. illustrates how a VM in a separate security zone can register itself and establish a trust relationship. During this process and as will be described the VM leverages two 2 mechanisms to establish the trust relationships. First it receives registration artifacts from the cloud service provider these artifacts include information the VM needs to talk to the cloud service provider. Second the VM sends its own security information to the cloud service provider preferably without revealing a private security key.

In general this approach uses a security server which is a process in the cloud that manages all of the security information within the cloud environment. When a virtual machine VM is provisioned e.g. using the above described appliance or otherwise the cloud service provider sends registration artifacts to the virtual machine through the security server. The registration artifacts typically include the security server s public key security headers generated with the security server s private key and an identification of the necessary roles for the VM to communicate back to the security server. Once the VM receives the registration artifacts it generates a registration request to the security server using the information in the registration artifacts. The registration request typically includes the VM s public key and a public certificate. The security server receives the VM s public key and the public certificate adds the key to a key database and stores the certificate in a trust key store. Once the security server processed the registration request from the VM the security server generates a token and sends it back to the VM thus completing the registration process and the key exchange.

With the above as background the subject matter of this disclosure is now described. Without limitation the subject matter may be implemented within or in association with a cloud deployment appliance as has been described.

As used herein a shared service is a service that is deployed by a cloud administrator and used by multiple virtual application deployments. Shared services may be of many different types such as a caching service a monitoring service a proxy service that provides routing and load balancing to multiple deployed web applications and others.

A shared services security model according to this disclosure has several characteristic a common security model for all IWD IPAS shared services and common security services for all IWD IPAS shared services. Under the common security model the IWD IPAS security server manages user identity and access control policy an IWD IPAS security services utility library shields SSO token exchange details from shared services providers and shared services providers extend IWD IPAS access control to shared service resources. The common security services comprise user authentication services user and group membership query resource access control services public key management and trust relationship management. IWD IPAS uses a security token called RSAToken to represent user identity and credentials e.g. group membership and security roles. As will be described IWD IPAS also provides for user tokens and these tokens are used to propagate user identity credentials group membership and security roles and resource identifiers. In general tokens whether security tokens or user tokens are internal system constructs that are managed by a token service. A token exchange mechanism is used to facilitate shared services provisioning as is now described.

This security model provides a seamless layer of security infrastructure to an application with its own security infrastructure running on a virtual machine in the cloud environment. A user e.g. an administrator registers to the layer of security infrastructure. Upon receiving a request by the user to add a service e.g. a shared service to the application or to use that service if previously deployed and enabled the layer of security infrastructure is used to authenticate the user preferably by communicating to the application using a private key. The application security infrastructure then adds or enables access to the service without requiring direct authentication from the user to the application security infrastructure.

Thus as illustrated there interactions occur via IWD IPAS console IWD IPAS security service a monitor console and a monitor shared services provider . The IWD IPAS security service is implemented in the security server which performs user identity management and access control policy management. This scenario assumes that the entities have established trust relationships in the manner previously described in either or .

Although not shown it is assumed that the user of the IWD IPAS console has been authenticated in a known manner. The user is represented within the system the IWD IPAS console and the IWD IPAS security service by a first token . This token is not provided or exposed to the user but rather is just an internal system data structure. The token which identifies what privileges the user has and resources he or she can access typically is maintained in the system in the clear and affords the user all deployment privileges suitable to the user s status. In other words the first token is a general user token includes no specific deployment constraints with respect to the user s privileges . The first token includes the usual information such as data identifying its issuer the IWD IPAS security service and its owner the IWD IPAS appliance console key pairs and the like.

According to the technique described above the authenticated user selects a link e.g. a button an icon an alert or the like in the IWD IPAS console page identifying or otherwise associated with a resource in this case a resource being monitored by the service . As noted above in one use case the resource is associated with a particular status e.g. a problem status although this is not a limitation. As will be seen this selection in effect triggers a transfer of control from the IWD IPAS console to the monitor console so that the user can access and use the monitor shared service to determine the source of the problem or otherwise to take some remedial or other permitted action . Because this transfer of control is carried out over a public network a token exchange service is implemented. This token exchange service is provided by suitable software code e.g. an IWD IPAS security services utility library that preferably is transparent to the shared services provider and seamlessly to the end user. The operation works as follows.

At step the first user token is signed and provided to the IWD IPAS security service . The security service receives the token which is provided as cleartext and at step returns to the IWD IPAS console a secret . The secret is protected by encryption and thus is opaque and suitable for transport over the public network . At step the console sends the secret to the monitor console . At step the monitor console signs request messages with the secret with its private key that is specified by a second shared services token and at step sends the signed messages and secret back to the IWD IPAS security service . The shared services token is owned by the shared services provider . The IWD IPAS security service verifies the secret and at step sends the monitor console a shared services user token . The shared services user token differs from the first user token in several important ways. Its owner is now the shared service and it includes specific deployment constraints whereas the general user token did not . The shared services user token includes the specific user identity and security roles that are authorized with respect to the shared service. The shared services user token is used to access the monitor console automatically after which the monitor console is displayed to the user. After the user selects from the monitor console some specific monitor operation an access request is made from the monitor console to the shared service . The access request is shown at step and it includes the user identity and security roles that were propagated in the shared services user token. The shared service uses the user identity and security roles to facilitate its access control decision at step . If access is permitted the requested information e.g. monitoring data is provided at step to complete the process.

In the shared service SSO model in the token exchange is transparent to the user and steps and are transparent to the shared services provider. As can be seen and once the necessary trust relationships are established the approach enables the shared service to participate seamlessly in the single sign on SSO domain to facilitate unified access control.

As seen in the redirects at steps and are transparent to the web client user. The steps and and steps and are transparent to the shared service provider. The token exchange in steps and in corresponds to the token exchange in steps and in .

The techniques herein facilitate shared service deployment in the cloud. The first embodiment is as described in . In this approach when an administrator or deployer clicks on a first icon representing a service to be deployed the system sends a secret token that represents the administrator or deployer to the service. Using a security server the service exchanges the secret token with a user security token that represents the credentials of the administrator or the deployer. The service then validates the user security token by extracting user identity group security role and resource identifier information. Using the extracted information the service then makes access control decisions. In this approach the user identity management authentication and access control are managed by the cloud computing infrastructure. A service being deployed just needs to exchange and validate the user security token validate the trust relationship and then enforce the access control policy. The administrator or deployer is not challenged for authentication to the service and can access specified resource services with his or her own user credentials.

In the embodiment and when the administrator or deployer clicks a second service icon e.g. within a first service console the service redirects to a management console for the cloud computing infrastructure. The redirect also specifies a resource and a second service to be accessed as well as the secret token that represents the administrator or deployer. The cloud computing infrastructure forwards the secret token or optionally replaces it with a new secret token and optionally transforms the resource identifier to one that is recognized by the second service. The console then redirects the request to the specified second service which exchanges the secret token for a user security token to facilitate further access control as described above. In this approach the resource representation and optional conversion are performed by the cloud computing infrastructure software so there is minimal processing required from the service.

The above described subject matter provides many advantages. Generally the techniques described herein enable the establishment of a trusted computing environment across security domains in a cloud computing environment. The described approach enables a cloud deployment appliance or other IPAS to easily integrate cloud computing infrastructure security and resource management with one or more additional services to provide seamless authentication and access control integration with minimal resource configuration synchronization and thus minimal management overhead. The approach reliably and securely extends cloud computing infrastructure security to one or more additional services and it provides a mechanism to integrate multiple services and provide SSO and consistent resource management across service boundaries. Further the techniques described herein enable application security infrastructure to add a new service without requiring direct authentication from the user to the application security infrastructure. Additional services may be integrated with a single sign on SSO . Using this approach and has been described consistent resource management is facilitated across more than one service boundary.

In this approach the user identity management authentication and access control policy are managed by the cloud computing infrastructure e.g. the IWD IPAS. A service being shared just needs to exchange and validate the user security token validate the trust relationship and then enforce the access control policy. The IWD IPAS administrator or other deployer does not need to be challenged for authentication to the service and can access specified resource services with just his or her IWD IPAS user credentials.

While a preferred operating environment and use case a cloud deployment appliance or other IPAS software has been described the techniques herein may be used in any other operating environment in which it is desired to deploy services.

As has been described the functionality described above may be implemented as a standalone approach e.g. a software based function executed by a processor or it may be available as a managed service including as a web service via a SOAP XML interface . The particular hardware and software implementation details described herein are merely for illustrative purposes are not meant to limit the scope of the described subject matter.

More generally computing devices within the context of the disclosed subject matter are each a data processing system such as shown in comprising hardware and software and these entities communicate with one another over a network such as the Internet an intranet an extranet a private network or any other communications medium or link. The applications on the data processing system provide native support for Web and other known services and protocols including without limitation support for HTTP FTP SMTP SOAP XML WSDL UDDI and WSFL among others. Information regarding SOAP WSDL UDDI and WSFL is available from the World Wide Web Consortium W3C which is responsible for developing and maintaining these standards further information regarding HTTP FTP SMTP and XML is available from Internet Engineering Task Force IETF . Familiarity with these known standards and protocols is presumed.

As explained the scheme described herein may be implemented in or in conjunction with various server side architectures including simple n tier architectures web portals federated systems and the like. The techniques herein may be practiced in a loosely coupled server including a cloud based environment.

Still more generally the subject matter described herein can take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment containing both hardware and software elements. In a preferred embodiment the trusted platform module function is implemented in software which includes but is not limited to firmware resident software microcode and the like. Furthermore the download and delete interfaces and functionality can take the form of a computer program product accessible from a computer usable or computer readable medium providing program code for use by or in connection with a computer or any instruction execution system. For the purposes of this description a computer usable or computer readable medium can be any apparatus that can contain or store the program for use by or in connection with the instruction execution system apparatus or device. The medium can be an electronic magnetic optical electromagnetic infrared or a semiconductor system or apparatus or device . Examples of a computer readable medium include a semiconductor or solid state memory magnetic tape a removable computer diskette a random access memory RAM a read only memory ROM a rigid magnetic disk and an optical disk. Current examples of optical disks include compact disk read only memory CD ROM compact disk read write CD R W and DVD. The computer readable medium is a tangible non transitory item.

The computer program product may be a product having program instructions or program code to implement one or more of the described functions. Those instructions or code may be stored in a computer readable storage medium in a data processing system after being downloaded over a network from a remote data processing system. Or those instructions or code may be stored in a computer readable storage medium in a server data processing system and adapted to be downloaded over a network to a remote data processing system for use in a computer readable storage medium within the remote system.

In a representative embodiment the interfaces and utility are implemented in a special purpose computing platform preferably in software executed by one or more processors. The software is maintained in one or more data stores or memories associated with the one or more processors and the software may be implemented as one or more computer programs. Collectively this special purpose hardware and software comprises the functionality described above.

In the preferred embodiment the functionality provided herein is implemented as an adjunct or extension to an existing cloud compute deployment management solution.

While the above describes a particular order of operations performed by certain embodiments of the invention it should be understood that such order is exemplary as alternative embodiments may perform the operations in a different order combine certain operations overlap certain operations or the like. References in the specification to a given embodiment indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic.

Finally while given components of the system have been described separately one of ordinary skill will appreciate that some of the functions may be combined or shared in given instructions program sequences code portions and the like.

