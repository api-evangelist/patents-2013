---

title: Text import tool for a technical computing environment
abstract: A device receives text that includes data values, and parses the text to identify data types associated with the data values. The device generates, based on the data values and the data types, a graphical representation of the text that includes data cells corresponding to the data values, and provides the graphical representation for display. The device receives one or more selections of one or more data cells in the graphical representation, stores the one or more selections as a selection history, and provides the selection history for display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08619090&OS=08619090&RS=08619090
owner: The Mathworks, Inc.
number: 08619090
owner_city: Natick
owner_country: US
publication_date: 20130314
---
This application is a continuation in part of U.S. patent application Ser. No. 13 241 462 filed on Sep. 23 2011 the entire contents of which are hereby incorporated by reference.

The accompanying drawings which are incorporated in and constitute a part of this specification illustrate one or more implementations and together with the description explain these implementations. In the drawings 

The following detailed description refers to the accompanying drawings. The same reference numbers in different drawings may identify the same or similar elements.

Information may be shared between various entities such as different tools software applications devices etc. Unfortunately in many instances the format of the information is initially incompatible with a format utilized by a receiving entity. In such cases to use the information it may be necessary to reformat or convert the information into the format that is utilized by the receiving entity.

Systems and or methods described herein may provide a text import tool that enables information to be imported to or converted for use in a computing environment such as a technical computing environment TCE . The text import tool may define imported data types for the information and may parse the information into the defined data types.

The graphical representation may be presented via the device to a user and the user may select one or more of the data cells. For example assume the user selects the data cells associated with column B row 3 e.g. B3 through column D row 8 e.g. D8 of the graphical representation. At some other time assume the user selects the data cells associated with column A row 11 e.g. A11 through column D row 11 e.g. D11 of the graphical representation. Also assume the user selects the data cells associated with column F row 1 e.g. F1 through column F row 9 e.g. F9 of the graphical representation. The selections by the user may be stored in a selection history and may be viewed by the user via an expanded selection history e.g. a drop down menu . The user may point to or select a range of data cells in the expanded selection history and the selected range of data cells may be highlighted via the device in the graphical representation. When the user selects a range of data cells in the expanded selection history the selected range may become the current selection.

An import mechanism e.g. a button an icon a link etc. may be provided that when selected may instruct the device to import the highlighted selected range of data cell s to the TCE. If the user selects the import mechanism the device may identify data types associated with the selected range of data cell s and may convert the selected data cell s into data containers that may be imported to the TCE. The data containers may be in formats that are understood by the TCE. In some implementations the device may infer default column data types when the text import tool is opened and or when the user changes a selected data container.

Such an arrangement may enable a user to view a selection history associated with a text file prior to converting the text file into a TCE format. A current selection in the selection history may be automatically converted into a format that may be utilized by a TCE. The converted selection may be previewed and manipulated by a user prior to importing the converted information to the TCE.

The terms code and program code as used herein are to be used interchangeably and are to be broadly interpreted to include text based code that may require further processing to execute e.g. C code Hardware Description Language HDL code very high speed integrated circuits VHSIC HDL VHDL code Verilog Java and or other types of hardware or software based code that may be compiled and or synthesized binary code that may be executed e.g. executable files that may directly be executed by an operating system bitstream files that can be used to configure a field programmable gate array FPGA Java byte code object files combined together with linker directives source code makefiles etc. text files that may be executed in conjunction with other executables e.g. Python text files a collection of dynamic link library DLL files with text based combining configuration information that connects pre compiled modules an extensible markup language XML file describing module linkage etc. etc. In some implementations code may include different combinations of the above identified classes e.g. text based code binary code text files etc. . Alternatively or additionally code may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations. Alternatively or additionally code may be of any type such as function script object etc. and a portion of code may include one or more characters lines etc. of the code.

User interfaces as described herein may include graphical user interfaces GUIs or non graphical user interfaces such as text based interfaces. The user interfaces may provide information to users via customized interfaces e.g. proprietary interfaces and or other types of interfaces e.g. browser based interfaces etc. . The user interfaces may receive user inputs via one or more input devices may be user configurable e.g. a user may change the sizes of the user interfaces information displayed in the user interfaces color schemes used by the user interfaces positions of text images icons windows etc. in the user interfaces etc. and or may not be user configurable. Information associated with the user interfaces may be selected and or manipulated by a user of the TCE e.g. via a touch screen display a mouse a keyboard a keypad voice commands etc. .

Client device may include one or more devices that are capable of communicating with server device via network . For example client device may include a laptop computer a personal computer a tablet computer a desktop computer a workstation computer a smart phone a personal digital assistant PDA and or other computation and communication devices.

Server device may include one or more server devices or other types of computation and communication devices. Server device may include a device that is capable of communicating with client device e.g. via network . In some implementations server device may include one or more laptop computers personal computers workstation computers servers central processing units CPUs graphical processing units GPUs application specific integrated circuits ASICs field programmable gate arrays FPGAs etc. In some implementations server device may include TCE and may perform some or all of the functionality described herein for client device . Alternatively server device may be omitted and client device may perform all of the functionality described herein for client device .

Network may include a network such as a local area network LAN a wide area network WAN a metropolitan area network MAN a telephone network such as the Public Switched Telephone Network PSTN or a cellular network an intranet the Internet or a combination of networks.

TCE may be provided within a computer readable medium of client device . Alternatively or additionally TCE may be provided in another device e.g. server device that is accessible by client device . TCE may include hardware or a combination of hardware and software that provides a computing environment that allows users to perform tasks related to disciplines such as but not limited to mathematics science engineering medicine business etc. more efficiently than if the tasks were performed in another type of computing environment such as an environment that required the user to develop code in a conventional programming language such as C C Fortran Pascal etc. In some implementations TCE may include a dynamically typed programming language e.g. the M language a MATLAB language a MATLAB compatible language a MATLAB like language etc. that can be used to express problems and or solutions in mathematical notations.

For example TCE may use an array as a basic element where the array may not require dimensioning. These arrays may be used to support array based programming where an operation may apply to an entire set of values included in the arrays. Array based programming may allow array based operations to be treated as high level programming that may allow for example operations to be performed on entire aggregations of data without having to resort to explicit loops of individual non array operations. In addition TCE may be adapted to perform matrix and or vector formulations that can be used for data analysis data visualization application development simulation modeling algorithm development etc. These matrix and or vector formulations may be used in many areas such as statistics image processing signal processing control design life sciences modeling discrete event analysis and or design state based analysis and or design etc.

TCE may further provide mathematical functions and or graphical tools e.g. for creating plots surfaces images volumetric representations etc. . In some implementations TCE may provide these functions and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . In some implementations TCE may provide these functions as block sets or in another way such as via a library etc.

TCE may be implemented as a text based environment e.g. MATLAB software Octave Python Comsol Script MATRIXx from National Instruments Mathematica from Wolfram Research Inc. Mathcad from Mathsoft Engineering Education Inc. Maple from Maplesoft Extend from Imagine That Inc. Scilab from The French Institution for Research in Computer Science and Control INRIA Virtuoso from Cadence Modelica or Dymola from Dynasim etc. a graphically based environment e.g. Simulink software Stateflow software SimEvents software Simscape software etc. by The MathWorks Inc. VisSim by Visual Solutions LabView by National Instruments Dymola by Dynasim SoftWIRE by Measurement Computing WiT by DALSA Coreco VEE Pro or SystemVue by Agilent Vision Program Manager from PPT Vision Khoros from Khoral Research Gedae by Gedae Inc. Scicos from INRIA Virtuoso from Cadence Rational Rose from IBM Rhapsody or Tau from Telelogic Ptolemy from the University of California at Berkeley aspects of a Unified Modeling Language UML or SysML environment etc. or another type of environment such as a hybrid environment that includes one or more of the above referenced text based environments and one or more of the above referenced graphically based environments.

TCE may include a programming language e.g. the MATLAB language that may be used to express problems and or solutions in mathematical notations. The programming language may be dynamically typed and or array based. In a dynamically typed array based computing language data may be contained in arrays and data types of the data may be determined e.g. assigned at program execution time.

For example suppose a program written in a dynamically typed array based computing language includes the following statements 

Now suppose the program is executed for example in a TCE such as TCE . During run time when the statement A hello is executed the data type of variable A may be a string data type. Later when the statement A int32 1 2 is executed the data type of variable A may be a 1 by 2 array containing elements whose data type are 32 bit integers. Later when the statement A 1.1 2.2 3.3 is executed since the language is dynamically typed the data type of variable A may be changed from the above 1 by 2 array to a 1 by 3 array containing elements whose data types are floating point. As can be seen by this example data in a program written in a dynamically typed array based computing language may be contained in an array. Moreover the data type of the data may be determined during execution of the program. Thus in a dynamically type array based computing language data may be represented by arrays and data types of data may be determined at run time.

TCE may provide mathematical routines and a high level programming language suitable for non professional programmers and may provide graphical tools that may be used for creating plots surfaces images volumetric representations or other representations. TCE may provide these routines and or tools using toolboxes e.g. toolboxes for signal processing image processing data plotting parallel processing etc. . TCE may also provide these routines in other ways such as for example via a library local or remote database e.g. a database operating in a computing cloud remote procedure calls RPCs and or an application programming interface API . TCE may be configured to improve runtime performance when performing computing operations. For example TCE may include a just in time JIT compiler.

Although shows example components of environment in some implementations environment may include fewer components different components differently arranged components or additional components than those depicted in . Alternatively or additionally one or more components of environment may perform one or more tasks described as being performed by one or more other components of environment .

Processing unit may include one or more processors microprocessors or other types of processing units that may interpret and execute instructions. Main memory may include one or more random access memories RAMs or other types of dynamic storage devices that may store information and or instructions for execution by processing unit . ROM may include one or more ROM devices or other types of static storage devices that may store static information and or instructions for use by processing unit . Storage device may include a magnetic and or optical recording medium and its corresponding drive.

Input device may include a mechanism that permits a user to input information to device such as a keyboard a camera an accelerometer a gyroscope a mouse a pen a microphone voice recognition and or biometric mechanisms a remote control a touch screen a neural interface etc. Output device may include a mechanism that outputs information to the user including a display a printer a speaker etc. Communication interface may include any transceiver like mechanism that enables device to communicate with other devices networks and or systems. For example communication interface may include mechanisms for communicating with another device or system via a network.

As described herein device may perform certain operations in response to processing unit executing software instructions contained in a computer readable medium such as main memory . A computer readable medium may be defined as a non transitory memory device. A memory device may include space within a single physical memory device or spread across multiple physical memory devices. The software instructions may be read into main memory from another computer readable medium such as storage device or from another device via communication interface . The software instructions contained in main memory may cause processing unit to perform processes described herein. Alternatively hardwired circuitry may be used in place of or in combination with software instructions to implement processes described herein. Thus implementations described herein are not limited to any specific combination of hardware circuitry and software.

Although shows example components of device in some implementations device may include fewer components different components differently arranged components or additional components than depicted in . Alternatively or additionally one or more components of device may perform one or more tasks described as being performed by one or more other components of device .

As shown in process may include receiving text that includes data values block and parsing the text to identify data types associated with the data values block . is a diagram of example operations for using a text import tool to create a graphical representation for a text file and to import a selected portion of the text file into TCE . The text import tool may be provided in client device and or server device . As shown in the text import tool may receive a text file that includes data values separated by delimiters or spaced into fixed width columns. In some implementations the text import tool may receive text file from server device may retrieve text file from memory e.g. main memory may receive text file from a user of client device TCE e.g. via user inputs etc.

The text import tool may parse text file to identify data types associated with the data values of text file . Data types may include for example numeric characters strings dates structures cell arrays function handles map containers time series etc. In some implementations the text import tool may identify data types of text file based on the content of text file . For example the text import tool may determine that a column of text file has a data type of a number if all or a particular amount of the content in the column includes a sequence of numeric strings preceded by identical non numeric prefixes and followed by identical non numeric suffixes. In some implementations the text import tool may determine that a column of text file has a data type of a date time if all or a particular amount of information in the column can be parsed to serial date numbers e.g. if the data is of a particular format such as month day year month day year etc. using a function e.g. a datenum function for one of a fixed set of date time formats. In some implementations the text import tool may ignore information provided in a header row e.g. a row showing Quantity Price etc. when identifying data types in text file . The text import tool may identify a header row of text file as a first row spanning all columns of text file where all data values begin with an alphabetical character.

As further shown in process may include generating a graphical representation of the text file that includes data cells corresponding to the data values based on the data values and or the data types block and providing the graphical representation for display block . For example as shown in the text import tool may utilize the data values of text file and or the identified data types to generate a graphical representation of text file . As shown graphical representation may include data cells arranged in a spreadsheet format e.g. columns and rows . The data cells may correspond to the data values of text file . The text import tool may provide graphical representation for display to a user of the text import tool. In some implementations the text import tool may provide a row in graphical representation not shown in that provides data types identified for the columns of text file . described below provides an example of a row depicting data types .

Returning to process may include receiving selections of data cell s in the graphical representation block storing the selections as a selection history block and providing the selection history for display block . For example as shown in the user of the text import tool may select one or more data cells of graphical representation using a mouse or other pointing device using a keyboard using voice commands etc. The text import tool may store the selections in a particular form such as a spreadsheet index form e.g. A12 B23 . The text import tool may display a selection history mechanism e.g. a menu a drop down menu etc. that displays a currently selected portion of graphical representation e.g. data cells B3 D8 . When selection history mechanism is selected by the user the text import tool may display an expanded selection history menu . Expanded selection history menu may display the currently selected portion of graphical representation and previously selected portions of graphical representation e.g. data cells A2 D10 F2 G10 F1 F9 etc. .

As shown in process may include receiving selection of a particular selection from the selection history block and identifying data cell s associated with the particular selection in the graphical representation block . For example as shown in the user of the text import tool may select or hover over e.g. with a mouse cursor one or more selections of expanded selection history and the text import tool may identify e.g. highlight shade etc. the one or more selections in graphical representation . If the user selects or hovers over A11 D11 in expanded selection history the text import tool may highlight data cells A11 D11 in graphical representation . As another example if the user selects or hovers over B3 D8 in expanded selection history the text import tool may highlight data cells B3 D8 in graphical representation as indicated by reference number .

As further shown in process may include receiving an instruction to import the particular selection to a TCE block and identifying based on the instruction data types associated with the data cell s of the particular selection block . For example as shown in after the user selects a particular selection e.g. highlighted selection from expanded selection history the text import tool may receive an instruction from the user to import the particular selection to TCE . In some implementations the user may provide the instruction to the text import tool via a voice command via a command s provided at a command prompt of the text import tool etc. In some implementations text import tool may provide an import mechanism e.g. a button an icon a link etc. that when selected by the user provides the instruction to the text import tool. In some implementations the text import tool may infer default column data types when the text import tool is opened and or when the user changes a selected data container.

Based on the instruction the text import tool may identify data type s e.g. text numbers etc. associated with the data cells provided in the particular selection. For example the text import tool may determine the column s associated with the particular selection and may retrieve the data type s previously identified for the determined column s . For highlighted selection the text import tool may determine that columns B through D are selected and may retrieve data types e.g. numbers previously identified for columns B through D. 

Returning to process may include generating a data container associated with the TCE based on the particular selection and the identified data types block and providing the data container to the TCE block . For example as shown in the text import tool may generate a data container e.g. a matrix a cell array etc. based on the identified data types associated with the data cells provided in the particular selection e.g. highlighted selection . In some implementations the text import tool may select a particular type of data container that can store the information provided in the particular selection. For example if the particular selection includes a single column of numeric data types the text import tool may select a vector array as data container since a vector array may store numbers in a single column. If the particular selection includes multiple columns of text and number data types the text import tool may select a heterogeneous array e.g. a dataset array as data container since a heterogeneous array may store columns of mixed data types. In some implementations the user may select data container from a user interface combination window. If there is a mismatch between data types of the selection and data types of data container the text import tool may implement unimportable data rules.

Data container may include the information of the particular selection e.g. highlighted selection and may be in a format that is understood by TCE e.g. a matrix a cell array a vector a table a dataset array etc. . The text import tool may provide data container to TCE and TCE may receive data container .

Process blocks may include the process blocks depicted in . As shown in process blocks may include inferring default data types for the data values of the text block generating a UI to specify a data type for each column of the text and to enable editing of the data types block and providing the UI for display block . is a diagram of example operations for inferring default data types for data values of a text file and for enabling the data types to be edited. With reference to the text import tool may determine default column data types for text file based on the content of the columns and using heuristics. For example the text import tool may determine that a column of text file has a default data type of a number if all of the content in the column e.g. excluding a header includes a sequence of numeric strings preceded by identical non numeric prefixes and followed by identical non numeric suffixes. In some implementations the text import tool may determine that regular expressions are used to identify numbers with a comma decimal separator and or a period thousand separator for European numeric formats. In some implementations the text import tool may determine that a column of text file has a default data type of a date time if information in the column includes data of a particular format such as month day year month day year etc.

The text import tool may parse column text into the determined data type. When parsing text to numbers the text import tool may utilize expressions to remove optional non numeric prefixes and suffixes and may scan any remaining numeric content. When parsing text to dates times the text import may convert text to dates by using a function such as a datenum function.

After parsing text file into the determined data types the text import tool may generate a user interface for displaying data types associated with each column of text file . As an example assume that based on parsing text file the text import tool generates a user interface in which a first column e.g. column A of text file is associated with a number data type the second column e.g. column B of text file is associated with a text data type etc. The user interface may enable a user to select and edit any of data types . The user may select one of data types and the user interface may display a menu that enables the user to edit the selected data type e.g. change a number data type to a text data type . For date time data types menu may include several specific date time formats e.g. dd mm yyyy mm dd etc. from which the user may select. In some implementations the text import tool may enable the user to select the data time and provide a custom date format. Menu may include a mechanism e.g. a button an icon a link etc. that when selected enables the user to edit data types for multiple selected columns of text file at one time which may facilitate importing data types from text files with several columns.

In some implementations process blocks may include the process blocks depicted in . As shown in process blocks may include determining that the text includes fixed width columns block inferring default fixed width columns from the data values of the text block generating a UI with the default fixed width columns and enabling temporary expansion of a column width block and providing the UI for display block .

When text file is received the text import tool may determine whether text file has a fixed width structure. In some implementations the text import tool may determine that text file has a fixed width structure if most transitions from spaces to non spaces in text file occur at predictable horizontal locations and if most lines in text file have the same length. In some implementations the text import tool may automatically infer default fixed width column positions from text file by detecting transitions from non space characters to space characters which are repeated in predictable locations from one line to the next. If the text import tool determines that text file has a fixed width structure the text import tool may display a fixed width form of text file by default. As further shown in fixed width form of text file may include fixed column widths that are repeated in predictable locations of the graphical representation of text file .

Fixed column widths may match a number of characters in each fixed width column so that fixed width form of text file reflects a layout of the fixed width text file . Consequently column headers for columns that include a small number of characters may be too narrow to accommodate headers such as column names data type names etc. To enable the user to interact effectively with such columns when a user selects a column as indicated by reference number the text import tool may temporarily expand the narrow columns as indicated by reference number . This may permit fixed width form of text file to reflect the fixed width layout while also enabling the user to interact with column headers. As further shown in the text import tool may provide a context menu that enables the user to merge or split fixed width columns directly from fixed width form . For example if the user selects columns C and D and a Merges Columns entry from context menu the text import tool may merge columns C and D together into a single column.

In some implementations process blocks may include the process blocks depicted in . As shown in process blocks may include inferring delimiters between the data values of the text block generating a UI to provide the delimiters permit conditional application of the delimiters and define the delimiters block and providing the UI for display block .

The text import tool may provide a mechanism e.g. a menu a drop down menu etc. that enables the user to view the determined delimiters from text file . If the user selects mechanism the text import tool may provide an expanded menu that may include a list of standard delimiters e.g. tabs commas spaces semicolons etc. suggested delimiters custom delimiters defined by the user etc. The standard delimiters determined to be in text file may be identified by the text import tool. For example the text import tool may check e.g. in a checkbox the standard delimiters determined to be in text file . Suggested delimiters may include delimiters suggested by the text import tool based on the analysis of text file . For example if the text import tool detects a specific character s e.g. in text file that may be a delimiter the text import tool may provide the specific character s in suggested delimiters . Custom delimiters may enable the user to define a custom delimiter e.g. that may be utilized by the text import to analyze text file and parse columns of text file . Expanded menu may present the user with a relevant set of choices for delimiters which may reduce the need for the user to type complex text.

The text import tool may enable the user to select one or more delimiters in expanded menu that are to be applied to text file . The text import tool may utilize the applied delimiters to analyze text file and parse columns of text file . Expanded menu may substitute words e.g. Tab Space etc. for difficult to recognize delimiters. The text import tool may enable the user to define delimiters which separate rows of data as well as columns of text file . The text import tool may permit delimiters to be conditionally applied in order to conditionally parse columns of text file . For example the text import tool may apply a selected delimiter only if the selected delimiter does not appear within quotes or parentheses in text file .

In some implementations process blocks may include the process blocks depicted in . As shown in process blocks may include identifying a default header row in the text block generating a UI with editable column headers based on the default header row and enabling the user to change the header row block and providing the UI for display block .

The text import tool may identify a first row spanning all columns of text file where all data cells begin with an alphabetical character as a header for text file . The text import tool may automatically select the identified header as a default header row for text file . For example the text import tool may select row 4 of text file as default header row since the data cells of row 4 include alphabetical characters. The text import tool may display the characters of default header row in a separate row e.g. in row 1 and may enable the user to edit the text of the separate row e.g. to override names derived from text file as indicated by reference number . The text import tool may provide a header row selector from which a user may select a header row of text file . For example the user may utilize header row selector to select a different header row than default header row . In some implementations default header row or the user selected header row may be highlighted by the text import tool. In some implementations header names may be included in column headers so that the header names may remain visible as the user scrolls through the graphical representation.

In some implementations process blocks may include the process blocks depicted in . As shown in process blocks may include generating a UI that provides a preview of text that is parsed into data types block and providing the UI for display block .

In some implementations process blocks may include the process blocks depicted in . As shown in process blocks may include detecting a portion of the text being viewed block parsing the detected portion of the text being viewed block generating a UI of the parsed portion of the text block and providing the UI for display block .

As shown in the text import tool may be utilizing a large text file but may only be displaying a portion of large text file in a viewing pane. The text import tool may detect portion of large text file being displayed and may parse the detected portion of text file . The text import tool may display the parsed portion of text file as indicated by reference number .

Process block may include the process blocks depicted in . As shown in process block may include receiving a selected data container associated with the TCE block generating the selected data container block and providing the generated data container to the TCE block .

In some implementations if the user selects a data container from menu that is not appropriate for the information provided in text file the text import tool may prevent the selected data container from being used. In such situations the text import tool may generate an error message indicating that the selected data container is improper and may recommend one or more other data containers that may be appropriate for text file . For example if the text file includes multiple columns and the user selects a vector array as the data container from menu the text import tool may generate the error message since a vector array may only store numbers in a single column. In some implementations if text file includes multiple columns and the user selects Column Vectors as data container the text import tool may import the selected data to the column vectors without error. If there is a data type mismatch such as when one or more of the selected columns has a type text and data container may only include numeric content e.g. is a matrix the text import tool may apply the unimportable data rules to resolve the incompatibility but may not generate an error.

Although a show example operations capable of being performed by client device and or server device in some implementations client device and or server device may perform fewer operations different operations or additional operations than depicted in . In some implementations one or more operations described above may be performed in parallel.

Systems and or methods described herein may provide a text import tool that enables information to be imported to or converted for use in a computing environment such as a TCE. The text import tool may define imported data types for the information and may parse the information into the defined data types.

The foregoing description of implementations provides illustration and description but is not intended to be exhaustive or to limit the implementations to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the implementations.

It will be apparent that example aspects as described above may be implemented in many different forms of software firmware and hardware in the implementations illustrated in the figures. The actual software code or specialized control hardware used to implement these aspects should not be construed as limiting. Thus the operation and behavior of the aspects were described without reference to the specific software code it being understood that software and control hardware could be designed to implement the aspects based on the description herein.

Further certain portions of the implementations may be implemented as a component that performs one or more functions. This component may include hardware such as a processor an ASIC or a FPGA or a combination of hardware and software.

Even though particular combinations of features are recited in the claims and or disclosed in the specification these combinations are not intended to limit the disclosure of the specification. In fact many of these features may be combined in ways not specifically recited in the claims and or disclosed in the specification. Although each dependent claim listed below may directly depend on only one other claim the disclosure of the specification includes each dependent claim in combination with every other claim in the claim set.

No element act or instruction used in the present application should be construed as critical or essential unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

