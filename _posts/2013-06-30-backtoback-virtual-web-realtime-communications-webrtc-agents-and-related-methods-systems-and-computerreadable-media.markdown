---

title: Back-to-back virtual web real-time communications (WebRTC) agents, and related methods, systems, and computer-readable media
abstract: Back-to-back Web Real-Time Communication (WebRTC) virtual agents, and related methods, systems, and computer-readable media are disclosed herein. In one embodiment, a method for providing back-to-back virtual WebRTC agents comprises receiving, by a WebRTC server executing on a computing device, a WebRTC offer/answer exchange between first and second WebRTC clients. The method further comprises instantiating one or more virtual WebRTC agents. The method also comprises establishing a first WebRTC interactive flow between the first WebRTC client and one of the one or more virtual WebRTC agents, and a second WebRTC interactive flow between the second WebRTC client and one of the one or more virtual WebRTC agents. The method additionally comprises directing a content of the first WebRTC interactive flow to the second WebRTC interactive flow, and a content of the second WebRTC interactive flow to the first WebRTC interactive flow, via the one or more virtual WebRTC agents.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09525718&OS=09525718&RS=09525718
owner: Avaya Inc.
number: 09525718
owner_city: Basking Ridge
owner_country: US
publication_date: 20130630
---
The technology of the disclosure relates generally to Web Real Time Communications WebRTC interactive sessions.

Web Real Time Communications WebRTC represents an ongoing effort to develop industry standards for integrating real time communications functionality into web clients such as web browsers to enable direct interaction with other web clients. This real time communications functionality is accessible by web developers via standard markup tags such as those provided by version 5 of the Hypertext Markup Language HTML5 and client side scripting Application Programming Interfaces APIs such as JavaScript APIs. More information regarding WebRTC may be found in WebRTC APIs and RTCWEB Protocols of the HTML5 Real Time Web by Alan B. Johnston and Daniel C. Burnett 2012 Digital Codex LLC which is incorporated herein in its entirety by reference.

WebRTC provides built in capabilities for establishing real time video audio and or data streams in both point to point interactive sessions and multi party interactive sessions. The WebRTC standards are currently under joint development by the World Wide Web Consortium W3C and the Internet Engineering Task Force IETF . Information on the current state of WebRTC standards can be found at e.g. http www.w3c.org and http www ietf.org.

To establish a WebRTC interactive session e.g. a real time video audio and or data exchange two web clients may retrieve WebRTC enabled web applications such as HTML5 JavaScript web applications from a WebRTC application server. Through the web applications the two web clients engage in a media negotiation to communicate and reach an agreement on parameters that define characteristics of the WebRTC interactive session. This media negotiation is known as a WebRTC offer answer exchange. In an offer answer exchange a first web client operating on a sender computing device sends an offer to a second web client on a recipient computing device. The offer includes a WebRTC session description object that specifies media types and capabilities that the first web client supports and prefers for use in the WebRTC interactive session. The second web client then responds with a WebRTC session description object answer that indicates which of the offered media types and capabilities it supports and accepts for the WebRTC interactive session. Once the WebRTC offer answer exchange is complete the web clients may then establish a direct peer connection with one another and may begin a real time exchange of media or data. The peer connection between the web clients typically employs the Secure Real time Transport Protocol SRTP to transport real time media flows and may utilize various other protocols for real time data interchange.

However a peer to peer architecture may not be optimal for real time interaction in some circumstances. For instance it may be necessary to provide recording or monitoring of the WebRTC interactive flow and or to address known incompatibilities between web clients at endpoints of the WebRTC interactive flow. The WebRTC standards provide for a WebRTC interactive flow to be routed through a TURN Traversal Using Relay around NAT server in situations in which a direct peer connection is not possible. However a WebRTC interactive flow passing through a TURN server is encrypted and thus cannot be examined or monitored at the TURN server. Moreover converting a WebRTC interactive flow to a more easily manipulated format in real time would require a gateway which may be overly complex and or commercially unavailable.

Embodiments disclosed in the detailed description provide back to back virtual Web Real Time Communications WebRTC agents. Related methods systems and computer readable media are also disclosed. In some embodiments a WebRTC server through which two or more WebRTC clients seek to establish a WebRTC interactive session instantiates one or more virtual WebRTC agents. The WebRTC server may cause each of the two or more WebRTC clients to establish a WebRTC interactive flow with the one or more virtual WebRTC agents. The WebRTC server may then connect the virtual WebRTC agents back to back by directing the content of the established WebRTC interactive flows between or among the one or more virtual WebRTC agents. In this manner the WebRTC server may provide a WebRTC interactive session for the two or more WebRTC clients while also providing additional media processing functionality. As non limiting examples the media processing functionality may include recording and or monitoring of the WebRTC interactive flows extracting content from or injecting content into the WebRTC interactive flows and or resolving potential or actual incompatibilities between the WebRTC clients.

In this regard in one embodiment a method for providing a back to back virtual WebRTC agent is provided. The method comprises receiving by a WebRTC server executing on a computing device a WebRTC offer answer exchange between a first WebRTC client and a second WebRTC client. The method further comprises instantiating one or more virtual WebRTC agents. The method also comprises establishing a first WebRTC interactive flow between the first WebRTC client and one of the one or more virtual WebRTC agents and a second WebRTC interactive flow between the second WebRTC client and one of the one or more virtual WebRTC agents. The method additionally comprises directing a content of the first WebRTC interactive flow to the second WebRTC interactive flow and a content of the second WebRTC interactive flow to the first WebRTC interactive flow via the one or more virtual WebRTC agents.

In another embodiment a system for providing a back to back virtual WebRTC agent is provided. The system comprises at least one communications interface and a WebRTC server associated with the at least one communications interface. The WebRTC server comprises a WebRTC application provider configured to receive a WebRTC offer answer exchange between a first WebRTC client and a second WebRTC client. The WebRTC server further comprises a virtual WebRTC agent manager. The virtual WebRTC agent manager is configured to instantiate one or more virtual WebRTC agents. The virtual WebRTC agent manager is further configured to establish a first WebRTC interactive flow between the first WebRTC client and one of the one or more virtual WebRTC agents and a second WebRTC interactive flow between the second WebRTC client and one of the one or more virtual WebRTC agents. The virtual WebRTC agent manager is also configured to direct a content of the first WebRTC interactive flow to the second WebRTC interactive flow and a content of the second WebRTC interactive flow to the first WebRTC interactive flow via the one or more virtual WebRTC agents.

In another embodiment a non transitory computer readable medium is provided. The non transitory computer readable medium has stored thereon computer executable instructions to cause a processor to implement a method comprising receiving a WebRTC offer answer exchange between a first WebRTC client and a second WebRTC client. The method implemented by the computer executable instructions further comprises instantiating one or more virtual WebRTC agents. The method implemented by the computer executable instructions also comprises establishing a first WebRTC interactive flow between the first WebRTC client and one of the one or more virtual WebRTC agents and a second WebRTC interactive flow between the second WebRTC client and one of the one or more virtual WebRTC agents. The method implemented by the computer executable instructions additionally comprises directing a content of the first WebRTC interactive flow to the second WebRTC interactive flow and a content of the second WebRTC interactive flow to the first WebRTC interactive flow via the one or more virtual WebRTC agents.

With reference now to the drawing figures several exemplary embodiments of the present disclosure are described. The word exemplary is used herein to mean serving as an example instance or illustration. Any embodiment described herein as exemplary is not necessarily to be construed as preferred or advantageous over other embodiments.

Embodiments disclosed in the detailed description provide back to back virtual Web Real Time Communications WebRTC agents. Related methods systems and computer readable media are also disclosed. In some embodiments a WebRTC server through which two or more WebRTC clients seek to establish a WebRTC interactive session instantiates one or more virtual WebRTC agents. The WebRTC server may cause each of the two or more WebRTC clients to establish a WebRTC interactive flow with the one or more virtual WebRTC agents. The WebRTC server may then connect the virtual WebRTC agents back to back by directing the content of the established WebRTC interactive flows between or among the one or more virtual WebRTC agents. In this manner the WebRTC server may provide a WebRTC interactive session for the two or more WebRTC clients while also providing additional media processing functionality. As non limiting examples the media processing functionality may include recording and or monitoring of the WebRTC interactive flows extracting content from or injecting content into the WebRTC interactive flows and or resolving potential or actual incompatibilities between the WebRTC clients.

In this regard in one embodiment a method for providing a back to back virtual WebRTC agent is provided. The method comprises receiving by a WebRTC server executing on a computing device a WebRTC offer answer exchange between a first WebRTC client and a second WebRTC client. The method further comprises instantiating one or more virtual WebRTC agents. The method also comprises establishing a first WebRTC interactive flow between the first WebRTC client and one of the one or more virtual WebRTC agents and a second WebRTC interactive flow between the second WebRTC client and one of the one or more virtual WebRTC agents. The method additionally comprises directing a content of the first WebRTC interactive flow to the second WebRTC interactive flow and a content of the second WebRTC interactive flow to the first WebRTC interactive flow via the one or more virtual WebRTC agents.

For purposes of illustration a WebRTC interactive flow in is shown as passing between the computing device and a computing device and a WebRTC interactive flow is shown as passing between the computing device and a computing device . It is to be understood that the computing devices and may all be located within the same public or private network or may be located within separate communicatively coupled public or private networks. Some embodiments of the interactive communications system of may provide that each of the computing devices and may be any computing device having network communications capabilities such as a smartphone a tablet computer a dedicated web appliance a media server a desktop or server computer or a purpose built communications device as non limiting examples. The computing devices and include communications interfaces and respectively for connecting the computing devices and to one or more public and or private networks. In some embodiments the elements of the computing devices and may be distributed across more than one computing device .

The computing devices and of include WebRTC clients and respectively. Each of the WebRTC clients and may be a WebRTC enabled web browser application a dedicated communications application a mobile application or an interface less application such as a daemon or service application as non limiting examples. The WebRTC clients and implement the protocols codecs and Application Programming Interfaces APIs necessary to provide real time WebRTC interactive sessions between the computing devices and respectively and the computing device .

As seen in the computing device is communicatively coupled to an audio in device e.g. a microphone for receiving audio input and an audio out device for example speakers or headphones for generating audio output. The computing device is further communicatively coupled to a video in device such as a camera webcam or other video source for receiving video input and a video out device e.g. a display for displaying video output. Likewise the computing device is communicatively coupled to an audio in device an audio out device a video in device and a video out device . The audio in devices and the audio out devices and the video in devices and and or the video out devices and may be integrated into the respective computing devices and and or they may be peripheral devices and or virtual devices communicatively coupled to the respective computing devices and . In some embodiments the computing devices and or may be communicatively coupled to more or fewer devices than illustrated in .

To establish a WebRTC interactive session the WebRTC client and the WebRTC client download a WebRTC web application not shown from a WebRTC application provider of the WebRTC server via Hyper Text Transfer Protocol HTTP Hyper Text Transfer Protocol Secure HTTPS connections and . In some embodiments the WebRTC web application may comprise an HTML5 JavaScript web application that provides a rich user interface using HTML5 and uses JavaScript to handle user input and to communicate with the WebRTC application provider . The WebRTC client and the WebRTC client then engage in a WebRTC offer answer exchange by exchanging WebRTC session description objects not shown via the WebRTC application provider . The exchanged WebRTC session description objects are used to determine the media types and capabilities for the desired WebRTC interactive session.

In a typical peer to peer architecture after the WebRTC offer answer exchange is complete a WebRTC interactive flow would be established directly between the WebRTC client and the WebRTC client via a peer connection. However as noted above a peer to peer architecture may not be optimal in some circumstances. For instance a peer to peer architecture may cause recording or monitoring of the WebRTC interactive flow and or addressing incompatibilities between the WebRTC client and the WebRTC client to be difficult or impracticable.

In this regard virtual WebRTC agents and are provided by the virtual WebRTC agent manager . In the example of as the WebRTC application provider receives the WebRTC offer answer exchange from the WebRTC clients and the virtual WebRTC agent manager instantiates the virtual WebRTC agents and corresponding to the WebRTC clients and . In some embodiments the virtual WebRTC agent manager may instantiate the virtual WebRTC agents and by launching one or more instances of a WebRTC client such as a web browser on the computing device . Some embodiments may provide that the virtual WebRTC agents and are executed within a virtual instance of an operating system.

After instantiation the virtual WebRTC agents and are each directed by the virtual WebRTC agent manager to download a virtual WebRTC application not shown from a virtual WebRTC application provider . Some embodiments may provide that the virtual WebRTC application provider is communicatively coupled to the virtual WebRTC agent manager . In some embodiments the virtual WebRTC application provider may be integrated into or otherwise constitute an element of the virtual WebRTC agent manager and or the WebRTC application provider . The virtual WebRTC application includes specialized instructions for interfacing with the WebRTC APIs of the virtual WebRTC agents and . The virtual WebRTC agents and may communicate via the virtual WebRTC application with the WebRTC clients and respectively and with the virtual WebRTC agent manager .

The virtual WebRTC agent manager causes the virtual WebRTC agents and to establish the WebRTC interactive flows and with the corresponding WebRTC clients and . In doing so the virtual WebRTC agent manager and or the virtual WebRTC agents and may modify the data being passed between the WebRTC clients and to facilitate the establishment of the WebRTC interactive flows and . For example data related to the location and or identity of the endpoints of each of the WebRTC interactive flows and may be modified to permit the virtual WebRTC agents and to act as proxies for their corresponding WebRTC clients and .

The virtual WebRTC agent manager then connects the virtual WebRTC agents and back to back i.e. the content output by the WebRTC interactive flow of the virtual WebRTC agent is directed as input into the WebRTC interactive flow of the virtual WebRTC agent and vice versa . To accomplish a back to back connection the virtual WebRTC agent manager provides a virtual audio receiver Rx a virtual audio transmitter Tx a virtual video receiver Rx a virtual video transmitter Tx a virtual data receiver Rx and a virtual data transmitter Tx to which the virtual WebRTC agent is communicatively coupled. Likewise the virtual WebRTC agent is communicatively coupled to a virtual audio receiver Rx a virtual audio transmitter Tx a virtual video receiver Rx a virtual video transmitter Tx a virtual data receiver Rx and a virtual data transmitter Tx provided by the virtual WebRTC agent manager . As the WebRTC interactive flows and commence the virtual WebRTC agents and forward audio signals received from the corresponding WebRTC interactive flows and to the virtual audio receivers and . The virtual WebRTC agents and also forward video signals received from the corresponding WebRTC interactive flows and to the virtual video receivers and and forward data received from the corresponding WebRTC interactive flows and to the data receivers and .

The virtual audio receiver that is communicatively coupled to the virtual WebRTC agent is configured to direct audio signals received from the virtual WebRTC agent to the virtual audio transmitter that is communicatively coupled to the virtual WebRTC agent . The virtual video receiver that is communicatively coupled to the virtual WebRTC agent is configured to direct video signals received from the virtual WebRTC agent to the virtual video transmitter that is communicatively coupled to the virtual WebRTC agent . The virtual data receiver that is communicatively coupled to the virtual WebRTC agent is configured to direct data received from the virtual WebRTC agent to the virtual data transmitter that is communicatively coupled to the virtual WebRTC agent . Likewise the virtual audio receiver that is communicatively coupled to the virtual WebRTC agent is configured to direct audio signals received from the virtual WebRTC agent to the virtual audio transmitter that is communicatively coupled to the virtual WebRTC agent . The virtual video receiver that is communicatively coupled to the virtual WebRTC agent is configured to direct video signals received from the virtual WebRTC agent to the virtual video transmitter that is communicatively coupled to the virtual WebRTC agent . The virtual data receiver that is communicatively coupled to the virtual WebRTC agent is configured to direct data received from the virtual WebRTC agent to the virtual data transmitter that is communicatively coupled to the virtual WebRTC agent .

From the perspective of the WebRTC clients and the resulting WebRTC interactive session including the WebRTC interactive flows and appears no different from a WebRTC interactive session transported over a direct peer connection. During the resulting WebRTC interactive session the virtual WebRTC agent manager may extract content from the WebRTC interactive flow and or the WebRTC interactive flow by accessing an input from the virtual audio receivers and or the virtual video receivers and or and or the virtual data receivers and or . The virtual WebRTC agent manager may also inject content into the WebRTC interactive flow and or the WebRTC interactive flow by modifying an output from the virtual audio transmitters and or the virtual video transmitters and or and or the virtual data transmitters and . Thus some embodiments may provide that content may be extracted from or injected into the WebRTC interactive flow and or the WebRTC interactive flow . In some embodiments content from the WebRTC interactive flow and or the WebRTC interactive flow may be recorded or transformed by the virtual WebRTC agent manager .

In some embodiments content from the WebRTC interactive flow and or the WebRTC interactive flow may be optionally directed to or received from a functionality provider as indicated by bidirectional video feed bidirectional audio feed and bidirectional data feed . The functionality provider may provide additional media processing functionality such as recording or transforming content of the WebRTC interactive flow and or the WebRTC interactive flow . In some embodiments the media processing functionality provider may provide content such as audio or video announcements to be injected into the WebRTC interactive flow and or the WebRTC interactive flow .

In the example of the two virtual WebRTC agents and are instantiated by the virtual WebRTC agent manager . This may be useful in circumstances such as where the WebRTC client and the WebRTC client are known to be incompatible or have limited compatibility. As a non limiting example the WebRTC clients and may be web browsers having differing levels of support for the WebRTC APIs. To remedy such incompatibilities the specific client type and or client version of the WebRTC client and or the WebRTC client may be determined by the WebRTC application provider and or the virtual WebRTC agent manager . In some embodiments the client type and or client version of the WebRTC client and or the WebRTC client may be determined based on data received as part of a WebRTC offer answer exchange a query response exchange between the virtual WebRTC agent manager and the WebRTC client and or the WebRTC client an HTTP header or other data provided by the WebRTC client and or the WebRTC client . The virtual WebRTC agent manager may then instantiate the virtual WebRTC agents and having a client type and or version corresponding to the client type and or version of the WebRTC clients and respectively. Because each of the WebRTC clients and directly communicates with a virtual WebRTC agent of the same type and version incompatibilities between the WebRTC clients and may be resolved.

Conversely in situations in which the WebRTC clients and are known to be compatible the virtual WebRTC agent manager may provide a WebRTC interactive session between the WebRTC clients and using a single virtual WebRTC agent. Providing a single virtual WebRTC agent may conserve computing resources of the computing device and increase the scalability of the WebRTC server . This embodiment is discussed in greater detail below with respect to .

To generally describe exemplary operations of the WebRTC application provider and the virtual WebRTC agent manager of for providing back to back virtual WebRTC agents is provided. For the sake of clarity elements of are referenced in describing . In the example of operations begin with the WebRTC application provider receiving a WebRTC offer answer exchange between a first WebRTC client and a second WebRTC client block . In some embodiments the WebRTC offer answer includes an exchange of WebRTC session description objects that may be used to determine the media types and capabilities of the first WebRTC client and the second WebRTC client for the desired WebRTC interactive session.

The virtual WebRTC agent manager next instantiates one or more virtual WebRTC agents and block . Some embodiments may provide that a single virtual WebRTC agent is instantiated if the first WebRTC client and the second WebRTC client are determined to be compatible. In some embodiments a virtual WebRTC agent may be established for each of the first WebRTC client and the second WebRTC client if the first WebRTC client and the second WebRTC client are determined to be incompatible. As a non limiting example the virtual WebRTC agent manager may instantiate the one or more virtual WebRTC agents and by launching one or more instances of a WebRTC client such as a web browser on the computing device .

The virtual WebRTC agent manager then establishes a first WebRTC interactive flow between the first WebRTC client and one of the one or more virtual WebRTC agents e.g. the virtual WebRTC agent and a second WebRTC interactive flow between the second WebRTC client and one of the one or more virtual WebRTC agents e.g. the virtual WebRTC agent block . According to some embodiments herein the virtual WebRTC agent manager and or the virtual WebRTC agents and may modify the data being passed between the WebRTC clients and to facilitate the establishment of the WebRTC interactive flows and . For example data relating to the location and or identity of the endpoints of each of the WebRTC interactive flows and may be modified to permit the virtual WebRTC agents and to act as proxies for their corresponding WebRTC clients and .

The virtual WebRTC agent manager next directs a content of the first WebRTC interactive flow to the second WebRTC interactive flow and a content of the second WebRTC interactive flow to the first WebRTC interactive flow via the one or more virtual WebRTC agents and block . This results in a back to back connection between the one or more virtual WebRTC agents and . In some embodiments this may be accomplished through the use of virtual audio receivers and transmitters virtual video receivers and transmitters and virtual data receivers and transmitters provided by the virtual WebRTC agent manager as illustrated in .

To illustrate exemplary communications flows during the establishment of a WebRTC interactive session using the virtual WebRTC agents and of is provided. In the WebRTC client the virtual WebRTC agent the WebRTC server the virtual WebRTC agent and the WebRTC client of are each represented by vertical dotted lines. It is to be understood that the WebRTC server includes the WebRTC application provider and the virtual WebRTC agent manager which for the sake of clarity are omitted from this example. It is to be further understood for this example that the WebRTC client and the WebRTC client have each downloaded a WebRTC enabled web application such as an HTML5 JavaScript WebRTC application from the WebRTC server .

As seen in the establishment of a WebRTC interactive session via the virtual WebRTC agents and begins with the WebRTC client sending a session description object SDP to the WebRTC server in this example via an HTTPS connection . The WebRTC session description object is referred to as SDP Object A and is indicated by arrow . SDP Object A represents the offer in a WebRTC offer answer exchange and specifies the media types and capabilities that the WebRTC client supports and prefers for use in the WebRTC interactive session.

The WebRTC server i.e. the virtual WebRTC agent manager instantiates the virtual WebRTC agent corresponding to the WebRTC client as indicated by arrow . In some embodiments a client type and or a client version of the WebRTC client may be determined based on the SDP Object A a query response exchange between the WebRTC server and the WebRTC client an HTTP header or other data provided by the WebRTC client . The virtual WebRTC agent may be instantiated having a client type and or a client version that is known to be compatible with the WebRTC client . The WebRTC server then forwards the SDP Object A to the WebRTC client as indicated by arrow .

After the WebRTC client receives the SDP Object A from the WebRTC server the WebRTC client in response sends a WebRTC session description object referred to as SDP Object B via HTTPS to the WebRTC server as indicated by arrow . The SDP Object B in this example represents the answer in the WebRTC offer answer exchange. The WebRTC server i.e. the virtual WebRTC agent manager then instantiates the virtual WebRTC agent corresponding to the WebRTC client as indicated by arrow . Some embodiments may provide that a client type and or a client version of the WebRTC client may be determined based on the SDP Object B a query response exchange between the virtual WebRTC agent manager and the WebRTC client an HTTP header or other data provided by the WebRTC client . The virtual WebRTC agent may be instantiated having a client type and or a client version known to be compatible with the WebRTC client . The WebRTC server in turn forwards the SDP Object B to the WebRTC client as shown by arrow .

With continuing reference to the WebRTC client and the WebRTC client then begin hole punching to determine the best way to establish direct communications with the virtual WebRTC agents and respectively. This is indicated by bidirectional arrows and in . Hole punching is a technique often using protocols such as Interactive Connectivity Establishment ICE in which both of the WebRTC clients and establish a connection with an unrestricted third party server not shown that uncovers external and internal address information for use in direct communications.

Once the ICE hole punching indicated by arrows and is successful the WebRTC client and the WebRTC client begin key negotiations to establish a secure peer connection. In a typical peer to peer architecture the key negotiations take place directly between the WebRTC client and the WebRTC client . However in this example each of the WebRTC clients and negotiates with its corresponding virtual WebRTC agent and as indicated by bidirectional arrows and . If key negotiations are successfully concluded peer connections are established between the WebRTC client and the virtual WebRTC agent and between the WebRTC client and the virtual WebRTC agent as indicated by bidirectional arrows and .

Upon establishing peer connections with their corresponding virtual WebRTC agents and the WebRTC client and the WebRTC client begin exchanging WebRTC media and or data flows. As seen in the WebRTC media and or data flows pass from the WebRTC clients and to their respective virtual WebRTC agents and as indicated by bidirectional arrows and . The virtual WebRTC agents and then send the content of the WebRTC interactive flows and through the WebRTC server as shown by bidirectional arrows and . In this manner the WebRTC server may selectively control monitor and or modify a content of WebRTC interactive flows and between the WebRTC clients and .

As noted above with respect to the virtual WebRTC agent manager may enable a WebRTC interactive session between the WebRTC clients and using a single virtual WebRTC agent if the WebRTC clients and are known to be compatible. To illustrate this embodiment is provided. In the exemplary interactive communications system of is shown. In this example however it is assumed that the WebRTC clients and are known to be compatible. For instance the WebRTC clients and may be WebRTC enabled web browsers of the same type and version. Thus in the embodiment of the virtual WebRTC agent manager instantiates a single virtual WebRTC agent to which both of the WebRTC clients and may connect. The virtual WebRTC agent downloads a virtual WebRTC application not shown from the virtual WebRTC application provider . The virtual WebRTC application may contain specialized instructions for enabling the virtual WebRTC agent to communicate with the WebRTC clients and and with the virtual WebRTC agent manager . In some embodiments the virtual WebRTC application may enable the virtual WebRTC agent manager to control how the virtual WebRTC agent directs audio and or video data to the WebRTC clients and .

In the example of the virtual WebRTC agent manager causes the virtual WebRTC agent to establish the WebRTC interactive flows and with the WebRTC clients and . The virtual WebRTC agent may then employ its built in WebRTC APIs to direct a content of the WebRTC interactive flow to the WebRTC interactive flow and vice versa. The virtual WebRTC agent may also direct a content of the WebRTC interactive flow and or the WebRTC interactive flow to the virtual WebRTC agent manager . During the resulting WebRTC interactive session the virtual WebRTC agent manager may extract content from the WebRTC interactive flow and or the WebRTC interactive flow by accessing content sent from the virtual WebRTC agent . For example content from the WebRTC interactive flow and or the WebRTC interactive flow may be recorded or transformed by the virtual WebRTC agent manager or by the functionality provider . The virtual WebRTC agent manager may also direct the virtual WebRTC agent to inject content into the WebRTC interactive flow and or the WebRTC interactive flow .

In processing begins with the WebRTC application provider receiving a WebRTC offer answer exchange between a first WebRTC client and a second WebRTC client block . Based on the WebRTC offer answer exchange the virtual WebRTC agent manager determines whether the first WebRTC client and the second WebRTC client are known to be compatible block . In some embodiments determining a compatibility of the first WebRTC client and the second WebRTC client may include comparing a client type and or a client version of each of the first WebRTC client and the second WebRTC client .

If the first WebRTC client and the second WebRTC client are determined to be compatible the virtual WebRTC agent manager may enable a WebRTC interactive session between the first WebRTC client and the second WebRTC client using a single virtual WebRTC agent as discussed above with respect to . Accordingly the virtual WebRTC agent manager instantiates a virtual WebRTC agent that is compatible with both the first WebRTC client and the second WebRTC client block . As a non limiting example the virtual WebRTC agent manager may execute a WebRTC client of the same client type and or version as the first WebRTC client and or the second WebRTC client . The virtual WebRTC agent manager then establishes a first WebRTC interactive flow between the first WebRTC client and the virtual WebRTC agent block . The virtual WebRTC agent manager also establishes a second WebRTC interactive flow between the second WebRTC client and the virtual WebRTC agent block . The virtual WebRTC agent manager directs a content of the first WebRTC interactive flow to the second WebRTC interactive flow and a content of the second WebRTC interactive flow to the first WebRTC interactive flow via the virtual WebRTC agent block . In this manner the virtual WebRTC agent may enable a WebRTC interactive session between the WebRTC clients and while minimizing the use of computing resources. Processing then resumes at block of .

Returning to decision block of if the virtual WebRTC agent manager determines that the first WebRTC client and the second WebRTC client are not fully compatible the virtual WebRTC agent manager may enable a WebRTC interactive session between the first WebRTC client and the second WebRTC client using two virtual WebRTC agents and as discussed above with respect to . Accordingly processing resumes at block of . The virtual WebRTC agent manager instantiates the first virtual WebRTC agent that is compatible with the first WebRTC client block . The virtual WebRTC agent manager also instantiates the second virtual WebRTC agent that is compatible with the second WebRTC client block . In some embodiments the virtual WebRTC agents and have a same client type and or client version as the WebRTC clients and respectively.

The virtual WebRTC agent manager then establishes a first WebRTC interactive flow between the first WebRTC client and the first virtual WebRTC agent block . The virtual WebRTC agent manager also establishes a second WebRTC interactive flow between the second WebRTC client and the second virtual WebRTC agent block . Because each of the first WebRTC client and the second WebRTC client are interacting directly with their respective compatible virtual WebRTC agents and no compatibility issues should arise with respect to the WebRTC interactive flows and .

The virtual WebRTC agent manager then directs a content of the first WebRTC interactive flow to the second WebRTC interactive flow and a content of the second WebRTC interactive flow to the first WebRTC interactive flow via the first virtual WebRTC agent and the second virtual WebRTC agent block . In this manner the virtual WebRTC agents and are connected back to back such that the audio video and or data outputs of the virtual WebRTC agent become inputs to the virtual WebRTC agent and vice versa. Processing then resumes at block of .

Referring now to the virtual WebRTC agent manager at this point may access the contents of the first WebRTC interactive flow and the second WebRTC interactive flow and may provide additional media processing functionality. For example in some embodiments the virtual WebRTC agent manager may extract content from the first WebRTC interactive flow the second WebRTC interactive flow or a combination thereof block . Some embodiments may provide that the virtual WebRTC agent manager may inject content into the first WebRTC interactive flow the second WebRTC interactive flow or a combination thereof block . For example the virtual WebRTC agent manager may insert additional audio video and or data into the WebRTC interactive flows and or . According to some embodiments the virtual WebRTC agent manager may record a content of the first WebRTC interactive flow a content of the second WebRTC interactive flow or a combination thereof block . In some embodiments the virtual WebRTC agent manager may transform a content of the first WebRTC interactive flow a content of the second WebRTC interactive flow or a combination thereof block .

The virtual WebRTC agent manager then determines whether either of the first WebRTC interactive flow or the second WebRTC interactive flow has been terminated block . If both the first WebRTC interactive flow and the second WebRTC interactive flow are still active processing returns to block of . Otherwise the virtual WebRTC agent manager terminates the remaining active WebRTC interactive flow or as appropriate block .

The exemplary computer system includes a processing device or processor a main memory as non limiting examples read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. and a static memory as non limiting examples flash memory static random access memory SRAM etc. which may communicate with each other via a bus . Alternatively the processing device may be connected to the main memory and or the static memory directly or via some other connectivity means.

The processing device represents one or more processing devices such as a microprocessor central processing unit CPU or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor a reduced instruction set computing RISC microprocessor a very long instruction word VLIW microprocessor a processor implementing other instruction sets or a processor implementing a combination of instruction sets. The processing device is configured to execute processing logic in instructions and or cached instructions for performing the operations and steps discussed herein.

The computer system may further include a communications interface in the form of a network interface device . It also may or may not include an input to receive input and selections to be communicated to the computer system when executing the instructions . It also may or may not include an output including but not limited to display s . The display s may be a video display unit as non limiting examples a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device as a non limiting example a keyboard a cursor control device as a non limiting example a mouse and or a touch screen device as a non limiting example a tablet input device or screen .

The computer system may or may not include a data storage device that includes using drive s to store the functions described herein in a computer readable medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions described herein. The functions can include the methods and or other functions of the processing system a participant user device and or a licensing server as non limiting examples. The one or more sets of instructions may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system . The main memory and the processing device also constitute machine accessible storage media. The instructions and or may further be transmitted or received over a network via the network interface device . The network may be an intra network or an inter network.

While the computer readable medium is shown in an exemplary embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media as non limiting examples a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions . The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions and or for execution by the machine and that cause the machine to perform any one or more of the methodologies disclosed herein. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories optical and magnetic media and carrier wave signals.

The embodiments disclosed herein may be embodied in hardware and in instructions that are stored in hardware and may reside as non limiting examples in Random Access Memory RAM flash memory Read Only Memory ROM Electrically Programmable ROM EPROM Electrically Erasable Programmable ROM EEPROM registers a hard disk a removable disk a CD ROM or any other form of computer readable medium known in the art. An exemplary storage medium is coupled to the processor such that the processor can read information from and write information to the storage medium. In the alternative the storage medium may be integral to the processor. The processor and the storage medium may reside in an Application Specific Integrated Circuit ASIC . The ASIC may reside in a remote station. In the alternative the processor and the storage medium may reside as discrete components in a remote station base station or server.

It is also noted that the operational steps described in any of the exemplary embodiments herein are described to provide examples and discussion. The operations described may be performed in numerous different sequences other than the illustrated sequences. Furthermore operations described in a single operational step may actually be performed in a number of different steps. Additionally one or more operational steps discussed in the exemplary embodiments may be combined. It is to be understood that the operational steps illustrated in the flow chart diagrams may be subject to numerous different modifications as will be readily apparent to one of skill in the art. Those of skill in the art would also understand that information and signals may be represented using any of a variety of different technologies and techniques. As non limiting examples data instructions commands information signals bits symbols and chips that may be referenced throughout the above description may be represented by voltages currents electromagnetic waves magnetic fields or particles optical fields or particles or any combination thereof.

The previous description of the disclosure is provided to enable any person skilled in the art to make or use the disclosure. Various modifications to the disclosure will be readily apparent to those skilled in the art and the generic principles defined herein may be applied to other variations without departing from the spirit or scope of the disclosure. Thus the disclosure is not intended to be limited to the examples and designs described herein but is to be accorded the widest scope consistent with the principles and novel features disclosed herein.

