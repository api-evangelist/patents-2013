---

title: Adjusting connection validating control signals in response to changes in network traffic
abstract: Some embodiments provide a method for reducing the transmission of connection validating control signals when they are not needed. Network entities transmit connection validating control signals over network connections at regular intervals to validate that the network connections and the network entities remain functional. The method monitors data traffic fluctuations on the network connections to determine when connection validating control signals may not be needed. The method reduces unnecessary connection validating control signals in order to optimize the usage of network resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09485185&OS=09485185&RS=09485185
owner: Nicira, Inc.
number: 09485185
owner_city: Palo Alto
owner_country: US
publication_date: 20131031
---
This application claims benefit to U.S. Provisional Patent Application 61 881 949 filed Sep. 24 2013 which is incorporated herein by reference.

In computer networking there are numerous techniques for verifying the functionality of network connections. Some of these techniques involve network entities repeatedly sending messages to each other across connections in order to demonstrate their vitality. When a network entity ceases to transmit such messages the would be recipient of said messages can assume that the sender and or the connection is inactive or in a failed state . Transmitting these messages is not a costless operation. Each transmission consumes processing cycles on each sending and receiving network entity. There is a need in the art for a way to manage the transmission of these messages.

For a network that has network entities that transmit connection validating control signals at regular intervals to validate the network connections and the operation of the network entities some embodiments provide a method that reduces the transmission of connection validating control signals when such control signals are not needed or not needed as much. The method monitors data traffic fluctuations on the network connections to determine whether the connection validating control signals need to be sent out at a particular rate e.g. a default rate . When the method determines that the control signals are not needed at their current rate the method reduces the rate of these control signals in order to optimize the usage of network resources. As the data transmission rates change the method in some embodiments might further decrease the control signal rate or it might increase the control signal rate. In some embodiments the method eliminates the control signals altogether until it detects that it needs to restart transmission of such rates.

In some embodiments the connection validating control signals are control packets transmitted in a Bidirectional Forwarding Detection Session BFD Session . A BFD Session is established on a network connection between two network entities. The BFD Session transmits control packets between the two network entities over the network connection. When a first entity no longer receives control packets from a second network entity the first can conclude that the second network entity or the connection to the second network entity has failed. In this way the BFD Session allows network entities to have a way of determining when they should commence failover processes.

However in dense networks sending control packets between network connections can result in substantial network overhead. The method of some embodiments reduces the rate of control packets. In some embodiments the method reduces control packet frequencies on a network connection when less traffic is being transmitted over the network connection. In this case the network connection has become a lower priority network connection and less bandwidth should be directed towards guaranteeing its vitality. In some embodiments the method significantly reduces or even stops transmission of control packets over a network connection when the network connection has high amounts of data traffic. In this case the control packets are redundant with the heavy traffic on the network connection. Further examples will be discussed below in the Detailed Description.

The preceding Summary is intended to serve as a brief introduction to some embodiments of the invention. It is not meant to be an introduction or overview of all inventive subject matter disclosed in this document. The Detailed Description that follows and the Drawings that are referred to in the Detailed Description will further describe the embodiments described in the Summary as well as other embodiments. Accordingly to understand all the embodiments described by this document a full review of the Summary Detailed Description and the Drawings is needed. Moreover the claimed subject matters are not to be limited by the illustrative details in the Summary Detailed Description and the Drawing but rather are to be defined by the appended claims because the claimed subject matters can be embodied in other specific forms without departing from the spirit of the subject matters.

In the following detailed description of the invention numerous details examples and embodiments of the invention are set forth and described. However it will be clear and apparent to one skilled in the art that the invention is not limited to the embodiments set forth and that the invention may be practiced without some of the specific details and examples discussed.

For a network that has network entities that transmit connection validating control signals at regular intervals to validate the network connections and the operation of the network entities some embodiments provide a method that reduces the transmission of connection validating control signals when such control signals are not needed or not needed as much. The method monitors data traffic fluctuations on the network connections to determine whether the connection validating control signals need to be sent out at a particular rate e.g. a default rate . When the method determines that the control signals are not needed at their current rate the method reduces the rate of these control signals in order to optimize the usage of network resources. As the data transmission rates change the method in some embodiments might further decrease the control signal rate or it might increase the control signal rate. In some embodiments the method eliminates the control signals altogether until it detects that it needs to restart transmission of such rates.

In different embodiments the control signal session takes different forms. However in general the control signal session includes the transmission of some form of connection validating control signals also referred to as network validating control signals below over a connection in some embodiments. The process can be deployed on any type of connection capable of transmitting network validating control signals. For instance the process can be deployed on any telecommunication connection. Process can also regulate connection validating control signals over physical wires wireless connections tunnels VPNs Bluetooth connections and other such comparable telecommunication systems or protocols e.g. connections along various communication layers of the OSI 7 layer model . In several embodiments described below the control packets that are transmitted between network entities are part of a Bi directional Forwarding Detection Session hereinafter BFD Session . However one of ordinary skill will realize that some embodiments are used in other types of communication sessions as mentioned above.

Once established process transmits at control signals over the connection between its entity and another entity that connects through the connection. In some embodiments the control signals are in the form of network packets that are sent along the connection. Next the process monitors at data transmission rates on the connection. Data transmission over the connection can take many forms based on the type of connection. The types of data transmission used in some embodiments include data signals along wired or wireless connections light signals along an optical connection etc. Also in some embodiments multiple different data sessions may use a connection between two entities and the process monitors the data rates across all of these sessions. In other embodiments the process only relates to one of the data sessions along a connection and hence monitors the data transmission rate along the connection for its data sessions.

Next the process determines whether it should adjust the rate of control signal transmissions based on the monitored rates of data transmission. If so the process transitions to to adjust the control signal rate based on the monitored rates of data transmission. In some embodiments the process adjusts the control signal rate for a variety of different monitored data transmission rate characteristics. In some embodiments the process reduces control signal frequency on the connection when data transmission falls below a low threshold level which is indicative of the low importance of the connection. Alternatively or conjunctively the process of some embodiments reduces or eliminates control signal frequency on a high traffic connection due to the control signals becoming redundant with the high traffic. After reducing or eliminating control signal transmissions the process may increase at the control signal transmission rates in some embodiments when the data transmission rates change and such a change requires adjustment to the control signal transmission rate. After the process transitions to which will be further described below.

When the process determines at that it should not adjust the control signal rate the process determines at whether it should terminate. The process terminates in some embodiments when it detects that the connection has failed or detects some other terminating criteria. If the process determines that it should terminate it ends. Otherwise at the process sets a timer and waits for this timer to expire before it transitions back to to monitor the data transmission rate again.

Several more detailed examples of managing control signals in BFD sessions are described below. Specifically Section II describes adjusting BFD control signal rates when connections transmit low amounts of data traffic. Section III then describes adjusting BFD control signal rates when connections transmit high amounts of data traffic. Section IV then describes the implementation and deployment of the invention on network entities. Section V then describes an electronic system for implementing the invention. Before describing these additional examples the environment in which some embodiments of the invention are implemented will be described below in section I.

The following section describes an environment in which some embodiments of the inventions are implemented. conceptually illustrates a network that includes network entity transmitting data packets and control packets over a link to network entity . For explanation purposes conceptually illustrates rates of packet transmission as discrete quantities of packets e.g. three control packets and six data packets . Some embodiments of the invention would be deployed to such a network to manage rates at which control packets are sent between network entities and .

Network is conceptually illustrated as a simple communication network between network entity and network entity over link . Networks of some embodiments are computer networks that enable electronic devices to share information over telecommunications systems. Examples of networks that some embodiments of the invention can be applied to include local area networks Ethernet networks virtual networks wireless networks the Internet and other such comparable telecommunication systems.

Network entities and are two electronic devices sharing information over link . The network entities of some embodiments can be any electronic devices with the ability to connect to other network entities over a network. Examples of network entities of some embodiments include network nodes hosts endpoints computers mobile devices switches servers virtual switches hypervisors routers and other such comparable devices capable of telecommunication. Network entities communicate with each other over telecommunications via links.

Link is a bi directional telecommunication connection between network entities and . However for explanation purposes only shows data packets and control packets being transmitted in one particular direction. Furthermore as link is a bi directional link network entity may also transmit control and data packets to network entity although this is not illustrated in the figure. Links establish means by which information can be passed between network entities. Bi directional links allow two way communication between two connected network entities. Uni directional links may be deployed however uni directional links are not suitable for establishing a bi directional forwarding detection session without some additional method of communication across the uni directional link. Unless otherwise disclosed the term link refers to a bi directional link throughout the examples provided. Examples of such links on which some embodiments of the invention are implemented include physical wires wireless connections tunnels VPNs Bluetooth connections and other such comparable telecommunication systems or protocols. Other additional examples of links include the various communication layers of the OSI 7 layer model such as physical data link network transport session presentation and application layer communications.

As shown in network entity transmits information to network entity using data packets and control packets . Data packets are conceptually illustrated as a series of square packets with a D identifier. As illustrated these data packets are being sent along link from entity to entity . Control packets are conceptually illustrated as a series of square packets with a C identifier. As illustrated these control packets are also being sent along link from entity to entity . While is conceptually illustrated to include three control packets and six data packets this illustration is not intended to depict an actual ratio of control to data packets. In some embodiments there are hundreds of data packets per single control packet transmitted on a deployed link. The relative rates of control and data packets illustrated in the figures convey a conceptual notion of changes in their individual frequencies not the relative ratio of control packets to data packets.

Data packets are formatted units of data that transport information between network entities and over network . Data packets typically include a header a payload and a trailer. The packet header includes control information such as the sender s and the recipient s IP addresses the protocol governing the format of the payload and several other formats. The packet header s format is typically specified in its associated network protocol. An example of a network protocol includes the Internet protocol suite for relaying datagrams across network boundaries. The packet payload includes the cargo of the packet in particular the transmitted data that is the reason for the transmission. The packet trailer includes supplemental data placed at the end of a block of data being stored or transmitted. While conceptually illustrates network entity sending data packets over a typical network type some embodiments of the invention can be implemented using other methods of transmitting information over a telecommunications network such as signals waves lights bits in a bit stream cloud information with headers and trailers and other such comparable systems and protocols for electronic transmission of information.

Control packets are of a similar format to data packets however control packets are used to transmit control information in connection with a Bi directional Forwarding Detection Session hereinafter BFD Session . To establish a BFD Session two network entities initially negotiate a BFD Session based on the particular networking protocol used by the entities e.g. a TCP three way handshake in TCP IP . After entering the BFD Session each network entity begins continuously sending control packets to the other network entity in the BFD Session to provide an indication to each other that the connection and network entities are still active. BFD Sessions provide a mechanism for detecting faults on a link. For instance when a first network entity in a BFD Session does not receive control packets from a second entity in the BFD Session the first entity may conclude that the second entity or link has failed. BFD Sessions can be used to verify the continued operations of network entities on all of the different types of links including physical wires wireless connections tunnels VPNs Bluetooth connections and other such comparable telecommunication systems or protocols. While this example uses control packets some embodiments of the invention provide other means of communicating control information in place of control packets such as metadata cloud headers etc.

BFD Sessions can be run in either asynchronous mode or demand mode. In asynchronous mode both network entities periodically send control packets to each other. If a number of those control packets are not received the session is considered inactive or in a failed state . In demand mode no control packets are exchanged after the session is established in particular it is assumed that each entity has alternative mechanisms to verify the connectivity to each other such as on the underlying physical layer. However either entity may still send control packets if needed. Control packets can be Hello packets which do not require a response from the recipient. Likewise control packets can be Echo packets which do require the recipient to respond in order to verify the forwarding capability of the recipient. Either Hello packets or Echo packets can be used in embodiments of the invention. Further discussion of Hello packets and Echo packets will be discussed below in connection with .

As shown in network entity is sending control packets at an initial default frequency. is a conceptual representation of network traffic on a tunnel. As illustrated three control packets are being sent per six data packets over link . This illustration is not intended to depict an actual ratio of control to data packets. In some embodiments there may be hundreds of data packets per single control packet transmitted on a deployed link. As such the relative rates of control and data packets illustrated in the figures convey only the conceptual notion of changes in individual frequencies and not the relative ratio of control packets to data packets. The ratio of data and control packets may be completely different depending on the particular operations of the invention or the varying rates of data traffic between the network entities. In some embodiments of the invention the particular rate of control packets is actively managed based on the rate of data packets in order to optimize the usage of network resources.

Transmitting control packets over BFD Sessions imposes costs on network resources. While only shows two network entities in a BFD Session some embodiments of the invention may be deployed in densely meshed networks with links between each network entity and even links between multitudes of virtual structures across multiple network entities. conceptually illustrates a network with a dense mesh of links between various different network entities and a high traffic network entity .

As shown in the links between high traffic network entity and network entities are conceptually illustrated with a series of C and D packets streaming over the dashed and bolded links. The bolded links show heavy amounts of D data packets and a standard rate of C control packets. In light of the heavy data traffic the transmission of control packets are redundant on the bolded links and thus an unnecessary use of the network resources. The dashed links show light amounts of D data and a standard rate of C control packets. The low traffic on the dashed links indicates that these are lower priority links. As a result high traffic network entity is processing both redundant and lower priority control packets in addition to all of the data packets. The jagged oval around high traffic network entity indicates that it is in a state of stress due to the large volume of packets flowing over its links and the extraneous processing cycles that are being wasted on unnecessary control packets.

While the links are conceptually illustrated as single lines these links can have multiple connections. In modern networking environments connections between network entities often include multiple links across the same connection. For instance as shown in expanded view high traffic network entity is running Open Virtual Switch hereinafter OVS hypervisor and virtual machines . Each of OVS hypervisor and virtual machines could have links e.g. tunnels established with other network entities. Some embodiments of the invention are deployed to networks such as to manage such compound links. A brief description of the elements shown in expanded view follows below.

Open Virtual Switches of some embodiments routes network traffic between hypervisors and virtual machines coupled to the Open Virtual Switches. In this example OVS routes network data between virtual machines that are running on high traffic network entity to the OVSs running on network entities . Open Virtual Switches will be discussed in detail below in connection with .

The hypervisor of some embodiments is a virtualization application that manages multiple operating systems e.g. virtual machines on network entities. That is the hypervisor provides a virtualization layer in which other operating systems can run with the appearance of full access to the underlying system hardware not shown of network entities except such access is actually under the control of the hypervisor . In this example the hypervisor manages virtual machines running on high traffic network entity .

Virtual machines are software implemented computers being run as programs on other devices. Virtual machines are each assigned a set of network layer host addresses e.g. a MAC address for network layer an IP address for network layer etc. and can send and receive network data to and from other network elements over the network. In this example if the virtual machines each have links to each other virtual machine on network entities then the number of BFD Sessions to run over a fully meshed network of virtual machine links scales at a rate of N N 1 2 where N equals the number of virtual machines on network . Accordingly in such embodiments it is essential to manage the usage of network traffic over such a dense mesh network. Extraneous control packets on BFD Sessions will result in network entities becoming overloaded and stressed as illustrated by for example the high traffic network entity . Embodiments of the invention discussed below actively manage control packet rates to prevent situations like those described in .

The following section describes embodiments of the invention that reduce control signal rates on control signal sessions when links transmit low amounts of data traffic. While the following examples discussed in discuss a BFD Processor managing BFD Session on links some embodiments of the invention can be set up to monitor other types of control signal sessions other than BFD Sessions. In addition different embodiments of the invention may use different types of transmission to send control signals other than network data packets.

The first time illustrates network entity transmitting control packets at rate and data packets at rate to network entity over link . Control packets at rate are being sent at an initial default frequency at the first time . In some embodiments the initial default frequency for control packets is one control packet every 300 milliseconds. Different embodiments of the invention may use different initial default frequencies.

The second time illustrates network entity transmitting control packets at the same rate and data packets at reduced rate to network entity over link . Reduced data packet rate of the second time transmits fewer data packets than that of data packet rate of the first time . The reduced data packet rate indicates that the link is no longer transmitting as much data traffic from network entity to network entity compared to time . The BFD Processor of some embodiments reduces the rate of control packets being sent on BFD Session because the reduced data traffic rate indicates that link is now a lower priority link. Such control packet frequency reductions can produce substantial savings of unnecessary network resource usage when applied to many links over a densely linked network. In order to reduce a control packet frequency the BFD Processor directs network entity to transmit a communication over link to instruct network entity to transmit control packets at a reduced frequency. In some embodiments the communication is contained within a network packet.

In some embodiments in order to determine when to adjust a particular control packet rate a threshold level of data packet transmission is provided to help determine when to modify a control packet rate. Once data packet transmission rates fall below the threshold level the BFD Processor of some embodiments reduces control packet frequencies. In some embodiments the threshold level of data transmission for a particular link is computed as a multiple of a minimum transmission rate for the particular link e.g. the minimum transmission rate is one packet per minute and the threshold level for control packet frequency reduction is three packets per minute .

The third time illustrates network entity transmitting control packets at reduced rate and data packets at reduced rate to network entity over link . The reduced rate of control packets allows for less bandwidth and processing resources to be directed at a lower priority connection from network entity to network entity . In some embodiments only two rates of control packets are available the initial default rate corresponding to rate of control packets and a reduced rate corresponding to the reduced rate of control packets . In some embodiments the reduced rate of control packets scales variably based on the rate of data packets. In some embodiments a floor for the rate of control packets is provided.

The fourth time illustrates network entity transmitting control packets at reduced rate and data packets at reduced rate to network entity over link . The fifth time illustrates network entity transmitting control packets at the same reduced rate and data packets at an increased rate from time to network entity over link . In particular data packet rate corresponds to the initial data transmission rate shown in at first time . As the data traffic has increased to the normal level the BFD Processor of some embodiments increases the rate of control packets being sent on BFD Session . In order to adjust the control packet frequency the BFD Processor directs network entity to transmit a communication over link to instruct network entity to transmit control packets at the initial increased frequency. The sixth time illustrates network entity once again transmitting control packets at the initial rate and data packets at rate to network entity over link . In some embodiments network entity instructs network entity to transmit control packets at an increased rate that is different from the initial rate .

Link is illustrated with control packets and data packets only being sent from network entity to network entity however link is a bi directional link as indicated by the communication . As discussed above BFD Sessions are typically only set up on bi directional links with data going in both directions. conceptually illustrates an example BFD Session where a BFD Processor of some embodiments reduces control packet frequency in both directions on a link when less data traffic is being transmitted in both directions along the link. BFD Session is shown at three times and . Times and are conceptual time captures that illustrate rates of packet transmission as discrete quantities of packets for ease of presentation.

The first time illustrates network entity transmitting control packets at rate and data packets at rate to network entity over link . Additionally first time illustrates network entity transmitting control packets at rate and data packets at rate to network entity over link . Control packets at rate are being sent at an initial default frequency at the first time .

The second time illustrates both network entities and transmitting control packets at rate and data packets at reduced rate . Reduced data packet rate of the second time transmits fewer data packets than that of data packet rate of the first time . Because of the reduced data packet rates the BFD Processor of some embodiments reduces the rate of control packets being sent on BFD Session . In order to effectuate a bi lateral control packet frequency reduction the BFD Processor directs both network entities and to instruct each other to transmit control packets at a reduced frequency. In some embodiments these instructions are transmitted over the already established link as separate packets of information. In some embodiments the instructions are transmitted as information encoded within the control packets themselves.

The third time illustrates both network entities and transmitting control packets at reduced rate and data packets at reduced rate . The reduced rate of control packets allows for less bandwidth and processing resources to be directed at a lower priority connection between network entities and . In some embodiments only two rates of control packets are available the initial default rate corresponding to rate control packets and a reduced rate corresponding to reduced rate of control packets . In some embodiments the reduced rate of control packets scales variably based on the rate of data packets.

As discussed above link is a bi directional link with control and data packets being passed in both directions. Links regularly transmit data packets at different rates and the BFD Processor of some embodiments manages control packets at corresponding different rates. conceptually illustrates an example BFD Session where a BFD Processor of some embodiments reduces control packet frequency in one direction on a link without reducing the control packet frequency on the other direction on the link. BFD Session is shown at three times and . Times and are conceptual time captures that illustrate rates of packet transmission as discrete quantities of packets for ease of presentation.

The first time illustrates network entity transmitting control packets at rate and data packets at rate to network entity over link . Additionally first time illustrates network entity transmitting control packets at rate and data packets at rate to network entity over link . Control packets at rate are being sent at an initial default frequency at the first time .

The second time illustrates both network entities and transmitting control packets at the same rate as time . However data packets are being transmitted from network entity to network entity at reduced data rate . Whereas data packets are being transmitted from network entity to network entity at data rate . This example illustrates that the rates of data transmission can be different over bi directional links such as when a download of a large amount of data is occurring. The BFD Processor of some embodiments can regulate control packet rates independently in each direction on a bi directional link. In order to reduce a control packet frequency the BFD Processor directs network entity to instruct network entity to send control packets at a reduced frequency. In some embodiments the instructions are transmitted as information encoded within the control packets themselves.

The third time illustrates network entity transmitting control packets at initial rate and data packets at rate . However network entity is transmitting control packets at reduced rate and data packets at reduced data rate . The reduced rate of control packets allows for less bandwidth and processing resources to be directed at a lower priority connection from network entity to network entity without affecting the control packet rate going from network entity to network entity .

Having described several examples of the BFD Processor adjusting control packet frequencies in specific operations and feedback controls will now be described in conjunction with . conceptually illustrates a process that some embodiments of the invention perform to dynamically manage multiple control signal sessions. In some embodiments a control signal processor running on a network entity performs the process . Examples of these different applications include a BFD Processor an OVS Instance or a BFD Processor running as a module of an OVS Instance.

Initially the process establishes at control signal sessions on links with default control signal rates. The initial default frequency for control signals may vary in different embodiments of the invention. For instance the default control signal rate can be between transmitting a control packet once every 100 milliseconds to once every 10 000 milliseconds. Some embodiments can have control signal rates beyond those enumerated here. The process then monitors at data transmission rates on the links with established control signal sessions. As in the example shown in the control signal processor of some embodiments can independently regulate control signal frequencies of bi directional links in both directions.

The process then determines at whether a data transmission rate has fallen below a threshold for a required period of time. The process makes determination in order to determine whether a data transmission rate has fallen to a level that could potentially require a decrease in control signal frequency as in the example shown in . Different embodiments use different threshold rates and different required times. For instance in some embodiments the threshold rate may be computed as a multiple of a minimum transmission rate for the particular link e.g. the minimum transmission rate is one data signal per minute and the threshold level for control signal frequency reduction is three hundred data signals per minute . In some embodiments the required time period can range from 2000 to 4000 milliseconds without receiving a packet. One of ordinary skill in the art will realize that other time thresholds are possible in different embodiments of the invention.

When a data transmission rate has fallen below a threshold for a required period of time the process determines at whether the control signal rate on the sub threshold link has reached a minimum control signal rate. When the sub threshold links are already at their minimum control signal frequency the process returns to monitoring at the data transmission rate on the links. When a sub threshold link has not reached its minimum control signal rate the process instructs at the control signal sending entity to send control signals at a lower frequency as in the example shown in . The control signal processor of some embodiments is running as an instance on several network entities in a network. In such embodiments the control signal processor instance running on the control signal receiving entity instructs the control signal sending entity to reduce the rate of control signals being sent.

Returning to determination discussed above when no data transmission rate has fallen below a threshold for a required period of time the process determines at whether any data transmission rates have exceeded a threshold for a required period of time. The process makes determination in order to determine whether a data transmission rate has increased to a level that could potentially require an increase in control signal frequency as in the example shown in . In some embodiments the required period of time for the data transmission rate to be above the threshold at is different than that required at .

When a data transmission rate has exceeded the threshold for the required period of time the process determines at whether the control signal rate on the threshold passing link has reached a maximum control signal rate. When either no data transmission rate is above the required threshold or when the threshold passing links are already at their maximum control signal frequency the process returns to monitoring at the data transmission rates on the links. When a threshold passing link has not reached its maximum control signal rate the process instructs at the control signal sending entity to send control signals at a higher frequency as in the example shown in . The control signal processor of some embodiments is running as an instance on several network entities in a network. In such embodiments the control signal processor instance running on the control signal receiving entity instructs the control signal sending entity to increase the rate of control signals being sent.

After either instructing a control signal sending entity to send control signals at a lower frequency at or a higher frequency at the process determines whether to continue monitoring data transmission rates on the links on which control signal sessions have been established. Should the process choose to cease monitoring the data transmission rates the process ends. Otherwise the process returns to monitoring data transmission rates on the links on which control signal sessions have been established at . Having described adjusting control signal rates when data traffic is reduced or terminated a different scenario will be described in the next section.

The following section describes embodiments of the invention that decrease or eliminate control signal rates i.e. reduce control signal rate to zero control signals per minute on control signal sessions when links experience rates of heavy data traffic. While the following examples discussed in discuss a BFD Processor managing BFD Sessions on links some embodiments of the invention can be set up to monitor other types of control signal sessions other than BFD Sessions. In addition different embodiments of the invention may use different types of transmissions to send control signals other than network packets.

The first time illustrates network entity transmitting control packets at rate and data packets at rate to network entity over link . Control packets at rate are being sent at an initial default frequency at the first time . Different embodiments of the invention may use different initial default frequencies.

The second time illustrates network entity transmitting control packets at the same rate as time and data packets at an increased rate to network entity over link . Increased data packet rate of the second time transmits more data packets than that of data packet rate of the first time . The increased data packet rate now indicates that the link is being heavily utilized as it is now transmitting significantly more traffic from network entity to network entity . Due to the significant traffic the BFD Processor of some embodiments terminates sending control packets because these packets are redundant. By terminating the transmission of control packets the network is able to produce a substantial savings of network resource usage especially when this type of savings is applied to many links over a densely linked network. In order to terminate the transmission of control packets the BFD Processor instructs network entity to transmit a communication over link to instruct network entity to stop transmitting control packets. In some embodiments the communication is a network packet. The third time illustrates network entity transmitting data packets at increased rate to network entity over link without sending any control packets.

The first time illustrates network entity transmitting control packets at rate and data packets at initial rate to network entity over link . Control packets at rate are being sent at an initial default frequency at the first time . Different embodiments of the invention may use different initial default frequencies.

The second time illustrates network entity transmitting control packets at rate and data packets at increased rate to network entity over link . Increased data packet rate of the second time transmits more data packets than that of initial data packet rate of the first time . The increased data packet rate indicates that the link is being heavily utilized as it is now transmitting significantly more traffic from network entity to network entity as compared to time . As such the BFD Processor of some embodiments reduces the rate of control packets being sent on BFD Session because of its high data traffic rate which renders the control packets redundant considering the significant flow of data traffic. Such control packet frequency reductions can produce substantial savings of unnecessary network resource usage when applied to many links over a densely linked network. In order to reduce a control packet frequency the BFD Processor instructs network entity to transmit an instruction over link to instruct network entity to transmit control packets at a reduced frequency. In some embodiments the instruction is contained within a network packet.

In some embodiments a threshold level of data packet transmission is provided to help determine when to modify a control packet rate. Once data packet transmission rates exceed the threshold level the BFD Processor of some embodiments reduces control packet frequencies. In some embodiments the threshold level of data transmission for a particular link is computed as a multiple of a minimum transmission rate for the particular link e.g. the minimum transmission rate is one packet per minute and the threshold level for control packet frequency reduction is thirty thousand packets per minute .

The third time illustrates network entity transmitting control packets at reduced rate and data packets at that same increased rate to network entity over link compared to time . The reduced rate of control packets allows for less usage of bandwidth and processing resources and avoids waste when verifying a high traffic connection from network entity to network entity . In some embodiments only two rates of control packets are available the initial default rate corresponding to rate control packets and a reduced rate corresponding to reduced rate of control packets . In some embodiments the reduced rate of control packets scales variably based on the rate of data packets. In some embodiments a floor for the rate of control packets is provided. In yet other embodiments such as those described in connection with the BFD Processor simply terminates all transmission of control packets when data traffic is sufficiently heavy.

The fourth time illustrates network entity transmitting control packets at reduced rate and data packets at increased rate to network entity over link . The fifth time illustrates network entity transmitting control packets at the same reduced rate and data packets at again the decreased initial rate to network entity over link . Accordingly the BFD Processor of some embodiments increases the rate of control packets being sent on BFD Session because of the decrease in data packet transmission to the initial rate . In order to adjust the control packet frequency adjustment network entity transmits a communication over link to instruct network entity to transmit control packets at the initial rate . The sixth time illustrates network entity now transmitting control packets at the higher initial rate and data packets at the same initial rate to network entity over link . In some embodiments network entity instructs network entity to transmit control packets at an increased rate not the initial rate .

Link is illustrated with control packets and data packets only being sent from network entity to network entity however link is a bi directional link as indicated by the communication . As discussed above BFD Sessions are typically only set up on bi directional links with data going in both directions. conceptually illustrates an example BFD Session where a BFD Processor of some embodiments reduces control packet frequency in both directions when there is an increased amount of data traffic being transmitted in both directions on link . BFD Session is shown at three times and . Times and are conceptual time captures that illustrate rates of packet transmission as discrete quantities of packets for ease of presentation.

The first time illustrates network entity transmitting control packets at rate and data packets at rate to network entity over link . Additionally first time illustrates network entity transmitting control packets at rate and data packets at rate to network entity over link . Control packets at rate are being sent at an initial default frequency at the first time .

The second time illustrates both network entities and transmitting control packets at the same rate as in time but data packets at an increased traffic rate . Increased traffic rate of the second time transmits significantly more data packets than that of data packet rate of the first time . Accordingly the BFD Processor of some embodiments reduces the rate of control packets being sent on BFD Session due to the redundancy of transmitting control packets in addition to increased traffic rate . In order to reduce a control packet frequency the BFD Processor directs both network entities and to instruct each other to transmit control packets at a reduced frequency. In some embodiments the instructions are transmitted as information encoded within the control packets themselves.

The third time illustrates both network entities and transmitting control packets at reduced rate and data packets at increased traffic rate . The reduced rate of control packets allows for less bandwidth and processing resources to be wasted when verifying a high traffic connection between network entities and . In some embodiments only two rates of control packets are available the initial default rate corresponding to rate control packets and a reduced rate corresponding to reduced rate of control packets . In some embodiments the reduced rate of control packets scales variably based on the rate of data packets. In yet other embodiments such as those described in connection with the BFD Processor simply terminates all transmission of control packets when data traffic is sufficiently heavy.

As discussed above link is a bi directional link with control and data packets being passed in both directions. Links regularly transmit data packets at different rates and the BFD Processor of some embodiments manages control packets at corresponding different rates. conceptually illustrates an example BFD Session where a BFD Processor of some embodiments reduces control packet frequency in one direction on a link without reducing the control packet frequency on the other direction on the link. BFD Session is shown at three times and . Times and are conceptual time captures that illustrate rates of packet transmission as discrete quantities of packets for ease of presentation.

The first time illustrates network entity transmitting control packets at rate and data packets at rate to network entity over link . Additionally first time illustrates network entity transmitting control packets at rate and data packets at rate to network entity over link . Control packets at rate are being sent at an initial default frequency at the first time .

The second time illustrates both network entities and transmitting control packets at rate . However data packets are being transmitted from network entity to network entity at an increased traffic rate . Whereas data packets are being transmitted from network entity to network entity at a relatively lower data rate . As mentioned above the rates of data transmission can be different over bi directional links. The BFD Processor of some embodiments can regulate control packet rates independently in each direction on a bi directional link. In order to reduce a control packet frequency the BFD Processor directs network entity to instruct network entity to send control packets at a reduced frequency. In some embodiments the instructions are transmitted as information encoded within the control packets themselves.

The third time illustrates network entity transmitting control packets at initial rate and data packets at rate . However network entity is transmitting control packets at reduced rate and data packets at increased traffic rate . The reduced rate of control packets allows for less wasted network resources used on redundant control packets without affecting traffic in the other direction.

Having described several examples of the BFD Processor adjusting control packet frequencies in specific operations and feedback controls will now be described in conjunction with . conceptually illustrates a process that some embodiments of the invention perform to dynamically manage multiple control signal sessions. In some embodiments a control signal processor running on a network entity performs the process . In some embodiments the process is performed by different applications for managing control signals. Examples of these different applications include a BFD Processor an OVS Instance or a BFD Processor running as a module of an OVS Instance.

Initially the process establishes at control signal sessions on links with default control signal rates. The initial default frequency for control signals may vary in different embodiments of the invention. For instance the default control signal rate can be between transmitting a control packet once every 100 milliseconds to once every 10 000 milliseconds. Some embodiments can have control signal rates beyond those enumerated here. The process then monitors at data transmission rates on the links with established control signal sessions. As in the example shown in the control signal processor can independently regulate control signal frequencies of bi directional links in both directions.

The process determines at whether a data transmission rate has exceeded a threshold for a required period of time. The process makes determination in order to determine whether a data transmission rate has risen to a level that could potentially require a decrease in control signal frequency as in the example shown in . When a data transmission rate has exceeded a threshold for a required period of time the process determines at whether the control signal rate on the threshold exceeding link has reached a minimum control signal rate. Different embodiments use different threshold rates and different required times. For instance in some embodiments the threshold rate is computed as a multiple of a minimum transmission rate for the particular link e.g. the minimum transmission rate is one data packet per minute and the threshold level for control packet frequency reduction is three hundred data packets per minute . In some embodiments the required time period can range from 2000 to 4000 milliseconds of data traffic above the threshold level. One of ordinary skill in the art will realize that other time thresholds are possible in different embodiments of the invention.

When the threshold exceeding links are already at their minimum control signal frequency the process returns to monitor at the data transmission rate on the links. In some embodiments the minimum control signal frequency is a rate of zero control signals as shown in the example in . When a threshold exceeding link has not reached its minimum control signal rate the process instructs at the control signal sending entity to send control signals at a lower frequency as in the example shown in . The control signal processor of some embodiments is running as an instance on several network entities in a network. In such embodiments the control signal processor instance running on the control signal receiving entity instructs the control signal sending entity to decrease the rate of control signals being sent.

Returning to determination discussed above when no data transmission rate has exceeded a threshold for a required period of time the process determines at whether any data transmission rates have fallen below a threshold for a required period of time. The process makes determination in order to determine whether a data transmission rate has fallen to a level that could potentially require an increase in control signal frequency as in the example shown in . In some embodiments the required period of time for the data transmission rate to be below the threshold at is different than that required at .

When a data transmission rate has fallen below the threshold for the required period of time the process determines at whether the control signal rate on the sub threshold link has reached a maximum control signal rate. When either no data transmission rate is below the required threshold or when the threshold passing links are already at their maximum control signal frequency the process returns to monitoring at the data transmission rate on the links. When a sub threshold link has not reached its maximum control signal rate the process instructs at the control signal sending entity to send control signals at a higher frequency as in the example shown in . The control signal processor of some embodiments is running as an instance on several network entities in a network. In such embodiments the control signal processor instance running on the control signal receiving entity instructs the control signal sending entity to increase the rate of control signals being sent.

After either instructing a control signal sending entity to send control signals at a lower frequency at or instructing a control signal sending entity to send control signals at a higher frequency at the process determines whether to continue monitoring data transmission rates on the links on which control signal sessions have been established. Should the process choose to cease monitoring the data transmission rates the process ends. Otherwise the process returns to monitoring data transmission rates on the links on which control signal sessions have been established at . Having described adjusting control signal rates in both low and high traffic situations an actual implementation of the a control signal processor will be described in the next section.

The following section describes embodiments of the invention implemented on an example network entity. As discussed above the invention can be implemented on a wide variety of network entities. While the forthcoming example is discussed in terms of an implementation using Open Virtual Switch software hereinafter OVS some embodiments of the invention can be implemented on other network entity control applications.

OVS vSwitchd is daemon that implements a virtual switch on network entity . OVS vSwitchd routes network traffic between network entities. In some embodiments OVS vSwitchd controls network traffic between virtual machines running on network entity . In some embodiments OVS vSwitchd is executed by an embedded central processing unit CPU on network entity . In embodiments where network entity is a virtual software element OVS vSwitchd is executed as a software process.

OpenFlow Protocol is an Application Programming Interface hereinafter API for OVS vSwitchd to use in accessing OpenFlow Protocol Datapath Interface . OpenFlow Protocol implements OpenFlow on network entity . OpenFlow Protocol is one of many possible switching control protocols with which the invention of some embodiments can be implemented. OpenFlow Protocol in some embodiments is a communication protocol for controlling the forwarding plane e.g. forwarding tables of a network entity. For instance the OpenFlow Protocol provides commands for adding flow entries to removing flow entries from and modifying flow entries in forwarding tables associated with network entity . The forwarding plane is implemented on Datapath as a series of look up tables.

In some embodiments OpenFlow Controller can transmit data to OpenFlow Protocol in order to modify the behavior of OVS vSwitchd . In some embodiments OpenFlow Protocol contacts OpenFlow Controller to receive a state of OpenFlow Provider to implement on network entity . OpenFlow Protocol Datapath Interface Datapath Interface and Datapath Interface Provider modules together comprise an implementation of OpenFlow Provider on network entity . OpenFlow Provider implements OpenFlow Protocol on network entity .

OpenFlow Protocol Datapath Interface is the controlling module of OpenFlow Provider . In some embodiments the BFD Processor is implemented as a component of OpenFlow Protocol Datapath Interface . Thus OpenFlow Protocol Datapath Interface is the module responsible for regulating the connection validating control signals of some embodiments in response to fluctuations in network traffic as measured by Kernel and as recorded by Net Device . The OpenFlow Protocol Datapath Interface queries Net Device to determine current network traffic rates over connections to network entity . As will be discussed below in more detail Network Device maintains counters storing network traffic rates over the connections to network entity . In some embodiments OpenFlow Protocol Datapath Interface regularly queries Net Device as part of a run time loop. As discussed above in connection with when network traffic crosses certain thresholds for certain periods of time the OpenFlow Protocol Datapath Interface requests that other network entities reduce or increase the rates at which they transmit control packets. In some embodiments the OpenFlow Protocol Datapath Interface adjusts its own rate at which it transmits control packets if certain network traffic conditions are met.

Datapath Interface provides an API to allow OpenFlow Protocol Datapath Interface to configure Datapath . Through Datapath Interface OpenFlow Protocol Datapath Interface can transmit instructions to populate forwarding tables of the Datapath with rules on how to handle incoming and outgoing network traffic e.g. packets . In addition the OpenFlow Protocol Datapath Interface can request information about and from the Datapath using Datapath Interface . In some embodiments the OpenFlow Protocol Datapath Interface can direct how specific packets are forwarded using Datapath Interface . Datapath Interface is implemented on network entity using Datapath Interface . Datapath Interface Provider is a platform specific implementation of Datapath Interface . The platforms on which some embodiments of the invention can be implemented include Linux ESX and other comparable networking Kernels. In addition Datapath Interface Provider transmits messages as required to implement the Datapath Interface API.

Net Device is a software module of OVS vSwitchd running on network entity . Net Device pulls network traffic statistics from Kernel . In some embodiments Net Device keeps several counters storing various network statistics such as the number of packets certain links have transmitted. The Net Device increments these counters based on information retrieved from Kernel . In some embodiments the other modules may query Net Device for currently stored statistics. When queried Net Device provides the requesting module with the queries statistics as stored in its counters. Net Device is conceptually illustrated as connected to modules and to demonstrate this querying functionality.

Net Device accesses Kernel through Net Device Provider . Net Device Provider is an API similar to the other API s discussed in this section. Net Device Provider implements Net Device on the specific Kernel being used on network entity . Net Device Provider can communicate with Datapath Interface and Datapath Interface Provider .

Kernel is a companion Linux Kernel to OVS vSwitchd . Kernel enables flow based switching on network entity . Kernel control Datapath and communicates with Physical NIC . Kernel maintains statistics for all traffic across any links for network entity . Kernel responds to Datapath Interface Provide as requested.

In some embodiments the Datapath includes a set of forwarding tables that contain flow entries that indicate how to handle incoming and outgoing packets to the network entity . The forwarding tables are implemented as look up tables that match packets to flow entries. Flow entries contain a set of packet fields to match and an action such as send out port modify field or drop . The Datapath is populated with flow entries via the operations of modules and Kernel . When a packet does not match any flow entries in Datapath the packet is sent to OVS vSwitchd to make a decision how to handle the packet. In some embodiments upon making such a decision with an unmatched packet the OVS vSwitchd directs the OpenFlow Protocol Datapath Interface to populate the Datapath with appropriate new flow entries to handle the previously unmatched packet and future packets that match the new flow entries.

Physical NIC Network Interface Controller is a physical hardware component that connects network entity to a network. The Physical NIC transmits network traffic according to the flow entries stored in the forwarding table of Datapath . In some embodiments Datapath is implemented as a hardware component of the Physical NIC . As a piece of hardware circuitry the Physical NIC can include many different types of connection links and ports. Some connections on the Physical NIC are physical connections such as Ethernet cables. Other connections can be links or tunnels across network wires. In some embodiments the Physical NIC is a virtual NIC running as a VM on a physical host and the Physical NIC has virtual interfaces to a virtual network. In various network environments the Physical NIC will be different dependent on the nature of the network entity .

As shown in the links between high traffic network entity and network entities are conceptually illustrated with series of C and D packets streaming over bolded links dashed links and a solid link . The bolded links show heavy amounts of D data and a reduced rate of C control packets after adjustments made by BFD Processor . The dashed links show light amounts of D data and a reduced rate of C control packets after adjustments made by BFD Processor . The solid link shows average amounts of D data and a default rate of C control packets that remain unadjusted by BFD Processor . Thanks to these adjustments managed network entity is not wasting valuable network resources or excess processing cycles transmitting and processing control packets on redundant or lower priority connections.

As shown in network expanded view network resources are at a premium because managed network entity is running OVS hypervisor and virtual machines . Each of OVS hypervisor and virtual machines could have links e.g. tunnels established with other network entities. In this example if the virtual machines each have links to each other virtual machine on network entities then the number of BFD Sessions to run over a fully meshed network of virtual machine links scales at a rate of N N 1 2 where N equals the number of virtual machines on network . However as shown in expanded view network entity is running BFD Processor as a sub component of OVS . Unlike network shown in network of is running smoothly with only an essential amount of control packets being transmitted over the network.

In example network entity is transmitting data packets and echo control packets over link to network entity . As shown in example network entity is also transmitting echo control packets back to network entity . Because echo control packets are returned back to their sender network entity no longer needs to coordinate with network entity in to determine whether network entity remains functional. In the case that echo control packets are used network entity can unilaterally adjust the rate at which it sends echo control packets unilaterally without separate instructions back and forth to network entity because network entity mirrors echo control packets back towards network entity .

The bus collectively represents all system peripheral and chipset buses that communicatively connect the numerous internal devices of the electronic system . For instance the bus communicatively connects the processing unit s with the read only memory the system memory and the permanent storage device .

From these various memory units the processing unit s retrieve instructions to execute and data to process in order to execute the processes of the invention. The processing unit s may be a single processor or a multi core processor in different embodiments.

The read only memory ROM stores static data and instructions that are needed by the processing unit s and other modules of the electronic system. The permanent storage device on the other hand is a read and write memory device. This device is a non volatile memory unit that stores instructions and data even when the electronic system is off. Some embodiments of the invention use a mass storage device such as a magnetic or optical disk and its corresponding disk drive as the permanent storage device .

Other embodiments use a removable storage device such as a floppy disk flash drive etc. as the permanent storage device. Like the permanent storage device the system memory is a read and write memory device. However unlike storage device the system memory is a volatile read and write memory such a random access memory. The system memory stores some of the instructions and data that the processor needs at runtime. In some embodiments the invention s processes are stored in the system memory the permanent storage device and or the read only memory . From these various memory units the processing unit s retrieve instructions to execute and data to process in order to execute the processes of some embodiments.

The bus also connects to the input and output devices and . The input devices enable the user to communicate information and select commands to the electronic system. The input devices include alphanumeric keyboards and pointing devices also called cursor control devices . The output devices display images generated by the electronic system. The output devices include printers and display devices such as cathode ray tubes CRT or liquid crystal displays LCD . Some embodiments include devices such as a touchscreen that function as both input and output devices.

Finally as shown in bus also couples electronic system to a network through a network adapter not shown . In this manner the computer can be a part of a network of computers such as a local area network LAN a wide area network WAN or an Intranet or a network of networks such as the Internet. Any or all components of electronic system may be used in conjunction with the invention.

Some embodiments include electronic components such as microprocessors storage and memory that store computer program instructions in a machine readable or computer readable medium alternatively referred to as computer readable storage media machine readable media or machine readable storage media . Some examples of such computer readable media include RAM ROM read only compact discs CD ROM recordable compact discs CD R rewritable compact discs CD RW read only digital versatile discs e.g. DVD ROM dual layer DVD ROM a variety of recordable rewritable DVDs e.g. DVD RAM DVD RW DVD RW etc. flash memory e.g. SD cards mini SD cards micro SD cards etc. magnetic and or solid state hard drives read only and recordable Blu Ray discs ultra density optical discs any other optical or magnetic media and floppy disks. The computer readable media may store a computer program that is executable by at least one processing unit and includes sets of instructions for performing various operations. Examples of computer programs or computer code include machine code such as is produced by a compiler and files including higher level code that are executed by a computer an electronic component or a microprocessor using an interpreter.

While the above discussion primarily refers to microprocessor or multi core processors that execute software some embodiments are performed by one or more integrated circuits such as application specific integrated circuits ASICs or field programmable gate arrays FPGAs . In some embodiments such integrated circuits execute instructions that are stored on the circuit itself.

As used in this specification the terms computer server processor and memory all refer to electronic or other technological devices. These terms exclude people or groups of people. For the purposes of the specification the terms display or displaying means displaying on an electronic device. As used in this specification the terms computer readable medium computer readable media and machine readable medium are entirely restricted to tangible physical objects that store information in a form that is readable by a computer. These terms exclude any wireless signals wired download signals and any other ephemeral signals.

While the invention has been described with reference to numerous specific details one of ordinary skill in the art will recognize that the invention can be embodied in other specific forms without departing from the spirit of the invention. In addition a number of the figures including conceptually illustrate processes. The specific operations of these processes may not be performed in the exact order shown and described. The specific operations may not be performed in one continuous series of operations and different specific operations may be performed in different embodiments. Furthermore the process could be implemented using several sub processes or as part of a larger macro process.

