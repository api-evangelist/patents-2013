---

title: Customer initiated tenant operations in a multitenant cloud environment
abstract: Customer initiated tenant operations are presented that are provided within a work center of a client cloud application. System supported tenant operations combined with automatic validations and determinations are exposed directly to the customer via the work center. Customers are able to coordinate and initiate tenant operations using a specific work center called a service control center, which is added to other work centers that build the cloud enterprise applications or products the customers are using. The enterprise application embedded service control center is connected to a central service control center, which is located in a service provider cockpit system. The central service control center enables the execution of customer specific tenant operations that are tailored to the customer's landscape and guarantees the tenant isolation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09621673&OS=09621673&RS=09621673
owner: SAP SE
number: 09621673
owner_city: Walldorf
owner_country: DE
publication_date: 20131212
---
In cloud environment software products such as cloud based applications can be provided as services. In various embodiments one system may be used to host and run multiple applications or multiple instances of an application for one or more customers. One system may serve multiple customers. A customer can get a tenant on that system isolated and secured from other tenants of other customers. On that tenant the customer runs one or more applications in the cloud. In this scenario the customer is not responsible for running managing updating and so on the tenant. These processes are performed by the cloud provider.

A cloud platform enables a large number of computers to be connected through a real time network such as the Internet. In this way hosted application services that run on the cloud platform can be provisioned to run client server software on a remote location. End users may access the cloud based applications through a Web browser a thin client a mobile application etc. while the enterprise software and the users data are stored on server nodes at a remote location. Cloud providers may install and operate application software in the cloud and cloud users access the software from cloud clients. Cloud users may not manage the cloud infrastructure and platform where the application runs. This would eliminate the need to install and run the application on the cloud user s own computers which simplifies maintenance and support.

Embodiments of techniques for methods and systems including customer initiated tenant operations in a multitenant cloud environment are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Typically a cloud provider may provide one or more automated tenant processes defined by a Service Provider in the cloud environment. These tenant processes are predefined rigid standardized processes optimized for low total cost of ownership TCO . A predefined tenant process may be a chain of automated steps such as making a change in a temporary test system by the customer which change is then automatically implemented in a productive system and the temporary test system is closed. These statically predefined processes may not match customers needs and requirements especially large enterprise customers who run hybrid solutions with a complex on premise system landscape. The on premise system landscape of a customer may include more than one system instances for example a productive system instance a testing system instance a consolidation system instance etc. Thus some ad hoc manual exception processes were created as a workaround. Those exception processes led to a big number of additional tenants that were created for customers. Additionally they led also to high communication and interaction efforts with the customers and increased the intransparency due to manual or non system supported requests and confirmation steps and also due to customer tenants that cannot be assigned to a predefined process.

In various embodiments multiple tenants system instances are provided by the cloud provider to serve a customer in the cloud environment. In this way the complex system landscape of the customer can be mirrored in the cloud environment including customer s different system instances e.g. productive consolidation testing etc. and the connections between the system instances. The rigid predefined tenant processes are avoided the cloud provider relies directly on a part of elementary tenant operations that are used in the predefined tenant processes. Basic tenant operations triggering mechanisms used in the predefined tenant processes are exposed by the service software provider to the customer. In this way the customer may choose which basic tenant operation to execute. The tenant operations are exposed without providing them with direct access to the tenant and the system landscape management system e.g. a service provider cockpit system .

Computing system includes one or more frontend clients e.g. running in one or more Web browsers and connected to cloud enterprise applications based system . Frontend client includes a frontend embedded service control center SCC and frontend cloud enterprise application . Frontend cloud enterprise application is the frontend part e.g. the user interfaces for managing the application of the customer s enterprise application running on the cloud enterprise applications based system .

In various embodiments a customer may coordinate and initiate tenant operations using a specific work center called service control center . The service control center is added to other work centers that build the cloud enterprise applications or products they are using. The frontend client includes a frontend embedded SCC in the UIs that enables the user to maintain and manage tenant operations.

In various embodiments cloud enterprise applications based system is a system for cloud enterprise applications managed by the service provider cockpit SPC system . The cloud enterprise applications based system includes one or more SPC operated tenants such as SPC operated tenant . The one or more SPC operated tenants may serve one or more customers. A customer may have more than one tenant. An SPC operated tenant represents a virtual system instance a tenant operated by the system landscape management system the service provider cockpit system .

The SPC operated tenant includes an embedded service control center connected to a central service control center such as enhanced customer service control center that is located in the service provider cockpit system . The embedded service control center is the backend side of the embedded service controller center where the frontend embedded SCC is the client side. Similarly the embedded service control center is a work center embedded in the cloud enterprise application that enables a user such as an administrator to view and manage the work center data. Further the SPC operated tenant includes the backend side of the cloud enterprise application . The frontend side of the cloud enterprise application is part of the frontend client .

In various embodiments the SPC operated tenant is connected to the service provider cockpit system . The embedded service control center is connected to the enhanced customer service control center . The service provider cockpit system provides various features such as network monitoring data collection tenant operations execution and so on. The enhanced customer service control center enables the execution of customer specific tenant operations that are tailored to the customer situation and guarantees the tenant isolation. Validations e.g. checks and determinations e.g. subsequent steps are triggered automatically based on the different customer related data such as customer contract data defined in a service level agreement SLA or service data which may be located in different systems.

The enhanced customer service control center capabilities are exposed to the customer by a set of user interfaces e.g. a work center that enables the customer to get an overview about his or her own available tenants and their operational status. In various embodiments the service control center is enhanced to become the main and unique place to trigger and monitor customer initiated tenant and cross tenant operations. That means additionally to tenant monitoring operations at least the following operations and features are implemented 1 tenant decommissioning 2 ordering a new customer tenant there are different tenant types such as a test tenant a productive tenant a validation tenant etc. 3 solution profile work space transport across customer tenants and 4 extensions transport across customer tenants.

Tenant decommissioning is a tenant operation provided with the customer s work center that enables a customer to create a decommissioning request for a tenant that is no longer needed. The customer can select one tenant from a list of customer tenants and then create a decommissioning request action. Pending decommissioning requests are visible to the customer as long as they are in progress. Once the tenant is removed the decommissioning request will disappear. Therefore the enhanced customer service control center is also enhanced with an additional list comprising the tenant operation requests initiated by the customers and which of the tenant operation requests are still in process.

Ordering a new customer tenant is a tenant operation provided with the customer s work center that enables a customer to order an additional tenant. In various embodiments the following information may be provided by the customer when a new tenant is ordered respectively when a tenant provisioning request is created 1 a business system type that specifies the type of the new system e.g. a productive tenant a test tenant a validation tenant and so on. and 2 a source tenant for application data and a solution profile. If a new tenant is requested the customer can specify to get an initial tenant with no application data and with an initial solution profile or to select one of the tenant available in the tenant list of the work center to be a source for obtaining application data and or a solution profile. Source tenants for solution profiles and application data may differ and may not be the same.

Solution profile transport or work space transport across customer tenants is a tenant operation provided with the customer s work center that enables a customer to transport and deploy workspaces that comprise customer specific configuration and tenant setup related data from one tenant to another. This transport helps customers to manage and configure their tenants in case they have ordered more than one tenant to mirror their on premise system landscape e.g. a development tenant a test tenant an integration test tenant etc. . The cross tenant transport may not be only on workspace level but may also support a delta transport this means that there is no need to transport the whole workspace with the complete system configuration but only the changes performed to the existing workspace so that a configuration change can be transported across customer tenants and deployed with respect to data consistency and tenant type. For example deployment into a productive tenant may be more restrictive than deployment into a test tenant.

Extensions transport across customer tenants is a tenant operation provided with the customer s work center that enables a customer to increase the flexibility of tenant processes of the enhanced customer service control center by offering the possibility to take over the extensions performed in one tenant to the other tenant. Similarly to the solution profile transport the customer may trigger extensions transport across his or her tenants. A source tenant and a target tenant have to be specified. In various embodiments the customer may start with a test system tenant and decide later to have a productive system tenant or another test system tenant. In these cases the customer may transfer the extensions performed on the initial system to the subsequent system s via a tenant operation.

Referring back to remote end user work center WoC of enhanced customer service control center receives the triggered actions as requests from the work center of the frontend client . The triggered actions represent the exposed tenant operations to the customer via the UIs of the work center. The request is forwarded to the service control center backend engine . The service control center backend engine processes the request using a set of components including but not limited to tenant operations engine tenant communication adapter and tenant data collector .

Tenant operations engine is responsible for execution of the tenant operations received from the frontend client such as removing a tenant adding a tenant copying a solution profile and so on. In various embodiments a set of validation and determination rules may be implemented in the enhanced customer service control center and executed by the tenant operations engine to simplify the initiation of the tenant operations and enforce the consistency and transparency of the tenant processes when those tenant operations are triggered. The implemented rules may be product dependent. The rules may rely on data originated from different systems that are integrated with the landscape management system e.g. sales possessing invoicing etc. 

Tenant communication adapter is responsible for isolation of the different tenants. When a request from the frontend client is received the tenant communication adapter determines from which tenant the request was sent which data can be accessible from that particular tenant and that particular user. The tenant isolation guarantees that for a given tenant and a user when a request is received the correct data is returned to that tenant and the user sent the request. Some data may be restricted for given tenants and users.

Tenant data collector is responsible for collecting and storing data from a customer s system. In various embodiments the data may be collected from different systems including service provider operational systems. For example data may be collected from sales support system which is a global invoicing and support system that keeps data from sales order processing and customer invoicing where customers data is maintained. In some embodiments when a customer requests an additional tenant the service provider cockpit system checks in sales support system if the customer has bought the option for such additional tenant. In other embodiments the service provider cockpit system may check the SLA data with the customer to allow the order of a new tenant or some other operation . Some data may be collected form the managing system itself e.g. the service provider cockpit system such as usage of the system location of the solution profiles and so on. Thus the tenant data collector may store replicated customer data from the customer s system and from other systems such as the sales support system . Further the replicated customer s data is isolated in the tenant data collector .

In various embodiments end to end tenant processes may be spread over several customer systems so that cross systems integration is necessary. Validations and determinations of tenant processes not only rely on data that are originated from the sales support system but they also generate data relevant for the sales support system . Essential contract data e.g. product data a start date specific SLAs will be replicated to the service provider cockpit system . Based on this replicated data appropriate validations and determinations for customer initiated tenant operation can be executed. When tenant operations are executed in the service provider cockpit system that are related to specific invoicing and billing extra chargeable operations such as ordering an additional test tenant the sales support system will be informed via messages sent automatically via the service provider cockpit system .

Request Termination option enables the user to create a decommissioning request for a particular selected tenant that is no longer needed. The user can select one tenant from the displayed list of customer tenants and then create the decommissioning request to remove the selected tenant. In various embodiments data storage and recovery may be implemented in another module of the cloud platform that may store the customer data of the removed tenant for a given period of time. Although the customer has initiated a decommissioning request for a given tenant and the tenant is removed from the displayed tenants in the work center for a given period of time e.g. four weeks this tenant is not removed from the system and the cloud platform it is just not visible to the customer.

In some embodiments after this period ends the tenant and its data are backed up and archived. In this case the customer can request and obtain the data from the removed tenant or restore the entire tenant from the archive. In other embodiments after the initial period of time ends the tenant and its data may be removed from the system. This may be a preferable option for test tenants that are no longer needed to the customer.

Create New Tenant includes one or more fields about the source data for the new tenant. This data may be automatically filled in by the service control center using the already selected tenant. For example tenant is selected by the user and its information is automatically filled in the Create New Tenant window. Data Source Selection specifies that the data used for the creation of the new tenant is coming from a source tenant. Data Source Tenant ID specifies the system ID number of the source tenant. BC business configuration Profile Source Tenant ID specifies the solution profile of the source tenant. Although the BC Profile Source Tenant ID is not shown as filled in it may also be automatically entered by the service control center .

In some embodiments the user may create a new tenant with a particular solution profile e.g. to use a given system configuration but with no application data or with application data from another tenant. In Create New Tenant window the user may remove the automatically filled in data and enter the required information. Thus the customer may choose from which source tenant the application data and the solution profile to be obtained and these source tenants may differ.

Determination of a new tenant may be based on source tenant type and status. When a new test tenant request is created the selected productive tenant is proposed automatically as source for application data and solution profile. For a customer subsidiary scenario a productive tenant template may be emulated. When a customer requests a new tenant the request is parameterized by default in a way that enables creation of a productive tenant for the new subsidiary with the same configuration and the same level of data as for other subsidiaries.

In some embodiments a productive tenant may only be ordered if a customer has no productive tenants or the customer has already created a decommissioning request for the productive tenant. In this way it will be clear for the customer that the existing productive tenant will be removed and also that there may not be two productive tenants with lifecycle status live at the same time. For some business scenarios this rule may not be applied as the customer mainly orders just one productive tenant. In other embodiments the customer may have at most one customer test tenant at the same time. Before creating a tenant request the system may check if the customer has already a test tenant or a test tenant provisioning request. In this case no further creation is possible. For some products the customers may order as many test tenants as they want but they will be charged additionally for those extra tenants. When a customer creates a request for ordering a new test tenant the customer invoicing system is notified automatically. This product specific behavior is subject of configuration in the central administration system e.g. the service provider cockpit system .

Process defines a procedure to perform customer initiated tenant operations in a service provider cockpit system of a cloud environment. In various embodiments the customer initiated tenant operations are exposed and provisioned with a customer work center as part of a frontend cloud enterprise application.

At a request is received from a customer work center of a frontend cloud enterprise application to initiate a tenant operation. The request is received at service provider cockpit system . The customer may initiate tenant operations on existing system tenants such as removing a system tenant or may initiate tenant operations to create a new system tenant with default application and configuration data or a system tenant with application and configuration data from a source tenant.

At a validation procedure is triggered to check the customer rights to initiate the requested the tenant operation. In case of requesting a new system tenant to be created the validation procedure checks the user rights of the customer for creating a new tenant. In various embodiments the user permissions may be determined based on information collected from an SLA the global invoicing and billing system sales orders and so on. In case of a requesting an existing system tenant to be terminated the validation procedure checks if the current user has right to perform this operation. For example not every user may be authorized to request to terminate a productive system tenant. The validation is performed by the tenant operation engine .

At a source tenant is automatically determined for the provisioning of a new tenant operation. In some embodiments if a test tenant is requested by the customer an available productive tenant may be automatically determined as source tenant for the creation of the test tenant. In this way the new test tenant will be created with application data and configuration data solution profile obtained from the productive tenant. In other embodiments a selection of a source tenant from a list of available system tenants in the customer work center may be received. Based on that selection the source tenant is determined.

At data of the determined source tenant is provided via the work center for confirmation. The data may include information such as 1 data source selection that specifies the data used for the creation of the new tenant is coming from a source tenant 2 data source tenant ID that specifies the system ID number of the source tenant and 3 business configuration profile source tenant ID that specifies the solution profile of the source tenant. In some embodiments the user may confirm the automatically determined source tenant without making any changes. In other embodiments the use may decide to change one or more of the source tenant data. For example the user may submit one source tenant for copying the application data and another source tenant for copying the configuration data of the solution profile. This means that the user may choose for a source tenant a test tenant a productive tenant or other tenant type from the list of available tenants displayed in the work center.

Back to at the source tenant data submitted by the user is received from the customer work center. At a tenant operation for provisioning of a new tenant based on the received source tenant data is triggered. The tenant operation is triggered in the service provider cockpit system . Using the tenant operation engine the triggered tenant operation is executed. At step the new tenant is created based on the received source tenant data. Finally the customer work center is updated with the new tenant at step . The new tenant is displayed in the list of tenants.

Performing customer initiated tenant operations enables more flexibility in the implementation phase of a cloud enterprise application and leads to reduction of the total number of additional non productive tenants. Although the one tenant approach may be valid for some scenarios it may not be useful for other customers that require on demand services. Some customers may run hybrid solutions with tight integration between on demand and on premise products. Therefore those customers may prefer to start the implementation project of the application by having a test tenant where the integration to the on premise product is implemented and tested. After a successful test the customers may order a new productive tenant discarding the initially provided productive tenant. In this way customers are provided at the beginning of the implementation phase with a test tenant. Once the integration is successfully tested the customer can request a productive tenant using the service control center capabilities.

In various embodiments customers using cloud applications are enabled to coordinate and initiate tenant operations by the cloud application provider out of their enterprise application in a way that matches their needs. System supported tenant operations combined with automatic validations and determinations are exposed directly to the customer. Those operations offer the needed flexibility to the customers. This flexibility combined with system supported interaction simplicity and process consistency guarantees also the desired low TCO.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. A computer readable storage medium may be a non transitory computer readable storage medium. Examples of a non transitory computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in detail.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiment examples are described herein for illustrative purposes various equivalent modifications are possible as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

