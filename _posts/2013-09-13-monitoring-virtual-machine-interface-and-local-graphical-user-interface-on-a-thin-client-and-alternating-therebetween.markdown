---

title: Monitoring virtual machine interface and local graphical user interface on a thin client and alternating therebetween
abstract: Technologies are described herein for alternating between a local graphical user interface (UI) and a virtual machine interface, on a computing device such as a thin client or a zero client. In particular, a virtual desktop client (VDC), which is in communication with a virtual machine hosted by a hypervisor on a remote computer system, receives desktop video display signals from the virtual machine. A monitoring application monitors the execution status of the VDC. Upon determining that the VDC has been terminated, the monitoring application is configured to present the UI by re-initializing, relaunching, or rebooting the UI, by retrieving display data associated with the UI from a RAM device, or by other means.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471357&OS=09471357&RS=09471357
owner: AMERICAN MEGATRENDS, INC.
number: 09471357
owner_city: Norcross
owner_country: US
publication_date: 20130913
---
The present disclosure generally relates to thin clients or zero clients and virtual machines and more particularly to systems and methods for alternating between a local graphical user interface and a virtual machine interface on a thin or zero client.

The background description provided herein is for the purpose of generally presenting the context of the disclosure. Work of the presently named inventors to the extent the work is described in this background section as well as aspects of the description that may not otherwise qualify as prior art at the time of filing are neither expressly nor impliedly admitted as prior art against the present disclosure.

Traditional network based computer architectures generally involve multiple traditional personal computers each of which comprises its own computing system components such as a central processing unit memory etc. each of which is connected to a centralized server or servers. Management of resources in such architectures however has become increasingly complex as the size of networks continues to grow. In addition to the physical logistics of such a network problems such as asset management support costs troubleshooting etc. all make such an architecture potentially unworkable. Further in many cases network users do not need the resources or computing power offered by a personal computer and therefore these expensive resources are underutilized in such architectures.

To combat the inefficiencies of traditional network based computer architectures making extensive use of personal computers many network based architectures have transitioned to a server based computing models such as thin client or zero client. Typically a zero client or thin client is heavily dependent on another computer system or server which generally fulfills the computational rolls for the zero client or ultrathin client. In such cases the zero client is simply a low end computer terminal which includes peripherals such as a monitor keyboard and mouse that also provides a graphical user interface GUI to the user. In such configurations a central computer system or server hosts the operating systems and software applications utilized by the thin client or zero client.

Generally a system user utilizes the thin or zero client s local GUI to provide credentials that allow the user to access a desktop operating system that is hosted within a virtual machine running on the centralized server. Once the user provides the credentials to access the virtualized desktop those resources are displayed on the user s monitor and the resources for providing the local GUI are terminated. When the user finishes with the virtualized desktop however the entire thin client or zero client must be powered down and restarted to reboot the local GUI which results in wasted time and system resources.

Therefore an unaddressed need exists in the art to address the aforementioned deficiencies and inadequacies.

Technologies are described herein for alternating between a local graphical user interface UI and a virtual machine interface on a computing device such as a thin client or a zero client. In particular according to one aspect a virtual desktop client VDC which is in communication with a virtual machine hosted by a hypervisor on a remote computer system receives desktop video display signals from the virtual machine. A monitoring application monitors the execution status of the VDC. In one embodiment upon determining that the VDC has been terminated the monitoring application is configured to present the UI by re initializing relaunching or rebooting the UI by retrieving display data associated with the UI from a RAM device or by other means.

A further aspect of the present disclosure relates to a computing device comprising a system on chip SOC a video card a random access memory RAM and a non volatile memory storing a local graphical user interface UI configured to receive input from a user of the computing device wherein the UI is configured to communicate with a virtual machine VM hosted by a hypervisor of a remote computer system and wherein the UI is configured to initialize a virtual desktop client VDC the VDC wherein the VDC is configured to communicate with the VM hosted by the hypervisor and receive desktop video display signals from the VM hosted by the hypervisor and send signals associated with input from a user to the VM hosted by the hypervisor and a monitoring application wherein the monitoring application is configured to determine an execution status of the VDC and in response to a determination that the VDC has been terminated present the UI.

One further aspect of the present disclosure relates to a method comprising the steps of receiving via a local graphical interface UI input from a user of a computing device wherein the UI is configured to communicate with a virtual machine VM hosted by a hypervisor of a remote computer system initializing via the UI a virtual desktop client VDC wherein the VDC is configured to communicate with the VM hosted by the hypervisor of the remote computer system receiving via the VDC desktop video display signals from the VM hosted by the hypervisor of the remote computer system monitoring via a monitoring application an execution status of the VDC and upon determination by the monitoring application that the VDC has been terminated presenting via the monitoring application the UI.

Yet one further aspect of the present disclosure relates to a non transitory computer readable medium storing executable instructions configured to cause a computer system to execute a method comprising receiving via a local graphical interface UI input from a user of a computing device wherein the UI is configured to communicate with a virtual machine VM hosted by a hypervisor of a remote computer system initializing via the UI a virtual desktop client VDC wherein the VDC is configured to communicate with the VM hosted by the hypervisor of the remote computer system receiving via the VDC desktop video display signals from the VM hosted by the hypervisor of the remote computer system monitoring via a monitoring application an execution status of the VDC and upon determination by the monitoring application that the VDC has been terminated presenting via the monitoring application the UI.

These and other aspects of the present disclosure will become apparent from the following description of the preferred embodiments taken in conjunction with the following drawings and their captions although variations and modifications therein may be affected without departing from the spirit and scope of the novel concepts of the disclosure.

The present disclosure is more particularly described in the following examples that are intended as illustrative only since numerous modifications and variations therein will be apparent to those skilled in the art. Various embodiments of the disclosure are now described in detail. Referring to the drawings like numbers if any indicate like components throughout the views. As used in the description herein and throughout the claims that follow the meaning of a an and the includes plural reference unless the context clearly dictates otherwise. Also as used in the description herein and throughout the claims that follow the meaning of in includes in and on unless the context clearly dictates otherwise. Moreover titles or subtitles may be used in the specification for the convenience of a reader which shall have no influence on the scope of the present disclosure. Additionally some terms used in this specification are more specifically defined below.

The terms used in this specification generally have their ordinary meanings in the art within the context of the disclosure and in the specific context where each term is used. Certain terms that are used to describe the disclosure are discussed below or elsewhere in the specification to provide additional guidance to the practitioner regarding the description of the disclosure. For convenience certain terms may be highlighted for example using italics and or quotation marks. The use of highlighting has no influence on the scope and meaning of a term the scope and meaning of a term is the same in the same context whether or not it is highlighted. It will be appreciated that same thing can be said in more than one way. Consequently alternative language and synonyms may be used for any one or more of the terms discussed herein nor is any special significance to be placed upon whether or not a term is elaborated or discussed herein. Synonyms for certain terms are provided. A recital of one or more synonyms does not exclude the use of other synonyms. The use of examples anywhere in this specification including examples of any terms discussed herein is illustrative only and in no way limits the scope and meaning of the disclosure or of any exemplified term. Likewise the disclosure is not limited to various embodiments given in this specification.

Unless otherwise defined all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this disclosure pertains. In the case of conflict the present document including definitions will control.

As used herein around about or approximately shall generally mean within 20 percent preferably within 10 percent and more preferably within 5 percent of a given value or range. Numerical quantities given herein are approximate meaning that the term around about or approximately can be inferred if not expressly stated.

As used herein the terms comprising including carrying having containing involving and the like are to be understood to be open ended i.e. to mean including but not limited to.

As used herein the phrase at least one of A B and C should be construed to mean a logical A or B or C using a non exclusive logical OR. It should be understood that one or more steps within a method may be executed in different order or concurrently without altering the principles of the present disclosure.

As used herein the term module may refer to be part of or include an Application Specific Integrated Circuit ASIC an electronic circuit a combinational logic circuit a field programmable gate array FPGA a processor shared dedicated or group that executes code other suitable hardware components that provide the described functionality or a combination of some or all of the above such as in a system on chip. The term module may include memory shared dedicated or group that stores code executed by the processor.

The term code as used above may include software firmware and or microcode and may refer to programs routines functions classes and or objects. The term shared as used above means that some or all code from multiple modules may be executed using a single shared processor. In addition some or all code from multiple modules may be stored by a single shared memory. The term group as used above means that some or all code from a single module may be executed using a group of processors. In addition some or all code from a single module may be stored using a group of memories.

The apparatuses and methods described herein may be implemented by one or more computer programs executed by one or more processors. The computer programs include processor executable instructions that are stored on a non transitory tangible computer readable medium. The computer programs may also include stored data. Non limiting examples of the non transitory tangible computer readable medium are nonvolatile memory magnetic storage and optical storage.

As shown schematically illustrates a thin client or zero client in accordance with certain embodiments of the present disclosure. As previously noted a thin client or zero client generally is a computer that relies heavily on some other computer system or server e.g. to fulfill its computational roles. In certain embodiments a thin client or zero client comprises a local operating system though this local operating system typically provides basic functionalities such as a local graphical interface. For example in one embodiment the local operating system may be a kernel such as the LINUX kernel. In certain embodiments the thin client or zero client comprises a system on a chip SOC video card a non volatile memory such as a flash memory and a random access memory RAM which are in communication with each other through a system bus . Further as shown in the embodiment the thin client comprises a boot rom . The client may comprise additional physical or virtual components not shown in the embodiment. Further though the environment shows only a single thin client it is common for multiple thin clients or zero clients to exist as components of a broader computer infrastructure wherein each of the clients share resources from the same server or computer system .

In one embodiment a thin client is a computer terminal or other housing connected to a monitor or computer display that provides a graphical user interface alternatively GUI local GUI UI to a user as will be discussed further. In the embodiment the client does not include a conventional operating system as it receives such resources from the computer system as will be discussed . The client may however comprise an operating system in various other embodiments.

The SOC can be any suitable SOC that may contain digital analog mixed signal and radio frequency functions. Generally the SOC comprises various hardware components e.g. processor core timing sources external interfaces analog interfaces voltage regulators etc. as well as related software. Further in certain embodiments the SOC can be configured to read and execute code from a preset location of the flash memory . For example a loader program which can load additional code can be placed at a preset location.

In certain embodiments the boot rom contains the initial code that the SOC executes after a power on reset. For example the initial code can include necessary code and configurations to initialize the flash memory . Subsequently the initial code can instruct the SOC to load a boot program from a predetermined location in the flash memory . In certain embodiments the boot rom can be a small piece of mask ROM or write protected flash embedded inside the SOC an EPROM chip etc.

As shown in the embodiment the client comprises various memory elements such as a flash memory device and a random access memory RAM device which are configured in accordance with certain embodiments of the present disclosure. In one embodiment the memory devices e.g. and are not user modifiable and are simply involved in the operation of the client . In other embodiments the memory devices e.g. and may be user modifiable and may be used to store data and information relating to the operation of the client .

Generally the flash memory stores information in an array of memory cells made from floating gate transistors. Such a configuration is different in nature from other volatile or non volatile memory because the information or data stored therein must be erased before new data can be written into the memory cells. In general there are two common types of flash memory NAND type named after NAND logic gates and NOR type named after NOR logic gates . In a NAND type flash memory data may be written and read in blocks or pages which are the basic accessible memory units. The NOR type flash memory allows a single machine word i.e. byte to be written or read independently. In either flash memory type however the erasing process is limited to erasing one block at a time. In other words the flash memory does not offer random access erasing or rewriting operations. In other embodiments the flash memory may be provided as a serial peripheral interface SPI flash memory.

In one embodiment the flash memory stores a boot program that includes code and configurations that when executed by the SOC can test and initialize some or all of the components of the thin client or zero client . Further the boot program may include code and configurations that when executed by the SOC can initialize a local graphical user interface and a monitoring application as will be described below.

In one embodiment the RAM device has a boot memory space that is utilized by a boot program a general area and a graphic area as will be discussed in connection with . In certain embodiments the graphic area may comprise one or more graphic planes as will be discussed in connection with .

As further shown in the embodiment the client comprises a video card i.e. video adapter graphics card display card etc. . In general the video card converts binary data into images displayed on the monitor . In one embodiment the video card comprises a processor i.e. graphics processing unit or GPU and a small amount of embedded memory but also utilizes the RAM of the client .

According to one embodiment in such a configuration i.e. shared graphics memory a mechanism exists e.g. via the BIOS or a jumper setting to select the amount of system memory that will be dedicated to displaying graphics. As will be discussed further in connection with in certain embodiments the video card can access the graphic area in the RAM device .

In one embodiment the client also comprises a connection system between the video card and the monitor or computer display . In one embodiment the connection system is a video graphics array VGA VGA connector which is an analog based standard interface. Alternatively in one embodiment the connection system is a digital visual interface DVI with is the digital based standard design for most flat panel displays. In other embodiments the connection system may be a high definition multimedia interface HDMI or other connection means familiar to one of ordinary skill in the art. As will be discussed in one embodiment the video card is configured to transmit both a local GUI and or the user interface of a virtual machine or operating system to the monitor as will be discussed.

Additionally as shown in the embodiment the client comprises an interface which is a physical input output hardware device such as a USB port. In one embodiment the interface allows a user to connect various peripherals to the client such as human interface devices including a keyboard or mouse or any other human interface devices with which the user can interact with the local GUI and or the user interface of a virtual machine. Alternatively in other embodiments any other serial bus protocol aside from USB may be used as desired.

In certain embodiments a hypervisor is running on the computer system . Stated in a simplified way the hypervisor runs on top of the hardware including the CPU and the physical memory . In certain embodiments the hypervisor can be stored or pre built in a flash ROM of the computer system . Alternatively the hypervisor can be stored or pre built in the hard drive of the computer system . The hypervisor has among other thing virtual CPUs virtual memories and scheduling services . Further in one embodiment the hypervisor hosts virtual machines or domains which encapsulate a complete running virtual environment. According to one embodiment a thin client or zero client can access one of the virtual machines e.g. and interface with the graphical interface of the virtual machine at the monitor connected to the client . According to certain embodiments the connectivity between the virtual machine e.g. and the monitor of the client is provided via a virtual desktop client VDC using a standard or proprietary protocol such as a Remote Desktop Protocol RDP client or a Virtual Network Computing VNC client as will be discussed in relation to . Further in one embodiment each VDC or an RDP client is in communication with one of the operating systems running on the virtual machines hosted by the hypervisor and the VDC or RDP client transmits user input signals to the operating system through one or more virtual desktop protocols supported by the operating system while operating system in turn transmits or redirects video display signals or video display data to the VDC or RDP client. In alternate embodiments the VDC or RDP client may be in communication with the hypervisor or a server side client that is in communication with the hypervisor .

One skilled in the art would appreciate that the hypervisor can also run on two CPUs four CPUs eight CPUs or any suitable number of CPUs. The hypervisor can be of various types and designs such as CITRIX XEN MICROSOFT HYPER V VMWARE ESX. The hypervisor can emulate one or more virtual machines or domains . An operating system can be installed in a virtual machine . The operating system may not realize that it is running on virtual machine and may perceive that it is running on a physical machine. The operating systems running on the virtual machine can host one or more application programs.

In certain embodiments the hypervisor hosts one or more virtual machines unprivileged domains . According to one embodiment each of the virtual machines can run an operating system or other guest. For example the first virtual machine the second virtual machine and the third virtual machine can run WINDOWS LINUX and NETBSD operating systems or various other operating systems respectively any of which may be accessed by a thin client or zero client . In one embodiment the operating system e.g. can be collective management software for managing the operation of various resources or processes that may be utilized by the client . For example the operating system e.g. can include a set of functional programs that control and manage operations of devices that may be connected to the client . Generally the set of application programs provide certain utility software for the user to manage the client or various other computing processes. In certain embodiments the operating system is operable to multitask i.e. execute computing tasks in multiple threads.

Further in one embodiment a virtual machine can provide a virtual network controller . From the perspective of an operating system or other guest run in the virtual machine the virtual network controller appears as a physical network controller. The operating system can utilize the virtual network controller to access the network. For example the operating system in the virtual machine can have a network interface for communicating with the virtual network controller . To support the operating system run in the virtual machine in accessing an Ethernet network and or IP network the virtual network controller can be assigned a MAC address and or IP address which can be utilized in interfacing with the thin client or zero client .

As shown in the embodiment the general area of the RAM comprises a local user interface UI application . In one embodiment the UI allows a user to interact with the client and provide various user credentials e.g. user name password etc. which may be used to select and boot up a VM e.g. for use on the client . In one embodiment the UI receives user input via a peripheral device such as a keyboard or mouse. In certain embodiments a boot program initializes the UI application in a process and loads the application to the memory area for execution. The SOC executes the UI application and generates image frame data which are subsequently placed in the graphic area of the RAM device . The graphic area is also accessible by the video card which subsequently processes the image frame data and generates video output signals accordingly. The video output signals are transmitted from a video output of the thin client to a video input of the monitor .

In certain embodiments the boot program can also initiate another process executing a monitoring application before at the same time of or after initiating the UI application .

As previously noted a user may utilize the UI to provide credentials e.g. user name password etc. which allow the user to select a particular virtual machine to access via the client during a particular session i.e. the duration in which the user is engaging the particular virtual machine . Typically when a user initiates a session with a particular virtual machine a graphical interface for interfacing with the virtual machine is provided from the computer system to the client via a network connection.

According to one embodiment the graphical interface for interfacing the virtual machine is provided via the Remote Desktop Protocol RDP which is a client application allowing a user to access and control resources at a remote computer e.g. computer system . Alternatively the graphical interface for interfacing the virtual machine may be provided as part of a virtual desktop infrastructure VDI via a commercial product such as XENDESKTOP as provided by CITRIX or HORIZON VIEW as provided by VMWARE according to one embodiment.

To utilize RDP as shown in the embodiment the RAM device comprises RDP client software . Additionally the computer system will generally comprise RDP server software. In one embodiment when the SOC executes the RDP client software the RDP server software responds by providing display data for the virtual machine . In one embodiment the RDP server software receives the display data from the hypervisor . According to one embodiment the RDP client routes the display data to the graphic area where it can be accessed and processed by the video card such that it can be displayed on the monitor .

As further shown in according to one embodiment the RAM device further comprises a monitoring application for determining when a user is engaged in an active session with a VM e.g. . Further in one embodiment when the monitoring application determines the user has disengaged a session with the VM the monitoring application is configured present the local UI to the user according to various means such as rebooting re initializing or relaunching the local UI by retrieving display data associated with the local UI from a graphic plane in the RAM device or various other means.

According to one embodiment the monitoring application is configured to monitor whether the RDP client software has been terminated. For example in one embodiment the monitoring application may utilize an application programming interface API a system call and or a memory scan to monitor whether the SOC is executing the RDP client or whether the processor process executing the RDP client has been terminated. Further the monitoring application may be configured to detect when the SOC begins executing the RDP client i.e. when the user begins a session with the VM . Subsequently in one embodiment the monitoring application is configured to continue monitoring the SOC to determine when the SOC is no longer executing the RDP client e.g. the monitoring application determines the user has terminated the session with the VM .

The monitoring application may employ alternate methods for determining when a user is engaged in an active session with a VM . For example in one embodiment the RDP client may be configured to communicate with the RDP server software via a specified port on the thin client and the monitoring application is configured to monitor activity on the particular thin client port. When the monitoring application first determines there is activity on the specified port the application determines the user has initiated a session with the VM . Subsequently upon determining there is no activity on the specified port the monitoring application determines the session has been terminated. In one further embodiment the RDP server software may be configured to utilize a particular port i.e. port on the computer system and the monitoring application may be configured to monitor the activity on the specific computer system port. For example the monitoring application may be configured to send packets to the specific port and if the monitoring application receives nothing in response or an error response or packet indicating the port is closed it is likely that the port is closed and therefore the RDP client and RDP server software are not communicating and the user is not conducting an active session . Alternatively if the monitoring application receives a response from the port it is likely that the user is engaged in an active session. Upon making that determination in one embodiment the monitoring application is configured to continue sending packets until it receives no response or error message or packet indicating the port is closed thus suggesting the user has terminated the session with the VM . In one alternate embodiment the monitoring application may act as a parent process to the RDP client in which case the monitoring application launches the process of the RDP client as a child. After the monitoring application launches the process of the RDP client the local operating system e.g. kernel may be configured to notify the monitoring application as to when the process of the RDP client has been terminated.

As noted upon determining the process of the RDP client has been terminated the monitoring application is configured to present the local UI to the user. In one embodiment the monitoring application calls a built in section of code that is configured to re initialize the local graphical user interface for example in a separate process. Alternatively in one embodiment upon determining the session with the VM has been terminated the monitoring application may be configured to call a subroutine of the boot program that when executed by the SOC re initializes local UI . As will be understood and appreciated re initializing the local UI without having to power down the entire thin client or zero client is advantageous in that it saves time and system resources.

As described above in relation to in various embodiments the monitoring application determines when a user is engaged in an active session with a VM e.g. and may employ various methods for determining when a user terminates a session with a VM . According to one embodiment the video card is configured such that as a default the video card retrieves data from the memory plane associated with the local UI i.e. . In one embodiment when the monitoring application determines the user has initiated a session with the VM the monitoring application is configured to notify the video card to retrieve display data from the video memory plane associated with the VM i.e. so that the video card can process and display the VM display. Effectively upon receiving indication from the monitoring application that the user has initiated a session with the VM the video card will switch from retrieving processing and displaying the local UI display data to retrieving processing and displaying the VM display data according to one embodiment.

Further according to one embodiment upon determining that the user has terminated a session with the VM as described in relation to the monitoring application may be configured to subsequently notify the video card that the session has terminated and the video card should therefore cease retrieving display data from the memory plane associated with the VM i.e. and begin retrieving processing and displaying data from memory plane i.e. the memory plane associated with the local UI . As described previously upon receiving indication that the user has terminated the session with the VM the video card effectively switches from retrieving processing and displaying display data from memory plane the memory plane associated with the VM to retrieving processing and displaying display data associated with the local UI from memory plane .

In one embodiment the video card comprises a handler to receive notifications from the monitoring application . Upon receiving an indication the handler is configured to execute specific instructions that instruct the video card to switch the location from which the video card is currently retrieving display data to be processed and displayed. For example in one embodiment the video card may comprise an interrupt handler and the monitoring application may be configured to send an interrupt to the video card upon determining a VM session has been terminated. According to the embodiment upon receiving the interrupt the interrupt handler is configured to execute and instruct the video card to begin retrieving the display data relating to the local UI .

The foregoing description of the exemplary embodiments of the disclosure has been presented only for the purposes of illustration and description and is not intended to be exhaustive or to limit the disclosure to the precise forms disclosed. Many modifications and variations are possible in light of the above teaching.

The embodiments were chosen and described in order to explain the principles of the disclosure and their practical application so as to enable others skilled in the art to utilize the disclosure and various embodiments and with various modifications as are suited to the particular use contemplated. Alternative embodiments will become apparent to those skilled in the art to which the present disclosure pertains without departing from its spirit and scope. Accordingly the scope of the present disclosure is defined by the appended claims rather than the foregoing description and the exemplary embodiments described therein.

