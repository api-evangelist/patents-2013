---

title: Multiversion model versioning system and method
abstract: A version control unit may maintain separate version numbers for multiple traits of a single model. In particular, a number of model traits may be identified, such as a model behavior trait, a software architecture trait, a simulation trait and a code generation trait. Version information for each trait may be maintained separately for the single model. Groups of elements of the model, such as graphical objects, relationships among the objects, object parameters, model parameters, etc., may be mapped to the model traits. The version control unit may determine what model elements are changed since a prior version, and identify the model traits to which the changed model elements are mapped. Version numbers for these traits may be incremented, while version numbers for the other traits may be left unchanged.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047165&OS=09047165&RS=09047165
owner: The MathWorks, Inc.
number: 09047165
owner_city: Natick
owner_country: US
publication_date: 20130313
---
The present application is a continuation in part of commonly assigned copending U.S. patent application Ser. No. 13 705 917 filed Dec. 5 2012 by Ricardo Monteiro Mojdeh Shakeri Michael D. Tocci Robert O. Aberg and Pieter J. Mosterman for Version Control in Modeling Environments which is a continuation of application Ser. No. 12 794 364 filed Jun. 4 2010 by Ricardo Monteiro Mojdeh Shakeri Michael D. Tocci Robert O. Aberg and Pieter J. Mosterman for Version Control in Modeling Environments now U.S. Pat. No. 8 341 594 which is a continuation of application Ser. No. 10 888 705 filed Jul. 8 2004 by Ricardo Monteiro Mojdeh Shakeri Michael D. Tocci Robert O. Aberg and Pieter J. Mosterman for Version Control in Modeling Environments now U.S. Pat. No. 7 739 655 which applications are hereby incorporated by reference in their entireties.

U.S. Pat. No. 7 739 655 for Version Control in Modeling Environments to Ricardo Monteiro et al. describes a system and method for controlling the versions of models such as graphical models. A model may be stored in a repository and the model may be checked in and out of the repository for example by a user wanting to make changes to the model. A source control system may automatically update version information for the model each time the model is checked into the repository and this version information may be contained in the model. The version information for a model may include a model version designation an interface version designation and a change log that may include the dates and authors of changes to the model as well as change comments. The model version designation may reflect any changes in the model including changes to the content and interface of the model. The interface version designation may reflect only changes to the interface of the model.

To the extent the model includes a component that refers to another model such as a graphical model reference block the model also may contain version information for the model being referenced by the component. The version information for the model being referenced may include both a model version designation and an interface version designation.

The system compares the model version number and the interface version number of a referenced model with the model version number and interface version number of the parent model. If either of the version numbers does not match an alert may be displayed to the user. The system may provide the user with a list of versions of the referenced model that are compatible with the parent model and the user may select one of these compatible versions in place of the incompatible version of the referenced model.

The present invention relates to systems and methods for maintaining version control of graphical models that may have executable semantics and for the components and elements of such graphical models. More specifically the system and method creates and maintains separate and independent versioning for a plurality of different traits of a graphical model. The system may include a modeling environment for creating and editing graphical models a version control unit a model repository for storing versions of models created or edited in the modeling environment and a trait configuration manager. The version control unit may include a model analyzer for determining what changes have been made to a model since the last time it was saved a locking engine and a mapping engine.

A given graphical model may include a plurality of objects such as blocks and relationships may be established among the objects included in the model. The model may include a list of the plurality of objects included in the model and information identifying the relationships among the objects. In addition at least some of the objects may have one or more object parameters. The model itself also may have one or more model parameters and one or more model configuration preferences. Furthermore the model may include visual depiction information that specifies an appearance of the model such as the appearance and location of the objects included in the model and the appearance and location of relationships among the objects such as lines arrows etc. The objects included in the model the information identifying the relationships among the objects the object parameters the model parameters the model configuration preferences and the visual depiction information may be changed for example as a user edits or modifies the given model.

Different groups of objects object relationship information object parameters model parameters model configuration preferences and visual depiction information may relate to different traits of the graphical model. For example a first group of objects object relationship information object parameters model parameters model configuration preferences and visual depiction information may concern the behavior of the model. A second group of objects object relationship information object parameters model parameters model configuration preferences and visual depiction information may concern the software architecture of the model. A third group may concern the manner in which the model is simulated e.g. executed for example by a simulation engine of the modeling environment. A fourth group may concern the manner in which code is generated from the model for example by a code generator tool of the modeling environment. A fifth group may concern a hardware implementation of the model. A sixth group may concern verification of the model. Other groups may concern other traits of the graphical model such as model requirements. Other traits may relate to different formalisms used in the given model such as textual discrete event noncausal etc.

In an embodiment the version control unit is configured to maintain a separate and independent version number for each trait of the graphical model. For example the version control unit may maintain a first version number for the behavior trait of the model a second version number for the software architecture trait of the model a third version number for the simulation trait of the model a fourth version number for the code generation trait of the model a fifth version number for the hardware implementation trait of the model and a sixth version number for the verification trait. In particular a determination may be made regarding which groups of objects object relationship information object parameters model parameters model configuration preferences and visual depiction information relate to or affect the various model traits. The mapping engine may define the association between the model traits and model elements e.g. the various objects object relationship information object parameters model parameters model configuration preferences and visual depiction information and this association may be stored at the version control unit in one or more association records.

The trait configuration manager may be configured to keep track of models formed from combinations of versions for the various traits. For example an overall configuration number of 2.4 may identify a model that constitutes a combination of behavior trait version 5.6 software architecture trait version 3.0 simulation trait version 2.5 and so on. The overall configuration numbers may also be under version control.

The association between model traits and model elements may be implemented through a registration technique. For example a tool of the modeling environment such as the code generation tool may register with the version control unit. As part of the registration process the code generation tool may identify to the version control unit the particular group of model elements that relate to the code generation trait of the model e.g. that when changed affect the code generation trait. In an embodiment the association between model traits and model elements may be user configurable. For example a user may register which model elements relate to various model traits.

When a user saves a model and or checks a model into the version control unit after having modified the model the model analyzer may determine what changes were made to the model and may determine which model traits are affected by those changes. The version control unit may only update the version numbers that are associated with the traits of the model that have been changed. The version control numbers associated with the traits of the model that have not been changed may retain their original version numbers. For example if a model parameter affecting code generation is changed the version control unit may increment the version number for the code generation trait of the model but leave the version number for the behavior trait of the model unchanged. Yet the overall configuration number for the model may be increased as well e.g. from 2.4 to 2.5.

In a further embodiment a human machine interface HMI tool of the modeling environment may present a version window or dialog on a display. The version window may include entries for at least some of the plurality of version numbers established for the given model. The entries moreover may include graphical elements such as drop down boxes that allow a user to choose a selected version number for at least some of the traits of the given model. A user may thus check out from the version control unit a version of the given model that combines various selected version numbers for different traits of the given model. In addition a user may check out a version of a graphical model that concerns just a single trait such as the code generation trait. In an embodiment if a user checks out a version associated with a particular trait then that model trait becomes editable. If a user merely opens a version associated with a particular trait then such model traits may be locked from editing by the user.

In other embodiments different versions of model traits may be merged. In addition different versions may be compared and the differences between the versions identified for example in a differencing report. One or more versions also may be locked from editing even if the version is checked out from the version control unit.

The modeling environment may further include a version control unit and a trait configuration manager . The version control unit may include a model analyzer a locking engine and a mapping engine and may store or have access to once or more change logs such as change logs and one or more association records such as association record . The modeling environment may also include a model repository configured to store one or more models such as models . Some of the models may include version information such as the first model which includes version information .

The modeling environment may further include a version control unit and a trait configuration manager . The version control unit may include a model analyzer a locking engine and a mapping engine and may store or have access to once or more change logs such as change logs and one or more association records such as association record . The modeling environment may also include a model repository configured to store one or more models such as models . Some of the models may include version information such as the first model which includes version information .

Suitable code generators for use with the present invention include but are not limited to the Simulink Coder the Embedded Coder and the Simulink HDL Coder products from The MathWorks Inc. of Natick Mass. and the TargetLink product from dSpace GmbH of Paderborn Germany. Suitable target language compilers include the xPC Target tool from The MathWorks Inc. and a C language compiler. However other code generation systems and other compilers may be used. Suitable differencing and merge engines include the version compare utility in the Simulink Report Generator tool and the merge command from the MATLAB development environment both from The MathWorks Inc. and the SimDiff and SimMerge tools from Ensoft Corp. of Ames Iowa. A suitable model verifier includes the Simulink Verification and Validation tool from The MathWorks Inc.

In an embodiment the version control unit the trait configuration manager and other components of the modeling environment may be implemented through one or more software modules or libraries containing program instructions pertaining to the methods described herein. The software modules may be stored in memory such as a main memory a persistent memory and or on computer readable media of a workstation or other data processing machine or device and executed by one or more processing elements. Other computer readable media may also be used to store and execute these program instructions such as non transitory computer readable media for example optical magnetic or magneto optical media. In another embodiment the version control unit or portions thereof and or the trait configuration manager may comprise registers and combinational logic configured and arranged to produce sequential logic circuits. In alternative embodiments various combinations of software and hardware including firmware may be utilized to implement the described methods.

In other embodiments the version control unit or one or more components thereof and or the trait configuration manager may be separate from the modeling environment . In such cases the version control unit may be in communication with the modeling environment e.g. through local or remote procedure calls or an Application Programming Interface API .

In an embodiment the modeling environment is a high level modeling environment. Suitable high level modeling environments include the MATLAB and Simulink technical computing environments from The MathWorks Inc. as well as the Simscape physical modeling system and the Stateflow charting tool also from The MathWorks Inc. the MapleSim physical modeling and simulation tool from Waterloo Maple Inc. of Waterloo Ontario Canada the LabVIEW programming system and the NI MatrixX model based design product both from National Instruments Corp. of Austin Tex. the Visual Engineering Environment VEE from Agilent Technologies Inc. of Santa Clara Calif. the System Studio model based signal processing algorithm design and analysis tool from Synopsys Inc. of Mountain View Calif. the SPW signal processing algorithm tool from Synopsis a Unified Modeling Language UML system a Systems Modeling Language SysML system the System Generator system from Xilinx Inc. of San Jose Calif. and the graphical modeling systems described in U.S. Pat. No. 7 324 931 for Conversion of Model Components Into References and U.S. Pat. No. 7 991 598 for Method and System for Modeling a Mechanical System which are hereby incorporated by reference in their entireties among others. Models created in the high level modeling environment may contain less implementation detail and thus operate at a higher level than certain programming languages such as the C C C and SystemC programming languages.

Those skilled in the art will understand that the MATLAB technical computing environment is a math oriented textual programming environment for digital signal processing DSP design among other uses. The Simulink technical computing environment is a model based design environment for modeling and simulating dynamic systems among other uses. The MATLAB and Simulink tools provide a number of high level features that facilitate algorithm development and exploration and support model based design. Exemplary high level features include dynamic typing array based operations data type inferencing sample time inferencing and execution order inferencing among others.

In another embodiment a lower level programming language such as the C C and C programming languages among others may be used to create one or more models.

Models constructed by the modeling environment may include textual models graphical models and combinations of graphical and textual models. A given model may simulate e.g. approximate operation of a system. Exemplary systems include physical systems such as weather systems financial markets plants controllers etc. A model may be executed in order to simulate the system being modeled and the execution of a model may also be referred to as simulating the model.

The code generation trait concerns how code such as source code is generated from a model by the code generator e.g. code reuse expression folding loop unrolling signal storage reuse dead path elimination parameter inlining the use of pre built math libraries etc. The software architecture trait concerns the structure of code such as source code generated from a model e.g. which functionality of the model should go into software functions whether to allow reuse of these functions the automatic naming scheme of the functions the argument list whether variables should be local or variable whether variables or parameters are to be located in a main file or a header file etc. The hardware implementation trait concerns generating a hardware description language HDL representation of a model e.g. what algorithm to use for computing a square root whether to try and minimize power consumption or resource usage etc. The model requirements trait concerns design and or testing requirements established for a model and the relations or links between model elements and requirements. The verification trait concerns how a model is verified e.g. by the model verifier . The diagnostic trait concerns how diagnostic testing of a model is performed and what actions are taken in response to that testing e.g. whether a particular model characteristic will cause an error result in a warning or be ignored whether algebraic loops are an error whether a source block that inherits a sample time is an error etc. The report trait concerns how a model should be presented in an electronic and or hard copy report form e.g. whether each subsystem should be on a separate page whether a company note should be included on each page whether version information should be on each page etc.

A graphical model may include a plurality of elements that together define the model. These elements may include the objects that make up the model such as blocks subsystems and sub models. These elements also may include relationships or interconnections among the objects the parameters of those objects the parameters of the model parameters of signals in the model and information about how a model should be visually depicted e.g. on a screen or when printed etc. For example a model may include some number of Product Gain If Else Signal Builder Data Store Read Write Finite Impulse Response FIR Infinite Impulse Response Sum Unit Delay Continuous Time Integrator and Bus Creator blocks among others. A model also may include one or more subsystems such as Function call subsystems Enabled subsystems etc. and or one or more sub models. At least some of the blocks may have one or more parameters. A mathematical parameter may be a block parameter that is used to compute an output of a block. For example a Gain parameter of a Gain block is a mathematical parameter. Parameters that are not used to compute a block s output such as a block name parameter a block color parameter a block position parameter etc. may be referred to as a block configuration parameters. In addition a tunable block parameter may refer to a block parameter whose value may be changed during simulation of the model without recompiling the model.

Model level parameters may include one or more optimization parameters such as a Block Reduction parameter which may determine whether a block reduction optimization is enabled or not for the model a Fixed Step parameter which specifies a fixed step size for the model a Minimum Step parameter which specifies a minimum step size for a solver a model Name parameter a Parent model name parameter which specifies the name of the model or subsystem that owns this model a Solver parameter which specifies the solver used for simulation of the model etc. In addition at least some of these parameters may also be specified at the block or object level and or the subsystem level.

Model level parameters block or object level parameters and signal level parameters may be set to respective values such as default values user specified values programmatically determined values etc. Particular model elements such as graphical objects model parameters block parameters etc. may relate to different ones of the model traits and a relationship between various model elements and model traits may be determined as indicated at block . Different groups of model elements may be selected and associated with the identified model traits as indicated at block .

For example a determination may be made regarding which block parameters affect the behavior trait of the model. The gain parameter of a Gain block may affect the behavior trait of a model while the name parameter of the Gain block does not affect the behavior trait. Other examples of model elements include model characteristics such as the number and kind of blocks included in the model and the relationships established between them model configuration preferences such as solver selection data import export settings optimization and diagnostics settings and model referencing settings. Other model elements may include block parameters state element parameters or settings physical system modeling object parameters or settings etc.

For example the gain parameter of a gain block and the constant parameter of a constant block of rows which are particular block parameters are associated with the behavior and the simulation traits. The block spatial coordinates and block size elements of rows which are also block parameters are associated with the visual representation trait. The particular solver selected for a model and the simulation start and stop times of rows which are model parameters are associated with the behavior and the simulation traits. The block reduction optimization setting and the signal storage reuse optimization setting of rows are associated with the simulation and the code generation traits. The hardware device vendor name and the hardware device type of rows are associated with the hardware implementation trait while the processor type of row is associated with the code generation trait. The number of bits integer and the number of bits character of rows are associated with the code generation and the hardware implementation traits. The HDL language setting of row is associated with the hardware implementation trait while the generate traceability report setting and the generate resource utilization report setting of rows are associated with the code generation and the hardware implementation traits. The generate stack usage report of row is associated with the code generation trait. It may also be associated with the report trait not shown in figure . The reset type synchronous or asynchronous of row is associated with the hardware implementation trait. The requirements document path name link from model object to requirements document and internal requirements document link of rows are associated with the model requirements trait.

It should be understood that the association record is meant for illustrative purposes and that one or more other or different and possibly much larger association records may be created. In addition other association records may be created that establish different associations between model elements and traits. As indicated one or more association records having predefined e.g. default associations may be included with or be accessible by the version control unit . Nonetheless the association record may be editable e.g. by a user to modify and or expand on the associations between model elements and traits. In an embodiment the association record may be placed under version control. In a further embodiment the version of the association record utilized with a model may be another model trait.

In an embodiment the modeling environment may include a single e.g. a default association record that may be used for all models created and or opened in the modeling environment . Alternatively the version control unit may permit a user to create a custom association record for a particular model . The custom association record may be stored with the model . For example the custom association record may be configured as a model property.

In an embodiment one or more modules such as add on tools of the modeling environment may register with the version control unit and as part of the registration process identify one or more model elements to be associated with one or more of the model traits. For example the simulation engine may identify one or more model elements to the version control unit that should be associated with the behavior trait. As another example the code generator may register with the version control unit and identify one or more model elements that should be associated with the code generation trait. As yet another example the model verifier may register with the version control unit and identify one or more model elements that should be associated with the verification trait.

In another embodiment a user may specify the association of one or more model elements to model traits. For example the HMI engine may present a dialog box that lists at least some model elements. The user may select one or more of the model elements and associate them with a desired model trait. The HMI engine also may present a dialog box for a selected model element of a model such as a block or icon. The dialog box may present one or more features of the model element and may allow those features to be associated with one or more traits. In addition the association of features to traits selected for a given block may be used as a prototype for all instances of that block type within the model. Additionally or alternatively the association may be restricted to a particular hierarchical level of the model such as all block types within a subsystem or sub model.

Returning to the version control unit may be configured to create and maintain a separate version history for the identified model traits for at least some of the models constructed and or executed in the modeling environment as indicated at block .

A given model such as model may be opened within the modeling environment as indicated at block . In an embodiment the HMI engine may create an interface such as a graphical user interface GUI which may be presented on a display of a data processing device such as a workstation a laptop computer a tablet computer etc. The GUI may include a model canvas a toolbar and a command bar among other user interface elements and may be operated by a user. The user may open the given model by using one or more command buttons and or menu items. The given model may be presented within the model canvas to the user. The given model may be rendered on the screen based on visual depiction information stored with the given model. One or more changes or edits may be made to the given model as indicated at block . For example a user may add or remove one or more objects such as blocks may change one or more model and or block parameters etc.

The model analyzer of the version control unit may detect the one or more changes or edits being made to the given model as indicated at block . The model analyzer may determine which element or elements of the given model are being changed or edited as indicated at block . The model analyzer may determine the one or more traits of the given model to which the one or more elements being changed or edited are associated as indicated at block . For example upon determining which model element or elements are being changed the model analyzer may access the association record to identify the one or more model traits associated with the one or more model elements being changed.

The version control unit may update the version information for the given model as indicated at block . In an embodiment the version control unit may increment the version number for the model traits to which the one or more model elements being changed or edited are associated as indicated at block . The version control unit may leave unchanged the version numbers for the model traits that are not associated with one or more model elements being changed or edited as indicated at block . In an embodiment the model may be stored as a single storage object such as a file in the model repository . Nonetheless the version control unit is configured to associate different version numbers for the different model traits with the model stored as a single file. In a further embodiment information concerning different versions of one or more model traits may be stored in a single storage object such as a file that does not include the entire model and or all of the traits.

The version control unit also may record the changes to the given model in a change log such as change log associated with the given model as indicated at block .

Suppose the one or more changes to the given model are to model elements that are associated with the code generation trait and the hardware implementation trait. In this case the version control unit increments the version numbers for these model traits while leaving the version numbers for the other model traits unchanged.

The HMI engine may be configured to present a version history graphical affordance such as a dialog or window to a user as indicated at block . For example a command button or menu item may be provided in the GUI and in response to the command button or menu item being selected the HMI engine may present the version history dialog on the display for review by the user.

The version history record may be organized as a table or array having rows and columns whose intersections define cells for storing information or data. In particular the version history record may include a plurality of rows and each row may correspond to one of the model s traits. The cells corresponding to a first column may include a name of the model trait. The cells corresponding to a second column may include a list of the version numbers for the versions of the model for that model trait that have been saved in the model repository . For example row indicates that copies of the model corresponding to version numbers 1.0 1.3 1.6 and 1.7 of the behavior trait have been saved. Row indicates that copies of the model corresponding to version numbers 1.0 and 1.1 of the software architecture trait have been saved and so on. The cells corresponding to a third column may indicate whether the most recent version of the model trait is locked against editing.

In an embodiment at least some if not all of the versions represented by rows of the version history record may further include the name of the author of the version the date the version was created the name of the person who it was last saved by and the date it was last saved.

The version control unit may receive a request to open a version of the model that represents one or a combination of prior versions for one or more of the model s traits as indicated at block . For example upon reviewing the version history record a user may choose to open a version of the model that represents a combination of versions for different traits of the model. The user may choose to open a version of the model that has version 1.3 of the model s behavior trait version 1.0 of the model s software architecture trait version 1.8 of the model s simulation trait version 1.8 of the model s code generation trait version 2.0 of the model s hardware implementation trait and version 1.0 of the model s model requirements trait. The merge engine may retrieve the specified versions from the model repository and construct a single model that represents the selected versions as indicated at block . In an embodiment the merge engine may construct the single model based on information contained in the change log for the model.

The merge engine may be configured to detect whether any inconsistencies exist between the various selected trait versions as indicated at block . The merge engine also may be configured to resolve the identified inconsistencies as indicated at block . More specifically the merge engine may be configured to apply one or more rules to resolve identified inconsistencies in selected trait versions. For example priorities may be assigned to the traits and the conflict may be resolved in favor of the trait having the higher priority. The behavior trait may be assigned the highest priority. In another example the merge engine may be configured to revert to default values in case of an inconsistency. In yet another example if the inconsistency results from the deletion of a portion of a model as compared to an earlier version the inconsistency may be ignored.

The single model may be presented to the user as indicated at block . The user may simulate e.g. execute the single model as indicated at block . Alternatively or additionally the user may generate software code from the single model as indicated at block . Other actions may include generating hardware code transform the model e.g. remove Gain blocks with a value of 1 replace selected patterns with a single block etc. generate and print or save a model report determine the complexity of the model e.g. the number of blocks the number of nested decision points in a state transition diagram etc. prove properties of the model e.g. by static analysis and associate requirements with model elements among other actions.

The combination of different trait versions may be managed by the trait configuration manager as indicated at block and the combinations may themselves be subject to version control by the version control unit as indicated at block . For example the trait configuration manage may maintain an overall configuration management record for a model.

The HMI engine may be configured to present one or more graphical affordances such as dialog boxes through which a user may select one or more desired trait versions when opening a model and or through which a user may specify desired trait versions for one or more model components such as a subsystem or a sub model.

For example the first area which corresponds to the logic trait includes a show port labels drop down box a Read Write permissions drop down box a Name of error callback function data entry box and a Permit hierarchical resolution drop down box . These elements have been associated with the logic trait. The second area which corresponds to the architecture trait includes a Treat as atomic unit checkbox a Minimize algebraic loop occurrences checkbox a Sample time data entry box a Real Time Workshop system code drop down box a Real Time Workshop function name options drop down box a Real Time Workshop function name data entry box and a Real Time Workshop file name options drop down box . The term Real Time Workshop may refer to a source code generation tool for the modeling environment .

By manipulating the information presented by the user editable interface elements of the selection dialog a user may alter the values of one or more model elements associated with a trait such as the logic or architecture traits without changing the version number for that trait.

The locking engine may be configured to lock one or more of the model elements from editing. In this case the locked elements may appear grayed out by the HMI engine thereby blocking the user from making any changes to the values assigned to those model elements.

The selection dialog also may include one or more command buttons such as an OK button a Cancel button a Help button and an Apply button . Once the user has selected the desired trait version numbers and changed any of the model element parameter values the user may select the OK or Apply buttons . The version control unit may retrieve and load the selected version. For example to the extent the user selects one or more versions numbers for traits of a subsystem the version control unit may load the selected subsystem when opening and or loading a model containing that subsystem. As another example the user may open a model and select one or more version numbers for model traits. In response the version control unit may modify the model so that the model element values associated with the selected model traits conform to the one or more version numbers for the selected model traits.

It should be understood that the selection dialog is meant for illustrative purposes and that other graphical affordances may be used. Similar graphical affordances such as dialogs may be presented for selecting an overall configuration number for a model and or one or more model trait versions.

Thereafter if a change or edit is proposed to the model the locking engine may identify which model element or elements are being changed as indicated at block . The locking engine may determine if the identified model element or elements being changed are associated with the locked model trait e.g. the model requirements trait as indicated at decision block . If the element or elements are associated with the locked model trait the locking engine may block the proposed change or edit to the model as indicated by Yes arrow leading to block . If the element or elements are not associated with the locked model trait the locking engine may permit the proposed change to be made as indicated by No arrow leading to block . Alternatively if the model element or elements being changed are associated with the locked model trait the locking engine may allow the change to be made but block the modified model from being saved. The user may still execute the modified model generate code for the modified model analyze the modified etc. The user may also save the modified model as a new model.

The differencing engine may retrieve the two models from the model repository as indicated at block . In an embodiment the identification of model elements associated with the various traits may be stored separately from the model with links back to the corresponding parameter values in the model. In a further embodiment additional model content such as model and or block parameters blocks connections among model objects entities relations among model objects and or entities attributes etc. may be stored separately from the model. In another embodiment the values for the model elements associated with different traits may be stored separately from the model and may include identifiers. In these cases the differencing engine may only retrieve the information associated with the traits being compared rather than the entire models.

To the extent one of the specified models is a combination of versions that was not stored by the trait configuration manager the merge engine may reconstruct the specified model as indicated at block . The differencing engine may analyze the two model versions and identify the differences between the two model versions as indicated at block . The differencing engine may create a report containing the identified differences as indicated at block . The differencing engine may output the report as indicated at block . For example the report may be displayed on a screen to the user and or printed.

To the extent a model includes a component such as a graphical model reference block that refers to another model multiple version numbers may be maintained for this referenced model. For example another trait of a model may be a sub model version trait. The sub model version trait may include the overall configuration version numbers for sub models included in a parent model. Alternatively the versioning information for sub models may be included in an existing trait such as the behavior trait.

The main memory which may be a Random Access Memory RAM may store a plurality of program libraries or modules such as an operating system and one or more application programs that interface to the operating system such as the modeling environment .

The removable medium drive may accept and read a computer readable medium such as a CD DVD floppy disk solid state drive tape flash memory or other non transitory medium. The removable medium drive may also write to the computer readable medium .

Suitable computer systems include personal computers PCs workstations servers laptops tablets palm computers smart phones electronic readers and other portable computing devices etc. Nonetheless those skilled in the art will understand that the computer system of is intended for illustrative purposes only and that the present invention may be used with other computer systems data processing systems or computational devices. The present invention may also be used in a networked e.g. client server computer architecture or a public and or private cloud computing arrangement. For example the modeling environment application may be hosted on a server and accessed by a remote client through an application hosting system such as the Remote Desktop Connection tool from Microsoft Corp.

Suitable operating systems include the Windows series of operating systems from Microsoft Corp. of Redmond Wash. the Android and Chrome OS operating systems from Google Inc. of Mountain View Calif. the Linux operating system the MAC OS series of operating systems from Apple Inc. of Cupertino Calif. and the UNIX series of operating systems among others. The operating system may provide services or functions for other modules such as allocating memory organizing data according to a file system prioritizing requests etc. The operating system may run on a virtual machine which may be provided by the data processing system .

As indicated above a user or developer such as an engineer scientist programmer etc. may utilize one or more input devices such as the keyboard the mouse and the display to operate the modeling environment and construct one or more graphical skeleton components and or one or more models that include one or more graphical skeleton components. As discussed the graphical models may be computational and may have executable semantics. In particular the models may be executable. In particular the model may provide one or more of time based event based state based frequency based control flow based and dataflow based execution semantics. The execution of a model may simulate operation of the system that is being designed or evaluated. The term graphical model moreover is intended to include graphical program.

The foregoing description of embodiments is intended to provide illustration and description but is not intended to be exhaustive or to limit the invention to the precise form disclosed. Modifications and variations are possible in light of the above teachings or may be acquired from practice of the invention. For example while a series of acts has been described above with respect to A B A B A B and the order of the acts may be modified in other implementations. Further non dependent acts may be performed in parallel.

Also the term user as used herein is intended to be broadly interpreted to include for example a computing device e.g. a workstation or a user of a computing device unless otherwise stated.

It will be apparent that one or more embodiments described herein may be implemented in many different forms of software and hardware. Software code and or specialized hardware used to implement embodiments described herein is not limiting of the invention. Thus the operation and behavior of embodiments were described without reference to the specific software code and or specialized hardware it being understood that one would be able to design software and or hardware to implement the embodiments based on the description herein.

Further certain embodiments of the invention may be implemented as logic that performs one or more functions. This logic may be hardware based software based or a combination of hardware based and software based. The logic may be stored in one or more tangible computer readable storage media and may include computer executable instructions that may be executed by processing logic such as processing logic . The computer executable instructions may include instructions that implement one or more embodiments of the invention. The tangible computer readable storage media may be volatile or non volatile and may include for example flash memories dynamic memories removable disks and non removable disks.

No element act or instruction used herein should be construed as critical or essential to the invention unless explicitly described as such. Also as used herein the article a is intended to include one or more items. Where only one item is intended the term one or similar language is used. Further the phrase based on is intended to mean based at least in part on unless explicitly stated otherwise.

