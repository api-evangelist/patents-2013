---

title: Systems and methods for using metadata to search for related computer infrastructure components
abstract: A computer system for crawling computer infrastructure inventory data includes a processor and a memory device coupled to the processor. The computer system also includes an inventory database system stored on the memory device. The inventory database system includes computer-executable instructions allowing the computer to manage stored records. The computer system is configured to (a) retrieve an inventory record from the inventory database system, the inventory record containing inventory data, (b) determine that the inventory data contains relational inventory metadata, (c) determine that the relational inventory metadata indicates at least one related inventory record, and (d) perform step (a) on the at least one related inventory record.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09544192&OS=09544192&RS=09544192
owner: MasterCard International Incorporated
number: 09544192
owner_city: Purchase
owner_country: US
publication_date: 20130424
---
The field of the invention relates generally to management of computer devices and more particularly to network based systems and methods for scanning computer devices to collect inventory data including hardware and software objects associated with the computer devices.

At least some known computing infrastructures for medium to large business entities include hundreds or thousands of computer devices from mission critical servers hosting production applications to personal computers PCs used by support personnel. Managing such computing infrastructures requires knowledge of the types of hardware and software objects deployed across the environment. Asset managers oftentimes need to maintain inventory information on the computing devices in service and need to track devices as they enter and exit service. System administrators may need to track operating system versions and patch levels for the computing devices as well as which applications and versions are installed on each computing device.

One known method of maintaining such inventory information is the manual tracking and recording of information in a spreadsheet or a database. Tracking asset information manually can be significantly time consuming and is subject to human error. Further changes in the infrastructure lead to stale data that may not be immediately corrected and may go unrealized for long periods of time. Other known methods of maintaining inventory information utilize inventory management applications. Such approaches often require purchasing a management product and installing a pre compiled agent on each computing device in the infrastructure. These agents may not be available for all operating systems present in an infrastructure. When these agents are installed these known agents are oftentimes not customizable enough for certain tasks and typically impact the computational capacity of the hosts on which they run.

Accordingly it is desirable to have a tool set that can be deployed onto each computing device such that each computing device can then execute a common scan program to collect similar inventory data with minimal computational overhead on the executing host.

In one aspect a computer implemented method for crawling computer infrastructure inventory data is provided. The method is implemented by a computing device coupled to a memory device. The method includes a using the computing device to retrieve an inventory record from an inventory database system the inventory record containing inventory data b determining that the inventory data contains relational inventory metadata c determining that the relational inventory metadata indicates at least one related inventory record and d performing step a on the at least one related inventory record.

In another aspect a computer system for crawling computer infrastructure inventory data is provided. The computer system includes a processor and a memory device coupled to the processor. The computer system also includes an inventory database system stored on the memory device. The inventory database system includes computer executable instructions allowing the computer to manage stored records. The computer system is configured to a retrieve an inventory record from the inventory database system the inventory record containing inventory data b determine that the inventory data contains relational inventory metadata c determine that the relational inventory metadata indicates at least one related inventory record and d perform step a on the at least one related inventory record.

In a further aspect computer readable storage media for crawling computer infrastructure inventory data is provided. The computer readable storage media has computer executable instructions embodied thereon. When executed by at least one processor the computer executable instructions cause the processor to a retrieve an inventory record from an inventory database system the inventory record containing inventory data b determine that the inventory data contains relational inventory metadata c determine that the relational inventory metadata indicates at least one related inventory record and d perform step a on the at least one related inventory record.

In another aspect a computer implemented method for scanning computer infrastructure within a computer network is provided. The computer network includes a first host device having a first operating system and a second host device having a second operating system distinct from the first operating system. The first host device and the second host device are coupled to a controller server. The method comprises the step of deploying a first scan program to the first host device and the second host device. The first scan program is configured to gather and store inventory data on a host device. The method further comprises the step of installing a first tool set on the first host device. The first tool set is configured to enable the first scan program to execute on the first operating system. The method also comprises the step of installing a second tool set on the second host device. The second tool set is configured to enable the first scan program to execute on the second operating system. The method further comprises the step of executing the first scan program on the first host device for gathering and storing a first set of inventory data on the first host device. The method also comprises the step of executing the first scan program on the second host device for gathering and storing a second set of inventory data on the second host device. The method further comprises the step of collecting the first set of inventory data from the first host device and the second set of inventory data from the second host device. The collecting is performed by the controller server.

In another aspect a network based system for scanning computer infrastructure within a computer network is provided. The system comprises a first scan program configured to gather and store inventory data on a host device. The system also comprises a first host device comprising a first operating system and a first tool set. The first tool set is configured to enable the first scan program to execute on the first operating system. The system further comprises a second host device comprising a second operating system distinct from the first operating system and a second tool set. The second tool set is configured to enable the second scan program to execute on the second operating system. The system also comprises a controller server coupled to the first host device and the second host device. The controller server is configured to deploy the first scan program to the first host device and the second host device. The controller server is also configured to execute the first scan program on the first host device for gathering and storing a first set of inventory data on the first host device. The controller server is further configured to execute the first scan program on the second host device for gathering and storing a second set of inventory data on the second host device. The controller server is also configured to collect the first set of inventory data from the first host device and the second set of inventory data from the second host device.

In yet another aspect computer readable storage media having computer executable instructions embodied thereon are provided. The computer executable instructions when executed by at least one processor cause the processor to deploy a first scan program to a first host device and a second host device. The first scan program is configured to gather and store inventory data on a host device. The computer executable instructions also cause the processor to install a first tool set on the first host device. The first tool set is configured to enable the first scan program to execute on the first operating system. The computer executable instructions further cause the processor to install a second tool set on the second host device. The second tool set is configured to enable the first scan program to execute on the second operating system. The computer executable instructions also cause the processor to execute the first scan program on the first host device for gathering and storing a first set of inventory data on the first host device. The computer executable instructions further cause the processor to execute the first scan program on the second host device for gathering and storing a second set of inventory data on the second host device. The computer executable instructions also cause the processor to collect the first set of inventory data from the first host device and the second set of inventory data from the second host device. The collecting is performed by the controller server.

In a further aspect a computer implemented method for storing computer infrastructure inventory data is provided. The method is implemented by a computing device coupled to a memory device and a database system stored on the memory device. The database system includes computer executable instructions allowing the computing device to manage stored records. The method includes receiving an inventory file associated with a scan of a host device at the computing device. The method also includes receiving a mapping schema associated with the inventory file at the computing device. The mapping schema comprises a structured relationship description between the inventory file and an inventory record. The method further includes translating at the computing device the inventory file to the inventory record using the mapping schema. The method additionally includes updating the database system with the inventory record.

In yet another aspect a computer for storing computer infrastructure inventory data is provided. The computer includes a processor and a memory device coupled to the processor. The computer also includes a database system stored on the memory device. The database system includes computer executable instructions allowing the computer to manage stored records. The computer is configured to receive an inventory file associated with a scan of a host device. The computer is also configured to receive a mapping schema associated with the inventory file. The mapping schema comprises a structured relationship description between the inventory file and an inventory record. The computer is further configured to translate the inventory file to the inventory record using the mapping schema and to update the database system with the inventory record.

In a further aspect computer readable storage media for storing computer infrastructure inventory data is provided. The computer readable storage media has computer executable instructions embodied thereon. When executed by at least one processor the computer executable instructions cause the processor to receive an inventory file associated with a scan of a host device. The computer executable instructions also cause the processor to receive a mapping schema associated with the inventory file wherein the mapping schema comprises a structured relationship description between the inventory file and an inventory record. The computer executable instructions further cause the processor to translate the inventory file to the inventory record using the mapping schema and to update a database system with the inventory record.

Described in detail herein are example embodiments of systems and methods for scanning computing infrastructure for use in collecting inventory data associated with various types of computing hardware and software. The systems and methods facilitate for example collecting operating system and application inventory information about computing devices using a common scan program and merging the inventory information into a common database. A technical effect of the systems and methods described herein include at least one of a automatically collecting inventory information from a network of heterogeneous computing devices b standardizing the types of inventory information collected within a single inventory format c centralizing storage of inventory information d centralizing and coordinating the regular collection of inventory information e facilitating distribution of new versions of scan software to enable dynamic changes in the type of information collected f leveraging a standard set of tools across platform types to enable a single script to support multiple platforms g facilitating crawling of inventory records to determine links between inventory records h defining links between inventory records and i enabling effective inventory management using linked inventory records.

More specifically the technical effects can be achieved by performing at least one of the following steps a deploying a scan program to a plurality of hosts b installing on a host device a first tool set configured to enable the scan program to run on a first operating system c installing on another host device a second tool set configured to enable the scan program to run on a second operating system d executing the scan program on both host devices to generate inventory data sets e collecting the inventory data sets on a controller server f deploying the scan program to host devices to replace the scan program g monitoring the operation of the scan programs during execution h receiving an inventory file associated with a scan of a host device i receiving a mapping schema associated with the inventory file wherein the mapping schema comprises a structured relationship description between the inventory file and an inventory record j translating the inventory file to the inventory record using the mapping schema and k updating the database system with the inventory record.

As used herein the term inventory information refers to data describing characteristics associated with computing resources and may include information related to an operating system running on the computing resource information related to an application running on the computing resource information related to an application server running on the computing resource information related to a web server running on the computing resource information related to load balancer running on the computing resource information related to security certificates on the computing resource information related to network hierarchies e.g. DNS records on the computing resource information related to hardware security assets running on the computing resource information related to IP addresses bound to the computing resource information related to other services on the computing resource and hardware associated with the computing resource.

As used herein the terms inventory database system database system and inventory database refer to database systems used to store data associated with inventory data scanned using the methods described herein. Such database systems are further used to facilitate crawling to find related computer infrastructure inventory components. As used herein these terms may be used interchangeably.

As used herein a processor may include any programmable system including systems using micro controllers reduced instruction set circuits RISC application specific integrated circuits ASICs logic circuits and any other circuit or processor capable of executing the functions described herein. The above examples are example only and are thus not intended to limit in any way the definition and or meaning of the term processor. 

As used herein the term database may refer to either a body of data or to a relational database management system RDBMS or both. As used herein a database may include any collection of data including hierarchical databases relational databases flat file databases object relational databases object oriented databases and any other structured collection of records or data that is stored in a computer system. The above examples are example only and thus are not intended to limit in any way the definition and or meaning of the term database. Examples of RDBMS s include but are not limited to including Oracle Database MySQL IBM DB2 Microsoft SQL Server Sybase and PostgreSQL. However any database may be used that enables the systems and methods described herein. Oracle and MySQL are registered trademarks of Oracle Corporation Redwood Shores Calif. IBM is a registered trademark of International Business Machines Corporation Armonk N.Y. Microsoft is a registered trademark of Microsoft Corporation Redmond Wash. and Sybase is a registered trademark of Sybase Dublin Calif. As used herein the term database system refers specifically to a RDBMS.

In one embodiment a computer program is provided and the program is embodied on a computer readable medium. In an example embodiment the system is executed on a single computer system without requiring a connection to a sever computer. In a further example embodiment the system is being run in a Windows environment Windows is a registered trademark of Microsoft Corporation Redmond Wash. . In yet another embodiment the system is run on a mainframe environment and a UNIX server environment UNIX is a registered trademark of X Open Company Limited located in Reading Berkshire United Kingdom . The application is flexible and designed to run in various different environments without compromising any major functionality. In some embodiments the system includes multiple components distributed among a plurality of computing devices. One or more components may be in the form of computer executable instructions embodied in a computer readable medium. The systems and processes are not limited to the specific embodiments described herein. In addition components of each system and each process can be practiced independent and separate from other components and processes described herein. Each component and process can also be used in combination with other assembly packages and processes.

The following detailed description illustrates embodiments of the invention by way of example and not by way of limitation. It is contemplated that the invention has general application to managing computing infrastructures.

As used herein an element or step recited in the singular and proceeded with the word a or an should be understood as not excluding plural elements or steps unless such exclusion is explicitly recited. Furthermore references to example embodiment or one embodiment of the present invention are not intended to be interpreted as excluding the existence of additional embodiments that also incorporate the recited features.

In the example embodiment controller server includes a database server connected to database which contains inventory information relating to hosts as described below in greater detail. In one embodiment centralized database is stored on controller server and can be accessed by potential users at one of hosts by logging onto controller server through one of hosts . In an alternative embodiment database is stored remotely from controller server .

Database may include a single database having separated sections or partitions or may include multiple databases each being separate from each other. Database may store inventory data generated as part of inventory scan activities conducted over the network including data relating to operating systems applications and hardware. Database may also store information associated with inventory scanning of hosts such as scan execution and scheduling information scan source code and source code version information. Database may also store information associated with the storing of inventory scanned from hosts including standard file format layouts scan versions scan version dates discovery dates data security information scan locations i.e. relative or absolute paths on host where a scan occurs file consistency information mapping schema scan performance information i.e. success and failure statistics associated with scans data history error handling information and any other information relevant to the storing of scanned information from host . As discussed below inventory information associated with hosts is updated periodically and is stored within database .

Controller server is configured to be communicatively coupled to various individuals including employees and to third parties e.g. account holders customers auditors developers consumers merchants acquirers issuers etc. using an ISP Internet connection . The communication in the example embodiment is illustrated as being performed using the Internet however any other wide area network WAN type communication can be utilized in other embodiments i.e. the systems and processes are not limited to being practiced using the Internet. In addition and rather than WAN local area network could be used in place of WAN .

In the example embodiment controller server includes database server and may include a transaction server a web server a fax server a directory server and a mail server . In other embodiments controller server may further include additional servers to facilitate the processes and methods described herein. Such additional servers may include without limitation servers for scheduling and coordinating scan activities servers for receiving data servers for translating data servers for inserting data into a database servers for storing database information servers to assist in security tasks such as encryption and decryption additional servers to facilitate these functions across security zones and any other server which may facilitate the processes and methods described herein. In some embodiments such servers may be physically distinct from one another while in other embodiments physical servers may be used for a plurality of purposes. In other words while controller server may indicate an individual server or a plurality of servers controller server will be able to facilitate the processes and methods described herein.

In the example embodiment any authorized individual having a workstation may be a part of computing infrastructure . At least one of the client systems includes a manager workstation located at a remote location. Workstations and are personal computers having a web browser. Also workstations and are configured to communicate with controller server . Furthermore fax server communicates with remotely located client systems including a client system using a telephone link. Fax server is configured to communicate with other client systems and as well.

Computing infrastructure may also include point of sale POS terminals which may be connected to controller server . POS terminals are interconnected to the Internet through many interfaces including a network such as a local area network LAN or a wide area network WAN dial in connections cable modems wireless modems and special high speed ISDN lines. POS terminals could be any device capable of interconnecting to the Internet and including an input device capable of reading information from a consumer s financial transaction card.

User system also includes at least one media output component for presenting information to user . Media output component is any component capable of conveying information to user . In some embodiments media output component includes an output adapter such as a video adapter and or an audio adapter. An output adapter is operatively coupled to processor and operatively couplable to an output device such as a display device a liquid crystal display LCD organic light emitting diode OLED display or electronic ink display or an audio output device a speaker or headphones.

In some embodiments user system includes an input device for receiving input from user . Input device may include for example a keyboard a pointing device a mouse a stylus a touch sensitive panel a touch pad a touch screen a gyroscope an accelerometer a position detector or an audio input device. A single component such as a touch screen may function as both an output device of media output component and input device . User system may also include a communication interface which is communicatively couplable to a remote device such as controller server . Communication interface may include for example a wired or wireless network adapter or a wireless data transceiver for use with a mobile phone network Global System for Mobile communications GSM 3G or other mobile data network or Worldwide Interoperability for Microwave Access WIMAX .

Stored in memory area are for example computer readable instructions for providing a user interface to user via media output component and optionally receiving and processing input from input device . A user interface may include among other possibilities a web browser and client application. Web browsers enable users such as user to display and interact with media and other information typically embedded on a web page or a website from controller server . A client application allows user to interact with a server application from controller server .

Server system includes a processor for executing instructions. Instructions may be stored in a memory area for example. Processor may include one or more processing units e.g. in a multi core configuration for executing instructions. The instructions may be executed within a variety of different operating systems on the server system such as UNIX LINUX Microsoft Windows etc. It should also be appreciated that upon initiation of a computer based method various instructions may be executed during initialization. Some operations may be required in order to perform one or more processes described herein while other operations may be more general and or specific to a particular programming language e.g. C C C Java or other suitable programming languages etc. .

Processor is operatively coupled to a communication interface such that server system is capable of communicating with a remote device such as a user system or another server system . For example communication interface may receive requests from hosts via the Internet as illustrated in .

Processor may also be operatively coupled to a storage device . Storage device is any computer operated hardware suitable for storing and or retrieving data. In some embodiments storage device is integrated in server system . For example server system may include one or more hard disk drives as storage device . In other embodiments storage device is external to server system and may be accessed by a plurality of server systems . For example storage device may include multiple storage units such as hard disks or solid state disks in a redundant array of inexpensive disks RAID configuration. Storage device may include a storage area network SAN and or a network attached storage NAS system.

In some embodiments processor is operatively coupled to storage device via a storage interface . Storage interface is any component capable of providing processor with access to storage device . Storage interface may include for example an Advanced Technology Attachment ATA adapter a Serial ATA SATA adapter a Small Computer System Interface SCSI adapter a RAID controller a SAN adapter a network adapter and or any component providing processor with access to storage device .

Memory area may include but are not limited to random access memory RAM such as dynamic RAM DRAM or static RAM SRAM read only memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and non volatile RAM NVRAM . The above memory types are example only and are thus not limiting as to the types of memory usable for storage of a computer program.

During operation controller server deploys the scan program to a plurality of hosts such as first host device and second host device . In some embodiments deploying the scan program includes using file transfer protocol FTP to transfer the scan program to the host. In other embodiments deploying the scan program includes using secure file transfer protocol SFTP to transfer the scan program to the host. Alternatively any method of transferring the scan program to a host that enables operation of the systems and methods described herein may be used.

In the example embodiment a first tool set is installed onto first host device and a second tool set is installed onto second host device . First host device includes a first operating system and second host device includes a second operating system that is different from the first operating system. The first tool set and second tool set are sets of tools configured to allow execution a single scan program e.g. the scan program under multiple operating systems. For example first host device may include a Windows based operating system and second host device may include a Solaris based operating system. Solaris is a registered trademark of Oracle Corporation Redwood City Calif. . In one embodiment the scan program is one or more scripts written in Perl. As such the first tool set may include a Perl interpreter for Windows thereby enabling scan program to execute on the first host device . Further the second tool set may include a Perl interpreter for Solaris thereby enabling scan program to execute on the second host device . In another embodiment scan program includes any other computer language and the tool set or includes a corresponding interpreter for interpreting the computer language. In other words first tool set and the second tool set includes any operating system specific libraries and binaries necessary to perform a successful scan. For example the use of a scan program written in a particular language e.g. Java would cause an associated tool set to include a corresponding interpreter e.g. a Java interpreter . In another example the use of cryptographic or security protocols in a scan would cause an associated tool set to include an associated program for extracting encrypted data e.g. OpenSSL .

Further in the example embodiment scan program includes operating system specific operations conditioned at runtime to execute certain inventory collection functions using different mechanisms depending on the operating system detected. For example scan program may first determine the operating system of the host such as Windows Server 2003 or Solaris by querying the execution host. As used herein the term execution host refers to the particular host upon which an instance of the scan program is running. In another embodiment the scan program may be instructed at to the underlying operating system of the execution host such as through a command line parameter at the time of execution or through an environment variable or a configuration file associated with the scan program on the particular execution host. For example if the scan program utilizes Perl and if the operating system of the execution host device is stored in the variable 0 such as through passing the operating system type as a command line parameter during execution the scan program may set the operating system platform here platform as such 

Later during execution in this example embodiment scan program utilizes the platform variable to conditionally process certain inventory information. For example the scan program may be programmed to query the execution host to determine memory information. If the execution host s operating system is Solaris the scan program may execute a system command including the uname command and parse Solaris style output of uname in the format expected from Solaris. For example 

Controller server then executes scan program on the first host device for generating a first set of inventory data . In the example embodiment scan program is configured to gather inventory data associated with the execution host device including but not limited to information related to hardware components operating system information and application information. For example certain hardware component information such as the number of processors storage capacities and random access memory RAM capacities may be collected by the scan program . Further operating system information such as operating system version patch level information network addresses and user information may be collected by the scan program .

In some embodiments information about installed applications may be gathered as well such as the presence of certain applications the settings of applications and application specific information such as version and patch information application configuration settings and network port settings. Further in some embodiments the scan programs and or sub components of the scan programs are executed as a specific user of the operating system of the execution host. Operating systems may include security control restrictions by means of user accounts users and authentication. Some inventory data may be accessible to some users e.g. privileged users may have access permission to some inventory data while access may be restricted to other users e.g. non privileged users. For example a Mysql database may have a privileged user account mysql through which detailed inventory information about the database may be obtained. Non privileged users of the operating system on the other hand may not have access to the detailed inventory information of the database. Thus in some configurations scan program may necessitate execution of inventory information collection through use of one or more privileged user accounts. Moreover in some embodiments the controller server may execute some inventory collection as a particular user using tools for executing commands as particular users such as for example the sudo utility in a Unix based operating system. This example embodiment may require a tool installation and or configuration change.

Similarly controller server also executes scan program on the second host device for generating a second set of inventory data . Each set of inventory data such as first set of inventory data and second set of inventory data is stored locally on the execution host such as first host device and second host device respectively. After a set of inventory data such as the first set of inventory data is created by the scan program controller server collects the inventory files and stores the inventory data in the database . The format of these sets of inventory data as well as the parsing and storing of the data in database is discussed in greater detail below.

During operation controller server orchestrates deployment of scan programs . In some embodiments subsequent versions of scan programs may be deployed to replace previous versions. Controller server may delete overwrite or otherwise replace a prior version of the scan program with a new scan program. Subsequent executions of the later version scan programs may gather information different from the earlier version scan programs. Each execution of the scan programs may be alterable by parameters of the execution or through a configuration file. In some embodiments controller server deploys and manages configuration files associated with the scan program . In some embodiments controller server deploys an agent to the execution host such as first host device and second host device respectively. The agent represents a program which is installed on the execution host which executes the scan when contacted by controller server . Controller server may contact the agent on a scheduled basis. In other embodiments controller server does not use an agent on the execution host. Instead controller server will have the ability to log into the execution host remotely e.g. by using login credentials such as an SSH keypair . Controller server logs into the execution host to execute the scan.

Further controller server orchestrates scheduling and execution of each scan program ran on each computing device such as first host device and second host device . Controller server may use several methods for scheduling the execution of each scan program on each computing device such as OS supplied scheduling tools enterprise scheduling software and custom written scheduling software. In one example controller server may use scheduling software included in an operating system distribution. Operating systems often include such scheduling software e.g. UNIX cron which allows for commands to be executed at specific times. In another example controller server may use enterprise scheduling software. Enterprise scheduling software includes software designed to schedule command execution and track command execution success in a robust fashion. For example enterprise scheduling software may include reporting views or alerts to allow for scalable scheduling of command execution. In an additional example controller server may use custom scheduling methods. For instance most programming languages include libraries and application programming interfaces APIs which may be used to schedule tasks. In this example such libraries and APIs are used to create an application which is used to manage and schedule tasks.

In addition controller server in the example embodiment monitors the execution of each scan program ran on each system. Controller server may alter an aspect of operation of the scan program such as terminating and or re executing the scan programs. In some embodiments controller server maintains a timeout period for each running scan program. If a scan program runs longer than the timeout period the controller server terminates the scan program. Such a timeout period may be configured by individual scan by a group of scans or as a single default for all scans. The controller server may then collect the partial output from the failed scan and may analyze the output for error. Execution output of the scan program may be directed to log files and controller server may collect and analyze those log files for success and or failure indications. Timestamps may be implemented to facilitate troubleshooting. In some embodiments controller server may use an agent program to facilitate tasks including without limitation monitoring scan programs terminating scan programs executing scan programs changing users detecting timeouts and re executing scan programs. The agent program is deployed by controller server and resident on each system. The agent program can be called by controller server to facilitate the tasks described above.

In the example embodiment controller server maintains the output files associated with the scan programs. Controller server may change file permissions of the output files such as ownership and may delete and or archive old files. An example output file is illustrated in this example 

In the example embodiment host devices and represent two heterogeneous host devices and . The heterogeneity of host devices and may be reflected in different operating systems resident applications computer hardware or any other distinction. In the example embodiment host device runs a Linux based operating system and host device runs a Solaris based operating system. Further host device is used primarily to serve applications by using an application server e.g. Apache TomEE while host device is used primarily to serve web content by using a web server e.g. Apache HTTP . Apache Apache HTTP and Apache TomEE are trademarks of Apache Software Foundation Los Angeles Calif. Additionally host devices and run using different physical hardware including distinct manufacturers and architectures.

Inventory files and represent an inventory files created by controller server as inventory sets or shown in . In the example embodiment receiving inventory files and includes collecting shown in inventory sets. In the example embodiment inventory files and use a standardized file format that may be interpreted and written on a plurality of operating systems. However the data and layout of inventory files and may vary significantly depending upon differences between host devices and and scans running on host devices and . In other words while inventory files and may be written and read on a plurality of operating systems the data and layout may not be consistent. Such data may be generated using PHP objects persisted to file XML data Perl data persisted to file or any other file format. Therefore inventory files and may be heterogeneous in accordance with the heterogeneity of host devices and .

In the example embodiment inventory files and include data generated from a scan of host device including the scan date and the database table associated with the scan. The scan date represents the date that the scan was executed. In at least some embodiments scan date includes a time along with the date. The database table associated with the scan represents the database table that inventory files and should be associated with and written to.

In at least some embodiments inventory files and are reviewed to determine the scan date. In such embodiments controller server will determine whether inventory files and or are outside of a required date range. The required date range may be set by user shown in of controller server or by system defaults. In these embodiments inventory files and or will be purged if it is determined that either or both are outside of the required date range. Further controller server will request new inventory files and or .

In alternative embodiments inventory files and include a scan version. The scan version represents the version of the scanning algorithm used to create inventory files and . Scan versions may include identifiers written into the scan program shown in including alphanumeric identifiers or any other identifier which may uniquely represent a scan version. Scan versions may indicate changes in the scope or features of the scanning algorithm.

In at least some embodiments inventory files and are reviewed to determine scan versions. In such embodiments controller server will determine whether inventory files and or match acceptable scan versions. The acceptable scan versions may be set by user of controller server or by system defaults. In these embodiments inventory files and or will be purged if it is determined that either or both do not match acceptable scan versions. Further controller server will request new inventory files and or . In some examples controller server will redeploy scan program to hosts and or to ensure that a newly executed scan will match the acceptable scan versions.

In the example embodiment controller server receives inventory files and from a predetermined location on host device and host device . The predetermined location is a constant persistent location for inventory files and to be located on a plurality of hosts and . The predetermined location represents a persistent relative or absolute path with respect to the host. For example the predetermined location may be in a fixed location such as C scans or a persistent relative path such as localhost localdata scans. A predetermined location may be of use in storing inventory data because it may avoid any difficulties in locating inventory files and . In alternative embodiments a location other than a predetermined location may be used in receiving inventory files and . In such embodiments the location is a fordable location within host device and or .

In the example embodiment receiving inventory files and includes using an automated process. The automated process may be any process using programs or methods for scheduling e.g. a cron job scheduling software scripts batch processes or any other method for automating the transmission and receipt of inventory files and . Automated processes may be useful to ensure that all inventory files and are received consistently.

In the example embodiment receiving inventory files and includes using a secure file transfer method. Using a secure file transfer method may include using SFTP SSH Secure Copy FASP or any other method capable of transmitting data in a secure manner.

In the example embodiment receiving inventory files and includes using a method to ensure file consistency during transfer. Ensuring file consistency during transfer may be of importance due to data corruption manipulation interrupted communication or any other issue that may result in inconsistency in files between transmission and receipt. The method of ensuring file consistency includes receiving host file characteristics of inventory files and on host devices and . The method also includes determining local file characteristics of inventory files and on controller server . The method further includes comparing file characteristics of host devices and to local file characteristics. The method additionally includes requesting a retransmission of inventory file if host file characteristics do not match local file characteristics.

Controller server next receives mapping schema and from host devices and . Mapping schema and are associated with inventory files and respectively. Mapping schema and represents data explaining the layout of inventory files and . Mapping schema and may include without limitation an XML file an HTML file a text file or any other file format capable of describing inventory files and . Mapping schema and allows controller server to interpret the significance of data in inventory files and with respect to the scanning of host devices and . In other words mapping schema and is a description of a structured relationship between inventory files and and inventory records and respectively described further below .

In some embodiments controller server receives mapping schema and by extracting data from inventory files and respectively. In these embodiments inventory files and are self describing. In other words inventory files and contain data explaining their layouts. In these embodiments data is extracted from inventory files and and used to interpret the significance of data in inventory files and with respect to the scanning of host devices and .

Because the layout and data of inventory files and may vary mapping schema and may similarly vary. For instance mapping schema may indicate the presence of scan data relevant to an application server e.g. listener ports applications or data sources which are present in inventory file but not inventory file . Conversely mapping schema may indicate the presence of scan data relevant to a web server e.g. virtual hosts which are present in inventory file but not inventory file . Further the layout of inventory files and may vary because inventory file is written with persistent PHP objects while inventory file is written using XML. Accordingly mapping schema will indicate a layout associated with persistent PHP objects while mapping schema will indicate a layout associated with XML.

Controller server further translates inventory files and to inventory records and using mapping schema and respectively. In the example embodiment controller server translates using a program capable of receiving inventory files and processing inventory file and using mapping schema and and outputting an inventory records and . The program may include without limitation Java Perl JDBC ODBC scripting languages C or any other methods capable of being used to receive and interpret a structured file and outputting inventory records and .

Translating inventory files and to inventory records and also represents converting data that may be heterogeneous to homogeneous inventory records and . As described above host devices and may vary in many respects including without limitation operating systems physical hardware applications function and data. Also as described above inventory files and may vary due to these reasons and or divergent scanning methods. However inventory records and while having potentially heterogeneous data can be entered into a shared database system inventory database system . Therefore translating represents allowing for heterogeneous data represented in heterogeneous data layouts and scanned from heterogeneous host devices to be represented in a homogeneous database inventory database system .

In the example embodiment the program used to translate inventory files and writes a record in inventory records and for the date and time of discovery of host devices and if a record for the date and time of discovery of host devices and did not previously exist. As used herein discovery refers to the first time that host devices and were detected using the scanning methods described herein.

In the example embodiment the program used to translate inventory files and writes a record in inventory records and for the date and time of the update of inventory records and . The date and time of the update represent the date and time of the scan of host devices and .

Controller server next updates inventory database system with inventory records and . Updating represents inserting inventory records and into inventory database system . Updating may use any relevant method including SQL ODBC JDBC or any other method capable of inserting a database record into a database.

In the example embodiment controller server determines if update was successful. Determining if update was successful may be accomplished by trapping for received messages from inventory database system querying inventory database system after update or any other method for verifying inventory database system was successfully updated . In such embodiments controller server purges inventory files and from memory shown in upon determining update was successful.

In the example embodiment controller server also includes error handling methods. Error handling methods represent modules or programs that can determine if an error has occurred in process including without limitation data corruption of inventory files and or mapping schema and security issues in transferring inventory files and or mapping schema and unacceptable scan versions or scan dates for inventory files and failure to translate inventory files and to inventory records and or failure to update inventory database system with inventory records and . Error handling methods also may be capable of responding by reinitiating a scan a request for inventory files and a request for mapping schema and translating inventory files and updating inventory database system or alerting user of the existence of an error.

Incoming requests from a web user enter computer infrastructure at a first load balancer . First load balancer sends request information to one of two web systems first web system and second web system . First web system and second web system are physical or virtual systems which contain software capable of serving web content to the web user. In this example a relationship exists between first load balancer and each of first web system and second web system . Any of these inventory components when scanned may contain information indicating that they are associated with the others. For example an inventory file shown in created after a scan of first load balancer may contain information related to the hosts to which it can route traffic. Therefore inventory file generated by a scan of first load balancer may contain data indicating that it load balances i.e. it directs traffic efficiently to first web system and second web system . Such data may include a reference to the hostname associated with first web system and second web system an IP address associated with first web system and second web system or any other identifying information which can uniquely identify first web system and second web system . Similarly an inventory file created after a scan of first web system may indicate that it receives traffic from load balancer .

An inventory file created after a scan of first web system may also indicate that it serves web content with other servers. Inventory file associated with first web system may contain specific references to all of the web systems which can serve content similar to first web system . As these web systems share a similar function knowledge of such relationships may be valuable. Accordingly an inventory file created after a scan of first web system may contain data indicating that it serves web content in a group including second web system .

Web systems include software which are able to serve web content and call upon web applications which may be required to properly serve content. Such software is known as a web server. First web system and second web system include first web server and second web server respectively. As discussed above applications may produce their own scan data. Accordingly a relationship between web systems and web applications may be written on their respective inventory files . For example an inventory file created after a scan of first web system may include data indicating that it is hosting first web server . Alternately an inventory file created after a scan of first web server may indicate that it is hosted on first web system . In either case first web system or first web server are identified as described above e.g. using a unique identifier .

Web servers include virtual hosts which receive traffic directed by a load balancer. Virtual hosts allow web servers to serve distinct web sites from the same physical machine in a manner that is transparent to the user. In this example incoming requests are routed through first load balancer to one of first virtual hosts associated with first web server or second virtual hosts associated with second web server . A relationship between virtual hosts and web servers may be written on their respective inventory files. For example an inventory file created after a scan of first web server may indicate that it is hosting first virtual hosts while an inventory file created after a scan of second web server may indicate that it is hosting second virtual hosts .

In typical web serving architecture such as computer architecture application content may be served in conjunction with web content. In such architectures a particular virtual host may send a request for an application to be run and served to provide such application content. In computer architecture first virtual hosts and second virtual hosts can route requests for application content to second load balancer . Second load balancer will route traffic to one of first application system and second application system . Relationships between virtual hosts and second load balancer and application systems and may be written to their respective inventory files consistent with the manner described above.

Application systems represent physical or virtual systems which can host application servers which may receive application requests and execute such requests. For example first application system hosts and runs first application server . Accordingly a relationship exists between first application system and first application server . An analogous relationship exists between second application system and second application server . Such relationships may be written to their respective inventory files consistent with the manner described above.

Application servers include listeners which can receive application requests applications which execute such application requests and datasources which may call external data. Datasources allow applications to refer to data for a variety of purposes including personalization specific to the user incorporating external data into applications and facilitating transactions in an application. For example first application server includes first listener first application and first datasource . Accordingly relationships exist between first application server and first listener first application and first datasource . An inventory file created after a scan of first application server may include data indicating first listener first application and first datasource . Conversely scans of each of first listener first application and first datasource may create inventory files which indicate that they are hosted on first application server .

Application servers connect to database systems by using datasource references. For instance first application server may make a call to database system and specifically to first database based upon first datasource . Accordingly relationships exist between at least datasources and and database system . An inventory file created after a scan of first datasource may include data indicating database system .

Database systems may host multiple databases. For example database system hosts first database and second database . Accordingly relationships exist between database system and databases and . An inventory file created after a scan of database system may include data indicating first database and second database .

In the example embodiment controller server retrieves an inventory record from an inventory database system . Inventory record represents a data record such as inventory record or shown in generated by translating an inventory file shown in based upon a scan of a host such as host device or shown in . Inventory database system represents a database for storing inventory records such as inventory database system shown in . As described above inventory record may contain any information which is generated based upon a scan of a host such as host device or . Inventory record contains inventory data representative of information which may be parsed from inventory record to determine information regarding the host such as scanned host device or . Such inventory data may include relational metadata .

In the example embodiment inventory record is stored as a unique table in inventory database system . In other embodiments inventory record may be a non unique table a row within a table or any other data structure capable of being stored in inventory database system and used as described herein.

Relational metadata represents information which indicates that inventory record is related to other inventory records. A relationship between inventory record and other inventory records further indicates that the inventory associated with inventory record is associated with inventory associated with the other inventory records. For example in computer architecture first web server may be scanned to produce inventory file . As described above first web server is related to first web system as first web server is installed upon and running on first web system . The inventory file generated by scanning first web server may accordingly include data such as 

As described above after scanning the inventory file of the above example is translated to inventory record using mapping schema both shown in . When controller server retrieves inventory record corresponding to inventory record from inventory database system inventory record will contain relational metadata . Specifically relational metadata is represented by Host First Web System . This relational metadata indicates that first web system and its associated inventory file and inventory record are related to first web server .

Controller server determines that inventory data contains relational metadata . In the example embodiment determining that inventory data contains relational metadata includes identifying primary relational columns known to contain values corresponding to relational inventory metadata and determining if primary relational columns have non null values. In the above example data represented in inventory file as Host First Web System will always associate if non null to a host. In the example embodiment all hosts are scanned. Further when inventory file is translated to inventory record Host First Web System may translate to an inventory record with a column header of Host and a value of First Web System which is stored in a row specific to first web server . Therefore the presence of a column Host is a primary relational column known to contain values corresponding to relational inventory metadata . In other words if a record has a non null value for the column corresponding to Host the record is known to contain relational inventory metadata and therefore relate to another inventory record .

In the example embodiment identifying primary relational columns known to contain values corresponding relational inventory metadata includes retrieving a relational schematic of inventory database system . The relational schematic includes data associating inventory records within inventory database system based upon unique metadata. In other words in the example embodiment potential relationships between inventory records are identified in a relational schematic which shows all possible links between inventory records . For example in computer architecture the relational schematic would indicate that inventory records for application servers shown in may include columns referring to first listener first application and first datasource . The relational schematic may be generated manually using an automated program or a combination thereof. In the example embodiment an automated program may be used to scan all inventory records from inventory database system to determine the presence of relational inventory metadata .

Controller server next determines that relational inventory metadata indicates at least one related inventory record . At least one related inventory record refers to all inventory records referenced by relational metadata . In the above example inventory record for first web server will contain relational metadata indicating that there is a related inventory record associated with first web system . As indicated more than one related inventory record may be determined.

In the example embodiment controller server determines that relational inventory metadata indicates at least one related inventory record by retrieving primary values from primary relational columns identifying potentially related inventory records stored as potentially related tables from inventory database system identifying secondary relational columns known to contain values corresponding to primary relational columns and comparing values of secondary relational columns to primary values. In the above example retrieving first primary values from primary relational columns represents retrieving values for Host from inventory record associated with a scan of first web server . Retrieving these values results in retrieving First Web System . Identifying potentially related inventory records represents identifying all web systems which may have a value corresponding to First Web System . In computer architecture this represents identifying first web system and second web system . Identifying secondary relational columns known to contain values corresponding to primary relational columns represents finding host data in columns in inventory records corresponding to first web system and second web system . For example inventory record for first web system may include 

Therefore the secondary relational column the value for Host from inventory records associated with first web system and second web system may correspond to primary relational columns present in inventory records associated with first web server the value for Host . Comparing the values of Host from first web system and second web system to the value of Host for first web server will indicate that first web server is related to first web system but not to second web system .

When at least one related inventory record is determined to be indicated controller server performs first step retrieving an inventory record from an inventory database system using at least one related inventory record . In other words controller server crawls from inventory record to at least one related inventory record . When more than one related inventory record is determined controller server will perform first step using each related inventory record . As a result controller server will continue to crawl until no connections can be determined from an initial inventory record .

In the example embodiment controller server will identify relationships between inventory record and at least one related inventory record and write identified relationships to a relational output record. The relational output record is representative of data explaining the relationship between inventory record and all related inventory records . The relational output record may take any form suitable for describing such relationships including without limitation a hierarchical database representing the identified relationships a flat file representing the identified relationships and a chart representing the identified relationships.

This written description uses examples to disclose the invention including the best mode and also to enable any person skilled in the art to practice the invention including making and using any devices or systems and performing any incorporated methods. The patentable scope of the invention is defined by the claims and may include other examples that occur to those skilled in the art. Such other examples are intended to be within the scope of the claims if they have structural elements that do not differ from the literal language of the claims or if they include equivalent structural elements with insubstantial differences from the literal languages of the claims.

