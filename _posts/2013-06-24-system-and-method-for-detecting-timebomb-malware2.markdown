---

title: System and method for detecting time-bomb malware
abstract: According to one embodiment, a system comprises one or more counters; comparison logic; and one or more hardware processors communicatively coupled to the one or more counters and the comparison logic. The one or more hardware processors are configured to instantiate one or more virtual machines that are adapted to analyze received content, where the one or more virtual machines are configured to monitor a delay caused by one or more events conducted during processing of the content and identify the content as including malware if the delay exceed a first time period.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09536091&OS=09536091&RS=09536091
owner: FireEye, Inc.
number: 09536091
owner_city: Milpitas
owner_country: US
publication_date: 20130624
---
Embodiments of the disclosure relate to the field of data security. More specifically one embodiment of the disclosure relates to a system apparatus and method that enhances detection of time bomb malware namely malware with delayed activation.

Over the last decade malicious software malware attacks have become a pervasive problem for Internet users and enterprise network administrators. In most situations malware is a program or file that is embedded within downloadable content and designed to adversely influence or attack normal operations of an electronic device e.g. computer tablet smartphone server router wearable technology or other types of products with data processing capability . Examples of different types of malware may include bots computer viruses worms Trojan horses spyware adware or any other programming that operates within an electronic device without permission by the user or a system administrator.

Over the past few years various types of security appliances have been deployed within an enterprise network in order to detect behaviors that signal the presence of malware. Some of these security appliances conduct dynamic analysis on suspicious content within a sandbox environment in order to determine if malware is present. As a result some malware is now being coded to evade analysis within a sandbox environment.

Currently there are various techniques that malware is using to evade sandboxed malware analysis. They can be broadly categorized as 

As a result mechanisms are necessary to detect all types of malware even malware that is specifically configured to evade detection within a sandbox environment such as a virtual machine VM based environment.

Various embodiments of the disclosure relate to a system apparatus and method for enhancing detection of malware that is configured to avoid detection within a sandbox environment such as a virtual machine based VM based analysis environment for example through delayed activation. Such malware is commonly referred to as a time bomb malware . This enhanced detection may be conducted by tracking call site time delays and access frequency which may be captured inside a VM in user mode or kernel mode inside of the virtual execution environment or even external to the VM environment e.g. frequency based threshold detection logic and utilized to evade automated analysis environments.

One embodiment of the disclosure is directed to logic that is configured to monitor one or more operations within a VM based analysis environment and where applicable adjusts one or more parameters associated with such operations. These operating parameters may involve requests and or calls that delay further processing of content loaded into the VM based analysis environment. For example the operating parameter may include but are not limited or restricted to i the number of Sleep request messages ii an amount of time requested for a particular Sleep request message iii the cumulative amount of Sleep time requested over a predetermined run time iv the number of function calls from a particular call site to an API e.g. addressed function such as a specific Application Programming Interface API v the total frequency of the instruction pointer remaining within a particular address range vi processor utilization level or the like.

Hence according to one embodiment of the disclosure one or more counters may be deployed for monitoring the number of Sleep request messages initiated by the content under analysis. The content is determined to be associated with time bomb malware if the number of Sleep request messages initiated by content under analysis exceeds a first threshold value e.g. predetermined time value . Similarly one or more counters may be deployed for monitoring whether the cumulative Sleep time for multiple Sleep request messages initiated by the content under analysis exceeds a second threshold value. If so the content is determined to be associated with time bomb malware.

Also in the alternative or in combination with the sleep counter s one or more counters may be deployed for monitoring the total number of function calls initiated by the content under analysis. The content is determined to be associated with time bomb malware if the total number of function calls exceeds a third threshold value. Similarly one or more counters may be deployed for monitoring the number of function calls directed from a particular call site to an API by the content under analysis where the content is determined to be associated with time bomb malware if the number of function calls to the particular API exceed a fourth threshold.

According to a further embodiment of the disclosure logic may be deployed to work in concert with each VM to monitor whether the content under analysis is repeatedly executing instructions located at a specific address or address range which denotes a programming loop operation. If so the content is determined to be associated with time bomb malware.

In summary multiple APIs and certain assembly instructions may be utilized by time bomb malware to get OS time information. Also the API access patterns for time delay purposes may vary from one malicious sample to another. For instance the time bomb malware may be a tightly loop execution repeatedly performing GetLocalTime Compare and or Sleep calls where detonation of the time bomb malware occurs upon reaching a desired date. Other time bomb malware may be a mixture of Sleep calls Floating Point Math calls and or subroutines that also stall and sleep. Yet another time bomb malware may involve a tight execution loop of GetLocalTime Compare Sleep and or Cut and Paste operations which identifies the importance of identifying the accessed call site of the delay execution code so that proper threshold based statistics logic may be applied to multiple variants.

Herein the disclosure describes different embodiments for addressing certain types of stall technique such as Sleep calls or the like. It is contemplated that the scope of the invention is directed to a mechanism that detects time bomb malware associated with not only repeated Sleep calls but with any event or call variant adapted to stall malware execution to evade a sandbox environment.

In the following description certain terminology is used to describe features of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include circuitry having data processing or storage functionality. Examples of such circuitry may include but are not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit receiver transmitter and or transceiver circuitry semiconductor memory combinatorial circuitry or the like.

Logic or engine also may be in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

The term content generally refers to information such as text software images audio metadata and or other digital data for example that is transmitted as one or more messages. Each message s may be in the form of a packet a frame an Asynchronous Transfer Mode ATM cell or any other series of bits having a prescribed format. The content may be received as a data flow namely a group of related messages being part of ingress data traffic.

One illustrative example of content includes web content namely data traffic that may be transmitted using a Hypertext Transfer Protocol HTTP Hypertext Markup Language HTML protocol or any other manner suitable for display on a Web browser software application. Another example of content includes one or more electronic mail email messages which may be transmitted using an email protocol such as Simple Mail Transfer Protocol SMTP Post Office Protocol version 3 POP3 or Internet Message Access Protocol IMAP4 . Yet another example of content includes an Instant Message which may be transmitted using Session Initiation Protocol SIP or Extensible Messaging and Presence Protocol XMPP for example. A final example of content includes one or more files that are transferred using a data transfer protocol such as File Transfer Protocol FTP for subsequent storage on a file share.

The term time bomb malware is software that includes at least one exploit namely a particular portion of software that after intentional delayed execution takes advantage of one or more vulnerabilities within system software and produces an undesired behavior. The behavior is deemed to be undesired based on customer specific rules manufacturer based rules or any other type of rules formulated by public opinion or a particular governmental or commercial entity. Examples of an undesired behavior may include a communication based anomaly or an execution based anomaly that i alters the functionality of an electronic device and or ii provides an unwanted functionality which may be generally acceptable in other context.

The term transmission medium is a communication path between two or more systems e.g. any electronic devices with data processing functionality such as for example a security appliance server mainframe computer netbook tablet smart phone router switch bridge or brouter . The communication path may include wired and or wireless segments. Examples of wired and or wireless segments include electrical wiring optical fiber cable bus trace or a wireless channel using infrared radio frequency RF or any other wired wireless signaling mechanism.

In general a virtual machine VM is a simulation of an electronic device abstract or real that is usually different from the electronic device conducting the simulation. VMs may be based on specifications of a hypothetical electronic device or emulate the architecture and functions of a real world computer. A VM can be one of many different types such as for example hardware emulation full virtualization para virtualization and or operating system level virtualization virtual machines.

A software profile is information that is used for virtualization of an operating environment e.g. instantiation of a VM that is adapted to receive content for malware analysis. The software profile may identify a guest operating system OS type a particular version of the guest OS one or more different application types particular version s of the application type s virtual device s or the like.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Referring to an exemplary block diagram of a communication system deploying a plurality of malware content detection MCD systems N 1 e.g. N 3 communicatively coupled to a management system via a network is shown. In general management system is adapted to manage MCD systems . For instance management system may be adapted to cause malware signatures generated as a result of time bomb malware detection by any of MCD systems e.g. MCD system to be shared with one or more of the other MCD systems e.g. MCD system including where such sharing is conducted on a subscription basis.

Herein according to this embodiment of the disclosure first MCD system is an electronic device that is adapted to i intercept data traffic routed over a communication network between at least one server device and at least one client device and ii monitor in real time content within the data traffic. More specifically first MCD system may be configured to inspect content received via communication network and identify suspicious content. The incoming content is identified as suspicious when it is assessed with a certain level of likelihood that at least one characteristic identified during inspection of the content indicates the presence of an exploit.

Herein according to one embodiment of the disclosure the first MCD system is a web based security appliance configured to inspect ingress data traffic and identify whether content associated with the data traffic includes time bomb malware. The communication network may include a public computer network such as the Internet in which case an optional firewall represented by dashed lines may be interposed between communication network and client device s . Alternatively the communication network may be a private computer network such as a wireless telecommunication network wide area network or local area network or a combination of networks.

The first MCD system is shown as being coupled with the communication network behind the firewall via a network interface . The network interface operates as a data capturing device referred to as a network tap that is configured to receive data traffic propagating to from the client device s and provide some or all of the content associated with the data traffic e.g. objects to the first MCD system .

In general the network interface receives and copies the content that is received from and provided to client device . Alternatively the network interface may copy only a portion of the content for example a particular number of objects associated with the content. For instance in some embodiments the network interface may capture metadata from data traffic intended for client device where the metadata is used to determine i whether content within the data traffic includes any exploits and or ii the software profile used instantiating the VM s for exploit detection on the content.

It is contemplated that for any embodiments where the first MCD system is implemented as an dedicated appliance or a dedicated computer system the network interface may include an assembly integrated into the appliance or computer system that includes network ports network interface card and related logic not shown for connecting to the communication network to non disruptively tap data traffic propagating therethrough and provide a copy of the data traffic to the heuristic engine of MCD system . In other embodiments the network interface can be integrated into an intermediary device in the communication path e.g. firewall router switch or other network device or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to copy traffic from virtual networks.

Referring to both first MCD system comprises a heuristic engine a heuristics database an analysis engine a scheduler a storage device and a reporting module . In some embodiments the network interface may be contained within the first MCD system . Also heuristic engine analysis engine and or scheduler may be hardware logic implemented with a processor or other types of circuitry. Alternatively this logic may be configured as software modules executed by the same or different processors. As an example the heuristic engine may be one or more software modules executed by a first hardware processor implemented within the first MCD system while the analysis engine and or scheduler may be executed by a second hardware processor. These processors may be located at geographically remote locations and communicatively coupled via a network.

In general the heuristic engine serves as a filter to permit subsequent malware analysis on portion s of incoming content that may have time bomb malware. As an ancillary benefit by analyzing only the portion of the incoming content that may have such malware various system resources may be conserved and a faster response time may be provided in determining the presence of malware within analyzed content.

As still shown in the heuristic engine receives the incoming content from the network interface and applies heuristics to determine if any of the content is suspicious . The heuristics applied by the heuristic engine may be based on data and or rules stored in the heuristics database . Also the heuristic engine may examine the image of the captured content without executing or opening the captured content.

For example the heuristic engine may examine the metadata or attributes of the captured content and or the code image e.g. a binary image of an executable to determine whether the captured content matches or has a high correlation with a predetermined pattern of attributes that is associated with a malicious attack especially time bomb malware attacks. According to one embodiment of the disclosure the heuristic engine flags content from one or more data flows as suspicious after applying this heuristic analysis.

It is contemplated that the heuristic engine may comprise a static analysis tool that is configured to parse malware binaries and specifically identify delay hotspots. A delay hotspot could be an API call or Sleep request with large timeout values or it could be a loop with high repeat counter. Such analysis can complement dynamic analysis technique and lead to more definitive detection of time bomb malwares.

Thereafter according to one embodiment of the disclosure the heuristic engine may be adapted to transmit at least a portion of the metadata or attributes of the suspicious content which may identify attributes of the client device to a control logic implemented within analysis engine . Such metadata or attributes are used to identify software profile information used to instantiate at least one VM for subsequent malware analysis. In another embodiment of the disclosure the control logic may be adapted to receive one or more messages e.g. data packets from the heuristic engine and analyze the message s to identify the software profile information for instantiating the VM s subsequently used for malware analysis.

Control logic is adapted to control formation of one or more VM based analysis environments as shown in . As shown herein at least one analysis environment comprises a VM with corresponding sleep analysis logic e.g. one or more sleep counters etc. and call analysis logic e.g. one or more call counters etc. comparison logic e.g. one or more comparators etc. along with instruction pointer analysis logic profiler and processor CPU statistic monitoring logic .

For instance as an illustrative example the suspicious content under analysis may include an email message that was generated under control of Windows 7 Operating System using a Windows Outlook 2007 version 12. The email message further includes a Portable Document Format PDF attachment in accordance with Adobe Acrobat version 9.0. Upon determining that the email message includes suspicious content heuristic engine and or control logic may be adapted to provide software profile information to scheduler in order to identify a particular type of VM needed to conduct dynamic analysis of the suspicious content. According to this illustrative example the software profile information would identify the VM software as 1 Windows 7 Operating System OS 2 Windows Outlook 2007 version 12 and 3 Adobe Acrobat PDF reader that allows viewing of the above identified PDF document.

The control logic supplies the software profile information to the scheduler which conducts a search of information within storage device to determine if a VM image identified by the software profile information resides within storage device . The VM image supports the appropriate OS e.g. Windows 7 OS and one or more applications e.g. Windows Outlook 2007 version 12 and Adobe Acrobat PDF reader . If so the scheduler uses that the VM image to instantiate a VM within analysis environment in order to analyze the suspicious content and determine if such content is associated with time bomb malware.

Of course it is contemplated that if the storage device does not feature a software profile supporting the above identified OS application s the scheduler may simply ignore the VM request from control logic or may obtain an VM image directed to similar software. For example the scheduler may be adapted to obtain a VM image based on the same OS but a different version s of the targeted application s . Alternatively the scheduler may be adapted to obtain the same OS e.g. Windows OS 7 along with an application different from the targeted application but having similar functionality. As another alternative the scheduler may receive a different OS image that supports similar functionality.

In another embodiment of the disclosure the heuristic engine may determine the software profile information from the data traffic by receiving and analyzing the content from the network interface . For instance according to one embodiment of the disclosure it is contemplated that the heuristic engine may be adapted to transmit the metadata identifying the client device to the analysis engine where such metadata is used to identify a desired software profile. The heuristic engine may then transmit the software profile information to a scheduler in lieu of such information being provided from control logic within the analysis engine .

Alternatively the control logic may be adapted to receive one or more data packets of a data flow from the heuristic engine and analyze the one or more data packets to identify the software profile without pre processing by heuristic engine . In yet other embodiment of the disclosure the scheduler may be adapted to receive software profile information in the form of metadata or data packets from the network interface or from the heuristic engine directly.

The storage device may be configured to store one or more VM disk files forming a VM profile database where each VM disk file is directed to a different software profile for a VM. In one example the VM profile database may store a plurality of VM disk files having VM images for multiple software profiles in order to provide the collective capability for simulating the performance of a wide variety of client device s .

The analysis engine is adapted to execute multiple VMs concurrently to support different VM operating environments that simulate the receipt and or processing of different data flows of suspicious content by different network devices. Furthermore the analysis engine analyzes the effects of such content during processing. The analysis engine may identify exploits by detecting undesired behavior caused by simulated processing of the suspicious content as carried out by the VM. This undesired behavior may include numerous repeated functions calls repeated Sleep calls and other behavior to stall or delay execution of code associated with the incoming content.

The analysis engine may flag the suspicious content as malware according to observed undesired behavior of the VM. Different types of behaviors may be weighted based on the likelihood of system compromise where suspicious content is determined when the weighted value exceeds a certain threshold.

Of course it is contemplated that for deeper analysis to detect exploits such operations may be conducted within the cloud in lieu of or in addition to operations performed within analysis engine .

The reporting module may issue alert messages indicating the presence of one or more exploits to one or more hardware processors executing outside the VM environments and may use pointers and other reference information to identify what message s e.g. packet s of the suspicious content may contain the exploit s . Additionally the server device s may be added to a list of malicious network content providers and future network transmissions originating from the server device s may be blocked from reaching their intended destinations e.g. by firewall .

Referring now to a second exemplary embodiment of MCD system set forth in is shown where the software profile for VM instantiation is not determined through analysis of suspicious content e.g. metadata data packets binary etc. by the network interface heuristic engine or analysis engine . Rather this software profile directed to software under test is uploaded by the user and or network administrator.

More specifically a user interface allows the user or network administrator hereinafter referred to as user administrator to introduce objects of the suspicious content in accordance with one or more prescribed software profiles . The prescribed software profile s may be preloaded or selected by the user administrator in order to instantiate one or more VMs based on operations of the scheduler and storage device as described above. The VMs perform dynamic analysis of the objects to monitor for undesired behavior during virtual processing of these objects within the VMs.

Referring now to an exemplary block diagram of logic that is implemented within MCD system is shown. MCD system comprises one or more processors that are coupled to communication interface logic via a first transmission medium . Communication interface logic enables communications with MCD systems of as well as other electronic devices over private and or public networks. According to one embodiment of the disclosure communication interface logic may be implemented as a physical interface including one or more ports for wired connectors. Additionally or in the alternative communication interface logic may be implemented with one or more radio units for supporting wireless communications with other electronic devices.

Processor is further coupled to persistent storage via transmission medium . According to one embodiment of the disclosure persistent storage may include stalled processing analysis logic and a data store . In general stalled processing analysis logic is configured to monitor and alter operating parameters for one or more VM based analysis environments in order to improve reliability in detecting time bomb malware. The results of the analysis are stored within data store .

More specifically stalled processing analysis logic comprises sleep analysis logic call analysis logic comparison logic time adjustment logic instruction pointer analysis logic and processor statistic monitoring logic . Herein both sleep analysis logic and call analysis logic are configured to address an event where a series of successive Sleep function calls are used to stall processing of the incoming content. As an example sleep analysis logic may be configured to monitor the number of Sleep calls the Sleep intervals and the cumulative Sleep time. The call analysis logic may be configured to perform the same general functionality in monitoring the number of function calls made globally or to a particular call site as well as the cumulative delay incurred by initiation of function calls.

Optionally working in concert with sleep analysis logic and call analysis logic the time adjustment logic is configured to alter the time interval returned back to the content running in the VM based analysis environment e.g. environment . This alteration is performed in order to accelerate the time bomb malware activity such that suspicious behavior can be detected. This is achieved through a shortened time interval while executing successive Sleep calls and or other types of calls used when processing the content.

More specifically sleep analysis logic is configured with one or more counters that are used to count the number of Sleep request messages initiated by the content under analysis for subsequent comparison using comparison logic e.g. one or more comparators of the count value with a first threshold value stored in data store .

Additionally the sleep analysis logic may be further configured with one or more counters that are used to compute the cumulative amount of time e.g. in units of time clock cycles etc. in which the content under analysis would have placed a targeted electronic device into a Sleep state. The cumulative amount of time is subsequently compared using comparison logic to a second threshold value that is different than the first threshold value. The second threshold value may be set to a time value less than the average amount of time permitted for analysis of the content within a VM based analysis environment . The content under analysis is considered to be associated with time bomb malware if the first and or second thresholds are exceeded.

Call analysis logic is configured with one or more counters that are used to count the number of function calls initiated by the content under analysis which is subsequently compared with a third threshold value stored in data store using comparison logic . The number of function calls may be based on either i a global basis e.g. total number of function calls or ii a per call site basis e.g. per each caller address . It is contemplated that the third threshold value may differ from the first and second threshold values and the value may be based at least in part on the type of function call. For instance the GetLocalTime function call may be analyzed with greater scrutiny as this API function call tends to be a common choice for repetitive call type of evasion. Other such APIs may include SystemTimeToFileTime GetSystemTime Process32First NtYieldExecution NtDelayExecution SleepEx and different Wait variants e.g. MsgWaitForMultipleObjects WaitForSingleObject etc. .

Call analysis logic may be further configured with one or more counters that are used to monitor the cumulative amount of time that the called functions would need for execution of the called function. Using comparison logic the cumulative amount of time is subsequently compared to a fourth threshold value stored in data store . The content under analysis is associated with time bomb malware if the third and or fourth thresholds are exceeded.

Call analysis logic also has the ability to report the calling module name EXE DLL based on call site addresses. This allows the reporting module to assign weights intelligently e.g. less weight when a call site is from system module and higher weight when a call site is from the content under analysis .

As further shown in time adjustment logic is configured to operate in concert with sleep analysis logic and or call analysis logic in order to compute a shortened time to be used in Sleep so that malware is forced to perform malicious activity within the VM analysis time duration.

The instruction pointer analysis logic is configured to periodically check during processing of the content under analysis whether the instruction pointer has remained within one or more prescribed address range s over a prolonged period of time. This check is conducted in order to determine if the content includes time bomb malware adapted to perform an instruction based loop to evade analysis within the VM based environment. If the instruction pointer analysis logic determines that the instruction pointer continues to remain within a particular address range the processor utilization measured by processor statistic monitoring logic is greater than a prescribed value and no other exploits have been detected the instruction pointer analysis logic determines that the content under analysis is associated with time bomb malware.

According to one embodiment of the disclosure at least the sleep analysis logic call analysis logic and time adjustment logic are implemented as part of the VM. The comparison logic instruction pointer analysis logic and processor statistic monitoring logic may be placed within the VM or outside the VM.

As additional counter measures to time bomb malware persistent storage may include dynamic threshold generation logic and or call site management logic . Dynamic threshold generation logic comprises logic that dynamically alters the threshold values utilized by the sleep analysis logic and call analysis logic . The dynamic nature of the threshold values prevents malware writers from altering malware to circumvent established thresholds if such thresholds are discovered.

Another optional logic implemented within MCD system is the call site management logic . The call site management logic is configured to maintain a finite number of call sites as part of a table. If the table is full and a request for a new call site is made the call site management logic determines if the new call site is associated with a larger processing time requirement than another call site within the table. If so the new call site is substituted for that call site. If not the new call site is not placed within the table. However cumulative threshold is updated accordingly.

Referring to a first exemplary flowchart outlining the operations for time bomb malware detection is shown. Upon receiving content a determination is made as to whether the content is suspicious namely whether analysis of the content indicates the presence of an exploit blocks and . Where the content is determined to be suspicious the attributes of the content may be used to determine one or more software profiles block . VMs within the analysis environment are based on these software profile s .

Thereafter the VM s perform operations on the suspicious content and analyzes the results of these operations to determine if any exploits are present block . These operations may include Sleep analysis Call analysis and profiling e.g. processor utilization addressing analysis etc. as described above. If no exploits are detected no further time bomb analysis is needed block .

Otherwise according to one embodiment of the disclosure one or more counters are initiated during run time of the content under analysis. The counter s may monitor i the number of Sleep request messages ii the Sleep interval requested and or iii the cumulative Sleep time herein generally referred to as Sleep activity . Where the Sleep activity exceeds a prescribe threshold a determination is made that the content under analysis includes time bomb malware blocks and . As a result the sleep analysis logic is adapted to emulate compliance with requested Sleep calls where actual duration of the request Sleep time s is shortened by the time adjustment logic in some cases significantly shortened 80 90 or more for the allocated sleep time block . Such shortening of the Sleep time which is unbeknownst to the content under analysis alters the processing time frame for the VM environment and allows the VM to monitor and report the particulars behind the time bomb malware attack. If the Sleep activity remains below the prescribed threshold the VM continues to operate as normal block .

Referring now to a second exemplary flowchart outlining the operations for time bomb malware detection is shown. Similarly upon receiving content a determination is made as to whether the content is suspicious based on a potential presence of an exploit blocks and . Where the content is determined to be suspicious the attributes of the content may be used to determine one or more software profiles where the VMs within the analysis environment are based on these software profile s block .

Thereafter the VM s perform operations on the suspicious content and analyzes the results of these operations to determine if any exploits are present block . If no exploits are detected no further time bomb analysis is needed block .

Otherwise according to one embodiment of the disclosure one or more counters are initiated during run time of the content under analysis. The counter s may monitor the number of repeated function calls to a particular API. Where the number of function calls exceeds a prescribe threshold a determination is made that the content under analysis includes time bomb malware blocks and . As a result the call analysis logic is adapted to emulate compliance with requested function calls by responding to these function calls sometimes with a shortened call response wait time block . Such shortened response time which is unbeknownst to the content under analysis alters the processing time frame for the VM environment to allow the VM to monitor and report the particulars behind the time bomb malware attack. If the number of function calls to a particular API does not exceed a prescribed threshold the VM will continue to operate as normal block .

Referring to a third exemplary flowchart outlining the operations for time bomb malware detection is shown. Upon receiving content a determination is made as to whether the content is suspicious based on a potential presence of an exploit blocks and . Where the content is determined to be suspicious the attributes of the content may be used to determine one or more software profiles where the VMs within the analysis environment are based on these software profile s block .

Thereafter the VM s perform operations on the suspicious content and analyzes the results of these operations to determine if any exploits are present block . If no exploits are detected no further time bomb analysis is needed block .

Otherwise according to one embodiment of the disclosure the instruction pointer analysis logic profiler undergoes operations to determine if the instruction pointer utilized during processing of the content under analysis is frequently located into the same memory address or a particular range of memory addresses block . If not no time bomb malware is detected by the VM operating within the analysis environment of the analysis engine.

In the event that the profiler detects continued presence of the instruction pointer as described above a determination is made by the processor statistics monitoring logic profile if processor utilization is greater than a prescribed operating threshold blocks . If so and no other malicious activity is detected a determination is made that the content under analysis includes time bomb malware block . If the processor utilization is below the prescribed threshold or other malicious activity is seen then no time bomb malware is detected. Hence the VM will continue to operate as normal block .

In the foregoing description the invention is described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims.

