---

title: Predicting resource provisioning times in a computing environment
abstract: Provided are a computer program product, system, and method for provisioning resources of a computing environment using predictive time analysis. In certain computing environments, such as a highly utilized cloud computing environment, a predictive provisioning analysis engine can determine how long a resource provisioning request can take to complete. By learning from a window of previously completed provisioning requests that is kept current, the predictive provisioning analysis engine can accurately predict when the resource provisioning request can complete.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09270539&OS=09270539&RS=09270539
owner: International Business Machines Corporation
number: 09270539
owner_city: Armonk
owner_country: US
publication_date: 20130104
---
The present invention relates to a computer program product system and method for provisioning resources of a highly utilized computing environment.

Resource provisioning in a computing environment such as a cloud computing environment includes operations to provision resources such as network devices storage devices and virtual machines. These operations can spawn tasks and numerous sub tasks to eventually provision all the resource dependencies that are a part of the original resource provisioning request. For example a network provisioning request can spawn a task to provision a Layer 3 resource e.g. Virtual Routing and Forwarding a task to provision a Layer 2 resource e.g. Virtual LAN VLANs a task to provision for IP subnets and a task to establish firewall zones and policies. In another example of a provisioning request Virtual Machine VM provisioning tasks may include determining available hostnames determining available platforms provisioning virtual machines with hypervisors assigning VMs to an appropriate network resource such a VLAN and finally notifying a user of completion of the original resource provisioning task. Moreover in a complex resource provisioning request spawned tasks can include provisioning multiple virtual machines related network resources and storage devices.

Generally it is difficult to determine a time to complete these resource provisioning requests because of a number of factors such as the virtualized and dynamic nature of computing environments availability and capacity of resources and time of day when capacity and processing power can be overtaxed with current outstanding provisioning requests. There is a need in the art for improved techniques for deterministic resource provisioning in computing environments.

Provided are a computer program product system and method for predicting resource provisioning times in a computing environment. For example with respect to a computer program product for resource provisioning in a computing environment the computer program product includes a computer readable storage medium having computer readable program code embodied therein that executes to perform operations. These operations include receiving a provisioning request for resources of the computing environment and executing the provisioning request for resources. The resources can be identified as having at least one of a firm requirement and a soft requirement. The operations also include adding a provisioning request result to a repository such that the repository includes information for predicting a provisioning time to complete a future provisioning request and determining at least one of a time to provision value and a time to failure value to complete the future provisioning request.

In an example of a system for resource provisioning in a computing environment the system includes a processor of a computing device of the computing environment. The system also includes a computer readable storage medium having computer readable program code embodied executed by the processor to perform operations. These operations further include receiving a provisioning request for resources of the computing environment and executing the provisioning request for resources. The resources can be identified as having at least one of a firm requirement and a soft requirement. The operations also include adding a provisioning request result to a repository such that the repository includes information for predicting a provisioning time to complete a future provisioning request. The system can also determine at least one of a time to provision value and a time to failure value to complete the future provisioning request.

With respect to a method for resource provisioning in a computing environment the method includes receiving a provisioning request for resources of the computing environment and executing the provisioning request for resources. The resources can be identified as having at least one of a firm requirement and a soft requirement. Moreover the method includes adding a provisioning request result to a repository such that the repository includes information for predicting a provisioning time to complete a future provisioning request. The method also includes the ability to determine at least one of a time to provision value and a time to failure value to complete the future provisioning request.

Described embodiments provide techniques for predicting resource provisioning times in a computing environment. For example in a highly utilized cloud computing environment users of cloud services access a virtualized computing infrastructure including network devices computing device platforms systems servers clients and the like virtual machines and storage devices. When requesting access to applications middleware or devices of the computing environment resources are provisioned and provided to the requestor for use. Since it is difficult to predict when the resource provisioning times will complete embodiments of the present invention predict the time to complete a resource provisioning request or a time to failure to enable the requestor to take appropriate action.

Users may interact directly with the device A A and device B B to initiate resource provisioning requests to other computing device platforms of the computing environment . In an alternative embodiment an application system which can be a computer operating as an email server host application server or the like can also communicate resource provisioning requests on the network . Computing device platforms can also communicate resource provisioning requests via a direct cable connection to other platforms or may comprise components on a single computer and may communicate over a bus or via memory of the single computer.

The computing environment also includes a provisioning system which satisfies resource provisioning requests. Although the provisioning system can implement embodiments of the present invention in other embodiments other devices or software modules of the computing environment can predict resource provisioning times as described further below with respect to . For example in an alternative embodiment some portion or all of the invention may be implemented in a hardware component such as a dedicated integrated circuit e.g. Application Specific Integrated Circuit ASIC expansion card etc. of a single computer.

The computing environment also includes storage systems such as storage area network SAN and network attached storage NAS . Each storage system can communicate with storage arrays A or storage arrays B. These storage systems are known in the art and storage media of the storage arrays can be implemented in one or more storage devices such as interconnected hard disk drives e.g. configured as a DASD RAID JBOD etc. solid state storage devices e.g. EEPROM Electrically Erasable Programmable Read Only Memory flash memory flash disk storage class memory SCM electronic memory magnetic tape media tape cartridges etc.

In addition to storage systems the computing environment can include a virtualized system which may implement a hypervisor to enable a virtual machine VM a database system such as DB2 and a management system which can monitor and or control some or all of the devices and applications of the computing environment . Although not an exhaustive list these computing device platforms can be personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and the like.

Software modules of the computing device platforms may be described in the general context of a computer system executing instructions of program modules. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Further the components of the computer system may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to a processor. These computer system hardware components are not shown but are well known to those of ordinary skill in the art. For example the bus can represent one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus. The computer system can also include a variety of computer system readable media. Such media may be any available media that is accessible by the computer system and it includes both volatile and non volatile media removable and non removable media and may be used for storing the data object information and the like.

The computer system memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory. The computer system may further include other removable non removable volatile non volatile computer system storage media. By way of example only NAS can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive of storage arrays B. Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to a bus by one or more data media interfaces. As will be further depicted and described below in one embodiment the computer systems memory such as of the provisioning system may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Moreover a program module may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and data. Each of the operating system one or more application programs other program modules and data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein such as the operations for predicting resource provisioning times.

Any computing device platform of the computing environment may also communicate with one or more external devices not shown such as a keyboard a pointing device a display etc. Such communication can occur via Input Output I O interfaces not shown . Still yet the computing platform device can communicate with one or more networks outside of network such as other local area networks LANs general wide area networks WANs and or a public network e.g. the Internet via network devices. It should be understood that although not shown because these components are well known to those of ordinary skill in the art other hardware and or software components could be used in conjunction with the computing device platform. Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

Specifically the prediction system includes a predictive provisioning analysis PPTA module a window repository and a provisioning system interface module . The PPTA module includes methods for analyzing different status information related to a resource Provisioning Request PR such as the time to PR completion or failure to complete. Specifically the PPTA module is used to predict the length of time a PR will take to complete. To perform this function the PPTA module is aware of the period of time or time to provision TTP value for a successful PR. Further the PPTA module is aware of a time to failure TTF value for a PR that fails to complete.

The PPTA module dynamically learns on the fly about the computing environment by tracking TTP and TTF for any given provisioning request. Accordingly short terms changes in TTP and TTF define a window of completed provisioning requests or alternatively windowed provisioning requests WPRs . Specifically each window reflects the most recent provisioning activity along with completed provisioning requests. The PPTA module interfaces with the window repository to enable easy access to stored windows and is thus a memory for the PPTA module . The window repository is a configurable size and can be implemented as a database. Moreover the database can be of any type such as a relational database flat file tree structure or the like. As each provisioning request completes or fails to complete the window repository records this information for use by the PPTA module for new provisioning requests. In one embodiment the window repository can operate as a queue using a first in first out FIFO strategy. It should be appreciated that any abstract data type can be used to implement the window repository as long as the PPTA module can use the window repository to continually learn about the success and failure of provisioning requests.

The PPTA module also interfaces with the provisioning system interface module . In one contemplated embodiment the provisioning system interface module is an application programming interface API to an IBM Tivoli Service Automation Manager TSAM or the like. Specifically IBM TSAM and similar products can be embodied by a provisioning system to perform automated provisioning management and de provisioning of computing device platforms of a computing environment . As previously described with respect to the computing environment includes servers networks operating systems middleware application software virtualization environments hypervisors and storage systems. Volumes processes server processing time and the servers etc. above are all examples of resources that are known by the provisioning system . When a new PR enters the prediction system the PPTA module predicts the time for the new PR to complete by reviewing the windows stored in the window repository . Concurrently the PPTA module also may receive the completion time or failure of a prior PR via the provisioning system interface module which receives that information from the provisioning system . The success or failure information provided by the provisioning system via the provisioning system interface module is also recorded with the corresponding prior PR in the window repository .

Specifically the PR ID upon first being identified as a new provisioning request by the prediction system is stored in the window repository . The PR ID is passed onto the provisioning system via the provisioning system interface module . After the provisioning request completes or fails which is managed by the provisioning system the success or failure values are returned to the prediction system as TTP or TTF respectively. Along with the firm requirements and soft requirements the information is associated with the PR ID and stored in the window repository .

With respect to the firm requirements and soft requirements these requirements vary according to the resources of the computing environment . For example firm requirements related to a provisioning request can include without limitation a platform a computing resource retention policy or value a computer servers amount and post provisioning processes such as automated installation and configuration of additional computer applications. Examples of soft requirements can include also without limitation storage space and memory size . When a new provisioning request is issued the PPTA module through the provisioning system identifies the requirements associated with the new provisioning request. The PPTA module then searches the current list of windowed PR IDs in the window repository looking for provisioning requests that are most similar to the new provisioning request. This lookup utilizes a point system and consequently a score to find the best or if possible exact matches as further described below with respect to .

Returning to the firm requirements and soft requirements in one embodiment the firm requirements provide characteristics that have the greatest impact on provisioning completion time. Additionally soft requirements have less of an impact on provisioning completion time. However these requirements can be altered dynamically. For example in other embodiments over time resources can become busier or more available. Busier resources may become characterized as firm requirements when formerly they were characterized as a soft requirements . Moreover by keeping a history of the time of day e.g. business hours instead of non business hours and how long provisioning requests have taken to complete or fail in the past the prediction system can predict the resource provisioning time for a new provisioning request in a highly utilized computing environment .

By way of example illustrates an embodiment of a snapshot in time of predicting resource provisioning times in the computing environment . Specifically the prediction system accesses the memory of the system operating the prediction system . As previous stated above this system can be any computing device platform of the computing environment . The PPTA module of the prediction system reviews the window repository wherein the window repository is of a particular window size WS . As shown in the window repository includes multiple windows wherein new provisioning requests are added to the repository and the oldest PR leaves the repository. For each new provisioning request a running group of values are updated such as windowed provisioning request WPR matching a window of the window repository which is a completed provisioning request currently under examination by the PPTA module a minimum required score MRS which is the minimum provisioning request score required for the new provisioning request to be a match and a current high score CHS which is the current high score for a new provisioning request lookup cycle.

Before describing the scoring process to predict resource provisioning times it is useful to describe point allocations. The PPTA module is aware of point values assigned to firm requirements and soft requirements . These values can be set by a user or administrator and can also be changed over runtime by the prediction system if resources become more or less impacted. For one embodiment the firm requirements may be allocated three points per firm requirement. Further each soft requirement may be allocated between one and three points. These points are totaled per requirement. To illustrate if the firm requirements of a particular PR ID includes a platform computing resource retention value and computer servers amount then the total score for the firm requirements is nine points i.e. 3 3 3 . In an embodiment with only four firm requirements the total point value is twelve. If the soft requirement includes storage space having a point value of three and a memory size of one the total point value is four i.e. 3 1 .

With respect to the soft requirements each soft requirements resource has a default tolerance of 20 . This tolerance is a configurable parameter and can be altered for tuning the lookup processing. For example if a new provisioning request is for 10 GBs of disk space of the NAS then any windowed provisioning request WPR with disk space ranging from 8 GB to 12 GB would add 1 point to its score for satisfying the criteria. If however the disk space for the WPR was found to be a match then the matching PR adds three points to the score instead. The same methodology is applied to the memory resource. The highest score for the soft requirements is therefore six.

Once the examination of a WPR completes the firm requirements total score and the soft requirements total score are added together and compared to the minimum required score MRS . The MRS is configurable for tuning the lookup processing. Specifically if the MRS is not met the examined WPR is discounted from the lookup cycle. The next WPR is examined until a match exceed value or no match is found. The first WPR of the window repository to meet or exceed the MRS establishes the current high score CHS . If the WPR match is successful the completion time will be included in the running TTP time and count totals for computing the average TTP for the lookup cycle for the new provisioning request.

However if the WPR is a failure the completion time will be included in the running time and count totals for computing the average TTF. For subsequent WPRs if the new provisioning request score meets or exceeds the MRS then the score is compared to the CHS . If the MRS is equivalent to the CHS the TTP or TTF is added to the running TTP or TTF time respectively and count totals for the CHS . If the MRS exceeds the CHS then the MRS becomes the new CHS and starts new corresponding TTP or TTF time and count totals. If the WPR score is less than the CHS it is discounted from the lookup cycle.

Once all WPRs have been examined for the new provisioning lookup cycle the CHS TTP and TTF averages are assigned to the new provisioning request. This formula is TTP respective count or TTF respective count for success or failure respectively. Also the respective counts are used to calculate the probability of success percentage value. This formula is success count 100 success count failure count . When the new provisioning request completes it then replaces the oldest WPR thus keeping the WPR current. It should be appreciated that if no WPR meets the MRS then the average TTP and TTF of all windowed provisioning requests are assigned to the new provisioning request. This could indicate to the user administrator or prediction system that the MRS may need to be re configured to a lower value. For example if this condition continues for five consecutive lookup cycles then the MRS can be dynamically adjusted downward by 20 by the prediction system .

Over time the window repository regardless of window size may become saturated with only successful PRs or failed PRs. If the former occurs then the TTF cannot be calculated and the probability of a successful provisioning request would be 100 . If the latter occurs then the TTP cannot be calculated and probability of success would be 0 .

After the window repository includes at least one provisioning request result the operations of illustrate an embodiment for predicting resource provisioning times in a computing environment. Specifically after a device or other module initiates a provisioning request in operation the prediction system performs predictive provisioning time analysis as described by operation . In particular the history remembers the past provisioning behavior along with successful or failure values. Factoring in the provisioning request firm requirements and soft requirements scores the next step evaluates the new provisioning request by using a best fit scoring mechanism as described with respect to . Specifically the scoring mechanism is used to match up the provisioning request to the window repository data to perform the best fit match analysis. Thereafter the prediction system forecasts a time to provision or time to failure value.

The described operations may be implemented as a method apparatus or computer program product using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof. Accordingly aspects of the embodiments may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the embodiments may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to a semiconductor system apparatus or device or any suitable combination thereof utilizing one or more suitable storage technologies such as electronic magnetic optical electromagnetic infrared. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The variable n is used to represent a variable positive integer number of an element such as variable number of chunk identifiers in object information variable number of merge levels etc. These variables associated with different elements may comprise a same or different integer value.

The terms an embodiment embodiment embodiments the embodiment the embodiments one or more embodiments some embodiments and one embodiment mean one or more but not all embodiments of the present invention s unless expressly specified otherwise.

The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise.

The enumerated listing of items does not imply that any or all of the items are mutually exclusive unless expressly specified otherwise.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. On the contrary a variety of optional components are described to illustrate the wide variety of possible embodiments of the present invention.

Further although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may be configured to work in alternate orders. In other words any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further some steps may be performed simultaneously.

When a single device or article is described herein it will be readily apparent that more than one device article whether or not they cooperate may be used in place of a single device article. Similarly where more than one device or article is described herein whether or not they cooperate it will be readily apparent that a single device article may be used in place of the more than one device or article or a different number of devices articles may be used instead of the shown number of devices or programs. The functionality and or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality features. Thus other embodiments of the present invention need not include the device itself.

The illustrated operations of the Figures show certain events occurring in a certain order. In alternative embodiments certain operations may be performed in a different order modified or removed. Moreover steps may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further operations may be performed by a single processing unit or by distributed processing units.

The foregoing description of various embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the invention be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the invention. Since many embodiments of the invention can be made without departing from the spirit and scope of the invention the invention resides in the claims herein after appended.

