---

title: Client side cache management
abstract: A system, method and computer-readable medium for client-side cache management are provided. A client request for content is returned that includes executable code for generating a request for preload information. Based on processing the executable code, a client computing device requests preload information from a content delivery service provider. The content delivery service provider provides an identification of content based on resource requests previously served by the content delivery service provider. The client computing device processes the preload information and generates and obtains identified resources for maintenance in a client computing device memory, such as cache.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09210235&OS=09210235&RS=09210235
owner: Amazon Technologies, Inc.
number: 09210235
owner_city: Seattle
owner_country: US
publication_date: 20130828
---
This application is a continuation of U.S. patent application Ser. No. 12 060 202 filed Mar. 31 2008 now U.S. Pat. No. 8 533 293 entitled CLIENT SIDE CACHE MANAGEMENT the disclosure of which is incorporated herein by reference.

Generally described computing devices and communication networks can be utilized to exchange information. In a common application a computing device can request content from another computing device via the communication network. For example a user at a personal computing device can utilize a software browser application to request a Web page from a server computing device via the Internet. In such embodiments the user computing device can be referred to as a client computing device and the server computing device can be referred to as a content provider.

Content providers are generally motivated to provide requested content to client computing devices often with consideration of efficient transmission of the requested content to the client computing device and or consideration of a cost associated with the transmission of the content. For larger scale implementations a content provider may receive content requests from a high volume of client computing devices which can place a strain on the content provider s computing resources. Additionally the content requested by the client computing devices may have a number of components which can further place additional strain on the content provider s computing resources.

With reference to an illustrative example a requested Web page or original content may be associated with a number of additional resources such as images or videos that are to be displayed with the Web page. In one specific embodiment the additional resources of the Web page are identified by a number of embedded resource identifiers such as uniform resource locators URLs . In turn software on the client computing devices typically processes embedded resource identifiers to generate requests for the content. Often the resource identifiers associated with the embedded resources reference a computing device associated with the content provider such that the client computing device would transmit the request for the additional resources to the referenced content provider computing device. Accordingly in order to satisfy a content request the content provider would provide client computing devices data associated with the Web page as well as the data associated with the embedded resources.

Some content providers attempt to facilitate the delivery of requested content such as Web pages and or resources identified in Web pages through the utilization of a content delivery network CDN service provider. A CDN server provider typically maintains a number of computing devices in a communication network that can maintain content from various content providers. In turn content providers can instruct or otherwise suggest to client computing devices to request some or all of the content provider s content from the CDN service provider s computing devices.

As with content providers CDN service providers are also generally motivated to provide requested content to client computing devices often with consideration of efficient transmission of the requested content to the client computing device and or consideration of a cost associated with the transmission of the content. Accordingly CDN service providers often consider factors such as latency of delivery of requested content in order to meet service level agreements or to generally improve the quality of delivery service.

Generally described the present disclosure is directed to the management of resource identifiers utilized by a client computing device to request content from a network resource such as content delivery network CDN service providers. Specifically aspects of the disclosure will be described with regard to the processing by a client computing device of a list of resource identifiers provided by the CDN service provider to facilitate the access to such resources by the client computing device. In one embodiment at least some portion of the identified resources may be preloaded to a client computing device memory to provide access to the resource in advance of the need to generate a request. Although various aspects of the disclosure will be described with regard to illustrative examples and embodiments one skilled in the art will appreciate that the disclosed embodiments and examples should not be construed as limiting.

Additionally the client computing devices may also include necessary hardware and software components to execute or otherwise process resource request executable code as will be described in greater detail below. One skilled in the relevant art will appreciate the additional hardware software components for processing the resource request executable code may be included with the execution of a multi purpose software application such as a browser software application. Alternatively some or all of the additional hardware software components may be embodied in stand alone or specialized components configured for the processing the resource request executable code.

The content delivery environment can also include a content provider in communication with the one or more client computing devices via the communication network . The content provider illustrated in corresponds to a logical association of one or more computing devices associated with a content provider. Specifically the content provider can include a web server component corresponding to one or more server computing devices for obtaining and processing requests for content such as Web pages from the client computing devices . The content provider can further include an origin server component and associated storage component corresponding to one or more computing devices for obtaining and processing requests for network resources from the CDN service provider. One skilled in the relevant art will appreciate that the content provider can be associated with various additional computing resources such additional computing devices for administration of content and resources DNS name servers and the like.

With continued reference to the content delivery environment can further include a CDN service provider in communication with the one or more client computing devices and the content providers via the communication network . The CDN service provider illustrated in corresponds to a logical association of one or more computing devices associated with a CDN service provider. Specifically the CDN service provider can include a number of Point of Presence POP locations that correspond to nodes on the communication network . Each POP includes a DNS component made up of a number of DNS server computing devices for resolving DNS queries from the client computers . Each POP also includes a resource cache component made up of a number of cache server computing devices for storing resources from content providers and transmitting various requested resources to various client computers.

In an illustrative embodiment the DNS component and resource cache component are considered to be logically grouped regardless of whether the components or portions of the components are physically separate. Additionally although the POPs are illustrated in as logically associated with the CDN provider the POPs will be geographically distributed throughout the communication network in a manner to best serve various demographics of client computing devices . Additionally one skilled in the relevant art will appreciate that the CDN service provider can be associated with various additional computing resources such additional computing devices for administration of content and resources and the like.

Although not illustrated in each client computing device utilizes some type of local DNS resolver component such as a DNS Name server that generates the DNS queries attributed to the client computer. In one embodiment the local DNS resolver component may belong to an enterprise network to which the client computer belongs. In another embodiment the local DNS resolver component may belong to an Internet Service Provider ISP that provides the network connection to the client computer.

With reference now to the interaction between various components of the content delivery environment of will be illustrated. For purposes of the example however the illustration has been simplified such that many of the components utilized to facilitate communications are not shown. One skilled in the relevant art will appreciate that such components can be utilized and that additional interactions would accordingly occur without departing from the spirit and scope of the present disclosure.

With reference to an illustrative interaction for registration of a content provider with the CDN service provider will be described. As illustrated in the CDN content registration process begins with registration of the content provider with the CDN service provider . In an illustrative embodiment the content provider utilizes a registration application programming interface API to register with the CDN service provider such that the CDN service provider can provide content on behalf of the content provider . The registration API includes the identification of the origin server of the content provider that will provide requested resources to the CDN service provider .

One skilled in the relevant art will appreciate that upon identification of appropriate origin servers the content provider can begin to direct requests for content from client computing devices to the CDN service provider . Specifically in accordance with DNS routing principles a client computing device request corresponding to a resource identifier would eventually be directed toward a POP associated with the CDN service provider . In the event that the resource cache component of a selected POP does not have a copy of a resource requested by a client computing device the resource cache component will request the resource from the origin server previously registered by the content provider .

With continued reference to upon receiving the registration API the CDN service provider obtains the registration information and generates or otherwise obtains resource request executable code. In an illustrative embodiment and as will be explained in greater detail below the resource request executable code corresponds to data or instructions that are processed by the client computing devices to cause the client computing devices to request a list of resources from the CDN service provider . Additionally the resource request executable code can cause the client computing devices to maintain any of the resources requested from the list so that they are available to the client computing device software applications such as a browser application at the present or at some time in the future . In an illustrative embodiment the resource request executable code can correspond to script based instructions that are processed by a browser software application on the client computing device that causes the browser software application to request the translation information from the CDN service provider . One skilled in the relevant art will appreciate however the resource request executable code can be embodied in any one of a variety of executable code formats.

The CDN service provider returns the resource request executable code to the content provider along with any additional information. In turn the content provider can then store for the resource request executable code for embedding in requested content such as Web page markup language or otherwise transmitted to the client computing devices . In an illustrative embodiment the resource request executable code can be applicable to multiple content providers . Alternatively the resource request executable code can be unique to each particular content provider . Still further the CDN service provider may provide additional logic to the content providers that controls the circumstances and or methodologies for embedding the resource request executable code into content. For example the resource request executable code can include instructions or executable code that defines that the type of content e.g. specific Web pages for which the resource request executable code will apply.

With reference now to after completion of the registration and embedding processes illustrated in a client computing device generates a content request that is received and processed by the content provider such as through the Web server . In accordance with an illustrative embodiment the request for content can be in accordance with common network protocols such as the hypertext transfer protocol HTTP . Upon receipt of the content request the content provider identifies the appropriate responsive content. In an illustrative embodiment the requested content can correspond to a Web page that is displayed on the client computing device via the processing of information such as hypertext markup language HTML extensible markup language XML and the like. The requested content can also include a number of embedded resource identifiers that corresponds to resource objects that should be obtained by the client computing device as part of the processing of the requested content. Generally the identification of the resources provided by the content provider will be in the form of a resource identifier that can be processed by the client computing device such as through a browser software application. In an illustrative embodiment the resource identifiers can be in the form of a uniform resource locator URL . Additionally the requested content will also include the embedded resource request executable code previously provided by the CDN service provider . In an illustrative embodiment the embedded execution code can be arranged in a manner such that it is processed prior to processing any other of the content in the requested content or processed in the earlier stages of the processing of the requested content as allowed. Alternatively the embedded execution code can also be arranged such that it can be parsed by the client computing device from the other requested content.

With reference now to upon receipt of the requested content including the embedded resource identifiers and the resource request executable code the client computing device processes the resource request executable code in a manner that causes the client computing device to request preload information or a listing of resources that may be preloaded from the CDN service provider . As described above the resource request executable code can include script based instructions and information that instructs a browser software application on the client computing device to generate the request for preload information. The preload information request can include information identifying the content provider the specific client computing device the type size of requested content e.g. large image files and additional information that could be used by the CDN service provider to determine a list of resources to be downloaded by the client computing device.

In an illustrative embodiment the CDN service provider utilizes information corresponding to the monitoring of previous client computing device requests to the resource cache components of the CDN service provider in generating the preload list. The CDN service provider can further use class or clustering information in selecting the resources identified in the list of resources. Although the preload request is illustrated in as directed toward the CDN service provider in general one skilled in the relevant art will appreciate that the preload request from the client computing device may be directed toward a specific POP or set of POPs provided by the CDN service provider . The selection of appropriate recipients can be based on a variety of factors including but not limited to network topology service level agreements geography and the like.

Upon receipt of the translation information request the CDN service provider such as through a POP generates preload information that will be used to request additional resources by the client computing device. The preload information can also include rules or other information that specifies the applicability of the resources to be requested additional instructions regarding the resources once they have been received expiration timeframes for the preload information filtering information for the return resource list and the like. The preload information is then returned to the requesting client computing device . In an illustrative embodiment the client computing device can request the resources identified in the preload information as described below if the resource has not been previously stored in a storage location at the client computing device such as a memory. Alternatively if the resource has been previously stored the client computing device may manipulate the resource such as by moving the resource from one storage location e.g. hard disk to another storage location e.g. memory . Still further the client computing device may manipulate storage controls such as a cache control to ensure that content previously stored by the client computing device remains available. Still further in another embodiment the preload list can include some portion of the content to be requested maintained by the client computing device .

With reference now to an embodiment in which at least one resource on the preload list has not been previously downloaded will be described. The client computing device receives and processes the preload information from the CDN service provider . In one embodiment the preload information can include data or other information that is processed by code existing on the client computing device in a manner as will be described below. For example the client computing device may be executing a software application configured specifically for the processing of the preload information. Similarly the resource request executable code previously executed by the client computing device may include executable instructions for processing the preload information and or the requested resources once they are received by the client computing device . For example the resource request executable code can specify or instruct a browser application to store the received resources in a storage location such as memory. The stored resources would then be available for use by the browser application. One skilled in the relevant art will appreciate that the resource request transmitted by the client computing device to the CDN service provider could be processed by a particular POP or set of POPs provided by the CDN service provider .

As described above in an illustrative embodiment the resources identified by the CDN service provider in the preload information correspond to resources from previously serviced resource requests serviced by the CDN service provider. In one example the previously serviced resource requests correspond to resource requests previously submitted by the specific client computing device . In another example the previously serviced resource requests correspond to resource requests previously submitted by a cluster or class of a set of computing devices. In still a further example the previously serviced resource requests corresponds to resource request previously submitted by a cluster or class of a set of computing devices that match or correlate to a cluster or class associated with the client computing device. With additional processing the preload information can include resources identified in accordance with the above techniques.

With reference now to an illustrative embodiment of how the CDN service provider processes and manages associated class information collected by the resource cache component will be described. The resource cache component provides the associated class information collected at the POP to the CDN service provider . The associated class information can then be processed by the CDN service provider in a number of ways. In one embodiment the CDN service provider can identify content information for providing to a requesting client computing device based at least in part on the associated class information. Alternatively as previously described the identified content information can include the frequently requested content itself.

Referring to a resource cache component such as resource cache component of POP utilizes information received from previous client computing device requests to associate class information to the resource requests. The class can be determined from the client directly such as information provided by the client computing device or ISP or indirectly such as inferred through a client computing device s IP address . Additionally the resource cache component can use additional information to determine the class such as a temporal domain e.g. a time zone in which the requesting client computing device is located. The resource cache component associates the class information with the requested content and maintains the associated class information for example in a log file for sharing with the CDN service provider .

In an illustrative embodiment the determination of class can be statically determined based on predefined class definitions so that the association of the class can be done at the time of receiving resource requests. For example a geographic location may be known at the time of request processing. In another embodiment the determination of class can be dynamic and may not be determined or determinable at request processing. For example behavioral classes based on observing behavior over a time window may not be determined until completion of the observation window s processing of the observed data.

In one illustrative embodiment the class can correspond to a specific geographic region to which the client computing device belongs. In addition or alternatively the class can correspond to temporal domain e.g. time zone business hours daytime nighttime holidays and the like. In another embodiment the class can correspond to a particular subject area such as a news group associated with either the requested content or the user or both. Still further the class can correspond to demographic data. Depending on the information to be collected from the requesting client computing device the resource cache component can determine and maintain this information in a number of ways as will be appreciated by one skilled in the relevant art. Moreover it will further be appreciated by one skilled in the relevant art that one or more computing devices at the POP where the resource request is received can perform any of the above described functions.

Based on the above description of class or cluster information CDN service provider can match or correlate a class of a requesting client computing device with a class associated with the resources in determining whether to include such resources in the preload list. For example the CDN provider may match a topic of interest class such as basketball scores with resources that have been associated with the same class based on previous requests. The class of the client computing device may be obtained through a user profile of a user associated with the client computing device and or through subject matter associated with the content request submitted by the client computing device.

Alternatively the function can involve a correlation determination in which the CDN service provider correlates a class of the requesting client computing device with a different class associated with the resources. For example the CDN service provider may correlate a first geographic class such as New York City with another geographic class such as San Francisco. In this case the CDN service provider would make some associations regarding the New York City geographic class is sufficiently similar to the San Francisco class to merit an association. In an illustrative embodiment determination of matching or correlation may be facilitated through a manual process such as by an administrator or based on observed behaviors.

With reference now to a resource identifier processing routine implemented by a client computing device to process embedded resource identifiers with translation information will be described. At block client computing device transmits the request for content. As described above the request for content may be directed to a Web server of the content provider . At block the client computing device obtains responsive content that includes resource request executable code. As described above in an illustrative embodiment the resource request executable code can correspond to script based instructions that can be processed by a software application running on the client computing device .

At block the client computing device transmits the request for preload information to the CDN service provider identified in the resource request executable code. As previously described the request for preload information can include information that may be used by the CDN service provider to generate or select the translation information. The additional information may be specifically included in the request for translation or inferred from aspects of the request e.g. IP address of the client computing device . The CDN service provider can utilize class information or clustering information to select the resources that will be included in the preload information. The utilization of such class or cluster information facilitates the identification of resources that may not have any relation to the current set of resources to be displayed by the client computing device . At block the client computing device obtains resource information from the CDN service provider .

At block the client computing device processes the resource identifiers or other information with the preload information. In a further illustrative embodiment the client computing device can maintain a history of whether previous resource requests for content based on a preload list provided by the CDN provider were utilized. Accordingly the client computing device can provide some additional filtering or processing based on the history. For example if the CDN provider provides selects content according to subject matter class the client computing device may filter this type of content to prevent that content from being preloaded. The filtering may be manually configured or configured by executable code on the client computing device monitoring the preload requests. Additionally the client computing device can provide feedback to the CDN service provider for adjustments to the preload matching algorithms or methodologies. It will be appreciated by one skilled in the relevant art that a variety of logic may be implemented to monitor such behavior and to update recommendations based thereon.

At block the client computing device transmits requests for the resources associated with the resource identifiers. In an illustrative embodiment the request for the resources associated with the translated URLs can be facilitated through various networking protocols. As set forth above in an alternative embodiment there are a number of ways to manage the identified set of content e.g. preloading the content at the client computing device verifying availability of content managing cache control information related to content in memory e.g. changing expiration data or manipulating expiration variables and the like. Accordingly the processing for content at block may be omitted or otherwise managed differently if the identified content is already in a client computing device memory. At block the routine terminates.

While illustrative embodiments have been disclosed and discussed one skilled in the relevant art will appreciate that additional or alternative embodiments may be implemented within the spirit and scope of the present invention. Additionally although many embodiments have been indicated as illustrative one skilled in the relevant art will appreciate that the illustrative embodiments do not need to be combined or implemented together. As such some illustrative embodiments do not need to be utilized or implemented in accordance with scope of variations to the present disclosure.

Conditional language such as among others can could might or may unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or steps. Thus such conditional language is not generally intended to imply that features elements and or steps are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without user input or prompting whether these features elements and or steps are included or are to be performed in any particular embodiment.

Any process descriptions elements or blocks in the flow diagrams described herein and or depicted in the attached figures should be understood as potentially representing modules segments or portions of code which include one or more executable instructions for implementing specific logical functions or steps in the process. Alternate implementations are included within the scope of the embodiments described herein in which elements or functions may be deleted executed out of order from that shown or discussed including substantially concurrently or in reverse order depending on the functionality involved as would be understood by those skilled in the art. It will further be appreciated that the data and or components described above may be stored on a computer readable medium and loaded into memory of the computing device using a drive mechanism associated with a computer readable storing the computer executable components such as a CD ROM DVD ROM or network interface further the component and or data can be included in a single device or distributed in any manner. Accordingly general purpose computing devices may be configured to implement the processes algorithms and methodology of the present disclosure with the processing and or execution of the various data and or components described above.

It should be emphasized that many variations and modifications may be made to the above described embodiments the elements of which are to be understood as being among other acceptable examples. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

