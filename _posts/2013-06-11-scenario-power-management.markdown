---

title: Scenario power management
abstract: One or more techniques and/or systems are provided for dynamically applying power policies to a computing environment. For example, a computing environment may comprise one or more activity components (e.g., a display driver, an audio driver, an application, etc.) that may provide status information used to identify a scenario (e.g., a video game scenario, a full screen video playback scenario, etc.) that is activated for the computing environment. A power policy assigned to a currently identified scenario may be applied to the computing environment to dynamically improve performance and/or power conservation, for example. Activity components, scenarios, and/or power policies may be maintained in an extensible manner such that activity components, scenarios, and/or power polices may be added, removed, and/or modified by merely updating corresponding data structures, such as tables or registry keys, as opposing to updating power management software code.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09323318&OS=09323318&RS=09323318
owner: Microsoft Technology Licensing, LLC
number: 09323318
owner_city: Redmond
owner_country: US
publication_date: 20130611
---
Many computing devices such as desktops laptops smart phones and tablets are developed around conserving power while providing desired performance and responsiveness for an improved user experience. In an example when a device is not used for some time such as ten minutes the device may be placed into a sleep state that may significantly reduce application activity and thus may result in improved power conservation. In another example an operating system of a computing device may have one or more hardcoded power consumption plans that may adjust screen brightness place a hard drive into a sleep state etc. based upon a user selection of a power consumption plan and or based upon a determination as to whether the computing device is operating on a battery or is plugged into a power outlet.

This summary is provided to introduce a selection of concepts in a simplified form that are further described below in the detailed description. This summary is not intended to identify key factors or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Among other things one or more systems and or techniques for dynamically applying a power policy to a computing environment are provided herein. For example a computing environment e.g. a tablet device a mobile device a laptop a desktop computer etc. may be associated with one or more activity components. An activity component e.g. an entity that defines an activity may comprise a software component a hardware component an application a driver an operating system component functionality associated with a component e.g. audio playback functionality of an audio driver and or any other component that may actively operate within the computing environment e.g. an audio driver a photo sharing application a graphics subsystem a video renderer a desktop window manager etc. . Status information may be received from the one or more activity components. In an example status information may indicate whether an activity component is activated deactivated and or has some other e.g. more granular state such as an activate low power state e.g. whether an audio driver is currently performing audio playback . In another example status information may indicate whether an activity component state of an activity component is activated or deactivated e.g. the audio driver may indicate that offloaded audio playback is activated and that non offloaded audio playback is deactivated . Such status information may be used to fine tune performance and or power parameters of the computing environment.

In an example a scenario evaluation may be performed for the computing environment e.g. based upon receiving a notification from an activity component that a status of the activity component has changed thus updating status information for the computing environment . The scenario evaluation may comprise evaluating status information provided by one or more activity components of the computing environment to determine whether the status information satisfies a scenario definition for a scenario. For example one or more scenarios e.g. a video playback scenario a full screen video playback scenario a video batching scenario a low power consumption connected standby state scenario a monitor off scenario etc. may be defined based upon activation deactivation and or some other e.g. more granular state such as an activate low power state of activity components and or activity component states. For example a scenario definition for an audio playback scenario e.g. an audio but not video playback such as an internet radio may specify that audio playback is to be activated video playback is to be deactivated e.g. activation may otherwise indicate video playback as opposed to audio only playback a low power consumption connected standby state is to be deactivated etc.

Responsive to satisfaction of the scenario definition e.g. the audio playback is activated and the video playback and low power consumption connected standby state are deactivated a proposed power policy assigned to the scenario may be identified. The proposed power policy may specify a variety of power settings such as processor performance settings e.g. decreased CPU clock speed for power conservation increased processor throttling for improved performance etc. graphics processing unit performance settings display settings e.g. a screen brightness a hardware throttling setting a network connectivity setting e.g. disable network adapter for power conservation and or a plethora of other settings e.g. settings that may be implemented by a kernel power manger an operating system hardware software an application a driver etc. . In this way the proposed power policy may be dynamically applied to the computing environment as a current power policy.

To the accomplishment of the foregoing and related ends the following description and annexed drawings set forth certain illustrative aspects and implementations. These are indicative of but a few of the various ways in which one or more aspects may be employed. Other aspects advantages and novel features of the disclosure will become apparent from the following detailed description when considered in conjunction with the annexed drawings.

The claimed subject matter is now described with reference to the drawings wherein like reference numerals are generally used to refer to like elements throughout. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of the claimed subject matter. It may be evident however that the claimed subject matter may be practiced without these specific details. In other instances structures and devices are illustrated in block diagram form in order to facilitate describing the claimed subject matter.

An embodiment of dynamically applying a power policy to a computing environment is illustrated by an exemplary method of . At the method starts. A computing environment may comprise one or more activity components e.g. an audio driver a graphics card a video renderer an application a desktop windows manager etc. that may participate in scenario based power management by providing status information that may be used to identify a scenario associated with a power policy that may be dynamically applied to the computing environment to for example enhance performance and or conserve power. In an example a set of activity components from which status information may be received for identification of a scenario may be maintained within an activity component data structure. In this way upon receiving status information from an activity component e.g. a video renderer may specify that full screen video is being played the activity component may be identified within the activity component data structure. The activity component data structure may be updated to add remove and or modify activity components e.g. a new video driver may be installed an audio driver may be updated with new functionality correspond to a new activity component state etc. .

Status information received from such activity components may be used to identify a scenario for which a particular power policy may enhance performance and or power conservation. In an example a set of scenarios may be maintained within a scenario data structure comprising one or more scenario entries defining scenarios. A scenario entry within the scenario data structure may comprise a scenario definition that defines a scenario. For example a scenario definition for an audio playback scenario may specify one or more compliance activity component states that are to be satisfied for satisfaction of the scenario definition e.g. an audio driver is to be in an offloaded audio playback state one or more ignored activity component states that are optional for satisfaction of the scenario definition e.g. a current state of a joystick controller may not affect satisfaction of the scenario definition and or one or more disabling activity component states indicating that the scenario definition is not capable of being satisfied e.g. a video playback state may indicate that a video playback scenario is activated as opposed to merely an audio playback scenario . The scenario data structure may be updated to add remove and or modify scenarios e.g. a new scenario entry may be made for a 3D video game scenario . In an example the scenario data structure may comprise a registry key such that a scenario definition may be specified within portions of the registry key e.g. a registry key within a registry utilized by an operating system .

Scenarios may be associated with power policies such as processor throttling power settings screen brightness power settings network connectivity power settings device activity power settings and or a wide variety of other power settings that may affect power consumption and or performance. In this way a power policy which may reduce power consumption and or enhance performance may be implemented for a current scenario. Thus power management may be dynamically adjusted based upon various scenarios that may become active during operation of the computing environment. In an example a set of power policies may be maintained within a power policy data structure comprising one or more power policy entries defining power policies settings that may be applied to the computing environment. For example a first power policy may define an association between a first scenario and a first power policy e.g. a processor throttling power policy may be associated with a full screen video playback scenario . In an example a power policy may be defined based upon a policy definition specified by an operating system specified through a policy engine plug in e.g. through which third parties may specify a power policy discovered at boot time and or discovered e.g. dynamically after boot time. The power policy data structure may be updated to add remove and or modify power polices.

At a scenario evaluation may be performed for the computing environment. For example the scenario evaluation may be performed based upon a notification from an activity component that a status of an activity component has changed. In an example the scenario evaluation may be applied at runtime during operation of a computing device. The scenario evaluation may evaluate status information e.g. an indication as to whether an activity component and or an activity component state is activated or deactivated such as whether a video renderer is performing full screen video playback is idle or is playing a video within a window provided by one or more activity components of the computing environment to determine whether the status information satisfies a scenario definition for a scenario. For example a peer to peer conference scenario may be identified based upon status information satisfying a peer to peer conference scenario definition e.g. network activity video playback activity audio playback activity execution of a conference app microphone activity and or a variety of other status information provided by activity components may be evaluated . The peer to peer conference scenario definition may specify that one or more compliance activity components states are to be satisfied for satisfaction of the peer to peer conference scenario definition e.g. video playback audio playback microphone activity etc. . The peer to peer conference scenario definition may specify that one or more ignored activity components states are optional for satisfaction of the peer to peer conference scenario definition e.g. mouse activity . The peer to peer conference scenario definition may specify that one or more disabling activity component states may indicate that the peer to peer conference scenario definition is not capable of being satisfied e.g. a lack of network connectivity .

At responsive to satisfaction of the scenario definition a proposed power policy assigned to the scenario may be identified. For example the power policy data structure may be queried with the scenario to identify the power policy assigned to the scenario. At responsive to the proposed power policy being different than a current power policy the proposed power policy is applied to the computing environment as the current power policy. In an example the proposed power policy may be applied at runtime during operation of the computing device which may dynamically improve performance of the computing system and or power consumption. In an example a power policy may comprise one or more power policy settings that may be applied to the computing environment and or implemented by various components such as an operating system an application a driver a hardware component an operating system component a kernel power manager a processor etc.

In an example the set of scenarios within the scenario data structure may be defined so that conflicts between scenarios may be mitigated e.g. merely one scenario may be satisfied at a time based upon current status information . In another example conflict resolution may be performed where status information satisfies multiple scenario definitions. For example responsive to determining that the status information satisfies the scenario definition for the scenario and that the status information satisfies a second scenario definition for a second scenario a collision detection may be performed to determine whether a conflict exists e.g. a power policy for the scenario may specify a 50 screen brightness whereas a second power policy for the second scenario may specify a 90 brightness . The conflict may be resolved to identify a resolved power policy that may be applied to the computing environment as the current power policy e.g. a current power policy may be maintained a default power policy may be selected an average power policy setting value e.g. such as 70 may be implemented a power policy setting value for improved power consumption may be implemented a power policy setting value for improved performance may be implemented etc. .

In this way activity components scenarios and or power policies may be maintained within easily modifiable data structures e.g. tables registry keys etc. which may provide extensibility for managing power of the computing environment e.g. a new scenario may be added by updating the scenario data structure as opposed to updating code of a power management component . Thus performance and or power consumption may be improved at runtime by applying power policies based upon currently detected scenarios of the computing environment. At the method ends.

The activity component module may be configured to maintain the activity component data structure by dynamically adding removing and or modifying activity component entries. In an example the activity component module may remove an activity component entry such as the activity component entry F . In another example the activity component module may add a new activity component entry to provide support for a new activity component such as a new activity component G entry for a peripheral driver e.g. a user may have installed a new motion detection device . In this way support for activity components may be dynamically provided with little to no modification to code of a power management component e.g. merely the activity component data structure such as a table may be modified as opposed to updating code of the power management application such as a kernel power manger of an operating system .

The scenario data structure may comprise scenario definitions for the one or more scenario entries. In an example a scenario A definition for the audio playback scenario may specify that one or more compliance activity component states e.g. an activity component B such as an audio driver and an activity component H such as a speaker are to be activated for satisfaction of the scenario A definition used to determine whether the audio playback scenario is activated. The scenario A definition may specify that one or more disabling activity component states e.g. an activity component A such as a video renderer and an activity component D such as a display driver indicating full screen video playback as opposed to merely audio playback indicating that the scenario A definition is not capable of being satisfied e.g. because the audio playback scenario is defined for audio but not video playback such as listening to an internet radio station and thus the audio playback scenario would not be capable of being satisfied if a video renderer and or display driver are activated . The scenario A definition may specify that one or more ignored activity component states e.g. activity component C and activity component E are optional e.g. ignored for satisfaction of the scenario A definition .

It may be appreciated that status information provided by an activity component and or a scenario definition for example may specify various states such as activated deactivated activated low power a integer value and or a variety of other states and is thus not limited to a Boolean type value of activated and deactivated e.g. foregoing examples are not meant to be limiting .

The scenario evaluation component may be configured to maintain the scenario data structure by dynamically adding removing and or modifying scenario entries. In an example the scenario evaluation component may be configured to modify a scenario definition such as a scenario B definition for the full screen video playback scenario. For example the scenario evaluation component may add a compliance activity component state to the scenario B definition e.g. activity component E such as an operating system connected standby state component may be added because the computing environment would not be playing full screen video if the computing environment was is a low power connected standby state . In this way support for scenarios may be dynamically provided with little to no modification to a power management application e.g. merely the scenario data structure such as a table may be modified as opposed to updating code of the power management application such as a kernel power manager of an operating system .

The power policy module may be configured to maintain the power policy data structure by dynamically adding removing and or modifying power policies. In an example the power policy module may be configured to remove a power policy entry such as the power policy entry 3 . In another example the power policy module may be configured to add a new power policy entry to provide support for a power policy such as a new power policy 4 . In this way support for power policies may be dynamically provided with little to no modification to a power management application e.g. merely the power policy power policy data structure such as a table may be modified as opposed to updating code of the power management application such as a kernel power manager of an operating system .

The scenario evaluation component may be configured to perform a scenario evaluation for a computing environment e.g. a tablet a mobile phone a desktop computer etc. . The scenario evaluation component may evaluate status information provided by one or more activity components to determine whether the status information satisfies a scenario definition for a scenario e.g. a scenario defined within a scenario data structure . For example the scenario evaluation component may determine that a scenario A e.g. an audio but not video playback scenario may be activated based upon status information satisfying a scenario A definition where an audio driver activity component is activated a video renderer activity component is not activated etc.

The power policy module may be configured to identify a proposed power plan that is assigned to the scenario. For example the power policy module may consult a power policy data structure to identify that a power policy 5 is assigned to the scenario A . The power policy module may be configured to implement the power policy 5 based upon the scenario A being activated . For example an application a driver hardware an operating system component etc. may be invoked disabled throttled etc. to implement one or more power settings specified by the power policy 5 . In an example a power policy may comprise values that may be defined based upon for example various platform characteristics of the computing environment. For example a max CPU performance value may depend upon whether the device is a tablet a phone a laptop etc. e.g. first value for a tablet second value for phone third value for laptop etc. . In this manner depending upon variations among different computing environments there may be different power policies for a same scenario e.g. where variations among power policies are a function of differences between computing environments .

Still another embodiment involves a computer readable medium comprising processor executable instructions configured to implement one or more of the techniques presented herein. An example embodiment of a computer readable medium or a computer readable device that is devised in these ways is illustrated in wherein the implementation comprises a computer readable medium such as a CD R DVD R flash drive a platter of a hard disk drive etc. on which is encoded computer readable data . This computer readable data such as binary data comprising at least one of a zero or a one in turn comprises a set of computer instructions configured to operate according to one or more of the principles set forth herein. In some embodiments the processor executable computer instructions are configured to perform a method such as at least some of the exemplary method of for example. In some embodiments the processor executable instructions are configured to implement a system such as at least some of the exemplary system of for example. Many such computer readable media are devised by those of ordinary skill in the art that are configured to operate in accordance with the techniques presented herein.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

As used in this application the terms component module system interface and or the like are generally intended to refer to a computer related entity either hardware a combination of hardware and software software or software in execution. For example a component may be but is not limited to being a process running on a processor a processor an object an executable a thread of execution a program and or a computer. By way of illustration both an application running on a controller and the controller can be a component. One or more components may reside within a process and or thread of execution and a component may be localized on one computer and or distributed between two or more computers.

Furthermore the claimed subject matter may be implemented as a method apparatus or article of manufacture using standard programming and or engineering techniques to produce software firmware hardware or any combination thereof to control a computer to implement the disclosed subject matter. The term article of manufacture as used herein is intended to encompass a computer program accessible from any computer readable device carrier or media. Of course those skilled in the art will recognize many modifications may be made to this configuration without departing from the scope or spirit of the claimed subject matter.

Although not required embodiments are described in the general context of computer readable instructions being executed by one or more computing devices. Computer readable instructions may be distributed via computer readable media discussed below . Computer readable instructions may be implemented as program modules such as functions objects Application Programming Interfaces APIs data structures and the like that perform particular tasks or implement particular abstract data types. Typically the functionality of the computer readable instructions may be combined or distributed as desired in various environments.

In other embodiments device may include additional features and or functionality. For example device may also include additional storage e.g. removable and or non removable including but not limited to magnetic storage optical storage and the like. Such additional storage is illustrated in by storage . In one embodiment computer readable instructions to implement one or more embodiments provided herein may be in storage . Storage may also store other computer readable instructions to implement an operating system an application program and the like. Computer readable instructions may be loaded in memory for execution by processing unit for example.

The term computer readable media as used herein includes computer storage media. Computer storage media includes volatile and nonvolatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions or other data. Memory and storage are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM Digital Versatile Disks DVDs or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by device . Any such computer storage media may be part of device .

Device may also include communication connection s that allows device to communicate with other devices. Communication connection s may include but is not limited to a modem a Network Interface Card NIC an integrated network interface a radio frequency transmitter receiver an infrared port a USB connection or other interfaces for connecting computing device to other computing devices. Communication connection s may include a wired connection or a wireless connection. Communication connection s may transmit and or receive communication media.

The term computer readable media may include communication media. Communication media typically embodies computer readable instructions or other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. The term modulated data signal may include a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal.

Device may include input device s such as keyboard mouse pen voice input device touch input device infrared cameras video input devices and or any other input device. Output device s such as one or more displays speakers printers and or any other output device may also be included in device . Input device s and output device s may be connected to device via a wired connection wireless connection or any combination thereof. In one embodiment an input device or an output device from another computing device may be used as input device s or output device s for computing device .

Components of computing device may be connected by various interconnects such as a bus. Such interconnects may include a Peripheral Component Interconnect PCI such as PCI Express a Universal Serial Bus USB firewire IEEE 1394 an optical bus structure and the like. In another embodiment components of computing device may be interconnected by a network. For example memory may be comprised of multiple physical memory units located in different physical locations interconnected by a network.

Those skilled in the art will realize that storage devices utilized to store computer readable instructions may be distributed across a network. For example a computing device accessible via a network may store computer readable instructions to implement one or more embodiments provided herein. Computing device may access computing device and download a part or all of the computer readable instructions for execution. Alternatively computing device may download pieces of the computer readable instructions as needed or some instructions may be executed at computing device and some at computing device .

Various operations of embodiments are provided herein. In one embodiment one or more of the operations described may constitute computer readable instructions stored on one or more computer readable media which if executed by a computing device will cause the computing device to perform the operations described. The order in which some or all of the operations are described should not be construed as to imply that these operations are necessarily order dependent. Alternative ordering will be appreciated by one skilled in the art having the benefit of this description. Further it will be understood that not all operations are necessarily present in each embodiment provided herein.

Further unless specified otherwise first second and or the like are not intended to imply a temporal aspect a spatial aspect an ordering etc. Rather such terms are merely used as identifiers names etc. for features elements items etc. For example a first object and a second object generally correspond to object A and object B or two different or two identical objects or the same object.

Moreover exemplary is used herein to mean serving as an example instance illustration etc. and not necessarily as advantageous. As used herein or is intended to mean an inclusive or rather than an exclusive or . In addition a and an as used in this application are generally be construed to mean one or more unless specified otherwise or clear from context to be directed to a singular form. Also at least one of A and B and or the like generally means A or B or both A and B. Furthermore to the extent that includes having has with and or variants thereof are used in either the detailed description or the claims such terms are intended to be inclusive in a manner similar to the term comprising .

Also although the disclosure has been shown and described with respect to one or more implementations equivalent alterations and modifications will occur to others skilled in the art based upon a reading and understanding of this specification and the annexed drawings. The disclosure includes all such modifications and alterations and is limited only by the scope of the following claims. In particular regard to the various functions performed by the above described components e.g. elements resources etc. the terms used to describe such components are intended to correspond unless otherwise indicated to any component which performs the specified function of the described component e.g. that is functionally equivalent even though not structurally equivalent to the disclosed structure which performs the function in the herein illustrated exemplary implementations of the disclosure. In addition while a particular feature of the disclosure may have been disclosed with respect to only one of several implementations such feature may be combined with one or more other features of the other implementations as may be desired and advantageous for any given or particular application.

