---

title: Data mining and logic checking tools
abstract: Data mining and logic-checking tools provided by a service to a client organization enable fractal data comparison and analysis and a logic-based data derivation. The tools are configured to interface with websites which have data that typically is 1) required and missing from a client organization's database, 2) used to validate pre-existing data in a user's database, or 3) used to derive new data for a user's database. For data acquisition, the tools interface with sources of data which, typically, do not offer an application programming interface (API) for non-human access to the data. The tools may execute routines to validate the acquired data to ensure its completeness and logical accuracy as well as enrich the data with data from other sources or data that is derived from the acquired data. The processed data is organized and transformed into specified end states and routed to appropriate recipients.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361656&OS=09361656&RS=09361656
owner: 
number: 09361656
owner_city: 
owner_country: 
publication_date: 20130109
---
This application claims benefit of priority to U.S. Provisional Patent Application Ser. No. 61 584 483 filed Jan. 9 2012 entitled Data Gathering and Data Re Presentation Tool and U.S. Provisional Patent Application Ser. No. 61 584 497 filed Jan. 9 2012 entitled Data Mining and Logic Checking Tool the disclosure of which are incorporated by reference herein in their entirety with the same effect as if set forth at length.

The need for creditors to present debtors loan transaction ledgers or histories in a presentable understandable transferrable format is a common challenge. Unfortunately such data as presented by most conventional systems such as creditor loan accounting systems is very code intensive and not articulated for consumption by non technical recipients.

This Background is provided to introduce a brief context for the Summary and Detailed Description that follow. This Background is not intended to be an aid in determining the scope of the claimed subject matter nor be viewed as limiting the claimed subject matter to implementations that solve any or all of the disadvantages or problems presented above.

Data mining and logic checking tools provided by a service to a client organization enable fractal data comparison and analysis and a logic based data derivation. The tools are configured to interface with websites which have data that typically is 1 required and missing from a client organization s database 2 used to validate pre existing data in a user s database or 3 used to derive new data for a user s database. For data acquisition the tools interface with sources of data which typically do not offer an application programming interface API for non human access to the data. The tools may execute routines to validate the acquired data to ensure its completeness and logical accuracy as well as enrich the data with data from other sources or data that is derived from the acquired data. The processed data is organized and transformed into specified end states and routed to appropriate recipients in the client organization.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Like reference numerals indicate like elements in the drawings. Elements are not drawn to scale unless otherwise indicated.

The client organization will generally support a number of end users working on various client devices such as laptops terminals personal computers PCs and the like. A representative end user and a client device are respectively indicated by reference numerals and . The client device may couple to the network through a gateway or similar device. One or more proprietary databases are located in the client organization or are otherwise associated with the organization for example using remote or cloud based data storage paradigms. The databases typically contain financial data such as loan transaction ledgers or histories.

Third party databases i.e. databases which are not proprietary to the client organization are also part of the environment and accessible to the service over the network . The third party databases may in some instances contain data that has relevance to the client organization as described in more detail below. An exemplary third party database is one associated with the National Data Center NDC . Similarly the service may also access third party websites over the network . In some cases the third party websites may expose data that is relevant to the client organization . An exemplary third party website includes PACER Public Access to Court Electronic Records .

In this illustrative example as shown the set includes an automated tool for interfacing with databases of multiple systems as indicated by reference numeral . The set further includes an automated tool for recognizing and parsing of data and categorizing into generic transaction types . The set further includes an automated tool for editing and validating recognized translated and derived data . The set further includes an automated tool for identifying execution requirements to enrich acquired data with data from other sources and editing validating and logic checking other acquired data . The set further includes an automated tool for deriving data to fill gaps of required presentation data . The set further includes an automated tool for re organizing data and transforming data into end state formats . The set further includes an automated tool for formatting and routing of output .

In one particular example using tool data of interest is stored in the client organization s proprietary database such as one associated with a financial service provider for example the Mortgage Servicing Package MSP offered by Lender Processing Services LPS . The service navigates to the client organization s VPN using specifications provided in a client navigation table entry that is accessible by the service per agreement between the service and the client organization. The service logs into the VPN using specifications provided in a client security table entry. Upon verification of VPN access the service navigates to the client s MSP web service gateway again using specifications provided in the client navigation table entry.

Upon verification by the MSP web service gateway the service logs into the web service active channel using data from the client security table entry. Upon verification of web service active channel access the service constructs web service calls as needed to retrieve data for a customer view loan history using specifications from one or more client view data source table entries and the constructed web service calls are transmitted to the client organization. In response to the web service calls the service receives web service return data which is stored.

In this example using the returned data from the MSP system as described above additional data is acquired from the PACER system i.e. a third party website in including a case number and applicable Federal District Court. The service navigates to the appropriate PACER web pages using specifications from the client s navigation table entry. The service logs onto PACER using the client security table entry. The service captures one or more pages and after validating a correct destination from the client s navigation table entry downloads the captured data to storage.

Continuing with the example above using tool the data acquired from the PACER website is parsed. In this example the pertinent data from PACER is a bankruptcy filing date referred to here as the PACER BK FILED DATE . Here the tool employs the table of possible source data transaction types to verify that certain data is present in the HTML HyperText Markup Language code from the PACER pages. More specifically the verification comprises U.S. Bankruptcy Court being in the first line District of being in the second line and Bankruptcy Petition being in the third line where the blank spaces are filled in with data acquired from the client MSP system . If the data in those three lines is verified then the tool locates the Date filed string on the fourth line of the HTML code and captures the text following the string for example 05 18 2012 as the PACER BK FILED DATE. The table of generic translation of source data transaction types to external presentation transaction types is utilized in this example to tag the PACER BK FILED DATE as DATE. The table of external presentation specifications is utilized in this example to tag the PACER BK FILED DATE as OUT YYYYMMDD i.e. year month day .

Continuing with the example above the functionality exposed by tool validates that the acquired PACER BK FILED DATE which is specified in a client data format table as MM DD YYYY consists of NN NN NNNN i.e. 10 positions all numeric and special characters and converts the acquired data into date format. The functionality validates that the acquired BK FILED DATE meets each of the following 

The functionality validates the acquired date against all client view data specifications from a client view data source s table entry . Here the PACER BK FILED DATE must be less than or equal to 4 years prior to the data acquisition processing date. If not then a flag is set to LATE IN PLAN. If any of validations performed by functionalities and fails then the PACER BK FILED DATE is tagged as Failed Validation. If each of the validations is passed then the value of the PACER BK FILED DATE is written to the BK Filed Date Field.

In an illustrative example in the case of the PACER acquired data showing a Debtor Discharged Date or Co Debtor Discharged date being present Docket Report log entries are searched for discharged text. Log entries which include such text are searched to determine if acquired data from the MSP includes a Secured Creditor in the log text. If any log entries are found with a matching MSP acquired Secured Creditor then a flag is set to Discharged. If no log entries are found with MSP acquired Secured Creditor then a flag is set to Possibly Discharged Entry Requires Review. If no log entries are found with matching text discharged a flag is set to PACER Discharged Status No Discharge Docket Events. 

For deriving missing transaction data an example includes a transaction Total Amount 2 000.00 Principal Applied 150.00 Interest Applied 1 200.00 Escrow Applied 100.00 Restricted Escrow Applied 50.00 Suspense Applied 0.00. Using the routine described above this transaction would be tagged as Transaction Out of Balance. Such tag invokes an initiation of a Review Running Balances Routine where iteration is performed as necessary. This routine audits each running balance at each transaction point to determine if each transaction and each running balance cross foot. The routine iterates through and tallies discrepancies and makes them running finds and computes the possibility of allocating the finds against the out of balance conditions to work down the out of balance amounts and allocate them to the non cross footing transactions. All allocations are tagged as Derived by Review Running Balance Routine.

For deriving missing status data an example includes the PACER BK FILED DATE having been tagged as Failed Validation through application of the tool as described above. If the MSP BK FILED passes the validation routines then a Derive BK Filed Date From MSP BK Filed Date routine is executed where the MSP BK FILED DATE value is written to the BK Filed Date field.

Non standard outputs include client specified and or proprietary format specifications. Various adjustments of the editing validity checking and logic checking routines instantiated by the tools as described above may be performed to ensure compliance with the client specifications.

In this illustrative example as shown the set includes an automated tool for interfacing with websites as indicated by reference numeral . The set further includes an automated tool for downloading and capturing website page s . The set further includes an automated tool for parsing downloaded and captured data . The set further includes an automated tool for editing and validating recognized translated and derived data . The set further includes an automated tool for identifying execution requirements to enrich acquired data with data from other sources and editing validating and logic checking other required data . The set further includes an automated tool for deriving data to fill gaps of required presentation data . The set further includes an automated tool for executing fractal analysis and logical comparison routines related to specific activities . The set further includes an automated tool for determining disposition of end states . The set further includes an automated tool for re organizing data and transforming data into end state formats . The set further includes an automated tool for formatting and routing of output 

In one particular example using tool case data associated with a bankruptcy proceeding is acquired from PACER. The service navigates to PACER and to the appropriate PACER page s using specifications provided in a client navigation table entry. The service verifies that the expected page is reached using specifications from the client navigation table entry. If an expected page is not reached the service terminates navigation and re initiates as appropriate. If an expected page is reached the service proceeds with log in to PACER using the client security table entry. The service verifies that the expected page is reached using specifications from the client navigation table entry. If an expected page is not reached the service terminates navigation and re initiates as appropriate.

If an expected page is reached the service proceeds with presentation type recognition. Here the service verifies an expected page data presentation type using specifications from a data source attributes table entry. If the data presentation type is not validated then a Recognize Presentation Format routine is initiated as follows 

If the data presentation type is validated the service proceeds to match the presentation type to a capture download protocol using specifications from a data source presentation type capture protocol table entry and initiates capture download accordingly.

In an example using tool the table of source text and equivalent recognition triggers and codes specifies Begin delimiters and End delimiters. Here HTML data from PACER is verified by a routine as including U.S. Bankruptcy Court being in the first line District of being in the second line and Bankruptcy Petition being in the third line where the blank spaces are filled in with data acquired from the client MSP system. If the data is not verified then the routine is aborted and a flag is set on the dataset as UNVERIFIED DATA CAPTURE and tool is reinitiated to navigate to PACER anew.

If the data is verified a search is performed for Date filed on the fourth line of the HTML using a data dictionary coordinates table entry. If the target text is not found the entire page is searched for target data. If the target data is still not found a flag is set on the dataset as UNVERIFIED DATA CAPTURE REQUIRED DATA NOT PRESENT and the tool is reinitiated to navigate to PACER anew.

If the target data is found the tool searches for text following the found target text in the format NN NN NNNN i.e. 10 positions all numeric and special characters using a data dictionary attributes table entry. If the target data is not found a flag is set on the dataset as UNVERIFIED DATA CAPTURE REQUIRED DATA NOT PRESENT and the tool is reinitiated to navigate to PACER anew. If the target data is found but it does not match expected attributes then the data is stored as PACER BK FILED DATE and a flag is set as INVALID FORMAT AND POSITION. If the target data is found and matches expected attributes the data is stored as the PACER BK FILED DATE.

If the target text is found the tools searches for text following the found target text in the format NN NN NNNN. If the follow on text is not found a flag is set on the dataset as UNVERIFIED DATA CAPTURE REQUIRED DATA NOT PRESENT and the tool is reinitiated to navigate to PACER anew. If the follow on text is found but does not match expected attributes the data is stored as the PACER BK FILED DATE and a flag is set as INVALID FORMAT. If the follow on text is found and matches expected attributes the data is stored as the PACER BK FILED DATE.

In another example the PACER BK FILED DATE is specified to have attributes MM DD YYYY and the functionality applies verification criteria for component values present as follows 

In an example using the table of categorizations into generic transaction types for presentation to external sources if a data element is verified the service reformats a stored data element value to a specified format using a data dictionary attributes table entry. In this example the PACER BK FILED DATE element format attribute is DATE MM DD YYYY. Thus the value in the PACER BK FILED DATE field is reformatted from text 05 18 2012 to the Julian date 2456430.500000 

In an example using the functionality for storage to alternate handling table of unexpected data elements 

In an example using the table of external presentation specifications if a dataset flag is set as VERIFIED then alternate element attribute variable flags are applied using external presentation specifications flags from data dictionary attributes table entry to data elements in a dataset.

In an example using tool the functionality uses specifications from an order data parameters table entry 

Continuing with the example the functionality uses specifications from an order client level data parameters entry table 

Continuing with the example the functionality uses specifications from both an order client level data parameters entry table and specifications from an order data parameters entry table 

Continuing with the example the functionality uses specifications from an order data parameters table entry 

Continuing with the example the functionality applies similar validity checking as with the functionalities and with regard to data elements produced using tool as described in more detail below.

In an illustrative example in the case of an OUT OF RANGE FOR CLIENT ORDER a secondary data source is required for use in data verification data acquisition or for additional components for data derivation. Such secondary data source may be provided by a third party database using the tools and routines described in the text accompanying .

Continuing with the example in the case of missing trustee payment transactions the functionality implements the following routine 

Continuing with the example in the case where client data has the data element Claim Priority missing from PACER data the functionality implements the following routine 

In an example using tool non passed data fields indicating failed parameters may not necessarily indicate failed data for dates. Accordingly the functionality implements the following routine 

Continuing with the example functionality implements a routine in which the results from application of the routines implemented by functionalities and i.e. flags and tags and adjusted Routine Definition Attributes validation routines are employed to re execute Validation until end state parameters using end state applicable Routine Definition Attributes Criteria table entry are met. Functionality implements a routine in which Results which are acceptable but include gaps to required confidence using end state applicable Routine Definition Attributes Criteria table entry are flagged using end state applicable Routine Definition Attributes.

Several aspects of computing systems will now be presented with reference to various apparatus and methods described in the foregoing detailed description and illustrated in the accompanying drawing by various blocks modules components circuits steps processes algorithms etc. collectively referred to as elements . These elements may be implemented using electronic hardware computer software or any combination thereof. Whether such elements are implemented as hardware or software depends upon the particular application and design constraints imposed on the overall system. By way of example an element or any portion of an element or any combination of elements may be implemented with a processing system that includes one or more processors. Examples of processors include microprocessors microcontrollers digital signal processors DSPs field programmable gate arrays FPGAs programmable logic devices PLDs state machines gated logic discrete hardware circuits and other suitable hardware configured to perform the various functionality described throughout this disclosure. One or more processors in the processing system may execute software. Software shall be construed broadly to mean instructions instruction sets code code segments program code programs subprograms software modules applications software applications software packages routines subroutines objects executables threads of execution procedures functions etc. whether referred to as software firmware middleware microcode hardware description language or otherwise. The software may reside on a computer readable media. Computer readable media may include by way of example a magnetic storage device e.g. hard disk floppy disk magnetic strip an optical disk e.g. compact disk CD digital versatile disk DVD a smart card a flash memory device e.g. card stick key drive random access memory RAM read only memory ROM programmable ROM PROM erasable PROM EPROM electrically erasable PROM EEPROM a register a removable disk and any other suitable media for storing or transmitting software. The computer readable media may be resident in the processing system external to the processing system or distributed across multiple entities including the processing system. Computer readable media may be embodied in a computer program product. By way of example a computer program product may include a computer readable media in packaging materials. Those skilled in the art will recognize how best to implement the described functionalities presented throughout this disclosure depending on the particular application and the overall design constraints imposed on the overall system.

Although the subject matter has been described in language specific to structural features and or methodological acts it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims.

