---

title: Techniques for sharing application states
abstract: Techniques for sharing application states are disclosed. According to one aspect of the disclosure, the techniques include receiving a web resource identifier indicating a web address of a web server hosting a web application and including one or more parameters indicating a state of the web application. The techniques also include obtaining an instruction set for generating an application resource identifier, the instruction set being obtained based on a first portion of the web resource identifier. The techniques further include determining one or more parameter values based on the web resource identifier and the instruction set, and generating an application resource identifier based on the instruction set and the one or more parameter values, the application resource identifier being indicative of the state accessed via a native application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09553919&OS=09553919&RS=09553919
owner: Quixey, Inc.
number: 09553919
owner_city: Mountain View
owner_country: US
publication_date: 20130730
---
This U.S. patent application claims priority to U.S. Provisional Application 61 769 945 filed on Feb. 27 2013 the disclosure of which is considered part of the disclosure of this application and is hereby incorporated by reference in its entirety.

A uniform resource locator URL is a string of characters that defines a web address of a resource such as a server. A computing device can accesses the resource using the URL which is typically resolved to obtain an IP address of the resource. A URL can be static or dynamic. A static URL references a resource having a static state e.g. a webpage that does not change unless the changes are hard coded into the code of the webpage. In the event a resource referenced by a static URL is altered the static URL does not change. A dynamic URL references a resource having dynamic states. A webpage that is database driven or that executes a dynamic script can be referenced by a dynamic URL. For example a website that offers database driven search functionality may receive search terms from a requesting computing device and provide search results corresponding to the search terms in a dynamic webpage e.g. a webpage having contents that depend on one or more changing parameters including the search terms. The dynamic URL of such a webpage may include a static portion that references the web server that hosts the webpage and a dynamic or variable portion that describes or references the parameters that were used to generate the contents of the dynamic webpage.

Dynamic URLs allow users to direct other users to a specific state of a resource. For example if a first user accesses a search engine and searches for Thai restaurants the search engine may utilize parameters such as the search terms and a location of the user s computing device to generate the search result. The search results may display results that include Thai restaurants that are in the vicinity of the first user and may generate a dynamic URL that includes the parameters used to determine the search results. In this way the first user can send the dynamic URL to a second user who can view the same search results by having a web browser access a webpage using the dynamic URL. In response to the web browser transmitting a web request to the web server referenced in the static portion of the dynamic URL the web server can perform a search using the parameters identified in the variable portion of the dynamic URL and can provide the search results to the web browser.

Mobile computing devices such as smartphones tablets and wearable computers are quickly becoming the primary devices which users access network resources e.g. web servers and application servers. Further many entities are developing multi platform applications that allows users of mobile computing devices as well as stationary computing devices to access the functionality of the application in varying computing environments. A multi platform application can include one or more native applications and one or more web applications. Native applications are applications that are stored and executed at least in part by a mobile or stationary computing device. A web application is an application that is executed at least in part by a web server and accessed by a web browser of a computing device. For instance a developer of a multi platform application can develop native applications designed to be executed by one or more specific operating systems e.g. iOS by Apple Inc. and ANDROID by Google Inc. and a web application that is executed by a web server and accessed by a web browser of a computing device such that the native applications and the web application offer the same or similar functionality. Thus in some implementations the term multi platform application may not reference an actual application but rather a group of actual applications e.g. native applications and web applications.

By way of a web browser of the computing device the user accesses a corresponding web application. In this scenario the web browser can transmit a web request that includes the search terms and any other additional parameters to a web server which in turn responds to the web request by providing search results which are displayed in the web browser. The search results when displayed in the browser may be referenced by a dynamic uniform resource locator URL whereby the parameters used to determine the search results are indicated in the dynamic URL. In the illustrated example both the application server and the web server may query a search database with one or more of the received parameters to determine the search results.

The present disclosure relates to techniques for sharing application states between computing devices. For example in the example of a user of the computing device may wish to share the search results obtained by the native application i.e. the state of the native application with another user. In some implementations the state of an application is shared in the form of resource identifiers. A resource identifier can include a reference to a native application or a web server that serves a web application and a state of the application such that the state of the application can be accessed from the native application and or the web application. As used herein the term resource identifier can be any character based numeric and or alphanumeric string that indicates a multi platform application a native application a web application and or any other type of application. Examples of resource identifiers include application resource identifiers and web resource identifiers. An application resource identifier includes a reference to a native application and the state of the application. A web resource identifier includes a web address of a web server hosting a web application and the state of the application. An example of a web resource identifier is a dynamic URL. In some implementations the state of an application can be defined by one or more parameter values that that are indicative of the state. For example in the context of a search application the parameter values that define the state can include the search terms and a location of the requesting computing device . In the context of a media player application the parameter values can include a username a playlist and or a media file being played. It is noted that the present disclosure relates to any type of multi platform application having states that can be represented by one or more parameter values.

In operation the user of the sending computing device may desire to share a current state of a native application or a web application. The user can command the sending computing device to capture the current state of the native application or the web application. The user can command the sending computing device to transmit the state to another user or the receiving computing device . For example the user can command the sending computing device to email SMS message or otherwise transmit the state of the native or web application to the other user or the receiving computing device . In response to such a command the sending computing device generates a link to a resource identifier server . The link can include a web address of the resource identifier server and information corresponding to the multi platform application and a state thereof. In some implementations the link is a dynamic URL whereby the static portion of the dynamic URL is the web address of the resource identifier server and the variable portion contains the information. The information can include a reference to the multi platform application and one or more parameters indicative of the state. Examples of a reference to the multi platform application can include a name of the multi platform application a pseudonym of the multi platform application an abbreviation of the multi platform application a domain name associated with the application and or a code that uniquely identifies the multi platform application from other multi platform applications. The one or more parameters indicative of the state vary depending on the application. For example the state of a search based application could include search terms a username of the user a location of the sending computing device and or any other suitable parameters. The state of a video game may include a username a current level and or any other suitable parameters. The state of a music sharing application could include a playlist identifier names of songs in a playlist a username and or any other suitable parameters.

The sending computing device can capture the state in any suitable manner. In some implementations the operating system of the sending computing device may include an application programming interface API command that allows a native application or a web browser to capture its current state upon receiving such a request from a user. When invoked the operating system the native application or the web browser may capture the current parameters of the application which are then encoded into the link . The API may define a specific format of the link such that all links are generated in a consistent manner.

The sending computing device can then transmit the link to the user e.g. email or the receiving computing device e.g. SMS message . It is noted that transmission to the user includes transmission to an account associated with the user such that the account is accessible from any number of computing devices. While the link is shown as being directly communicated to the receiving computing device there may be additional devices such as email servers SMS servers satellites and or various networks that may facilitate the transmission of such links to the receiving computing device . Additionally or alternatively the link may be communicated directly to the receiving computing device via a short range transmission protocol such as Bluetooth or near field communication NFC .

The receiving computing device receives the link and transmits a resolution request to the resource identifier server the web address of which is provided in the link . The resolution request can include the information that was provided in the link such as the reference to the multi platform application and the one or more parameters defining the captured state of the application. As used herein the term resolution request can include any request to the resource identifier server that requests one or more resource identifiers and that references an application e.g. multi platform application a native application or a web application and the state of the application. The reference to the application and the state of the application may be determined from the link .

The resource identifier server receives the resolution request and determines a plurality of resource identifiers corresponding to the multi platform application based on the information contained in the resolution request . In some implementations the resource identifier server determines one or more application resource identifiers and one or more web resource identifiers . An application resource identifier can include a reference to a native application and the one or more parameters indicating the captured state of the multi platform application. The web resource identifier includes a web address of a web server that hosts the web application and the one or more parameters indicating the captured state. In some implementations the web resource identifier is a dynamic URL. The resource identifier server further determines an instruction set . The instruction set includes instructions that command the receiving computing device to access one of the native application and the web application. For example the instruction set may cause the receiving computing device to first try to open the native application and if the native application is not found to then try to access the web application at the web server . The resource identifier server transmits the application resource identifier the web resource identifier and the instruction set to the receiving computing device .

The receiving computing device receives the application resource identifier the web resource identifier and the instruction set and accesses the application in accordance with the instruction set . If the instruction set instructs the receiving computing device to first attempt to access the native application the receiving computing device attempts to launch the native application indicated in the application resource identifier . If successful the receiving computing device may have to provide the one or more parameters to an application server to access the previously captured state on the native application. Some native applications however may not require access to an application server such that the captured state can be accessed off line by the native application using the one or more parameters. If the receiving computing device is unable to launch the native application the receiving computing device may provide a web request to a web server that includes the one or more parameters based on the web resource identifier. For example if the web resource identifier is a dynamic URL the web browser of the receiving computing device may access the web server indicated in the dynamic URL according to known protocols.

An illustrative example of the system A according to some implementations of the present disclosure is now described. According to the example the user of the sending computing device is executing a music player native application called ZYXplayer. In this example the functionality of ZYXplayer may also be leveraged via a web application that is served from a web server located at the web address www.ZYXplayer.com. If the user wants to send a playlist to which he is currently listening to another user the user can command the ZYXplayer native application to capture the current state of the application. The ZYXplayer native application can capture the state of the ZYXplayer including for example a username of the user e.g. JohnDoe and a playlist identifier e.g. playlist number . The ZYXplayer native application or the operating system of the sending computing device can then generate a link to the resource identifier server based on the application and the state of the application. For example if the resource identifier server has a domain name of www.appURL.org the link to the resource identifier server can be http www.AppURL.org mpappinfo application zyxplayer username JohnDoe play listid 1234. The user can command the sending computing device to transmit the link to the other user or the receiving computing device of the other user. For example the user can cut and paste the link into an email or a SMS message or may command the ZYXplayer native application to directly send the link to the user or the receiving computing device .

The receiving computing device receives the link and transmits a resolution request to the resource identifier server . In this example the resolution request can include a reference to ZYXplayer a username parameter of JohnDoe and a playlist parameter of 1234. In some implementations the resolution request can include additional information such as the operating system type of the receiving computing device .

The resource identifier server generates two or more resource identifiers based on the information received in the resolution request. The resource identifier server can generate one or more application resource identifiers that identify known ZYXplayer native applications and one or more web resource identifiers that identify ZYXplayer web applications. For instance the resource identifier server can generate the following example application resource identifiers ZYXplayer iOS username JohnDoe playlist 1234 and ZYXplayer ANDROID username JohnDoe playlist 1234. In this example the application resource identifiers reference iOS and ANDROID versions of the native application. In some implementations however the resource identifier server may be configured to generate only a single application resource identifier corresponding to the operating system of the receiving computing device . The resource identifier server further generates the following example web resource identifier http www.ZYXplayer.com state username JohnDoe playlistid 1234. In this way the resource identifier server has generated resource identifiers that the receiving computing device can utilize to access the functionality of the ZYXplayer multi platform application to obtain playlist 1234 of JohnDoe.

The resource identifier server is further configured to determine an instruction set to send to the receiving computing device . In this example the instruction set may be a set of JavaScript instructions instructing the receiving computing device to determine its operating system and then open the native application identified by the application resource identifier corresponding to its operating system. The instruction set may further instruct the receiving computing device to transmit a web request to the web address identified in the web resource identifier if the receiving computing device is unable to open the native application.

The resource identifier server transmits the application resource identifiers the web resource identifier and the instruction set to the receiving computing device . The receiving computing device can execute the instruction set thereby first attempting to launch the ZYXplayer native application. If the receiving computing device successfully launches the ZYXplayer native application the receiving computing device can then attempt to retrieve playlist 1234 of JohnDoe from the ZYXplayer application server . If however the receiving computing device is unable to launch the ZYXplayer native application then the receiving computing device may launch the web browser if not already launched and transmit a web request to a web server located at the address http www.ZYXplayer.com such that the web request includes the username and the playlist identifier parameters. In response to the web request the ZYXplayer web server can provide playlist 1234 of JohnDoe in the ZYXplayer web application.

The foregoing examples are provided for example only and not intended to be limiting. The systems A B C D and E can be configured to allow sharing the application states of any type of application. Furthermore the application resource identifiers the web resource identifiers and the instructions set are provided for example only and not intended to limit the scope of the disclosure.

The processing device includes one or more physical processors and one or more computer readable mediums e.g. read only memory and or random access memory that store computer readable instructions that are executed by the one or more processors. In implementations where the processing device includes two or more processors the processors can execute in a distributed or individual manner. The processing device can execute the operating system of the computing device . The operating system can execute a web browser and one or more native applications . The operating system is further configured to handle input output to from the user interface and the communication device . The operating system can also manage the storage of data on the memory device .

The user interface can include one or more devices that provide output to a user and or receive input from the user. The user interface can include but is not limited to one or more of a touchscreen a touchpad a keyboard a mouse a display device a microphone and or a speaker.

The communication device includes one or more suitable devices configured to send and receive data via a network. The communication device can perform wireless or wired communication using any known or later developed communication standards. In some implementations the communication device can include one or more antennas configured to perform wireless communication using the IEEE 802.11 wireless protocol and or one or more antennas configured to perform wireless communication according to any of the mobile telecommunication technology standards e.g. 2G 3G or 4G. In some implementations the communication device includes one or more ports for performing wired communication. The communication device enables the computing device to communicate with application servers web servers the resource identifier server and any other network device.

The memory device can include one or more storage mediums. Examples of storage mediums can include but are not limited to hard disk drives optical disk drives and flash memory. The memory device can store the computer readable instructions that comprise the native applications as well as any other suitable data.

In operation the operating system receives a link from another device. As was previously discussed the link is received in for example an email an SMS message or in a stand alone application. Upon receiving the link the operating system may automatically open the link in the web browser or the user may select to open the link via the user interface .

The web browser parses the link and identifies the domain name of the resource identifier server and the information including a reference to the multi platform application and one or more parameters indicating the state of the application. The web browser then transmits a resolution request to the resource identifier server . The web browser generates the resolution request such that the reference to the multi platform application and the one or more parameters indicating the state of the application are included in the resolution request. In response to the resolution request the web browser receives two or more resource identifiers e.g. an application resource identifier and a web resource identifier and the instruction set . As previously discussed the instruction set can be a set of JavaScript instructions that indicate an order for accessing one of the native application and the web application. For example the JavaScript instructions may cause the web browser to first attempt to launch the native application indicated in the address resource identifier . When the web browser successfully launches the native application the web browser can pass the one or more parameters in the application resource identifier to the native application. The web browser however may be unsuccessful in attempting to launch the native application if the computing device does not have a version of the native application installed thereon. If the web browser was unable to launch the native application the instruction set may command the web browser to request the web application from the web server indicated in the web resource identifier . In some implementations the instruction set may further command the web browser to display an option to the user to purchase or otherwise obtain the native application. The instruction set may instruct the web browser to perform other actions not explicitly mentioned. Furthermore the instruction set does not need to be executed by the web browser rather the instruction set may be executed by the operating system or a native application . It is noted that while a web browser is depicted and described any suitable client that can connect to a web server or an application server can be implemented on the computing device of .

The computing device of is provided for example only and is not intended to limit the scope of the disclosure. Variations of the computing device are contemplated and are within the scope of the disclosure.

At operation the computing device receives a link to a resource identifier server . The link may be received in a communication to a user e.g. an email or to the computing device e.g. a SMS message or may be received by the web browser in for example a web page. The link may be or may include a dynamic URL such that the domain name portion of the dynamic URL references the resource identifier server and the portion following the domain name includes a reference to the multi platform application and the one or more parameters indicating the state of the application.

At operation the web browser or the operating system transmits a resolution request to the resource identifier server . The resolution request includes the reference to the multi platform application and the one or more parameters indicating the state of the application. In some implementations the resolution request can further include the type of operating system being executed by the computing device . Transmission of the resolution request may be initiated by a user via the user interface of the computing device or automatically by the operating system or the web browser .

At operation the web browser or the operating system receives one or more application resource identifiers one or more web resource identifiers and an instruction set from the resource identifier server . As discussed previously the application resource identifiers may include an identifier of a native application and the one or more parameters used to access the state of the application. In some implementations each application resource identifier may further include the type of operating system for which the identified native application is configured. Additionally or alternatively each application resource identifier may include a version of the native application. For example if the native application is offered in a free version and a pay version one of the application resource identifiers may identify the free version of the native application and another of the application resource identifiers may identify the pay version of the native application.

The web resource identifiers may include a web address of a web server that serves the web application and the one or more parameters used to access the state of the application. In some implementations each web resource identifier is a dynamic URL such that the one or more parameters used to access the state are included in the variable portion of the URL. It is noted that the web resource identifier may alternatively or additionally include an IP address of the web server that hosts the web application. In scenarios where the web application can be accessed from a mobile website and a full version website a first web resource identifier can indicate the web address corresponding to the mobile website and a second web resource identifier can indicate the web address corresponding to the full version website.

The instruction set can include instructions providing the web browser or the operating system with an order by which to access the native application and the web application. For example the instruction set can instruct the web browser to first try to launch the pay version of the native application then to attempt to launch the free version if the operating system is unable to launch the pay version of the native application. In this scenario the instruction set may define the order for opening the application resource identifiers . Similarly the instruction set can instruct the web browser to determine the operating system type and to open the application resource identifier corresponding to the native application configured for the same type of operating system. The instruction set may further instruct the web browser to access a web application if the operating system is unable to launch the native applications. In some implementations the instruction set is JavaScript code or other code in another interpreted programming or scripted language. In some implementations the instruction set is code in a compiled language.

At operation the web browser or the operating system accesses one of the native application and the web application based on the instruction set and the received resource identifiers. For example the web browser may execute the instruction set e.g. the JavaScript code and try to launch a native application. If successful the web browser may pass the one or more parameter values included in the application resource identifier to the launched application. If unsuccessful the web browser may be instructed to launch the web application. In this scenario the web browser provides a network request to the web server indicated in the web resource identifier the network request including the one or more parameters indicating the state of the application. By executing the instruction set the computing device is able to access the functionality of the multi platform application at the state that was initially indicated in the link .

The method is provided for example only and not intended to be limiting. Variations of the method are contemplated and are within the scope of the disclosure. For example the method may be varied such that the computing device does not actually provide the resolution request to the resource identifier server . In such implementations the sending computing device may provide the resolution request to the resource identifier server and the computing device receives the application resource identifiers web resource identifiers and the instruction set from the resource identifier server or from the sending computing device .

Referring now to an example of the resource identifier server is illustrated. While one resource identifier server is shown the term resource identifier server refers to one or more physical machines operating in an individual or distributed manner. In the illustrated example the resource identifier server includes but is not limited to a processing device a communication device and a memory device . The processing device can execute a request parsing module and an identifier generation module . The memory device can store a conversion library .

The processing device includes one or more physical processors and one or more computer readable mediums e.g. read only memory and or random access memory that store computer readable instructions that are executed by the one or more processors. In implementations where the processing device includes two or more processors the processors can execute in a distributed or an individual manner.

The communication device includes one or more suitable devices configured to send and receive data via a network. The communication device can perform wired and or wireless communication using any known or later developed communication standards.

The memory device can include one or more storage mediums. Examples of storage mediums can include but are not limited to hard disk drives optical disk drives magnetic tape drives and flash memory. As mentioned the memory device stores the conversion library . The conversion library can store templates or transforms for generating resource identifiers. A template can define the structure of a resource identifier corresponding to a native or web application and includes one or more parameter fields accepted by the application and that are populated by parameter values. For instance a template for generating an application resource identifier for the ZYXplayer native application may have the following format ZYXplayer username playlist where and are the parameter fields that are populated with actual parameter values. Similarly the template for generating a web resource identifier corresponding to the ZYXplayer web application may have the following format http www.ZYXplayer.com username playlistid . In some implementations the templates may include rules which define various attributes of the template or the parameter values of the fields. For example a rule may define the acceptable values of a particular parameter. It is noted that the templates or transforms may be broken up into prefix portions and the dynamic portions or web tail portions. Furthermore the formats provided by the disclosure are provided for example only and not intended to limit the scope of the disclosure.

Each application developer of a multi platform application can register data corresponding to the multi platform application including the templates for generating resource identifiers the rules for using the templates and additional metadata corresponding to the multi platform application. For example an application developer may register a name of the multi platform application a format of an application resource identifier a format of a web resource identifier the name of the native application as it is to appear in an application resource identifier the operating systems on which the native application is configured to execute the domain name of a web server that serves the web application the different types of parameters that can be included in a resource identifier and or the acceptable variable types of the different types of parameters. In some implementations the conversion library is implemented as a database such that the conversion library is searchable at least by multi platform application name. In response to receiving a query for a particular multi platform application the conversion library can return rules and or templates for generating the resource identifiers for the particular multi platform application.

In some implementations the conversion library may further store instruction sets or instruction set templates for generating instruction sets . In these implementations each developer may provide instructions for accessing the state of the multi platform application. For example each developer may submit JavaScript code that defines how a web browser or operating system is to access the state of the multi platform application. In these scenarios the instruction set can be stored in conversion library and may be linked to the entry for its corresponding multi platform application. In some implementations the instruction set is a generic set of instructions that can be used for any multi platform application. Pseudo code examples of a generic instruction set are provided below 

In another example the resource identifier server may determine multiple application resource identifiers such that each application resource identifier corresponds to a different operating system type. A pseudo code example for this scenario is provided below 

The foregoing pseudo code examples are provided for example only and not intended to be limiting. The examples may be implemented as instruction sets in any suitable programming or scripting language.

In operation the request parsing module receives a resolution request from a computing device via the communication device . In response to receiving the resolution request the request parsing module extracts the reference e.g. name of the multi platform application and the one or more parameters from the resolution request.

The identifier generation module generates application resource identifiers and web resource identifiers . In some implementations the identifier generation module obtains the reference to the multi platform application and the one or more parameters from the request parsing module . The identifier generation module queries the conversion library with the reference to the multi platform application. The conversion library returns templates corresponding to the multi platform application. In some implementations the conversion library returns a template for each possible resource identifier that can be generated for a particular multi platform application. For instance if the ZYXplayer application includes native applications for iOS and ANDROID the conversion library may return a first template for generating an application resource identifier for an iOS version of the native application a second template for generating an application resource identifier for the ANDROID version of the native application and a third template for generating a web resource information for the web application version of the ZYX player application. Alternatively the conversion library may return a single template for an application resource identifier whereby the identifier generation module can generate multiple application resource identifiers by populating a parameter field defining the operating system type with the various operating systems on which the native application can execute. Upon obtaining the templates the identifier generation module generates the various resource identifiers by populating the parameter fields of the templates with the one or more parameter values extracted from the resolution request.

The identifier generation module can further determine the instruction set to transmit with the resource identifiers. The instructions set may be a generic instruction set or an instruction set specific to the multi platform application. Furthermore in some implementations the identifier generation module may be configured to insert the one or more address resource identifiers and the one or more web resource identifiers into the instruction set . The identifier generation module can transmit the one or more application resource identifiers the one or more web resource identifiers and the instruction set to the requesting computing device via the communication device .

The resource identifier server of is provided for example only and is not intended to limit the scope of the disclosure. Variations of the resource identifier server are contemplated and are within the scope of the disclosure.

At operation the request parsing module receives and parses the resolution request . As previously discussed the resolution request includes information defining a reference to the multi platform application and the one or more parameters indicating the state of the application. The request parsing module can identify the reference to the multi platform application as well as the one or more parameters which it can provide to the identifier generation module .

At operation the identifier generation module obtains templates for generating the resource identifiers. The identifier generation module can query the conversion library with the reference to the multi platform application. The conversion library returns templates corresponding to the multi platform application and in some embodiments rules applying to the templates.

At operation the identifier generation module generates at least one application resource identifier and at least one web resource identifier based on the information and the templates. As previously discussed each template includes at least one parameter field. Thus the identifier generation module populates the parameter fields of each retrieved template with the one or more parameter values received in the resolution request . In the scenario where an application developer offers native applications which execute on different operating systems the identifier generation module can generate more than one application resource identifier such that each application resource identifier corresponding to a different version of the native application. Similarly where an application developer maintains a mobile website and a full version website the identifier generation module may generate a first web resource identifier corresponding to the mobile website and a second web resource identifier corresponding to the full version website.

At operation the identifier generation module determines the instruction set for accessing the state of the multi platform application. As previously discussed the instruction set may be a generic instruction set pertaining to any number of multi platform applications. In these implementations the identifier generation module retrieves the generic instruction set from the memory device . In implementations where each instruction set is configured for a particular multi platform application the identifier generation module may retrieve the instruction set pertaining to the multi platform application from for example the conversion library . In some implementations the identifier generation module may further insert the generated resource identifiers into the instruction set .

At operation the identifier generation module transmits the one or more application resource identifiers the one or more web resource identifiers and the instruction set to the computing device .

The method of is provided for example only and not intended to be limiting. Furthermore variations of the method are contemplated and are within the scope of the disclosure. For example the method can be modified to be executed on a user computing device . In such implementations the user computing device can receive the reference to the multi platform application and the one or more parameters from a sending computing device and may generate the resource identifiers off line. In such implementations the conversion library and the identifier generation module may be executed by the processing device of the computing device .

As previously discussed a user computing device or may be configured to determine resource identifiers corresponding to an application state. For example illustrates a user computing device that is configured to determine one or more resource identifiers corresponding to an application state. In these implementations the user computing device can execute a client e.g. a web browser or an application resource identifier client. The user computing device can receive a reference to a multi platform application and one or more parameters indicating a state of the application. In some implementations the reference and the parameters can be received in the form of a dynamic URL. The user computing device can determine an application resource identifier based on the reference and the parameters . For example the computing device may receive a reference to the ZYXplayer application and one or more parameters. Based on the reference a client of the computing device can generate an application resource identifier and launch the ZYXplayer native application.

In some of these implementations the user computing device can transmit a web request to a web server indicated by the reference . The web request can include a path of an instruction set e.g. JavaScript code in the file system of the web server . In response to receiving the web request the web server provides the instruction set stored at the location indicated by the path to the user computing device . The user computing device receives the instruction set and generates the application resource identifier based on the instruction set and the received parameters . The user computing device can then attempt to access the application using the application resource identifier or the web resource identifier.

The instruction set may provide a transform that includes a format or a template for generating an application resource identifier. Further the transform can include a format or template for generating a web resource identifier. A transform can be an object that includes the formats or templates for generating the resource identifiers. For example a transform may include a template for generating application resource identifiers including how to parse the parameters from a web resource identifier and format the parameters into an application resource identifier. The instruction set can also include the following fields a name of the application a web prefix corresponding to the web application a native prefix corresponding to the native application a title of the transform a description of the transform of a home page that identifies a web resource identifier of a home page for the applications an icon identifier that identifies an icon image for an underlying application and various edition data. The web prefix can provide the root of a web resource identifier e.g. the domain name corresponding to the web application. In some implementations the web prefix can match the resource identifier to which the web request is transmitted. The native prefix is the root of the application resource identifier. The native prefix indicates the native application that is to be launched. The edition data may include a download resource identifier indicating the page where users can download the application the operating systems that various editions of the native application have been programmed for names of each edition and an icon resource identifier for each edition.

At operation the user computing device receives a web resource identifier. The web resource identifier may be received from another user computing device or from a remote server e.g. a search engine. The web resource identifier can include a web address of a web server and one or more parameters indicating a state of an application. For example the user computing device may receive a web resource identifier of a micro blogging application for grape related topics e.g. http grapes.example.com concord.html u Jenny c red. In this example the micro blogging application is also accessible via a native application.

At operation the web browser can generate a web request to the web address of the web server. The web request can include a path to an instruction set. For example the web browser may include the path appurl.json in the web request such that the web resource identifier of the instruction set is a static URL in the form of http grapes.example.com appurl.json. It is noted that in some implementations web servers may reserve a predetermined path to the instruction set e.g. appurl.json such that the instruction set of any web server can be accessed at domain name appurl.json.

At operation the web browser receives an instruction set from the web server. As previously mentioned the instruction set may include a web prefix a native prefix and one or more transforms. In the example of the grape micro blogging application the instruction set may include the following 

At operation the web browser identifies the parameters in the web resource identifier based on the instruction set. In some implementations the web browser identifies the domain name portion of the web resource identifier based on the web prefix field contained in the instruction set. The remaining portion of the web resource identifier e.g. the dynamic portion of the web resource identifier or the web tail can be isolated from the domain name portion. The web browser can scan the web tail of the web resource identifier to determine the various parameter values based on the format of a web tail portion of the web resource identifier defined in the transform. In the continuing example the web browser can infer that the grape micro blogging application receives a page parameter a color parameter and a user parameter. Furthermore in the received web resource identifier the parameter values are page concord color red and user Jenny. 

At operation the web browser can generate an application resource identifier based on the instruction set and the one or more parameters. The web browser can replace the dynamic portion of the web resource identifier with the native prefix of the application. In the continuing example the web browser can replace http grapes.example.com with grapes.example.com pages . Put another way the web browser can generate the static portion of the application resource identifier based on the native prefix defined in the instruction set. The web browser can insert the parameter values into the format of the web tail portion of the native application defined in the transform. Continuing the example from above the web tail portion of the native application may be in the form of concord Jenny col red. The web browser can generate the application resource identifier by amending the web tail to the native prefix. In this example the application resource identifier is grapes.example.com pages concord Jenny col red. 

At operation the web browser accesses the application at a state indicated by the one or more parameters. The web browser may first attempt to launch a native application using the application resource identifier. If unsuccessful the web browser can access the web application using the received web resource identifier. In some implementations the instruction set can include the order by which the web browser attempts to access the application. For example if the transform includes more than one native prefixes e.g. transforms of different editions of the native application then the instruction set may include instructions for attempting to launch a first native application e.g. a pay version of the application before attempting to launch a second native version e.g. a free version of the application and if both attempts are unsuccessful to access the web application.

It is noted that while the techniques described with respect to are described with respect to a user computing device the techniques may also be implemented by the resource identifier server . Furthermore while the operations of are described with respect to a web browser it is noted that the operations may be performed by any suitable client. For instance the operations may be performed by an application resource identifier client that is configured to open application resource identifiers.

As was described in some implementations a client on a computing device receives instructions e.g. a json file for generating an application resource identifier. In these implementations the instructions can be delivered from the web server of the application provider as discussed in the implementations of or can be delivered from a third party e.g. the resource identifier server of .

It is noted that the present disclosure further relates to broadening the current resource identifying schemes to include native applications. In this way operating systems may implement http triggered application launching. According to http triggered application launching the operating system may be configured to automatically launch an application without performing a transformation. For example in the Android operating system an application configured for Android can utilize the intents feature to perform http triggered application launching. In another example applications programmed for the BlackBerry application can register invocation filters to perform http triggered application launching. In this way a single referencing scheme e.g. static and dynamic URLs can be used to launch native applications akin to the way a client uses a static or dynamic URL to visit a web page.

Various implementations of the systems and techniques described here can be realized in digital electronic and or optical circuitry integrated circuitry specially designed ASICs application specific integrated circuits computer hardware firmware software and or combinations thereof. These various implementations can include implementation in one or more computer programs that are executable and or interpretable on a programmable system including at least one programmable processor which may be special or general purpose coupled to receive data and instructions from and to transmit data and instructions to a storage system at least one input device and at least one output device.

These computer programs also known as programs software software applications or code include machine instructions for a programmable processor and can be implemented in a high level procedural and or object oriented programming language and or in assembly machine language. As used herein the terms machine readable medium and computer readable medium refer to any computer program product non transitory computer readable medium apparatus and or device e.g. magnetic discs optical disks memory Programmable Logic Devices PLDs used to provide machine instructions and or data to a programmable processor including a machine readable medium that receives machine instructions as a machine readable signal. The term machine readable signal refers to any signal used to provide machine instructions and or data to a programmable processor.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Moreover subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of data processing apparatus. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter effecting a machine readable propagated signal or a combination of one or more of them. The terms data processing apparatus computing device and computing processor encompass all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. A propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.

A computer program also known as an application program software software application script or code can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio player a Global Positioning System GPS receiver to name just a few. Computer readable media suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user one or more aspects of the disclosure can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display monitor or touch screen for displaying information to the user and optionally a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

One or more aspects of the disclosure can be implemented in a computing system that includes a backend component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a frontend component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such backend middleware or frontend components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some implementations a server transmits data e.g. an HTML page to a client device e.g. for purposes of displaying data to and receiving user input from a user interacting with the client device . Data generated at the client device e.g. a result of the user interaction can be received from the client device at the server.

While this specification contains many specifics these should not be construed as limitations on the scope of the disclosure or of what may be claimed but rather as descriptions of features specific to particular implementations of the disclosure. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multi tasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

A number of implementations have been described. Nevertheless it will be understood that various modifications may be made without departing from the spirit and scope of the disclosure. Accordingly other implementations are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

