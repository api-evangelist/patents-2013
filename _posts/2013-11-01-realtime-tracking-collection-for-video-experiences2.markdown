---

title: Real-time tracking collection for video experiences
abstract: Methods and systems for tracking events associated with use of video content are disclosed. A method collects events associated with use of video content at a computing device. In response to determining that a tracking interval has elapsed, the method optimizes the collected events by grouping similar events together, serializes the optimized events by structuring the optimized events in a defined format, and creates a tracking call to send the serialized events to a remote computing device. A system determines setup parameters for tracking collection on a client computing device, the setup parameters comprising an error tracking parameter, and setup check and tracking intervals. The system periodically receives serialized event data from a client device in accordance with the tracking interval, the event data having been collected in response to occurrences of tracked events associated with use of video content at the client device, the video content including an advertisement.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09635398&OS=09635398&RS=09635398
owner: Adobe Systems Incorporated
number: 09635398
owner_city: San Jose
owner_country: US
publication_date: 20131101
---
This disclosure relates generally to computer implemented methods and systems for tracking use of video content and more particularly relates to tracking video playback experiences in real time.

Video content can be distributed from a provider or publisher as video on demand VOD time shifted television live television media such as a digital video disc DVD motion pictures distributed to theaters as digital video signals and as electronic content distributed to computing devices. Video content can be broadcast over the air as digital signals transmitted via satellite and streamed downloaded and uploaded via communications networks such as the Internet.

Given the broad distribution of such video content and growing proliferation of viewing and playback devices for viewing such video content publishers and distributors of video content often need to know how video environments infrastructures and video experiences are behaving in order to take needed actions in the shortest time interval. For example publishers need real time information in order to take actions to alter a quality of service QoS for video content as it is being viewed. Also in the context of video advertising publishers often need information regarding current use of video content to take actions related to a monetization approach or advertising strategy for the video content.

Current solutions for video tracking such the Quality of Experience QoE service from Conviva a content delivery network CDN service from Akamai Inc. and analytics services from Google Inc. either do not provide real time video tracking or are limited as to the type of information and events that are tracked. These prior solutions do not address both quality of service and monetization. Traditional video tracking techniques address quality of service and monetization using separate systems interfaces and software products. These prior solutions do not provide an all inclusive solution for real time tracking of playback of video content.

In one embodiment a method for tracking events associated with video content includes collecting event data for a plurality of events associated with use of a rendition of video content at a computing device. In response to determining that a defined tracking interval has elapsed the method then optimizes the collected event data by grouping events having similar event data serializes the optimized event data by structuring the optimized event data in a defined format and creates a tracking call configured to send the serialized event data to another computing device remote from the computing device.

These illustrative features are mentioned not to limit or define the disclosure but to provide examples to aid understanding thereof. Additional embodiments are discussed in the Detailed Description and further description is provided there. Advantages offered by one or more of the various embodiments may be further understood by examining this specification or by practicing one or more embodiments presented.

Methods and systems are disclosed for efficiently tracking video playback experiences in real time. The methods and systems provide real time information regarding behaviours of video environments infrastructures and video experiences. This information can be used for example by a publisher in order to take actions regarding quality of service QoS and monetization of video content within short time intervals as the video content is being used. Exemplary methods and systems disclosed herein allow publishers to quickly take appropriate actions regarding a desired QoS and a monetization approach for their video content based on real time tracking of playback of the video content.

Embodiments disclosed herein provide automated and semi automated methods and systems for real time and near real time collection of tracked events associated with playback of multimedia assets such as video content and advertisements i.e. ads included within video content. Embodiments track objects and events related to monetization such as but not limited to presentations of and interactions with linear advertisements overlay advertisements and other types of advertisements in video content being viewed. Although exemplary computer implemented methods and systems are described herein in the context of online video content it is to be understood that the systems and methods can be applied to other multimedia assets such as but not limited to video on demand VOD assets i.e. pay per view movies and rental assets subscription video on demand SVOD assets live broadcasts currently airing or future scheduled linear broadcasts of television programs simultaneous broadcasts simulcasts movies shown in theaters physical media such as digital video discs DVDs and software programs such as video games.

One embodiment provides a system that automates providing publishers with information such as the quality of service and monetization for video content in real time. This information can be provided to multiple teams or entities to enable them to take informed actions related to a given video playback experience. For example the system can provide a network operation team or network administrator with information regarding the current quality of service QoS for a network connection being used to access and view a video asset. Also for example the system can simultaneously provide a marketing team with optimal locations within video content to insert advertisements while the video content is in use. The system can simultaneously provide information to marketing staff regarding current revenue and budgets for video advertising campaigns in addition to other real time monetization information.

Embodiments enable stakeholders such as publishers network operation teams marketing teams business intelligence teams and other entities to have current accurate information regarding video playback experiences for video assets of interest.

Exemplary techniques efficiently track and collect information regarding playback of video assets i.e. main video content playback playback of advertising i.e. ads playback and quality of service. Events and information tracked for main video content can include a video start time or event i.e. video start completion of video playback i.e. video complete and a viewing time i.e. time played . Video start information can include a timestamp corresponding to when playback of a video commenced. Video complete information can include a timestamp or other indication that a user has completed playback of a video. In embodiments time played information can represent a duration that a user has been viewing a video asset i.e. the elapsed time between a video start and a current time. In certain embodiments the time played can account for pauses or interruptions to the video playback.

Ad playback information can include for example ad start information for an advertisement an ad complete status or time and revenue information associated with an advertisement. In an embodiment ad start information for a linear or overlay advertisement can indicate a time mark or frame where an advertisement started within a video asset. In the case of interactive advertisements ad start information can include a timestamp corresponding to when a user began playback of a particular advertisement. Other ad playback information can include events related to hypervideo or hyperlinked video advertisements. Hypervideo advertisements can be embodied as displayed video streams containing embedded selectable or actionable i.e. user clickable anchors. Ad playback information for such hypervideo advertisements can include events corresponding to a selection or click of an anchor. Ad complete information can indicate a frame time marker or timestamp corresponding to when an advertisement placed within a video asset was completed. Revenue information can include financial data related to an advertisement such as costs per placement i.e. cost for each insertion into a video asset costs per impression i.e. cost per presentation or viewing remaining budget for an advertisement or campaign and sales corresponding to an advertisement i.e. sales resulting from conversions click throughs or other user interactions with an advertisement impression .

Quality of service QoS information can indicate real time metrics for buffering bitrate switching and errors related to viewing streaming downloading or other access of a video asset via a network.

As a result of collecting the above described information regarding video playback ad playback and QoS metrics exemplary methods and systems provide metrics such as but not limited to concurrent streams peak concurrent streams ad impressions ad drop off revenue buffering impacted streams average bitrate and error rate for a video asset. In embodiments the real time video tracking disclosed herein can be implemented inside a software as a service SaaS application such as for example as Adobe SiteCatalyst. This embodiment provides real time client side web analytics data together with the tracked and collected video playback QoS and monetization events.

Embodiments collect optimize serialize and send events related to video streaming and analytics from complex video and analytics systems. Such systems can comprise the following main components a client component where a video player resides and a server side where multiple other components make video analytics and reporting possible. The client component can be configured to perform data collection and generate the tracking calls needed for the data collection. Certain embodiments use a client component which can be a client side application that implements a video player. The video player can be accessed via a network such as the Internet i.e. a web application or a native client application executing locally on a client device. In embodiments the video player includes or is formed from components including a video playback engine and an ad insertion mechanism see for example core player and ad insertion mechanism in . In the non limiting embodiments shown in a video player includes a core player implemented and built using the Adobe Primetime software development kit SDK and the ad insertion mechanism uses Adobe Auditude advertisement insertion classes. For example the tracking collection techniques described herein can be made available as a service for real time video tracking by the Adobe Primetime SDK. Also for example the ad insertion mechanisms described herein can use the Adobe Auditude video advertising platform.

Exemplary embodiments provide video specific actionable predictive intelligence about viewer engagement i.e. audience engagement for video content and monetization regarding ads included in the video content. By performing tracking collection on a substantially real time basis embodiments enable users to quickly identify effectiveness and profitability of video advertising strategies. For example by providing audience segment traffic on a near real time basis the systems and methods described herein enable users to quickly identify high value viewers and determine when viewers such as web site visitors are navigating away from video content as the navigation occurs. Exemplary embodiments produce real time reports and render user interfaces that enable users to efficiently identify success metrics for online video publishing and advertising. The user interfaces can include real time dashboards graphically depicting audience engagement information across multiple video assets and ads. The interfaces provide real time insight into which viewers are watching video content and what actions and events are occurring for live video content as it is being viewed. Exemplary systems render real time dashboards displaying integrated QoS metrics that provide information on upstream origination services from video encoders packagers and originators as well as information regarding stream quality bandwidth and drop offs. Such QoS metrics enable network administrators and operators to proactively address potential performance issues in near real time in order to reduce the likelihood of more severe performance problems. Embodiments provide substantially simultaneous access to real time events and metrics to both network operators and analytics systems. These embodiments can provide the event data and metrics to analytics systems such as for example Adobe Analytics. Certain embodiments allow historical analysis to be performed in an integrated data platform including real time and historical event data and metrics that are made available and tailored to network operations staff as well as marketing advertising analyst teams.

In certain embodiments advertisements can be selected from a plurality of advertisements provided by one or more advertisement networks. In one embodiment an advertisement network can comprise three general categories of entities 1 content providers distributors and other entities who create and offer video content collectively publishers 2 advertisement providers advertisers promoters advertising distributors and other entities who are the source of advertisements collectively advertisers and 3 viewers subscribers consumers theaters and other entities who request receive and or watch video content offered by publishers collectively viewers .

One embodiment provides an administrator user interface UI that publishers and advertisers can use to upload video content advertisements and associated metadata into the system. In an embodiment the administrator UI can be used to set and update setup parameters for real time video tracking. In certain embodiments references to the video content are provided via the administrator UI instead of full copies of the content. As used herein the term metadata is used to refer to information associated with and generally but not necessarily stored with electronic content items such as video content and advertisements that provides information about a property of the electronic content item. Metadata may include information uniquely identifying an electronic content item. Such metadata may describe a storage location or other unique identification of the electronic content item. For example metadata describing a storage location of video content may include a reference to a storage location of a copy of the video content in a server system used by publishers advertisers and users. One example of such a reference is a Uniform Resource Locator URL identifying the storage location on a web server associated with a publisher s web site. Such references can be provided by publishers as an alternative to uploading a copy of the video content to the system via the administrator UI.

An embodiment of the system includes a repository such as a data store or database for storing the uploaded advertisements the video content or references thereto and their metadata. An example database is described below with reference to . The metadata can include characteristics and properties of assets such as video content and advertisements. The video content properties can include but are not limited to genre category rating duration color palette scheme resolution format language options captioning options publisher cast director date timestamp information playback restrictions markers for temporal locations of advertising breaks compatible supported rendering viewing platforms and other properties of video content. Some video content properties such as a genre or publisher can apply to an entire video asset while other properties are relevant to certain portions or frames of the video asset. For example metadata useful for inserting advertisements in video content such as cut points scene changes opening credits closing end credits and similar information does not apply to every frame in a given video asset. Similarly format properties can indicate whether all or a portion of a video asset is two dimensional 2D or three dimensional 3D . Playback restriction properties can include regional or age based restrictions as well as restrictions on a number of viewings or a time limit for viewing i.e. for VOD and rented video content . For a rented video asset a playback restriction property can indicate the length of a video asset rental as a duration i.e. 24 hours . The compatible supported rendering viewing platform properties can indicate minimum requirements for viewing the video content such as supported resolutions compatible video players and supported client device platforms. For example these properties can indicate a minimum display resolution display size operating system OS version and or player browser version needed to play the video content.

Some or all of the video content and ad properties can be in the form of metadata included as tags keywords data carrying icons or markers stored within video content and advertisements. For example the metadata can be included outside of visible areas of frames of the video content and advertisements. Non limiting examples of metadata for electronic content items can include a title author keywords and the like. Metadata may also describe a relationship between video content and advertisements such as how the video content and the advertisements can be combined to create renditions of video content including the advertisements. Metadata can also describe when and how an electronic content item was created such as information identifying application used to create the item a timestamp a file type encryption status and other technical information for the item and or access rights for the item. In certain embodiments the metadata can include rendering attributes and their values for video content or an advertisement. For example if a rendering attribute is included in metadata for video content the metadata can also include a value for that rendering attribute specific to rendering the content via a video player application that the content is to be viewed with. Depending on the encryption status and or access rights video content may be transmitted to from the publisher via secure network connections or data links. Non limiting examples of such secure connections include connections made using the Secure Sockets Layer SSL protocol or the Transport Layer Security TLS protocol. As would be understood by those skilled in the relevant art s SSL and TLS connections are made via cryptographic protocols to provide communication security over data networks such as the Internet. In additional or alternative embodiments properties can be stored separately from the video content in a repository such as database which is described below with reference to .

The ad properties can include but are not limited to product service category duration target demographic target region color palette scheme translucency shape format size dimensions resolution language options date timestamp information monetary cost per placement monetary cost per mille thousand impressions CPM number of prior insertions placements budget expiration and other metadata about the advertisement. The format properties can indicate whether the video content and the advertisement is 2D or 3D. In cases where the format of advertisement is 3D the dimension property includes a depth of the advertisement. The size and dimension properties can be in terms of pixels. In embodiments a number of placements can be expressed as a number of times the advertisement has been inserted in video content and this property in combination with the monetary cost per placement and or budget properties can be used to determine if there is any remaining budget for inserting the advertisement into video content. The expiration property can be embodied as an expiration date in order to determine if an advertisement is still available for insertion into video content. For example if an advertisement includes time sensitive information such as information pertaining to a scheduled event such as but not limited to a sale occurring within a date time range a time sensitive promotion a product release date a television program debut a theatrical movie release or a temporary offer the expiration property can be set accordingly so that the advertisement is not inserted into video content after a certain date or time.

According to an embodiment when a user requests video content offered by a publisher who is a member of the advertisement network a rendition of the requested content with advertisements from an advertiser in the network is delivered to the user. The user can request the video content via a smart TV a set top box STB or a video player application such as the exemplary video player described below with reference to . In one embodiment the user can request and view video content in the video player executing on a client device having a display. The video player can have a video player UI that users can interact with to select preview and view video content. The selected video content can be downloaded or streamed to a client device where video player is executing. For example in the context of online video content when a user requests video during a visit to a publisher s web site that user will receive some advertisements.

The ad provider i.e. an advertiser organization government agency television network VOD supplier or other entity wishing to convey information via an advertisement can publicize and promote items indicated in advertisements. For example in embodiments where the ad provider is an advertiser the advertiser can increase awareness of a service product or brand offered for sale. As would be understood by those skilled in the relevant art s this increased awareness can correspond to increased sales of the service product or branded items indicated in the advertisement. In embodiments ad providers can be video content providers such as but not limited to television networks web sites VOD suppliers and movie film studios who wish to place advertisements promoting their television programs online video content and films.

The video content provider i.e. a distributor publisher or web site can receive revenue from the ad provider for displaying the ad provider s advertisement in video content offered by the video content provider. In turn this revenue stream can allow video content providers to offer consumers such as subscribers and viewers of the video content additional services. These additional services can include more video content reduced price or free content and or content with increased quality. Where the video content is provided online as electronic content increased quality can be embodied as a higher resolution rendition of the video content and or a rendition of the video content without some linear advertisements. In embodiments the revenue stream from advertisements enables video content providers to reduce prices for video content. For example reduced price or free renditions of iTunes videos iTunes apps and games containing video content pay per view video assets such as movies and television programs Amazon Video On Demand assets and VOD video content can be offered to consumers. Embodiments address issues related to tracking and collecting events related to playback of video content and advertisements inserted into the video as a result of resolving an advertisement request. In the examples of an ad resolver can be invoked to find the most suitable advertisement s for video content requested by a client device and then an ad insertion mechanism can retrieve and insert the advertisement s into the video content as it is being played in a video player . Embodiments address important aspects in online advertising e.g. collecting event data that can be used to decide what sum an ad provider or advertiser will pay for a selection i.e. a click on an interactive advertisement. This can be addressed through a bidding process e.g. bidding on objects to be placed in video content and or by using ad properties pertaining to budget such as monetary cost per placement and or cost per mille cost per thousand advertising impressions CPM for an advertisement.

As used herein the term video content refers to any type of audiovisual media that can be displayed or played on computing devices via video player applications television devices projection television systems digital video recorder DVR devices DVD devices game consoles computer implemented video playback devices mobile multimedia devices mobile gaming devices and STB devices. An STB can be deployed at a user s household to provide the user with the ability to control delivery of video content distributed from a provider. Video content can be electronic content distributed to computing devices via communications networks such as but not limited to the Internet.

Video content including advertisements selected by the exemplary ad resolver and inserted by the exemplary ad insertion mechanism see e.g. ad resolver and ad insertion mechanism in disclosed herein can be previewed selected and viewed by various video player applications devices and platforms used to select and view video content. Such devices can be components of platforms including personal computers smart phones personal digital assistants PDAs tablet computers laptops digital video recorders DVRs remote storage DVRs interactive TV systems and other systems capable of receiving and displaying video content and or utilizing a network connection such as the Internet. An exemplary interactive TV system can include a television or other display device communicatively coupled to an STB. With reference to exemplary client device can include without limitation a display device and an Internet Protocol IP based i.e. IPTV STB. As shown in another exemplary client device can be embodied as a tablet computing device and yet another exemplary client device can be embodied as a smartphone. References to a client device or video player should therefore be interpreted to include these devices and other similar systems involving display of video content and viewer input.

Video content can be in the form of electronic content streamed from a server system to a web enabled television i.e. a smart television a projection television system or a client computing device. Streaming electronic content can include for example live and on demand audiovisual content provided using a streaming protocol such as but not limited to Internet Protocol television IPTV real time messaging protocol RTMP hypertext transfer protocol HTTP dynamic streaming HDS HTTP Live Streaming HLS and Dynamic Adaptive Streaming over HTTP MPEG DASH . A server system can provide multiple renditions of video content having different quality levels and language options such as captioning or audio dubbing.

Computer implemented systems and methods are disclosed for real time collection and tracking of events related to playback of video content and advertisements included within the video content. In embodiments advertisements can include text multimedia or hypervideo content. An interactive user interface UI for an application executed at a computing device can be used to view reports summarizing collected tracked events and properties associated with video content. As used herein the terms real time real time near real time and substantially real time are used to refer to processing performed within strict time constraints. For example in embodiments real time tracking and collection of events can be performed as the events occur without a perceivable delay after the occurrence of the events.

As used herein the term electronic content is used to refer to any type of media that can be rendered for display played on or used at a computing device television or other electronic device. Computing devices include client and server devices such as but not limited to servers desktop computers laptop computers smart phones video game consoles smart televisions tablet computers portable gaming devices personal digital assistants etc. Electronic content can include text or multimedia files such as images video audio or any combination thereof. Electronic content can be streamed to downloaded by and or uploaded from computing devices. Electronic content can include multimedia hosted on websites such as web television Internet television standard web pages or mobile web pages specifically formatted for display on computing devices. Electronic content can also include application software developed for computing devices that is designed to perform one or more specific tasks at the computing device. Electronic content can be delivered as streaming video and as downloaded data in a variety of formats such as for example a Moving Picture Experts Group MPEG format an Audio Video Interleave AVI format a QuickTime File Format QTFF a DVD format an Advanced Authoring Format AAF a Material eXchange Format MXF and a Digital Picture Exchange DPX format. Electronic content can also include application software that is designed to perform one or more specific tasks at a computing system or computing device.

As used herein the term rendition is used to refer to a copy of video content provided to a video player or client device. Different renditions of electronic content can be encoded at different bit rates and or bit sizes for use by client devices accessing electronic content over network connections with different bandwidths. Different renditions of the video content can include different advertisements for viewing on client devices located in different regions. Renditions of video content can vary according to known properties of a video player application a client device hosting the video player application and or stream network connectivity information associated with the client device. For example a video asset can include multiple renditions of the video as separate video clips where each rendition has a different quality level associated with different bit rates.

As used herein the term asset is used to refer to an item of electronic content included in a multimedia object such as text images videos or audio files. As used herein the term image asset is used to refer to a digital image included in a multimedia object. One example of an image asset is an overlay advertisement. As used herein the term video asset is used to refer to a video file included in a multimedia object. Video content can comprise one or more video assets. Examples of video assets include video content items such as online videos television programs television broadcasts simulcasts movies VOD videos and SVOD videos and video games. Additional examples of video assets include video advertisements such as linear and hypervideo advertisements that can be inserted into video content items. As used herein the term text asset is used to refer to text included in a multimedia object. Exemplary advertisements can be embodied as a text asset an image asset a video asset or a combination of text image and or video assets. For example advertisements can include a text asset such as a name of a company product or service combined with an image asset with a related icon or logo. Also for example advertisements can include video assets with animation or a video clip.

For simplicity the terms multimedia asset video asset online video content and video content are used herein to refer to the respective video assets or video contents regardless of their source i.e. publisher advertiser or distributor distribution means i.e. web site download broadcast live streaming content delivery network CDN simulcast or theatrical release format i.e. MPEG high definition 2D or 3D or playback means i.e. video player executing on a client device browser executing on a computing device television projection system or DVD player used to view such files and media. For example where the publisher of a video asset is a television network movie film studio or production company the video asset can be a television program or motion picture. Renditions of this video asset can be embodied as streaming or downloadable online video content available from a web site of the publishers or a distributor s web site. Another rendition of the video asset can also be made available as video content on media such as a DVD a DVR recording or VOD obtained via an STB and viewed on a television.

As used herein the term network connection refers to a communication channel of a data network. A communication channel can allow at least two computing systems to communicate data to one another. A communication channel can include an operating system of a first computing system using a first port or other software construct as a first endpoint and an operating system of a second computing system using a second port or other software construct as a second endpoint. Applications hosted on a computing system can access data addressed to the port. For example the operating system of a first computing system can address packetized data to a specific port on a second computing system by including a port number identifying the destination port in the header of each data packet transmitted to the second computing system. When the second computing system receives the addressed data packets the operating system of the second computing system can route the data packets to the port that is the endpoint for the socket connection. An application can access data packets addressed to the port.

Referring now to the drawings is a block diagram illustrating components of an example tracking collection system implementing certain embodiments. The example system includes a server configured to perform server side processing in response to inputs and data received from client devices via a network . In accordance with embodiments server is not a single physical server machine or platform but is instead implemented using separate servers tied together through network such as network . For example server can be implemented as a cluster of servers systems and platforms. In the non limiting example depicted in server can be part of a cluster including ad platform and content management system CMS . As shown ad platform includes an ad resolver in charge with resolving advertisement ad requests and CMS manages a database storing video content assets and ads and server cluster hosts an analytics module and is configured to receive events via tracking calls from client devices . In one embodiment server functions as a tracking server that receives and stores data related to tracked objects and events. In alternative embodiments analytics module can be part of a separate analytics server system or platform not shown such as for example Adobe Analytics. Such an analytics platform can provide publishers distributors and advertisers with means for measuring analyzing and optimizing distribution of video and advertisement assets based on data integrated from online video across multiple distribution channels. In alternative embodiments shown in the server side ad resolver can work in conjunction with a client side ad resolver component and an ad insertion mechanism to resolve ad requests and insert ads. In additional or alternative embodiments besides being hosted on advertising platform server side ad resolver can be hosted on a separate advertising system or platform not shown that serves ad assets to be inserted into video assets .

Tracking collection system and server provide a platform for tracking collection for respective video experiences on a plurality of client devices so that events are serialized and sent from client devices to server in near real time. Client devices are configured to perform client side tracking and collection of events and properties. Embodiments of the engines modules and components shown in can be configured to collect and report tracked events for any type of asset including video assets such as for example online video live video VOD assets SVOD assets currently airing or future scheduled linear broadcast television programs simultaneous broadcasts simulcasts streaming video and advertisements inserted into such video assets. The advertisements can include any electronic content that can be inserted into video assets such as but not limited to linear advertisements overlay advertisements and hypervideo advertisements.

As shown in client devices can each include a processor communicatively coupled to a memory . As shown tracking collection system includes server client devices a content delivery network and a network . Client devices are coupled to server via network . Processors are each configured to execute computer executable program instructions and or accesses information stored in respective ones of memories . Server includes a processor communicatively coupled to a memory . Processor is configured to execute computer executable program instructions and or accesses information stored in memory . Processors and shown in may comprise a microprocessor an application specific integrated circuit ASIC a state machine or other processor. For example processor can include any number of computer processing devices including one. Processor can include or may be in communication with a computer readable medium. The computer readable medium stores instructions that if executed by the processor cause one or more of processors and to perform the operations functions and steps described herein. When executed by processor of server or processors of client devices the instructions can also cause one or more of processors and to implement the modules applications and engines shown in . When executed by one or more of processors of client devices the instructions can also cause processor to render the user interface and reports shown in on respective ones of display devices 

Client devices may also comprise a number of external or internal devices including input devices such as a mouse keyboard buttons stylus touch sensitive interface. Client devices can also comprise an optical drive such as a CD ROM or DVD drive a display device audio speakers one or more microphones or any other input or output devices. For example depicts the client device having a processor a memory and a display device . A display device can include but is not limited to a screen integrated with a client device such as a liquid crystal display LCD screen a touch screen or an external display device such as a monitor.

For simplicity an exemplary video player and components of a real time tracking collection engine are shown in as being hosted on client device . It is to be understood that in embodiments each of the client devices include respective video players and real time tracking collection engines . Similarly each of the real time tracking collection engines can include the collector optimizer serializer and sender components shown in as being included in the real time tracking collection engine installed on client device

As shown client devices each include respective display devices . Client devices can render assets such as video content and advertisements in the video player shown in . Client devices can also render the video overview user interface UI shown in . Client devices can include one or more software modules or applications to configure their respective processors to collect optimize serialize and send respective events associated with video content assets provided by CMS via CDN and network . Such modules and applications can configure the processor to send an event associated with playback of video content being displayed on display device . For example client device hosts a real time tracking collection engine including modules for collecting and sending events to server . As shown the exemplary real time tracking collection engine includes a collector an optimizer a serializer and a sender .

Although depicts collector optimizer serializer and sender as separate modules one or more of these modules can be included as a software module of a single application. Similarly while database is shown in as being hosted locally on CMS in alternative embodiments database can be hosted on an external server not shown remote from CMS . For example database can be hosted on a dedicated database server accessible from CMS via CDN or network . Tracking collection system stores assets such as video content and advertisements as well as additional information such as video and advertisement metadata in database . Some of the additional information may be explicitly specified or input when publishers and ad providers i.e. advertisers upload video content and advertisements to ad platform . For example titles descriptions and tags keywords can be entered by publishers and advertisers at upload time. Descriptions of exemplary functionality of analytics module and ad resolver are provided in the following paragraphs.

According to an embodiment analytics module is configured to perform a set of event tracking and processing operations for a given set of events associated with playback of video content assets in substantially real time as the events are received at server from client devices . In one embodiment certain event processing operations are performed at defined intervals as events are sent from client devices in specified intervals in order to optimize use of processing and memory capacity from processor and memory . According to embodiments a chained list of events for the client devices can be stored in memory or in database .

In accordance with an embodiment analytics module aggregates events and metrics to create analytics reports and user interfaces UIs such as the exemplary reports and UI shown in . Analytics data aggregated and tabulated by analytics module can be used by ad resolver in order to find advertisements that are most related to requested video content i.e. advertisements that best fit the video content .

In one exemplary implementation ad resolver evaluates criterion to determine the degree to which the selected video content and an ad fit together. On example criteria is semantic similarity between the selected video content and advertisements. Semantic similarity can be based at least in part on keywords and other metadata associated with video content and advertisements and stored in database . Advertisers may insert keywords along with their advertisements in order to express their preference toward having their advertisements placed in video content related to certain subject matter. Semantic similarity can be evaluated in order to try to match advertisements and video content based on their respective tags keywords and other content properties because semantically related advertisements are more likely to be of interest to a certain viewer.

In an embodiment ad resolver is invoked to resolve an ad request triggered when a user selects a particular video asset or video content for viewing. The selection can be made for example in the user interface of video player executing at client device via interaction with a remote control or other input device at an STB. Video content can also be selected and requested for viewing at a tablet client device via interaction with video player controls rendered on touch screen display device and or via a button input device . Similarly video content can be requested at a smartphone client device via interaction with video player controls rendered on touch screen display device and or by using button input device or other user input received at a client device via other input devices such as for example a keyboard mouse stylus track pad joystick or remote control. The selection is then sent as a request from the client device to CDN via network . In embodiments when a request for a selected video asset is received at CDN or a request for an ad asset is received at ad platform ad resolver queries database to find advertisements to be inserted into the requested video content. In this embodiment the query results in indications of the advertisements and their properties being returned to ad resolver where the query includes indications of at least some properties of at least one of the selected video content the requesting client device the video player and a user associated with the client device . Based at least in part on properties of advertisements returned by database and properties of the requested video content ad resolver can also determine some appropriate spatial locations i.e. coordinates within zones or regions of the viewable video content and temporal positions i.e. starting ending points in frames of the video content to insert the advertisements. One example of temporal positions for ads is a defined advertisement break.

Ad resolver is configured to resolve ad requests corresponding to asset requests received at CDN and or CMS . The ad resolution performed by ad resolver can be conceptualized as an ad matching process that is based in part on properties of requested video assets and ad assets stored in database . For example ad matching can be based in part on video segmentation wherein the structure of the video content and other useful information is extracted from video content at upload time. In one embodiment such information can be stored in database . In response to receiving an ad request from a client device ad platform and its ad resolver can determine advertisements and a quality level for a rendition of a video asset to be made available to video player . Ad resolver can apply one or more of video ad matching criterion to identify ad assets deemed relevant to the requested video content. In certain embodiments properties of the requesting client device can also be used by ad resolver to select ads. For example if a particular client device is a mobile device ads related to mobile device s products and services can be inserted into the event provided to the client device . Also for example in response to determining that a requesting client device is located in a given geographic region or physical location i.e. based on a Global Positioning System GPS location of the client device a media access control MAC address of the client device a network address of the client device or other identifying information CDN in conjunction with ad platform and CMS can provide the requested video content with advertisements deemed pertinent to the determined location or time zone. Server can also determine an ideal quality level for a rendition of a video asset based at least in part on determining current communication capabilities network connectivity QoS i.e. buffer rate bitrate download speed and or a hardware profile of the requesting client device .

The ad resolver can resolve ad requests and match ads to video assets based on properties of the ad and of the video content the ad is to be placed in. The ad resolver can retrieve and update advertisement data stored in database . According to embodiments the advertisement data can indicate properties such as one or more of a number of placements for each advertisement an ad category a cost per mille cost per thousand advertising impressions CPM a duration a remaining budget and a remaining number of placements for ads.

With continued reference to an advertiser can interact with a user interface not shown rendered on a display device to upload an ad to ad platform for storage in database . In additional or alternative embodiments ads are uploaded to a separate ad server see ad server in . In an embodiment an advertiser user interface UI allows an advertiser to upload a new advertisement along with ad properties such as keywords representing the desired context or video content in which the ad should appear. Advertisements uploaded via advertiser UI can be interactive in that they can include a selectable hyperlink with a target URL that a viewer can click on while playing video content including the advertisement. For such interactive advertisements the ad properties entered via advertiser UI can include the target URL associated with a supplier of a product brand or service indicated in the interactive advertisement. For example a viewer using an input device can interact with a video player to click on an interactive advertisement in order to navigate to the target URL in a new browser tab window or session. After an advertisement has been uploaded metadata with properties i.e. features of the uploaded advertisement can be extracted by ad platform which then stores the extracted ad properties in database .

Server can read metadata for the received video content that applies to the entire video in order to categorize the content. For example genre resolution format access control rating and duration properties of the received video content can be indexed and stored in a database with a reference to the video content so that the videos having a certain category can be quickly retrieved from database as needed. In embodiments when ad resolver needs to match an ad that is appropriate to a certain type of video segment the video properties data stored in database CMS can be used to quickly locate clips within video content matching the desired criteria. For example ad resolver can match ads appropriate for a sports video clip having a certain duration that is rated for viewing on a video player in a certain region by a user in a given age group to video content meeting these criterion using ad and video properties data stored in database . Sever can also read and store more granular metadata for uploaded video content that does not apply to every segment portion or frame of the video content. Such granular metadata can for example can pertain to properties useful for tracking collection such as indications of ad breaks and frames including cut points or scene changes.

Users of the tracking collection system can include video content publishers ad providers i.e. advertisers and viewers i.e. end users of video content . Once a publisher uploads video content to CMS the video content is added to database as a new video asset along with metadata such as but not limited to a brief description title and tags keywords for the uploaded video content. The keywords can be used by ad resolver for selecting appropriate ads to be subsequently inserted into video content. Ads can be inserted into a video asset by the video player on a client device see e.g. ad insertion mechanism shown in .

In one embodiment a cluster including CMS and ad platform provides a platform where publishers upload video content such as their video assets and advertisers upload advertisements such as their linear and overlay advertisements. Tracking collection system can be configured to provide via CDN video assets and advertisement assets to be inserted into the video content to end users or consumers who view video content in a video player . In this embodiment ad resolver automatically handles ad selection for a requested video asset . Such ad selection can be performed in response to an ad request received for example as an asset request at ad platform . The ad request can be implicit in that it is not explicitly requested by a viewer or user of a video player but is instead implicitly sent based on properties of video content requested by the user. Implicit ad requests can also be based at least in part on one or more of properties of a video player properties of a client device and properties of a user associated with the client device . In an alternative embodiment ad resolution may be done externally on a remote system or server through a bidding process where an advertiser specifies how much he would pay to have his ad shown in certain video content. According to this alternative embodiment the ad matching can be based at least in part on a profile of a user who selects particular video content for viewing within video player .

A user can preview select and watch videos along with inserted advertisements using the video player . In one embodiment video player is embodied as browser with a UI configured to render on display device a video content web site that allows visitors to the web site to navigate browse and search a list of videos. Delivery of the selected video content and the advertisements determined by ad resolver can be accomplished via streaming downloading or pushing i.e. podcasting the content to video player and use of an ad insertion plug in. When a user requests video content to be viewed on video player the video and ad properties data stored in database can be used by ad resolver to match the requested video with corresponding advertisements and to identify a good location to place the matched advertisements such as for example defined ad breaks in a video asset . In one embodiment a user executing video player on client device interacts via input devices to control playback of a currently selected video and inserted ads.

In an embodiment client devices comprise one or more video navigation devices such as but not limited to an input device configured to interact with browser based UI of a video player a touch screen display device and an STB. Exemplary STB client device can include without limitation an Internet Protocol IP based i.e. IPTV STB. Embodiments are not limited to this exemplary STB client device interfacing with network and it would be apparent to those skilled in the art that other STBs and video navigation devices can be used in embodiments described herein as a client device including but not limited to personal computers mobile devices such as smart phones laptops tablet computing devices DVD devices or other devices suitable for rendering video assets on display device . Many additional client devices and tablet computing client devices and smartphone client devices can be used with tracking collection system although only one of each such client device is illustrated in . In an embodiment a client device may be integrated with a display device so that the two form a single integrated component. Client devices can include any suitable computing devices for communicating via network and executing video player .

Embodiments of tracking collection system allow for efficient and substantially real time event tracking and collection by periodically invoking optimizer which in turn calls serializer and sender in order to send events from client devices to server in specified intervals. For example a scheduled task or job could be run each 10 seconds or in other periodic increments to send tracked events and properties from client devices to server . The periodic job could identify collected properties and events related to use i.e. playback of video content and ads included in such content in order to provide real time analytics data to analytics module . In alternative or additional embodiments analytics module can be part of a separate analytics server system or platform not shown such as for example Adobe Analytics. Such a platform can provide publishers distributors and advertisers with means for measuring analyzing and optimizing distribution of assets and advertisements based on data integrated from online video across multiple distribution channels. Such analytics data can be used by server to quickly identify events related to expired ads i.e. ads related to promotions sales campaigns offers or products that are no longer available or ads that have depleted their budgets. In cases where system and server are implemented with a Unix like operating system OS this scheduled task or job can be implemented as a cron job that periodically triggers real time tracking collection engines on client devices to send properties and events to server .

As shown in each of the client devices can be coupled to sever ad platform and CDN through network . As shown in server can be located separately from database . Client devices receive operational commands from users via input devices including commands to initiate downloads of video content and commands to navigate to select and view video content via video player . A remote control not shown or other input device may be used to control operation of STB client device . Some STBs may have controls thereon not requiring the use of a remote control. The remote control is configured with buttons to control a STB client device including play a video order a video asset i.e. a pay per view VOD asset add a video asset to a cart retrieve information about video content view cart preview similar video content i.e. more like this etc. In an embodiment the cart is a convenient storage location for quick access to video assets a user of video player is likely to eventually want to order wherein ordering initiates delivery of the ordered video asset .

It is to be appreciated that CDN could provide renditions of any type of audio visual content. Video playing and viewing sessions as described herein refer to any video content that is generally available for delivery to an individual client device with delivery initiated upon an explicit request from that client device . Video viewing sessions may also be referred to as a session herein. Server may also be referred to as a server herein. In an example a video viewing session is one or more of a video content viewing session or a video game session wherein video game assets can be previewed and ordered. In a video viewing session CDN may provide an asset via network corresponding to video content stored in database or remotely at a publisher s web server. The asset will include one or more ads inserted by ad resolver . In a video game session CDN can run a video game for example and allow a client device to play a preview of the video game remotely with ads inserted into the preview.

According to an embodiment tracking collection system displays live real time video reports in a user interface shown in on display device . In embodiments display device may be one or more of a television a network enabled television a monitor the display of a tablet device the display of a laptop the display of a smart phone or the display of a personal computer. In an embodiment one type of client device is a cable STB connected to a display device . In this embodiment display device may be a television or monitor connected to an STB client device .

Server can receive events from client devices via network wherein the events correspond to playback of selected video content and ads inserted within the video content. Assets distributed to client devices can include video content with inserted ads matched to the content. In embodiments as a video asset is being played at a particular client device an ad insertion mechanism see e.g. ad insertion mechanism in inserts ads previously matched to the video asset by ad resolver where the matching is based in part on characteristics of the particular client device . Assets and copies thereof may be resident in any suitable computer readable medium database memory and or memories . In one embodiment the collected events can reside in memory of server . In another embodiment the events can be stored in a remote data store accessible from server via network . Similarly assets can be accessed by server from a remote location via CDN and or be provided to client devices via CDN .

In one embodiment a particular rendition of an asset is provided in a resolution compatible with a particular display device of a client device that requested the video asset . Specific renditions of video assets can include the requested video content encoded at a given bit rate and or bit size appropriate for the requesting client device .

A cluster comprising CMS server ad platform and CDN can include any suitable computing system for hosting video and ad assets i.e. video content and advertisement content analytics module ad resolver database and tracked events . As shown in server includes a processor coupled to a memory . According to certain embodiments one or more of CMS server ad platform and CDN may be embodied as separate respective computing systems. In additional or alternative embodiments one or more of CMS server ad platform and CDN may be virtual servers implemented using multiple computing systems or servers connected in a grid or cloud computing topology. As described below with reference to processor may be a single processor in a multi core multiprocessor system. Such system can be configured to operate alone with a single server or in a cluster of computing devices operating in a cluster or server farm. Although not shown in for the sake of simplicity it is to be understood that CMS ad platform and CDN can each include one or more of their own respective processors and memories.

Network may be a data communications network such as the Internet. In embodiments network can be one of or a combination of a cable network such as Hybrid Fiber Coax Fiber To The Home Data Over Cable Service Interface Specification DOCSIS Internet Wide Area Network WAN WiFi Local Area Network LAN ATM or any other wired or wireless network. Server may store and stream video content including but not limited to online video television programs television broadcasts simulcasts movies and video games.

CDN can be implemented as a content delivery network or content distribution network. In embodiments where network is the Internet CDN may be embodied as a distributed system of servers and network accessible storage devices deployed in multiple data centers accessible via network . As shown in the example of CDN can serve video content such as assets to viewers via network . In alternative or additional embodiments system can include multiple CDNs including one or more CDNs that serve video assets directly to client devices without routing via network . Besides video assets such as live streaming media and on demand streaming media CDN can serve other electronic content such as for example web objects i.e. text assets image assets and scripts downloadable objects i.e. multimedia assets software and documents and hosted applications i.e. cloud based software for games e commerce and portals .

Client devices can establish respective network connections with server via network . Video player can be executed at a client device to establish a network connection via network and CDN . The network connection can be used to communicate packetized data representing asset requests video assets and events between the client device and server . Client devices can each provide respective sets of tracked events corresponding to playback of video assets and inserted advertisements. Server can provide via CDN video assets with inserted ads in response to requests for the video content from client devices . For example sever can provide via CDN a rendition of a video asset as streaming audiovisual content. Video player can access the streaming audiovisual content by retrieving one or more of events via network . CDN can provide a rendition as packetized data. Video player can configure the processor to render a video asset for display on display device .

As shown in architecture includes a video player formed from components including a core player and an ad insertion mechanism . In the non limiting embodiment shown in video player includes a core player implemented and built using the Adobe Primetime software development kit SDK and the ad insertion mechanism uses Adobe Auditude advertisement insertion classes. In this embodiment tracking collection can be made available as a service for real time video tracking by the Adobe Primetime SDK and ad insertion mechanism can use the Adobe Auditude video advertising platform. In cases where video player is a browser based application ad insertion mechanism can include an ad insertion plug in configured to retrieve and insert ads as video content is being viewed. Such an ad insertion plug in can also be configured to retrieve ad properties i.e. as ad metadata along with ads from an ad server see e.g. ad server in and trigger certain ad related events such as for example ad start ad play and ad complete events.

Architecture also includes a reporting layer configured to provide all needed events and properties for real time analytics classes as well as other data for application measurement i.e. AppMeasurement . Architecture further includes real time tracking collection engine configured to track real time video analytics RTVA . Real time video analytics engine receives events from reporting layer and groups them together to send them to a tracking server or a software as a service SaaS infrastructure such as for example a SaaS infrastructure that includes software for aggregation functions.

An embodiment of architecture uses reporting layer as a reporting provider and real time video analytics engine as an RTVA tracker. Reporting layer is configured to listen for all events coming from core player and to dispatch the events in a unitary manner to real time video analytics engine in accordance with defined libraries or classes such as for example real time video analytics classes. In embodiments real time video analytics engine listens for events provided by reporting layer . In additional or alternative embodiments there other libraries not shown can listen for reporting events.

Embodiments of reporting layer can listen for events such as but not limited to MediaPlayerStatusChangeEvent.MEDIA PLAYER STATUS CHANGE MediaErrorEvent.MEDIA ERROR MediaPlayerEvent.MEDIA PLAYER PLAY START MediaPlayerEvent.MEDIA PLAYER PLAY COMPLETE and MediaPlayerEvent.MEDIA PLAYER ITEM REPLACE. The MEDIA PLAYER ITEM REPLACE event may be issued when a new video asset is loaded in the same video player automatically.

Reporting layer can also be configured to listen for QoS events such as for example BufferEvent.BUFFERING START BufferEvent.BUFFERING END BitrateChangeEvent.BITRATE CHANGE AdEvent.AD STARTAdEvent.AD COMPLETE and QoSEvent.QOS INFO.

The reporting layer can also dispatch or report events such as but not limited to ReportingEvent.START ReportingEvent.PLAY ReportingEvent.PAUSE ReportingEvent.COMPLETE ReportingEvent.BUFFER START ReportingEvent.BUFFER END ReportingEvent.AD START ReportingEvent.AD COMPLETE ReportingEvent.BITRATE CHANGE and ReportingEvent.ERROR. In an embodiment the reporting layer uses a private class that is not publicly exposed.

Real time tracking collection engine is component of architecture configured to listen for events and other real time video analytics RTVA data provided by reporting layer . As shown in real time tracking collection engine includes collector optimizer and serializer for performing the following functionalities collection optimization serialization and sending events to a tracking server such as server .

First real time tracking collection engine will collect the events in a collector timeline. This collection is performed by collector . Next at specific time interval optimizer takes events from collector and forwards them to serializer . Serializer then serializes the events and forwards the serialized event data to sender which in turn sends the serialized events data to a server. The serialized events can be sent to a tracking server such as server and or a separate analytics server. According to an embodiment real time tracking collection engine needs the following setup details in order to be able to send events to a tracking server an indication of a real time tracking server and a real time job identifier i.e. a job ID . A user of architecture may not need to know these setup values in advance and may manually provide them. In embodiments the values can be populated programmatically. Alternatively the setup values can be received as input manually added into program code or read from a configuration file.

In accordance with embodiments each tracking item and event to be optimized by optimizer and sent to a tracking server such as server can include data indicating one or more of following user characteristics i.e. user profile data client device user country user city user latitude and user longitude. In one embodiment an Internet Protocol IP address of a client device can be obtained which can then be used to resolve the country city latitude longitude on server .

According to embodiments video asset data can also be sent with events . For example such asset data can include one or more of the following data items a video identifier video ID an asset ID for either a video or an ad placed within a video an asset type i.e. VOD live video linear broadcast or advertisement a publisher ID stream information bitrate i.e. a current bitrate given by a video player and a content delivery distribution network CDN ID. In one embodiment the CDN ID can be a CDN name provided by an application implementing CDN .

Real time tracking collection engine can be implemented as a set of classes that implement real time tracking of video events . An exemplary real time tracking collection engine can be formed out of the four main parts components shown in and described below.

A collector can be implemented as a module to create a chained list of events . Collector can include processes and methods for collecting events and adding data representing the collected events to a list.

Optimizer can be implemented as a module or process to optimize the collected data i.e. the event data collected by collector . Optimizer can be configured to periodically execute or run at a specific tunable interval. In accordance with embodiments the interval can be set and changed by an administrator or other authorized user as a configuration option for optimizer . In one embodiment a default interval is 10 seconds and optimizer is executed every 10 seconds.

A serializer can be implemented as a module configured to structure the collected events and their associated data as needed for use on a destination server such as for example server . Serializer can structure events in a format to be received and read by a server side environment on a tracking server and or an analytics server.

Sender implements a method of sending all information serialized by serializer to a server by making the necessary send calls. The functionalities of collector optimizer serializer and sender are described in greater detail below with reference to .

As shown in a client device i.e. the client side can trigger playback events that are collected by a real time tracking collection engine and sent by sender as events that a server i.e. the server side can use for video analytics and reporting. The information needed for such analytics and reporting can be gathered from different layers in a video player. In the examples of some of this information is gathered from a core player and some from an ad insertion mechanism through a standardized interface reporting layer that enables easy access to the gathered information.

Real time tracking collection engine represents the tracking classes that do data collection data optimization and serialization and contains specific algorithms to make real time tracking available.

The process of sending real time tracking is decoupled from player events occurring in video player . Except for certain out of band events such as error events embodiments collect all other tracked events and then send the collected events to a server side infrastructure in an optimized way. As shown in the workflow for this event collection optimization and sending can be performed by collector optimizer serializer and sender so that events are sent from client devices to a server side infrastructure hosted by server .

According to embodiments there are at least two types of events collected events and out of band events. Collected events include video asset events ad events and QoS events. Exemplary video asset events can include but are not limited to play stop pause and close. Ad events can include events such as for example ad start and ad complete. Ad events can be triggered by an ad insertion plug in included in video player . QoS events can include for example buffering start buffering end and bitrate switching events. Out of band events are mainly represented by errors. Embodiments do not collect out of band events and instead send such events directly to an analytics server. In embodiments video asset ad and QoS events events are triggered through a standardized interface their properties are updated and real time tracking collection engine invokes modules and to collect optimize serialize and send the events to server .

In embodiments video player can be implemented using a browser and the video asset can be defined or identified by a Uniform Resource Locator URL . In certain embodiments the video asset can be additionally defined by metadata such as for example a video ID retrieved from a content management system CMS accessible from a client device .

Next if available and needed ad insertion mechanism inserts advertisements into the video asset and provides the necessary events and properties for the inserted advertisements. The availability and need for advertisements can be determined by invoking ad resolver .

While playing a video asset tracking events are triggered through the standardized interface to the real time tracking collection engine . As shown in targeted latency for optimizing events can be a defined tracking interval . In the non limiting embodiment shown in tracking interval can be set to 10 seconds which means that every 10 seconds tracking calls will be sent by sender to a tracking server.

In embodiments two kinds of tracking items can be tracked and collected as part of workflow namely events and errors. In certain embodiments events can contain one or more of the following data items an event type i.e. video start video buffering video play ad start and ad play an event count i.e. number of occurrences of an event an event duration i.e. duration of an event in seconds or minutes a total count of events i.e. a cumulative total number of events and an event total duration. The event total duration can represent a cumulative total duration of events for a given video asset or a session of a video player

Errors can contain data indicating an error source i.e. internal to core player or external errors encountered by video player an error ID a user a video asset and stream information. In an embodiment events will be sent at tracking intervals as triggered by optimizer whereas errors will be sent out of band at the moment each error is encountered. This is done because reaching an error state may cause video player to become unstable and result in sender being unable to send optimized calls. According to one embodiment external errors will not stop the real time tracking collection engine and further error events will be continuously sent whereas internal errors will stop real time tracking collection engine in cases where an internal error is determined to be a fatal critical unrecoverable error. An embodiment provides an API to track external errors with means for protecting stability of video player .

Before workflow begins an initialization of real time tracking collection engine may be performed. The initialization can use a public error reporting API in order for client devices to be able to track errors external to core player . One embodiment provides the following error tracking method player.rta.trackError errorId . This method will send the error to real time video analytics sever side infrastructure i.e. hosted on server as an external error type.

Workflow can be configured for remote setup and emergency stop. For example a real time analytics RTA library includes remote setup and emergency stop features. Remote setup can trigger remote setup of real time tracking collection engine on a client device from a remote device such as server . Remote setup represents a means for remotely changing the tracking setup of a set of video players implementing real time tracking collection engines on client devices .

Emergency stop of a real time tracking collection engine on a given client device can be initiated by server if parameters received from that client device have reached some predefined threshold values. When such an emergency stop is carried out tracking of events ceases on the client device .

According to embodiments the following options or parameters can be changed as needed tracking interval which indicates the interval at which optimizer runs and calls are made by sender track external errors which indicates whether external errors are tracked or not and setup check interval which indicates the interval at which the setup options are checked. Server can be configured to render an administrator UI usable to update a tracking interval for a given real time tracking collection engine as needed. By decrementing or incrementing tracking interval the frequency of optimization performed by optimizer on a client device hosting a real time tracking collection engine can be controlled remotely. By setting track external errors to false i.e. 0 server can remotely stop tracking of external errors on a client device . For example if external errors are being tracked through an external error API as a result of track eternal errors having been set to true i.e. 1 an administrator UI on server can be used to set the track external errors parameter to false in order to cease tracking of external errors via the external error API. Server can also be configured to set and update a setup check interval in order to remotely control the interval at which a client device is queried for tracking setup information.

An analytics server or analytics module can provide the above settings in an XML format to update the tracking as needed. For example an embodiment of workflow implements a method which retrieves real time video analytics tracking setup parameters. This method queries an endpoint client device retrieves the contents of the tracking setup parameters and sets an RTA parameter accordingly. In embodiments server can retrieve setup parameters as setup data from a client device via code similar to the following an Extensible Markup Language XML code example 

In the above code example trackingInterval is an integer representing seconds for tracking interval which is the interval that tracking calls are sent by sender . Setting trackingInterval to 0 on a client device means that tracking will be stopped on that client device . With continued reference to the above code example trackExternalErrors is a Boolean value where 1 is true and 0 is false. The trackExternalErrors setting instructs a real time tracking collection engine to enable disable its external error tracking API. The setupCheckInterval is an integer representing seconds and is the interval controlling when setup calls are to be made. In one embodiment the setupCheckInterval is set to be larger than the trackingInterval to ensure that setup calls are made less frequently than tracking calls. This may be done to avoid performance issues that may arise due to having setup calls that are simultaneous to or overlapping with tracking calls.

When classes for real time tracking collection engine are instantiated first workflow obtains the setup data. When the setup data is retrieved the real time tracking collection engine is updated as needed to use the setup data. If setup data is not available embodiments use default setup values. In certain embodiments the default values are a 10 second tracking interval default value of 1 for track external errors meaning that by default tracking external errors through an API is allowed and a check status interval default value of 1 minute. At an interval time specified by the check status interval real time tracking collection engine fetches the setup data again and adjusts the setup properties accordingly.

These setup properties can be used to tweak different real time tracking approaches on different client devices depending on their needs and can be adjusted at runtime as needed. To handle special cases like flooding high rate errors from multiple users or video players and other similar cases embodiments can use the emergency stop mechanism. This mechanism can comprise two parameters disable tracking of external error tracking by setting track external errors to 0 false in order to disable tracking in response to determining that a video player is sending many errors and stop real time tracking by setting tracking interval to 0 seconds if too many send calls are received at tracking time. The tracking interval may be set to 0 seconds in response to detecting improper usage of real time video analytics properties that results in flooding of a server with events from excessive send calls .

For both remote setup and emergency stop updates based on a set of players can be pushed up to that specific group of players. This group of players can be defined by publisher player name version etc. thus the real time tracking collection engine client side is retrieving the setup data for its properties. The properties and values that defines a video player group should be defined on both client and server sides.

In order to be able to calculate the metrics above embodiments track different events and properties associated with use of assets in a video player . Exemplary events include start events play pause events buffering events bitrate switching events and error events. Exemplary properties include a video identifier ID an advertisement ID a cost per mille cost per thousand advertising impressions CPM hash value for an advertisement a current bitrate an error ID a start up time i.e. for video player and a buffer time.

In order to stop tracking remotely i.e. remotely from client devices an embodiment includes an external configuration mechanism. The external mechanism can be implemented in tracking collection system . The external configuration mechanism can be configured to periodically interrogate or query server for new and updated tracking settings. The query can be executed at a specific tunable interval. The query can be based on parameters so that tracking collection system can change and or stop tracking on specified types of client devices and or video players instead of all client devices that are configured for real time analytics i.e. client devices having a real time tracking collection engine . An embodiment enables changing the optimizer interval for a specified client device . For example this embodiment can employ the external configuration mechanism to change the optimizer heartbeat interval from a default value of 10 seconds to 30 seconds for a specific client device and or video player .

Real time tracking collection engine can be implemented as a set of classes that implement real time tracking of video events . An exemplary real time tracking collection engine can be formed out of the four main components shown in and described in the following paragraphs.

Collector can be implemented as a module to create a chained list of events . Collector can include processes and methods for collecting events and adding data representing the collected events to a list. As shown in the example embodiment of for each event collector can populate a corresponding entry in a chained list with an event timestamp an event type and event data including a previous event timestamp. An event timestamp represents a time when an event occurred. The list of events can be sorted chronologically or indexed by event timestamps . In certain embodiments event timestamps and previous event timestamps are Coordinated Universal Time UTC values. Event types indicate a category of events . In the example provided in event types can include but are not limited to video start events video buffering events video play events ad start events and ad play events.

As shown in the first occurrence of an event of a given event type in the list will have a 1 value in a previous event timestamp stored in event data . According to an embodiment as an event is being added to the list collector determines if an event with a similar event type has previously occurred. If so collector populates the previous event timestamp in the event data for the event being added with the value of the event timestamp of the previous event. For example shows that when a second occurrence of a video play event occurs at timestamp the previous event timestamp in that event s event data is set to TS4 which is the value of event timestamp for the first occurrence of a video play event in the list. In cases where a new event is being added to a list including multiple prior events with similar event types collector can determine a previous event timestamp for the new event by comparing event timestamps for the multiple existing events to the event timestamp of the new event being added to the list and populating event data for the new event with a previous event timestamp value equaling the event timestamp of the most recent of the prior events .

Optimizer can be implemented as a module or process to optimize the collected data i.e. the event data collected by collector . Optimizer can be configured to periodically execute or run at a specific tunable interval. In accordance with embodiments the interval can be set and changed by an administrator or other authorized user as a configuration option for optimizer . In one embodiment a default interval is 10 seconds and optimizer is executed every 10 seconds.

Serializer can be implemented as a module configured to structure the collected events and their associated data as needed for use on a destination server such as for example server . In the example embodiment of serializer can implement a method for formatting or structuring collected events into optimized structures . As shown such structures can be formatted as strings with parameters including for example URL strings to be received and read by a server side analytics module .

Sender can be implemented as shown in as a method of sending all serialized event information to a server by making the necessary hypertext transfer protocol HTTP calls.

According to embodiments the components shown in are connected and can be configured to perform their respective workflow tasks substantially concurrently. Triggered events are added to a chained list of events by collector and are assigned event time stamps representing the current time. At the same time workflow keeps track of a previous event having a similar event type so that as each event is added to the list is is related to or chained with the previous event with the similar event type . This relationship or chaining creates a chained list of events which facilitates accessing one event and at the same time being able to quickly access the previous similar type of event in the list. Events are collected by collector and for real time tracking workflow uses substantially constant tracking calls that inform real time tracking collection engine of current status of a user and the user s video experience. The video experience is based on use of a video asset and its inserted ads within video player . After collector has collected tracking data for events optimizer serializer and sender perform their respective jobs or tasks at a specific interval i.e. tracking interval shown in .

According to workflow when playback of a video asset starts in video player events start being collected by collector and optimizer subsequently starts optimizing the collected events to be sent at tracking interval . Then serializer formats and serializes the event data and sender creates and issues calls containing all events that have been tracked since the last tracking interval . In this way workflow periodically sends events to a server side infrastructure. The server side infrastructure can be hosted on tracking servers such as server and or analytics servers.

Optimizer gets event data from collector and optimizes the events to create optimized events before passing them onto serializer . As shown in collector keeps the events in order as they arrive then optimizer periodically goes though the collector to select events added or updated since the last tracking interval and optimizes the selected events . Optimizer is configured to at specified tracking interval optimize the collected events so that there are fewer calls and the event data is still provided close enough in time to occurrence of events so that server can compute the needed analytics reports. From the video player collector receives many events with data attached. In an embodiment events are periodically optimized by optimizer and then serialized into optimized structures by serializer using the following steps 

1 grouping events by the following keys asset type video ID and event type resulting in one event for each group potentially including multiple calls for each tracking interval and

2 grouping events generated in video player into one send call for each tracking interval this results in one call per tracking interval due to events being serialized by serializer .

In an embodiment step 1 above is performed by optimizer so that events received from the same asset type the same video ID and the same event type are bundled together into one single item i.e. an optimized event that will be sent only once per tracking interval . For example for step 1 if during the last tracking interval collector received five total events comprising three play events and two buffering events five separate events are added to the chained list by collector . These five events can be optimized by optimizer into two optimized events one being a play event and one being a buffering event. From this using the step 2 above serializer serializes the two optimized events into one single optimized structure . Next sender creates and issues a single send call for this structure . illustrates how at each tracking interval optimized events can be created using step 1 . For example at the third 10 second tracking interval shown in two video play events are optimized by optimizer into a single video play event and then passed onto serializer . also shows how step 2 can be performed by serializer in that same tracking interval to produce an optimized structure corresponding to the single optimized event . As shown serializer represents the optimized event in an optimized structure embodied as a string with parameters.

In embodiments each optimized structure may contain one or more of the following properties user information asset information stream information and event information. According to embodiments the user information can include one or more of a name of a video player a player version identifying a version of a browser or video player installed on a user s client device and or a universally unique identifier UUID for a user s client device . The stream information can identify a bitrate a CDN and or a stream name. In embodiments the asset information can be embodied as asset metadata identifying one or more of an asset type such as a video category or genre an asset publisher such as a studio network or distributor a video identifier such as a unique ID or reference to an asset a video name such as an asset title an advertisement identifier ad ID a cost per impression CPM for an advertisement and an advertisement name. Non limiting examples of asset types include video categories such as live video pay per view streaming video and VOD and genres such as sports entertainment and news. The event information can include for example an event type an event timestamp and event data such as but not limited to an event count an event total count an event duration an event total duration and or a previous event timestamp.

Video advertising system requires protocols that make it possible to show both a video and separate ad media inside video player . illustrates how video advertising system is implemented using such protocols. Advantages of tracking collection system include the ability to perform real time tracking and collection of events related to playback of video content including ad assets resolved by ad resolver and inserted by ad insertion mechanism . In this way embodiments disclosed herein can track and collect events associated with video content and ads as the events occur without necessarily requiring protocols such as those used in video advertising system .

As shown in in video advertising system the flow for placing a video ad requires several steps and interfaces. In step 1 a video player submits an ad request by making an ad call to a dedicated ad server . Then in step 4 ad server responds with an Extensible Markup Language XML file including a reference to ad media and a video ad XML parsing module parses the XML file to retrieve the reference to the ad media. In contrast to video advertising system another advantage of tracking collection system is that property evaluations can be used by ad resolver to automatically resolve ads to be placed in video content. Next in step 3 video player retrieves ad media referred to in the XML file and renders the ad media. According to video advertising system displaying ad media typically requires a set of parameters from video player which can require interaction between the video ad XML parsing module and video player using an application programming interface API . In video advertising system an API is required for any pre roll ad media that runs a script or any interactive clickable ad media. In step 4 video player fires impression and activity reporting beacons. Unlike the tracking collection systems and methods disclosed herein step 4 and other steps shown in do not perform real time tracking and collection of analytics and events associated with playback of videos and ads inserted within the videos in video player . Lastly in step 5 the ad media is rendered.

In video advertising system a protocol between video player and the ad is required. The protocol includes methods that the advertisement must implement and video player must call the methods when certain events occur. Examples of such methods are resizeAd startAd stopAd pauseAd resumeAd collapseAd expandAd. In video advertising system an ad can only implement special behavior such as resizing when a method is explicitly called. For example when the screen size on which an ad appears changes an ad must dynamically choose its layout depending on the available area by implementing this functionality in the resizeAd method. Other advantages of tracking collection system architecture and method described below with reference to is that the system and methods do not require the protocol or method calls needed in video advertising system .

In response to user selection of video content in video player core player can send a video asset request to video CDN . In additional or alternative embodiments this asset request for a particular video asset may sent from client device to server and then routed to CDN see e.g. . Upon receipt of asset request CDN performs step to retrieve metadata for the requested video content and then performs step to retrieve a video asset corresponding to the video content indicated in asset request . At this point CDN sends the retrieved video asset to core player .

Next the client side ad resolver component sends an ad asset request i.e. an ad request to the server side ad resolver . This ad asset request may be triggered implicitly based at least in part on properties of the video asset such as the metadata retrieved in step . The ad asset request can also be based in part on properties of video player properties of client device and or properties of a user of client device . After receiving the ad asset request the server side ad resolver resolves the ad request in step according to one or more of the above noted properties and based on available ads. Available ads are identified by server side ad resolver by retrieving ad information in step . The ad information can be retrieved from database shown in . The retrieved ad information can include but is not limited to keywords CPM cost per placement number of prior insertions placements expiration and remaining budget information for an ad. Based on the ad information i.e. ad properties ad resolver resolves ad asset request by matching one or more ad assets with the requested video content. At this point server side ad resolver sends the matching one or more ad assets to the client side ad resolver component which in turn uses ad insertion mechanism to insert the one or more ad assets into the video content.

As the video content and its inserted ads are used i.e. played in video player events related to the playback and interaction with the video and ad assets are tracked in real time. As shown in video player includes a reporting layer is configured to listen for events coming from core player . Reporting layer is also configured to listen for events related to playback of and interaction with ads inserted into the video content by ad insertion mechanism . At this point in dataflow reporting layer dispatches events to real time tracking collection engine . This dispatch can be performed using real time video analytics classes. As shown in the events can then be sent from real time tracking collection engine to analytics module on server by issuing a tracking call in step . The tracking call issued in step can be embodied as the send call to analytics described above with reference to .

Sequence begins in step when a user of a client computing device initiates a request for a video asset . As shown this request for a video asset can be initiated via user interacting with video player . Next in step an indication of a new player i.e. a new instance installation or version of a video player and setup data for the new player is sent to core player for video player . In a non limiting example step can comprise sending setup data and other properties of video player to a software development kit SDK used to configure or build core player . For example core player can be built or instantiated using the Adobe Primetime SDK. Next in step setup information for the reporting layer for video player is sent to reporting layer . This setup information can identify defined libraries or classes to be used by reporting layer .

In step sequence sends settings for configuring a real time tracking collection engine . The a real time tracking collection engine can be hosted locally on a client device where video player is installed. These settings can include the track external errors setting and the tracking interval described above with reference to . Upon receipt of the settings in step the settings and setup data and information from steps are sent to server . Next in step server returns settings including any settings changed at server to real time tracking collection engine . As shown in steps and can be iteratively repeated as specified by defined setup check interval. As described above with reference to the setup check interval can be set at an appropriate interval in order to configure server to periodically query a client device for tracking setup information i.e. by performing step and return any updated tracking setup parameters to the client device i.e. by performing step . For example the setup check interval can be a tunable parameter set to a number of seconds greater than the tracking interval so that steps and will be repeated periodically but less frequently than tracking calls are made.

At this point in sequence step is performed to notify real time tracking collection engine that video player is attached to reporting layer . Next in step as tracked events occur in video player they are dispatched to core player . In step new core player events are forwarded from core player to reporting layer . Then in step new reporting events are sent from reporting layer to real time tracking collection engine . At this point if it is determined that tracking interval has passed real time tracking collection engine calls optimizer to optimize the reported events and then calls serializer to create an optimized structure before creating and invoking a corresponding tracking call to send events to a server side infrastructure i.e. hosted by server . As shown in the optimization and serialization to create optimized structure and subsequent invocation of a tracking call is iteratively repeated to send events to server in accordance with the tracking interval .

In a display is shown with various icons a dashboard controls command regions windows toolbars menus and buttons that are used to initiate action invoke routines search for video assets display metrics and event data for video assets display metrics and event data for advertisements or invoke other functionality. The initiated actions include but are not limited to searching for video content viewing metrics and event data pertaining to playback of video content viewing QoS metrics and other video related inputs.

In embodiments a display device can be used to display the user interface and reports shown in . The user interface UI may be displayed via the display interface and the computer display described below with reference to . In certain embodiments the UIs can be configured to be displayed on a touch screen display device . According to embodiments users such as a publisher distributor advertiser marketing analyst and or a network administrator can interact with the UI shown in using input devices such as but not limited to a stylus a finger a mouse a keyboard a keypad a joy stick a voice activated control system or other input devices used to provide interaction between a user and the UI. As described below with reference to such interaction can be used to indicate a video asset audience segment client device type distribution channel or advertisement break to be analyzed. The interaction can be also be used to navigate through multiple video assets and to select one or more groups of video assets to be analyzed.

The exemplary real time reports and interface depicted in enable users to efficiently identify success metrics for online video publishing and advertising. The user interface includes a live real time dashboard summarizing aggregated metrics and events across multiple video assets and ad assets . This dashboard gives real time insight into overall audience i.e. viewer engagement. Although not shown in by interacting with graph controls list controls and or search box the user interface can provide more granular reports indicating which segments of web site visitors i.e. viewers are watching particular video assets and what events are currently occurring for those assets .

As shown in the example embodiment of video overview user interface UI can include a dashboard displaying a summary of real time analytics data for a group of video assets . The dashboard can indicate total concurrent viewers i.e. total viewership indicated as a number of current users for the group of video assets total ad impressions for ads included in the video assets and total ad revenue based on real time data tracked and collected by tracking collection system . In certain non limiting embodiments video overview UI can be periodically updated according to an interval. In the non limiting example of this refresh or update interval is 12 seconds. It is to be understood that this interval for updating data presented in can be a tunable value set by a user of UI or another tunable value such as a tracking interval . For example the data shown in can be updated every 10 seconds in cases where the tracking interval is set to 10 seconds. In an embodiment the group of video assets includes all video content currently being viewed on client devices with real time tracking collection engines configured to send events to a tracking server such as server . According to this embodiment the summary dashboard of the video overview UI can display or list metrics such as total viewers i.e. viewership total ad impressions and total ad revenue for all video assets currently being viewed in video players of client devices having real time tracking collection engines . In additional or alternative embodiments the group of video assets are assets being viewed by one or more user selected audience segments i.e. groups of viewers via one or more distribution channels and or on certain platforms. Platforms of interest can be indicated by selecting types of client devices i.e. desktop computers tablet devices smartphone devices and or certain versions of video players i.e. a version of a DailyMotion video player application . For example by selecting segments e.g. males having bachelor s degrees and a platform e.g. a tablet a user can filter the real time analytics data presented in the summary dashboard to a subset of interest. In one embodiment the summary dashboard displays total viewership as a sum of concurrent viewers total ad impressions as a sum of ad impressions and total ad revenue as a sum of ad revenue for a selected group of video assets where the group of assets is selected via interaction with search box and or list controls shown in .

In the exemplary embodiment shown in the video overview UI includes a navigable list of video assets . Search box can be used to search for a specific video name within the list. For example a character string representing a full or partial name of a video asset can be entered in search box in order to find out a video name including the search string is included in the list of live videos. List controls can be used to navigate to specified pages of the list and or change the number of video assets appearing on each page of the list. According to embodiments list controls can also be used to sort the list of video assets by one or more analytics or QoS metrics. For example as shown in a list control has been selected to sort the list of videos in descending order with respect to the average buffer rates of the listed video assets .

Real time analytics data collected and tracked can also be used in video overview UI indicate for each video asset being viewed concurrent viewers ad impressions ad revenue peak viewership in terms of a peak number of distinct viewers users average buffering rate and an average bit rate .

The video overview UI also includes integrated QoS metrics which are based on information pertaining to upstream origination services from video encoders packagers originators and distributors such as a CDN . As seen in the video overview UI also includes which can indicate changes in stream quality bandwidth and drop offs so that network administrators and network operators can troubleshoot issues as they arise in near real time in order to reduce the likelihood of performance problems in advance. The video overview UI provides a seamless integrated UI that allows live QoS metrics to be evaluated in real time by network operators and administrators alongside tracked events and analytics data. In embodiments the tracked data presented in video overview UI is made simultaneously available to analytics modules and systems such as for example analytics module and Adobe Analytics. According to these embodiments historical analysis can be performed within an integrated data platform including both real time and historical data that is seamlessly available to network operations staff and marketing analyst teams.

In the example embodiment illustrated in for a given video asset graphs and are displayed indicating total viewers average buffer rate and bit rate threshold percentages respectively at different points in time. In addition to historical data graphs and indicate a current value for total concurrent viewers an average buffer rate and a bit rate threshold percentage. As shown graph controls can be used to alter the time range shown in graphs and and to select different real time analytics data and metrics to be graphically displayed. As shown in graph controls include a drop down menu to select a time range i.e. Previous 45 minutes and icons to select metrics to be displayed. While graphs and plot total viewers average buffer rate and bit rate threshold it is to be understood that by using graph controls any of the real time analytics data items and metrics displayed in can be selected to be graphically depicted in UI .

As shown UI can include a summary dashboard listing metrics such as but not limited to total concurrent viewers ad impressions ad revenue . In additional or alternative embodiments UI can display other dashboard metrics such as average error rate peak viewership ad density average buffering rate and a bit rate threshold . In an embodiment the data displayed in the dashboard is for video assets satisfying filters set via interaction with graph controls . In certain embodiments graph controls can include UI elements such as slider controls drop down menus and or icons to filter videos by length genre devices segments i.e. audience segments geographic locations regions and dates. The dashboard of can also display viewership changes adjacent to the number of concurrent viewers in relation to increases and decreases in viewership.

In additional or alternative embodiments UI can include a thumbnail not shown corresponding to a live presentation of a particular video asset . In alternative or additional embodiments the dashboard can display a thumbnail including at least one frame of the video asset and can optionally be implemented as a live animated icon that changes over time i.e. is not static . One type of animated icon displays a sequence of frames from the video asset i.e. as a slide show . In some embodiments animation of an animated icon does not necessarily require user interaction or user stimulus and the animation occurs on its own. For example the thumbnail can be configured to play e.g. once or repeatedly at least some portion of its associated video content. In one embodiment different points in time or snapshots of the video content are shown in the thumbnail. In various embodiments animation is triggered or activated by an input device or mouse rollover i.e. having a mouse stylus finger or other input device hover over or near the thumbnail without necessarily clicking on or selecting the thumbnail . In some embodiments an animation plays only once in response to detecting a rollover or hover. In alternative or additional embodiments the video content is played or looped until the rollover or hovering ends i.e. the cursor pointer or input focus is no longer hovering over or near the thumbnail .

Although not shown in exemplary UI in alternative or additional embodiments a panel pane list or window of UI can also include list of ad breaks for a given video asset. The ad breaks can be identified by name and temporal locations within the video asset e.g. Ad Break One 0 15 45 0 17 30 . Data for each defined ad break can be displayed in the list. Exemplary ad break data includes for each ad break a number of unique ad assets shown during the ad break a number of impressions and revenue .

The exemplary UI can display information regarding audience segments viewing devices i.e. viewing platforms channels and referrers for a given video asset . In one non limiting example the information shown in can be filtered by one or more audience segments in terms of gender e.g. male or female income i.e. visitors having or exceeding a certain income education level i.e. visitors having obtained a bachelor s degree and other segments of visitors or users of video content. While not shown in it is to be understood that analytics and metrics regarding numbers of visitors can be filtered according to visitors using various types of client devices and viewing platforms such as desktop computers tablet client devices smartphones and other client devices . Similarly the distribution of visitors across channels can be shown in UI in terms of specific web sites and social media platforms. The UI can also show the distribution of visitors across different categories or types of referrers such as for example direct access i.e. no referrer search engines social media platforms and other referring web sites corresponding to different categories of referrers.

The method begins at optional step where video content is selected for viewing. In step selection of a video asset is received and a request for the selected asset is sent to a server such as server . The request can be sent to the server via a CDN such as CDN . In an embodiment optional step can be performed by receiving a selection of a video asset within a UI of video player . This step can be performed by selecting using an input device a video asset for viewing within a display device of a client device having a video player . After the video content has been requested control is passed to step .

In step video content and its properties are received. If optional step was performed step comprises receiving video content corresponding to the video content requested in step . As shown in step can comprise receiving a video asset and associated metadata. Step can comprise receiving a video asset via network at a video player executing on a client device as described above with reference to . For example the video asset received in step can be received from server via CDN and network as shown in . After the video content is received control is passed to step .

Next in step an advertisement request is generated. As shown in in certain embodiments this step can comprise sending an implicit advertisement request based at least in part on one or more of video properties received in step a user profile properties of the user s client device and properties of video player running on the client device . In an embodiment step can result in an ad asset request i.e. an ad request being sent to ad resolver as described above with reference to .

Next in step an indication of at least one ad is received in response to the ad request sent in step and inserted into the video content. As shown an ad asset for a linear ad an overlay ad or another type of ad such as a hypervideo ad can be received in step and then inserted into the video content received in step . In one embodiment step can be performed by delivering ads to a video player via HyperText Markup Language 5 HTML5 using the tag or video element of HTML5. In embodiments the ad received in step was matched to the video content from step by ad resolver as described above with reference to . In certain embodiments the ad insertion of step can be performed by an ad insertion mechanism as described above with reference to . In an embodiment step comprises using an ad insertion plug in to insert ads into video content as the video content is being played. Step can comprise receiving a plurality of ads. For example if ad resolver resolved the ad request sent in step by matching multiple ads to the video content these multiple ads can be retrieved in step by ad insertion mechanism and inserted into the video content. Performing step results in creation of a rendition of the video content including the inserted ad s . After receiving ad s and inserting the received ad s into the video content control is passed to step .

In step data is collected for tracked video and ad events and the collected data is added to a list of events. According to embodiments this step can be performed by collector of the real time tracking collection engine shown in . As shown in this step can comprise collecting for each tracked video and ad event information including one or more of an event timestamp an event type and event data such as a previous event timestamp. As events are collected in step they can be added to a chained list of events as described above with reference to . Exemplary events collected in step can include but are not limited to video start events video buffering events video play events ad start events and ad play events. This step can also comprise collecting out of band events such as for example error events. In an embodiment as out of band events are collected in step their data is sent to a server without performing steps .

In step a determination is made as to whether a tracking interval has elapsed. As shown the tracking interval can be a tunable interval. For example the tracking interval evaluated in step can be tracking interval described above with reference to with a default value of 10 seconds. If it determined that the tracking interval has not yet elapsed control is passed back to step where real time collection of event data continues. Otherwise if it is determined that the tracking interval has elapsed control is passed to step where the events collected during the tracking interval are optimized.

In step events collected by repeating step during the tracking interval are optimized. As shown step can comprise optimizing events collected within a tunable tracking interval such as in the 10 seconds since the previous time step was performed. In accordance with embodiments step can be performed by optimizer described above with reference to . After the events are optimized control is passed to step .

Next in step the optimized events from step are serialized to create an optimized structure or format needed by a target server. The target server can be a tracking server such as server or an analytics server. As shown step can format the optimized events as URL strings usable by the target server. In embodiments step can be performed by serializer described above with reference to in order to create an optimized structure . After the optimized events are serialized control is passed to step .

In step tracking calls corresponding to the serialized events are created and issued. By issuing or invoking the tracking calls this step sends event data in the optimized structure created in step to the target server. As described above with reference to step the target server can be a tracking server such as server or a separate analytics server. As shown in the target server receiving the tracked events can be embodied as a server hosting an analytics module . As seen in the tracking calls sent in step can be HTTP calls to such a target server. According to embodiments step can be performed by sender described above with reference to in order to create tracking calls . After the tracking calls are issued control is passed to step .

In step a determination is made as to whether a viewing session for the video content has completed. As shown this step can comprise determining if playback for the video content has completed which can be a result of the video content being stopped or closed within a video player . This step can also determine that a viewing session has completed if the video player has been closed. If it determined that the viewing session has not completed control is passed back to step where real time collection of event data continues. Otherwise if it is determined that the viewing session has completed control is passed to step where any final events associated with completion termination of the viewing session are sent to the target server and method ends.

Although exemplary embodiments have been described in terms of systems and methods it is contemplated that certain functionality described herein may be implemented in software on microprocessors such as a processors and included in the client devices and server respectively shown in and computing devices such as the computer system illustrated in . In various embodiments one or more of the functions of the various components may be implemented in software that controls a computing device such as computer system which is described below with reference to .

Aspects of the present invention shown in or any part s or function s thereof may be implemented using hardware software modules firmware tangible computer readable media having logic or instructions stored thereon or a combination thereof and may be implemented in one or more computer systems or other processing systems.

If programmable logic is used such logic may execute on a commercially available processing platform or a special purpose device. One of ordinary skill in the art may appreciate that embodiments of the disclosed subject matter can be practiced with various computer system configurations including multi core multiprocessor systems minicomputers mainframe computers computers linked or clustered with distributed functions as well as pervasive or miniature computers that may be embedded into virtually any device.

For instance at least one processor device and a memory may be used to implement the above described embodiments. A processor device may be a single processor a plurality of processors or combinations thereof. Processor devices may have one or more processor cores. 

Various embodiments of the invention are described in terms of this example computer system . After reading this description it will become apparent to a person skilled in the relevant art how to implement the embodiments using other computer systems and or computer architectures. Although operations may be described as a sequential process some of the operations may in fact be performed in parallel concurrently and or in a distributed environment and with program code stored locally or remotely for access by single or multiprocessor machines. In addition in some embodiments the order of operations may be rearranged without departing from the spirit of the disclosed subject matter.

Processor device may be a special purpose or a general purpose processor device. As will be appreciated by persons skilled in the relevant art processor device may also be a single processor in a multi core multiprocessor system such system operating alone or in a cluster of computing devices operating in a cluster or server farm. Processor device is connected to a communication infrastructure for example a bus message queue network or multi core message passing scheme. In certain embodiments one or more of the processors and described above with reference to tracking collection system server and client devices of can be embodied as the processor device shown in .

Computer system also includes a main memory for example random access memory RAM and may also include a secondary memory . Secondary memory may include for example a hard disk drive removable storage drive . Removable storage drive may comprise a magnetic tape drive an optical disk drive a flash memory or the like. In non limiting embodiments one or more of the memories and described above with reference to server and client devices of can be embodied as the main memory shown in .

The removable storage drive reads from and or writes to a removable storage unit in a well known manner. Removable storage unit may comprise a magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated by persons skilled in the relevant art removable storage unit includes a non transitory computer readable storage medium having stored therein computer software and or data.

In alternative implementations secondary memory may include other similar means for allowing computer programs or other instructions to be loaded into computer system . Such means may include for example a removable storage unit and an interface . Examples of such means may include a program cartridge and cartridge interface such as that found in video game devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from the removable storage unit to computer system . In non limiting embodiments one or more of the memories and described above with reference to server and client devices of can be embodied as the main memory shown in .

Computer system may also include a communications interface . Communications interface allows software and data to be transferred between computer system and external devices. Communications interface may include a modem a network interface such as an Ethernet card a communications port a PCMCIA slot and card or the like. Software and data transferred via communications interface may be in the form of signals which may be electronic electromagnetic optical or other signals capable of being received by communications interface . These signals may be provided to communications interface via a communications path . Communications path carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link an RF link or other communications channels.

As used herein the terms computer readable medium and non transitory computer readable medium are used to generally refer to media such as memories such as main memory and secondary memory which can be memory semiconductors e.g. DRAMs etc. . Computer readable medium and non transitory computer readable medium can also refer to removable storage unit removable storage unit and a hard disk installed in hard disk drive . Signals carried over communications path can also embody the logic described herein. These computer program products are means for providing software to computer system . A computer readable medium may comprise but is not limited to an electronic optical magnetic or other storage device capable of providing a processor with computer readable instructions. Other examples comprise but are not limited to a floppy disk a CD ROM a DVD a magnetic disk a memory chip ROM RAM an ASIC a configured processor optical storage magnetic tape or other magnetic storage or any other medium from which a processor such as processors and processors shown in or processor device can read instructions. The instructions may comprise processor specific instructions generated by a compiler and or an interpreter from code written in any suitable computer programming language. Non limiting examples of a suitable programming language can include C C C Visual Basic Java Python Perl JavaScript and ActionScript.

Computer programs also called computer control logic are stored in main memory and or secondary memory . Computer programs may also be received via communications interface . Such computer programs when executed enable computer system to implement the present invention as discussed herein. In particular the computer programs when executed enable processor device to implement the processes of the present invention such as the steps in the method illustrated by the flowchart of discussed above. Accordingly such computer programs represent controllers of the computer system . Where an embodiment of the invention is implemented using software the software may be stored in a computer program product and loaded into computer system using removable storage drive interface and hard disk drive or communications interface .

In an embodiment the display devices used to display interfaces of video player video overview UI a publisher UI and or an advertiser UI may be a computer display shown in . The computer display of computer system can be implemented as a touch sensitive display i.e. a touch screen . Similarly the user interface shown in may be embodied as a display interface shown in .

Embodiments of the invention also may be directed to computer program products comprising software stored on any computer readable medium. Such software when executed in one or more data processing device causes a data processing device s to operate as described herein. Embodiments employ any computer readable medium. Examples of computer useable mediums include but are not limited to primary storage devices e.g. any type of random access memory secondary storage devices e.g. hard drives floppy disks CD ROMS DVDs ZIP disks tapes magnetic storage devices and optical storage devices MEMS nanotechnological storage device etc. and communication mediums e.g. wired and wireless communications networks local area networks wide area networks intranets etc. .

Numerous specific details are set forth herein to provide a thorough understanding of the claimed subject matter. However those skilled in the art will understand that the claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Some portions are presented in terms of algorithms or symbolic representations of operations on data bits or binary digital signals stored within a computing device memory such as a computer memory. These algorithmic descriptions or representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. An algorithm is a self consistent sequence of operations or similar processing leading to a desired result. In this context operations or processing involves physical manipulation of physical quantities. Typically although not necessarily such quantities may take the form of electrical or magnetic signals capable of being stored transferred combined compared or otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to such signals as bits data values elements symbols characters terms numbers numerals or the like. It should be understood however that all of these and similar terms are to be associated with appropriate physical quantities and are merely convenient labels. Unless specifically stated otherwise it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining and identifying or the like refer to actions or processes of a computing device such as one or more computers or a similar electronic computing device or devices that manipulate or transform data represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the computing platform.

The system or systems discussed herein are not limited to any particular hardware architecture or configuration. A computing device can include any suitable arrangement of components that provide a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor based computer systems accessing stored software that programs or configures the computing device from a general purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming scripting or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.

Embodiments of the methods disclosed herein may be performed in the operation of such computing devices. The order of the steps presented in the examples above can be varied for example steps can be re ordered combined and or broken into sub steps. Certain steps or processes can be performed in parallel.

The use of adapted to or configured to herein is meant as open and inclusive language that does not foreclose devices adapted to or configured to perform additional tasks or steps. Additionally the use of based on is meant to be open and inclusive in that a process step calculation or other action based on one or more recited conditions or values may in practice be based on additional conditions or values beyond those recited. Headings lists and numbering included herein are for ease of explanation only and are not meant to be limiting.

While the present subject matter has been described in detail with respect to specific embodiments thereof it will be appreciated that those skilled in the art upon attaining an understanding of the foregoing may readily produce alterations to variations of and equivalents to such embodiments. Accordingly it should be understood that the present disclosure has been presented for purposes of example rather than limitation and does not preclude inclusion of such modifications variations and or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art.

