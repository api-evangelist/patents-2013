---

title: Block-level backup of selected files
abstract: A block-level backup of a selected file on a source volume is done in an efficient manner by taking a snapshot copy of the source volume, and creating, mounting, and formatting a dynamically-extended backup volume, creating a sparse backup file on the backup volume, and then consolidating extents of the selected file while copying the extents at the block level from the snapshot copy of the source volume to the backup file on the backup volume. For an incremental block backup, only extents of changed blocks of the selected file are copied, and the changed blocks are identified by a modified block map of a previous snapshot copy of the source volume.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424137&OS=09424137&RS=09424137
owner: EMC CORPORATION
number: 09424137
owner_city: Hopkinton
owner_country: US
publication_date: 20130927
---
The various embodiments described herein relate generally to block level backup of selected files and in particular to a way of reducing the time for backing up selected files to produce a backup volume in a dynamic volume container.

In today s computing environments it is often desirable to backup computer data by copying and archiving the data e.g. creating a backup image so that the data may be restored after a data loss event e.g. hardware failure etc. . There are at least two types of backup applications that are implemented in this regard. File level backup applications copy data from a source location to a backup location on a file by file basis regardless of where the data of the file is physically stored. This means that the backup application attempts to build and replicate the original file by reading the logical file system present on the original location. The granularity of the resulting backup entities for file level backups is therefore individual files. Block level backup applications on the other hand bypass the file system and perform backups of entire volumes of data from the original location.

One advantage of bypassing the file system for a block level backup is that there is no penalty in performance in cases where the original location contains large numbers of files such performance impacts may take place if file level backup were to be used . As a result of bypassing the file system the granularity of the resulting backup entity for block level backups is therefore the entire volume s image i.e. binary image . Another advantage of bypassing the file system is that for certain storage volumes a file level backup will not capture all of the data of interest on the storage volume. For example file level backup may not capture data from proprietary data structures that are not contained in files of a file system built and exposed on the storage volume. Such data structures are found for example in various Microsoft WINDOWS brand operating systems and Microsoft EXCHANGE brand e mail systems.

A way of block level backup is to make and archive a full backup of a source volume on a periodic basis and to make and archive an incremental backup of the source volume on a more frequent basis. A differential backup is another name for an incremental backup. For example a full backup is made on a weekly basis at 2 00 a.m. on Sunday and an incremental backup is otherwise made on a daily basis at 2 00 a.m. on Monday Tuesday Wednesday Thursday Friday and Saturday. Each incremental backup includes only the blocks of data that have changed in the source volume since the previous backup. Each incremental backup also identifies all of the changed blocks. The incremental backup includes a changed block map that identifies the changed blocks and the changed block map is a block bitmap or an extent map. A block bitmap includes a bit for each block of the source volume and a bit set to indicate that a corresponding block of data that has changed in the source volume since the previous backup. An extent map includes entries for extents of contiguous blocks of data that have changed in the source volume since the previous backup. For example each extent entry includes an offset and length for a corresponding extent and the extent entries are arranged in a list sorted by offset.

A conventional way of restoring a source volume to the time of a selected incremental backup involves copying blocks to the source volume from the most recent full backup made before the time of the selected incremental backup and then copying blocks to the source volume from any and all incremental backups that were made between the time of this full backup and the selected incremental backup and then copying blocks to the source volume from the selected incremental backup. These backups are copied successively to the source volume in chronological order of the backups beginning with a full restoration of the source volume with the full incremental backup and ending with the copying of blocks from the selected incremental backup to the source volume.

In the following description various embodiments will be illustrated by way of example and not by way of limitation in the figures of the accompanying drawings. References to various embodiments in this disclosure are not necessarily to the same embodiment and such references mean at least one. While specific implementations and other details are discussed it is to be understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the claimed subject matter.

Although the process flows shown in the figures or contained in following description may depict functional operations in a particular sequence the processes are not necessarily limited to the particular order or operations illustrated. One skilled in the art will appreciate that the various operations portrayed in the figures can be changed rearranged performed in parallel or adapted in various ways. Furthermore it is to be understood that certain operations or sequences of operations can be added to or omitted from the processes without departing from the scope of the various embodiments. In addition the process illustrations contained herein are intended to demonstrate an idea of the process flow to one of ordinary skill in the art rather than specifying the actual sequences of code execution which may be implemented as different flows or sequences optimized for performance or otherwise modified in various ways.

The server includes a hardware data processor a network adapter linking the data processor to the data network random access memory program memory and data storage adapters linking the data processor to the primary data storage and the backup data storage . The data storage adapters for example are Fibre Channel FC Small Computer Systems Interface SCSI or Internet Protocol SCSI iSCSI host bus adapters. The data processor is a general purpose digital computer data processor including one or more core central processing units CPUs for executing computer program instructions stored in the program memory . The program memory is a non transitory computer readable storage medium such as a local magnetic hard disk drive or electrically erasable and programmable read only memory EEPROM . The random access memory includes buffers and cache memory for paging data from the primary data storage or the backup data storage .

The program memory includes a program layer for network communication using the Transmission Control Protocol TCP and the Internet Protocol IP . The program memory also includes a file system manager for responding to client requests for access to files in file systems and a logical volumes layer providing access to logical volumes upon which the file systems are built. The logical volumes include the source volumes and the backup volumes . For example each logical volume is configured from one or more logical unit numbers LUNs of either the primary data storage data storage or the backup data storage and the logical volumes layer translates logical block numbers from the file system manager to the LUNs where the desired blocks of storage are found.

The various embodiments described herein relate generally to volume backup and recovery programs executed by the data processor to produce the backup volumes from data of the source volumes and to restore a selected source volume to the time of a selected one of the backup volumes that was produced from data of the source volume.

If the block allocation map indicates that the block has been changed since the time of the snapshot then the write request is passed to the block access routine of the logical volumes facility and new data is written to the specified data block in the normal fashion. Otherwise if the block allocation map indicates that the block has not changed since the time of the snapshot then the volume snapshot facility performs a copy upon first write by copying the before image of the specified block from the source volume to the snapshot volume . Once this copy operation has been completed the volume snapshot facility sends the new data for the specified block down to the block access routine and this new data is written to the specified block of the source volume .

For example the snapshot volume includes a block data region for storing before image block data and a free block bitmap for storing before image block metadata about the block allocation state. The snapshot volume may conform to the Microsoft Virtual Hard Disk Image Specification Oct. 11 2006 Version 1.0 . In this case a copy upon first write upon a specified block includes checking the allocation state of the specified block in the source volume and if the allocation state in the source volume indicates that the specified block is free then the copy upon first write is finished because the free block bit map has an initial state at the start of the snapshot process indicating that all blocks of the snapshot volume are free. Otherwise if the allocation state in the source volume indicates that the specified block is allocated then a data block in the region is allocated the corresponding bit in the free block bitmap is set and the data of the corresponding block is copied from the source volume to the allocated data block in the region .

To make full and incremental backups from the source volume a series of at least two snapshot volumes are kept during client access to the source volume . For example to make a backup copy at a present time T a snapshot process in progress at this time Tis terminated upon an old snapshot volume T and a snapshot process is begun upon a new snapshot volume T . Then after the time T a full backup volume T is created by copying the before image blocks from the new snapshot volume T to a backup volume or else copying the blocks which have not changed since T from the source volume so that the full backup includes a copy of every allocated block that was in the source volume at the time T.

After the time T an incremental backup volume T is created in the same way that the full backup volume T except that the incremental backup volume only includes block data or metadata for the blocks indicated as modified by the modified bitmap from the snapshot volume T . For example the incremental backup volume T has the same modified bitmap as the snapshot volume T . Thus the old snapshot volume T can be converted to an incremental backup volume T by replacing the old block metadata and old block data in the old snapshot volume with new block metadata and new block data from the new snapshot volume or else from the source volume. A full or incremental backup volume may also conform to the Microsoft Corp. Virtual Hard Disk Image Specification Oct. 11 2006 Version 1.0 .

The volume snapshot facility may also have a revert to snapshot function for restoring the source volume to the in progress snapshot copy. Such a revert to snapshot function scans the modified block bitmap to restore the modified blocks of the source volume with the block data and metadata from the block data region and the free block bitmap . For example such a revert to snapshot function is included in the Microsoft Corp. Volume Shadow Copy Service VSS .

The various embodiments disclosed herein relate to block level backup of one or more selected files from a source volume to produce a backup volume containing backup copies of the selected files in a dynamic volume. Under certain circumstances and in certain data processing environments such a backup method may enjoy the benefits of both file level backup and block level backup and these benefits will outweigh the relative disadvantages of both file level backup and block level backup. For example such a backup method may be advantageous in circumstances and environments where the conventional block level volume backup method would be desirable yet the conventional block level volume backup method would be precluded by a need to desire to avoid a full backup of all of the data or metadata on the source volume. In particular the conventional block level volume backup method may be desirable because the source volume is rather densely populated with file data that would be fragmented due to a rather large number of relatively small files or due to fragmented files. Yet there may be a need to avoid a full backup of all of the data or metadata on the source volume due to software licensing restrictions precluding backup copies. There may also be a desire to avoid copying files or volume data or metadata that would not be needed from backup storage during a recovery operation. However a block level backup of only selected files should be done efficiently in order to be competitive with a conventional block level backup that does not spend processing time identifying specific files on a source volume.

One specific situation where the backup method disclosed herein is advantageous is a virtual machine environment where a number of users or user groups may share a host computer or a server so that it would be desirable to provide a separate backup of the virtual machine configuration and files for each user or user group in a separate portable dynamic volume. A similar situation is an e mail server in which it would be desirable to provide a separate backup of the e mail for each user or user group in a separate portable dynamic volume. Such a portable dynamic volume could be used not only for recovery in the case of a host computer or server failure or loss due to a disaster but also for migration of a user to another host computer or server.

Storing the backup in a dynamic volume provides a convenient way of using existing operating system and application facilities for transporting archiving searching and mounting of the dynamic backup volume so that the files in the dynamic backup volume can be easily exposed and accessed when needed. The dynamic backup volume may be simply a sparse file in which the dynamic backup volume consists of the extent of the file. See for example Virendra Mane U.S. Patent Application Publication US 2007 0136548 A1 published Jun. 14 2007 incorporated herein by reference. Alternatively the dynamic backup volume may be contained in a more complex container. For example the dynamic backup volume container may be partitioned into more than one dynamic volume and may contain metadata about the various partitions such as a starting offset for each partition. For example the dynamic backup volume container may represent a virtual hard disk. In particular the dynamic backup volume container may be compliant with the Microsoft Corp. Virtual Hard Disk Image Specification Oct. 11 2006 Version 1.0 .

To create the dynamic volume container file a backup application invokes a virtual mount driver for the particular format of the dynamic volume container file . To create a full block level backup of the file on the source volume the data blocks of the file in the snapshot of the source volume at the time Tare copied to a sparse backup file in the file system on the dynamic volume . Extents of the selected file are consolidated while the extents are copied at the block level from in progress snapshot of the source volume to the backup file on the dynamic volume .

Although the copying of the blocks of the file could be done at the level of operating system writes by opening the file reading blocks of the file from the in progress snapshot and writing the blocks to the backup file a preferred way of copying the blocks is to invoke the access retrieval pointers function of the file system manager to obtain the extents of contiguous blocks of the file and then fetch the data blocks of these extents from the volume snapshot copy facility for the snapshot and then write these blocks at the logical block level to the dynamic volume by invoking the virtual mount driver . In this case the offset of each extent on the dynamic volume is the offset of each extent in the file in the snapshot plus a constant. This constant is the logical block number where the logical extent of the file begins on the dynamic volume . In other words the file is not fragmented on the dynamic volume . When writing the data blocks to the file at the logical block level of the dynamic volume there is a linear translation between the logical extent of the file and a corresponding extent of contiguous logical blocks of the dynamic volume . This linear translation when writing the data blocks at the logical block level to the dynamic volume eliminates processing time that would otherwise be required for accessing file mapping metadata of the file . This linear translation when writing the data blocks at the logical block level also avoids any side effects that could result from opening and closing of the file .

To create an incremental block level backup of the file on the dynamic volume only changed blocks of the file in the snapshot at the time Tare copied to the dynamic volume . The changed blocks that are copied are the blocks of the file in the snapshot T that have changed since the time Tof the previous snapshot of the source volume . These changed blocks are identified by the modified block bitmap of the previous snapshot . If the file is sparse then the changed blocks may include blocks that were allocated in the previous snapshot at the time Tand are free in the snapshot at the time T as indicated by the free block map of the snapshot . In this case such a free block would represent a value of zero. In general a value of zero is not written to the dynamic volume for either the case of a full backup or the case of an incremental backup because the dynamic volume initially has all of its blocks free and the virtual mount driver interprets free blocks of the dynamic volume as having a value of zero.

The various embodiments disclosed herein may the Microsoft Corp. Volume Shadow Copy Service VSS for the volume snapshot copy facility and may use patches to interface VSS with the backup application so that VSS and the backup application may share access to the source volume and the snapshot volumes without contention. The backup application may also use the patches to maintain changed block bitmaps that are independent of the modified block bitmaps of the snapshot volumes . The patches are applied to the original write handler of the VSS driver that is responsible for creating snapshots of the source volume.

For example in order to track write operations upon the source volume a patch is applied to the WINDOWS filter driver volsnap.sys . The patch may be applied by invoking an application programming interface API to find the volsnap.sys filter driver by name and then replacing an entry point in a dispatch table of the volsnap.sys filter driver to replace an original write handler of the volsnap.sys filter driver with an alternative write handler of the backup application . In a similar fashion an original control handler of the volsnap.sys filter driver may be replaced with an alternative control handler of the backup application . In this case any I O flowing through the volume stack will then invoke one of these alternative handlers so that the alternative handlers can track the write operations and control signals in order to create the backups of the source volume .

The various embodiments disclosed herein may use random access memory buffers in for the transfer of the data blocks of the selected file from the source volume and the in progress snapshot volume to the dynamic volume when the dynamic volume has been mounted. These random access memory buffers are shared among the backup application the volume snapshot facility and the virtual mount driver . For example the backup application loads in a memory buffer the starting offset and length of each extent of the selected file to be read from the source volume or the in progress snapshot volume . The data blocks of the extents are then read from the source volume or the in progress snapshot volume and stored and consolidated in a memory buffer. Then the virtual mount driver writes the data blocks from the memory buffer into the mounted dynamic volume . Request and acknowledgement signals are exchanged between the backup application and the volume snapshot facility and between the backup application and the virtual mount driver to signal the beginning and completion of the data transfers to and from the memory buffer.

In block the dynamic volume is formatted in order to build an empty file system upon the dynamic volume. While the format is in progress if the virtual mount driver receives a request to write a value of zero to a specified block of the dynamic volume the virtual mount driver returns an acknowledgement of successful write completion without allocating or writing to a block of storage. Execution continues to block .

In block in the file system built on the dynamic volume a sparse file is created having no allocated blocks and an identical name and an identical length to the file to be backed up. Execution continues to block in .

In block execution continues to block to produce a full backup on the dynamic volume. In block on the snapshot T the extents of the file to be backed up are queried. For each extent the block data of the file is read from the snapshot T and this block data is written sequentially to the sparse file on the dynamic volume. For example the extents are queried using FSCTL GET RETRIEVAL POINTERS the block data is written at the volume block level and the extents are contiguous on the dynamic volume. Therefore the extents of the selected file are consolidated while the extents are copied at the block level from the snapshot copy of the source volume to the backup file on the backup volume. After block the full backup of the selected file is finished.

In block execution continues to block to produce an incremental backup on the dynamic volume. In block on the most recent snapshot T the extents of the file to be backed up are queried. Also on the previous snapshot T the changed block bitmap is accessed. For each extent that has changed during the interval from Tto T as indicated by the changed block bitmap from the previous snapshot T the block data of the file is read from the snapshot T and this block data is written sequentially to the sparse file on the dynamic volume. For example the extents are queried using FSCTL GET RETRIEVAL POINTERS the block data is written at the volume block level and the extents are contiguous on the dynamic volume. Therefore the extents of the selected file are consolidated while the extents are copied at the block level from the snapshot copy of the source volume to the backup file on the backup volume. After block the incremental backup of the selected file is finished.

In the example of a single file was selected for backup in the dynamic container. A similar procedure is used for backing up multiple selected files on a dynamic volume container. In this case the dynamic volume container created in block has a size sufficient to contain the multiple selected files and block and block or block are repeated for each of the multiple selected files.

Another alternative for backup of multiple files is for the multiple files to be included in a single container file on the source volume and to select this single container file for copying to the dynamic volume on the backup volume. For example the single container file contains all of the files of a user s virtual machine in a virtualization environment on a shared computer or all of the archive e mail files of a particular user on an e mail server.

Although the backup and recovery operations have been described above with respect to a network server in the backup and recovery operations can be performed in other general purpose or specialized computing devices such as personal computers desktop or laptop computers or mainframe computers as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. The backup and recovery operations can be performed in a system including any number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP FTP SFTP UPnP NFS and CIFS. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments where the computing device includes a Web server the Web server can run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

