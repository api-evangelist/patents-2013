---

title: Deployment optimization for high availability in a multi-tenant platform-as-a-service (PaaS) system
abstract: A mechanism for deployment optimization in a multi-tenant Platform-as-a-Service (PaaS) system is disclosed. A method of the disclosure includes receiving, at a source code management (SCM) repository maintained by a node executing on a computing device, updated application code of an application executed on the node, wherein the node is provided by a multi-tenant Platform-as-a-Service (PaaS) system, providing, by the node, the updated application code to one or more cartridge instances that implement framework of the application, determining, by each of the one or more cartridge instances, that a marker file is present in the updated application code, the marker file indicating that hot deployment functionality is to be implemented for the application, and implementing, by each of the one or more cartridge instances using hot deployment functionality that is specific to the cartridge instance, code changes in the updated application code without a restart of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09454359&OS=09454359&RS=09454359
owner: Red Hat, Inc.
number: 09454359
owner_city: Raleigh
owner_country: US
publication_date: 20130128
---
The embodiments of the disclosure relate generally to platform as a service environments and more specifically relate to deployment optimization for high availability in a multi tenant PaaS system.

Currently a variety of Platform as a Service PaaS offerings exist that include software and or hardware facilities for facilitating the execution of web applications in a cloud computing environment the cloud . Cloud computing is a computing paradigm in which a customer pays a cloud provider to execute a program on computer hardware owned and or controlled by the cloud provider. It is common for cloud providers to make virtual machines hosted on its computer hardware available to customers for this purpose.

The cloud provider typically provides an interface that a customer can use to requisition virtual machines and associated resources such as processors storage and network services etc. as well as an interface a customer can use to install and execute the customer s program on the virtual machines that the customer requisitions together with additional software on which the customer s program depends. For some such programs this additional software can include software components such as a kernel and an operating system and or middleware and a framework. Customers that have installed and are executing their programs in the cloud typically communicate with the executing program from remote geographic locations using Internet protocols.

PaaS offerings typically facilitate deployment of web applications without the cost and complexity of buying and managing the underlying hardware and software and provisioning hosting capabilities providing the facilities to support the complete life cycle of building and delivering web application and service entirely available from the Internet. Typically these facilities operate as one or more virtual machines VMs running on top of a hypervisor in a host server.

When making code modifications to an application running on a PaaS offering the PaaS platform generally stops builds deploys and restarts the application to implement the code changes. This entire process takes time to complete and is unnecessary for many types of code changes.

Embodiments of the disclosure provide for a mechanism for deployment optimization for high availability in a multi tenant PaaS system. The deployment optimization described in embodiments of the disclosure may provide support for no down time application changes in a PaaS system without impacting users and across a broad range of technologies and languages supported by the PaaS system. In one embodiment when a software developer or end user deploying an application on the PaaS system makes a code change they may provide the updated code to the PaaS environment. Embodiments of the disclosure introduce functionality to support high availability no down time of the application while the code changes are introduced to the application.

In one embodiment hot deployment support is provided via a marker file that is added to the repository for the application. The marker file may include an empty file that is labeled as a marker to indicate to a controller component that the application is to be deployed using a hot deploy functionality. When a cartridge e.g. a form of support software or middleware providing functionality such as configuration templates scripts dependencies to run an application and or add a feature to an application of the application identifies this marker file the cartridge implements hot deployment functionality for the particular cartridge so that the application is not brought down while the code is being updated. Hot deployment of an application allows for code changes to take effect without restarting the application cartridge thus increasing deployment speed and minimizing application downtime. In other embodiments mechanisms other than a marker file trigger the hot deployment such as an environmental variable or any other trigger mechanism. An environmental variable may include a dynamic named value that can affect the way running processes behave on a computer system.

In one embodiment a method of the disclosure includes receiving at a source code management SCM repository maintained by a node executing on a computing device updated application code of an application executed on the node wherein the node is provided by a multi tenant Platform as a Service PaaS system. The method also includes providing by the node the updated application code to one or more cartridge instances that implement framework of the application. In addition the method includes determining by each of the one or more cartridge instances that a marker file is present in the updated application code the marker file indicating that hot deployment functionality is to be implemented for the application. The method may then implement by each of the one or more cartridge instances using hot deployment functionality that is specific to the cartridge instance code changes in the updated application code without a restart of the application.

Clients and are connected to hosts and the cloud provider system via a network which may be a private network e.g. a local area network LAN a wide area network WAN intranet or other similar private networks or a public network e.g. the Internet . Each client may be a mobile device a PDA a laptop a desktop computer or any other computing device. Each host may be a server computer system a desktop computer or any other computing device. The cloud provider system may include one or more machines such as server computers desktop computers etc.

In one embodiment the cloud provider system is coupled to a cloud controller via the network . The cloud controller may reside on one or more machines e.g. server computers desktop computers etc. and may manage the execution of applications in the cloud . In some embodiments cloud controller receives commands from PaaS provider controller . Based on these commands the cloud controller provides data e.g. such as pre generated images associated with different applications to the cloud provider system . In some embodiments the data may be provided to the cloud provider and stored in an image repository in an image repository not shown located on each host or in an image repository not shown located on each VM .

In one embodiment each VM running applications for the PaaS provider controller includes a source code management SCM system sometimes referred to as SCM or revision control system. One example of such an SCM or revision control system is Git available as open source software. Git and other such distributed SCM systems usually include a working directory for making changes and a local software repository for storing the changes. The packaged software application can then be pushed from the local Git repository to a remote Git repository. SCM system on VMs stores the remote repositories for each application running on the VM so that the application code may be edited by others with access or the application may be executed by the VM .

In one embodiment the application code pushed to the remote repositories of SCM system may include a marker file that indicates that hot deployment functionality should be implemented for the applications having the marker file in their remote repository. Hot deployment functionality may refer to an ability to make changes to an application without restarting the application. This increases deployment speed and minimizes application downtime. Further details of the hot deployment functionality for PaaS systems are described below with respect to .

While various embodiments are described in terms of the environment described above those skilled in the art will appreciate that the facility may be implemented in a variety of other environments including a single monolithic computer system as well as various other combinations of computer systems or similar devices connected in various ways. For example the data from the image repository may run directly on a physical host instead of being instantiated on a VM .

In one embodiment the client layer resides on a client machine such as a workstation of a software developer and provides an interface to a user of the client machine to a broker layer of the PaaS system . For example the broker layer may facilitate the creation and deployment on the cloud via node layer of software applications being developed by an end user at client layer .

In one embodiment the client layer includes a source code management system sometimes referred to as SCM or revision control system. One example of such an SCM or revision control system is Git available as open source software. Git and other such distributed SCM systems usually include a working directory for making changes and a local software repository for storing the changes for each application associated with the end user of the PaaS system . The packaged software application can then be pushed from the local SCM repository to a remote SCM repository at the node s running the associated application. From the remote SCM repository the code may be edited by others with access or the application may be executed by a machine. Other SCM systems work in a similar manner.

The client layer in one embodiment also includes a set of command tools that a user can utilize to create launch and manage applications. In one embodiment the command tools can be downloaded and installed on the user s client machine and can be accessed via a command line interface or a graphical user interface or some other type of interface. In one embodiment the command tools expose an application programming interface API of the broker layer and perform other applications management tasks in an automated fashion using other interfaces as will be described in more detail further below in accordance with some embodiments.

In one embodiment the broker layer acts as middleware between the client layer and the node layer . The node layer includes the nodes on which software applications are provisioned and executed. In one embodiment each node is a VM provisioned by an Infrastructure as a Service IaaS provider such as Amazon Web Services. In other embodiments the nodes may be physical machines or VMs residing on a single physical machine. In one embodiment the broker layer is implemented on one or more machines such as server computers desktop computers etc. In some embodiments the broker layer may be implemented on one or more machines separate from machines implementing each of the client layer and the node layer or may implemented together with the client layer and or the node layer on one or more machines or some combination of the above.

In one embodiment the broker layer includes a broker that coordinates requests from the client layer with actions to be performed at the node layer . One such request is new application creation. In one embodiment when a user using the command tools at client layer requests the creation of a new application or some other action to manage the application the broker first authenticates the user using an authentication service . In one embodiment the authentication service may comprise custom authentication methods or standard protocols such as SAML Oauth etc. Once the user has been authenticated and allowed access to the system by authentication service the broker uses a server orchestration system to collect information and configuration information about the nodes 

In one embodiment the broker uses the Marionette Collective MCollective framework available from Puppet Labs as the server orchestration system but other server orchestration systems may also be used. The server orchestration system in one embodiment functions to coordinate server client interaction between multiple sometimes a large number of servers. In one embodiment the servers being orchestrated are nodes which are acting as application servers and web servers.

For example if the broker wanted to shut down all applications on all even numbered nodes out of 100 000 nodes the broker may provide one command to the server orchestration system . Then the server orchestration system would generate and distribute a message to all nodes to shut down all applications if the node is even using a messaging and queuing system. Thus in one embodiment the broker manages the business logic and model representing the nodes and the applications residing on the nodes and acts as a controller that generates the actions requested by users via an API of the client tools . The server orchestration system then takes the actions generated by the broker and orchestrates their execution on the many nodes managed by the system.

In one embodiment the information collected about the nodes can be stored in a data store . In one embodiment the data store can be a locally hosted database or file store or it can be a cloud based storage service provided by a Software as a Service SaaS provider such as Amazon S3 Simple Storage Service . The broker uses the information about the nodes and their applications to model the application hosting service and to maintain records about the nodes. In one embodiment data of a node is stored in the form of a JavaScript Object Notation JSON blob or string that maintains key value pairs to associate a unique identifier a hostname a list of applications and other such attributes with the node.

In embodiments of the disclosure the PaaS system architecture of is a multi tenant PaaS environment. In a multi tenant PaaS environment each node runs multiple applications that may be owned or managed by different users and or organizations. As such a first customer s deployed applications may co exist with any other customer s deployed applications on the same node VM that is hosting the first customer s deployed applications . In some embodiments portions of an application are run on multiple different nodes . For example as shown in components of application are run in both node and node . Similarly application is run in node and node while application is run in node and node

In addition each node also maintains a cartridge library . The cartridge library maintains multiple software components referred to herein as cartridges that may be utilized by applications deployed on node . A cartridge can represent a form of support software or middleware providing the functionality such as configuration templates scripts dependencies to run an application and or add a feature to an application . In one embodiment the cartridges support languages such as but not limited to JBoss PHP Ruby Python Perl and so on. In addition cartridges may be provided that support databases such as MySQL PostgreSQL Mongo and others. Cartridges may also be available that support the build and continuous integration environments such as a Jenkins cartridge. Lastly cartridges may be provided to support management capabilities such as PHPmyadmin RockMongo 10gen mms agent cron scheduler and HAProxy for example. Adding an instance of a cartridge from cartridge library to an application provides a capability for the application without the customer who owns the application having to administer or update the included capability.

In embodiments of the disclosure an end user of PaaS system may provide application code updates to one or more applications of the end user hosted by PaaS system . The application code updates may include a marker file that indicates the application is to be deployed using a hot deploy functionality. In other embodiments mechanisms other than a marker file trigger the hot deployment such as an environmental variable or any other trigger mechanism.

In one embodiment hot deployment functionality refers to an ability to make changes to an application without restarting the application. The end user may add the marker file as part of code changes made to an application or as part of the initial creation of the application and then store those changes in the local SCM repository associated with the application As illustrated in application and B have a marker file associated with the application while application does not. However different arrangements of associations between marker files and applications are possible.

The packaged software application including the marker file can then be provided e.g. pushed from the local SCM repository to a remote SCM repository . In some embodiments there is a remote SCM repository on each node that the application executes. The remote SCM repositories stores application for editing and or for execution on the node 

In one embodiment when the marker file is part of the application code pushed to the remote SCM repositories it indicates to cartridges providing application framework for the application that the cartridges should each provide hot deployment functionality for the applications so that the application does not have to be restarted. The marker file acts as a single indication that may invoke a hot deployment functionality across a variety of different cartridge types that an application may run irrespective of the type of cartridge. As a result an end user of the PaaS platform does not have to be aware of or implement the specific functionality for providing hot deployment in each cartridge instance type that provides the framework for the application. Instead the user may add the marker file to the application code and the PaaS platform takes care of the hot deployment functionality implementation.

In some embodiments an automatic determination i.e. without a marker file of whether a hot deployment should occur is implemented. For example if the server is running in development mode and only the application code has been changed the system may infer a hot deployment is possible and cause hot deployment functionality to be implemented.

Each node also includes a server orchestration system agent configured to track and collect information about the node and to perform management actions on the node . Thus in one embodiment using MCollective as the server orchestration system the server orchestration system agent can act as a MCollective server. The server orchestration system would then act as the MCollective client that can send requests queries and commands to the MCollective server on node .

As previously mentioned cartridges provide the underlying support software that implements the functionality of applications . In one embodiment an application may utilize one or more cartridge instances that are run in one or more resource constrained containers on nodes . Cartridge library provides an OS based location outside of all application containers that acts as a source for cartridge instantiations that provide functionality for an application . An application may use more than one cartridge instance as part of providing functionality for the application . One example of this is a JavaEE application that uses a JBoss AS7 cartridge with a supporting MySQL database provided by a MySQL cartridge. Each cartridge instance may include a software repository that provides the particular functionality of the cartridge instance .

A container is a resource constrained process space on the node to execute functionality of an application. In some embodiments a container is established by the node with resource boundaries including a limit and or designation of the amount of memory amount of storage and security types and or labels to be applied to any functions executed by the container . In one embodiment containers may be established using the Linux Containers LXC virtualization method. In further embodiments containers may also be established using cgroups SELinux and kernel namespaces to name a few examples.

In some embodiments a container is also known as a gear. In some embodiments cartridges instances for an application may execute in containers dispersed over more than one node as shown with application illustrated in . In other embodiments cartridge instances for an application may run in one or more containers on the same node as shown with application in .

Nodes may also include remote SCM repositories for each application running on the node . The remote SM repositories are the same as their counterparts described with respect to . In one embodiment when application code changes are received e.g. via a push operation in an application s remote SCM repository the remote SCM repository invokes cartridge library to run a number of hooks to build and configure the application. In one embodiment a hook is code that handles intercepted function calls events or messages passed between software components.

For example in the case of a git SCM system a pre receive git hook is setup on the remote Git repository that calls into cartridges hooks associated with the cartridges providing the framework for the application . The cartridge hooks manage the build and deployment of the application including how to interpret the marker file included with the code changes. As previously discussed the marker file indicates that the application should implement hot deployment functionality to prevent the application from restarting upon receiving code changes. Depending on the type of cartridge instance running different functionality may be invoked to implement hot deployment at the cartridge instance . In one embodiment the functionality to implement hot deployment for the cartridge instance is represented at hot deploy module . The cartridge instances themselves implement the approach that is right for their use case. The overall cartridge instance framework provides many helpers and common functions to each the hot deployment implementations but each cartridge instance type also provides specific of how the hot deployment should occur.

The following are some examples of hot deploy implementations for different cartridge types that may be part of a PaaS system. However these examples are not meant to be limited to embodiments of the disclosure. In the case of a JBoss cartridge type a JBoss HDScanner may identify any modifications and redeploys them. If previously deployed artifacts are removed as part of the update they are undeployed automatically. In the case of a PHP or Perl cartridge type the application code is built dependencies are processed and user build action hooks are run and deployed to the application . However the application does not restart. This is true for Jenkins and non Jenkins enabled applications. For Jenkins enabled applications the build may be performed on a Jenkins slave instance and then synchronized to the containers where the application is running. For the case of a Ruby cartridge type the Passenger restart.txt file is touched causing the application to serve new code without a full restart of application .

Method begins at block where application code changes are received at an SCM repository of a PaaS system. In one embodiment the SCM repository is a git remote repository maintained on a node of a multi tenant PaaS system. The application changes may be provided via a git push command from an end user sending the application code from the end user s local git repository to the remote git repository at the node. In some embodiments if an application associated with the code changes is implemented over multiple nodes in the PaaS system the application code changes are provided to remote SCM repositories on the multiple nodes.

At block the SCM repository invokes one or more cartridges of the application affected by the application code changes once the application code changes are received. The cartridges are invoked by calling into cartridge hooks of cartridge instances used to provide a framework for the application on the node. At each cartridge instance of the application block the cartridge instance determines whether a marker file is present in the updated application code at decision block . In one embodiment a marker file is a file added by the end user to the application code that indicates a hot deployment functionality should be utilized for application updates.

If so at block the cartridge instance invokes hot deployment functionality that is specific to the cartridge type. For example a JBoss cartridge instance type implements JBoss dependent code for hot deployment that allows code changes to be made to the application without restarting the cartridge and or application. Similarly a PHP or Perl cartridge instance type provides a different yet cartridge dependent hot deployment functionality that allows code changes to the made to the application without restarting the cartridge instance and or application and so on. Accordingly at block codes changes of the application are implemented at the cartridge instance without a restart of the application.

On the other hand if a marker file is not present in the updated application code at decision block method proceeds to block where build and deployment functionality for the application are invoked by the cartridge instance without a hot deployment functionality. In other words the application code changes are implemented and may include a restart of the cartridge and or application.

The computer system includes a processing device e.g. processor CPU etc. a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute the processing logic for performing the operations and steps discussed herein.

The computer system may further include a network interface device communicably coupled to a network . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium on which is stored software embodying any one or more of the methodologies of functions described herein. The software may also reside completely or at least partially within the main memory as instructions and or within the processing device as processing logic during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media.

The machine readable storage medium may also be used to store instructions to implement a hot deploy module to perform deployment optimization in a multi tenant PaaS system such as the hot deploy module described with respect to and or a software library containing methods that call the above applications. While the machine accessible storage medium is shown in an example embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the disclosure. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

In the foregoing description numerous details are set forth. It will be apparent however that the disclosure may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the disclosure.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as sending receiving attaching forwarding caching referencing determining providing implementing or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the method steps. The structure for a variety of these systems will appear as set forth in the description below. In addition the disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

The disclosure may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the disclosure. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

Whereas many alterations and modifications of the disclosure will no doubt become apparent to a person of ordinary skill in the art after having read the foregoing description it is to be understood that any particular embodiment shown and described by way of illustration is in no way intended to be considered limiting. Therefore references to details of various embodiments are not intended to limit the scope of the claims which in themselves recite only those features regarded as the disclosure.

