---

title: Encrypted network traffic interception and inspection
abstract: A method of operating a computing device that allows inspecting data that the device attempts to transmit over a network in an encrypted form for presence of malware, viruses or confidential information. The method includes intercepting a request from an application to an encryption component of an operating system to encrypt the data and acquiring encrypted data generated by the encryption component in response to the request. SSL or TLS protocol may be used for encryption. The request may be intercepted using API hooking. The data in an unencrypted form and an identifier of the encrypted data may be provided to a data inspection facility for establishing a correspondence between the unencrypted and encrypted data, using the identifier. The data inspection facility performs inspection of the unencrypted data to determine whether to allow transmission of the encrypted data over the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09118700&OS=09118700&RS=09118700
owner: Microsoft Technology Licensing, LLC
number: 09118700
owner_city: Redmond
owner_country: US
publication_date: 20131001
---
This application claims priority to and is a continuation of co pending U.S. patent application Ser. No. 12 818 605 entitled Encrypted Network Traffic Interception and Inspection and filed Jun. 18 2010 which is incorporated herein by reference.

Security of computer systems is becoming an increasingly important issue especially with the advent of the Internet which dramatically facilitated exchange of large amount of data among computers. The security may relate to protection of computer systems from attacks from malicious parties which may introduce viruses worms and other malicious data to the systems. Another security issue relates to ensuring confidentiality of data transmitted over public networks such as the Internet by protecting the transmitted data from access by undesirable parties.

The security of a computer system may also encompass control of distribution and access of information stored in the computer system. For example an enterprise or an organization may have a policy defining which information is desirable to be protected from being distributed outside of the enterprise s computer systems. Such information may include for example personal information financial documents medical records description of confidential technology and other sensitive information.

Computers exchange data using different network communications protocols such as for example Transmission Control Protocol Internet Protocol TCP IP . The TCP IP has been developed to enable communications between computers without specific concerns for security. Information transmitted in accordance with the TCP IP may therefore be subject to different security vulnerabilities. Thus a variety of security systems have been developed to protect computers from intrusion and to control information stored on the computers. Such security systems examine data received by the computer systems and data that the computer systems attempt to send. To determine whether to allow or block sending or receiving these data over a network the security systems typically need access to the data in an unencrypted or decryptable form.

To improve their security and prevent undesirable interference with transmitted data many applications increasingly use such measures as encryption and authentication. Different protocols are used to encrypt data sent over a network. A commonly used protocol for encryption and authentication is the Secure Socket Layer SSL protocol and its derivatives. While using the SSL improves security data encrypted using the SSL protocol may not be properly analyzed and interpreted by network security systems controlling access to a network because the data is encrypted. Malicious parties e.g. applications and services may use this feature to bypass security protections or security policies implemented by the network security systems. For example if data containing viruses Trojans or other malicious content is sent or received in an encrypted form this may not be detected by a network security system. In addition encrypted sensitive data may be sent outside of an organization thus compromising data privacy.

A system method and computer readable storage medium that allow inspecting data that an application executed by a computing device attempts to transmit over a network even though such outgoing data is encrypted for its transmission over the network. A technique is provided for intercepting a request from the application to encrypt the data the request comprising an unencrypted data and directed to a component of an operating system of the computing device that provides security for communications over networks and performs data encryption decryption.

The interception may be performed by an intercepting component implemented using a known programming technique referred to as an application programming interface API hooking. The API hooking allows intercepting calls from the application to the component of the operating system that performs data encryption. The data encryption may be performed in accordance with a Secure Socket Layer SSL protocol a Transport Layer Security TLS protocol or any other protocol.

Intercepting the request from the application may provide access to the unencrypted data. The unencrypted data along with an identifier for an encrypted data is provided to a data inspection facility of the network security system. The intercepted request proceeds to the encryption component which encrypts the unencrypted data to provide encrypted data. The encrypted data is then provided to the data inspection facility which may establish a correspondence between the unencrypted data and the encrypted using the identifier for the encrypted data. The correspondence may be established because the data inspection facility receives unencrypted and encrypted data from multiple application processes and may not discern which received unencrypted data is an encrypted form of which received encrypted data.

The data inspection facility may identify a corresponding unencrypted data for received encrypted data and inspects the unencrypted data to determine whether to allow or block transmission in an encrypted form of this data over the network. When the transmission is allowed the received encrypted data may be transmitted over the network.

A computing device in a networked environment may exchange data over a network such as the Internet with other computing devices in the networked environment. The inventors have appreciated that to ensure security of the computing device and to protect data that an application executed on the computing device attempts to transmit over the network it may be desirable to both encrypt the data and to inspect content of the data to determine whether the data is allowed to be transmitted. While encryption permits protecting confidentiality of the data by preventing malicious or any other party different from a party to whom the data is being sent from accessing the data inspection of the content of the data may allow determining whether the data is malicious or whether any restrictions on distribution of the data outside of the computing device apply.

The determination of whether the data is allowed to be transmitted over the network may be performed by a suitable system implementing network security functionality. Network security systems that control access of data to a network typically require the data to be in a clear text form meaning that the data is unencrypted so that its content may be accessed by a network security system. At the same time the data may be encrypted prior to being transmitted over a network. As a result it may not be straightforward for existing network security systems to inspect content of such encrypted data.

Existing approaches to providing data to network security systems in a form that allows the systems to inspect and interpret the data include implementing security systems that act as a proxy between a client executing an application and a server. When such mechanisms are used the security systems may decrypt encrypted data inspect it and encrypt the processed decrypted data. However such decryption encryption may modify a certificate used to sign the data. Accordingly a user may see a certificate provided by the proxy rather than by a party whose certificate the user expects to see. For example instead of a SSL certificate from a known certificate provider e.g. the VeriSign the user may see a certificate used by the proxy. This may adversely affect user experience. In addition such proxy systems may be complex to deploy and manage.

The inventors have recognized and appreciated that a method system and computer readable storage medium for implementing a technique for both encrypting or decrypting data transmitted over a network and determining whether transmitting the data may provide a potential risk of security vulnerability or violation of information control may be provided. The technique may allow a suitable network security system to inspect the data which is being encrypted for transmission over a network in an unencrypted form. As a result the security of the network communications may be improved without compromising the requirement to encrypt the data to protect it from access by undesirable parties.

The technique may involve intercepting a request from an application that attempts to transmit data over a network to an interface that provides access to a component of the operating system providing security of network communications. In some embodiments the request may be a request to encrypt the data directed to an encryption component which may be part of the operating system. The interception may involve overriding certain functions of the component providing security of network communications.

The request comprising unencrypted data that the application attempts to transmit over the network may be a request to encrypt the unencrypted data. The interception of the request may allow gaining access to the unencrypted data that the application provides for encryption to the encryption component and to encrypted data provided by the encryption component as a result of encrypting the unencrypted data. Accordingly no additional encryption or decryption may be required and the interception may therefore be performed in a manner transparent to a user. In addition no additional certificates may be provided for the user to view. These may improve user experience.

Applications may perform theirs tasks by interacting with an operating system by presenting to the operating system requests or calls via an application programming interface API as known in the art. For example an application may present to the operating system a request for a desired service. In some embodiments of the invention this may be a request to encrypt data that the application attempts to transmit over a network.

In some embodiments of the invention of the invention interception of requests or calls from the application to the encryption component in accordance with some embodiments of the invention may be performed using an application programming interface API hooking API hooking is a programming technique employed when it is desirable to change a manner in which an application interacts with an operating system or any other program. API hooking thus allows interception of calls to the operating system made by an application during its execution.

In the API hooking the hooks may be computer executable instructions that redirect certain computer readable instructions from their original path. Thus API hooking may include the redirection of an API call directed to the operating system to some other component such as a replacement function. Such function may perform some manipulation or other processing of input parameters of the API call before transferring control back to the called API. The replacement function may also manipulate return results of the API before passing the return results back to the caller of the API.

In some embodiments intercepting the request from the application may provide access to the unencrypted data. The unencrypted data along with an identifier for corresponding encrypted data may be provided to a data inspection facility. The identifier may be for example a part of the encrypted data such as a prefix of the encrypted data. The intercepted request proceeds to the encryption component which encrypts the unencrypted data to provide encrypted data.

The encrypted data may be provided to the data inspection facility which may establish a correspondence between the unencrypted data and the encrypted data using the identifier for the encrypted data. The correspondence may be established because the data inspection facility receives unencrypted and encrypted data from multiple application processes which each may establish multiple connections and may not discern which received unencrypted data is an encrypted form of which received encrypted data. Establishing a correspondence between unencrypted data and corresponding encrypted data allows performing asynchronous inspection of outgoing data.

The data inspection facility may identity a corresponding unencrypted data for received encrypted data and inspect the unencrypted data to determine whether to allow or block transmission in an encrypted form of this data over the network. Any suitable policies may be employed while inspecting the unencrypted data.

The policies may be acquired by the computing device in any suitable way. For example the policies which may be configurable may be installed as part of an operating system executed by the computing device may be provided by a user of the computing device or received via the Internet. As another example if the computing device belongs to an enterprise network the computing device may transmit data in accordance with policies of the enterprise. The enterprise policies may define for example what type of information is undesirable to be communicated outside of the enterprise. Such information may comprise personal information e.g. social security numbers of organization s employees or customers medical records financial records description of confidential technology and other sensitive information.

When the data inspection facility determines based on the inspection of the unencrypted data that transmission of the encrypted data is allowed the encrypted data may be transmitted over the network. Alternatively when the data inspection facility determines that the unencrypted data comprises malicious data e.g. malware Trojans or viruses or may compromise confidentiality of information the encrypted data may be blocked from being transmitted over the network.

Client may be any end station device that receives network services such as a workstation personal computer personal digital assistant or any other suitable computing device. Server may be any suitable computing device that provides network services to one or more clients such as a workstation personal computer mini computer mainframe or any other suitable computing device. Any suitable communication protocol such as a TCP IP protocol may be used for communications between the client and server . Though embodiments of the invention are not limited to a particular way of communication between client and server .

In some embodiments client may be part of a private network such as an enterprise or an organization s network. In such scenarios another computer may acts as a gateway to client operating behind the gateway. In an enterprise network client may operate in accordance with certain privacy security and other rules imposed by the enterprise network.

In the example illustrated client may comprise components that provide control over data which client transmits and receives over network in accordance with some embodiments of the invention. Client may execute an application such as an Internet Explorer or any other suitable application which may attempt to transmit or receive data over network . The components providing control over the data may provide functionality that allows inspection of data that client attempts to send over network even though the data is being encrypted. This may be performed efficiently and in a manner that is transparent to a user of one or more applications hosted on client .

In one embodiment of the invention server may be a SSL server and client may be a SSL client meaning that each is capable of communicating data encrypted in accordance with the SSL protocol. The SSL protocol allows for client and server to communicate in a secure manner over a public network. Though any other suitable protocols may be used for communicating data between client and server . It should also be appreciated that client and server may be any suitable computing devices which may comprise any components which are not shown in for the sake of simplicity.

It should be appreciated that any of the computers described above and any of their components can be implemented in any of numerous ways. For example the functional components or operations described herein may be implemented using software hardware or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Further it should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable or fixed electronic device.

Computing device may support applications such as application which may be an email web browsing database access or any other application. For example in some embodiments application may be Microsoft Internet Explorer Microsoft Outlook or any other suitable application. It should be appreciated that computing device may execute by a processor which may be one or more of any suitable processors more than one application.

Application may communicate with other computing devices on a network e.g. network by establishing a secure connection with each of the devices and attempting to send receive data over the secure connection. The data may be for example an email message comprising in its body and or as an attachment text images graphics a combination thereof or any other information. Also in scenarios where application comprises a web browser the data may comprise any data entered via the web browser and thus sent to a remote computer such as server . Though it should be appreciated that embodiments of the invention are not limited to a particular type or format of data that application may transmit or receive over the network. In addition even though some embodiments of the invention are described in connection with intercepting and inspecting of outgoing data that application attempts to transmit over the network it should be appreciated that the techniques described herein may apply to incoming data as well.

In some embodiments of the invention application may attempt to transmit data over the network. To increase security and confidentiality of the outgoing data transmitted by application the outgoing data may be encrypted. Transmitting the data via the network in an encrypted form may deter access and possible alteration of the data by a party other than a party to which the data is destined.

To encrypt the outgoing data application may present a request to encrypt the data to encryption component . In some embodiments encryption component may be a SSL component. SSL protocol may be defined as an enhancement to the TCP IP standards of network protocol for secure communication between devices as known in the art. Application may use SSL protocol to establish a secure connection with a computing device e.g. server to which application attempts to send data. Though it should be appreciated that encryption component may utilize any other suitable protocol such as a Transport Layer Security TLS protocol or others. It should also be appreciated that encryption component is referred to herein as encryption component for the sake of simplicity only as encryption component may perform decryption of encrypted data and any other suitable functions.

Encryption component may encrypt unencrypted data e.g. information including unencrypted text images graphics and any combination thereof received via a call from interception component from application . The encryption may be performed in accordance with any suitable encryption algorithm. It should be appreciated that in some embodiments encryption component may also decrypt secure encrypted data received on computing device .

In embodiments of the invention in which Windows operating system available from the Microsoft Corporation of Redmond Wash. is deployed encryption component may be a security provider such as secure channel schannel which is implementation of the SSL and its successor TSL by the Microsoft Corporation. Schannel may be implemented as part of the operating system. Also in some embodiments it may be part of application . Though it should be appreciated that encryption component may be implemented in any other suitable manner as embodiments of the invention are not limited in this respect.

Interception component shown in may intercept a request from application to encrypt data that application attempts to transmit via a secure connection over a network. It should be appreciated that interception component may be implemented in any other suitable manner as embodiments of the invention are not limited in this respect.

In some embodiments interception component may be implemented using a programming technique referred to as API hooking API hooking may include intercepting requests from application directed to a component of the operating system that implements encryption and decryption of data. In the example illustrated such component may be encryption component . By employing such API hooking technique in comparison to existing systems no additional certificates are required because encryption component perform the encryption and in some embodiments decryption of the data and no additional component is provided to perform encryption decryption. Accordingly the interception of outgoing data by interception component and subsequent inspection of outgoing the data for security vulnerabilities may be transparent to the user of computing device which in addition to providing enhanced security improves user experience.

In embodiments of the invention in which an operating system developed by the Microsoft Corporation is employed one or more suitable functions of a library may be used to intercept API requests or calls from application to a suitable component of the operating system such as encryption component . For example the function s of the library may be utilized to override a function to initialize schannel.dll of encryption component which performs encryption and decryption of data in accordance with a SSL or other suitable protocol. The library may be for example Detours library or any other suitable set of software components.

In some embodiments interception component may be implemented to provide functionality of an interface to encryption component . For example interception component may be implemented to provide a set of functions of an application programming interface referred to as Security Support Provider Interface SSPI which supports implementation of SSL TLS and other suitable protocols developed by the Microsoft Corporation. These functions may be used to access the schannel.dll. Accordingly in embodiments of the invention in which computing device executes Windows operating system interception component may be implemented to execute functions of SSPI that allow interception component to be loaded into a process space of application when the application executes.

In some embodiments API hooking utilized by interception component may be implemented by injecting a dynamic link library DLL into a process space of the application. In some scenarios a DLL may be a file containing executable instructions such as functions of SSPI which may be loaded and executed by application while it is running. The DLL may be a library registered in operating system configuration e.g. registry in a Windows operating system . Though it should be appreciated that API hooking may be implemented in any other suitable way as embodiments of the invention are not limited in this respect.

Regardless of a particular way in which encryption component and interception component are implemented as a result of interception of the request to encryption component to encrypt the unencrypted data interception component may gain access to both unencrypted data and its encrypted counterpart. Interception component may provide the unencrypted data and an identifier of the encrypted data to data inspection facility .

Application may provide encrypted data to service provider interface which operates as an interface between application and networking manager component . It should be appreciated that service provider interface is shown as a separate component by way of example only as it may be part of networking manager or any other suitable component. Service provider interface may translate encrypted data acquired from application into data of a format required by TCP IP component . In embodiments of the invention in which Windows operating system is implemented service provider interface may comprise WinSock. Winsock is a DLL that serves as an interface to a transport service provider which is in this example TCP IP component of networking manager . Winsock may be implemented in accordance with any techniques such as those as known in the art or others.

Service provider interface may communicate with networking manager and may provide encrypted data received from application to networking manager . Networking manager may be a facility that allows communication of computing device via a network. TCP IP component of networking manager may be a protocol stack component which is a part of a core of operating system of computing device . Networking manager may comprise any other suitable components and communicate with a network interface hardware which provides physical interface to the network.

As shown in networking manager may communicate with data inspection facility which may detect malware viruses and other malicious data in inspected data. Also data inspection facility may inspect data to determine whether transmitting the data over a network may result in loss of confidentially of certain sensitive information. This may be performed using policies.

Data inspection facility may receive the encrypted data via a path from application via networking manager . Data inspection facility may not be able to discern which connection established by application provided the received encrypted data. Accordingly the unencrypted data may be provided to data inspection facility by interception component along with an identifier of corresponding encrypted data. Data inspection facility may establish a correspondence between the unencrypted data and its encrypted counterpart the encrypted data using the identifier of the encrypted data. The identifier may comprise any suitable subset s of the encrypted data.

After the correspondence between the unencrypted data and the encrypted data is established data inspection facility may inspect the unencrypted data for content that may trigger security vulnerabilities or violate any suitable confidentiality and security policies. Data inspection facility may thus determine whether to allow transmission of the encrypted counterpart of the corresponding encrypted data.

It should be noted that techniques implemented in accordance some embodiments of the invention are described herein in connection with interception and inspection of outgoing data that application attempts to transmit over the network in an encrypted form. Though it should be appreciated that embodiments of the invention may apply to decrypting and inspecting inbound data sent to application over the network as well.

Application may provide a request to encryption component to encrypt an unencrypted data that application attempts to transmit over the network. As shown in request may be intercepted by interception component . The interception may be performed via an API hooking technique or in any other suitable manner.

After request is intercepted by interception component request may proceed to its original destination encryption component . Encryption component may encrypt the unencrypted data to provide corresponding encrypted data as shown in . The encryption may be performed in accordance with any suitable cryptographic or encryption algorithm s . The encrypted data may also be intercepted by interception component . Hence interception component acquires both the unencrypted data and corresponding encrypted data. It should be appreciated that while request is intercepted by interception component the interception does not interfere with request meaning that request reaches encryption component which then provides in response to the request the encrypted data to application .

Computing device may execute more then one application at a time which is shown schematically in as multiple process spaces where each process spaces may correspond to a different application. Moreover an application such as application may establish more than one TCP connection to a computing device e.g. server with which the application may exchange data over the TCP connection. Thus process spaces may comprise more than one process space for more than one respective TCP connection established by the same application.

Each of process spaces may comprise a separate instance of interception component . Accordingly multiple unencrypted and corresponding encrypted data may be intercepted by interception component . These unencrypted and corresponding encrypted data may be forwarded via respective different paths to data inspection facility . When data inspection facility receives the unencrypted data and corresponding encrypted data data inspection facility may not be able to determine which unencrypted and encrypted data are forwarded by the same application process or for the same connection of multiple connections established by an application. Hence for the purpose of establishing a correspondence between unencrypted data and its encrypted counterpart the encrypted data an identifier of the encrypted data may be employed.

Interception component may generate the identifier for the encrypted data which comprises identification information on the encrypted data. The identification information may be any suitable subset s of the encrypted data. The identification information may comprise information identifying a connection over which application attempts to send data and an instance of interception component executed within process space and or any other suitable information used to identify the encrypted data so that to establish in data inspection facility a correspondence between the encrypted data and its unencrypted counterpart.

The unencrypted data and the identifier for the corresponding encrypted data acquired by interception component may be forwarded to data inspection facility as shown by an arrow in . Interception component may be loaded into a process space of every application that transmits data over a secure connection. Thus multiple instances of interception component may be executed. Separation of the interception and inspection functionality into separate processes may improve efficiency in terms of memory consumption.

Accordingly in some embodiments while interception component is executed by one or more processors of computing deice e.g. processor in in process space data inspection facility may be executed by the one or more processors in a separate process space. These separate processes may communicate via an interprocess communication mechanism referred to as a remote procedure call RPC that enables data exchange and invocation of functionality residing in a different process. In some embodiments the unencrypted data and the identifier may be forwarded to data inspection facility via such RPC. Though it should be appreciated the unencrypted data and the identifier may be forwarded to data inspection facility in any suitable way as embodiments of the invention are not limited in this respect.

The encrypted data provided by encryption component to application may be sent to service provider interface as shown by an arrow . Service provider interface may be WinSock or any other suitable component which may forward the encrypted data to TCP IP component of networking manager . Service provider interface may thus forward the encrypted data to TCP IP component of networking manager as shown by an arrow in .

TCP IP component of networking manager may forward the encrypted data via driver to data inspection facility as shown by respective arrows and . Driver may be any suitable component that may provide encrypted data from TCP IP component to data inspection facility . For example driver may be Transport Driver Interface TDI driver Windows Filtering Platform WFP driver and any other suitable component.

Data inspection facility may also comprise inspection component which may inspect the encrypted data to determine whether to allow transmission of the encrypted data over the network or block the encrypted data from being transmitted. In some embodiments inspection component may utilize one or more policies in inspecting the encrypted data. illustrates that data inspection facility may comprise policies which may be utilized by inspection component in inspecting the encrypted data. Though it should be appreciated that policies are shown to be part of data inspection facility by way of example only as the policies may be located on one or more of any suitable components in computing device .

Policies may be acquired by the computing device in any suitable way and from any suitable source. For example policies may be default policies provided to computing device as part of an operating system e.g. Windows operating system installed on computing device . A user of computer may be enabled to configure policies .

In embodiments of the invention where computing device is part of an enterprise network policies may be obtained by computing device from a facility that manages policies within the enterprise network. As an example an enterprise may define which information may not be allowed to be transmitted outside of computers forming the enterprise network. Policies may also comprise information related to for example a user application services and any other suitable information used in inspection of outgoing and in some embodiments incoming network traffic. In some embodiments policies may be obtained via the Internet. Though it should be appreciated that embodiments of the invention are not limited to any particular way in which policies for data inspection facility may be acquired.

Inspection component or other suitable component s of data inspection facility performing inspection of encrypted data for presence of malicious data may have pattern matching capabilities that allow it to indentify patterns in inspected data that may be indicative of malware. Though it should be appreciated that the inspection of encrypted data may be performed in any suitable manner as embodiments of the invention are not limited in this respect.

Data inspection facility may be implemented in any suitable manner. In some embodiments data inspection facility may be an implementation of the Microsoft Corporation referred to as Network Inspection Service which provides security for network communications.

In some embodiments of the invention data inspection facility may execute in a user mode. To receive data that may be provided from a kernel mode data inspection facility may include what may be referred to as interception points not shown which may be defined as components used to receive data from the kernel mode and provide the data to a core of data inspection facility .

It should be appreciated that components shown in connection with may be stored in a suitable computer readable storage medium which may be any suitable non transitory tangible computer storage medium. The components may be executed by one or more processors. In the example illustrated components shown in may be located on the same computing device . Though it should be appreciated that the components may be located on different computing devices or may be apportioned in a suitable way between more than one computing device.

Process may start at any suitable time. For example process may start when an application e.g. application is running on a computing device e.g. a user is using application and attempts to transmit the data over the network. For example the application may be attempting to send an email message or to provide data over the network in any other suitable way.

At block process may intercept a request from the application to encrypt the unencrypted data. The request may be an API call and may be directed to a component of an operating system of the computing device that performs data encryption e.g. encryption component in .

The interception of the request may be performed for example by interception component . In some embodiments it may be performed in accordance with an API hooking technique. The API hooking allows intercepting a request from the application to the encryption component the request including outgoing unencrypted data to be encrypted by the encryption component. The interception also involves interception of a return result of the request which is in the example illustrated encrypted data provided by the encryption component as a result of encryption of the unencrypted data. The encryption may be performed using SSL protocol. Though embodiments of the invention are not limited in this respect and any other suitable protocol e.g. TLS or data encryption technique may be used to encrypt the data.

Intercepting the request may thus allow gaining access to the unencrypted data and to the encrypted data after the unencrypted data has been encrypted by the encryption component. Thus at block of process the encrypted data may be received from the encryption component.

Next process may continue to block where the interception component may forward the unencrypted data acquired as a result of interception of the request from the application to a component that performs inspection of the unencrypted data for presence of any indication that the unencrypted data may trigger security vulnerabilities. In some embodiments such component may be data inspection facility .

In addition to forwarding the unencrypted data to data inspection facility the interception component may forward to data inspection facility an identifier of the encrypted data that is an encrypted form of the unencrypted data. The identifier may comprise any suitable information that allows determination of a correspondence between the unencrypted data and its encrypted form the encrypted data. In some embodiments the identifier may be for example a part of the encrypted data such as a prefix of the encrypted data. The prefix may be for example first 32 or other number of bytes of the encrypted data. The prefix may be selected so that no actual content of the encrypted data it used in the prefix. When the encryption component utilizes cryptographic algorithms in accordance with the SSL protocol the prefix of the encrypted data may be assumed to be random enough to associate the unencrypted data and corresponding encrypted data. Though it should be appreciated that the identifier of the encrypted data may be implemented in any suitable manner as embodiments of the invention are not limited in this respect.

As discussed above multiple application processes may be executed each comprising an instance of the interception component. Accordingly data inspection facility may receive multiple encrypted data as well multiple unencrypted data which may be related to different application processes. To determine which encrypted data corresponds to which unencrypted data data inspection facility may employ the identifier.

At block the interception component may forward the encrypted data to data inspection facility . This process may involve traversing a number of components by the encrypted data as shown in connection with .

Next a driver e.g. driver in from the networking manager may acquire the encrypted data from the TCP IP component at block and to forward the encrypted data to a data inspection facility e.g. data inspection facility at block . Driver may be for example Transport Driver Interface TDI driver Windows Filtering Platform WFP driver or any other suitable component that may provide encrypted data from the networking manager to the data inspection facility. It should be noted that processing shown in connection with blocks in illustrates an exemplary path for the encrypted data. Any suitable path may be utilized to provide the encrypted data to the data inspection facility depending on a deployed operating system.

At block data inspection facility may receive the unencrypted data and an identifier of the encrypted data from the interception component which may obtain these data as described above. The identifier of the encrypted data and the unencrypted data may be provided to data inspection facility in any suitable manner which allows associating the identifier and the unencrypted data. In some embodiments the interception component may utilize a remote procedure call to forward the identifier of the encrypted data and the unencrypted data to data inspection facility . Data inspection facility may thus perform inspection of data in a process separate from the application process which may be an improvement in terms of efficiency of inspecting outgoing network traffic and overall memory consumption by the system.

At block data inspection facility may receive encrypted data. It should be appreciated that embodiments of the invention are not limited to a particular order in which processing at blocks and is performed and processing at block may be performed prior to processing at block .

Next at block data inspection facility may correlate the unencrypted data and encrypted data using the identifier. The correlation may involve determining that the encrypted data is an encrypted form of this particular unencrypted data. The correlation may be performed in any suitable manner. In some embodiments the correlation may involve scanning the encrypted data e.g. using a pattern matching technique to determine whether the encrypted data comprises information included in the identifier. If the match is successful it may be determined that the encrypted data is an encrypted form of the unencrypted data associated with the identifier.

Accordingly at block data inspection facility may inspect the unencrypted data to determine whether this data in an encrypted form comprising the encrypted data may be allowed to be transmitted over the network. The determination may be performed in any suitable manner as embodiments of the invention are not limited in this respect. For example suitable policies e.g. policies in may be applied to determine whether to prevent content of the unencrypted data from being accessed outside the computer or a private network to which the computer may belong. Any other suitable techniques may be used to determine whether the unencrypted data comprises malicious data which may compromise security.

At block it may be determined based on the inspection of the unencrypted data whether to allow network transmission of the encrypted data or block the encrypted data from being transmitted over the network. If it is determined at block that the encrypted data is allowed to be transmitted over the network process may continue to block where the encrypted data may be transmitted over the network. Otherwise if it is determined at block that the encrypted data is not allowed to be transmitted over the network process may branch to block where the encrypted data may be blocked from being transmitted over the network.

Regardless of whether the encrypted data is allowed to be transmitted over the network or is blocked from being transmitted over the network process may then end. Though it should be appreciated that data inspection facility may continue operating as more than one application processes may be running when the application executes. Also multiple applications may be executed on the computer.

It should be appreciated that even though embodiments of the invention are described in connection with intercepting and inspecting outgoing data that an application attempts to transmit over a network techniques and component described herein may be used to decrypt and inspect incoming data as well. An application executed by a computing device may request over the network any suitable data in any suitable manner. For example the data may be downloaded via a web browser received in a email message or provided to the application in any other suitable manner.

Having thus described several aspects of at least one embodiment of this invention it is to be appreciated that various alterations modifications and improvements will readily occur to those skilled in the art.

Such alterations modifications and improvements are intended to be part of this disclosure and are intended to be within the spirit and scope of the invention. Accordingly the foregoing description and drawings are by way of example only.

The above described embodiments of the present invention can be implemented in any of numerous ways. For example the embodiments may be implemented using hardware software or a combination thereof. When implemented in software the software code can be executed on any suitable processor or collection of processors whether provided in a single computer or distributed among multiple computers.

Further it should be appreciated that a computer may be embodied in any of a number of forms such as a rack mounted computer a desktop computer a laptop computer or a tablet computer. Additionally a computer may be embedded in a device not generally regarded as a computer but with suitable processing capabilities including a Personal Digital Assistant PDA a smart phone or any other suitable portable or fixed electronic device.

Also a computer may have one or more input and output devices. These devices can be used among other things to present a user interface. Examples of output devices that can be used to provide a user interface include printers or display screens for visual presentation of output and speakers or other sound generating devices for audible presentation of output. Examples of input devices that can be used for a user interface include keyboards and pointing devices such as mice touch pads and digitizing tablets. As another example a computer may receive input information through speech recognition or in other audible format.

Such computers may be interconnected by one or more networks in any suitable form including as a local area network or a wide area network such as an enterprise network or the Internet. Such networks may be based on any suitable technology and may operate according to any suitable protocol and may include wireless networks wired networks or fiber optic networks.

Also the various methods or processes outlined herein may be coded as software that is executable on one or more processors that employ any one of a variety of operating systems or platforms. Additionally such software may be written using any of a number of suitable programming languages and or programming or scripting tools and also may be compiled as executable machine language code or intermediate code that is executed on a framework or virtual machine.

When techniques described herein are embodied as computer executable instructions these computer executable instructions may be implemented in any suitable manner including as a number of functional facilities each providing one or more operations needed to complete execution of algorithms operating according to these techniques. A functional facility however instantiated is a structural component of a computer system that when integrated with and executed by one or more computers causes the one or more computers to perform a specific operational role. A functional facility may be a portion of or an entire software element. For example a functional facility may be implemented as a function of a process or as a discrete process or as any other suitable unit of processing. If techniques described herein are implemented as multiple functional facilities each functional facility may be implemented in its own way all need not be implemented the same way. Additionally these functional facilities may be executed in parallel or serially as appropriate and may pass information between one another using a shared memory on the computer s on which they are executing using a message passing protocol or in any other suitable way.

Generally functional facilities include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the functional facilities may be combined or distributed as desired in the systems in which they operate. In some implementations one or more functional facilities carrying out techniques herein may together form a complete software package for example as a web based social networking service. These functional facilities may in alternative embodiments be adapted to interact with other unrelated functional facilities and or processes to implement a software program application. In other implementations at least some of the functional facilities may be adapted to interact with other functional facilities in such a way as form an operating system including the Windows operating system available from the Microsoft Corporation of Redmond Wash. In other words in some implementations the functional facilities may be implemented alternatively as a portion of or outside of an operating system.

The invention may be embodied as a computer readable medium or multiple computer readable media e.g. a computer memory one or more floppy discs compact discs optical discs magnetic tapes flash memories circuit configurations in Field Programmable Gate Arrays or other semiconductor devices or other non transitory tangible computer storage medium encoded with one or more programs that when executed on one or more computers or other processors perform methods that implement the various embodiments of the invention discussed above. The computer readable storage medium or media can be transportable such that the program or programs stored thereon can be loaded onto one or more different computers or other processors to implement various aspects of the present invention as discussed above.

The terms program or software are used herein in a generic sense to refer to any type of computer code or set of computer executable instructions that can be employed to program a computer or other processor to implement various aspects of the present invention as discussed above. Additionally it should be appreciated that according to one aspect of this embodiment one or more computer programs that when executed perform methods of the present invention need not reside on a single computer or processor but may be distributed in a modular fashion amongst a number of different computers or processors to implement various aspects of the present invention.

Computer executable instructions may be in many forms such as program modules executed by one or more computers or other devices. Generally program modules include routines programs objects components data structures etc. that perform particular tasks or implement particular abstract data types. Typically the functionality of the program modules may be combined or distributed as desired in various embodiments.

Also data structures may be stored in computer readable media in any suitable form. For simplicity of illustration data structures may be shown to have fields that are related through location in the data structure. Such relationships may likewise be achieved by assigning storage for the fields with locations in a computer readable medium that conveys relationship between the fields. However any suitable mechanism may be used to establish a relationship between information in fields of a data structure including through the use of pointers tags or other mechanisms that establish relationship between data elements.

Various aspects of the present invention may be used alone in combination or in a variety of arrangements not specifically discussed in the embodiments described in the foregoing and is therefore not limited in its application to the details and arrangement of components set forth in the foregoing description or illustrated in the drawings. For example aspects described in one embodiment may be combined in any manner with aspects described in other embodiments.

Also the invention may be embodied as a method of which an example has been provided. The acts performed as part of the method may be ordered in any suitable way. Accordingly embodiments may be constructed in which acts are performed in an order different than illustrated which may include performing some acts simultaneously even though shown as sequential acts in illustrative embodiments.

Use of ordinal terms such as first second third etc. in the claims to modify a claim element does not by itself connote any priority precedence or order of one claim element over another or the temporal order in which acts of a method are performed but are used merely as labels to distinguish one claim element having a certain name from another element having a same name but for use of the ordinal term to distinguish the claim elements.

Also the phraseology and terminology used herein is for the purpose of description and should not be regarded as limiting. The use of including comprising or having containing involving and variations thereof herein is meant to encompass the items listed thereafter and equivalents thereof as well as additional items.

