---

title: Resource data query processing
abstract: A distributed execution environment provides resources such as computing resources, hardware resources, and software resources. One or more resource data providers might also operate in conjunction with the distributed execution environment to provide resource data describing various aspects of the resources in the distributed execution environment. A query service may obtain resource data provided by the resource data providers in order to generate responses to queries. In order to obtain the resource data from the resource data providers, the query service may utilize various “pull” and “push” mechanisms. Using a push mechanism, the resource data providers push resource data to the query service. Utilizing a pull mechanism, the query service pulls the resource data from the resource data providers. The query service might also store resource data received from the resource data providers in a cache and utilize the cached resource data when responding to queries for resource data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09473799&OS=09473799&RS=09473799
owner: Amazon Technologies, Inc.
number: 09473799
owner_city: Seattle
owner_country: US
publication_date: 20131217
---
Network based services exist that allow customers to purchase and utilize virtual machine instances on a permanent or as needed basis. In addition to virtual machine instances these services typically allow customers to purchase and utilize other types of computing resources. For example customers might be permitted to purchase and utilize data storage resources database resources networking resources and other types of computing resources which may be referred to herein as resources .

Managing network based services such as those described above can be extremely complex. At least some of this complexity is attributable to the large number of computing resources that typically exist in such a service at any given time. For example some network based services might utilize dozens of geographically dispersed data centers hundreds of thousands or even millions of server computers and virtual machine instances along with large numbers of networking components software programs and other types of resources. When large numbers of resources such as these are utilized by a network service in this way it can be very difficult for a customer or system administrator to obtain information regarding a particular resource or resources. This may be caused at least in part by the fact that a large number of disparate systems and or services might be utilized to collect and or maintain information describing the operational status of resources the configuration of the resources the location of the resources and or other types of data about the resources in a distributed execution environment.

The following detailed description is directed to technologies for processing queries for data describing resources in a distributed execution environment. Utilizing the concepts and technologies described herein data describing aspects of resources in a distributed execution environment such as data describing the operational status location and or configuration of resources in the distributed execution environment can be obtained from multiple providers. The obtained data can then be utilized to generate and provide responses to queries for the data describing the resources in an efficient manner.

According to one aspect presented herein a computer implemented mechanism is disclosed for processing queries for data describing resources in a distributed execution environment. In one implementation the mechanism disclosed herein operates in conjunction with a network based distributed execution environment in which customers can purchase configure and utilize computing resources such as virtual machine instances data storage resources networking resources and database resources on a permanent or as needed basis.

The distributed execution environment may offer computing resources for purchase and use in various configurations. For example and without limitation the distributed execution environment might offer virtual machine instances available for purchase and use that have many different configurations of processor capabilities main memory disk storage and operating system. A customer of the distributed execution environment might create configure and deploy various combinations of computing resources provided by a distributed execution environment to create solutions that provide various types of functionality such as application hosting backup and storage content delivery Web hosting enterprise IT solutions database services and others.

The distributed execution environment might also include various types of computing resources such as those described above hardware resources such as data centers rooms of server computers in data centers racks of server computers individual server computers software resources resources describing customers and other users of the distributed execution environment and other types of resources. As will be described in greater detail below the technologies disclosed herein can be utilized to process queries for data describing aspects of these and potentially other types of computing resources in a distributed execution environment.

Various components might be configured to obtain and or maintain data regarding the resources in the distributed execution environment. For example and without limitation a resource monitoring component executing within or in conjunction with the distributed execution environment might be configured to collect data regarding the operational state of computing resources in the distributed execution environment. The resource monitoring component might collect resource data that describes the operational state of data centers racks of server computers server computers networking devices software components and or instances of virtual machines and other types of resources in the distributed execution environment. The resource monitoring component might also make the collected resource data available for consumption and use by other components. Other types of components systems and or services might also maintain data referred to herein as resource data that describes the configuration location operational state and or other aspects of resources utilized in the distributed computing environment. These components systems and or services might also make this data available for consumption and use by other components. Components that make resource data available to other components are referred to herein as resource data providers. 

In one implementation a resource state viewing tool executes within or in conjunction with the distributed execution environment and provides a resource management UI through which users can view the resource data collected by the resource monitoring component and or other resource data providers. For example an administrator or customer of the distributed execution environment might utilize a user computing system like a desktop or laptop computer a smartphone or a tablet computing device to request and view the resource management UI for a particular resource. In order to provide this functionality the resource management UI might be provided by way of a Web page a client server application a mobile application or in another manner. The resource management UI may allow a user to quickly view resource data for resources in the distributed execution environment at various levels of granularity.

In one implementation the resource state viewing tool is configured to allow users to submit queries for selecting and viewing a subset of the resources in a distributed execution environment. These queries might be specified utilizing a graphical UI or as text based queries. For example and without limitation a user might submit a query requesting to view resource data for all virtual machine instances in the distributed execution environment that have a problem condition. As another example a user might submit a query requesting to view resource data for all printers located in a certain room utilized by the distributed execution environment. The queries might be specified using logical operators typically available when performing queries such as AND and OR. Other types of logical operators might also be specified in a query.

In order to facilitate the processing of queries for resource data such as those described above a query service is provided in one embodiment disclosed herein. The resource state viewing tool can provide a user supplied query to the query service and in reply thereto the query service can provide a query response that includes the resource data for a selected subset of resources in the distributed execution environment. In this regard it should be appreciated that while the embodiments disclosed herein are primarily presented in the context of a query service that processes queries supplied by a resource state viewing tool the query service disclosed herein may be configured to process queries supplied by other systems services or components. The query service might also be configured to receive queries for resource data directly from users.

The query service may utilize various mechanisms to obtain resource data for processing queries in various embodiments disclosed herein. In one particular embodiment the query service utilizes a pull mechanism for obtaining resource data from resource data providers configured to provide the resource data. In this embodiment various resource data providers may register with the query service as providers of certain types of resource data. For example a resource data provider might register with the query service as a provider of resource data relating to printers in the distributed execution environment. In order to register with the query service each resource data provider might supply a registration request to the query service identifying the type of resource data for which they are a provider. The registration request might also identify a callback endpoint that can be utilized to transmit queries to the resource data provider for resource data. Multiple resource data providers might register with the query service in this manner as providers of various types of resource data.

In order to process a query such as a query submitted through the resource management UI the query service identifies the resource data providers from which resource data is to be obtained in order to respond to the query. For example and without limitation if the query is for printers in a certain room of the distributed execution environment the query service would identify the resource data provider registered to provide resource data about printers. Depending upon the nature of the query multiple resource data providers might be identified in this way.

Once the resource data providers to be queried have been identified the query service requests resource data from the identified providers for generating a response to the query. The callback endpoints provided during registration of the resource data providers may be utilized to transmit requests to the identified resource data providers for resource data. In response thereto the resource data providers return resource data to the query service. The query service may then utilize the received resource data to generate a response to the original query. For example and without limitation the query service may perform one or more statistical mathematical and or logical operations e.g. selection union and or negation on the received resource data in order to generate a query response. Other types of operations might also be performed in order to generate the query response. The response may then be provided in reply to the query for the resource data. For example a query response may be provided to the resource state viewing tool in reply to a query.

In some implementations the query service stores resource data received from resource data providers in a cache for use in generating responses to subsequent queries. For example and without limitation the query service might utilize the resource data stored in the cache when a network connection to one or more of the resource data providers is unavailable or degraded. As another example the query service might also utilize the data stored in the cache to satisfy queries when a request has been transmitted to a resource data provider and a response to the request has not been received within a predefined amount of time. In some embodiments a query specifies the amount of time that the query service is to wait for a response from resource data providers before utilizing resource data stored in the cache to satisfy a query. The amount of time to wait before utilizing cached data to process a query might also be specified in other ways in other embodiments.

In another embodiment the query service utilizes a push model to obtain resource data from the various resource data providers. In this embodiment resource data providers also register as providers of various types of resource data for resources in a distributed execution environment. In this embodiment however the resource data providers periodically push resource data to the query service. The query service then stores the received resource data in a cache. The query service may then utilize the resource data stored in the cache to generate responses to queries such as queries received from the resource state viewing tool. The resource data providers may periodically provide additional resource data for storage in the cache. For example and without limitation the resource data providers may supply resource data that has changed or been updated since a previous time the resource data was provided to the query service. Alternately a resource data provider might supply a full set of resource data to the query service for storage in the cache.

In some embodiments the cache is an in memory cache that the query service stores in main memory such as in a random access memory RAM . When an in memory cache is utilized the query service may utilize various optimizations to minimize the amount of memory utilized to store the resource data. For example and without limitation the query service may store unique values of resource data one time and then store pointers to the unique values in the cache. In this way the storage of unique values of resource data can be de duplicated. Other types of memory optimizations might also be utilized.

In some implementations the query service might also utilize a pull mechanism in conjunction with the push mechanism described above. In this embodiment resource data providers may push resource data to the query service in the manner described above. If however the query service determines that resource data stored in the cache for a particular resource provider is older than a predefined period of time the query service may transmit a request to the resource data provider for updated resource data. The resource data provider may then respond with updated resource data. The query service stores the updated resource data in the cache for use in processing future queries. Other mechanisms might also be utilized to maintain up to date resource data in the cache.

In yet another embodiment the query service utilizes a pull model to obtain resource data from resource data providers in conjunction with a cache for storing the resource data. In this embodiment resource data providers are registered as providers of certain types of resource data in the manner described above. In this embodiment however each resource data provider may also specify a polling interval in addition to a callback endpoint. The polling interval defines a time interval at which a resource data provider is to be polled for new resource data. The polling interval for use with each resource data provider might also be specified in other ways in other embodiments.

The query service periodically polls the resource data providers at the specified callback endpoints for new resource data. In response thereto the resource data providers provide changed resource data which the query service stores in a cache. The query service may utilize one or more memory optimizations such as those described above in order to minimize the size of an in memory or other type of cache. When a query is received the query service utilizes the contents of the cache to generate and provide a query response.

In some implementations the query service provides a timestamp to resource data providers when polling for new resource data. The timestamp indicates a time at which a last request for resource data was made to the resource data provider. The resource data providers may utilize the specified timestamp to identify and provide only resource data that has changed since a last request was received for resource data from the query service.

It should be appreciated that various combinations of the push and pull mechanisms described above might be utilized in various embodiments. For example and without limitation a push model for obtaining resource data might be utilized with one or more resource data providers while a pull model is utilized with other resource data providers. In another example a push or a pull model might be dynamically selected and utilized for a single resource data provider depending upon various factors. The query service and the resource data providers might also engage in a negotiation by which a push or pull model is selected. Alternately the query service might instruct a resource data provider which model to utilize. A resource data provider might similarly instruct the query service as to which model it will utilize. Various mechanisms might also be utilized by the query service to determine which resource data provider to utilize when two or more resource data providers have registered as providers of the same type of resource data. Additional details regarding the various components and processes described above for processing queries for data describing resources in a distributed execution environment will be presented below with regard to .

It should be appreciated that the subject matter presented herein may be implemented as a computer process a computer controlled apparatus a computing system or an article of manufacture such as a computer readable storage medium. While the subject matter described herein is presented in the general context of program modules that execute on one or more computing devices those skilled in the art will recognize that other implementations may be performed in combination with other types of program modules. Generally program modules include routines programs components data structures and other types of structures that perform particular tasks or implement particular abstract data types.

Those skilled in the art will also appreciate that aspects of the subject matter described herein may be practiced on or in conjunction with other computer system configurations beyond those described herein including multiprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers handheld computers personal digital assistants e readers cellular telephone devices special purposed hardware devices network appliances and the like. The embodiments described herein may be practiced in distributed execution environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed execution environment program modules may be located in both local and remote memory storage devices.

In the following detailed description references are made to the accompanying drawings that form a part hereof and that show by way of illustration specific embodiments or examples. The drawings herein are not drawn to scale. Like numerals represent like elements throughout the several figures which may be referred to herein as a FIG. or FIGS. .

In addition to the virtual machine instances A the distributed execution environment might also utilize and or provide many other types of computing resources. For example and without limitation the distributed execution environment might also include hardware resources B such as data centers that include rooms with racks of server computers software resources C and other resources D such as networking resources power resources resources describing customers and other users of the distributed execution environment and other types of resources. The computing resources provided by the distributed execution environment may be referred to herein as resources or computing resources. The distributed execution environment might also include other types of computing resources not shown in or identified explicitly above. As will be described in greater detail below the technologies disclosed herein can be utilized to process queries for resource data describing these and potentially other types of computing resources in the distributed execution environment .

As mentioned briefly above the owner and or operator of the distributed execution environment may charge a fee for operating the virtual machine instances A to the customer that creates the virtual machine instances A. Various different pricing models might be utilized to charge a customer for use of the virtual machine instances A within the distributed execution environment . The operator of the distributed execution environment might also charge a fee for the creation and or use of other types of computing resources provided by the distributed execution environment . Additional details regarding the implementation configuration and operation of the distributed execution environment will be provided below with regard to .

As also mentioned briefly above various components might be configured to obtain and or maintain data regarding the computing resources in the distributed execution environment . For example and without limitation a resource monitoring component not shown in executing within or in conjunction with the distributed execution environment might be configured to collect data regarding the operational state of computing resources in the distributed execution environment. The resource monitoring component might collect data that describes the operational state of data centers racks of server computers server computers networking devices software components and or instances of virtual machines A and other types of computing resources in the distributed execution environment . The resource monitoring component might also make the collected data available for consumption and use by other components. Other types of components systems and or services might also maintain data referred to herein as resource data that describes the configuration location operational state and or other aspects of computing resources utilized in the distributed computing environment . These components systems and or services might also make the resource data available for consumption and use by other components. Components that make resource data available to other components are referred to herein as resource data providers . 

The illustrative environment shown in includes three resource data providers A C. In the example shown in the resource data provider A is configured to provide resource data A about virtual machine instances A in the distributed execution environment. The resource data provider B is configured to provide resource data B about hardware resources B in the distributed execution environment. The resource data provider C is configured to provide resource data C about software resources C in the distributed execution environment. It should be appreciated that many more resource data providers may be utilized than shown in to provide resource data about many other different types of computing resources in the distributed execution environment .

It should also be appreciated that while the resource data providers are shown in and the other FIGS. as being located outside the distributed execution environment the resource data providers might also be operated within the disturbed execution environment . In this regard it should also be appreciated that the resource data providers might operate in conjunction with or as a part of services implemented within the distributed execution environment. For example and without limitation computing resources within the distributed execution environment may be utilized to implement various types of services e.g. Web services for providing various functions such as tracking where virtual machine instances A are executing tracking the health status of software resources C and or hardware resources B deploying software to hardware resources B monitoring network traffic mapping private IP addresses to public IP addresses attaching volumes to host computers backing up volumes performing tests configuring hosts and for performing many other types of functions.

The resource data providers may be operated in conjunction with or as a part of services operating within the distributed execution environment such as those described above. In this regard the resource data providers might be configured to provide resource data regarding the operation of a service executing in the distributed execution environment the software utilized to implement the service the hardware resources B utilized to execute the service any data utilized by the service and any other information regarding the operational status of the service. Through the use of the resource data providers and the mechanism described herein a system administrator can obtain and utilize this resource data for many disparate services and other components within the distributed execution environment .

In some embodiments a resource state viewing tool executes within or in conjunction with the distributed execution environment . The resource state viewing tool provides a UI through which users can query and view resource data provided by the various resource data providers . For example in one implementation the resource state viewing tool is configured to provide a resource management UI . The resource management UI provides a UI for viewing and interacting with resource data collected regarding the computing resources in the distributed execution environment . In one implementation a user of a user computing device such as a smartphone a desktop or laptop computer or a tablet computing device might utilize an appropriate client application not shown in to request view and interact with the resource management UI . In order to provide this functionality the resource management UI might be provided by way of a Web page a client server application a mobile application or in another manner.

The resource management UI may be configured in order to allow a user to quickly view information about computing resources in the distributed execution environment at various levels of granularity. For example in one particular implementation the resource management UI allows a user to view information about resources in the distributed execution environment such as information about the operational state of the resources at levels of granularity varying from a worldwide level down to a level showing a particular virtual machine instance or other software component executing on a particular server computer. The user can utilize functionality provided by the resource management UI to quickly and easily navigate between levels and view aggregated information about resources in the distributed execution environment at each level. One particular resource management UI is described in U.S. patent application Ser. No. 13 733 604 entitled Managing Resources in a Distributed Execution Environment which was filed on Jan. 3 2013 and which is expressly incorporated by reference herein in its entirety. The embodiments disclosed herein might also be utilized with other types of user interfaces.

In one implementation the resource state viewing tool is configured to allow users to submit queries for selecting and viewing a subset of the resources in the distributed execution environment . As mentioned above queries might be specified utilizing a graphical UI or as text based queries. For example and without limitation a user might submit a query requesting to view resource data for all virtual machine instances A in the distributed execution environment that have a problem condition or that satisfy other criteria. As another example a user might submit a query requesting to view all printers located in a certain room utilized by the distributed execution environment . The queries might be specified using logical operators typically available when performing queries such as AND and OR. Other types of logical operators might also be specified in a query.

In order to facilitate the processing of queries for resource data such as those described above a query service is provided in one embodiment disclosed herein. The resource state viewing tool can provide a user supplied query to the query service and in reply thereto the query service can provide a query response that includes the resource data for a selected subset of computing resources in the distributed execution environment . In this regard it should be appreciated that while the embodiments disclosed herein are primarily presented in the context of a query service that processes queries supplied by a resource state viewing tool the query service disclosed herein may be configured to process queries supplied by other systems services and or components. The query service might also be configured to provide an interface for receiving queries for resource data directly from users.

As mentioned briefly above the query service may utilize various mechanisms to obtain resource data needed to process received queries in various embodiments disclosed herein. In the embodiment shown in the query service utilizes a pull mechanism for obtaining resource data from resource data providers configured to provide the resource data . In this embodiment the resource data providers may register with the query service as providers of certain types of resource data . For example the resource data provider A might register with the query service as a provider of resource data A relating to virtual machine instances A executing in the distributed execution environment . Similarly the resource data provider B might register with the query service as a provider of resource data B relating to hardware resources B like printers in the distributed execution environment . The resource data provider C might register with the query service as a provider of resource data C relating to software resources C in the distributed execution environment . Other resource data providers might register as providers as other types of resource data .

In order to register with the query service each resource data provider supplies a registration request to the query service identifying the type of resource data for which they are a provider in one embodiment. For example the resource data provider A submits a registration request A the resource data provider B submits a registration request B and the resource data provider C submits a registration request C. Each registration request might also identify a callback endpoint that can be utilized to transmit queries to the resource data provider for resource data . The callback endpoint might be an Internet protocol IP address for the resource data provider at which requests for resource data are received. As shown in each resource data provider may supply a unique callback endpoint i.e. the resource data providers A C have supplied the callback endpoints A C with the registration requests A C respectively . Multiple resource data providers might register with the query service in this manner as providers of various types of resource data .

In order to process a query such as a query submitted through the resource management UI and provided by the resource state viewing tool the query service identifies the resource data providers from which resource data is to be obtained in order to process to the received query . For example and without limitation if the query is for printers in a certain room of the distributed execution environment the query service would identify the resource data provider registered to provide resource data about printers i.e. the resource data provider B in the example shown in . Depending upon the nature of the query multiple resource data providers might be identified by the query service .

Once the query service has identified the resource data providers from which resource data is to be requested the query service requests resource data from the identified providers for generating a response to the query . The callback endpoints provided during registration of the resource data providers may be utilized to transmit requests to the identified resource data providers for resource data in the example shown in requests A C have been transmitted to the resource data providers A C .

In response to receiving the requests A C the queried resource data providers return the requested resource data to the query service . The query service may then utilize the resource data received from the resource data providers to generate a response to the original query . For example and without limitation the query service may perform one or more statistical mathematical and or logical operations e.g. selection union difference intersection and or negation on the received resource data to generate a query response . The query service might also perform other types of operations on the received resource data in order to generate a query response . The query response may then be provided in reply to the query for the resource data . For example a query response may be provided to the resource state viewing tool in reply to a query . The query response may then be utilized to generate the resource management UI for presentation to a user.

In some implementations the query service stores resource data received from resource data providers in a cache not shown in . Various types of caches may be utilized such as an in memory cache a local or distributed database a local or distributed key value data store or another type of cache. The query service may then utilize the cached resource data when generating query responses for subsequent queries . For example and without limitation the query service might utilize cached resource data when a network connection to one or more of the resource data providers is unavailable or is degraded. As another example the query service might also utilize cached resource data to satisfy queries when a request has been transmitted to a resource data provider and a response to the request has not been received within a predefined amount of time. In some embodiments the query specifies the amount of time that the query service is to wait for a response from resource data providers before utilizing cached resource data to satisfy a query . The amount of time to wait before utilizing cached resource data to process a query might also be specified in other ways in other embodiments. Additional details regarding the mechanism shown in for obtaining resource data for use in processing queries utilizing a pull mechanism will be provided below with regard to .

The implementation of the various components described herein is a matter of choice dependent on the performance and other requirements of the computing system. Accordingly the logical operations described herein are referred to variously as operations structural devices acts or modules. These operations structural devices acts and modules may be implemented in software in firmware in special purpose digital logic and any combination thereof. It should also be appreciated that more or fewer operations may be performed than shown in the FIGS. and described herein. These operations may also be performed in parallel or in a different order than those described herein.

The routine begins at operation where the query service provides one or more interfaces through which the resource data providers can register as providers of certain types of resource data . The interface or interfaces provided by the query service may be a Web service application programming interface API or another type of interface. Other mechanisms might also be implemented for allowing the resource data providers to register as providers of resource data .

From operation the routine proceeds to operation where the query service receives a registration request from a resource data provider . As mentioned above the registration request might identify the resource data provider submitting the registration request and the type of resource data provided by the resource data provider . As discussed above the registration request might also specify a callback endpoint in some implementations. The callback endpoint provides information for use by the query service in requesting resource data from the resource data provider . Other types of information might also be specified in a registration request .

From operation the routine proceeds to operation where the query service stores the data received in the registration request . For example the query service might store data identifying the resource data provider the type of resource data provided by the resource data provider the specified callback endpoint and potentially other information in an appropriate data store. As will be described in detail below this information may be utilized to query resource data providers in response to receiving a query for resource data . From operation the routine may proceed back to operation where additional resource data providers may be registered with the query service in the manner described above.

Once at least one resource data provider has registered with the query service the routine may proceed from operation to operation . At operation the query service receives a query for resource data such as from the resource state viewing tool . As mentioned briefly above other systems and or components may submit queries to the query service . The routine proceeds from operation to operation in response to receiving a query .

At operation the query service utilizes the submitted query and the registration data stored at operation to identify the resource data provider or providers from which resource data is to be requested in order to process the received query . Once the resource data provider or providers to be queried have been identified the routine proceeds from operation to operation where the query service transmits requests to the resource data providers identified at operation for resource data to process the query . The routine then proceeds from operation to operation .

At operation the query service receives resource data from the queried resource data providers in response to the transmitted requests . As mentioned above in some embodiments the query service may store the received resource data in a cache for use in responding to queries when a connection to a resource data provider cannot be made or is degraded or when a resource data provider is taking too long to reply to a request . Cached resource data might also be utilized to respond to queries under other circumstances in other embodiments.

From operation the routine proceeds to operation where the query service utilizes the resource data received from the resource data providers to generate a query response . As described above the query service may perform one or more statistical mathematical and or logical operations e.g. selection union and or negation on the resource data received from the various resource data providers in order to generate a query response . Other types of logical arithmetic statistical and other types of operations might also be performed in order to generate the query response .

Once the query response has been generated the routine proceeds from operation to operation where the query service provides the generated query response in reply to the query for the resource data . For example a query response may be provided to the resource state viewing tool in reply to a query . The routine may then proceed back to operation described above where the query service may process additional queries in a similar manner.

In the embodiment shown in the query service stores the resource data received from the resource data providers in a cache . As described briefly above the cache may be an in memory cache a local or distributed database a local or distributed key value data store or another type of cache. The query service may then utilize the resource data stored in the cache to generate responses to queries such as queries received from the resource state viewing tool .

According to various embodiments the resource data providers may periodically push additional resource data to the query service for storage in the cache and use in processing queries . For example and without limitation the resource data providers may supply resource data that has changed or been updated since a previous time the resource data was provided to the query service . Alternately a resource data provider might supply a full set of resource data to the query service for storage in the cache on each push.

As mentioned briefly above the cache may be implemented as an in memory cache that the query service stores in main memory such as in RAM. When an in memory cache is utilized the query service may implement various types of memory optimizations to minimize the amount of memory utilized to store the resource data . For example and without limitation the query service may store unique values of resource data one time and then store pointers to the unique values in the cache . In this way the storage of unique values of resource data can be de duplicated. The query service might also utilize other types of memory optimizations to store the resource data in the cache . The memory optimizations described above may be utilized in conjunction with any of the mechanisms disclosed herein that utilize a cache .

In some implementations the query service utilizes aspects of the pull mechanism described above with regard to in conjunction with aspects of the push mechanism for obtaining resource data described above with regard to . In this embodiment the resource data providers may push resource data to the query service in the manner described above with regard to . If however the query service determines that resource data stored in the cache for a particular resource data provider is older than a predefined period of time the query service may transmit a request to the resource data provider for updated resource data . The resource data provider may then respond with updated resource data . The query service stores the updated resource data in the cache for use in processing future queries. The query service might also utilize other mechanisms in order to maintain up to date resource data in the cache . Additional details regarding the embodiment shown in will be provided below with regard to .

From operation the routine proceeds to operation where the query service receives a query such as from the resource state viewing tool for example. In response to the receipt of a query the routine proceeds from operation to operation where the query service retrieves resource data from the cache for responding to the query . As discussed briefly above the query service may transmit a request for updated resource data to one or more of the resource data providers if the resource data stored in the cache is older than a predefined amount of time. Other conditions might also cause the query service to transmit a request for updated resource data to a resource data provider . Updated resource data might also be stored in the cache for use in responding to subsequent queries .

From operation the routine proceeds to operation where the query service utilizes the resource data retrieved from the cache to generate a query response . As described above the query service may perform one or more logical arithmetic statistical and or other types of operations on the resource data retrieved from the cache in order to generate a query response .

Once the query response has been generated the routine proceeds from operation to operation where the query service provides the generated query response in reply to the query for the resource data . For example a query response may be provided to the resource state viewing tool in reply to a query . The routine may then proceed back to operation described above where the query service may process additional queries in a similar manner.

In the embodiment shown in each resource data provider might also specify a polling interval in addition to a callback endpoint when registering with the query service . In the example shown in for instance the resource data provider A has specified a polling interval A and the resource data provider B has specified a polling interval B. The polling interval defines a time interval at which the respective resource data provider is to be polled for new resource data . For example a polling interval might be specified indicating that a particular resource data provider is to be polled every five seconds or other time period. In the embodiment shown in the polling interval is specified in the registration request . It should be appreciated however that the polling interval for use with each resource data provider might also be specified in other ways in other embodiments.

In the embodiment shown in the query service polls the resource data providers at the specified callback endpoints for new resource data at the frequency specified by the polling interval . In response thereto the resource data providers provide changed resource data which the query service stores in the cache . The query service may utilize one or more memory optimizations such as those described above in order to minimize the size of an in memory or other type of cache . When a query is received the query service utilizes the resource data stored in the cache to generate and provide a query response in the manner described above.

In some implementations the query service provides a timestamp to the resource data providers when polling for new resource data . For instance in the example shown in the request A includes a timestamp A and the request B includes a timestamp B. Each timestamp indicates a time at which a last request for resource data was made to the respective resource data provider . The resource data providers may utilize the specified timestamp to identify and provide only resource data that has changed since a last request was received for resource data from the query service . The resource data providers might utilize other mechanisms in other embodiments to identify and provide to the query service only resource data that has changed since a previous request . Additional details regarding the embodiment shown in will be provided below with regard to .

From operation the routine proceeds to operation where the query service receives a registration request from a resource data provider . As mentioned above the registration request might identify the resource data provider submitting the registration request and the type of resource data provided by the resource data provider . As discussed above the registration request might also specify a callback endpoint and a polling interval in some implementations. Other types of information might also be specified in a registration request .

From operation the routine proceeds to operation where the query service stores the data received in the registration request . For example the query service might store data identifying the resource data provider the type of resource data provided by the resource data provider the specified callback endpoint the polling interval and potentially other information in an appropriate data store. As will be described in detail below this information may be utilized to poll resource data providers for resource data . From operation the routine may proceed back to operation where additional resource data providers may be registered with the query service in the manner described above.

Once at least one resource data provider has been registered the routine may proceed from operation to operation . At operation the query service polls the registered resource data providers for resource data using the specified callback endpoints and polling intervals . The routine then proceeds from operation to operation where the query service receives resource data in response to the polling requests . The received resource data is then stored in the cache at operation for use in processing queries . The routine may then proceed from operation back to operation where additional polling of the resource data providers may occur.

From operation the routine proceeds to operation where the query service receives a query such as from the resource state viewing tool for example. In response to the receipt of a query the routine proceeds from operation to operation where the query service retrieves resource data from the cache for responding to the query . The routine then proceeds to operation where the query service utilizes the resource data retrieved from the cache to generate a query response . As described above the query service may perform one or more logical arithmetic statistical and or other types of operations on the resource data retrieved from the cache in order to generate a query response .

Once the query response has been generated the routine proceeds from operation to operation where the query service provides the generated query response in reply to the query for the resource data . For example a query response may be provided to the resource state viewing tool in reply to a query . The routine may then proceed back to operation described above where the query service may process additional queries in a similar manner.

As discussed briefly above various combinations of the push and pull mechanisms described herein might be utilized in some embodiments. For example and without limitation a push model for obtaining resource data such as that described above with regard to might be utilized with one or more resource data providers while a pull model such as that described above with regards to is utilized with other resource data providers .

In some embodiments a push or a pull model for obtaining the resource data is selected and utilized for each resource data provider depending upon various factors. For example and without limitation the type of model utilized by the query service to obtain resource data from each of the resource data providers might be selected based upon the amount of resource data to be obtained the desired or required freshness of the resource data the frequency of additions or updates to the resource data the latency and or other performance characteristics of each resource data provider the ability of the resource data providers to handle frequent requests user requirements and or other factors or considerations. The particular model utilized to obtain resource data from each of the resource data providers might also be selected dynamically and periodically modified based upon changing considerations.

The query service and the resource data providers might also engage in a negotiation by which a push or pull model for providing the resource data to the query service is selected. Alternately the query service might instruct a resource data provider which model to utilize. A resource data provider might similarly instruct the query service as to which model it will utilize.

For example and without limitation a resource data provider might transmit a message to the query service indicating that it will be unavailable for a period of time and that the query service should utilize cached resource data while the resource data provider is down. When the resource data provider returns online it might instruct the query service to return to using a pull model for obtaining the resource data . Similarly the query service might transmit a message to a resource data provider indicating that requests are not being processed quickly enough and that the query service should switch to one of the caching models described above. Other types of negotiations might also be performed between the query service and the resource data providers in order to select a particular model for provision of the resource data that is appropriate based upon current circumstances.

The query service might also utilize various mechanisms to determine which resource data provider to utilize as the authoritative source for a certain type of resource data when two or more resource data providers have registered as providers of the same type of resource data . For example and without limitation the query service might only permit one resource data provider to be registered at a time as the primary source for certain types of resource data . The query service might also allow one or more backup resource data providers to also register for use in the event that the primary resource data provider is unavailable. In some embodiments the query service will permit only one resource data provider to be registered for each type of resource data .

In other implementations the query service might query multiple resource data providers for the same type of resource data . The query service might then perform various operations to determine which of the responses to utilize in the processing of a query . For example and without limitation the query service might select resource data based upon the staleness of the data service level agreements SLAs or other considerations. The query service might also select resource data to use in processing a query by determining if there is consensus among resource data returned from multiple resource data providers .

The query service might also average or perform other arithmetic and or statistic operations on resource data received from multiple resource data providers . The resulting value may then be utilized to generate a query response . This might be useful for instance when the resource data is expressed as numerical values e.g. the internal temperature of a server computer that are sensed and reported by multiple sources e.g. multiple temperature sensing devices . Other types of operations might also be performed on resource data received from multiple resource data providers in other implementations.

It should be appreciated that in some embodiments different resource providers might utilize unique data formats to express the resource data . In these embodiments various mechanisms might be utilized to make the resource data accessible to the query service for performing queries . For example and without limitation a resource data providers might convert its unique data format to a common data format utilized by the query service . In other embodiments the resource data providers might provide resource data in a unique format along with a schema that describes the particular format utilized by a resource data provider . In this example the query service might utilize the schema for a given resource data provider and utilize the specified schema when performing queries in the manner described herein. Other mechanisms might also be utilized to perform the queries on resource data expressed using different data formats.

The computing resources provided by the distributed execution environment may include various types of resources such as data processing resources data storage resources networking resources data communication resources and the like. Each type of computing resource may be general purpose or may be available in a number of specific configurations. For example and as discussed briefly above data processing resources may be available as virtual machine instances in a number of different configurations. The virtual machine instances may be configured to execute applications including Web servers application servers media servers database servers and other types of applications. Data storage resources may include file storage devices block storage devices and the like. Each type or configuration of a computing resource may be available in different sizes such as large resources consisting of many processors large amounts of memory and or large storage capacity and small resources consisting of fewer processors smaller amounts of memory and or smaller storage capacity.

As also mentioned above the computing resources provided by the distributed execution environment are enabled in one implementation by one or more data centers A N which may be referred to herein singularly as a data center or collectively as the data centers . The data centers are facilities utilized to house and operate computer systems and associated components. The data centers typically include redundant and backup power communications cooling and security systems. The data centers might also be located in geographically disparate locations. One illustrative configuration for a data center that may be utilized to implement the concepts and technologies disclosed herein will be described below with regard to .

Users of the distributed execution environment may access the computing resources provided by the data centers over a suitable data communications network such as a Wide Area Network WAN . Although a WAN is illustrated in it should be appreciated that a local area network LAN the Internet or any other networking topology known in the art that connects the data centers to user computing devices may be utilized. It should also be appreciated that combinations of such networks might also be utilized.

As known in the art a virtual machine instance is an instance of a software implementation of a machine i.e. a computer that executes programs like a physical machine. Each of the servers may be configured to execute an instance manager capable of instantiating and managing the virtual machine instances . The instance manager might be a hypervisor or another type of program configured to enable the execution of multiple virtual machine instances on a single server for example.

It should be appreciated that although the embodiments disclosed herein are described primarily in the context of virtual machine instances other types of computing resources can be utilized with the concepts and technologies disclosed herein. For example the technologies disclosed herein might be utilized with hardware resources data storage resources data communications resources networking resources database resources and with other types of computing resources.

The data center shown in also includes a server computer F reserved for executing software components for managing the operation of the data center the server computers the virtual machine instances A and other computing resources within the distributed execution environment . In particular the server computer F might execute the resource state viewing tool and the query service . Details regarding the operation of each of these components have been provided above. In this regard it should be appreciated that while these components are illustrated as executing within the distributed execution environment computing systems that are external to the distributed execution environment might also be utilized to execute some or all of these components. Other configurations might also be utilized.

In the example data center shown in an appropriate local area network LAN is utilized to interconnect the server computers A E and the server computer F. The LAN is also connected to the WAN illustrated in . It should be appreciated that the configuration and network topology illustrated in has been greatly simplified and that many more computing systems networks and networking devices may be utilized to interconnect the various computing systems disclosed herein. Appropriate load balancing devices or software modules might also be utilized for balancing a load between each of the data centers A N between each of the server computers A F in each data center and between virtual machine instances provided by the server computers A F.

It should be appreciated that the data center described in is merely illustrative and that other implementations might be utilized. In particular functionality described herein as being performed by the resource state viewing tool and the query service might be performed by one another might be performed by other components or might be performed by a combination of these or other components. Additionally it should be appreciated that the functionality provided by these components might be implemented in software hardware or a combination of software and hardware. Other implementations should be apparent to those skilled in the art.

The computer includes a baseboard or motherboard which is a printed circuit board to which a multitude of components or devices may be connected by way of a system bus or other electrical communication paths. In one illustrative embodiment one or more central processing units CPUs operate in conjunction with a chipset . The CPUs may be standard programmable processors that perform arithmetic and logical operations necessary for the operation of the computer .

The CPUs perform operations by transitioning from one discrete physical state to the next through the manipulation of switching elements that differentiate between and change these states. Switching elements may generally include electronic circuits that maintain one of two binary states such as flip flops and electronic circuits that provide an output state based on the logical combination of the states of one or more other switching elements such as logic gates. These basic switching elements may be combined to create more complex logic circuits including registers adders subtractors arithmetic logic units floating point units and the like.

The chipset provides an interface between the CPUs and the remainder of the components and devices on the baseboard . The chipset may provide an interface to a random access memory RAM used as the main memory in the computer . The chipset may further provide an interface to a computer readable storage medium such as a read only memory ROM or non volatile RAM NVRAM for storing basic routines that help to startup the computer and to transfer information between the various components and devices. The ROM or NVRAM may also store other software components necessary for the operation of the computer in accordance with the embodiments described herein.

The computer may operate in a networked environment using logical connections to remote computing devices and computer systems through a network such as the local area network . The chipset may include functionality for providing network connectivity through a NIC such as a gigabit Ethernet adapter. The NIC is capable of connecting the computer to other computing devices over the network . It should be appreciated that multiple NICs may be present in the computer connecting the computer to other types of networks and remote computer systems.

The computer may be connected to a mass storage device that provides non volatile storage for the computer. The mass storage device may store system programs application programs other program modules and data which have been described in greater detail herein. The mass storage device may be connected to the computer through a storage controller connected to the chipset . The mass storage device may consist of one or more physical storage units. The storage controller may interface with the physical storage units through a serial attached SCSI SAS interface a serial advanced technology attachment SATA interface a fiber channel FC interface or other type of interface for physically connecting and transferring data between computers and physical storage units.

The computer may store data on the mass storage device by transforming the physical state of the physical storage units to reflect the information being stored. The specific transformation of physical state may depend on various factors in different implementations of this description. Examples of such factors may include but are not limited to the technology used to implement the physical storage units whether the mass storage device is characterized as primary or secondary storage and the like.

For example the computer may store information to the mass storage device by issuing instructions through the storage controller to alter the magnetic characteristics of a particular location within a magnetic disk drive unit the reflective or refractive characteristics of a particular location in an optical storage unit or the electrical characteristics of a particular capacitor transistor or other discrete component in a solid state storage unit. Other transformations of physical media are possible without departing from the scope and spirit of the present description with the foregoing examples provided only to facilitate this description. The computer may further read information from the mass storage device by detecting the physical states or characteristics of one or more particular locations within the physical storage units.

In addition to the mass storage device described above the computer may have access to other computer readable storage media to store and retrieve information such as program modules data structures or other data. It should be appreciated by those skilled in the art that computer readable storage media can be any available media that provides for the storage of non transitory data and that may be accessed by the computer .

By way of example and not limitation computer readable storage media may include volatile and non volatile removable and non removable media implemented in any method or technology. Computer readable storage media includes but is not limited to RAM ROM erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM flash memory or other solid state memory technology compact disc ROM CD ROM digital versatile disk DVD high definition DVD HD DVD BLU RAY or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium that can be used to store the desired information in a non transitory fashion.

The mass storage device may store an operating system utilized to control the operation of the computer . According to one embodiment the operating system comprises the LINUX operating system. According to another embodiment the operating system comprises the WINDOWS SERVER operating system from MICROSOFT Corporation. According to further embodiments the operating system may comprise the UNIX or SOLARIS operating systems. It should be appreciated that other operating systems may also be utilized. The mass storage device may store other system or application programs and data utilized by the computer the resource state viewing tool the query service and or any of the other software components and data described above. The mass storage device might also store other programs and data not specifically identified herein.

In one embodiment the mass storage device or other computer readable storage media is encoded with computer executable instructions which when loaded into the computer transforms the computer from a general purpose computing system into a special purpose computer capable of implementing the embodiments described herein. These computer executable instructions transform the computer by specifying how the CPUs transition between states as described above. According to one embodiment the computer has access to computer readable storage media storing computer executable instructions which when executed by the computer perform the various routines described above with regard to .

The computer may also include one or more input output controllers for receiving and processing input from a number of input devices such as a keyboard a mouse a touchpad a touch screen an electronic stylus or other type of input device. The input output controllers might also receive input from a digital camera and or video camera a GPS sensor a compass a gyroscope or another type of sensor utilized to determine the location and or the orientation of the computer . The input output controller might also be connected to one or more wireless radios for facilitating wireless communication with the computer .

The input output controller might also provide output to a display such as a computer monitor a flat panel display a digital projector a printer a plotter or other type of output device. It will be appreciated that the computer may not include all of the components shown in may include other components that are not explicitly shown in or may utilize an architecture completely different than that shown in . For example the computer might be implemented utilizing system on a chip SOC technologies and other types of technologies suitable for use in implementing smartphones tablet computing devices and other types of mobile computing devices.

Based on the foregoing it should be appreciated that technologies for processing queries for data describing resources in a distributed execution environment have been presented herein. Moreover although the subject matter presented herein has been described in language specific to computer structural features methodological acts and computer readable media it is to be understood that the invention defined in the appended claims is not necessarily limited to the specific features acts or media described herein. Rather the specific features acts and mediums are disclosed as example forms of implementing the claims.

The subject matter described above is provided by way of illustration only and should not be construed as limiting. Furthermore the claimed subject matter is not limited to implementations that solve any or all disadvantages noted in any part of this disclosure. Various modifications and changes may be made to the subject matter described herein without following the example embodiments and applications illustrated and described and without departing from the true spirit and scope of the present invention which is set forth in the following claims.

