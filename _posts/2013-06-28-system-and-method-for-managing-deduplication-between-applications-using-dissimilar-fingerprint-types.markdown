---

title: System and method for managing deduplication between applications using dissimilar fingerprint types
abstract: The present disclosure provides for a fingerprint service that maintains a fingerprint index configured to support a number of dissimilar fingerprint types. In one embodiment, the fingerprint service receives a lookup request, where the lookup request comprises one or more fingerprint descriptors, and each of the one or more fingerprint descriptors comprises a fingerprint value and a corresponding fingerprint type. A first fingerprint descriptor of the one or more fingerprint descriptors is identified. A first sub-index of a fingerprint index is selected, where the first sub-index is associated with a first fingerprint type of the first fingerprint descriptor. A lookup operation for a first fingerprint value of the first fingerprint descriptor is performed in the first sub-index. In response to the first fingerprint value being present in the first sub-index, information associated with the first fingerprint value is returned.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09367575&OS=09367575&RS=09367575
owner: Veritas Technologies LLC
number: 09367575
owner_city: Mountain View
owner_country: US
publication_date: 20130628
---
The present disclosure relates to performing deduplication operations and more particularly to maintaining a fingerprint service that supports dissimilar fingerprint types.

An ever increasing reliance on information and computing systems that produce process distribute and maintain such information in its various forms continues to put great demands on techniques for providing data storage and access to that data storage. Business or enterprise organizations can produce and retain large amounts of data. While data growth is not new the pace of data growth has become more rapid the location of data more dispersed and linkages between data sets more complex.

An enterprise organization can implement a scheme to protect data located on various computing devices of the organization. An enterprise organization may use a number of disparate software applications directed to managing such data. However certain interactions between the software applications may not be supported such as when the software applications use different functionalities that are incompatible with one another. The enterprise organization may not discover this incompatibility until after some functionality is needed such as during migration of data where the incompatibility may possibly cause the enterprise organization to lose data.

While the present disclosure is susceptible to various modifications and alternative forms specific embodiments of the present disclosure are provided as examples in the drawings and detailed description. It should be understood that the drawings and detailed description are not intended to limit the present disclosure to the particular form disclosed. Instead the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the present disclosure as defined by the appended claims.

The present disclosure provides for a fingerprint service that maintains a fingerprint index configured to support a number of dissimilar fingerprint types. In one embodiment the fingerprint service receives a lookup request where the lookup request comprises one or more fingerprint descriptors and each of the one or more fingerprint descriptors comprises a fingerprint value and a corresponding fingerprint type. A first fingerprint descriptor of the one or more fingerprint descriptors is identified. A first sub index of a fingerprint index is selected where the first sub index is associated with a first fingerprint type of the first fingerprint descriptor. A lookup operation for a first fingerprint value of the first fingerprint descriptor is performed in the first sub index. In response to the first fingerprint value being present in the first sub index information associated with the first fingerprint value is returned.

One or more client systems N also referred to herein as client device s and or client s can be implemented using for example a desktop computer a laptop computer a workstation a server or the like. An example of such computing devices is described subsequently in connection with . Client systems N each store client data fingerprint data and a fingerprint FP client interface module . An enterprise e.g. a business organization may include a number of client systems N that are associated with the enterprise and are also communicatively coupled to one another as well as communicatively coupled to network . One or more enterprises may be implemented in system .

Client data can include various data that is generated and or consumed by applications employed by a user of a client system. Client data can also include executable files such as those used to implement applications and operating systems as well as files that are used or generated by such executable files. Client data can include files generated by user applications e.g. word processing programs email programs graphics programs a database application or the like executing on a client system. Each client system can store different client data in storage that is local to the respective client system.

A variety of tasks related to backup services and or deduplication services can be implemented in system as one or more client server applications not shown . Certain functions of the backup and or deduplication services can be performed by components of a backup application and or a deduplication application respectively such as by a server component e.g. residing on one or more servers in system and a client component e.g. residing on client system . The functions may be divided between the components or may be performed completely by one component or the other depending on the implementation of the backup application and or deduplication application.

Backup services store a copy of client data also referred to as a backup in a designated storage area such as in a backup storage area in network storage . Tasks related to backup services include initiating a backup process on one or more client systems tracking backups of the one or more client systems managing resources e.g. storage devices storing the backups and maintaining metadata related to backups e.g. related to files and other information backed up from file systems associated with the one or more client systems .

Deduplication services help reduce an amount of storage needed to store backups of enterprise data e.g. client data stored on various ones of enterprise client systems by providing a mechanism for storing a piece of information only once. Thus in a backup context if a piece of information is stored in multiple locations within system e.g. a common piece of client data is stored on multiple ones of enterprise client systems that piece of information can ideally be stored once in a deduplicated backup storage area such as deduplicated data store in network storage . Also if the piece of information does not change between a first point in time e.g. a first backup or a first version of a file and a second point in time e.g. a second backup or a second version of a file then that piece of information need not be stored during a second backup process as long as that piece of information continues to be stored in the deduplicated backup storage area. Data deduplication can also be employed outside of the backup context thereby reducing the amount of active storage occupied by duplicate files or data e.g. reduces the amount of client data that needs to be stored at the clients .

In order to perform data deduplication a system needs to be able to identify redundant copies of the same data. One way that can provide a reasonable likelihood of finding duplicated instances of data is to divide file data into consistently sized segments which are analyzed for duplication in the deduplicated data store. Thus if only a portion of a large file is modified then only the segment of data corresponding to that portion of the file need be stored in deduplicated data store . The remainder of the segments need not be stored again in deduplicated data store . In one embodiment a file e.g. a backup can be divided into a plurality of fixed size segments. In another embodiment a file can be divided into a plurality of variable sized segments.

Copies of one or more segments of client data may be transferred to network storage via network for inclusion in deduplicated data store e.g. segments stored as part of a backup in the deduplicated data store . Deduplicated data store is configured to store data of segments also referred to as segment data that are received from one or more client systems N in system . Each client system can send copies of different client data to network storage . During a deduplication process for storing client data e.g. backing up a file or segments of client data in deduplicated data store client can be configured to determine which segments of client data are already stored in deduplicated data store . Rather than compare a segment itself to each segment stored in deduplicated data store which can be enormously time and processing prohibitive identifiers of segments or fingerprints can be compared to determine whether a given segment is already stored in deduplicated data store . A fingerprint engine is configured to generate fingerprints that identify various segments or pieces of client data where such fingerprints are illustrated as fingerprint data . Client can host a deduplication client component that is configured with a fingerprint engine and or client can be configured to communicate with a deduplication server component that is configured with a fingerprint engine. Fingerprint data is discussed in further detail below in connection with .

A fingerprint index can be available in the network where the fingerprint index contains fingerprints corresponding to segments stored in deduplicated data store . Typically such a conventional fingerprint index is configured to support one type of fingerprint such as fingerprints generated using a SHA Secure Hash Algorithm or MD Message Digest algorithm. A fingerprint algorithm is configured to generate a same fingerprint for identical segments and different fingerprints for different segments of client data. Client or a backup and or deduplication application or component hosted on client can determine whether a segment of client data is already stored in deduplicated data store by comparing the segment s fingerprint which is generated using one particular algorithm with fingerprints in the fingerprint index which are also generated using the same algorithm.

Different fingerprint algorithms are independent from one another and produce different types of fingerprints because the different algorithms use largely different mathematical computations. For example a first fingerprint generated for a segment using a first fingerprint algorithm or a fingerprint of a first fingerprint type will be different from a second fingerprint generated for the same segment using a second fingerprint algorithm or a fingerprint of a second fingerprint type . A client that uses one fingerprint type cannot deduplicate its client data using a fingerprint index that only supports a different fingerprint type because the fingerprints of the first fingerprint type will not match any fingerprints of the second fingerprint type even if there exists a fingerprint of the second fingerprint type that identifies the same segment. A fingerprint of a first fingerprint type also cannot be converted or reverse engineered into a fingerprint of a second fingerprint type. In other words it is not possible to deduplicate client data by comparing fingerprints of one fingerprint type with fingerprints of another fingerprint type.

Thus a fingerprint index that only supports a single fingerprint type limits deduplication to the single fingerprint type. Clients that use such a fingerprint index are limited to deduplicating their client data against deduplicated data that is identified by fingerprints of the single fingerprint type e.g. comparing client data fingerprints with deduplicated data fingerprints to determine if the client data is already stored in deduplicated data store . Such a fingerprint index also limits deduplication to those clients that can generate fingerprints of the single fingerprint type e.g. those clients that have access to a fingerprint engine configured to generate fingerprints using the single fingerprint algorithm . Such a deduplication scheme is commonly implemented in offices where deduplication is limited to the clients located in a single office that share a particular fingerprint algorithm even though a single enterprise may include a large number of offices . Deduplication performed in such a setting can be viewed as local in nature where such deduplication is performed within a deduplication island. 

However as advances are made in fingerprint algorithms e.g. algorithms that are more secure against attack clients may no longer wish to use an older fingerprint algorithm and may upgrade to a different e.g. newer or more secure fingerprint algorithm. In such a scenario all deduplicated data would need to be re fingerprinted e.g. generate new fingerprints for the deduplicated data using the new fingerprint algorithm and a new fingerprint index that supports the new fingerprint type would need to be created. Such an upgrade would be time and resource prohibitive. Further the entire process would need to be repeated each time the fingerprint algorithm was upgraded.

The present disclosure provides for a fingerprint service that maintains a fingerprint index configured to support a number of dissimilar fingerprint types. Rather than store fingerprints of a single fingerprint type fingerprint index is configured to store fingerprints of different fingerprint types where the stored fingerprints correspond to the segments stored in deduplicated data store . Fingerprint index can also be configured to store associations between one or more fingerprints of different fingerprint types where the one or more fingerprints correspond to a single segment. Fingerprint index thus provides a central repository of fingerprints of differing fingerprint types that can be used by various clients to perform deduplication. Fingerprint index can be implemented in network storage . Fingerprint index is discussed in further detail below in connection with .

Fingerprint FP service module is configured to provide access to fingerprint index to one or more client systems N . FP service module can be implemented on a computing device in network such as a server. An example of such a computing device is described subsequently in connection with . One or more client systems N can communicate with FP service module via a fingerprint FP service client interface in order to request the fingerprint service e.g. request a lookup for a fingerprint or request that a fingerprint be inserted into the fingerprint index . FP service client interface is configured to establish a connection with FP service module where one or more messages e.g. requests and responses are transmitted between FP service client interface and FP service module across network . Examples of network include a local area network LAN utilizing Ethernet IEEE 802.11x or some other communications protocol a wide area network WAN such as the Internet a communications channel and the like. FP service client interface and FP service module are discussed in further detail below in connection with .

Fingerprint index can be utilized in at least two deduplication scenarios. In one scenario clients perform deduplication within the particular fingerprint type used by the respective client where fingerprint index supports the different fingerprint types. For example a first client uses a first fingerprint type and a second client uses a second different fingerprint type. While each client is limited to performing deduplication within their respective fingerprint type fingerprint index is configured to store both fingerprint types without creating any association between the fingerprints of the different fingerprint types. Thus fingerprint index can be viewed as hosting a number of independent sub indexes that each store fingerprints of a particular fingerprint type.

In such a scenario multiple enterprises or multiple offices of a single enterprise that use the fingerprint service can implement a particular and or proprietary fingerprint type. Since each enterprise or office uses a separate and distinct fingerprint type inter enterprise or inter office deduplication can be prevented e.g. limit each enterprise or office to deduplicating against their own enterprise office data identified by their respective particular and or proprietary fingerprint type as long as each enterprise or office uses only their particular and or proprietary fingerprint type. Thus in such a scenario deduplicated data store would become a central repository for deduplicated data where each enterprise or office would have their own sub store of deduplicated enterprise or office data.

In another scenario clients perform deduplication across multiple fingerprint types supported by fingerprint index where associations are created among fingerprints of different fingerprint types that identify a same segment. For example a client that uses a first fingerprint type and a second fingerprint type can perform deduplication across the first and second fingerprint types. The client can request a lookup for two or more fingerprints of the two or more different fingerprint types where the two or more fingerprints identify the same segment and are associated with one another in fingerprint index . Fingerprint index performs a lookup of each requested fingerprint until it finds a match of one of the requested fingerprints. Thus a client can improve its deduplication rate e.g. improve its hit rate or probability of finding a matching fingerprint in fingerprint index by searching for more than one fingerprint in fingerprint index .

In such a scenario since fingerprint index supports a number of different fingerprint types various clients that use at least one of those different fingerprint types can perform deduplication using fingerprint index . However a client that requests a single fingerprint of a particular fingerprint type in this scenario would still be limited to deduplicating data within that particular fingerprint type.

In both scenarios deduplication need not be limited to clients located within a particular office or deduplication island or even to clients located in a single enterprise. Deduplication can be performed by a number of clients that are capable of connecting to the fingerprint service and that also use at least one of the fingerprint types supported by fingerprint index . Thus deduplication using the fingerprint service can be viewed as global in nature. Further since a greater number of clients are able to perform deduplication using the fingerprint service a larger amount of client data can be deduplicated. This further avoids unnecessary client storage of redundant copies of the same client data.

Fingerprint service module can also update fingerprint index with additional fingerprints of different types. Fingerprint service module can insert one or more fingerprints into fingerprint index . Fingerprint service module can also associate fingerprints in fingerprint index e.g. associate two or more fingerprints with one another when instructed by client that the fingerprints of different fingerprint types should be associated. In one embodiment fingerprint index can implement an association of fingerprints in the form of an index record where each index record stores one or more fingerprints of different fingerprint types that identify a same segment.

Network storage can be implemented as network attached storage NAS file servers storage filers and or network shares. Network storage can be implemented as a single storage device or as a collection of storage devices. Network storage can also be implemented as a storage area network SAN which couples remote storage devices to a server e.g. a storage server such that the remote storage devices appear as locally attached storage devices to the server s operating system OS for example. Network storage can be directly attached to FP service module or can be coupled to FP service module via network . Network storage can include a data volume or other storage construct.

In light of the present disclosure it will be appreciated that network storage can be implemented by any type of computer readable storage medium including but not limited to internal or external hard disk drives HDD optical drives e.g. CD R CD RW DVD R DVD RW and the like flash memory drives e.g. USB memory sticks and the like tape drives removable storage in a robot or standalone drive and the like. Alternatively it will also be appreciated that in light of the present disclosure system and network can include other components such as routers firewalls and the like that are not germane to the discussion of the present disclosure and will not be discussed further herein. It will also be appreciated that other configurations are possible. For example a larger number of client systems N can be implemented in system than the number shown client systems N can be directly coupled to fingerprint service module and or network storage and so on.

The letter N is used to indicate a variable number of devices or components. For example a variable number of clients are implemented in system . Although the letter N is used in describing a variable number of instances of each of these different devices and components a repeated use of the letter N does not necessarily indicate that each device and component has a same number of N instances implemented in the deduplication system.

A fingerprint is an identifier of a respective segment stored in deduplicated data store . A fingerprint can be a checksum hash value or other such value that is calculated based upon data within the segment e.g. within a file segment of client data . In many embodiments fingerprints are generated by a fingerprint algorithm in a manner e.g. using a cryptographically strong collision resistant hash function that produces the same identifier for identical segments while also producing different identifiers for non identical segments. Regardless of which particular algorithm or fingerprint type is used to generate fingerprints by a client the client can use the generated fingerprints to perform deduplication so long as the fingerprint type is supported by fingerprint index . An additional fingerprint type can be supported by fingerprint index by adding e.g. appending a new FP type sub index to fingerprint index where the newly added FP type sub index is configured to store fingerprints of the additional fingerprint type.

As illustrated fingerprint FP type sub index stores one or more fingerprints of a first fingerprint type FP in a first set of sub index entries that includes fingerprints and fingerprint FP type sub index stores one or more fingerprints of a second fingerprint type FP in a second set of sub index entries that includes fingerprints and and so on. A number of fingerprints of different fingerprint types can identify the same segment such as fingerprints FP FP and FP N that identify segment data in deduplicated data store . Fingerprints of different fingerprint types that identify a single segment are associated with one another in fingerprint index . For example fingerprints FP FP and FP N are associated with one another illustrated as association . Such an association is created at the time the fingerprints are added to fingerprint index or inserted into their respective FP type sub indexes of fingerprint index . If a client is aware that two or more fingerprints identify a same segment the client can instruct fingerprint index to associate the two or more fingerprints e.g. to create an association that includes the two or more fingerprints in order to indicate that the two or more fingerprints identify a same segment. Since the two or more fingerprints identify and thus correspond to the same segment only one copy of the segment need be stored in deduplicated data store thus reducing the amount of storage needed for deduplicated data store . Creation of an association is further discussed below in connection to and .

However without instruction from the client fingerprint index cannot determine that two or more fingerprints should be associated and will not create such an association. In one embodiment fingerprint service module is not configured with a fingerprint engine and thus cannot generate or determine fingerprints of different fingerprint types for a same segment. For example fingerprints FP and FP N both identify a same segment and are stored in fingerprint index without an association. Since the two or more fingerprints are not associated with one another a corresponding copy of the segment needs to be stored in deduplicated data store for each individual fingerprint thus creating multiple copies of the segment in deduplicated data store as illustrated by the duplicate copies of segment data in deduplicated data store that are respectively identified by FP and FP N .

As illustrated in fingerprint index includes one or more index records N that are keyed to one or more FP type sub indexes N . Each index record can include up to N sub index entries with each sub index entry corresponding to a respective one of FP type sub indexes N supported in fingerprint index . Each index record is configured to include one or more fingerprints of one or more fingerprint types where the one or more fingerprints of the single index record identify a single segment.

An index record can be found or located using one or more pairings of a fingerprint and a corresponding fingerprint type also referred to herein as a fingerprint descriptor. Fingerprint service module can use the given fingerprint type of a fingerprint descriptor to identify the FP type sub index and thus identify a set of sub index entries in which to search for the given fingerprint of the fingerprint descriptor. Fingerprint service module searches for the given fingerprint in the identified FP type sub index such as by comparing the given fingerprint with the fingerprints present in the set of sub index entries of the identified FP type sub index. If a matching fingerprint is found e.g. a fingerprint in a sub index entry of an index record matches the fingerprint of the fingerprint descriptor the index record containing the matching fingerprint is determined to correspond to the segment identified by the matching fingerprint. The presence of the located index record containing the matching fingerprint in fingerprint index indicates that the corresponding segment is already stored in deduplicated data store .

For example a client may request a lookup for fingerprint of the second fingerprint type FP to determine whether the corresponding segment has already been stored in deduplicated data store . The fingerprint service uses FP to identify FP type sub index e.g. determine that fingerprint type FP matches an identifier associated with FP type sub index and select FP type sub index as the sub index in which to search for the given fingerprint. The fingerprint service searches for the given fingerprint FP in FP type sub index and locates index record which indicates the corresponding segment segment data is already stored in deduplicated data store . Similarly another client may request a lookup for fingerprint N of the third fingerprint type FP . After using fingerprint type FP to identify and select FP type sub index N searching FP type sub index N for fingerprint N also locates index record which similarly indicates the corresponding segment is already stored in deduplicated data store .

Fingerprint index also includes one or more segment descriptors N where each index record is associated with or includes a segment descriptor of the corresponding segment. Segment descriptor includes information e.g. metadata that describes the corresponding segment such as a storage location of the segment a file name of the file of which the segment is a part an offset address e.g. an offset in the file where the segment was originally located an object identifier ID a globally unique identifier GUID and the like. Segment descriptor is generated for a corresponding segment at the time the index record for the corresponding segment is added or appended to fingerprint index .

In one embodiment once an index record is found or located in fingerprint index information of the located index record including segment descriptor associated with the located index record is returned to the requesting client. If no matching fingerprint is found in the selected FP type sub index e.g. the fingerprint of the fingerprint descriptor does not match the fingerprints present in sub index entries of the selected FP type sub index a message can be returned to the requesting client that indicates no index record was found. Such a no match message can include a null index record or other message identifier that indicates no matching fingerprint was found.

If an index record for the corresponding segment is not found the client can also request that the one or more fingerprints be added to the fingerprint index e.g. add the one or more fingerprints to a new index record for the corresponding segment where the one or more fingerprints are associated with one another in the fingerprint index. For example a client may request a lookup for a fingerprint of fingerprint type FP that identifies segment N which is not present in FP type sub index which is the FP type sub index associated with FP . If this were the only fingerprint that the client requested the absence of the requested fingerprint from the FP sub index would indicate that segment N is not stored in deduplicated data store . In response the client would request that the fingerprint corresponding to N be added to fingerprint index e.g. in a new index record and a redundant copy of segment N would also be added to deduplicated data store . However if the client also included fingerprint of fingerprint type FP and or fingerprint N of fingerprint type FP in the request fingerprint service module would have discovered one of the associated fingerprints e.g. would find index record N using either FP or FP N . The presence of one of the associated fingerprints in fingerprint index e.g. or presence of the index record containing the associated fingerprints indicates that corresponding segment N is already stored in deduplicated data store and need not be stored again thus avoiding storage of a redundant segment in deduplication data storage . Thus in one embodiment it is preferred that fingerprint index store as many known fingerprint types as possible and that a client request include as many known associated fingerprints of different fingerprint types as possible to improve the probability of locating a matching fingerprint in fingerprint index .

Finally the client can instruct fingerprint service module to add a new fingerprint to fingerprint index . The client can also instruct fingerprint service module to associate the new fingerprint with one or more other fingerprints in fingerprint index e.g. create a new association to associate two or more fingerprints or update an existing association of two or more fingerprints to include the new fingerprint . In an embodiment using index records an association can be created and or updated by adding a new fingerprint to a new index record e.g. the absence of other fingerprints in the new index record indicates no other fingerprints are yet associated with the new fingerprint or an existing index record e.g. the presence of two or more fingerprints including the new fingerprint in an index record indicates an association among the two or more fingerprints .

FP service client interface can be implemented on client as a software interface. In one embodiment FP service client interface can be implemented by a library or collection of downloadable program code that is linked to a client application or component on client e.g. linked to a backup and or deduplication application or component . FP service client interface can implement a fingerprint FP service API application programming interface to communicate with the FP service module . In one embodiment the fingerprint service is implemented as a web service meaning that FP service module can be accessed by an instance of FP service client interface that implements the FP service API over the Internet from anywhere in the world. The FP service API provides a number of routines or calls supported by FP service module such as a connect call and disconnect call an insert call a lookup call and optionally a delete call which are further discussed below.

FP service client interface is configured to communicate with FP service module by exchanging messages e.g. according to the FP service API such as one or more request s and one or more corresponding response s . Multiple requests can be transmitted from FP service client interface to FP service module without waiting for a corresponding response to be received before sending the next request.

Client connection module of FP service client interface is configured to open a connection with service connection module of FP service module by transmitting an open connection request message e.g. a connect call to service connection module . Service connection module decides whether to accept the connection request. In one embodiment service connection module decides to accept the request after determining the requesting FP service client interface and or the client application or component as further discussed below is authorized to use the fingerprint service. Service connection module sends a response to client connection module indicating the connection request is accepted and a connection is established between client connection module and service connection module . FP service client interface can then transmit one or more request s to FP service module via the established connection. FP service module can also transmit one or more response s which correspond to the one or more request s to FP service client interface via the same connection.

Service connection module is configured to establish a requested connection with each of a number of different clients implementing an instance of FP service client interface. Service connection module is configured to track such connections as well as the one or more request s received on each connection in order to properly transmit the corresponding one or more response s to the requesting FP service client interface instance. Client connection module is also configured to close the connection by sending a close connection request message to service connection module e.g. a disconnect call once the one or more response s corresponding to outstanding request s have been received.

Request generation module of FP service client interface that is implemented on client is configured to generate a request in response to receipt of a client request to access the fingerprint service. The client request is received from a client application and or component thereof hosted on client such as a deduplication application and or component that wishes to perform deduplication using the fingerprint service. Request generation module receives at least one fingerprint value and at least one corresponding fingerprint type from the requesting client application and or component since the fingerprint service does not generate fingerprints . Request generation module generates an empty request message and inserts the received fingerprint value and fingerprint type into the empty request message to produce request . Example requests are further discussed below such as a lookup request discussed in connection with and an insert request and optional delete request discussed in connection with .

Request generation module may also associate an application identifier with the requesting client application and or component where the application identifier uniquely identifies the client application and or component that made the client request. Request generation module may also associate a request identifier with the client request where the request identifier uniquely identifies the client request. Request generation module may also include the request identifier in request which corresponds to the client request. Request generation module may also record or log information about request in order to provide the corresponding response to the proper client application and or component that made the client request. For example request generation module may associate and store the application identifier and the request identifier that correspond to request .

Request generation module is also configured to provide request to client connection module which is configured to transmit request to service connection module via the connection established for client . Client connection module may append other information to request such as a connection identifier that uniquely identifies the particular connection on which request is transmitted other header information and the like. Client connection module is also configured to record or log information about request in order to identify the corresponding response received from FP service module . Such information can include the connection identifier the request identifier associated with request and the like.

Service connection module is configured to receive request via the connection from client . Service connection module is also configured to record or log information about request in order to properly transmit a corresponding response to the instance of client connection module that sent request . Such information can include a connection identifier and or a request identifier associated with request e.g. extracted from request which are discussed above.

Service connection module is also configured to provide request to request process module which is configured to determine whether request includes a lookup request e.g. a lookup call an insert request e.g. an insert call or optionally a delete request e.g. a delete call . Request process module processes request accordingly such as by passing the fingerprint value and fingerprint type of request to a respective operation module and instructing the respective operation module to perform the respective operation. For example request process module is configured to instruct lookup module to perform a lookup operation in response to receiving a lookup request e.g. search for the fingerprint value in the FP type sub index that is associated with the fingerprint type in order to identify an index record that includes the fingerprint value . Request process module is also configured to instruct insert module to perform an insert operation in response to receiving an insert request e.g. insert the fingerprint value into a sub index entry of the FP type sub index that is associated with the fingerprint type and or add an index record including the fingerprint value to the fingerprint index . Request process module is also configured optionally to instruct delete module to perform a delete operation in response to receiving a delete request e.g. delete the fingerprint value from a sub index entry of the FP type sub index that is associated with the fingerprint type and or remove the index record including the fingerprint value from the fingerprint index .

Lookup module insert module and delete module are configured to inform request process module of the result of the respective request e.g. whether the request was completed successfully . Request process module is configured to instruct response generation module to generate a response that corresponds to request . Response generation module generates an empty response message and inserts information from the result into the empty response message to produce response . Information from the result of the request can include a segment descriptor or an associated fingerprint if the client is authorized to receive the associated fingerprint . Example responses are further discussed below such as a lookup response discussed in connection with and an insert response and optional delete response discussed in connection with .

Response generation module is also configured to provide response to service connection module which is configured to transmit lookup response to client connection module via the connection established for client . Service connection module may append other information e.g. the information previously recorded or logged to response such as a connection identifier which matches the connection identifier of corresponding request a request identifier which matches the request identifier of corresponding request other header information and the like.

Client connection module is configured to receive response and provide response to response process module which is configured to return the results to the client application and or component that made the request. Response process module uses the information previously recorded or logged e.g. an application identifier associated with the request identifier included in response to return the result to the client application and or component that made the request.

Lookup response includes information of a result of the performed lookup operation. For example the result may include a message indicating whether the operation was successful. Lookup module returns the result to request process module which triggers response generation module to include information of the result in lookup response . In the embodiment shown lookup response includes a segment descriptor associated with fingerprint value . Segment descriptor includes information or metadata that describes the segment identified by fingerprint value as discussed above in connection to segment descriptor .

If the lookup operation is successful e.g. fingerprint value is found in a sub index entry of the FP type sub index associated with fingerprint type lookup module returns the segment descriptor that is associated with fingerprint value e.g. the segment descriptor in the same index record as fingerprint value as the result. In another embodiment if the lookup operation is successful lookup module returns a located index record that includes fingerprint value as the result where lookup response includes information extracted from the located index record such as an associated fingerprint of the target fingerprint type if present in the located index record and or segment descriptor .

If the lookup operation is not successful e.g. fingerprint value is not found in a sub index entry of the FP type sub index associated with fingerprint type lookup module will return some indication that the lookup operation was not successful e.g. an empty or null segment descriptor an error or a no match found message and the like as the result.

Insert request can also include segment descriptor that corresponds to the segment identified by fingerprint value . Segment descriptor includes information or metadata that describes the segment as discussed above in connection to segment descriptor . As part of the insert operation segment descriptor is inserted into fingerprint index and is associated with the sub index entry containing fingerprint value . Additional metadata e.g. the storage location of the segment may also be added to segment descriptor by request process module before segment descriptor is inserted into fingerprint index . In an embodiment using index records segment descriptor is inserted into the index record that contains fingerprint value . If the fingerprint index or index record already includes an associated segment descriptor segment descriptor need not be inserted again but the metadata of segment descriptor can be used to update the existing segment descriptor.

Insert request may include other information not shown such as a connection identifier that uniquely identifies the particular connection on which insert request is transmitted an insert request identifier that uniquely identifies the particular insert request being transmitted from the requesting client other header information and the like.

Although not shown an insert response includes a result of the performed insert operation e.g. whether the insert operation was successful . If the insert operation is successful e.g. fingerprint value is successfully added to a sub index entry associated with fingerprint type insert module will return some indication that the insert operation was successful e.g. an insert complete message and the like as the result. If the insert operation is not successful e.g. fingerprint value is already present in a sub index entry associated with fingerprint type and does not need to be inserted insert module will similarly return some indication that the insert operation was not successful e.g. a no insert needed message an error message and the like as the result. Insert module provides the result to response generation module which includes the result in the insert response.

In some embodiments FP service module also supports a delete request e.g. a delete call which would be called when a segment is removed from deduplicated data store e.g. the segment is no longer needed in a backup has expired or otherwise needs to be removed from the deduplicated data store . In an embodiment that supports a delete request the delete request is configured to include a fingerprint value that identifies the deleted segment and a corresponding fingerprint type that identifies the fingerprint type of the fingerprint value. Request process module is configured to instruct delete module to perform a delete operation for the given fingerprint value in the FP type sub index identified by the given fingerprint type. For example delete module uses the fingerprint value to identify a matching fingerprint value contained in a sub index entry of FP type sub index and deletes the matching fingerprint from the sub index entry. In an embodiment that uses index records delete module locates an index record containing the fingerprint value e.g. performs a lookup operation using the given fingerprint value and fingerprint type to find the index record and deletes the fingerprint value from the sub index entry of the index record. In another embodiment the entire index record is deleted from fingerprint index since all fingerprints contained in the index record identify the same deleted segment and therefore should be removed from fingerprint index depending on implementation of delete module . The delete request may include other information such as a connection identifier that uniquely identifies the particular connection on which the delete request is transmitted a lookup request identifier that uniquely identifies the particular lookup request being transmitted from the requesting client other header information and the like.

The delete response includes a result of the performed delete operation e.g. indicate whether the delete operation was successful . If the delete operation is successful e.g. the fingerprint value and or index record is successfully deleted from fingerprint index delete module will return some indication that the delete operation was successful e.g. a delete complete message and the like as the result. If the delete operation is not successful e.g. the fingerprint value is not present in the fingerprint index and thus cannot be deleted delete module will similarly return some indication that the delete operation was not successful e.g. a no delete message an error message and the like as the result. Delete module provides the result to response generation module which includes the result in the delete response.

In some embodiments the delete request includes a fingerprint descriptor array which includes one or more fingerprint descriptors. As described above each fingerprint descriptor includes a pairing of a fingerprint value and a corresponding fingerprint type. Thus the fingerprint descriptor array includes N fingerprint descriptors or N pairs of fingerprint values and corresponding fingerprint types where the N fingerprint values identify a same deleted segment. Request process module is configured to instruct delete module to perform a lookup operation for each of the fingerprint values until a matching fingerprint is found where the matching fingerprint is included in an identified index record. In one embodiment the identified index record can be deleted using any of the one or more fingerprints included in the given index record. This is because the group of fingerprints stored in a given index record identify a same segment stored in deduplicated data store . If that segment is deleted or otherwise removed from deduplicated data store all fingerprints that identify that deleted segment also need to be removed from the fingerprint index. In another embodiment only the matching fingerprints e.g. the fingerprints of the delete request that match fingerprints present in the identified index record are deleted from respective sub index entries of the identified index record.

In some embodiments the fingerprint service can implement an independent mechanism of verifying whether segments still exist in deduplicated data store . For example when a lookup request is received the fingerprint service can use the independent verification mechanism to determine whether the corresponding segment is still present in the deduplicated data store. In such an embodiment a delete call need not be supported. Instead of deleting an index record or sub index entry that contains one or more fingerprint values corresponding to a deleted segment the index record remains in fingerprint index as an obsolete index record. If a lookup request is received for a deleted segment the fingerprint service responds with an indication that no fingerprint corresponding to the deleted segment was found in the fingerprint index even though a fingerprint exists in an obsolete index record . If the deleted segment is later re inserted into deduplicated data store the segment descriptor of the obsolete index record is overwritten e.g. a new storage location of the re inserted segment is used to overwrite an old storage location of the deleted segment and the index record is no longer obsolete.

The process illustrated in begins at operation where a lookup request is received at fingerprint FP service module. The FP service module is implemented or hosted on a computing device such as a server in the network where any request e.g. a lookup request an insert request and or a delete request is received at a port of the server computing device coupled to the network. The request is received from an instance of a fingerprint FP service client interface module implemented on a computing device such as a client in the network where the request was transmitted from a port of the client computing device coupled to the network. The request is routed or directed to service connection module which in turn routes the request to the request process module. Request process module is also configured to determine whether the received request is a lookup request an insert request or a delete request.

The process continues to operation where the request process module identifies N pairs of fingerprint value and fingerprint type included in the lookup request where N can be one or greater. The N fingerprint values identify a same segment. The request process module determines that a lookup operation should be performed for the lookup request and the request process module extracts the N pairs or N fingerprint descriptors from the lookup request and provides the N fingerprint descriptors to the lookup module. Operation begins a sequence of operations that can be repeated for each fingerprint descriptor of the N fingerprint descriptors where a present iteration of the sequence is indicated by the letter i. Operation initializes i to one thus starting the sequence with a first fingerprint descriptor of the N fingerprint descriptors . At the end of the sequence the letter i is incremented if there is another fingerprint descriptor to lookup.

The process continues to operation where lookup module identifies a fingerprint FP type sub index that is associated with the fingerprint type i of the fingerprint descriptor i . The lookup module also selects the identified FP type sub index as the sub index in which to search for fingerprint value i of the fingerprint descriptor i . The process continues to operation where the lookup module performs a lookup operation of or searches for fingerprint value i in the selected FP type sub index.

The process continues to operation where lookup module determines whether fingerprint value i is found in the selected FP type sub index. If fingerprint value i is found the process continues to operation where the lookup module returns a segment descriptor associated with the fingerprint value i to request process module e.g. returns the segment descriptor that is included in the same index record that contains fingerprint value i . The request process module can transmit a response message to the requesting instance of FP service client interface e.g. via the same port on which the lookup request was received where the response message includes the segment descriptor. The process then ends.

Returning to operation if the fingerprint value i is not found the process continues to operation where lookup module determines whether there is another pair or fingerprint descriptor to lookup. If there is another pair or fingerprint descriptor to lookup the process continues to operation where i is incremented to indicate a next iteration of the sequence of operations e.g. operations for the next fingerprint descriptor. The process then returns to operation .

Returning to operation if there are no other pairs to lookup the process continues to operation where an indication that no fingerprints were found such as a no match message is returned to request process module. The request process module can trigger response generation module to generate a response message which is transmitted to the requesting instance of FP service client interface e.g. via the same port on which the lookup request was received where the response message includes the no match indication or message. The process then ends.

The process illustrated in begins at operation where an insert request is received at the FP service module e.g. on a port of the computing device hosting the FP service module as discussed above in connection with . The insert request is routed to the request process module. The process continues to operation where the request process module identifies N pairs of fingerprint value and fingerprint type included in the insert request where N can be one or greater. The N fingerprint values identify a same segment. The request process module determines that an insert operation should be performed for the insert request. The request process module also determines that a lookup operation should be performed before the insert operation to prevent any duplicate fingerprints from being inserted into the fingerprint index. The request process module extracts the N pairs or N fingerprint descriptors from the insert request and provides the N fingerprint descriptors to the lookup module. Operation begins a sequence of operations that can be repeated for each fingerprint descriptor of the N fingerprint descriptors where a present iteration of the sequence is indicated by the letter i. Operation initializes i to one thus starting the sequence with a first fingerprint descriptor of the N fingerprint descriptors . At the end of the sequence the letter i is incremented if there is another fingerprint descriptor.

The process continues to operation where lookup module identifies a fingerprint FP type sub index that is associated with the fingerprint type i of the fingerprint descriptor i . The lookup module also selects the identified FP type sub index as the sub index in which to search for fingerprint value i of the fingerprint descriptor i . The process continues to operation where the lookup module performs a lookup operation of or searches for fingerprint value i in the selected FP type sub index.

The process continues to operation where lookup module determines whether fingerprint value i is found in the selected FP type sub index. If fingerprint value i is found the process continues to operation where the lookup module returns a result to request process module where the result indicates that the fingerprint value i was found. In an embodiment that uses index records the request includes information from an index record containing the fingerprint value i such as a globally unique identifier GUID of the index record which uniquely identifies the index record in the fingerprint index. The request process module in response determines whether any of the other N fingerprint values of the N fingerprint descriptors should be inserted into the fingerprint index. This operation is further discussed below in connection with . The process then ends.

Returning to operation if fingerprint value i is not found the process continues to operation where lookup module determines whether there is another pair or fingerprint descriptor to lookup. If there is another pair or fingerprint descriptor to lookup the process continues to operation where i is incremented to indicate a next iteration of the sequence of operations e.g. operations for the next fingerprint descriptor. The process then returns to operation .

Returning to operation if there are no other pairs to lookup the process continues to operation where lookup module returns a result to the request process module where the result indicates that no fingerprint values were found. The request process module in response determines that all N fingerprint values of the N fingerprint descriptors should be inserted into the fingerprint index. In response request process module provides the N fingerprint descriptors to insert module and triggers insert module to insert the N fingerprint values into fingerprint index and associate the N fingerprint values with one another e.g. insert into a same new index record . This operation is further discussed below in connection with . The process then ends.

Returning to operation if an association exists for the found fingerprint value i the process continues to operation where request process module determines whether the association identifies all N fingerprint values of the N fingerprint descriptors. In an embodiment using index records request process module can determine whether the association implemented as an index record includes the N fingerprint values by evaluating the index record that includes the found fingerprint value i to determine which of the N fingerprint values are included in the index record. If the association identifies or the index record includes all N fingerprint values of the N fingerprint descriptors the process continues to operation where request process module determines that there are no fingerprints that need to be inserted into the fingerprint index. An indication that no fingerprints need to be inserted such as a no insert message is returned to request process module. The request process module can trigger response generation module to generate a response message which is transmitted to the requesting instance of FP service client e.g. via the same port on which the insert request was received where the response message includes the no insert indication or message. The process then ends.

Returning to operation if the association does not identify or the index record does not include all N fingerprint values the process continues to operation where request process module determines the fingerprint values that are not identified by the association e.g. the fingerprint values not included in the index record . The process continues to operation where request process module provides the fingerprint descriptors that include the non identified fingerprint values to insert module and triggers insert module to insert the non identified fingerprint values into the fingerprint index and associate the N fingerprint values with one another. In an embodiment using index records request process module triggers insert module to insert the non identified fingerprint values into the same index record that includes the found fingerprint value i since the N fingerprint values identify the same segment such as by providing the GUID of the same index record to insert module. This operation is further discussed below in connection with . The process then ends.

In such an embodiment if the one or more fingerprint values are to be inserted into a new index record a new index record is created and appended to the fingerprint index. If the one or more fingerprint values are to be inserted into an existing index record insert module finds the existing index record using the GUID that uniquely identifies the existing index record. The index record either the new index record or the existing record includes a number of sub index entries that each correspond to a FP type sub index associated with a fingerprint type. Thus each sub index entry of the index record can be identified by an associated fingerprint type.

The process of also includes a sequence of operations that can be repeated for each fingerprint descriptor of the one or more fingerprint descriptors where a present iteration of the sequence is indicated by the letter j. Before the process of begins the letter j is initialized to one thus starting the sequence with a first fingerprint descriptor of the one or more fingerprint descriptors . At the end of the sequence the letter j is incremented if there is another fingerprint descriptor to insert.

In an embodiment of fingerprint index including a number of index records where an index record is an embodiment of an association begins at operation where an insert module identifies a sub index entry or field of the index record which is either the new index record or the existing record using the fingerprint type j of the fingerprint descriptor j . The process continues to operation where the insert module inserts fingerprint value j into the identified sub index entry. Thus by inserting the fingerprint values into corresponding sub index entries of a single index record the association is effectively updated to include the newly inserted fingerprint value.

The process then continues to operation where insert module determines whether there is another fingerprint value to insert into the index record. If there is another fingerprint value the process continues to operation where j is incremented and the process returns to operation to insert the next fingerprint value. Returning to operation if there are no other fingerprint values to insert the process continues to operation where insert module returns an insert complete indication or message to request process module. The process then ends.

In an embodiment that uses another association implementation e.g. pointers or other association the process illustrated in begins at operation where an insert module identifies an FP type sub index using the fingerprint type j of the fingerprint descriptor j . The process continues to operation where the insert module inserts fingerprint value j into the identified FP type sub index. The process continues to operation where insert module determines whether an association exists for fingerprint value i which was previously determined by request process module in operation of and provided to insert module . If an association exists the process continues to operation where the association which already includes fingerprint value i is updated to also include fingerprint value j .

The process continues to operation where insert module determines whether there is another fingerprint value to insert. If there is another fingerprint value to insert the process continues to operation where j is incremented to indicate a next iteration of the sequence of operations e.g. operations for the next fingerprint value. The process then returns to operation . Returning to operation if there are no more fingerprint values to insert the process continues to operation where insert module returns an insert complete message or indication to request process module. The process then ends.

Returning to operation if an association does not exist the process continues to operation where insert module determines whether fingerprint value i was found which was previously determined by request process module in operation of and provided to insert module . If fingerprint value i was found and no association yet exists the process continues to operation where insert module creates a new association to include fingerprint value i and fingerprint value j . The process continues to operation as described above.

Returning to operation if fingerprint value i was not found the process continues to operation where insert module determines whether there is another fingerprint value to insert into the fingerprint index. If there is another fingerprint value to insert and thus another fingerprint with which to make a new association the process continues to operation where j is incremented for the next fingerprint descriptor. The process continues to operation where insert module identifies and selects an FP type sub index using the fingerprint type j of the fingerprint descriptor j . The process continues to operation where insert module inserts fingerprint value j into the selected FP type sub index. The process continues to operation where insert module creates a new association to include the present fingerprint value j and the previous fingerprint value j 1 . The process continues to operation as described above.

Returning to operation if there are no other fingerprint values to insert the fingerprint index and thus no other fingerprints with which to make a new association the process continues to operation where insert module returns an insert complete message or indication to request process module. The process then ends.

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. Additionally applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem or interface .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . Code for the automatically performing operations on such applications based on their dependencies on other applications such as described above in reference to the processes of etc. to implement the present disclosure can be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Memory is also used for storing temporary variables or other intermediate information during the execution of instructions by the processor . The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 UNIX Linux or another known operating system.

Moreover regarding the signals described herein it will be understood that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present disclosure may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

Similarly servers and generally represent host computing devices or systems such as application servers or database servers configured to provide various database services and or run certain software applications such as system s that host fingerprint service module fingerprint index and or deduplicated data store in and or computer system in among others. Network generally represents any telecommunication or computer network including for example an intranet a wide area network WAN a local area network LAN a personal area network PAN or the Internet.

As illustrated in one or more storage devices N can be directly attached to server . Similarly one or more storage devices N can be directly attached to server . Storage devices N and storage devices N generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions. In certain embodiments storage devices N and storage devices N can represent network attached storage NAS devices configured to communicate with servers and using various protocols such as Network File System NFS Server Message Block SMB or Common Internet File System CIFS . In one example storage devices N and or N can store fingerprint index that is accessible via fingerprint service module .

Servers and can also be connected to a storage area network SAN fabric . SAN fabric generally represents any type or form of computer network or architecture capable of facilitating communication between multiple storage devices. SAN fabric can facilitate communication between servers and and a plurality of storage devices N and or an intelligent storage array . SAN fabric can also facilitate via network and servers and communication between client systems and and storage devices N and or intelligent storage array in such a manner that devices N and array appear as locally attached devices to client systems and . As with storage devices N and storage devices N storage devices N and intelligent storage array generally represent any type or form of storage device or medium capable of storing data and or other computer readable instructions.

In certain embodiments and in reference to computer system of a communication interface can be used to provide connectivity between each client system and and network . Client systems and can be able to access information on server or using for example a web browser or other client software. Such software can allow client systems and to access data hosted by server server storage devices N storage devices N storage devices N or intelligent storage array . Although depicts the use of a network such as the Internet for exchanging data the embodiments described and or illustrated herein are not limited to the Internet or any particular network based environment.

In at least one embodiment all or a portion of one or more of the embodiments disclosed herein can be encoded as a computer program and loaded onto and executed by server server storage devices N storage devices N storage devices N intelligent storage array or any combination thereof. All or a portion of one or more of the embodiments disclosed herein can also be encoded as a computer program stored in and run by server and server and distributed to client systems and over network .

In some examples all or a portion of the computing devices in can represent portions of a cloud computing or network based environment. Cloud computing environments can provide various services and applications via the Internet. These cloud based services e.g. software as a service platform as a service infrastructure as a service etc. can be accessible through a web browser or other remote interface. Various functions described herein can be provided through a remote desktop environment or any other cloud based computing environment.

In addition one or more of the components described herein can transform data physical devices and or representations of physical devices from one form to another. For example fingerprint service module in can transform information received from a client system into an association of entries in one or more sub indexes.

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

