---

title: Web-based operating system framework
abstract: The disclosure generally describes computer-implemented methods, software, and systems for providing a web-based operating system framework for client devices. One computer-implemented method includes receiving portal login credentials from a client device, analyzing, by operation of a computer, configuration data to determine a desired graphical user interface (GUI) for the portal to present on the client device, determining to present a particular web operating system (WOS) GUI configuration on the client device, displaying a graphical element representing an available application on the determined WOS GUI configuration, and monitoring the WOS for GUI interactions associated with the graphical element.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09652255&OS=09652255&RS=09652255
owner: SAP Portals Israel Ltd
number: 09652255
owner_city: Ra'anana
owner_country: IL
publication_date: 20130220
---
This application is related to co pending U.S. patent application Ser. No. 13 772 020 filed on Feb. 20 2013 the entire contents of which are hereby incorporated by reference.

A web portal may use various web based graphical user interface GUI designs to present aggregated portal content to web portal users. These GUI designs may include web pages with content arranged and presented to the web portal users on the web page as text tables dialogs animations audio and the like. Application software or an application is computer software designed to run within an operating system and to perform specific tasks functionality for a user. Web portals however do not currently have an ability to permit the use of web based applications within a web based operating system framework. As a result the provision of additional enhanced services and content to the web portal users such as GUI manipulations collaborations functionality streamlining reusability and web application mashups are either restricted or limited in scope and functionality by existing web technology.

The present disclosure relates to computer implemented methods software and systems for providing a web based operating system framework. One computer implemented method includes receiving portal login credentials from a client device analyzing by operation of a computer configuration data to determine a desired graphical user interface GUI for the portal to present on the client device determining to present a particular web operating system WOS GUI configuration on the client device displaying a graphical element representing an available application on the determined WOS GUI configuration and monitoring the WOS for GUI interactions associated with the graphical element.

Other implementations of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of software firmware or hardware installed on the system that in operation causes or causes the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other implementations can each optionally include one or more of the following features 

A first aspect combinable with the general implementation wherein the determination of the particular WOS GUI configuration to present on the client device is based upon one of the client device type the configuration data portal administrator settings or historical data.

A second aspect combinable with the general implementation wherein the particular WOS configuration is one or more of a reflection of the client device s native operating system GUI a GUI interface of a particular operating system not native to the client device or a combination of the client device s native operating system GUI and the particular operating system GUI not native to the client device.

A third aspect combinable with the general implementation further configured to determine an availability of the application for the determined WOS GUI interface configuration.

A fourth aspect combinable with the general implementation further configured to determine whether the application has an available update.

A fifth aspect combinable with the general implementation further configured to perform appropriate functionality based upon monitored GUI interactions associated with the graphical element.

A sixth aspect combinable with the general implementation further configured to initiate an application mashup operation by overlaying two graphical elements on the WOS GUI.

The subject matter described in this specification can be implemented in particular implementations so as to realize one or more of the following advantages. First web applications would allow computer software designed for specific tasks to be distributed as desired to provide default functionality or higher level functionality that could be bundled and sold in various configurations. Second the use of web applications would allow a web portal on a mobile device to provide a configurable look and feel to the web portal experience. For example a particular web portal user could select the web portal to provide a similar look at feel and functionality to the web portal as the native operating system provides on their mobile device used to interact with the web portal while another web portal user may choose a different look and feel. Third the provided web applications can work together to provide a seamless experience for a web portal user. For example selecting a function to share a result from a web application can open another web application or interface with the web application framework to provide the requested functionality. Fourth enhanced sharing and search capabilities can be provided by the web application framework for both users and web applications. For example web applications can be interfaced to leverage the sharing and or search functionality provided by other web applications and users can easily access the provided sharing and search functionality. Fifth mashups wiring of web applications can be performed by simple drag and drop or other suitable operations to provide enhanced application collaboration for one or more users. The ability to wire web applications greatly enhances the functionality provided by single web applications by allowing the creation of almost limitless aggregated web applications to provide content from the aggregated web applications in a form useful for one or more web portal users.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

The disclosure generally describes computer implemented methods software and systems for providing a web based operating system framework for client devices.

For the purposes of this disclosure a mashup is web application that combines wires heterogeneous data user interface UI components and or logic functionality provided for example by web applications from multiple diverse sources to create new and more useful aggregated data functionality and or views not provided by the original sources. The mashups send store receive and or provide the combined data and or functionality typically through web browsers or other suitable applications using HTML XHTML CSS JAVASCRIPT XML JSON KML and other suitable technologies. Mashups typically use associated defined application programming interfaces APIs and other suitable interface methods such as XML JSON SOAP REST and the like and may be secured using various access control and security methods for data and or web applications.

Mashups are generally created from client web applications that may be accessed by one or more clients from hosting servers controlled by a particular entity and or third party. The data functionality provided by the web applications can be wired into a single presentation allowing collaboration among for example businesses businesses and developers developers and customers etc.

Typically mashups are of two types web based and server based. Web based mashups typically leverage a user s browser or other equivalent tool to wire and configure web applications data. Server based mashups use remote servers to perform the wiring configuration and or execution of the mashup and transmit associated data from the mashup to the client for example in a cloud computing type environment. For the purposes of this application either type or a combination of the described mashup types is envisioned to be within scope of this disclosure. Further other types of mashups consistent with this disclosure are also envisioned to be within the scope of this disclosure.

Various graphical user interface GUI tools can be used to define and wire web applications to create mashups. The GUI tools can allow for example a developer to drag and drop web applications on top of each other in a GUI interface specify applications to wire together and the like. The GUI tools may also allow existing web applications to be analyzed for API in out data ports to use for mashups in order to gain more life from existing web applications. Mashups may be reusable and offered for use by multiple users in collaborative efforts as well as easily updated for all collaborative effort users.

For the purposes of this disclosure an enterprise portal EP is a framework for integrating information people and processes across organizational boundaries. An EP provides a secure unified access point often in the form of a web based user interface and is designed to aggregate and personalize information through application specific sub portals. The EP is a de centralized content contribution and content management system which keeps the information always updated. With only a web browser EP users can begin work once they have been authenticated in the EP which offers a single point of access to information enterprise applications and services both inside and outside an organization. EPs may present information from diverse sources on mobile or other devices in a unified and structured way and provide additional services such as mashups dashboards an internal search engine e mail news navigation tools and various other features. EPs are often used by enterprises for providing their employees customers and possibly additional EP users with a consistent look and feel and access control and procedures for multiple applications which otherwise would have been separate entities altogether.

At a high level the EPS is an electronic computing device operable to receive transmit process store or manage data and information associated with the example distributed computing system . Generally the EPS provides an EP allowing users to view compose modify delete and deploy EP pages. Specifically the described computer implemented methods software and systems also provide functionality for providing a web based operating system WOS framework for client devices using a GUI providing an EP user with an efficient user friendly and secure presentation of data provided by or communicated within the example distributed computing system

The EPS is responsible for receiving application requests for example EP content requests and WOS GUI requests from one or more client applications associated with a particular client of the example distributed computing system and responding to the received requests by processing the received EP content requests in a web operating system engine and or wiring manager and sending an appropriate response from the web operating system engine and or wiring manager back to the requesting client application . In addition to requests from the client requests associated with the web operating system engine and or wiring manager may also be sent from internal EP users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers associated with the EPS and or other components of the example distributed computing system . According to one implementation the EPS may also include or be communicably coupled with an e mail server a web server a caching server a streaming data server and or other suitable server.

The EPS contains a web operating system engine and or wiring manager . At least a portion of the web operating system engine and or wiring manager is executed using requests responses sent from to a client within and communicably coupled to the illustrated example distributed computing system using network . In some implementations requests responses can be sent directly to EPS from a user accessing EPS directly. In some implementations the EPS may store a plurality of various web operating system engines and or wiring managers . In some implementations the EPS may comprise a web server where one or more of the components of EPS represent web based applications accessed and executed by the client using the network or directly at the EPS to perform the programmed tasks or operations of the various components of the EPS .

In some implementations any and or all of components of the EPS both hardware and or software may interface with each other and or an interface using an application programming interface API and or a service layer . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. The service layer provides software services to the example distributed computing system . The functionality of the EPS may be accessible for all service consumers using this service layer. Software services such as provide reusable defined business functionalities through a defined interface. For example the interface may be software written in JAVA C or other suitable language providing data in extensible markup language XML format or other suitable format.

While illustrated as an integrated component of the EPS in the example distributed computing system alternative implementations may illustrate the API and or service layer as a stand alone component in relation to other components of the example distributed computing system . Moreover any or all parts of the API and or service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The EPS includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the example distributed computing system . The interface is used by the EPS for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the client as well as other systems not illustrated communicably coupled to the network . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated example distributed computing system

The EPS includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the example distributed computing system . Generally the processor executes instructions and manipulates data to perform the operations of the EPS . Specifically the processor executes the functionality required to provide a WOS framework for client devices.

The EPS also includes a memory that holds data for the EPS . Although illustrated as a single memory in two or more memories may be used according to particular needs desires or particular implementations of the example distributed computing system . While memory is illustrated as an integral component of the EPS in alternative implementations memory can be external to the EPS and or the example distributed computing system . In some implementations the memory holds manages the description and or data for all objects in the EPS includes one or more instances of content provider data an out of box application an out of box application configuration and a mashup configuration .

The content provider data may include any type of data associated with and or used by the EPS to locate and interface with a content provider server CPS . The content provider data may include CPS locations addresses storage specifications content lists access requirements and or other suitable data. For example for a database CPS the content provider data may include the server Internet Protocol IP address Uniform Resource Locator URL database type minimum technical access requirements access permission requirements data download speed specifications etc.

The out of box application can be any application program module process or other computer software that may execute in a web based environment to perform a specific task functionality for an EP user and is typically provided to an EP user by default for use in the WOS. In some implementations some out of box applications may be available only if the EP user has specific security credentials role etc. Typically the out of box application is executed locally on the EPS . In other implementations the hosted application can be transmitted to another processing environment such as CPS and or the client to be executed and to either directly share data with the processing environment or transmit the data with another associated processing environment or component of the example distributed computing system . In some implementations one or more out of box applications can be executed in parallel within one or among multiple processing environments. The out of box application can be combined with other applications for example other out of box applications and or hosted applications to create mashups. In some implementations hosted applications and or out of box applications in the context of a mashup can run on separate processing environments. For example a hosted application can run on the CPS while an out of box application can executed on the EPS as long as the results of the executing applications can be accessed received using at least network .

The out of box application configuration is any data providing identification interface requirements mashup available functionality e.g. search share etc. security cost ratings EP user comments authorship ownership location hosting information execution requirements identifying graphic e.g. an icon and or other suitable information associated with the out of box application . For example out of box application configuration can include data describing in out ports and transmitted data types formats required applications configurations and security requirements which are used by the wiring manager to set a default mashup configuration when an out of box application is associated with a hosted application using a mashup GUI tool executed by the WOSE and or wiring manager to create a mashup. The out of box application configuration could also be used to decide which out of box application may suit an EP user s requirements. For example an EP user could read an associated description generated in a GUI tool not illustrated to allow the EP user to browse and select an out of box application based on various entered criteria such as business use tax calculation email reading and the like. In some implementations the out of box application configuration can also be accessed by the CPS and or the client for particular needs desires or particular implementations of the example distributed computing system

The mashup configuration is any data providing an identification description configuration interface requirements security cost ratings EP user comments authorship ownership location hosting information execution requirements application availability status and or other suitable mashup configuration information. For example the mashup configuration can specify that an application App6 is wired with an application App1 and that this mashup has been rated by EP users as only one out of five stars. The mashup configuration can also specify that App6 is wired with App2 and this mashup has a five star rating. An EP user investigating available mashups and component applications and their wiring relationships might conclude that the mashup of App6 and App2 will be more useful for their purpose assuming that both App1 and App2 provide at least similar functionality. In some implementations the mashup configuration can also provide data on applications that are eligible for wiring but have not been downloaded by an EP user. Other suitable configuration data provided by the mashup configuration will be apparent to those of skill in the art.

The web operating system engine WOSE can be any application program module process or other software that may provide WOS GUI environment hereinafter WOS to a client . In some implementations the generated WOS can emulate the look and feel of the client device native operating system for example APPLE IOS ANDROID BLACKBERRY OS and the like. In other implementations a generated WOS can emulate a look and feel of an operating system completely different than the host client device s operating system. For example the WOSE could emulate an ANDROID mobile device GUI as a web based EP GUI on an APPLE IPAD computing device acting as a client . In some implementations the choice of a generated WOS can be associated with a specific EP user s profile a group profile and the like. For example EP user configuration data not illustrated could be stored in memory on the client in memory of EPS and or memory or CPS that specifies the WOS for the WOSE to generate on a particular client device . In some implementations respective configuration data associated with desired hosted applications and or out of box applications can specify required preferred WOS configurations that are taken into consideration by the WOSE as to which WOS to use. In some implementations the EP user is provided with choices for example a radio button list of which WOS to execute when logging into an EP.

In some implementations the WOSE can also provide mashup functionality for two or more hosted applications and or out of box applications or provide an interface to trigger additional GUI based applications software and or tools to perform the application wiring for a desired mashup. For example if an EP user drags a hosted application on top of an out of box application within the WOS the WOSE can launch functionality built in to the WOSE to allow the EP user to wire the applications together into a mashup or can launch the wiring manager to provide perform some or all of this functionality. In some implementations the wiring of applications results in the creation modification of one or more associated instances of mashup configurations .

In some implementations the WOSE can also provide functionally for an EP user either alone or in conjunction with the wiring manager to search for visualize browse define and or edit mashups. For example the WOSE can access the mashup configuration associated with the EP user to determine if any mashups are available for the EP user which applications may be available necessary for mashups the EP user s security status with respect to any mashups and associated applications and the like. The WOSE and or the wiring manager can then display a graphical depiction of one or more mashups for the EP user and provide and or allow access to functionality associated with the one or more mashups.

A particular WOSE may operate in response to and in connection with at least one request received from other WOSEs including a WOSE associated with another EPS as well as other components of the example distributed computing system . In some implementations the WOSE can be and or include a web server. In some implementations each WOSE can represent a network based application accessed and executed using the network e.g. through the Internet or using at least one cloud based service associated with the WOSE . For example a portion of a particular WOSE may be a Web service associated with the WOSE that is remotely called while another portion of the WOSE may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular WOSE may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular WOSE may be executed or accessed by an EP user working directly at the EPS as well as remotely at a corresponding client .

The wiring manager can be any application program module process or other software that may provide wiring and or mashup functionality to a client . The wiring manager can provide mashup functionality for two or more hosted applications and or out of box applications or provide an interface possibly through the WOS to trigger additional GUI based applications software and or tools to perform the application wiring for a desired mashup. For example if an EP user drags a hosted application on top of an out of box application within the WOS the wiring manager can launch built in functionality to allow the EP user to wire the applications together into a mashup or interface with the WOSE to launch a GUI to provide perform some or all of this functionality. In some implementations the wiring manager would create modify one or more instances of a mashup configuration .

In some implementations the wiring manager can also provide functionally for an EP user either alone or in conjunction with the WOSE to search for visualize browse define and or edit mashups. For example the WOSE can access one or more mashups associated with the EP user whether any applications are available necessary for mashups the EP user s security status with respect to any mashups and associated applications and the like. The WOSE and or the wiring manager can then display a graphical depiction of one or more mashups for the EP user and provide and or allow access to functionality associated with the mashups.

A particular wiring manager may operate in response to and in connection with at least one request received from other wiring managers including a wiring manager associated with another EPS as well as other components of the example distributed computing system . In some implementations the wiring manager can be and or include a web server. In some implementations each wiring manager can represent a network based application accessed and executed using the network e.g. through the Internet or using at least one cloud based service associated with the wiring manager . For example a portion of a particular wiring manager may be a Web service associated with the wiring manager that is remotely called while another portion of the wiring manager may be an interface object or agent bundled for processing at a remote client . Moreover any or all of a particular wiring manager may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular WOSE may be executed or accessed by an EP user working directly at the EPS as well as remotely at a corresponding client .

At a high level the CPS is typically a third party electronic computing device operable to host receive transmit process store or manage applications data and or information associated with the example distributed computing system that is managed apart from mangers of the EPS . Specifically the CPS provides content and or hosted applications to the EPS for use by the client .

The CPS is responsible for receiving application requests for example content and or hosted application requests from the EPS and or client application associated with a particular client of the example distributed computing system and responding to the received requests by processing the received requests in a content provider manager and sending an appropriate response back to the requesting EPS and or client application . In addition to requests from the EPS and or client requests associated with the content provider manager may also be sent from internal users external or third party customers other automated applications as well as any other appropriate entities individuals systems or computers associated with the CPS and or other components of the example distributed computing system . According to one implementation the CPS may also include or be communicably coupled with an e mail server a web server a caching server a streaming data server and or other suitable server.

The CPS contains a content provider manager CPM . At least a portion of the CPM is executed using requests responses sent from to the EPS and or client within and communicably coupled to the illustrated example distributed computing system using network . In some implementations requests responses can be sent directly to the CPS from a user accessing CPS directly. In some implementations the CPS may store a plurality of various CPMs . In some implementations the CPS may comprise a web server where one or more of the components of CPS represent web based applications accessed and executed by the EPS and or client using the network or directly at the CPS to perform the programmed tasks or operations of the various components of the CPS . In some implementations any and or all of components of the CPS both hardware and or software may interface with each other and or an interface using an application programming interface API and or a service layer consistent with the API and or service layer and components of EPS described above or different according to particular needs desires or particular implementations of the CPS .

The interface may also be consistent with the above described interface of the EPS or other interfaces within the example distributed computing system . The processor may be consistent with the above described processor of the EPS or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the CPS including the functionality required to send requests to the EPS and or client and to receive and process respective responses. The memory may be consistent with the above described memory of the EPS or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the CPS . Memory may also be used by the EPS and or other components of the example distributed computing system to store any type of data for the purposes of the storing component. In some implementations the memory holds manages the description and or data for all objects in the CPS and includes one or more instances of content provider manager data content a hosted application and or a hosted application configuration .

The content is encountered as part of the user experience when interacting with an EP such as that provided by EPS . For example content may be accessing when requesting an EP page web application etc. containing a content object not illustrated . The content may include among other things text images sounds videos animations and or the like. While illustrated as integrated with memory in the CPS in alternative implementations the content can be external to the CPS and or the example distributed computing system for example associated with other external content providers not illustrated or can be internal to the CPS for example stored within a content object itself. In some implementations content can contain properties apart from an associated content object.

The hosted application can be any application program module process or other computer software that may execute in a web based environment to perform a specific task functionality for a user. Typically the hosted application is owned and managed by a third party separate from the party managing the EPS and associated out of box applications . In some implementations the hosted application can be executed remotely from a hosting server for example CPS and for resultant data to be transmitted to a recipient such as the EPS and or client . In other implementations the hosted application can be transmitted to another processing environment such as EPS and or the client to be executed and to either directly share data with the processing environment or transmit the data with another associated processing environment or component of the example distributed computing system . In some implementations one or more hosted applications can be executed in parallel within one or among multiple processing environments. The hosted application can be combined with other various applications for example out of box applications associated with the EPS to create mashups. In some applications hosted applications and or out of box applications in the context of a mashup can run on separate processing environments. For example a hosted application can run on the CPS while an out of box application can executed on the EPS as long as the results of the executing applications can be accessed received using at least network .

The hosted application configuration is any data providing identification interface requirements mashup available functionality e.g. search share etc. security cost ratings user comments authorship ownership location hosting information execution requirements identifying graphic e.g. an icon and or other suitable information associated with the hosted application . For example hosted application configuration can include data describing in out ports and transmitted data types formats required applications configurations and security requirements which are used by the wiring manager to set a default mashup configuration when a hosted application is associated with an out of box application using a mashup GUI tool executed by the WOSE and or wiring manager to create a mashup. The hosted application configuration could also be used to decide which hosted application may suite a user s requirements. For example a user could read an associated description generated in a GUI tool not illustrated to allow a user to browse and select a hosted application based on various entered criteria such as business use tax calculation email reading and the like. In some implementations the hosted application configuration can also be accessed by the EPS and or the client for particular needs desires or particular implementations of the example distributed computing system

The content provider manager CPM can be any application program module process or other software that may access transmit execute change delete generate or otherwise manage content hosted applications and or configurations associated with the CPS as well as those associated with separate additional content providers not illustrated the EPS and or a particular client . For example the CPM can manage business process related content and or hosted applications on the CPS in response to a received request response from the EPS and or client . The CPM may be a portal application a business application and or other suitable application consistent with this disclosure. An additional content provider may be for example EPS applications and data and or external services applications hosted on other servers databases RSS feeds document servers web servers streaming servers caching servers or other suitable additional content providers. In some implementations the CPM allows connections to various additional content providers queries the various additional content providers with regards to provided content and enables a user to view add edit and or delete content associated with the CPS .

In some implementations the CPM can use CPM data or other data associated with the example distributed computing system for example content provider data to perform tasks associated with the CPS and or other components of the example distributed computing system . CPM data may include any type of data associated with and or used by the CPM including additional content provider locations addresses storage specifications content lists minimum technical access requirements security access requirements or other suitable data. For example for a database content provider the CPM data may include the server Internet Protocol IP address Uniform Resource Locator URL access permission requirements data download speed specifications etc. Once a particular CPM is launched the EPS and or a client may interactively process a task event or other information associated with the CPS using content provided by the particular CPM .

Additionally a particular CPM may operate in response to and in connection with at least one request received from other CPMs including a CPM associated with another CPS . In some implementations the CPM can be and or include a web browser. In some implementations each CPM can represent a network based application accessed and executed using the network e.g. through the Internet or using at least one cloud based service associated with the CPM . For example a portion of a particular CPM may be a Web service associated with the CPM that is remotely called while another portion of the CPM may be an interface object or agent bundled for processing at an EPS and or a client . Moreover any or all of a particular CPM may be a child or sub module of another software module or enterprise application not illustrated without departing from the scope of this disclosure. Still further portions of the particular CPM may be executed or accessed by a user working directly at the CPS as well as remotely at a corresponding EPS and or client .

The illustrated example distributed computing system also includes a client . The client may be any computing device operable to connect to or communicate with the EPS and or the CPS using the network . In general the client comprises an electronic computer device operable to receive transmit process and store any appropriate data associated with the example distributed computing system

The illustrated client further includes a client application . The client application is any type of application that allows the client to request view edit and or delete content on the client as well as to interact with the client . In some implementations the client application can be and or include a web browser. In some implementations the client application can use parameters metadata and other information received at launch to access a particular set of data applications etc. from the EPS . Once a particular client application is launched a user may interactively process a task event or other information associated with the EPS including executing the web operating system and associated functionality and viewing editing rating etc. web based mashups. Further although illustrated as a single client application the client application may be implemented as multiple client applications in the client .

The illustrated client is intended to encompass any computing device such as a desktop computer laptop notebook computer wireless data port smart phone personal data assistant PDA tablet computing device one or more processors within these devices or any other suitable processing device. For example the client may comprise a computer that includes a camera an input device such as a keypad touch screen or other device that can accept user information and an output device that conveys information associated with the operation of the EPS or the client itself including digital data visual information or a GUI as shown with respect to the client .

The illustrated client further includes an interface a processor and a memory . The interface is used by the client for communicating with other systems in a distributed environment including within the example distributed computing system connected to the network for example the EPS and or the CPS as well as other systems not illustrated communicably coupled to the network . The interface may also be consistent with the above described interface of the EPS and or interface of the CPS or other interfaces within the example distributed computing system . The processor may be consistent with the above described processor of the EPS and or processor of the CPS or other processors within the example distributed computing system . Specifically the processor executes instructions and manipulates data to perform the operations of the client including the functionality required to send requests to the EPS and or CPS and to receive and process respective responses. The memory may be consistent with the above described memory of the EPS and or memory of the CPS or other memories within the example distributed computing system but storing objects and or data associated with the purposes of the client . Memory may also be used by the EPS CPS and or other component not illustrated of the example distributed computing system to store any type of data for the purposes of the client or of the storing component.

Further the illustrated client includes a GUI . The GUI interfaces with at least a portion of the example distributed computing system for any suitable purpose including generating a visual representation in a web browser. The GUI may be used to view and navigate various web pages located both internally and externally to the EPS and or CPS as well as to interact with a particular WOS and all provided data and or functions. In some implementations the client application may act as a GUI interface for the EPS and or the CPS . For example the WOS generated and managed by the WOSE mashup tools managed by the wiring manager the CPM and or other components of the example distributed computing system . In some implementations the EPS CPS and or other components of the example distributed computing system can transmit executable components to the client application for analysis and execution on the client for example out of box hosted application code and or provide content to the client application for display for example the results of a hosted application executing on the CPS and or an out of box application mashup executing on the EPS .

There may be any number of clients associated with or external to the example distributed computing system . For example while the illustrated example distributed computing system includes one client communicably coupled to the EPS using network alternative implementations of the example distributed computing system may include any number of clients suitable to the purposes of the example distributed computing system . Additionally there may also be one or more additional clients external to the illustrated portion of the example distributed computing system that are capable of interacting with the example distributed computing system using the network . Further the term client and user may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover while the client is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers.

The available applications for a specific EP user can be dependent upon permission level role group etc. In some implementations the WOSE can access user configuration data not illustrated stored the client and or the EPS to determine what applications are available to the EP user what default configuration they are in at login whether any custom configuration to the WOS needs to be performed and the like. The WOSE can also check the availability of both out of box applications and or hosted applications indicated to be displayed on the WOS. For example if a hosted application is not locally hosted on the EPS the WOSE can communicate with the CPS to determine availability of the hosted application the hosted application configuration etc. In some implementations application versions may have changed and the EP user can be prompted by the WOSE as to whether they wish to update the applications to a current version.

WOS is presented in this example in a native browser tab to the user as the interface to interact with the EP. In some implementations the EP user has GUI options not illustrated to transition between a traditional web page based EP portal GUI design and the WOS. Note that there are multiple home pages available to the EP user as indicated by page count indicator that may be accessed by swiping the screen using a digit stylus GUI pointing device such as a mouse etc. Available web applications for example CSN Graph and Mail are displayed on the home pages and can be activated by selecting the appropriate icon to start the application. In some implementations not illustrated the icon may indicated graphically whether it is a hosted application or an out of box application . For example the icon may have a small indicator in an upper corner be a different color be surrounded by a particular border etc. The home page also contains a search button but also may contain other non illustrated functional buttons and GUI elements consistent with this disclosure.

In some implementations the WOS may emulate the native operating system GUI of the host client device a non native operating system GUI or a combination to provide for similar functionality of the host device or any other device for flexibility and familiarity. For example the WOS could emulate the ANDROID operating system GUI as well as incorporating various features found only in the APPLE IOS operating system GUI to create a combination WOS experience for the EP user. Which WOS configuration can be determined by analyzing user configuration data not illustrated stored the client and or the EPS administrator settings querying the EP user and the like.

In some implementations mashups may be made available for the EP user s personal use and or other EP users. For example an EP user may wish that a created mashup is only available for their use and can select an option not illustrated on the layout manager to indicate private access. In another example the EP user for example an administrator or group leader can indicate that a created mashup is to be available to specific other individuals their group and or all EP users.

At the EP receives EP user login credentials from a client device. The login credentials are analyzed by the EPS. In some implementations specific user configuration data associated with the EP user is accessed for web operating system WOS configuration reasons. From method proceeds to .

At the EPS analyzes the user configuration to determine the EP user s desired GUI for the enterprise portal to display on the client device. From method proceeds to .

At a determination is made whether to present the WOS GUI. If at it is determined to present the WOS GUI method proceeds to . If at it is determined not to present the WOS GUI method proceeds to . After method stops.

At the WOSE determines a WOS configuration to display to the EP user. In some implementations the WOSE can access user configuration data mirror as closely as possible the client device native operating system GUI follow administrative settings historical data reflecting prior EP user choices WOSE determinations and the like to perform the determination. From method proceeds to .

At the WOSE determines the availability of an application for the determined WOS GUI configuration. In some implementations the wiring manager and or other suitable component of the example distributed computing system can perform this determination. Some applications may not be available for certain WOS GUI configurations or may run with limited functionality under particular WOS GUI configurations. From method proceeds to .

At a determination is made whether the application is available. If at it is determined that the application is available method proceeds to . If at it is determined that the application is not available method proceeds to .

At the WOSE displays the application s icon or other graphical representation in the WOS GUI for EP user interaction. From method proceeds to .

At it is determined whether the application has an available update. The WOSE wiring manager and or other suitable component of the example distributed computing system can communicate with the CPS and or analyze appropriate data on the EPS to make the determination. From method proceeds to .

At a determination is made whether the application is to be updated. In some implementations the EP user can be presented with a dialog or other indication that an update is available for the application. If at it is determined that the application is to be updated method proceeds to . If at it is determined that the application is not to be updated method proceeds to .

At the application is updated. In some implementations the updated application code is downloaded and installed from the CPS and or the EPS. From method proceeds to .

At the WOSE and or the wiring manager monitors GUI interactions associated with the WOS. From method proceeds to .

At the WOSE wiring manager and or other suitable component of the example distributed computing system performs appropriate functionality based upon EP user GUI interactions. For example functionality can include searching sharing drag and drop of application icons deletion of application icons rearrangement of application icons indicating to start a mashup process configure mashup settings view available mashups edit available mashups and other suitable functions consistent with this disclosure. From method proceeds back to .

Although the disclosure describes the example distributed computing system in terms of an enterprise portal those skilled in the art will appreciate the applicability of the disclosure to other suitable systems without departing from the scope of the disclosure. One possible example includes a non enterprise portal software development system or other system. The disclosure is not meant to limit the applicability of the disclosure in any way to portals or similar content aggregation and or content delivery systems.

While the disclosure discusses applications web applications the scope of the disclosure is not limited to applications web applications. As will be appreciated by those of skill in the art and consistent with the scope of this disclosure other entities for example hardware entities can be subjected to wiring mashup operations and presented in a networked relationship form.

While illustrate and describe various example GUIs these example GUIs are meant only as representative examples of many possible implementations and are not meant to limit in any way GUI functionality and implementations for providing a web based operating system framework for client devices. Those of skill in the art will appreciate the multitude of possible implementations that may be used to accomplish the described functionality.

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The term data processing apparatus refers to data processing hardware and encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU a FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example LINUX UNIX WINDOWS MAC OS ANDROID IOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a CPU a FPGA or an ASIC.

Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors both or any other kind of CPU. Generally a CPU will receive instructions and data from a read only memory ROM or a random access memory RAM or both. The essential elements of a computer are a CPU for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a global positioning system GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM DVD R DVD RAM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse trackball or trackpad by which the user can provide input to the computer. Input may also be provided to the computer using a touchscreen such as a tablet computer surface with pressure sensitivity a multi touch screen using capacitive or electric sensing or other type of touchscreen. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of wireline and or wireless digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a radio access network RAN a metropolitan area network MAN a wide area network WAN Worldwide Interoperability for Microwave Access WIMAX a wireless local area network WLAN using for example 802.11a b g n and or 802.20 all or a portion of the Internet and or any other communication system or systems at one or more locations. The network may communicate with for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and or other suitable information between network addresses.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system modules and components in the implementations described above should not be understood as requiring such separation in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. For example the actions recited in the claims can be performed in a different order and still achieve desirable results.

Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

