---

title: Detecting auto-start malware by checking its aggressive load point behaviors
abstract: Program behaviors concerning load points are monitored, and a specific program attempting to actively maintain a previously set value of a specific load point is detected. In response, the specific program is adjudicated to be malware, and one or more actions are performed to protect the computer. The monitored behavior can be write operations targeting load points. In this scenario, the behavior indicating that a program is malware can comprise performing a requisite number of write operations to a load point within a requisite time period. The monitored behavior can also be altering load point values, and monitoring the results. The altering of load points can comprise removing values specifying programs to run, and/or changing names of programs. Detecting that a specific altered load point value has been automatically reset within a requisite time period to run the specific program upon start-up indicates that the program is malware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09330260&OS=09330260&RS=09330260
owner: 
number: 09330260
owner_city: 
owner_country: 
publication_date: 20130725
---
This disclosure pertains generally to computer security and more specifically to detecting auto start malware based on its aggressive use of load point behaviors.

Operating systems typically contain a mechanism for specifying applications to be loaded when the operating system starts up. For example Windows has specific locations in the registry that used to load applications such as the Run sub key in the HKEY CURRENT USER key and the HKEY LOCAL MACHINE key. Such registry keys are known as load points. Values can be written to load points that specify files to be loaded and run during the operating system boot process. There are many legitimate reasons for an application to be loaded when the operating system starts up and these locations in Windows are used by many legitimate programs for benign purposes.

In addition to their legitimate use load points can be used as attack vectors for malware such as viruses Trojan horses worms and spyware. Because the program specified by a load point is loaded each time the operating system starts up introducing malware into computer through a hacked load point allows the malware to survive a reboot. This makes load points an attractive target for propagators of malware.

Some anti malware programs check the files that launch from registry load points to detect whether they comprise known malware or have suspicious characteristics such as a random name. However new malware or malware that is not distributed by a suspicious source can go undetected by such checks.

Malware is detected on a computer based on program behaviors targeting load points of the operating system. The load points specify programs to be run upon start up of the operating system e.g. when the operating system boots up or when a specific user logs in . Program behaviors concerning load points are monitored and a specific program attempting to actively maintain a previously set value of a specific load point is detected. Responsive to this detected behavior the specific program is adjudicated to be malware. One or more actions are performed to protect the computer from the malware such as removing the malware from the computer modifying the load point so that it no longer specifies to run the malware and or sending information concerning the malware to a central security server.

The behavior monitoring can take the form of monitoring write operations targeting load points. In this scenario the behavior indicating that the specific program is malware can comprise the program performing a requisite number of write operations to a specific load point within a requisite time period. More specifically the program can be detected repeatedly writing a specific file name to the specific load point wherein the file name specifies the program to run upon start up of the operating system. The requisite time period can be a predefined amount of time e.g. five seconds five minutes an hour or until the next re start of the operating system.

Instead or in addition the behavior monitoring can take the form of altering values of load points and monitoring the results. For example the altering of load points can comprise removing values specifying programs to run upon operating system start up and or changing names of programs in load point entries. Detecting that a specific altered load point value has been automatically reset within a requisite time period to run the specific program upon start up indicates that the specific program is malware. This can comprise detecting that a specific removed value has been automatically written back to the load point or that a specific changed program name has been automatically set back to the name of the specific program in the load point. In some embodiments only load points specifying to run programs suspected of comprising malware are altered. The requisite time period can comprise a predefined amount of time e.g. a second a minute five minutes or until the next re start.

Which load points to monitor e.g. all or only a specific subset can vary between embodiments as desired. Load points can comprise any operating system component specifying programs to run on start up. Examples include specific keys in the registry e.g. under Windows or specific configuration files e.g. under UNIX .

The features and advantages described in this summary and in the following detailed description are not all inclusive and particularly many additional features and advantages will be apparent to one of ordinary skill in the relevant art in view of the drawings specification and claims hereof. Moreover it should be noted that the language used in the specification has been principally selected for readability and instructional purposes and may not have been selected to delineate or circumscribe the inventive subject matter resort to the claims being necessary to determine such inventive subject matter.

The Figures depict various embodiments for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

Clients and servers can be implemented using computer systems such as the one illustrated in and described below. The clients and servers are communicatively coupled to a network for example via a network interface or modem as described below in conjunction with . Clients are able to access applications and or data on servers using for example a web browser or other client software not shown . Clients can be in the form of desktop laptop computers or mobile computing devices comprising portable computer systems capable of connecting to a network and running applications. Such mobile computing devices are sometimes referred to as smartphones although many mobile phones not so designated also have these capabilities. Tablet computers are another example of mobile computing devices.

Although illustrates three clients and two servers as an example in practice many more or fewer clients and or servers can be deployed. In one embodiment the network is in the form of the Internet. Other networks or network based environments can be used in other embodiments.

Other components not illustrated may be connected in a similar manner e.g. document scanners digital cameras printers etc. . Conversely all of the components illustrated in need not be present e.g. smartphones and tablets typically do not have optical disk drives external keyboards or external pointing devices although various external components can be coupled to mobile computing devices via e.g. USB receptacles . The various components can be interconnected in different ways from that shown in .

The bus allows data communication between the processor and system memory which as noted above may include ROM and or flash memory as well as RAM. The RAM is typically the main memory into which the operating system and application programs are loaded. The ROM and or flash memory can contain among other code the Basic Input Output system BIOS which controls certain basic hardware operations. Application programs can be stored on a local computer readable medium e.g. hard disk optical disk and loaded into system memory and executed by the processor . Application programs can also be loaded into system memory from a remote location i.e. a remotely located computer system for example via the network interface or modem . In the load point malware detection system is illustrated as residing in system memory . The workings of the load point malware detection system are explained in greater detail below in conjunction with .

The storage interface is coupled to one or more hard disks and or other standard storage media . The hard disk s may be a part of computer system or may be physically separate and accessed through other interface systems.

The network interface and or modem can be directly or indirectly communicatively coupled to a network such as the Internet. Such coupling can be wired or wireless.

As illustrated in a load point malware detection system runs on a computer e.g. a client and detects malware based on its aggressive behavior directed towards a load point in the operating system . Although illustrates the load points as being in the form of specific keys in the registry of the operating system e.g. Windows in other embodiments the load points are in other formats e.g. under different operating systems as described in detail below.

As noted above some malware infects computers by setting the value of a load point to run a file containing malware when the operating system starts up. Because it is an important goal of such malware to remain present on an infected computer across reboots the malware often aggressively protects its hacked load point . To do so the malware prevents the user and other programs from removing or modifying the value of the infected load point . By actively detecting such aggressive protection of the hacked value of a load point the load point malware detection system is able to identify malware that has infected a computer through a load point based attack even where the malware evades conventional load point based detection techniques that rely on factors such as the examination of the values of the load points themselves i.e. the file names of the programs the load points have been set to run when the operating system starts up .

A behavior monitoring module of the load point malware detection system performs this functionality by monitoring the behavior of programs concerning given load points and detecting load point based behavior that indicates that the program is malware . For example in one embodiment the behavior monitoring module monitors write operations targeting specific load points . To perform this functionality a write operation monitoring module of the load point malware detection system monitors writes to specific load points being monitored and is thus able to detect repeated write operations to a particular load point . This is one way to detect malware that preserves itself across reboots by repeatedly writing the name of the malicious file to be run at start up to the load point it uses as an attack vector the Zeus Trojan horse is an example of malware that works this way . By writing the name of a file containing malware to a given load point over and over the malware is taking a step to ensure that the load point remains infected even if the file name is found to be suspicious and removed from the load point . If the malware writes the file name back to the load point repeatedly scanning the registry and removing the suspected file name from the given load point is only effective until the malware writes the name back again. Even if the registry is scanned and cleaned again at a later time a frequent aggressive rewriting of the value to the load point e.g. once a second once a minute once every five minutes is likely to occur more frequently than even relatively frequent anti malware scans e.g. once an hour once a day and thus the load point is likely to be infected with the malware at boot time.

The write operation monitoring module monitors write operations targeting the load points being monitored and detects any such suspicious repeated writes to a specific one of them. The level of repetition of writing to a given load point that warrants flagging the program that does the writing as suspicious is a variable design parameter. The write operation monitoring module uses different values for this parameter in different embodiments and or adjusts this value up and or down as desired. On the more sensitive end of the detection spectrum the write operation monitoring module can flag more than a single write to a specific load point between reboots by a single program . In other words as few as two writes of the same value to a given load point between reboots can be considered suspicious. In other embodiments only a larger number of rewrites between successive reboots is considered suspicious e.g. 3 5 10 30 . In some embodiments in addition to or instead of flagging a requisite number of writes of the same value to a specific load point between reboots the write operation monitoring module flags a given number e.g. 3 10 30 of writes to a specific load point within a given amount of time e.g. 5 seconds 5 minutes an hour as suspicious. The specific number of writes and the amount of time are variable design parameters and different values can be used in different embodiments. In some embodiments multiple writes made by a combination of different programs can be flagged as suspicious because the malware could change or otherwise hide its name over time or use more than one executable image to control the infected load point . Multiple repeated writes even across multiple reboots of the operating system can also be flagged as suspicious in some embodiments. In some embodiments the multiple writes made to a specific load point need not all be of the same exact value to be flagged because the malware can be stored in multiple files with different names or the name of the malicious file can be changed over time. The exact form of the content being written to a load point also varies under different operating systems . For example under current version of Windows the data value used for a key is in the form of a command line entry. To register a program to run at start up an entry is written to the given load point in the form description string commandline. Multiple entries can be written under a key and thus multiple programs can be registered under a single load point .

The write operation monitoring module can detect writes made to the load points by hooking the API Application Programming Interface for affecting changes to the specific components used by the given operating system as load points . For example under current versions of Windows the write operation monitoring module can hook the Windows API for changing the values of the registry keys . Under other operating systems other calls can be intercepted non Windows based embodiments are discussed in greater detail below . Either way by hooking the appropriate system calls or functionalities that are capable of setting and or changing the values of the components that specify to the given operating system which programs to load at start up the write operation monitoring module can detect individual write operations targeting a given load point determine the program that is performing the write operation and identify the content that the program is writing to the load point . The write operation monitoring module can thus track write operations made by different programs targeting specific load points with various content over time and identify programs engaging in behavior considered suspicious according to the given suspiciousness parameters used in given embodiments. Responsive to a given program engaging in a requisite level of suspicious behavior a program adjudicating module of the load point malware detection system adjudicates the program as being malware . The processing of programs adjudicated to be malware is described below.

In other embodiments rather than monitoring write operations the behavior monitoring module alters the values of load points and monitors the results. In one such embodiment a load point entry removing module of the load point malware detection system attempts to remove specific values from load points being monitored and determines whether a removed entry is added back automatically. More specifically for a given load point being monitored e.g. the HKCU Software Microsoft Windows CurrentVersion Run key in the Windows registry the load point entry removing module removes one or more entries specifying to run a given program . To remove an entry from a load point the load point entry removing module can utilize the API for affecting changes to the specific components used as load points by the given operating system . For example under current versions of Windows the load point entry removing module can call the Windows API for changing the values of the registry keys .

Once a given entry has been removed from a specific load point the load point is monitored to determine whether the entry is written back to the load point within a requisite amount of time. If so the load point entry removing module flags the program that is the target of the entry i.e. the program that the entry specifies to load as being suspicious. This is the case because the program has engaged in the suspicious behavior of automatically rewriting its entry to a load point after the entry has been removed. This indicates that the program is itself monitoring the load point and has detected that its entry has been removed or in any case that the program is repeatedly writing its entry to the load point . The requisite amount of time during which to monitor the load point and flag a write back of the entry as suspicious can vary between embodiments and scenarios as desired ranging for example from within a second to within ten minutes to until the system is re started. Which entries to remove is also a variable design parameter. In some embodiments the load point entry removing module only removes entries that are suspected of being malware for example because of their source reputation behavior or other factors. What specific factor s result in a program being suspected of maliciousness vary between embodiments. Regardless whether or not the suspected program actually comprises malware can then confirmed by its behavior after the removal of its entry from the load point . In other embodiments any entry not known to be benign e.g. entries of unknown status as well as those specifically suspected is removed from a monitored load point to determine whether the entry is written back and thus whether the program is malware .

In another embodiment rather than attempting to remove entries from load points a load point program renaming module of the load point malware detection system attempts to rename the programs specified in load point entries of interest and the load point is then monitored to determine whether the program name in the entry is automatically set back within a requisite time frame. As with the entry removal technique described above which program entries are renamed and the amount of time in which an automatic re set is flagged as suspicious can vary between embodiments. Changing the program name in a load point entry is another way of perturbing the load point and determining whether its value is automatically reset which is a form of suspicious program behavior directed at a load point .

Responsive to a load point entry being written back or renamed within the requisite time period the program adjudicating module adjudicates the program that is specified by the load point as being malware . Programs adjudicated to be malware are processed as described below. Where the load point entry is not written back or renamed within the requisite time period the program adjudicating module adjudicates the program to be benign or of unknown status . In this case the corresponding removed load point entry is restored or the corresponding changed program name is changed back to its original name.

It is to be understood that which specific load points to monitor can vary between embodiments. In current versions of Windows examples of registry keys used as load points include the following subkeys under both HKEY CURRENT USER and HKEY LOCAL MACHINE SOFTWARE Microsoft Windows CurrentVersion Run SOFTWARE Microsoft Windows CurrentVersion RunOnce SOFTWARE Microsoft Windows CurrentVersion RunServices SOFTWARE Microsoft Windows CurrentVersion RunServicesOnce SOFTWARE Microsoft Windows CurrentVersion Policies Explorer Run. Other examples include HKEY CLASSES ROOT comfile shell open command HKEY CLASSES ROOT piffile shell open command HKEY CLASSES ROOT exefile shell open command and HKEY CLASSES ROOT txtfile shell open command. Some or all of these load points can be monitored. Note that these examples are not exhaustive. Additionally the names and configurations of these keys differ between versions of Windows and are subject to change in future versions thereof. Any registry key that can be used to automatically load a program as part of the operating system start up process can be monitored in different embodiments. It is to be further understood that the various techniques described above for detecting suspicious program behavior targeting load points monitoring writes removing entries changing program names can be used individually or in any combination as desired.

In different embodiments different actions can be taken to protect the computer in response to adjudicating that a given program is malware . In one embodiment the program is removed from the computer and the load point that was being used as its attack vector is cleaned in order to remove the entry used to load the malicious program so that the load point no longer specifies to load the malware . In addition or instead the adjudication and optionally additional information concerning the program can be sent to a central security server which receives reports from multiple clients deployed at different locations and utilizes this information to take future actions to protect against the malware . In one embodiment instead of explicitly adjudicating the program to be malware in response to a given level of suspicious activity concerning its load point based behavior this information is used as one of a plurality of factors in categorizing the suspiciousness level of the program and the final adjudication is made in response to multiple factors e.g. by a central server level anti malware program not illustrated .

Note that although the above based discussion is centered on embodiments in which the load points are in the form of Windows registry keys the above described functionality is applied to load points in different formats under other operating systems in other embodiments. For example in UNIX and UNIX like operating systems such as Linux the load point malware detection system monitors the configuration files that specify which programs are loaded on start up such as the system wide configuration files stored in e.g. etc and its subdirectories or in usr local etc as well as user specific configuration files typically stored in hidden files and directories that start with a period in the given user s home directory. The load point malware detection system monitors these files to detect the above described behaviors e.g. repeated writes fast rewriting of removed entries fast resetting of changed program names . Under other operating systems other system level components that specify programs to be loaded on start up are monitored e.g. the Object Data Manager ODM under AIX property list files under MAC OS etc. . Additionally some versions of Windows can specify programs to run at start up using mechanisms other than registry keys e.g. INI files XML based configuration files etc. and in some embodiments these other mechanisms are monitored accordingly.

Note also that in addition to loading programs when an operating system is initially booted load points can also be used to load programs when a specific user logs in to the operating system and the operating system executes a start up process for that user. The load point malware detection system can execute the above described functionality targeting either or both start up scenario in different embodiments.

As will be understood by those familiar with the art the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Likewise the particular naming and division of the portions modules agents managers components functions procedures actions layers features attributes methodologies data structures and other aspects are not mandatory or significant and the mechanisms that implement the invention or its features may have different names divisions and or formats. The foregoing description for purpose of explanation has been described with reference to specific embodiments. However the illustrative discussions above are not intended to be exhaustive or limiting to the precise forms disclosed. Many modifications and variations are possible in view of the above teachings. The embodiments were chosen and described in order to best explain relevant principles and their practical applications to thereby enable others skilled in the art to best utilize various embodiments with or without various modifications as may be suited to the particular use contemplated.

