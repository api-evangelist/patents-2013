---

title: System and method for querying hybrid multi data sources
abstract: A system and method of querying hybrid multi data sources includes receiving a query at a hybrid multi data source running on a computer server, creating a list of data sources, filtering the list of data sources based on data source hints included in the query, filtering the list of data sources based on data source rules, forming one or more query plans for processing the query, evaluating each of the query plans, selecting a first query plan from the query plans based on results of the evaluating, and performing the first query plan. Each query plan corresponds to a data source in the filtered list of data sources. In some examples, the first query plan has a lowest cost of each of the query plans. In some examples, the first query plan is based on probabilities associated with the cost of each of the query plans.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09372891&OS=09372891&RS=09372891
owner: RED HAT, INC.
number: 09372891
owner_city: Raleigh
owner_country: US
publication_date: 20131213
---
The present disclosure relates generally to computing systems and more particularly to querying of hybrid multi data sources.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option is a computing system. Computing systems may vary in complexity from a single processor operating in relative isolation to large networks of interconnected processors. The interconnected processors may be in close proximity to each other or separated by great distances both physically and as distance is measured in computer networking terms. The interconnected processors may also work together in a closely cooperative fashion or in a loose weakly coupled fashion. Because technology and processing needs and requirements may vary between different applications the structure and arrangement of the computing system may vary significantly between two different computing systems. The flexibility in computing systems allows them to be configured for both specific users specific uses or for more general purposes. Computing system may also include a variety of hardware and software components that may be configured to process store and communicate information based on the needs of the users and the applications.

Additionally some examples of computing systems include non transient tangible machine readable media that include executable code that when run by one or more processors may cause the one or more processors to perform the steps of methods described herein. Some common forms of machine readable media include for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM any other memory chip or cartridge and or any other medium from which a processor or computer is adapted to read.

Computers processors and software systems often share information and provide computing services for each other. In order to do so a server or some other computing system may provide an interface through which service requests are made by the other computing devices or clients. In these service oriented architectures SOAs the clients generally make a service request by sending a request message to the server hosting a requested service and or application using for example a networking protocol. The server receives the message activates the requested service or application and returns a response message with the result. For example a very basic form of services is demonstrated by a request for a web page. A client such as a web browser sends a Hypertext Transport Protocol HTTP request to a web server which receives the HTTP request and generates a response containing the requested web page that is then returned to the web browser. As many services and or applications execute they access one or more data sources that store data that is relevant to the requested services. For example these data sources may include relational databases nosql databases flat files and or the like. Each of the data sources typically supports its own query mechanism and or query language and has different kinds of queries that it supports well and other kinds of queries that it does not support well. For the service or application to make the best use of this hybrid collection of multiple data sources it has to be aware of each of the query mechanisms query languages advantages and or disadvantages of each of the data sources. This is generally not practical as the data sources that are available may change over time. In addition each vendor often supports variations in query mechanisms and or query languages.

Accordingly it would be desirable to provide systems and methods to make it easier for services and or applications to make an intelligent selection from multiple available data sources and then to direct a query to the selected data source.

According to one example a method of processing a data source query includes receiving the data source query at a hybrid multi data source running on a computer server creating a list of data sources filtering the list of data sources based on data source hints included in the data source query filtering the list of data sources based on data source rules forming one or more query plans for processing the data source query evaluating each of the query plans selecting a first query plan from the query plans based on results of the evaluating and performing the first query plan. Each query plan corresponds to a data source in the filtered list of data sources.

According to another example a hybrid multi data source hosted in an application server includes a hint resolver a rule evaluator coupled to the hint resolver and a federated query engine coupled to the hint resolver and the rule evaluator. The hybrid multi data source is configured to receive a query and create a list of data sources coupled to the hybrid multi data source. The hint resolver is configured to receive the list of data sources from the hybrid multi data source and filter the list of data sources based on hints included in the query. The rule evaluator is configured to receive the list of data sources from the hybrid multi data source or the hint resolver receive the query from the hybrid multi data source and filter the list of data sources based on data source rules. The federated query engine is configured to receive the filtered list of data sources from the hint resolver or the rule evaluator receive the query from the hybrid multi data source form one or more query plans for processing the query evaluate each of the query plans to determine a respective estimated cost to perform each of the query plans select a query plan from the query plans based on each respective estimated cost and perform the selected query plan. Each query plan corresponds to a data source in the filtered list of data sources.

According to yet another example a non transitory machine readable medium comprising a first plurality of machine readable instructions which when executed by one or more processors associated with an application server are adapted to cause the one or more processors to perform a method. The method includes receiving a data query at a hybrid multi data source running on the application server creating a list of data sources coupled to the hybrid multi data source filtering the list of data sources based on source hints included in the data query filtering the list of data sources based on source rules forming one or more query plans for processing the data query evaluating each of the query plans to determine a respective estimated query complexity for each of the query plans selecting a query plan from the query plans based on each respective estimated query complexity and performing the selected query plan. Each query plan corresponds to a data source in the filtered list of data sources.

In the following description specific details are set forth describing some embodiments consistent with the present disclosure. It will be apparent however to one skilled in the art that some embodiments may be practiced without some or all of these specific details. The specific embodiments disclosed herein are meant to be illustrative but not limiting. One skilled in the art may realize other elements that although not specifically described here are within the scope and the spirit of this disclosure. In addition to avoid unnecessary repetition one or more features shown and described in association with one embodiment may be incorporated into other embodiments unless specifically described otherwise or if the one or more features would make an embodiment non functional.

Memory may be used to store an application server . Application server includes one or more interfaces for receiving service requests from the one or more clients . Each of the service requests is then directed to at least one of the one or more services or applications being hosted by application server . Numerous mechanisms for directing the service requests to the respective application may be used including providing a uniform resource locator URL for the application in the respective service request providing an application name of the application in the respective service request and or the like. The service requests may also be made using protocols such as remote procedure call web services and or the like.

As each of the applications handles its respective service requests each application is are often called upon to access data in one or more data sources. This typically includes identifying a data source and forming a query to access the data source and forwarding the query to a data source driver . Data source driver then accesses a corresponding data source where the query is handled. When processing of the query completes a response is typically generated and returned to application through data source driver . In some examples each application may forward the query to data source driver using an application programming interface API call and or the like. In some examples data source driver may be an open database connectivity ODBC driver a java database connectivity JDBC driver and or the like. In some examples data source may be a relational database a nosql database a flat file an eXtensible Markup Language XML file a representational state transfer REST web service a Simple Object Access Protocol SOAP web service and or the like. In some examples the query may retrieve data from data source and or write data to data source .

As discussed above and further emphasized here is merely an example which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations alternatives and modifications. In some examples other architectures may be used with application server . In some examples application server may be hosted in one or more virtual machines and or Java virtual machines running on server . In some examples server and or memory may also be used to host more than one application server. In some examples application server may include more than one data source driver for accessing additional data sources . In some examples each of the data sources may be of different types. In some examples one or more of the data sources may be hosted in server coupled to server using connectors and or cabling and or coupled to server over a network such as network .

The limitations of the architecture and approach of are generally exposed when each of the applications has access to multiple data sources especially when each of the data sources is of a different type. Other than providing a somewhat abstract interface between each application and each data source each of the data source drivers generally does little to mask differences in the capabilities of each of the data sources . Because each data source type typically supports its own query mechanism and or query language which may vary from vendor to vendor even when the data sources are of the same general type. For example the structured query language SQL used to access an Oracle relational database may vary from and support different features than the SQL used to access other relational databases such as a PostgreSQL relational database. In addition each of the data sources may support different kinds of queries better than others. In order for each application to make the best use of the data sources it has to be aware of each of the query mechanisms query languages advantages and or disadvantages of each of the data sources . This is generally not practical as the data sources that are available may change over time. Further each application developer may not have the resources to provide such sophisticated data source querying capabilities in each of the applications .

One potential solution to this problem is to provide a single access point for each of the data sources available to the applications. Rather than directing each data source query to a separate data source driver each of the applications forwards the query to a hybrid multi data source that intelligently selects from the available data sources adapts the query to the selected data source and accesses the selected data source through a corresponding data source driver.

Upon receiving a data source query hybrid multi data source examines the data source query to see if the application has included any hints regarding a data source to use to handle the data source query. In some examples the hints may be compatible with the SOURCE TYPE SQL extension that allows a query author to suggest one or more data source types to use to process a query. When hints are included in the data source query they are examined by a hint resolver . Hint resolver determines which types of data sources are suggested in the query and compares them to a list of available data sources. When there is overlap between the available data sources and the hints the list of available data sources is filtered by the hints to remove any data sources that are of a type not included in the hints. When there are no hints included in the query or the hints do not overlap the types of the available data sources the data source query is then passed to a rule engine for further processing. When the hints are used to filter the list of available data sources rule engine is skipped and the data source query and the filtered list of available data sources are forwarded to a federated query engine .

Rule engine examines the data source query to determine the types of query operations requested in the data source query. In some examples the types of query operations may correspond to SQL query operations such as JOIN ORDER BY SORT BY LIMIT WHERE and or the like. Using a set of data source filtering rules and the determined types of query operations rule engine filters the list of available data sources by type. As an example a data source filtering rule may indicate that a data source query containing a JOIN operation may be preferentially handled by a relational database rather than some other type of data source. As with the hints the data source filtering rules are applied when there is an overlap between the list of available data sources and the recommendations of the data source filtering rules. In some examples the data source filtering rules may be provided by an administrator an operator and or a user of the application server and hybrid multi data source . After filtering by rule engine the data source query and the filtered list of available data sources are forwarded to federated query engine .

In some examples federated query engine may be an extended version of a federated query engine such as the JBoss Teiid data virtualization engine from Red Hat Inc. the Oracle Data Service Integrator ODSI the InfoSphere Platform from IBM and or the like.

A typical federated query engine supports a uniform interface and a query language that may be used with any type of data source. By providing a uniform interface and a uniform query language the federated query engine allows the data source query to be processed cooperatively between the federated query engine and a data source. The federated query engine is able to do this by understanding the capabilities specific query languages and query mechanisms of each type of data source that is available to it. For example when the data source query includes a SORT BY clause and the selected data source does not support sorting e.g. when the selected data source is a flat file the federated query engine may use an abbreviated query to retrieve data from the data source and then sort the retrieved data itself. In some examples the federated query engine creates a query plan based on the data source query and the capabilities of the selected data source. The features of the data source query that the selected data source cannot perform are handled by the federated query engine after retrieving data from the selected data source using one or more abbreviated queries.

However in the case of the hybrid multi data source federated query engine includes the capabilities of a typical federated query engine and is also able to intelligently select a data source from the filtered list of available data sources provided by hint resolver and or rule engine . Federated query engine does this by creating a query plan for each of the data sources in the filtered list of available data sources evaluates each of the query plans using a weighted sum approach where each operation performed by federated query engine are assigned a weight or cost based on its complexity and or estimated time to perform and each type of data source is assigned a weight based on an estimated cost to access the respective data source based on an abbreviated query. In some examples the data source associated with the lowest cost query plan becomes the selected data source. In some examples federated query engine may also provide load balancing among the filtered list of available data sources by selecting the selected data source probabilistically based on the cost of each query plan. In some examples federated query engine may also provide failover support by switching to a secondary choice for the selected data source when the selected data source is not able to handle the abbreviated query.

Once a data source is selected the data source query is processed by federated query engine . Each of the abbreviated queries in the query plan associated with the selected data source is forwarded to a respective one of a plurality of data source drivers . The respective data source driver is then used to access a corresponding one of a plurality of data sources . Federated query engine is then used to complete any additional query processing in the query plan. Once processing of the query plan is complete the result of the query is then returned to the respective application that sent the data source query to hybrid multi data source . In some examples each of data sources may be a relational database a nosql database a flat file an XML file a REST web service a SOAP web service and or the like.

In some examples because federated query engine may potentially select from any of the data sources each of the data sources should contain copies of the same data. This ensures that no matter the data source selected the results of the data source query are going to be the same. In some examples federated query engine may direct any data source query that alters data e.g. a DELETE INSERT ALTER and or UPDATE query to each of the data sources to maintain the same data in each of the data sources . In some examples other mechanisms may be used to maintain data consistency across data sources .

At a process a query is received. The query may be received by a hybrid multi data source such as hybrid multi data source from a service and or an application. For example the service and or the application may use an API call or similar mechanism to send the query to the hybrid multi data source.

At a process a list of available data sources is created. Using drivers associated with each of the data sources that may be accessed and used by the hybrid multi data source the hybrid multi data source determines which of the data sources is currently available for handling queries. In the examples of hybrid multi data source may use one or more API calls of each of the data source drivers to determine which of the data sources is available to handle queries and is added to the list of available data sources. The list of available data sources may also include type information for each of the available data sources.

At a process it is determined whether the query includes any applicable hints. The query received during process is examined to determine whether it includes any data source hints. In some examples the hints may be compatible with the SOURCE TYPE SQL extension that allows a query author to suggest one or more data source types to use to process a query. In some examples the query may include the SOURCE TYPE keyword followed by a list of data source types such as relational nosql file flat file xml and or the like. When hints are included in the data source query the hints are examined to determine whether there is any overlap with the data source types in the list of available data sources. When there is overlap between the data source types in the list of available data sources and the hints the list of available data sources is filtered by the hints using a process . When there are no hints included in the query or the hints do not overlap the types of data sources in the list of available data sources the list of available data sources is filtered using data source rules using a process . In some examples process may be performed using hint resolver .

At the process the list of available data sources is filtered using the hints. The hints determined during process are used to filter the list of available data sources created during process . In some examples the list of available data sources is iterated through and each data source that does not have a type that is included in the types found in the hints is removed from the list of available data sources. The list of filtered data sources and the query are then further processed beginning with a process . In some examples process may be performed using hint resolver .

At the process the list of available data sources is filtered using data source rules. The list of available data sources created during process is filtered based on data source rules provided to the hybrid multi data source by an operator an administrator and or a user of the application server or the hybrid multi data source. The operator administrator and or user may use the data source rules to express a preference for one or more types of data source to use based on the features of the query received during process . Each of the data source rules is evaluated based on the features of the query and when the query includes the features identified in the respective rule the indicated data source types are added a list of preferred data source types. When there is no overlap between the list of preferred data source types and the types of the data sources in the list of available data sources the data source rules are ignored. Otherwise the list of available data sources is filtered using the list of preferred data sources. In some examples the list of available data sources is iterated through and each data source that does not have a type that is included in the list of preferred data source types is removed from the list of available data sources. The list of filtered data sources and the query are then further processed beginning with a process . In some examples process may be performed using rule evaluator .

A rule is applicable to queries based on a SELECT statement. More specifically rule indicates that when the query is a SELECT statement that includes a WHERE clause that uses the operators equal or LIKE and the SELECT statement includes an ORDER BY clause the preference is to the process the query using a nosql or a relational database.

A rule is also applicable to queries based on a SELECT statement. More specifically rule indicates that when the query is a SELECT statement that includes a JOIN clause and or a GROUP BY clause the preference is to the process the query using a relational database.

A rule is applicable to queries based on an INSERT statement. More specifically rule indicates that when the query is an INSERT statement the preference is to process the query using a nosql database.

A rule is applicable to queries based on a DELETE statement. More specifically rule indicates that when the query is a DELETE statement that includes a WHERE clause the preference is to process the query using a flat file data source.

Referring back to at the process one or more query plans are formed. A query plan is formed for each of the data sources that remain in the filtered list of data sources. Each of the query plans is based on how a federated query engine such as federated query engine would implement the processing for the query received during process based on the capabilities of the respective data source. This may include assessing the capabilities of the respective data source and dividing the processing for the query between one or more abbreviated queries sent to the respective data source and processing that is handled by the federated query engine.

Query plan is representative of a query plan that may be used by the federated query engine when the data source is a file such as a flat file or an XML file. File based data sources provide little or no query support beyond the ability to access and or retrieve data from the corresponding file. Query plan demonstrates a query building process where the federated query engine does most of the data matching reduction and organizing that is specified in query . Query plan is organized as a tree and includes processing operations for a projecting a limiting a sorting a selecting a joining and two accessing and operations. Query plan is generally processed from bottom to top beginning with the accessing operations and and ending with the projection operation .

For example if query plan were to be processed to generate a result for query the processing might proceed as follows. First accessing operation is used to retrieve the data for the users table from the file containing that data In some examples accessing operation may include the forming of an abbreviated query similar to SELECT users . Similarly accessing operation is used to retrieve the data for the addresses table from the file containing that data. In some examples accessing operation may include the forming of an abbreviated query similar to SELECT addresses . At joining operation the federated query engine performs the users AS u JOIN addresses AS a ON u.id a.user id portion of query . This includes matching up entries from the users data retrieved during operation with the addresses data retrieved during operation where the matching is based on the id field of the users entries and the user id field of the addresses entries. At selecting operation the federated query engine performs the WHERE a.state France portion of query . This includes filtering the results from the joining operation to retain those entries with an address in France. At sorting operation the federated query engine performs the ORDER by u.name portion of query . This includes sorting the results from the selecting operation based on the name field. At limiting operation the federated query engine performs the LIMIT 100 portion of query to keep the first 100 entries in the results from the ordering operation . At projecting operation the federated query engine performs the SELECT u.name a. city portion of query to retain just the name and city fields in the results from the limiting operation .

Query plan is representative of a query plan that may be used by the federated query engine when the data source is a nosql database that does not support joining operations. Query plan demonstrates a query building process where the federated query engine supplements the capabilities of the nosql database to provide the joining operation. Query plan is organized as a tree and includes processing operations for a projecting a limiting a joining and two accessing and operations. Query plan is generally processed from bottom to top beginning with the accessing operations and and ending with the projection operation .

For example if query plan were to be processed to generate a result for query the processing might proceed as follows. First accessing operation is used to retrieve the data for the users table from the nosql table containing that data and perform the specified ordering operation on that data. In some examples accessing operation may include the forming of an abbreviated query similar to SELECT users AS u ORDER BY u.name . Similarly accessing operation is used to retrieve the data for the addresses table from the nosql table containing that data and perform the specified limiting operation on that data. In some examples accessing operation may include the forming of an abbreviated query similar to SELECT addresses AS a WHERE a.state France . At joining operation the federated query engine performs the users AS u JOIN addresses AS a ON u.id a.user id portion of query . This includes matching up entries from the users data retrieved during operation with the addresses data retrieved during operation where the matching is based on the id field of the users entries and the user id field of the addresses entries. Joining operation also preserves the ordering from accessing operation . At limiting operation the federated query engine performs the LIMIT 100 portion of query to keep the first 100 entries in the results from the joining operation . At projecting operation the federated query engine performs the SELECT u.name a. city portion of query to retain just the name and city fields in the results from the limiting operation .

Query plan is representative of a query plan that may be used by the federated query engine when the data source is a relational database that provides more complete SQL support. Query plan demonstrates a query building process where the federated query engine relies on the relational database to perform the entire query. Query plan includes an access operation . In some examples the federated query engine may perform some translation of query when the query language of the relational database differs in syntax from the query language of query before initiating accessing operation .

Referring back to at a process each of the query plans formed during process are evaluated. The evaluation includes traversing the respective query plan tree to determine an estimated cost for performing the query received during process using a data source of the type associated with the respective query plan. In performing the query plan evaluation each of the nodes in the query plan trees is assigned a cost and the costs are totaled. For query plan operations that are performed in the federated query engine e.g. projecting limiting sorting selecting grouping joining and or similar operations the same cost is generally used for each operation type irrespective of the type of the data source associated with the query plans. For query plan operations that are performed in the data sources e.g. the accessing operations the cost generally depends on the particular data source.

In some examples the costs for each operation type may be assigned by an administrator an operator and or a user of the hybrid multi data source. In some examples the costs for each operation type may be assigned based on metrics and or statistics gathered during processing of previous operations of the same type. In some examples the metrics and or statistics may include a weighted average related to the time required to perform a designated number of previous operations of the corresponding type. In some examples the weighted average may provide more emphasis on more recent uses of the respective operations perhaps by using exponential smoothing. In some examples the costs for the various operations may generally be selected based on a relative scale so that the costs for the operations performed by the federated query engine may be ordered from limiting with the lowest cost to projecting unioning sorting and finally joining with the highest cost. Similarly the costs of accessing each of the data source types may be ordered from flat files with the lowest cost to XML files REST web services SOAP web services nosql databases and finally relational databases with the highest cost. In some examples the order of the accessing operation costs may also be adjusted based on locations of the respective data sources and or other factors. In some examples process may be performed using federated query engine . In some examples when the filtered list of available data sources includes a single data source process may be skipped.

At a process a query plan is received. As the federated query engine evaluates one or more query plans it passes each of the query plans in turn to the query plan evaluator. In some examples federated query engine may use an API call to begin evaluation of a designated query plan.

At a process query complexity is initialized. In some examples the query complexity or query plan cost may be initialized to zero. In some examples the query complexity may be initialized to a default value that estimates general overhead for performing a query plan. In some examples the default value may be set by an administrator an operator a user or by metrics and or statistics gathered from prior query plan processing.

At a process the root node of the query plan is selected. Evaluation of the query plan begins at the top or root node of the query plan. In the examples of the root node of query plan is projecting operation the root node of query plan is projecting operation and the root node of query plan is accessing operation . The selected node becomes the current node.

At a process the cost of the current node is added to the query complexity. Based on the type of operation of the current node the corresponding node cost of that type of operation is added to the query complexity. In some examples the query plan evaluator may reference a table or other data structure associating costs with each of the various types of operations.

At a process it is determined whether the current node is a join operation node. When the current node is a join operation node this indicates that the query plan is going to split below the current node and at least two sub query plans are to be evaluated. In the examples of query plan includes two sub queries below the join operation and query plan includes two sub queries below the join operation . When the current node is not a join operation node the query plan is further processed beginning with a process . When the current node is a join operation node the two sub queries are separately evaluated beginning with a process .

At the process it is determined whether the current node has a child node. The current node of the query plan is examined to determine whether the current node is at the bottom of the query plan tree or whether additional nodes are to be evaluated. In the examples of operations and have a child and operations and do not have a child. When the current node has a child the child node is selected as the current node using a process . When the current node does not have a child the query complexity is returned using a process .

At the process the child node is selected. Evaluation of the query plan continues by iterating down through the query plan tree processing each node in turn. Once the child node is selected it becomes the current node and is evaluated beginning with process .

At the process the sub query plan for each child node is evaluated. When the current node is a join operation node the current node has at least two children. Each of the children is a root node of a sub query plan. The sub query plan for each of the children is evaluated recursively using method by providing sub query plan to process . In the examples of join operation has two children accessing operations and . Each of the accessing operations and is the root node of a sub query plan that is separately evaluated. Each of the separate sub query evaluations returns a query complexity that represents the cost of the respective sub query plan.

At a process an aggregate cost of the sub query plans of the children is added to the query complexity. The cost of the sub query plans of the children of the current node are aggregated together and added to the query complexity. In some examples the aggregation may select the highest cost sub query plan from among the children. In some examples the aggregation may be weighted sum of the costs of each of the sub query plans. In some examples the weighted sum may be a total and or an average. After the sub query plans are aggregated and added to the query complexity the query complexity is returned using process .

At the process the query complexity is returned. For example when the query plan evaluation is started by making an API call to a query evaluation function the query complexity may be returned as the return value for the query evaluation function.

Referring back to at a process a data source is selected. Using the evaluations of the query plans determined during process a data source to use to handle the query is selected. In some examples the federated query engine may select the data source with the lowest evaluated cost to minimize the cost of processing the query. In some examples the federated query engine may support load balancing by selecting the data source using a probabilistic approach. To so this a probability for each data source is determined using the evaluated costs as shown in Equation 1 where n is the number of data sources cis the evaluated cost for the ith data source and pis the probability that the ith data source is selected. The data source is then selected based on the probabilities.

In some examples the federated query engine may provide failover support by iteratively selecting data sources based on one of the other criteria until a data source with a query plan that is able to complete the query received during process is found. In some examples when the filtered list of available data sources includes a single data source process may by default select the single data source. In some examples process may be performed using federated query engine .

At a process the query plan for the selected data source is processed. The query plan associated with the data source selected during process is processed by the federated query engine. In some examples processing of the query plan may be consistent with the query plan processing described above with respect to the sample query plans and or of . In some examples process may be performed using federated query engine .

At a process a query result is returned. The result of the query plan processed during process is returned to the service and or the application that provided the query received during process . In some examples when the query is provided to the hybrid multi data source using a call to an API function the results may be returned as the return value for the API function.

As discussed above and further emphasized here is merely an example which should not unduly limit the scope of the claims. One of ordinary skill in the art would recognize many variations alternatives and modifications. In some examples the federated query engine may also be responsible for data consistency across each of the data sources accessible by the hybrid multi data source. In some examples when the federated query engine receives a query during process that alters data e.g. a DELETE INSERT ALTER and or UPDATE query a query plan may be formed for each available data source and then processed. This may occur irrespective of whether the query might include hints or whether data source rules are available. In some examples both the hints and the data source rules may be used to filter the list of available data sources.

Some examples of server application servers and or and or hybrid multi data source may include non transient tangible machine readable media that include executable code that when run by one or more processors e.g. processor may cause the one or more processors to perform the processes of methods and or as described above. Some common forms of machine readable media that may include the processes of methods and or are for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM any other memory chip or cartridge and or any other medium from which a processor or computer is adapted to read.

Although illustrative embodiments have been shown and described a wide range of modification change and substitution is contemplated in the foregoing disclosure and in some instances some features of the embodiments may be employed without a corresponding use of other features. One of ordinary skill in the art would recognize many variations alternatives and modifications. Thus the scope of the invention should be limited only by the following claims and it is appropriate that the claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein.

