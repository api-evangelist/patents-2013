---

title: Row-based data filtering at a database level
abstract: A database management system provides row based filtering of data at a database level by evaluating content of at least one record of a write data request received from an application for a particular table from among at least one table of a database, against at least one filter rule specified for the particular table. The database management system selects, for the at least one record, whether to store the at least one record of the write data request as a separate row in the particular table based on a separate action triggered for the at least one record when evaluated against the at least one filter rule specified for the particular table, each record not selected for storage being silently discarded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09165078&OS=09165078&RS=09165078
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09165078
owner_city: Armonk
owner_country: US
publication_date: 20130314
---
The embodiment of the invention relates generally to database management systems and particularly to database level row based filtering of data before data enters a database table.

A traditional database management system DBMS contains one or more databases with each database containing one or more tables. The DBMS stores data in tables where tables consist of zero or more rows and one or more columns of data. A column in a table generally includes data with a particular attribute. The rows in a table specify individual items or records within the table. Software applications use data manipulation instructions such as instructions in the Structured Query Language SQL to insert extract or manipulate data within database tables. Software applications may generate data and call data manipulation instructions to insert the data within one or more tables of one or more DBMS but it may not be efficient or necessary to actually store all the data specified in a data manipulation instruction in a particular database.

Therefore there is a need for a method system and computer program product for database level row based filtering of data before the filtered data is stored in a table of a database.

In one embodiment a method for filtering data in an incoming write data request is directed to receiving a write data request by a filter write controller in a write layer of a database management system the write data request passed to the filter write controller from a request interface of the database management system that receives a plurality of write data requests from one or more applications requesting to write data to one or more tables from among a plurality of tables of a database. The method is directed responsive to the filter write controller receiving the write data request to determining whether a particular filter list in the write layer associated with a particular table from among the plurality of tables specified in the write data request comprises at least one filter rule from among a plurality of filter lists each associated with a separate table from among the plurality of tables. The method is directed to responsive to detecting the particular filter list associated with the particular table comprises the at least one filter rule evaluating content of the at least one record of the write data request for the particular table against the at least one filter rule specified for the particular table in the particular filter list. The method is directed to selecting by the filter write controller whether to allow storage of the at least one record of the write data request as a separate row in the particular table based on a separate action triggered for the at least one record when evaluated against the at least one filter rule specified for the particular table each record not selected for storage being silently discarded.

In another embodiment a computer system comprises one or more processors one or more computer readable memories and one or more computer readable storage devices and program instructions stored on at least one of the one or more storage devices for execution by at least one or more processors via at least one or more memories. The stored program instructions comprising program instructions to receive a write data request by a filter write controller in a write layer of a database management system the write data request passed to the filter write controller from a request interface of the database management system that receives a plurality of write data requests from one or more applications requesting to write data to one or more tables from among a plurality of tables of a database. The stored program instructions comprising program instructions responsive to the filter write controller receiving the write data request to determine whether a particular filter list in the write layer associated with a particular table from among the plurality of tables specified in the write data request comprises at least one filter rule from among a plurality of filter lists each associated with a separate table from among the plurality of tables. The stored program instructions comprising program instructions responsive to detecting the particular filter list associated with the particular table comprises the at least one filter rule to evaluate by the filter write controller content of the at least one record of the write data request for the particular table against the at least one filter rule specified for the particular table in the particular filter list. The stored program instructions comprising program instructions to select by the filtering write controller whether to allow storage of the at least one record of the write data request as a separate row in the particular table based on a separate action triggered for the at least one record when evaluated against the at least one filter rule specified for the particular table each record not selected for storage being silently discarded.

In another embodiment a computer program product for filtering data in an incoming write data request comprises one or more computer readable storage devices and program instructions stored on at least one of the one or more storage devices. The stored program instructions comprising program instructions to receive a write data request by a filter write controller in a write layer of a database management system the write data request passed to the filter write controller from a request interface of the database management system that receives a plurality of write data requests from one or more applications requesting to write data to one or more tables from among a plurality of tables of a database. The stored program instructions comprising program instructions responsive to the filter write controller receiving the write data request to determine whether a particular filter list in the write layer associated with a particular table from among the plurality of tables specified in the write data request comprises at least one filter rule from among a plurality of filter lists each associated with a separate table from among the plurality of tables. The stored program instructions comprising program instructions responsive to detecting the particular filter list associated with the particular table comprises the at least one filter rule to evaluate content of the at least one record of the write data request for the particular table against the at least one filter rule specified for the particular table in the particular filter list. The stored program instructions comprising program instructions to select whether to allow storage of the at least one record of the write data request as a separate row in the particular table based on a separate action triggered for the at least one record when evaluated against the at least one filter rule specified for the particular table.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In addition in the following description for purposes of explanation numerous systems are described. It is important to note and it will be apparent to one skilled in the art that the present invention may execute in a variety of systems including a variety of computer systems and electronic devices operating any number of different types of operating systems.

In the example a database management system DBMS contains one or more databases . Each database contains zero or more tables . Each table if defined contains one or more columns which each column if defined is assigned one or more attributes. In the example the attributes assigned to columns are illustrated as date city country time and temp . In addition each table contains zero or more rows where each row if present specifies an individual item of the data within a table. Tables may include one or more tables with zero rows representing an empty table. In the example DBMS provides one or more interfaces for receiving requests from applications . In the example applications include one or more applications external to DBMS that include database instructions to perform one or more function calls within DBMS including but not limited to altering a table reading data and writing data. In another example applications may include one or more applications that generate a log file or other data source or access a log file or other data source generated by another application. In another embodiment applications may include one or more applications implemented in a layer of DBMS .

In the example DBMS receives a write data request from applications . In the example write data request refers to a row collection with multiple records illustrated for purposes of example as record 1 record 2 and record 3 . In the example row collection may represent data located in a disk space or transmitted over a network. In the example row collection may represent data comprising a collection of one or more rows that DBMS receives as a request to write into a table. The collection of one or more rows represented by row collection may be collected in a log file or may be collected within and accessed from other types of data sources. In one example a log file also referred to as a log is a file that includes a list of actions files requests or other types of tracked or recorded data accessible to applications .

In the example for purposes of illustration each of record 1 record 2 record 3 include data associated with a first attribute and a second attribute where the data associated with a first attribute is stored in a first position and the data associated with a second attribute is stored in a second position. For example record 1 includes data A associated with a first attribute and data B associated with a second attribute. Record 2 includes data G associated with a first attribute and data H associated with a second attribute. Record 3 includes data A associated with a first attribute and data H associated with a second attribute.

In the example for purposes of illustration DBMS may include a table A to which writing row collection of write data request is directed. In the example table A includes multiple columns each set to a separate attribute. For purposes of illustration table A includes a first column set to an attribute of attribute 1 and a second column set to an attribute of attribute 2 .

In the example DBMS includes filter write controller . DBMS is configured to pass requests to enter data into tables of DBMS such as write data request to filter write controller . In the example filter write controller represents logic for filtering the data in write data request prior to DBMS storing of any of the data in write data request within table A .

In the example filter write controller filters row collection in write request according to a filter list specified for the table to which row collection is directed for storage if a filter list is specified for the table. In the example DBMS is configured to store filter lists in table filters where each filter list specifies one or more actions to perform on row collections when applications attempt to enter row collections into one or more tables. In the example DBMS is also configured with manage filter controller that provides a method for one or more DBMS users to add one or more filter lists for a table to table filters . In particular the example table filters includes a filter list for table A illustrated as table A filter list . In one example table filters represents one or more table lists that have been added to one or more tables where the tables include views and the views are writable. In one example a filter list in table filters may apply to a single table or to multiple tables.

In particular in the example table A filter list specifies two rules to be applied in the order listed of allow attribute 1 A and deny attribute 2 H . In the example filter write controller applies the rules to write data request by row. In the example the data in record 1 matches the first rule attribute 1 A so record 1 is allowed for storage in table A in row 1 . In the example the data in record 2 does not match the first rule attribute 1 A but record 2 does match attribute 2 H therefore record 2 is denied and not written to table A by being silently discarded by filter write controller . In the example the data in record 3 matches the first rule attribute 1 A so record 1 is allowed for storage in table A in row 2 even though attribute 2 H . The example of record 3 illustrates an example where if a filter rule condition is true any remaining filter rules are not evaluated for the record even if the remaining filter rules would be true if evaluated against the content of a record. In addition the example of record 3 illustrates that the current filter rules allowed in table A filter list allow for storage of all records with attribute 1 A regardless of the content of attribute 2 but do not allow for storage of any records that do not have content of attribute 1 A but do have content of attribute 2 H .

In the example if DBMS handled write data request using traditional write logic then all the records in row collection of write data request would be added as rows to table A . In contrast when filter write controller handles write data requests at the database level applying row based filtering based on a filter list of rules specified for the table in table filters table A only includes a selection of the records in row collection of write data request of record 1 and record 3 . In the example even when filter write controller is implemented if no filter is specified for a table that is the target of a write data request in table filters then traditional write logic would handle write data request .

In the example as illustrated filter write controller filters data based on the content of each record compared with content based filtering rules specified for a table in table filters . In the example DBMS may also include a security controller which prevents database users from changing certain columns within tables based on the identity of the user requesting the write request and the level of write access the user identity is granted. In addition DBMS may also include a security controller for restricting the options for adding modifying or removing filter rules to a filter list of a table based on the identity of the user requesting to modify the filter rules and the level of filter rule modification the user identity is granted.

In the example a DBMS comprises upper levels operating on top of a control layer which operates on top of databases . In the example upper levels may include but are not limited to one or more interfaces and one or more applications. In one example upper levels includes one or more application programming interfaces such as request interface . In the example applications implemented external to DBMS send calls to DBMS through request interface .

In the example request interface may receive multiple types of requests including but not limited to filter requests such as filter list request write data requests such as write data request and other database requests such as read data requests. In the example when request interface receives an incoming request request interface identifies the type of request and directs the request to one or more components of control layer to perform the requested action.

In one example request interface receives filter list request identifies that filter list request is of a filter request type and directs control layer to perform the requested action in table filters of a write layer . Filter list request may include requests for one or more types of actions including but not limited to insert a filter list into table filters to edit filter list to remove filter list to remove all filter lists in table filters and to show the filter lists currently in table filters . Filter list may include one or more tables associated with filter list one or more filtering rules to apply and a sequential ordering of the filtering rules. A filtering rule may apply to a single column attribute or to multiple column attributes. In the example a filtering rule may positively recite the content by attribute which is allowed or negatively recite the content by attribute which is not allowed. For example each filtering rule may specify a particular content element multiple content elements or a range of content elements. In the example manage filter controller is implemented through request interface .

In the example request interface receives write data request identifies write data request is of a write data type and passes write data request to filter write controller of write layer of control layer . In the example filter write controller identifies the table that is the target of write data request and searches table filters for a filter list specified for the target table. If table filters does not include a filter list for the target table filter write controller passes write data request with row collection to traditional write logic . Traditional write logic controls writing all of the data passed in row collection of write data request to the target table in databases . In the example if table filters does include a filter list for the target table filter write controller filters each record in row collection of write data request according to the rules in the filter list for the target table filtering out any records that do not meet the requirements in the filter list for the target table. Filter write controller passes allowed data to traditional write logic control writing the selection of data allowed in write data request to the target table in databases . In one example allowed data only includes a selection of the records from among row collection to be written to databases . In another example allowed data includes all the records from row collection .

In the example an application such as one of the application illustrated in applications uses data manipulation instructions to insert extract or manipulate selections of data into DBMS . A DBMS user may prefer not to process or store all the data specified in a data manipulation instruction in DBMS . In particular a DBMS user which may include a DBMS administrator may have multiple types of reasons for not wanting to store the content included in certain data records from the data specified in a data manipulation instruction within a table of DBMS . In one example of a reason for not wanting to store certain data records from the data specified in a data manipulation instruction a DBMS user may prefer to reduce the amount of database storage actually used by databases by not storing records received in selections of data that include content that is deemed unimportant by the DBMS user. In another example of a reason for not wanting to store certain data records from the data specified in a data manipulation instruction a DBMS user may need to prevent particular types of content in the data records which need to be secured from being stored in DBMS .

In one example of the types of data content that a DBMS user may deem unimportant application may output write data request with row collection containing temperatures recorded on every city of the planet every minute of the day for many days. A DBMS user may be interested in only those cities within a certain country and may be interested in data only from those dates less than a month old. The DBMS user may only want to store those records within the files that are for the specified cities within the specified time period.

In another example of the types of data content that a DBMS user may need to prevent before being stored in DBMS application may output write data request with row collection referencing a distributed system performance log file including but not limited to a System Management Facility SMF log which may contain the performance details of many systems. In one example a distributed system performance monitoring application such as SMF is a component of a distributed computing system including multiple computer systems. In one example the performance monitoring application may collect system and job related information on the distributed computing system and provide a standard method for recording distributed system performance logs listing activity indicating the performance of the system and other job related information. For example the types of activity recorded may include but are not limited to performance and usage instrumentation of resources such as processor memory disk cache workload network activity software usage error conditions workload and virtual storage The DBMS user may need to restrict what data is entered into the database from the distributed system performance log such as restricting the data written to databases to only the records associated with a particular unsecured system from among the multiple systems or to only records for a certain time range within the day.

As described in by implementing filter write controller for applying a filter list specified for a target table of a write data request in table filters filter write controller applies database level row based filtering of data in row collection to avoid storing filtered data records in databases .

In addition to implementing filter write controller for row based filtering of data from application at a database level application may filter data from row collection . For example application may apply modify rules at the application level to remove unwanted data records from row collection before row collection enters DBMS . One limitation of performing data filtering at the application level through modify rules is that a party which does not include the DBMS user may develop application and the party that provides application would be required to offer an option to third party users such as the DBMS user to select to modify row collection or specify modify rules . The party that provides application may not want to provide third party users with the option to make modifications of rules or data at the application level for multiple reasons. For example the party that provides application may not want to provide third party users with the option to make modifications of rules or data at the application level because the party that provides application would also need to provide additional code and system resources for handling inputs of modify rules for handling the processing of modify rules on row collection and for providing data and application security. In another example the party that provides application may not want to provide third party users with the option to make modifications of rules or data at the application level because the party may provide the data in row collection to multiple database users and may not want to manage different instances of row collection modified for different database users.

In addition to implementing filter write controller for row based filtering of data from application at a database level pre processing logic may be implemented to pre process row collection for write data request outside of application to remove unwanted data records from row collection before row collection enters DBMS . Row collection output by application may be pre processed separate from DBMS to remove information from row collection that the DBMS user does not want processed and stored in DBMS . One limitation of pre processing logic is that pre processing logic is another piece of code that has to be written and maintained separate from the DBMS which costs money and time. Another limitation of pre processing logic is that the relationship between the row collection and what the DBMS writes to the database may be complex introducing possible errors and additional layers of processing particularly where an application has to perform data look ups and certain information may not be known for writing to databases until upper levels has processed row collection . Duplicating the lookups and calculations of data in pre processing logic and upper levels increases the risk of errors when performing complex writes. Another limitation of pre processing logic is that there may not be a point at which row collection can be modified. For example if row collection is stored on a disk pre processing logic may modify row collection on the disk but if row collection is accessed from the internet at run time for pre processing logic to process data retrieved from the internet at run time pre processing logic will require complex network interception programs increasing the time cost and resources required for implementing pre processing logic . In contrast while filter write controller is an additional piece of code filter write controller is maintained within DBMS not external to DBMS and filter write controller performs complex database writes including lookups within control layer of DBMS with direct access to databases for lookups reducing the risk of errors when filtering complex write data requests.

In addition to implementing filter write controller for row based filtering of data from applications at a database level post processing logic may be implemented to filter records out of databases after row collection is stored in databases . One limitation of post processing logic is that by allowing all data in row collection to enter databases DBMS uses processing resources to process all the data in row collection for storage in databases and has to allocate space for all the data in row collection for storage in databases which may trigger use of pay per use on demand storage space or use of data storage management techniques to open up space for all the data in row collection and the same data has to be processed a second time after being stored in databases to remove the data from databases . In addition another limitation of post processing logic is that by allowing all data in row collection to enter databases if row collection includes data the content of which needs to be secured or is considered sensitive subject matter the sensitive data would still exist in database even if just for a temporary period of time triggering potential data breach or legal issues. In contrast filter write controller processes row collection prior to storage to select which records within row collection are approved for storage such that only selected records from row collection are then processed and stored in databases and such that a DBMS user may specify filtering rules at a table level to keep sensitive content received in row collection from being stored in databases at all.

In addition to implementing filter write controller for row based filtering of data from applications at a database level DBMS may implement intercept triggers that intercept inserts or updates and filter the inserts or updates where the inserts and updates represent database objects. Intercept triggers may be implemented at one or more points of DBMS or the systems on which DBMS operates including but not limited to a database memory layer a network layer an operating system layer and a database library layer. Intercept triggers can be set for general purpose user tasks along with data filtering and in one example an intercept trigger generally runs a process which may do anything to decide whether or not an event should happen or whether the event should be modified before happening. One limitation of using intercept triggers as the tool used to filter data in DBMS is that all the database objects whether triggered for general purpose user tasks or data filtering need to be synchronized and the synchronization of database objects requires additional processing. In addition a limitation of using intercept triggers for filtering data is that intercept triggers are used for multiple purposes and therefore triggers require greater functionality and generic processing and cannot be fully optimized for data filtering processes alone. In contrast to intercept triggers request interface provides a simple application programming interface API through which filters are added to table filters providing an API that may be optimized for performing filtering operations alone. In one example data filtering through request interface table filters and filter write controller may be optimized particularly in comparison to intercept triggers because request interface table filters and filter write controller do not have the overhead of greater functionality and generic processing that may be required by intercept triggers . In addition in contrast to intercept triggers request interface provides a simple API through which write data requests are passed to filter write controller in control layer without requiring the use of insert and update triggers for performing filtering such that no database object synchronization is required for filtering data. Further in contrast to intercept triggers the coded implementation of request interface table filters and filter write controller may be optimized for data filtering particularly in comparison to intercept triggers because request interface table filters and filter write controller do not have the overhead of handling generic rules that may be required by intercept triggers . For example table filters may be specifically tailored in a specified format to either allow or deny database writes based on row content. The filter lists all tailored to a specified format within table filters may be further optimized by being compiled into an intermediate form to allow for faster execution as filter write controller evaluates filter rules against write requests. In addition table filters may be further optimized in that the column names in filter lists all tailored to the specified format may be converted into numeric column identifiers to allow for faster execution as filter write controller evaluates filter rules against write requests.

As illustrated modify rules pre processing logic post processing logic and intercept triggers may be implemented as options for filtering data that a user prefers not to store in databases however each of these options has limitations. In contrast filter write controller by applying table filters for database level row based data filtering provides a simple efficient centralized function of DBMS that is easy to manage by DBMS that allows a DBMS user to specify filtering rules in table filters that does not place filtering at the general purpose object level that filters data prior to storage and that requires no changes at the application level and is not distributed across multiple applications at the application level. By implementing filter write controller for applying table filters to tables of the database the storage requirements for databases may be reduced because storage space is not required in databases for data that is specified by the table filters as unnecessary.

In the example request interface may implement an alter table API for handling ALTER TABLE calls as illustrated at reference numeral . In a DBMS traditionally request interface includes an API that handles ALTER TABLE calls that specify a table name table name to be altered and a table alteration action requested as illustrated at reference numeral .

In the example illustrated alter table API is modified to also handle with an alter table call one or more specific types of calls for managing filter list requests such as filter list request . For example as illustrated at reference numeral alter table API may handle a call of insert filter for inserting a filter list into table filters . In the example as illustrated at reference numeral an insert filter call may specify one or more filter rules and specify for each filter rule a sequence number of the position of the filter rule to be applied in a sequence of filter rules in a filter list for a table. In the example as illustrated at reference numeral alter table API may also handle a call of edit filter for editing a filter list in table filters where an edit filter call may also specify the sequence number assigned to a filter rule and the edited filter rule.

As illustrated at reference numeral alter table API may handle a remove filter call for removing a filter assigned a particular sequence number and specified by the table name in the alter table call. As illustrated at reference numeral alter table API may handle a remove all filters call for removing all filters for the table name in the alter table call in table filters . In addition as illustrated at reference numeral alter table API may handle a show filters for table call for showing all the filter rules for a table name in the alter table call.

In addition to the calls illustrated alter table API may handle additional or alternate table and filter list related calls and actions. In addition in addition to the call parameters illustrated alter table API may handle calls specified by additional or alternate call parameters including but not limited to a DBMS user identifier and a time identifier.

In another example one or more of the calls illustrated at reference numerals and may be handled by alter table API under a different call from the alter table call illustrated at reference numeral . For example the show filters for table call illustrated at reference numeral may be handled by alter table API under a call separate from the alter table call illustrated at reference numeral . In another example one or more of the calls illustrated at reference numerals and may be handled by an additional or alternate API implemented in request interface . For example in addition to request interface implementing alter table API for handling calls related to table filters request interface may implement one or more additional APIs for handling specific calls for table filters . For example the show filters for table call illustrated at reference numeral may be handled by an additional API in request interface for handling show type requests. Moreover while in the example alter table API includes additional commands under the alter table call for managing table filters one of ordinary skill in the art will appreciate that other call commands may be modified to handle calls related to managing table filters .

Condition may represent any expression that generates a true or false value which decides whether action is carried out. Condition may include an expression that evaluates whether the data in a record of a row collection includes particular content. The expression in condition may be further specified to evaluate whether the data in a record to be associated with a particular column attribute in a table includes particular content. In addition the expression in condition may be complex or simple may use many input sources both from the record being examined in row collection and any other information available to DBMS .

Action may include one or more actions including but not limited to fail which will generate a run time error deny which will trigger filter write controller to silently ignore the write request dropping the record from being inserted into the table and allow which will trigger filter write controller to allow the insertion of the record into the table to happen immediately.

In one example whether there is a single filter rule or multiple filter rules in a filter list for a table as the filter rules are examined in sequential order for each record if a condition of a trigger rule is evaluated as true the paired action is the action that is carried out for the triggering record without examining any remaining filter rules. In one example if none of the conditions of any trigger rules for a table are evaluated as true for a particular record then a default action is carried out.

Alter table instructions illustrate one example of the alter table calls specified by a DBMS user for a temperature table tempTable . In the example row collection for the tempTable includes temperatures from multiple cities in every country every hour for multiple days. In the example the DBMS user may prefer to store in the tempTable the records from row collection that are for any cities in Australia and that are for cities in the UK but only the midday temperatures for the UK.

In the example alter table instructions illustrates a first instruction of ALTER TABLE tempTable REMOVE ALL FILTERS to remove all the filters for the selected table and start without any filter rules for the selected table.

In the example alter table instructions illustrates a second instruction of ALTER TABLE tempTable INSERT FILTER 1 ALLOW Country Australia where 1 is the sequenceNum of the filter rule and ALLOW Country Australia is the filterRule inserted into table filters for the table tempTable. In the example Country represents a column attribute of a table and Australia represents content that may be in a record. In the example if the condition of Country Australia is true then the action of ALLOW is triggered where if the action of ALLOW is triggered filter write controller allows the matching record to be written immediately to databases and the remaining filter rules are not evaluated for the record.

In the example alter table instructions illustrates a third instruction of ALTER TABLE tempTable INSERT FILTER 2 DENY Country UK where 2 is the sequenceNum of the filter rule and DENY Country UK is the filterRule inserted into table filters for the table tempTable. In the example Country represents a column attribute of a table and UK represents content that may be in a record. In the example is a not equal operand. In the example if the condition of DENY Country UK is true meaning that the country data is for any country other than UK then the action of DENY is triggered where if the action of DENY is triggered filter write controller silently drops the matching record effectively blocking the matching record from being inserted in databases and the remaining filter rules are not evaluated for the record.

In the example alter table instructions illustrates a fourth instruction of ALTER TABLE tempTable INSERT FILTER 3 DENY Time 12 00 where 3 is the sequenceNum of the filter rule and DENY Time 12 00 is the filterRule inserted into table filters for the table tempTable. In the example Time represents a column attribute of a table and 12 00 represents content that may be in a record. In the example if the condition of DENY Time 12 00 is true meaning that the time for a record is not a midday time of 12 00 then the action of DENY is triggered where if the action of DENY is triggered filter write controller silently drops the matching record effectively blocking the matching record from being inserted in databases .

In the example the effect of the three filter rules illustrated in alter table instructions is that for a row collection received for the tempTable any records with a country attribute of Australia are allowed to be inserted into the tempTable any records with a country attribute of UK and a time attribute of 12 00 are allowed to be inserted into the tempTable and all other records are silently dropped and not inserted into the tempTable.

Alter table instructions illustrate one example of the alter table calls specified by a DBMS user for the temperature table tempTable . In the example row collection for the tempTable includes temperatures from multiple cities in every country every hour for multiple days. In the example the DBMS user may prefer to store in the tempTable the records from row collection that are for any cities in Australia only.

In the example alter table instructions illustrates a first instruction of ALTER TABLE tempTable REMOVE ALL FILTERS to remove all the filters for the selected table and start without any filter rules for the selected table.

In the example alter table instructions illustrates a second instruction of ALTER TABLE tempTable INSERT FILTER 1 ALLOW Country Australia where 1 is the sequenceNum of the filter rule and ALLOW Country Australia is the filterRule inserted into table filters for the table tempTable. In the example Country represents a column attribute of a table and Australia represents content that may be in a record. In the example if the condition of Country Australia is true then the action of ALLOW is triggered where if the action of ALLOW is triggered filter write controller allows the matching record to be written immediately to databases and the remaining filter rules are not evaluated for the record.

In the example alter table instructions illustrates a third instruction of ALTER TABLE tempTable INSERT FILTER 2 DENY where 2 is the sequenceNum of the filter rule and DENY is the filterRule inserted into table filters for the table tempTable. In the example there is no condition set therefore any record that is not allowed by filterRule 1 will be evaluated against filterRule 2 and evaluated as true . In the example each record evaluated against filterRule 2 as true triggers the action of DENY where if the action of DENY is triggered filter write controller silently drops the matching record effectively blocking the matching record from being inserted in databases . Effectively the third instruction of DENY explicitly sets the default action to DENY for any record that is not allowed under filterRule1.

Computer system includes a bus or other communication device for communicating information within computer system and at least one hardware processing device such as processor coupled to bus for processing information. Bus preferably includes low latency and higher latency paths that are connected by bridges and adapters and controlled within computer system by multiple bus controllers. When implemented as a server or node computer system may include multiple processors designed to improve network servicing power. Where multiple processors share bus additional controllers not depicted for managing bus access and locks may be implemented.

Processor may be at least one general purpose processor such as IBM PowerPC processor that during normal operation processes data under the control of software which may include at least one of application software an operating system middleware and other code and computer executable programs accessible from a dynamic storage device such as random access memory RAM a static storage device such as Read Only Memory ROM a data storage device such as mass storage device or other data storage medium. Software may include but is not limited to code applications protocols interfaces and processes for controlling one or more systems within a network including but not limited to an adapter a switch a server a cluster system and a grid environment.

In one embodiment the operations performed by processor may control the operations of flowchart of and other operations described herein. Operations performed by processor may be requested by software or other code or the steps of one embodiment of the invention might be performed by specific hardware components that contain hardwired logic for performing the steps or by any combination of programmed computer components and custom hardware components.

Those of ordinary skill in the art will appreciate that aspects of one embodiment of the invention may be embodied as a system method or computer program product. Accordingly aspects of one embodiment of the invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment containing software and hardware aspects that may all generally be referred to herein as circuit module or system. Furthermore aspects of one embodiment of the invention may take the form of a computer program product embodied in one or more tangible computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk such as mass storage device a random access memory RAM such as RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CDROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction executing system apparatus or device.

A computer readable signal medium may include a propagated data signal with the computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction executable system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable radio frequency RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations of on embodiment of the invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer such as computer system partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server such as server . In the latter scenario the remote computer may be connected to the user s computer through any type of network such as network through a communication interface such as network interface over a network link that may be connected for example to network .

In the example network interface includes an adapter for connecting computer system to network through a link and for communicatively connecting computer system to server or other computing systems via network . Although not depicted network interface may include additional software such as device drivers additional hardware and other controllers that enable communication. When implemented as a server computer system may include multiple communication interfaces accessible via multiple peripheral component interconnect PCI bus bridges connected to an input output controller for example. In this manner computer system allows connections to multiple clients via multiple separate ports and each port may also support multiple connections to multiple clients.

One embodiment of the invention is described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. Those of ordinary skill in the art will appreciate that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer such as computer system or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instruction means which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer such as computer system or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Network interface the network link to network and network may use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network the network link to network and network interface which carry the digital data to and from computer system may be forms of carrier waves transporting the information.

In addition computer system may include multiple peripheral components that facilitate input and output. These peripheral components are connected to multiple controllers adapters and expansion slots such as input output I O interface coupled to one of the multiple levels of bus . For example input device may include for example a microphone a video capture device an image scanning system a keyboard a mouse or other input peripheral device communicatively enabled on bus via I O interface controlling inputs. In addition for example output device communicatively enabled on bus via I O interface for controlling outputs may include for example one or more graphical display devices audio speakers and tactile detectable output interfaces but may also include other output interfaces. In alternate embodiments of the present invention additional or alternate input and output peripheral components may be added.

Those of ordinary skill in the art will appreciate that the hardware depicted in may vary. Furthermore those of ordinary skill in the art will appreciate that the depicted example is not meant to imply architectural limitations with respect to the present invention.

Returning to block if the request received is not an alter table request then the process passes to block . Block illustrates a determination whether the request is a write data request. At block if the request received is a write data request then the process passes to block . Block illustrates passing the request to the write layer as illustrated in and the process returns to block . At block if the request received is not a write data request then the process passes to block . Block illustrates handling other DBMS requests depending on the type of request and the process returns to block .

Block illustrates getting the table name from the request. Next block illustrates a determination whether the table name is in the database. At block if the table name is not in the database then the process passes to block . Block illustrates returning an error of the table name not in the database and the process ends. Returning to block if the table name is in the database then the process passes to block .

Block illustrates a determination whether the alter table call includes a filter call. At block if the alter table call does not include a filter call then the process passes to block . Block illustrates handling the traditional alter table call and the process ends. Returning to block if the alter table call does include a filter call then the process passes to block .

Block illustrates a determination whether the alter table call includes a filter call to insert filter . At block if the alter table call includes a filter call to insert filter then the process passes to block . Block illustrates adding the filter rule specified in the alter table call with the sequence number specified in the alter table call to the filter list associated with the table name and the process ends. Returning to block if the alter table call does not include a filter call to insert filter then the process passes to block .

Block illustrates a determination whether the alter table call includes a filter call to edit filter . At block if the alter table call includes a filter call to edit filter then the process passes to block . Block illustrates editing the filter rule in the filter list associated with the table name with a sequence number matching the sequence number in the alter table call with the edited filter rule in the alter table call and the process ends. Returning to block if the alter table call does not include a filter call to edit filter then the process passes to block .

Block illustrates a determination whether the alter table call includes a filter call to remove filter . At block if the alter table call includes a filter call to remove filter then the process passes to block . Block illustrates removing the filter rule with a sequence number in the filter list matching the sequence number specified in the alter table call from the filter list associated with the table name and the process ends. Returning to block if the alter table call does not include a filter call to remove filter then the process passes to block .

Block illustrates a determination whether the alter table call includes a filter call to remove all filters . At block if the alter table call includes a filter call to remove all filters then the process passes to block . Block illustrates removing all the filter rules in the filter list associated with the table name and the process ends. Returning to block if the alter table call does not include a filter call to remove all filters then the process passes to block .

Block illustrates a determination whether the alter table call includes a filter call to show filters . At block if the alter table call includes a filter call to show filters then the process passes to block . Block illustrates returning the content of all the filter rules in the filter list associated with the table name and the process ends. Returning to block if the alter table call does not include a filter call to show filters then the process passes to block . Block illustrates handling other filter calls and the process ends.

Block illustrates a determination whether the filter list associated with the table name is empty. At block if the filter list associated with the table name is empty then the process passes to block . Block illustrates passing the write request to the traditional write logic and the process ends. Returning to block if the filter list associated with the table is not empty then the process passes to block .

Block illustrates getting the first or next record for writing from the row collection for the request. Next block illustrates searching for a first filter rule if any in the filter list where the condition in the filter rule evaluates to true against the record where the filter rules are numbered where the filter rules are evaluated in sequential order. Thereafter block illustrates a determination whether a first filter rule evaluated to true is identified for the record. At block if there is not a first filter rule evaluated to true for the record then the process passes to block . Block illustrates passing the record to the traditional write logic to insert into the table per a default allow action and the process passes to block . Block illustrates a determination whether there are any records remaining for the write request in the row collection. At block if there are no remaining records for the write request in the row collection then the process ends. At block if there are remaining records for the write request in the row collection then the process returns to block .

Returning to block if there is a first filter rule evaluated to true for the record then process passes to block . Block illustrates identifying the action associated with the first filter rule evaluated as true where the action may include one from among the actions of allow deny or fail. Next block illustrates a determination whether the action associated with the condition in the first filter rule is an allow action. At block if the action associated with the condition in the first filter rule is an allow action then the process passes to block . Block illustrates passing the record to the traditional write logic to insert into the table and the process passes to block . Returning to block if the action associated with the condition in the first filter rule is not an allow action then the process passes to block . Block illustrates a determination whether the action associated with the condition in the first filter rule is a deny action. At block if the action associated with the condition in the first filter rule is a deny action then the process passes to block . Block illustrates silently ignoring the write request for the record and the process passes to block . Returning to block if the action associated with the condition in the first filter rule is not a deny action then the process passes to block . Block illustrates a determination whether the action associated with the condition in the first filter rule is a fail action. At block if the action associated with the condition in the first filter rule is a fail action then the process passes to block . Block illustrates triggering traditional error logic to handle the failure and ignoring the write request for the record and the process ends. At block if the action associated with the condition in the first filter rule is not a fail action then the process passes to block . Block illustrates handling other actions and the process ends.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact occur substantially concurrently or the blocks may sometimes occur in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the one or more embodiments of the invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

While the invention has been particularly shown and described with reference to one or more embodiments it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention.

