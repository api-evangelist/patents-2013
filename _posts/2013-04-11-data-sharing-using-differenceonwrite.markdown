---

title: Data sharing using difference-on-write
abstract: When a virtual machine writes to a page that is being shared across VMs, a share value is calculated to determine how different the page would be if the write command were implemented. If the share value is below a predefined threshold (meaning that the page would not be “too different”), then the page is not copied (as it would be in a standard copy-on-write operation). Instead, the difference between the contents of the pages is stored as a self-contained delta. The physical to machine memory map is updated to point to the delta, and the delta contains a pointer to the original page. When the VM needs to access the page that was stored as a delta, the delta and the page are then fetched from memory and the page is reconstructed.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471246&OS=09471246&RS=09471246
owner: INTERNATIONAL BUSINESS MACHINES CORPORATION
number: 09471246
owner_city: Armonk
owner_country: US
publication_date: 20130411
---
This application is a continuation of and claims priority to U.S. patent application Ser. No. 13 346 412 filed Jan. 9 2012 the contents of which is incorporated herein by reference in its entirety.

The present invention relates to data processing and more particularly to systems methods and computer program products for sharing data. Virtualization technology has matured significantly over the past decade and has become pervasive within the service industry especially for server consolidation. Research and commercial industry is now focused on optimizing the virtual environment to enable more virtual machines VMs to be packed on a single server to lower power consumed in the data center environment to lower cost of the virtualized solution and to efficiently use the available computing resources. A significant limiting factor in accommodating more VMs on a server is memory as the operating systems OS and applications are becoming more resource intensive and require significant physical memory to avoid frequent paging.

Known techniques for more efficiently using memory include 1 content based page sharing and 2 difference engines. Content based page sharing shares identical pages across VMs thereby reducing the amount of physical memory required. A difference engine shares identical as well as similar pages most of the content is identical but some content is different and also reduces the amount of physical memory required. The difference engine technique significantly reduces the amount of physical memory required compared to content based sharing but is computationally very expensive as it implements a Not Recently Used NRU policy and requires the entire memory to be scanned periodically.

Both techniques implement the copy on write technique to avoid the pages from being corrupted. When a write command is received to modify a shared page the copy on write technique causes the shared page to be copied and the write command is implemented on the copy. The copy on write technique thereby prevents the shared page from being corrupted but any memory reduction is reversed as soon as a write command is received because the shared page must be copied.

In one embodiment of the invention a computer implemented method for sharing data comprises receiving by a computer a write command to modify shared data determining by the computer an amount of shared content between i the shared data and ii the shared data if the write command were implemented comparing by the computer the determined amount of shared content to a predefined threshold if the determined amount of shared content is above the predefined threshold creating and storing by the computer a delta that describes a difference between i the shared data and ii the shared data if the write command were implemented and if the determined amount of shared content is not above the predefined threshold creating a copy of the shared data modifying the copy of the shared data as indicated by the write command and storing the modified copy of the shared data by the computer.

In addition to the method for sharing data as described above other aspects of the present invention are directed to corresponding systems and computer program products for sharing data.

Embodiments of the invention may provide the ability to improve on current memory sharing techniques. While embodiments of the invention are described herein in relation to virtual machines it should be appreciated that embodiments of the invention may be used in any computing environment in which data sharing is desirable.

In content based sharing when a VM writes to a page a copy of that page is created. These pages are not identical any more but in most cases have significant similar content. If this similar content can be shared the memory savings may be significant. In embodiments of the invention when a VM writes to a page that is being shared across VMs a share value is calculated to determine how different the page would be if the write command were implemented. If the share value is below a predefined threshold meaning that the page would not be too different then the page is not copied in contrast a standard copy on write operation . Instead the difference between the contents of the pages is stored as a self contained delta. The physical to machine memory map is updated to point to the delta and the delta contains a pointer to the original page. This process may be termed difference on write. When the VM needs to access the page that was stored as a delta the virtual memory points to the machine memory location where the delta is stored and the delta in turn points to the page being shared. The delta and the original page are then fetched from memory and the page is reconstructed.

Virtual memory is frequently implemented using paging. As such embodiments of the invention will be described herein in relation to sharing pages of data. However embodiments of the invention may be used on data that is organized stored referenced using techniques other than paging. In paging a range of consecutive addresses in a virtual address space the range of addresses used by the processor is mapped to a corresponding range of physical addresses of the storage medium. The memory referenced by such a range is called a page. The page size is typically in the range of 512 to 8192 bytes with a few e.g. 4 kilobytes being a common choice.

Referring now to D a flowchart of a method of sharing data and examples of memory maps are respectively illustrated in accordance with an embodiment of the present invention. The memory e.g. machine memory in is scanned to identify pages to share block . The pages to be shared may be identified by identifying pages that are identical or pages that are merely similar. While such scanning is illustrated as being performed only once in such scanning may occur multiple times such as on a periodic or as needed basis. Additionally the identification of identical or similar pages to share may happen on an on going or on the fly basis. illustrates an example memory map before any page sharing occurs. illustrates virtual machines VMthrough VMn. Each virtual machine executes a guest operating system Guest OS and may run one or more applications apps . Each virtual machine utilizes virtual memory which is mapped to machine memory. VMreferences Page Page and Page in virtual memory. Those pages in turn are mapped to corresponding pages in the machine memory. VMand VMn are shown with similar mapped pages. For purposes of this example it is assumed that VM Page is identical to VMn Page . It is further assumed that VM Page is similar enough to VM Page to share.

The identification of identical and similar pages may be done using any suitable technique. For example a hash value may be determined for every page for the entire page and pages with identical hash values identified. This technique is computationally intensive. As another example that is less accurate but also less computationally intensive two hash functions could be identified for each page. Pages for which those two hash functions match could be assumed to be identical.

Regardless of the technique used to identify pages to share identical pages are shared block . Sharing identical pages involves deleting duplicate copies of pages updating the memory map such that all references point to the remaining shared page and marking the remaining page as shared. Similar pages are also shared block by creating encoding and storing a delta that describes the difference from one page to the other similar page. The page for which the delta is encoded is deleted and the memory map is updated for that page to point to the delta. The delta in turn points to the remaining shared page. The remaining shared page is marked as shared. 

As mentioned above for purposes of this example it is assumed that VM Page is identical to VMn Page and that VM Page is similar enough to VM Page to share. illustrates the memory map after these pages are shared. As illustrated in VMn Page has been deleted because it was identical to VM Page and the memory map has been updated so that Page in VMn s virtual memory points to VM Page in machine memory. Although not illustrated VM Page would be marked as shared. 

Similarly VM Page has been deleted because it was similar to VM Page and a delta D has been encoded to describe the difference between VM Page and VM Page . The memory map has been updated so that Page in VM s virtual memory points to D in machine memory which in turn points to VM Page . Although not illustrated VM Page would be marked as shared. 

When a write command is received block that would modify a page it is determined if the page is shared block . If the page is not shared the write command is performed block . If the page is shared a share value is computed block . The share value provides a way of determining how different the resulting page would be from the original shared page if the write command were performed. While the share value is computed based on what the page would look like if the write command were performed the share value is computed before the write command is performed and may result in the write command not being performed as discussed below .

The share value is computed by computing a first Bloom filter for the shared data and computing a second Bloom filter for the shared data if the write command were implemented. A Bloom filter is a space efficient probabilistic data structure that is used to test if an element is a member of a set. Embodiments of the invention use Bloom filters to concisely represent information contained in a page. A logical AND operation is applied to the first and second Bloom filters and the resulting bits are summed. The resulting sum is the share value. As an example of computing a share value consider Page X PgX having content represented by the following twenty four bits of data 

The computed share value is compared to a predefined threshold to determine if the share value is greater than the threshold block . The threshold is typically based on the maximum share value. The maximum share value corresponds to the number of chunks into which the pages are broken in order to compute Bloom filters. In this example the twenty four bit page is broken into six chunks therefore the maximum share value is six. As mentioned above an actual page of data might be 4K in size and might be chunked into sixteen chunks that are each 256 bits thereby having a maximum share value of sixteen. In one embodiment of the invention the threshold is based on a percentage of the maximum share value e.g. 50 .

Setting the threshold to 50 of the maximum share value means that the result of the comparison in block will be NO when the write command would cause the page to have less than 50 of its content still in common with the original shared page. The theory is that it may no longer make sense to share the pages when the differences become too great. To continue the above example the computed share value of four is compared to a threshold that is 50 of the maximum share value that is the threshold is three. When the share value is no longer greater than the threshold as determined at block a copy on write operation is performed i.e. the original shared page is copied and the write command is performed on the copy and both the original and copy are marked as not shared block .

If the computed share value is determined at block to be greater than the threshold which it is in this example since the computed share value is four and the threshold is three a delta is encoded to describe the difference between Page Y if the write command were implemented and Page X block . The delta contains a pointer to Page X. The original shared page Page X may be marked as delta on write to indicate that there is a delta pointing to the original share page. Any suitable delta encoding method may be used. In the example above in which a write command has been received to change the four bit group that is second from the left bits from 0001 to 0100 the encoded delta may have the following format 

In we see the change to the memory map that would occur if Page of VMn were written to. Assuming the share value would still be above the threshold if the write command were implemented a delta D is encoded to describe the difference between VMn Page if the write command were implemented and VM Page . The memory map has been updated so that Page in VMn s virtual memory points to D in machine memory and delta D in turn points to VM Page . Although not illustrated VM Page would be marked as delta on write. Blocks would be repeated for each write command received.

Multiple writes to the same page would result in serially encoded deltas as long as the share value remains greater than the threshold. In we see the change to the memory map that would occur if Page of VMn were again written to. Assuming the share value would still be above the threshold if the write command were implemented a delta D is encoded to describe the difference between a VMn Page if the write command were implemented and b VM Page if the change described in the delta D were implemented note that this would require reconstruction of the page i.e. implementing the change described in D to be able to determine the difference to be described in D . The memory map has been updated so that Page in VMn s virtual memory points to D which in turn points to D which in turn points to VM Page .

Any of the pages for which a delta or multiple deltas has been encoded can be readily reconstructed as needed by decoding the delta or deltas to identify the changes encoded in the delta and applying those changes to the original shared page. If multiple deltas are encoded it is important to decode the deltas in the correct order oldest to newest in order to properly reconstruct the pages.

In addition to the client server arrangement of embodiments of the invention may operate in any client server arrangement or in any networked arrangement in which resources that originate communications and resources that receive communications may reside on separate elements in a network. For example embodiments of the invention may operate in a mobile communications data architecture such as a mobile telecommunications network adhering to the International Mobile Telecommunications 2000 also termed 3G or IMT Advanced also termed 4G standards in which a mobile telecommunications device e.g. cell mobile telephone communicates.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. If the service is also available to applications as a REST interface then launching applications could use a scripting language like JavaScript to access the REST interface. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

 Computer or computing device broadly refers to any kind of device which receives input data processes that data through computer instructions in a program and generates output data. Such computer can be a hand held device laptop or notebook computer desktop computer minicomputer mainframe server cell phone personal digital assistant other device or any combination thereof.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiment was chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

