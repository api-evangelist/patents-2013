---

title: Bus independent platform for sensor hub peripherals to provide coalescing of multiple reports
abstract: A disclosed computer system includes a processor, an I/O hub including a first host bus interface to communicate via a first transport bus, and a sensor hub. The sensor hub includes a first transport bus interface and a sensor hub microcontroller. The sensor hub microcontroller includes a peripheral stack that includes a second transport bus driver to communicate with a peripheral device via a second transport bus. The peripheral device may comply with a device specification such as the human interface device (HID) standard. The peripheral stack further includes a second transport bus plugin to adapt bus-specific operations to generic operations for the device specification, a device class driver to communicate bus-independent peripheral reports based on the generic operations, and a peripheral management module to coalesce multiple peripheral reports into a single instance visible to the I/O hub via the first transport bus interface and the first host bus interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430414&OS=09430414&RS=09430414
owner: Intel Corporation
number: 09430414
owner_city: Santa Clara
owner_country: US
publication_date: 20130316
---
Embodiments described herein generally related to the field of computer systems and more particularly hardware and firmware support for system I O.

Computers and other microprocessor based systems may include peripheral devices that exchange data with the host system. As the number and types of peripheral devices and the number of protocols over which peripheral devices communicate increases and changes it becomes increasingly important to implement peripheral device controllers drivers and other firmware in a flexible and extensible manner.

In at least one embodiment a computer system includes a processor in combination with a first bus interface to a first transport bus a first peripheral device and a hub microcontroller. In one embodiment the hub microcontroller includes a first host bus interface microdriver associated with the first transport bus a first manager client associated with the first peripheral device and a host manager module to detect a communication between the first host and the first peripheral device determine a recipient of the communication access registration information to identify a callback handler associated with the recipient associate the communication with the callback handler and initiate the callback handler to forward the communication to the recipient.

In one embodiment in which the first host is the recipient the callback handler comprises a first host bus interface callback handler and initiating the callback handler includes directing the first host bus interface microdriver to execute the callback handler. The first peripheral device is a human interface device HID including but not limited to USB I2C SPI Bluetooth and PCIe. In an HID compliant embodiment the communication includes an HID formatted input report. The computer system includes a second host that includes a processor and a second bus interface to a second transport bus. The hub microcontroller may include a second host bus interface microdriver associated with the second transport bus. In at least one of these embodiments the registration information includes first host bus interface microdriver registration information identifying the first transport a first callback handler and second host bus interface microdriver registration information identifying the second bus transport and a second callback handler. In at least one of these embodiments the input report identifies a target host interface associated with a transport bus selected from the first transport bus and the second transport bus. In at least one embodiment the host manager module is operable to initiate the first callback handler responsive to the target host interface identifying the first host to forward the input report to the first host via the first bus transport and to initiate the second callback handler responsive to the target host interface identifying the second host to forward the input report to the second host via the second bus transport.

The host manager module is operable in some embodiments to receive the first host bus interface microdriver registration information from the first host bus interface microdriver in response to a registration request from the first host bus interface module receive the second host bus interface microdriver registration information from the second host bus interface microdriver in response to a registration request from the second host bus interface module and receive first manager client registration information from the first manager client in response to a registration request from the first manager client. The registration requests initiate in response to a boot sequence following a system reset. In one embodiment the recipient is the first client interface the first peripheral device is an HID and the communication comprises an HID compliant output report. In one embodiment the callback handler comprises a first client interface callback handler and initiating the callback handler includes directing the first client interface to execute the callback handler. The computer system may further include a second peripheral device a second manager client associated with a second peripheral device. In at least one of these embodiments the registration information includes first client interface registration information identifying the first transport and a corresponding first callback handler as well as second client interface registration information identifying the first transport and a corresponding first callback handler. In some embodiments the first peripheral device includes a sensor including but not limited to a compass an accelerometer a gyroscope a global positioning system GPS device and an ambient light sensor.

Throughout this disclosure a hyphenated form of a reference numeral refers to a specific instance of an element and the un hyphenated form of the reference numeral refers to the element generically or collectively. Thus widget refers to an instance of a widget class which may be referred to collectively as widgets and any one of which may be referred to generically as a widget .

Turning now to the drawings illustrates a computer system that includes at least one embodiment of a peripheral device microcontroller. As illustrated in system includes a processor with an integrated memory controller and graphics adapter and an I O hub to provide various I O interfaces. In a core region of processor includes a first processing core with a first core cache and a second processing core with a second core cache . Although the illustrated core region includes two cores other embodiments may include more or fewer cores. Each core cache includes one or more cache memories. In at least one embodiment each core cache includes a level one L1 data cache to store data an L1 instruction cache to store instructions and an intermediate or level L2 cache to store both data and instructions.

An uncore region of processor includes memory controller graphics adapter and a level 3 L3 cache memory shared between processing cores and and referred to herein as shared cache . Memory controller provides an interface between processor and system memory . In at least one embodiment graphics adapter provides graphics processing and video decoding for a display . Although the illustrated processor and system depict memory controller and graphics adapter integrated within uncore region of processor other embodiments may provide memory control and or graphics control functionality in I O hub or another chipset device.

As illustrated in I O hub includes a network interface to provide a communication transport suitable for a network which may be a wired or wireline public or private network and an interface to provide a storage transport to which one or more storage adapters . illustrates nonvolatile mass storage in which an operating system OS is stored connected to storage adapter . Nonvolatile mass storage may include but is not limited to a magnetic core hard disk drive a solid state drive and a phase change RAM. Some embodiments of I O hub include an interface that provides a low bandwidth bus including but not limited to SPI I2C and legacy ISA busses. Some embodiments of I O hub provide one or peripheral bus controllers for one or more corresponding peripheral buses including but not limited to USB I2C Bluetooth and Zigbee.

In I O hub includes a peripheral transport interface to support communication with one or more peripheral devices over a peripheral device transport . Peripheral device transport may be embodied as a USB transport an I2C transport a Bluetooth transport a PCIe transport or another suitable transport. Although some embodiments include a single transport other embodiments may support two or more additional peripheral device transports.

As illustrated in system includes a sensor hub to support one or more peripheral devices. In at least one embodiment sensor devices include HID compliant sensors. HID specifies a format by which a device or client defines its capabilities to a host device in a structured exchange. Thereafter information or data may be transferred from host to client or client to host. Although HID was defined in conjunction with devices including keyboards and mice with which humans interact the format is more generally applicable to other categories of devices including sensors.

Although identified as a sensor hub sensor hub may support other peripheral devices as well including but not limited to HID compliant peripheral devices including but not limited to keyboards computer mouse touchscreens and touchpads. illustrates sensor hub including interfaces and to which a first sensor chip and a second sensor chip are connected. Other embodiments may include more or fewer sensor chips. Embodiments of sensor chips include gyroscopes accelerometers global GPS devices compasses ambient light sensors and other suitable sensors. The term sensor as used herein refers to a category or class of HID that while not requiring human interaction provides data in a similar form. At least some sensors receive environmental rather than human input.

Turning now to an illustrated system includes a sensor aware application program and an operating system kernel stored in system memory accessible to processor via memory controller . Operating system kernel includes one or more driver stack s to support one or more host bus interfaces in I O hub .

In the embodiment of computer system illustrated in I O hub supports host bus interfaces and . In at least one embodiment the peripheral transport is a USB transport transport is an I2C transport and transport is a Bluetooth transport.

As illustrated in computer system includes a sensor hub and an sensor hub microcontroller . In at least one embodiment sensor hub includes a printed circuit board or card and sensor hub microcontroller is an embedded device. illustrates sensor hub including hardware interface providing an interface for peripheral transport interface providing an interface for peripheral transport and interface providing an interface for peripheral transport .

A client side of sensor hub as illustrated in includes a first sensor a second sensor and HID peripheral devices and . A keyboard communicates with sensor hub via a Bluetooth interface . An HID over I2C touchpad and an HID over I2C touchscreen connect to sensor hub via respective I2C interfaces.

Computer system illustrates the ability to connect powerful devices compliant with the various powerful transports and to connect them to a common microcontroller for use with any of various protocol transports provided by I O hub . Although illustrates two sensors and three HID peripherals connected to sensor hub microcontroller over three different transports other embodiments may include more fewer and or different devices sensors and or transports.

Referring now to an embodiment of sensor hub microcontroller functions as a registrar for host interface microdrivers and client manager firmware and as a crossbar for communications between hosts and peripheral devices. In sensor hub microcontroller includes host interface microdrivers and one for each type of host interface bus. In host interface microdriver is associated with host 1 interface host 2 interface microdriver is associated with host 2 and host 3 interface microdriver is associated with .

The illustrated microcontroller further includes a host interface module to server as a crossbar or router between the host interface busses and the rest of the internal sensor hub firmware. In at least one embodiment each host interface microdriver registers itself with host manager module at boot up initialization time for statically configured buses or dynamically at runtime for plug and play buses as needs arise. Host manager module stores information about registered host interface microdrivers in storage medium as host interface microdriver registration storage .

Referring to Host interface microdriver registration information can include but is not limited to entries for multiple host interface microdrivers where each entry indicates information including but not limited to a bus identifier bus name a callback handler for forwarding asynchronous HID input reports from peripheral to host a callback handler for determining host power state using bus specific means and a callback handler for waking the host with bus specific needs.

Returning to In at least one embodiment the sensor hub microcontroller also includes a multiplicity of manager clients which process messages from one or more hosts. Clients register themselves with host manager module at firmware boot up initialization time or dynamically at run time as needs arise. The host manager module stores information about registered clients in storage medium as host interface microdriver registration storage .

Referring to manager client registration information can include but is not limited to a client identifier client name called back handler for forwarding device DX state power requests to the internal firmware and a multiplicity of callbacks e.g. for each synchronous HID report request specified by a request type HID report ID tuple. A manager client may register the same callback for one or more tuples or have separate handlers for each tuple. In at least one embodiment sensor hub is an HID compliant sensor hub that advertises more than one HID top level collections TLCs in its HID report descriptor including but not limited to a TLC for HID sensor collection a TLC for HID keyboard a TLC for HID mouse and or a TLC for HID touch screen. Each of these TLC s may have different protocol requirements HID report formats and separate independent client modules for each is both a flexible and efficient partitioning and encapsulation strategy.

In sensor hub microcontroller connects to host operating system by means of one or more bus interfaces via an HID stack and supporting device drivers including but not limited to USB drivers U PCI express drivers P and or I2C drivers I. For example in at least one embodiment the I2C drivers I include an HID over I2C miniport driver a simple peripheral bus framework SPB and a vendor supplied I2C controller driver. The sensor hub microcontroller provides its internal firmware modules to these buses via a host manager module and one host interface microdriver per bus type including but not limited to USB host interface microdriver U PCI express host interface driver P and or I2C host interface microdriver I.

Firmware for sensor hub microcontroller firmware includes an HID report descriptor containing HID top level collections TLCs describing virtual HID peripherals including but not limited to HID virtual keyboard TLC HID virtual mouse TLC HID virtual touchscreens TLC and HID virtual digitizer configuration TLC .

The HID virtual keyboard TLC and HID virtual mouse TLC conform to the operation of an HID keyboard and HID mouse as described in the HID specification version 1.11 adopted and published by the USB implementers forum USB IF .

The HID virtual touchscreen TLC and HID virtual digitizer configuration TLC conform to the operation of a HID touchscreen as described in the HUTRR specification adopted and published by the USB implementers forum USB IF .

The sensor hub microcontroller firmware also contains an HID peripheral manager module to send and receive HID reports input reports output reports and feature reports between actual physically connected HID peripherals and a host operating system to which the sensor hub is attached.

The HID peripherals that are physically connected via the I2C bus and one or more GPIOs for example I2C interrupt line may conform to the HID over I2C specification version 1.0 or later and or the Modern Touchpad Specification 1.05 or later Microsoft Corporation . These HID peripherals include but are not limited to HID over I2C touchscreen HID over I2C touchpad and HID over I2C keyboard .

The firmware uses an I2C bus class driver and GPIO interrupts driver to interface directly to these peripherals. Other HID peripherals may be physically connected by means of other buses and their supporting bus drivers . The sensor hub microcontroller firmware also contains an HID peripheral device extraction module called the HID class driver . Bus specific plug ins adapt generic HID class operations to bus specific operations by means of adaptation drivers including but not limited to HID over I2C miniport driver and HID over other bus miniport drivers appropriate for other buses.

Internal sensor hub firmware modules such as the HID peripheral manager receive HID reports in a bus independent fashion via the generic HID class driver . The HID reports may include but are not limited to HID touchscreen reports HID digitizer configuration reports HID mouse reports and HID keyboard reports. The HID peripheral manager is responsible for coalescing multiple such reports from underlying peripherals into a single instance of each as visible by the host operating system.

Referring now to a block diagram illustrates selected elements of at least one embodiment of a multiprocessor system platform used in conjunction with one or more embodiments. As illustrated in system includes a first processor a second processor and an I O hub referred to herein as near hub . Near hub communicates with processor over a point to point interconnect connected between a point to point interface of near hub and a point to point interface of processor . Similarly near hub communicates with processor via point to point interconnect between point to point interface of near hub and point to point interface of processor . In near hub also includes a graphics interface to communicate with a graphics adapter over a dedicated graphics bus which may be a PCI Express or other suitable type of interconnection. Multiprocessor system platform may further include a point to point interconnect not illustrated between processor and processor . The point to point interconnects illustrated in include a pair of uni directional interconnections with one of the interconnections communicating data from the applicable processor to near hub and the other interconnection communicating data from near hub to the processor .

The processors may be described as including a core portion and an uncore portion . The core portions of the processors include multiple processor cores referred to herein simply as cores through . Each core may include logic implemented in hardware firmware or a combination thereof that provides as examples an execution pipeline suitable for fetching interpreting and executing instructions and storing or otherwise processing results of those instructions. Uncore portions of the processors may include a system memory controller MC a cache memory referred to herein as the last level cache and an interrupt controller . Each system memory interface may perform various memory controller functions. Last level cache may be shared among each of the cores of processor .

The multiprocessor system platform employs a distributed or non uniform system memory architecture in which the system memory as a whole is implemented as a plurality of system memory portions with each system memory portion being directly connected to a processor via a corresponding memory interconnect and system memory controller . In this distributed memory configuration each processor may interface directly with its corresponding system memory portion via its local system memory controller . In addition any processor e.g. processor may read from or write to a memory portion e.g. system memory portion associated with a different processor e.g. processor but the originating processing may need to go through one or more point to point interconnects to do so. Similarly the last level cache of each processor may cache data from its own processor s system memory portion or from another processor s system memory portion.

Although depicts a distributed memory configuration other embodiments may employ a uniform memory architecture in which for example the entire system memory is connected to a memory controller implemented in near hub rather than having multiple system memory portions each connected to a corresponding processor specific memory controller implemented in the uncores of each processor . Such a system is described below with respect to . Moreover although depicts a point to point configuration in which processors communicate with each other and with near hub via dedicated point to point interconnections other embodiments may employ a shared system bus to which each of the processors and near hub is connected.

As illustrated in system platform near hub includes an I O interface to communicate with a far hub over an I O interconnection . Far hub may integrate within a single device adapters controllers and ports for various interconnection protocols to support different types of I O devices. The illustrated implementation of far hub includes as an example an expansion bus controller that supports an expansion bus that complies with PCI PCI Express or another suitable bus protocol. Examples of functions that may be provided via expansion bus include a network adapter an audio controller and a communications adapter . Network adapter may enable communication with an IEEE 802.11 family or other type of wireless data network a Gigabit Ethernet or other type of wire line data network or both. Audio controller may include or support high definition audio codecs. Communications adapter may include or support modems and or transceivers to provide wireless or wire line telephony capability. Bus controller may further recognize a bus bridge that supports an additional expansion bus where expansion bus and expansion bus have the same protocol or different protocols. Far hub may further include a high bandwidth serial bus controller that provides one or more ports of a USB or other suitable high bandwidth serial bus .

As illustrated in far hub further includes a storage adapter that supports a persistent storage interconnect such as an Integrated Drive Electronics IDE interconnect a Serial ATA interconnect a SCSI interconnect or another suitable storage interconnect to a storage drive that controls persistent storage . Far hub may further include a Low Pin Count LPC controller that provides an LPC bus to connect low bandwidth I O devices including as examples a keyboard a mouse a parallel printer port not illustrated and an RS232 serial port not illustrated . Multiprocessor system platform as illustrated in employs a Super I O chip to interface keyboard and mouse with LPC controller .

As illustrated in system platform emphasizes a computer system that incorporates various features that facilitate handheld or tablet type of operation and other features that facilitate laptop or desktop operation. In addition As illustrated in system platform includes features that cooperate to aggressively conserve power while simultaneously reducing latency associated with traditional power conservation states.

As illustrated in system platform includes an operating system that may be entirely or partially stored in a persistent storage . Operating system may include various modules application programming interfaces and the like that expose to varying degrees various hardware and software features of system platform . As illustrated in system platform includes for example a sensor API a resume module a connect module and a touchscreen user interface . System platform as illustrated in may further include various hardware firm features including a capacitive or resistive touch screen controller and a second source of persistent storage such as a solid state drive SSD .

Sensor API provides application program access to one or more of the sensors not illustrated in that may be included in system platform . The resume module may be implemented as software that when executed performs operations for reducing latency when transitioning system platform from a power conservation state to an operating state. Resume module may work in conjunction with SSD to reduce the amount of SSD storage required when system platform enters a power conservation mode. Resume module may for example flush standby and temporary memory pages before transitioning to a sleep mode. By reducing the amount of system memory space that system platform is required to preserve upon entering a low power state resume module beneficially reduces the amount of time required to perform the transition from the low power state to an operating state. The connect module may include software instructions that when executed perform complementary functions for conserving power while reducing the amount of latency or delay associated with traditional wake up sequences. For example connect module may periodically update certain dynamic applications including as examples email and social network applications so that when system platform wakes from a low power mode the applications that are often most likely to require refreshing are up to date. The touchscreen user interface supports a touchscreen controller that enables user input via touchscreens traditionally reserved for handheld applications. In the inclusion of touchscreen support in conjunction with support for keyboard and mouse enable system platform to provide features traditionally found in dedicated tablet devices as well as features found in dedicated laptop and desktop type systems.

Embodiments may be implemented in code and may be stored on a storage medium having stored thereon instructions which can be used to program a system to perform the instructions. The storage medium may include but is not limited to any type of disk including floppy disks optical disks compact disk read only memories CD ROMs compact disk re writables CD RWs and magneto optical disks semiconductor devices such as read only memories ROMs random access memories RAMs such as dynamic random access memories DRAMs static random access memories SRAMs erasable programmable read only memories EPROMs flash memories electrically erasable programmable read only memories EEPROMs magnetic or optical cards or any other type of media suitable for storing electronic instructions.

To the maximum extent allowed by law the scope of the present disclosure is to be determined by the broadest permissible interpretation of the following claims and their equivalents and shall not be restricted or limited to the specific embodiments described in the foregoing detailed description.

