---

title: Multiple stage workload management system
abstract: Provided are techniques for multiple stage workload management. A staging queue and a run queue are provided. A workload is received. In response to determining that application resources are not available and that the workload has not been previously semi-started, the workload is added to the staging queue. In response to determining that the application resources are not available and that the workload has been semi-started, and, in response to determining that run resources are available, the workload is started. In response to determining that the application resources are not available and that the workload has been semi-started, and, in response to determining that the run resources are not available, adding the workload to the run queue.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09304816&OS=09304816&RS=09304816
owner: International Business Machines Corporation
number: 09304816
owner_city: Armonk
owner_country: US
publication_date: 20130805
---
Workload Management WLM systems are used to help control access to machine resources. Typically WLM systems consist of monitors that are tracking the usage of the resources that they are monitoring and managing work queues to store workloads that are not able to run immediately and policies for determining which workload should run next. WLM systems may be implemented at low levels in a software stack e.g. at an Operating System OS level or at lower levels.

Data integration may be described as extracting data from a source transforming the data and loading the data to a target. That is data integration is Extract Transform Load ETL processing. Data integration processing engines may be scalable and capable of processing large volumes of data in complex data integration projects. It is common for multiple users e.g. customers and projects to share a single data integration processing engine that is responsible for handling all of the data integration processing for those multiple users. This high volume highly concurrent processing may be resource intensive and users try to balance the availability of system resources with the need to process large volumes of data efficiently and concurrently.

Due to the complexity of these environments some data integration execution environments need application level workload management functionality rather than low level e.g. OS level functionality. The resources that need to be managed may be application resources which are a form of logical resources as opposed to system resources e.g. Central Processing Unit CPU memory storage etc. .

A WLM system may be designed to manage the number of workloads that are running concurrently indirectly managing the machine resources required to run the workloads. The WLM system may also manage the number of workloads that are allowed to start in a given time window. These two aspects may be described as application resources that the WLM system is managing.

While managing application level resources a WLM system itself uses some logical application level resources in order to track and manage workloads which may or may not be a resource that it is intended to manage . For example the WLM system may prepare and hold incoming workloads which may consume one or more application resources while not placing much additional load on physical machine resources .

That is the WLM system uses some resources to queue workloads for execution. It is possible that there are physical machine resources available to use but the application s WLM system does not have resources to manage anymore workloads. For example an application may have a logical resource slot for handling 100 items that are executing which exceeds what the physical machine can actually execute concurrently. With a WLM system in place workloads may be queued up which takes little additional machine resource but may consume a logical resource i.e. a slot . When enough of these workloads are queued up this logical resource may be exhausted.

Although there are machine resources available when logical resources are exhausted current WLM systems may become unstable and or fail with unexpected error conditions.

In some cases the WLM system reaches the state that no more workloads can be prepared and the WLM rejects the workload outright. Then the client may re submit the workload at a later time.

In some other cases the client automatically tries to re submit the workload until the WLM system will take that workload. In such cases it may be difficult to determine the frequency of re submissions. Also if multiple clients are trying to re submit workloads then any one of the clients may have its workload accepted by the WLM system regardless of when or how often that client has re submitted its workload. This can lead to situations where one submitted workload can wait for hours and not get into the WLM system while another workload waits only seconds and takes a newly available slot. Moreover the state of the workload is undefined in that the WLM system knows nothing about that workload until the workload is accepted by the WLM system. So the WLM system will not report this workload as existing in a queue and the WLM system does not utilize any of the WLM queue management functions on the workload moving up in the queue switching queues cancelling the workload .

Also more organization to the client re submissions may added by creating a centralized queuing mechanism that is not managed by the WLM system.

Provided is a method for multiple stage workload management. The method comprises providing using a processor of a computer a staging queue and a run queue receiving a workload in response to determining that application resources are not available and that the workload has not been previously semi started adding the workload to the staging queue and in response to determining that the application resources are not available and that the workload has been semi started in response to determining that run resources are available starting the workload and in response to determining that the run resources are not available adding the workload to the run queue.

Provided is a computer program product for multiple stage workload management. The computer program product comprises a computer readable storage medium having program code embodied therewith the program code executable by at least one processor to perform providing a staging queue and a run queue receiving a workload in response to determining that application resources are not available and that the workload has not been previously semi started adding the workload to the staging queue and in response to determining that the application resources are not available and that the workload has been semi started in response to determining that run resources are available starting the workload and in response to determining that the run resources are not available adding the workload to the run queue

Provided is a computer system for multiple stage workload management. The computer system comprises one or more processors one or more computer readable memories and one or more computer readable tangible storage devices and program instructions stored on at least one of the one or more computer readable tangible storage devices for execution by at least one of the one or more processors via at least one of the one or more memories to perform providing a staging queue and a run queue receiving a workload in response to determining that application resources are not available and that the workload has not been previously semi started adding the workload to the staging queue and in response to determining that the application resources are not available and that the workload has been semi started in response to determining that run resources are available starting the workload and in response to determining that the run resources are not available adding the workload to the run queue.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

In a data integration processing engine interacts with the WLM server . The data integration processing engine processes data integration workloads i.e. ETL workloads and the WLM server allows management of these data integration workloads using ETL metrics. In certain embodiments a workload is a job.

The WLM server includes a Representational State Transfer REST service layer a socket server and a workload management WLM core .

The data integration processing engine is coupled to a command line client WLMClient Application Programming Interface API . The data integration processing engine is also coupled to a socket client . The command line client WLMClient API are coupled to the REST service layer at the WLM server . The socket client is coupled to a socket server at the WLM server . The workload management core includes the following components a queue manager that manages for example active queues and workload queues a workload repository for storing workload information a configuration manager a policy engine a resource manager persistence storage for storing a file a database etc. and a priority manager .

The configuration manager manages one or more configuration files . A configuration file may be described as a file e.g. an Extensible Markup Language XML file containing class description resource policies priority rules and system parameter settings.

The policy engine manages the one or more resources policies . A resource policy may be described as a policy for how physical and logical resources are to be used.

The priority manager manages one or more priority rules . A priority rule may be described as providing a technique for assigning a priority to a workload.

The workload management core enables creation and management of ETL workloads via an asynchronous queuing mechanism. The workload management core uses two level abstraction to represent both logical and physical resources grants users e.g. applications executing at the data integration processing engine control over workload priority and scheduling and determines workload execution order based on three factors at least one user specified run schedule at least one priority rule i.e. either system provided or user specified and at least one resource policy .

Embodiments include monitoring e.g. tracking application resources that are held by semi started workloads. The WLM system monitors the application resources along with the other logical resources that the WLM system is managing. The WLM system may also monitor the depth of queues and wait times to determine statistically whether a new workload is likely to wait in a queue long time.

In certain embodiments the WLM system includes a WLM client and a WLM server. In certain embodiments after a workload is submitted to the WLM system the WLM system performs processing in two stages. In a first stage the WLM client allocates application resources e.g. a handle locks on log files etc. for the submitted workload . This is to guarantee a workload is allocated with sufficient logical resources and to enable faster start up when the workload is able to execute. The WLM client communicates with the WLM server to determine whether or not the workload can be run immediately or whether it will be queued. In the first stage the workload is semi started.

In the second stage the WLM system sends the workload to the parallel engine that spawns processes worker processes corresponding to tasks or subtasks to complete the workload. In the second stage the workload is fully started as opposed to semi started in stage 1 . The WLM server places workloads in run queues during stage 1 based on workload classification rules. When the system resources are available and workload run policies are met the WLM system sends the workload to stage 2.

Embodiments add a staging queue corresponding to each run queue. The staging queue is used to stage workloads when application resources needed to semi start the workload become strained or to more efficiently manage workloads that are likely to be in a queue for a long period of time.

With embodiments a preceding processing stage is added to the WLM system. When the WLM system detects that the application resources that are needed to semi start the workload are becoming scarce the WLM system may begin staging workloads in the staging queue such that queuing the workloads in the WLM system does not place additional demand on the scarce application resources.

In particular the WLM system obtains a workload that must be executed. If the WLM system decides a workload cannot run at the moment the WLM system places the workload in a queue. If sufficient application resources exist the workload is allowed to go through stage 1 and is placed in a run queue. The WLM system then decides on when the workload can go to stage 2 based on the policies and resource availability. When a workload is placed in a run queue by the WLM system the workload holds application resources and is semi started. If sufficient application resources needed to semi start the workload do not exist the workload is placed in a staging queue and is not allowed to go through stage 1. The WLM system decides when the workload can be semi started and moved to a run queue based on the policies and application resources availability.

When a workload is run the workload consumes application resources e.g. a handle locks on log files etc. as well as other resources e.g. system resources. When a workload is semi started many of these application resources are allocated which consumes these application resources all the while the workload is held in the WLM system run queue.

The WLM system tracks the usage of these application resources. Since the WLM system knows the amount of application resources that are required to queue workloads and knows how many workloads are queued the WLM system tracks the usage and detects when the application resources have become scarce or exhausted.

There are multiple stages in the WLM system. The run queue group includes the workloads that are actively tracked and managed by the WLM system. The WLM system submits workloads based on priority rule setting etc. in the run queue group to run when system resources e.g. CPU memory storage etc. become available.

The queues created in the staging queue group mirror the queues created in the run queue group . The WLM system places workloads in queues in the staging queue group when application resources are exhausted or statistically these workloads will not be sent to run in a relatively long period of time e.g. workloads in the back of a long queue . If application resources are available workloads submitted to the WLM system pass through the staging queue group and go immediately to the run queue group .

Workloads in the staging queue group do not consume application resources e.g. handles locks on log files etc. . Statistically these workloads will not be sent to run immediately. The WLM system does not track and manage the workloads in the staging queue group actively. Workloads in the queues of the staging queue group are considered in sleep state by the WLM system. Hence it is very light weight for the WLM system to manage workloads in the staging queue group .

Furthermore as opposed to workloads in the run queue group that hold application resources workloads in the staging queue group do not hold these resources. So application resources will unlikely be exhausted provided a pre calculated and fixed number of slots are allowed in the run queue group that are within the capacity of the logical resources.

After the WLM system submits a workload in the run queue group to run and the workload finishes logical resources for a workload become available. Then the WLM system moves a workload from the staging queue group to the run queue group .

When a workload is moved from the staging queue group to the run queue group the workload goes to the same priority queue. In this manner priority of a workload is preserved.

With embodiments the group into which the workload is placed is transparent to an application that is sending the workload to the WLM system.

The WLM client calls checkWorkload which contacts the WLM server with the workload ID block . The checkWorkload handler returns a resource status flag to the WLM client block .

In block the WLM server determines whether application resources needed to semi start the workload are available using the resource status flag or whether the expected wait time in the queue is long and flags the WLM client as to the status. If so processing continues to block otherwise processing continues to block . In block the WLM client calls prepareWorkload to semi start the workload. In block the WLM client determines whether run resources are available. If so processing continues to block otherwise processing continues to block . In block the WLM client starts the workload.

If application resources are not available at block processing continues to block . In block the WLM client determines whether the workload has been semi started. If so processing continues to block otherwise processing continues to block . In block the WLM client determines whether run resources are available. If so processing continues to block otherwise processing continues to block . In block the workload is added to a run queue in the run queue group based on a priority of the workload. From block processing continues to block . In block the WLM client calls getWaitTime which contacts the WLM server with the workload ID. The getWaitTime Handler returns an estimated wait time e.g. in seconds to the WLM client block . From block processing continues to block to wait the estimated wait time. Then processing continues from block to block .

If the workload has not been semi started at block processing continues to block . In block the WLM client adds the workload to a staging queue in the staging queue group. From block processing continues to block .

Thus if the return code 4 both application resources and run resources are available this leads to the Yes branch of block being followed. Function prepareWorkload will be called to semi start the workload. If the workload has been semi started previously prepareWorkload does not need to perform any additional processing. Also the Yes branch of block is followed and the workload is sent to run.

If the return code 2 application resources are available but run resources are not available this leads to the Yes branch of block being followed. Function prepareWorkload will be called to semi start the workload. If the workload has been semi started previously prepareWorkload does not need to perform any additional processing. Also the No branch of block is followed and the workload is placed in the run queue group.

If the return code 1 application resources are not available and run resources are available this leads to the No branch of block being followed. Then if the workload has not been semi started this leads to the No branch of block being followed and the workload is placed in the staging queue group. However if the workload has been previously semi started this leads to the Yes branch of block and the Yes branch of block and the workload is sent to run.

If the return code 0 neither application resources nor run resources are available this leads to the No branch of block being followed. Then if the workload has not been semi started previously this leads to the No branch of block being followed and the workload is placed in the staging queue group. However if the workload has been semi started previously this leads to the Yes branch of block and the No branch of block being followed and the workload is placed in the run queue group.

In certain embodiments for workloads that cannot be run the WLM client calls the checkWorkload handler to get an estimated wait time Nwait waits Nwait amount of time e.g. seconds and calls checkWorkload.

Thus embodiments create a mechanism such that the WLM system can stage a workload in a different way when the application resources the WLM system needs to operate become scarce. That is the WLM system can stage the workload proactively to avoid an application resource shortage.

Embodiments better control logical resources required for workload startup. Embodiments determine whether a job should be staged semi started or run immediately.

In certain embodiments an extension to a client server based workload management system that is controlling the starting of parallel data flows is provided. In such embodiments a technique for queuing work within the workload management system utilizes hybrid queues . The first part of the queue the run queue contains workloads that are in a semi started state e.g. some amount of preparation has been done such that the workload is ready to run and workloads in this state use some amount of resource logical and physical . The second part of the queue the staging queue contains workloads that are not started at all but are intended to be run . These 2 queues together form a single queue from the perspective of the WLM system. This technique allows the WLM system to continue to queue up work even when the resources it needs to store workloads in the prepared state are not available while not introducing additional complexities into the overall management configuration and usage of the WLM system since all of the WLM policies workload classification and queue management functions continue to work with these queues.

It is understood in advance that although this disclosure includes a detailed description on cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud model may include at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but may be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based email . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It may be managed by the organization or a third party and may exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It may be managed by the organizations or a third party and may exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Referring now to a schematic of an example of a cloud computing node is shown. Cloud computing node is only one example of a suitable cloud computing node and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless cloud computing node is capable of being implemented and or performing any of the functionality set forth hereinabove.

In cloud computing node there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in cloud computing node is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to a processor or processing unit .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnects PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

Referring now to illustrative cloud computing environment is depicted. As shown cloud computing environment comprises one or more cloud computing nodes with which local computing devices used by cloud consumers such as for example personal digital assistant PDA or cellular telephone A desktop computer B laptop computer C and or automobile computer system N may communicate. Nodes may communicate with one another. They may be grouped not shown physically or virtually in one or more networks such as Private Community Public or Hybrid clouds as described hereinabove or a combination thereof. This allows cloud computing environment to offer infrastructure platforms and or software as services for which a cloud consumer does not need to maintain resources on a local computing device. It is understood that the types of computing devices A N shown in are intended to be illustrative only and that computing nodes and cloud computing environment can communicate with any type of computerized device over any type of network and or network addressable connection e.g. using a web browser .

Referring now to a set of functional abstraction layers provided by cloud computing environment is shown. It should be understood in advance that the components layers and functions shown in are intended to be illustrative only and embodiments of the invention are not limited thereto. As depicted the following layers and corresponding functions are provided 

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM WebSphere application server software and database software in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide .

Virtualization layer provides an abstraction layer from which the following examples of virtual entities may be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer may provide the functions described below. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources may comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment provide pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment may be utilized. Examples of workloads and functions which may be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and multiple stage workload management processing.

Thus in certain embodiments software or a program implementing multiple stage workload management processing in accordance with embodiments described herein is provided as a service in a cloud environment.

In certain embodiments the data integration processing engine and or the WLM server has the architecture of computing node . In certain embodiments the data integration processing engine and or the WLM server is part of a cloud environment. In certain alternative embodiments the data integration processing engine and or the WLM server is not part of a cloud environment.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to flow diagram e.g. flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The flowcharts and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowcharts or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowcharts illustration and combinations of blocks in the block diagrams and or flowcharts illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

In addition the illustrated operations of the flow diagrams and block diagrams show certain events occurring in a certain order. In alternative embodiments certain operations may be performed in a different order modified or removed. Moreover operations may be added to the above described logic and still conform to the described embodiments. Further operations described herein may occur sequentially or certain operations may be processed in parallel. Yet further operations may be performed by a single processing unit or by distributed processing units.

The code implementing the described operations may further be implemented in hardware logic or circuitry e.g. an integrated circuit chip Programmable Gate Array PGA Application Specific Integrated Circuit ASIC etc. The hardware logic may be coupled to a processor to perform operations.

Devices that are in communication with each other need not be in continuous communication with each other unless expressly specified otherwise. In addition devices that are in communication with each other may communicate directly or indirectly through one or more intermediaries.

A description of an embodiment with several components in communication with each other does not imply that all such components are required. On the contrary a variety of optional components are described to illustrate the wide variety of possible embodiments of the present invention.

Further although process steps method steps algorithms or the like may be described in a sequential order such processes methods and algorithms may be configured to work in alternate orders. In other words any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further some steps may be performed simultaneously.

When a single device or article is described herein it will be readily apparent that more than one device article whether or not they cooperate may be used in place of a single device article. Similarly where more than one device or article is described herein whether or not they cooperate it will be readily apparent that a single device article may be used in place of the more than one device or article or a different number of devices articles may be used instead of the shown number of devices or programs. The functionality and or the features of a device may be alternatively embodied by one or more other devices which are not explicitly described as having such functionality features. Thus other embodiments of the present invention need not include the device itself.

The terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the invention. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The terms an embodiment embodiment embodiments the embodiment the embodiments one or more embodiments some embodiments and one embodiment mean one or more but not all embodiments of the present invention s unless expressly specified otherwise.

The terms including comprising having and variations thereof mean including but not limited to unless expressly specified otherwise.

The enumerated listing of items does not imply that any or all of the items are mutually exclusive unless expressly specified otherwise.

The corresponding structures materials acts and equivalents of all means or step plus function elements in the claims below are intended to include any structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of embodiments of the present invention has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the invention in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the invention. The embodiments were chosen and described in order to best explain the principles of the invention and the practical application and to enable others of ordinary skill in the art to understand the invention for various embodiments with various modifications as are suited to the particular use contemplated.

The foregoing description of embodiments of the invention has been presented for the purposes of illustration and description. It is not intended to be exhaustive or to limit the embodiments to the precise form disclosed. Many modifications and variations are possible in light of the above teaching. It is intended that the scope of the embodiments be limited not by this detailed description but rather by the claims appended hereto. The above specification examples and data provide a complete description of the manufacture and use of the composition of the embodiments. Since many embodiments may be made without departing from the spirit and scope of the invention the embodiments reside in the claims hereinafter appended or any subsequently filed claims and their equivalents.

