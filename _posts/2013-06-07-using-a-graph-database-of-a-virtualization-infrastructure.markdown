---

title: Using a graph database of a virtualization infrastructure
abstract: In a computer-implemented method for providing management of a virtualization infrastructure, a query related to the virtualization infrastructure is received. A graph database of the virtualization infrastructure is accessed, the graph database including nodes associated with members of the virtualization infrastructure and edges associated with relationships of the members of the virtualization infrastructure, wherein the nodes and the relationships include types. An answer to the query is received from the graph database.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09355163&OS=09355163&RS=09355163
owner: VMware, Inc.
number: 09355163
owner_city: Palo Alto
owner_country: US
publication_date: 20130607
---
This application is related to co pending U.S. patent application Ser. No. 13 912 358 also filed on Jun. 7 2013 entitled USING A GRAPH DATABASE OF A VIRTUALIZATION INFRASTRUCTURE by Soundararajan et al. and assigned to the assignee of the present application.

Administration of virtualization infrastructures such as virtual datacenters is increasingly complex. One of the biggest challenges in virtualized deployments is keeping track of the basic health of the infrastructure. Administrators would like to quickly be informed when problems occur and would also like to have guidance about how to solve issues when they arise. These problems are frequently exacerbated as the virtualized deployments increase in scale. Conventional means for monitoring these large environments typically focus on aggregating and summarizing the amount of data to manageable quantities. Reducing this data is typically challenging in that both identifying serious issues in the virtualization and intelligent data visualization techniques are valuable.

Automated techniques for monitoring the health of virtualization infrastructure have become increasingly prevalent and helpful. Such approaches typically leverage the collection and analysis of a large number of metrics across an environment in order to provide a concise simplified view of the status of the entire environment. However despite the success of such tools significant amounts of training is often still required in order to obtain to obtain proficiency at understanding and using the output of such tools.

Reference will now be made in detail to various embodiments examples of which are illustrated in the accompanying drawings. While various embodiments are discussed herein it will be understood that they are not intended to be limiting. On the contrary the presented embodiments are intended to cover alternatives modifications and equivalents which may be included within the spirit and scope the various embodiments as defined by the appended claims. Furthermore in this Description of Embodiments numerous specific details are set forth in order to provide a thorough understanding. However embodiments may be practiced without one or more of these specific details. In other instances well known methods procedures components and circuits have not been described in detail as not to unnecessarily obscure aspects of the described embodiments.

Unless specifically stated otherwise as apparent from the following discussions it is appreciated that throughout the present Description of Embodiments discussions utilizing terms such as receiving populating associating assigning updating determining creating retrieving detecting identifying generating or the like often refer to the actions and processes of an electronic computing device or system such as a virtualization management server or a virtual machine VM among others of a virtualization infrastructure. The electronic computing device system transmits receives stores manipulates and or transforms signals represented as physical electrical quantities within the circuits components logic and the like of the electronic computing device system into other signals similarly represented as physical electrical quantities within the electronic computing device system or within or transmitted to other electronic computing devices systems.

As previously described in the background the administration of virtualization infrastructures is a complex endeavor. A typical virtualization administrator may be responsible for the management of hundreds of hosts and thousands of VMs. Typically virtualization administrators are reliant on virtualization administration tools that provide a plethora of information. However it is often difficult to distill this information into a manageable form due to the large scale of many virtualization deployments.

At least some embodiments of the present invention provide for the creation of a social network of members of a network of members. For instance where the network is a virtualization infrastructure the members of the virtualization infrastructure are mapped into a social network based on the parent child relationships of the members. Affiliation relationships are established between parent members and child members of the virtualization infrastructure allowing members to follow other members.

At least some embodiments of the present invention utilize social networking between members of the virtual infrastructure to provide aggregated and summarized management data to an administrator. In various embodiments described herein a virtualized environment is mapped into a social network. For example members of the social network may include without limitation human members such as system administrators and VM users and non human members such as hosts VMs and administration servers.

At least some embodiments of the present invention describe coupling a virtualization management application programming interface API graph database and social network in order to provide a portal for answering a wide variety of graph oriented management questions in a virtualized environment. It should be appreciated that the described embodiments employ the use of social network descriptors to define simplified relationships between entities e.g. follower followee relationships and group membership . Embodiments use a virtualization management API to define the entities e.g. VMs and hosts and relationships e.g. datastore or network connectivity and populate a social network with such data. The resulting graph of the social network is imported into a graph database. Query languages and interfaces are used to access these graphs and answer common management questions.

Various embodiments described herein capitalize on the sort of data that is stored namely connectivity data in the form of a large distributed graph database. In the described embodiments the type of data stored connectivity data is well matched to the mechanism of storage a graph database . A relational database in a virtualized infrastructure can be considered as containing graph information. For example the relationships between various entities like hosts VMs and datacenters include graph information. Questions of interest to a virtualization administrator can be answered easily when couched in terms of a graph database. For example suppose a virtualization administrator would like to know how many VMs have disks that span multiple storage arrays or which datastore is most critical because it has the most VMs and hosts on it . These questions can be expressed in terms of graph traversal.

Discussion begins with a description of a comparison of virtualization infrastructures to social networks. Creation of a social network based on the members of the network is then described. Creation of a graph database based on a social network of a virtualization infrastructure is then described. Using a graph database for of a virtualization infrastructure is then described. Operation of various processes involved in the creation of the social network and the management of the members of the social network are then described including examples of creating a social network for members of a virtualization infrastructure creating a graph database based on a social network of a virtualization infrastructure and using a graph database for of a virtualization infrastructure.

It should be appreciated that virtualization infrastructure includes physical members and logical groups. As illustrates virtualization management server includes datacenter which in turn includes hosts and . Hosts and also are members of cluster . Cluster includes VMs . In one embodiment the hierarchy of virtualization infrastructure can be mapped to a social network. In other embodiments system administrator and users are humans that interact with virtualization management server .

For example members of virtualization infrastructure can establish affiliation relationships with other members. For purposes of the instant application an affiliation relationship refers to a connection between two members of virtualization infrastructure in which each of the members of the affiliation relationship have the ability to receive and monitor each other s status. For example in Socialcast the affiliation relationship is referred to as following. In other social network applications the affiliation relationship may refer to friends or connections. It should be appreciated that while different terms may be used to describe an affiliation relationship an affiliation relationship generally affords its members privileges regarding the access of and commenting on the status of its members and that these terms can be used interchangeably.

Continuing with the example a system administrator can follow virtualization management server . In turn virtualization management server can follow hosts and . Host can follow VMs and and host can follow VM . It should be appreciated that the hierarchy provides a manner for limiting information flow.

In a social network member may choose instead to only be friends with member knowing that if anything interesting happens to members and that member will likely collect such information and share it with member . In a similar manner with reference to virtualization management server need not choose to be friends with all VMs but just with hosts . If a host receives enough status updates from the VMs running on it it may choose to signal a status change to virtualization management server . In a similar way system administrator may choose to be friends only with virtualization management server knowing that virtualization management server can accumulate status updates and propagate them to system administrator .

It should be appreciated that datacenters clusters and resource pools are not included as having affiliation relationships in a social network of a virtualization infrastructure because they do not have a physical manifestation. In other words while system administrator can send and receive network packets to from VMs and hosts system administrator cannot send a message to a datacenter. Instead a datacenter cluster resource pool and host VM folders are more similar to a group in a social network. However it should be appreciated that a datacenter as well as clusters might be associated with other components such as processors and controllers that might be able to send or receive messages. It should also be appreciated that datacenters and clusters may have a physical manifestation. It should also be appreciated that the notion of a group can also refer to user defined collections of member. For example it may be helpful to put all VMs that run a particular application in a given group or it might be helpful to put all VMs under a given resource pool in a given group.

At least some embodiments of the present invention provide for creating a social network of members of a virtualization infrastructure. illustrates an example social network based on a virtualization infrastructure according to various embodiments of the present invention. Social network is populated with members of virtualization infrastructure .

At least a portion of the members of the virtualization infrastructure are identified at a virtualization infrastructure manager. In one embodiment virtualization management server is able to start at any node e.g. member of virtualization infrastructure and locate all children of that node. In one embodiment the virtualization management server allows for the specification of the type of children to be located. For example virtualization management server may be directed to select all VMs within a datacenter e.g. VMs of datacenter . It should be appreciated that these children do not have to be the immediate children with a datacenter. For example with reference to given the identification of the datacenter e.g. datacenter and the identification of the type as Virtual Machine VMs would be identified. In one embodiment the parent child relationships are in accordance with the VMware Virtual Infrastructure Management VIM API also referred to as the vSphere API.

As presented above note that some children are not active participants in a social network. For example a cluster is typically a logical construct not a physical one since a cluster itself might not be able to send receive a message. In contrast a host or VM can send receive messages. In one embodiment a member is pinged to determine whether it is an active participant in the social network. For purposes of the instant application active participants refer to members that can send receive messages and passive participants refer to members that are not able to send receive messages themselves.

Upon identifying the parent child relationships of the members of virtualization infrastructure social network is generated having the hierarchy of virtualization infrastructure . Affiliation relationships between the parent and child members of virtualization infrastructure are established e.g. follower followee relationships or friend relationships . For example host follows its VMs and users and follow VMs and respectively. In addition virtualization management server follows hosts . Moreover hosts can join groups corresponding to their datacenters such that hosts and are in group corresponding to datacenter . Similarly hosts can join groups without corresponding datacenters e.g. hosts and are in group . It should be appreciated that many different types of groups may be used in accordance with the described embodiment. For example clusters can include hosts or VMs resource pools can include VMs. In another example a parent member can be a group e.g. host X following VMs Y N and Z and can have a separate group called Host X in which VMs Y N and Z are members. Furthermore special groups are also available e.g. VMs running particular applications are grouped together. For example group might represent VMs and running a particular application.

In various embodiments the social network affiliation relationships are updated in response to a member being removed from or being added to virtualization infrastructure . In one embodiment the social network affiliation relationships are updated in response to a member moving with virtualization infrastructure e.g. a vMotion has occurred. For example when a VM moves from one host to another host virtualization management server detects the movement. Responsive to the VM moving the affiliation relationships are updated such that the source host unfollows the VM and the destination host follows the VM.

In one embodiment an agent is installed as a service daemon that starts running as soon as the operating system OS of a member starts. At initialization the agent retrieves a unique identifier that can be used to uniquely identify the OS to Socialcast . For instance the unique identifier can be the Media Access Control MAC address. The Socialcast server is queried e.g. using the MAC address as its Socialcast username to determine necessary configuration information including internal Socialcast identifiers and groups and streams to which the agent should monitor post. It should be appreciated that alternatives to the MAC address can be used. For example the universally unique identifier UUID for a VM can be used as the UUID uniquely identifies the VM among all other VMs. In one embodiment it is determined if there are special virtualization applications running for which additional monitoring can be performed. In the present embodiment the Socialcast profile photo is updated based on the operating system and applications that are running as well as the entity type. For example a host would have a different profile photo e.g. icon from a VM.

In one embodiment the Internet Protocol IP address of the Socialcast server is hardcoded in the VMs. However it should be appreciated that the IP address of the Socialcast server can be included in a VM when the VM is deployed. Moreover in one embodiment users are created in Socialcast using the MAC address of the associated members as the username and email. For example a VM wakes up and logs into Socialcast using its MAC address. The Socialcast server sends a private message to the VM that contains the VM s Socialcast identifier ID . Once the VM receives its Socialcast ID the Socialcast ID can be used in all future correspondence e.g. posting public messages sending messages to groups etc. using Socialcast . As described herein in one embodiment the initial login to the Socialcast server only requires a member s MAC address and a password rather than the Socialcast ID. The Socialcast server can send the Socialcast ID over the private message channel to provide a member with its Socialcast ID.

At least some embodiments of the present invention facilitate administration of a network of members. While the embodiments described herein are directed toward creating and using a graph database based on a social network of a virtualization infrastructure it should be appreciated by one of skill in the art that the described embodiments are not limited as such. In particular embodiments of the present invention may be used to facilitate the management of any network of members using a graph database of a virtualization infrastructure populated without using a social network.

As described herein various embodiments of the present invention combine management of a virtualization infrastructure with a social network platform providing intuitive virtualization infrastructure management. The virtualization infrastructure is organized into a social network including both human members such as system administrators and user and non human members such as virtualization management servers hosts and VMs.

A virtualization infrastructure has a wide variety of information of interest to the virtualization administrator. For example in one embodiment this data is typically organized using a combination of a relational database e.g. the virtualization management database and an XML database e.g. an embedded inventory service . However many questions of interest to an administrator can be couched in terms of the connectivity graph for the virtual inventory. For example an administrator may wish to know the answer to the question Is there an administrator with both access to datastore X as well as VM Y While this question can be answered via well structured API calls to the virtualization manager these queries require precise design and significant amounts of training. However the graph database as described herein can answer the question much more easily and can be expressed more intuitively. Moreover it can be extended to answer a large number of other queries as well.

Embodiments described herein reorganize inventory data into a graph database combining the inventory data with relationships from a social network and using this connectivity structure to address many particular concerns of a virtualization administrator.

Virtualization management server is configured to record the inventory structure of the virtualization infrastructure . In one embodiment virtualization management server uses an API e.g. VMware s VIM API to record the inventory structure of the virtualization infrastructure . For example a datacenter is traversed and hosts and VMs are recorded as well as their datastores and networks. This function is described above in accordance with the operations of virtualization management server of .

In one embodiment virtualization management server interfaces with social network e.g. Socialcast to create a social network of virtualization infrastructure . In accordance with various embodiments for certain entities e.g. hosts or VMs a user in social network is created. This data is published to social network to create follower relationships. For other entities e.g. datastores or networks a group is created in social network and users are added to those groups. This function is described above in accordance with the operations of virtualization management server of .

It should be appreciated that social network is not required for the creation of the graph database. In particular it is the member information and the relationship information between members that is used to populate graph database . For example social network provides information of the member and follower followee relationships between the members. If social network is not used the member and follower followee relationships can be determined according in the same manner described above in accordance with the creation of a social network. In other words while social network is a potential source of the member and relationship information the member and relationship information can be generated and used to populate graph database if there is no social network .

Virtualization management server provides graph database with the member and relationship information of social network . Various embodiments of the present invention can be implemented using Neo4j an open source graph database that is architected to be both fast and scalable and provides a powerful human readable graph query language referred to as Cypher that allows users to efficiently extract key insights from their data. Neo4j stores data in nodes connected by directed typed relationships and provides the ability to associate properties with both. It should be appreciated that while embodiments are described herein using Neo4j other graph databases with similar functionality may also be used.

In one embodiment graph database retrieves data from social network . Graph database converts social network users and groups into nodes in a graph and assigns types to the nodes as well as types to the relationships. For example a network is a group in social network but a node in graph database . A VM is a member of a network group in social network but is connected to a network via a member relationship in graph database .

In one embodiment graph database represents the elements in the datacenter e.g. vCenter hosts and VMs as nodes and the edges between these nodes track their relationship to one another. For example a host follows a VM so a follow relationship is established between these two nodes. Similarly a datastore comprises multiple VMs so a datastore is represented as a node and the VMs that comprise the datastore are related to datastore node with a member relationship. In various embodiments types are assigned to relationships e.g. hosts follow VMs and VMs are members of networks primarily for convenience and to make queries more easily understandable. In another embodiment an additional node type called user is used for connecting users to their VMs.

At least some embodiments of the present invention provide a graph database for storing the connectivity data where the API of graph database can be used for determining relationships. For example a user e.g. system administrator can retrieve the followers of the followers of a given node with a single round trip to the graph database using a short query. From a performance perspective a general purpose relational database such as MySQL is not specially tuned for graph traversals requiring index lookups followed by data lookups while graph databases store edge information directly with each entity which might make it faster to determine relationships.

Embodiments described herein provide graph database as a secondary storage medium supplementing a relational database in order to solve specific types of problems. It should be appreciated that a graph database might require less overall storage space for its data than an equivalent inventory in a relational database as only a subset of the data is stored.

With reference to graph queries are received at graph database . In one embodiment the graph query is received at virtualization management server and communicated directly to graph database . In another embodiment the graph query is received at virtualization management server and communicated to graph database via social network . In another embodiment the graph query is received at social network and communicated directly to graph database . In another embodiment the graph query is received at graph database . For example graph queries sent through Socialcast e.g. by typing a message to the Neo4j server use the Neo4j backend to compute the result set with results returned as a message to system administrator .

At least some embodiments of the present invention provide the use of a graph database of a virtualization infrastructure. It should be appreciated that while the described embodiments utilize the graph database based on the social network follower followee relationships described above any graph database of a virtualization infrastructure may be used and queried. In other words the graph database of the virtualization infrastructure might be created without the use of a social network.

Neo4j supports a structure query language SQL like language called Cypher for querying the graph database. An end user can issue queries to Neo4j interactively through a web interface or programmatically using various language bindings. In one embodiment the Python py2neo module is utilized for accessing the Neo4j graph database.

For example an end user can write sample queries directly to the Neo4j graph database. In another example the end user can access the Neo4j graph database via Socialcast by creating a special Neo4j user. An end user sends a private message containing Cypher queries to the Neo4j user. A Neo4j server listens for private messages to the Neo4j user and then dispatches these queries to the Neo4j graph database. The results are returned in a private message to the requester.

In accordance with various embodiments in addition to allowing the user to send Cypher queries to the Neo4j graph database shorthand versions of command queries are also provided. For example a user can enter find VMs in vCenter A to find all VMs associated with vCenter A. This can be faster than using the standard Socialcast user interface in which a user would need to first browse to the vCenter user then browse to each of its host followers to find all VMs associated with that vCenter.

The following examples illustrate use cases for the graph database of the virtualization infrastructure described herein. First the reorganizing of data into a graph database for providing assistance in risk analysis in a virtualization infrastructure is described. Second examples of situations where a graph database can be used to solve typical day to day issues in the management of a virtualization infrastructure are described

Suppose the datacenter has a policy that each host has multiple network interface cards NICs and that each NIC should connect to a different network. Therefore each host should be connected to multiple networks. Example code for this query is 

In this example query lines 1 and 2 indicate that we should examine every node a which is a member of some group c . Line 3 adds the constraint that the node a is a host and the node c is a network. Lines 4 and 5 add the constraint that the number of networks that the host is connected to is 1. In other words if the number of hosts is one then there is a single point of failure violating the constraint that each host should be connected to multiple networks. Line 6 returns all such hosts.

It should be appreciated that this query could have been generalized in a number of ways. The group type could be changed to be c.type datastore and all hosts would be connected to just a single datastore. No semantic understanding of the topology is required the fact that networks and datastores are different types changes the query only slightly.

This query is useful in case an administrator wishes to find some weak spots in the infrastructure. In this case the number of dependencies is essentially equivalent to the number of relationships. The query is structured to find the number of relationships per entity and return a sorted list. The example code is 

In this query lines 1 and 2 indicate that every node a which has any sort of relationship with any other node is examined e.g. follower or member of a group . In line 3 a is constrained to be either a VM or a host. In line 4 the count of such relationships is retained and in lines 5 6 and 7 the top 5 such hosts or VMs are returned.

This example considers datastores with 500 VMDKs to see if any datastore is unusually highly loaded relative to others. The example code for the query is as follows 

In this query lines 1 and 2 indicate that every node a is examined where a is a member of b or b is a member of a indicates a bidirectional relationship . In line 3 a is constrained to be a datastore and b is constrained to be a VMDK since VMDKs are members of datastore groups. Finally lines 4 through 7 return a sorted list of datastores and how many VMDKs meet the prior constraints. Alternatively the query could have asked if there are any datastores with a disproportionately large number of VMs. The query is similar.

Suppose an administrator wants to move VMs from one network to another. The administrator would like to know which users would be affected by this. This query is based on the user type in the graph database. The example query is 

In line 1 the node whose universally unique identifier UUID is X where X is the network that we care about. In line 2 all nodes c that are a member of this network a and also have a follower d are found. In line 3 it is further specified that c is a VM and d is a user. Line 4 returns the names of such users.

Another example is disaster recovery planning. It would be helpful to quickly assess how many VMs would be affected if a certain datastore network combination went down. The example query using Neo4j is 

Line 1 starts the query. In line 2 nodes a and b whose UUIDs are X and Y are started with representing the network and datastore of concern. In line 3 all nodes c with a member relationship to a are found. These could be hosts or VMs. In line 4 these nodes c are pruned by determining if they have a member relationship with b and are of type VM . These are the VMs that are members of network X and datastore Y.

The prior example assumes that a VM is a direct member of a datastore group. However consider making VMs follow VMDKs and making VMDKs the only members of datastore groups. In that case the same information as in the previous example query can be found using the following example code 

Here nodes c that are following node d are found where node c is a VM node d is a VMDK and node d has a member relationship with datastore b . Because a VM may have multiple VMDKs a distinct is used in line 6.

A final example involves linked clones. A linked clone is made from a snapshot of a parent where all files available on the parent at the moment of the snapshot continue to remain available to the linked clone. Changes made by a linked clone are stored in a change file and do not change the base disk shared by the linked clones. A user for each VMDK is created in an infrastructure and VMs that use a given VMDK are created as followers of VMDK. Suppose for performance reasons an IT administrator would like to enforce a policy in which a base disk should be shared by no more than eight linked clones. This example query is expressed as follows 

The following discussion sets forth in detail the operation of some example methods of operation of embodiments. With reference to A B C and flow diagrams and illustrate example procedures used by various embodiments. Flow diagrams and include some procedures that in various embodiments are carried out by a processor under the control of computer readable and computer executable instructions. In this fashion procedures described herein and in conjunction with these flow diagrams alone or in combination are or may be implemented using a computer in various embodiments. The computer readable and computer executable instructions can reside in any tangible computer readable storage media. Some non limiting examples of tangible computer readable storage media include random access memory read only memory magnetic disks and optical disks solid state disks any or all of which may be employed within virtualization infrastructure or system . The computer readable and computer executable instructions which reside on tangible computer readable storage media are used to control or operate in conjunction with for example one or some combination of processors of virtualization infrastructure or system . It is appreciated that the processor s may be physical or virtual or some combination it should also be appreciated that a virtual processor is implemented on physical hardware . Although specific procedures are disclosed in flow diagrams and such procedures are examples. That is embodiments are well suited to performing various other procedures or variations of the procedures recited in flow diagram and alone or in combination. Likewise in some embodiments the procedures in flow diagrams and alone or in combination may be performed in an order different than presented and or not all of the procedures described in one or more of these flow diagrams may be performed. It is further appreciated that procedures described in flow diagram and alone or in combination may be implemented in hardware or a combination of hardware with firmware and or software.

At procedure of flow diagram at least a portion of the members of the virtualization infrastructure are identified at a virtualization infrastructure manager. For example with reference to in one embodiment virtualization management server starts at any node e.g. member of virtualization infrastructure and locates all children of that node. In one embodiment the active members of the virtualization infrastructure are identified. For purposes of the instant specification this operation is also referred to as mapping the virtualization infrastructure.

In one embodiment the members of the virtualization infrastructure include a system administrator a virtualization management server a plurality of hosts and a plurality of virtual machines. The members are arranged in a hierarchy such that the system administrator has an affiliation relationship with the virtualization management server and the virtualization management server has an affiliation relationship with at least one host of the plurality of hosts. In one embodiment the virtualization infrastructure also includes a datacenter wherein the datacenter represents a group of hosts of the plurality of hosts.

At procedure parent child relationships of the identified members of the virtualization infrastructure are identified. In one embodiment the parent child relationships are determined as virtualization management server locates the children of the nodes.

At procedure a social network of the identified members of the virtualization infrastructure based on the parent child relationships is generated. In one embodiment the social network is generated having the hierarchy of the virtualization infrastructure. Affiliation relationships between the parent and child members of the virtualization infrastructure are established e.g. follower followee relationships or friend relationships .

At procedure affiliation relationships between parent members and child members of the virtualization infrastructure are established. The affiliation relationships allow for child members to access shared message streams corresponding to the parent members.

With reference to in one embodiment flow diagram proceeds to procedure . At procedure responsive to identifying a change in the virtualization infrastructure the social network is automatically updated to reflect the change. In various embodiments the change in the virtualization infrastructure is the removal of a member the addition of a member or the movement of a child member from a first parent member to a second parent member. Where the change is the movement of a child member from a first parent member to a second parent member as shown at procedure an existing affiliation relationship between the child member and the first parent member is cancelled. At procedure a new affiliation relationship between the child member and the second parent member is established.

With reference to in one embodiment flow diagram proceeds to procedure . At procedure the identified members are automatically added to the social network. For example an identified member is created in the social network using the MAC address of the associated members as the username and email. In another embodiment the UUID for a VM is used as the member s username and email. The social network can provide the member with its permanent access information e.g. Socialcast ID over the social network using the initial login information.

With reference to at procedure of flow diagram data is received that defines entities and relationships of the entities of a virtualization infrastructure wherein the relationships of the members are in accordance with an inventory structure of the virtualization infrastructure. In one embodiment the entities of the virtualization infrastructure include a system administrator a virtualization management server a plurality of hosts a plurality of virtual machines and a datacenter. In one embodiment the datacenter represents a group of hosts of the plurality of hosts as well as clusters datastores networks and other entities of a virtualization infrastructure.

At procedure the graph database is populated with the entities and the relationships of the entities of the virtualization infrastructure. In one embodiment the entities correspond to members of a social network of the virtualization infrastructure and the relationships of entities correspond to relationships of the members of the social network.

In one embodiment as shown at procedure the entities of the virtualization infrastructure are associated with nodes of the graph database. In one embodiment as shown at procedure the relationships of the entities are associated with edges between the nodes of the graph database. In one embodiment as shown at procedure types are assigned to the nodes and the relationships within the graph database.

In one embodiment as shown at procedure responsive to detecting a change in the inventory structure of the virtualization infrastructure the graph database is updated to reflect the change in the inventory structure of the virtualization infrastructure. In one embodiment the virtualization infrastructure notifies the graph database of the change by updating the entity and relationship information populating the graph database to reflect the change. In another embodiment the graph database periodically scans the virtualization infrastructure for changes in the inventory structure of the virtualization infrastructure and updates the member and relationship information populating the graph database to reflect the change.

With reference to in one embodiment at procedure of flow diagram the inventory structure of the virtualization infrastructure is determined. For example with reference to in one embodiment virtualization management server starts at any entity of virtualization infrastructure and locates all children of that entity. In one embodiment the active members of the virtualization infrastructure are identified. For purposes of the instant specification this operation is also referred to as mapping the virtualization infrastructure.

In one embodiment at procedure entities of the virtualization infrastructure are associated with members of a social network. At procedure relationships among the members of the social network are created in accordance with the inventory structure.

It should be appreciated that procedures and need not be performed explicitly for the creation of the graph database. In contrast an existing social network of the virtualization infrastructure may be leveraged to create the graph database. Moreover it should be appreciated that any method or process for creating a social network of a virtualization infrastructure may be used. For example flow diagram of may be used to create the social network of the virtualization infrastructure.

With reference to at procedure of flow diagram data is received from a social network of a virtualization infrastructure at a graph database. The data defines members and relationships of the social network wherein the relationships of the members are in accordance with an inventory structure of the virtualization infrastructure. In one embodiment the entities of the virtualization infrastructure include a system administrator a virtualization management server a plurality of hosts and a plurality of virtual machines. In one embodiment the entities of the virtualization infrastructure further include a datacenter wherein the datacenter represents a group of hosts of the plurality of hosts as well as clusters datastores networks and other entities of a virtualization infrastructure.

At procedure the graph database is populated with the members and the relationships of the social network of the virtualization infrastructure. In one embodiment the members include users corresponding to entities of the virtualization infrastructure and groups of users.

In one embodiment as shown at procedure the members of the social network are associated with nodes of the graph database. In one embodiment as shown at procedure the relationships of the social network are associated with edges between the nodes of the graph database. In one embodiment as shown at procedure types are assigned to the nodes and the relationships within the graph database.

In one embodiment as shown at procedure responsive to detecting a change in the inventory structure of the virtualization infrastructure the graph database is updated to reflect the change in the inventory structure of the virtualization infrastructure. In one embodiment the social network notifies the graph database of the change by updating the member and relationship information populating the graph database to reflect the change. In another embodiment the graph database periodically scans the social network for changes in the inventory structure of the virtualization infrastructure and updates the member and relationship information populating the graph database to reflect the change. For example responsive to identifying a change in the virtualization infrastructure the social network is automatically updated to reflect the change. When the change is made in the social network the social network may communicate the update to the graph database ensuring that the graph database is current. In another embodiment the virtual infrastructure itself can send updates to the graph database.

At procedure of flow diagram a query related to the virtualization infrastructure is received. In one embodiment the query identifies at least one of a type of member of the virtualization infrastructure and a type of relationship of the virtualization infrastructure.

In one embodiment the query is received at a virtualization infrastructure manager. In another embodiment the query is sent through a social network of the virtualization infrastructure wherein the query is received at a user of the social network associated with the graph database. In one embodiment the query is communicated via a private message to the user of the social network associated with the graph database.

At procedure a graph database of the virtualization infrastructure is accessed. The graph database includes nodes associated with members of the virtualization infrastructure and edges associated with relationships of the members of the virtualization infrastructure. Moreover the nodes and the relationships include types.

In one embodiment the graph database is based on a social network of the virtualization infrastructure. In one embodiment the members of the social network include users corresponding to entities of the virtualization infrastructure and groups of users and wherein the relationships of the members are in accordance with an inventory structure of the virtualization infrastructure.

In one embodiment at procedure the answer is transmitted over the social network from the user of the social network associated with the graph database to a user of the social network associated with a source of the query. In one embodiment the answer is communicated via a private message to the user of the social network associated with the source of the query.

Example embodiments of the subject matter are thus described. Although various embodiments of the have been described in a language specific to structural features and or methodological acts it is to be understood that the appended claims are not necessarily limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims and their equivalents.

