---

title: Management of addresses in virtual machines
abstract: Methods for managing an address on a switching device, managing an address on a network switch, and screening addresses in a cloud computing environment are provided. One embodiment is directed towards a computer-implemented method for managing an address on a switching device that is communicatively coupled to a plurality of virtual machines. The method includes accessing an address pool that includes an assigned address for each virtual machine from the plurality of virtual machines. The method includes determining, on the switching device, a used address for the virtual machine from the plurality of virtual machines. The method includes determining whether the used address is matching the assigned address for each virtual machine. The method also includes routing traffic from the virtual machine to a hypervisor in response to the used address matching the assigned address.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09634948&OS=09634948&RS=09634948
owner: International Business Machines Corporation
number: 09634948
owner_city: Armonk
owner_country: US
publication_date: 20131107
---
This disclosure generally relates to the field of information processing systems and more particularly relates to managing access of virtual machines on a network.

Virtual machines abbreviated VM herein may help to more efficiently use hardware resources by allowing one computer system to support functions normally performed by multiple separate computer systems. By virtualizing a hardware resource a single hardware resource may support multiple virtual machines in a flexible manner that provides improved utilization of the hardware resource. Further if a physical processing resource becomes over utilized virtual machines may migrate to other hardware resources that may have processing capacity.

A method for managing an address on a switching device a method for managing an address on a network switch and a method for screening addresses in a cloud computing environment are provided.

One embodiment is directed towards a computer implemented method for managing an address on a switching device that is communicatively coupled to a plurality of virtual machines. The method includes accessing an address pool that includes a set of assigned addresses for each virtual machine from the plurality of virtual machines. The method includes determining on the switching device a used address for the virtual machine from the plurality of virtual machines. The method includes determining whether traffic originating from the virtual machine with the used address is matching the properly assigned address then take an action for traffic in violation. The method can specify the action such as blocking the traffic from the network and sending a message to the notification service that the action has occurred. The method also includes routing traffic from the virtual machine to a hypervisor in response to the used address matching the assigned address.

Another embodiment is directed towards a method for managing an address on a network switch that connects a first network and a second network. The method includes accessing a first compilation of assigned addresses assigned to each virtual machine from a plurality of virtual machines on the first network. The method includes determining whether a used address for a second virtual machine on the second network is matching an assigned address for a first virtual machine from the first compilation. The method includes routing traffic to the second virtual machine in second network in response to the used address for the second virtual machine not matching the assigned address for the first virtual machine from the first compilation.

Another embodiment is directed towards a system for screening addresses in a cloud computing environment.

Aspects of the present disclosure can be directed toward a method of managing Internet Protocol IP or Media Access Control MAC address in virtual machines using a screening function. The IP and MAC address can be referred to generically as an address. The screening function can block an unassigned address by comparing the address assigned to a virtual machine to the address used by the virtual machine i.e. a used address. The screening function can be performed by a switching device. The switching device can access an address pool which is a listing or compilation of all of the addresses associated with each virtual machine that routes through the edge ports on the device. The addresses in the address pool can be built either through Dynamic Host Control Protocol DHCP or via contact with a cloud controller. Although not necessarily limited thereto embodiments of the present disclosure can be appreciated in the context of managing virtual machine access through an address monitored on the switching device.

The screening function can block virtual machines using unauthorized addresses from accessing hardware resources of other virtual machines. In various embodiments the screening function can isolate the virtual machine using the unauthorized address from the network as a whole. By placing the screening function on the switching device the processing load can be reduced on a hypervisor as well as limited to a subset of administrative superusers. According to various embodiments a cloud controller can also be notified of activation of the screening function.

In the descriptions provided herein specific details of various embodiments are provided. However various embodiments may be practiced with less than all of these specific details. In other instances certain methods procedures components structures and or functions are described in no more detail than to enable the various embodiments of the disclosure for the sake of brevity and clarity.

Virtual machines VMs can share access to one or more hardware resources. Consistent with various embodiments a hardware resource can be capable of supporting a particular number of VMs e.g. before significant degradation of VM performance . The hardware resources that support one or more VMs can be distributed throughout an operating environment. In various embodiments the hardware resource can include one or more processors devoted to processing computer instructions. For example a hardware resource can include a processor core a network adapter a server blade input output devices a computer a laptop processing access time to a mainframe or combinations thereof.

The network can further communicate with a cloud controller . The cloud controller is the front end system responsible for gathering and aggregating preliminary data required to start a provisioning process. Initially this information can be provided by an administrator as part of the creation process and is specific to each type of workflow used for provisioning. For example the cloud controller can gather information that includes VM location class of application web server database server mail server etc. and minimum resource requirements. The cloud controller can further communicate with a wide area network such as the internet through a router .

In various embodiments the hardware resources in the plurality of hardware resources can use one or more virtual machines VMs . The virtual machine is a software based computer. Virtual machines may be based on specifications of a hypothetical computer or emulate the computer architecture and functions of a real world computer. Each virtual machine can interface with the hardware resource through the hypervisor. The hypervisor can be software firmware or hardware or a combination thereof that is configured to create and run VMs. The hypervisor can map the VM to the hardware resource.

A virtual machine can be migrated from one hypervisor mapped to a hardware resource to another hypervisor mapped to another hardware resource to allow more virtual machines using fewer hardware resources. As a virtual machine is migrated from one hypervisor to another then a new switching device that is a part of the new hypervisor discussed herein can associate with the migrated VM. The switching device is not moved.

A virtual machine can be deactivated by the cloud controller . In various embodiments the network can be turned over reset at periodic intervals. For example the data center network can have a policy where the network is reset at least once per month. Other data center networks can reset the network at different time intervals e.g. multiple times per day. The switching device can have enforcement of the screening function deactivated while the traffic is turned off.

Although only one CPU is illustrated for the hardware resource computer systems with multiple CPUs can be used equally effectively. Various embodiments of the present invention are able to use any other suitable operating systems as well. The network adapter hardware is used to provide an interface to one or more networks . Various embodiments of the present invention are able to be adapted to work with any data communications connections including present day analog and or digital techniques or via a future networking mechanism. Although one or more embodiments of the present invention are discussed in the context of a fully functional computer system those skilled in the art will appreciate that embodiments are capable of being distributed as a program product via CD or DVD e.g. CD CD ROM or other form of recordable media or via any type of electronic transmission mechanism.

The main memory can include several software applications such as those denoted with dashed lines. The main memory can include a hypervisor a virtual machine and a virtual Network Interface Card vNIC . A virtual machine can be a discrete execution environment within a single computer to make the computer function as if it were two or more independent computers. Each virtual machine is assigned the resources it needs to operate as though it were an independent computer including processor time memory an operating system and the like. Each virtual machine includes an operating system middleware applications an activation engine and the like. Each virtual machine can support specific guest operating systems and multiple user sessions for executing software written to target the guest operating systems. For example one virtual machine can support an instance of the Linux operating system while a second virtual machine executes an instance of the z OS operating system. Other guest operating systems can also be supported as well.

The operating system is a layer of system software that schedules threads and provides functions for making system resources available to threads including memory access access to input output resources and the like. The operating system can also control allocation and authorization for access to computer resources. The operating system can perform low level basic tasks such as recognizing input from a keyboard sending output to a display screen keeping track of files and directories on a magnetic disk drive and controlling peripheral devices such as disk drives and printers.

The operating system is also responsible for security ensuring that unauthorized users do not access the system and that threads access only resources they are authorized to access. Operating systems useful for scheduling threads in a multi threaded computer according to embodiments of the present invention are multi threading operating systems examples of which include UNIX Linux Microsoft NT AIX IBM s i5 OS and many others. The middleware is software that connects multiple software applications for exchanging data. Middleware can include application servers content management systems web servers and the like. Applications are any software programs running on top of the middleware .

A virtual machine can also have an activation engine . The activation engine can be used by the virtual machine to set addresses in a static configuration discussed further herein. The activation engine can create read and execute metadata specified in a configuration. The activation engine is an enablement framework used for boot time customization of virtual images that is processed after the initial system boot. It is used to customize the configuration settings of a system by performing functions such as starting the network interface creating non default user accounts along with their permissions and creating new file systems.

The activation engine along with the virtual image templates allows a system administrator to use a single virtual image as a source of deployment for multiple systems that can be customized with their own parameters such as network addresses custom file systems and user accounts. The activation engine is fully expandable which means that the default virtual image template can be modified to add custom rules execute custom scripts or even add new templates that are processed at boot time.

The activation engine script can be used to parse the default virtual image template file process all rules and execute subsequent scripts that are linked to the processed rules. The activation engine supports the XML format of the template which serves as a launch pad for calling pre defined or user created system customization scripts with the script parameters being hosted in the virtual image template. The activation engine can also use comma separated value format etc. The activation engine can also apply the address received from the cloud controller . According to various embodiments the activation engine may not be required by the virtual machine if further customization is not required. For example if the virtual machine uses DHCP and does not need to do anything when it boots then an activation engine may not even be required.

The main memory also includes a hypervisor . The hypervisor is a layer of system software firmware or hardware that runs under the operating system and the virtual machines . That is a hypervisor runs between an operating system and underlying hardware resources including physical processors . The hypervisor among other things can manage virtual machines . Although only one hypervisor is shown each virtual machine can also have its own hypervisor.

The hypervisor can host a virtual switch . The virtual switch can communicate with the virtual Network Interface Card vNIC from the virtual machine . The virtual switch can allow one or more virtual machines to communicate with the hypervisor . According to various embodiments the screening function on the virtual switch can be deactivated whenever the virtual machine is being reset. For example whenever the virtual machines are being deleted then the enforcement of addresses can be suspended.

The hardware resource can have a network hardware adapter to manage the communication between the virtual machine and the network . The network hardware adapter can be a network interface card or another device. In various embodiments a virtual network interface card vNIC can map to the network hardware adapter . The virtual machine can use a vNIC to access the network . In various embodiments the network hardware adapter can be a Single Root Input Output Virtualization SRIOV enabled device. The SRIOV enabled device can include a network interface card. The network hardware adapter can communicate with the virtual ethernet bridge . The virtual ethernet bridge can act as a switching layer for an SRIOV NIC and directly connect to the vNIC from a virtual machine . In various embodiments the virtual ethernet bridge can be a part of the network hardware adapter . Each virtual machine can have more than one vNIC which can allow the virtual machine to access more than one hypervisor or network .

The hardware resource can further connect with a network switch . The network switch can be a hardware based switch that can connect multiple networks to each other. The network switch can be a network device that complies with the IEEE 802.1 Qbg standard. In various embodiments the network switch can also comply with the IEEE 802.1 Qbh Bridge port extension standard. The cloud controller can connect to the network through the network switch . In various embodiments the physical switch can be optional and can depend on whether the cloud controller controls more than one cloud. Using the IEEE 802.1 Qbg standard can further involve the use of a Virtual Ethernet Port Aggregator VEPA instead of the virtual ethernet bridge .

As mentioned herein the screening function can block off virtual machine network traffic that is using unassigned addresses from accessing a network. The screening function can access an address pool and compare the addresses assigned to the virtual machine from the address pool against an address used by the virtual machine. The screened virtual machine will not be able to access the network.

In various embodiments the screening function can be performed by a switching device e.g. the virtual switch the virtual ethernet bridge or the network switch which can collectively be referred to as a switching device. For example the screening function described herein can be performed by the virtual switch by having the virtual switch monitor the vNIC for each virtual machine. The screening function can also be performed by the network switch by having the network switch screen network traffic between networks e.g. between and in . The screening function can also be performed by the network hardware adapter by screening addresses at the underlying network hardware device e.g. the network hardware adapter that is shared by multiple virtual machines.

The system can include the network hardware adapter . The network hardware adapter can be configured in a similar manner to the network hardware adapter in . The network hardware adapter can perform one or more virtual functions and physical functions. The physical and virtual functions can communicate with the virtual ethernet bridge . The virtual ethernet bridge can allow various virtual machines to access the network . The virtual machines can be configured in a similar manner to the virtual machine from . The network can be configured in a similar manner to the network from .

The system can also include the hypervisor . The hypervisor can be configured in a similar manner to the hypervisor in . The hypervisor can also include a virtual switch . The virtual switch can be configured in a similar manner to the virtual switch in . In various embodiments the virtual switch can operate in layer 2 communication layer. The virtual switch can provide access to the physical function of the network hardware adapter to a plurality of virtual machines .

In SRIOV the virtual machine can communicate with the virtual function of a network hardware adapter directly by bypassing the hypervisor . The virtual function can communicate with the virtual ethernet bridge . In various embodiments the screening function can be performed by the virtual ethernet bridge of the SRIOV. The virtual ethernet bridge can compare the address for the virtual machine against the addresses in the address pool .

During the dynamic assignment of an IP address to a virtual machine the VM One can send a Dynamic Host Configuration Protocol DHCP request which routes through the virtual switch and onto the broader network. The DHCP server can provide an IP address. As the traffic routes through the virtual switch to VM One the virtual switch can maintain a reference to VM One as being assigned the IP address e.g. a database or the IP pool . The virtual switch can also record a lease time of the DCHP request to understand when to release the IP address from the database.

The DHCP server can be associated with an IP pool e.g. an address pool. The IP pool can be a database or compilation of IP addresses that is associated with a MAC address for a particular virtual machine. The IP pool can be a type of the address pool discussed herein. The MAC address can be assigned for a particular vNIC and each virtual machine can have more than one vNIC. A pathway can exist between the virtual switch and the IP pool .

The virtual switch can access the IP pool and screen or block an IP address or MAC address that originates from another virtual machine e.g. virtual machine two . For example the IP address can be assigned from the DHCP server for both virtual machine one and virtual machine two . An aspect of this disclosure is that the virtual switch can access the IP pool specifically the IP addresses or MAC addresses assigned to both virtual machine one and virtual machine two . A virtual machine can be finished using the address in the IP pool due to the DHCP server finishing the lease time of the address e.g. within 6 hours. When the lease time expires the address can be removed from the IP pool . By directly connecting to the IP pool the virtual switch can instantly check whether the address in the IP pool is in use.

In the event that the IP address for virtual machine two is improperly changed to the IP address for virtual machine one then the virtual switch can compare the IP address used by virtual machine two to the assigned IP address for virtual machine one . In this way the virtual switch can detect a change or mis configuration in the IP address by the virtual machine two . If the virtual machine two is using an IP address different than the assigned IP address for virtual machine two then the virtual switch can determine a change. According to various embodiments the virtual switch can monitor the IP addresses in addition to comparing the IP addresses with those found in the IP pool.

Likewise if the MAC address for the vNIC for virtual machine two is changed to match that of the vNIC for virtual machine one then the virtual switch can compare the two MAC addresses. The virtual switch can block the access to the hypervisor or the hardware resources as a result of virtual machine two changing its IP address or MAC address to that of virtual machine one or as a result of an initial incorrect configuration. The virtual switch can work on either layer 2 or layer 3 communications. For example the virtual switch can monitor a MAC address in layer 2 or an IP address in layer 3 using a deep packet inspection.

The system can also have virtual machine one virtual machine two through virtual machine N. The virtual machines can connect to the network hardware adapter one through their respective vNICs. The network hardware adapter can limit the access to the hypervisor and the hardware resources in a manner similar to that in .

The IP address can be assigned using a static assignment. In the static assignment of IP addresses the IP address changes infrequently. A static assignment can involve the cloud controller providing the used IP addresses from the IP pool . In various embodiments the cloud controller can also obtain IP addresses from a source in the IP pool . The cloud controller can then create a virtual machine and upload metadata containing IP addresses from an external source e.g. the mass storage device from . IP addresses can be assigned to each virtual machine. In various embodiments the cloud controller can send IP addresses from the IP pool to the activation engine of the virtual machines. For example 500 addresses can be sent to 500 activation engines with a master reference to an addressing scheme.

Similar to embodiments in the IP pool can be accessed by the network hardware adapter which can serve as a switching device and used to block virtual machines with unassigned MAC or IP addresses from accessing the hypervisor .

In operation a user can deploy an instance of a virtual machine. The deployment can be performed by the cloud controller. The virtual machine can be assigned an IP address using either the static e.g. the technique described in or dynamic assignment e.g the technique described in . In various embodiments operation can be optional and the deployment can occur from a host. After an instance is deployed then the method can continue to operation .

In operation a cloud controller or hypervisor can upload the IP addresses associated with each virtual machine to a switching device. The switching device can refer to the virtual switch the network hardware adapter or network switch in . The switching device can receive vNIC configuration data from the vNICs of the virtual machines which indicates the IP address being used by the virtual machine. After the IP addresses are uploaded then the method can continue to operation .

In operation the cloud controller can receive an enforcement rule or an access control list for the switching device. The enforcement rule can also refer to an access control list or a firewall rule according to various embodiments. The enforcement rule can also be the IP and MAC addresses from the address pool discussed herein. The enforcement rule can be created by the cloud controller or DHCP server discussed herein.

The enforcement rule or access control list can be based off of the vNIC configuration. For example the switching device can receive the listing of MAC addresses that correspond to each vNIC of each virtual machine. The MAC addresses that are received in operation can be used to create the enforcement rule. The enforcement rule can be a particular rule that allows the switching device to screen out virtual machines that have MAC addresses that match an assigned MAC address of an another virtual machine e.g. the MAC address received from operation . Thus an example of the enforcement rule can be If All VMs mac addresses.count VM1 mac 1 OR All Vms.getByMac VM1.mac VM1. A similar enforcement rule can occur using IP addresses instead of MAC addresses. After the enforcement rule is received then the method can continue to operation .

In operation the cloud controller in cloud based environments can start the virtual machine. The virtual machine can perform the functions described further herein and can access network. After the virtual machine is started then the method can continue to operation .

In operation the switching device can monitor the traffic from the virtual machine for a change in the source or destination of a packet address. The packet address can be changed by a user of the virtual machine. The change can involve the user changing the IP or MAC address of a virtual machine to that of another virtual machine on the network. In certain configurations the change can deactivate both virtual machines or potentially steal traffic from the other application. The change can also take place because of a resident application that changes the IP or MAC address. For example a networking application that independently cycles through a variety of IP addresses in a sequence can change the IP address to an IP address used by a virtual machine on the network without user input. Similarly in some cases the operator of the cloud environment may give their customers superuser access to their VM images. In various embodiments operation can be optional since it can be possible that two or more virtual machines have the same IP address as an initial state and therefore would not be changed to that of another virtual machine. After operation then the method can continue to operation .

In operation the switching device can determine whether there has been a change in the packet address. For example a change can exist when the MAC address for a second vNIC for a second virtual machine is changed to that of a first vNIC for a first virtual machine. If the change exists then the method can continue to operation . According to various embodiments the change could also be from an incorrect state to a correct state i.e. where the assigned address matches the address used by the virtual machine. If the address is changed back into a correct state then the method can continue to operation . If the change does not exist then the method can continue to operation where the switching device will continue to monitor for changes in the network configuration.

In operation the virtual machine can send the packet to the network and the switching device can receive the network packet from the virtual machine. Specifically the virtual machine can communicate through its vNIC to the switching device. The packet can indicate via metadata the configuration settings of the originating virtual machine. The switching device can further communicate with the hypervisor. The virtual machine can also be the destination of a network packet and receive the network packet from the switching device. After the packet is received by the switching device the method can continue to operation .

In operation the switching device can check the condition of the enforcement rule to determine if the condition is valid for the packet. The condition of the enforcement rule can be an IP or a MAC address according to various embodiments. The enforcement rule can be determining whether the IP or MAC address matches the assigned IP or MAC address. Thus operation can involve the determination of whether the IP or MAC address used by the virtual machine is the assigned IP or MAC address from the address pool. For example a valid condition can be a network configuration that has the IP address of a first virtual machine match the assigned IP address for the first virtual machine from the IP address pool.

In various embodiments the switching device can check every IP address used by the virtual machines is the assigned IP address for the virtual machines. The switching device can access the address pool. The switching device can perform a deep packet inspection to ensure that the IP address used by the virtual machine is the same as the assigned IP address from the address pool. In various embodiments the switching device can compare the MAC address from the vNIC against the assigned MAC address in the address pool. The switching device can operate in layer 2 to inspect MAC addresses while deep packet inspection of IP addresses allows layer 3 communication. The switching device can perform a quick check of the IP address. If the IP address from one virtual machine is the same as the IP address assigned to another virtual machine then the condition is not valid and the method can continue to operation .

If the condition is valid then the method can continue to operation . The switching device can after finding a valid condition of the rule route the request for data and transmission of data to the hypervisor. The hypervisor can connect the traffic further to the intended destination using the hardware resource.

In operation the switching device can block egress network traffic originating from the vNIC. Egress traffic can be the traffic that originates from the vNIC and connect to various hardware components through the hypervisor. For example if a used IP address from a first virtual machine is the same as an assigned IP address for a second virtual machine then the switching device can block all egress traffic from the first virtual machine but not the second virtual machine. The screening can isolate the traffic from the first virtual machine without affecting the second virtual machine. According to various embodiments in addition to the blocking of the egress traffic the ingress traffic directed towards the virtual machine can be blocked. Using the aforementioned example any external traffic from an outside network can be blocked from transmitting data to the first virtual machine.

The switching device can prevent the vNIC with the invalid IP or MAC address from accessing the network or the hypervisor. According to various embodiments the switching device can also deactivate the violating vNIC and avoid having to spend CPU cycles on blocking the egress traffic. After the egress traffic is blocked then the method can continue to operation .

In operation the switching device can notify the user or the system administrator. According to various embodiments the system administrator can be a type of user. In the static IP selection method each IP address is static for a virtual machine. Therefore the virtual machine with a duplicate IP address can be identified. The switching device can notify the cloud controller that the duplicate IP address is being used by an unassigned virtual machine. The cloud controller can also further pinpoint the user that made the changes to the virtual machine.

For example if the MAC address for the vNIC is changed by the virtual machine user to match that of the vNIC for virtual machine then the s tag capable bridge can be configured to access an address pool and screen out unauthorized vNICs from using the assigned MAC address. The address pool can contain a listing of IP and MAC addresses for vNICs and virtual machines. The s tag capable bridge can use an Application Specific Integrated Circuit ASIC to both access the address pool and perform the screening function. It can also be possible for the s tag capable bridge to have the components necessary to perform the screening function uploaded to firmware of the s tag capable bridge .

The network switch can be similar to the network switch from . The network switch can also be configured to obtain the IP addresses or MAC addresses from an address pool managed by the cloud controller in the production cloud . The network switch can also check the traffic originating from the development cloud against the IP addresses in the production cloud . Although the network switch is shown communicating with the production cloud . The network switch can also communicate with an address pool in the development cloud simultaneously. As mentioned herein the address pool can be a listing or database of the various MAC and IP addresses used by the virtual machines or vNICs in the development cloud or production cloud .

The system can include a router can route a wide area network traffic to the production cloud or the development cloud through network switches . The development cloud can access the wide area network through the network switch . The network switch can control a port that connects wide area network traffic from network switch to the router according to various embodiments.

The production cloud and the development cloud can each resemble the data center network from . The production cloud and development cloud can each have a cloud controller a virtualization manager and a hypervisor . The virtualization manager can control the allocation of one or more hypervisors . Each hypervisor can allocate hardware resources to one or more virtual machines.

The production cloud and the development cloud can process data within the respective cloud. If only one network switch has the screening function e.g. the network switch then the system will continue to screen IP or MAC addresses for the network switch associated with the cloud e.g. the production cloud . For example if a virtual machine user on the development cloud changes the IP address of the virtual machine to that of a virtual machine on the production cloud then the traffic directed to the development cloud can be blocked by the network switch .

As an example if a virtual machine from the production cloud herein production virtual machine and a virtual machine from the development cloud herein development virtual machine share the same IP address then the network switch can retrieve the IP address. The network switch can determine which virtual machine is assigned the IP address. Assuming that the production virtual machine is assigned the IP address then the network switch can block the port of the network switch from accessing the router . Thus the development virtual machine will not receive any traffic intended for the production virtual machine.

In various embodiments the address pool can include a timestamp of when a virtual machine is assigned a particular IP address. The timestamp can help resolve simultaneous assignment. For example if the production virtual machine is assigned the same IP address after the development virtual machine is assigned the IP address then the network switch can give access to the development virtual machine and screen the production virtual machine. In various embodiments a default setting of giving the production cloud priority can be implemented.

It is understood in advance that although this disclosure includes a detailed description of cloud computing implementation of the teachings recited herein are not limited to a cloud computing environment. Rather embodiments of the present invention are capable of being implemented in conjunction with any other type of computing environment now known or later developed.

Cloud computing is a model of service delivery for enabling convenient on demand network access to a shared pool of configurable computing resources e.g. networks network bandwidth servers processing memory storage applications virtual machines and services that can be rapidly provisioned and released with minimal management effort or interaction with a provider of the service. This cloud computing model generally includes at least five characteristics at least three service models and at least four deployment models.

On demand self service a cloud consumer can unilaterally provision computing capabilities such as server time and network storage as needed automatically without requiring human interaction with the service s provider.

Broad network access capabilities are available over a network and accessed through standard mechanisms that promote use by heterogeneous thin or thick client platforms e.g. mobile phones laptops and PDAs .

Resource pooling the provider s computing resources are pooled to serve multiple consumers using a multi tenant model with different physical and virtual resources dynamically assigned and reassigned according to demand. There is a sense of location independence in that the consumer generally has no control or knowledge over the exact location of the provided resources but can be able to specify location at a higher level of abstraction e.g. country state or datacenter .

Rapid elasticity capabilities can be rapidly and elastically provisioned in some cases automatically to quickly scale out and rapidly released to quickly scale in. To the consumer the capabilities available for provisioning often appear to be unlimited and can be purchased in any quantity at any time.

Measured service cloud systems automatically control and optimize resource use by leveraging a metering capability at some level of abstraction appropriate to the type of service e.g. storage processing bandwidth and active user accounts . Resource usage can be monitored controlled and reported providing transparency for both the provider and consumer of the utilized service.

Software as a Service SaaS the capability provided to the consumer is to use the provider s applications running on a cloud infrastructure. The applications are accessible from various client devices through a thin client interface such as a web browser e.g. web based e mail . The consumer does not manage or control the underlying cloud infrastructure including network servers operating systems storage or even individual application capabilities with the possible exception of limited user specific application configuration settings.

Platform as a Service PaaS the capability provided to the consumer is to deploy onto the cloud infrastructure consumer created or acquired applications created using programming languages and tools supported by the provider. The consumer does not manage or control the underlying cloud infrastructure including networks servers operating systems or storage but has control over the deployed applications and possibly application hosting environment configurations.

Infrastructure as a Service IaaS the capability provided to the consumer is to provision processing storage networks and other fundamental computing resources where the consumer is able to deploy and run arbitrary software which can include operating systems and applications. The consumer does not manage or control the underlying cloud infrastructure but has control over operating systems storage deployed applications and possibly limited control of select networking components e.g. host firewalls .

Private cloud the cloud infrastructure is operated solely for an organization. It can be managed by the organization or a third party and can exist on premises or off premises.

Community cloud the cloud infrastructure is shared by several organizations and supports a specific community that has shared concerns e.g. mission security requirements policy and compliance considerations . It can be managed by the organizations or a third party and can exist on premises or off premises.

Public cloud the cloud infrastructure is made available to the general public or a large industry group and is owned by an organization selling cloud services.

Hybrid cloud the cloud infrastructure is a composition of two or more clouds private community or public that remain unique entities but are bound together by standardized or proprietary technology that enables data and application portability e.g. cloud bursting for load balancing between clouds .

A cloud computing environment is generally service oriented with a focus on statelessness low coupling modularity and semantic interoperability. At the heart of cloud computing is an infrastructure comprising a network of interconnected nodes.

Hardware and software layer includes hardware and software components. Examples of hardware components include mainframes in one example IBM zSeries systems RISC Reduced Instruction Set Computer architecture based servers in one example IBM pSeries systems IBM xSeries systems IBM BladeCenter systems storage devices networks and networking components. Examples of software components include network application server software in one example IBM WebSphere application server software and database software in one example IBM DB2 database software. IBM zSeries pSeries xSeries BladeCenter WebSphere and DB2 are trademarks of International Business Machines Corporation registered in many jurisdictions worldwide .

Virtualization layer provides an abstraction layer from which the following examples of virtual entities can be provided virtual servers virtual storage virtual networks including virtual private networks virtual applications and operating systems and virtual clients.

In one example management layer can provide the functions described herein. Resource provisioning provides dynamic procurement of computing resources and other resources that are utilized to perform tasks within the cloud computing environment. Metering and Pricing provide cost tracking as resources are utilized within the cloud computing environment and billing or invoicing for consumption of these resources. In one example these resources can comprise application software licenses. Security provides identity verification for cloud consumers and tasks as well as protection for data and other resources. User portal provides access to the cloud computing environment for consumers and system administrators. Service level management provides cloud computing resource allocation and management such that required service levels are met. Service Level Agreement SLA planning and fulfillment can provide pre arrangement for and procurement of cloud computing resources for which a future requirement is anticipated in accordance with an SLA.

Workloads layer provides examples of functionality for which the cloud computing environment can be utilized. Examples of workloads and functions which can be provided from this layer include mapping and navigation software development and lifecycle management virtual classroom education delivery data analytics processing transaction processing and an application relocated from a remote device.

The above embodiments and examples of managing inputs from multiple users are not meant to be limiting. A variety of methods for managing inputs and usage of a virtual application are contemplated and considered in the scope of the invention.

Exemplary embodiments have been described in the context of a fully functional system for relocating an application from a remote electronic device to a virtualization based environment and managing the inputs from and outputs to one or more remote electronic devices once relocated. Readers of skill in the art will recognize however that embodiments also can include a computer program product disposed upon computer readable storage medium or media or machine readable storage medium or media for use with any suitable data processing system or storage system. The computer readable storage media can be any storage medium for machine readable information including magnetic media optical media or other suitable media. Examples of such media include magnetic disks in hard drives or diskettes compact disks for optical drives magnetic tape and others as will occur to those of skill in the art. Persons skilled in the art will immediately recognize that any computer or storage system having suitable programming means will be capable of executing the steps of a method disclosed herein as embodied in a computer program product. Persons skilled in the art will recognize also that although some of the exemplary embodiments described in this specification are oriented to software installed and executing on computer hardware nevertheless alternative embodiments implemented as firmware or as hardware are well within the scope of the claims.

As will be appreciated by one skilled in the art aspects can be embodied as a system method or computer program product. Accordingly aspects can take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that can all generally be referred to herein as a circuit module or system. Furthermore aspects can take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s can be used. The computer readable medium can be a computer readable signal medium or a computer readable storage medium. The computer readable signal medium or a computer readable storage medium can be a non transitory medium in an embodiment. A computer readable storage medium can be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium can be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium can include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal can take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium can be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium can be transmitted using any appropriate medium including but not limited to wireless wire optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects can be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code can execute entirely on the user s computer partly on the user s computer as a stand alone software package or on one module or on two or more modules of a storage system. The program code can execute partly on a user s computer or one module and partly on a remote computer or another module or entirely on the remote computer or server or other module. In the latter scenario the remote computer other module can be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection can be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects are described above with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions can be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions can also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function or act specified in the flowchart or block diagram block or blocks.

The computer program instructions can also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions or acts specified in the flowchart or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments. In this regard each block in the flowchart or block diagrams can represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block can occur out of the order noted in the Figures. For example two blocks shown in succession can in fact be executed substantially concurrently or the blocks can sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams or flowchart illustration and combinations of blocks in the block diagrams or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terms server and mobile client are used herein for convenience only and in various embodiments a computer system that operates as a mobile client computer in one environment can operate as a server computer in another environment and vice versa. The mechanisms and apparatus of embodiments of the present invention apply equally to any appropriate computing system including a computer system that does not employ the mobile client server model.

While this disclosure has described the details of various embodiments shown in the drawings these details are not intended to limit the scope of the invention as claimed in the appended claims.

