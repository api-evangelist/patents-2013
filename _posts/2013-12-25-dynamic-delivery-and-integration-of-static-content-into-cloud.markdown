---

title: Dynamic delivery and integration of static content into cloud
abstract: A documentation application periodically checks content of a documentation repository to determine whether the documentation repository includes documentation content for update. A documentation archive for update is retrieved from the documentation repository and parsed to read meta information specified in the documentation archive. Based on the meta information, content of the documentation archive for update is integrated into the documentation application at runtime of the documentation application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09274783&OS=09274783&RS=09274783
owner: SAP SE
number: 09274783
owner_city: Walldorf
owner_country: DE
publication_date: 20131225
---
Cloud computing refers to a model for enabling ubiquitous convenient and on demand access to shared pools of configurable computing resources such as networks servers storages applications functionalities and the like. There are a number of benefits associated with cloud computing for both providers of the computing resources and their customers. For example customers may develop and deploy various business applications on a cloud platform supplied by a cloud provider without the cost and complexity to procure and manage the hardware and software necessary to execute the applications. The customers do not need to manage or control the underlying cloud platform e.g. including network servers operating systems storage etc. However customers still have control over the deployed applications and their related software documentation. On the other hand computing resources of the cloud platform are available to provide multiple customers with different physical and virtual resources dynamically assigned and reassigned according to clients load.

Various customers may deliver ad hoc software documentation for their respective applications deployed or to be deployed on a cloud platform. A provider of the cloud platform may provision the software documentation at a central location for example a web application for documentation. However each customer may follow different delivery cycle of the applications as well as of the respective software documentation for those applications. Thus each customer may request ad hoc from the software provider to include or update the software documentation in the documentation application. Further requests related to the software documentation may be potentially independent from the delivery cycle of the respective applications or out of sync. To include or update software documentation the provider modifies the content of the documentation application rebuilds and redeploys the documentation application causing its downtime. With the increase of customers and desired updates of the software documentation such approach may be hard to scale could cause delivery of software documentation that is out of sync with the respective applications and may often cause downtime of the documentation application.

Embodiments of techniques for dynamic delivery and integration of static content into cloud are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

In various embodiments a cloud platform is an on demand runtime platform. A cloud platform may include functionality such as resource pooling where the computing resources of the cloud infrastructure provider are pooled to serve multiple consumers using a multi tenant model. Another functionality that the cloud platform may provide is elasticity that refers to the capability of the platform to elastically provision and release computing resources to scale commensurate with demand. The cloud platform may also expose a metering characteristic that refers to the capability of the cloud platform to automatically control monitor report and optimize resource usage at some level of abstraction appropriate to the type of service for example storage processing bandwidth and active user accounts and so on.

A cloud platform can be viewed as containing both a physical layer and an abstraction layer. The physical layer may consist of the hardware resources that are necessary to support the cloud services being provided and may typically include a server a storage unit network components and so on. The abstraction layer may include the software deployed across the physical layer which manifests the essential functionalities provided by a cloud platform. For example the cloud platform may provide an application runtime user interface UI development toolkits internal configurations cloud services such as a connectivity service a persistence service an identity service a feedback service a document service etc. The functionality provided by the cloud platform can be used by customers of the cloud platform to develop and deploy software applications on the cloud platform. In one embodiment customers or consumers of the cloud platform may provide one or more deployable packages representing software applications to be deployed on the cloud platform. In some embodiments the software applications may be developed using functionality of the cloud platform. Compiled source code contained in the deployable packages can be executed onto the cloud platform. In various embodiments the cloud platform may also provide support for the application lifecycle process for example deployment installation provisioning and maintenance of applications that may be built deployed installed and run on the cloud platform. In one embodiment the cloud platform may be platform as a service implemented in Java.

In various embodiments prior to completion of a deployment operation at it is checked whether the deployable package is associated with an application that is authorized to be deployed on the cloud platform and whether the account requesting deployment is also authorized. This is performed to prevent unauthorized deployment. If the deployable package is associated with an authorized application and account the process continues with the execution of the requested deployment. As part of the deployment operation content of the packages to be deployed may be parsed and analyzed. The deployable package may include static content representing software documentation. The software documentation may describe the application or module associated with or represented by the deployable package but not necessarily. Software documentation content may be viewed as static when compared to binaries of the associated application which binaries are representation of executable functional logic. In one embodiment at the deployable package is parsed to search for a file that includes software documentation content where the package may be parsed according to a set of rules. The software documentation content may include a set of help documents in various formats such as HyperText Markup Language HTML files Dynamic HTML DHTML files Eclipse help files etc.

Rules that may govern parsing of the deployable package may include searching for a file conforming to a predetermined type and a naming convention and organized at a predetermined location within the deployable package. For example the file that represents the software documentation content may be represented as an archive file such as zip or jar. In one embodiment a documentation content archive may be any collective unit of documentation content. Further the predetermined file may conform to a naming convention with a unique name and a version of the associated application. An exemplary format may be . for example com.sap.docu.jpaas 1.0.103.zip . In one embodiment the dash symbol may be used as a separator between the name and the version. In addition the file that includes the software documentation content may be organized under a predetermined location of the deployable package e.g. may be located under docusets where represents the root directory of the deployable package.

At it is determined that the file including software documentation is included in the deployable package. At the file including software documentation is extracted from the deployable package. At the extracted file including software documentation is stored in a repository. The repository may be a storage space of the cloud platform such as a central file system of the cloud platform. According to process during deployment of an application or a module not only the application or module are deployed onto the cloud platform but also the software documentation may be dynamically delivered to the cloud platform. Thus the documentation describing a particular application feature or module may be synchronized with the release cycle of that application feature or module.

Customer of cloud platform may develop one or more applications or modules in development environment . For example deployable package representing an application may be generated in development environment . Development environment may be a local integrated development environment IDE of the consumer. Alternatively development environment may be provided by cloud platform .

In various embodiments once deployable package is developed and generated a deploy request is sent by customer to a deploy service of orchestrator . In one embodiment orchestrator manages the lifecycle of developed and deployed software applications on the cloud platform . Orchestrator may be an administration server that among other functions deploys starts and stops the applications. Orchestrator may install applications on one or more virtual machines VMs where the applications are accessed by end users. Orchestrator may automatically provision more than one VM to host one application according to some embodiments. Orchestrator may parse scan or otherwise process deployable package . Upon parsing deployable package deploy service of orchestrator deploys binaries and metadata contained in deployable package to cloud platform repository . Deploy service deploys binaries and metadata contained in deployable package according to an account of customer and name of the application represented by deployable package .

For example binaries are binaries transferred by deploy service to application repository . Application repository is a repository dedicated for the application represented by deployable package at platform space account of cloud platform repository . Platform space account is a space at cloud platform repository dedicated and specified for the account requesting deployment of deployable package for example a cloud account to which customer belongs. Cloud platform repository may include a number of spaces distributed among cloud accounts such as one or more platform space account N .

In one embodiment prior to parsing deployable package it is checked whether deployable package is associated with an authorized application. To determine whether deployable package is authorized to be deployed it is checked whether the account of customer and the name of the application represented by deployable package are listed or specified in white list . White list is a file kept by orchestrator that specifies accounts and names of applications that are authorized to deliver documentation content. While list is an additional security measure to prevent unauthorized delivery of documentation content to the cloud platform. In one embodiment regardless whether customer requests deployment of deployable package via a shell a command line an IDE an UI wizard of the cloud platform etc. customer specifies the name of the application and the cloud account. A number of users associated with the cloud account are authorized to request deployment on cloud platform . If the account and the name of the application pertinent to deployable package are included in white list and if customer provides necessary credentials for the cloud account then deployment is authorized and execution of the deployment operation may continue.

In one embodiment upon determining that deployable package includes documentation content archive deploy listener of orchestrator extracts and stores documentation content archive in documentation repository . Documentation repository stores documentation content archive of applications or modules deployed to cloud platform . Documentation repository may further include documentation of functionality provided by cloud platform . In one embodiment delivering documentation content archive to documentation repository is independent from the cloud account of customer and the name of the application represented by deployable package . Documentation content archive represents transferred or copied documentation content archive from deployable package to documentation repository . In one embodiment documentation repository may be an external to cloud platform repository .

At documentation content archives that are stored in a documentation repository e.g. documentation repository are traversed. For a traversed documentation archive at it is determined whether delivery time of the documentation content archive is later in time than the documentation application timestamp. A value of the delivery time of the documentation content archive is when the documentation content archive is deployed or delivered to the documentation repository. When the delivery time of the documentation content archive is later in time than the value of the documentation application timestamp the documentation content archive has been delivered later than the last documentation content currently published by the documentation application. A delivery timestamp that is later in time than the documentation application timestamp indicates that a newer version of documentation content of the respective application is delivered for update in the documentation repository. In such case at the documentation content archive is delivered to and extracted into the documentation application to be published and displayed. Also the value of the documentation application timestamp is overwritten with the delivery time of the documentation content archive. For example it is overwritten with a value of a timestamp that represents a value of a property last modified . A value of the property last modified may represent the delivery time of the documentation content archive to the documentation repository.

At it is checked whether a predetermined amount of time has passed. In one embodiment repeatedly in a predetermined time interval the documentation application checks the documentation repository to determine whether new documentation content for update has been delivered. It is checked to determine whether the documentation repository includes at least one archive including documentation content for update.

In one embodiment the predetermined value of the time interval may be a configurable setting. Once the predetermined amount of time has passed at it is checked whether the documentation application is still running When the documentation application is still running then the documentation application again traverses documentation content archives that are stored in the documentation repository to determine if there is a new documentation content for update. Determining whether there is new documentation for update by comparing timestamp values overcomes the need to compare versions of respective applications or modules to determine the latest one. Versioning of applications may be error prone and may follow various versioning conventions.

When the selected documentation archive conforms to the naming convention at it is checked whether a value of a documentation archive timestamp is prior in time than a value of a documentation application timestamp. When the value of the documentation archive timestamp is prior in time than the value of the documentation application timestamp then the documentation archive has already been synchronized with the respective documentation content integrated into and displayed by the documentation application. In such case the selected documentation content is up to date and process may continue with selecting the next unselected documentation archive.

When the value of the documentation archive timestamp is later in time than the value of the documentation application timestamp then the selected documentation archive residing in the repository is a later version than the one published into the documentation application for the respective application. In such case the selected documentation archive may need to be updated in the documentation application. Prior to updating the selected documentation archive it may be checked at whether a portion of the name of the selected documentation archive that represents the name of the application is the same as the application name portion of other documentation archive stored in the repository.

When there is no other documentation archive in the repository that has the same application name portion as the selected documentation archive and when the value of the selected documentation archive timestamp is later in time than the value of the other documentation archive timestamp the process continues at . At the selected documentation archive is retrieved from the repository to be published or integrated into the documentation application. In one embodiment at the retrieved documentation archive may be stored locally to the documentation application to be processed for update and integration. At the retrieved documentation archive for update is integrated into the documentation application.

If there is another documentation archive in the repository that has the same application name portion as the selected documentation archive then at least two versions of documentation content related to the same application name are stored in the documentation repository. To determine which version is a later version timestamps may be compared. At it is checked whether the value of the selected documentation archive timestamp is later in time than the value of the other documentation archive timestamp. When the value of the selected documentation archive timestamp is later in time than the value of the other documentation archive timestamp the other documentation archive is an older version. Thus at the other documentation archive is deleted from the documentation repository. When the value of the selected documentation archive timestamp is prior in time than the value of the other documentation archive timestamp then the selected documentation archive is an older version. Thus at the selected documentation archive is deleted from the documentation repository. Process may continue with selecting the next unselected documentation archive.

When the value of the selected documentation archive timestamp is later in time than the value of the other documentation archive timestamp and once the other documentation archive is deleted at the selected documentation archive is retrieved from the repository to be published or integrated into the documentation application. In one embodiment at the retrieved documentation archive may be stored locally to the documentation application to be processed for update and integration. At the retrieved documentation archive for update is integrated into the documentation application.

To illustrate with an example currently timestamp value may be 113 . The values of timestamps given herein are exemplary. In some embodiments a value of a timestamp is encoded value for example of date and time of a day and may be accurate to a small fraction of a second. Content processor periodically traverses documentation content archives stored in documentation repository . Content processor selects documentation content archive . According to process content processor checks whether the name of documentation content archive i.e. com.sap.docujpaas 1.0.103.zip conforms to the predetermined naming convention. In this exemplary case the name of documentation content archive may conform.

Content processor compares the value of timestamp with the value of timestamp . Since the value of timestamp is higher e.g. later in time than the value of timestamp then documentation content archive is synced with documentation content integrated into and displayed by documentation application to one or more users such as user . In such case content processor continues with selecting documentation content archive and compares the value of timestamp with the value of timestamp . Since the value of timestamp is lower e.g. prior in time than the value of timestamp e.g. 113

In one embodiment prior to processing documentation content archive to be pushed for update and integrated into documentation application content processor checks whether the name portion of the name of the documentation archive is the same as another documentation archive from documentation archives . For example it is checked whether a portion of the name of documentation archive prior to the dash symbol i.e. com.name A.docu.jpaas is the same as another one in documentation repository . Since there is no other documentation archive content processor retrieves and keeps reference to documentation content archive locally by for example the list documentation for update . Also content process overwrites the value of timestamp with the value of timestamp of documentation content archive . The value of timestamp becomes 115 .

Content processor continues with selecting documentation content archive . In this exemplary case documentation content archive conforms to the predetermined naming convention. Content processor compares the value of timestamp with the value of timestamp . Since the value of timestamp is lower e.g. prior in time than the value of timestamp e.g. 115

According to process it is checked which documentation content archive or is a later version of the respective application name B by comparing values of timestamp and timestamp . Since value 118 of timestamp is higher e.g. later in time than value 116 of timestamp according to process documentation content archive is an older version and is deleted from documentation repository . In this way comparing timestamps may permit customers to revert documentation content versions in sync with reverting respective application or feature versions.

Content processor continues with selecting documentation content archive . Content processor checks whether the name of documentation content archive i.e. com.name B.docujpaas 1.0.104.zip conforms to a predetermined naming convention. In this exemplary case content archive may conform to the naming convention. Content processor compares the value of timestamp with the value of timestamp . Since the value of timestamp is lower e.g. prior in time than the value of timestamp e.g. 118

Content processor continues with selecting documentation content archive . Content processor checks whether the name of documentation content archive i.e. com.C 05.jpaas 1.0.102.zip conforms to a predetermined naming convention. In this case the name of documentation content archive includes two dash symbols for example and does not conform to the naming convention. In such case content process deletes documentation content archive from the documentation repository.

Content processor continues with selecting documentation content archive . Documentation content archive conforms to the naming convention and is a later version than the one includes in documentation content . Hence content processor retrieves and stores documentation content archive locally into the list documentation for update . Also content process overwrites the value of timestamp with the value of timestamp of documentation content archive . The value of timestamp becomes 119 .

In one embodiment a documentation archive for update stored in or referenced by the list documentation for update is parsed. For each parsed documentation archive meta information included in the documentation archive is read. Meta information may specify a structure of documentation content. For example the meta information may define a tree structure of HTML pages and sub ages of the documentation content for update. In some embodiments meta information may be information specified in files including but limited to treedata.html frameset.html properties file etc. Based on the read meta information for each documentation archive among other things it is determined location into local file system of documentation application where to extract and publish documentation content for update.

In one embodiment a file may be stored into the local file system of documentation application that may represent a cumulative information regarding documentation content of applications or modules integrated into and displayed by the documentation application . Examples of such information regarding documentation content may include but is not limited to the name of the respective application or module upload or delivery time of the documentation content archive into the documentation repository e.g. a delivery timestamp value update or integration time when the content of the documentation archive is extracted to and published by the documentation application and version information. In various embodiments the file may be an HTML page that is accessible by the cloud provider and respective customers separately and independently from the documentation application. Based on the file customers may check which documentation content version is displayed by the documentation application.

At the selected documentation archive is parsed. In one embodiment the documentation archive is parsed to search for a file of one or more administrative files to determine the documentation content type. Examples of documentation content type may include but are not limited to a DHTML format exported from Content Management Solution CMS provided by IxiaSoft Eclipse Help format CONTENT format type that may include documentation content with a flat structure e.g. javadoc pdf etc . The documentation archive is searched for an administrative file such as treedata.html to determine if the documentation content is of type DHTML. Further the documentation content archive is search for an administrative file such as frameset.html to determine if the documentation content is of type Eclipse Help.

The administrative files determine the structure and organization of the documentation content to be displayed. In one embodiment when the content type is not one of a DHTML format or an Eclipse Help format it is checked whether the documentation archive includes a properties file in folder META INF docuset.properties to determine if the content type is CONTENT . The administrative files and content types are exemplary and other administrative files specifying meta information and other content types may be possible according to various embodiments.

At documentation content type of the selected file is determined At it checked whether the documentation archive is of invalid type. In one embodiment when the content type is not one of a DHTML format or an Eclipse Help format and when a properties file is not found in the documentation archive the documentation archive is determined to be of invalid type and at the documentation archive is deleted from the documentation repository. When the documentation content type is one of the predetermined one or more valid types at the documentation archive is processed for integration into the documentation application according to the determined documentation content type. For example according to the meta information specified in the respective administrative file.

At meta information specified in an administrative file included in the documentation archive is read. The meta information determines the structure of the documentation content. According to the structure the documentation content is to be displayed by the documentation application. In one embodiment the meta information of the administrative file may specify values of one or more properties. Examples of properties specified in an administrative file may include but are not limited to a foldername property a label property a description property and a delete property. The foldername property specifies where to extract the content of the documentation archive relative to the application root at the file system local to the documentation application. For example if foldername help the content of the documentation archive will be extracted in folder help . The label property specifies the label of a main link of the documentation content for update in a main page of the documentation application displaying documentation content of various consumers of the cloud platform. The description property specifies the description text of the documentation content for update at the main page of the documentation application. The delete property specifies if the old content should be cleared prior to the delivery of the new content. The value is true if deletion of the old content is desired

At based on the meta information location where to store the content of the documentation archive may be determined. The location at a local file system of the documentation application. For example according to the value of the foldername property the directory at the local file system related to the application associated with the documentation content archive is determined.

In one embodiment at it is checked whether a delete is requested. For example when the value of the delete property is true then a delete operation is requested. When a delete operation is requested at the documentation archive is unarchived into a temporary directory of the local file system of the documentation application. At delete determined location. At the temporary directory is renamed with the name of the already deleted location. Thus new documentation is delivered and updated during runtime of the documentation application and the time of content unavailability may be minimized Otherwise downtime of the documentation application causes unavailability of the documentation content during the downtime.

When a delete operation is not requested then the documentation archive may include documentation content that is an incremental update of the previously published documentation content related to the same application or module. In such case the documentation content structure as determined by the administrative file of the delivered documentation archive is compared to a central content structure at . The central content structure determines current state of the documentation content structure related to the respective application or module of the documentation archive. In one embodiment structures of documentation content may be a tree structure represented by for example a tree.xml file.

According to the comparison at one or more new substructures of the delivered documentation content are dynamically merged into the current central structure. For example for a tag in the structure of the delivered documentation content it is checked whether a tag with the same name or heading exists in the current central structure. Any new content organized under the tag is also merged into the current central structure under the same tag. In one embodiment the current central structure is dynamically updated by merging any new substructure from the delivered documentation content into the current central structure.

At the documentation archive is unarchived at the determined location. In one embodiment if merging fails the current state of the central structure is kept and the delivered documentation archive is not unarchived at the local file system of the documentation application.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. A computer readable storage medium may be a non transitory computer readable storage medium. Examples of a non transitory computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in details.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the invention are described herein for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

