---

title: Data item deletion in a database system
abstract: Example systems and methods of deleting data stored in a database system are presented. In one example, a plurality of data items is received from an application and stored at the database system. Also received from the application and stored at the database system is deletion timing information for each of the data items. The deletion timing information for a data item may indicate when the data item is to be deleted from the database system. At least one of the data items may be deleted at the database system at a time indicated by its corresponding deletion timing information without assistance from the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378337&OS=09378337&RS=09378337
owner: SAP SE
number: 09378337
owner_city: Walldorf
owner_country: DE
publication_date: 20130619
---
This application relates generally to data processing and in an example embodiment to deletion of data items in a database system.

Data privacy continues to be a significant concern to both businesses and their customers and clients. High capacity databases may contain vast amounts of personal and commercial confidential data that if accessed successfully by a person not authorized to do so may result in substantial personal and corporate financial losses of those associated with that data. Accordingly to reduce the risk of such losses most computer system applications that store and access records via a database may implement a records retention policy by which data for which there is no longer a compelling business purpose to retain are deleted. Aside from its data privacy benefits such a data retention policy is also likely to facilitate more efficient use of data storage in the database as data that is no longer important for some business or personal purpose may be removed to allow new more pertinent data to be stored in the database.

Generally each application that accesses a particular database is responsible for the creation access and ultimate deletion of its data. Consequently the application is responsible for determining whether and if so when each item of data should be deleted and for actually deleting one or more of the data items based on that determination.

In some implementations an application may organize its data items as a plurality of business data objects with each business data object further including a plurality of database records such as for example separate rows of one or more database tables. To implement a database records retention policy that successfully deletes data regarding particular clients customers employees products and the like at least some applications are capable of determining if and when each individual database record should be deleted.

The description that follows includes illustrative systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

Turning specifically to the enterprise application platform web servers and application program interface API servers are coupled to and provide web and programmatic interfaces to application servers . The application servers are in turn shown to be coupled to one or more database servers which may facilitate access to one or more databases . The web servers API servers application servers and database servers may host cross functional services . The application servers may further host domain applications .

The cross functional services may provide user services and processes that utilize the enterprise application platform . For example the cross functional services may provide portal services e.g. web services database services and connectivity to the domain applications for users that operate the client machine the client server machine and the small device client machine . In addition the cross functional services may provide an environment for delivering enhancements to existing applications and for integrating third party and legacy applications with existing cross functional services and domain applications . Further while the system shown in employs a client server architecture the present disclosure is of course not limited to such an architecture and could equally well find application in a distributed or peer to peer architecture system.

The portal modules may enable a single point of access to other cross functional services and domain applications for the client machine the small device client machine and the client server machine of . The portal modules may be utilized to process author and maintain web pages that present content e.g. user interface elements and navigational controls to the user. In addition the portal modules may enable user roles a construct that associates a role with a specialized environment that is utilized by a user to execute tasks utilize services and exchange information with other users and within a defined scope. For example the role may determine the content that is available to the user and the activities that the user may perform. The portal modules may include in one implementation a generation module a communication module a receiving module and a regeneration module. In addition the portal modules may comply with web services standards and or utilize a variety of Internet technologies including but not limited to Java Java 2 Platform Enterprise Edition J2EE SAP s Advanced Business Application Programming ABAP Language and Web Dynpro eXtensible Markup Language XML Java Connector Architecture JCA Java Authentication and Authorization Service JAAS X.509 Lightweight Directory Access Protocol LDAP Web Services Description Language WSDL WebSphere Service Registry and Repository WSRR Simple Object Access Protocol SOAP Universal Description Discovery and Integration UDDI and Microsoft.NET.

The relational database modules may provide support services for access to the database that includes a user interface library. The relational database modules may provide support for object relational mapping database independence and distributed computing. The relational database modules may be utilized to add delete update and manage database elements. In addition the relational database modules may comply with database standards and or utilize a variety of database technologies including but not limited to Structured Query Language SQL SQL Database Connectivity SQLDBC Oracle MySQL Unicode Java Database Connectivity JDBC as well as logging of database operations performed by the user enforcing of database user access permissions and the like.

The connector and messaging modules may enable communication across different types of messaging systems that are utilized by the cross functional services and the domain applications by providing a common messaging application processing interface. The connector and messaging modules may enable asynchronous communication on the enterprise application platform .

The API modules may enable the development of service based applications by exposing an interface to existing and new applications as services. Repositories may be included in the platform as a central place to find available services when building applications.

The development modules may provide a development environment for the adding integrating updating and extending of software components on the enterprise application platform without impacting existing cross functional services and domain applications .

Turning to the domain applications customer relationship management applications may enable access to and facilitate collecting and storing of relevant personalized information from multiple data sources and business processes. Enterprise personnel who are tasked with developing a buyer into a long term customer may utilize the customer relationship management applications to provide assistance to the buyer throughout a customer engagement cycle.

Enterprise personnel may utilize financial applications and business processes to track and control financial transactions within the enterprise application platform . The financial applications may facilitate the execution of operational analytical and collaborative tasks that are associated with financial management. Specifically the financial applications may enable the performance of tasks related to financial accountability planning forecasting and managing the cost of finance.

Human resources applications may be utilized by enterprise personnel and business processes to manage deploy and track enterprise personnel. Specifically the human resources applications may enable the analysis of human resource issues and facilitate human resource decisions based on real time information.

Product life cycle management applications may enable the management of a product throughout the lifecycle of the product. For example the product life cycle management applications may enable collaborative engineering custom product development project management asset management and quality management among business partners.

Supply chain management applications may enable monitoring of performances that are observed in supply chains. The supply chain management applications may facilitate adherence to production plans and on time delivery of products and services.

Third party applications as well as legacy applications may be integrated with domain applications and utilize cross functional services on the enterprise application platform .

Additionally collaborative applications may facilitate joint creation and modification of documents and other work product by multiple users and data management applications may enable data organization and other management functions to be performed on data generated by one or more other domain applications .

In one example the database system may operate as the database server in conjunction with the database within the system of . Further the computing system in one example may operate as one of the application servers and the application may be any one of the domain applications or cross functional services of that access the database via one or more of the database servers in order to store access and modify various kinds of data such as business data objects. In another example the computing system may be one of the client machines and of interacting with the database servers and the database via the network . In one example one of the client machines and may be a personal computer PC a laptop computer a tablet computer a smart phone a personal digital assistant PDA or any other device configured to execute an application that accesses the database system . In a further embodiment the computing system and the database system may be collocated within a single computing system or device. As a result the various implementations discussed herein are not limited by the particular computing structure or system used.

The database system as depicted in may include a transaction engine an event timer handler a deletion monitor an access condition module a deletion engine and data storage . Further the data storage may include data items such as for example business data objects and deletion timing information . Other conventional components that may be included in the database system such as one or more processors program memory user and communication interfaces and the like are not depicted in to focus and simplify the following discussion. Further some modules of may be combined with others or subdivided into further modules. Also some of the modules shown in the database system may be omitted while others may be added in some implementations.

The transaction engine may perform typical database operations on behalf of the database system in response to database commands issued by the application such as for example create a new data item read a portion of an existing data item modify an existing data item and so on. The commands that cause such operations may be for example relational database queries or similar types of commands.

In one example commands which involve the creation or modification of a data item may also include the writing or storage of the deletion timing information associated with the data items involved. For example commands for writing or modifying one or more fields or portions of a data item may also write or modify deletion timing information that is stored as part of its associated data item . In one example the transaction engine may also receive commands from the application that cause the storing of the deletion timing information as a separate data value that is associated with one of the data items stored in the data storage . For example the application may transmit to the transaction engine special commands or instructions provided via an application programming interface API of the database system to set or modify the deletion timing information for one or more data items .

The event timer handler may track one or more events occurring within the database system such as the database system entering a particular operational state or receiving an internally generated e.g. generated inside the database system or externally generated e.g. generated outside the database system signal and cause the deletion monitor to begin a determination of which data items should be deleted based on the deletion timing information in response to the event. An example of an internally generated signal would be a signal indicating that the amount or percentage of storage consumed by the data items has reached a predetermined threshold value. For an externally generated signal examples may be a command entered by a system operator through a console or other input interface of the database system or a signal received from the application executing on the computing system .

Further the event timer handler may include or be communicatively coupled with a timer that provides a signal indicating when a predetermined amount of time has elapsed since initiation of the timer. In response the event timer handler may then initiate a determination of which of the data items should be deleted in view of the deletion timing information in response to expiration of the timer. Presuming re enabling of the timer after its expiration the use of the timer may result in periodic monitoring of the deletion timing information for each of the data items . In one example the timer may be set to expire once or twice a day although any length of time that is suitable in view of the nature of the data items stored in the data storage may be employed in other implementations.

As mentioned above the deletion monitor determines which of the data items should be deleted or removed from the data storage using the deletion engine based on the deletion timing information for each respective data item . The deletion timing information for a data item may include any information that would allow the deletion monitor to determine whether the current time is appropriate to delete that data item . One example of the deletion timing information may include a binary flag or similar data value indicating whether the associated data item is to be deleted immediately or as soon as possible or practical. In another example the deletion timing information may provide a particular date and or time in the future at which the corresponding data item should be deleted. In yet another implementation the deletion timing information may indicate a particular access condition of the corresponding data item that when exhibited by the data item may cause the deletion monitor to initiate deletion of the data item .

In some implementations the deletion timing information may be generated via a rules framework which may be software executing on the computing system or another system that may access the database system . For example the rules framework may generate the deletion timing information for a corresponding data item based on one or more preset rules indicating the deletion timing information that is to be applied to one or more data items based on the type of the data items or based on other characteristics of the data items . These rules may be defined by a user or customer of the application in at least some implementations. In other examples the deletion timing information may include the rules from which the actual deletion timing is generated.

With respect to this last example the deletion monitor may communicate with the access condition module which may determine one or more access conditions exhibited by each of the data items . Examples of such access conditions may include but are not limited the date and or time of the most recent read and or write access of the data item and the access rate read write or total of the data item . As discussed above if the access condition for a particular data item compares favorably with a predetermined access condition expressed in the deletion timing information associated with the data item the deletion monitor may then initiate deletion of the data item . For example if a minimum period of time indicated in the deletion timing information has elapsed since the last read or write access of the data item or the read and or write access rate associated with the data item has dropped below a particular level specified in the deletion timing information the deletion monitor may cause the deletion of the data item .

In one example the deletion monitor may call or invoke the deletion engine to perform the actual deletion of the data item . In some examples the deletion engine may also perform any reclamation operations to ensure that the portion of the data storage formerly occupied by the deleted data item as well as that of its associated deletion timing information is available for storage of new data items and deletion timing information . In a further implementation the deletion monitor may rearrange the remaining data items and deletion timing information within the data storage to render subsequent access to the remaining data items and deletion timing information faster and more efficient.

Thus by employing the database system of the database system may perform the actual monitoring of deletion conditions for the data items as well as the actual deletion of those data items from the data storage thus relieving the application of the responsibility for those particular operations. Such embodiments may be effective in more efficiently implementing data deletion associated with data retention policies implemented by corporations and other entities especially in database systems that perform their normal access operations quickly and efficiently such as for example the SAP HANA in memory database technology provided by SAP AG thus possibly providing excess processing capacity for implementation of the data deletion functionality described herein. Other possible aspects of the database system as well as other systems and methods disclosed herein are explained in the following description.

In the method a plurality of data items e.g. the data items of are received from an application operation and are stored operation such as in the data storage of . Similarly deletion timing information e.g. the deletion timing information of for each of the data items is received operation and stored operation such as in the data storage . At least one of the data items may then be deleted at a time indicated by its corresponding deletion timing information operation . In at least some examples the database system performs the deletion operation operation without assistance from the application .

While the operations through of the method of are shown in a specific order other orders of operation including possibly concurrent or continual execution of at least portions of one or more operations may be possible in some implementations of method as well as other methods discussed herein. In fact each of the operations through may be performed in a continual repetitive or ongoing manner asynchronously during execution of the application in some embodiments.

In some implementations a mixture of the schemes depicted in may be employed within a single data storage structure A B and C. Further each of the types of deletion timing information and e.g. object based record based and field based may be applied to the same business data object and .

In each of the deletion timing information and is shown as being stored in a separate area in the data storage A B and C from their corresponding data items and . However in other examples each individual instance of the deletion timing information and may be stored as a portion of its associated data item and . For example referencing presuming each of the database records of business data object 1 are separate rows of a database table the deletion timing information for each of the database records may be stored as an additional column in that same database table associated with the business data object 1 . Other possibilities of storing and relating the data items and with their corresponding deletion timing information and are also possible.

In some examples the deletion timing information and for a particular business data object and may contained within one or more deletion data objects. More specifically each deletion data object may refer to a different portion of its associated business data object and with each deletion data object including the deletion timing information and and or rules for generating the deletion timing information and for its associated portion of the business data object and . For example a single deletion data object may be associated with a business data object and if the entire business data object and is subject to the same deletion timing information and or to the same rules for generating the deletion timing information and . In other examples each of multiple deletion data objects each of which is associated with one or more data tables data table records and or data table record fields of the business data object and may incorporate its specific deletion timing information and or corresponding rules for generating the deletion timing information and . In one example each particular field of a data object record listed in a deletion data object may be identified by a table key record number and field number of the corresponding business data object and .

In the method the deletion monitor may determine via the event timer handler and or the access condition module whether it is time to check if one or more of the data items should be deleted from the data storage operation . As described earlier this determination can be made for example in response to the occurrence of an event such as the receipt of a signal or in response to the expiration of a timer via the event timer handler . If the time to check has not arrived the deletion monitor may continue to wait until an event or timer condition indicates that checking for deletion of the data items is to commence.

If instead the condition to proceed occurs the deletion monitor may then acquire a data item in the data storage operation and determine whether the time has arrived to delete that data item operation . As explicated above the deletion monitor may consult the deletion timing information e.g. a deletion flag a date and or time for deletion or some access condition for that specific data item to determine whether the data item should be deleted. Presuming the data item is to be deleted the deletion monitor may initiate the deletion via the deletion engine operation . After the data item is checked and possibly deleted the deletion monitor may determine if there are any data items left unchecked operation and if not accesses the next data item operation . Otherwise the deletion monitor may wait until the next time the data items of the data storage are to be checked operation .

In some embodiments at least some of the embodiments described above may be implemented within a partitioned database system in which each of the data items are stored within a particular partition for at least some period of time based on its relative level of use or activity within the system. is a block diagram of a partitioned data storage for such a database system in which the partitioned data storage includes multiple partitions shown in as partition A A partition B B and so forth through partition N N. Each of the partitions may include data items depicted as data items A in partition A A data items B in partition B B and the like through data items N in partition N N. Also included in the data storage is change partition information for the data items . As is described more fully below the change partition information may include deletion timing information in one or more of the forms discussed earlier.

Also included in the partitioned data storage is a deletion partition X to which data items that are to be deleted may be stored . More accurately when a data item is stored in the deletion partition X the data item is actually deleted or removed from the partitioned data storage . In one example the Unix operating system provides a pseudo device such as dev null that may serve as the deletion partition X.

Employing the environment of the deletion monitor may operate more generally as a partition monitor with respect to the partitioned data storage . More specifically in response to some event occurrence or timer expiration the deletion monitor may check each of the data items to determine whether that data item should be relocated from its current partition to another partition . For example the deletion monitor may check the level of access activity for the data item such as via the activity condition module of . In some arrangements each of the partitions may be associated with a particular storage capacity and or access speed such that data items that are accessed relatively often may be stored in relatively faster partitions while data items that are accessed relatively infrequently may be stored in relatively slower partitions . In addition data items that are to be deleted according to the data deletion timing information included in their corresponding change partition information may be specifically moved from their current partition to the deletion partition X. As described above the deletion timing information for the data item may include one or more of a deletion flag a deletion date and or time and a deletion access activity level. Further the deletion access activity level may be incorporated with the various activity levels used to apportion the data items to the remaining partitions A through N. In one example data which is so temporary in nature that it is not to persist at all in the partitioned data storage may be moved to the deletion partition X immediately after its use.

If instead the condition to proceed occurs the deletion monitor may then acquire a data item in the data storage operation and determine whether the data item should be moved from one partition to another operation . As discussed above the deletion monitor may consult the change partition information for that specific data item to determine whether the data item should be relocated. In one example the change partition information for the data item may also incorporate or include deletion timing information . For example access activity information for the data item may indicate that the data item is to be moved to the deletion partition X which would result in the deletion of the data item from the partitioned data storage . In some examples the change partition information for the data item may be supplemented by additional deletion timing information e.g. a deletion flag or a date and or time for deletion that may override partition changes from one of the partitions A N to another of the partitions A N.

Presuming the data item is to be moved from one partition to another the deletion monitor may initiate the move via the deletion engine operation . In one example a deletion that is mandated by any of the change partition information or deletion timing information including a deletion flag or the expiration of a timer may be performed via a move of the data item from its current partition to the deletion partition X. After the data item is checked and possibly deleted the deletion monitor may determine if there are any data items left unchecked operation and if so may proceed to access the next data item operation . Otherwise the deletion monitor may wait until the next time the data items of the data storage are to be checked operation .

As a result of at least some of the embodiments described above the actual deletion of data items from a database system as indicated by an application that accesses the database is performed by the database system based on deletion timing information provided by the application and stored in the database. Presuming excess processing capacity possessed by the database system this offloading of responsibility from the application to the database system renders deletion of unwanted data items more efficient and hence faster due to the resulting reduced demand on processing and communication resources on the computing system executing the application.

The machine is capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute a set or multiple sets of instructions to perform any one or more of the methodologies discussed herein.

The example of the processing system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory e.g. random access memory and static memory e.g. static random access memory which communicate with each other via bus . The processing system may further include video display unit e.g. a plasma display a liquid crystal display LCD or a cathode ray tube CRT . The processing system also includes an alphanumeric input device e.g. a keyboard a user interface UI navigation device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit a type of non volatile memory storage includes a machine readable medium on which is stored one or more sets of data structures and instructions e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The data structures and instructions may also reside completely or at least partially within the main memory the static memory and or within the processor during execution thereof by processing system with the main memory the static memory and the processor also constituting machine readable tangible media.

The data structures and instructions may further be transmitted or received over a computer network via network interface device utilizing any one of a number of well known transfer protocols e.g. HyperText Transfer Protocol HTTP .

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. the processing system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may include dedicated circuitry or logic that is permanently configured for example as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware module may also include programmable logic or circuitry for example as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry for example configured by software may be driven by cost and time considerations.

Accordingly the term hardware module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules include a general purpose processor that is configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Modules can provide information to and receive information from other modules. For example the described modules may be regarded as being communicatively coupled. Where multiples of such hardware modules exist contemporaneously communications may be achieved through signal transmissions such as for example over appropriate circuits and buses that connect the modules . In embodiments in which multiple modules are configured or instantiated at different times communications between such modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple modules have access. For example one module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further module may then at a later time access the memory device to retrieve and process the stored output. Modules may also initiate communications with input or output devices and can operate on a resource for example a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments include processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or more processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processors may be located in a single location e.g. within a home environment within an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of claims provided below is not limited to the embodiments described herein. In general the techniques described herein may be implemented with facilities consistent with any hardware system or hardware systems defined herein. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the claims. In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the claims and their equivalents.

