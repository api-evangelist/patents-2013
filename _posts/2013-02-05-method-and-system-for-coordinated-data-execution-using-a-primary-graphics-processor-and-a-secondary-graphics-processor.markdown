---

title: Method and system for coordinated data execution using a primary graphics processor and a secondary graphics processor
abstract: A method and system for coordinated data execution in a computer system. The system includes a first graphics processor coupled to a first memory and a second graphics processor coupled to a second memory. A graphics bus is configured to couple the first graphics processor and the second graphics processor. The first graphics processor and the second graphics processor are configured for coordinated data execution via communication across the graphics bus.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471952&OS=09471952&RS=09471952
owner: NVIDIA CORPORATION
number: 09471952
owner_city: Santa Clara
owner_country: US
publication_date: 20130205
---
This application is a continuation application of and claims priority to the copending patent application entitled A Method and System for Coordinated Data Execution Using a Primary Graphics Processor and a Secondary Graphics by Diercks D. and De Waal A. with Ser. No. 10 390 120 filed Mar. 14 2003 hereby incorporated by reference in its entirety.

The field of the present invention pertains to digital electronic computer systems. More particularly the present invention relates to a system for coordinating the operation of multiple graphics processor units within a computer system.

Digital computers are being used today to perform a wide variety of tasks. A primary means for interfacing a computer system with its user is through its graphics display. The graphical depiction of data through for example full motion video detailed true color images photorealistic 3 D modeling and the like has become a preferred mechanism for presenting complex data to the user. Increasing the performance and or the realism of interactive three dimensional images and scenes has become a primary driver for the increasing performance of newer computer systems.

Generally a desktop computer system equipped to handle 3 D image data includes a specialized graphics processor unit or GPU in addition to the traditional CPU. The GPU includes specialized hardware configured to handle 3 D computer generated objects. In a typical 3D computer generated object the surfaces of the 3D object are described by data models. The GPU is configured to operate on these data models and their constituent primitives usually mathematically described polygons and polyhedra that define the shape of the object the object attributes and the connectivity and positioning data describing how the objects fit together. Generally the component polygons and polyhedra connect at common edges defined in terms of common vertices and enclosed volumes. The hardware of the GPU processes the objects implementing the calculations required to produce the realistic 3 D images. The GPU processing results in the polygons being texture mapped Z buffered and shaded onto an array of pixels creating the realistic 3D image.

In a typical graphics computer system most of the processor intensive rendering computations are performed by the GPU included in the computer system. For example the 3D object data models are traversed by a graphics driver software program e.g. in response to user input running on both the GPU and CPU of the computer system. Generally the primitives describing the 3D object are processed by the CPU and sent to the GPU for rendering. For example a 3D polyhedra model of an object is sent to the GPU as contiguous strips of polygons comprising a graphics data stream e.g. primitives rendering commands instructions etc. . This graphics data stream provides the GPU with the information required to render the 3D object and the resulting scene. Such information includes for example specular highlighting anti aliasing depth transparency and the like. Using this information the GPU performs all the computational processing required to realistically render the 3D object. The hardware of the GPU is specially tuned to perform such processing quickly and efficiently in comparison to the CPU.

The performance of a typical graphics rendering process as implemented on a graphics computer system is highly dependent upon the performance of the underlying hardware. High performance graphics rendering requires high data transfer bandwidth to the memory storing the 3 D object data and the constituent primitives. Thus typical prior art GPU subsystems e.g. GPU equipped graphics cards typically include a specialized high bandwidth local graphics memory for feeding the required data to the GPU.

A problem with the typical prior art GPU subsystems is the fact that the data transfer bandwidth to the system memory or main memory of a computer system is much less than the data transfer bandwidth to the local graphics memory. A GPU subsystem needs to communicate with system memory in order to exchange data with the CPU and interact with programs executing on the CPU. This communication occurs across a graphics bus or the bus that connects the graphics subsystem to the CPU and system memory. For example 3 D objects and their primitives need to be transferred from a program executing on the CPU and on system memory into the local graphics memory of the graphics subsystem for rendering. The low data transfer bandwidth of the graphics bus acts as a bottleneck on overall graphics rendering performance.

The problem with respect to the low data transfer bandwidth of the graphics bus constricts the flow of data in both directions. For example the low data transfer bandwidth of the graphics bus acts as a bottleneck for those applications where data needs to be read back from the graphics subsystem to the CPU. Such applications include for example post transform applications where 3 D object data after transformation needs to be read back to the CPU for use by programs executing on the CPU. Thus even though the CPU is designed to have a very high data transfer bandwidth to system memory programs executing on the CPU and the system memory are constricted by the very much lower data transfer bandwidth of the graphics bus as for example a real time 3 D application waits for post transform information from the graphics subsystem.

Thus what is required is a solution capable of overcoming the limitations imposed by the limited data transfer bandwidth of a graphics bus of a computer system. What is required is a solution that eliminates the bottleneck imposed by the much smaller data transfer bandwidth of the graphics bus in comparison to the data transfer bandwidth of the GPU to local graphics memory and the CPU to system memory. The present invention provides a novel solution to the above requirements.

Embodiments of the present invention provided a method and system for coordinated data execution using a primary graphics processor and a secondary graphics processor. Embodiments of the present invention overcome the limitations imposed by the limited data transfer bandwidth of a graphics bus of a computer system. Additionally embodiments of the present invention eliminate the bottleneck imposed by the much smaller data transfer bandwidth of the graphics bus in comparison to the data transfer bandwidth of the GPU to local graphics memory and the CPU to system memory.

In one embodiment the present invention is implemented as a graphics computer system configured to implement a coordinated data execution process using two graphics processors. In this embodiment the system includes a first graphics processor coupled to a first memory and a second graphics processor coupled to a second memory. A graphics bus is configured to couple the first graphics processor and the second graphics processor. The first graphics processor and the second graphics processor are configured for coordinated data execution via communication across the graphics bus.

In one embodiment the first memory comprises a local graphics memory and the second memory comprises a system memory. The first graphics processor can be detachably coupled to the graphics bus by a connector. The second graphics processor can be integrated with a memory controller for the system memory. The first and second graphics processors function together in a coordinated manner to minimize the amount of data that is required to be transferred across the graphics bus.

In one embodiment the first graphics processor is a detachable GPU equipped graphics card configured to perform those graphics operations that are most suited to the very high data transfer bandwidth between the first graphics processor and local graphics memory. The second graphics processor is an integrated graphics processor e.g. an iGPU within a Northbridge configured to perform those graphics operations that are most suited to the very high data transfer bandwidth between the second graphics processor and system memory.

In this manner the coordinated operation of the first graphics processor and the second graphics processor reduces the amount of data required for transfer across the graphics bus and thereby overcomes the limitations imposed by the limited data transfer bandwidth of the graphics bus.

Reference will now be made in detail to the preferred embodiments of the present invention examples of which are illustrated in the accompanying drawings. While the invention will be described in conjunction with the preferred embodiments it will be understood that they are not intended to limit the invention to these embodiments. On the contrary the invention is intended to cover alternatives modifications and equivalents which may be included within the spirit and scope of the invention as defined by the appended claims. Furthermore in the following detailed description of embodiments of the present invention numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be recognized by one of ordinary skill in the art that the present invention may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail as not to unnecessarily obscure aspects of the embodiments of the present invention.

Embodiments of the present invention provided a method and system for coordinated data execution using a primary graphics processor and a secondary graphics processor. Embodiments of the present invention overcome the limitations imposed by the limited data transfer bandwidth of a graphics bus of a computer system. Additionally embodiments of the present invention eliminate the bottleneck imposed by the much smaller data transfer bandwidth of the graphics bus in comparison to the data transfer bandwidth of the GPU to local graphics memory and the CPU to system memory. Embodiments of the present invention and their benefits are further described below.

The graphics processors communicate with each other across a graphics bus to facilitate the coordinated processing. The system embodiment performs graphics processing to support applications executing on the CPU . To implement the graphics processing the processing workload is shared between the graphics processor and the graphics processor . The graphics processing implemented on each of the graphics processors is coordinated in order to minimize the impact of the limited data transfer bandwidth of the graphics bus . The graphics processing can be shared between the graphics processors in order to exploit any parallelism or concurrent execution properties which may be present in an application.

The system embodiment shows the memory and the memory for the graphics processors respectively. In the present embodiment the data transfer bandwidth of the busses between the graphics processor and the memory and between the graphics processor and the memory is much greater than the data transfer bandwidth of the graphics bus .

In the system embodiment shown in the first memory comprises a local graphics memory and the second memory comprises a system memory . A memory controller provides the interconnection between the system memory the CPU and the GPU through the busses . A graphics bus provides the interconnection between the GPU the system memory and the CPU . A local graphics memory is directly coupled to the GPU via a local bus . The rendered 3 D images are sent to a coupled display for display to the user.

As with the system embodiment of the graphics processors communicate with each other across the graphics bus to facilitate the coordinated processing. The system embodiment performs coordinated graphics processing wherein the workload between the graphics processor and the graphics processor is shared in order to minimize the impact of the lower data transfer bandwidth of the graphics bus .

In this embodiment the GPU accesses the system memory through the memory controller . The busses are optimized high speed busses configured to provide high data transfer bandwidth to the system memory . The GPU accesses the local graphics memory through an even higher performance local bus . The local bus typically provides even greater data transfer bandwidth than the busses . In comparison the graphics bus is much slower than the local graphics bus e.g. an order of magnitude slower and the busses .

In this embodiment the GPU is integrated within the memory controller and communicates with the system memory across a system bus . The CPU communicates with the memory controller via a front side bus . The memory controller provides the communication pathway to the system memory via the system bus .

As in the system embodiment of the busses are high speed busses. The GPU communicates with a graphics memory via a high speed local bus and the display receives rendered graphics data from GPU for display to the user. The graphics bus is much slower than the local graphics bus and the busses .

As with the system embodiment of the GPUs communicate with each other across the graphics bus to facilitate the coordinated processing. The system embodiment performs coordinated graphics processing wherein the workload between the graphics processor and the graphics processor is shared in order to minimize the impact of the lower data transfer bandwidth of the graphics bus .

Referring still to the system embodiment shows the decisions the graphics driver makes with regard to sharing the graphics processing load between the GPU and the GPU . The system embodiment shows an integrated GPU iGPU similar to the integrated GPU shown in . However it should be noted that the system embodiment is applicable to non integrated GPUs such as the GPU shown in . Accordingly to aid the reader s understanding the term primary GPU can be used to refer to the GPU coupled to a local graphics memory via a highly optimized high performance local bus e.g. local bus of and the term secondary GPU can be used to refer to the GPU coupled to system memory.

In the system embodiment the graphics driver splits the graphics processing workload in order to implement coordinated data execution using the primary graphics processor in this case the GPU and the secondary graphics processor in this case the integrated GPU iGPU . The GPU connects to a system memory controller across a graphics bus. The system memory controller is typically referred to as a Northbridge. The graphics bus is typically an industry standard AGP accelerated graphics port bus. The GPU also communicates with the CPU and thus the graphics driver and the application via the graphics bus. This is shown as the low bandwidth connections and . The GPU is equipped for very high bandwidth communication with its local graphics memory in the manner described above.

In the system embodiment the secondary graphics processor is integrated with the system memory controller on the same die shown as iGPU . The iGPU and GPU communicate across the low bandwidth graphics bus shown as the connection . The iGPU has a much faster access to system memory in comparison to the GPU . This is due to the fact that the GPU must transit the low bandwidth connection of the graphics bus in order to access system memory .

In executing applications such as the application e.g. graphics rendering applications the graphics driver minimizes the penalties imposed by the low bandwidth connections and by coordinating the operation of the iGPU and the GPU . In the present embodiment graphics processing is apportioned between the iGPU and the GPU in order to best utilize their respective access speeds to the system memory and local graphics memory and in order to minimize the impact of the low bandwidth connections to the GPU e.g. across the graphics bus . Additionally communications bandwidth with the CPU is much greater for the iGPU integrated in the memory controller in comparison to the GPU .

The GPU is typically a card mounted GPU connected to an AGP slot of the graphics bus. The iGPU is typically a more limited graphics processor integrated into the Northbridge chip. Such a configuration is shown in below. The graphics driver software is configured to implement load sharing between the GPU and the iGPU depending upon the type of data execution.

The iGPU is well suited for data execution of operations that occur in the first part of a graphics pipeline. Such operations include transform lighting occlusion culling back face culling view frustum culling clipping and the like. These operations reduce the amount of data required for transfer across the limited bandwidth of the graphics bus e.g. low bandwidth connections to the GPU .

The iGPU is also well suited for pre processing data operations which best utilize high communications bandwidth with system memory and or the CPU e.g. high bandwidth connection such as texture map reordering texture compression decryption and or decoding of video e.g. MPEG 2 MPEG 4 etc. and certain vertex shader operations.

The iGPU can be used to process commands from a processing thread that is different from the thread the GPU is processing. For example the iGPU can render text for a word processor while the GPU renders 3D images to a different window. In this manner the parallelism provided by the separate iGPU can be exploited by software applications e.g. application .

The GPU is well suited for the traditional graphics rendering operations which require extremely high communications bandwidth with the local graphics memory e.g. anti aliasing etc. or those graphics rendering operations which occur later in a graphics rendering pipeline e.g. lighting bump mapping texture mapping and the like . As described above the local graphics bus between a GPU and its local graphics memory is a highly specialized highly optimized bus. Such busses e.g. local bus shown in can be 256 bits wide and can have more than 19 GB sec of data transfer bandwidth.

It should be noted that the iGPU can be a much smaller graphics processor than the GPU . For example the iGPU can be implemented as a relatively simple unit of hardware logic e.g. a single shader unit designed to function in accordance with one embodiment of the present invention e.g. by reducing the amount of data required to be transferred across the graphics bus .

It should also be noted that the iGPU can be configured to use a portion of the system memory as its dedicated local memory. For example the graphics driver software in conjunction with the memory management software of an operating system will reserve a portion of system memory for its own use as a local graphics memory.

System is substantially similar to system of . System however explicitly shows the GPU being card mounted and coupled to the graphics bus via a detachable connector . In the present embodiment the graphics card is adapted to connect into an AGP slot type connector . The graphics card also connects to a display e.g. flat panel display CRT display etc. . In this embodiment the graphics bus is in accordance with a version of the AGP specification AGP 4 AGP 8 etc. .

The iGPU is integrated into a Northbridge memory controller chip which connects to the CPU and system memory . A Southbridge chip connects to the Northbridge and provides connectivity to the expansion busses . A plurality of optional peripheral devices are connected to system via the expansion busses as shown.

Process begins in step where a 3 D graphics application is executed. The 3 D graphics application is primarily instantiated in system memory e.g. system memory and executes on the CPU e.g. CPU . The graphics rendering operations of the application are handled through a graphics driver via the driver s API application programming interface .

In step the graphics operations are sent from the application to the graphics driver. The graphics operations are then divided into a first set of operations and a second set of operations. In the present embodiment the first set of operations comprises those operations which occur earlier in a graphics rendering pipeline. As described above such operations include for example transform lighting occlusion culling back face culling view frustum culling clipping and the like. The first set of operations can also include certain pre processing data operations which best utilize high communications bandwidth with system memory and or the CPU. The second set of operations comprises those operations which occur later in a graphics rendering pipeline such as for example anti aliasing lighting bump mapping and the like.

In step the first set of graphics operations are sent to the secondary iGPU . In step the second set of graphics operations are sent to the primary GPU . Then in step the operation of the iGPU and the GPU is coordinated via communication across the graphics bus e.g. graphics bus . As described above the division of work between the primary and secondary GPUs minimizes the amount of data required to be transferred across the low bandwidth graphics bus .

Thus embodiments of the present invention provided a method and system for coordinated data execution using a primary graphics processor and a secondary graphics processor. Embodiments of the present invention overcome the limitations imposed by the limited data transfer bandwidth of a graphics bus of a computer system. Additionally embodiments of the present invention eliminate the bottleneck imposed by the much smaller data transfer bandwidth of the graphics bus in comparison to the data transfer bandwidth of the GPU to local graphics memory and the CPU to system memory.

The foregoing descriptions of specific embodiments of the present invention have been presented for purposes of illustration and description. They are not intended to be exhaustive or to limit the invention to the precise forms disclosed and obviously many modifications and variations are possible in light of the above teaching. The embodiments were chosen and described in order to best explain the principles of the invention and its practical application to thereby enable others skilled in the art to best utilize the invention and various embodiments with various modifications as are suited to the particular use contemplated. It is intended that the scope of the invention be defined by the claims appended hereto and their equivalents.

