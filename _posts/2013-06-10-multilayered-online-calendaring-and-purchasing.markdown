---

title: Multi-layered online calendaring and purchasing
abstract: A computer-implemented method and system for generating and displaying a calendar containing user-selected events from user-selected categories. A plurality of categories of events are provided. The user can select which categories are of interest, and then select individual events within those categories. Events are overlaid on a calendar unique to the user. Calendars may also be shared among a number of selected users, if desired. Online purchasing and related actions can be associated with each event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384474&OS=09384474&RS=09384474
owner: AOL INC.
number: 09384474
owner_city: Dulles
owner_country: US
publication_date: 20130610
---
This application is a continuation of co pending U.S. patent application Ser. No. 11 671 323 filed Feb. 5 2007 which is a continuation of U.S. patent application Ser. No. 10 116 301 filed Apr. 3 2002 now U.S. Pat. No. 7 174 517 which is a continuation of U.S. patent application Ser. No. 09 265 515 filed Mar. 10 1999 now U.S. Pat. No. 6 369 840 all of which are incorporated by reference in their entirety herein.

The present invention relates generally to software for generating and manipulating computer implemented planning calendars and more particularly to a system and method of multi layered online calendaring and purchasing.

Conventional software applications for calendaring and scheduling generally take one of two forms stand alone or networked. In a stand alone calendaring application some sort of user interface is provided which allows a user to specify dates and times for events. Events may then be viewed on a day by day week by week or month by month basis depending on the user s wishes. In many such applications selective viewing of certain predefined categories of events is provided.

An example of a stand alone calendaring application is In Control by Attain Corporation. Many other calendaring applications are available which offer similar features. In In Control three views of the user s calendar information are available Outline Calendar and Day. Outline View allows the user to view events in a list format and also permits hierarchical arrangement of the event descriptions. A date and time can be associated with each event and the user can also specify other types of information such as priority description and the like. In Calendar View a conventional calendar is displayed. Events from the Outline View are shown on the calendar in their appropriate locations according to the date associated with each event. The user can specify the range of dates to be displayed such as for example one week two weeks or one month. In Day View events for a single day are shown on a display resembling a conventional paper dayplanner. Items having a specific time are shown within the daily schedule at the appropriate time. Events not having a specific time are listed in a ToDo list next to the scheduled events.

Stand alone calendaring applications such as In Control are effective for managing one s calendar but they do not provide an easy mechanism for importing events from an outside source in an automated manner. For example if a user is planning to attend a baseball game at 7 30 p.m. on Thursday the entry for the baseball game must be manually entered in the calendaring application. Such applications do not provide an easy way to automatically import such information from for example a list of sporting events from an outside source. The following disadvantages present themselves 

In addition stand alone applications do not provide the capability of sharing one s calendar information with other users.

Some prior art calendaring applications operate in a networked environment and thereby allow sharing of calendar information. Individuals calendar information can be shared across a network connection if the owner of the information grants permission for such access . Applications such as Microsoft Outlook from Microsoft Corporation provide this type of functionality. However such applications do not generally provide the ability to import event information from outside sources on a category by category basis and then to select individual events from selected categories for inclusion in a user s personal calendar. Furthermore such applications do not provide a multi layered calendaring system wherein events belonging to different categories and selected by a user can be overlaid on one another in a single integrated calendar.

Relatively recently hosted calendaring applications have been developed which store in a central location all calendaring information for a large number of users. Such prior art systems include for example appoint.net www.appoint.net Yahoo Calendar calendar.yahoo.com and EventCenter from Amplitude Software Corp. www.amplitude.com . Users access their calendar information across a network such as the Internet and security is assured by requiring that each user provide a login and password when accessing the system.

Some of these hosted calendaring systems allow users to add events from outside sources to their personal calendars if desired. In general however such capability is limited in its flexibility. In particular none of these calendaring systems allow a user to select a category of events and subsequently add individual events from the category to a personal calendar. Furthermore none of these systems provide a multi layered calendaring system wherein events belonging to different categories and selected by a user can be overlaid on one another in a single integrated calendar.

What is needed is a calendaring application that allows a higher level of flexibility in the way events can be imported and viewed.

What is further needed is a calendaring application that permits a user to select categories of events that are of interest and which provides features allowing a user to add selected events from those categories to his or her personal calendar.

What is further needed is a calendaring application that allows a user to associate layers with certain subsets of events and to selectively view any desired combination of layers in an integrated manner on a personal calendar page.

What is further needed is a calendaring application that allows a user to share selected calendar information including selected events with other users.

What is further needed is a calendaring application that allows a user to purchase products services or tickets associated with an event using online communication means.

In accordance with the present invention there is provided a multi layered online calendaring and purchasing system and method which allows a user to specify categories of events to view events belonging to the specified categories from outside sources and to add selected events from the outside sources to a personal calendar. The user can choose which categories of selected events are to be displayed in any combination he or she desires. The user s personal calendar can also be shared with other users or selected events and or categories can be shared as desired. The user can set up a group calendar specifying the members in the group where every group member can access the calendar and make changes to it. Different levels of access can be specified for different members of the group. The user can also import events from other users calendars. In addition purchases of products services or tickets can be effected using links associated with displayed events.

A user logs onto the calendaring system by providing a unique login name and password that identifies the user and allows the system to retrieve that user s personal calendar and associated information. In one embodiment as described below the calendaring system is hosted on a server that is connected to the Internet and the user logs in by interacting with the server via a web page.

Once the user has logged in he or she can enter any of several different areas of the system in order to perform different types of activities. An Event Directory allows the user to select categories of events that are of interest. An Event Tracker allows the user to view events associated with selected categories to obtain more details concerning such events and to selectively add events to the user s personal calendar. A My Calendar area provides several views of the user s personal calendar including events that were selected using the Event Tracker as well as events that have been manually added by the user. In the My Calendar area the user is able to view and manipulate any of these events. Finally a What s New area is available for alerting the user to new categories and events that may be of interest this area may also be used to emphasize particularly important events.

The Event Directory provides listings of event categories preferably arranged by area of interest. Event categories include for example movie opening dates sporting events computer tradeshows and the like. Users can develop their own event categories and share them with other users by publishing them on the Event Directory. The user can click on any event category and view a list of events belonging to that category. Additional information can be obtained for each of the events. The user can choose to select any event categories for inclusion in the Event Tracker. The user can also select a localized option which restricts events to those located in the user s city state or other region.

The Event Tracker displays a list of events belonging to the selected categories. The user can select from several different views of the displayed events and can also choose to view one category at a time or all categories at once. Events can be sorted by date or by category as desired. The user can click on a button to add a particular event to his or her personal calendar. In addition the user can click on a button for online ordering and purchasing of products services or tickets as appropriate for the particular event.

The My Calendar area provides an extremely flexible and configurable personal calendar. The user can choose from daily weekly or monthly views and can select particular categories of events to be displayed or can choose to see all events. Thus the system provides a multi layered calendar where each layer corresponds to an event category. Viewing multiple categories simultaneously provides an integrated personal calendar showing all events in one place. The user can add appointments and other events manually in the My Calendar area and such events are displayed alongside events that were selected in the Event Tracker. The user can also specify that he or she would like to be notified when an event is about to occur either by e mail or by some other communications means. Finally the user can specify whether he or she would like to share the personal calendar with other users.

Referring now to there is shown a block diagram of the system architecture of an embodiment of the present invention. System is implemented in a networked computing environment. Individual elements communicate with one another using standard protocols such as for example Transfer Control Protocol Internet Protocol TCP IP and Hypertext Transfer Protocol HTTP over a data communication line such as a T1 or T3 line. Other implementations are also possible and system may even be implemented on a non networked computer if desired.

In one embodiment the present invention operates in a networked environment such as the Internet or an intranet and pages are provided for user access and interaction via a browser over the World Wide Web as is known in the art.

Director connects an individual client computer not shown to system . Director handles the low level interaction with an individual client computer and accepts input and output for transmission to and from web servers layer . In one embodiment where several load balancers are provided within layer director selects the least loaded load balancer for connection so that the load is relatively balanced among the components of web servers layer . Director is also able to invoke a thread to determine if the user is a new or returning user based on either 1 the particular Uniform Resource Locator URL string used to connect to system or 2 a cookie file that has previously been stored on the user s machine. If the user is a returning user director can call a What s New page which retrieves personal calendar information from database servers layer and presents relevant information to the user as appropriate.

In one embodiment director is implemented using Big IP from F5 Labs Inc. for connecting web servers layer to the World Wide Web in a multiplexed manner for optimal load balancing.

Web servers layer contains one or more load balancers for determining which application server is best able to handle a particular connection for a particular user. In one embodiment load balancers are implemented as Sun Microsystems Ultra 5 servers running a load balancing client. New users are sent to the least loaded application server . Returning users are sent to the application server containing the process that serviced the user during the most recent connection with that user. This technique advantageously facilitates access to a previously stored user cache which improves performance as will be described below in connection with . A long term memory LTM provides a mechanism for storing information as to which process serviced the user in the past so that this information can be retrieved by load balancers upon the user s return.

Application servers layer contains one or more application servers . Application servers layer provides an intermediate layer between database layer and web server layer . Application servers run the software code for interacting with database layer and for retrieving modifying and storing data in databases and . In one embodiment each application server is a Sun Microsystems Enterprise server.

Database servers layer contains databases such as personal calendar information database events database and the like for maintaining scheduling and other information for users of the system and also maintaining information describing scheduled events and announcements. In one implementation individual databases within layer are stored on separate database servers such as Sun Microsystems Enterprise servers. Databases may be stored in parallel redundant fashion for backup purposes. Personal Calendar Information database contains various types of data including personal event data for various users. Events database can also connect with other data sources not shown as desired so that information describing events can be imported and made available to users of system .

In an alternative embodiment each database in database servers layer can be split into a plurality of smaller databases each for a subset of users.

Referring now to there is shown a block diagram of an application server according to one embodiment of the present invention. Application server serves personal calendars event directory contents user profiles and other types of pages to users in response to Hypertext Transfer Protocol HTTP requests relayed by load balancers in web servers layer . In one embodiment server is implemented as a set of shared libraries that are dynamically linked and loaded at runtime.

Application server is capable of running a number of processes simultaneously. Upon initial connection by a particular user the user is assigned to a selected process based on load balancing parameters.

Each process contains a number of simultaneously executing application threads . Application server processes interact with user cache which provides temporary storage of personal calendar information for particular users. Such information may include for example the user s selected settings and options favorite events and other information.

Cache obtains information from personal calendar information database as needed and writes information to database when appropriate. Cache provides improved performance by obviating the need for a direct connection between process and database . In one embodiment cache for a particular user is released from memory when either some predetermined time period expires or when memory is needed and that user s data is the oldest cache that has not yet expired.

Process also interacts with event cache which provides temporary storage of event data taken from events database .

In one embodiment process remembers where a particular user s cache is located so that if the user returns to the site i.e. re establishes a connection and his or her cache is still available process is able to utilize the cache .

Referring now to there is shown a block diagram of the services implemented in one embodiment of an application server according to the present invention. Application implementation implements each page of the user interface using templates and a component driven user interface implementation. Application implementation also parses HTTP parameters and generates HTML output for pages. Utilities include implementations for parsing and formatting functions high level calendar operations and e mail notification services. Session management authenticates tracks and manages user sessions for calendaring operations and stores a cache of user and calendar data as needed to maintain sessions. Calendar service implements the core object model for accessing user profiles calendars events calendar links and collections of objects. Service also implements event lookup object caching and persistence.

Finally service serves both personal calendars and event directory data using a common object model. Other services provide access to non calendar oriented data services such as weather horoscope and application configuration settings. The operation of the relevant components of application server to implement the present invention will be described in more detail below.

Referring now to there is shown a block diagram of a client computer that can be connected to system for practicing the present invention. In one embodiment client computer is implemented on a personal computer running the Microsoft Windows95 operating system on an Intel Pentium processor. The user interacts with the present invention by establishing a network connection with director over the World Wide Web using a TCP IP connection and a browser application running on the aforementioned client computer . Thus as the user operates the present invention he or she is presented with interactive web pages that provide information and accept input as is known in the art. One skilled in the art will recognize that other embodiments including other types of software applications processors and operating systems are also possible.

In the block diagram of client computer is shown having a central processing unit CPU display device input device such as a pointing device random access memory RAM and storage device . Also provided is a connection to a network such as the World Wide Web in order to establish contact with system of the present invention. The following detailed description of the invention will make reference to exemplary implementations of such components though other embodiments may also be used. For example CPU is a microprocessor such as an Intel Pentium processor display device is a conventional monitor or screen such as a cathode ray tube CRT pointing device is a mouse or trackball though other input devices such as keyboards can also be used RAM is some quantity of conventional memory as is commonly supplied with personal computers storage device is a hard disk or similar device for long term storage of programs and data and Internet connection is implemented using known protocols such as TCP IP across a modem T1 or T3 line or other connection medium.

In a preferred embodiment the user interacts with system using a browser application. Such browsers are well known in the art including for example Netscape Navigator and Microsoft Internet Explorer. One skilled in the art will recognize that other embodiments of the invention that may operate without use of a browser are also possible.

For purposes of this description the terms page and screen are used interchangeably to refer to a user interface element presented to the user via the browser.

Referring now to there is shown a block diagram of the functional components of the user interface of the present invention. Each of the functional components shown in will be described in more detail below with reference to specific screen shots and other user interface elements. As will be seen below each element in may be implemented as a web page in an Internet based application. The user can navigate among the various pages shown by clicking on links in hypertext documents as is known in the art of browsing web pages. As will be shown in other Figures one embodiment of the present invention uses a metaphor showing tabs for navigation among the pages.

Home login page welcomes the user to the application or website upon initial connection. The user may elect to login at this point by providing input specifying a login identifier and password. This allows system to retrieve user specific information by reference to a record stored in database of the system.

If the user has not used the system before he or she is prompted to sign up in by selecting a login identifier and password for future reference. A new record is created and stored for the user. The user is also given the option of signing up in a group using the group sign up page which allows the user to share his or her calendar with other members of selected groups. Page contains a description of groups and their operation.

Once the new user has signed up using and or a welcome page is presented confirming that the user s record has been stored in the system.

Once the user has been identified via user login or signed up and welcomed and a What s New page is presented. As will be described in more detail below What s New page highlights important events and announcements that may be of interest to the user. New event calendars may also be presented in this screen. In addition in one embodiment of the present invention wherein shared group calendars are employed the What s New page can inform users of changes to shared calendars. Finally the system can display reminders of upcoming events which the user has previously selected.

Event Directory pages provide a directory of event categories including Event Directory Contents containing an overall list of event categories Event Category Home Pages containing descriptions of each of the event categories and Event Category Subdivisions containing descriptions of subdivisions within particular event categories.

From any of pages the user can view schedules of events belonging to a selected category or subdivision. Such event schedules can be viewed in several different formats such as for example a Day View a Week View in grid format a Week View in list format a Month View in grid format and a Month View in list format . Each of these views provide a display of a number of events belonging to a particular category or subdivision. The user can click on a particular event in any of views to see an Event Details page showing details for the selected event.

The user can select individual event categories and or subdivisions for display in Favorite Events pages . Selecting an event category in this manner is referred to as subscribing to the event category. Favorite Events pages display selected events in either a Day View a Week View or a Month View . Pages allow a user to select individual events from the selected categories to be added to the personal calendar. The user can also access an Edit Favorites page which allows him or her to add or remove categories and or subdivisions from display in Favorite Events pages .

My Calendar pages provide access to the user s personal calendar. My Calendar pages show an integrated multi layer overview of events from selected categories as well as manually entered events. Several displays are available including a Day View a Week View in list format a Week View in grid format and a Month View . Details on any appointment or event are available from the Details page . In one embodiment system uses Event Details page to show details of a selected event that was previously selected from the Event Directory and Appointment Details page to show details on manually entered events and appointments. An Options page is also provided for configuring and selecting among various system options and preferences. Events and appointments can be added modified or deleted as desired.

Help pages are provided to assist the user in using the various components of the system. The user can retrieve a selected help page by clicking on a Help link on any of the pages in the system.

Referring now to there is shown a screen shot of a Login page according to one embodiment of the present invention. As with all pages discussed herein Login page is presented as an HTML page that may be displayed to the user on a conventional browser screen though other embodiments may use different techniques for presenting user interface elements to the user. Login Name field and password field are provided for the user to enter relevant information allowing the system to identify him or her. In response to the user entering the information system retrieves centrally stored user specific information from database including user preferences and personalized calendar information. As described above such information is retrieved from user cache if available.

Login page also provides links to other pages for initial sign up online help event categories and miscellaneous information about the service .

Referring now to there is shown a screen shot of a What s New page according to one embodiment of the present invention. A personalized welcome greeting is displayed as well as any important announcements . The information displayed in What s New page is taken from the user s individual records in database .

In an alternative embodiment the What s New page provides information describing changes to shared calendars new features and other relevant information. Reminders of upcoming events which were previously selected by the user can be provided as well.

Navigation bar provides links to other pages in system including My Calendar pages Favorite Events pages and Event Directory pages . Buttons and provide access to Event Directory pages and My Calendar pages respectively. Links provide access to a Group Calendar feature as described in more detail.

In one embodiment a list of new event categories is provided not shown . This list may include any categories that have been added to system since the user last logged on or it may be a list of new categories that are related to other categories to which the user has previously subscribed. Thus system is able to provide event category suggestions that are likely to be of interest to the user based on his or her previous behavior.

The user can select one or more event categories from the list. If desired the user can obtain additional information on event categories.

Page shown in is one example of a What s New page according to the present invention. Other configurations of the What s New page are also possible without departing from the spirit or essential characteristics of the present invention. In particular additional information can be provided on this page such as announcements regarding changes to event categories to which the user has previously described. Also the What s New page may be configurable so that the user can select what kind of information is displayed there.

Referring now to there is shown a screen shot of an Event Directory Screen . Hyperlinks to event categories are displayed allowing the user to obtain more information and if desired subscribe to that event category. Each hyperlink links to an Event Category Home Page providing detailed descriptions of event categories. Each event category is a group of related events to which the user can subscribe if desired. Event categories can include for example sports team schedules movie release dates schedules of conferences on a particular topic meeting schedules related to a particular project or company and the like.

Event categories and related information describing individual events are provided to system and stored in events database . Such information may be provided by external sources such as online services listing scheduled events as described below in connection with . Alternatively such information may be manually entered in events database by a system operator. In one embodiment of the present invention individual users may provide user defined categories in the form of group calendars including scheduled events the user wishes to share with other users. For example a project leader may create a personal calendar including meetings and deadlines related to the project and then share that personal calendar as a group calendar. Other users involved with the project may then subscribe to the group calendar as an event category. If desired security measures may be provided restricting access to a group calendar so that only selected users can retrieve the information.

In one embodiment a search field not shown is provided to allow interactive searching of the event directory.

Referring now to there is shown a block diagram illustrating the collection of events data according to one embodiment of the present invention. The process performed by the apparatus of receives event feeds from content partners processes the event data and stores them in event database . Information from database is cached into shared memory for access by application server processes as needed. The elements of are implemented as a collection of programs and scripts for automated operation and import of event data.

Loaders are software scripts resident in database servers layer for extracting events data from external data sources such as web pages publicly accessible files and databases and the like. In one embodiment loaders are configured to extract such data on a regular basis from a predefined set of sources . For example a loader might be configured to run a File Transfer Protocol FTP operation to obtain data from a source at 9 30 a.m. every Tuesday morning then to run the obtained data through a formatter to create a Structured Query Language SQL file and finally to run a script which loads the data from the SQL file into events database . Loaders may obtain information from data sources by any conventional means such as for example FTP pull FTP operation initiated by loader FTP push FTP operation initiated by data source web page push Hypertext Transfer Protocol HTTP operation initiated by data source or Hypertext Markup Language HTML spider automated traversal through a series of HTML pages on the World Wide Web .

Once loaders have collected information from data sources the data is formatted and written to events database . Users may also provide user published events manually which are also added to events database . In addition a group calendars database may be provided for storing events information related to a particular predefined group of users. Users can contribute event information that they would like to share with other users in a particular group. Such event information is written to group calendar database and then transferred to events database .

In one embodiment application servers read and operate on event data using an event cache see in order to provide improved performance. In order to facilitate such operation a cache generation GenCache operation is provided. GenCache operation reads events database on a regular basis e.g. daily and generates an Event Cache file A containing selected event data in a format that can be transferred to RAM. In general it is preferable if Event Cache file A contains data that is likely to be accessed so that such access can be achieved without resorting to additional reads from events database . Once Event Cache file A has been generated it is written to event cache in application server . Event cache is RAM resident in server and is therefore capable of being accessed more efficiently than can events database .

Once event cache is in place individual processes can access events data from cache as needed. If a particular event datum is not present in cache application server initiates a read from events database to obtain the needed information.

Referring now to there are shown screen shots of the Event Schedule Month View in list format and in grid format . Screen shots and may be displayed for example when a user selects a particular event category by clicking on one of the links in the Event Directory screen . In screen the user may click on grid button to be transferred to screen . In screen the user may click on list button to be transferred to screen . Buttons allow the user to view other time periods besides the one being displayed. In one embodiment the information displayed in screens and comes from events database which in turn may be collected from external sources as described above in connection with .

Events belonging to the selected event category are shown in list form in screen or in grid form in screen . The user can obtain additional detail regarding any listed event by clicking on the link associated with the event . System then displays an event detail page not shown containing the additional detail.

The user can subscribe to the displayed event category by clicking on Tracker button . Events from the event category will then appear on the Favorite Events screens as described below. In addition in one embodiment the user can add individual events to his or her personal calendar without subscribing to the event category by clicking on a button within the event detail page not shown or on a button not shown on screen or .

Referring now to there is shown a screen shot of a Month View of a Favorite Events screen according to one embodiment of the present invention. Favorite Events screen allows the user to view events from selected categories to which he or she has subscribed. The user can select whether to view all events for a time period from subscribed categories or to view events only from selected subscribed categories. Thus the subscribed categories can be thought of as layers which can be placed on top of one another and viewed together separately or in any combination. This layering concept extends to views of the user s personal calendar as will be seen below. Buttons specify individual event categories for display which the user can select in any combination desired. In one embodiment buttons are provided for each event category to which the user has previously subscribed. Screen shows all events belonging to the selected event categories in the month being displayed. Update button takes the user to the Event Directory screens see above where he or she can subscribe or unsubscribe to event categories.

In one embodiment the Favorite Events screen also contains event categories representing shared group calendars of other users. Thus users can create personal or work related group calendars which can be shared and subscribed to as are public calendars. Such group calendars are listed as additional buttons allowing the user to select or de select individual group calendars are view associated events as desired layered on top of other displayed events in screen .

In one embodiment of the Favorite Events screen several different views of events are available. For example the user may select from a Day View a Week View or a Month View . Navigation bar provides links to the available views. Navigation bar provides links to other screens as described elsewhere in this disclosure. Additional buttons are provided including an Edit button which allows the user to change personal preferences a Help button for providing access to Help pages and a Log Out button which exits the system.

A checkbox is provided for each event . The user can add an event to his or her personal calendar by clicking on the associated checkbox and clicking on button . Other mechanisms may be provided for adding individual events or groups of events to the user s personal calendar. The particular user interface configuration to be used may depend on the characteristics of the network on which system is implemented.

Referring now to there is shown a screen shot of a Week View of a Favorite Events screen according to one embodiment of the present invention. As with screen shot the user can select individual events belonging to subscribed categories for inclusion in his or her personal calendar. The week long view of shows one week s worth of events in a columnar format.

Navigation bar provides access to other screens of system . Buttons provide the same functionality as described above in connection with namely these buttons allow the user to specify which event categories are to be displayed or overlaid on one another in the Favorite Events screen and also provide Edit Help and Log Out functions.

Navigation bar allows the user to navigate among Day View Week View and Month View of the Favorite Events screens.

In the Week View shown each day of the week is displayed as a column . The user can click on the column header to see a Day View for the selected day. Within each column events are listed in a grid format by time of day with a separate space provided for all day events. In an alternative embodiment events can be listed using other formats such as by category or alphabetically for example. As in screen the user can add events to his or her personal calendar by clicking on check boxes and button .

Referring now to there is shown a Day View of a Favorite Events screen. Operation of Day View is similar to that of Month View and Week View described above. Day view shows events associated with a particular selected day.

In Day View events are divided by category denoted by category headings . Events are displayed for each event category heading . Buttons similar to buttons in Month View and Week View may be provided allowing selection and de selection of particular event categories for display. In one embodiment an event category is only listed if it contains events within the day associated with the current display. In other words in this embodiment if there are no Cultural Events occurring on the day being displayed the event category heading for Cultural Events will be omitted from the display.

In one embodiment each event category heading button not shown providing a link to the Event Schedule for the category. This link takes the user to a screen similar to that shown in listing events belonging to the specified category. Underneath the heading is a list of individual events belonging to the category. For each event a date and description is provided as appropriate. If applicable a time of day may also be shown. If appropriate and available a link may be provided to a more detailed description of the event. Finally button is also provided for adding the event to the user s personal calendar. Thus as described above the user can select individual events belonging to subscribed categories for incorporation into his or her personal calendar. This provides improved flexibility in that the user need not add an entire calendar and thereby possibly add events which are not of interest but can tailor the personal calendar to his or her individual needs. In some embodiments addition of all events in a category can also be provided without requiring individual selection of each event by clicking on a button not shown associated with the category as a whole.

In one embodiment of the present invention each subscribed category is color coded and individual events belonging to the category are tagged by a color flag matching the color of the category. Thus in the example shown the movie releases category may be associated with the color blue and all movie release events would then include a small blue tag. One skilled in the art will recognize that other visual characteristics could be used to associate events with categories such as a distinctive icon font or other technique.

Referring now to there is shown a screen shot of a Day View of a My Calendar screen according to one embodiment of the present invention. On this screen the user is able to view and manipulate his or her personal calendar containing events that have been previously selected from subscribed categories as well as events that have been manually added by the user.

Navigation bar provides access to other screens of system as described above. Navigation bar allows the user to select among a Day View Week View or Month View of his or her personal calendar.

Date entry field allows the user to type in a date and by clicking the Go button go to the My Calendar screen for the indicated date. Options button takes the user to a screen not shown where preferences and personal options can be set. Help button is a link to Help pages and Log Out button exits the system.

Add Appointment button allows a user to manually add an event or appointment to the personal calendar using a screen similar to that shown in described below. In this way the invention can be used as a tool for integrating personal events and appointments in a calendar with selected events obtained from an outside source by overlaying the two types of events as layers in a single calendar. In one embodiment the user may also click on buttons to add an appointment at a particular time of day.

In an alternative embodiment My Calendar page may also include a list of to do and or all day items for the day. These items generally do not have a specific time of day associated with them rather they are items that the user has entered to remind him or her of tasks to be performed sometime during the day. The user can add such items using the Add Appointment button in much the same way as appointments are added.

Also shown is a daily planner listing events and appointments for various times throughout the day. These events and appointments are obtained by reference to the user s personal records in database reflecting a manually entered item such as a lunch appointment or they may be descriptive of events obtained from events database representing event data from an outside source such as for example a concert or movie . In one embodiment events selected by the user from an outside source are replicated in the user s personal records in database so that he or she can freely modify them. In another embodiment events selected by the user from an outside source are not replicated but rather a reference or pointer to the event in database is stored in the user s personal records allowing the invention to access the data describing the event from the outside source. One advantage to the latter technique is that any subsequent updates to the event can automatically be reflected by the application when the user views the My Calendar screen.

In one embodiment the user can click on any event shown in list or in the list of all day events to be presented with a screen showing more detail on the selected event. The user may also edit the event if desired as described below in connection with .

In another embodiment a link may be provided for making a purchase associated with a particular event. For example if the event is a concert a link to an on line ticketing service maybe provided for purchasing tickets to the concert. The link can be targeted to a particular event within an electronic commerce site that sells tickets so that the user need not re enter the particulars of the event in order to purchase tickets. Alternatively such an approach may be used to register for an event such as a tradeshow by providing a link to a web page allowing the user to enter registration information payment information and the like. Where possible certain fields of the web page may be pre filled with default information based on a profile previously entered by the user and stored in database .

Similar techniques can be used for on line sale of books music and the like in connection with calendared events such as release dates. In one embodiment the user may use the present invention to track birthdays anniversaries and the like the system may then remind the user of such an event and provide the opportunity to buy cards gifts and the like as well as provide direct links to electronic commerce pages and sites that are of interest in connection with the upcoming event. The system of the present invention can thus facilitate on line commerce related to events that are of particular interest to the user.

In one embodiment a subscreen may be shown when selected by the user displaying a list of Favorite Events. Subscreen contains a section for each event category selected by the user. Individual events associated with each event category and belonging to the current date are displayed. The user can click a button to add an event to the personal calendar for display on the My Calendar screen .

In one embodiment the user can select which categories of events are to be displayed in the My Calendar screen so that he or she can view a subset of subscribed categories if desired. This provides a multi layering function wherein each category can be considered a layer that can be viewed in combination with other layers as selected by the user. The user can also select group calendars for display events from such calendars are shown in the My Calendar screen as an additional layer if desired.

Referring now to there is shown a screen shot of a Week View of a My Calendar screen according to one embodiment of the present invention. Screen operates in a similar manner as the Day View described above in connection with . Events for a week long period of time are shown in list format . Grid button provides access to a screen not shown that displays the week s events in a grid format. Links provide access to individual Day View screens for each day in the week. Buttons open a Favorite Events tracker subscreen similar to in for displaying individual events within categories. Events are shown as links which when activated access a detail screen for each event. Buttons and and field operate in a manner similar to the corresponding buttons in .

Referring now to there is shown a screen shot of a Month View of a My Calendar screen according to one embodiment of the present invention. Screen operates in a similar manner as the Day View described above in connection with . Events for a month long period of time are shown in grid format . Links provide access to individual Day View screens for each day in the month. Events are shown as links which when activated access a detail screen for each event. Buttons and operate in a manner similar to the corresponding buttons in .

Referring now to there is shown a screen shot showing a My Calendar detail screen containing detailed information describing an event. This subscreen can be used for entering information for a new event or for making changes to information for a previously entered event. It is accessed by clicking on an event in screens or .

Event description contains several fields for displaying and making changes to various pieces of information concerning the event such as a title date start time duration check box for all day events and recurring event information and . A notes field is also provided for miscellaneous information. Fields to are populated with information from database for manually entered appointments or with information from database or for other events. In alternative embodiments other fields may also be provided such as a reminder field for gift related events and the like. The selection of particular additional fields to be provided may be customizable.

In an alternative embodiment screen contains a link to another page allowing the user to perform other activities related to the scheduled appointment such as an online purchase relating to the item .

Once the information has been entered edited and or verified the user can click on the Save Appointment button to save the entered information and return to the My Calendar screen. Alternatively the user can click the Back button to cancel all changes made to the event and return to the My Calendar screen. Finally the user can delete the appointment by clicking button .

Referring again to the operation of application server to implement the application will now be described. Generally application server responds to requests relayed by web servers layer . Generally such requests are provided to server in HTTP format. In response to such a request server optionally performs some action if appropriate and returns an HTML page to the user. In one embodiment HTTP requests are relayed to a load balancer . Load balancer dispatches the request to the appropriate process .

In one embodiment each request is handled by a class in an object oriented language such as C . Server inspects its registry to determine which class to invoke for each request. The Uniform Resource Locators URLs requests to server contain the name or identification of the class that can handle the request.

To handle a request server creates an instance of the appropriate class and invokes its Execute method. The parameters of the HTTP request are made available to the class as a name value pair list in the base class. The Execute method parses the input parameters performs actions and generates HTML output.

Referring now to there is shown a flowchart of the basic operation of the Execute method. The method performs the following actions 

The DoExecute method for a particular class generally overrides the default DoExecute method and performs one or more of the following tasks 

The base class provides general purpose Init and Finalize methods for most classes. Classes that require login are automatically authenticated by the base class freeing them from having to implement authentication redirect logic. The base class performs parameter checking to provide security by detecting invalid requests. The base class also performs logout operations when needed. In addition the base class provides several general purpose methods for handling for example building of URLs for redirection saving temporary session data and parsing simple parameters.

Referring now to there is shown a flowchart of the user authentication process A as handled by the base class. Classes that do not require authentication may circumvent this process by overriding a RequiresLogin method to return FALSE.

The base class first checks for an existing long term session. If none exists one is created . The base class then retrieves the Session Id and looks up a calendar session having that ID. If a calendar session having the corresponding ID exists the user is authenticated and the authentication is checked to see if it is valid. If so the user is allowed to proceed he or she is redirected to his or her default calendar view and the authentication process ends. If the authentication is invalid access is denied .

If in no calendar session having the corresponding ID exists the base class checks for an auto login cookie on the user s machine. Auto login allows users to return to the web site without having to login. The auto login cookie contains the user s encrypted login name and password. If the cookie exists the base class retrieves the login information. If the cookie does not exist the user is redirected to a login screen. In one embodiment the base class saves the original URL that the user was trying to access. The user is then prompted to enter login information.

Login information from the auto login cookie or from the user s entry is checked for validity. If it is valid the base class creates a calendar session for the user and the user is allowed to proceed. If a URL was previously saved in the user is redirected to that location if not the user is redirected to his or her default calendar. If in the login information is invalid the user is denied access .

In addition in one embodiment a user may be automatically logged out by the session manager if they remain idle for some predefined period of time or when the server is heavily loaded. In this case the user must login again when he or she returns.

Referring now to there is shown a block diagram of the operation of a template processor to generate an HTML file. This technique is used in one embodiment of application server with the template processor operating as part of a process to generate output for presentation to the user. Template source file contains HTML and process tags. Processor uses process tags to determine what items in file need to be replaced with dynamic data.

Template map object instance is used by processor to implement simple replacement of identifiers in source file . Map contains a list of name value pairs. For each process tag in file processor consults map for the name specified in the tag. If the name is found the value associated with the name is inserted in place of the process tag.

Template data object instance is used by processor to fill in data elements in a template file. For example object instance may contain a list of items with attributes such as events calendars and the like. Processor uses object instance to iterate through a set of data replacing process tags with the attributes of the elements.

Thus to process a template source file processor scans through file for process tags. When it finds such a tag it requests values from template map object instance and template data object instance . These values are used to replace the process tags. Processor also uses template data object instance to iterate over data sets referenced by process tags.

Processor would scan through the file and first find the UserName cell tag. The type cell indicates that a simple replacement should be done with data from either the template map or the template data object . Template map is checked first for a UserName element. If no value is found there template data object is checked. If a value is found the text ReplaceMe is replaced with the value. If no value is found the text ReplaceMe remains intact.

Processor would then find the process tag with the keyword events. The type tile indicates that processor should loop over a data set contained in template data object . The keyword events identifies which data set to use. Processor calls the following methods of the template data object 

Thus in the example given above processor would call MoveNext for as many events included in the events data set. Processor would then call GetValue to obtain the events.title and the events.date attributes for each element in the data set.

Once processor has processed all of the process tags in source file it generates an HTML file which can be passed to the user and read by a browser.

Operation of processor will now be described in more detail. Referring now to there is shown an example of a document template containing several parts including header part tabs part navigation part day grid part event tracker part and footer part . Parts are modular user interface components used to implement and generate the various pages for the present invention. Thus an HTML document is modularized into parts that can each be generated by a distinct class run by application server .

Referring also to there is shown a block diagram of the detailed operation of template processor to generate HTML output .

To implement the component model exemplified by document template two levels of template evaluation are used 

For each document a single document level template evaluation is performed and any number of part level template evaluations are performed.

In the document level template custom process tags are employed to specify parts to be included in the document. For example the following example contains three parts 

Part map translates each part tag into a section of HTML. Part map is passed by classes to template engine when document level template evaluation takes place. Parts map acts as a dispatcher interpreting custom tags and supplying needed parts classes from parts library . When engine requests that parts map translate a custom tag map dispatches control to an instance of the appropriate part class from parts library by calling its Output method.

The Output method of each part generates the HTML that represents its user interface component in the document. Template engine replaces the custom process tag with the HTML data generated by the Output method. Most parts use the template engine to create their HTML output in order to implement part level template evaluation. The part level evaluations actually cause re entrance of template engine since the part evaluates its template during a callback from document level template processing.

Classes and Parts access the data they require prior to starting template evaluation. Generally such data includes lists of events obtained from calendars. Other types of data that may be required include for example user profiles calendar attributes lists of tracked calendars weather information and the like. The calendar service serves up most of the data required by the user interface presentation logic.

As described above in connection with application implementation element includes session management which authenticates tracks and manages user sessions for calendaring operations and stores a cache of user and calendar data as needed to maintain sessions. The operation of session management will now be described in more detail.

Referring again to when a user is authenticated a session is created as is known in the art of web application development. The session exists until either the user logs out or the session expires. In one embodiment a session expires when the user remains idle for a certain time period as specified in system configuration files.

Sessions serve two primary purposes 1 they obviate the need for reauthentication of the user with each web page access and 2 they facilitate the use of a cache to store data such as calendar data in order to avoid unnecessarily retrieving the same data repeatedly from databases or . In one embodiment only one thread of a process may access a session object at any given time. Other requests to access a session object are blocked until the thread that is currently accessing the object is done. This technique reduces the amount of thread safe checks needed to assure data integrity.

When a user logs on and a session commences certain information may be pre fetched from database and transferred to user cache so that subsequent access to this data will be faster. The pre fetching occurs immediately after login and preferably prior to the user accessing his or her calendar. The pre fetching need not be complete for the user to access his or her calendar.

Periodically session management prunes the list of stale sessions by removing sessions that have been idle for longer than a specified time out period specified in predefined configuration information. In addition in periods of high load session management may remove a session before the time out period is reached as further specified in the configuration information. A user attempting to access the system after his or her session has been removed must logon once again to re establish a session.

As described above in connection with application server includes calendar service which implements the core object model for accessing user profiles calendars events calendar links and collections of objects implements event lookup object caching and persistence and serves both personal calendars and event directory data using a common object model. The operation of calendar service to implement the present invention will now be described in more detail.

Referring now to there is shown a block diagram of calendar service according to one embodiment of the present invention. Calendar service interface defines the contract between calendar service and the application servers layer of system or of any other client of service . Core calendar engine implements the core algorithms and logic of the calendar engine. Data access layer provides the persistence behavior of all objects in calendar service . It implements access to both relational data user data and memory resident data event directory .

Calendar service provides the programming interface for accessing objects. In one embodiment these objects are the only interface to calendar service data that is available to application servers layer or any other client of service . These objects include for example 

Referring now to there is shown an example of an object ownership hierarchy . Calendar service provides a global calendar manager object . Calendar manager object is the starting point for accessing objects in calendar service . In one embodiment all calendar service objects are indirectly created through calendar manager object .

Calendar service employs an object ownership hierarchy to control the life cycles of objects. For example event objects are owned by a single calendar object. The calendar object acts as a container for each event and also controls the access rights modification deletion and creation of the event.

In calendar manager serves up both user account objects and public calendar objects event directory . For user accounts authentication is required before access to a user account is granted. This can occur either via user login or by creation of a new user account as described previously. Once a user account object has been crated it is possible to access the user s personal calendar object tracked calendar links and personal profile through the user account object instance.

For public calendars authentication is not required. Calendar manager searches for the desired calendar and returns an object instance that provides access to the calendar s events and attributes and .

Access control is implemented using a context object. Calendar manager creates context objects for callers of calendar service . Operations that require an explicit access check are defined to take a context parameter. The context identifies the user performing the operation and the access level of that user. Calendar objects check the context permissions against the operation being performed to ensure appropriate access. In this way security leaks can be avoided even when the application code contains a programming bug.

Objects are created and modified by their owning parent object according to the defined hierarchy. Internally objects implement their own interfaces.

Parent objects control the modification deletion and creation of objects they contain. This allows the parent to modify its internal structures when its contents change. Furthermore the implementation class can be hidden from clients of calendar service so that parent objects act as an object factory for objects they contain.

Creating a new object involves two steps. First the caller requests a new instance of an object type from the parent. The parent creates a new modifiable object instance and returns it to the caller. The object instance does not yet persist in the calendar service database. Second the caller requests an update of the contained object from the parent. The object may be an existing object or a new object. The caller implements the update by writing changes to the database and updating its internal structures. For example when a calendar updates a recurring event it may need to recreate the expanded event instances due to a change in the recurrence rule.

As described previously parent objects provide the means to access instances of their contained objects. Parent objects also control the release of their contained objects. When a client of service is finished with a calendar service object it notifies the parent which releases the object instance.

This allows the implementation of calendar objects to be hidden from clients so that the constructors and destructors of object classes are restricted protected . Thus the parent object can implement object memory and resource management in any manner desired.

In one embodiment calendar service provides a single interface class for calendars. This interface class is used for both personal calendars and event directory schedules public calendars even though they have different attributes and persistence models. Calendar service provides the concept of a domain for any object in the system. This domain is used for example to distinguish between personal and public calendars and events.

Calendar service provides two types of access to events in calendars. Each access type has several variations to support the needs of application servers layer .

The first type of event lookup serves a series of events in a Day List. A Day List is a list of event lists. Each list contains a set of events for a single day. The Day List contains an event list for each day in its date range for example a week of events would be sorted into seven event lists . The Day List lookup is convenient for displaying calendar oriented views of events since it is very easy to determine the number of events on any given day within the date range. The Day List lookup interface is implemented by a Day List object. Callers use a SetTimeSpan method to generate the list of event lists from either a calendar or a list of calendars.

The second type of event lookup serves events for a specified date range in one contiguous event list object. The Event List lookup is used to display lists of events such as for pages and rather than calendar oriented displays such as pages and . The Event List lookup interface is implemented by a Calendar class. Callers use a GetEventList method to obtain an aggregate event list. Variations of GetEventList include 

Layered Calendar Views display the contents of multiple calendars on a single calendar display such as Views or . Layered Calendar Views are implemented by calendar service as a Day List object that contains events from multiple calendars. More specifically the Event Lists contained by the Day List contain events from multiple calendars.

The Day List class implements the Layered Calendar View. Callers use a SetTimeSpan method of the Day List and pass it a calendar list specifying all the calendars to be included in the display.

As described previously calendar service interface defines a set of classes that define the contract between application servers layer and calendar service . Core calendar engine returns instances of these classes to the caller.

In one embodiment the implementation of these objects is achieved by calendar service defining a set of engine subclasses that embody the implementation. The implementation classes are collectively referred to as the CE Layer classes while the interface classes are known as the CI Layer classes.

Calendar Manager is a global object created at service startup. It creates and manages user accounts public calendars partner objects and context objects.

Many calendar service operations use a context parameter to validate the access rights of the caller. In one embodiment a context object is employed to embody access information. The context object includes for example 

A context object can be used for any number of calendar service operations. In one embodiment state information is not maintained in the context. Session management caches a context object in user session data for all calendar service operations during the life of the user session.

As described previously the LoginNewUser and LoginUser methods control user registration and login respectively. LoginNewUser creates a new user account implementation object CDUserAccount class fills in the profile information and saves the account object to the user database. The account object creates itself and a set of other objects associated with the user account personal calendar object calendar links list .

Calendar manager provides access to the event directory calendars via the GetCalendar method. GetCalendar takes a calendar ID and returns a calendar object. In one embodiment event directory calendars are obtained from calendar manager while personal calendars are accessed from a user account object.

To implement public calendar lookup calendar manager creates an instance of a public calendar class CDPublicCalendar initializes it with the requested calendar ID and instructs the calendar object to load itself from the database. The CDPublicCalendar class implements the database lookup as described below.

On return from GetCalendar the caller has a pointer to a calendar interface object class CICalendar . Typically the caller releases public calendar objects once the template class request has been processed. This is the case for Event Directory pages. However Public Calendar instances are used to represent a user s tracked calendars. In this case the Public Calendar instances are cached by the user account object one for each tracked calendar.

Calendar manager also serves partner objects. The partner object is a denormalized object containing information about categories and sponsors. Category sponsor information is referenced by calendars in the event directory. Attributes of the category sponsor are used in the various pages of the user interface for example sponsor name logo URL and the like .

At startup calendar manager loads all partner objects from the database and caches them in memory. Calendar manager provides a single call to get a partner object by ID. Public calendars use this call to return their associated partner object.

In one embodiment user accounts contain all information associated with a particular user within calendar service . User account is the attachment point for all user data and is the primary object stored in the session cache . User account provides access to the user s personal calendar the linked calendars favorite events and the user s profile information.

User account provides sole access to a user s personal calendar. Personal calendar object is created by user account at registration or login. Personal calendar has no attributes of its own and is therefore not actually stored in the database. Rather personal calendar is an instance of a calendar object that manages a set of events Calendar link defines a relationship between user account and a calendar. The relationship can have a type such as a tracked calendar relationship. Calendar links can be used to denote other types of relationships between users and calendars as well.

User account manages the set of all calendar links . It controls the creation modification and deletion of link objects and controls their persistence operations but in one embodiment does not implement them. When a user account is loaded it performs a query for all calendar links and loads them into an internal list. User account provides an interface to obtain a copy of the list of calendar links . The list can be sorted in any of a number of ways. Each list copy references the same object instances.

The attributes of a user account fall into two categories profile attributes and application settings. Profile attributes define the user s demographics and core account information. The user account provides methods to change profile attributes. These changes are made to a modifiable instance copy of the user account object obtained from calendar manager . Changes to profile attributes are saved immediately in the database.

Application settings are fields that control the behavior and appearance of the application. These may include for example 

Some application settings are saved immediately when changed while others are saved when the user s session expires through either explicit logout or session time out.

The user account implementation class provides a protected method FlushDeferredChanges which calendar manager uses to save application settings prior to deleting the user account object. Deferred write is used in order to minimize database accesses for common application customizations.

In one embodiment calendar service supports two types of calendars 1 personal calendars which contain user specific private data loaded directly from database and 2 public calendars which represent schedules in the event directory database which are accessible by any user and whose data is referenced from the shared memory event cache .

In one embodiment the difference between the two types of calendars is the persistence mechanism used to inflate and deflate the calendar and event objects from the two domains.

Before events are served up by the calendar they are loaded into memory as a set of event object instances. Calendar service maintains an internal event list collection object containing object instances for all event occurrences whose dates fall within the loaded date range including each instance of a recurring event that falls within the loaded date range. The cached event instances are also translated to the calendar s target time zone and sorted by time.

A calendar implementation class controls the loading and unloading of events over the loaded date range. The calendar implementation class implements a simple loading model which enforces a contiguous range for this date range. The maximum size of the date range is specified in server configuration files for example as 50 days. The minimum load range size is also specified in server configuration files for example as 10 days. The minimum load range size defines the chunk size for database queries.

Cache serves to optimize performance by minimizing database accesses to personal calendar. Furthermore cache pre sorts events by date and time for the target time zone as will be described below.

Each calendar has the notion of a zone focus. The zone focus is set by the client of calendar service based on the time zone of the user s display. For event directory pages the zone focus is set to the default time zone for the calendar being viewed. The zone focus for personal calendars is the user s time zone as specified in his or her profile. This is also true for tracked public calendars calendars which are displayed with or over the personal calendar .

When a calendar loads its events it also translates the events to its zone focus. This is done so that the calendar s internal event list can be presorted based on the target time zone. Event list sorting is done when the target time zone is known. All day events do not shift across date boundaries as do events having a specific start time. Pre sorting the internal cache by date allows event lookups to be highly optimized requiring no list duplication or sorting.

A pattern of recurring events can be stored in one database row in database or . The individual occurrences of the recurring pattern need not be stored individually. Recurring patterns are stored in a table separately from non recurring events.

Calendar service loads all recurring patterns from the database the first time the calendar is loaded. The recurring patterns are saved as event object instances in a separate internal recurring event list. When calendar service loads events it also generates individual event instances from the list of recurring patterns. Thus calendar service creates an event object instance for every occurrence of each recurring pattern whose date falls in the loaded date range. These recurring event instances are placed in the internal cache in the same manner as non recurring events.

Each recurring event instance is assigned a unique ID which is a combination of 1 the event ID of the recurring pattern from which the instance was generated and 2 the Julian date assigned to the recurring instance. The combined ID is used to uniquely identify recurring event instances by clients of calendar service .

When the user modifies the pattern of a recurring event for example changes from repeat daily to repeat weekly calendar service performs the following steps 

Furthermore calendar service is equipped to handle a change from a recurring event to a non recurring event or vice versa. For example if a user wishes to change a recurring event to a non recurring event calendar service performs the following steps 

A similar but opposite set of actions is performed when converting a non recurring event to a recurring event.

From the above description it will be apparent that the invention disclosed herein provides a novel and advantageous system and method of multi layered online calendaring and purchasing. The foregoing discussion discloses and describes merely exemplary methods and embodiments of the present invention. As will be understood by those familiar with the art the invention may be embodied in other specific forms without departing from the spirit or essential characteristics thereof. Accordingly the disclosure of the present invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

