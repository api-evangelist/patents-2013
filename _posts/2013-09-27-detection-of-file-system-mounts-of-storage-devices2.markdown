---

title: Detection of file system mounts of storage devices
abstract: Various systems and methods for selecting resources (such as of a distributed storage system) for detection of file system mounts of storage devices. For example, one method involves obtaining first information by performing an access of file information. The file information indicates attributes of data blocks stored by a storage device. The storage device includes the storage information. The first access is performed at a first time. The method also involves obtaining second information by performing another access of the file information, at a second time. The method also involves calculating a difference between the first information and the second information. The method involves determining, based on the difference, whether the device was dismounted between the first time and the second time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09547457&OS=09547457&RS=09547457
owner: Veritas Technologies LLC
number: 09547457
owner_city: Mountain View
owner_country: US
publication_date: 20130927
---
This application relates to storage systems. Particularly this application relates to detection of mounts of storage devices of such storage systems.

As businesses increasingly rely on computers for their daily operations managing the vast amount of business information generated and processed has become a challenge. Most large businesses have a wide variety of application programs managing large volumes of data stored on many different types of storage devices across various types of networks and operating system platforms. These storage devices can include tapes disks optical disks and other types of storage devices.

Performing various operations on the vast amount of data stored by such distributed storage systems has its complexities. Businesses can employ various tools to perform data backup snapshots and other file operations. However some of these storage devices can be removable allowing a storage device to be moved between different computing devices. Thus accompanying this flexibility in distributed storage is the complexity of managing data stored by a large number of devices including some devices that can be moved between various computing devices.

While the embodiments of the application are susceptible to various modifications and alternative forms specific embodiments are provided as examples in the drawings and detailed description. It should be understood that the drawings and detailed description are not intended to limit the embodiments to the particular form disclosed. Instead the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

Embodiments of the present application are directed to systems and methods for obtaining first information by performing an access of file information. The file information indicates attributes of data blocks stored by a storage device. The storage device includes the storage information. The first access is performed at a first time. The method also involves obtaining second information by performing another access of the file information at a second time. The method also involves calculating a difference between the first information and the second information. The method involves determining based on the difference whether the device was dismounted between the first time and the second time. Example systems for implementing these methods are shown in the following Figures including .

Storage device stores data that is accessible and or modifiable by computing devices . As shown storage device is coupled to computing device using a bus . Storage device can be coupled to computing device using any one of a number of buses such as USB FIREWIRE ETHERNET FIBRE CHANNEL BLUETOOTH Integrated Drive Electronics IDE EIDE ATA Parallel ATA PATA Serial ATA SATA SCSI Serial Attached SCSI and the like. Storage device can be implemented to store data using any one of a number of technologies such as one or more hard disk drives HDDs tape drives flash memory solid state drives SSDs any one of optical drive technologies EPROM EEPROM Magneto resistive RAM MRAM and or any type of NVRAMs and the like.

Storage device stores and organizes data using a file system . File system can include metadata file information data and or other elements. File system separates data into various elements such as files and or objects identifies data using metadata e.g. such that the stored data can be searched indexed and or easily accessed . File system can organize data using directories such as by grouping files and or objects using hierarchical data structures. File system can also include file information that logs and or otherwise indicates time and or type of various operations such as writes modifications deletions new data items performed on that data. It is noted that a single storage device can include multiple file systems.

File system can be a disk file system a flash file system a tape file system a database file system a transactional file system a network file system or a shared file system. File system can be implemented using New Technology File System NTFS File Allocation Table FAT16 FAT32 VERITAS File System VXFS Hierarchical File System HFS and variants thereof e.g. HFS Plus UNIX File System UFS LINUX Extended File systems EXT Universal Disk Format UDF ISO 9600 Journaling Flash File System JFFS Yet Another Flash File System YAFFS IBM DB2 Global File System GFS Linear Tape File System LTFS various variants of these file systems and the like. One implementation of file system is described below with reference to .

Network can include a WAN Wide Area Network such as the Internet one or more LANs Local Area Networks and or one or more SANs Storage Area Networks . In some embodiments network includes one or more network devices such as routers switches and the like used to facilitate transmission of data between the various computing devices.

Storage device contains data that is accessed and or modified by a computing device such as the computing device coupled to storage device . In the example of computing device can access e.g. read and or write data stored on storage device . In one implementation computing device can also access e.g. read and or write data stored on storage device such as by accessing storage device through computing device via network .

A file system of a storage device is mounted to a computing device when the file system such as directories files and or data of the storage device is readable by the operating system of the computing device. The storage device is typically connected to the computing device such as using a bus to facilitate mounting of the file system. Some storage devices can include multiple file systems and when this storage device is connected to a computing device only one of these multiple file systems can be mounted. Similarly a file system of a storage device is dismounted from a computing device when the file system of the storage device is not readable by the operating system of the computing device. During dismounting of the file system the storage device is typically disconnected such from being connected via a bus .

Computing device also includes a storage manager . Storage manager is configured to detect if file system of storage device was dismounted from computing device . It is noted that dismounting is also referred to as unmounting a unit of storage for example unmounting a directory from a mount point. Furthermore in the following discussion a file system being dismounted is sometimes referred to as a storage device that includes this file system is being dismounted.

Storage manager is also configured to detect the type of such dismount if a dismount is detected. The dismount type can include a storage device being dismounted from computing device to a computing device having a same type of an operating system a storage device being dismounted from computing device to a computing device having a different type of an operating system a storage device being reformatted and or others. Storage manager can once the dismount and the dismount type are both detected communicate with application s and or the operating system of the computing device s with information indicating the type of dismount.

Computing device can include one or more applications that access file system on storage device . For example computing device can include a backup application and or a change block tracker that perform file operations on files and or data stored by storage device . These applications can include change block data that indicates changes to data stored by file system of storage device . In one embodiment storage manager communicates with applications and or operating system such as backup application and or a change block tracker. Depending on the type of detected dismount the application can perform one or more processes to update the corresponding change block data for storage device . These operations are described in more detail below with reference to .

Change block tracker is a software application that keeps track of data such as data files and or data blocks that are changed on a storage device that is coupled to computing device . Change block tracker can be implemented as a stand alone application or as part of another application such as a back up application . Change block tracker CBT uses change block data to store change information for each such file system of a storage device. The change information can include changes to metadata and or changes to data of the file system. Changes to metadata can include changes to the directory structure of the file system changes to the file location type access attributes owner and the like. Changes to the data include modifications to the actual data being stored including data creation modification and or deletion.

Storage devices can be moved between computing devices to port and share data. Each such movement of a storage device dismounts that storage device from one computing device and mounts the storage device on another computing device. Such moving around though good for the users may be an issue for CBT software such as if the CBT software does not accurately account for data changes that occurred to the data stored by the storage device while the storage device was coupled to another computing device. In other words such CBT software may not be able to report changed data blocks correctly if the CBT is not able to track such data changes that occur while the storage device is used by different computing devices.

Thus if the file system of a storage device being currently monitored by the CBT is moved around different computing devices then the integrity of the change block data kept by that CBT may be compromised. These other computing devices might not have the CBT software installed. These computing devices may be configured in a different fashion such as by using an operating system of a different type and or by using a different type of a file system. As a result of this different OS file system configuration the other computing devices would not be configured to properly monitor the newly attached storage device. For example if this storage device receives any input output e.g. writes that modify the stored data then these writes would not be tracked i.e. any data changes would not be accounted for by the CBT or its change block data .

Upon reattaching the same storage device to the original computing device the CBT module can resume its change tracking. However without receiving any information about the storage device s mounting activity the CBT module may be oblivious regarding any data changes made at the other computing device. As a result the CBT module can report a smaller number of changed blocks than it should. This issue can compromise the integrity of the CBT and can lead to poor and unreliable results to the consumer of such change blocks e.g. to any backup software which would not be able to perform a proper incremental backup or a proper subsequent restore .

One implementation that ensures integrity of the CBT module may involve including change block data for each storage device by each such storage device. However the multiple computing devices may either not include a proper CBT module and or may not be configured to access and modify such change block data. Another implementation involves using a storage manager such as storage manager to determine whether the storage device was dismounted and if so what type of dismounting was performed.

Storage manager is configured to detect whether a storage device was dismounted. Storage manager is also configured to determine a type of dismount of the storage device that has been remounted . In other words storage manager can detect if when an integrity of CBT has been compromised and thus the integrity of change block data . Storage manager is also configured to communicate with application s and or the operating system of the computing device s with information indicating the type of dismount. Storage manager can take preventive measures such as triggering a reset of CBT module where a reset would restart the change block tracking process.

Storage manager is configured to determine whether and how the storage device was dismounted based on accessing certain file information that is stored by the file system of such storage device. The file information can be implemented as a file or as a form of metadata that indicates various information for that storage device. In one implementation such file information is generated and or updated by the operating system of the computing device to which the file system is mounted. As such storage manager does not write data to this file information only accesses the file information. Some implementations of such file information are described below with reference to .

File system of a storage device includes file system metadata file information and one or more data to . File system metadata is generated and or updated by the OS of the computing device to which file system is mounted. File system metadata can include various data structures that store information about data such as location name hierarchical structure access permissions and or type of files that contain data . One implementation of file system metadata includes Modes or comparable data structures.

File information is also generated and or updated by the OS of the computing device to which file system is mounted. File information can include a list of transactions performed to data . File information can be implemented as a log file and thus contain an entry for very time a data write on files that contain data is performed. However file information does not necessarily indicate how the data is being changed only a record of a write being performed.

File information also includes indications of file system being mounted. File information including the mount indications are modified when file system is mounted to a new computing device. In other words file information is changed when the storage device that includes file system is coupled to a new computing device. However not all computing devices to which the storage device couples include operating systems that properly access file information .

In one case file system is remounted to the original computing device such as if a user re attaches the storage device to the same computing device . In this case file information can indicate such remounting activity. The original operating system of the computing device continues to update file system metadata with any subsequent writes and or modifications to data such as an addition of a file including data or a deletion of a file containing data . The storage manager of that computing device would also determine such a remount and would continue with updating the CBT and change block data accordingly without taking any additional steps.

In another case file system is mounted to a computing device with a foreign operating system i.e. an OS that does not properly access file information or one different from that having stored data within file system . The foreign OS is not configured to access and or modify the file information and especially mount indications properly i.e. in the manner that is understood by the original OS . In other words the foreign file system is not configured to not properly or at all update file information with indications of these data write s and or deletion s . In this case upon the file system being mounted back onto the original computing device or another computing device with an operating system that is configured to properly access file information that computing device s OS referred as a compatible OS can take preventive steps as to avoid data loss.

The compatible OS can perform various functions to make sure that the data integrity of data is proper according to that compatible OS and or the type of file system being used . However due to file system being mounted to a foreign OS as well to the compatible OS performing data integrity functions on data file system metadata and or file information file system information may not include a log of data changes and or mount indications indicating file system being mounted to the foreign OS. The storage manager is configured to determine this situation based on the contents of file information .

In some cases file system can be rolled back to some previous data access operation. For example the computing device to which the storage device containing file system is coupled can have a power failure or another system failure during which some of the data writes to data may not properly complete. Some of the logged data writes and or modifications can be recorded by file information but they may not be completed on data . Similarly some of the data writes and or modifications can be completed but not properly recorded by file information . Thus the operating system can roll back some data writes and or modifications to data . The storage manager is configured to determine this situation based on the contents of file information .

Still further file system can be reformatted by the operating system of the computing device. For example the OS can reformat file system which would delete and or change substantially all of data and or corresponding file information and or file system metadata. The storage manager is configured to determine this situation based on the contents of file information .

In yet another case file system can be mounted to a compatible OS that is not the original computing device. A compatible OS is an OS that is configured to properly access and or modify i.e. access and or modify in a manner comparable to the original OS file system metadata and file information as well as configured to access data . The storage manager is configured to determine this situation based on the contents of file information including whether file system has been mounted back to the original OS after being mounted to another compatible OS or whether file system has been mounted to a compatible OS other than the original OS.

In element a storage manager obtains information regarding stored data. The storage manager can access at a first time file information of a storage device. The storage manager can also store at least a portion of the file information. For example the storage manager can access the file information of file system of storage device . If the file information is implemented using a log file the storage manager can access the data stored in this log file including any mount indications e.g. an indication that a given unit of data e.g. a file directory or the like is mounted to a given mount point . As described below with reference to the mount indications can be implemented in several ways including using a numeric value. This numeric value is accessed and updated by the operating system of the computing device.

As noted typically only compatible operating systems are configured to modify the mount indications regardless of the implementation of such mount indications and operating systems that are not compatible with the type of file system used by the storage device are not configured to access and or modify the file system or at least the mount indicators.

In element the storage manager obtains information regarding the stored data. The storage manager can access at a second time the file information of the storage device. The storage manager can access the file information at the second time in response to an event such as the operating system of the computing device generated event e.g. of a storage device being added reconfigured etc. . These operating system generated events can be general and do not indicate additional details regarding the event. The storage manager can also access the file information at a pre determined interval such as every 5 seconds or at any other time interval . In other words the file manager does not receive information regarding dismounting or type of dismounting from obtaining the file information at this time.

In element the storage manager calculates a difference between the file information accessed at these two different times. Depending on the implementation of the file information the calculated difference can be one or more values data and or a data object. For example if the file information is implemented as a log file and in elements and the storage manager accesses mount indications e.g. that are implemented as numeric values then the calculated difference is also a numeric value.

If the mount indications are implemented as Mode elements then a difference can be calculated as a difference in Mode structure and or value. If the mount indications are implemented as flags for example a flag can be turned on for every mount of a given storage unit then a difference can be calculated as a difference in which flags are present and or enabled. If the mount indications are implemented as objects then the difference can be calculated as a difference in the object value s and or structure. Other implementations of mount indications are also contemplated such as log files and the disclosure is not limited to the examples given herein.

In element the storage manager determines whether the file system was dismounted. The storage manager makes this determination based on the difference calculated in element . The storage manager can also determine the type of file system dismount if any. The storage manager can store the difference information for later use such for performing various actions based on the difference one embodiment of which is described below with reference to .

In element a storage manager accesses a difference between file information. This difference also referred to as file information difference FID is a difference between file information of a file system as accessed at two different points in time.

In element the storage manager determines whether the file system was dismounted between the first point in time and the second point in time based on the accessed difference. In one implementation if the difference includes a numeric value that is larger than some pre determined number then the file system was dismounted. The pre determined number can be different depending on the type of the file system being used and or on the type of the operating system being used.

If the storage manager determines that the file system was dismounted element is performed. If the storage manager determines that the file system was not dismounted element is performed. For example if the difference is larger than a numeric value of 1 but smaller than a numeric value of 100 then the storage manager determines that the file system was dismounted. Continuing with this example if the difference is larger than 100 or smaller than 1 then the then the storage manager determines that the file system was not dismounted. However it is noted that these numeric value ranges are given for explanatory purposes only.

In element the storage manager determines based on the difference whether the file system was dismounted via a computing device having a different OS type also referred as a foreign OS. With reference to the storage manager determines whether file system of storage device was dismounted from computing device that has a compatible OS and mounted to computing device that has a foreign OS prior to being mounted back onto a computing device with a compatible OS such as computing device having a compatible and original OS .

If the storage manager determines that the file system was dismounted via a computing device having a different OS type element is performed. If the storage manager determines that the file system was not dismounted via a computing device having a different OS type is performed. For example if the difference is larger than a numeric value of 10 but smaller than a numeric value of 100 then the storage manager determines that the file system was dismounted via a computing device having a different OS type otherwise the storage manager determines that the file system was not dismounted via a computing device having a similar OS type also referred to a compatible OS . It is noted that these numeric value ranges are also given for the purposes of explanatory purposes only.

In element the storage manager performs a procedure for a file system dismount via a computing device having a different OS type such as a foreign OS . This procedure can include performing an integrity check of any change block data that is maintained by a CBT for this file system.

In element the storage manager performs a procedure for a file system dismount via a computing device having a similar OS type such as a compatible OS or a compatible and original OS . This procedure can include proceeding with the CBT maintenance of the change block data as the file system information likely includes log data for substantially all of the writes and or modifications to the data stored by the file system.

In element the storage manager determines based on the difference whether the file system was reformatted. If the storage manager determines that the file system was reformatted element is performed. If the storage manager determines that the file system was not reformatted element is performed. Continuing with the example above if the difference is larger than a numeric value of 100 then the storage manager determines that the file system was reformatted. In one implementation if the difference is zero or negative i.e. the second value is smaller than the first value then the file system was not reformatted. It is noted that these numeric value ranges are also given for the purposes of explanatory purposes only.

In element the storage manager performs a procedure for a file system that has been reformatted. This procedure can include restarting the change block data maintained by a CBT for this file system as any data stored by the file system is deleted.

In element the storage manager performs a procedure for further processing of the file system. This can include for example performing operations in response to an operating system rolling back one or more write operations on data being stored by the file system.

The log file consists of a series of log records and is updated for every transaction performed on the file system. In this implementation the log file is a sequence of log records with the type RCRD followed by a sequence of restore records of type RSTR. The logging area consists of a sequence of log records. The log record contains a sequence of variable sized records. Upon a transaction of a write a file on a file system of a storage device the OS typically updates the file any tables of the file system as can be implemented using file system metadata and also record this transaction in the log file.

If the transaction is realized i.e. performed CBT software on that computing device can verify that the file is written to the storage device and that the file system has been left in a defined state. The verification of the file system is performed by accessing the file information in the manner described with reference to . If the transaction is not realized in case of e.g. power failure or system failure in general the file system is in an undefined state. In this case the OS accesses a log file that logs transaction on the file system that have been successfully completed. At the first access to the disk after a system failure the OS can read this log file and roll back all the operations to the beginning of the last transaction.

The log file can include several so called restart areas. When the volume i.e. the file system of the storage device is dismounted these restart areas are similar even substantially identical. The restart areas are followed by log records organized in pages headed by a record header going up to log file size.

Log portion illustrates a log file restart area record. In one implementation the offset of this record is found by adding the offset of the RESTART ZONE PAGE HEADER to the restart offset value found in it.

As also described with reference to the storage manager can calculate a difference in this value between each mount. In one example this value is incremented by a compatible OS by one each time the volume is mounted. Therefore if the storage manager determines that the value has been incremented more than once i.e. the difference is more than 2 the storage manager can determine that the volume was mounted somewhere outside the domain of the CBT of the computing device. In other words it is also possible for the volume to be remounted to the same computing device. These and other scenarios are described above with reference to .

Storage manager can implement storage manager storage manager and or storage manager and can implement one or more of methods . CBT module can implement CBT module . Change block data can implement change block data . It is noted that in some embodiments one or more of elements of computing device may not be used. In some embodiments one or more of elements of computing device may be combined as desired.

Elements of network architecture can be implemented using different computer systems and networks. An example of one such network environment is described below with reference to .

As also depicted on server is coupled to a server storage device which includes a data volume such as storage device among others. Server storage device can be implemented as a single storage device or a collection of storage devices. Server storage device can also be implemented as a storage area network which couples remote storage devices to a server e.g. server such that the remote storage devices appear as locally attached storage devices to the server s OS for example.

In light of the present disclosure those of skill in the art will appreciate that server storage device can be implemented by any type of computer readable storage medium including but not limited to internal or external hard disk drives HDD optical drives e.g. CD R CD RW DVD R DVD RW and the like flash memory drives e.g. USB memory sticks and the like tape drives and the like. Alternatively those of skill in the art will also appreciate that in light of the present disclosure network architecture can include other components such as routers firewalls and the like that are not germane to the discussion of the present network and will not be discussed further herein. Those of skill in the art will also appreciate that other configurations are possible. For example clients N can be directly coupled to server storage device without the user of a server or Internet server can be used to implement both the clients and the server network architecture can be implemented without the use of clients N and so on.

As an example implementation of network architecture server services requests to data generated by clients N to data stored in server storage device . Any of the functionality of the computing devices can be implemented using one of the other servers in the manner illustrated by .

Bus allows data communication between central processor and system memory which may include read only memory ROM or flash memory neither shown and random access memory RAM not shown as previously noted. The RAM is generally the main memory into which the operating system and application programs are loaded. The ROM or flash memory can contain among other code the Basic Input Output system BIOS which controls basic hardware operation such as the interaction with peripheral components. Applications resident with computer system are generally stored on and accessed via a computer readable medium such as a hard disk drive e.g. fixed disk an optical drive e.g. optical drive a floppy disk unit or other storage medium. Additionally applications can be in the form of electronic signals modulated in accordance with the application and data communication technology when accessed via network modem or interface .

Storage interface as with the other storage interfaces of computer system can connect to a standard computer readable medium for storage and or retrieval of information such as a fixed disk drive . Fixed disk drive may be a part of computer system or may be separate and accessed through other interface systems. Modem may provide a direct connection to a remote server via a telephone link or to the Internet via an internet service provider ISP . Network interface may provide a direct connection to a remote server via a direct network link to the Internet via a POP point of presence . Network interface may provide such connection using wireless techniques including digital cellular telephone connection Cellular Digital Packet Data CDPD connection digital satellite data connection or the like.

Many other devices or subsystems not shown may be connected in a similar manner e.g. document scanners digital cameras and so on . Conversely all of the devices shown in need not be present to practice the present disclosure. The devices and subsystems can be interconnected in different ways from that shown in . The operation of a computer system such as that shown in is readily known in the art and is not discussed in detail in this application. Code for detection of mounts of storage devices such as described above with reference to the methods of etc. to implement the present disclosure can be stored in computer readable storage media such as one or more of system memory fixed disk optical disk or floppy disk . Memory is also used for storing temporary variables or other intermediate information during the execution of instructions by the processor . The operating system provided on computer system may be MS DOS MS WINDOWS OS 2 UNIX Linux or another known operating system.

Moreover regarding the signals described herein those skilled in the art will recognize that a signal can be directly transmitted from a first block to a second block or a signal can be modified e.g. amplified attenuated delayed latched buffered inverted filtered or otherwise modified between the blocks. Although the signals of the above described embodiment are characterized as transmitted from one block to the next other embodiments of the present disclosure may include modified signals in place of such directly transmitted signals as long as the informational and or functional aspect of the signal is transmitted between blocks. To some extent a signal input at a second block can be conceptualized as a second signal derived from a first signal output from a first block due to physical limitations of the circuitry involved e.g. there will inevitably be some attenuation and delay . Therefore as used herein a second signal derived from a first signal includes the first signal or any modifications to the first signal whether due to circuit limitations or due to passage through other circuit elements which do not change the informational and or final functional aspect of the first signal.

Although the present invention has been described in connection with several embodiments the invention is not intended to be limited to the specific forms set forth herein. On the contrary it is intended to cover such alternatives modifications and equivalents as can be reasonably included within the scope of the invention as defined by the appended claims.

