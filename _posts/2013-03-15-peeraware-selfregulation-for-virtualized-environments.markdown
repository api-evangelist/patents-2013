---

title: Peer-aware self-regulation for virtualized environments
abstract: Technologies for self-regulation for virtualized environments may include, by a virtual machine on an electronic device, detecting an attempted anti-malware operation by a monitored module, determining anti-malware operation levels of one or more other virtual machines on the electronic device, and, based on the attempted anti-malware operation and upon the anti-malware operation levels, determining whether to allow the attempted operation.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430647&OS=09430647&RS=09430647
owner: McAfee, Inc.
number: 09430647
owner_city: Santa Clara
owner_country: US
publication_date: 20130315
---
Embodiments of the present invention relate generally to computer security and distributed computing and more particularly to peer aware self regulation for virtualized environments.

Malware infections on computers and other electronic devices are very intrusive and hard to detect and repair. Anti malware solutions may require matching a signature of malicious code or files against evaluated software to determine that the software is harmful to a computing system. Malware may disguise itself through the use of polymorphic programs or executables wherein malware changes itself to avoid detection by anti malware solutions. In such case anti malware solutions may fail to detect new or morphed malware in a zero day attack. Malware may include but is not limited to spyware rootkits password stealers spam sources of phishing attacks sources of denial of service attacks viruses loggers Trojans adware or any other digital content that produces unwanted activity. Anti malware protection must be updated periodically to provide ample defense against ever evolving malware.

System may include at least one electronic device . Electronic device may be implemented in any suitable manner such as on a computer server mobile device blade cloud computing scheme digital circuitry analog circuitry or any combination thereof. Electronic device may include a plurality of instances of virtual machines VM or guest operating systems such as VMs and . Each such VM may have virtualized access to the machine resources of electronic device .

Machine resources may include any resource of or associated with electronic device . For example machine resources may include memory processors portions of processors storage busses network devices peripheral devices input output devices registers caches pages tables or operating system elements. Such resources may be located internal to electronic device as shown in machine resources or external to electronic device as shown in machine resources . Each VM may attempt to access machine resources but may instead access a virtualized version of machine resources .

Electronic device may include any suitable mechanism for virtualizing access of machine resources to VMs . For example electronic device may include a virtualization module . Virtualization module may be implemented by for example a hypervisor. Virtualization module may include for example an application logic instructions program script library shared library function add in or other suitable entity. Virtualization module may be configured to intercept attempted access of machine resources by VMs and to provide access to virtualized versions of such resources. Furthermore virtualization module may be configured to present virtualized versions of machine resources to VMs for use. In addition the execution of VMs may occur completely within the confines of virtualization module such that VMs are isolated from direct contact with the outside and with each other. All interaction from a given VM may be controlled or monitored by virtualization module .

Electronic device may include a processor coupled to a memory . Processor may comprise for example a microprocessor microcontroller digital signal processor DSP application specific integrated circuit ASIC or any other digital or analog circuitry configured to interpret and or execute program instructions and or process data. In some embodiments processor may interpret and or execute program instructions and or process data stored in memory . Memory may be configured in part or whole as application memory system memory or both. Memory may include any system device or apparatus configured to hold and or house one or more memory modules. Each memory module may include any system device or apparatus configured to retain program instructions and or data for a period of time e.g. computer readable storage media . Instructions logic or data for configuring the operation of system such as configurations of components such as each of VMs their contents and virtualization module may reside in memory for execution by processor .

Processor may execute one or more code instruction s to be executed by the one or more cores of the processor. The processor cores may follow a program sequence of instructions indicated by the code instructions. Each code instruction may be processed by one or more decoders of the processor. The decoder may generate as its output a micro operation such as a fixed width micro operation in a predefined format or may generate other instructions microinstructions or control signals which reflect the original code instruction. Processor may also include register renaming logic and scheduling logic which generally allocate resources and queue the operation corresponding to the convert instruction for execution. After completion of execution of the operations specified by the code instructions back end logic within processor may retire the instruction. In one embodiment processor may allow out of order execution but requires in order retirement of instructions. Retirement logic within processor may take a variety of forms as known to those of skill in the art e.g. re order buffers or the like . The processor cores of processor are thus transformed during execution of the code at least in terms of the output generated by the decoder the hardware registers and tables utilized by the register renaming logic and any registers modified by the execution logic

VMs on electronic device may be grouped according to classes of VMs. Such classes may be used for any suitable logical groupings and may include for example similarly applied or provisioned VMs users of VMs or VMs dedicated to certain applications or kinds of applications. For example VMs may be included within class and VMs may be included within class. In the example of VMs may be included within classand provisioned for anti malware operations.

VMs may include any suitable mechanism for anti malware operation. Fore example VMs may include an anti malware module . Anti malware module may be implemented in similar fashion across all VMs . Anti malware module may be configured to protect VM from malware by for example conducting malware scanning scanning incoming data conducting behavior analysis comparing elements of VM to signatures of known malware or protecting access to system resources. Anti malware module may be implemented by for example a program application proxy engine function library shared library script logic instructions or any suitable combination thereof.

Periodically anti malware module may require additional or updated information as new malware is developed zero day attacks are made and responded to and as researchers develop new techniques for fighting malware. Anti malware module may be communicatively coupled to for example an anti malware server over a network connection to receive such information. Anti malware server may be configured to send new rules definition files signatures or other suitable information to anti malware module . Anti malware server may be implemented by any suitable program application proxy engine function library shared library script logic instructions electronic device analog circuitry digital circuitry or any suitable combination thereof.

Various operations of anti malware module such as conducting scanning for malware or downloading and installing new information from anti malware server may be resource intensive. These operations may consume significant portions of machine resources such as processor time or memory. Furthermore if multiple instances of anti malware module conduct similar operations at the same time as other instances of anti malware module the consumption of machine resources may be even further exacerbated.

Similarly other elements of VM such as programs applications scripts utilities or functions may consume significant amounts of resources while conducting various specific operations. Simultaneous and similar operations from equivalent instances of such elements may similarly exacerbate the consumption of machine resources .

VM may include a monitor module configured to monitor the usage of machine resources or at least the view of such resources as visible from VM in view of operations of various elements of VM . Furthermore monitor module may be configured to monitor such usage in view of the operations of multiple instances of a given element of VM across multiple such VMs . For example monitor module may be configured to monitor the operations performed and resources consumed by anti malware module in VM and upon the usage or availability of machine resources available. Furthermore monitor module may be configured to monitor the operations performed by other instances of anti malware module such as anti malware module and anti malware module in their respective VMs VM and VM . Any suitable operation may be monitored such as a phase of scanning downloading or installation. Similarly monitor module may be configured to monitor the operations of other elements of VM across multiple instances of such elements across different instances of VM . In one embodiment monitor module may be configured to monitor the operation of elements of VMs from within the same VM class that it resides. For example monitor module may be configured to monitor the operations from any of VMs within class. However monitor module may be unable to monitor the operations from VMs within classbecause such VMs may not be provisioned in a similar fashion as VMs . Specifically VMs might not include instances of monitor module .

Monitor module may be configured to monitor operations of elements from other VMs in any suitable manner. In one embodiment monitor module may be configured to monitor operations of elements from other VMs through synchronization with other instances of monitor module . For example monitor module may reside in VM while monitor module may reside in VM . Monitor module may monitor the specific operations of elements of VM such as the actions and resources used by anti malware module . Similarly monitor module may monitor the specific operation of elements of VM such as the actions and resources used by anti malware module . Monitor module and monitor module may communicate to indicate to each other the operations employed by their respective elements. Furthermore monitor module and monitor module may communicate to indicate the resources used by their respective elements.

By knowing what other instances are utilizing monitor module may be configured to perform self regulation. For example given indications from other instances that particular operations are being conducted monitor module may limit the equivalent operations on VM . In another example given indications from other instances that certain resources are being used monitor module may limit the use of the same resources on VM

Monitor module may be configured to limit the operations of elements of VM in any suitable manner. In one embodiment these elements such as anti malware module may be configured to invoke monitor module before commencing operations that may need to be regulated. Invoking monitor module may be used as a predicate check or a check during operation to make sure that usage across all instances of VMs is within required parameters. In another embodiment such elements may perform checks to a table data structure or other entity that receives information populated by anti malware module

To provide information to other instances of monitor module an instance of monitor module may be configured to send messages regarding initiation or completion of an operation of for example anti malware module . Furthermore an instance of monitor module may be configured to send messages regarding usage of resources by anti malware module or of VM . Monitor module may be configured to mine such information from for example being invoked from anti malware module .

Accordingly monitor module may reside in any suitable portion of VM . In one embodiment monitor module may reside within an element of VM that monitor module will monitor. For example monitor module may reside within anti malware module . In another embodiment monitor module may reside as a stand alone entity within VM and may be invoked through inter application calls or communication by for example anti malware module . In yet another embodiment monitor module may reside as a portion of the operating system of VM and may be invoked through operating system function calls.

Monitor module may be resident and execute in VM . Its operation may be observed controlled and monitored through virtualization monitor . Furthermore its access of machine resources may be observed controlled and monitored through virtualization monitor . Consequently monitor module may without any additional information be unaware of even the existence of other instances of monitor module anti malware module or VM . In order to become aware of its peers monitor module may take any suitable action.

In one embodiment monitor module may be configured to access functions of virtualization module to solicit or query whether additional instances of VM exist and if so how such VMs may be addressed. For example virtualization module may include an enumeration application programming interface API configured to provide functionality to elements within VM for discovering and addressing other instances of VMs operating on electronic device controlled by virtualization module . In the example of monitor module in VM may query virtualization module using enumeration API to determine the existence and possible address of VM and VM . Furthermore virtualization module may include a utilization module configured to provide information regarding the total usage of machine resources across electronic device . Utilization module and enumeration API may be implemented in any suitable manner such as by an application function logic instructions program script library shared library function add in or other suitable entity.

However in some cases such functions may be unavailable from virtualization module . In another embodiment monitor module may be configured to perform broadcast network messages to determine other VMs located on the same electronic device . Monitor module may be configured to make any suitable broadcast network messages. For example monitor module may be configured to broadcast messages across network . Network may include for example an intranet the Internet a local area network a wide area network a wireless network or any combination thereof. In one embodiment monitor module may be configured to broadcast messages across a portion of network . For example monitor module may be configured to broadcast messages to a subnet logical network subdivision or network hierarchy level of network to which VM belongs.

The messages broadcast by monitor module may include for example messages querying whether other instances of monitor module exist that monitor module is active that monitor module is operating upon a particular VM that monitor module is operating upon a particular VM class that monitor module is operating upon a particular electronic device that monitor module is inactive that a particular operation of an element of VM has commenced such as a scanning or update operation of anti malware module that a particular operation of an element of VM has completed or usage of machine resources . Such messages may also be sent by monitor module directly to other instances of monitor module once such instances are discovered or enumerated.

By sending messages to network or a subnet thereof messages may be received by other instances of monitor module with the same class of VMs. However such messages may also be received by other recipients not within the same class of VMs and possibly not within the same electronic device. Such recipients may ignore such broadcast messages. Further the messages may be encrypted such that only approved recipients such as instances of monitor module may interpret them. Instances of monitor module may be configured to listen for such messages on for example a pre designated port.

In operation one or more VMs may be operating on electronic device . Access to system resources of electronic device may be virtualized to VMs by virtualization module . Furthermore the operation and instantiation of each of VMs may be secured monitored and handled by virtualization module . An instance of anti malware module may be operating within an associated instance of VM . Furthermore an instance of monitor module may be operating within an associated instance of VM .

A given instance of monitor module may determine other instances of monitor module operating on electronic device . Monitor module may send out broadcast messages identifying the instance of monitor module its virtual machine or its electronic device to a portion of network . Monitor module may invoke enumeration API to determine other instances of monitor module operating on electronic device . Such determinations may be made startup of monitor module or upon startup for an element which monitor module is monitoring such as anti malware module . Furthermore such determination may be made as an element monitored by monitor module such as anti malware module attempts to enact a specified operation such as anti malware scanning or update and installation of anti malware information.

Monitor module may inform other instances of monitor module of intended actions by the monitored element. In addition monitor module may evaluate the usage of resources by its monitored elements usage of resources by other instances of VM operations being performed by monitored elements in other instances of VM or total resource usage or availability in electronic device .

In one embodiment monitor module may track received messages from other instances of monitor module . Consequently monitor module may include a running total or accounting of current operations by other VMs or of resources in use by other VMs . Such running totals or accounting may be used by for example instances of monitor module wherein information about operations and usage are transmitted via broadcast messages. In another embodiment monitor module may query each of other VMs when information is needed.

Based on the evaluations of usage and operations of other VMs and upon the resource usage identified by virtualization module monitor module may for example postpone operations of its monitored elements such as anti malware module enable such operations or stop such existing operations. Furthermore upon taking any such action monitor module may inform other instances of monitor module .

Monitor module may use any suitable criteria when evaluating its peers for regulating the operations within its own VM. Furthermore monitor module may use such criteria to regulate any suitable operations within its own VM.

Operations for updating anti malware information may be performed by for example update module . Update module may be configured to upon initiation by anti malware module or monitor module contact a source of information such as anti malware server for updated anti malware information. Update module may be configured to download such information and install it for use within VM . Update module may be implemented in any suitable manner such as by an application logic instructions program script library shared library function add in agent proxy utility or combination thereof.

Conducting an anti malware scan may be performed by for example scan module . Scan module may be configured to upon initiation by anti malware module or monitor module scan machine resources available to VM for indications of malware. Furthermore scan module may include one or more modes of operation. Such modes may include for example modules for different kinds of scans different qualities of scan and scans of different portions of machine resources . Each of modes of operation may intensively use different resources. Thus each of modes may be selectively invoked by anti malware module . In the example of modes may include a cache scan configured to scan changed elements since a previous can a rootkit scan configured to scan for indications of rootkits a registry scan configured to scan an operating system registry or a disk scan configured to scan an entire disk or storage for indications of malware as they reside on disk. Scan module may be implemented in any suitable manner such as by an application logic instructions program script library shared library function add in agent proxy utility or combination thereof.

Rules may include any suitable combination of criteria metrics measurements or other indications of resource usage operations being conducted or other factors related to performance of electronic device . For example rules may include various metrics by which operations are regulated. In another example rules may include a threshold associated with each such metric. Monitor module may be configured to evaluate an operation by determining whether the execution of the operation would violate or is violating any applicable rules . If such an operation would or is violating an applicable rule then the operation may be postponed or terminated. If such an operation would not violate an applicable rule then the operation may be allowed.

For example rules may include criteria that the total usage of a central processing unit CPU or other processor or processors of machine resources in electronic device should not exceed a threshold T. The information of the total processor usage may be determined by querying virtualization module . Such criteria may be combined with other criteria in rules .

Rules may include criteria that the CPU usage within machine resources in electronic device as used by the instance of VM should not exceed a threshold T. Such criteria may thus include analysis of the CPU usage of the individual VM as opposed to CPU usage due to other elements running on electronic device .

Rules may include criteria that the CPU usage within machine resources in electronic device as used by all of the VMs within a designated VM class should not exceed a threshold T. For example such criteria may require that the all instances of VM within classshould not exceed the CPU usage threshold. To determine such CPU usage by all of the VMs within a designated VM class monitor module may coordinate reporting of resource usage with other instances of monitor module within other VM instances on electronic device .

Rules may include criteria that the number of threads executing in the given instance of VM should not exceed a threshold T. Such criteria may thus include analysis of the usage of the individual VM as opposed to CPU usage due to other elements running on electronic device .

Rules may include criteria that the total number of threads executing in the class of VMs should not exceed a threshold T. For example such criteria may require that the total number of threads within all instances of VM within classshould not exceed the threshold. To determine such numbers of threads monitor module may coordinate reporting of resource usage with other instances of monitor module within other VM instances on electronic device .

Rules may include criteria that the CPU usage within machine resources in electronic device as used by a particular monitored element of VM such as anti malware module should not exceed a threshold T. Such criteria may thus include analysis of the CPU usage of the individual instance of anti malware module as opposed to CPU usage due to other elements running on electronic device .

Rules may include criteria that the CPU usage within machine resources in electronic device as used by all instances of a monitored element of VM such as anti malware module within the VMs within a designated VM class should not exceed a threshold T. To determine such CPU usage by all of the instances of a given element within the VMs of a designated VM class monitor module may coordinate reporting of resource usage with other instances of monitor module within other VM instances on electronic device .

Rules may include criteria that the total number of threads executing by a particular monitored element of VM such as anti malware module should not exceed a threshold T. Such criteria may thus include analysis of the threads used within the individual instance of anti malware module as opposed to thread usage due to other elements running on electronic device .

Rules may include criteria that the total number of threads executing by the instances of particular element such as anti malware module within the VMs within a designated VM class should not exceed a threshold T. To determine such thread usage by all of the instances of a given element within the VMs of a designated VM class monitor module may coordinate reporting of resource usage with other instances of monitor module within other VM instances on electronic device .

Rules may include criteria that for a designated operation the total number of such operations across instances of a particular element such as anti malware module within the VMs within a designated VM class should not exceed specified thresholds. Given the example of anti malware module such criteria may include update operations or one of any number and kind of scanning operations. Such operations may be employed by for example update module or scan module .

For example rules may include criteria that the total number of updates currently in progress across instances of anti malware module within the designated VM class should not exceed a threshold T. To determine the number of updates in operation across all VMs of a designated VM class monitor module may coordinate reporting of update operations. Such reporting may include reporting when an update operation has started and when an update operation has finished. Before starting a new update operation monitor module may determine whether the addition of the new update operation would cause the total number of updates currently in progress across the designated VM class to exceed threshold T. If so monitor module may postpone the update operation. If not monitor module may allow the update operation. In one embodiment a single update operation within a designated VM class may be permitted at a time.

Rules may include criteria that the total number of scans or the scans of a specified scan mode currently in progress across instances of anti malware module within the designated VM class should not exceed a threshold. Each of thresholds T. . . Tmay correspond to a threshold specific to a given scan mode . To determine the number scans and the kinds thereof in operation across all VMs of a designated VM class monitor module may coordinate reporting of scan operations. Such reporting may include reporting when a scan operation has started and when a scan update operation has finished. Before starting a new scan operation monitor module may determine whether the addition of the new scan operation would cause the total number of scans currently in progress across the designated VM class to exceed the designated threshold. If so monitor module may postpone the scan operation. If not monitor module may allow the scan operation.

Rules may include criteria that the total number of second stage scans currently in progress across instances of anti malware module within the designated VM class should not exceed a threshold T. Second stage scans may include for example scans for malware when a preliminary indication of malware has already been fan. Thus second stage scans may be more resource intensive and a higher priority than other scans. Before starting a new second scan operation monitor module may determine whether the addition of the new second scan operation would cause the total number of second scans currently in progress across the designated VM class to exceed the designated threshold. If so monitor module may postpone the second scan operation. If not monitor module may allow the second scan operation.

In various embodiments the thresholds of rules for a given criteria may reference other criteria within rules . Furthermore individual ones of rules may be compounded or added with other ones of rules . For example application of thresholds T. . . T regulating the number of specified operations that may be conducted across instances of VMs in a given VM class may be applied only if thread or CPU usage exceeds a given one or more of thresholds T. . . T.

For example application of thresholds T. . . Tmay be made in conjunction with CPU total usage as represented by threshold T. If CPU total usage is below threshold T application of thresholds T. . . Tmay not be necessary. If CPU total usage is above threshold T application of thresholds T. . . Tmay be performed. In another example application of thresholds T. . . Tmay be made in conjunction with CPU usage for the VM threshold T or CPU usage for a whole VM class threshold T . If the CPU usage for VM exceeds threshold Tor the CPU usage for a whole VM class exceeds threshold T then application of thresholds T. . . Tmay be performed.

In another example thresholds may be made defined in relation to each other. For example thresholds T T and Tmay include a threshold value that is conditional or related to the measurement of the number of second stage scans in progress. As second stage scans may be performed once an indication of malware has been made second stage scans may be a higher priority than other operations. Thus thresholds T T and Tmay be lowered given a higher number of second stage scans.

By accomplishing self regulation that is peer aware each instance of anti malware module and monitor module may operate in a manner that best maximizes use of resources of electronic device while mitigating impact to other elements running on electronic device and within the instances of VM . By making such regulation the responsibility of an individual instance of monitor module coordination of anti malware operations may be unnecessary to be performed by virtualization module .

At in one embodiment the presence of a monitor in an instance of a VM on an electronic device may be broadcast. In another embodiment the presence of the monitor may be made by registration with for example a virtualization module configured to virtualize access for the VM. The presence may be broadcast by for example broadcasting a message to a subnet to which the VM is connected. Similarly configured monitors on other VMs within the VM class may be resident on the same electronic device may be connected to the same subnet and may receive the broadcast messages. The broadcast messages may identify the VM the VM class and the electronic device. Recipients that are not within the same VM class may ignore the broadcast messages. The broadcast messages may be made on a specified or configured network port. Furthermore the broadcast messages may be encrypted.

At other monitors on other VMs within the VM class may be determined Such a determination may be made by for example receiving reply messages in response to the broadcast made at querying the virtualization module for addresses of VMs or by monitoring for other messages received by such monitors in .

At attempted operations that may be regulated by the monitor within the VM as well as received messages from other monitors in the VM class may be monitored.

At it may be determined whether a notification message or an operation query has been received from another VM. Such a notification message may include for example a notification that a particular operation has commenced or ended that usage of a resource has met a certain level or any other relevant information for peer aware self regulation. An operation query may include for example a message inquiring about whether specific operations such as malware scanning or anti malware information updating are underway within the VM. Furthermore an operation query may include a message inquiring about resource usage or number of threads in use. If no such messages or queries are received method may proceed to . If such messages or queries are received at such messages may be recorded or such a query may be answered.

At it may be determined whether one of one or more specified operations has been attempted within the VM. Such an attempted operation may include for example one or more modes of malware scanning or updating of anti malware information. If so method may proceed to . If no method may proceed to . At usage information from other VMs may be determined Such information may include whether particular operations on such VMs such as scanning or updating are being performed or information about machine resources used by the respective VM. Usage information may be obtained by for example sending queries to other VMs through broadcast messages or direct messages or by querying a virtualization module configured to virtualize operation of the VMs. Such usage information may be requested in real time or may be logged as information arrives from other VMs such as those received in .

At it may be determined whether the detected operation would exceed specified thresholds. Such thresholds may include for example the number of operations on other instances of VMs within the same VM class on the electronic device the resource usage of such operations on the present VM or other VM instances or the total available resources on the present VM other VM instances or the electronic device. If the detected operation would exceed specified thresholds method may proceed to . If the detected operation would not exceed specified thresholds method may proceed to .

At the operation may be allowed to execute. Other operations as needed depending upon the priority of the operation allowed to execute may be regulated throttled paused or given fewer resources or threads as required to maintain operations specified by thresholds at . At information about the operation may be broadcast or recorded for use by other VM instances.

At the operation may be denied postponed or cause other operations to be modified. For example the operation may be cancelled. In another example the operation may be postponed until a subsequent execution of method . In yet another example other operations may be regulated throttled paused or given fewer resources or threads. The operation may be reevaluated upon another iteration of the elements of method .

At it may be determined whether any previously allowed operations have completed. If so at it may be broadcast or recorded for use by other VM instances. If not method may proceed to .

At method may optionally repeat or terminate. Method may repeat any suitable number of its elements such as by proceeding to .

For the purposes of this disclosure computer readable media may include any instrumentality or aggregation of instrumentalities that may retain data and or instructions for a period of time. Computer readable media may include without limitation storage media such as a direct access storage device e.g. a hard disk drive or floppy disk a sequential access storage device e.g. a tape disk drive compact disk CD ROM DVD random access memory RAM read only memory ROM electrically erasable programmable read only memory EEPROM and or flash memory as well as communications media such wires optical fibers and other electromagnetic and or optical carriers and or any combination of the foregoing. The following examples pertain to further embodiments. Specifics in the examples may be used anywhere in one or more embodiments described above or herein.

A method for self regulation of virtualized environments may be performed on an electronic device. Any suitable portions or aspects of the method may be implemented in at least one machine readable storage medium or in a system as described below. The method may include any suitable combination of elements actions or features. For example the method may include by a virtual machine on an electronic device detecting an attempted anti malware operation by a monitored module. The method may include by the virtual machine on an electronic device determining anti malware operation levels of one or more other virtual machines on the electronic device. The method may also include based on the attempted anti malware operation and upon the anti malware operation levels determining whether to allow the attempted operation. Furthermore the attempted operation may include an anti malware scan. In addition the attempted operation may include an installation of anti malware information. The attempted anti malware operation may include generating one or more execution threads and the anti malware operation levels of one or more other virtual machines on the electronic device may include a quantification of one or more threads associated with anti malware operations. The attempted anti malware operation levels of one or more other virtual machines on the electronic device may include a quantification of resources used by one or more other anti malware operations. The attempted anti malware operation may include one mode of a plurality of modes of anti malware scanning and the anti malware operation levels of one or more other virtual machines on the electronic device include a quantification of the mode of anti malware scanning. Determining anti malware operation levels of one or more other virtual machines on the electronic device may include sending a message to a subnetwork communicatively coupled to the virtual machine.

At least one machine readable storage medium may include computer executable instructions carried on the computer readable medium. Various aspects of the medium may implement any suitable portions or combinations of the method described above or the system described below. The instructions may be readable by a processor. The instructions when read and executed may cause the processor to by a virtual machine on an electronic device detect an attempted anti malware operation by a monitored module. Also the instructions may cause the processor to by the virtual machine on an electronic device determine anti malware operation levels of one or more other virtual machines on the electronic device. The instructions may also cause the processor to based on the attempted anti malware operation and upon the anti malware operation levels determine whether to allow the attempted operation. Furthermore the attempted operation may include an anti malware scan. In addition the attempted operation may include an installation of anti malware information. The attempted anti malware operation may include generating one or more execution threads and the anti malware operation levels of one or more other virtual machines on the electronic device may include a quantification of one or more threads associated with anti malware operations. The attempted anti malware operation levels of one or more other virtual machines on the electronic device may include a quantification of resources used by one or more other anti malware operations. The attempted anti malware operation may include one mode of a plurality of modes of anti malware scanning and the anti malware operation levels of one or more other virtual machines on the electronic device include a quantification of the mode of anti malware scanning. Determining anti malware operation levels of one or more other virtual machines on the electronic device may include sending a message to a subnetwork communicatively coupled to the virtual machine.

A system may be configured for self regulation for virtualized environments. The system may implement any suitable portions or combinations of the method or the at least one machine readable storage medium as described above. The system may include a virtualization module configured to virtualize access to one or more resource of an electronic device for one or more virtual machines. The system may further include a processor coupled to a computer readable medium. The system may also include a monitor module. The monitor module may include computer executable instructions carried on the computer readable medium. The instructions may be readable by the processor. The instructions when read and executed may configure the monitor module by a virtual machine on an electronic device detect an attempted anti malware operation by a monitored module. The virtual machine may be configured to access one or more virtualized resources provided by the virtualization module. Also the instructions may configure to monitor module to by the virtual machine on an electronic device determine anti malware operation levels of one or more other virtual machines on the electronic device. The instructions may also configure to monitor module based on the attempted anti malware operation and upon the anti malware operation levels determine whether to allow the attempted operation. Furthermore the attempted operation may include an anti malware scan. In addition the attempted operation may include an installation of anti malware information. The attempted anti malware operation may include generating one or more execution threads and the anti malware operation levels of one or more other virtual machines on the electronic device may include a quantification of one or more threads associated with anti malware operations. The attempted anti malware operation levels of one or more other virtual machines on the electronic device may include a quantification of resources used by one or more other anti malware operations. The attempted anti malware operation may include one mode of a plurality of modes of anti malware scanning and the anti malware operation levels of one or more other virtual machines on the electronic device include a quantification of the mode of anti malware scanning. Determining anti malware operation levels of one or more other virtual machines on the electronic device may include sending a message to a subnetwork communicatively coupled to the virtual machine.

A system for self regulation of virtualized environments may be performed on an electronic device. Any suitable portions or aspects of the system may be implemented in at least one machine readable storage medium or in a system as described below. The system may include any suitable combination of elements actions or features. For example the system may include by a virtual machine on an electronic device means for detecting an attempted anti malware operation by a monitored module. The system may include by the virtual machine on an electronic device means for determining anti malware operation levels of one or more other virtual machines on the electronic device. The system may also include based on the attempted anti malware operation and upon the anti malware operation levels means for determining whether to allow the attempted operation. Furthermore the attempted operation may include an anti malware scan. In addition the attempted operation may include an installation of anti malware information. The attempted anti malware operation may include generating one or more execution threads and the anti malware operation levels of one or more other virtual machines on the electronic device may include a quantification of one or more threads associated with anti malware operations. The attempted anti malware operation levels of one or more other virtual machines on the electronic device may include a quantification of resources used by one or more other anti malware operations. The attempted anti malware operation may include one mode of a plurality of modes of anti malware scanning and the anti malware operation levels of one or more other virtual machines on the electronic device include a quantification of the mode of anti malware scanning. Determining anti malware operation levels of one or more other virtual machines on the electronic device may include sending a message to a subnetwork communicatively coupled to the virtual machine.

Although the present disclosure has been described in detail it should be understood that various changes substitutions and alterations can be made hereto without departing from the spirit and the scope of the disclosure as defined by the appended claims.

