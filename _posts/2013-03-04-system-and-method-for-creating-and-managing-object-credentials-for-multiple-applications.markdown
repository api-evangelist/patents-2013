---

title: System and method for creating and managing object credentials for multiple applications
abstract: A method includes storing a credential object for a user to an encrypted silo on an information handling system. The credential object operates to authenticate the user to use an application. The method also includes copying the encrypted silo from the information handling system to a second information handling system, retrieving at the second information handling system the credential object from the copy of the encrypted silo, and authenticating the user to use the application on the second information handling system using the credential object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09092601&OS=09092601&RS=09092601
owner: Dell Products, LP
number: 09092601
owner_city: Round Rock
owner_country: US
publication_date: 20130304
---
This disclosure relates generally information handling systems and more particularly relates to creating and managing object credentials for multiple applications.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option is an information handling system. An information handling system generally processes compiles stores and or communicates information or data for business personal or other purposes. Because technology and information handling needs and requirements may vary between different applications information handling systems may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in information handling systems allow for information handling systems to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition information handling systems may include a variety of hardware and software resources that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

The following description in combination with the Figures is provided to assist in understanding the teachings disclosed herein. The following discussion will focus on specific implementations and embodiments of the teachings. This focus is provided to assist in describing the teachings and should not be interpreted as a limitation on the scope or applicability of the teachings. However other teachings can certainly be used in this application. The teachings can also be used in other applications and with several different types of architectures such as distributed computing architectures client server architectures or middleware server architectures and associated resources.

Information handling system includes an application an authentication module an application programming interface API biometric modules and biometric sensors and and a provincial silo . Application is connected to authentication module . Authentication module includes a log in service and a biometric service and is connected to biometric modules and . API is connected to authentication module to biometric modules and and to provincial silo . Biometric module is connected to biometric sensor and biometric module is connected to biometric sensor . Biometric sensor includes a biometric template .

Application represents one or more services or programs that provide functionality for information handling system . For example application can represent the functionality of an operating system OS instantiated on information handling system background services of the OS application programs running on the information handling system other program software or code operating on the information handling system or a combination thereof. Access to the functionality of application can be restricted or limited to authorized users or services. For example where application seeks to access an external network access to the external network can be blocked unless information handling system has been logged on to the external network. Here application accesses log in service to prompt a user for log in credentials such as a user name and a password and the log in service verifies that the user name represents a valid user and that the password matches that of the user. In a particular embodiment log in service operates to compare user provided log in credentials with valid user credentials in a credential repository. For example log in service can provide a prompt to a user to provide the user s log in credentials and the log in service can query the credential repository to determine if the provided user credentials are valid. In another embodiment log in service operates to store the log in credentials and to automatically provide the log in credentials upon request. For example once a user has logged onto information handling system then subsequent acts of logging the user in to a database a network or the like can be performed by log in service without intervention of the user.

In another example a user can be restricted or have access to limited functionality of application until a biometric authentication of the user is completed. Here application accesses biometric service to prompt a user to provide a biometric signature to one or more of biometric sensors and such as a finger print scan a retinal scan a DNA scan or another biometric identifier of the user and the biometric service verifies that the user is a valid user of information handling system . Biometric service operates to compare user provided biometric information with a valid biometric template from a biometric template repository. Here biometric service provides a prompt to a user to provide a biometric input to biometric sensor and the biometric sensor scans the user s biometric information to provide a biometric template associated with the information to biometric module . Biometric service then compares the received biometric template from the user with the valid templates in the template repository to determine if the user is a valid user. If so the user is authenticated onto information handling system and is given access to the functionality of application .

Biometric service also operates to receive the results of a comparison between user provided biometric information and a valid biometric template from a biometric sensor . Here biometric service provides a prompt to a user to provide a biometric input to biometric sensor and the biometric sensor scans the user s biometric information to provide a biometric template associated with the information. In this case biometric sensor includes a NVRAM that includes one or more valid biometric templates that are compared to the scanned biometric information and the biometric sensor determines if the user is a valid user. Biometric sensor then provides an indication as to whether or not the user is a valid user to biometric module to authenticate the user onto information handling system .

API operates to provide extensions in the interfaces between authentication module and biometric modules and such that authentication credentials for various users of information handling system and application are securely stored and maintained on provincial silo . Thus in a particular embodiment when a user seeks to access application log in service prompts the user for the user s log in credentials provides a request to API to search provincial silo for the user and an associated password and compares to user provided credentials with the search results to determine if the user is authenticated to use application . Further when application seeks to access an external network log in service provides a request to API to query provincial silo to provide the user s log in credentials to the external network.

Further API operates to provide a biometric template repository for users of information handling system . Here biometric service prompts a user to provide a biometric signature to one or more of biometric sensors and and the biometric service compares the user provided biometric information with the valid biometric templates in provincial silo . Here biometric sensor scans the user s biometric information to provide a biometric template associated with the information to biometric module and biometric service compares the received biometric template from the user with the valid templates in provincial silo to determine if the user is a valid user. Where biometric service operates to receive the results of a comparison between user provided biometric information and a valid biometric template from a biometric sensor API operates to determine a pointer to the valid biometric template .

Provincial silo operates as a container for securely holding the authentication objects that are passed between application authentication module biometric modules and and other elements of information handling system such as an external network or the like. As such API includes encryption utilities to securely store provincial silo on a system memory of information handling system . For example provincial silo can reside on an encrypted storage device or can represent an encrypted file stored in a non encrypted storage device. As such provincial silo can be stored in a NVRAM or system memory of information handling system on a disk drive or solid state drive of the information handling system on a network storage device or another storage device as needed or desired. Provincial silo also stores authentication objects for multiple applications similar to application and for multiple users and provides policy objects for the multiple applications and users.

Provincial silo includes application identifier objects user identifier objects application policy objects user policy objects user application associations username objects password objects user biometric template objects and user biometric template pointer objects . Application identifier represents one or more objects associated with each application that utilizes provincial silo . User identifier represents one or more objects associate with each user that is authorized to access the applications identified by application identifier . Application identifier and user identifier are each associated with a unique identifier such as a Globally Unique IDentifer GUID . Application policy object represents an association between application identifier and the authentication activities that are utilized to authorize access to the application. For example a particular application may be associated with a user log in credential a finger print scan and a retinal scan while another application may be associated with only a user log in. Similarly user policy object represents an association between user identifier and the authentication activities that are utilized to authenticate the user. Here a particular user may be authenticated by only log in credentials while another user may be authenticated by log in credentials and a finger print scan.

User application associations represent an association between application identifier and user identifier . As such each user is associated with one or more applications that the user is authorized to access. Username object and password object represent associations between user identifier and a user name and password for the user. Username object and password object can be used within provincial silo as log in credential repository items to check the validity of a log in attempt by a user and after the user is successfully authenticated the username and password objects can be provided on behalf of the user to authenticate the user onto other services of information handling system such as to log onto an external network.

User biometric template object represents a biometric scan template associated with user identifier . As such when a user provides biometric information to biometric sensor provincial silo operates as the biometric template repository and the provided biometric information is compared with one or more user biometric template objects to authenticate the user. User biometric template pointer object represents a pointer to biometric template that is associated with user identifier . Thus when a user provides biometric information to biometric sensor user biometric template pointer operates to redirect the authentication of the user to the biometric sensor to find the biometric template. In this way authentication module can perform a common set of steps for biometric authentication regardless of whether the sensor provides the biometric template for comparison as is the case with biometric sensor or if the sensor performs the comparison as is the case with biometric sensor .

By providing data trees and provincial silo permits the secure portability of the credential information between information handling systems. Here because provincial silo is encrypted a file that includes the provincial silo can be managed as needed or desired. For example a new employee can create log in credentials and can provide biometric scans at the time of hiring and a provincial silo for the employee can be created that associates the employee with the applications needed by the employee. The provincial silo can be provided to the employee on for example a USB thumb drive. Then when the employee arrives at a designated information handling system the file associated with the provincial silo can be loaded onto the information handling system and the employee can log in and use the information handling system. Further when an employee no longer needs access to the information handling system the provincial silo can be managed such that all associations with the employee are deleted from the provincial silo. Also the employee can remove the provincial silo from the information handling system and transport it to a different information handling system thereby transferring the employee s authentication credentials to the new information handling system.

The functionality of provincial silo is enabled based upon the extensions of API that permit the creation deletion and manipulation of the data included in the provincial silo. illustrate flowcharts of exemplary embodiments of the functions that are available to be performed with a provincial silo similar to provincial silo . illustrates a method for an application to request a user GUID starting at block . An application determines that a new user is to be authorized to use the application in block and the application requests a user GUID in block and provides database information with the request. Database information includes the application name and the owner name. The method proceeds from the application to an API where the API returns a user GIUD in block and stores a request authorization and an application name in a silo in block .

If the user name is recognized the YES branch of decision block is taken and the API calculates an object authentication based on the owner name the owner GUID the index GUID and the user name in block . A decision is made as to whether or not the calculated object authentication matches the authentication for the object in decision block . If not the NO branch of decision block is taken and a decision is made as to whether or not the object that was matched in decision block is the last object in an object list associated with the user in decision block . If so the YES branch of decision block is taken and the API returns a request fail indication in block . If the object is not the last object the NO branch of decision block is taken the next object is selected in block and the method returns to decision block where a decision is made as to whether or not the calculated object authentication matches the authentication for the next object. Returning to decision block if the calculated object authentication matches the authentication for the object the YES branch is taken and the API returns the object size in block .

If the user name is recognized the YES branch of decision block is taken and a decision is made as to whether or not the user name matches a user data tree in decision block . If not the NO branch of decision block is taken and a decision is made as to whether or not the user data tree that was matched in decision block is the last user in an user list in decision block . If so the YES branch of decision block is taken and the API returns a request fail indication in block . If the user is not the last user the NO branch of decision block is taken the next user is selected in block and the method returns to decision block where a decision is made as to whether or not the user name matches the next user data tree. Returning to decision block if the user name matches a user data tree the YES branch is taken the API calculates the size and count of all objects in the user data tree in block and the API returns the size and count of all objects in the user data tree in block .

If the user name is recognized the YES branch of decision block is taken and the API calculates an object authentication based on the owner name the owner GUID the index GUID and the user name in block . A decision is made as to whether or not the calculated object authentication matches the authentication for the object in decision block . If not the NO branch of decision block is taken and a decision is made as to whether or not the object that was matched in decision block is the last object in an object list associated with the user in decision block . If so the YES branch of decision block is taken and the API returns a request fail indication in block . If the object is not the last object the NO branch of decision block is taken the next object is selected in block and the method returns to decision block where a decision is made as to whether or not the calculated object authentication matches the authentication for the next object. Returning to decision block if the calculated object authentication matches the authentication for the object the YES branch is taken and the API returns the object in block .

If the user name is recognized the YES branch of decision block is taken and the API calculates an object authentication based on the owner name the owner GUID the index GUID and the user name in block . A decision is made as to whether or not the calculated object authentication matches the authentication for the object in decision block . If not the NO branch of decision block is taken and a decision is made as to whether or not the object that was matched in decision block is the last object in an object list associated with the user in decision block . If so the YES branch of decision block is taken and the API returns a request fail indication in block . If the object is not the last object the NO branch of decision block is taken the next object is selected in block and the method returns to decision block where a decision is made as to whether or not the calculated object authentication matches the authentication for the next object. Returning to decision block if the calculated object authentication matches the authentication for the object the YES branch is taken and the API returns the object in block . The method proceeds from the API to the application where a decision is made as to whether or not the index GUID selected in block is the last index GUID in the index GUID list in decision block . If so the NO branch of decision block is taken and the application returns an indication that the request was successful in block . If the selected index GUID is the last index GUID in the index GUID list the NO branch of decision block is taken and the method returns to block where the next user GUID is selected.

If the user name is recognized the YES branch of decision block is taken and the API calculates an object authentication based on the owner name the owner GUID the index GUID and the user name in block . A decision is made as to whether or not the calculated object authentication matches the authentication for the object in decision block . If not the NO branch of decision block is taken and a decision is made as to whether or not the object that was matched in decision block is the last object in an object list associated with the user in decision block . If so the YES branch of decision block is taken and the API returns a request fail indication in block . If the object is not the last object the NO branch of decision block is taken the next object is selected in block and the method returns to decision block where a decision is made as to whether or not the calculated object authentication matches the authentication for the next object. Returning to decision block if the calculated object authentication matches the authentication for the object the YES branch is taken and the API deletes the object in block . The method proceeds from the API to the application where a decision is made as to whether or not the index GUID selected in block is the last index GUID in the index GUID list in decision block . If so the NO branch of decision block is taken and the application returns an indication that the request was successful in block . If the selected index GUID is the last index GUID in the index GUID list the NO branch of decision block is taken and the method returns to block where the next user GUID is selected.

A decision is made as to whether or not a first object in the object list is associated with the application in decision block . If not the NO branch of decision block is taken and the method proceeds to decision block as described below. If the first object is associated with the application the YES branch of decision block is taken the size of the object is added to the total size of the objects associated with the application in block a total object count is incremented in block and the method proceeds to decision block where a decision is made as to whether or not the object is the last object in the object list. If so the API returns the object count and the size of all of the objects in block . If the object is not the last object in the object list the NO branch of decision block is taken the next object from the list is selected in block and the method returns to decision block where a decision is made as to whether or not the next object is associated with the application.

Returning to decision block if the application name matches the provided application name the YES branch is taken and an object list is initialized in block . The object is copied to a storage device in block and an object count is incremented in block . A decision is made as to whether or not the object is the last object in the object list in decision block . If not the NO branch of decision block is taken a next object in the object list is selected in block and the method returns to block where the next object is copied to a storage device. If the object is the last object in the object list the YES branch of decision block is taken and the API returns the objects and the object count in block .

A decision is made as to whether or not a first object in the object list is associated with the user in decision block . If not the NO branch of decision block is taken and the method proceeds to decision block as described below. If the first object is associated with the user the YES branch of decision block is taken the size of the object is added to the total size of the objects associated with the user in block a total object count is incremented in block and the method proceeds to decision block where a decision is made as to whether or not the object is the last object in the object list. If so the API returns the object count and the size of all of the objects in block . If the object is not the last object in the object list the NO branch of decision block is taken the next object from the list is selected in block and the method returns to decision block where a decision is made as to whether or not the next object is associated with the user.

If the count of objects in the silo matches the provided object count the YES branch of decision block is taken and a decision is made as to whether or not a first object matches the object user in decision block . If not the NO branch of decision block is taken and the method proceeds to decision block as described below. If the first object matches the object user the YES branch of decision block is taken the object and the user name are copied to the storage device in block a total object count is incremented in block and the method proceeds to decision block where a decision is made as to whether or not the object is the last object in the object list. If so the API returns the object and the object count in block . If the object is not the last object in the object list the NO branch of decision block is taken the next object from the list is selected in block and the method returns to decision block where a decision is made as to whether or not the next object is associated with the user.

If the count of objects in the silo matches the provided object count the YES branch of decision block is taken a user list is initialized in block and a decision is made as to whether or not a first user name on the list matches the provided user name in decision block . If so the YES branch of decision block is taken and the method proceeds to block as described below. If the first user name does not match the provided user name the NO branch of decision block is taken and a decision is made as to whether or not the user name is the last user name on the list in decision block . If so the YES branch of decision block is taken and the API returns a request fail indication in block . If the user name is not the last user name on the list the NO branch of decision block is taken a next user is selected from the user list in block and the method returns to decision block where a decision is made as to whether or not the nest user name on the list matches the provided user name. Returning to decision block if the selected user name matches the provided user name the YES branch is taken a user object list is initialized in block and a first object on the object list is deleted in block . A decision is made as to whether or not the object is the last object on the list in decision block . If not the NO branch of decision block is taken a next object on the object list is selected in block and the method returns to block where the next object is deleted. If the object is the last object on the list the YES branch of decision block is taken and the API returns a request successful indication in block .

If the count of objects in the silo matches the provided object count the YES branch of decision block is taken a first object and the associated user name are copied to the storage device in block an object counter is incremented in block and a decision is made as to whether or not the object is the last object in the object list in decision block . If so the YES branch of decision block is taken and the API returns the objects and the object count in block . If the object is not the last object in the object list the NO branch of decision block is taken the next object from the list is selected in block and the method returns to block where the next object and the associated user name are copied to the storage device.

BIOS EFI module disk controller and I O interface are connected to chipset via an I O channel . An example of I O channel includes a Peripheral Component Interconnect PCI interface a PCI Extended PCI X interface a high speed PCI Express PCIe interface another industry standard or proprietary communication interface or a combination thereof. Chipset can also include one or more other I O interfaces including an Industry Standard Architecture ISA interface a Small Computer Serial Interface SCSI interface an Inter Integrated Circuit IC interface a System Packet Interface SPI a Universal Serial Bus USB another interface or a combination thereof. BIOS EFI module includes BIOS EFI code operable to detect resources within information handling system to provide drivers for the resources initialize the resources and access the resources. BIOS EFI module includes code that operates to detect resources within information handling system to provide drivers for the resources to initialize the resources and to access the resources.

Disk controller includes a disk interface that connects the disc controller to a hard disk drive HDD to an optical disk drive ODD and to disk emulator . An example of disk interface includes an Integrated Drive Electronics IDE interface an Advanced Technology Attachment ATA such as a parallel ATA PATA interface or a serial ATA SATA interface a SCSI interface a USB interface a proprietary interface or a combination thereof. Disk emulator permits a solid state drive to be coupled to information handling system via an external interface . An example of external interface includes a USB interface an IEEE 1394 Firewire interface a proprietary interface or a combination thereof. Alternatively solid state drive can be disposed within information handling system .

I O interface includes a peripheral interface that connects the I O interface to an add on resource and to network interface . Peripheral interface can be the same type of interface as I O channel or can be a different type of interface. As such I O interface extends the capacity of I O channel when peripheral interface and the I O channel are of the same type and the I O interface translates information from a format suitable to the I O channel to a format suitable to the peripheral channel when they are of a different type. Add on resource can include a data storage system an additional graphics interface a network interface card NIC a sound video processing card another add on resource or a combination thereof. Add on resource can be on a main circuit board on separate circuit board or add in card disposed within information handling system a device that is external to the information handling system or a combination thereof.

Network interface represents a NIC disposed within information handling system on a main circuit board of the information handling system integrated onto another component such as chipset in another suitable location or a combination thereof. Network interface device includes network channels and that provide interfaces to devices that are external to information handling system . In a particular embodiment network channels and are of a different type than peripheral channel and network interface translates information from a format suitable to the peripheral channel to a format suitable to external devices. An example of network channels and includes InfiniBand channels Fibre Channel channels Gigabit Ethernet channels proprietary channel architectures or a combination thereof. Network channels and can be coupled to external network resources not illustrated . The network resource can include another information handling system a data storage system another network a grid management system another suitable resource or a combination thereof.

Although only a few exemplary embodiments have been described in detail herein those skilled in the art will readily appreciate that many modifications are possible in the exemplary embodiments without materially departing from the novel teachings and advantages of the embodiments of the present disclosure. Accordingly all such modifications are intended to be included within the scope of the embodiments of the present disclosure as defined in the following claims. In the claims means plus function clauses are intended to cover the structures described herein as performing the recited function and not only structural equivalents but also equivalent structures.

The above disclosed subject matter is to be considered illustrative and not restrictive and the appended claims are intended to cover any and all such modifications enhancements and other embodiments that fall within the scope of the present invention. Thus to the maximum extent allowed by law the scope of the present invention is to be determined by the broadest permissible interpretation of the following claims and their equivalents and shall not be restricted or limited by the foregoing detailed description.

