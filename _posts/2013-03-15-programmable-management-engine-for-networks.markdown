---

title: Programmable management engine for networks
abstract: A network node may contain a virtual software-defined networking (SDN) switch and a local a management engine (e.g., a software application) for generating performance metrics based on received management plane traffic. Specifically, the virtual SDN switch may identify and forward received management plane traffic to the local management engine. In turn, the management engine evaluates the management plane traffic to generate performance metrics without forwarding the management plane packets to the remote SDN controller. The management engine may compare the metrics to one or more thresholds to determine the current state or health of the data paths in a network. If a threshold is exceeded, the management engine may transmit an alert to the virtual SDN switch to perform a corrective actionâ€”e.g., using a backup data path after the primary data path fails.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09356871&OS=09356871&RS=09356871
owner: Cisco Technology, Inc.
number: 09356871
owner_city: San Jose
owner_country: US
publication_date: 20130315
---
Embodiments presented in this disclosure generally relate to handling management plane traffic in a software defined networking element and more specifically to using a local management engine or controller for handling management plane traffic.

Software defined networking SDN is an approach to networking in which control is decoupled from hardware and given to a software application referred to herein as a SDN controller. Conventionally when a packet arrives at a network device in a typical network the control plane which is based on the switch s proprietary firmware tells the device where to forward the packet. In some network devices the control plane may be configured to recognize different types of packets and treat them differently such as forwarding the packets to different network devices or dropping the packets if certain criteria are met.

In a SDN enabled network a network administrator can change how the network devices route data packets using a software application without having to for example send a technician to the individual network devices. The administrator can remotely reconfigure the rules in the control plane of the network devices e.g. prioritizing de prioritizing or even blocking specific types of packets using the SDN controller. A SDN enabled network may allow the administrator to manage traffic loads in a flexible and more efficient manner relative to conventional network devices that use control planes based on firmware.

Moreover SDN allows a network administrator to configure a switching fabric across multi vendor hardware and different proprietary firmware. One standard that permits a network administrator to remotely configure and control the control plane of network devices is the OpenFlow standard OpenFlow is a trademark of the Open Networking Foundation . Generally OpenFlow lets network administrators control routing tables for a plurality of network devices using a single SDN controller.

To facilitate understanding identical reference numerals have been used where possible to designate identical elements that are common to the figures. It is contemplated that elements disclosed in one embodiment may be beneficially utilized on other embodiments without specific recitation.

Embodiments of the present disclosure include a method and a computer program product that receives management plane traffic at a software defined networking SDN switch on a network node in a computer network. The method and computer program product forwards the management plane traffic from the SDN switch to a management engine executing in the network node and generates at the management engine one or more performance metrics associated with the computer network based on the management plane traffic. The method and computer program product receives at the SDN switch a management plane packet from the management engine. The method and computer program product forwards the management plane packet to a neighboring node in the computer network.

Another embodiment of the present disclosure is a physical network node including a management engine configured to generate one or more performance metrics associated with a computer network. The network node also includes an SDN switch configured to receive management plane traffic from a first neighboring node in the computer network and forward the management plane traffic to the management engine. Furthermore the SDN switch is configured to receive a management plane packet from the management engine and forward the management plane packet to a second neighboring node in the SDN enabled environment.

Other embodiments include without limitation a computer readable medium that includes instructions that enable a processing unit to implement one or more aspects of the disclosed methods as well as a system having a processor memory and application programs configured to implement one or more aspects of the disclosed methods.

Software defined networking SDN in general provides additional flexibility and solidarity relative to conventional networks. Using an SDN controller which may be either centrally located or located on the respective network devices a network administrator can configure the control plane and dictate how the network devices route data. For example the network administrator may assign criteria or SDN rules that when satisfied instruct the network device to perform a specific action on the received packet e.g. drop the packet forward the packet to a particular network device evaluate the packet using an application on the network device and the like. In one embodiment the SDN controller configures the routing table or forwarding table i.e. forwarding information base in a network device based on the network administrator s preferences.

After receiving a packet on an ingress port a network device in the SDN enabled network may evaluate the packet to determine what action to take. The network devices may rely on the different headers of the packet e.g. source and destination addresses security group tag MAC layer priority value VLAN ID etc. to determine the action. Alternatively or additionally the network device may perform a deep packet inspection to determine what action is appropriate. By matching the packets to a packet field in a SDN rule the network device is able to identify an action to take regarding the packet.

Management plane traffic however introduces complexity into a SDN enabled network. For example if the system administrator wishes to abstract the management plane so it like the control plane can be managed by a software application the network devices may transmit the management plane traffic e.g. operation administration management packets quality of service QoS packets other analytics packets to the SDN controller or other software application which evaluates the packets and determines the appropriate action. However the SDN controller is typically remotely located from the network devices. If a management plane packet indicates for example that a link between two network devices has failed the network device forwards the packet to the SDN controller which evaluates the packet and sends back an instruction such as re routing traffic on a redundant network link. The time required to transmit the management plane traffic to the SDN controller process the appropriate result and receive the result may take up to several seconds. During this time the network device may have had to drop packets or stall the data flows.

Instead the network device may include a management engine e.g. a software application executing at the network device. A virtual SDN switch in the network device may forward management plane traffic to the local management engine which evaluates and determines the appropriate result without forwarding the management plane packets to a remote controller. In addition the network device may be modified by adding a processor for executing the management engine. Non SDN enabled network devices include application specific integrated circuits ASICs that perform the function of the management engine. However these ASICs are costly and are customized according to the hardware used by each vendor. In contrast the management engine may be loaded onto any typical network device and may be executed using a generic off the shelf processor. Doing so enables the management plane in addition to the control plane to be abstracted and thus controlled by a software application e.g. the SDN controller.

In one embodiment the network administrator may use the SDN controller to program or configure the management engine as desired. Once configured the management engine is delegated the task of evaluating the management plane traffic which avoids having to transmit these packets to the SDN controller. If the network administrator wishes to reconfigure the management engines she can use the SDN controller to simply push out updates to the management engines executing on the network devices. In a non SDN environment reconfiguring how a network device handles management plane traffic requires accessing each network device individually and using command line interface CLI instructions specific to the particular device and vendor.

In one embodiment the management engine may be an operations administration and management OAM engine or application executing on the network device. Specifically the network device may host a virtual SDN switch which receives ingress packets and determines based on SDN rules how to handle the packets e.g. forwards the packets to another network device alters the packets discards the packets etc. The virtual SDN switch may also include logic for identifying OAM packets that are part of the management plane. The virtual SDN switch forwards the OAM packets to the local OAM engine or controller. The OAM engine may perform typical OAM actions such as determining a state or health of the different physical links or virtual paths between network devices and circuit end points. The result of the OAM processing may then be transmitted to the virtual switch which may act on the results e.g. using a redundant link if a particular link fails. Additionally the OAM engine may generate additional OAM packets that the virtual SDN switch may then transmit to OAM engines on other network devices.

In one embodiment the OAM engine is a software application that uses a generic off the shelf processor for execution. For example the network administrator may add the generic processor which may be contained within a blade or an expansion card to the network device. The OAM engine may then be loaded into the memory of the network device and use the generic processor to execute.

In one embodiment the network devices within the SDN enabled network may be different devices manufactured by different vendors. As such the control planes of the network devices may be controlled by proprietary firmware that is specific to each device . To abstract the control plane such that the SDN controller can establish and monitor the virtual SDN switch network devices include one or more application programming interfaces APIs . The APIs may serve as a communication layer between the virtual SDN switch a software driven application and the underlying hardware firmware of the network device . Because the APIs can be customized to interface with the proprietary firmware or hardware of the network device the same SDN switch may be executed on all the network devices irrespective of the product s vendor. In this manner SDN switch may use APIs to gather data associated with the different functions of the network device such as statistics associated with the network device routing tables status of the device topology information errors and the like. Moreover APIs may also permit a programmer or network administrator to control the functions of the network device such as change settings in the forwarding engine change the state of the device etc. Stated generally APIs may permit SDN switch to control the underlying hardware elements of the network device . In this manner the SDN controller can establish the same virtual SDN switch on a plurality of network devices and update the SDN switches without considering the underlying firmware hardware of the devices . One such product that permits the abstraction of the control plane using APIs is the One Platform software development kit SDK by Cisco a registered trademark in the United Stated many other jurisdictions .

In one embodiment the APIs may also be used to abstract the management plane. That is the APIs decouple the management plane from exclusive control by ASIC and its accompanying firmware. The management plane of each network device may be grouped and considered as a network wide management plane that can be controlled by a management service. As shown here network device includes a management engine which in one embodiment is a software application loaded into memory . If desired the network administrator may load the management engine into each network device in a SDN enabled network. The network administrator may use SDN controller to program and configure each management engine . In this manner the management engines form an abstraction layer such that the network administrator can treat the individual management planes of the network devices as a single shared management plane.

Instead of the directly controlling or configuring the management engine with the SDN controller other mechanism in a SDN environment may program and configure management engine . For example an operating system executing on the network device may be tasked with programming the local maintenance engine . For example SDN controller may transmit a request to network device to begin executing the management engine . Nonetheless the operating system or some other mechanism or application may directly program and initiate the management engine in response to the request.

Moreover network device includes processor . In one embodiment processor may be a supplemental processor that is added to the network device after being manufactured. For example the processor may be contained within an expansion card or blade that is coupled to the network device . Generally processor may be any processor capable of executing the functions of the management engine . In one embodiment the processor may be a generic CPU that unlike ASIC is not designed to perform a specific function such as data routing but is designed to process instructions from any type of application based on a standardized instruction set architecture ISA e.g. x86 or PowerPC a registered trademark of International Business Machines in the United States and other countries .

By adding processor to network device the device can be upgraded to permit the management engine to be hosted on the network device . For example in some embodiments ASIC may be unable to execute the management engine . In this scenario the network administrator may add processor to the network device to enable the management engine to execute on the device . Accordingly a typical Ethernet network device may be upgraded to support a local software management engine without having to re design the ASIC . Further still in some embodiments the network administrator may add additional memory to the network device to provide adequate storage for the management engine .

SDN switch may have one or more tables that store the SDN rules provided by SDN controller . Generally these rules configure the control plane and how the network device routes data. For example the rules may prioritize de prioritize or even block specific types of packets and determine the next hop if any for the packets. That is SDN switch contains the control plane logic which governs how packets flow from the ingress paths to the egress paths .

In one embodiment SDN switch contains logic for identifying management plane traffic. Specifically when defining the rules for the control plane the SDN controller may configure SDN switch to identify management plane packets and forwards these packets to management engine as shown by arrow . Generally the management plane carries the operations and administration traffic required for network management. This may include OAM packets QoS packets and the like. The management engine may use the packets to determine the current state of the network based on certain metrics gathered by evaluating the management plane traffic such as throughput number of dropped packets errors latency jitter out of order delivery and the like. Based on these metrics the management engine may update the control plane i.e. the rules contained in the virtual SDN switch . For example if data path C fails the management engine may instruct SDN switch to use a backup data path. In another embodiment instead of transmitting instructions to SDN switch management engine may report the failure to SDN switch which then determines how to handle the failure e.g. whether to drop the packets associated with a non functioning data path or re route the packets using a backup data path.

As shown by arrow management engine may also send to SDN switch additional management plane traffic to be transmitted on egress data paths to neighboring management engines . That is in addition to receiving the management plane packets the management engine may transmit management plant packets or forward the already received packets to other neighboring engines . SDN switch receives the management plane packets from management engine and forwards these packets along with the data plane and control plane traffic on the egress data paths . The neighboring management engines may use the received packets to develop similar metrics about the state of the network.

Executing a local copy of the management engine on a network device avoids transmitting the management plane traffic to a remote SDN controller. For example if the management engine is located on the SDN controller then the SDN switch must forward the received management plane traffic to the SDN controller which determines the current state of the network. If the management engine on the SDN controller determines that SDN switch should use a backup data path because the primary data path is dropping too many packets the SDN switch must wait until this instruction is received from SDN controller . Meanwhile additional packets may have been dropped and service may be disrupted.

In one embodiment SDN switch may continue to forward some management plane traffic to SDN controller while other management plane traffic is forwarded to the local management engine . For example some of the OAM or QoS packets may not be time sensitive. These packets may be transmitted to the SDN controller for processing by management engine located there while time sensitive management plane traffic is forwarded to management engine .

At block the SDN switch transmits the management plane traffic to a management engine located on the network device. For example the management engine may be software application that like the SDN switch is configurable by a remote SDN controller. The network device may use for example a plurality of APIs to abstract the control and management planes of the network devices so that a single SDN controller can monitor and configure these planes on various network devices that are manufactured by different vendors and use different firmware or hardware designs.

At block the management engine evaluates the management plane packets using a processor on the network device. In some embodiments the network device may not have a processor capable of executing the management engine e.g. a software application . Nonetheless a supplemental processor may be added to the network device which is capable of executing the management engine. To minimize costs the processor may be a generic processor configurable to execute instructions based on an ISA.

The management engine may compute different metrics based on the management plane traffic. These metrics may be related to OAM QoS and the like. The management engine may issue different alerts based on these metrics. Specifically the SDN controller may provide thresholds that the management engine compares to the different metrics. If for example the number of management packets being dropped exceeds a corresponding threshold the management engine may issue an alert to the SDN switch. In response the SDN switch may alter the SDN rules the switch uses to forward the data plane traffic i.e. the SDN switch may alter the control plane logic used to route the data plane traffic.

At block the management engine may generate and transmit management plane packets to the SDN switch which in turn forwards these packets to neighboring network nodes e.g. connected network devices via virtual and physical links. For example the management engine may return received management plane packets to the SDN switch to be forwarded back to an originating management engine as in the case of echo mode management traffic. The SDN switches on those neighboring nodes may identify the management plane packets and send them to their own local management engines. These engines may also be configurable using the SDN controller.

If for example the management engine is an OAM engine the engine may at intervals transmit time stamped packets or transmit packets with a defined ordering so that a neighboring OAM engine can use the data in the packets to determine the current status of the link connecting the two network nodes. In this manner the management plane traffic in a SDN network environment can be handled by the local management engines hosted on the network nodes without having to transmit the packets to a remote controller for evaluation. Nonetheless the SDN controller may be used to configure the shared management plane by programming the management engines e.g. pushing out updates to the different management engines altering the thresholds used by individual management engines for evaluating the derived metrics and the like.

The OAM engine may monitor the current state of the LSPs and PWs in the SDN enable network. To do so the various MPLS TP nodes may transmit OAM packets i.e. management plane packets between the nodes . Each node may include a local OAM engine which evaluates the OAM packets to determine metrics associated with the LSPs and PWs. For example a customer may desire that the PW have a certain reliability i.e. a maximum amount of dropped packets in a particular network hop . The SDN controller may instruct the OAM engines to determine whether the number of dropped packets in a particular PW exceeds this threshold. If so the OAM engine may issue an alert to the virtual SDN switch . In other embodiments OAM engine may issue alerts based on metrics associated with throughput errors latency jitter out of order delivery and the like.

SDN switch includes a flow table and a group table . The SDN controller may populate the flow table with one or more SDN rules. As packets are received along data paths A C which represent either PWs or LSPs the SDN rules in the flow table determine what corresponding action to take with the packets. For example the packets may be dropped prioritized sent to another application for processing altered forwarded and the like. In one embodiment virtual SDN switch may be compatible with the OpenFlow standard an open source control plane abstraction protocol .

In one embodiment each SDN rule defines a set of packet fields to match and a corresponding action such as send out port modify field drop the packet etc. . As a new packet is received SDN switch compares the packet to the packet fields in the SDN rules to determine if there is a match e.g. the SDN switch performs a flow match operation . If so SDN switch performs the action corresponding to the matched rule. If however a received packet does not match one of the packet fields SDN switch may send the packet to the SDN controller . The controller may decide to drop the packet or send a new SDN rule entry to the flow table for handling the packet as well as other subsequent packets that match the packet field .

If the flow table determines to forward the packet to a neighboring node SDN switch passes the packet to group table which determines the appropriate data path A C to use when forwarding the packet. Specifically the group table may assign a virtual port to use when forwarding the packet.

Flow table may also include a SDN rule for identifying OAM packets based on a specific packet field and passing the identified OAM packets to the local OAM engine for evaluation. As described above the OAM engine may generate metrics concerning the current state of a LSP or PW based on the OAM packets compare the metrics to one or more thresholds and issue an alert or instruct the SDN switch to perform a corrective action if the metric exceeds the threshold. Additionally the OAM engine may generate new OAM packets or forward received packets that SDN switch then transmits to neighboring nodes using data paths A C.

If the OAM engine issues an alert to the SDN switch the group table may be tasked with determining the appropriate action. For example if the OAM engine reports that a LSP has been severed the group table may move traffic from a virtual port associated with the severed transport LSP to a virtual port associated with a backup transport LSP. In this manner OAM management plane traffic may be evaluated and corrective actions may be performed without having to transmit any data to the SDN controller.

However in other embodiments some management plane traffic may flow between the MPLS TP node and the SDN controller . For example for corrective actions that are not time critical the SDN switch may forward alerts to the SDN controller which may determine what action to perform e.g. the SDN switch may provide a new SDN rule to the flow table or reconfigure the group table to route traffic using a different virtual port. Moreover the OAM engine may have varying complexity. That is to reduce cost by being able to use a low cost processor for executing the OAM engine the engine may generate the metrics and compare these metrics to predefined threshold but may not determine the corrective action. Instead the SDN switch may determine the corrective action to take. However in other embodiments the OAM engine may have the necessary logic for determining what action to take. For example instead of transmitting an alert to the SDN switch the OAM engine may reconfigure the group table directly.

Although illustrates placing an OAM engine on a MPLS TP node executing a virtual SDN switch the embodiments are not limited to such. In other embodiments the engine may be a QoS engine or some combination of QoS and OAM.

As will be appreciated by one skilled in the art embodiments may be embodied as a system method or computer program product. Accordingly aspects may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

Instead of transmitting management plane traffic to an SDN controller the network device may be configured to include a management engine e.g. a software application executing at the network device. A virtual SDN switch on the network device may identify and forward management plane traffic to the local management engine. In turn the management engine generates performance metrics without forwarding the management plane packets to the remote SDN controller. In addition the network device may be modified by adding a processor for executing the management engine. Non SDN enabled network devices include application specific integrated circuits ASICs that perform the function of the management engine. However these ASICs are costly and are customized according to the hardware used by each vendor. In contrast the management engine may be loaded onto any typical network device and may be executed using a generic off the shelf processor. Doings so enables the management plane in addition to the control plane to be abstracted and thus managed by the SDN controller.

In one embodiment the network administrator may use the SDN controller to program or configure the management engine as desired. Once configured the management engine is delegated the task of evaluating the management plane traffic which avoids having to transmit these packets to the SDN controller. If the network administrator wishes to reconfigure the management engines she can use the SDN controller to simply push out updates to the management engines executing on the network devices. In a non SDN environment reconfiguring how a network device handles management plane traffic requires accessing each network device individually and using CLI instructions specific to the particular device and vendor.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

In view of the foregoing the scope of the present disclosure is determined by the claims that follow.

