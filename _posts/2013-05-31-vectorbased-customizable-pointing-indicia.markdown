---

title: Vector-based customizable pointing indicia
abstract: A method of rendering customized pointing indicia including the steps of monitoring application program interface messaging and intercepting a call for a unique system pointer identifier. A stored collection of predefined vector shapes is accessed, from which a predefined vector shape is selected correlated to the current system pointer identifier. The stroke and fill attributes are set for the vector shapes. A sequence of rasterized frames of vector shapes having different attributes are created and displayed to produce animated pointing indicia effect. The customized vector shape is rasterized and displayed to an end user operating a computer. Customization, animation, and magnification of pointing indicia are performed responsive to user input, which may be a touchscreen event, body movement, hand gesture, mouse event, or a key stroke.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09190018&OS=09190018&RS=09190018
owner: Freedom Scientific, Inc.
number: 09190018
owner_city: St. Petersburg
owner_country: US
publication_date: 20130531
---
This application is a continuation in part of U.S. patent application Ser. No. 12 828 765 entitled VECTOR BASED MAGNIFIED POINTER filed Jul. 1 2010 and claiming a priority date of Jul. 2 2009 which is herein incorporated by reference.

This invention relates to customization of computer display interfaces and more specifically to customization of pointing indicia therein.

Low vision individuals often require customization of computer screen interfaces to discern text and images. Customization systems may be built into the operating system itself or may comprise feature rich third party products such as those sold under the MAGIC brand manufactured by Freedom Scientific Inc. based in St. Petersburg Fla.

A deficiency in the current state of the art is that of scaling pointing indicia such as a cursor or caret from small to large dimensions. For example all mouse pointers have a discrete minimum and a common maximum size. The minimum size is a multiple of the system metrics for the mouse pointer. Generally this metric is a 32 32 pixel square under operating systems sold by Microsoft Corporation out of Redmond Wash. under the brands WINDOWS 7 VISTA and XP. However it is common for a mouse pointer to only occupy a 16 16 square top left justified within this metric.

When the screen is magnified to a high level such as 16 fold the mouse pointer becomes pixelated and distracting to the user. Various smoothing techniques may be applied to reduce pixelation but such processes consume CPU cycles and still lead to imperfect results. A serious problem with presenting a jugged and pixelated pointing indicia to a low vision user is that such flaws may undermine the confidence of a low vision user in her ability to see clearly the user may be in doubt on whether the flaws are introduced through magnification of the pointing indicia are whether the poor vision of the user is the cause of the perceived imperfections.

Yet another deficiency is limited customization of pointing indicia. Some low vision users have difficulty distinguishing certain colors making it burdensome or even impossible to identify and observe the movement of the pointing indicium as it navigates a computer screen. Accordingly what is needed is a vector based pointing indicium whose outlining border and body may be independently colorized to enable the low vision users to better distinguish the pointing indicium from the background content of the screen.

Finally although animation of pointing indicia is well known in the art animation of a pixelated cursor especially at higher magnification levels suffers from the same flaws as described above. Therefore there exists a need for a method of animating a vector based pointing indicia.

The ability to smoothly scale animate or customize a mouse pointer or other graphical element is greatly enhanced by using vector based images to create the initial cached rasterized images that are ultimately used for final rendering drawing to the screen . The reason for this is that the shapes and elements of the vector based images are described by a formula rather than by a bitmap. Currently all mouse pointers are described by bitmaps. Bitmaps inherently become blocky and stair stepped when magnified. Although there are post scaling treatments that can be applied to artificially smooth a scaled bitmap they are incapable of producing images that are as crisp and sharply edged as images produced from a scaled vector image.

An embodiment of the present invention provides a method of rendering a customized i.e. colorized pointing indicia. The method includes the steps of monitoring application program interface messaging intercepting a call for a current system pointer identifier such as its handle accessing a stored collection of predefined vector shapes and selecting a predefined vector shape correlated to the system pointer identifier from the collection of vector shapes. Predetermined stroke attributes are set for the selected vector shape which is then rasterized and displayed as the pointing indicium. Some stroke attributes include color opacity width line cap line join and dashing.

In an embodiment of the invention the desktop color under the hotspot for the pointing indicia is retrieved and the stroke is automatically modified to provide contrast of the boundary between the outer portion of the pointing indicia and the background. For example a pure white background in RGB values would be 255 255 255. If the stroke color for a cursor was initially set by the user as white then the stroke would visually disappear when the pointing indicia was moved over a white background. For illustrative purposes the background RGB and stroke RGB values are monitored in real time. If the sum of the positive integer differences between each RGB value was less than a threshold value then the current software would automatically modify the stroke color to provide contrast. For example if the threshold was set to an aggregate 150 then a background RGB value of 205 205 205 light gray would trigger an automatic change in the stroke color. By the same function RGB values of 105 255 255 teal and 245 245 125 yellow would also trigger an automatic change because they do not sufficiently contrast from a white background. When the threshold is detected the next step is to automatically change the stroke value. This can be done by any function that will distinctly change the RGB values. RGB values range from 0 to 255. Therefore in our first example of 205 205 205 light gray we can assign a simple function to subtract 75 if the value is above 127 or add 75 if the value is below 127. Thus 205 205 205 becomes 130 130 130 which is a dark gray and would contrast well on a white background. The 105 255 255 teal color stroke would automatically change to 180 130 130 which is brown contrasting well over white .

An advantage of this feature is that the main body of the pointing indicia remains constant while the stroke value is variable so it doesn t blend into the background. Thus the fill does not change colors responsive to the desktop background which could be visually distracting but the end user maintains a clear understanding of the boundaries of the pointing indicia by modification of only the stroke color. Another embodiment of the invention provides for customization of the pointing indicia by setting predetermined fill attributes for the vector shape prior to rasterizing thus customizing the appearance of the body of the pointing indicia. Fill attributes include color and opacity.

In an embodiment after the step of selecting a predefined vector shape corresponding to the current system pointer identifier a set of rasterized frames is created based on the selected vector shape. Each rasterized frame has differing attributes such as stroke and fill attributes and magnification level. The frames are displayed sequentially for a predetermined duration to render an animated pointing indicium.

In some embodiments of the invention customization animation and magnification of the pointing indicia are performed responsive to user input. The user input may be of various types including the following a key stroke a mouse wheel event a mouse movement various types of touchscreen input user s hand gestures body movement facial expressions voice commands etc. To have a capability of detecting such user inputs the electronic device on whose screen the pointing indicium is being magnified may need to be equipped with a touchscreen a keyboard a mouse a structured light scanner and or a microphone.

Instead of or in addition to passively intercepting a call for a current system pointer identifier the operating system may be actively polled as to its current settings and the current system pointer identifier may be resolved.

To facilitate efficiency and responsiveness previously rasterized shapes having customized stroke and fill attributes and magnification levels may be stored and recalled via a cache without having to customize scale and rasterize the shapes again. Storage of shapes is typically performed on available storage devices which may include but are not limited to magnetic hard drives solid state drives and or RAM.

The invention may be embodied in one or more non transitory computer readable media having computer executable instructions for performing a method of running a software program on a computer. The instructions stored on the non transitory computer readable media may be executed as an application distinct from an operating system upon which it runs and interacts at a display driver level to modify screen output. Alternatively the non transitory computer readable media may include an operating system or update thereto to achieve the novel functionality of the present invention.

Turning now to low vision user manipulates views on monitor via mouse and keyboard . Pointing indicium is shown as an arrow cursor for exemplary purposes but could also be a caret. A cursor is the graphical image that represents the mouse and its movements on a Cartesian coordinate plane. It can take many shapes including but not limited to an arrow for pointing a hand an hourglass or an I shaped text selector. The caret on the other hand is the blinking indicia that is used to enter text. When low vision user types on keyboard the letter appears as a caret and the caret moves forward by 1 space. To view the relative magnification levels display text and display graphic are provided in .

In the magnification of the pointing indicia is de coupled from the magnification of the GUI. GUI is magnified to 16 fold while pointing indicia is magnified to only 4 fold. Low vision user may de couple magnification between pointing indicia and GUI using keyboard mouse or a combination thereof. Other peripherals and input systems such as voice recognition systems may be used to effectuate the event. The de coupling may also be automatically and intelligently achieved by the invention. For example a predetermined threshold of mouse inactivity may be detected to incrementally increase or decrease as desired pointing indicia magnification.

Mouse inactivity with extrinsic data may be used to make intelligent magnification decisions. For example if a large amount of text is detected on the GUI in conjunction with mouse inactivity a presumption may be made that the user is reading the text. In such case a highly magnified cursor would only obscure text viewing. Alternatively mouse movement immediately after a period of mouse inactivity may invoke a rapid stepped magnification of the pointing indicia so that it can be easily located by low vision user as he resumes use of pointing indicia . The stepped magnification may be used to provide an animated effect. In other cases a plurality of incrementally modified vector shapes may provide other animation effects such a movement rotation waveforms and the like. As the shapes are vector based sized up to the magnification level rasterized and cached the quality of the graphic and the efficiency of cycling the cached images provide a substantial advantage over the current state of the art.

Yet another embodiment of the invention includes the step of algorithmically detecting erratic movements of mouse by low vision user following a period of mouse inactivity which is indicative of difficulty in find the location of pointing indicia . Erratic movement may include but are not limited to rapid side to side movement and circular movement. Responsive to detection of erratic movements pointing indicia is magnified according to the invention for a predetermined time period then returned to its preselected magnification level. An advantage of this embodiment over the prior art is that erratic movement must follow a predetermined period of inactivity as mouse movement perceived as erratic may be intentional should the user be engaged in a software application that calls for such movement.

Turning to a pointer authoring application is anticipated by the present invention to enable users to create vector shapes and assign them to pointer sets or individual pointers. Pointer sets contain collections of different graphic images for pointer cursor that change depending on the circumstances in which they are displayed. When selecting text to edit a cursor may change to a vertical bar I beam . When panning around a document the cursor may appear as a hand. Graphic editing cursors may appear as pencils brushes and paint buckets depending on the function. When waiting for an operation to finish a wait image may appear such as an hourglass or clock. Other pointing options include selecting fill and line appearances for color patterns transparency and the like. Shapes may be assigned specific software applications. This may be accomplished by inspecting the operating system messaging to identify which application gains focus and applying the appropriate pointer set and or cursor modification as desired. Because the present method allows the rapid clean rendering of sharp and clear images at any dimension animating the pointer cursor is possible. A sequence of stylizations and or changes in dimension in the vector shape may be cached whereby the cursor may appear animated as the sequence is displayed. Mouse wheel scaling parameters and hot key combinations may be assigned to specific shapes and or sets. For example a user may hold down a keyboard combination while scrolling the mouse wheel in different directions to scale up or down the pointer cursor.

In an embodiment of the invention is shown as process . API messaging is monitored for pointer handle call . Cross check is made against vector shape database to match pointer handle call with a preexisting shape in vector shape database . Vector shape database contains one or more vector shapes stored in memory. Database may be a file directory a structured file such as XML a fully relational database or the like. Vector shape database associates pointer handle call with a correlated vector image. For example if pointer handle call requests a hand cursor image cross check determines whether a vector image exists for the hand cursor image. If not then a bit mapped image is scaled up and smoothed. However if a vector image does exist then it is scaled up to the appropriate magnification level and then rasterized into a bitmap. Vector shape is retrieved and scaling function is applied to produce magnified vector shape . Scaling is performed on a vector image by increasing or decreasing the length and width of the image. Because the scaling is done on a vector image there is no pixelation as would be seen in bit mapped scaling. Rasterizing process is applied to magnified vector shape to produce rasterized shape which is then displayed as the pointing indicia.

In an alternative method of obtaining the pointer shape includes the step of intercepting drvSetPointerShape value between operating system and display device driver . The drvSetPointerShape value is cross checked to see if there is a correlated vector shape that is indexed to drvSetPointerShape value . Using drvSetPointerShape value is most appropriate for the fifteen 15 predefined non obsolete cursor types available in the MICROSOFT WINDOWS application programming interface specification.

The method of animating a vector based pointing indicium is diagrammatically illustrated in . After pointing indicium vector shape is selected a set of rasterized frames with differing attributes of vector shape are created in step . Rasterized frames are then displayed sequentially in step rendering an animated pointing indicium.

Various embodiments of the invention described above may be performed responsive to a specific user input. diagrammatically illustrates an embodiment in which vector based pointing indicia are magnified responsive to a user input . User input may be received as a mouse event a key stroke a touchscreen event a gesture a voice command or a combination thereof.

According to an embodiment of the invention depicted in gestures are received via a structured light scanner . Structured light scanners such as MICROSOFT KINECT are known in the art and are used to identify a variety of gestures . illustrate magnification of vector based pointing indicium responsive to gesture command . When user raises an arm structured light scanner identifies gesture . Responsive to gesture vector based pointing indicium is magnified according to the process diagrammatically depicted in . In the embodiment shown in pointing indicium is magnified independently of display text and display graphic . In alternative embodiments magnification of pointing indicia may be coupled with magnification of display text and or display graphic .

The present invention may be embodied on various computing platforms that perform actions responsive to software based instructions. The following provides an antecedent basis for the information technology that may be utilized to enable the invention.

The computer readable medium described in the claims below may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wire line optical fiber cable radio frequency etc. or any suitable combination of the foregoing. Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java C C or the like and conventional procedural programming languages such as the C programming language or similar programming languages.

Aspects of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

The advantages set forth above and those made apparent from the foregoing description are efficiently attained. Since certain changes may be made in the above construction without departing from the scope of the invention it is intended that all matters contained in the foregoing description or shown in the accompanying drawings shall be interpreted as illustrative and not in a limiting sense.

Caching storing data in electronic storage devices which may include but are not limited to magnetic hard drives solid state drives and or RAM.

Desktop Background the graphic user interface canvas underneath the pointing indicia. This may include commonly referenced wall paper such as static images but also is used in the context to include anything underneath the pointing indicia include software application windows dialog boxes media display windows and the like.

Multi touch type of touchscreen event involving the user making contact with the surface of the screen at two or more points.

Pinch type of touchscreen event involving the user making a two point contact with the surface of the screen and changing the distance between the points of contact while maintaining the contact

Pointing indicia a caret or cursor visual element that moves about the graphic user interface typically in response to a peripheral device such as a mouse track pad touchscreen or the like

Rasterizing a process of converting a vector shape into a pixel image that can be displayed on a video screen

RGB an additive color model in which red green and blue light are added together in various ways to reproduce a broad array of colors. In the context of the present invention a digital 8 bit per channel triplet array is used as an exemplary embodiment.

Structured light scanner a device for measuring the three dimensional shape of an object using projected light patterns and a camera system the device being capable to detect body movements and gestures.

System pointer identifier an identifier such as a handle that lets the system determine which pointing indicium is being displayed at a current point in time

Touch drag type of touchscreen event involving the user making a contact with the surface of the screen and maintaining the contact while sliding the contacting member along the screen surface

Touch flick type of touchscreen event involving the user making a contact with the surface of the screen and then quickly sliding the contacting member along the screen surface and discontinuing the contact

Touch gesture pattern type of touchscreen event involving the user making a contact with the surface of the screen and then sliding the contacting member in a predetermined pattern while maintaining the contact

Touch hold type of touchscreen event involving the user making and maintaining a continuous contact with the surface of the screen for a predetermined period of time.

Touch tap type of touchscreen event involving the user making brief contact with the surface of the screen and immediately discontinuing the contact

Touchscreen a display device that allows a user to interact with a computing device by making contact with the surface of the screen.

User Input is end user feedback whether intentional as in a command or unintentional received by a computing device running the computer software application controlling the appearance of the pointing indicium.

