---

title: Anti-malware system, method of processing packet in the same, and computing device
abstract: An anti-malware (AM) apparatus includes: a hardware-based firewall (FW) engine, including a packet matching engine configured to perform matching of a packet with a plurality of FW rules, and to generate a matching results; and an FW function module configured to determine an action for filtering the packet on the basis of the matching result.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09306908&OS=09306908&RS=09306908
owner: SAMSUNG SDS CO., LTD.
number: 09306908
owner_city: Seoul
owner_country: KR
publication_date: 20131119
---
This application claims priority to and the benefit of U.S. Provisional Patent Application No. 61 727 917 filed on Nov. 19 2012 the disclosure of which is incorporated herein by reference in its entirety.

The present disclosure relates to a system for use in providing a security solution and more particularly to a system including a hardware based firewall FW engine and to a method of processing packets in such a system.

With the spread of the Internet the number of pieces of malware or malicious codes for example a computer virus a worm a Trojan horse a spyware program a rootkit a distributed denial of service DDoS attack etc. designed to perform a malicious action against a user s intention is drastically increasing and accordingly there is a growing need for an anti malware AM solution for effective security of a computer system.

In addition with the widespread use of mobile devices such as a smartphone a tablet etc. it is deeply concerned that malware having attacked personal computers PCs would also have severe harmful effects on the mobile devices. Thus an effective AM solution is required for the mobile devices as well.

An AM solution may include an FW solution for a personal FW. However when the number of FW rules for packets increases in the personal FW the time required for processing the packets increases. It is a crucial disadvantage for an FW solution to have a long response time to a packet transmitted in a network. Also in case of mobile devices having relatively many limitations on resources such as a central processing unit CPU and a battery the longer the time for packet processing is taken the faster the battery will deplete.

One or more exemplary embodiments may overcome the above disadvantages and other disadvantages not described above. However it is understood that one or more exemplary embodiments are not required to overcome the disadvantages described above and may not overcome any of the problems described above.

The present disclosure is directed to performing certain operations for providing a FW function at a high speed using a hardware based FW engine and to implementing other FW operations on a software level of a platform including the FW engine so that various security solutions can be provided.

Further the present disclosure is directed to providing improved FW performance with a computing device having limited resources.

According to an exemplary embodiment there is provided an anti malware AM apparatus including a hardware based firewall FW engine including a packet matching engine configured to perform matching of a packet with a plurality of FW rules and to generate a matching result and an FW function module configured to determine an action for filtering the packet on the basis of the matching result.

According to an aspect of the AM apparatus the packet matching engine includes a plurality of rule keys derived from the plurality of FW rules a packet key converted from the packet and one or more packet matchers configured to compare the packet key with the plurality of rule keys.

According to an aspect of the AM apparatus each of said one or more packet matchers includes a plurality of packet sub matchers configured to operate in parallel and further configured to compare a subset of the plurality of rule keys with the packet key.

According to an aspect of the AM apparatus the hardware based FW engine further includes a packet stream capture unit and the packet stream capture unit is configured to extract data related to the plurality of FW rules from the packet and to provide the extracted data to the packet matching engine.

According to an aspect of the AM apparatus the packet stream capture unit is further configured to extract the data from the packet so as to include data specific to at least one of a link layer protocol a network layer protocol and a transmission layer protocol.

According to an aspect of the AM apparatus the plurality of FW rules further include a uniform resource locator URL filtering rule the hardware based FW engine further includes a URL filter the packet stream capture unit is further configured to extract a URL portion from the packet and to provide the extracted URL portion to the URL filter and the URL filter is configured to perform matching of the URL portion with the URL filtering rule.

According to an aspect of the AM apparatus the plurality of FW rules further include a content filtering rule the hardware based FW engine further includes a content filter the packet stream capture unit is further configured to extract at least one of a keyword and a pattern from the packet and to provide to the content filter the extracted at least one of the keyword and the pattern and the content filter is configured to perform matching of the at least one of the keyword and the pattern with the content filtering rule.

According to an aspect of the AM apparatus the FW function module is implemented as an application said application being executed by an external CPU in cooperation with the hardware based FW engine.

According to an aspect of the AM apparatus the hardware based FW engine includes a central processing unit CPU and a memory and wherein the firmware implementing the FW function module is stored in the memory.

According to an aspect of the AM apparatus the hardware based FW engine is integrated with a processor and wherein the processor includes a security execution environment module configured to virtualize the processor into different processors respectively corresponding to a normal mode and a security mode.

According to an aspect of the AM apparatus the virtualized processor corresponding to the security mode is configured to execute an application received by the AM apparatus.

According to an aspect of the AM apparatus the AM apparatus further includes a storage device connected to the processor wherein the security execution environment module further virtualizes the storage device into different storage devices respectively corresponding to the general mode and the security mode.

According to an aspect of the AM apparatus the virtualized storage device corresponding to the security mode stores the plurality of FW rules.

According to another exemplary embodiment there is provided a method of processing a packet in an AM apparatus including performing matching of the packet with a plurality of FW rules using a packet matching engine of a hardware based firewall FW engine generating a matching result and determining at an FW function module an action for filtering the packet on the basis of the matching result.

According to an aspect of the method the matching of the packet includes further includes deriving a plurality of rule keys from the plurality of FW rules converting a packet key from the packet and comparing at one or more packet matchers of the packet matching engine the packet key with the plurality of rule keys.

According to an aspect of the method the method further includes operating in parallel in each of said one or more packet matchers a plurality of packet sub matchers and carrying out the comparing of the packet key with the plurality of rule keys at each of said one or more packet sub matchers by comparing a subset of the plurality of rule keys with the packet key.

According to an aspect of the method the method further includes extracting at a packet stream capture unit of the hardware based FW engine data related to the FW rules from the packet and providing the extracted data to the packet matching engine.

According to an aspect of the method the extracting of the data from the packet at the packet stream capture unit is performed so as to include data specific to at least one of a link layer protocol a network layer protocol and a transmission layer protocol.

According to an aspect of the method the method further includes extracting at the packet stream capture unit a uniform resource locator URL portion from the packet providing the extracted URL portion to a URL filter of the hardware based FW engine and matching at the URL filter the URL portion with a URL filtering rule of the plurality of FW rules.

According to an aspect of the method the method further includes extracting at the packet stream capture unit at least one of a keyword and a pattern from the packet providing the at least one of the keyword and the pattern to a content filter of the hardware based FW engine and matching at the content filter the at least one of the keyword and the pattern with a content filtering rule of the plurality of FW rules.

According to an aspect of the method the method further includes providing the FW function module implemented as firmware.

According to an aspect of the method the method further includes providing the FW function module as an application said application being executed by an external CPU in cooperation with the hardware based FW engine.

According to an aspect of the method the hardware based FW engine includes a central processing unit CPU and a memory and wherein the providing of the FW function module includes storing the firmware in the memory.

According to an aspect of the method the method further includes using a security execution environment module to virtualize a processor integrated with the hardware based FW engine into different processors respectively corresponding to a normal mode and a security mode wherein the security execution environment module is included in the processor.

According to an aspect of the method the method further includes executing an application using the AM apparatus on the virtualized processor corresponding to the security mode.

According to an aspect of the method the method further includes virtualizing at the security execution environment module a storage device connected to the processor into different storage devices respectively corresponding to the normal mode and the security mode.

According to an aspect of the method the plurality of FW rules are stored in the virtualized storage device corresponding to the security mode.

According to still another exemplary embodiment there is provided a computing device including a CPU core and an anti malware AM apparatus configured to provide a security platform on which a firewall FW software application is executable wherein the AM apparatus includes a hardware based FW engine including a packet matching engine configured to perform matching of a packet with a plurality of FW rules and to generate a matching result and an FW function module configured to determine an action for filtering the packet on the basis of the matching result.

Further details of various embodiments of the present disclosure are disclosed in the following detailed description and the accompanying drawings.

Exemplary embodiments of the present disclosure will be described in detail below with reference to the accompanying drawings. However the embodiments are merely examples and are not to be construed as limiting the present disclosure.

Various details already understood by those familiar with this field will be omitted to avoid obscuring the gist of the present disclosure. Terminology described below is defined considering functions in the present disclosure and may vary according to a user s or operator s intention or usual practice. Thus the meanings of the terminology should be interpreted based on the overall context of the present specification.

The spirit of the present disclosure is determined by the claims and the following exemplary embodiments are provided only to efficiently describe the spirit of the present disclosure to those of ordinary skill in the art.

An AM system includes a processor such as an application processor a storage medium such as a read only memory ROM and or a random access memory RAM and a bus that connects various hardware components including the storage medium to the processor . The processor may include at least one CPU core . The storage medium may include many different types of storage media having different performance characteristics. The bus may include a memory bus or memory controller a peripheral bus and a local bus using any of various bus architectures.

The storage medium of the AM system is configured to store instructions executable by a processing unit such as the processor . For example the instructions stored in the storage medium may include instructions of an operating system OS for operating the various components and instructions of AM software running on the OS. As will be described later the AM software may be configured to provide AM functions to a user of the AM system . In certain embodiments drivers for the hardware components libraries firmware and various types of application software may be stored in the storage medium . In accordance with different embodiments the drivers the libraries the firmware and or the application software may be stored in a different storage medium.

The AM system further includes an AM module for malware detection. As shown in the AM module may be included in the processor . The AM module is connected through the bus to the CPU core and the storage medium . The AM module includes at least one hardware based engine for example an anti virus AV engine and or a firewall FW engine . The AV engine may perform hash matching on certain data for AV scanning of the data. The FW engine may perform an FW function of filtering a packet. In a certain exemplary embodiment the AM module may be configured in the form of a system on chip SoC . Such a SoC is configured as a single chip having hardware logic and firmware for malware detection. In another exemplary embodiment the AM module may be configured in the form of hardware logic e.g. the AV engine and or the FW engine only and may cooperate with certain software e.g. an application executed by an external CPU for malware detection.

The exemplary AM system may be included in a computing device having stored thereon data and or files to be scanned. The computing device may be a mobile device such as a smartphone or a tablet etc. an embedded device a desktop computer or so on.

The exemplary AM module may be constituted in various ways. For example as shown in the AM module includes the AV engine and the FW engine . In addition the AM module may further include an AV reset unit and an FW reset unit .

In the AV engine and the FW engine may operate independently of each other. The AV engine reads data e.g. the whole or a part of a database or a file in word units e.g. four bytes from a master device e.g. the storage medium of the AM system external to the AM module through a first interface . The external master device may control the AV engine and check a state of the AV engine through a second interface and control the FW engine and check a state of the FW engine through a third interface . The AV engine and the FW engine output an AV interrupt signal and an FW interrupt signal respectively.

The AV engine and the FW engine receive a clock signal HCLK . shows that the clock signal is used in common for the AV engine and the FW engine which is however merely illustrative.

The AV reset unit may receive a software reset request signal from the AV engine and a system reset input signal HRESETn from an external of the AM module to provide an AV reset signal to the AV engine . The FW reset unit may receive a software reset request signal from the FW engine and the externally applied system reset input signal to provide an FW reset signal to the FW engine . shows that the system reset input signal is used in common for the AV reset unit and the FW reset unit which is however merely illustrative.

Certain exemplary embodiments involve integration of the AM module and the processor . The AM module may be integrated with the processor in various ways. For example as shown in and the AM module may be integrated into the processor .

As an example the AM module illustrated in is integrated with the processor such that it can use the CPU core in the processor and a designated area of a certain memory e.g. the storage medium through the bus . This is referred to as a non isolated scheme. According to the non isolated scheme the AV engine and the FW engine of the AM module are connected to the CPU core of the processor through the bus and also connected to an external memory e.g. the storage medium through the bus . The AM module of may have an additional engine e.g. a crypto engine which is also connected to the CPU core and the storage medium through the bus . According to the non isolated scheme the AM module may enable relatively rapid data detection using the CPU core of the processor .

As another example the AM module illustrated in is integrated with the processor according to an isolated scheme. The AM module itself of includes a CPU and a memory . According to the isolated scheme the AM module may use the CPU and the memory to reduce use of the CPU core of the processor . According to the scheme shown in the AV engine and the FW engine of the AM module are connected through an internal bus to the CPU the memory and an interface . The interface connects the AM module to the CPU core and the storage medium through the bus . Likewise an additional engine e.g. a crypto engine included in the AM module may be connected through the bus to the interface the CPU and the memory in the AM module . Alternatively another engine e.g. a crypto engine located outside the AM module may be directly connected to the bus to use the CPU core of the processor .

Meanwhile a dotted line of denotes that the AM module may be integrated with a modem external to the processor . According to such a modem integration scheme the AM module is present between a network stack of the OS not shown and the modem and may be used to detect a harmful packet for the security of the AM system including the AM module . Further according to the modem integration scheme the usage of the CPU core of the processor is low. In this case the AM module may directly receive a network packet through the modem and process the packet in the transport layer.

Alternatively a dotted line of denotes that the AM module is integrated with the processor while the modem is connected to the processor through the bus . In this case since the AM module serves as a coprocessor e.g. the CPU in the AM system the AM module may detect a packet for use in the CPU core of the processor thereby facilitating network packet processing over layers including the application layer to the transport layer.

An exemplary security platform includes a hardware level and a software level. Sub modules of each level may be modified or extended according to the design of the platform . Such modules implement certain functions to be performed on the platform . In other words certain functional modules operate on the platform . These functional modules are implemented at the hardware level or the software level of the platform . For example the FW function may be performed on the platform and to this end the platform operates a certain FW function module. Using the FW function module an application e.g. an FW application may be executed at the software level of the platform .

In the hardware level of the platform a hardware based FW engine is included. An exemplary constitution of the hardware based FW engine will be described later. In the hardware level of the platform an AV engine may be further included and a crypto engine s and or for performing an encryption function may be additionally included. The constitution of the platform will be described below particularly in terms of the FW function among the functions of the platform .

In the hardware level of the platform FW firmware may be further included. At the hardware level of the platform the FW firmware implements a functional module that performs certain operations for the FW function. The instructions of the FW firmware may be stored in a certain memory and executed by a certain processing unit. For example when the AM module including the FW engine is integrated with a processor according to the isolated scheme the instructions of the FW firmware may be stored in the memory of the AM module and executed by the CPU of the processor . By way of another example when the AM module including the FW engine is integrated with the processor according to the non isolated scheme the instructions of the FW firmware may be stored in the storage medium and executed by the CPU core of the processor . However it will be understood that the foregoing examples are illustrative and that variations may be made therein.

The software level of the platform includes a driver a library and a FW application . The instructions of the driver the instructions of the library and the instructions of the FW application may be stored in a certain memory e.g. the storage medium and executed by a certain processing unit e.g. the processor . A functional module for performing certain operations for the FW function is implemented as software by the driver and or the library . Also the driver provides an interface with the hardware level of the platform . The FW application is software for providing an FW solution on the basis of the platform . The FW application may use and or control the platform through for example an application programming interface API provided by the library and receive an output from the platform using a callback function.

In the platform the firmware the driver and or the library may implement operations that need to be frequently updated to cope with new malicious codes and strengthen security. According to how closely the AM module is related with the processor e.g. how the AM module is integrated with the processor an operation to be performed on the platform may be implemented in firmware at the hardware level or in a driver or a library at the software level.

In a certain exemplary embodiment the hardware based FW engine performs packet matching operations of matching a certain rule with a packet on which a filtering action e.g. allowing dropping or logging of the packet will be performed. Also the hardware based FW engine may perform uniform resource locator URL filtering operations content filtering operations and packet stream capture operations. The URL filtering operations include operations of matching URL filtering rules with a URL of a hypertext transfer protocol HTTP packet or a point to point tunneling protocol PPTP packet. The content filtering operations apply content filtering rules regarding a specific keyword pattern etc. to packets including content such as document and image files and may be performed in a way similar to the URL filtering operations. The packet stream capture operations include operations of converting a packet incoming from or outgoing to a network medium into an appropriate format for operations of the FW engine .

When the AM module is integrated with the processor according to the isolated scheme some processing operations related to the above operations may be implemented by the FW firmware at the hardware level. For example certain operations for analyzing a packet may be implemented by the FW firmware and other processing operations may be implemented by the library and or the driver . The operations of the FW function module implemented as the FW firmware include packet filtering operations of causing the packet matching operations to initiate and determining an action for filtering a packet on the basis of results of the packet matching operations and or transmission control protocol TCP verification operations of tracking a TCP connection state according to an analysis of a TCP packet.

Alternatively certain processing operations including the packet filtering operations and or the TCP verification operations may be implemented as software by the driver and or the library . For example when the AM module is integrated with the processor according to the non isolated scheme the platform may be configured in this manner.

A security solution based on the platform may enable respective vendors to make the best use of advantages of the hardware based AM module in the course of developing various applications e.g. the FW application . Thus for the security solution hardware based improvement in its performance can be achieved while its unique security functions can be implemented as software.

Furthermore the platform may involve an enhanced security structure. A computing device including an AM system that provides such a platform is improved in the stability of security.

In an exemplary embodiment a module for providing a security execution environment to the hardware level of the platform is included in the hardware level of the platform . The security execution environment module may be included in the processor integrated with the FW engine . The security execution environment module may support platform authentication generation storage of a measurement value for integrity check protection of data storage and so on. The security execution environment module interfaces with a higher level function e.g. the FW function provided by the driver and or the library through a security execution environment driver and or a security execution environment library .

The security execution environment module allows the operating environment of the CPU core and or the CPU of the processor to have a normal mode and a security mode and virtualizes the processor into two processors corresponding to the respective modes. Applications at the software level of the platform are executed on the virtualized processor corresponding to the normal mode or the security mode. In other words applications at the software level of the platform are logically classified as either normal or security applications where the normal application and the security application may be respectively executed on the two virtualized processors as if they were executed on two separate processors. For example the FW application using the AM system is executed on the virtualized processor corresponding to the security mode.

The security execution environment module logically partitions a storage device or a peripheral device connected to the CPU core and or the CPU of the processor as well as the processor and virtualizes the storage device or the peripheral device into devices corresponding to the respective modes.

Such logical partitioning enables the following. First security critical portions for example a certain library and or driver e.g. the library and or the driver a key FW rules a virus signature database etc. may be stored in the virtualized storage medium corresponding to the security mode. When the stored library and or driver is installed or updated performing an integrity checking process through a mechanism such as electronic signature etc. may prevent the contents of the library and or driver from being tampered with or damaged or from being improperly updated. Likewise when the virus signature database and the FW rules are updated the tampering and improper update of their contents can be prevented. Also it is possible to prevent the library the drive the FW rules and the virus signature database from being updated by a source posing as a trustworthy update server. Furthermore a process for authenticating an application operating in the normal mode may be executed in the security mode so as to prevent the application from being tampered with.

A computing device includes the AM system that provides the platform described above. The computing device includes a network interface card NIC . Through the NIC a packet is input from a network medium or output to the network medium. The NIC belongs to the hardware level of the platform implemented in the computing device . A kernel space including service modules executed on an OS of the computing device and a user space including processes called performed by a user in the computing device correspond to the software level of the platform . A kernel network protocol stack as well as the driver may be included in the kernel space. The kernel network protocol stack is a network stack of the OS and delivers a packet to be filtered to a module at the software level e.g. a filtering manager that will be described later so that the packet can be allowed or dropped. In addition to the library and the FW application an application executed by the user of the computing device may be included in the user space. An example of the application may be a web browser an instant messenger etc. using packet data.

A packet incoming from the network medium through the NIC may be delivered to the application via the kernel network protocol stack and a packet generated by the application may be output to the network medium via the kernel network protocol stack and the NIC .

The FW application provides a unique FW solution related to such a packet. The FW application uses and or controls the FW engine and other FW function modules e.g. the FW firmware the driver and or the library based on the FW engine . The library is an interface between the FW application and the driver and the driver communicates with the library through an AM manager of the driver .

The driver includes an FW manager a filtering manager a TCP verification manager and a hardware abstraction module as well as the AM manager .

The FW manager controls FW function modules and queries their states. Also the FW manager may register a network packet hook function in a certain module e.g. a netfilter module in the kernel network protocol stack and release the function from the module.

Also the FW manager may insert and delete FW rules. The FW rules include packet matcher rules URL filtering rules and or content filtering rules. A database of the FW rules may be managed according to these types of FW rules.

The packet matcher rules may be stored in the FW engine in the form of a processed key. For example a maximum of 512 packet matcher rules may be set to support Internet protocol version 4 IPv4 and a maximum of 256 packet matcher rules may be set to support both of IPv4 and Internet protocol version 6 IPv6 . One URL filtering rule may be divided into two filtering rules. For example on the basis of a character two filtering rules respectively corresponding to a domain name portion and a path portion may be derived. The content filtering rules may be related to a keyword a pattern etc. included in a document or an image file.

The FW rules may be inserted in the hardware abstraction module . The FW rules may be inserted in priority order of the FW rules. For example the packet matcher rules may have the following two types. First packet matcher rules of a conditional rule type include condition 1 rules and condition 2 rules. According to the conditional rule type when a condition of a condition 1 rule is satisfied a condition2 rule is activated for a predetermined time. Secondly packet matcher rules of a general rule type have no relationships between several rules. Condition 2 rules have the highest priority among the rules. Condition 1 rules and general rules have the same priority and a first inserted one of the general and the condition 1 rules has a higher priority. The rules are inserted into the hardware abstraction module in a descending order of priority. Meanwhile with the insertion of the FW rules a data structure called a rule mapping table may be generated which is used to refer to an action according to a result of matching performed by the FW engine of a packet with a rule.

The filtering manager is a module that analyzes a packet and determines a filtering action for the packet. Further the filtering manager inserts a packet into the hardware abstraction module and requests matching between the packet and FW rules. As an example the filtering manager allows analysis of a packet delivered from the kernel of the OS to be performed and determines a filtering action according to results of the analysis. For example through the determination packet filtering may be performed according to an IP blacklist and or an IP whitelist. As another example the filtering manager may check whether or not a TCP packet is an HTTP request message packet and then allow a URL filtering operation to be performed. Content filtering may also be performed in a similar way.

The TCP verification manager analyzes a TCP packet and tracks a TCP connection state. Using such tracking verification of the corresponding packet is performed. The TCP verification manager may track the TCP connection state according to a previously defined finite state machine. Also according to the TCP connection state the TCP verification manager may allow dynamic packet filtering to be performed or may determine whether or not the connection state is normal and cause abnormal traffic to be blocked.

The hardware abstraction module sets the FW engine and checks a state of the FW engine . The hardware abstraction module requests matching from the FW engine and then receives match results. The hardware abstraction module inputs into the FW engine a packet to be filtered and FW rules to be matched with the packet so that the matching between the packet and the FW rules is performed in the FW engine . For example the packet and the FW rules may be converted into keys at the hardware abstraction module and inserted in the FW engine or may be converted into keys at the FW engine .

The hardware based FW engine is a module that performs operations for use in providing FW functions on the basis of hardware as mentioned above. For example according to the hardware constitution shown in the hardware based FW engine includes a packet matching engine that performs packet matching operations a URL filter that performs URL filtering operations and a content filter that performs content filtering operations. Also the FW engine may further include a packet stream capture unit for converting a packet into an appropriate format for the operations.

The packet matching engine performs a packet matching operation which is a basic operation for FW functions. The matching operation between a packet to be filtered and FW rules may involve comparison between a packet key converted from the packet and a rule key derived from the FW rules. For example a packet key input to the packet matching engine may be 128 bits or 256 bits. Rule keys that are stored in the packet matching engine and compared with the packet key of 128 bits or 256 bits may be 512 160 bit keys or 256 320 bit keys respectively.

In a packet key data structure is a structure of the 128 bit packet key illustrated above. The packet key data structure includes 96 bit Packet Content and two 16 bit comparison areas i.e. Range 0 and Range 1 . In the 96 bit Packet Content the 94 upper bits stores packet content and the two lower bits are dummy bits and stores results of comparing the comparison areas of a packet key and those of a rule key. Meanwhile a rule key data structure has the following format. The rule key data structure is a 160 bit rule key corresponding to 128 bits that is an aforementioned packet key size and includes 96 bit Rule Content and two 32 bit comparison areas i.e. Range 0 and Range 1 . In addition the rule key data structure includes a 32 bit rule content mask for a given rule key. Thus the rule key data structure has a total of 196 bits. In the Rule Content the 94 upper bits stores rule content and the two lower bits denote a mask related to the comparison areas.

A packet key and rule keys are stored in the packet matching engine . In particular the packet matching engine may include a rule key memory not shown for storing a plurality of rule keys to be compared with the packet key. The rule key memory may be one array or may be implemented in the form of a plurality of arrays. For example the rule key memory may be configured with two arrays of 192 bits 256 bits to store 160 bit rule keys and 32 bit content masks of the respective rule keys.

In a matching operation between a packet and FW rules a mask is used to compare a packet key with some rule keys and or only compare the packet key with some bits. instead of comparing the packet key with all rule keys bit by bit. In addition to the rule content mask of a Rule Row Mask and a Rule Column Mask may be included in the packet matching engine . The Rule Row Mask and the Rule Column Mask may be stored in the rule key memory or stored separately from the rule key memory.

When the rule key memory is configured with two arrays of 192 bits 256 bits as mentioned above a 256 bit Rule Row Mask may be used for each array and a 96 bit Rule Column Mask may be used for rule content bits of rule keys stored in the arrays. For example a rule key corresponding to a bit set to 1 in the Rule Row Mask is compared with the packet key and the rule key is compared with the packet key at every bit corresponding to a bit set to 1 in the Rule Column Mask.

The packet matching engine includes a control block and one or more packet matchers and . Each of the packet matchers and may include a plurality of packet sub matchers . . . . . . . and .

The control block controls the packet matching engine and stores a state of the packet matching engine . The control block generates an address signal and a control signal of the rule key memory of the packet matching engine . Also the control block stores results of comparing at the packet matchers and a packet key and a rule key. In a certain exemplary embodiment the control block may include a register for storing a Rule Row Mask and a Rule Column Mask.

The packet matching engine shown in includes the two packet matchers and . For example a packet key of the aforementioned 128 bit data structure may be input to the respective packet matchers and . Also the rule key memory of the packet matching engine may be divided into two arrays of 192 bits 256 bits and the two arrays may correspond to the packet matchers and respectively. In a certain exemplary embodiment the respective arrays may be included in the corresponding packet matchers and . However such a configuration of the rule key memory is merely an example. The rule key memory of the packet matching engine may be used to store 512 160 bit rule keys or 256 320 bit rule keys according to a setting of a user.

In a certain exemplary embodiment each of the packet matchers and may include eight packet sub matchers e.g. for the reference numerals . . . . . . . and indicating the packet sub matchers shown in i n 8 . In the respective packet matchers and 256 rules keys are divided into eight groups. Each of the total of 16 packet sub matchers to compares 32 rule keys with a packet key.

A packet of each of the packet matchers and is input to the packet sub matchers to included in the packet matcher and and the address signal and the control signal of the rule key memory are generated by the control block and input to the packet sub matchers to . Each of the packet sub matchers to loads a rule key stored in the rule key memory according to the address signal and performs a logical operation of comparing the loaded rule key with a packet key.

The aforementioned address signal and or control signal may be concurrently input to the packet sub matchers to . In this case the 16 packet sub matchers to in the exemplary packet matching engine may perform matching between the packet and the rules by performing the logical operation of comparing a rule key with the packet key in parallel. The operation rate of the packet matching engine varies according to the number of rule keys compared by the packet sub matchers to of the packet matching engine . For example when three clocks are required to compare one rule key with a packet key the respective packet matchers and process 256 rule keys with 96 256 8 3 clocks. When multi matching is enabled in this manner even if the number of rules increases the time required for such matching may be reduced. A memory for the multi matching may have the structure of a content associative memory CAM . When a packet key is input to the memory of the CAM structure and then a rule key that matches the input packet key is detected in the memory an address indicating a position at which the rule key is stored may be output. Each of the packet matchers and may further include a result block not shown . In the result block results of the logical operations performed by the packet sub matchers to are stored. The control block of the packet matching engine may receive the results stored in the result blocks.

A packet buffer stores a packet input to the packet matching engine . The packet stored in the packet buffer includes 96 bit Packet Content and a 32 bit comparison area.

In the packet sub matcher a rule content memory of 96 bits 32 bits a rule area memory of 64 bits 32 bits and a rule content mask memory of 32 bits 32 bits store rule content comparison areas and a rule content mask of 32 rule keys respectively. The rule content memory the rule area memory and the rule content mask memory may be a buffer that receives the 32 rule keys processed by the packet sub matcher from a rule key memory of the packet matching engine and stores the 32 received rule keys or a part of the rule key memory. According to an address signal from a control block rule content comparison areas and a rule content mask of one rule key may be loaded from the memories and .

A rule row mask and a rule column mask may be used as described above. When each of the packet matchers and including eight packet sub matchers processes 256 rule keys the rule row mask for use in each of the packet sub matchers to has 32 256 8 bits.

When an input packet is loaded the packet sub matcher performs the following operations on the rule keys assigned to the packet sub matcher . For each rule key a mask operation unit of the packet sub matcher generates an expanded 96 bit rule content mask using 32 bits of the rule content mask memory and performs a logical operation of masking 96 bit rule content from the rule content memory with the expanded rule content mask . An area operation unit compares the values of the comparison areas of the rule keys stored in the rule area memory with the value of the comparison area of the packet stored in the packet buffer and then updates the dummy bits of the Packet Content in the packet buffer with the results of the comparison. Subsequently a content matcher performs a logical operation of comparing the rule content with the packet content bit by bit.

The packet stream capture unit converts a packet input or output through the NIC into a data set in an appropriate form for matching operations performed in the packet matching engine . The conversion performed by the packet stream capture unit may include extraction of certain data from the packet. The packet stream capture unit provides the extracted data to the FW engine . The extracted data may be data related to FW rules. Data that is not related to FW rules is not necessarily required for matching between the packet and the FW rules and thus may not be provided to the FW engine . For example for a packet of a link layer protocol such as the Ethernet protocol FW rules may be set in connection with data specified for the link layer protocol data specified for a network layer protocol and or data specified for a transmission layer protocol or may be set in connection with data specified for an application layer protocol.

As an example a case in which the packet stream capture unit receives an Ethernet frame packet is assumed. The packet stream capture unit extracts data related to FW rules from an Ethernet frame. For example information including a source media access control MAC address and a destination MAC address in a MAC header and a source IP address a destination IP address a packet version and a protocol in an IP header is extracted from the Ethernet frame. When the Ethernet frame is in accordance with the TCP or the user datagram protocol UDP information including a source port and a destination port in a TCP header or a UDP header is extracted. On the other hand when the Ethernet frame is an Internet control message protocol ICMP message information including a type and a code is extracted.

With reference to conversion of an Ethernet frame by the packet stream capture unit will be described. In the Ethernet frame includes an IPv4 packet.

When the Ethernet frame is an outgoing TCP or UDP packet the packet stream capture unit reads the Ethernet frame as the uppermost format in . In this format two dummy bits a packet version indicated by V a direction bit indicating whether the Ethernet frame goes outside or comes in from the outside a reserved bit a protocol indicated by P a destination MAC address indicated by DM1 to DM6 a destination IP address indicated by DIP1 to DIP4 and a source IP address indicated by SIP1 to SIP4 are positioned at bits beginning with bit and continuously followed by a destination port indicated by DP0 and a source port indicated by SP0 together with certain dummy bits. When the outgoing Ethernet frame is an ICMP message the destination port and the source port are replaced by a code indicated by CO and a type indicated by TP respectively.

An incoming Ethernet frame also has a similar format to that described above. In such a format two dummy bits a packet version indicated by V a direction bit indicating whether the Ethernet frame goes outside or comes in from the outside a reserved bit a protocol a source MAC address indicated by SM1 to SM6 a source IP address and a destination IP address are positioned and continuously followed by a source port and a destination port or a code and a type together with certain dummy bits.

Subsequently the packet stream capture unit provides the data related to FW rules to the packet matching engine . For example the packet stream capture unit generates a 128 bit packet key on the basis of data that has been converted into a certain format as described above and provides the generated 128 bit packet key to the packet matching engine . When the Ethernet frame input to the packet stream capture unit includes an IPv6 packet the packet stream capture unit may convert the input frame into a 256 bit packet key.

As described above the packet stream capture unit may rapidly parse a packet. Furthermore the packet stream capture unit may rapidly parse a packet that is a target of URL filtering e.g. an HTTP packet or a file that is a target of content filtering e.g. a document or image file having a specific keyword pattern .

For example when an Ethernet frame received through the NIC includes a TCP packet the packet stream capture unit converts a packet of an application layer protocol including a URL part e.g. an HTTP packet or a PPTP packet into a simplified format appropriate for subsequent matching such that a URL check can be performed on an application layer protocol such as the HTTP or the PPTP. Since a size of the URL part to be checked is not fixed the packet stream capture unit hashes the part corresponding to a URL filtering rule and stores the hashed part. For example in an HTTP packet the packet stream capture unit finds a method field and a space sp following the method field to check a position of a URL field and extracts a domain name and a subsequent path part from a URL part. In a similar way also in a PPTP packet a length field and a message type field are masked and a magic cookie field is extracted.

The extracted URL related part is input to the URL filter . shows a constitution of a URL filter according to an exemplary embodiment of the present disclosure. With reference to an operation of the exemplary URL filter is described. The input part is hashed by a hash processor according to an algorithm such as SHA256. For such hashing a padding unit adds a padding bit to the part input to the URL filter according to an input block unit of the hash processor and delivers the input part to the hash processor . An output of the hash processor is provided to a CAM of the URL filter and string matching is performed. When the hashed URL related part matches a URL filtering rule of the CAM an address is output from the CAM through an address encoder .

As another example a packet including a file set to go outside by an application may include a specific keyword e.g. confidential or pattern e.g. Social Security Number . In this case the packet stream capture unit may convert the file into an appropriate format for filtering content used in the application layer. A detailed conversion scheme may vary according to a file a keyword and or a pattern. Subsequently the content filter may perform content filtering in a similar way to URL filtering operations of the URL filter . Content filtering in the application layer prevents the distinction and outflow of content including specific information.

The hardware based AM system described above can be implemented in various mobile devices PCs or embedded devices. On a platform provided by the AM system an FW solution effectively blocks a malware infection route and allows network packets to be filtered and monitored according to an FW policy and thus it is easy to fundamentally block access to a malware distribution site or a phishing site and prevent a distributed denial of service DDoS attack. In addition a filtering function provided on the basis of hardware can reduce a response time to packet transmission and can be performed within an appropriate time even when the number of FW rules increases. Furthermore even when a variable size of data from packets in accordance with a certain protocol is related to FW rules matching of packets with FW rules can be rapidly performed on the basis of hardware.

Meanwhile an exemplary embodiment of the present disclosure may include a computer readable recording medium including a program for performing the methods described herein on a computer. The computer readable recording medium may separately include program commands local data files local data structures etc. or include a combination of them. The medium may be specially designed and configured for the present disclosure. Examples of the computer readable recording medium include magnetic media such as a hard disk a floppy disk and a magnetic tape optical recording media such as a CD ROM and a DVD magneto optical media such as a floptical disk and hardware devices such as a ROM a RAM and a flash memory specially configured to store and perform program commands. Examples of the program commands may include high level language codes executable by a computer using an interpreter etc. as well as machine language codes made by compilers.

In certain exemplary embodiments certain operations for providing an FW function are performed at a high speed in a hardware based FW engine and other FW operations are implemented on a software level of a platform including the FW engine so that various security solutions can be provided.

In certain exemplary embodiments a computing device having limited resources can provide improved FW performance.

It will be apparent to those familiar with this field that various modifications can be made to the above described exemplary embodiments of the present disclosure without departing from the spirit or scope of the present disclosure. Thus it is intended that the present disclosure covers all such modifications provided they come within the scope of the appended claims and their equivalents.

