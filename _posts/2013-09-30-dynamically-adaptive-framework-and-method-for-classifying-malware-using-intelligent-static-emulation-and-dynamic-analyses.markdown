---

title: Dynamically adaptive framework and method for classifying malware using intelligent static, emulation, and dynamic analyses
abstract: Techniques for malware detection are described herein. According to one aspect, control logic determines an analysis plan for analyzing whether a specimen should be classified as malware, where the analysis plan identifies at least first and second analyses to be performed. Each of the first and second analyses identified in the analysis plan including one or both of a static analysis and a dynamic analysis. The first analysis is performed based on the analysis plan to identify suspicious indicators characteristics related to processing of the specimen. The second analysis is performed based on the analysis plan to identify unexpected behaviors having processing or communications anomalies. A classifier determines whether the specimen should be classified as malicious based on the static and dynamic analyses. The analysis plan, the indicators, the characteristics, and the anomalies are stored in a persistent memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09171160&OS=09171160&RS=09171160
owner: FireEye, Inc.
number: 09171160
owner_city: Milpitas
owner_country: US
publication_date: 20130930
---
Embodiments of the present invention relate generally to malicious content detection. More particularly embodiments of the invention relate to malicious content detection using intelligent static and dynamic analyses.

Malicious software or malware for short may include any program or file that is harmful by design to a computer. Malware includes computer viruses worms Trojan horses adware spyware and any programming that gathers information about a computer or its user or otherwise operates without permission. The owners of the computers are often unaware that these programs have been added to their computers and are often similarly unaware of their function.

Malicious network content is a type of malware distributed over a network via websites e.g. servers operating on a network according to a hypertext transfer protocol HTTP standard or other well known standard. Malicious network content distributed in this manner may be actively downloaded and installed on a computer without the approval or knowledge of its user simply by the computer accessing the web site hosting the malicious network content the malicious web site . Malicious network content may be embedded within objects associated with web pages hosted by the malicious web site. Malicious network content may also enter a computer upon receipt or opening of email. For example email may contain an attachment such as a PDF document with embedded malicious executable programs. Furthermore malicious content may exist in files contained in a computer memory or storage device having infected those files through any of a variety of attack vectors.

Various processes and devices have been employed to prevent the problems associated with malicious content. For example computers often run antivirus scanning software that scans a particular computer for viruses and other forms of malware. The scanning typically involves automatic detection of a match between content stored on the computer or attached media and a library or database of signatures of known malware. The scanning may be initiated manually or based on a schedule specified by a user or system administrator associated with the particular computer. Unfortunately by the time malware is detected by the scanning software some damage on the computer or loss of privacy may have already occurred and the malware may have propagated from the infected computer to other computers. Additionally it may take days or weeks for new signatures to be manually created the scanning signature library updated and received for use by the scanning software and the new signatures employed in new scans.

Moreover anti virus scanning utilities may have limited effectiveness to protect against all exploits by polymorphic malware. Polymorphic malware has the capability to mutate to defeat the signature match process while keeping its original malicious capabilities intact. Signatures generated to identify one form of a polymorphic virus may not match against a mutated form. Thus polymorphic malware is often referred to as a family of virus rather than a single virus and improved anti virus techniques to identify such malware families is desirable.

Another type of malware detection solution employs virtual environments to replay content within a sandbox established by virtual machines VMs . Such solutions monitor the behavior of content during execution to detect anomalies that may signal the presence of malware. One such system offered by FireEye Inc. the assignee of the present patent application employs a two phase malware detection approach to detect malware contained in network traffic monitored in real time. In a first or static phase a heuristic is applied to network traffic to identify and filter packets that appear suspicious in that they exhibit characteristics associated with malware. In a second or dynamic phase the suspicious packets and typically only the suspicious packets are replayed within one or more virtual machines. For example if a user is trying to download a file over a network the file is extracted from the network traffic and analyzed in the virtual machine. The results of the analysis aids in determining whether the file is malicious. The two phase malware detection solution may detect numerous types of malware and even malware missed by other commercially available approaches. Through verification the two phase malware detection solution may also achieve a significant reduction of false positives relative to such other commercially available approaches. Dealing with false positives in malware detection may needlessly slow or interfere with download of network content or receipt of email for example. This two phase approach has even proven successful against many types of polymorphic malware and other forms of advanced persistent threats.

Typically the static phase and the dynamic phase are performed in sequence in which a static analysis is performed followed by a dynamic analysis to generate separate scores with limited or no influence from each other. The scores are then used to determine the final malware score of the content for content classification. The static or dynamic phase may be performed in an operating environment that may not be correct and or necessary. For example a dynamic analysis may be performed on the content for specific types and or versions of operating systems and or applications executing within a virtual environment even if a static analysis reveals that the content is intended for a particular version of a particular type of operating system and or application. As a result drawbacks of known two phase malware detection solutions include a certain inflexibility and inefficiency in performing the analysis.

Various embodiments and aspects of the invention will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

Techniques for malware detection using intelligent static analysis and dynamic analysis are described herein. According to one embodiment a malware detection system includes but is not limited to a first analysis module e.g. a static analysis module a second analysis module e.g. a dynamic analysis module a malware classifier and a controller. In response to receiving a specimen e.g. a content item such as a data object or file to be analyzed for malware detection the controller determines an analysis plan for analyzing whether the specimen should be classified as malware. The analysis plan identifies at least a first analysis and possibly plural analyzes along with an order and in some embodiments an analysis protocol for performing the analysis. For example the analysis plan may specify a first analysis and a second analysis to be performed which may be a static analysis and or a dynamic analysis and the order in which they are to be performed. In some embodiments the analysis plan may also specify an analysis protocol and parameters such as a specific operating environment to be provided or specific behaviors to be monitored in the dynamic analysis specific types of static analyses or specific characteristics to be checked verified or examined via static analysis.

Where the analysis plan specifies two analyses e.g. a first and second analysis the first analysis may be performed by the first analysis module according to the analysis plan for example to identify one or more suspicious indicators and one or more characteristics related to processing of the specimen. A second analysis may be performed by the second analysis module in accordance with the analysis plan on the specimen for example to identify one or more unexpected behaviors that include one or more processing or communications anomalies. The results of the first and second analyses are provided to the classifier. The classifier is to classify the specimen based on the identified suspicious indicators and the anomalies. The analysis plan and all the information generated from the first and second analysis and the classification are stored in a persistent storage which may be located locally and or remotely including the suspicious indicators characteristics information describing the unexpected and or expected behaviors as well as the specimen itself and the metadata describing the circumstances surrounding the specimen e.g. email or Web information through which the specimen was received .

The controller uses the stored information to determine what if any additional analysis or analyses should be performed and often what protocols should be followed during the subsequent testing. The sequence order of the analyses involved may be determined by the controller as part of the analysis plan or update to the analysis plan. In one embodiment the controller monitors or receives feedback from the analysis modules and the classifier and may modify or adjust the analysis plan based on the results of a prior analysis and classification including configuring an additional analysis between or after the first and second analysis or modifying a procedure or operating environment of the next analysis in the analysis plan.

Accordingly the first analysis may be performed prior to the second analysis where the second analysis may be performed based in part for example on the information or results generated from the first analysis such as suspicious indicators and characteristics. Alternatively the second analysis may be performed prior to the first analysis where the first analysis may be performed based in part for example on at least one of the anomalies identified during the second analysis. Some embodiments of the invention may improve over the known two phase malware detection solutions by providing a third type of analysis involving emulation as a simpler more time efficient method of analysis than the dynamic analysis involving a virtual machine either in lieu of or in addition to dynamic analysis. Such three phase malware detection solutions provide additional options for the controller in conducting analysis.

As a result embodiments of the invention may perform malware detection with greater flexibility in the conduct of the analysis and realize greater efficiencies with improved efficacy in detecting malware than in known two phase malware detection solutions.

With reference now to the drawings is a block diagram illustrating a malware detection system according to one embodiment of the invention. Referring to system includes malicious content detection system configured to receive a specimen or specimens from a source not shown and to determine whether the specimen should be classified as malicious. The term of specimen represents one or more data objects or a file e.g. an executable a document a library a media file which may be suspicious or unknown. The specimen may be network content transmitted by a network node over a network e.g. a local area network a wide area network or the Internet or a combination thereof and captured by a network device such as a network tap. Alternatively the specimen may be manually submitted by a user via a user interface e.g. a Web portal . In one embodiment malicious content detection system includes but is not limited to static analysis module also referred to as static analysis logic or static analyzer dynamic analysis module also referred to as dynamic analysis logic or dynamic analyzer malware classifier controller also referred to as control logic and intelligence store or database .

Static analysis module is to perform a static analysis on the specimen without executing or playing the specimen. A static analysis may include signature match protocol semantics anomalies check source reputation check malware source blacklist or whitelist checking and or emulation. Dynamic analysis module is to perform a dynamic analysis on the specimen including monitoring behaviors of the specimen during its virtual execution to detect any unexpected behaviors having one or more anomalies. Malware classifier is to classify whether the specimen is likely malicious based on the results of the static analysis and dynamic analysis and other information such as information stored in the intelligence store . Controller is to coordinate the operations of the static analysis module the dynamic analysis module and the classifier including controlling the processing flows amongst them via an analysis plan or a feedback received from any of the static and dynamic analysis modules and classifier . The controller is to determine in an analysis plan whether one or both of the analysis modules should be involved the order of the analysis modules involved which may be in series or in parallel whether additional analysis is needed based on the feedback from the classifier and the intelligence information stored in the intelligence store . Effectively controller determines an analysis plan or roadmap for static analysis module dynamic analysis module and malware classifier . Although two analysis modules are shown in more or fewer analysis modules or other components may also be implemented.

According to one embodiment the information stored in the intelligence store e.g. a persistent database is accessible and used by each of the components of the malware detection system e.g. static analysis module dynamic analysis module malware classifier and controller during all processing stages of malware detection processes. Each of the components may utilize the information stored in the intelligence store during their respective processes. Each of the components may generate and store further intelligence information in the intelligence store during their respective processes which may be utilized in subsequent operations. The intelligence information stored in the intelligence store includes a variety of information obtained during the current malware detection session and prior malware detection sessions if any and or other information received or updated from other information sources such as external analysis data and control server in the cloud e.g. over the Internet . The intelligence information may include metadata of the specimen information concerning the circumstances surrounding the specimen e.g. environment in which the specimen is received such as email or Web information information observed or learned during the operations of each of the components of the malware detection system and or other information obtained from other malware detection systems with respect to the same or similar specimen. The specimen itself may also be cached in the intelligence store .

At least some of the components such as controller may be equipped with a logger to log all the events or activities occurred during the processes of the respective components. The logged information may also be stored in intelligence store and accessible by all components. As a result each of the components of the malware detection system has all the intelligence information available from the intelligence store during the corresponding stage of processes and it can perform a more comprehensive and accurate analysis in view of all the intelligence information generated from the past and current malware detection sessions. Since all components share all of the intelligence information they effectively are on the same page and communicate with one another e.g. feedback which enables each component to make intelligent decisions to improve the efficiency and accuracy of the malware detection. The information stored in intelligence store may be stored in a persistent storage device e.g. hard drive or flash memory device and loaded in the system memory during the malware detection. The information stored in intelligence store may be synchronized from time to time with a central management server such as server for further analysis e.g. offline analysis and for sharing of information with other malicious content detection systems. For example controller may determine that the specimen has characteristics identifiers or behaviors that merit sending the specimen outside of the customer s network or sub network e.g. to a remote or centralized location which may provide cloud based subscription services for additional e.g. factory processing should the customer opt in to this option.

In response to receiving a specimen for malware detection the controller determines an analysis plan for analyzing whether the specimen should be classified as malware. The specimen may be recently captured or received from a remote source or alternatively it can be the same specimen that has been processed during a previous iteration of malware detection processes. Controller determines a next analysis based on the received specimen and the results of a prior analysis. Controller records this analysis decision in the analysis plan and the results of all analysis are stored in the memory in association with a specimen identifier identifying the received specimen. A specimen identifier may be a filename or other identifying information. The analysis plan identifies at least one analysis to be performed for example for purposes of the following discussion a first and second analysis each of which may be a static analysis and or a dynamic analysis. A first analysis e.g. static analysis is then performed by the first analysis module e.g. static analysis module according to the analysis plan to identify one or more suspicious indicators and one or more characteristics related to processing of the specimen. In addition certain non suspicious indicators e.g. predefined data patterns may also be tracked. A second analysis e.g. dynamic analysis is performed by the second analysis module e.g. dynamic analysis module in accordance with the analysis plan on the specimen to identify one or more unexpected behaviors that include one or more processing or communications anomalies. Similarly certain expected behaviors may also be recorded. The classifier is to classify the specimen based on the identified suspicious indicators and the anomalies. The analysis plan and all the information generated from the first and second analysis and the classification are stored in a persistent storage such as intelligence store or external server .

The first analysis may be performed prior to the second analysis where the second analysis may be performed based in part on the information or results generated from the first analysis such as suspicious indicators and characteristics. Alternatively the second analysis may be performed prior to the first analysis where the first analysis may be performed based in part on at least one of the anomalies identified during the second analysis. Furthermore controller may perform an initial analysis or scanning on the received specimen and may decide to dispatch the specimen for both analysis modules for static and dynamic analyses in parallel. In one embodiment the controller monitors or receives feedback from at least one of the analysis modules and the classifier . Controller may modify or adjust the analysis plan based on the results of the analysis and the classification including configuring and initiating an additional analysis e.g. static or dynamic analysis between or after the first and second analysis or modifying a procedure e.g. protocol or environment settings of the next analysis in the analysis plan. Controller may further specify the order of multiple analyses listed in the analysis plan. The analysis plan may be updated and maintained in the intelligence store .

In one embodiment after performing a static analysis before performing a dynamic analysis controller may alter the analysis plan based on the result of the static analysis as well as other information obtained from the intelligence store . Controller may decide to perform an additional analysis e.g. by adding processing of the specimen in an emulation analysis module to unpack an object and then another static analysis on the unpacked object. The dynamic analysis is then performed pursuant to the analysis plan based in part on the results of the inserted static analysis. Thus a result of one analysis or operation may provide an influence to a subsequent analysis or operation. The influence may be any information or data that affects or alters the decision making regarding a subsequent analysis or the conduct or operation of the malware detection process during that subsequent analysis. For example the influence generated by a static analysis on a subsequent dynamic analysis may include the runtime environment used by the subsequent dynamic analysis including a type of operating system and its version type of specimen e.g. executable PDF Web WORD applications involved e.g. browser etc. the length of time to conduct a dynamic analysis on the specimen or the type of behaviors to be monitored or the type or location of monitors or monitor instrumentation to deploy. These are examples of the analysis protocol and parameters referred to above.

According to one embodiment controller may modify the priorities of the specimens to be analyzed in the analysis plan based on the information observed from the intelligence store at the point in time. Initially for example when the specimens are received for malware detection controller may perform an initial analysis on the specimens associate a priority with each of the specimens and set an order of the analyses to be performed in an analysis plan. After a first analysis e.g. static analysis controller may modify the priorities of the specimens and or the order of the analyses in the analysis plan based on the result of the first analysis. Controller may further configure the time or analysis schedule for each of the analyses to be performed in the analysis plan. The time or analysis schedule information may also be stored in the analysis plan. Controller then dispatches the specimens to be analyzed according to the analysis schedule or time specified in the analysis plan.

According to another embodiment after a static analysis has been performed based on the result of the static analysis controller may select a runtime environment of a dynamic analysis that is supposed to be performed after the static analysis. For example controller may determine an operating system and version thereof an application and version thereof for the virtual environment of the dynamic analysis. Controller may further select an initial state from which the application will be run based on the result of the static analysis. Controller may alter the analysis plan to reflect such changes.

According to another embodiment any results e.g. events activities and or decision makings of all of the components may be recorded for example by controller or by the individual components themselves in the analysis plan or an analysis log which may be stored in database and or external storage . The recorded information may be stored in database which may be indexed based on identifiers of the specimen. Controller may determine a next analysis based on prior analysis results and dispatch the specimen to one or both of analysis modules via a virtual switch where the virtual switch is operated based on certain events or conditions maintained by the intelligence store . Controller may also determine the length of a dynamic analysis and specific software to run therein including an operating system applications libraries plugins and versions thereof based on the specimen or one or more prior analyses. Controller may continue directing a further analysis or terminate the current analysis after a period of time which may be determined based on a number of pending specimens.

In one embodiment a static analysis may be performed in view of the intelligence information stored in intelligence store . A static analysis may include signature match protocol semantics anomalies check source reputation check and or emulation. Static analysis module further extracts information from the specimen that describes the specimen. The extracted information is stored in intelligence store . Static analysis module may further generate intelligence information during the static analysis and store the intelligence information in intelligence store . Static analysis result may also be stored in intelligence store . Static analysis module may further perform an analysis based on a set of heuristics and to generate a static score representing the likelihood that a specimen is malicious based on the static analysis. The static score may be a measure of probability of malware and used in part by malware classifier to classify the specimen.

In one embodiment the specimen is statically inspected by static analysis module for various attributes and features. These features are intended to be signals to both goodness and badness of the specimen. For example if a file contains a Microsoft WORD icon as its own display icon this may look suspicious since that is a common malware technique to trick a user into opening the file. During the subsequent dynamic analysis the file is dynamically analyzed by dynamic analysis module for various behavioral actions and it may be discovered that the file may not be opened by Microsoft WORD and or may perform activities e.g. behaviors that are not expected of a WORD document. The intelligent aspect of the dynamic analysis is that the information from the static analysis can be used to help or influence the dynamic analysis. Such information may be stored in intelligence store .

Dynamic analysis module is configured to monitor the behaviors of the specimen in an operating environment e.g. virtual machine generating a dynamic analysis result . Dynamic analysis result may include information describing or indicating the unexpected and or expected behaviors observed during the dynamic analysis. Dynamic analysis result may be stored in the intelligence store as well. The dynamic analysis may be configured and performed in view of the intelligence information obtained from the intelligence store . Dynamic analysis module may further generate and store further intelligence information in intelligence store during the dynamic analysis. Dynamic analysis module may further generate a dynamic score representing the likelihood that specimen is malicious based on the dynamic analysis which may be in a form of a measure of probability. Static analysis result and dynamic analysis are used by malware classifier to determine in view of the intelligence information obtained from the intelligence store a malware classification indicator that indicates whether the specimen is malicious non malicious or uncertain which may also be stored in the intelligence store . Malware classification indicator may be in a form of confidence score.

Malware classification indicator is fed back to controller to determine whether the malware classification indicator is sufficient or conclusive enough to classify the specimen. If so controller may terminate the analysis and reporting module is invoked to report whether the specimen is indeed malware or non malware. In the event the specimen is malware a malware signature or malware identifier may also be generated for future detection. In the event the malware classification indicator indicates the specimen is uncertain controller may configure additional analysis to be performed. Controller may further determine certain parameters or environment settings for the additional analysis based on the intelligence information obtained from the intelligence store . Controller may further extend the clock time based on the results being obtained in the dynamic analysis or launch another dynamic analysis in response to those results.

According to one embodiment the static analysis and dynamic analysis performed by static analysis module and dynamic analysis module may be performed in sequence configured via an analysis plan in which an analysis result of an analysis e.g. static analysis may be utilized for example via intelligence store by a subsequent analysis e.g. dynamic analysis to improve the efficiency and accuracy of the subsequent analysis. In one embodiment when a specimen is received for example via a network tap for malware detection controller determines which of the static analysis and dynamic analysis should be performed first. For certain types of content e.g. portable document format PDF a dynamic linked library DLL a static analysis may be performed first and a dynamic analysis may then be performed. For other types of content e.g. Web page or an executable a dynamic analysis may be performed prior to a static analysis.

According to one embodiment an analysis module generates further intelligent information concerning the content in question such as a type of content and or an operating system and its version in which the content is intended to be executed. Such intelligent information is utilized by another analysis module to perform a subsequent analysis in a manner specifically tailored to the content in question. For example the result of a static analysis can be used to configure an operating environment that is specifically tailored to the content for the dynamic analysis.

According to one embodiment if controller determines that there is a discrepancy between intelligent information provided by static analysis module and dynamic analysis module which may be stored in intelligence store or received via an application programming interface or API it may configure additional analysis to be performed. For example a first static analysis may reveal a first set of features of a specimen in question. However after a first dynamic analysis on the same specimen is performed it may reveal a second feature that has not been detected by the first static analysis. The second feature may have been intentionally hidden by a developer or a provider of the specimen e.g. a malware author . Such a discrepancy may be determined by controller and or classifier as a red flag for example based on prior statistics collected over a period of time. In such a situation controller may determine that a further analysis is needed. As a result a second static analysis may be performed on the specimen in view of the second feature discovered by the first dynamic analysis. The second static analysis may further require a second dynamic analysis to follow.

According to one embodiment in addition to determining suspicious indicators static analysis module may further capture non suspicious indicators which may be user configurable. The non suspicious indicators may also be stored in the intelligence store . Similarly in addition to capturing the unexpected behaviors dynamic analysis module may further record expected behaviors and store the recorded information in the intelligence store . For example if a specimen goes out of its way to look normal during a static analysis producing non suspicious indicators any unexpected behavior detected during a subsequent dynamic analysis may be considered with more weights since it constitutes discrepancy between the two analyses.

According to one embodiment in addition to the analysis results other information generated by other components e.g. information stored in the intelligence store may also be presented or available to malware classifier . For example the specimen itself as well as its environment e.g. associated email Web information and or related file s may also be presented or available to malware classifier .

According to one embodiment controller may determine in the middle of a malware detection session based on the information observed that the current analysis plan was not configured correctly. Controller may decide to abort or abandon the current analysis plan completely and initiate another analysis plan or alternatively take some correction or recovery actions before continue the current analysis plan. Furthermore controller may take into account the work load of the malware detection system and may decide to offload the analyses to an offline facility for malware analyses.

According to one embodiment the number of specimens or the network email file work load of the system may also be provided to the malware classifier . The type of deployment may also be provided to the malware classifier . The controller may determine that specimen has characteristic identifiers or behavior that merit sending the specimen outside of the customer s network for additional factory processing should the customer opt in to this option.

Note that the configuration of malware detection system is described and shown in for the purpose of illustration only. More or fewer components or other configurations may be implemented. For example at least some of the functionalities of classifier may be integrated with controller or vice versa. Each of static analysis module dynamic analysis module and classifier may maintain a separate communications channel e.g. inter process call or API as a feedback channel with controller to communicate with each other. Alternatively they can communicate with each other via the intelligence store by storing communications information in predetermined storage location s of the intelligence store that are shared amongst them. Each of static analysis module dynamic analysis module controller and classifier may be implemented in software hardware or a combination thereof. For example at least some of these components may be implemented as machine readable code that can be executed by a processor in a memory to carry out the functionalities or operations as described above. Intelligence store may be maintained in a non volatile storage device such as a hard disk.

Note that an analysis plan may be a formal analysis plan and alternatively the analysis plan may simply map to some specimen identifiers one or more analyses and or information related to the specimen and the analyses. An analysis plan can be configured or programmed using a variety of programming languages such as extensible markup language XML or other scripting languages. The analysis plan may be updatable via a user interface or an API.

Emulation analysis module is configured to emulate operations of an object and monitor for anomalous behavior. The monitoring may be accomplished by hooking certain functions associated with that object e.g. one or more APIs etc. and controlling what data is specifically returned in response to corresponding function calls e.g. force return of an application version number different than its actual number . After receipt of the returned data operations by the object are monitored. For instance the output from the object may be analyzed to determine if a portion of the output matches any of the malware identifiers.

According to one embodiment identifier matching logic is to match the identifying information of the specimen with a list of identifiers identifying a set of known malware e.g. black list and a set of known non malware e.g. white list . The list of identifiers may be collected based on prior malware detection and periodically updated from a centralized server in the cloud. If the specimen is identified as one of the matched identifiers in the list the specimen can be classified right away as either malware or non malware without having to perform a further analysis. The identifiers or identifying information may include URLs observed behaviors characteristics features hash of a malicious object reputation indicators from third party reputation service as applied to known malicious sources e.g. URLs domain names .

According to one embodiment analysis logic includes an analysis selector a plan generator and dispatch logic . Analysis selector is to select which of the static analysis dynamic analysis emulation analysis and classification should be performed. Plan generator is to configure and generate an analysis plan having one or more selected analyses and or emulation therein. Plan generator is to decide which one or both or how many of a static analysis and dynamic analysis and emulation analysis depending on the embodiment are needed their sequence order of such analyses to be performed and other protocol and parameters of these analyses. Plan generator may decide based on a set of rules not shown which may be user configurable locally or remotely via a user interface e.g. command line interface or CLI and from time to time updated from an external source. Dispatch logic may configure a VM with a set of parameters based on the information provided by object capturing logic and or preliminary filtering logic based on the customer s specific requirements or results of prior analysis or analyses. Dispatch logic then dispatches the analysis tasks to any of the analysis modules and classifier in accordance with the analysis plan. All of the information generated from object capturing logic preliminary filtering logic identifier matching logic and Dispatch logic may become part of analysis plan stored in intelligence store .

In one embodiment intelligence store may include static analysis data store to store any data generated from a static analysis which may include the static analysis result dynamic analysis store to store any data generated from a dynamic analysis which may include the dynamic analysis result emulation analysis store which may include the emulation analysis result and a context store storing any context information for example generated from controller . Models may be periodically trained and updated for example from an external centralized server.

The techniques described above can be applied in a variety of scenarios. For example in the event that the specimen is a PDF file static analysis module is configured to determine and generate additional intelligence information in a form of metadata concerning the specimen. The context may include a type of the specimen a type version and or language of an operating system in which the specimen is intended to be executed other software components e.g. a specific version of a PDF reader and other possible environment settings e.g. an amount of a memory a type of a processor date and time of the operating environment etc. Based on the context controller determines or configures an operating environment in which the specimen can be dynamically analyzed by dynamic analysis module . In one embodiment a scheduler which may be implemented as part of controller provisions and configures a virtual machine VM from a pool of VMs based in part on the information obtained from context. In this example an operating system of the VM may be configured or installed as the same as or similar to the one identified by the context as well as other software components virtual memory and processor etc. Thus the VM would be configured to be specifically tailored to the targeted operating environment in which the specimen is intended to be processed. As a result although it can dynamic analysis module does not have to analyze the specimen in other unrelated or unintended operating environments or using other unrelated or unintended software components which may significantly improve the efficiency and accuracy of the dynamic analysis.

In addition to weaponized documents such as a PDF document the specimen may be a malware type of document such as a dynamically link library DLL . For example when the specimen in the form of a DLL is received a static analysis is performed on the content file by static analysis module . The static analysis may reveal certain specific processes that are related to the DLL in question. According to one embodiment when a dynamic analysis is performed those specific processes instead of general purpose processes may be performed to determine whether the DLL is malicious. As a result the speed and accuracy of the dynamic analysis can be greatly improved. Further a static analysis may reveal only certain exported functions existed in the DLL and a dynamic analysis can focus on those existing exported functions without having to test other non existing functions.

As mentioned above under certain situations a dynamic analysis may be performed prior to a static analysis where the result of the dynamic analysis may be used by the static analysis. For example if the specimen is a packed DLL file or an executable binary the static analysis may not be able to fully examine the content based on heuristics. In this situation a dynamic analysis can unpack the file during processing of the file to reveal other software components e.g. network stack or other specific libraries . Based on the result of the dynamic analysis the static analysis can be performed on the unpacked files using related heuristics.

Note that the specific sequence order of operations as shown in is described for the purpose of illustration only other sequence orders of operations may also be performed. For example after a static analysis has been performed to generate suspicious indicators and characteristics the classifier may perform a classification based on the suspicious indicators and the characteristics. Based on the classification result if the controller determines that the result is not conclusive e.g. uncertain neither malware nor non malware the controller may initiate or configure a further analysis such as a dynamic analysis. Note that in some embodiments when the result deems to be inconclusive it simply means an intention or attempt to capture additional suspicious indicators or characteristics in an intelligent manner base on the prior discovery. In one embodiment an analysis e.g. static dynamic or emulation analysis may determine that a specimen is malicious and under certain criteria there may be value in running an additional analysis or analysis steps to capture deeper malicious indicators and or characteristics. For example an executable or a PDF file may be declared as malicious based on some analyses. Additional analysis may be performed to capture more stages of the attack. Thus even though the malicious determination has been made the controller may decide to continue performing an additional analysis to capture additional threat intelligence about the specimen which in turn result in additional blocking capability.

In another example referring back to or B a specimen is a packed file and captured by controller . After a static analysis static analysis module reveals that the packed file contains no DLL. However a dynamic analysis performed by dynamic analysis module reveals there are 2 DLLs in the packed file for example after unpacking the packed file. Based on the information provided by static and dynamic analysis modules controller and or classifier determine that at least one further analysis is required on the unpacked files. The dynamic analysis may further reveal that the content when executed accesses a network a network stack and or a specific library that would not be identified by the static analysis. All of the information generated from static analysis module and dynamic analysis module may be stored in intelligence store and available to all of the components in the system. The discrepancy may be used by the classifier as a factor in classifying the specimen.

In a further example a first static analysis performed on a specimen determines that the specimen is a packed file. In response the controller configures a dynamic analysis or emulation performed on the specimen which may unpack the file. A second static analysis may be performed on the unpacked file. The second static analysis may detect the evasion also referred to as anti detection defense or anti analysis defense such as virtual machine evasion. Based in part on the detected evasion a classifier may classify the specimen as malware.

The host OS may host a VM monitor or manager VMM also referred to as a hypervisor for managing or monitoring VMs. VM may be hosted by a guest OS. The host OS and the guest OS may be the same type of operating systems or different types of operating systems e.g. Windows Linux Unix Mac OS iOS etc. or different versions thereof. A VM is a simulation of a machine abstract or real that is usually different from the target machine where it is being simulated on . Virtual machines may be based on specifications of a hypothetical computer or emulate the computer architecture and functions of a real world computer. A virtual machine referred to herein can be any type of virtual machine such as for example hardware emulation full virtualization para virtualization and operating system level virtualization virtual machines.

The Host OS further hosts or provides an operating environment to analyzer including static analysis module malware classifier controller and emulation analysis module as described above. According to one embodiment when a specimen is received for a dynamic analysis as opposed to a static analysis performed by static analysis module a scheduler is configured to identify and select or configure a VM in this example VM from a VM pool that has been configured to closely simulate a target operating environment e.g. particular version of an OS with particular versions of certain software installed therein in which specimen is to be analyzed. In one embodiment based on an analysis result performed by static analysis module a VM such as VM is configured and scheduled by scheduler specifically tailored to an operating environment in which specimen is intended for execution. The scheduler then launches VM in which dynamic analysis module is running within VM and configured to monitor activities and behavior of specimen . An emulation analysis may be performed by emulation analysis module as described above. Furthermore the analysis results generated by static analysis module and or dynamic analysis module may be stored in corresponding VM disk files for example as part of intelligence store .

The malicious content detection system is illustrated with a server device and a client device each coupled for communication via a communication network . In various embodiments there may be multiple server devices and multiple client devices sending and receiving data to from each other and the same device can serve as either a server or a client in separate communication sessions. Although depicts data transmitted from the server device to the client device either device can transmit and receive data from the other.

Note that throughout this application network content is utilized as an example of a specimen or specimens for malicious content detection purposes however other types of content can also be applied. Network content may include any data transmitted over a network i.e. network data . Network data may include text software images audio or other digital data. An example of network content includes web content or any network data that may be transmitted using a Hypertext Transfer Protocol HTTP Hypertext Markup Language HTML protocol or be transmitted in a manner suitable for display on a Web browser software application. Another example of network content includes email messages which may be transmitted using an email protocol such as Simple Mail Transfer Protocol SMTP Post Office Protocol version 3 POP3 or Internet Message Access Protocol IMAP4 . A further example of network content includes Instant Messages which may be transmitted using an Instant Messaging protocol such as Session Initiation Protocol SIP or Extensible Messaging and Presence Protocol XMPP . In addition network content may include any network data that is transferred using other data transfer protocols such as File Transfer Protocol FTP .

The malicious network content detection system may monitor exchanges of network content e.g. Web content in real time rather than intercepting and holding the network content until such time as it can determine whether the network content includes malicious network content. The malicious network content detection system may be configured to inspect exchanges of network content over the communication network identify suspicious network content and analyze the suspicious network content using a virtual machine to detect malicious network content. In this way the malicious network content detection system may be computationally efficient and scalable as data traffic volume and the number of computing devices communicating over the communication network increases. Therefore the malicious network content detection system may not become a bottleneck in the computer network system .

The communication network may include a public computer network such as the Internet in which case a firewall may be interposed between the communication network and the client device . Alternatively the communication network may be a private computer network such as a wireless telecommunication network wide area network or local area network or a combination of networks. Though the communication network may include any type of network and be used to communicate different types of data communications of web data may be discussed below for purposes of example.

The malicious network content detection system is shown as being coupled with the network by a network interface or tap e.g. a data packet capturing device . The network tap may include a digital network tap configured to monitor network data and provide a copy of the network data to the malicious network content detection system . Network data may comprise signals and data that are transmitted over the communication network including data flows from the server device to the client device . In one example the network tap monitors and copies the network data without an appreciable decline in performance of the server device the client device or the communication network . The network tap may copy any portion of the network data for example any number of data packets from the network data. In embodiments where the malicious content detection system is implemented as a dedicated appliance or a dedicated computer system the network tap may include an assembly integrated into the appliance or computer system that includes network ports network interface card and related logic not shown for connecting to the communication network to non disruptively tap traffic thereon and provide a copy of the traffic to the heuristic module . In other embodiments the network tap can be integrated into a firewall router switch or other network device not shown or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to copy traffic from virtual networks.

The network tap may also capture metadata from the network data. The metadata may be associated with the server device and or the client device . For example the metadata may identify the server device and or the client device . In some embodiments the server device transmits metadata which is captured by the tap . In other embodiments a heuristic module described herein may determine the server device and the client device by analyzing data packets within the network data in order to generate the metadata. The term content as used herein may be construed to include the intercepted network data and or the metadata unless the context requires otherwise.

The malicious network content detection system may include a static analysis module a heuristics database not shown a scheduler a virtual machine pool a dynamic analysis module an emulator not shown and a reporting module . In some embodiments the network tap may be contained within the malicious network content detection system . The controller is to coordinate via an analysis plan at least one of a static analysis a dynamic analysis and an emulation in which one process may utilize intelligent information produced by another process and stored in intelligence store . Classifier is to classify whether a particular specimen should be classified as malware based on the static analysis dynamic analysis and or the emulation. In addition controller further examines the results of a static analysis and a dynamic analysis to determine whether a further static analysis dynamic analysis or both are needed. If so controller configures a new analysis plan or modifies an existing analysis plan to include at least one additional analysis to be performed for example based on the intelligent information provided from the previous analysis as described above. Controller may monitor or receive a feedback from any of the static analysis module dynamic analysis module emulator and or the classifier. Based on a result of any of these components the controller may modify the analysis plan to include a further analysis or alternatively it may terminate the current analysis if it is determined the result is conclusive.

The static analysis module receives the copy of the network data from the network tap and applies heuristics to the data to determine if the network data might contain suspicious network content. The heuristics applied by the static analysis module may be based on data and or rules stored in the heuristics database not shown . The static analysis module may examine the image of the captured content without executing or opening the captured content. For example the static analysis module may examine the metadata or attributes of the captured content and or the code image e.g. a binary image of an executable to determine whether a certain portion of the captured content matches a predetermined pattern or signature that is associated with a particular type of malicious content. In one example the static analysis module flags network data as suspicious after applying a heuristic analysis. This detection process is also referred to as static malicious content detection. The suspicious network data may then be provided to the scheduler . In some embodiments the suspicious network data is provided directly to the scheduler with or without buffering or organizing one or more data flows.

When a characteristic of the packet such as a sequence of characters or keyword is identified that meets the conditions of a heuristic a suspicious characteristic of the network content is identified. The identified characteristic may be stored for reference and analysis. In some embodiments the entire packet may be inspected e.g. using deep packet inspection techniques and multiple characteristics may be identified before proceeding to the next step. In some embodiments the characteristic may be determined as a result of an analysis across multiple packets comprising the network content. A score related to a probability that the suspicious characteristic identified indicates malicious network content is determined.

The static analysis module may also provide a priority level for the packet and or the features present in the packet. The scheduler may then load and configure a virtual machine from the virtual machine pool in an order related to the priority level and dispatch the virtual machine to the dynamic analysis module to process the suspicious network content.

The static analysis module may provide the packet containing the suspicious network content to the scheduler along with a list of the features present in the packet and the malicious probability scores associated with each of those features. Alternatively the static analysis module may provide a pointer to the packet containing the suspicious network content to the scheduler such that the scheduler may access the packet via a memory shared with the static analysis module . In another embodiment the static analysis module may provide identification information regarding the packet to the scheduler such that the scheduler or virtual machine may query the static analysis module for data regarding the packet as needed.

The scheduler may store the received packets for example in a queue and determines an order of processing of the suspicious network content based on associated priorities assigned to each. The priorities may be based at least in part on the results of prior analysis. The scheduler also determines the length of time for processing the suspicious network content based at least in part on the results of prior analysis and the waiting queue of network content.

The scheduler may identify an operating environment to be used to process the suspicious network content in a virtual machine for example based at least in part on the results of the static analysis or other prior analysis. A virtual machine may itself be executable software that is configured with the identified operating environment. The virtual machine may be retrieved from the virtual machine pool . Furthermore the scheduler may identify for example an application program required to process the packets for example a Web browser and retrieve a virtual machine equipped with the web browser.

The scheduler may retrieve and configure the virtual machine with features that may include ports that are to receive the network data select device drivers that are to respond to the network data and other devices that can respond to the network data. In some embodiments prior analyses such as the static analysis may identified these features. These features may be provided virtually within the virtual environment.

The virtual machine pool may be configured to store one or more virtual machines. The virtual machine pool may include software and or a storage medium capable of storing software. The virtual machine pool may store any number of distinct virtual machines.

The dynamic analysis module simulates the receipt and or processing of the network content to analyze the effects e.g. behaviors of the network content. There may be multiple dynamic analysis modules to simulate multiple streams of network content. The dynamic analysis module may be configured to monitor the virtual machine for indications that the suspicious network content is in fact malicious network content. Such indications may include unusual network transmissions unusual changes in performance and the like. This detection process is referred to as a dynamic malicious content detection.

The dynamic analysis module may flag the suspicious network content as malicious network content according to the observed behavior during processing of the content within the virtual machine. The reporting module may issue alerts indicating the presence of malware and using pointers and other reference information identify the packets of the network content containing the malware. This information may include all or an appropriate portion of that stored for the network content in the intelligence store . Additionally the server device may be added to a list of malicious network content providers and future network transmissions originating from the server device may be blocked from reaching their intended destinations e.g. by firewall .

The computer network system may also include a further communication network which couples the malicious content detection system MCDS with one or more other MCDS of which MCDS and MCDS are shown and a management system which may be implemented as a Web server having a Web interface. The communication network may in some embodiments be coupled for communication with or part of network . The management system is responsible for managing the MCDS and providing updates to their operation systems and software programs. Also the management system may cause malware signatures generated by any of the MCDS to be shared with one or more of the other MCDS for example on a subscription basis. Moreover the malicious content detection system as described in the foregoing embodiments may be incorporated into one or more of the MCDS or into all of them depending on the deployment. Also the management system itself or another dedicated computer station may incorporate the malicious content detection system in deployments where such detection is to be conducted at a centralized resource.

Further information regarding an embodiment of a malicious content detection system can be had with reference to U.S. Pat. No. 8 171 553 the disclosure of which being incorporated herein by reference in its entirety.

As described above the detection or analysis performed by the heuristic module may be referred to as static detection or static analysis which may generate a first score e.g. a static detection score according to a first scoring scheme or algorithm. The detection or analysis performed by the analysis engine is referred to as dynamic detection or dynamic analysis which may generate a second score e.g. a dynamic detection score according to a second scoring scheme or algorithm. The first and second scores may be combined according to a predetermined algorithm to derive a final score indicating the probability that a malicious content suspect is indeed malicious. Where other analyses are performed they may result in additional scores may be combined to derive the final score.

Furthermore detection systems and may be deployed in a variety of distribution ways. For example detection system may be deployed as a detection appliance at a client site to detect any specimen for example at a local area network LAN of the client. In addition any of MCDS and MCDS may also be deployed as dedicated data analysis systems. Systems and may be configured and managed by a management system over network which may be a LAN a wide area network WAN such as the Internet or a combination of both. Management system may be implemented as a Web server having a Web interface to allow an administrator of a client e.g. corporation entity to log in to manage detection systems and . For example an administrator may able to activate or deactivate certain functionalities of malicious content detection systems and or alternatively to distribute software updates such as malicious content definition files e.g. malicious signatures or patterns or rules etc. Furthermore a user can submit via a Web interface specimen to be analyzed for example by dedicated data analysis systems . As described above malicious content detection includes static detection and dynamic detection. Such static and dynamic detections can be distributed amongst different systems over a network. For example static detection may be performed by detection system at a client site while dynamic detection of the same content can be offloaded to the cloud for example by any of detection systems . Other configurations may exist.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices. Such electronic devices store and communicate internally and or with other electronic devices over a network code and data using computer readable media such as non transitory computer readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and transitory computer readable transmission media e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals digital signals .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. firmware software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

