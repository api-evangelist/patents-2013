---

title: Interest graph-powered search
abstract: A method, which identifies information of interest within an organization, determines use data that characterizes relationships among information items within the organization, where the information items include user data and collections of information items. The method generates interest data indicating affinities among the information items based on the determined use data. After receiving a query for data regarding the information items, the method responds to the query by providing one or more results based on the generated interest data. More details are provided herein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09497277&OS=09497277&RS=09497277
owner: Highspot, Inc.
number: 09497277
owner_city: Seattle
owner_country: US
publication_date: 20131220
---
This application claims the benefit U.S. Patent Provisional Application No. 61 745 365 filed on Dec. 21 2012 entitled INTEREST GRAPH POWERED SEARCH which is herein incorporated by reference in its entirety. This application is related to U.S. Provisional Patent Application No. 61 800 042 filed Mar. 15 2013 entitled INTEREST GRAPH POWERED FEED U.S. Provisional Patent Application No. 61 800 322 filed Mar. 15 2013 entitled INTEREST GRAPH POWERED BROWSING U.S. Provisional Patent Application No. 61 800 497 filed Mar. 15 2013 entitled INTEREST GRAPH POWERED SHARING and U.S. Provisional Patent Application No. 61 914 266 filed Dec. 10 2013 entitled SKIM PREVIEW all of which are herein incorporated by reference in their entireties.

Currently it is often very difficult inside of an organization to find the information that employees need to do their jobs. This is in contrast to consumer targeted search such as Google or Amazon where users can typically find the answer to their question or product of interest easily. As one motivating example there are over 400 Million web documents containing the word Volkswagen . Nevertheless Google returns www.volkswagen.com as the first result for the query volkswagen. The typical experience in enterprise search is far worse. A user may type the query sql and see thousands of documents containing the term sql in no particular order.

Both for public web search and for Amazon catalog search term matching is only a single component of relevance. Google and Bing use document popularity as determined by clicks and incoming web links to boost the position of volkwagen.com to the top. Amazon similarly has product sales figures manufacturer reputation and ratings that can be combined with term matching.

In contrast search within and across organizations when it exists at all is implemented as a text retrieval problem where each document exists only as a collection of text and does not have popularity rating or activity information. In particular these search systems have very limited data about user behavior. Due in large part to this lack of what is called user signal search systems rely heavily on content indexing. Indexing does a good job of identifying potentially relevant pieces of information but a very poor job of ranking it. As a result searches routinely come back with hundreds or thousands of results with the desired information buried somewhere inside them. Employees within organizations especially larger ones routinely give up entirely on search systems and rely on alternative means to find the information they need such as email private repositories that they maintain and the like .

It would be helpful to have a system that overcomes the above problems as well as one that provides additional benefits. Overall the examples herein of some prior or related systems and their associated limitations are intended to be illustrative and not exclusive. Other limitations of existing or prior systems will become apparent to those of skill in the art upon reading the following Detailed Description.

Various examples of the invention will now be described. The following description provides certain specific details for a thorough understanding and enabling description of these examples. One skilled in the relevant technology will understand however that the invention may be practiced without many of these details. Likewise one skilled in the relevant technology will also understand that the invention may include many other obvious features not described in detail herein. Additionally some well known structures or functions may not be shown or described in detail below to avoid unnecessarily obscuring the relevant descriptions of the various examples.

The terminology used below is to be interpreted in its broadest reasonable manner even though it is being used in conjunction with a detailed description of certain specific examples of the invention. Indeed certain terms may even be emphasized below however any terminology intended to be interpreted in any restricted manner will be overtly and specifically defined as such in this Detailed Description section.

This disclosure describes the creation and use of an interest graph within an organization such as a company and between companies to search for information. The organization may include a structured body of users with associated roles each having access to a set of information items. In some cases the organization includes a group of users on a private network sharing an internet domain. An interest graph expresses the affinity between people and information the likelihood that a particular piece of information is of interest to a particular person. The information might be a document a presentation a video an image a web page a report or the like typically referred to herein as items or data items. Users information needs can include collections of items sections of an item or a person.

The interest graph represents many kinds of relationships including between users and other users users and items and users and collections. The interest graph is computed using data both from the set of items and from user behavior. In some examples there are three steps for computing the interest graph. The first step is to generate the data the system provides mechanisms for the user to quickly browse share and organize items. By using those features the users create a large amount of usage data much of which is currently unavailable to existing information management and retrieval software. The next step is to gather the data where the system logs user activities in a set of data structures. The third step is to compute the graph. By running a series of computations over the data gathered from users the system computes data structures that are used for a variety of search operations. The disclosed techniques honor access restrictions that users specify for each item so that only authorized people will see any item.

One of the most common ways that users look for information online is to type a query into a search box. The system uses the query to identify a candidate set of items collections and people that match it attempt to rank order those candidates based on what is most likely to satisfy that user s request and present the results. The system uses the interest graph to support search across items within a particular company and between multiple companies. is a display page illustrating a query and results page in accordance with some embodiments of the disclosed technology. In this example a search and the set of results that have been returned by the system are displayed. In this example a user has performed a search for vpn and the system has identified 31 results including Daewoo Engineering and Construction Deploy s Korea s Largest SSL VPN and Juniper Networks Enables Secure Remote Access For the Thai Technology Institute . The results are ranked based on how likely they are to interest the user as explained below. For each result the system highlights the elements of the search phrase that matched text associated with the item.

In a basic search the user provides a string and the system identifies items that the user has access to and that match the string. The items may include information which has been created by another user within the same organization which will be referred to as an internal item or by a user from elsewhere an external item . The system allows items to be shared within and across organizations and for their access to be restricted to particular sets of people.

Search completion is a feature that shows possible search queries while the user is typing in the search box see for an example . is a display page illustrating a search completion feature in accordance with some embodiments of the disclosed technology. In this example a user has typed se in the search box and the system has shown secure remote secure services gateway security gateway and security standards as possible search queries . Search completion is a very useful shortcut for users showing them search queries that are likely to be relevant and that have a good probability of yielding useful results.

Additionally the set of the completions can include information about the number of results that would be returned by each query. This information can help the user to formulate a query that will return a satisfactory number of results. Additionally some of the completions can include a speculative scoping of the search to a user specified collection such as a spot. For example for the query vision one suggestion could be vision in the Benefits Spot 5 docs . Selecting this suggestion will return the 5 documents that are contained in this spot. Similarly the scope can a single user or group of users. For example sql could yield sql by Robert Wahbe 20 docs . Selecting this would show the 20 docs uploaded by Robert that contain the term sql. is a display page illustrating a search completion and number of results feature in accordance with some embodiments of the disclosed technology. In this example a user has typed paul into search box and the system has shown paul s or textteaser paul feed paul viola and paul roe as possible search queries and their corresponding number of results i.e. 96 30 7 and 2 . The system has also shown the number of results of paul in various collections such as Music 12 Systems 12 UX Design 10 and Market Intelligence 9 .

For business information it is common that the same item appear many times in many different collections of items. For example a particularly useful presentation might be placed in an official repository downloaded and emailed to many people and then posted to a variety of different collections. The system identifies cases where an item has been duplicated combines those into a single item in the results presented to the user and uses the interest graph to choose the one most likely to interest that user. is a display page illustrating de duplication of identified search results in accordance with some embodiments of the disclosed technology. shows a search that has found at least two duplicated items China s Ministry of Railways Secures Information Management System and Southeast University Builds a University Without Walls and combined each set of duplicated items into a single instance.

The operations above rely on the interest graph. is a block diagram illustrating processing of the system for creating an interest graph in accordance with some embodiments of the disclosed technology. In some examples the process of building the interest graph includes generating the data gathering the data and computing the interest graph.

In some examples an interest graph is computed from a number of different data sources and benefits greatly from having additional data to analyze. Machine learning research and practice consistently shows that accuracy improves as the number of data sources and the amount of data increases. This is referred to as user signal.

Therefore step 1 is generating the data which means encouraging users to engage in activities that generate signal. Historically activities that provide the most useful data have been overly complex inside of companies and hence have not occurred as often as they otherwise might.

For example sharing files with others in a rich online experience like a web site that offers a structured view supports search and enables browsing has been cumbersome to set up. As a result people often settle for simple sharing solutions such as relying on email attachments or on keeping their files in a shared disk drive. The disclosed system provides a simple and easy to use sharing solution that encourages users to interact more heavily with each other s information and hence to generate more signal.

Browsing files on a web site generally involves downloading them to the local computer and viewing them in a program like Microsoft Word or PowerPoint which is quite slow. Accordingly users are discouraged from browsing as many items as they might otherwise do. The disclosed system provides a much faster way to browse called skim preview which offers very fast viewing of items and collections of items. Skim allows users to explore information online without requiring them to download anything or launch any applications on their machine encouraging far more browsing. Skim preview works by tracking the way that the user slides their mouse across the item s thumbnail. Based on how far the mouse has moved horizontally across the thumbnail a preview of that part of the item is shown. For example if the user is running the mouse over the thumbnail for a presentation as the mouse moves left to right each slide of the presentation is shown in succession. By sliding the mouse back and forth at any desired speed the user can quickly view all the slides. Similarly for a document the thumbnails show each page of the document. There is an equivalent browsing experience for each type of information supported by the system. In seconds the user can see every part of the item it is much faster than the traditional method of downloading the file to a client application.

Another example is organizing information. The traditional approach is to use a directory structure which provides a limited way to establish a taxonomy and to associate related files. Another approach is to use metadata tagging where items are assigned a set of properties. These systems have been deployed extensively within companies and are generally felt to be rigid and awkward most users resist them and the vast majority of information is never put into them. The disclosed system offers lists and folders that support dragging and dropping items into multiple places a model that is familiar to users from other domains like organizing music into playlists. The system offers three levels of hierarchy 1 spots which are collections of items that can be found via a directory or search 2 folders which exist within a spot and optionally allow users to group a set of lists together and 3 lists which are simple groups of items. An item can be in zero one or many different lists. Users can place individual items into lists or can drag a group into a list. This is a much simpler structuring model than is traditionally used by systems like enterprise content managers. Each user can create their own hierarchy if they wish and can take an item from one spot and put it into another one using an operation called respot . So users might create a spot called Widget Marketing which contains the marketing material for widgets. Within that spot they might have a folder called vertical markets containing lists such as manufacturing media etc. They might have another folder called sales stage with lists such as pre sale proof of concept post sale . Any piece of information can be put into any number of lists allowing for a flexible browsing experience based on spots folders and lists.

The first step towards creating an effective interest graph is to provide an information management environment that makes it much easier and faster for users to engage in useful data generating activities and generate user signal to be analyzed.

The next step is to gather the data. Producing an accurate interest graph relies on detailed analysis of data from a variety of sources. Table 1 at the bottom of this section lists and defines input data structures used by the system.

A source of data is the way that users interact with each piece of information. The system tracks actions that a user performs on any item share download copy from one collection to another recommend comment etc and monitors how much time they spend looking at each part of a document presentation video training program or the like.

Traditional content systems invoke other programs when users wish to view the contents of a document for example such an environment might download a presentation and invoke Microsoft PowerPoint to let the user read it. What users do inside of a program like PowerPoint is usually opaque to the content manager. And most such editing programs e.g. word processors or presentation programs do not track and report which parts of the file users spend time on and how much time. Therefore user engagement with each piece of information does not generate any signal that can be analyzed.

The disclosed system presents high resolution previews and views of various document types that are available online and can be quickly browsed using skim preview no download is required and no software applications need to be installed or invoked on the user s machine. The system monitors views and previews tracking how often they happen and how long the user spends looking at any part of the item.

The actions that users have taken on items and their viewing behavior are captured in the ItemScore CollectionScore and RecentActivity data structures. In addition the system creates a feedback loop whenever it presents items that might be of interest to the user the click through behavior is tracked in ClickThroughs.

Another valuable clue to user interest is the set of people to whom they are connected. The system computes the social graph which captures the connections between people. Such connections can take many different forms for example 

The system has a variety of ways that information can be categorized it provides a hierarchy of collections and any piece of information can be in any number of those collections. One collection may have a link to another. As a result there is also an information graph capturing the relationships between items of information. The system stores that graph in the ItemConnectedness data structure. Different types of collections imply different levels of relationship between the items.

Similarly the system aggregates these individual relationships between items into a measure of connectedness between collections stored in CollectionConnectedness.

The system offers search both within a collection and across many of them. There is valuable information in the phrases that users search on and their subsequent decisions whether or not to click through on the results presented. The system keeps track of queries that have been performed in QueryCount the ones that are most popular e.g. top 10 top 20 top 15 in the past 24 hours in PopularQueries and the subsequent click through decisions by users in ClickThroughs.

In some examples the system computes the interest graph by taking the raw user signal captured in the input data structures described in the previous section and processing that data through a series of intermediate computations.

Each of the intermediate computations is called Compute where is the name of the output that it generates. For example Compute UserUserAffinity produces the UserUserAffinity data structure. The system runs these intermediate computations at periodic intervals and the outputs are updated over time as additional user data is gathered. Table 2 enumerates the intermediate data structures that are produced by these algorithms.

When the system displays a set of values to the user it invokes one of the ranking computations. In some examples the names of these ranking computations takes the form Ranker depending on what kind of values they are ranking where represents the kind of values being ranked e.g. RelatedItemRanker ranks related items . Ranking computations are given an argument and then compute a set of ranked results based on that argument and on a set of other inputs.

The system uses the ranking computations to produce output that users can see. For example suppose the user is looking at an item and the system wants to display a set of related items next to it. The goal is to identify the items that are most likely to interest the user. For example if a salesperson is looking at a presentation about a particular product they might also be interested in a price sheet for the product white papers on how to use that product most effectively presentations and documents about related products that work with it etc.

The system uses the ranking computation called RelatedItemRanker to identify and rank related items. When the user pulls up a particular item on a web site the system hands that item to RelatedItemRanker which returns the ranked set of items in a RankedItems data structure that it has identified as being most likely to be of interest to the user. The computation relies on one input data structure the popularity of items ItemScore and the results from two intermediate computations the likelihood that the current user would be interested in any particular item UserItemAffinity and the degree of similarity between any two items ItemItemAffinity .

These computations operate on input data structures and on the results produced by other intermediate computations. In each case they produce a data structure as output with the results.

These functions or algorithms compute the degree of affinity between pairs of things. Affinity means the likelihood that interest in one of those items means interest in the other. Note that affinity is not symmetrical a salesperson who is looking at a particular product description might be highly likely to look at the price sheet containing that product among hundreds of others but somebody looking at the price sheet is much less likely to care about any particular product s description.

This algorithm operates on ContentVectors applying a clustering algorithm to compute ItemClusters that represent groups of items that have related textual content. In some examples the system uses the Mahout software package to perform this computation applying canopy generation to identify cluster centroids then using k means clustering based on the cosine of the Euclidean distance between documents as a similarity metric. One of ordinary skill in the art will recognize that other clustering algorithms can be used.

The inputs are ItemConnectedness the degree to which the items are close in the information graph ItemScore the amount of interactions users have had with items and ItemClusters the degree to which the contents of items are related . Here is the algorithm 

AssociationRuleAnalysis determines which pairs of items are frequently viewed together. In some examples the system uses the algorithm known as Apriori to determine these pairs. One of ordinary skill in the art will recognize that there are a variety of similar algorithms that could also be used. The weighting parameters A B and C allow the system to balance the importance of items being placed in related collections the popularity of particular items with users and the degree to which other users have viewed both items.

This algorithm computes the degree of affinity between pairs of users the likelihood that each user is interested in what the other one does. The inputs are ItemScore which captures how users have interacted with items and UserConnectedness the degree to which they are connected in the social graph . The algorithm is 

The system uses for example the Mahout software to compute the Pearson correlation of behavior across the weighted sum of item scores. The user connectedness value is normalized into the range 0 1 using hyperbolic tangent. Then the values are weighted to reflect the relative importance of behavior vs. the social graph. The weighting parameters A and B allow the system to balance the importance of these values. Note that one of ordinary skill in the art will recognize that numerous other algorithms can be used to compute behavioral similarity e.g Euclidean distance or the Tanimoto Coefficient and normalization e.g. the logistic function or Z scores .

This algorithm computes the degree of affinity between every user and every item in the system. The inputs are UserUserAffinity from above ItemScore and ItemConnectedness. The algorithm is 

The system computes the sum of the activity that other users have performed on the item weighted by affinity to those users and the sum of item activities that the current user has performed weighted by the affinity of the current item to those other items . Those two values are combined in a weighted sum based on the relative importance of behavior vs. item connectivity. In some examples connectedness is normalized using hyperbolic tangent but one of ordinary skill in the art will recognize that other algorithms could be used.

This algorithm computes the degree of affinity between every user and every collection where a collection is a grouping of items. Note that collections can overlap can be organized into a hierarchy or can be disjoint the model works in any of those cases. The inputs are UserUserAffinity from above CollectionConnectedness the degree to which collections are connected ItemHashCodes the hash values of every item and CollectionScore the activities user have performed on each collection . The algorithm is 

The system computes the frequency with which the same item appears in every pair of collections using a constant weight. The system then computes the sum of the activity other users have performed on the collection weighted by the affinity to those users and the sum of collection activities that the current user has performed weighted by the affinity of the current collection to those collections based on both behavior and similarity of content . Note that connectedness is normalized using hyperbolic tangent but other algorithms could be used. These values are then combined in a weighted sum where the weights reflect the relative importance of user behavioral similarity vs. structural relationships and similarity of content.

This algorithm computes the degree of affinity between every user and every query that has been executed on the system. The inputs are UserUserAffinity from above and QueryCount a summary of the queries that have been executed by each user . The algorithm is 

The system computes the sum of the number of times other users have executed this particular query weighted by the affinity with that other user. The result is then multiplied by a weight to compute affinity for this user and the query.

This algorithm computes the amount of influence that each User has within the community of users on the system. Its inputs are UserConnectedness the degree of connectivity in the social graph and ItemScore. The algorithm is 

The system computes a weighted sum of how connected other users are to a particular user and for how much activity has been generated by the items that the particular user created.

The ranking computations produce ranked lists of items a typical use for the ranking computations is to produce lists that are displayed to users in various contexts. For example ItemRanker is used in deciding which items to display to users as the result of a search query. ItemRanker takes candidate items that might match the query and orders them appropriately.

Each ranking computation is invoked on an input. Using that input and data structures that are passed to it per the workflow in the computation produces a ranked set as the output.

This algorithm is invoked on an item and also gets ItemScore ItemItemAffinity and UserItemAffinity. The algorithm is 

The system finds the items most related to Item by computing a weighted sum. The factors are the total amount of user activity against other items weighted by the affinity of those other items to this one and the current user s affinity to the item.

When this algorithm is invoked it is optionally given an item and also gets RecentActivity the set of activities that have recently been performed on the system such as the set of activities performed during the last year month week day hour or portion thereof UserUserAffinity and UserItemAffinity. If an item is provided it returns the set of activities that have been performed on that item ranked in terms of how likely they are to interest the current user. If no item is provided it returns the list of activities on any item in the system ranked in terms of how likely they are to interest the current user. The algorithm is 

The system chooses a candidate set of activities. For each activity in the candidate set of activities the system computes a ranking using a weighted product of the intrinsic interest for that type of activity the affinity of the current user with the user who performed the activity and the affinity of the current user for the item on which the activity was performed.

This algorithm is invoked on a set of items which is either unranked an ItemSet or already ranked with a preliminary ranking a RankedItems set and also gets ItemScore ItemHashCodes and UserItemAffinity. The algorithm is 

The system computes the sum of user actions against each item in the set weighted by the affinity of the current user to the other users and then computes the weighted product of that sum the affinity of the user to the item and the existing rank of each item if it was provided . The weights reflect the relative importance of user behavior directly against the items vs. the predictability of user interest vs. the effectiveness of the original input ranking. The output is a ranking for each unique item in the set.

This algorithm is invoked on a set of collections which is either unranked a CollectionSet or ranked a RankedCollections set and also gets CollectionScore. The algorithm is 

The system computes the sum of user actions against each collection weighted by the affinity of the current user to the other users and then computes the weighted product of that sum the affinity of the user to the collection and the existing rank of each collection if it was provided . The weights reflect the relative importance of user behavior directly against the collections vs. the predictability of user interest vs. the effectiveness of the original collection ranking. The output is a ranking for each collection in the input set.

This algorithm is invoked on a set of people which is either unranked a PeopleSet or ranked a RankedPeople set and also gets UserUserAffinity and UserInfluence. The algorithm is 

For each of the users being ranked the system computes the weighted product of their influence on other users the affinity of the current user to the other users and the existing rank of that user if it was provided . The weights reflect the relative importance of influence affinity and the effectiveness of the original ranking. The output is a ranking for each user in the input set.

This algorithm is invoked on a partial query string and computes the set of completions for it suggested full queries the user might have in mind and also gets QueryCount UserQueryAffinity and the InvertedIndex. This algorithm returns up to COMPLETION MAX ranked query completions. COMPLETION MAX may be defined by a user or an administrator of the system. The algorithm is 

The system computes query completions from the set of queries that have already been executed and from textual analysis of the inverted index. In some cases the system biases towards the former but fills out the potential query list from the latter as needed to reach the desired number of completions. The rank for previously executed queries is a weighted sum of the number of times the query has been executed and the affinity of the current user to each query. The rank for matching lexemes is the count of that lexeme s appearances weighted accordingly. The output is a ranked set of query completions.

The following discussion provides a brief general description of a suitable computing environment in which the invention can be implemented. Although not required aspects of the invention are described in the general context of computer executable instructions such as routines executed by a general purpose data processing device e.g. a server computer wireless device or personal computer. Those skilled in the relevant art will appreciate that aspects of the invention can be practiced with other communications data processing or computer system configurations including Internet appliances hand held devices including personal digital assistants PDAs wearable computers all manner of cellular or mobile phones including Voice over IP VoIP phones dumb terminals media players gaming devices multi processor systems microprocessor based or programmable consumer electronics set top boxes network PCs mini computers mainframe computers and the like. Indeed the terms computer server host host system and the like are generally used interchangeably herein and refer to any of the above devices and systems as well as any data processor.

Aspects of the invention can be embodied in a special purpose computer or data processor that is specifically programmed configured or constructed to perform one or more of the computer executable instructions explained in detail herein. While aspects of the invention such as certain functions are described as being performed exclusively on a single device the invention can also be practiced in distributed environments where functions or modules are shared among disparate processing devices which are linked through a communications network such as a Local Area Network LAN Wide Area Network WAN or the Internet. In a distributed computing environment program modules may be located in both local and remote memory storage devices.

Aspects of the invention may be stored or distributed on tangible computer readable media including magnetically or optically readable computer discs hard wired or preprogrammed chips e.g. EEPROM semiconductor chips nanotechnology memory biological memory or other data storage media. Alternatively computer implemented instructions data structures screen displays and other data under aspects of the invention may be distributed over the Internet or over other networks including wireless networks on a propagated signal on a propagation medium e.g. an electromagnetic wave s a sound wave etc. over a period of time or they may be provided on any analog or digital network packet switched circuit switched or other scheme .

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling or connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above Detailed Description of examples of the invention is not intended to be exhaustive or to limit the invention to the precise form disclosed above. While specific examples for the invention are described above for illustrative purposes various equivalent modifications are possible within the scope of the invention as those skilled in the relevant art will recognize. For example while processes or blocks are presented in a given order alternative implementations may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified to provide alternative or subcombinations. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed or implemented in parallel or may be performed at different times. Further any specific numbers noted herein are only examples alternative implementations may employ differing values or ranges.

The teachings of the invention provided herein can be applied to other systems not necessarily the system described above. The elements and acts of the various examples described above can be combined to provide further implementations of the invention. Some alternative implementations of the invention may include not only additional elements to those implementations noted above but also may include fewer elements.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the invention can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further implementations of the invention.

These and other changes can be made to the invention in light of the above Detailed Description. While the above description describes certain examples of the invention and describes the best mode contemplated no matter how detailed the above appears in text the invention can be practiced in many ways. Details of the system may vary considerably in its specific implementation while still being encompassed by the invention disclosed herein. As noted above particular terminology used when describing certain features or aspects of the invention should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the invention with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the invention to the specific examples disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the invention encompasses not only the disclosed examples but also all equivalent ways of practicing or implementing the invention under the claims. In some cases various steps in the algorithms discussed herein may be added altered or removed without departing from the disclosed subject matter. Those skilled in the art will appreciate that features described above may be altered in a variety of ways. For example the order of the logic may be rearranged sublogic may be performed in parallel illustrated logic may be omitted other logic may be included etc.

To reduce the number of claims certain aspects of the invention are presented below in certain claim forms but the applicant contemplates the various aspects of the invention in any number of claim forms. For example while only one aspect of the invention is recited as a means plus function claim under 35 U.S.C sec. 112 sixth paragraph other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 6 will begin with the words means for but use of the term for in any other context is not intended to invoke treatment under 35 U.S.C. 112 6. Accordingly the applicant reserves the right to pursue additional claims after filing this application to pursue such additional claim forms in either this application or in a continuing application.

