---

title: Percent quotas for deduplication storage appliance
abstract: In one embodiment, the storage system maintains a plurality of usage records corresponding to a plurality of logical file system namespaces representing one or more directories each having one or more files, each file being stored in the storage system as a plurality of segments in a deduplicated manner. In one embodiment, the storage system identifies a first set of the usage records corresponding to a first of the file system namespace, wherein the first set of usage records contains information of logical and physical storage space used by one or more of the file system namespaces. According to one aspect of the invention, the storage system determines a percentage of the storage system available to the first file system namespace based on the first set of usage records and a provisioned percent quota.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09383936&OS=09383936&RS=09383936
owner: EMC Corporation
number: 09383936
owner_city: Hopkinton
owner_country: US
publication_date: 20130305
---
Embodiments of the present invention relate generally to data storage systems. More particularly embodiments of the invention relate to determining a percentage of the storage system that is available to a user based on a percentage quota.

On a backup storage appliance system administrators often divide storage for different collections of backup data e.g. backup directories may be created for different user groups. For example separate backup directories may be created for sales development and customer support. The prevailing solution to dividing storage is to assign a quota for each backup directory. Conventionally there are two basic types of disk quotas. The first known as a usage quota or block quota limits the amount of disk space that can be used by provisioning a maximum byte usage for the backup directory. The second known as a file quota or inode quota limits the number of files and directories that can be created on the backup directory. Through the use of quotas system administrators are better able to manage backup storage appliance space. Using a quota setting for backup directory allows a storage appliance to report available space for a backup directory i.e. the difference between used and allotted storage space. The report of available space allows system administrators to recognize when storage usage approaches quota limits and take action to prevent the quota limit from being reached. Additionally the report enables administrators to prevent overuse of storage space i.e. stop backup file writes when a quota limit is reached. This prevents exceeding the allotted provisioned storage space thus ensuring that one backup directory will not encroach on another backup directory s space.

Block quotas and file quotas work well for conventional undeduplicated storage systems. However with deduplicated backup storage a new type of quota is needed because physical storage is shared across backup directories. A deduplicating storage system consists of several levels of logical data abstraction above the physical disk storage. At the highest level a logical namespace exists which allows a user to access data stored on the disk through an external application which resides on a client. A user can access data through any of the following protocols virtual tape libraries VTL Data Domain BOOST Common Internet File system CIFS and Network File System NFS . Each namespace references represents one or more hierarchies of one or more directories and stored within each directory are files e.g. user text files audio or video files. Files in turn are segmented into a collection of data segments chunks which are stored on a physical disk. In a deduplicated storage system the data segments are hashed to create fingerprints which are used in determining whether the data segment already exists on the physical disk. If the generated fingerprint does not match a collection of fingerprints that is currently stored on the storage system i.e. the data segment does not currently exist on the storage system the data segment is written to the physical disk storage and the new fingerprint is added the existing collection of fingerprints representing the existing data segments on the physical disk storage. On the other hand if the fingerprint of a new data segment matches a fingerprint in the collection of existing fingerprints then the data segment is not stored onto the physical data storage.

Deduplication is performed across all data on the entire storage system. Thus a backup directory cannot be clearly associated with the physical storage space it occupies because the same storage space may be shared by multiple backup directories. Conventional block quota and file quota systems do not provide status of storage usage which accounts for deduplication resulting in under provisioning of the storage system. Some backup applications have started using the deduplication ratio in an effort to enforce quotas more efficiently. A deduplication ratio is derived by dividing the used logical space by the used physical space. This deduplication ratio is then applied against the logical size of the files to estimate the physical space the files will require. However there are two problems with this quota system. First the deduplication ratio must be calculated using the entire back up appliance logical and physical space since there is no measurement for back up directory physical used space. Second deduplication ratio of all data on the storage system dynamically changes as new backup files are added and old backup files are expired. Thus an erroneous high deduplication ratio leads to over provisioning that may cause backup files to fail as the storage system physical space usage reaches full capacity. Conversely an erroneous low deduplication ratio leads to under provisioning and the storage system will not utilize all available physical storage space. Thus using the deduplication ratio to derive a fixed block quota is problematic.

Various embodiments and aspects of the inventions will be described with reference to details discussed below and the accompanying drawings will illustrate the various embodiments. The following description and drawings are illustrative of the invention and are not to be construed as limiting the invention. Numerous specific details are described to provide a thorough understanding of various embodiments of the present invention. However in certain instances well known or conventional details are not described in order to provide a concise discussion of embodiments of the present inventions.

Reference in the specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in conjunction with the embodiment can be included in at least one embodiment of the invention. The appearances of the phrase in one embodiment in various places in the specification do not necessarily all refer to the same embodiment.

Throughout the description a percent quota system is described with respect to a directory of a file system. However it will be appreciated that the percent quota system of the present invention is not so limited. The mechanisms discussed herein are equally applicable to any logical partition of a file system including for example a logical file system namespace.

According to some embodiments in response to data being written to the storage system usage records are updated. In one embodiment the usage records include an appliance logical size record which represents the size sum of all logical files maintained by the storage system a directory logical size record which represents the size sum of all logical files maintained by a particular directory on the storage system an appliance physical used record which represents the sum size of physical space of the storage system used after deduplication and compression has been performed on the logical files and an appliance physical available record which represents the physical space available on the storage system. In one embodiment the usage records are used by a percent quota manager to determine a percentage of the storage system available to a directory. In such an embodiment the percent quota manager determines a directory logical percent record of the directory by dividing the directory logical size record by the appliance logical size record and multiplying the quotient by a predetermined constant the result representing the percentage of the storage system logical space used by the directory.

In one embodiment the percent quota manager then determines the directory physical used record based on e.g. by multiplying the directory logical percent record by the appliance physical used record representing the physical space used by the directory. The directory percent used record is then determined based on e.g. by dividing the directory physical used record by the appliance physical capacity and based on e.g. multiplying the result by a constant the directory percent used record representing the percentage of the storage system physical space used by the directory. In one embodiment the percentage of the storage system physical space available to the directory is then determined based on e.g. by subtracting the directory percent used record from a provisioned percent quota dividing the difference by 100 and based on e.g. multiplying the quotient by the appliance physical space available.

According to one aspect of the invention the percentage of the storage system physical space available to the directory is determined periodically at predetermined intervals. In another embodiment the percentage of the storage system physical space available to the directory is determined after a new file represented by the directory is written to the storage system. In another embodiment the percentage of the storage system physical space available to the directory is determined in response to a request to write to the directory. In yet another embodiment the percentage of the storage system physical space available to the directory is determined in response to a request by an administrator.

Referring now to the Figures in which like numerals represent the same or similar elements and initially to which is a block diagram illustrating a storage system according to one embodiment of the invention. Referring to system includes but is not limited to one or more client systems communicatively coupled to storage system over network . Clients may be any type of clients such as a server a personal computer e.g. desktops laptops and tablets a thin client a personal digital assistant PDA a Web enabled appliance a gaming device a media player or a mobile phone e.g. Smartphone etc. Network may be any type of networks such as a local area network LAN a wide area network WAN such as Internet a corporate intranet a metropolitan area network MAN a storage area network SAN a bus or a combination thereof wired and or wireless.

Storage system may include any type of server or cluster of servers e.g. cloud servers . For example storage system may be a storage server used for any of various different purposes such as to provide multiple users with access to shared data and or to back up mission critical data. Storage system may be for example a file server e.g. an appliance used to provide network attached storage NAS capability a block based storage server e.g. used to provide SAN capability a unified storage device e.g. one which combines NAS and SAN capabilities a nearline storage device a direct attached storage DAS device a tape backup device or essentially any other type of data storage device. Storage system may have a distributed architecture or all of its components may be integrated into a single unit. Storage system may be implemented as part of an archive and or backup system such as a deduplicating storage system available from EMC Corporation of Hopkinton Mass.

In one embodiment storage system includes but is not limited to backup restore engine deduplication storage engine and one or more storage units communicatively coupled to each other. Storage units may be implemented locally e.g. single node operating environment or remotely e.g. multi node operating environment via interconnect which may be a bus and or a network. In one embodiment one of the storage units operates as an active storage to receive and store external or fresh user data while the other storage unit operates as a target storage unit to periodically archive data from the active storage unit according to an archiving policy or scheme. Storage units may be for example conventional magnetic disks optical disks such as CD ROM or DVD based storage magnetic tape storage magneto optical MO storage media solid state disks flash memory based devices or any other type of non volatile storage devices suitable for storing large volumes of data. Storage units may also be combinations of such devices. In the case of disk storage media the storage units may be organized into one or more volumes of Redundant Array of Inexpensive Disks RAID .

In response to a data file to be stored in storage units deduplication storage engine is configured to segment the data file into multiple segments according to a variety of segmentation policies or rules. Deduplication storage engine may choose not to store a segment in a storage unit if the segment has been previously stored in the storage unit. In the event that deduplication storage engine chooses not to store the segment in the storage unit it stores metadata enabling the reconstruction of the file using the previously stored segment. As a result segments of data files are stored in a deduplicated manner either within each of storage units or across at least some of storage units . Data stored in the storage units may be stored in a compressed form e.g. lossless compression Huffman coding Lempel Ziv Welch coding delta encoding a reference to a segment plus a difference etc. . In one embodiment different storage units may use different compression methods e.g. main or active storage unit from other storage units one storage unit from another storage unit etc. .

The metadata such as metadata may be stored in at least some of storage units such that files can be accessed independent of another storage unit. Metadata of each storage unit includes enough information to provide access to the files it contains. In one embodiment metadata may include fingerprints contained within data objects where a data object may represent a data segment a compression region CR of data segments or a container of one or more CRs. Fingerprints are mapped to a particular data object via metadata enabling the system to identify the location of the data object containing a segment represented by a particular fingerprint. When an active storage unit fails metadata contained in another storage unit may be utilized to recover the active storage unit. When one storage unit is unavailable e.g. the storage unit has failed or is being upgraded etc. the system remains up to provide access to any file not stored in the failed storage unit. When a file is deleted the metadata associated with the files in the system is updated to reflect that the file has been deleted.

In one embodiment the metadata information includes a file name a storage unit where the segments associated with the file name are stored reconstruction information for the file using the segments and any other appropriate metadata information. In one embodiment a copy of the metadata is stored on a storage unit for files stored on a storage unit so that files that are stored on the storage unit can be accessed using only the information stored on the storage unit. In one embodiment a main set of metadata information can be reconstructed by using information of other storage units associated with the storage system in the event that the main metadata is lost corrupted damaged etc. Metadata for a storage unit can be reconstructed using metadata information stored on a main storage unit or other storage unit e.g. replica storage unit . Metadata information further includes index information e.g. location information for segments in storage units identifying specific data objects .

In one embodiment the storage system as shown in may be used as a tier of storage in a storage hierarchy that comprises other tiers of storage. One or more tiers of storage in this hierarchy may utilize different kinds of storage devices and or may be optimized for different characteristics such as random update performance. Files are periodically moved among the tiers based on data management policies to achieve a cost effective match to the current storage requirements of the files. For example a file may initially be stored in a tier of storage that offers high performance for reads and writes. As the file ages it may be moved into a tier of storage according to one embodiment of the invention. In various embodiments tiers include different storage technologies e.g. tape hard drives semiconductor based memories optical drives etc. different locations e.g. local computer storage local network storage remote network storage distributed storage cloud storage archive storage vault storage etc. or any other appropriate storage for a tiered data storage system.

Referring back to according to one embodiment backup engine includes cache access manager and percent quota manager . Access manager is to provide file services to a variety of clients such as a backup restore application to backup files stored in storage units in this example represented as data objects that are deduplicated by deduplication storage engine . Typically when a request is received to access a file such as a backup file data objects of the requested file are loaded into a memory of storage system . Since the file may be large only a portion of data objects of the file is loaded or cached in the memory at a time for accessing.

In one embodiment percent quota calculator or manager is responsible for determining the percentage of physical space available to various directories based on the current usage by the directories the provisioned percent quota and or the current availability of the physical space of the storage system. For example percent quota manager may access usage records and provisioned quotas from storage units and compute determine intermediate values records such as records of which may be stored in cache . Details of the computation of these records shall become apparent through the discussion below. In one embodiment usage records are updated as data is deduplicated and written onto storage units . In one embodiment provisioned quotas are updated by an administrator through application programming interface API . According to one embodiment provisioned quotas may be shared by all directories on the storage system. In another embodiment one or more file namespaces may be assigned their own unique provisioned percent quotas. Note that usage records and provisioned quotas may be dynamically calculated e.g. in memory in response to a request without having to cache them in storage units .

As discussed above when files are written to the storage system they are deduplicated before being written onto physical storage such as storage device . Thus for example file is divided up into segments and file is divided into segments . However because of deduplication not every segment of the files is written to storage device . As illustrated in segments and of file are stored on physical storage only once as a single segment because they contain the same data segments and of file and segment of file are stored only once as a single segment segments and of file and segment of file are stored only once as a single segment segments of file and segments and of file are stored only once as segment and segments and of file are stored only once as segment . Thus although files and may each have a logical size of seven segments the actual physical size of each file after deduplication is less than seven segments and a mechanism for provisioning the storage system to a namespace must take this into account.

At block percent quota manager accesses usage records from storage units . In one embodiment usage records include but are not limited to appliance logical size record appliance physical used record appliance physical available record and one of directory logical size records . In one embodiment the directory logical size record accessed is based on the director ID received at block .

According to one embodiment appliance logical size record represents the size sum of all logical files maintained by the entire storage system e.g. the size of all backup files of all namespaces on the storage system before deduplication. In one embodiment directory logical size record represents the size sum of all logical files maintained by a particular directory namespace on the storage system. In one embodiment appliance physical used record represents the sum size of physical space used by all directories namespaces on the storage system after deduplication and compression has been performed on the logical files. In one embodiment appliance physical available record represents the physical space available on the storage system which may be determined by subtracting the appliance physical used record from the total physical storage capacity of the storage system.

At block percent quota manager determines the directory logical percent record of the directory by dividing the directory logical size record corresponding to the directory ID by the appliance logical size record and multiplying the quotient by a constant the result representing the percentage of the storage system logical space used by the directory identified by directory ID.

At block percent quota manager determines the directory physical used record by multiplying the directory logical percent record by the appliance physical used record the resulting directory physical used record representing the physical space used by the directory identified by directory ID.

At block percent quota manager determines the directory percent used record by dividing the directory physical used record by the appliance physical capacity and multiplying the result by a constant the directory percent used record representing the percentage of the storage system physical space used by the directory identified by directory ID.

At block percent quota manager accesses one of provisioned percent quotas based on the directory ID. At block percent quota manager determines the directory available space record by subtracting the directory percent used record from the provisioned percent quota corresponding to the directory ID and multiplying the difference by the appliance physical available record . In one embodiment if the directory percent used record exceeds the provisioned percent quota the directory is considered full.

At block percent quota manager generates a quota report for the directory identified by directory ID and or generates a status indicating whether a write access to the directory is permitted based on the determined directory available space record . In one embodiment the records determined by percent quota manager during blocks are stored as part of cache .

The logic blocks of method of are illustrated as a sequence of operations. However it will be appreciated that not all blocks are required to be performed. For example blocks may be performed after a write to a directory identified by directory ID even if the request s are not received at block . It will be further appreciated that the logic blocks of method may be performed by software firmware hardware or any combination therewith.

At block percent quota manager identifies a first set of the usage records corresponding to a first of the file system namespace where the identified set of usage records contains information of logical and physical storage space used by one or more of the file system namespaces. For example in response to receiving a request to generate a quota report from a system administrator via API and or in response to a request from access manager to write a file corresponding to a file system namespace percent quota manager identifies a first record e.g. appliance logical size record a second record e.g. a directory logical size record selected from the directory logical size records based on an ID of the namespace a third record appliance physical used record and a fourth record e.g. appliance physical available record .

At block percent quota manager determines a percentage of the storage system available to the first file system namespace based on the identified set of usage records and a provisioned percent quota which is selected from one of provisioned percent quota records based on an ID of the namespace.

At block percent quota manager determines a sixth record by multiplying the fifth record by the third record. For example percent quota manager determines directory physical used record by multiplying directory logical percent by appliance physical used record . At block percent quota manager determines a seventh record by dividing the sixth record by a maximum physical space capacity of the storage system. For example percent quota manager determines directory percent used record by dividing directory physical used record by the maximum physical capacity of the appliance and multiplying the quotient by a constant . At block percent quota manager determines the eighth record by subtracting the seventh record from a provisioned percent quota selected from provisioned percent quota records and multiplying the difference by the forth record. For example the percent quota manager determines directory available space record by subtracting directory percent used record from a provisioned percent quota selected from provisioned percent quota records and multiplying the resulting difference by appliance physical available record .

The percent quota provisioning mechanism of the present invention can be illustrated by way of example. For the purpose of the following first example assume 

Thus the sum of all directory logical size i.e. the appliance logical size is 4000 MB and the individual directory logical percent used are 

However due to deduplication all the users are actually using less physical storage than their logical size implies. By using the percent quota provisioning mechanism of the present invention the individual directory physical used and the directory percent used can be computed as follows 

As illustrated above by using the mechanisms of the present invention a system administrator will be more accurately informed of the users usage of the deduplicated storage system. In particular based on the above parameters user 1 2 3 and 4 have only actually used up 0.875 0.1 0.5 and 0.125 respectively of the storage system. Since the storage system is provisioned based on percentage instead of fixed logical space the users still have free space based on the provisioned percent quota. In this first example the remaining available physical storage available are as follows 

The advantages of the present percent quota provisioning mechanism can be illustrated by contrasting the above first example with the following second example wherein the parameters are identical and the only difference is that in the second example provisioning is done by block quotas. Although the parameters of the second example are the same as the first example they are repeated here for convenience 

Since the conventional provisioning mechanism uses block quotas the available space can only be computed based on logical space used. Using the above parameters the available space for the users are as follows which are compared to the available space computed using the percent quota mechanism discussed above in the first example 

Based on the illustrated examples it is clear that the block quota provisioning mechanism results in under provisioning of a storage system. Furthermore there is no way to accurately predict the logical space that an appliance will accommodate for a given physical space and deduplication ratio which itself is also difficult to predict as files are written to and or deleted from the system . Therefore by provisioning a storage system based on percent quotas instead of logical or physical e.g. mega bytes all users of the storage system can benefit from the deduplication capability of the appliance.

The file s is are processed by segmenter and file system control . Segmenter breaks the file s into variable length segments based on a variety of rules or considerations. For example the file s may be broken into segments by identifying segment boundaries using a content based technique e.g. a function is calculated at various locations of a file when the function is equal to a value or when the value is a minimum a maximum or other value relative to other function values calculated for the file a non content based technique e.g. based on size of the segment or any other appropriate technique. In one embodiment a segment is restricted to a minimum and or maximum length to a minimum or maximum number of segments per file or any other appropriate limitation.

In one embodiment file system control processes information to indicate the segment s association with a file. In some embodiments a list of fingerprints is used to indicate segment s associated with a file. File system control passes segment association information e.g. representative data such as a fingerprint to an index not shown . The index is used to locate stored segments in storage units via storage unit interface . Duplicate eliminator identifies whether a newly received segment has already been stored in storage units . In the event that a segment has already been stored in storage unit s a reference to the previously stored segment is stored for example in a segment tree associated with the file instead of storing the newly received segment. A segment tree of a file may include one or more nodes and each node represents or references one of the deduplicated segments stored in storage units that make up the file. Segments are then packed by a container manager not shown into one or more storage containers stored in storage units . The deduplicated segments may be further compressed using a variation of compression algorithms such as a Lempel Ziv algorithm before being stored.

When a file is to be retrieved file service interface is configured to communicate with file system control to identify appropriate segments stored in storage units via storage unit interface . Storage unit interface may be implemented as part of a container manager. File system control communicates with an index not shown to locate appropriate segments stored in storage units via storage unit interface . Appropriate segments are retrieved from the associated containers via the container manager and are used to construct the requested file. The file is provided via interface in response to the request. In one embodiment file system control utilizes a tree e.g. a segment tree of content based identifiers e.g. fingerprints to associate a file with data segments and their locations in storage unit s . In the event that a segment associated with a given file or file changes the content based identifiers will change and the changes will ripple from the bottom to the top of the tree associated with the file efficiently since the appropriate content based identifiers are easily identified using the tree structure.

Some portions of the preceding detailed descriptions have been presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the ways used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of operations leading to a desired result. The operations are those requiring physical manipulations of physical quantities.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the above discussion it is appreciated that throughout the description discussions utilizing terms such as those set forth in the claims below refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the invention also relate to an apparatus for performing the operations herein. Such a computer program is stored in a non transitory computer readable medium. A machine readable medium includes any mechanism for storing information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices .

The processes or methods depicted in the preceding figures may be performed by processing logic that comprises hardware e.g. circuitry dedicated logic etc. software e.g. embodied on a non transitory computer readable medium or a combination of both. Although the processes or methods are described above in terms of some sequential operations it should be appreciated that some of the operations described may be performed in a different order. Moreover some operations may be performed in parallel rather than sequentially.

Embodiments of the present invention are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of embodiments of the invention as described herein.

In the foregoing specification embodiments of the invention have been described with reference to specific exemplary embodiments thereof. It will be evident that various modifications may be made thereto without departing from the broader spirit and scope of the invention as set forth in the following claims. The specification and drawings are accordingly to be regarded in an illustrative sense rather than a restrictive sense.

