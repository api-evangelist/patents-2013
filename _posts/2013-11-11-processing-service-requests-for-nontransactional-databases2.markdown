---

title: Processing service requests for non-transactional databases
abstract: A method and apparatus for processing service requests for non-transactional databases are disclosed. In the method and apparatus, the execution of a first operation may be initiated based at least in part on receiving a service request from a user. The first operation may be executed synchronously with receipt of the request. Further, one or more execution workflows may be provisioned for asynchronous execution of one or more other operations.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542391&OS=09542391&RS=09542391
owner: Amazon Technologies, Inc.
number: 09542391
owner_city: Seattle
owner_country: US
publication_date: 20131111
---
This application incorporates by reference for all purposes the full disclosure of co pending U.S. patent application Ser. No. 14 077 195 filed concurrently herewith entitled HOMOGENOUS CAPTURE OF DOCUMENT INTERACTIONS co pending U.S. patent application Ser. No. 14 077 204 filed concurrently herewith entitled DOCUMENT MANAGEMENT AND COLLABORATION SYSTEM co pending U.S. patent application Ser. No. 14 077 201 filed concurrently herewith entitled CROSS PLATFORM HOMOGENOUS DOCUMENT COLLABORATION and co pending U.S. patent application Ser. No. 14 077 210 filed concurrently herewith entitled DOCUMENT VERSION CONTROL IN COLLABORATIVE ENVIRONMENT. 

The use of remote computing services such as remote document storage has greatly increased in recent years. An organization for example may support its operations using both internal networks of computing resources and computing resources managed by others. Computers of the organization for instance may communicate with computers of other organizations to access and or provide documents or other data while using services of another organization. In many instances organizations configure and operate remote networks using hardware managed by other organizations thereby reducing infrastructure costs and achieving other advantages. With such configurations of computing resources ensuring that access to the resources and the data they hold can be challenging especially given the multitude of different computing systems. For example computers of the organization may include personal computers tablets smartphones laptops and other devices.

Ensuring that users can share and collaborate on documents is challenging given the variety of hardware and software components of different devices. Furthermore it is challenging to ensure that user requests are timely processed and that back end systems are updated in a manner that ensures overall system consistency.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include initiating a first operation or first action such as an atomic update to a non relational database or data store in response to or based at least in part on receiving a service request. The atomic update may be a write operation and may be initiated synchronously with receipt of the service request. Further one or more remaining operations may be initiated based at least in part on receipt of the service request. Asynchronous workflows may be used for the execution of the one or more remaining actions. The asynchronous workflows may be associated with more computationally intensive operations than the first operation and may be launched to ensure overall system consistency.

A user device or a client application executed on the user device may make service requests to a document management system. The requests may be made using appropriately configured application programming interface API function calls and may specify actions to be taken such as uploading a document uploading a new version of an existing document commenting on a document that is collaborated on with other users annotating a document deleting a document changing user permissions or share modes with respect to a document a group of documents or a folder that provides document views among others.

The document management system may maintain a database that stores user or group privileges or permissions and share modes with respect to a document or a group of documents. In addition the document management system may maintain other databases that for example include extracted document text to facilitate search functionality among others. Upon receipt of a service request from a user a plurality of actions may be required to be performed for the request to be processed. For example the actions may include updating a permission database with new user permissions and extracting document text for inclusion in a database that enables search functions. In some embodiments certain operations like updating a user permission database may require fewer computational resources than text extraction and the like. Further it may not be desirable to perform all actions required for satisfaction of a request synchronously as that may results in long user wait times. Instead it may be desirable for some operations to be performed synchronously while others for example more computationally intensive operations to be performed asynchronously and achieve overall consistency. As described herein an operation may be performed synchronously in relation to a request or response process. For example in synchronous processing the result of an operation or indication of performance of the operation may be provided in a response but asynchronous processing may be performed before or after the response is dispatched. In asynchronous processing it may not be required for a request or an action specified by the request to be processed or an execution to be finished or completed before a response is dispatched.

Upon receiving a service request such as a request to upload a document a document management system may cause an operation may be performed synchronously. In some embodiments the operation may be writing a user permission for document access to a non transactional or non relational database to reserve the namespace. Further because the database is non transactional only a single write operation to a single item in a single table may be guaranteed in various embodiments. One or more workflows may also be launched for executing other functions associated with the request. The workflows may be queued and an asynchronous service may be responsible for retrieving the workflows and causing their execution. The asynchronous service may utilize one or more computing engines for executing the workflows which may include virtual computer systems or virtual computing instances that are executed utilizing a hypervisor on one or more physical hosts.

The application request may require one or more operations or tasks to be performed for the request to be satisfied. The request may for example specify a document to be uploaded or specify one or more annotations or comments provided on a document among others. The application service may be tasked with ensuring that the received application request is processed and satisfied. As described herein upon receiving the request the application service may initiate a synchronous update to a non relational database . Further the application provides one or more asynchronous tasks to an asynchronous service . The asynchronous service is task with performing the one or more asynchronous tasks.

The computing devices may collectively or individually be associated with a user or a customer of the computing resource service provider or its entities and functions. The customer may be an organization that may utilize one or more of the services provided by the computing resource service provider to maintain and deliver information to its employees which may be located in various geographical locations. Additionally the customer may be an individual that utilizes the services of the computing resource service provider to deliver content to a working group located remotely.

The computing resource service provider includes a front end system and a file management and collaboration system as well as a plurality of services and systems as shown in . These include a content distribution edge network an object level data storage service a virtual computing service a task management and workflow service a managed directory service a custom search service a scalable database service and a notification service . It is noted that in various embodiments the computing resource service provider may include fewer services and systems than those described with references to or may include additional or alternative services or systems to those described with reference to . Further in alternative embodiments the systems and services may be utilized outside the context of the computing resources service provider . For example the services and systems may be stand alone or used in conjunction described with systems and services other than those described with reference to .

The front end system may be a gateway to the file management and collaboration system and may offer private and public services to user or customer and their computing devices . Access to the front end system may require authorization or user authentication. In addition a device or user privilege level may govern access to the front end system and any data exchanges between the front end system and the computing devices . Access to the front end system may be governed by a privilege level associated with a computing device or a privilege level or credential given to the computing device or a user of the computing device for example by a group or organization administrator.

The front end system may perform authentication of a customer a user or a device before granting access to the resources of the file management and collaboration system . The authentication may be based on credentials such as username and password information or access tokens among others. The front end system may provide services and interfaces that permit or enable customer access. For example the front end system may enable a web based platform or a console based platform that provides information related to the services of the computing resource service provider to the customer. Further the front end system may enable the customer to execute applications or tasks in the computing resource service provider track and manage the execution of the applications or tasks and receive the results of the execution and transmit the results to user devices. As further described herein the front end system may be the gateway by which the customer or its associated devices may utilize the plurality of services provided by the computing resource service provider .

The document management and collaboration system enables and manages the execution and processing of documents for collaboration between one or more users in a distributed system. The document management and collaboration system may for example enable uploading documents to the computing resource service provider and retaining and modifying metadata associated with the documents. The document management and collaboration system may further allow for search functions associated with the documents or their metadata as well as collaborations between users on the documents.

Although the term document is used herein to describe objects produced or collaborated on by users of the computing resource service provider the term document is not limited to media such as audio visual media. A document may be computer files that are capable of being produced by or edited or viewed using a productivity program or suite. Accordingly the document may be editable or non editable text images drawings and websites among others.

The content distribution edge network of the computing resource service provider may be a collection of computing devices and other resources collectively configured to deliver content such as web content to a plurality of users. The content distribution edge network may have a plurality of edge locations for example that are distributed in world wide locations that are strategically placed to optimize user data throughput and minimize latency. The content distribution edge network may receive requests for content and deliver the requested content to users. The content distribution edge network may interface with a storage service that stores a portion or all of the content and may cause the content to be retrieved and provided to a requesting party. The content distribution edge network may be utilized to enable user accessible websites or web applications of the front end system .

The object level data storage service may be a collection of computing resources configured to synchronously process requests to store and or access data. The object level data storage service may operate using computing resources e.g. databases that enable the object level data storage service to locate and retrieve data quickly so as to allow data to be provided in response to requests for the data. For example the object level data storage service may maintain stored data in a manner such that when a request for a data object is retrieved the data object can be provided or streaming of the data object can be initiated in a response to the request. As noted data stored in the object level data storage service may be organized into data objects. The data objects may have arbitrary sizes except perhaps for certain constraints on size. Thus the object level data storage service may store numerous data objects of varying sizes. As described herein the object level data storage service may store any type of document for example document source files underlays previews thumbnails extracted document text annotation indices or truth tables.

The virtual computing service may be a collection of computing resources configured to instantiate virtual machine instances on behalf of an entity of the computing resource service provider such as the document management and collaboration system or on behalf of a customer. A party may interact with the virtual computing service via appropriately configured and authenticated API calls to provision and operate virtual computer systems that are instantiated on physical computing devices hosted and operated by the virtual computing service . The virtual computer systems may be used for various purposes such as to operate as servers supporting a website to operate business applications or generally to serve as computing power. Further the virtual computer systems may be used to support database applications electronic commerce applications business applications and or other applications. Although the virtual computing service is shown in any other computer system or computer system service may be utilized such as a computer system or computer system service that does not employ virtualization or instantiation and instead provisions computing resources on dedicated or shared computers servers and or other physical devices.

The task management and workflow service may be a collection of computing devices and other resources collectively configured to perform task coordination and management services that enable executing computing tasks across a plurality of computing environments and platforms. The task management and workflow service tracks the progress of workflow execution and performs the dispatching and holding of tasks. Further the task management and workflow service may control the assignment of hosts or physical or virtual computing machines used for executing the tasks. A user may define a workflow for execution whereby the workflow may include one or more tasks. The workflow may be defined using an application programming interface API configured function call to the task management and workflow service . Further the user may specify task order for the workflow conditional flows and timeout periods for restarting or terminating the execution of the workflow. In addition execution loops for the workflow may be defined. As described herein workflow execution may by asynchronous and may be preceded by synchronous execution of database writes.

The managed directory service may be a collection of computing devices and other resources collectively configured to serve as a directory that enables users to log on to computing resources of the computing resource service provider using one set of credentials and to enable administrators to uniformly apply security policies to the computing resource service provider . The managed directory service may enable a web based console for user and group management and may be used as an authentication system for user credentials.

The custom search service may be a collection of computing devices and other resources collectively configured to permit customized searches of data sets and enable establishing security or authentication requirements on a party performing a search. Further the custom search service allows for data set replication to enable consistent performance in the case of outages. As described herein the customer search service may be utilized for maintaining a search index of customer documents and their associated metadata. Further to ensure consistent performance the searchable metadata or customer documents may be replicated to ensure consistent performance and guard against outages.

The scalable database service may be a collection of computing devices and other resources collectively configured to provide a structured storage system that facilitates the storage and retrieval of documents or data. The scalable database service may be non relational and may be based on a key value model. Examples of the scalable database service include a NoSQL database for example to be distinguished from a relational structured query language SQL database . The scalable database service may be used to store metadata associated with documents or users. For example the scalable database service may store metadata for underlays overlays documents feedback or comments. In addition the scalable database service may store metadata associated with users organizations and permissions. As a non relational database the scalable database service may guarantee atomic writes to a single item in a single table. Accordingly a single write may be synchronously performed to a truth table and remaining writes may be performed asynchronously using workflows.

In the environment illustrated in a notification service is included. The notification service may comprise a collection of computing resources collectively configured to provide a web service or other interface and browser based management console. The management console can be used to configure topics for which customers seek to notify applications or people subscribe clients to the topics publish messages or configure delivery of the messages over clients protocol of choice i.e. hypertext transfer protocol HTTP e mail and short message service SMS among others . The notification service may provide notifications to clients using a push mechanism without the need to periodically check or poll for new information and updates. The notification service may further be used for various purposes such as monitoring applications that are being executed in the virtual computer system service workflow systems time sensitive information updates mobile applications and many others.

The application service may be a collection of computing devices and other resources collectively configured to serve as a user exposed service that receives requests from the user and services the requests. A user request may be made using a website or a management console accessible to the user or a client that is executed on a user s device may make service requests on behalf of the user. The request may be an API function call and the application service may process the request and manage its execution. The application service may cause the synchronous execution of actions associated with a received request or alternatively may cause one or more actions that require more complex processing to be queued for asynchronous execution. The application service may also be responsible for receiving user credentials and request authentication of the user from an authentication service. To cause the performance of operations requested by the user the application service may make one or more function calls to services or entities of the computing resource service provider . For example the application service may request user or access token validation from the managed directory service or may cause search indices maintained by the customer search service to be updated.

The management console may be a collection of computing devices and other resources collectively configured to permit organizations administrators and users to register for utilizing document management and collaboration services. The management console may be used in addition or as an alternative to a website or an application running on a user device and may permit users and administrators to make service requests using appropriately configured API function calls. For example the management console may be used for inviting a user to join a document collaboration system and view and collaborate on documents. Further the management console may be used for allowing dashboard access audit log access permission setting for example for administrators and user storage limit setting for example for organizations and users and security setting for example password and encryption . The control plane service of the front end system may be a collection of computing devices and other resources collectively configured to serve as an interface that enables creating new computing instances for document collaboration and management. Instances may be created by transparently creating a directory in the managed directory service or associating an existing directory for example maintained by the managed directory service or by a user or administrators for document management and collaboration. The control plane service may be utilized to create a document directory and the document directory may be executed and served by the managed directory service . The document directory may be associated with an organization having an administrator that is capable of providing permissions and privileges to users. Following the creation of the directory the application service may be used to enable functions affecting folders or documents of the directory.

The document management and collaboration system includes an asynchronous service a search service an asynchronous search service an underlay asynchronous service a master asynchronous engine and a directory service authorization interface . The asynchronous service may be a collection of computing devices and other resources collectively configured to manage the execution of asynchronous workflows. The asynchronous service may include or be connected to a queue that stores asynchronous events for execution. The asynchronous service may coordinate the execution of asynchronous workflows with the master asynchronous engine which may be responsible for scheduling activities associated with the workflow. The activities may include underlay generation and text extraction. As described herein the execution of workflow activities or tasks may be performed by engines or workers. For example the asynchronous search engine may be tasked with performing text extraction activities and the underlay asynchronous engine may be tasked with performing activities associated with underlay creation.

In the course of executing asynchronous workflows the asynchronous search engine and the underlay asynchronous engine may obtain or download documents or files from the object level data storage service and cause documents or files to be stored in the object level data storage service . Further the engines may generate documents of any file type based on received documents perform text extraction and store annotations. In addition the asynchronous search engine may place search index updates associated with document in a queue for processing by the search service . The updates may be associated with search indices maintained by the custom search service described with reference to herein.

The search service may be a collection of computing devices and other resources collectively configured to perform batch processing on the search index updates in the queue and launch a workflow for performing search index update activities. Upon launching the workflow the asynchronous search engine causes search indices to be updated in the custom search service . The directory service authorization interface enables the document management and collaboration system to delegate user authentication to another entity such the managed directory service described with reference to numeral in . The document management and collaboration system may submit user access tokens to the authenticating party via the directory service authorization interface and may receive a response indicating whether a user may be authenticated.

As described herein the scalable database service may be a collection of computing devices and other resources collectively configured to store information or metadata associated with users for example user identifications and organizations to which the users belong and information or metadata associated with documents and folders such as a document identity or name a folder identity or name an association between a folder and a document or an association between a document and a document version among others. In addition the scalable database service stores user or organization permissions for a document or folder. By way of example a permission mode granted to a party may specify that a resource is owned by a party a resource was shared directly with the party or a resource is nested within another resource that is shared with the party. In addition the scalable database service may store other information such as document annotations or feedback among others.

In various embodiments the scalable database service may be a non relational database that stores hash key values or hash range values. The non relational database may be advantageous in that it permits simpler horizontal scaling when compared to relational databases. Further the scalable database service as a non relational database may guarantee one atomic update to be performed in an operation. Accordingly to guarantee that database updates or writes do not occur partially only one update operation may be performed in an operation. As described herein an atomic update may be an indivisible or irreducible update or an update that may only be performed wholly and cannot be performed partially.

As shown for the user document permission table a user ID which may be a range key or a value key is associated with a document ID which may be a hash key. The association between the two identifies includes an attribute which may described the permission type or the share type allocated to the user with respect to the document. The attribute may specify the type of permission granted to the user on the document and the share type with which permission is granted. For example the share type may specify whether the document is owned by the user whether the document is shared directly with the user or whether the document is nested within another resource that is shared with the user. Similarly attribute values in the group folder permission table may specify other permission and share modes for a group with respect to a folder. For any one table of the scalable database service in some embodiments only one atomic update may be guaranteed per operation to a single item to a single table. Other updates on the other hand may not be guaranteed and may be done optimistically. In an optimistic update it may be assumed that transactions or operations for example database updates are in most cases not in conflict. Accordingly neither data locking techniques or timestamp techniques may be required when performing an optimistic operation. An atomic update is also referred to herein as a truth table write. The truth table update may influence a permission model as described herein and its successful completion may serve as a basis for optimistic updates to information or metadata stored in the scalable database service . The optimistic updates may be performed using asynchronous workflows whereby an asynchronous workflow may include mechanisms such as failure detection and the retrial of failed operations that ensure an overall desired consistency. Scheduling an asynchronous workflow may be dependent at least in part on successful completion of a truth table as described herein.

The application service then causes the truth table updates to be performed. Updating truth tables may be performed synchronously in relation to a received request or an API call from a client. Further the application service may request the scalable database service to perform the updates which may include writing to entries in the tables maintained by the scalable database service or creating one or more new entries in the tables. For example if an incoming client request specifies that a document is to be shared with a user a user document permission table may be updated to reflect the sharing attributes. Further the table may be updated to reflect new user permissions.

The application service or an entity associated with the application service then determines whether the truth table update was successful. If a negative determination is made and if it is determined that the scalable database service was not successfully updates the client is notified to reattempt the request. Further the client may also be notified that the request processing has failed. Additionally in alternative embodiments the application may reattempt performed a truth table update and the process may revert to numeral .

If on the other hand it is determined that the truth table update was successful the application service queues schedules the remaining operations for completion. The remaining operations may be scheduled for completion asynchronously in relation to the received request from the client. Scheduling the operations may include placing the operations or a workflow representing the operations in queue whereby the queue may be accessed by the asynchronous service of the document management and collaboration system . The asynchronous service may in turn launch one or more processing engines such as the master asynchronous engine the asynchronous search engine or the underlay asynchronous engine for executing the scheduled workflows.

Asynchronous workflows may be used to perform more computationally intensive operations than the truth table updates that are performed synchronously. For example the asynchronous search engine may extract text from documents and cause search indices in the custom search service to be updated in accordance with the extracted text. Further an asynchronous engine may perform underlay and thumbnail generation and file conversion. Furthermore an asynchronous workflow may be utilized to launch distributed computing or MapReduce computations of storage quotas or storing and analyzing usage metrics.

It is noted that a processing engine that is responsible for executing a workflow may utilize computational resources provided by a virtual machine executed by the virtual computing service . For example one or more virtual machines or hosts of the virtual computing service may be used to generate an underlay based at least in part on a document that is compatible with a standard productivity suite. It is also noted that following receipt of a user request e.g. an API function call and successful performance of synchronous operation a response indicating successful processing may be sent to the user. The response may be a hypertext transfer protocol HTTP 2xx message and may be sent even if the asynchronous workflow awaits completion.

The application service then generates one or more asynchronous workflows for performing actions associated with the received request. The application service sends the asynchronous workflows to a queue and the queue retains the workflows for retrieval by the asynchronous service . The asynchronous workflows may include measures for ensuring consistency in the overall system. For example the workflows may require failed operations to be retried and may impose time outs on the execution of tasks. When the asynchronous service becomes available for processing workflows the asynchronous service retrieves workflows from the queue and causes the workflows to be executed whereby one or more engines may be utilized by the asynchronous service for processing the workflows.

If a positive determination is made and the workflow is determined to be successfully launched the asynchronous service may delegate workflow execution to the asynchronous search engine the underlay asynchronous engine and the virtual computing system. For example the asynchronous search engine may perform document text extraction. Further the virtual computing system may be configured to instantiate computing instances that perform underlay generation for certain types of documents such as those compliant with certain standard productivity suites whereas the underlay asynchronous engine may be configured to generate underlay for other types of documents such as images or websites. Before or after successful execution of the workflow the workflow may be deleted or de queued from the queue.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein unless otherwise stated or clear from context the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed virtual or clustered environment. The application server can include any appropriate hardware software and firmware for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some or all of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content including but not limited to text graphics audio video and or other content usable to be provided to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML JavaScript Cascading Style Sheets CSS or another appropriate client side structured language. Content transferred to a client device may be processed by the client device to provide the content in one or more forms including but not limited to forms that are perceptible to the user audibly visually and or through other senses including touch taste and or smell. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server using PHP Hypertext Preprocessor PHP Python Ruby Perl Java HTML XML or another appropriate server side structured language in this example. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed and or virtual system.

The data store can include several separate data tables databases data documents dynamic data storage schemes and or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as page image information and access rights information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. The application server may provide static dynamic or a combination of static and dynamic data in response to the received instructions. Dynamic data such as data used in web logs blogs shopping applications news services and other such applications may be generated by server side structured languages as described herein or may be provided by a content management system CMS operating on or under the control of the application server. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed and or virtual computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network. These devices also can include virtual devices such as virtual machines hypervisors and other virtual devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP User Datagram Protocol UDP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network a satellite network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers Apache servers and business application servers. The server s also may be capable of executing programs or scripts in response to requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Ruby PHP Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM as well as open source servers such as MySQL Postgres SQLite MongoDB and any other server capable of storing retrieving and accessing structured or unstructured data. Database servers may include table based servers document based servers unstructured servers relational servers non relational servers or combinations of these and or other database servers.

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members the conjunctive phrases at least one of A B and C and at least one of A B and C refer to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C each to be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

