---

title: Local storage of information pedigrees
abstract: This disclosure describes techniques for dynamically assembling and utilizing a pedigree of a resource. A pedigree of a resource is a set of statements that describe a provenance of the resource. As described herein, a document may include local pedigree fragments and optionally one or more pointers to remote pedigree fragments not locally stored in the document. A pedigree fragment, generally, is a data structure that specifies a direct relationship between a first resource, e.g., a primary resource, and a second resource from which an asserted fact of the first resource is derived. Because a pedigree fragment specifies such direct relationships, a set of pedigree fragments may be used to assemble the complete pedigree of resource.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09229936&OS=09229936&RS=09229936
owner: Architecture Technology Corporation
number: 09229936
owner_city: Minneapolis
owner_country: US
publication_date: 20130812
---
This application is a continuation of U.S. application Ser. No. 13 048 713 filed Mar. 15 2011 the entire contents of which are incorporated herein by reference.

The invention relates to computer networks and specifically to analysis of information on computer networks.

When information is presented to a user the user may have little or no idea as to the trustworthiness of the information. One way to determine the trustworthiness of a piece of information is to identify the provenance of the piece of information. For instance the user can determine who first created the piece of information and what other entities had the opportunity to manipulate e.g. paraphrase summarize etc. the piece of information before the piece of information was presented to the user. The user may then decide whether to trust the piece of information based on whether the user trusts the person who first created the information and whether the user trusts any entities that manipulated the piece of information prior to its presentation to the user.

This disclosure describes techniques of discovering procuring and utilizing a pedigree of a resource. As used in some examples of this disclosure a resource is an instance of a concept and typically presents one or more asserted facts. Furthermore as used in some examples of this disclosure a pedigree of a resource is a set of statements that describe a provenance of the resource i.e. a history of origin of the resource.

Techniques are described herein to locally store at least a portion of the pedigree data of a resource in a document. In some cases local access to at least some of the pedigree data may reduce or eliminate the need for network communication to a centralized pedigree management system. Furthermore local storage techniques decentralize pedigree management and in some cases may eliminate the need for a centralized pedigree management system. As described herein a document may store local pedigree data as well as pointers to any additional pedigree data that may reside within the pedigree management system. Pointers provide access to additional pedigree data stored on remote devices and therefore may be used to accommodate expanding quantities of pedigree data associated with a resource.

In one example a document includes a primary resource e.g. text that presents one or more asserted facts. The document further includes local pedigree fragments and optionally one or more pointers to remote pedigree fragments not locally stored in the document. A pedigree fragment generally is a data structure that specifies a direct relationship between a first resource e.g. a primary resource and a second resource from which an asserted fact of the first resource is derived. Because a pedigree fragment specifies such direct relationships a pedigree fragment may be used to assemble the pedigree of a resource.

When a system or user provides a request to retrieve the pedigree of the primary resource one or more direct relationships may be quickly retrieved from local pedigree fragments included in the document. Such retrieval may occur without requiring access to a centralized pedigree management system. As such no network communication may be required and the pedigree of the text may therefore be accessed quickly when network connectivity is unreliable or unavailable. After retrieving the one or more direct relationships between the document and the one or more other resources at least a recent portion of the pedigree of the document may be assembled for use by a user or system. In the event the user requires more complete pedigree information the pointers within the document may be used to retrieve remote pedigree fragments to assemble complete pedigree for the document or at least to a degree sufficient to satisfy the user s requirements.

In some examples a pedigree object may be used within documents to cache locally stored pedigree data as well as provide a seamless interface to remote pedigree management systems. For example the pedigree object may specify a fixed amount of space for local pedigree information. As a consequence the quantity of local pedigree fragments associated with a resource e.g. the primary resource may exceed the fixed amount of space permitted for pedigree information. When the amount of pedigree information exceeds the allotted space permitted for pedigree information pointers within the pedigree object may identify any remote pedigree fragments. In this way the entire pedigree of a resource remains available using pointers while conforming to the size constraints of pedigree information in a document. The pedigree management system may store the complete pedigree information or in some cases only the excess pedigree information that does not fit within the size constraints of the pedigree object.

In one example a method includes receiving by a computing device a request to assemble a pedigree that describes a history of origin of a primary resource the primary resource included in a document wherein the requested pedigree of the primary resource represents the history as a set of statements that describe relationships between the primary resource and a plurality of other resources from which an asserted fact of the primary resource was derived selecting by the computing device a local pedigree fragment included in the document the local pedigree fragment specifying a first direct relationship between the primary resource and a first resource of the plurality of other resources wherein the first direct relationship indicates that the asserted fact of the primary resource was derived from data of the first resource selecting by the computing device a pointer included in the document that identifies a remote pedigree fragment not included in the document and stored on a remote device the remote pedigree fragment specifying a second direct relationship between the first resource and a second resource of the plurality of other resources wherein the second direct relationship indicates that the first resource was derived from the second resource receiving by the computing device and from the remote device the remote pedigree fragment based on a query to the remote device wherein the query includes the pointer and assembling with the computing device the pedigree of the primary resource from the local pedigree fragment and the remote pedigree fragment.

In one example a device includes a selection module configured to receive a request to assemble a pedigree that describes a history of origin of a primary resource the primary resource included in a document wherein the requested pedigree of the primary resource represents the history as a set of statements that describe relationships between the primary resource and a plurality of other resources from which an asserted fact of the primary resource was derived wherein the selection module is operable to select a local pedigree fragment included in the document that specifies a first direct relationship between the primary resource and a first resource of the plurality of other resources wherein the first direct relationship indicates that the asserted fact of the primary resource was derived from data of the first resource and an assembly module configured to assemble the pedigree of the primary resource from the local pedigree fragment and output the assembled pedigree.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features objects and advantages of the invention will be apparent from the description and drawings and from the claims.

As illustrated in the following examples a user may interact with a client device in a typical fashion to communicate with access or otherwise utilize information presented by resources within electronic documents. As used in some examples of this disclosure a resource within an electronic document refers to an instance of a concept and typically presents one or more asserted facts. For example images animations text audio or recordings are all examples of resources. Moreover these resources may be subdivided further into other resources. For example a word processing file may contain paragraphs that are also viewed as a resource each paragraph may also contain many concepts that are also each separately identifiable as individual resources. As used in some examples herein a primary resource is the resource for which a client device has requested the pedigree. Furthermore as used in some examples herein the pedigree of a resource is a set of statements that describe provenance relationships between the resource and other resources. For instance in implementations where statements are expressed as Resource Description Framework RDF triples the pedigree of a resource is a set of statements in which the resource is a subject or an object and in which a provenance relationship is specified as the predicate.

As used in this disclosure information objects or electronic documents may be separate files in a file system logical units in a database data sets available via a remote service on a computer network or identifiers that constitute resources. Some information objects may include metadata that describes the other information stored in or asserted by the information object. As one example one information object may uniquely identify a web page that contains a news report about the economy. The news report and certain identifiable concepts within the news report may each be viewed as separate information objects and each assigned a unique identifier e.g. a Uniform Resource Identifier URI .

In some examples the data of a given information object may include many pieces of information at varying levels of granularity. Such pieces of information may individually be viewed as resources. A resource in some examples is an instance of a tangible or intangible concept. For example an electronic report may be a resource a chart within the body of the electronic report may be a resource a statement in the electronic report may be a resource and an individual word in the electronic report may be a resource. Each may be logically viewed as a separate information object having its own unique identifier and traceable via the pedigree management and assessment techniques described herein.

As shown in metadata of document has been extended to include local pedigree information. In one example local pedigree information is included in a pedigree object that is embedded in metadata . Pedigree object is a specialized object embedded within metadata of document to cache locally stored pedigree data as well as provide a seamless interface to a remote pedigree management system. In this example pedigree object includes document pedigree control DPC pedigree cache control PCC a plurality of local pedigree fragments LPF A N collectively LPFs and optionally one or more pointers A N collectively pointers .

As shown in client device represents any device by which a user may request or access electronic information. Client device may be one of many different types of electronic devices. For example client device may be a personal computer a laptop computer a handheld computer a mobile telephone a server a workstation an intermediate network device a data storage system a supercomputer a mainframe computer a device built into a vehicle such as a truck car aircraft watercraft spacecraft or other type of electronic device.

As shown in the example of client device stores one or more documents e.g. document . In one example document is an information object that includes properties and characteristics similar to information objects previously described. Document in may for example be a web page that presents a news report. The contents of document include resources such as text and image data that define the news report. In some examples text includes characters words and sentences that together consist of information intelligible to a user or system. Similarly image data in some examples includes graphical information intelligible to a user such as pictures charts or other visual representations. Any of various types of resources previously described may be included in document of .

As shown in the example of pedigree information is stored in a pedigree object contained within metadata of document . Generally pedigree object is a data structure that provides efficient storage and retrieval of pedigree information. For example pedigree object may be an object array list map or other data structure embedded within document . In some examples each storage location of the data structure may be referred to as a block or entry within the object. For example as shown in pedigree object includes blocks that store the following document pedigree control DPC pedigree cache control PCC local pedigree fragments LPF A N and pointers A N. Block in includes LPF A. In one example each block may provide 256 bytes of storage space and pedigree object may be defined to include a maximum of 16 blocks i.e. 4096 bytes or 4 kilobytes to limit the size and impact of local pedigree information.

As shown in pedigree object includes LPFs A N. As described above a pedigree fragment generally refers to a set of one or more statements specifying relationships between two resources within an electronic document. Each statement specifies a relationship between two resources. In general a pedigree fragment may comprise a list of URIs or other identifiers of resources that are referred to in the set of statements of the pedigree fragment.

Statements in a pedigree fragment may be formatted in a variety of ways. In one example statements in a pedigree fragment are formatted as Resource Description Framework RDF subject predicate object statements. RDF is a method of describing information by making statements about resources. According to the RDF specification statements about resources take the form of subject predicate object statements. RDF subject predicate object statements may be formatted using RDF XML notation Notation 3 N3 notation Terse RDF Triple Language TURTLE or another type of notation. A subject of an RDF subject predicate object statement denotes a first resource an object denotes a second resource and a predicate denotes a third resource that is associated with a relationship between the first resource and the second resource.

In an implementation where the statements of a pedigree fragment are formatted as RDF subject predicate object statements each resource is associated with a unique URI. The subject part of the RDF statement specifies a URI of a first resource the object part of the RDF statement specifies a second resource and the predicate part of the RDF statement specifies a URI of a third resource. For example a pedigree fragment may include a first information object that represents a first web page a second information object that represents a second different web page than the first and a third information object that represents the concept of is a source of. This statement may unambiguously express the notion that the first web page represented by first information object is a source of the second web page represented by the second information object. Statements in a pedigree fragment may describe local relationships between a resource and other resources. A statement that describes a local relationship with respect to a particular resource if the statement describes a provenance relationship in which the resource is specified as the subject of the relationship.

Examples of pedigree fragments include local pedigree fragment A remote pedigree fragment shown in and restricted local pedigree fragment shown in . In one example the relationships defined by the one or more statements of a local pedigree fragment specify a pedigree between the two resources. Examples of such statements that define relationships between two resources are further illustrated in e.g. . In one example LPF A may include a statement that specifies a relationship between image data and a second resource. The statement may specify for example that the second resource is a source of image data . In this way pedigree information of image data may be efficiently stored and retrieved in document .

In some examples multiple LPFs are stored locally within document . For example as shown in LPFs are each stored locally within pedigree object which is further included in document . In one example of LPFs specify pedigree information for image data . For example LPF A may specify that a second resource is a source of image data . LPF B may in turn include one or more statements that indicate a third resource is a source of the second resource. Similarly LPF C may include pedigree information that a fourth resource is a source of the third resource. In this way the pedigree of a resource e.g. image data may be stored and retrieved locally within document . Thus a user may use the pedigree information of LPFs to determine for example that the fourth resource is a source of image data . Storing pedigree locally in a document advantageously eliminates the need for a centralized server thereby decreasing the amount of time required to retrieve pedigree information and reducing the enterprise infrastructure required to maintain pedigree information.

In one example a software application executing on client device includes program code to view generate modify and or delete local pedigree fragments in pedigree object upon proper authentication of the user. For example when a resource e.g. image data is inserted into document program code executing on client device generates local pedigree fragments that define the pedigree of image data . The software module may perform similar operations on other data of pedigree object such as document pedigree control DPC and pedigree cache control PCC . As illustrated in subsequent examples a software module executing on client device may also create and insert a pointer within pointers for identifying a location of remote pedigree information for document . Pointers references remote pedigree fragments not shown that define the pedigree of image data and which are stored on a remote device and are further described in subsequent examples.

As shown in the example of pedigree object includes one or more pedigree object controls such as document pedigree control DPC and pedigree cache control PCC . DPC in some examples is a data structure that occupies a first storage block of pedigree object and includes data specifying access controls associated with document . As shown in data specifying DPC is stored in e.g. block of pedigree object . Access controls in some examples include data that define permissions such as whether a user is able to read modify and or take other actions with a document. For example DPC includes access controls that specify a user may read document but may not modify document . Access controls in other examples include data that specify the security classification of a document. For example security classifications may include designations such as Top Secret Secret Confidential Restricted and Unclassified. DPC in one example may include a Top Secret designation that indicates information included in document is highly sensitive.

In some examples pedigree object defines and stores a pedigree cache control PCC in a second storage block of the pedigree object. In one example PCC includes data that identifies the contents of each subsequent storage block in pedigree object . Such data may be stored in e.g. block of pedigree object . Data identifying the contents of each block may be specified using a bitmask identifier map or other techniques. In one example pedigree cache control stores data that defines a map that specifies whether each of the remaining blocks of pedigree object store local pedigree fragments LPFs or pointers to remote pedigree fragments. In this way the contents of each block may be identified and selected by client device .

PCC in some examples includes data specifying access controls associated with a resource or pedigree fragment. Access controls in some examples include permission data that specifies whether a user is able to read write and or remove a resource or pedigree fragment. For example PCC may include access controls that specify a user may read write and remove LPF A but may not modify image data in any way. Access controls in other examples include data to classify the confidentiality of a resource or pedigree fragment. For example a confidentiality classification system may include accessibility designations such as Top Secret Secret Confidential Restricted and Unclassified. PCC in one example may include data indicating a designation of Top Secret to indicate information included in image data is highly sensitive.

In one example the complete pedigree of a resource e.g. image data is stored in the form of local pedigree fragments in pedigree object . In some examples redundant copies of the pedigree fragments may also be stored on client device and or remotely at a pedigree management system. Thus in one example pointer A is a null value to indicate the complete pedigree of image data is included in pedigree object . Initially a user provides a user input to client device to request pedigree information of image data . In response to receiving the request a selection module further described in executing on client device selects data included in PCC to identify the blocks in pedigree object that contain local pedigree fragments. For example PCC may include a bitmask with a pattern of 1110 or 0111 to indicate that blocks include local pedigree fragments where a value of 1 indicates a local pedigree fragment and a value of 0 indicates a pointer. After identifying the blocks that contain local pedigree fragments using PCC the selection module selects LPFs from blocks for assembly. The selection module further determines that pointer A is a null value and therefore LPFs A B through N comprise the complete pedigree of image data . LPFs are then assembled and made available to the user for further processing and display.

In some examples no fixed storage limit is specified by document and or pedigree object to store pedigree information. In such examples the entire pedigree of a resource may be stored in document . In other examples however document allocates a fixed amount of storage space to store pedigree information. In one example a fixed amount of storage space may be approximately one kilobyte. In this example if the amount of pedigree information for resources of document exceeds the storage space limit the excess pedigree information may be stored remotely. In such examples pointers are stored locally in pedigree object e.g. in blocks through to provide a compact mechanism for identifying remote pedigree fragments. Pointers are identifiers that may be used to access excess remotely stored pedigree information. In some examples excess pedigree information is stored in databases or other documents on client device . In other examples excess pedigree information is stored in databases other documents or storage devices of a remote server. Pointers in some examples may be memory addresses file names uniform resource identifiers URIs hash codes or other data that identifies remotely stored pedigree information of a resource.

In some examples new local pedigree fragments may be added to pedigree object as the pedigree of image data grows. In these cases the quantity of pedigree information of image data exceeds the storage space available for pedigree information in document and therefore the entire pedigree of image data is therefore not stored locally in document . Consequently LPFs only partially specify the pedigree of image data and the remainder of the pedigree information of image data is stored remotely i.e. external to document . Pointers e.g. URIs are used to identify and access the remotely stored pedigree information. For example pointers identifies remote pedigree fragments that may specifies a direct relationship between image data and a resource from which image data is derived or an indirect relationship between image data and a resource from which is derived. further describes the use of pointers in greater detail.

Various aspects of the disclosure may provide in certain instances one or more benefits and advantages. For example storing pedigree information locally within a document may reduce or eliminate the requirement for centralized document tracking. Eliminating the need for centralized document tracking lowers cost and complexity of managing pedigree information. Furthermore retrieval of pedigree information may be faster because network access may not be required. Aspects of the disclosure also simplify document and pedigree information creation in situations where a centralized pedigree management server is deployed prior to generating pedigree information and as documents are created. Decentralizing pedigree management may also provide greater resilience to attacks on pedigree information because pedigree data is not stored in a single location.

As shown in client device includes a control unit network interface and storage device . Control unit provides an operating environment for an operating system and various software applications. In the example of control unit executes document software and pedigree access software . As shown in pedigree access software includes a graphical user interface selection module and assembly module . In some examples graphical user interface selection module and assembly module include instructions executable by control unit . Pedigree access software further provides an application programming interface API . API provides an interface that enables software e.g. document software to access services provided by selection module .

Document software may include any software for viewing and or editing a document that includes a resource. Examples of document software may include a word processor photo or image editor or web browser. Storage device includes document . Document in one example includes document as shown in . Network interface in some examples is a computer hardware component that interfaces to network elements . In some examples network interface is an Ethernet network interface card or 3G wireless radio.

As shown in control unit of client device provides an operating environment for graphical user interface selection module and assembly module . A user interacts with graphical user interface GUI to access and modify content such as pedigree information documents and resources. GUI includes any number of graphical control elements such as text boxes control buttons scroll bars etc. that enable a user to modify and interact with content. In addition GUI displays content such as pedigree information documents and resources. In one example a user selects a graphical control element of GUI e.g. a button using an input device such as mouse pointing device to request the pedigree of a resource.

As shown in GUI receives user input data provided through graphical user interface . For example when a user requests the pedigree of a resource GUI receives the request in the form of user input data that specifies the requested pedigree information. GUI in some examples performs processing of the user input data to prepare the data for further processing by selection module . For example GUI may verify the user input data against a set of predefined rules and or format the user input data in preparation for processing by selection module . In some examples if user input data is invalid GUI notifies the user and re requests valid user input.

As shown in selection module executing on client device receives user input data that specifies a request for pedigree information from GUI . In one example the user input data includes a resource identifier that identifies the resource for which pedigree information is requested. The user input data further includes a document identifier of document which contains the identified resource. A resource identifier and or document identifier may be a hash code file name resource name or any other information that may uniquely identify a resource or document. Using the document identifier selection module selects document .

In some cases the user may simply identify the document of interest i.e. document by browsing the file directory and selecting the document. In other cases pedigree access software may be integrated with or directly accessible by document software . For example a user may interact with a word processing application to view a word processing document and when desired invoke pedigree access software in a seamless manner to view the pedigree information for the current word processing document. In such cases user interface controls for viewing the pedigree information may be integrated into one or more of document software such that the user can easily request the pedigree information for the current document being processed. In response the executing document software may invoke pedigree access software by way of API and in some cases may pass pedigree object from the current document to the pedigree access software as a parameter for processing and display of the pedigree information. Pedigree access software may take the form of a separately executable software application or a modular component such as a Java plug in a dynamic link library DLL or an ActiveX container.

In any case after selecting document selection module selects pedigree information associated with the resource using the resource identifier. In one example selection module selects a pedigree object associated with the resource from document . Selection module analyzes the pedigree cache control of the pedigree object to identify the blocks of the pedigree object that contain local pedigree fragments. If the complete pedigree of the resource is stored locally in document e.g. as local pedigree fragments selection module selects the local pedigree fragments and provides the selected fragments to assembly module . Assembly module executing on client device assembles the local pedigree fragments and provides the assembled pedigree of the resource to the user for display and further processing.

In some examples the complete pedigree of a selected resource may not be stored locally in document . In such examples the pedigree object associated with the selected resource includes one or more pointers e.g. pointer as shown in that identify remote pedigree information stored on remote device . To request the remote pedigree information selection module generates a remote request based on the one or more pointers. The remote request in some examples specifies a quantity of requested pedigree information. A quantity of requested pedigree information may indicate that all pedigree information of a resource is requested or alternatively only a partial quantity of pedigree information is requested. In one example selection module generates a remote request that indicates the entire pedigree is requested. Furthermore the pointer included in the pedigree object of document may be a URI that identifies pedigree information stored on remote device . For example the URI may refer to remote pedigree fragments not shown stored in a pedigree database of remote device . The generated remote request is sent via network interface to remote device .

Using techniques further described hereinafter remote device receives the generated remote request and selects the requested remote pedigree information. The selected remote pedigree information is then sent by remote device to client device . Selection module of client device receives the remotely stored pedigree information which is then provided to assembly module for assembly and further processing as described above.

In one example remote device may be a component of a pedigree management system. For example remote device may be a component of a backend pedigree management system. One example of a pedigree management system is described in U.S. patent application Ser. No. 11 943 374 filed Nov. 20 2007 the entire contents of which are incorporated by reference herein. Thus in one example remote device may receive a request for pedigree data of a resource from client device . Remote device may in response to one or more requests from client device retrieve and send the requested pedigree data to client device . Selection module of pedigree access software may receive the requested pedigree data and subsequently send it to assembly module for assembly.

In another example remote device may be a second client device i.e. a peer device that includes features and characteristics similar to client device . For example remote device may include a control unit executing pedigree management software and may further include a storage device that stores documents. In this case local documents stored on the peer device i.e. remote device may include the additional remote pedigree data requested by client device . In such examples pedigree data may be stored in documents distributed on numerous peer devices in a decentralized architecture. Details of this decentralized implementation are further described in greater detail in .

In one embodiment the request issued by client device to remote device includes data e.g. a unique character string which directly identifies a remote pedigree fragment included in a document that is stored on remote device . In such examples remote device selects the remote pedigree fragment from the document based on the data included in the remote request that directly identifies the remote pedigree fragment. In some examples after remote device has selected one or more remote pedigree fragments remote device sends the selected remote pedigree fragments to client device .

Control unit in some examples includes one or more processors not shown that execute software instructions such as those used to define a software or computer program stored to a computer readable storage medium. Examples of computer readable storage media include a storage device e.g. a disk drive or an optical drive or memory such as Flash memory random access memory or RAM or any other type of volatile or non volatile memory that stores instructions to cause a programmable processor to perform the techniques described herein. Alternatively or in addition control unit may comprise dedicated hardware such as one or more integrated circuits one or more Application Specific Integrated Circuits ASICs one or more Application Specific Special Processors ASSPs one or more Field Programmable Gate Arrays FPGAs or any combination of one or more of the foregoing examples of dedicated hardware for performing the techniques described herein. Control unit in some examples communicates with network interface and storage device .

In the example method shown in the client device initially receives a user input that requests pedigree information of a resource included in a document such as specific text based assertion within the document or an image . In one example the user selects the resource and further requests the complete pedigree of the text block using a graphical user interface provided by the pedigree access software executing on the client device. Alternatively as explained above the user may request the pedigree information by invoking a user interface control provided by document software . In some embodiments the user may simply request the pedigree information associated with a document without specifying a particular resource within the document. In any case for purpose of simplicity with respect to describing the flowchart of it is assumed that the document of interest includes both local pedigree fragments associated with the text block and a pointer to remote pedigree fragments associated with the text block. Consequently some of the text block pedigree information is stored locally in the pedigree object of the document on the client device and some of the text block pedigree information is stored on a remote device.

As shown in the client device selects the local pedigree fragments associated with the text block from the pedigree object . Additionally the client device selects the pointer associated with the text block from the pedigree object . Using the selected pointer the client device generates a remote request that is sent to the remote device . In the current example the pointer is a Universal Resource Locator URL . The URL includes the location of the pedigree information stored on the remote device. In the current example the client device generates a remote request that includes data identifying the pedigree information stored on the remote device and data that specifies a request for the complete pedigree of the resource. The client device sends the generated remote request to the remote device.

As shown in the remote device initially receives the remote request . The remote device determines that the remote request includes a request for the complete pedigree of the text block. The remote device further determines based on the remote request which remote pedigree fragments are requested. Using this information the remote device selects each remote pedigree fragment stored on the remote device that is required to produce the complete pedigree of the text block . After selecting all required pedigree fragments the remote device sends the remote pedigree fragments to the client device .

As shown in after receiving the remote pedigree fragments from the remote device the client device assembles the local pedigree fragments and the remote pedigree fragments to produce a complete pedigree of the text block . The complete pedigree of the text block is then provided to the user for display and further processing .

In some examples it may be desirable to restrict access to pedigree information that is locally stored in document . For example a source of pedigree information of text may be classified and therefore it may be desirable to restrict access to the pedigree information included in metadata . As shown in pedigree object is included in metadata and further includes restricted local pedigree fragment RLPF and restricted pointer . RLPF contains properties and characteristics similar to a pedigree fragment as previously described herein however RLPF is further encrypted to restrict access to the data that comprises RLPF . Similarly restricted pointer contains properties and characteristics similar to a pointer as previously described herein however access to data referenced by pointer is restricted on remote device .

In some examples an unauthorized individual seeking to read a pedigree may determine that a quantity of pedigree stored in a pedigree object or a size of a pedigree object is proportional to an amount pedigree information is stored in the pedigree object. The unauthorized individual may therefore attempt to obtain and access pedigree objects that include larger quantities of information. Consequently one or more obfuscation techniques may be applied to the pedigree information stored in the pedigree object to modify the size of the pedigree object. For example prior to encrypting the pedigree information of a RLPF fake or decoy pedigree fragments may be generated and included in the pedigree object together with the actual pedigree that is stored in the pedigree fragments. Fake pedigree fragments may comprise randomly generated data in some examples. After fake pedigree fragments and pedigree fragments that store actual pedigree have been included in the pedigree object the pedigree fragments may be encrypted to generate RLPFs. In this way obfuscation techniques may modify the size of the pedigree object and the corresponding quantity of pedigree information such that the size of each pedigree object appears the same.

In one example public key cryptography techniques are used to restrict access to pedigree information in document . For example an original author of text initially generates local pedigree fragments that define a pedigree of text . The original author further determines that access to the pedigree data should be restricted. To restrict access the original author encrypts the local pedigree fragment using a public key which generates restricted local pedigree fragment . The public key used by the author may be designated for use to encrypt any Top Secret pedigree information and the corresponding private key may be stored on remote device . In other examples an author may have his her own key pair. A Top Secret classification of pedigree information may indicate for example a highest classification of information that requires a highest level of information security. In the encryption process data indicating the security classification of pedigree object e.g. Top Secret is stored in DPC . In addition to storing the private key remote device further includes data security policies that manage access to pedigree data in pedigree objects based on the security classifications. In one example a data security policy may include an access control list specifying a list of permissions associated with a security classification. For example an access control list may specify one or more users or groups that are authorized to view pedigree information having a Top Secret security classification.

In the current example a subsequent user with sufficient authority to view Top Secret pedigree information provides a user input to client device to view pedigree data in RLPF . To decrypt RLPF the authorized user sends pedigree object to remote device with credentials e.g. a username and password to authenticate the authorized user. Remote device analyzes the security classification specified in DPC to determine that pedigree data of RLPF is classified as Top Secret. Remote device then determines based on the credentials that authenticate the authorized user and the data security policy for Top Secret pedigree information that the authorized user has authority to access pedigree data in RLPF . Because the authorized user has authority to view pedigree data in pedigree object emote device decrypts RLPF using the private key to decrypt Top Secret pedigree data. The decrypted data of RLPF is then sent to client device . The example technique may further be executed using e.g. Secure Socket Layer tunneling to ensure secure data transmission over network between client device and remote device . The example technique may further be executed using one or more shared symmetric keys. In such examples client device using a symmetric key for Top Secret data may decrypt RLPF without requiring access to remote device . In still other examples access to the document provides access to all pedigree information. This approach provides less granular access control to individual pedigree objects but greater simplicity in implementation.

Restricted access techniques may also be used for restricted pointer as shown in . In some examples the quantity of pedigree information exceeds the amount of space available to store local pedigree information in pedigree object . Consequently some pedigree information is locally stored in pedigree object and the remaining pedigree information is stored on remote device . Furthermore a user may wish to restrict access to the pedigree information. To restrict access the local pedigree information and remote pedigree information are each encrypted. For example as shown in local pedigree information is encrypted and stored in pedigree object as RLPF . Restricted pointer points to restricted remote pedigree fragment RRPF stored on remote device . RRPF is similar to a remote pedigree fragment as previously described but access to RRPF is restricted to authorized users and systems. As shown in RRPF is only accessible to users or systems that present sufficient authorization credentials.

In one example of a technique using restricted pointer an authorized user with sufficient authority to view pedigree information in pedigree object provides a user input to client device to request the complete pedigree of text . Pedigree object includes pedigree information of text and the pedigree information of text is further classified as Secret . As shown in part of the pedigree information of text is stored locally in pedigree object . The remainder of the pedigree information is stored on remote device as RRPF and may be accessed using restricted pointer .

To obtain the complete pedigree of text the authorized user sends pedigree object to remote device with credentials to authenticate the authorized user. Remote device analyzes the security classification specified in DPC to determine that pedigree data of RLPF and RRPF is classified as Secret. Remote device then determines based on the credentials which authenticate the authorized user and the data security policy for Secret pedigree information that the authorized user has authority to access pedigree data in RLPF and RRPF . Because the authorized user has authority to view pedigree data in pedigree object remote device decrypts RLPF using the private key to decrypt Secret pedigree data. In addition remote device retrieves RRPF . The decrypted data of RLPF and RRPF are then sent to client device . The example technique may further be executed using e.g. Secure Socket Layer tunneling to ensure secure data transmission over network between client device and remote device .

In some examples techniques of the present disclosure may be adapted to restrict access to pedigree information in pedigree object according to trusted or untrusted domains. In one example a domain is a logical grouping of users subject to one or more common policies e.g. security policies. In other examples a domain is a logical grouping of networked computing devices subject to one or more common policies. In some examples a domain may further be designated as trusted or untrusted. A recipient in a trusted domain may access a service provided by a server device also in the trusted domain. In contrast a recipient in an untrusted domain may not access a service provided by the server device in the trusted domain. In some examples a recipient may be a user or computing device.

The concept of trusted and untrusted domains may be used to restrict access to pedigree information stored in document . In one example client device as shown in is a part of a trusted domain. A module executing on client device includes or has network access to a list of trusted and untrusted domains. Furthermore a security policy associated with the trusted domain of client may specify that local pedigree fragments of pedigree object must be encrypted by client as restricted local pedigree fragments when document is transferred to a recipient in an untrusted domain.

In another example a security policy associated with the trusted domain of client may specify that local pedigree fragments of pedigree object must be removed by client and replaced with restricted pointer before being transferred to an untrusted domain. The local pedigree fragments removed from pedigree object are stored in remote device as RRPF and are accessible by restricted pointer . Using aforementioned techniques pedigree data of RRPF may only be accessed using restricted pointer by users or systems with sufficient authority. In this way pedigree data of pedigree object may be encrypted or removed entirely from document when pedigree information of document is transferred to an untrusted domain. Techniques to encrypt or remove local pedigree fragments from pedigree objects based on domains may be performed by a module executing on client device automatically or in response to a user input. In either example the module receives data that instructs client device to transfer document to an untrusted domain.

As shown in laptop computer includes document . Document further includes text and metadata . Metadata includes pedigree object and pedigree object includes document pedigree control DPC pedigree cache control PCC lightweight pedigree fragments LPF and pointer . Laptop computer further communicates with desktop computer and index server via network .

As shown in desktop computer includes document . Document further includes text and metadata . Metadata includes pedigree object and pedigree object further includes document pedigree control DPC pedigree cache control PCC and remote pedigree fragments RPF . Desktop computer further communicates with laptop computer and index server via network . Elements of contain the same properties and characteristics of elements described in unless otherwise described hereinafter.

As shown in the authoritative copy of pedigree information of text is stored in document and document as LPFs and RPFs respectively. Thus because the pedigree information is stored in documents no central pedigree management server is required to store pedigree information. As shown in pedigree object includes local pedigree fragments that define part of the pedigree of text . Pointer points to pedigree object which includes the remainder of the pedigree information of text . The remainder of the pedigree information is stored as remote pedigree fragments .

In distributed pedigree configurations e.g. as shown in each document is uniquely identifiable. Uniquely identifiable documents enable retrieval of pedigree information when pedigree data is stored in multiple documents. In one example each document is assigned a remote identifier such as a unique hash code based on its content. The remote identifier is independent of a document s file name and therefore may identify a document even when the document file name or location changes or multiple documents have the same file name. In one example the unique hash code of document is stored in DPC .

In some examples an index or map data structure that includes hash code to location mappings is stored on index server . In one example the index includes associations of unique remote identifiers e.g. hash codes of documents with location identifiers e.g. URLs that identify the respective locations of the documents. The index stored on index server is accessible to laptop computer and desktop computer via network . In some examples the index or map data structure is stored on each of laptop computer and desktop as peer distributed indices. The index or map data structure may be updated e.g. as new pedigree information is generated by a client device or when URLs associated with hash codes change. In some examples greater granularity is achieved by assigning a hash code to each resource within a document. The resource hash code is associated with a URL that identifies the location of the resource. In one example such a hash code may be stored in DPC .

As shown in a user of laptop computer in one example requests the complete pedigree of text . Part of the pedigree of text is stored as LPFs and the remainder of the pedigree is stored as RPFs on desktop computer . In response to user input indicating the request a module executing on laptop computer initially selects LPFs and pointer . In the example of pointer is a hash code that identifies text i.e. a resource of document . In the current example the requested pedigree information of text is included in pedigree object . To identify the location of text a module executing on laptop computer generates an index request that includes the hash code identifying text . Index request is sent to index server which includes an index of hash code to location mappings. Index server retrieves a URL that identifies the location of resource . Index server sends the URL associated with the hash code of resource to laptop computer .

Upon receiving the URL from index server laptop computer generates a remote request including data that requests RPFs from desktop computer . The remote request is sent to desktop computer based on the URL received from index server . Desktop computer includes a module that receives the remote request and selects RPFs . RPFs are then sent to laptop computer for assembly with LPFs . In this way the complete pedigree of text may be generated for the user of laptop computer .

Multiple level lookups are also possible in a decentralized approach to pedigree management. In one example pedigree object may not store an entire pedigree. Instead pedigree object stores RPFs that comprise part of the pedigree and a pointer e.g. a hash code of a third resource not shown that is stored in another document on separate computing device that includes the remainder of the pedigree. In such examples desktop computer in response to receiving the remote request from laptop computer sends RPFs and the pointer to the third resource back to laptop computer . Laptop computer generates an index request that includes the hash code of the pointer to the third resource and sends the index request to index server . Index server selects the URL corresponding to the hash code of the third resource and sends the URL to laptop computer . Laptop computer uses the URL to retrieve pedigree information associated with the third resource which is ultimately used to generate the complete pedigree of text . This process may be repeated until all requested pedigree information of text has been retrieved by laptop computer . In this way pedigree information distributed in many documents on numerous devices may be retrieved by laptop computer . In some examples a peer distributed index stored on laptop computer may be used to store the hash code URL mappings thereby eliminating the need for index server .

Techniques of the present disclosure may also be adapted to identify progeny of a resource e.g. text . In one example progeny of text may refer to resources that are derived from text . As shown in text is derived from text and therefore is part of the progeny of text . To identify the progeny of a resource index server may store an association of a first resource hash code a second resource hash code and a URL of the second resource. In one example the first resource hash code may correspond to text and the second resource hash code may correspond to text . Furthermore the URL of the second resource may identify the location of text . When pointer is initially generated and stored in pedigree object an association between the hash code of text and the hash code of text is stored in index server . The URL of text is further included in the association of the text hash code and the text hash code. In this way text i.e. progeny of text may be identified.

To identify the progeny of text a user of desktop computer initially provides a user input to request the progeny of text . A module executing on desktop computer selects the hash code of text from DPC . Desktop computer sends the hash code to index server with data requesting the progeny of text . Index server queries its own set of stored associations using the hash code of text . The query performed by index server identifies an association that includes the hash code of text the hash code of text and the URL of text . Because the URL specifies the location of text index server can further identify the document that includes text . Using this lookup process index server may identify each document that includes a pointer to document . In one example the URLs for the group of documents that include pointers to document comprise the progeny of text and may be sent by index server to desktop computer .

The functions described in this disclosure may be applied to information stored and or retrieved using data storage media or communicated e.g. transmitted and or received via a wired or wireless communication system. Examples of wired and wireless communication systems include any communication techniques including without limitation wireless transmission using CDMA GSM 802.11 Bluetooth ultra wide band UWB OFDM FDMA TDMA W CDMA or any other radio access techniques or technologies and wired or wireless transmission using any of a variety of network protocols such as TCP IP ATM or the like. The functions may be applied to any type of data including but not limited to music data video data multimedia data or other entertainment data financial data security data business data government data military data marketing data sales data medical patient data medical diagnostic data medical imaging data data representing graphical or textual content image data chemical data geographic data mapping data television broadcast data radio broadcast data email data Internet data personal data or the like.

In one or more exemplary embodiments the functions described may be implemented in hardware software and or firmware or any combination thereof. If implemented in hardware the functions may be implemented in one or more microprocessors microcontrollers digital signal processors DSPs application specific integrated circuits ASICs field programmable gate arrays FPGAs or the like. Such components may reside within a communication system data writing and or reading system or other systems. If implemented in software the functions may be stored on or transmitted over as one or more instructions or code on a computer readable medium. Computer readable media includes both computer storage media and communication media including any medium that facilitates transfer of a computer program from one place to another. A storage media may be any available media that can be accessed by a computer. By way of example and not limitation such computer readable media can comprise RAM ROM EEPROM CD ROM or other optical disk storage magnetic disk storage or other magnetic storage devices or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a computer. Disk and disc as used herein includes compact disc CD laser disc optical disc digital versatile disc DVD floppy disk and blu ray disc where disks usually reproduce data magnetically while discs reproduce data optically with lasers. Combinations of the above should also be included within the scope of computer readable media.

Various embodiments of the invention have been described. These and other embodiments are within the scope of the following claims.

