---

title: Dynamically extending the speech prompts of a multimodal application
abstract: A prompt generation engine operates to dynamically extend prompts of a multimodal application. The prompt generation engine receives a media file having a metadata container. The prompt generation engine operates on a multimodal device that supports a voice mode and a non-voice mode for interacting with the multimodal device. The prompt generation engine retrieves from the metadata container a speech prompt related to content stored in the media file for inclusion in the multimodal application. The prompt generation engine modifies the multimodal application to include the speech prompt.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09530411&OS=09530411&RS=09530411
owner: Nuance Communications, Inc.
number: 09530411
owner_city: Burlington
owner_country: US
publication_date: 20130826
---
This application claims the benefit under 35 U.S.C. 120 of U.S. patent application Ser. No. 13 612 014 filed on Sep. 12 2012 and U.S. patent application Ser. No. 12 490 443 filed Jun. 24 2009 now U.S. Pat. No. 8 290 780 issued Oct. 16 2012 the entire contents of which are incorporated herein by reference.

Embodiments of the inventive subject matter generally relate to the field of data processing or more specifically dynamically extending the speech prompt of a multimodal application.

User interaction with applications running on small devices through a keyboard or stylus has become increasingly limited and cumbersome as those devices have become increasingly smaller. In particular small handheld devices like mobile phones and PDAs serve many functions and contain sufficient processing power to support user interaction through multimodal access that is by interaction in non voice modes as well as voice mode. Devices which support multimodal access combine multiple user input modes or channels in the same interaction allowing a user to interact with the applications on the device simultaneously through multiple input modes or channels. The methods of input include speech recognition keyboard touch screen stylus mouse handwriting and others. Multimodal input often makes using a small device easier.

Multimodal applications are often formed by sets of markup documents served up by web servers for display on multimodal browser. A multimodal browser as the term is used in this specification generally means a web browser capable of receiving multimodal input and interacting with users with multimodal output where modes of the multimodal input and output include at least a speech mode. Multimodal browsers typically render web pages written in XHTML Voice X V . X V provides a markup language that enables users to interact with an multimodal application often running on a server through spoken dialog in addition to traditional means of input such as keyboard strokes and mouse pointer action. Visual markup tells a multimodal browser what the user interface is look like and how it is to behave when the user types points or clicks. Similarly voice markup tells multimodal browser what to do when the user speaks to it. For visual markup the multimodal browser uses a graphics engine for voice markup the multimodal browser uses a speech engine. X V adds spoken interaction to standard web content by integrating XHTML eXtensible Hypertext Markup Language and speech recognition vocabularies supported by VoiceXML. For visual markup X V includes the XHTML standard. For voice markup X V includes a subset of VoiceXML. For synchronizing the VoiceXML elements with corresponding visual interface elements X V uses events. XHTML includes voice modules that support speech synthesis speech dialogs command and control and speech grammars. Voice handlers can be attached to XHTML elements and respond to specific events. Voice interaction features are integrated with XHTML and can consequently be used directly within XHTML content.

In addition to X V multimodal applications also may be implemented with Speech Application Tags SALT . SALT is a markup language developed by the Salt Forum. Both X V and SALT are markup languages for creating applications that use voice input speech recognition and voice output speech synthesis. Both SALT application and X V applications use underlying speech recognition and synthesis technologies or speech engines to do the work of recognizing and generating human speech. As markup languages both X V and SALT provide markup based programming environments for using speech engines in an application s user interface. Both languages have language elements markup tags that specify what the speech recognition engine should listen for and what the synthesis engine should say. Whereas X V combines XHTML VoiceXML and XML. Events standard to create multimodal applications SALT does not provide a standard visual markup language or eventing model. Rather it is a low level set of tags for specifying voice interaction that can be embedded into other environments. In addition to X V and SALT multimodal applications may be implemented in Java with Java speech framework in C for example and with other technologies and in other environments as well.

Currently multimodal application may be used to drive the execution of media content. Often the capability of a multimodal application to drive the execution of media content using speech is limited because artists use many different names over the course of a career have difficult names to pronounce have song titles that are difficult to pronounce or any other reason that the grammar or lexicons of a speech engine do not include grammar rules or pronunciation rules specific to the content of a media file. Furthermore often multimodal applications developed without consideration to specific media content are not capable of multimodal interaction with a user with speech prompts specific to that media content.

Embodiments of the inventive subject matter include a method of dynamically extending the speech prompts of a multimodal application. A prompt generation engine receives a media file having a metadata container. The prompt generation engine operates on a multimodal device that supports a voice mode and a non voice mode for interacting with the multimodal device. The prompt generation engine retrieves from the metadata container a speech prompt related to content stored in the media file for inclusion in the multimodal application. The prompt generation engine modifies the multimodal application to include the speech prompt.

The description that follows includes exemplary systems methods techniques instruction sequences and computer program products that embody techniques of the present inventive subject matter. However it is understood that the described embodiments may be practiced without these specific details. In other instances well known instruction instances protocols structures and techniques have not been shown in detail in order not to obfuscate the description.

Example methods apparatus and products for dynamically extending the speech prompts of a multimodal application are described with reference to the accompanying drawings beginning with . sets forth a network diagram illustrating an exemplary system for dynamically extending the speech prompts of a multimodal application according to embodiments of the present inventive subject matter. Dynamically extending the speech prompts of a multimodal application in the example is implemented with a multimodal browser that supports a prompt generation engine and a media player . The multimodal browser supports a speech engine operating on a multimodal device or a speech engine residing on a voice server . The system of includes at least one speech recognition grammar that specifies words and phrases to be recognized by an automatic speech recognition ASR engine of a speech engine . The multimodal device supports multiple modes of user interaction with the multimodal application including a voice mode and one or more non voice modes of user interaction with the multimodal application. The voice mode is represented here with audio output of voice prompts and response form the multimodal devices and audio input of speech for recognition from a user . Non voice modes are represented by input output devices such as keyboards and display screens on the multimodal devices . The multimodal application is operatively coupled to an ASR engine in a speech engine . The operative coupling may be implemented with an application programming interface API a voice service module or a VOIP connection as explained more detail below.

The system of operates generally to carry out improving speech capabilities of a multimodal application by receiving by the multimodal browser a media file having a metadata container retrieving by the multimodal browser from the metadata container of the media file a speech artifact related to content stored in the media file for inclusion in the speech engine available to the multimodal browser and determining whether the speech artifact includes a grammar rule or a pronunciation role. If the speech artifact includes a grammar rule improving speech capabilities of a multimodal application according to the example of includes modifying by the multimodal browser the grammar of the speech engine or to include the grammar rule. If the speech artifact includes a pronunciation rule improving speech capabilities of a multimodal application according to the example of includes modifying by the multimodal browser the lexicon of the speech engine to include the pronunciation rule.

A speech artifact is one or more individual speech rules for inclusion in either a grammar or lexicon available to a speech engine used by a multimodal browser for use in executing a multimodal application. Such speech artifacts are often embodied in an XML document. The artifact may be extracted from the XML document and included in a larger grammar defining the words understood by the speech recognition engine or in a lexicon defining the manner in which the words so recognized are pronounced.

The prompt generation engine of is a module of automated computing machinery for dynamically extending the speech prompts of a multimodal application according to embodiments of the present inventive subject matter. The prompt generation engine of operates generally to carry out dynamically extending the speech prompts of a multimodal application by receiving by the prompt generation engine a media file having a metadata container retrieving by the prompt generation engine from the metadata container a speech prompt related to content stored in the media file for inclusion in the multimodal application and modifying by the prompt generation engine the multimodal application to include the speech prompt.

A multimodal device is an automated device that is automated computing machinery or a computer program running on an automated device that is capable of accepting from user more than one mode of input keyboard mouse stylus and so on including speech input and also displaying more than one mode of output graphic speech and so on. A multimodal device is generally capable of accepting speech input from a user digitizing the speech and providing digitized speech to a speech engine for recognition. A multimodal device may be implemented for example as a voice enabled browser on a laptop a voice browser on a telephone handset an online game implemented with Java on a personal computer and with other combinations of hardware and software as may occur to those of skill in the art. Because multimodal applications may be implemented in markup languages X V SALT object oriented languages Java C procedural languages the C programming language and in other kinds of computer languages as may occur to those of skill in the art this specification uses the term multimodal application to refer to any software application server oriented or client oriented thin client or thick client that administers more than one mode of input and more than one mode of output typically including visual and speech modes.

Each of the example multimodal devices in the system of includes a microphone an audio amplifier a digital to analog converter a multimodal browser and a multimodal application capable of accepting from a user speech for recognition digitizing the speech and providing the digitized speech to a speech engine for recognition. The speech may be digitized according to industry standard codecs including but not limited to those used for Distributed Speech Recognition as such. Methods for COding DECoding speech are referred to as codecs. The European Telecommunications Standards Institute ETSI provides several codecs for encoding speech for use in DSR including for example the ETSI ES 201 108 DSR Front end Codec the ETSI ES 202 050 Advanced DSR Front end Codec the ETSI ES 202 211 Extended DSR Front end Codec and the ETSI ES 202 212 Extended Advanced DSR Front end Codec. In standards such as RFC3557 entitled

RTP Payload Format for European Telecommunications Standards Institute ETSI European Standard ES 201 108 Distributed Speech Recognition Encoding

RTP Payload Formats for European Telecommunications Standards Institute ETSI European Standard ES 202 050 ES 202 211 and ES 202 212 Distributed Speech Recognition Encoding the IETF provides standard RTP payload formats for various codecs. It is useful to note therefore that there is no limitation in the present inventive subject matter regarding codecs payload formats or packet structures. Multimodal applications according to embodiments of the present inventive subject matter may implement any codec including for example 

As mentioned a multimodal device according to embodiments of the present inventive subject matter is capable of providing speech to a speech engine for recognition. A speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating or synthesizing human speech. The speech engine implements speech recognition by use of a further module referred to in this specification as a ASR engine and the speech engine carries out speech synthesis by use of a further module referred to in this specification as a text to speech TTS engine. As shown in a speech engine may be installed locally in the multimodal device itself or a speech engine may be installed remotely with respect to the multimodal device across a data communications network in a voice server . A multimodal device that itself contains its own speech engine is said to implement a thick multimodal client or thick client because the thick multimodal client device itself contains all the functionality needed to carry out speech recognition and speech synthesis through API calls to speech recognition and speech synthesis modules in the multimodal device itself with not need to send requests for speech recognition across a network and no need to receive synthesized speech across a network from a remote voice server. A multimodal device that does not contain its own speech engine is said to implement a thin multimodal client or simply a thin client because the thin multimodal client itself contains only a relatively thin layer of multimodal application software that obtains speech recognition and speech synthesis services from a voice server located remotely across a network from the thin client. For ease of explanation only one of the multimodal devices in the system of is shown with a speech engine but readers will recognize that any multimodal device may have a speech engine according to embodiments of the present inventive subject matter.

A multimodal application in this example runs in a multimodal browser . The multimodal client application may be a set or sequence of X V or SALT documents that execute on the multimodal browser . The multimodal browser of supports the execution of a media player through voice modes and non voice modes. A media player is automated computing machinery for managing and administering media content in media files such as audio files and video files. Examples of media players that may be modified for use in accordance with the present inventive subject matter include Music Match iTunes Songbird and others as will occur to those of skill in the art.

A multimodal application in this example running in a multimodal browser provides speech for recognition and text for speech synthesis to a speech engine through a VoiceXML interpreter . A VoiceXML interpreter is a software module of computer program instructions that accepts voice dialog instructions from a multimodal application typically in the form of a VoiceXML element. The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

A Form Interpretation Algorithm FIA drives the interaction between the user and a multimodal application. The FIA is generally responsible for selecting and playing one or more speech prompts collecting a user input either a response that fills in one or more input items or a throwing of some event and interpreting actions that pertained to the newly filled in input items. The FIA also handles multimodal application initialization grammar activation and deactivation entering and leaving forms with matching utterances and many other task. The FIA also maintains an internal prompt counter that is increased with each attempt to provoke a response from a user. That is with each failed attempt to prompt a matching speech response from a user an internal prompt counter is incremented.

As shown in a VoiceXML interpreter may be installed locally in the multimodal device itself or a VoiceXML interpreter may be installed remotely with respect to the multimodal device across a data communications network in a voice server . In a thick client architecture a multimodal device includes both its own speech engine and its own VoiceXML interpreter . The VoiceXML interpreter exposes an API to the multimodal application for use in providing speech recognition and speech synthesis for the multimodal application. The multimodal application provides dialog instructions VoiceXML elements grammars input elements event handlers and so on through the API to the VoiceXML interpreter and the VoiceXML interpreter administers the speech engine on behalf of the multimodal application. In the thick client architecture VoiceXML dialogs are interpreted by a VoiceXML interpreter on the multimodal device. In the thin client architecture VoiceXML dialogs are interpreted by a VoiceXML interpreter on a voice server located remotely across a data communications network from the multimodal device running the multimodal application .

The VoiceXML interpreter provides grammars speech for recognition and text prompts for speech synthesis to the speech engine and the VoiceXML interpreter returns to the multimodal application speech engine output in the form of recognized speech semantic interpretation results and digitized speech for voice prompts. In a thin client architecture the VoiceXML interpreter is located remotely from the multimodal client device in a voice server the API for the VoiceXML interpreter is still implemented in the multimodal device with the API modified to communicate voice dialog instructions speech for recognition and text and voice prompts to and from the VoiceXML interpreter on the voice server. For ease of explanation only one of the multimodal devices in the system of is shown with a VoiceXML interpreter but readers will recognize that any multimodal device may have a VoiceXML interpreter according to embodiments of the present inventive subject matter. Each of the example multimodal devices in the system of may be configured to carry out improving speech capabilities of a multimodal application and dynamically extending the speech prompts of a multimodal application according to the present inventive subject matter. The use of these four example multimodal devices is for explanations only not for limitation of the inventive subject matter. Any automated computing machinery capable of accepting speech from a user providing the speech digitized to an ASR engine through a VoiceXML interpreter and receiving an playing speech prompts and responses from the VoiceXML interpreter may be improved to function as a multimodal device for improving speech capabilities of a multimodal application according to the present inventive subject matter.

The system of also includes a voice server which is connected to data communications network through wireline connection . The voice server is a computer that runs a speech engine that provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning text representing recognized speech. Voice server also provides speech synthesis text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java voice applications.

The system of includes a data communications network that connects the multimodal device and the voice server for data communications. A data communications network useful for improving speech capabilities of a multimodal application and dynamically extending the speech prompts of a multimodal application according to embodiments of the present inventive subject matter is a data communications network composed of a plurality of computers that function as data communications routers connected for data communications with packet switching protocols. Such a data communications network may be implemented with optical connections wireline connections or with wireless connections. Such a data communications network may include intranets internets local area data communications networks LANs and wide area data communications networks WANs . Such a data communications network may implement for example 

The system of includes a web server connected for data communications through wireline connection to network and therefore to the multimodal devices . The web server may be any server that provides to client devices markup document that compose multimodal applications. The web server typically provides such markup documents via a data communications protocol HTTP HDTP WAP or the like. That is although the term web is used to describe the web server generally in this specification there is no limitation of data communications between multimodal devices and the web server to HTTP alone. The markup documents also may be implemented in any markup language that supports non speech display elements data entry elements and speech elements for identifying which speech to recognize and which words to speak grammars form elements and the like including for example X V and SALT. A multimodal application in a multimodal device then upon receiving from the web server a markup document as part of a multimodal application may execute speech elements by use of a VoiceXML interpreter and speech engine in the multimodal device itself or by use of a VoiceXML interpreter and speech engine located remotely from the multimodal device in a voice server .

The arrangement of the multimodal device the web server the voice server and the data communications network making up the exemplary system illustrated in are for explanation not for limitation. Data processing systems useful for improving speech capabilities of a multimodal application according to the present inventive subject matter may include additional severs routers other devices and peer to peer architectures not shown in as will occur to those of skill in the art. Data communications networks in suck data processing systems may support many data communications protocols in addition to those noted above. Various embodiments of the present inventive subject matter may be implemented on a variety of hardware platforms in addition to those illustrated in .

Improving speech capabilities of a multimodal application and dynamically extending the speech prompts of a multimodal application according to embodiments of the present inventive subject matter in a thin client architecture may be implemented with one ore more voice servers computers that is automated computing machinery that provide speech recognition and speech synthesis. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a voice server . The voice server of includes at least one computer processor or CPU as well as random access memory RAM which is connected through a high speed memory bus and bus adapter to processor and to other components of the voice server.

Stored in RAM is a voice server application a module of computer program instructions capable of operating a voice server in a system that is configured for use in improving speech capabilities of a multimodal application and dynamically extending the speech prompts of a multimodal application provides voice recognition services for multimodal devices by accepting requests for speech recognition and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and text as string representations of scripts for semantic interpretation. Voice server application also includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT application or Java Speech applications.

Voice server application may be implemented as a web server implemented in Java C or another language that supports X V SALT VoiceXML or other multimodal languages by providing responses to HTTP requests from X V clients SALT clients Java Speech clients or other multimodal clients. Voice server application may for a further example be implemented as a Java server that runs on a Java Virtual Machine and supports a Java voice framework by providing responses to HTTP requests from Java client applications running on multimodal devices. And voice server applications that support embodiments of the present inventive subject matter may be implemented in other ways as may occur to those of skill in the art and all such ways are well within the scope of the present inventive subject matter.

The voice server in this example includes a speech engine . The speech engine is a functional module typically a software module although it may include specialized hardware also that does the work of recognizing and generating human speech. The speech engine includes an automated speech recognition ASR engine for speech recognition and a text to speech TTS engine for generating speech. The speech engine also includes a grammar a lexicon and a language specific acoustic model . The language specific acoustic model is a data structure a table or database for example that associates SFVs with phonemes representing to the extent that it is practically feasible to do so all pronunciations of all the words in a human language. The lexicon is an association of words in text form with phonemes representing pronunciations of each word the lexicon effectively identifies words that are capable of recognition by an ASR engine. Also stored in RAM is a Text To Speech TTS Engine a module of computer program instructions that accepts text as input and returns the same text in the form of digitally encoded speech for use in providing speech as prompts for and responses to users of multimodal systems.

The grammar communicates to the ASR engine the words and sequences of words that currently may be recognized. For precise understanding distinguish the purpose of the grammar and the purpose of the lexicon. The lexicon associates with phonemes all the words that the ASR engine can recognize. The grammar communicates the words currently eligible for recognition. The set of words currently eligible for recognition and the set of words capable of recognition may or may not be the same.

Grammars may be expressed in any format supported by any ASR engine including for example the Java Speech Grammar Format JSGF the format of the W3C Speech Recognition Grammar Specification SRGS the Augmented Backus Naur Format ABNF form the IETF s RFC2234 in the form of a stochastic grammar as described in the W3C s Stochastic Language Models N Gram Specification and in other grammar formats as may occur to those of skill in the art. Grammars typically operate as elements of dialogs such as for example a VoiceXML or an X V . A grammar s definition may be expressed in line in a dialog. Or the grammar may be implemented externally in a separate grammar document and reference from with a dialog with a URI. Here is an example of a grammar expressed in JSFG 

In this example the elements named and are rules of the grammar. Rules are a combination of a rule name and an expansion of a rule that advises an ASR engine or a voice interpreter which words presently can be recognized. In the example expansion includes conjunction and disjunction and the vertical bars mean or. An ASR engine or a voice interpreter processes the rules in sequence first then then . The rule accepts for recognition call or phone or telephone plus that is in conjunction with whatever is returned from the rule and the rule. The rule accepts bob or martha or joe or pete or chris or john or artoush and the rule accepts today or this afternoon or tomorrow or next week. The command grammar as a whole matches utterances like these for example 

The voice server application in this example is configured to receive from a multimodal client located remotely across a network from the voice server digitized speech for recognition from a user and pass the speech along to the ASR engine for recognition. ASR engine is a module of computer program instructions also stored in RAM in this example. In carrying out automated speech recognition the ASR engine receives speech for recognition in the form of at least one digitized word and uses frequency components of the digitized word to derive a Speech Feature Vector SFV . An SFV may be defined for example by the first twelve or thirteen Fourier or frequency domain components of a sample of digitized speech. The ASR engine can use the SFV to infer phonemes for the word from the language specific acoustic model . The ASR engine then uses the phonemes to find the word in the lexicon .

Also stored in RAM is a VoiceXML interpreter a module of computer program instructions that processes VoiceXML grammars VoiceXML input to VoiceXML interpreter may originate for example from VoiceXML clients running remotely on multimodal devices from X V clients running remotely on multimodal devices from SALT clients running on multimodal devices or from Java client applications running remotely on multimedia devices. In this example VoiceXML interpreter interprets and executes VoiceXML segments representing voice dialog instructions received from remote multimedia devices and provided to VoiceXML interpreter through voice server application .

A multimodal application in a thin client architecture may provide voice dialog instructions VoiceXML segments VoiceXML elements and the like to VoiceXML interpreter through data communications across a network with multimodal application . The voice dialog instructions include one or more grammars data input elements event handlers and so on that advise the VoiceXML interpreter how to administer voice input from a user and voice prompts and responses to be presented to a user. The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA . The VoiceXML interpreter interprets VoiceXML dialogs provided to the VoiceXML interpreter by a multimodal application.

As mentioned above a Form Interpretation Algorithm FIA drives the interaction between the user and multimodal application. The FIA is generally responsible for selecting and playing one or more speech prompts collecting a user input either a response that fills in one or more input items or a throwing of some event and interpreting actions that pertained to the newly filled in input items. The FIA also handles multimodal application initialization grammar activation and deactivation entering and leaving forms with matching utterances and many other tasks. The FIA also maintains an internal prompt counter that is increased with each attempt to provoke a response from a user. That is with each failed attempt to prompt a matching speech response from a user an internal prompt counter is incremented.

Also stored in RAM is an operating system . Operating systems useful in voice servers according to embodiments of the present inventive subject matter include UNIX Linux Microsoft NT AIX IBM s i5 OS and others as will occur to those of skill in the art. Operating system voice server application VoiceXML interpreter ASR engine JVM and TTS Engine in the example of are shown in RAM but many components of such software typical are stored in non volatile memory also for example on a disk drive .

Voice server of includes bus adapter a computer hardware component that contains drive electronics for high speed buses the front side bus the video bus and the memory bus as well as drive electronics for the slower expansion bus . Examples of bus adapters useful in voice servers according to embodiments of the present inventive subject matter include the Intel Northbridge the Intel Memory Controller Hub the Intel Southbridge and the Intel I O Controller Hub. Examples of expansion buses useful in voice servers according to embodiments of the present inventive subject matter include Industry Standard Architecture ISA buses and Peripheral Component Interconnect PCT buses.

Voice server of includes disk drive adapter coupled through expansion bus and bus adapter to processor and other components of the voice server . Disk drive adapter connects non volatile data storage to the voice server in the form of disk drive . Disk drive adapters useful in voice servers include Integrated Drive Electronics IDE adapters Small Computer System Interface SCSI adapters and other as will occur to those of skill in the art. In addition non volatile computer memory may be implemented for a voice server as an optical disk drive electrically erasable programmable read only memory so called EEPROM or Flash memory RAM drives and so on as will occur to those of skill in the art.

The example voice server of includes one or more input output I O adapters . I O adapters in voice servers implement user oriented input output through for example software drivers and computer hardware for controlling output to display devices such as computer display screens as well as user input from user input devices such as keyboards and mice. The example voice server of includes a video adapter which is an example of an I O adapter specially designed for graphic output to a display device such as a display screen or computer monitor. Video adapter is connected to processor through a high speed video bus bus adapter and the front side bus which is also a high speed bus.

The exemplary voice server of includes a communications adapter for data communications with other computers and for data communications with a data communication network . Such data communications may be carried out serially through RS 232 connections through external buses such as a Universal Serial Bus USB through data communications data communications networks such as IP data communications networks and in other ways as will occur to those of skill in the art. Communications adapters implement the hardware level of data communications through which one computer sends data communications to another computer directly or through a data communications network. Examples of communications adapter useful for embodiments of the present inventive subject matter include modems for wired dial up communications Ethernet IEEE 802.3 adapters for wired data communications network communications and 802.11 adapters for wireless data communications network communications.

For further explanation sets forth a functional block diagram of exemplary apparatus for improving speech capabilities of a multimodal application and dynamically extending the speech prompts of a multimodal application according to the present inventive subject matter in a thin client architecture according to embodiments of the present inventive subject matter. The example of includes a multimodal device and a voice server connected for data communication by a VOIP connection through a data communications network . A multimodal application runs on the multimodal device and a voice server application runs on the voice server . The multimodal client application may be a set or sequence of X V or SALT documents that execute of multimodal browser a Java voice application that executes on the Java Virtual Machine or a multimodal application implemented in other technologies as may occur to those of skill in the art. The multimodal client application also includes a prompt document . A prompt document is a markup documents making up a multimodal application that includes speech prompts. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec .

In addition to the multimodal server application the voice server also has installed upon it a speech engine with an ASR engine a grammar a lexicon a language specific acoustic model and a TTS engine as well as JVM and a Voice XML interpreter . VoiceXML interpreter interprets and executes VoiceXML dialog instructions received from the multimodal application and provided to VoiceXML interpreter through voice server application . VoiceXML input to VoiceXML interpreter may originate from the multimodal application implemented as an X V client running remotely on the multimodal device . As noted above the multimedia device application also may be implemented as a Java client application running remotely on the multimedia device a SALT application running remotely on the multimedia device and in other ways as may occur to those of skill in the art.

VOIP stands for Voice Over Internet Protocol a generic term for routing speech over an IP based data communications network. The speech data flows over a general purpose packet switched data communications network instead of traditional dedicated circuit switched voice transmission lines. Protocols used to carry voice signals over the IP data communications network are commonly referred to as Voice over IP or VOIP protocols. VOIP traffic may be deployed on any IP data communications network including data communications network lacking a connection to the rest of the Internet for instance on a private building wide local area data communications network or LAN. 

Many protocols are used to effect VOIP. The two most popular types of VOIP are effected with the IETF s Session Initiation Protocol SIP and the ITU s protocol known as H.323. SIP clients use TCP and UDP port 5060 to connect to SIP servers. SIP itself is used to set up and tear down calls for speech transmission. VOIP with SIP then uses RTP for transmitting the actual encoded speech. Similarly H.323 is an umbrella recommendation from the standards branch of the International Telecommunications Union that defines protocols to provide audio visual communication sessions on any packet data communications network.

The apparatus of operates in a manner that is similar to the operation of the system of described above. Multimodal application is a user level multimodal client side computer program that presents a voice interface to user provides audio prompts and responses and accepts input speech for recognition . Multimodal application provides a speech interface through which a user may provide oral speech for recognition through microphone and have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . Multimodal application then packages the digitized speech in a recognition request message according to a VOIP protocol and transmits the speech to voice server through the VOIP connection on the network .

Voice server application provides voice recognition services for multimodal devices by accepting dialog instructions VoiceXML segments and returning speech recognition results including text representing recognized speech text for use as variable values in dialogs and output from execution of semantic interpretation scripts as well as voice prompts. Voice server application includes computer program instructions that provide text to speech TTS conversion for voice prompts and voice responses to user input in multimodal applications such as for example X V applications SALT applications or Java Speech applications.

The voice server application receives speech for recognition from a user and passes the speech through API calls to VoiceXML interpreter which in turn uses an ASR engine for speech recognition. The ASR engine receives digitized speech for recognition uses frequency components of the digitized speech to derive an SFV uses the SFV to infer phonemes for the word from the language specific acoustic model and uses the phonemes to find the speech in the lexicon . The ASR engine then compares speech found as words in the lexicon to words in a grammar to determine whether words or phrases in speech are recognized by the ASR engine.

A multimodal application in some embodiments of the present inventive subject matter may run in a multimodal browser . The multimodal browser of is capable of receiving a media file having a metadata container retrieving from the metadata container a speech artifact related to content stored in the media file for inclusion in the speech engine available to the multimodal browser determining whether the speech artifact includes a grammar rule or a pronunciation rule. If the speech artifact includes a grammar rule the multimodal browser is capable of modifying the grammar of the speech engine to include the grammar rule. If the speech artifact includes a pronunciation rule the multimodal browser is capable of modifying the lexicon of the speech engine to include the pronunciation rule.

The multimodal browser of also includes a prompt generation engine capable of dynamically extending the speech prompts of a multimodal application according to embodiments of the present inventive subject matter. The prompt generation engine comprises automated computing machinery capable of receiving a media file having a metadata container retrieving from the metadata container a speech prompt related to content stored in the media file for inclusion in the multimodal application and modifying the multimodal application to include the speech prompt . The prompt generation engine in many embodiments of the present inventive subject matter carries out dynamically extending the speech prompts when importing the media file onto the multimodal device. In the example of the prompt generation engine is included in the multimodal browser. This is for example and not for limitation. In fact the prompt generation engine may be implemented as a stand along module included in a multimodal media player or included in other modules as will occur to those of skill in the art.

The multimodal application is operatively coupled to the ASR engine . In this example the operative coupling between the multimodal application and the ASR engine is implemented with a VOIP connection through a voice services module then through the voice server application and either JVM VoiceXML interpreter or SALT interprets depending on whether the multimodal application is implemented in X V Java or SALT. The voice services module is a thin layer of functionality a module of computer program instructions that presents an API for use by an application level program in providing dialog instructions and speech for recognition to a voice server application and receiving in response voice prompts and other responses. In this example application level programs are represented by multimodal application JVM and multimodal browser .

The voice services module provides data communications services through the VOIP connection and the voice server application between the multimodal device and the VoiceXML interpreter . The API is the same API presented to applications by a VoiceXML interpreter when the VoiceXML interpreter is installed on the multimodal device in a thick client architecture on . So form the point of view of an application calling the API the application is calling the VoiceXML interpreter directly. The data communications functions of the voice services module are transparent to applications that call the API . At the application level calls to the API may be issued from the multimodal browser which provides an execution environment for the multimodal application when the multimodal application is implemented with X V. And calls to the API may be issued from the JVM which provides an execution environment for the multimodal application when the multimodal application is implemented with Java.

Improving speech capabilities of a multimodal application and dynamically extending the speech prompts according to embodiments of the present inventive subject matter in thick client architectures is generally implemented with multimodal devices that is automated computing machinery or computers. In the system of for example all the multimodal devices are implemented to some extent at least as computers. For further explanation therefore sets forth a block diagram of automated computing machinery comprising an example of a computer useful as a multimodal device for improving speech capabilities of a multimodal application and dynamically extending the speech prompts according to embodiments of the present inventive subject matter. In a multimodal device implementing a thick client architecture as illustrated in the multimodal device has no connection to a remote voice server containing a VoiceXML interpreter and a speech engine. All the component needed for speech synthesis and voice recognition according to embodiments of the present inventive subject matter are installed or embedded in the multimodal device itself.

The example multimodal device of includes several components that are structured and operate similarly as do parallel components of the voice server having the same drawing reference numbers as described above with reference to at least one computer processor frontside bus RAM high speed memory bus bus adapter video adapter video bus expansion bus communications adapter I O adapter disk drive adapter an operating system a JVM a VoiceXML Interpreter a speech engine and son on. As in the system of the speech engine in the multimodal device of includes an ASR engine a grammar a lexicon a language dependent acoustic model and a TTS engine . The VoiceXML interpreter administers such dialogs by processing the dialog instructions sequentially in accordance with a VoiceXML Form Interpretation Algorithm FIA .

The speech engine in this kind of embodiment a thick client architecture often is implemented as an embedded module in a small form factor device such as a handheld device a mobile phone PDA and the like. An example of an embedded speech engine useful according to embodiments of the present inventive subject matter is IBM s Embedded ViaVoice Enterprise. The example multimodal device of also includes a sound card which is an example of an I O adapter specially designed for accepting analog audio signals from a microphone and converting the audio analog signals to digital form for further processing by a codec . The sound card is connected to processor through expansion bus bus adapter and from side bus .

Also stored in RAM in this example is a multimodal application a module of computer program instructions capable of operating a multimodal device as an apparatus that supports embodiments of the present inventive subject matter. The multimodal application runs with a multimodal browser and implements speech recognition by accepting speech for recognition form a user and sending the speech for recognition through API calls to the ASR engine . The multimodal application and the multimodal browser implement speech synthesis generally by sending words to be used as prompts for a user to the TTS engine . As an example of thick client architecture the multimodal application in this example does not send speech for recognition across a network to a voice server for recognition and the multimodal application in this example does not receive synthesized speech TTS prompts and responses across a network from a voice server. All grammar processing voice recognition and text to speech conversion in this example is performed in an embedded fashion in the multimodal device itself.

More particularly multimodal application in this example is a user level multimodal client side computer program that provides a speech interface through which a user may provide oral speech for recognition through microphone have the speech digitized through an audio amplifier and a coder decoder codec of a sound card and provide the digitized speech for recognition to ASR engine . The multimodal application may be implemented as a set or sequence of X V documents executing in a multimodal browser or microbrowser that passes VoiceXML grammars and digitized speech by calls through an API directly to an embedded VoiceXML interpreter for processing. The embedded VoiceXML interpreter may in turn issue requests for speech recognition through API calls directly to the embedded ASR engine . Multimodal application also can provide speech synthesis TTS conversion by API calls to the embedded TTS engine for voice prompts and voice responses to user input.

In further exemplary embodiments the multimodal application may be implemented as a set or sequence X V documents or SALT documents executed on a multimodal browser or microbrowser that issues calls through the VoiceXML API for speech recognition and speech synthesis services. In addition to X V SALT and Java implementations multimodal application may be implemented in other technologies as will occur to those of skill in the art and all such implementations are well within the scope of the present inventive subject matter.

The multimodal application is operatively coupled to the ASR engine through an API . In this example the operative coupling between the multimodal application and the ASR engine is implemented by either JVM VoiceXML interpreter or SALT interpreter depending on whether the multimodal application is implemented in X V Java or SALT. When the multimodal application is implemented in X V the operative coupling is effected through the multimodal browser which provides and operating environment and an interpreter for the X V application and then through the VoiceXML interpreter which passes grammars and voice utterances for recognition to the ASR engine. When the multimodal application is implemented in Java Speech the operative coupling is effected through the JVM which provides an operating environment of the Java application and passes grammars and voice utterances for recognition to the ASR engine. When the multimodal application is implemented in SALT the operative coupling is effected through the SALT interpreter which provides an operating environment and an interpreter for the X V application and passes grammars and voice utterances for recognition to the ASR engine.

The multimodal application in this example running on a multimodal device that contains its own VoiceXML interpreter and its own speech engine with no network or VOIP connection to a remote voice server containing a remote VoiceXML interpreter or a remote speech engine is an example of a so called thick client architecture so called because all of the functionality for processing voice mode interactions between a user and the multimodal application as well as the functionality for speech recognition is implemented on the multimodal device itself.

The multimodal browser of operates generally to carry out improving speech capabilities of a multimodal application by receiving a media file having a metadata container retrieving from the metadata container a speech artifact related to content stored in the media file for inclusion in the speech engine available to the multimodal browser determining whether the speech artifact includes a grammar rule or a pronunciation rule if the speech artifact includes a grammar rule modifying the grammar of the speech engine to include the grammar rule and if the speech artifact includes a pronunciation rule modifying the lexicon of the speech engine to include the pronunciation rule.

The multimodal browser of also includes a prompt generation engine capable of dynamically extending the speech prompts of a multimodal application according to embodiments of the present inventive subject matter. The prompt generation engine comprises automated computing machinery capable of receiving a media file having a metadata container retrieving from the metadata container a speech prompt related to content store in the media file for inclusion in the multimodal application and modifying the multimodal application to include the speech prompt . The prompt generation engine in many embodiments of the present inventive subject matter carries out dynamically extending the speech prompts when importing the media file onto the multimodal device. In the example of the prompt generation engine is included in the multimodal browser. This is for example and not for limitation. In fact the prompt generation engine may be implemented as a stand along module included in a multimodal media player or included in other modules as will occur to those of skill in the art.

For further explanation sets forth a flow chart illustrating a method of improving speech capabilities of a multimodal application. The method of is implemented with a multimodal browser and a speech engine operating on a multimodal device supporting multiple modes of user interaction with the multimodal application. The modes of user interaction supported by the multimodal device include a voice mode and one or more non voice modes. The voice mode includes accepting speech input from a user digitizing the speech and providing digitized speech to a speech engine available to the multimodal browser for recognition. The non voice mode includes accepting input from a user through physical user interaction with a user input device for the multimodal device. The multimodal browser comprises a module of automated computing machinery for executing the multimodal application and also supports the execution of a media file player. Such a media file player is capable of playing media files such as audio or video files. Examples of such media files include MPEG3 .mp3 files MPEG4 .mp4 files Advanced Audio Coding AAC compressed files Advances Streaming Format ASF Files WAV files and many others as will occur to those of skill in the art.

The method of includes receiving by the multimodal browser a media file having a metadata container . A metadata container contains metadata describing the content of the media file. Such content may include for example the name of the artist of the song contained in the media file the name of the album associated with that song album art the name of the song contained in the media file and any other metadata that will occur to those of skill in the art.

MPEG media files support a metadata container called ID3 tags. One particular form of the ID3 tag is an ID3v2 tag. ID3v2 tag provides a container for metadata associated with the media file. An ID3v2 tag includes one or more frames supporting the inclusion of text images files and other information. ID3v2 tags are flexible and expandable because parsers that do not support specific functions of an ID3v2 tag will ignore those functions. ID3v2 supports Unicode thereby providing the ability to include extracted text of many different languages. The maximum tag size of an ID3v2 tag is typically 256 megabytes and maximum frame size is typically 16 megabytes.

The method of includes retrieving by the multimodal browser from the metadata container a speech artifact related to content stored in the media file for inclusion in the speech engine available to the multimodal browser . A speech artifact is one or more individual speech rules for inclusion in either a grammar or lexicon available to a speech engine used by a multimodal browser for use in executing a multimodal application. Such speech artifacts are often embodied in an XML document. The artifact may be extracted from the XML document and included in a larger grammar defining the words understood by the speech recognition engine or in a lexicon defining the manner in which the words so recognized are pronounced.

In the method of retrieving by the multimodal browser from the metadata container a speech artifact for inclusion in a speech engine available to the multimodal browser is carried out by scanning the metadata container for a tag identifying the speech artifact . Scanning the metadata container for a tag identifying the speech artifacts may be carried out by scanning an ID3 container of an MPEG media file for a frame identifying speech artifacts. As mentioned above ID3v2 tags includes one or more frames supporting the inclusion of text image files and other information. Such ID3 tags may be expanded to include frames for speech artifacts. Such a new frame may identify a grammar rule of a lexicon for inclusion in a speech engine.

The method of includes determining whether the speech artifact includes a grammar rule of a pronunciation rule. Determining whether the speech artifact includes a grammar rule or a pronunciation rule may be carried out by identifying a frame in an ID3 tag designating a grammar rule or a pronunciation rule. A grammar rule identifies words and sequences of words that may be recognized by a speech engine in executing a multimodal application. A pronunciation rule identifies an association of words in text form with phonemes representing pronunciations of the words

If the speech artifact includes a grammar rule the method of includes modifying by the multimodal browser the grammar of the speech engine to include the grammar rule . Modifying by the multimodal browser the grammar of the speech engine to include the grammar rule may be carried out by calling functions in an API exposed by the speech engine to modify the grammar of the speech engine to include the grammar rule .

If the speech artifact includes a pronunciation rule the method of includes modifying by the multimodal browser the lexicon of the speech engine to include the pronunciation role . Modifying by the multimodal browser the lexicon of the speech engine to include the pronunciation rule may be carried out by calling functions in an API exposed by the speech engine to modify the lexicon of the speech engine to include the pronunciation rule .

For further explanation sets forth a flow chart illustrating an exemplary method of improving speech capabilities of a multimodal application. The method of is similar to the method of in that the method of includes receiving by the multimodal browser a media file having a metadata container retrieving by the multimodal browser from the metadata container a speech artifact related to content stored in the media file for inclusion in the speech engine available to the multimodal browser determining whether the speech artifact includes a grammar rule of a pronunciation rule and if the speech artifact includes a grammar rule modifying by the multimodal browser the grammar of the speech engine to include the grammar rule and if the speech artifact includes a pronunciation rule modifying by the multimodal browser the lexicon of the speech engine to include the pronunciation rule .

In the method of retrieving by the multimodal browser from the metadata container a speech artifact for inclusion in a speech engine available to the multimodal browser includes retrieving an XML document from the metadata container . Such an XML document includes text of a grammar rule for inclusion in a speech engine.

In the method of modifying by the multimodal browser the grammar of the speech engine to include the grammar rule includes extracting from the XML document retrieved fro the metadata container a grammar rule and including the grammar rule in an XML grammar document in the speech engine . Extracting from the XML document retrieved from the metadata container a grammar rule and including the grammar rule in an XML grammar document in the speech engine may include copying the text of the grammar rule from the XML document and providing the text to a speech engine through a function call parameterized with the text for inclusion in the XML grammar document in the speech engine.

For further explanation sets forth a flow chart illustrating an exemplary method of improving speech capabilities of a multimodal application. The method of is similar to the method of in that the method of includes receiving by the multimodal browser a media file having a metadata container retrieving by the multimodal browser from the metadata container a speech artifact related to content stored in the media file for inclusion in the speech engine available to the multimodal browser determining whether the speech artifact includes a grammar rule or a pronunciation rule and if the speech artifact includes a grammar rule modifying by the multimodal browser the grammar of the speech engine to include the grammar rule and if the speech artifact includes a pronunciation rule modifying by the multimodal browser the lexicon of the speech engine to include the pronunciation rule .

In the method of retrieving by the multimodal browser from the metadata container a speech artifact for inclusion in a speech engine available to the multimodal browser includes retrieving an XML document from the metadata container . Such an XML document includes text of a pronunciation rule for inclusion in a speech engine.

In the method of modifying by the multimodal browser the lexicon of the speech engine to include the pronunciation rule includes extracting from the XML document retrieved from the metadata container a pronunciation rule and including the pronunciation rule in an XML lexicon document in the speech engine . Extracting from the XML document retrieved from the metadata container a pronunciation rule and including the pronunciation rule in an XML lexicon document in the speech engine may include copying the text of the grammar rule from the XML document and providing the text to a speech engine through a function call parameterized with the text for inclusion in the XML grammar document in the speech engine.

For further explanation consider the following use case for improving speech capabilities of a multimodal application according to embodiments of the present inventive subject matter. A multimodal browser configured according to embodiments of the present inventive subject matter receives a media file having an ID3 metadata container and retrieves from the ID3 metadata container the following speech artifact embodied in an XML document related to content stored in the media file for inclusion in the speech engine available to the multimodal browser 

A multimodal browser according to embodiments of the present inventive subject matter determines whether the speech artifact includes a grammar rule or a pronunciation rule. In this example the speech artifact is a grammar rule so identified by the ID3 tag frame TPENameGrammar which is predefined to identify grammar rules for names of artists. The grammar rule id identifies the grammar rule as a rule for artist names. In this case the grammar rule identifies three artist names associated with the content of the media file John Cougar John Cougar Mellencamp and John Mellencamp A multimodal browser according to embodiments of the present inventive subject matter then may include this grammar rule in an XML grammar of a speech engine by providing the text of the grammar rule for inclusion in the grammar of the speech engine. Multimodal applications for playing songs by John Cougar Mellencamp may now usefully be speech driven using any one of the three names used by John Cougar Mellencamp during his career John Cougar John Cougar Mellencamp and John Mellencamp Such applications may have been incapable of a voice mode using all three names prior to the inclusion of the grammar rule.

Continuing now with a use case for pronunciation rules a multimodal browser configured according to embodiments of the present inventive subject matter receives a media file having an ID3 metadata container and retrieves from the ID3 metadata container the following speech artifact embodied in a XML document related to content stored in the media file for inclusion in the speech engine available to the multimodal browser 

A multimodal browser according to embodiments of the present inventive subject matter determines whether the speech artifact includes a grammar rule or a pronunciation rule. In this example the speech artifact is a pronunciation rule so identified by the ID3 tag frame TPEPronunciationName which is predefined to identify pronunciation rules for names of artists. The pronunciation rule id identifies the grammar word associated with a pronunciation rule which is Sade an artist name that is typically difficult for a speech recognition engine to recognize and a text to speech engine to correctly pronounce. Sade is pronounced Shaaday. The XML document above also references a URI containing an XML pronunciation rule and the multimodal browser retrieves the XML pronunciation rule below 

In this example the pronunciation rule identifies by the tag that the name of the artist whose pronunciation is being defined by the pronunciation rule is Sade. The pronunciation rule also defines the pronunciation of Sade with the tag identifying the phonemes for correct pronunciation of the artist Sade. A multimodal browser according to embodiments of the present inventive subject matter then may include this pronunciation rule in an XML lexicon of a speech engine by providing the text of the pronunciation rule for inclusion in the lexicon of the speech engine.

Multimodal applications for playing songs by Sade may now usefully be speech driven using the proper pronunciation of the artist s name. Such applications may have been incapable of a voice mode using the proper pronunciation of the artist s name prior to the inclusion of the pronunciation rule.

Multimodal applications previously unable to recognize particular words or pronunciations of words related to the content of a media file may now usefully interact with users using those particular words or pronunciations as the grammars and lexicons of the speech engine have been improved for use with multimodal applications. However the recognition of those words and pronunciations by a speech engine does not affect the multimodal application s ability to prompt a user for multimodal interaction related to the content of the media file. That is without more the multimodal application will usefully accept as responses to prompts words and pronunciations of words that the multimodal application will not use in prompting a user. Therefore a multimodal application s speech prompt may also be extended to include specific prompt related to the content of a media file.

For further explanation sets forth a flow chart illustrating an exemplary method of dynamically extending the speech prompts of a multimodal application. The method of is implemented with a prompt generation engine a module of automated computing machinery operating on a multimodal device supporting multiple modes of user interaction with the multimodal application. Those multiple modes of user interaction include a voice mode and one more non voice modes. The voice mode includes accepting speech input from a user digitizing the speech and providing digitized speech to a speech engine. The non voice mode includes accepting input from a user through physical user interaction with a user input device for the multimodal device. The multimodal device comprises a module of automated computing machinery for executing the multimodal application and supports execution of a media file player a module of automated computing machinery for playing media files.

The method of includes receiving by the prompt generation engine a media file having a metadata container . Receiving a media file having a metadata container is typically carried out as part of the process of importing the media file to the multimodal device such that the media file may be played using the multimodal device s media file player.

As mentioned above a metadata container contains metadata describing the content of the media file. Such content may include for example the name of the artist of the song contained in the media file the name of the album associated with that song album art the name of the song contained in the media file and any other metadata that will occur to those of skill in the art.

MPEG media files support a metadata container called ID3 tags. One particular form of the ID3 tag is an ID3v2 tag provides a container for metadata associated with the media file. An ID3v2 tag includes one or more frames supporting the inclusion of text images files and other information. ID3v2 tags are flexible and expandable because parsers that do not support specific functions of an ID3v2 tag will ignore those function. ID3v2 supports Unicode thereby providing the ability to include extracted text of many different languages. The maximum tag size of an ID3v2 tag is typically 256 megabytes and maximum frame size is typically 16 megabytes.

The method of also includes retrieving by the prompt generation engine from the metadata container a speech prompt related to content stored in the media file for inclusion in the multimodal application . A speech prompt is an audio phrase played by a multimodal application to provoke a response from a user. Speech prompts and their response typically drive the interaction between a multimodal application and a user. Speech prompts retrieved from the metadata container of a medial file may be in the form of text to be rendered as speech with a text to speech engine of in the form of an audio file to be played by the multimodal application and multimodal device. Retrieving by the prompt generation engine from the metadata container a speech prompt related to content stored in the media file for inclusion in the multimodal application therefore in alternative embodiments may include retrieving a text string prompt for execution by a text to speech engine or retrieving an audio prompt to be played by the multimodal device.

In the method of retrieving by the prompt generation engine from the metadata container a speech prompt related to content stored in the media file for inclusion in the multimodal application is carried out by identifying a tag for prompts in the metadata container . Identifying a tag for prompts in the metadata container may include identifying a frame for prompts in an ID3 container of an MPEG media file. As mentioned above ID3v2 tags includes one or more frames supporting the inclusion of text images files and other information. Such ID3 tags may be expanded to include frames for speech prompts such as for example the tag TPESpeechPromptArtistName to identify the speech prompt of an artist s name of the a song contained in the media file. Such a new frame may identify a speech prompt for inclusion in a multimodal application.

The method of also includes modifying by the prompt generation engine the multimodal application to include the speech prompt . In the method of modifying by the prompt generation engine the multimodal application to include the speech prompt is carried out by updating a prompt document with the retrieved speech prompt . A prompt document is one of the markup documents making up a multimodal application that includes speech prompts for use by the multimodal application. Updating a prompt document may include copying body of the speech prompt from the metadata container to an existing prompt document of creating a new prompt document including the speech prompt. For further explanation consider the following exemplary prompt document updated according to embodiments of the present inventive subject matter 

In the example above two text string were retrieved from a metadata container of a media file and included in the updated prompt document above. Each speech prompt was assigned a prompt id identifying the prompt as a text string. The tag identifies a prompt for a playlist of the artist John Cougar. A multimodal application using the updated prompt document is now capable of rendering the speech prompt with a text to speech engine to say Pick one of your John Cougar songs Walk Tall Pink Houses Lonely Ol Nights. Similarly the tag identifies a prompt for a playlist of the artist Sade. A multimodal application using the updated prompt document is now capable of rendering the speech prompt with a text to speech engine to say You ve got Sade s greatest hits Smooth Operator Your love is King No Ordinary Love. 

Also in the example above one additional speech prompt is included in the updated prompt document that is embodied as an audio file. The audio file speech prompt was assigned a prompt id identifying the prompt as an audio file. The tag identifies a speech prompt as an audio file for a playlist of the artist Bob Dillon. Such an audio speech prompt may be a recorded prompt made by the artists themselves or by any other person or process.

A multimodal application unable to render the speech prompts above prior to updating the prompt document may render each of the speech prompts above after the prompt document is updated according to embodiments of the present inventive subject matter. For further explanation consider the following snippet of a multimodal application 

In the example above the function getPrompt name dynamically generates a prompt name. Such a function was unable generate a prompt name for the speech prompts in the updated prompt document in response to a user s saying John Cougar Sade or Bob Dillion prior to updating the prompt document above. In the example above the segment 

prompts a user for an artist name. The artist s names John Cougar Bob Dillion and Sade may now be recognized by the speech engine as a response to the prompt because the speech engine was updated according to the methods of . Having correctly recognized the artist selected by a user after carrying out the method of a multimodal application may prompt a user with a speech prompt retrieved by a prompt generation engine from the metadata container of a media file for inclusion in the multimodal application using the following segment of the multimodal application above 

The segment of multimodal application above may now render speech prompts in response to those artists names related to the content of the media file. That is the segment of multimodal application above may now render speech prompts retrieved from a metadata container in a media file specifically relating to the content of that media file. Dynamic extension of the speech prompts of multimodal applications according to embodiments of the present inventive subject matter makes such multimodal applications more robust and flexible.

As will be appreciated by one skilled in the art aspects of the present inventive subject matter may be embodied as a system method or computer program product. Accordingly aspects of the present inventive subject matter may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present inventive subject matter may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the forgoing.

Computer program code for carrying out operations for aspects of the present inventive subject matter may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present inventive subject matter are described with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the inventive subject matter. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

While the embodiments are described with reference to various implementations and exploitations it will be understood that these embodiments are illustrative and that the scope of the inventive subject matter is not limited to them. In general techniques for dynamically extending the speech prompts of a multimodal application as described herein may be implemented with facilities consistent with any hardware system or hardware systems. Many variations modifications additions and improvements are possible.

Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the inventive subject matter. In general structures and functionality presented as separate components in the exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the inventive subject matter.

