---

title: Proxy server-based malware detection
abstract: Disclosed are various embodiments for malware detection by way of proxy servers. In one embodiment, a proxy server application generates a browsing history for client devices based at least in part on proxied network resource requests received from the client devices. The proxy server application determines that at least one of the client devices is affected by malware. The proxy server application determines a source of the malware based at least in part on the browsing history or telemetry data received from the client devices. An action is implemented in response to determining the source of the malware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09537888&OS=09537888&RS=09537888
owner: Amazon Technologies, Inc.
number: 09537888
owner_city: Seattle
owner_country: US
publication_date: 20130408
---
Malware is an increasing problem for network content. Many nefarious network sites are created solely for the purpose of distributing malware to unsuspecting visitors. Further nefarious users may exploit security vulnerabilities of legitimate network sites to distribute malware. Unfortunately security vulnerabilities of user systems are often discovered and exploited before the systems can be effectively patched and updated.

The present disclosure relates to detection of malware using a proxy server. For various reasons client devices may be configured to access network resources by way of a proxy server. Rather than initiating a network resource request to a network site directly a client device behind a proxy server is instead configured to send the network resource request to the proxy server. The proxy server then obtains the network resource from the network site and then returns the network resource to the requesting client device.

The proxy server may be configured to cache the network resource to provide faster downloads and or reduce bandwidth consumption for subsequent accesses of the network resource by client devices. The proxy server may be configured to perform various preprocessing functionality on the network resource e.g. reduce image sizes execute scripts remove banner advertisements etc. before returning the network resource to the client device. Additionally the proxy server may be configured to perform filtering functionality to prevent client devices from accessing objectionable material.

Various embodiments of the present disclosure facilitate malware detection using resources of a proxy server. To this end a proxy server may be considered a choke point through which all client device network traffic passes. Accordingly the browsing history for one or more client devices may be observed and generated in the proxy server. The browsing history may be analyzed in connection with a determination of malware in order to determine the source of the malware. Further the proxied requests may be analyzed to determine whether they embody characteristics of malware. In one embodiment the client devices may be configured to report telemetry data regarding execution of a network resource and a determination of malware may be made based at least in part on the telemetry data or the absence of such telemetry data. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment one or more computing devices and one or more client devices in data communication via networks and . The networks and may include for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks. In one embodiment the networks and correspond to the same network. In another embodiment the networks and correspond to different networks where the client device is in data communication with the computing environment via the network and the computing environment is in data communication with the computing devices via the network . The network may be separated from the network by way of one or more firewalls gateways routers or other network devices.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed by the computing environment for example include a proxy server application an execution environment and other applications services processes systems engines or functionality not discussed in detail herein. The proxy server application is executed to receive proxied network resource requests from client devices via the network and in turn generate resource requests sent via the network to network sites hosted by the computing devices . In response to the resource requests the proxy server application receives network resources from the network site and the proxy server application may then send network resource data based on the network resources to the client devices via the network . The proxy server application may receive telemetry data and or other data from the client devices . As will be described the proxy server application is configured to determine whether network resources are associated with malware and to implement actions responsive to such a determination.

The execution environment corresponds to an environment in which the network resources may be executed or processed within the computing environment . Such execution may customarily occur at the client devices and the execution may be moved to the computing environment for performance reasons. Additionally the behavior of the network resource when executed may weigh towards a determination of malware for the network resource . The execution environment may be configured as a sandbox where a sandbox violation may weigh towards a determination of malware. In one embodiment the execution environment may be configured to emulate or virtualize a client platform possibly including a browser and or other applications. The execution environment may be configured to mimic the configuration of the client device e.g. browser version installed applications operating system version etc. for malware assessment purposes. Execution of the network resource may for example involve execution of JavaScript or other client executable code in order to render a network page such as a hypertext markup language HTML page extensible markup language XML page or other page.

The data stored in the data store includes for example cached network resources protected user data network resource result data browsing history user submitted malware reports malware associated network sites malware detection configuration data and potentially other data. The cached network resources include network resources that have been cached by the proxy server application in order to fulfill future proxied network resource requests from client devices without having to retrieve the same network resources again.

The protected user data corresponds to data associated with users of the client devices that is considered protected data. Such data may include credit card numbers banking account information passwords and other security credentials social security numbers and or other sensitive information. In one embodiment the protected user data stores the actual sensitive data. In another embodiment the protected user data stores hashes or other profiles of the actual sensitive data.

The network resource result data may include data generated as a result of execution of a network resource by the execution environment . For example a script network resource may be executed in the execution environment to render an HTML document. The resulting HTML document may be served up to the client devices as the network resource data and or stored in the network resource result data .

The browsing history records the proxied network resource requests received from a plurality of client devices . The browsing history may capture all of the data associated with the proxied network resource requests or a subset of the data e.g. a universal resource locator URL form data etc. In one embodiment the browsing history includes times and or other data associated with the proxied network resource requests . Where telemetry data is obtained from the client device the telemetry data may be stored in the browsing history in association with proxied network resource requests .

The user submitted malware reports may include manual reports of malware submitted by users of client devices and or other users. In one embodiment the user submitted malware reports may include indications of malware submitted by a security application executed by the client device .

The malware associated network sites correspond to those network sites that are associated with a determination of malware by the proxy server application . The malware associated network sites may be categorized as being on a blocked list e.g. accesses to such network sites are blocked through the proxy server application a warning list e.g. a warning is generated when a client device requests resources from such network sites or another categorization. The malware associated network sites may be associated with different confidence levels as to whether the malware associated network sites are in fact malware associated. The malware associated network sites may be associated with different threat levels as to the danger posed by the associated malware.

The malware detection configuration data includes various parameters that configure the detection of malware by the proxy server application . Specifically such parameters may define abnormalities in telemetry data recognition of protected user data in unsecured proxied network resource requests recognition of malware on the basis of user submitted malware reports recognition of malware within the execution environment and or other features.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively the computing device may employ a plurality of computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing device may correspond to a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing device may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a network site content data store that is accessible to the computing environment . The network site content data store may be representative of a plurality of network site content data stores as can be appreciated. The data stored in the network site content data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed by the computing environment for example include a network site and other applications services processes systems engines or functionality not discussed in detail herein. The network site may comprise a web site or other form of network content provider. To this end the network site may comprise a hypertext transfer protocol HTTP server. Non limiting examples of commercially available HTTP servers include Apache HTTP Server Apache Tomcat Microsoft Internet Information Services IIS and others. The network site may serve up various network resources stored in or generated from data stored in the network site content data store . Such network resources may comprise HTML XML applets cascading style sheets CSS scripts images audio video portable document format PDF documents executable programs and or other network resources .

The client device is representative of a plurality of client devices that may be coupled to the network . The client device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client device may include a display . The display may comprise for example one or more devices such as liquid crystal display LCD displays gas plasma based flat panel displays organic light emitting diode OLED displays electrophoretic ink E ink displays LCD projectors or other types of display devices etc.

The client device may be configured to execute various applications such as a browser and or other applications. The browser may be executed in a client device for example to access network content served up by the computing environment the computing devices and or other servers thereby rendering a user interface on the display . The browser may be configured to use the proxy server application rather than request resources directly from the network sites . Alternatively gateway devices in the network may be configured to transparently route certain types of network traffic originating in the client device e.g. traffic via transmission control protocol TCP port and or other ports to the proxy server application . The client device may be configured to execute applications beyond the browser such as for example browsers mobile applications security applications email applications social networking applications and or other applications.

Next a general description of the operation of the various components of the networked environment is provided. To begin the browser is configured to employ the proxy server application as a proxy. Such a configuration may be manual or automatic. Alternatively the network may be configured to intercept and transparently route certain network traffic to the proxy server application without any particular configuration of the client device . As a result of a user browsing a network site or entering a particular URL the browser issues one or more proxied network resource requests which are transmitted to the proxy server application via the network

The proxy server application in response issues a resource request to the network site via the network thereby obtaining a network resource . Alternatively the network resource may be loaded from the cached network resources . The proxy server application may perform processing on the network resource . Thereafter the proxy server application returns network resource data to the browser via the network . The browser may then render a user interface based at least in part on the network resource data .

The proxy server application may be configured to determine a source of malware based at least in part on browsing history . For example the proxy server application may receive indications of malware from security applications of multiple client devices or processing within the computing environment may indicate malware in connection with a network resource . In one embodiment it may be determined that an account associated with the client device has been compromised. The proxy server application may determine a source of the malware from the browsing history based upon the infected client devices accessing a network site in common a network resource in common and so on. Various techniques relating to detecting a source of malware using browsing history are disclosed in U.S. patent application Ser. No. 12 827 478 entitled DETECTING MALWARE and filed on Jun. 30 2010 which issued as U.S. Pat. No. 8 364 811 on Jan. 29 2013 and which is incorporated herein by reference in its entirety.

The proxy server application may be configured to detect malware according to various approaches. To begin the proxy server application may be configured to examine the proxied network resource requests for indications of malware. For example some malware may be configured to transmit sensitive or customarily protected information in an unsecured manner e.g. in clear text etc. to a nefarious network site . In other words malware may transmit credit card numbers social security numbers passwords etc. to the nefarious network sites in a manner not associated with legitimate network sites .

The proxy server application may detect such protected information by scanning the proxied network resource requests for data matching some generic profile for the protected information. As an example a sixteen digit number that can be validated by a Luhn checksum is likely an unencrypted credit card number. As another example the protected information may be detected in the proxied network resource requests using generalized regular expressions for social security numbers email addresses etc. As another example an unencrypted data field resulting from a form input type password in HTML is likely to be an unencrypted password. To detect such a data field the proxy server application may examine the network resource data returned to the client device which contained a form that led to the submission embodied within the proxied network resource request .

Alternatively the proxy server application may detect protected information by comparing data in the proxied network resource requests to verified protected user data . For example the protected user data may store actual credit card numbers social security numbers passwords and other sensitive data. The proxy server application may compare the contents of the proxied network resource requests to determine whether any of the protected user data appears in an unsecured manner in the proxied network resource requests .

For security purposes the protected user data may correspond to hashes of the actual data. In such a case the proxy server application may generate hashes of data embodied within the proxied network resource requests to determine matches to the hashed protected user data . In one embodiment the analysis described above with respect to the proxied network resource requests may be performed by dedicated reconfigurable computer hardware due to computational complexity. Such reconfigurable computer hardware may include field programmable gate arrays FPGAs field programmable object arrays FPGAs memristor arrays and or other reconfigurable hardware.

Another approach to malware detection may involve the proxy server application analyzing the proxied network resource requests for unusual or repetitive patterns. For example a client device infected with malware may begin making repetitive proxied network resource requests to a particular network site to report data and or receive control instructions. When multiple client devices begin contacting such a network site it may be determined that the client devices may be infected with malware. The time of day or day of the week may also be significant to malware determinations. If client devices never make proxied network resource requests at 5 am but suddenly begin doing so the client devices may be infected with malware. Similarly if client devices associated with a business never or seldom make proxied network resource requests on Saturdays when the business is closed but suddenly begin doing so the client devices may be infected with malware. The duration of the activity may also be significant.

In yet another approach the client device may be configured to report telemetry data to the proxy server application in response to receiving the network resource data . Absence of expected telemetry data may be an indicator that the client device has crashed which may be a strong indicator of malware. The telemetry data may indicate memory consumption data storage usage network connections process state system configuration data and or other status information for the client device that may indicate malware. Such system configuration data may report new device drivers being installed new applications being installed new users being added and so on. The telemetry data may indicate that network resource data has resulted in high memory usage significant data usage numerous network connections processes being spawned or other abnormalities which may lead to a determination of malware.

In still another approach to detecting malware the proxy server application may be configured to execute or otherwise examine the network resource via the execution environment . In one embodiment the examination via the execution environment may be triggered by a threshold determination of malware from browsing history and or other data. The execution environment may be configured to emulate or mimic the operating system environment browser version and other configuration characteristics of the client device .

The behavior of the executed network resource may be observed by the execution environment and negative behaviors noted. Such negative behaviors may include unexpected external network connections high processor usage high memory usage sensitive data accesses and or other behaviors. The existence of such behaviors may result in a determination of malware. The network resource result data may be returned to the client device as network resource data and or retained in the data store for further analysis. The proxy server application may also be configured to detect proxy busting or the practice of malware being configured to avoid using a proxy by way of secure sockets layer SSL connections TCP connections via other ports and other approaches.

In one embodiment the proxy server application may detect accesses of canary data or data that is hidden from users within a user interface . Such a user interface may correspond to a remote file explorer. Such canary data may be exposed to malware via an application programming interface API . Malware may be configured to access files or other resources automatically via the API including the canary data. Such an automatic access of otherwise hidden data could be an indicator of malware. Various techniques relating to the use of canary or decoy data are described in U.S. patent application Ser. No. 13 602 466 entitled USE OF DECOY DATA IN A DATA STORE and filed on Sep. 4 2012 and in U.S. patent application Ser. No. 13 849 772 entitled ADAPTING DECOY DATA PRESENT IN A NETWORK and filed on Mar. 25 2013 both of which are incorporated herein by reference in their entirety.

Additionally the proxy server application may receive user submitted malware reports . A determination of malware may be made based at least in part on such user submitted malware reports . It is noted that several of the factors and or approaches discussed herein may be employed to make a determination of malware. The determination may be associated with a confidence level and or a threat level which may influence actions taken in response to the determination.

In response to a determination of malware for a network site and or particular network resources of the network site the proxy server application may implement various actions. The choice of actions to implement may be made based at least in part on a confidence level and or threat level associated with the malware determination. The strongest actions may involve blocking all proxied network resource requests for the network site or portions of the network site . A weaker action may involve encoding a warning in user interface data to be rendered by the browser which may request a configuration from the user before proceeding with the network site .

The proxy server application may log an indication of the source of the malware e.g. for further manual review. In one embodiment the proxy server application may be capable of removing malware from a network resource before returning the network resource data to the client device . Accounts corresponding to client devices associated with a determination of malware may be added to a watch list for extra scrutiny.

Referring next to shown is an example user interface rendered by a browser executed by a client device in the networked environment according to various embodiments. Specifically the user interface depicts a network page that includes a notification that a particular network site www.celebrityspy.site has been blocked in response to a determination of malware. In this case the determination is associated with a 90 confidence level thus leading to the network site being completely blocked. The URL of the network site is displayed in the address bar but the network page is generated by the proxy server application . In another scenario the address bar may indicate a URL of a management site rather than the URL of the network site . Since the network site is blocked the network page provides no option to the user to continue to the content of the network site . In another embodiment a login form may be provided for a user e.g. a system administrator to authenticate in order to bypass the blocking of the network site .

Turning now to shown is another example user interface rendered by a browser executed by a client device in the networked environment according to various embodiments. Specifically the user interface depicts a network page that includes a notification that a particular network site www.celebrityspy.site is associated with a likely determination of malware. In this case the determination is associated with a 60 confidence level thus leading to a warning that can be bypassed. The URL of the network site is displayed in the address bar but the network page is generated by the proxy server application . The user may select a bypass component in order to bypass the warning and continue on the network site .

In one embodiment certain users or client devices may be whitelisted to receive a warning rather than be blocked from accessing the particular network site . The client device may be whitelisted based upon network address user identity Kerberos identity device identity and or other criteria. For example it may be useful for a system administrator to be able to access the network site for inspection purposes. In another embodiment whether the network site is blocked or a mere warning is generated may depend upon the status of the browser . If the browser is current or patched a mere warning may be generated. By contrast if the browser is not current unpatched or otherwise vulnerable the network site may be blocked.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the proxy server application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the proxy server application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the proxy server application receives a proxied network resource request from a client device via the network . In box the proxy server application performs a malware analysis on the proxied network resource request . For example the proxy server application may determine whether protected user data is transmitted in an unsecure manner whether the proxied network resource request is part of a periodic pattern of unusual requests and or other malware associated characteristics.

In box the proxy server application determines whether the proxied network resource request is associated with known malware. If so the proxy server application proceeds to box and implements an action responsive to the malware determination. For example the proxy server application may return a warning or blocked site message to the client device . Thereafter the portion of the proxy server application ends.

If the proxy server application instead determines in box that the proxied network resource request is not associated with known malware the proxy server application continues to box . In box the proxy server application obtains a network resource from a network site via the network according to the proxied network resource request .

In box the proxy server application executes the network resource in the execution environment . In one embodiment the network resource may be executed in the execution environment if the network resource is correlated with malware based at least in part on the browsing history for multiple client devices where the browsing history is observed by the proxy server application . In box the proxy server application performs a malware analysis on the execution of the network resource . For example the proxy server application may determine whether the execution of the network resource results in improper network connections proxy busting high resource usage improper data accesses and or other malware characteristics.

In box the proxy server application evaluates whether a determination of malware is made. If a determination of malware is made the proxy server application proceeds to box and implements an action responsive to the malware determination. For example the proxy server application may block the network site add the network site to a warning list refrain from sending the network resource data to the client device or perform other actions. Thereafter the portion of the proxy server application ends.

If a determination of malware is not made in box the proxy server application continues to box and sends the network resource data to the client device via the network . The proxy server application may then obtain telemetry data from the client device . In box the proxy server application performs a malware analysis on the telemetry data . High resource consumption and or other issues in the telemetry data may weigh towards a malware determination as does the absence of telemetry data i.e. the client device may have crashed . In box the proxy server application again evaluates whether a determination of malware is made. If a determination of malware is made the proxy server application proceeds to box and implements an action responsive to the malware determination. Thereafter or if a determination of malware is not made in box the portion of the proxy server application ends.

Moving on to shown is a flowchart that provides one example of the operation of another portion of the proxy server application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the proxy server application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box the proxy server application generates a browsing history for client devices based at least in part on proxied network resource requests received from the client devices . In box the proxy server application determines that one or more of the client devices are affected by malware. For example the proxy server application may receive an indication of malware from a security application of the client device receive an indication that an associated customer account has been compromised and or receive other malware indications.

In box the proxy server application determines a source of the malware based at least in part on the browsing history and or other observable network behavior for the client devices . Such a source may be a network site in common to browsing history associated with the affected client devices . The proxy server application may also employ telemetry data or the absence of telemetry data to identify malware sources. Other data such as installed client applications browser versions etc. may be employed to determine malware sources. In box the proxy server application implements one or more actions responsive to determining the source of the malware. The proxy server application may block a network site add a network site to a warning list log the source of the malware determine other client devices that are affected by the malware based at least in part on the source of the malware and the browsing history add affected customer accounts to a watch list or perform other actions. Thereafter the portion of the proxy server application ends.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices . Each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the proxy server application the execution environment and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the proxy server application the execution environment and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the proxy server application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the proxy server application and the execution environment that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

