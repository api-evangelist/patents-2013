---

title: Securing content using pipelines
abstract: A transcoding service is described that is capable of transcoding or otherwise processing content, such as video, audio or multimedia content, by utilizing one or more pipelines. A pipeline can enable a user to submit transcoding jobs (or other processing jobs) into an available pipeline, where a transcoding service (or other such service) assigns one or more computing resources to process the jobs received to each pipeline. The transcoding service and the pipelines can be provided by at least one service provider (e.g., a cloud computing provider) or other such entity to a plurality of customers. A service provider can also provide the computing resources (e.g., servers, virtual machines, etc.) used to process the transcoding jobs from the pipelines.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08813245&OS=08813245&RS=08813245
owner: Amazon Technologies, Inc.
number: 08813245
owner_city: Reno
owner_country: US
publication_date: 20130125
---
In recent years there has been a surge of development and releases of new types of mobile devices made available to the public. Today s consumer is often equipped with a smart phone tablet portable media player or other device that can be used to access the internet download and view digital media e.g. video and audio files and perform a wide variety of other functions. Given such large numbers of devices and device types it is quickly becoming a non trivial task to make media content available to all of the consumers across their various devices. In fact many companies are spending large fractions of their time and resources managing scaling and maintaining media processing systems that may have nothing to do with their core business. These companies are looking for encoding systems and services that can provide the best video audio quality to consumers at a low cost. Because digital video and audio content is often delivered to multiple device types over unmanaged networks with fluctuating bandwidth it is desirable to produce a version of each asset to accommodate some or all of these variants.

In the following description various embodiments will be illustrated by way of example and not by way of limitation in the figures of the accompanying drawings. References to various embodiments in this disclosure are not necessarily to the same embodiment and such references mean at least one. While specific implementations and other details are discussed it is to be understood that this is done for illustrative purposes only. A person skilled in the relevant art will recognize that other components and configurations may be used without departing from the scope and spirit of the claimed subject matter.

Systems and methods in accordance with various embodiments of the present disclosure may overcome one or more of the foregoing or other deficiencies experienced in conventional approaches for processing content such as digital media. In particular the various embodiments provide approaches for transcoding or otherwise processing content such as video audio or multimedia content by utilizing one or more pipelines. A pipeline can enable a user to submit transcoding jobs or other processing jobs where a transcoding service or other such service assigns one or more computing resources to process the jobs received to each pipeline. The transcoding service and the pipelines can be provided by at least one service provider e.g. a cloud computing provider or other such entity to a plurality of customers. A service provider can also provide the computing resources e.g. servers virtual machines etc. used to process the transcoding jobs from the pipelines.

In various embodiments a pipeline can be any data structure capable of storing and managing jobs e.g. transcoding jobs submitted by a user to the transcoding service. A transcoding job can connect an input store or other location containing the content e.g. media file to be processed with an output store where the processed content e.g. resulting transcoded file will be stored at least temporarily. Jobs are processed from each pipeline sequentially in the order in which they were received to the pipeline. A pipeline can allow multiple jobs e.g. transcoding jobs to be processed simultaneously by the various computing resources. In some embodiments a pipeline may have a width associated therewith where the width specifies a value such as the maximum number of concurrent jobs that can be processed by the pipeline at any given time. Because the jobs submitted to the pipeline may vary in size or length e.g. minutes of video the jobs may often be finished out of the sequential order e.g. in a different order from the order in which they were submitted to the pipeline .

In accordance with one embodiment the customers of the service provider can use the pipelines to manage their transcoding jobs. For example if a customer has one pipeline that is full with multiple jobs waiting to be processed the customer may choose to schedule the next job e.g. urgent job to a different pipeline e.g. empty pipeline that is waiting for such urgent jobs. In this manner the customer can manage how much work is submitted to each pipeline.

In accordance with another embodiment the customers of the service provider can use the pipelines to control permissions and otherwise secure the transcoding of their content. For example if the customer has multiple departments having need to transcode media content the customer may specify which users or groups of users e.g. departments have permissions to access which pipelines. In this manner the users belonging to a particular department may be given permissions to access a higher priority pipeline if the content of that department is deemed more important to the customer.

In accordance with another embodiment the customers of the service provider may use the pipelines to organize the transcoding of content by media type by device target or based on other characteristics. The customer may associate one or more presets e.g. groupings of transcoding settings and parameters with each pipeline where any transcoding jobs being submitted to the pipeline will have the presets applied to them. For example the customer may choose to have the media content targeted for mobile phones and tablet computers going through one pipeline while media content targeted for television devices is going to a different pipeline. Alternatively the customer may choose to have their social media content going through different pipelines than their premium content. In either event the customer may specify e.g. via an API call that a pipeline should have a particular preset associated with the pipeline such that whenever a transcoding job is submitted to that pipeline the transcoding job will utilize the particular parameters of that preset to transcode the content.

In various embodiments a user may create a transcoding job by invoking an API call of the transcoding service. A transcoding job can connect an input store or other content source an output store or other such repository a preset e.g. transcoding parameters and an option to be notified about the job progress e.g. when the job is processing completed etc. . The input store contains the content to be transcoded or otherwise processed by the transcoding job and the output store is the designated location into which the transcoded content will be placed once the transcoding job is completed. The input store and the output store can be any location capable of storing content such as a directory database file system network accessible storage location or the like. In some embodiments the input store and the output store can be in the same location.

As previously mentioned to schedule a new transcoding job the customer may enter a new job into the system select a pipeline out of the plurality of pipelines and invoke a request to submit the new transcoding job to the pipeline. For example to select the pipeline the customer may invoke an API call passing the pipeline identifier ID as a parameter to the API call. In addition to specifying the pipeline the API request may also specify a preset i.e. a profile to be used with the transcoding job. In one embodiment a preset i.e. profile is a re usable set of transcoding parameters that are designed to support on or more classes of devices. The preset can be provided by the transcoding service. Some presets can be generic e.g. applicable to multiple device types while other presets are optimized for a specific device type. For example a Generic 1080P preset may contain the transcoding parameters and settings to transcode a media file into a format in 1080P definition that is viewable on multiple types of devices. Similarly an iPhone 4S preset may contain the transcoding parameters and settings to transcode the media file into a format viewable on an iPhone of model 4S. In various embodiments numerous other presets can be provided by the transcoding service.

Once the new job has been submitted e.g. using the API to the pipeline the new transcoding job will be scheduled to begin in the sequential order that it was received in the pipeline while still maintaining the number of concurrently executing jobs within the maximum allowed limit. Thus if there are no transcoding jobs executing in the pipeline at the time of submitting the new job the new job can begin to be processed immediately. Similarly if the pipeline s width allows for additional concurrent jobs the new job can be started immediately. However if the pipeline is already executing the maximum allowed number of concurrent jobs e.g. specified by the width of the pipeline the new transcoding job will be queued to begin in the order that it was received.

In the illustrated embodiment pipeline includes five transcoding jobs that have been submitted to the pipeline in the order starting from the bottom to the top. More specifically Job N was the first job submitted to the pipeline and Job N is currently processing. Job N 1 was the next job submitted and this job is now complete as indicated in the figure. Job N 2 was the next job submitted and it is currently being processed. In the illustrated embodiment the pipeline has a corresponding width of 2 i.e. the maximum number of jobs that can be simultaneously executed from the queue. Jobs N 3 and N 4 were submitted and are currently waiting to begin in the sequential order that they were received. Similarly pipeline has two jobs that have been submitted to it by the customer where Job M is currently in progress and Job M 1 is complete. Pipeline is empty and ready to begin any job submitted to it.

In accordance with one embodiment all pipelines can be equal from the service point of view in terms of resources assigned to the pipeline but the customer may choose to designate the pipelines differently to fill different needs. For example a customer may submit low priority jobs to one pipeline and reserve a second empty pipeline for getting high priority jobs through the system quickly. As an illustration the customer may reserve pipeline for urgent or other high priority transcoding jobs while pipeline may be used for all low priority transcoding jobs.

In various embodiments to process the jobs from the pipelines the service assigns one or more computing resources that are capable of processing the transcoding jobs. The computing resources can include any resource capable of being used to transcode or otherwise process content such as a physical server device virtual machine a specified amount of computing capacity or the like. When the transcoding job is started from a pipeline the one or more computing resources that have been assigned to the transcoding job begin transcoding the content stored in the input store corresponding to the pipeline. Once the transcoding is complete the transcoded content can be stored in the output store corresponding to the pipeline. In some embodiments the pipeline may issue a notification to the customer whenever the transcoding job is completed.

In various embodiments pipelines can be used by the customer as a way to obtain more or less parallelism. For example each pipeline can be allocated a default portion of all computing resources by the transcoding service. If the customer wishes to obtain access to more computing resources or more transcoding capacity the customer may create an additional pipeline such as by invoking an API call to the transcoding service. In other embodiments the customer may be allowed to increase the maximum width of a particular pipeline.

In various embodiments the term transcoding can refer to any transforming of the content from a first media format into a second media format or otherwise processing content as described herein. Conventionally transcoding refers to the decoding and recoding of digital content from one format to another. Transcoding is sometimes used to enable playback of media on different devices. It can be used to convert a digital audio video file and video streams from one digital form or codec to another e.g. MPEG2 to h.264 transcoding . Transcoding can also be used to adjust the bit rate of a video file and resize video resolution. Transcoding takes place in order for content to reach multi screen end user destinations. The complexity of transcoding can come from the vast range of devices networks and channels that may need to be supported. As used throughout this disclosure the terms transcode and transcoding should be broadly construed and are not limited to any particular formats bit rates media types or device types. Furthermore transcoding is not limited to changing the encoding format of media and in some embodiments may not include changing the encoding format at all. For example in some cases transcoding the content may include transmuxing digital watermarking segmenting applying access controls adding meta data inserting advertisements translating into various languages transcribing changing bit rates sequencing changing or adding audio associated with a video or modifying customizing or making compatible various other features of content in any other manner. By way of illustration one job submitted to a pipeline could include segmenting a video file for multi bitrate support and adding audio to the video file and another job could include digital watermarking and applying access controls to the file.

In the illustrated embodiment transcoding jobs have been submitted by customers and . The transcoding service pulls the transcoding jobs from the pipelines and schedules them to be processed by the computing resources . As previously mentioned the computing resources can include but are not limited to physical servers virtual machines or other units of computing capacity. In this particular example there are three pipelines that have transcoding jobs and the width of each pipeline is 2 meaning that the maximum number of transcoding jobs that can be concurrently executed is 2 . As such the service is capable of allocating enough computing resources to ensure that the total of 6 jobs can be executed at once. As illustrated in the figure if a sudden burst of activity causes a shortage of computing resources transcoding jobs may back up in a scheduling queue in the order in which they were entitled to processing e.g. order in which they were received . These scheduled jobs will be started in the order received. Thus in this example the transcoding service will allocate three additional computing resources not shown to process the scheduled jobs waiting in the pipelines.

The computing resources assigned to the various pipelines can be scaled according to the load of incoming transcoding jobs. As the load of incoming jobs rises new computing resources can be added or provisioned to handle the additional load. When the load decreases those computing resources may be de allocated from processing jobs from the pipelines. In one embodiment each pipeline may be associated with a maximum amount of computing resources. Each pipeline can be operated at the lesser of this maximum or the number of incomplete jobs in that pipeline. In this embodiment to determine the total amount of needed computing resources this requirement can be added up across all pipelines. Furthermore it may be advantageous to maintain a buffer of resources to handle new requests quickly. The size of that buffer can grow with the number of currently needed computing resources. Furthermore hysteresis and delay can be added to the system to avoid over reacting to short lived stimuli.

In one embodiment to control the scaling of the computing resources a minimum and maximum utilizations e.g. Uand U can be defined as a function of the number of needed computing resources. In this embodiment the resources are scaled when those boundaries are crossed. That is computing resources can be added when utilization is greater than Uand computing resources can be de allocated when the achieved utilization falls below U. To further guard against thrashing a computing resource should not be de allocated if it has been running less than a predetermined time interval e.g. 45 minutes .

In various embodiments the customer e.g. privileged user have administrator access can specify which user has permissions to which pipelines . For example as illustrated in the customer may grant users in department access to submit transcoding jobs to pipeline while users in departments and may be granted access to submit transcoding jobs to pipeline and respectively. In this embodiment the users from department would not be allowed to submit transcoding jobs to pipelines and .

In accordance with an embodiment a pipeline is assigned permissions at least one content store e.g. an input store and or an output store instead of the customers department. For example pipeline is assigned permissions to input store and output store while pipeline is assigned permission to input store and output store and pipeline is assigned permissions to input store and output store . The permissions can be assigned to the pipelines by the customer or by some other authorized user. In one embodiment the permissions assigned to the pipeline include read and write permissions to any file stored in the particular content store.

Once the permissions have been assigned when a request to submit a transcoding job to the pipeline is received from a user the transcoding service can first determine whether the user has been granted permissions to the pipeline. If the user has not been granted permissions to submit transcoding jobs to this pipeline the request may be denied. Furthermore the transcoding service may also determine whether the pipeline has been granted permissions to access the content store that contains the content specified by the transcoding job. If the pipeline has not been granted permissions to access the content the request to submit the transcoding job can be denied. If both the pipeline and the user have been granted appropriate permissions the transcoding job can be scheduled in the pipeline in the sequential order received as previously described.

In various embodiments the assignment of permissions in this manner creates an environment which can allow a user to invoke a transcoding job while never having access to either the input store or the output store which are controlled by the root account . For example the users in department can submit transcoding jobs to pipeline where those transcoding jobs will transcode content stored in input store however the users in department may not have permissions to actually read or write content directly to input store . This may be important in situations where the content is highly sensitive such as in the case of movies that are waiting to be released and it is desirable to keep the content from being leaked. The split of permissions in this manner would enable the users belonging to department to initiate all the transcoding jobs and have the transcoded versions of content ready for release all without granting access to those users to copy or disseminate the content.

A further effect of assigning permissions in this manner is that each pipeline could have access to different content stores thereby allowing the customer e.g. root account to control the number of concurrent jobs any user can process concurrently by how many pipelines the user is granted access to and which content stores a user can process to and from by controlling which content stores the pipeline has access to .

As previously mentioned the customer can set the permissions needed for both the pipelines and the users so that the customer is aware of the access that is being given to the transcoding service. In one embodiment the customer can establish a role that a computing resource of the transcoding service can use for its access. The computing resource can obtain a session token to perform the transcoding work as necessary. In one embodiment the computing resource will request a minimal permission e.g. read write permission session regardless of the permissions granted to the role. If the role created by the customer does not grant the computing resource minimum access the request to submit the transcoding job may fail e.g. be denied .

To organize content transcoding in this manner the customer e.g. authorized user under the customer account may specify one or more sets of parameters e.g. groupings of transcoding settings that should be assigned to each pipeline. In one embodiment the customer may identify the parameters using an API call to the transcoding service. In some embodiments the transcoding may provide a number of preset groups of parameters for specific device types media types and the like. In those embodiments the customer may simply select the particular groupings of parameters of interest to be associated with the pipeline.

When the transcoding service receives the API call the transcoding service can associate each set of parameters with the specific pipeline as indicated by the customer. Thereafter when a user submits transcoding job to the pipeline the service will apply those parameters when processing the transcoding job. For example as illustrated in the pipeline is associated with parameters whereas pipeline is associated with parameters . In various embodiments some pipelines may have multiple groupings of transcoding parameters associated therewith while other pipelines may have one group of parameters or no parameters associated therewith. If the pipeline does not have any parameters associated with the pipeline the transcoding job may need to identify the particular settings to be used in transcoding the content or at least select a particular profile or preset of parameters provided by the transcoding service.

In various embodiments the pipeline may also be associated with a workflow that is executed on any transcoding jobs submitted to the pipeline. The workflow may include any number of actions including the actual transcoding of the content adding digital rights management DRM adding watermarks or other security information inserting advertisements segmenting the file translating the file into different languages or the like. For example the workflow may specify that the content be first transcoded into a number of different formats and then watermark information be added to each version of the transcoded content all as a result of the job being scheduled to the pipeline.

In operation the transcoding service provides a plurality of pipelines that can be used for scheduling transcoding jobs. Each pipeline is assigned one or more computing resources operable to execute the transcoding jobs submitted to the pipeline. In one embodiment each pipeline corresponds to a respective input store that contains the content to be transcoded and a respective output store into which the transcoded content will be stored.

In operation the transcoding service receives from a user a request to submit a transcoding job to a pipeline. The pipeline is selected by the user from the plurality of pipelines provided by the service. In one embodiment the request is submitted using an API call. The API call can specify the job the pipeline and a preset e.g. grouping of parameters .

In operation the transcoding service schedules the new transcoding job in the selected pipeline according to the order of jobs received to the pipeline. For example at the time of receiving the new transcoding job the selected pipeline may already contain a plurality of other scheduled transcoding jobs waiting to be processed where two or more transcoding jobs are being processed simultaneously.

In operation the transcoding service may process the transcoding job in the pipeline using one or more computing resources. Transcoding the content may include transforming the content from one media format into a different media format. In some embodiments the amount of computing resources assigned to process jobs from the various pipelines can be scaled up or down according to the load of transcoding jobs being received in all of the pipelines.

In operation when the transcoding job is finished the service may store the transcoded media content in the output store. In some embodiments the output store may be a different location from the input store. In other embodiments the output store may be the same location as the input store.

In operation the transcoding service enables the customer to assign a second set of permissions to a user or group of users . The second set of permissions enable the user or group of users to submit transcoding jobs to the pipeline.

In operation the transcoding service receives a request from a user to submit a transcoding job to a pipeline. In step the service can determine whether the user was granted the second set of permissions to the pipeline. If the user was granted the second set of permissions to the pipeline the transcoding job is scheduled to the pipeline as shown in operation . In some embodiments the transcoding service may further check whether the pipeline has been granted the first set of permissions to access the content store specified by the transcoding job. If the pipeline has not been granted the permissions the service may deny the job from being scheduled to the pipeline. In alternative embodiments the service may still allow the transcoding job to be scheduled to the pipeline on the assumption that the pipeline will be granted the permissions to access the store in the near future.

In operation in response to the request the transcoding service may associate the preset with the specified pipeline. In operation the service may receive a request to submit a transcoding job to the pipeline. As a result of associating the preset with the pipeline the transcoding service will process the transcoding job using the set of parameters specified in the preset as shown in operation . For example when processing the transcoding job the one or more computing resources will apply the set of parameters to the media content stored in the input store specified in the transcoding job.

In accordance with various embodiments resource centers of the service provider may include various computer servers data storage machines network devices and other hardware resources necessary to provide the network accessible services on behalf of the clients of the service provider. For example as shown in the resource centers can include physical servers and other devices located in a particular geographical location which enable the service provider to transcode process and or deliver media content to viewer devices . In accordance with an embodiment a resource center can include media cache servers transcoding servers watermarking servers and the like. The view of one of the resource centers is shown in an exploded view to provide further illustration of the types of resources that can be contained in a resource center in accordance with various embodiments. It should be noted that the resources can reside in one resource center or can alternatively be distributed across multiple resource centers.

In accordance with various embodiments the service provider offers a media transcoding and processing service in addition to many other services discussed herein. In one embodiment the media transcoding and processing service can perform the transcoding jobs of media content stored in content stores e.g. input store output store of the service provider . In alternative embodiments the media transcoding and processing service may perform various other functions such as transmuxing the media adding security information e.g. watermarks to the media translating the media or adding subtitles and the like.

In accordance with an embodiment components of the service provider environment enable a content publisher to provide e.g. upload a media file to an input store and to schedule the transcoding jobs to be performed thereon. In various embodiments the input store may be located on the resource center of the service provider or on a remote system such as the system of the content publisher . As an example the content publisher can upload content such as a media file to an input store and specify that a set of selected workflows should be applied to the media file. A workflow can apply a particular profile s to the media content. In accordance with an embodiment a profile contains all the information e.g. settings parameters etc. that may be necessary to transcode the media content into the specific encoding format for a particular device operating system or application. For example one or more profiles can be provided to transcode certain types of media content into formats suitable for iPhone IOS Android Microsoft Windows Phone and other mobile device operating systems. The media transcoding and processing service then carries out the workflow including potentially transcoding the media content stored on an input store into the appropriate encodings. Once workflow is complete the resulting media content can be placed into an output store . The output store may be located on the resource center of the service provider or a remote system such as the system of the content publisher or other entity such as the content receiver . As such in this example the media content located in the output store has had the workflow applied. From the output store the media content can be made available to a content receiver or the various viewer devices for download. In alternative embodiments the processed content could be made available to any other entities including the content publisher or third party service providers.

It should be noted that the term transcoding is often associated with a profile or a workflow in this disclosure however the profiles workflows and various other features of this disclosure are not limited to changing the encoding format of media and in some embodiments may not include changing the encoding format at all. For example a profile or workflow may include transmuxing digital watermarking segmenting applying access controls adding meta data inserting advertisements translating into various languages transcribing changing bit rates sequencing changing or adding audio associated with a video or modifying customizing or making compatible various other features of content in any other manner. By way of illustration one workflow could include segmenting a video file for multi bitrate support and adding audio to the video file and another workflow could include digital watermarking and applying access controls to the file. In accordance with the present disclosure transcoding may often be a part of various workflows but is not a required part of every workflow discussed herein.

In accordance with an embodiment the transcoding service can execute the transcoding jobs using the compute instances of the service provider. In one embodiment each compute instance is a virtual server resource or virtual node having a specific processing capacity and memory associated therewith which allows the service provider to meter the usage of the transcoding service by each client e.g. the service provider may charge per hour of computing resource consumed . In an alternative embodiment the compute instances can be actual server machines in the data center maintained by the service provider and leased to its customers e.g. content publisher .

It should be noted that while illustrates an input store and an output store located in resource center the locations of such stores are not limited to any particular resource center server or physical computing device. It will be evident to one of ordinary skill in the art that various stores storage containers servers compute instances transcoding services and other resources described herein can be located in any resource center or distributed across multiple resource centers or geographical locations allowing data or content to be replicated across all or some of the devices therein. For example the resource center could be in Europe the resource center could be Asia and the resource center could be in the United States. In various embodiments the various storage containers servers compute instances transcoding services and other resources described herein could also reside on a single device.

In accordance with various embodiments the transcoding service can provide content publishers with an automated transcoding and workflow system that is reliable and scalable. The content publishers may define the transcoding parameters on their own or leverage a set of predefined common device profiles that are provided by the service provider. The transcoding service can allow the content publishers to upload content to the storage instance define a workflow store the resulting encoded assets on the service provider s system and deliver their media assets to viewers or others for example via a content delivery network CDN of the service provider. In other examples the media assets are made available or delivered to third parties for distributing the media assets or for providing additional services.

Generally a content publisher e.g. customer of the service provider can register for an account by signing up for example with the service provider to gain access to media transcoding and processing service. Once an account is created media assets e.g. video files to be transcoded are placed into an input store on the service provider. A workflow can be defined using an application programming interface API or console for example to initiate a transcoding job which will be carried out using one or more of the compute resources . The resulting transcoded object s are placed into a defined output store or some other specified location such as a location on the system of the content publisher or the content receiver . Alternatively the transcoding service can cache the media assets at the network edge and perform the transcoding dynamically on a per request basis depending on the type of requesting device.

In various embodiments the media transcoding and processing service can accept media content in a wide variety of incoming formats and can convert the content into a comprehensive collection of output encodings. For example the transcoding service can transcode to the media to formats suitable for common devices such as Android and Apple IOS based devices Flash and HTML5 platforms by providing a set of pre defined device profiles. The pre defined profiles can be leveraged by the content publisher when setting up a job via the API or via the graphical console. These profiles can be used as is or modified into a custom profile to be reusable for subsequent transcoding job requests.

The content publisher e.g. customer may be any content creator content distributor user generated content publisher or any other entity that possess media content and desires to make that content available to viewers or other entities. Examples of content creators may be motion picture studios universities producing educational content private organizations producing internal video content and other organizations such as online real estate and auto sales companies producing videos to increase sales. Content distributors may be cable and television service providers music distributors movie purveyors and the like. Examples of user generated content publishers may be social media companies video uploading services and any other entity that stores content on behalf of its viewers. The content receiver can be any entity that is provided with content that has been transcoded or otherwise processed by the transcoding service. For example the content receiver may be a third party movie distributor that wishes to provide the transcoded video content on its own website.

In accordance with an embodiment the service provider can provide a content repository for all types of media files for transcoding and encoding. By focusing on the particular requirements of content publishers e.g. multiple input types scale to handle spikes and a vast range of delivery targets the transcoding service can provide a solution that can help any type of customer or entity of the service provider.

In accordance with various embodiments the service provider may implement a number of pricing models for using the transcoding service. As one option the pricing of transcoding service could be based on the usage of computing resources that are utilized by the content publisher . For example on demand transcoding instances can let customers of the service provider pay for compute capacity by the hour that their transcoding instance runs. This can free the content publisher from the costs and complexities of planning purchasing and maintaining hardware and transforms what are commonly large fixed costs into much smaller variable costs.

As an alternative option the content publishers can use reserved transcoding instances. When using reserved transcoding instances content publishers make a one time up front payment for each transcoding instance they wish to reserve for a long period of time e.g. 1 3 year term . In return the customer may be given a discount off the ongoing hourly usage rate for the transcoding instances.

As an alternative option a set of spot instances could be utilized. In accordance with an embodiment spot instances enable a content publisher to bid on and purchase unused capacity of the compute instances of other customers at a market place. In some embodiments instances sold on the spot market may be reclaimed at any moment if they are needed for customers that have previously reserved the computing capacity. Spot instances may be especially useful for handling seasonal or project peak demand and large library re encodes for new codecs. In some cases the spot instances may be used for transcoding jobs that are not extremely urgent because using those instances may incur the risk that other users may be using them and therefore none of the spot instances are available. In other cases however using spot instances may be an effective way to get extremely urgent work performed cheaply if there is a significant number of spot instances available. Taking advantage of low bid opportunities for instances can enable a customer e.g. content publisher with pricing advantages they have not been offered without building out transcoding services on their own.

As an alternative option pricing by gigabyte or other unit of transcoded content output may be employed by the transcoding service. In accordance with an embodiment gigabyte GB usage could be calculated by adding the size of the input file and the combined size of the output files. For example if a 1 GB file were to be transcoded into two formats each producing a 0.5 GB file the total amount billed would be 2 GB.

As an alternative option the transcoding service could charge by output video minutes e.g. the cumulative minutes of the output transcoded media . Calculation of content length in minutes by the number of output formats could give customers an expectation of what they will be billed. The transcoding service could control the number of unique compute instances that would be launched to support a transcoding job since licensing costs may be determined by the number of instances launched for a given user.

As mentioned above the transcoding service can be configured to accept media content in a wide variety of incoming formats and can convert the content into a comprehensive collection of output encodings including various media formats and bitrates. The media transcoding and processing service could include an API user portal or graphical user interface GUI that includes locations stores for a content publisher to upload media files. The input store may include any storage bucket container directory memory location or any other place where media can be located. In some embodiments the input store could have a unique profile associated therewith for transcoding the media file to produce an output of the media file in various predefined media formats. There could be an input location for commonly used profiles and for combinations of commonly used profiles. Alternatively the workflows and profiles can be selected and applied based on various attributes of the media file e.g. file name metadata etc. rather than being associated with the input store itself.

In accordance with an embodiment whenever content is placed in a location decided upon in advance by the content publisher and the service provider the service provider could run a predetermined workflow. For example the content publisher s needs could be to have a daily cable news program transcoded into formats for devices running Android and Apple IOS operating systems after the program airs each day with advertisements and access controls applied to the media file. These needs can be expressed as a workflow conveyed to the service provider by way of an API or some other interface exposed to the content publisher. In one instance the media input location could be on a server residing with the content publisher which the service provider has been granted access to. Therefore each day after the cable news program has aired the service provider may automatically pull and transcode the file according the workflow conveyed by the content publisher. In another instance the decided upon location could be a server residing with the service provider to where the content publisher uploads or pushes the file each day after the news program airs.

Various embodiments discussed or suggested herein can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop or laptop computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP OSI FTP UPnP NFS CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a Web server the Web server can run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by a system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

