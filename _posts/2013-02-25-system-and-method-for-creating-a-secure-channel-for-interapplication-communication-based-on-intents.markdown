---

title: System and method for creating a secure channel for inter-application communication based on intents
abstract: System and method for creating a secure channel for inter-application communication based on the messaging system called Intents in the Android OS are disclosed. In one embodiment, an application for accessing a cloud-based storage platform triggers the broadcast of a custom Intent to all applications on a mobile device to detect an authorized application that is capable of interacting with the application. Once an authorized application is chosen, the application opens a secure channel for communication with the authorized application and passes encrypted data stream to the to the secure channel for access by the authorized application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09117087&OS=09117087&RS=09117087
owner: Box, Inc.
number: 09117087
owner_city: Los Altos
owner_country: US
publication_date: 20130225
---
The present application claims priority to and benefit from U.S. Provisional Patent Application Ser. No. 61 697 511 titled Channel For Opening And Editing Files From A Cloud Service Provider Based on Intents filed on Sep. 6 2012 the content of which is incorporated by reference herein.

The Android operating system Android OS relies on a rich inter application messaging system called Intents for communication between applications. The messaging system promotes collaboration between applications by allowing applications to leverage existing data or services from each other. For example a restaurant directory application can ask one application to launch the a restaurant website another application to call a restaurant another application to display directions to a restaurant and so on.

The Intents based messaging system can however be vulnerable to attack. Messages being passed via Intents can be sniffed stolen or modified by malicious applications which can lead to loss of user privacy and data breach. One way in which the security of applications running on the Android OS can be maintained is by creating a sandbox or a container where an application can run securely without any data leaks. However for applications that generally handle transfer of a limited number of files or pieces of data the sandbox solution is excessively broad heavy handed and more complex than necessary.

The following description and drawings are illustrative and are not to be construed as limiting. Numerous specific details are described to provide a thorough understanding of the disclosure. However in certain instances well known or conventional details are not described in order to avoid obscuring the description. References to one or an embodiment in the present disclosure can be but not necessarily are references to the same embodiment and such references mean at least one of the embodiments.

Reference in this specification to one embodiment or an embodiment means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one embodiment of the disclosure. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment nor are separate or alternative embodiments mutually exclusive of other embodiments. Moreover various features are described which may be exhibited by some embodiments and not by others. Similarly various requirements are described which may be requirements for some embodiments but not other embodiments.

The terms used in this specification generally have their ordinary meanings in the art within the context of the disclosure and in the specific context where each term is used. Certain terms that are used to describe the disclosure are discussed below or elsewhere in the specification to provide additional guidance to the practitioner regarding the description of the disclosure. For convenience certain terms may be highlighted for example using italics and or quotation marks. The use of highlighting has no influence on the scope and meaning of a term the scope and meaning of a term is the same in the same context whether or not it is highlighted. It will be appreciated that same thing can be said in more than one way.

Consequently alternative language and synonyms may be used for any one or more of the terms discussed herein nor is any special significance to be placed upon whether or not a term is elaborated or discussed herein. Synonyms for certain terms are provided. A recital of one or more synonyms does not exclude the use of other synonyms. The use of examples anywhere in this specification including examples of any terms discussed herein is illustrative only and is not intended to further limit the scope and meaning of the disclosure or of any exemplified term. Likewise the disclosure is not limited to various embodiments given in this specification.

Without intent to limit the scope of the disclosure examples of instruments apparatus methods and their related results according to the embodiments of the present disclosure are given below. Note that titles or subtitles may be used in the examples for convenience of a reader which in no way should limit the scope of the disclosure. Unless otherwise defined all technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this disclosure pertains. In the case of conflict the present document including definitions will control.

Embodiments of the present disclosure include system and method for creating a secure channel for inter application communication based on a communication mechanism called Intent. In one implementation the secure inter application communication system and method allows opening and editing of files from a cloud based service provider based on Intents.

In the Android operating system hereinafter OS the Intent mechanism is leveraged by applications to pass data between each other. Unfortunately when an application issues an Intent using the default system all applications on the system can detect it and all applications have access to the data being passed. In one embodiment the secure inter application communication system and method disclosed herein secures the inter application communication by issuing the Intent in two phases. First an Intent to detect which applications are capable of interacting with the mobile client application accessing the server such as a server hosting a cloud based platform or service or other backend web services. Then once an application is chosen the mobile client application opens a secure channel only to that application and passes data in encrypted form to it. The targeting phase is deliberate so that only the application which is chosen can receive the data. In addition the file can be sent as a data stream instead of a whole file all at once for further obfuscation.

In one embodiment the mobile application can create an area on the mobile device s storage as a staging area for content to be passed between applications and the files that go into this area are always to be securely encrypted. The staging area is effectively the channel between the applications. This allows for app to app communication scenarios. For example files individually or in batch mode can be passed for opening editing processing or other manipulations in one mobile application from another mobile application that accesses a cloud based platform service or other backend web services. Similarly files that have been modified or manipulated in one mobile application can be passed to another mobile application that access a cloud based platform service or other backend web services for storage.

Various aspects of the cloud based platform and the system and method for secure inter application communication based on Intents will now be described. In general the routines executed to implement the embodiments of the disclosure may be implemented as part of an operating system or a specific application component program object module or sequence of instructions referred to as computer programs. The computer programs typically comprise one or more instructions set at various times in various memory and storage devices in a computer and that when read and executed by one or more processing units or processors in a computer cause the computer to perform operations to execute elements involving the various aspects of the disclosure.

The client devices can be any system and or device and or any combination of devices systems that is able to establish a connection including wired wireless cellular connections with another device a server and or other systems such as host server and or notification server . Client devices will typically include a display and or other output functionalities to present information and data exchanged between among the devices and or the host server and or notification server .

For example the client devices can include mobile hand held or portable devices or non portable devices and can be any of but not limited to a server desktop a desktop computer a computer cluster or portable devices including a notebook a laptop computer a handheld computer a palmtop computer a mobile phone a cell phone a smart phone a PDA a Blackberry device a Treo a handheld tablet e.g. an iPad a Galaxy Xoom Tablet etc. a tablet PC a thin client a hand held console a hand held gaming device or console an iPhone and or any other portable mobile hand held devices etc. running on any platform or any operating system e.g. Mac based OS OS X iOS etc. Windows based OS Windows Mobile Windows 7 etc. Android Blackberry OS Embedded Linux platforms Palm OS Symbian platform. In one embodiment the client devices host server and app server are coupled via a network . In some embodiments the devices and host server may be directly connected to one another.

The input mechanism on client devices can include touch screen keypad including single touch multi touch gesture sensing in 2D or 3D etc. a physical keypad a mouse a pointer a track pad motion detector e.g. including 1 axis 2 axis 3 axis accelerometer etc. a light sensor capacitance sensor resistance sensor temperature sensor proximity sensor a piezoelectric device device orientation detector e.g. electronic compass tilt sensor rotation sensor gyroscope accelerometer or a combination of the above.

Signals received or detected indicating user activity at client devices through one or more of the above input mechanism or others can be used in the disclosed technology by various users or collaborators e.g. collaborators for accessing through network a web based collaboration environment or online collaboration platform e.g. hosted by the host server .

The collaboration platform or environment hosts workspaces with work items that one or more users can access e.g. view edit update revise comment download preview tag or otherwise manipulate etc. . A work item can generally include any type of digital or electronic content that can be viewed or accessed via an electronic device e.g. device . The digital content can include .pdf files .doc slides e.g. Powerpoint slides images audio files multimedia content web pages blogs etc. A workspace can generally refer to any grouping of a set of digital content in the collaboration platform. The grouping can be created identified or specified by a user or through other means. This user may be a creator user or administrative user for example.

In general a workspace can be associated with a set of users or collaborators e.g. collaborators which have access to the content included therein. The levels of access e.g. based on permissions or rules of each user or collaborator to access the content in a given workspace may be the same or may vary among the users. Each user may have their own set of access rights to every piece of content in the workspace or each user may be different access rights to different pieces of content. Access rights may be specified by a user associated with a work space and or a user who created uploaded a particular piece of content to the workspace or any other designated user or collaborator.

In general the collaboration platform allows multiple users or collaborators to access or collaborate efforts on work items such each user can see remotely edits revisions comments or annotations being made to specific work items through their own user devices. For example a user can upload a document to a work space for other users to access e.g. for viewing editing commenting signing off or otherwise manipulating . The user can login to the online platform and upload the document or any other type of work item to an existing work space or to a new work space. The document can be shared with existing users or collaborators in a work space.

A diagrammatic illustration of the online collaboration environment and the relationships between workspaces and users collaborators are illustrated with further reference to the example of . A diagrammatic illustration of a workspace having multiple work items with which collaborators can access through multiple devices is illustrated with further reference to the example of .

In one embodiment the host server of cloud based services and or cloud storage such as an online or web based collaboration environment is able to track or monitor the devices used by users to access content or activities. In one implementation such tracking or monitoring may be performed upon receiving explicit permission or authorization from users.

In one embodiment client devices communicate with the host server and or notification server over network . In general network over which the client devices the host server and or notification server communicate may be a cellular network a telephonic network an open network such as the Internet or a private network such as an intranet and or the extranet or any combination thereof. For example the Internet can provide file transfer remote log in email news RSS cloud based services instant messaging visual voicemail push mail VoIP and other services through any known or convenient protocol such as but is not limited to the TCP IP protocol Open System Interconnections OSI FTP UPnP iSCSI NSF ISDN PDH RS 232 SDH SONET etc.

The network can be any collection of distinct networks operating wholly or partially in conjunction to provide connectivity to the client devices and the host server and may appear as one or more networks to the serviced systems and devices. In one embodiment communications to and from the client devices can be achieved by an open network such as the Internet or a private network such as an intranet and or the extranet. In one embodiment communications can be achieved by a secure communications protocol such as secure sockets layer SSL or transport layer security TLS .

In addition communications can be achieved via one or more networks such as but are not limited to one or more of WiMax a Local Area Network LAN Wireless Local Area Network WLAN a Personal area network PAN a Campus area network CAN a Metropolitan area network MAN a Wide area network WAN a Wireless wide area network WWAN enabled with technologies such as by way of example Global System for Mobile Communications GSM Personal Communications Service PCS Digital Advanced Mobile Phone Service D Amps Bluetooth Wi Fi Fixed Wireless Data 2G 2.5G 3G 4G IMT Advanced pre 4G 3G LTE 3GPP LTE LTE Advanced mobile WiMax WiMax 2 WirelessMAN Advanced networks enhanced data rates for GSM evolution EDGE General packet radio service GPRS enhanced GPRS iBurst UMTS HSPDA HSUPA HSPA UMTS TDD 1xRTT EV DO messaging protocols such as TCP IP SMS MMS extensible messaging and presence protocol XMPP real time messaging protocol RTMP instant messaging and presence protocol IMPP instant messaging USSD IRC or any other wireless data networks or messaging protocols.

The web based platform for collaborating on projects or jointly working on documents can be used by individual users and shared among collaborators. In addition the collaboration platform can be deployed in an organized setting including but not limited to a company e.g. an enterprise setting a department in a company an academic institution a department in an academic institution a class or course setting or any other types of organizations or organized setting.

When deployed in an organizational setting multiple workspaces e.g. workspace A N may be created to support different projects or a variety of work flows. Each workspace may have its own associate work items. For example work space A may be associated with work items work space B may be associated with work items and work space N may be associated with work items . The work items and may be unique to each work space but need not be. For example a particular word document may be associated with only one work space e.g. work space A or it may be associated with multiple work spaces e.g. Work space A and work space B etc. .

In general each work space has a set of users or collaborators associated with it. For example work space A is associated with multiple users or collaborators . In some instances work spaces deployed in an enterprise may be department specific. For example work space B may be associated with department and some users shown as example user A and workspace N may be associated with departments and and users shown as example user B .

Each user associated with a work space may generally access the work items associated with the work space. The level of access may depend on permissions associated with the specific work space and or with a specific work item. Permissions may be set for the work space or set individually on a per work item basis. For example the creator of a work space e.g. one of user A who creates work space B may set one permission setting applicable to all work items for other associated users and or users associated with the affiliate department for example. Creator user A may also set different permission settings for each work item which may be the same for different users or varying for different users.

In each work space A B . . . N when an action is performed on a work item by a given user or any other activity is detected in the work space other users in the same work space may be notified e.g. in real time or in near real time or not in real time . Activities which trigger real time notifications can include by way of example but not limitation adding deleting or modifying collaborators in the work space uploading downloading adding deleting a work item in the work space creating a discussion topic in the work space.

Specifically items or content downloaded or edited in accordance with the techniques described in the present disclosure can be cause notifications to be generated. Such notifications can be sent to relevant users to notify them of actions surrounding a download an edit a change a modification a new file a conflicting version an upload of an edited or modified file.

In one embodiment in a user interface to the web based collaboration platform where notifications are presented users can via the same interface create action items e.g. tasks and delegate the action items to other users including collaborators pertaining to a work item for example. The collaborators may be in the same workspace A or the user may include a newly invited collaborator. Similarly in the same user interface where discussion topics can be created in a work space e.g. work space A B or N etc. actionable events on work items can be created and or delegated assigned to other users such as collaborators of a given work space or other users. Through the same user interface task status and updates from multiple users or collaborators can be indicated and reflected. In some instances the users can perform the tasks e.g. review or approve or reject etc. via the same user interface.

Each of users and may individually use multiple different devices to access and or manipulate work items in the work space with which they are associated with. For example users may be collaborators on a project to which work items are relevant. Since the work items are hosted by the collaboration environment e.g. a cloud based environment each user may access the work items anytime and from any physical location using any device e.g. including devices they own or any shared public loaner device .

Work items to be edited or viewed may be accessed from the workspace in accordance with the platform and or application independent mechanisms. Users may also be notified of access edit modification and or upload related actions performed on work items by other users or any other types of activities detected in the work space . For example if user modifies a document one or both of the other collaborators and can be notified of the modification in real time or near real time or not in real time. The notifications can be sent through any of all of the devices associated with a given user in various formats including one or more of email SMS or via a pop up window in a user interface in which the user uses to access the collaboration platform. In the event of multiple notifications each notification may be depicted preferentially e.g. ordering in the user interface based on user preferences and or relevance to the user e.g. implicit or explicit .

For example a notification of a download access read write edit or upload related activities may be presented in a feed stream among other notifications through a user interface on the user device according to relevancy to the user determined based on current or recent activity of the user in the web based collaboration environment.

In one embodiment a notification feed stream includes updates when an invited user accepts an invitation and or successfully creates a new account through receipt of an invitation from an existing user. The invited user upon creation of the new account receives the account having enhanced features. The new user can automatically be connected to the existing user who sent the invitation. The system can also automatically prompt both users to query they wish to be collaborators in a common work space.

Work items hosted by a collaboration environment e.g. a cloud based collaboration environment can be accessed by users e.g. users and via multiple different devices e.g. devices for viewing editing processing or performing other manipulations on work items. The devices can include applications for accessing a server hosting a cloud based platform or service or other backend web services hereinafter cloud based collaboration platform application and applications for viewing editing processing or performing other manipulations on work items. The communication between such applications are generally facilitated by a communication mechanism of the OS. For example in Android OS the communication mechanism is based on Intents . As previously described the underlying communication mechanism are generally insecure and any data passed between applications are visible to all other application on a device.

Some of the other applications such as Applications N are designated as unauthorized or malicious application . These applications are not be sanctioned for communication with a white listed application. For example some of these applications can if given the opportunity sniff modify steal or replace data being passed. By way of another example some of these applications e.g. gaming application would have no reason to listen in on or have access to files from an application such as the collaboration platform application.

In one implementation when Application issues an Intent using the default Intent system all applications N including the malicious and unauthorized applications can detect the Intent and have access to data being passed. However when Application issues a custom Intent only the white listed applications can detect the custom Intent and know how to respond to it. The unauthorized or malicious applications on the other hand would not know how to respond to the custom Intent and would thus ignore the custom Intent.

Once a receiving application is identified or selected a secure channel can be opened for communication between the sending application e.g. Application and the receiving application e.g. Application is selected to allow transfer of data. In one implementation the same channel or a new channel can be created for transferring modified or new data from the receiving application back to the sending application.

The framework layer includes framework application programming interfaces APIs that are used by the core applications but can also be used in applications to take advantage of the mobile device hardware access location information store data in internal or external storage on the mobile device run background services add notifications e.g. to the status bar and the like. All applications are supported by a set of services and systems. For example the view system can be used to build application user interface elements such as lists text boxes buttons and the like. Content providers allow applications to access data from other applications or share their own data. A resource manager provides access to non code resources such as localized strings graphics and layout files. A notification manager enables applications to display custom alerts in the status bar. An activity manager manages the lifecycle of applications and provides common navigation elements. The framework layer may include additional components that have not been specifically described.

A set of core and other libraries are used by various components of the mobile device platform and provides many of the functionality. Example core libraries include media libraries that support playback and recording of audio video and images surface manager that manages access to the display subsystem and seamlessly compounds 2D and 3D graphic layers from multiple applications a web browser engine that powers browsers and an embeddable web view e.g. LibWebCore 3D libraries e.g. OpenGL ES 1.0 APIs libraries for bitmap and vector font rendering SQLite which is a powerful and lightweight relational database engine available to all applications system C library and the like.

Each mobile application can run in its own process with its own instance of the Virtual Machine such as the Dalvik VM . The Dalvik VM for example executes files in the Dalvik Executable .dex format which is optimized for minimal memory footprint. The OS or the kernel is the Linux kernel that acts as an abstraction layer between the hardware and the rest of the stack including the application layer the framework layer the libraries and the virtual machine . The kernel supports core system services such as memory and process management network stack driver model and security. The kernel includes drivers for display camera USB keypad Wi Fi and the like and an inter process communication IPC layer that includes a binder driver to provide an IPC mechanism to facilitate communication e.g. exchange of data between processes within an application intra application communication and between applications inter application communication . The IPC mechanism includes the Intent mechanism using which the IPC layer sends Intents to communicate data. The IPC layer via the Intent mechanism can start an activity bring another activity to the front start or stop a service query and obtain results from a content provider e.g. a data storehouse deliver Intents to broadcast receivers and the like.

In one embodiment the sending application is a cloud based collaboration platform application stored in the memory of the mobile device . In a further embodiment the sending application includes components that facilitate inter application communication such as but not limited to an inter application transaction request detector module a custom Intent module a secure channel creator module a data stream module and an encryption decryption module . In addition to the secure inter application communication specific components other application specific modules may be included in the application. The other application specific modules such as but not limited to a user interface module application logic engines upload download managers notification engines and the like perform the various functions of the sending application.

The inter application transaction request detector module detects transaction requests initiated by a user of the mobile device. For example a user can select a document from a user interface of the sending application to open the document in another mobile application i.e. receiving application . The user request to open the document can be detected and identified as an inter application transaction request by the detector module . The detector module can then notify or trigger the custom Intent module .

The custom Intent module can include the custom Intent creator module and the custom Intent broadcast module . The custom Intent creator module can create a custom Intent. The custom Intent can be an implicit Intent in one implementation. An implicit Intent requests delivery of the message to any application that supports the desired operation requested in the message. Other types of Intents that are supported by the Android OS are explicit Intents and system broadcast Intents. Explicit Intents are delivered to a particular application specified by the Intent while system broadcast Intents are system wide event notifications sent by the OS. Intents in general can trigger activities services and broadcast receivers to perform an action. The custom Intent may be created to request a receiving application to perform a specific action. In some implementations the custom Intent can include data or other extras. A custom action is different from other general actions such as ACTION VIEW ACTION EDIT ACTION MAIN etc. that are defined in the Android API and thus can be understood by all applications. A custom action on the other hand can be understood by those applications that recognize the request and know how to respond to the request.

The custom Intent from the custom Intent creator module can request a receiving application to perform custom actions including but not limited to modify an existing file create a new file upload the new file open and show contents of a file launch application and the like.

The custom Intent broadcast module can broadcast the created custom Intent to all applications including white listed and unauthorized applications. The broadcasting may be achieved by using the send broadcast method provided by the Android API.

The secure channel creator module can create a secure channel between the sending application and a receiving application. The secure channel creator module allocates an area on the device s storage as a staging area for data to be passed between the sending and receiving applications. The storage area can be an internal storage area that can be accessed by both sending and receiving applications. Alternately the storage area can be an external storage area such as an SD card. The storage area is effectively the channel between the applications. The channel is secure since only the sending and receiving applications have access to it. Furthermore the files that go into the storage area are encrypted providing an added layer of security.

In one implementation files that are passed between applications may be sent as whole files. In an alternate implementation the files may be sent as data stream to obfuscate the inter application communication. The data stream module includes methods for opening input and output streams to read and write data. The data stream module can also automatically encrypt the data streams for passage through the secure channel between the sending and receiving applications.

The data stream module in one implementation can leverage the encryption decryption module to encrypt or decrypt data stream using various encryption methods. In one implementation advanced encryption standard AES with a key size of 128 192 or 256 bits can be used to encrypt the data stream. The key for the encryption decryption can be generated from a hash of an auth token or auth token with time stamp for example. The auth token and time stamp information can be obtained from the internal storage in one implementation. In an alternate implementation the auth token and time stamp may be obtained from the host server . For example in one implementation the encryption decryption module or another module such as module can start a background service that establishes a communication session with the host server or an authentication server to obtain a newly generated key. In one implementation the key may be unique to each transaction. In an alternate implementation the key may be unique to transactions with a specific receiving application. In yet another implementation the key may be unique to a session with the sending application. Further details regarding generation and or acquisition of auth token or encryption keys may be found in co pending US Patent Application entitled Systems and Methods For Secure File Portability Between Mobile Application which is hereby incorporated by reference in its entirety. Any appropriate hash function such as MD5 SHA 1 2 3 and the like can be used to generate the hash value for encrypting and decrypting data streams. Other symmetric or asymmetric encryption decryption methods can be implemented in other embodiments. The hash value is passed on to the receiving application as a key for decryption.

The receiving application is a white listed application including one or more application components or modules for facilitating secure inter application communication. The receiving application can include for example a transaction request handler module having a custom Intent receiver module and a transaction data acquisition module . The transaction request handler module can also include other components such as a data stream handler module a transaction request processor module an upload listener and an application logic among others.

The transaction request handler module can handle the transaction requests from the sending application. The custom Intent receiver module can detect or receive the custom Intents broadcasted by the sending application via the IPC. The custom Intent receiver module is registered with the OS to inform the OS that the receiving application can handle the custom Intent. In one implementation the custom Intent receiver module can start an activity that can translate the encoded message or custom Intent received into callbacks The callback methods can be implemented by the transaction request processor module to respond to the requests from the sending application. Example callback methods may be implemented to respond to a request to modify an existing file upload the modified file as a new file or a new version create a new file upload the new file open and show contents of a file launch application and the like. The call back methods can depending on the request load the appropriate user interfaces for the user to perform the requested action. For example if the callback method is responsive to an encoded request to edit a file the call back method can include program code or logic to load the user interface for the user to modify the file in the receiving application. Similarly if the encoded message is a request to view a file the transaction request processor module can respond to the request by calling a method e.g. onViewFileRequested argument which in turn can load a read only user interface for the user to view the file in the receiving application.

The transaction data acquisition module can acquire data relating to the transaction request being processed. Example data that can be obtained can include file name size mime type e.g. image files text files etc. other meta data and the like. The data stream handler module opens input and output data streams to read and write files via the secure channel. In one implementation the data stream I O module implements a method to get an input stream to a file i.e. a secure channel to for example show the contents of the file to a user. In a further implementation the data stream I O module implements a method to get an output stream to write new data to a file i.e. a secure channel for example. In one implementation the input and output streams automatically encrypt decrypt data using any of the encryption methods implemented by the data stream encryption decryption module . The data stream encryption decryption module can receive hash of one or more pieces of information such as auth token time stamp and the like as a key for decrypting the file in transit. One embodiment of the receiving application can include an upload listener . The upload listener can monitor the upload of one or more files to the sending application for example. The progress information can be used to display a user interface element such as a progress bar or a status bar on the client device.

The application logic includes logic for processing user requests such as requests to view save modify upload etc. one or more files. The application logic can also process edits deletions modifications and any other operations performed on a file. The application logic may be specific to each receiving application. For example a DocuSign application can include logic for adding digital e signature on documents while GoodNotes application can include logic for adding notes marking documents and the like. Other application specific modules may be present in the receiving application in some implementations.

The host server of the web based or online collaboration environment can generally be a cloud based service. The host server can include for example a network interface an upload request processor having a drag drop manager an upload engine having a multi file upload manager and or a folder upload manager and a user interface module having a navigation manager and an upload content access module . The host server can also include for example an inter application transaction processor having an inter application transaction detector and an encryption key generator . One embodiment of the host server can also include an SDK provisioning module and a white list manager . Another embodiment of the host server further includes a notification engine having for example a feed stream updator and or a recipient selector . Additional or less components modules engines can be included in the host server and each illustrated component.

The network interface can be a networking module that enables the host server to mediate data in a network with an entity that is external to the host server through any known and or convenient communications protocol supported by the host and the external entity. The network interface can include one or more of a network adaptor card a wireless network interface card e.g. SMS interface WiFi interface interfaces for various generations of mobile communication standards including but not limited to 1G 2G 3G 3.5G 4G LTE etc. Bluetooth a router an access point a wireless router a switch a multilayer switch a protocol converter a gateway a bridge bridge router a hub a digital media receiver and or a repeater.

One embodiment of the host server includes the upload request processor which can receive detect process identify parse translate and or determine an activity request. An upload request can be submitted by a user through a user interface of the collaboration platform to upload one or multiple items.

The user can identify the files content or work items to be uploaded to the host server one by one and queue up multiple items e.g. including but not limited to files folders documents images audio etc. to be uploaded in a single request. The user can also select all of the items to be uploaded in a single action e.g. via highlighting or otherwise selecting of icons corresponding to each of the items . In one embodiment the upload request is generated via a drag and drop action of the multiple work items to be uploaded to the host server into a portion of a user interface. Drag and drop activated uploaded requests can be detected handled received processed and or otherwise managed by the drag drop manager .

In one embodiment the upload request is generated via a drag and drop action of a single folder which includes the multiple work items to be uploaded to the host server . For example the upload request can be generated when a folder having the multiple items on a client device that is to be uploaded is identified through the user interface. In some instances the folder can include additional folders in a folder hierarchy of multiple items.

In some instances the user can generate an upload request by activating the upload feature in a tab on a user interface and initiate uploading by selecting e.g. clicking on or otherwise activating a button tab. Once selected another user interface or a pop up window may appear allowing the user to navigate through files or folders to select the items to be uploaded.

Once upload requests have been detected and processed the upload engine can upload the requested item or multiple requested items. The upload engine can in one embodiment upload a single item or multiple items e.g. sequentially or simultaneously to the host server . A multiple item upload may be initiated via a single step or multi step user request. A multi file upload request can be handled processed and executed for example through the multi file upload manager .

In one embodiment the multi file upload manager receives an identification of each of the multiple files to be uploaded e.g. from the upload request processor and sequentially prepares each individual file for uploading and uploads each file independently. For example the upload manager can compress one of the multiple files individually upload it to the host server and decompress the file when uploaded and proceed to perform the same steps with the next file. Preprocessing a file can include for example analyzing the file size and type to determine if it is acceptable valid and or to identify how best to compress the file. Post processing can include for example performing one or more of decompressing the file validating the file size and name checking permissions potentially scanning for malicious software and or moving to permanent storage. The step of moving to storage can further include one or more of adding the file metadata to the database creating thumbnails creating previews indexing for search encrypting the file and or storing in multiple locations for redundancy. Note that the above processes can occur in any order or synchronously in any combination with one another. The process continues until all items in the request have been uploaded to the host server . The upload may automatically progress from one file when completed to the next one in sequence when the user initiates a multi file upload request.

In one embodiment the upload engine uploads multiple items in a folder hierarchy based on a single request to upload a folder which has a hierarchy of folders inside for example via the folder upload manager . In one embodiment the folder upload manager compresses the multiple items in the folder hierarchy in a single process into a single item and uploads the single item in a single upload process rather than one by one to the host server . After the merged file of multiple items has been uploaded the folder upload manager can decompress and subsequently parse the single upload of the single item into the original individual files that were stored as multiple items in the folders in the hierarchy. By merging multiple files into one and performing a single compression and decompression step the uploading process can be expedited since the overhead in time to compress and decompress multiple files is mostly eliminated. Some additional benefits of bulk uploading allow the following overhead to be partially or wholly eliminated repeatedly creating TCP connections for each upload repeatedly checking the same permissions and storage quotas when processing the files on the server.

One embodiment of the host server includes a notification engine . The notification engine can for example update a feed stream to include an updated feed indicate that an item or multiple items have been uploaded for example via the feed stream updator . The users that are notified can be selected for example by the recipient selector and can include collaborators or the user or other users meeting a criterion. In some instances the feed stream is updated in real time or near real time relative to when the upload of the item completed. For real time updating the notification engine can utilize another server or another engine in the same server which provides push functionality.

The notification engine can generally notify users which can be collaborators of the user who performed the activity in the work space via one or more of many mechanisms including but not limited to email SMS voice message text based message RSS feed etc. as described in detail with further reference to related co pending U.S. patent application Ser. No. 13 152 982 filed on Jun. 3 2011. The contents of which are incorporated herein by reference in its entirety.

In one embodiment the notification is depicted through a web browser used by the other user to access the web based collaboration environment for access in real time or near real time to when the activity was performed by the user. When notifying a user in real time through a web browser the notification engine can utilize a push enabled service to ensure real time notification. In one embodiment the notification is sent by a component or another server which implements push technology e.g. the notification server shown in the example of . The push enabled service can be implemented via long poll or HTTP streaming for example by the notification server or another component device which may be internal to or external to the host server . In addition the host server could utilize other push servers including third party push servers to implement push technology including but not limited to mobile platform push systems and services e.g. via smart phones or tablets or other portable devices such as iPhone Android phones Blackberry iPad Galaxy or other tablets etc. .

One embodiment of the host server includes the user interface module which preserves or enhances user experience before during or after an upload request. For example the user interface module can allow the user to engage in other activities in the collaboration platform while an upload is in progress so as to prevent the user from having to wait for the completion to work in the platform.

In one embodiment during the upload of a single file before completion the user can generally navigate away from the user interface through which the upload request was submitted for example via the navigation manager in the user interface module . In other words while a file or item upload is in progress the user can navigate to other pages to perform other actions or initiate additional actions on the current page without interrupting stopping or pausing the in progress upload.

Similarly when a multi file or multi item upload request is in progress the user can also navigate away from the user interface which the upload request was submitted prior to completion of the uploading of each of the multiple items to the host server . Navigation between pages during an upload of multiple files can also be managed by the navigation manager . For example the upload of the multiple items can continue to proceed and is not interrupted if the user accesses a link on the user interface causing another user interface to launch in a browser. To enable bulk uploading a new browser window is opened so it operates independently of user navigation. In addition the web application for uploading and access of the collaboration environment is pageless meaning it can be updated asynchronously without a browser page refresh. This allows navigation and to start new uploads in other folders which can be added to the upload queue.

In addition during a multi file upload an item of the multiple items that has been uploaded to the host server available for access through the user interface even when some of the multiple items have not yet been uploaded to the host server via the upload content access module for example. Thus during an active upload individual files which have completed uploading can be accessed or interacted with by the user in the collaborative environment without having to wait for the full upload to complete.

In some instances the item which has been uploaded to the host server is manipulatable by the user through the user interface without a need for browser refresh. This enhances the user experience by allowing the user to work on the file or otherwise interact with it once it has been uploaded without waiting for other files to finish uploading. For example the user can view edit preview or comment on the item that has been uploaded prior to completion of uploading all of the multiple items in an upload request. In one embodiment buffer space in memory for storage of the individual work items are created in response to the upload request such that when individual items have been uploaded they can be moved into the created buffer space and subsequently permanent storage. When the file is in permanent storage the user can then access and work on the individual item while others are still being uploaded. In one embodiment metadata for the file can be created before it is fully uploaded or processed allowing faster user interaction. However to actually interact with the file content full content search download or preview the file generally needs to be processed as usual and be stored in permanent storage.

One embodiment of the host server can include an SDK provisioning module and a whitelist application manager . The SDK provisioning module can provision SDKs API keys tokens and the like to applications that have been approved for integration with the sending application. The SDK can include certain methods iconography and the like that allow inter application communication and make the inter application communication capability apparent to users of both applications. For example the SDK can recognize encoded messages broadcast by the sending application e.g. the cloud based collaboration platform application and include response to method calls to facilitate various data access and transfer scenarios discussed above.

Applications that have integrated with the sending application by implementing the SDK can be designated as a whitelisted application by the whitelist application manager . The whitelisted applications can receive automatic notifications of updates to SDKs can make API calls to the host server receive and respond to custom Intents and the like.

In one embodiment of the host server the inter application transaction processor can include an inter application transaction detector and an encryption key generator . The inter application transaction detector can detect an inter application transaction request from the sending application and or the receiving application. The transaction request may or may not involve file transfer. For example if the transaction request is for the launch of the receiving application no file transfer is involved. The inter application transaction processor may not take any further steps where no file transfer between applications is involved. However if the transaction request is to open a file in the receiving application the inter application transaction detector may detect it as such and trigger the encryption key generator to generate an encryption key for encrypting decrypting the file in transit. In one implementation the inter application transaction detector can detect the transaction request based on the encryption key request from the sending application. In one implementation the inter application transaction detector can also determine whether a transaction request requires a new encryption key and if so can trigger the encryption key generator to generate and send a new encryption key. For example in one implementation each transaction request involving a file transfer may require a new encryption key. In another implementation a new encryption key may be required for the first transaction and the next few transactions may not require a new key. In other implementations a new encryption may be required for each new session with the requesting application after expiration of a predefined time period for each receiving application involved in a transaction and the like.

In one embodiment the encryption key generator can generate and send to the requesting application an encryption key for encryption one or more files. In one implementation the encryption key may have an associated time stamp which can be used to determine the expiration date time. The encryption key in one implementation can be an auth token a hash of an auth token with or without a time stamp and the like.

In one implementation the sending application can create a custom Intent and broadcast the custom Intent to all applications capable of opening and editing a file. The custom Intent can be an encoded message including the user request. Starting at block a receiving application receives a custom Intent at block . In order to receive the custom Intent the receiver component of the receiving application can register itself with the OS via a configuration file such as the Android Manifest file.

At decision block if the receiving application cannot recognize the custom Intent the receiving application would not know how to respond to the custom Intent and ignores the custom Intent at block . If however the receiving application can recognize the custom Intent the receiving application responds to the custom Intent at block . In one implementation the response may include loading of the user interface associated with the user request. For example the receiving application can load the user interface for the user to edit the file. In one implementation the receiving application can also get additional information on the file associated with the request from the sending application. The additional information can include but is not limited to file name file size mime type and any other file metadata.

At block the receiving application starts a channel for communication with the sending application. Via the channel the receiving application gets encrypted data stream of the file associated with the user request at block . The data stream going into the channel can be encrypted using an encryption key. The encryption key can be generated from a hash of auth token and or time stamp in one implementation. The receiving application gets the decryption key hash from the sending application or directly from the host server at block . At block using the hash the receiving application decrypts the data stream to open the file on the receiving application for editing by the user.

When the file is open the user can make any changes and save the changed file as a new version or a new file in one implementation. At block the receiving application starts a channel to the sending application for writing to the file. In one implementation the channel can be a memory area or a buffer where data can be read from or written to. At block the receiving application sends encrypted data stream to the channel between the sending and receiving applications. In one implementation the changes can be encrypted and sent to the channel as they are being input by the user. In another implementation the changes can be held by the receiving application and encrypted and sent to the channel intermittently or when the user saves the changes closes the file and the like. At decision block if the user saves the file the receiving application uploads the file as a new version or create a new file at block . In one implementation the methods executed by the receiving application for uploading the file as a new version or a new file takes the file data and changes from the channel to create the new version or new file. If the user decides to abandon the changes at decision block the process ends at block .

In alternative embodiments the machine operates as a standalone device or may be connected e.g. networked to other machines. In a networked deployment the machine may operate in the capacity of a server or a client machine in a client server network environment or as a peer machine in a peer to peer or distributed network environment.

The machine may be a server computer a client computer a personal computer PC a user device a tablet PC a laptop computer a set top box STB a personal digital assistant PDA a cellular telephone an iPhone an iPad a Blackberry a processor a telephone a web appliance a network router switch or bridge a console a hand held console a hand held gaming device a music player any portable mobile hand held device or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine.

While the machine readable medium or machine readable storage medium is shown in an exemplary embodiment to be a single medium the term machine readable medium and machine readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine readable medium and machine readable storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the presently disclosed technique and innovation.

In general the routines executed to implement the embodiments of the disclosure may be implemented as part of an operating system or a specific application component program object module or sequence of instructions referred to as computer programs. The computer programs typically comprise one or more instructions set at various times in various memory and storage devices in a computer and that when read and executed by one or more processing units or processors in a computer cause the computer to perform operations to execute elements involving the various aspects of the disclosure.

Moreover while embodiments have been described in the context of fully functioning computers and computer systems those skilled in the art will appreciate that the various embodiments are capable of being distributed as a program product in a variety of forms and that the disclosure applies equally regardless of the particular type of machine or computer readable media used to actually effect the distribution.

Further examples of machine readable storage media machine readable media or computer readable storage media include but are not limited to recordable type media such as volatile and non volatile memory devices floppy and other removable disks hard disks optical disks e.g. Compact Disk Read Only Memory CD ROMS Digital Versatile Disks DVDs etc. among others and transmission type media such as digital and analog communication links.

The network interface device enables the machine to mediate data in a network with an entity that is external to the host server through any known and or convenient communications protocol supported by the host and the external entity. The network interface device can include one or more of a network adaptor card a wireless network interface card a router an access point a wireless router a switch a multilayer switch a protocol converter a gateway a bridge bridge router a hub a digital media receiver and or a repeater.

The network interface device can include a firewall which can in some embodiments govern and or manage permission to access proxy data in a computer network and track varying levels of trust between different machines and or applications. The firewall can be any number of modules having any combination of hardware and or software components able to enforce a predetermined set of access rights between a particular set of machines and applications machines and machines and or applications and applications for example to regulate the flow of traffic and resource sharing between these varying entities. The firewall may additionally manage and or have access to an access control list which details permissions including for example the access and operation rights of an object by an individual a machine and or an application and the circumstances under which the permission rights stand.

Other network security functions can be performed or included in the functions of the firewall can be for example but are not limited to intrusion prevention intrusion detection next generation firewall personal firewall etc. without deviating from the novel art of this disclosure.

Unless the context clearly requires otherwise throughout the description and the claims the words comprise comprising and the like are to be construed in an inclusive sense as opposed to an exclusive or exhaustive sense that is to say in the sense of including but not limited to. As used herein the terms connected coupled or any variant thereof means any connection or coupling either direct or indirect between two or more elements the coupling of connection between the elements can be physical logical or a combination thereof. Additionally the words herein above below and words of similar import when used in this application shall refer to this application as a whole and not to any particular portions of this application. Where the context permits words in the above Detailed Description using the singular or plural number may also include the plural or singular number respectively. The word or in reference to a list of two or more items covers all of the following interpretations of the word any of the items in the list all of the items in the list and any combination of the items in the list.

The above detailed description of embodiments of the disclosure is not intended to be exhaustive or to limit the teachings to the precise form disclosed above. While specific embodiments of and examples for the disclosure are described above for illustrative purposes various equivalent modifications are possible within the scope of the disclosure as those skilled in the relevant art will recognize. For example while processes or blocks are presented in a given order alternative embodiments may perform routines having steps or employ systems having blocks in a different order and some processes or blocks may be deleted moved added subdivided combined and or modified to provide alternative or subcombinations. Each of these processes or blocks may be implemented in a variety of different ways. Also while processes or blocks are at times shown as being performed in series these processes or blocks may instead be performed in parallel or may be performed at different times. Further any specific numbers noted herein are only examples alternative implementations may employ differing values or ranges.

The teachings of the disclosure provided herein can be applied to other systems not necessarily the system described above. The elements and acts of the various embodiments described above can be combined to provide further embodiments.

Any patents and applications and other references noted above including any that may be listed in accompanying filing papers are incorporated herein by reference. Aspects of the disclosure can be modified if necessary to employ the systems functions and concepts of the various references described above to provide yet further embodiments of the disclosure.

These and other changes can be made to the disclosure in light of the above Detailed Description. While the above description describes certain embodiments of the disclosure and describes the best mode contemplated no matter how detailed the above appears in text the teachings can be practiced in many ways. Details of the system may vary considerably in its implementation details while still being encompassed by the subject matter disclosed herein. As noted above particular terminology used when describing certain features or aspects of the disclosure should not be taken to imply that the terminology is being redefined herein to be restricted to any specific characteristics features or aspects of the disclosure with which that terminology is associated. In general the terms used in the following claims should not be construed to limit the disclosure to the specific embodiments disclosed in the specification unless the above Detailed Description section explicitly defines such terms. Accordingly the actual scope of the disclosure encompasses not only the disclosed embodiments but also all equivalent ways of practicing or implementing the disclosure under the claims.

While certain aspects of the disclosure are presented below in certain claim forms the inventors contemplate the various aspects of the disclosure in any number of claim forms. For example while only one aspect of the disclosure is recited as a means plus function claim under 35 U.S.C. 112 6 other aspects may likewise be embodied as a means plus function claim or in other forms such as being embodied in a computer readable medium. Any claims intended to be treated under 35 U.S.C. 112 6 will begin with the words means for . Accordingly the applicant reserves the right to add additional claims after filing the application to pursue such additional claim forms for other aspects of the disclosure.

