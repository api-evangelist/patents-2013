---

title: Method and systems for processing 3D graphic objects at a content processor after identifying a change of the object
abstract: Method and systems for processing at least one three-dimensional (3D) graphic object include: identifying a change of 3D graphic objects, creating a message, assigning a unique identifier; and forwarding the message and the unique identifier to a scene engine. The change is made by an authoring tool. The message is embedded with change information corresponding to the change. The scene engine functions can be performed by the same or a different computing device as the computing device performing the authoring tool.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600940&OS=09600940&RS=09600940
owner: Kalloc Studios Asia Limited
number: 09600940
owner_city: Hong Kong
owner_country: HK
publication_date: 20130408
---
The present invention relates to processing of 3D graphic objects. More specifically the present invention relates to a method for processing and displaying 3D graphic objects which are being changed in the same computing device or different computing device for authoring changes.

Currently 3D objects created in or modified by scene engines and or object authoring tools such as 3DMax and Maya have to go through many stages before the changes in scene or objects are reflected at a scene display application such as game developer software or user s software including 

exporting the specific files of the 3D modeling tools into binary files that are required by the applications 

inserting physics data for object association with the model such as convex hull or primitive creations 

additional application data association such as Artificial Intelligence AI path finding or obstacle avoidance 

A three dimensional 3D scene is composed of many 3D graphic objects including background skinning mesh texture lighting shader texture lighting coordination materials rendering vertex and camera changes in 3D graphic objects are forwarded to a content processor and then are sent to a scene engine after processing is performed by the content processor. The changes in 3D graphic objects are created by at least one authoring tool. The scene engine is then able to interact with the changes in 3D graphic objects. It is possible that an authoring tool is also a scene engine such that the authoring tool can interface with the changes in 3D graphic objects that are created by it or by other authoring tools.

There are myriad ways for a 3D graphic object to be changed. For example an authoring tool may change the shape of object the size of a 3D graphic object the physical model applied to a 3D graphic object the mesh of a 3D graphic object the texture of a 3D graphic object the lighting of a 3D graphic object the location of a 3D graphic object in a scene the light used in a scene the number of 3D objects placed in a scene the camera angle of the scene the camera angle of an object the texture of a 3D graphic object shaders skinning etc. In one variant there are multiple authoring tools changing objects at the same time. For example an authoring tool may change the mesh of a 3D graphic object and another authoring tool may change the light of a scene. All these changes in 3D graphic objects are then forwarded from the authoring tool to the content processor.

The ensuing description provides preferred exemplary embodiment s and is not intended to limit the scope applicability or configuration of the invention. Rather the ensuing description of the preferred exemplary embodiment s will provide those skilled in the art with an enabling description for implementing a preferred exemplary embodiment of the invention. It is understood that various changes may be made in the function and arrangement of elements without departing from the spirit and scope of the invention as set forth in the appended claims.

Specific details are given in the following description to provide a thorough understanding of the embodiments. However it will be understood by one of ordinary skill in the art that the embodiments may be practiced without these specific details. In other instances well known processes algorithms structures and techniques may be shown without unnecessary detail in order to avoid obscuring the embodiments.

Also it is noted that the embodiments may be described as a process which is depicted as a flowchart a flow diagram a data flow diagram a structure diagram or a block diagram. Although a flowchart may describe the operations as a sequential process many of the operations can be performed in parallel or concurrently. In addition the order of the operations may be re arranged. A process is terminated when its operations are completed but could have additional steps not included in the figure. A process may correspond to a method a function a procedure a subroutine a subprogram etc. When a process corresponds to a function its termination corresponds to a return of the function to the calling function or the main function.

Moreover as disclosed herein the term storage medium or computer readable storage medium may represent one or more devices for storing data including read only memory ROM random access memory RAM magnetic RAM Flash non volatile core memory magnetic disk storage mediums optical storage mediums flash memory devices and or other machine readable mediums for storing information. The term computer readable storage medium includes but is not limited to portable or fixed storage devices optical storage devices and various other mediums capable of storing containing or holding instruction s and or data. A queue may be implemented by a section or a plurality of sections in a storage medium.

Furthermore embodiments may be implemented by hardware software virtual machine cloud computing firmware middleware microcode hardware description languages or any combination thereof. When implemented in software firmware middleware or microcode the program code or code segments to perform the necessary tasks may be stored in a machine readable medium such as storage medium. A processing unit s may perform the necessary tasks. A processing unit s by a CPU an ASIC semiconductor chip a semiconductor chip a logical unit a digital processor an analog processor a FPGA or any processor that is capable of performing logical and arithmetic functions. A code segment may represent a procedure a function a subprogram a program a routine a subroutine a module a software package a class or any combination of instructions data structures or program statements. A code segment may be coupled to another code segment or a hardware circuit by passing and or receiving information data arguments parameters or memory contents. Information arguments parameters data etc. may be passed forwarded or via any suitable means including memory sharing message passing token passing network transmission etc.

A three dimensional scene used in computer game video game computer aided design movie development and other systems contains a plurality of 3D graphic objects. Background skinning mesh texture shader texture lighting coordination materials rendering camera and other properties of 3D graphic objects are used for example by scene engine to generate 3D virtual scenes on the display screen of a computing device.

Authoring tool allows the creation modification and deletion of 3D graphic objects. Authoring tool receives an input from a human being and displays 3D graphic objects to the human being through the authoring tool. Thus authoring tool has an inputting device and can be implemented by programming a computing device including laptop computer desktop computer tablet computer and mobile phone.

Content processor processes messages received from authoring tool and can be implemented by programming a computing device including laptop computer desktop computer tablet computer and mobile phone.

Scene engine allows the viewing of a 3D scene based on the 3D graphic objects and changes of 3D graphic objects therefore the entire art asset creation process can be viewed almost simultaneously as changes of objects occur in authoring tool . Thus this speeds up 3D scene development process such as a game development process.

There are myriad ways for a 3D graphic object to be changed. For example authoring tool may change the shape of a 3D graphic object the size of a 3D graphic object the physical model applied to a 3D graphic object the location of a 3D graphic object in a 3D scene the coordination of a 3D graphic object in a 3D scene the light used in a 3D scene the number of 3D graphic objects placed in a 3D scene the camera angle of the scene the camera angle of a 3D graphic object the skinning of a 3D object the mesh of a 3D object the materials of a 3D graphic object the shader of a 3D graphic object the rendering of a 3D graphic object the texture of a 3D graphic object etc.

According to one of the embodiments of the present invention the system of the embodiment includes authoring tool and content processor . Content processor and scene engine communicate with each other through network which may include a local area network a wide area network the Internet an intranet and an extranet. Authoring tool and content processor may be different threads of processes running inside the same computing device.

According to one of the embodiments of the present invention the system of the embodiment includes content processor and scene engine . Content processor and authoring tool communicate with each other through network including local area network wide area network the Internet an intranet and an extranet. Content processor and scene engine are different threads of processes running inside the same computing device.

According to one of the embodiments of the present invention the system of the embodiment includes authoring tool content processor and scene engine and can be implemented by programming one computing device or a plurality of computing devices. For example authoring tool and content processor are implemented by programming one desktop computer while scene engine is implemented by programming a mobile phone. In another example authoring tool is implemented by programming a desktop computer content processor is implemented by programming a server hosted at a cloud computing service provider and scene engine is implemented by programming a mobile phone. In another example authoring tool content processor and scene engine are all implemented by programming a tablet computer and therefore can be communicating through a bus system of the tablet. When any two or all of authoring tool content processor and scene engine are implemented by programming in a same computing device the communications among authoring tool content processor and scene engine that are implemented by programming in the same computing device do not need to be performed through communications networks but through other communications technologies including inter process communication inter thread communication bus communication and serial communication.

For illustration purposes when authoring tool changes the shader of a 3D graphic object the 3D graphic object changes are then forwarded to or captured by content processor for processing. Content processor then forwards one of more messages containing the processed 3D graphic object and or change information for one or more scene engine to display the updated 3D graphic object. In one variant the forwarding of one or more messages containing processed 3D graphic object and or change information to scene engine from content processor is based on a request received scene engine .

Persons skilled in the art will recognize that a server system such as a data processing system including a CPU memory I O program storage a connecting bus and other appropriate components could be programmed or otherwise designed to facilitate the practice of the invention including authoring tool content processor and scene engine . Such authoring tool content processor and scene engine would include appropriate program means for executing the operations of the invention.

Content processor then forwards the message to scene engine at step . Scene engine then updates the 3D scene based on the messages received at step . According to one of the embodiments of the present invention content processor optimizes the content of the message by reducing the complexity of the change in the 3D graphic object. For illustration purposes the reduction of the complexity of the change in the 3D graphic object includes reducing vertex count by finding common vertexes removing information that is only relevant for the authoring tool.

The identification at step can be performed by content processor using a software hook such as an application programmable interface API to authoring tool . Therefore when authoring tool has made a change in a 3D graphic object it can be notified to identify the change. Alternatively according to one of the embodiments of the present invention hash codes are calculated for 3D graphic objects. When the hash code of a 3D graphic object changes it implies that there is a change in the 3D graphic object. Therefore content processor can identify the change. There are many techniques to calculate a hash code including using cyclic redundancy check CRC and Secure Hash Algorithm SHA . The hash code is calculated based on the serialized data of the 3D graphic object or the file of the 3D graphic object. Serialization of the change in the 3D graphic object is performed by converting a data structure object state or file of the change in the 3D graphic object into a format that can be stored and or transmitted. The calculation of the hash code may take place when the scene or object stored at a computer readable storage medium is updated or periodically.

The unique identifier to the change in the 3D graphic object is to assist the recognition of the change in the 3D graphic object. As there may be a large number of changes in the 3D graphic object in a short period of time or changes in a large number of 3D graphic objects the unique identifier can assist content processor or scene engine to distinguish one change from another change.

The message created in step can be in the form of a string or binary data. The change in the 3D graphic object and the unique identifier form part of the message. Therefore the size of the message varies. According to one of the embodiments of the present invention a message containing new coordination of a 3D graphic object may only consist of the x y z coordinate information and the corresponding unique identifier and the size of this message may be in the range of from about ten bytes to one thousand bytes. For example a message containing new image of a 3D graphic object may consist of binary data of the new image and the corresponding unique identifier and the size of this message may be in the range of from about ten thousand bytes to one gigabyte. Further according to one of the embodiments of the present invention if there is lighting texture mesh and camera information associated with the new image the size of the message may be in the range of from one kilobyte to tens of gigabytes preferably not more than ten megabytes due to the capability of state of art networks.

The forwarding of the message at step may be performed by many techniques that are known to those skilled in the art. Those skilled in the art would appreciate that there are many techniques to forward a message between different processes in a computing device different threads in a computing device different virtual machines in a computing device and different computing devices in a communication network. In one example the message is embedded in an IP packet and the IP packet is sent using the TCP protocol. In another example the message is embedded in an IP packet and the IP packet is sent using the TCP protocol through a cellular network.

According to one of the embodiments of the present invention the forwarding of the message is by storing the message at a piece of common computer readable storage medium if authoring tool and content processor are implemented by programming the same computing device. According to one of the embodiments of the present invention the forwarding of the message is by transmitting packets through a network with the message embedded inside. According to one of the embodiments of the present invention the forwarding of the message is by transmitting packets with the message embedded inside in a computing device with virtual machine capability that authoring tool is implemented by programming one virtual machine of the computing device and content processor is implemented by programming another virtual machine of the computing device. For illustration purposes the message can be embedded in an Internet Protocol IP packet and be forwarded using Transmission Control Protocol TCP User Datagram Protocol UDP or other protocols.

Scene engine updates the scene at step after receiving the message from content processor by processing the change information contained in the message with the scene and 3D graphic objects it already has stored and then displays an updated scene with 3D graphic objects if it is required to do so. If scene engine does not possess the scene information or 3D graphic object information related to the change information contained in the message scene engine requests the scene information or 3D graphic object information from content processor or other sources. According to one of the embodiments of the present invention scene engine displays the updated scene and or 3D graphic object via authoring tool .

At step the message is retrieved from the queue when content processor determines to forward the message to scene engine or when scene engine informs content processor that scene engine is ready to accept message.

According to one of the embodiments of the present invention when there is no more storage space in the queue or the queue size is more than a threshold value the message that has been stored in the queue for the longest time is removed in order to have storage space to store the message that is just being created at step . Alternatively a plurality of messages that have been stored in the queue are deleted in order to release the storage space. Alternatively the message is discarded and not being stored and therefore step is omitted.

According to one of the embodiments of the present invention when the message is created at step a tag that categorizes the change in the 3D graphic object is also part of the message. The tag can be used by the content processor or scene engine to determine the type of the message. Content processor can also use the tag to determine if the message contains the most updated change in the 3D graphic object and whether to delete messages that contain outdated change in the 3D graphic object.

According to one of the embodiments of the present invention data received by content processor from authoring tool is processed by a shadow cache at content processor prior to forwarding messages containing the data to scene engine . The data is retrieved in raw format from authoring tool . It then goes through initial checks to see if any changes have taken places since last processed. Once it is decided that an update is needed the shadow cache will use a threaded system to process the data. The different values such as vertex data skinning data shaders and textures will be parsed from the data. The data is optimized to produce the message. The optimizations include reducing vertex count by finding a common vertex. The optimization reduces the amount of data to be transfer and processed by scene engine .

According to one of the embodiments of the present invention data received by content processor from authoring tool is categorized. The categorization is performed according to the unique identifier of the messages. Once the data is categorized it is sent to be processed into the pipeline of scene engine . Scene engine first reads the data from its pipeline into appropriate structures and creates data buffers either on the GPU memory or CPU memory of a computing device. The data retrieved from the data buffers is then put into a queue with a categorization tag and with a link to the original data from its pipeline. After the data retrieved from the data buffers has been validated as ready it is considered to be active and scene engine deletes the original data from its pipeline. In one variant scene engine deletes the original data from its pipeline only after it is confirmed that the original data from its pipeline is not being used.

Example content processor system includes processing unit main memory secondary storage and network interface . Bus system such as a data bus and a motherboard can be used to establish and control data communication between the components and . Other example system architectures however can also be used. Main memory may communicate with processing unit using data bus or a different bus.

Processing unit can for example include one or more microprocessors having one or more processing cores. Main memory can for example include a random access memory storage device such as a dynamic random access memory or other types of computer readable medium memory devices. Main memory can be used as a cache to store temporary data registers and instructions that are received from processing unit or secondary storage . Secondary storage can for example include one or more hard drives a flash memory and or a read only memory or other types of computer readable medium memory devices.

Network interface can for example include a wired or wireless network device operable to communicate data to and from network or .

In an implementation content processor system includes instructions defining an operating system stored in main memory and or secondary storage . Example operating systems can include WINDOWS and LINUX based operating system or other operating systems. Upon execution of the operating system instructions access to various system objects is enabled. Example system objects include data files applications functions etc.

Processing unit performs the functions according to the instruction stored in main memory and or secondary storage of identifying changes of 3D graphic objects in authoring tool processing the change information of 3D graphic objects received from authoring tool reducing the complexity of the change information embedding the change information in messages and forwarding the messages to scene engine via network interface . When processing unit decides to store the message temporarily processing unit stores the message in main memory and or secondary storage . When processing unit decides to forward the message stored earlier processing unit retrieves the message in main memory and or secondary storage and forwards the messages to scene engine via network interface .

Processing unit further performs the functions according to the instructions stored in main memory and or secondary storage to assign a unique identifier to a change of 3D graphic objects. In one variant processing unit assigns a unique identifier to the message containing change information of 3D graphic objects.

Processing unit may also regularly examine main memory and or secondary storage for messages to decide whether to delete a message from main memory and or secondary storage as a message may become outdated and or there is not enough room in main memory and or secondary storage to store new messages.

A compute device running authoring tool needs at least one human computer interface HCI to interact with a user and at least one display user interface to display scenes or 3D graphic objects to the user to allow the user to author create edit and delete scenes and 3D graphic objects.

A compute device running scene engine needs at least one display user interface to display scenes or 3D graphic objects to the user to view the scenes and 3D graphic objects.

According to one of the embodiments of the present invention when authoring tool and scene engine are not running in the same system with content processor content processor system does not need to have a human computer interface HCI to interact with a user and does need to have a display user interface to display scenes or 3D graphic objects to the user.

Processing unit main memory secondary storage and network interface are implemented as processing unit main memory secondary storage and network interface respectively.

Display interface can for example include a video card a graphics accelerator card a graphics processing unit GPU or a display adapter and is configured to generate and output images to a display device. In one implementation display interface can be realized in a dedicated hardware card connected to bus system . In another implementation display interface can be realized in a graphics controller integrated into a chipset of bus system .

Example input devices connecting to HCI can include a video camera a keyboard a mouse a stylus etc. and example output devices connecting to display interface can include a display device a LCD monitor a 3D capable monitor computer screen projector television screen LED display etc.

Processing unit can also perform the functions according to the instructions stored in main memory and or secondary storage of authoring tool . Inputs from a user are received by processing unit through HCI interface to author create edit and delete scenes and 3D graphic objects stored in main memory and or secondary storage . Processing unit processes scenes and 3D graphic objects and then displays the scenes and 3D graphic objects to the user through display interface . Processing unit can also offload certain arithmetic calculations to display interface to accelerate the processing.

Processing unit can also perform the function according to the instructions stored in main memory and or secondary storage of scene engine . Optional inputs from a user are received by processing unit through HCI interface . Processing unit processes change information of a 3D graphic object contained in a message and then displays the updated scenes and 3D graphic objects to the user through display interface . Processing unit can also offload certain arithmetic calculations to display interface to accelerate the processing.

This written description sets forth the best mode of the invention and provides examples to describe the invention and to enable a person of ordinary skill in the art to make and use the invention. This written description does not limit the invention to the precise terms set forth. Thus while the invention has been described in detail with reference to the examples set forth above those of ordinary skill in the art may effect alterations modifications and variations to the examples without departing from the scope of the invention.

