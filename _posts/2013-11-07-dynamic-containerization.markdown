---

title: Dynamic containerization
abstract: In an example embodiment, a container is downloaded, the container being an application natively executable by a first operating system of the user device, the container including: a container service including one or more libraries of functions designed by a container designer to natively operate on the first operating system; a browser; container metadata defining functions of the application, the functions compatible with the container service for the first operating system and also compatible with a container service for a second operating system; and a plug-in including one or more additional libraries of functions designed by an entity other than the container designer to perform additional native operations on the first operating system. Then, the container metadata can be executed using the browser, causing function calls to the container service and plug-in and thus controlling native functions of the user device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09170808&OS=09170808&RS=09170808
owner: SAP SE
number: 09170808
owner_city: Walldorf
owner_country: DE
publication_date: 20131107
---
This document generally relates to methods and systems for use with computer networks. More particularly this document relates to dynamic containerization.

Mobile applications also known as apps have dramatically increased in popularity with the rise of smartphones and tablets. It is common for these applications to be downloaded by end users from a central repository sometimes referred to as an app store or other location where digital files can be downloaded to user devices. Software developers often create apps and upload these apps to the app store. These apps may be designed as self contained through a process known as native application development. One drawback to native application development is that it can become difficult to develop applications that operate on multiple different mobile platforms cross platform solutions thus driving up the cost of development for apps that are intended to operate on multiple different mobile platforms.

The description that follows includes illustrative systems methods techniques instruction sequences and computing machine program products that embody illustrative embodiments. In the following description for purposes of explanation numerous specific details are set forth in order to provide an understanding of various embodiments of the inventive subject matter. It will be evident however to those skilled in the art that embodiments of the inventive subject matter may be practiced without these specific details. In general well known instruction instances protocols structures and techniques have not been shown in detail.

For purposes of this disclosure a container is a runtime environment executable on a mobile device within which mobile applications can be executed. The container is a native application that is installed on the mobile device. This container may include messaging libraries and a local datastore as well as a toolkit having a runtime from the native operating system s software development kit SDK . It may also then embed a browser which allows developers to build mobile applications using web development as opposed to traditional software development while still maximizing the power of the native device services. This allows rapid development of mobile workflows across multiple platforms. These types of applications may extend existing enterprise business processes to for example a mobile device so that business process decisions can be made on a mobile device. Mobile device types may include but are not limited to a mobile phone a feature phone a smartphone a tablet computer a mobile computer a handheld computer a laptop computer an in vehicle or in appliance device a personal digital assistant etc.

In some example embodiments the container may be designed to allow developers to create applications in open standards based protocols such as hypertext markup language HTML 5 JavaScript and Cascading Style Sheets CSS . The applications that run in the container may be considered web apps. The web apps may be constructed similarly to an application written for a browser in that they may contain a web page with a set of div and form elements that make up the app screens. A set of JavaScript files may include the methods for navigating from screen to screen and the functions for accessing data for the screens. A set of CSS files may provide the styling for the screen elements.

In an example embodiment the container may be dynamically extended or altered through the use of one or more plug ins. is a diagram illustrating a system in accordance with an example embodiment to provide a plug in to a container on a mobile device. The system may include the container platform which may store workflow metadata obtained from one or more designers A B. The system may additionally include a plug in developer . A client mobile device may then operate a container which includes container services a plug in a browser and container metadata . The plug in may be transmitted to the client mobile device from the plug in developer via the container platform . In an alternative example embodiment the plug in developer sends the plug in directly to the client mobile device .

The plug in may provide functionality not available in the container services that the plug in developer believes that application designers such as designers A B may wish to utilize. At runtime the browser is designed to run both the container services and the plug in making for a seamless experience for the user. This is accomplished without modifying the other aspects of the container such as the container services browser and container metadata .

In an example embodiment the container services include Javascript libraries that provide consistent APIs that can be called the same way on any supported device. In this example embodiment multiple plug ins are provided including plug ins for application lifecycle management implementation of a common logon manager single sign on SSO integrating with server based push notifications etc. The plug ins may utilize a configuration file of the container and extend it for any settings they need for their purposes. For example if a plug in needs to extend application configuration items such as sandboxing application lifecycle supportability and so on it can utilize an additional property name field in the configuration file.

In an example embodiment a designer A B may install the container services and plug ins such as plug in on its own system in order to be used for creating and testing the container metadata prior to distribution to mobile devices such as client mobile device .

The designer A B may then set configuration parameters to configure the ultimate client devices that will run the container . This may include for example designing back end connections for selected native and hybrid applications. This may be performed by setting fields defining whether the client device will use a system proxy whether the client device will rewrite uniform resource locators URLs the maximum connections for the client device and identifying a certificate alias of a specific certificate in the system keystore that is used when making a secure connection to the specified server. Additionally whitelisted connections can be expanded.

The plug in may expand the universe of capabilities services etc. that are available to applications written in open standards based protocols that operate within the container without altering the container or any of the other plug ins that may reside within the container . Thus such a plug in may coexist with any other plug ins and would not impact the ability of a mobile device to update aspects of the container while minimizing the time required for an application designer to create the application.

Such a plug in can also make a container more capable robust etc. by offering additional or missing features functions services etc. and generally make the container more enterprise ready among other things.

Such a plug in can also provide access to native functionality e.g. camera accelerometer contact list entries of a mobile device . As such the plug in serves as something of a bridge between the native or traditional world of mobile device applications which would have direct access to native functionality such as the camera and non native applications. Such a plug in can abstract or otherwise hide various aspects of the complexities associated with accessing and using this native functionality by for example exposing a simplified interface for it. Such a plug in may offer among other things enhanced security limits on available operations in connecting with accessing and using native functionality.

Such a plug in may also provide various performance enhancements that can improve among other things the loading time of the application.

Such a plug in may also support server controlled management e.g. provisioning updating etc. of applications as frequently required within an enterprise setting. Among other things the transfer and application of secure incremental updates patches etc. transparent to the user may be supported.

Such a plug in may also support the flexible extensible and dynamic management of activities during any of the different phases e.g. instantiation startup operation shutdown etc. of the lifecycle of an application. Such a plug in may also address structural weaknesses deficiencies etc. that exist within a container such as data access security the concurrent operation of multiple applications etc. through for example the offering of additional or possibly replacement capabilities and services.

In an example embodiment the plug in is a logon plug in. The logon plug in provides inter alia a login screen where the user can enter values needed to connect to a server which stores those values in its own secure data vault. This data vault may be separate from the one provided with other plug ins. It also provides a way to lock and unlock the application defined by the container metadata so the user can leave sensitive data open in the application. In order to set up this functionality the designer A B may load the container services and the plug in on their own system and then create the application. The designer A B may then build a project including the application and the container services and plug in and then register the application in the container platform . The plug in then provides screen flow application program interfaces APIs for the application including APIs to register the user unlock secure storage manage a passcode change a password and show registration data.

In an example embodiment the logon plug in may contain a series of functions including for example successCallback errorCallback applicationID context and logonView. SuccessCallback is called when the logon is successful. ErrorCallback is called when the logon fails. ApplicationID is a string defined on a mobile platform server. Context is an object that can be used to override the logon plugin default values. LogonView can be used to point to a custom logon view. Below is example code for logging into an application.

In another example embodiment the plug in is a settings plug in. The settings plug in provides the ability to trigger an operation on a server to allow an application to store device and user settings on the client device for later use.

In another example embodiment the plug in is a push notification plug in. The client device sends the server a device type device model whether push is enabled and other push related statuses. The settings can also use a device token received during device configuration. The server then can use this information to decide what kind of push notification to send e.g. cloud messaging push notification service etc. .

In another example embodiment the plug in is an application update plug in. The application update plug in provides server based updates to the application content and manages the process of checking downloading and installing updates to the application running within the container . The application update plug in may contain a series of application update methods including for example an application update method that starts the application update process and triggers any required log on process a reload application method that replaces the application resources with any newly downloaded resources and refreshes the page an update method that forces an update check an on update ready method that provides a handler for when an update is available and an on login required method that provides a handler for log on.

The updates to the application may either be full or delta. Delta updates only download and install aspects of the application that have been changed since the last update. A full update may be used when for example the local revision number is 0 or where the local revision number is unknown or not provided.

In another example embodiment the plug in is an authorization proxy plug in. The authorization proxy plug in automates the process of accepting certificates such as Secure Socket Layer SSL certificates returned by a call to a web resource. If users want to send an Asynchronous Jayscript and Extensible Markup Language AJAX request for example to an HTTPS server and the embedded browser does not support the SSL then users could utilize the authorization proxy plug in for this purpose. In another example if datajs users want to send a request through an HTTPS connection they can replace a default odata DefaultHttpClient with one provided by the authorization proxy plug in.

The authorization proxy methods may act as proxies for requests for the application. There may be two functions for sending requests get which takes the parameters function url header success callback error callback user password timeout and certificate source and send request which takes the parameters function method url header request body success callback error callback user password timeout and certificate source. Constructor functions can also be used with each constructor function covering a different type of certificate source e.g. from file from store etc. .

Below is a table of example platform dependent methods error codes and object definitions. Its implementation may be platform specific so every platform can provide its own version of the code.

To call a datajs API with mutual authentication instead of a request URI string users may pass the request object which includes both the request URI string and client certificate description. The following code is an example implementation of this 

When handling client certificate authentication if an error happens the error information may be stored locally and the request continued. When the server response comes when calling the plugin successcallback method the stored error information may be stored into the plugin s result s json object as an item with the key of error . The error item s value is a json object containing the error code error message and optional native error code fields.

If the local stored exception is available and the http connection failed and the client is unable to get any server response then when calling the plugin onerrorcallback method the stored local exception information to can be returned to Javascript including error code error message and native error code. Two example reasons to do so may be 

1. Even if an authentication error happens the https proxy can still get the response from the server as the server response may contain additional information about the error and where to get help to fix it

2. The server can be set to require or allow a client certificate. If it requires a certificate then the request can fail if the client fails to provide the certificate. If it allows a certificate the request can still succeed even if the client fails to provide the certificate. However when a client handles the certificate request it does not know whether the server side settings are ALLOW or REQUIRE. So in order to handle the ALLOW setting properly even if the client fails to get a certificate it should not abort the request.

In an example embodiment user permissions may be added to a manifest file of an operating system operating on the client. The following is an example of such permissions being added 

In an example embodiment cookies may be added to a request for authorization using the header object that is passed to the get send request functions. The cookie name and value can be set in this way although other pieces of the cookies such as domain path etc. can be set automatically based on the URL the request is made against. The cookie may be treated as a session cookie and sent on future requests as appropriate. The API examples below show an example of how to set a cookie with the header object 

In another example embodiment the plug in is a logger plug in. The logger plug in allows the developer to log messages by calling one or more methods in the logger plug in. This may be accomplished by providing the ability to write entries to a local log which under developer control can be uploaded to the mobile platform server for analysis.

In another example embodiment the plug in is a push notification plug in. The push notification plug in enables notification capability for applications. is a diagram illustrating a system in accordance with an example embodiment of push notification. The system includes the client device running a container and which receives push notifications a notification service provider that sends the push notifications an a mobile platform server which collects device identifications from the clients and push notifications through the notification service provider . The push notification plug in allows developers to enroll applications for notification with notification registration as well as to receive and process incoming notifications for applications. This plug in can also support background notification processing.

An API may be provided that allows developers to push data to the applications. In an example embodiment the mobile platform server pushes messages to a push server through a RESTful API which in turns delivers the push message to a user agent which then provides execution instructions for the application. The user agent then delivers the push message to the designated application.

The push API tasks include registering and unregistering a push notification push notification handling push notification configuration and error message handling.

When a developer registers the application with the notification service provider a device or registration identification is sent to the mobile platform server . When a push request is processed that information is then used to target specific applications running on individual devices.

In another example embodiment the plug in is a storage plug in. The storage plug in provides secure encrypted on device storage. The storage plug in API methods may be asynchronous and may include listener and callback functions. Each storage function may be associated with a list of key and value pairs when it is created. The storage plugin may work asynchronously. The storage plug in may first be used to create an encrypted storage object. Then various callback functions can be used to store the actual data. A setItem function may be used in this regard specifying a key value successCallback and errorCallback . For example 

Additional functions can be used to clear all data from the storage remove a key value for storage and get a number of values stored for example.

Banks and city and state governments have a common application theme across those organizations. Each of them have a need to deliver multiple mobile applications to their constituents and customers but the complexity of developing and distributing multiple apps often one for each department or division is daunting.

Traditionally any organization looking to enable different departments or business units to deliver mobile applications to end users delivered those applications separately a different application and associated icon on the device home screen for each use. Banks for example could have a different application for managing personal checking and savings accounts potentially others for financial management mortgage credit cards insurance and more. City or county governments could have an app for garbage collection utilities water electric taxes concerts parks community service and much more. Colleges and universities would have an app for schedules athletics alumni a book store and more.

What these organizations need is a single mobile application that has the ability to be provisioned with multiple sub applications with each sub application potentially created by separate parts of the organization .

Unlike the requirements for enterprise applications these applications need to be self provisioned by the end user rather than managed by corporate IT. Users would need the ability to login to a web portal or do the same in app it s better to do this from within the app and select the different department or divisional apps they want provisioned on their device. With the mobile application already on the device after making their selections adding or removing sub apps from their profile the next update from the server makes sure that the selected apps are added appropriate apps are removed and of course that the latest versions of all sub apps are on device.

The solution to this particular problem is a modified version of the hybrid web container application with some new hosted back end infrastructure needed for the customer organization to manage the list of available applications that can be provisioned into the container . The back end infrastructure may be for example a consumer cloud offering.

Instead of apps being pre built and available to sell to customers the app is a generic empty container that is simply branded for the organization city county bank or whatever and deployed into the appropriate mobile device platform s app store s . The application can be deployed empty or deployed with some common content such as a department contact list or customer service 311 link so users have something to look at as they wait for their sub apps to provision. The sub apps themselves can either be pre built for some common apps customers will want by a mobile platforms or partners and sold to customers such as banks or government agencies or built by the customers themselves.

Since this is a hybrid application approach the apps are built using standard out of the box HTML5 plus the traditional and mobile platform supplied APIs that developers of sub apps can use to extend an application beyond what is supported by HTML5. Each application may need to somehow look and feel like the other apps from the same organization but that can be easily accommodated through the creation of custom organization specific CSS that is distributed to developers or applied to existing pre built apps .

Some users would have many sub apps installed others would have just a few but there would be a tailored environment for each user.

Existing server infrastructure already supports push requests so the consumer hybrid container provides organizations with the ability to push alerts reminders and even specials or promotions to users. The container is location aware so there s value add services that can be added around where the user is located. This becomes an ATM or branch finder for banking applications a nearest park capability for a city or county government and a nearest open parking space feature for a university application.

Amber alerts severe weather alerts and reminders about off cycle garbage pick up days can be provided easily and efficiently. Since the app may have the user s email address or phone number easily retrieved from the device the application could even support specific alerts tailored for the particular user such as whether tax payments are due credit card or utility payment due etc. An app could push an alert to a device that reminds the user of purchased tickets for a community event. An app could proactively alert the user if the event is cancelled because of pending severe weather or unexpected events. The possibilities are endless for this type of application.

At operation container metadata specifying functions on the application and containing calls to the libraries in the container service for the first operating system and the first plug in is defined. At operation a first version of the application is built from the container for the first operating system the first plug in and the container metadata .

At operation a container for a second operating system is downloaded. The container for the second operating system may include a container service including one or more libraries of functions designed by the container designer A and B to natively operate on the second operating system and a browser . At operation a second plug in is downloaded the second plug in including one or more additional libraries of functions designed by an entity other than the container designer A and B to perform additional native operations on the second operating system. At operation a second version of the application is built from the container for the second operating system the second plug in and the container metadata .

Certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules e.g. code embodied 1 on a non transitory machine readable medium or 2 in a transmission signal or hardware implemented modules. A hardware implemented module is a tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more processors may be configured by software e.g. an application or application portion as a hardware implemented module that operates to perform certain operations as described herein.

In various embodiments a hardware implemented module may be implemented mechanically or electronically. For example a hardware implemented module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A hardware implemented module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware implemented module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term hardware implemented module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily or transitorily configured e.g. programmed to operate in a certain manner and or to perform certain operations described herein. Considering embodiments in which hardware implemented modules are temporarily configured e.g. programmed each of the hardware implemented modules need not be configured or instantiated at any one instance in time. For example where the hardware implemented modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware implemented modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware implemented module at one instance of time and to constitute a different hardware implemented module at a different instance of time.

Hardware implemented modules can provide information to and receive information from other hardware implemented modules. Accordingly the described hardware implemented modules may be regarded as being communicatively coupled. Where multiple of such hardware implemented modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware implemented modules . In embodiments in which multiple hardware implemented modules are configured or instantiated at different times communications between such hardware implemented modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware implemented modules have access. For example one hardware implemented module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware implemented module may then at a later time access the memory device to retrieve and process the stored output. Hardware implemented modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. application program interfaces APIs . 

Example embodiments may be implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. Example embodiments may be implemented using a computer program product e.g. a computer program tangibly embodied in an information carrier e.g. in a machine readable medium for execution by or to control the operation of data processing apparatus e.g. a programmable processor a computer or multiple computers.

A computer program can be written in any form of programming language including compiled or interpreted languages and it can be deployed in any form including as a stand alone program or as a module subroutine or other unit suitable for use in a computing environment. A computer program can be deployed to be executed on one computer or on multiple computers at one site or distributed across multiple sites and interconnected by a communication network.

In example embodiments operations may be performed by one or more programmable processors executing a computer program to perform functions by operating on input data and generating output. Method operations can also be performed by and apparatus of example embodiments may be implemented as special purpose logic circuitry e.g. a field programmable gate array FPGA or an application specific integrated circuit ASIC .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In embodiments deploying a programmable computing system it will be appreciated that that both hardware and software architectures require consideration. Specifically it will be appreciated that the choice of whether to implement certain functionality in permanently configured hardware e.g. an ASIC in temporarily configured hardware e.g. a combination of software and a programmable processor or a combination of permanently and temporarily configured hardware may be a design choice. Below are set out hardware e.g. machine and software architectures that may be deployed in various example embodiments.

The example computer system includes a processor e.g. a central processing unit CPU a graphics processing unit GPU or both a main memory and a static memory which communicate with each other via a bus . The computer system may further include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT . The computer system also includes an alphanumeric input device e.g. a keyboard or a touch sensitive display screen a user interface UI navigation device e.g. a mouse a disk drive unit a signal generation device e.g. a speaker and a network interface device .

The disk drive unit includes a machine readable medium on which is stored one or more sets of instructions and data structures e.g. software embodying or utilized by any one or more of the methodologies or functions described herein. The instructions may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable media .

While the machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium may include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more instructions or data structures. The term machine readable medium shall also be taken to include any tangible medium that is capable of storing encoding or carrying instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies of the presentdisclosure or that is capable of storing encoding or carrying data structures utilized by or associated with such instructions . The term machine readable medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media. Specific examples of machine readable media include non volatile memory including by way of example semiconductor memory devices e.g. erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks.

The instructions may further be transmitted or received over a communications network using a transmission medium. The instructions may be transmitted using the network interface device and any one of a number of well known transfer protocols e.g. HTTP . Examples of communication networks include a local area network LAN a wide area network WAN the Internet mobile telephone networks plain old telephone POTS networks and wireless data networks e.g. WiFi and WiMax networks . The term transmission medium shall be taken to include any intangible medium that is capable of storing encoding or carrying instructions for execution by the machine and includes digital or analog communications signals or other intangible media to facilitate communication of such software.

Although an embodiment has been described with reference to specific example embodiments it will be evident that various modifications and changes may be made to these embodiments without departing from the broader spirit and scope of the disclosure. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense. The accompanying drawings that form a part hereof show by way of illustration and not of limitation specific embodiments in which the subject matter may be practiced. The embodiments illustrated are described in sufficient detail to enable those skilled in the art to practice the teachings disclosed herein. Other embodiments may be utilized and derived therefrom such that structural and logical substitutions and changes may be made without departing from the scope of this disclosure. This Detailed Description therefore is not to be taken in a limiting sense and the scope of various embodiments is defined only by the appended claims along with the full range of equivalents to which such claims are entitled.

Such embodiments of the inventive subject matter may be referred to herein individually and or collectively by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed. Thus although specific embodiments have been illustrated and described herein it should be appreciated that any arrangement calculated to achieve the same purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all adaptations or variations of various embodiments. Combinations of the above embodiments and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the above description.

