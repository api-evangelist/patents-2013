---

title: Previewing email templates in marketing campaigns
abstract: Various embodiments of systems and methods for customizing a preview content of an email template assigned to a marketing campaign are described herein. The method involves receiving a request to preview an email template. In response, a content of the email template including placeholders is invoked and the HyperText markup language (HTML) elements for the placeholders is identified. Further, descriptive names for the identified HTML elements are derived according to a correspondence language of the user. In an aspect, the correspondence language of the user is determined based on the user's language selection at the time of login. The identified HTML elements in the email template are replaced with the selected descriptive names and the preview content is rendered on an output interface.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378194&OS=09378194&RS=09378194
owner: SAP SE
number: 09378194
owner_city: Walldorf
owner_country: DE
publication_date: 20131029
---
This application relates generally to campaign management and more specifically to previewing email templates assigned to a marketing campaign.

Emails are sent out by enterprises for several purposes such as notification acknowledgement authorization etc. Some enterprises market their products services and offers to a large number of customers through various modes of marketing campaigns such as email campaign mail campaign phone campaign short message service SMS campaign etc. In many instances the marketing email is created using an email template personalized for individual recipients. For example certain dynamic portions of the email template are replaced with attributes personal to the recipient. Oftentimes it may be prudent to preview the email template to ensure that the content of the email is accurate and relevant to the current campaign. However the content of the email template rendered in the preview may include certain information in a markup language which is unfamiliar to the user.

Various embodiments of systems and methods for customizing a preview of the email templates assigned to marketing campaigns are described herein. In an aspect the method involves receiving a request to preview an email template. In response to the request a content of the email template including placeholders is invoked. The invoked email content is then parsed to identify HyperText markup language HTML elements for the placeholders. Further the method involves deriving descriptive names for the identified HTML elements according to a correspondence language of the user. In an aspect the correspondence language of the user is determined based on the user s language selection at the time of login. In an aspect the identified HTML elements in the email template are replaced with the derived descriptive names and the preview content is rendered on an output interface.

These and other benefits and features of embodiments will be apparent upon consideration of the following detailed description of preferred embodiments thereof presented in connection with the following drawings.

Embodiments of techniques for customizing a preview of the email templates assigned to marketing campaigns are described herein. In the following description numerous specific details are set forth to provide a thorough understanding of the embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components materials etc. In other instances well known structures materials or operations are not shown or described in detail.

Reference throughout this specification to one embodiment this embodiment one aspect and similar phrases means that a particular feature structure or characteristic described in connection with the embodiment is included in at least one of the one or more embodiments. Thus the appearances of these phrases in various places throughout this specification are not necessarily all referring to the same embodiment. Furthermore the particular features structures or characteristics may be combined in any suitable manner in one or more embodiments.

Software as a service SaaS sometimes referred to as on demand software is a software delivery model in which software and associated data are centrally hosted on the cloud. SaaS is typically accessed by users using a thin client via a web browser. SaaS has become a common delivery model for many business applications including accounting collaboration customer relationship management CRM management information systems MIS enterprise resource planning ERP etc. SaaS applications are hosted centrally where software and data are stored on host servers. The applications can be run on a PC with an internet connection and a web browser. One such SaaS offering is SAP Business ByDesign from SAP AG.

The SAP Business ByDesign solution offers several modules designed to track end to end business processes. Customer relationship management CRM is one such module designed to support processes that span marketing sales and service activities. Marketing includes a variety of activities such as creating and running marketing campaigns across multiple channels connecting with target customers generating leads etc. One of the marketing functions supported by SAP CRM module is Campaign Management to execute marketing campaign processes including design execution coordination optimization and monitoring. A marketing campaign would typically send a message to several hundreds of recipients referred to as bulk messaging. Bulk messaging is dissemination of large number of messages to people across the globe. Typically in such message campaigns bulk messaging is processed in batches referred to as batch processing. Batch processing is execution of series of programs or jobs on a processing unit without manual intervention.

Release Feature Pack FP 4.0 of SAP Business ByDesign solution provides for the use of email templates for generating emails for campaigns. The email templates have a pre defined text as well as placeholders for receiving personal data pertaining to a recipient. The placeholders in the template allow for the personalization of the email sent to the target recipients of the campaign. In an aspect the email templates are created at an external source 3party using state of the art tools as a file and uploaded into the CRM system. The content of the email is personalized by simply adding personal data relating to the recipient in place of the placeholders. In certain scenarios prior sending out the email to thousands of recipients a user may want to ensure that the content of the email is accurate and relevant to the current campaign. Accordingly the user may request for a preview of the email template before sending the email template out as a personalized email. However since the email template is embodied as an HTML text the email template preview may display the placeholders as HTML elements which may be difficult for the user to interpret and understand. One or more embodiments described herein provide for replacing the HTML elements in the email template with descriptive names in the language of correspondence of the user for the preview. The example embodiments illustrated below using to describe in detail the customizing of email template previews in marketing campaigns.

In some embodiments one or more client devices may be associated with administrators of the environment and may be capable of accessing and interacting with the settings and operations of one or more business applications and or other components of the illustrated environment . Additionally there may also be one or more additional client devices external to the illustrated portion of environment capable of interacting with the environment via network . Further the terms user client and personnel may be used interchangeably as appropriate and refer to a person or entity. Moreover while the client device is described in terms of being used by a single user this disclosure contemplates that many users may use one computer or that one user may use multiple computers. For example several employees of a company called users can use the applications deployed on the corresponding client device. For instance the term client device refers to a system providing a set of business applications belonging to or rented by a particular customer or business entity. Several employees of that particular customer or business entity can be users of that client device and use the business applications provided by or available on this client device.

The environment is an example and in alternative implementations the elements illustrated in may be included in or associated with different and or additional servers clients networks and locations other than those as shown. For example one or more of the components within the web application server may be located in multiple or different servers cloud based or cloud computing networks or other locations accessible to the web application server e.g. either directly or indirectly via network . The client device can access certain business applications built upon a similar or common on demand platform. For example the client device may request certain data or data objects of a business application running on the web application server .

In an embodiment a user logs into the campaign management application from the client device and creates a new marketing campaign for sending personalized emails to the members of an assigned target group. The creation of a new marketing campaign is part of a campaign definition phase in which an email template an HTML email form for generating the personalized emails is uploaded and assigned to the marketing campaign being created. In an aspect the template may be created external to the environment by 3party tools. The externally created email template is then uploaded into the campaign management application and maybe stored in a local file. Email templates are the basis on which e mails letters electronic messages like SMS and faxes are generated and sent to the members of the target group. The content of the email template can be personalized by adding personal data relating to the customer into designated placeholders in the template.

At certain moments such as prior to executing the campaign i.e. prior to sending out the email template as a personalized email to members of the target group the user may want to preview a particular email template. The user may request a template for a preview by e.g. selecting a Uniform Resource Indicator URI for the email template on a user interface UI . In an embodiment the email body of the email template contains placeholders in a certain HTML syntax as shown in Example 1 

In order to provide a preview that is user friendly i.e. easy to interpret and understand by the user one or more embodiments described herein provide for replacing the HTML placeholder elements with descriptive names which are in simple and plain text. Example 3 shows the preview content after replacing HTML placeholder elements in the preview content shown in Example 2.

In an embodiment the preview content is customized according to a preferred language of correspondence to the user. The customization involves identifying the HTML placeholder elements in the preview content deriving the associated descriptive names for the elements in the preferred language of the user and replacing the HTML placeholder elements with the derived descriptive names. The customized preview content is then rendered as a preview to the user on the client device . In an aspect an application developer may implement a new Form Message type for placeholders e.g. APCRM FORM CPG EXE PLACEHOLDER having semantic name e.g. FormCampaignExecutionPlaceholder. In the new Form Message type the supported placeholders are added as HTML elements. Each element is assigned a descriptive name which is a language dependent description of the placeholder. The term descriptive name as used herein refers to a UI text which is a description of the attribute for which the placeholder holds the place. The descriptive name is devoid of HTML semantic name HTML element and HTML syntax. In an aspect the descriptive name is rendered within in the customized preview content.

In an aspect the request for preview is provided as a standard HTTP request. In an example the user interface calls a certain ICF service of the web application server by addressing it via a URL. In response to receiving the request for preview the campaign management application creates an instance of class CL TT HTML MERGE . A constructor of this class invokes the email template as Extensible HyperText Markup Language XHTML string. This string comprises the email body including the placeholders. The constructor of class CL TT HTML MERGE parses the XHTML string into an Extensible markup language XML document object model DOM tree. Using the XML DOM tree the class CL TT HTML MERGE identifies the HTML placeholder elements within the XHTML string. Subsequently the application calls method REPLACE WITH DESCRIPTIVE NAMES which determines the UI texts i.e. the descriptive names for the identified HTML elements. The identified HTML placeholder elements are then replaced with the corresponding descriptive names and the customized preview content is placed in a context buffer as an XHTML string. The preview handler class CL TT PREVIEW HANDLER which handles the request retrieves the customized preview content from the content buffer and provides the preview as a HTTP response to the request. The customized preview is displayed in a new browser window.

Upon receiving the request for previewing a particular email template a content of the email template is invoked as an XHTML string at process block . The string comprises the email body including the placeholders. Further at process block a correspondence language of the user is determined. In an aspect the correspondence language of the user is determined from the user s account settings. In another aspect the correspondence language of the user is determined from the language preference selected by the user at the time of logging into the application. For example at the time of login the user may provide his her login name ID password and a language of correspondence e.g. German. At process block the preview content is customized according to the user s language setting and rendered on an output interface at process block . The method of customizing the preview content is described with reference to .

As shown in at process block the application identifies the HTML elements for the placeholders in the email template by creating an instance of class CL TT HTML MERGE. The constructor of class CL TT HTML MERGE invokes the email template as an XHTML string and parses the XHTML string into a XML data object model tree and identifies the HTML placeholder elements within the XHTML string from the DOM tree. Further at process block the equivalent descriptive names for the identified HTML elements are derived from metadata information of the Form Message Type. As shown in the examples in TABLE 1 the descriptive names provide a user friendly description of the placeholder elements.

Further in an aspect the descriptive name is derived according to the correspondence language of the user such that the descriptive name is rendered in the language of correspondence of the user. At process block the identified HTML placeholder elements are replaced with the derived descriptive names. In an example a user having a language preference for German may request for a preview of an email template expressed in English language. Typically a preview of the email template will return the preview content including the HTML placeholder elements in English language. However according to the embodiments disclosed herein the customized preview content not only has the HTML placeholder elements replaced by descriptive names but has the descriptive names expressed in German language according to the user s language of preference.

Referring back to the preview content which is customized according to the method is rendered on a UI of the client device . In an aspect the preview is displayed in a new browser window on the UI.

Referring to the example in selecting the tab New to create a new campaign renders a layout having input fields namely campaign ID campaign description campaign type start date end date etc. Selecting the campaign type as Direct e mail generates a modal window on the UI. Some of the fields provided in the modal window include sender email address reply to e mail address e mail subject e mail template and execution status. The corresponding input fields for these options can be populated with data according to the campaign being created.

An e mail template for the campaign may be uploaded from a local file by selecting the Add option . Selecting the Add option opens a file selector pop up not shown of the client device s operating system. During the upload an API of the campaign management application is called which checks the HTML syntax of the email template and converts the data stream into Extensible HyperText markup language XHTML . The content of the uploaded HTML file will be stored as XHTML in the node MAIL FORM of BO Campaign. In an aspect the user manually enters the subject line for the uploaded email template and sets a language code of the uploaded email template. When the email template is uploaded the description of the email template is displayed as hyperlink . Selecting this hyperlink opens a browser window and allows for preview of the email template.

Some embodiments may include the above described methods being written as one or more software components. These components and the functionality associated with each may be used by client server distributed or peer computer systems. These components may be written in a computer language corresponding to one or more programming languages such as functional declarative procedural object oriented lower level languages and the like. They may be linked to other components via various application programming interfaces and then compiled into one complete application for a server or a client. Alternatively the components maybe implemented in server and client applications. Further these components may be linked together via various distributed programming protocols. Some example embodiments may include remote procedure calls being used to implement one or more of these components across a distributed programming environment. For example a logic level may reside on a first computer system that is remotely located from a second computer system containing an interface level e.g. a graphical user interface . These first and second computer systems can be configured in a server client peer to peer or some other configuration. The clients can vary in complexity from mobile and handheld devices to thin clients and on to thick clients or even other servers.

The above illustrated software components are tangibly stored on a computer readable storage medium as instructions. The term computer readable storage medium should be taken to include a single medium or multiple media that stores one or more sets of instructions. The term computer readable storage medium should be taken to include any physical article that is capable of undergoing a set of physical changes to physically store encode or otherwise carry a set of instructions for execution by a computer system which causes the computer system to perform any of the methods or process steps described represented or illustrated herein. A computer readable storage medium may be a non transitory computer readable storage medium. Examples of a non transitory computer readable storage media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROMs DVDs and holographic devices magneto optical media and hardware devices that are specially configured to store and execute such as application specific integrated circuits ASICs programmable logic devices PLDs and ROM and RAM devices. Examples of computer readable instructions include machine code such as produced by a compiler and files containing higher level code that are executed by a computer using an interpreter. For example an embodiment may be implemented using Java C or other object oriented programming language and development tools. Another embodiment may be implemented in hard wired circuitry in place of or in combination with machine readable software instructions.

A data source is an information resource. Data sources include sources of data that enable data storage and retrieval. Data sources may include databases such as relational transactional hierarchical multi dimensional e.g. OLAP object oriented databases and the like. Further data sources include tabular data e.g. spreadsheets delimited text files data tagged with a markup language e.g. XML data transactional data unstructured data e.g. text files screen scrapings hierarchical data e.g. data in a file system XML data files a plurality of reports and any other data source accessible through an established protocol such as Open DataBase Connectivity ODBC produced by an underlying software system e.g. ERP system and the like. Data sources may also include a data source where the data is not tangibly stored or otherwise ephemeral such as data streams broadcast data and the like. These data sources can include associated data foundations semantic layers management systems security systems and so on.

In the above description numerous specific details are set forth to provide a thorough understanding of embodiments. One skilled in the relevant art will recognize however that the embodiments can be practiced without one or more of the specific details or with other methods components techniques etc. In other instances well known operations or structures are not shown or described in detail.

Although the processes illustrated and described herein include series of steps it will be appreciated that the different embodiments are not limited by the illustrated ordering of steps as some steps may occur in different orders some concurrently with other steps apart from that shown and described herein. In addition not all illustrated steps may be required to implement a methodology in accordance with the one or more embodiments. Moreover it will be appreciated that the processes may be implemented in association with the apparatus and systems illustrated and described herein as well as in association with other systems not illustrated.

The above descriptions and illustrations of embodiments including what is described in the Abstract is not intended to be exhaustive or to limit the one or more embodiments to the precise forms disclosed. While specific embodiments of and examples for the one or more embodiments are described herein for illustrative purposes various equivalent modifications are possible within the scope of the as those skilled in the relevant art will recognize. These modifications can be made in light of the above detailed description. Rather the scope is to be determined by the following claims which are to be interpreted in accordance with established doctrines of claim construction.

