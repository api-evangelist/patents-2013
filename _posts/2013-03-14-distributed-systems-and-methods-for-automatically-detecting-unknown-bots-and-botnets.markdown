---

title: Distributed systems and methods for automatically detecting unknown bots and botnets
abstract: Techniques may automatically detect bots or botnets running in a computer or other digital device by detecting command and control communications, called “call-backs,” from malicious code that has previously gained entry into the digital device. Callbacks are detected using a distributed approach employing one or more local analyzers and a central analyzer. The local analyzers capture packets of outbound communications, generate header signatures, and analyze the captured packets using various techniques. The techniques may include packet header signature matching against verified callback signatures, deep packet inspection. The central analyzer receives the header signatures and related header information from the local analyzers, may perform further analysis (for example, on-line host reputation analysis); determines using a heuristics analysis whether the signatures correspond to callbacks; and generally coordinates among the local analyzers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430646&OS=09430646&RS=09430646
owner: FireEye, Inc.
number: 09430646
owner_city: Milpitas
owner_country: US
publication_date: 20130314
---
The present invention relates generally to network security and more particularly to detecting malicious software operating in computers and other digital devices.

Malicious software or malware for short may include any program or file that is harmful by design to a computer. Malware includes computer viruses worms Trojan horses adware spyware and any programming that gathers information about a computer or its user or otherwise operates without permission. The owners of the computers are often unaware that these programs have been added to their computers and are often similarly unaware of their function.

Malicious network content is a type of malware distributed over a network via websites e.g. servers operating on a network according to an HTTP standard or other well known standard. Malicious network content distributed in this manner may be actively downloaded and installed on a computer without the approval or knowledge of its user simply by the computer accessing the web site hosting the malicious network content the malicious web site . Malicious network content may be embedded within objects associated with web pages hosted by the malicious web site. Malicious network content may also enter a computer on receipt or opening of email. For example email may contain an attachment such as a PDF document with embedded malicious executable programs. Furthermore malicious content may exist in files contained in a computer memory or storage device having infected those files through any of a variety of attack vectors.

Various processes and devices have been employed to prevent the problems associated with malicious content. For example computers often run antivirus scanning software that scans a particular computer for viruses and other forms of malware. The scanning typically involves automatic detection of a match between content stored on the computer or attached media and a library or database of signatures of known malware. The scanning may be initiated manually or based on a schedule specified by a user or system administrator associated with the particular computer. Unfortunately by the time malware is detected by the scanning software some damage on the computer or loss of privacy may have already occurred and the malware may have propagated from the infected computer to other computers. Additionally it may take days or weeks for new signatures to be manually created the scanning signature library updated and received for use by the scanning software and the new signatures employed in new scans.

Moreover anti virus scanning utilities may have limited effectiveness to protect against all exploits by polymorphic malware. Polymorphic malware has the capability to mutate to defeat the signature match process while keeping its original malicious capabilities intact. Signatures generated to identify one form of a polymorphic virus may not match against a mutated form. Thus polymorphic malware is often referred to as a family of virus rather than a single virus and improved anti virus techniques to identify such malware families is desirable.

Another type of malware detection solution employs virtual environments to replay content within a sandbox established by virtual machines VMs that simulates or mimics a target operating environment. Such solutions monitor the behavior of content during execution to detect anomalies and other activity that may signal the presence of malware. One such system sold by FireEye Inc. the assignee of the present patent application employs a two phase malware detection approach to detect malware contained in network traffic monitored in real time. In a first or static phase a heuristic is applied to network traffic to identify and filter packets that appear suspicious in that they exhibit characteristics associated with malware. In a second or dynamic phase the suspicious packets and typically only the suspicious packets are replayed within one or more virtual machines. For example if a user is trying to download a file over a network the file is extracted from the network traffic and analyzed in the virtual machine using an instance of a browser to load the suspicious packets. The results of the analysis constitute monitored behaviors of the suspicious packets which may indicate that the file should be declared malicious. The two phase malware detection solution may detect numerous types of malware and even malware missed by other commercially available approaches. Through its verification technique the two phase malware detection solution may also achieve a significant reduction of false positives relative to such other commercially available approaches. Otherwise dealing with a large number of false positives in malware detection may needlessly slow or interfere with download of network content or receipt of email for example. This two phase approach has even proven successful against many types of polymorphic malware and other forms of advanced persistent threats.

In some instances malware may take the form of a bot a contraction for software robot. Commonly in this context a bot is configured to control activities of a digital device e.g. a computer without authorization by the digital device s user. Bot related activities include bot propagation to attack other computers on a network. Bots commonly propagate by scanning nodes e.g. computers or other digital devices available on a network to search for a vulnerable target. When a vulnerable computer is found the bot may install a copy of itself and then continue to seek other computers on a network to infect.

A bot may without the knowledge or authority of the infected computer s user establish a command and control CnC communication channel to send outbound communicates to its master e.g. a hacker or herder or a designated surrogate and to receive instructions back. Often the CnC communications are sent over the Internet and so comply with the Hypertext Transfer Protocol HTTP protocol. Bots may receive CnC communication from a centralized bot server or another infected computer peer to peer . The outbound communications over the CnC channel are often referred to as callbacks and may signify that bots are installed and ready to act. Inbound CnC communications may contain instructions directing the bot to cause the infected computers i.e. zombies to participate in organized attacks against one or more computers on a network. For example bot infected computers may be directed to ping another computer on a network such as a bank or government agency in a denial of service attack often referred to as a distributed denial of service attack DDoS . In other examples upon receiving instructions a bot may a direct an infected computer to transmit spam across a network b transmit information regarding or stored on the infected host computer c act as a keylogger and record keystrokes on the infected host computer or d search for personal information such as email addresses contained in an email or a contacts file . This information may be transmitted to one or more other infected computers to the bot s master.

Further enhancement to malware detection effectiveness while avoiding false positives is desirable of course particularly as malware developers continue to create new forms of exploits including more sophisticated bots and botnets having potentially serious consequences.

Techniques may automatically detect bots or botnets running in a computer or other digital device by detecting command and control communications called call backs from malicious code that has previously gained entry into the digital device. Callbacks are detected using a distributed approach employing one or more local analyzers and a central analyzer. The local analyzers capture packets of outbound communications generate signatures from header information and analyze the captured packets using various techniques. The techniques may include packet header signature matching against verified callback signatures and deep packet inspection e.g. dark domain analysis and dark IP address analysis . The central analyzer receives signatures and associated packet header information from the local analyzers checks for signature matches in a global signature cache and may in some embodiments perform further analysis for example host reputation analysis with respect to the packet headers. The central analyzer employs machine learning to generate callback probability scores associated with each packet header whose information is received. The scores may indicate callback status i.e. whether the packet headers are associated with callbacks and thus malicious. The central analyzer may then update the global signature cache with that status and generally coordinates among the local analyzers including sharing verified callback signatures with them.

In an illustrative embodiment a local analyzer performs the following steps A forming a first signature based on a preferably partially masked header of a captured network packet for use as an index into a local signature cache and into a local event anomaly database where each captured packet may represent an event B performing a deep packet inspection of the captured network header C subscribing to a service provided by a central analyzer located remotely from the local cache and for example coupled thereto by a network for determining based on a global signature cache lookup and at least in part on results called anomalies from the deep packet inspection performed by the local analyzer on the captured network packet whether the first signature corresponds to a malware callback and D responsive to a message received from the central analyzer storing results of the central analyzer s determination in the local signature cache if the current signature corresponds to a malware callback and updating the local event anomaly database.

In an illustrative embodiment a central analyzer performs the following steps A receiving a first signature representative of a captured network packet from a local analyzer B using the received first signature as an index to find a match in a global signature cache and to update a global event anomaly database where each captured packet may represent an event and where anomalies are identified by analysis performed by the local cache with respect to the captured network packet C absent a match performing further analysis in at least some embodiments including for example a reputation analysis e.g. using online resources D determining based at least in part on the anomalies and the results of the analysis if any by the central analyzer whether the first signature corresponds to a malware callback E storing match information and or results of the determination in the global signature cache if the current signature corresponds to a malware callback and updating the global event anomaly database and F sending a message to the local analyzer with the match information and or results of the determination.

Detecting callbacks as described herein as a keystone of malicious attack and exploit analysis may permit embodiments of the invention to detect disparate forms of malware and even families of polymorphic virus that use the same communication mechanisms to obtain instructions and other communications in furtherance of their nefarious purposes.

Generally speaking a bot is a type of or part of an active infiltration attack often installing or operating in a two step process. The first step is the initial infection which may be a typically small package of malicious code malware whose function is to compromise the infected device. The second step involves that malware obtaining instructions as to malicious activity it is to perform including possibly downloading additional malware e.g. over the Internet or sending messages or data from the infected computer. This second step often involves establishing a CnC channel over which it may send a message providing its status or requesting CnC communications instructions . This is called a callback and the exchange of such communications may be referred to as callback activity.

The CnC may use an undocumented entry point or subvert and use a documented entry point to request instructions over a CnC channel which are often transmitted over the same or other channels. Often the CnC channel is established via a non standard port provided by the operating system of the infected device. In so doing the bot bypasses normal security and authentication mechanisms and thereby achieves unauthorized egress from the computer. A hallmark of bots is the manner by which they utilize egress points for callbacks is designed to remain undetected to the digital device s user and system network administrators.

To achieve detection of callback activity embodiments of the invention provide a distributed callback detection and analysis system which may include one or more local analysers and a central analyser often cloud based. The local analysers may each perform a a signature match comparing a signature generated from a current HTTP header against those generated from HTTP headers previously determined to be associated with callback activity and b deep packet inspection of received HTTP packets i.e. packets containing HTTP messages including for example one or more of protocol compliance analysis dark domain analysis and dark IP address analysis. If the signatures match the current HTTP header is associated with callback activity and an alert may be generated. If the signatures do not match but the deep packet analysis finds suspicious anomalies e.g. protocol non compliance or unconventional syntax or content or destination is a dark domain or dark IP address the current HTTP header and related communication information is provided to the central analyser. The central analyser may perform additional evaluation such as a reputation analysis for example using on line resources. Afterwards a threat heuristic analysis may be performed combining all the results from the local and central analyser to reach a probabilistic determination of whether the suspicious content should be declared malicious.

In some embodiments the local analyser operates to sniff network traffic for HTTP packets extract HTTP headers therefrom form signatures of preferably select HTTP header fields and perform a look up of those header signatures to determine whether those headers have been analysed previously for potential indicators of an attack. If the signatures were previously associated with an attack an alert may be immediately issued. The local analyzer may also perform a deep packet inspection. This may entail evaluating information contained within fields of the headers for protocol anomalies suspicious header content suspicious domain identifiers dark domain analysis and or suspicious destination IP addresses dark IP address analysis . Based on this evaluation the local analyzer may decide whether the header information indicates malware e.g. a bot is present. Upon finding suspicious anomalies the local analyser reports the suspect e.g. the header signatures and in some embodiments metadata related to the communication to a central analyser to whose services it subscribes for further evaluation and centralized coordination with other local appliances. The central analyser may perform additional evaluation such as a reputation analysis for example using on line resources. Afterwards a threat heuristic analysis may be performed combining all the results from the local and central analyser to reach a probabilistic determination of whether the suspicious content should be declared malicious. To that end the threat heuristic analysis may employ machine learning or training to perform threat analytics for example by compare the current analysis results with those from labelled malware and labelled non malware samples. The threat heuristics analysis yields a threat probability for the current results. If the threat probability exceeds a pre determined threshold an alert may be issued.

Throughout this specification reference is made to HTTP. HTTP is an application layer protocol widely used for data communications for the World Wide Web. The Request for Comment RFC 2616 Hypertext Transfer Protocol HTTP 1.1 specification sets out the semantics and other requirements for HTTP communications. HTTP resources are identified and located on a network by Uniform Resource Locators URLs . Employing a client server computing model HTTP provides data communication for example between one or more web browsers running on computers or other electronic devices constituting the clients and an application running on a computer or other electronic device hosting a website constituting the server. HTTP is a request response protocol. For example a user clicks on a link on their web browser which sends a request over the Internet to web server hosting the website identified in the request. The server may then send back a response containing the contents of that site including perhaps text and images for display by the user s browser.

The HTTP specification defines fields of HTTP headers which are components of HTTP messages used in both requests and responses and define the operating parameters of an HTTP communication or transaction. The header fields are transmitted after the request or response line which is the first line of a message. As noted the HTTP semantics are well defined for example Header fields are colon separated name value pairs in clear text string format. Each field is terminated by a carriage return CR and line feed LF character sequence. The end of the header fields is indicated by an empty field resulting in the transmission of two consecutive CR LF pairs. Variations from the specified semantics constitute anomalies. Also the HTTP specification allows users to define their own fields and content though often practice and convention dictate how those fields are used and what content may be expected. Variations from those conventions may also be deemed anomalies. Finally sometimes malware authors will insert content into the fields such as malware names or other tell tail malware descriptors or indicators which serve as strong evidence of malicious activity. These too will be deemed anomalies for purposes of this specification.

For communication an HTTP header is added to an HTTP message and placed in a TCP UDP message sometimes more than one TCP UDP message per HTTP message which in turn is encapsulated as payload in an IP Datagram which is encapsulated as payload in a Layer 2 Frame which is sent as a signal over the transmission medium as a string of binary numbers. Each Layer 2 Frame has in order a Layer 2 header an IP header a TCP or UDP header a HTTP header HTTP data etc. and finally a Layer 2 footer. Taking this explanation one step further the IP layer includes in its header the information necessary for the packet to find its way to its final destination. More specifically for computer to computer communication across networks a source device forms packets for transmission by placing the IP address of the destination computer in the IP header of each packet involved in a communication session. The data packets are encapsulated as noted above and placed on the network and routed across the network to the destination having the specified IP address. In this specification reference will be made to packets which shall be used in its broadest sense to include without limitation messages datagrams frames and of course packets unless the context requires otherwise. Accordingly packet capture techniques may yield the HTTP header IP address of the destination of an IP packet as well as domain identifiers from the URL of HTTP headers included in the IP packets.

The outbound communications monitored by the local analyzers may contain network packets which are normally expected to be in conformance with the HTTP protocol or other suitable protocol. While HTTP will be used as an example of a suitable protocol through the specification the invention may be practiced with any standard protocol preferably an application level protocol for data communication. The network packets may be sent over networks by computers to one or more other computers situated for example on the trusted side of the respective firewalls . The network packets may also be sent by computers over networks and network to one or more computers such as server situated on the untrusted side of the firewall and possibly at geographically distant location. Each local analyzer may be deployed at a respective IT facility of an enterprise A B C. Each of the networks may be proprietary networks such as a LAN or WAN and the network may be a public network such as the Internet. The networks may constitute in various alternative embodiments separate networks or sub networks of a common network for example. In a yet another alternative embodiment the local analyzers may be coupled with the central analyzer via a dedicated communication link rather than a LAN or WAN.

While three local analyzers coupled for operation with a single central analyzer are shown in this figure for purposes of illustration and may be considered collectively as forming a local global analyzer cell the invention can be practiced with any number of local analyzers in a group within a single cell where the number of analyzers is selected to be able sufficiently to monitor outbound communications under prevailing traffic conditions with the group of local analyzers within the local global analyzer cell being associated with the single central analyzer . Moreover the local global analyzer cell may be replicated throughout an enterprise or across multiple related or unrelated enterprises so as to provide a scalable deployment. Moreover in one embodiment the central analyzer of one local global analyzer cell may be connected to a central analyzer of a second local global analyzer cell and so forth so as to distribute results of its analysis to one or more other local global analyzer cells to enhance filtering and detection of callbacks across two or more local global analyzer cells.

One embodiment of the invention takes advantage of software as a service SaaS principles of business in which the central analyzer may be a cloud based server providing services to one or more service subscribers. In this environment the local analyzers may be considered clients that avail themselves of the services of the central analyzer configured as a server and located for example within the Internet. In some embodiments the services of a central analyzer may be provided by an IT service provider on behalf of a number of customers that subscribe to its services each of which having at least one local analyzer either located on the customer s premised or coupled to the customer s trusted network and provisioned for providing local analysis. Alternatively the central analyzer and each of the local analyzers may be deployed as an appliance i.e. a dedicated electronic device serving to detect malware integrated as part of a local or enterprise wide network as a firewall or other network device adapted to provided malware detection as described herein or as a network endpoint adapted to provide malware detection as described herein and systems may deploy any one or a combination of the foregoing implementations.

The first stage filtering logic has a local signature matching logic an alert generation logic and a deep packet inspection logic . The local signature matching logic receives a stream of captured packet headers and for each generates a signature from information contained in the header. The signature may be hash of at least portions of the information contained in the header. In other embodiments the signature may be an identifier associated with the header and may or may not be based on the information depending on the embodiment. Then the local signature matching logic accesses a repository not shown in this figure such as a cache of signatures of previously evaluated and confirmed malware to determine whether the current header signature matches any of those for malware previously evaluated. If a match is found the alert generation logic issues an alert. The deep packet inspection logic analyses the packet headers of captured packets for anomalies or other evidence indicating the packets may constitute malware. The deep packet inspection may include protocol anomaly matching as described elsewhere herein. In some embodiments if the deep packet inspection logic does not detect any anomalies or in some embodiments only de minimus or minor ones the packet may be dropped from further analysis. If the local signature matching logic finds no match but the deep packet inspection finds anomalies the current packet header is deemed a malware suspect or suspect packet. As such the current packet header is provided along with its corresponding header signature for further analysis by the second stage filtering logic of the central analyzer .

In some embodiments the local signature matching logic may process captured packets prior to the deep packet inspection logic examining the captured packets in which case the deep packet inspection logic need only examine packets whose signatures did not have a match. In other embodiments the deep packet inspection logic may examine captured packets before the local signature matching logic performs its cache lookup in which case the deep packet inspection s cache lookup need only be performed with respect packet headers having anomalies. This may prove beneficial from a time and resource conservation perspective. Of course they may also operate in a parallel or overlapping fashion in some embodiments.

The second stage filtering logic includes a global signature matching logic and a host reputation evaluation logic . As used herein global signifies that the central analyzer s logic processes data obtained from all local analyzers . . . N associated with the central analyzer . That association between the local analyzers . . . N and the central analyzer may be established on a business basis where the users of the local analyzers . . . N subscribe to and in some cases may pay a fee for the services SaaS of the central analyzer . The global signature matching logic operates in a similar fashion to the local signature matching logic as described above except in this case the repository or cache not shown in this drawing includes a potentially more current list or even a more comprehensive list of globally identified malicious packet header signatures. In some embodiments the global cache may have a more comprehensive list of malicious packet header signatures because the local cache may have retired entries after a certain length of time or the global cache may receive signatures from other local analyzers not shown that are not subscribers to the central analyzer or from other central analyzers not shown which have not yet been shared with the local analyzers . . . N. If the global signature matching logic finds a match it may depending on the embodiment take the following steps a forward the current packet header and signature to the post processing logic for further analysis e.g. for forensics purposes b initiate an alert and forward a malware warning to all local analyzers . . . N so that the local analyzers may update their local cache and or c proceed with evaluation by the reputation evaluation logic . If the global signature matching logic does not find a match the packet header is provided to the reputation evaluation logic . In alternative embodiments the reputation evaluation logic may process the packet header before the global cache look up or in parallel therewith.

The reputation evaluation logic may evaluate the reputation of the host by performing an on line or live investigation of the reputation of the destination of the URL or IP address of the destination of the packet. For example if the URL is associated with a reputable business that would be regarded as low risk. However if the URL is associated with a dubious web site possible a malicious web site the reputation evaluation logic would mark the packet as having a suspicious attribute or anomaly for example in an event anomaly database . The packets so marked may be referred to as suspicious suspect packets. 

The post processing logic includes a threat heuristics engine or logic a global signature generation and distribution logic and alert generation logic . The threat heuristics logic receives the results attributes from a second stage filtering logic and the packet header signature and related information e.g. anomalies metadata from the analytics performed by the first stage filtering logic .

The threat heuristics logic performs a threat heuristic analysis to verify whether the captured headers contain bootkits. The threat heuristics logic is configured to calculate a probability that the packet is associated with a callback and thus malicious. To that end the threat heuristics analysis may advantageously employ principles of machine learning. Machine learning refers to a process or system that can learn from data i.e. be trained to distinguish between good and bad or in this case between malicious and non malicious and classify samples under test accordingly. The core of machine learning deals with representation and generalization that is representation of data instances e.g. the anomalies and other analytical results which can be collectively called attributes and functions performed on those instances e.g. weighting and probability formulas . Generalization is the property that the process or system uses to apply what it learns on a learning set of known or labeled data instances to unknown or unlabeled examples. To do this the process or system must extract learning from the labeled set that allows it to make useful predictions in new and unlabeled cases.

For machine learning the DCDA system may operate in a training mode and in an operational mode. In a training mode the DCDA system employs a threat heuristics training logic to subject known samples labeled samples of callback communications and known samples of clean or non malicious communications to analysis to calibrate the threat heuristics logic for probability scoring of callbacks and non callback activities. To accomplish this the threat heuristics training logic may submit malicious and clean samples to one of the local analyzers . . . N and a central analyzer . In some embodiments the threat heuristics training logic may employ a special forensics system e.g. with a single local analyzer and a central analyzer as respective back end and front end components on the same controller e.g. controller of . In alternative embodiments the threat heuristics training logic may test the malicious and clean samples each time it calibrates a different DCDA system or it may store the results of prior tests for use in future calibrations of DCDA systems. The threat heuristics training logic may assign a probability score to each of the possible patterns resulting from testing the malicious and clean samples which probability scores are indicative of whether a communication e.g. a packet constitutes a callback.

In an operating mode the threat heuristics analysis logic combines all attributes with respect to a current packet under test unlabeled of course to form a current pattern containing potential indicators of callback activity. Then the threat heuristics analysis logic compares that pattern and or in some embodiments each and every one of the attributes contained therein with those obtained during the training mode. Where attributes are separately analyzed the threat heuristics analysis logic may assign weights based on experience during training to attributes that are deemed more closely associated with malware. It then assigns a probability score to each of the possible patterns and or in some embodiments to each of the attributes within each pattern as to its likelihood of appearing in a malicious and or clean sample based on the learned probability scoring. This may involve determining how closely a pattern of attributes in an unlabeled sample compares to a labeled sample using a proximity calculation based on the probability of encountering each attribute in a malware or non malware pattern. The end result may be a composite probability score for the current packet under test. The score is indicative of whether the current packet under test is associated with a callback and thus malware. If the score exceeds a pre determined e.g. learned or administrator set threshold for example the current packet is deemed malicious. Accuracy in prediction of malware will depend on the selection and number of relevant attributes the selection of weights to be assigned to each the comparison process used and the quality of training.

The global signature generation and distribution logic receives the results from the threat heuristics logic that is depending on the embodiment a probability score e.g. from 1 to 10 where 10 is the highest probability indicating whether the current packet header is associated with or contains malware or a declaration that the packet header is or is not i.e. a binary determination associated with or contains malware. The global signature generation and distribution logic provides an update to the local analyzers . . . N including the score and or determination from the threat heuristics logic . The local analyzer may then update their event anomaly databases and caches with this information. If their caches already have the signature it is now marked as being associated with malware. The alert generation logic may issue a notice report warning or other alert to a security administrator in the event that the threat heuristics logic concludes the probability score is above a pre determined and in some embodiments user or administrator set threshold or declares the current packet is associated with or contains malware.

Processor is further coupled to persistent storage via transmission medium . According to one embodiment persistent storage may include classification logic which in turn may include packet capture engine signature generator caching control logic traffic header analyzer for deep packet header inspection host analyzer for domain based host analysis and IP based host analysis. The persistent storage may also include a TLD blacklist repository an event anomaly database an IP blacklist repository and a local cache . Of course when implemented as hardware the local classifier would be implemented separately from persistent memory .

Packet capture engine may be implemented using known packet capture or PCAP techniques for example in a packet capture engine or packet replay tool not shown . The packet capture engine may capture packets travelling over a network such as network of e.g. by monitoring and capturing traffic at select I O ports. In some embodiments packets may be captured using a port mirroring or exchange flow mirroring technique. The packet capture engine permits configuring of packet filters which may be employed to limit the number of packets captured using flow mirroring. Captured packets may be stored in an event anomaly database in persistent storage or other storage associated with the packet capture engine for later analysis. Each such captured packet may be considered a separate event and a record may be opened for each event in the event anomaly database .

Signature generator may be configured to received packet headers from the PCAP engine strip off parameter values contained in the headers generate a hash e.g. using Md5sum of the remaining fields of the headers sometimes referred to as a partially masked PCAP and store the resulting hash value along with the packet header in the event anomaly database as its corresponding signature. The parameter values stripped off by the signature generator may contain personal or proprietary information of a nature that would render sharing of such information with geographically remote systems possibly situated outside an enterprise and even in another country undesirable. In other words the signature generator extracts select fields of characters for use in forming the signature for the full packet header and discards the remaining characters as unneeded surplus for these purposes.

The masked header after removing parameter values from the URI and the stub data might read as follows 

The hash of this masked header may be used to identify the above given communication for future references. An md5sum hash of the second header as shown above yields 1a7724e7a428b1d865bb01847a8178d5.

The caching control logic uses each header signature from the signature generator as an index into the cache of the persistent memory to determine if an entry stored therein matches the header signature. The cache is updated from time to time with results of the second stage filtering process as will be discussed in detail below so as to contain information regarding previously detected callbacks accessible in the cache by header signatures. The cache may contain the header signatures of verified callbacks together with the associated raw partially masked PCAP and depending on the embodiment other information regarding the callbacks such as the indicators detected by the local analyzer and or central analyzer that marked the particular communications as callbacks. Alternatively this other information may be stored in the event anomaly database and accessed using the signature as an index for example. Thus the cache may be thought of as containing a blacklist of header signatures corresponding to communications that may constitute callbacks and may indicative malware. The callback analysis process as herein described deals with assessed probability that a particular communication constitutes a callback and that assessment may change over time therefore it is preferably that the cache contain for these purposes only blacklist information. If the caching control logic finds a match for the blacklist of header signatures stored in the cache i.e. a cache hit indicating or marked as malicious the local analyzer may issue an alert to the effect that the correspond communication contains a callback and may declare the presence of malware e.g. a bot in the computer device that initiated the communication source . The local analyzer may also provide a report regarding the callback including the signature and the corresponding partially masked PCAP. If the caching control logic does not find a match for the blacklist of header signatures stored in the cache i.e. a cache miss or if any entry is not marked as malicious the local analyzer may continue with the analysis as described below.

Traffic header analyzer is configured to use the partially masked PCAPs from the packet capture engine to detect anomalies in packet header fields that may indicate callback communications. The traffic header analyzer may implement any of a variety of anomalies detection techniques involving packet header scanning including for example a identifying non standard patterns e.g. field contents relative to the applicable protocol e.g. HTTP b identifying invalid header sequencing for the applicable protocol e.g. HTTP c comparing header structures with a whitelist and or blacklist of prevalent legitimate and or illegitimate header structures for the applicable protocol e.g. HTTP . For example the fields of a header may be out of order or sequence e.g. the host header which should follow GET but may appear later or particular fields may be omitted due to mistake or carelessness by a programmer who may be a malware author.

Host analyzer employs domain analysis logic to check the destination host domains identified in packet headers received from the packet capture engine against a Top Level Domain TLD blacklist and or a TLD whitelist stored in a respective TLD blacklist repository and TLD whitelist repository of persistent memory . The TLD blacklist repository stores blacklisted TLDs top level domain that are known or believed to be associated with malicious servers and or with dynamic DNS services often used by bot herders. For example certain country designations of the TLDs may be associated at any particular time with a high incidence of malware authorship possibly due to nation state sponsored or condoned cyber threat activities and therefore encountering those TLDs may render the packets containing those TLDs suspicious suspects for purposes of this invention.

The results from the analysis performed by the host analyzer may correspond to any of several difficult outcomes. Matches of the destination host domains with the stored blacklisted TLDs may result in the corresponding packet header signatures being designated as a highly suspicious callback suspect and sent to the central analyzer for further analysis. Matches with the entries in the stored TLD whitelist particularly where those same destination host domains did not match entries in the stored blacklisted TLDs may result in the corresponding communication being considered safe and thus not as likely callback candidates. Of course matches in both the blacklisted TLDs and whitelisted TLDs may be viewed as an error condition and may result in the corresponding communication being sent to the central analyzer for further analysis and or the error condition reported. Finally matches in neither the blacklisted TLDs nor whitelisted TLDs may result in the corresponding communication being sent to the central analyzer for further analysis.

Host analyzer may also employ an IP analysis logic to check the destination host IP addresses contained in the full packet headers received from the packet capture engine against an blacklist stored in a respective IP blacklist repository of persistent memory . The IP blacklist repository stores IP addresses associated with assigned to known or suspected malicious servers or other electronic devices e.g. IP addresses corresponding to verified sources of malicious attacks. Matches with the stored blacklisted IP addresses result in the corresponding packet header signatures being designated as highly suspicious callback suspects and sent to the central analyzer for further analysis. On the other hand in the event that a header destination address does not match any of the blacklisted IP addresses stored in the IP blacklist repository the packets of the corresponding communication may be viewed as safe i.e. unlikely callback suspects and requiring no further analysis. In some embodiments depending on traffic conditions those communications may nonetheless be sent to the central analyzer for further analysis of course.

Instead of relying solely on local analysis based on locally gathered and stored information regarding malware and their callbacks the distributed detection and analysis system further employs a form of global analysis conducted by a central analyzer in collaboration with the local analyzer as will be described next in greater detail. The central analyzer may employ a number of different analytical techniques including global callback caching and on line or live investigation of headers destinations reputations.

Finally persistent logic includes a threat heuristic training logic and a threat heuristics logic or engine . The operation of the foregoing components of the central analyzer may be appreciated from the description of and .

Proceeding with the central analysis portion in step logic checks whether results corresponding to the event are in the global cache. If they are that is if a cache hit in step logic sends an update to the local cache to reflect the cache hit in the global cache for example indicating or marking a header signature as malicious. In step logic modifies the events anomaly database to reflect the cache hit in the global cache and issues an alert indicating that the suspect is malware. On the other hand if step finds that the corresponding results are not in the global cache in step logic invokes a live analysis engine which assess the reputation of the header URL and or IP address based on on line resources such as by visiting the web site corresponding to the URL or other Web based resources. In step logic combines the results from analysis in the local and central analyzers. In step logic updates the global cache with the results all of the heuristics analysis. Also in some embodiments if step finds that the corresponding results are not in the global cache in step logic queues the event for a re analysis by the central analyzer portion after a period of time or when workloads are lower. By that time it is possible that the global cache may have been updated with new results from the threat heuristics analysis.

Embodiments of the distributed callback detection system may be deployed as a stand alone system or integrated into malware detection systems that examine and analyze other additional characteristics or attributes of the content that may indicate the presence of malware such as for example malware signature scanning utilities or the afore mentioned two phase malware detection solutions. For example the callback detection mechanisms described herein can be added to appliances and other systems for detecting malware either by adding a virtual machine execution capability to such systems or by adding a local analyzer or a central analyzer functionality.

The controller may also have a communication network interface an input output I O interface and a user interface . The communication network interface may be coupled with a communication network via a communication medium . The communications network interface may communicate with other digital devices not shown via the communications medium . The communication interface may include a network tap . The bus may provide communications between the communications network interface the processor the memory system the storage system the I O interface and the user interface .

The I O interface may include any device that can receive input from or provide output to a user. The I O interface may include but is not limited to a flash drive a compact disc CD drive a digital versatile disc DVD drive or other type of I O peripheral not separately shown . The user interface may include but is not limited to a keyboard mouse touchscreen keypad biosensor display monitor or other human machine interface not separately shown to allow a user to control the controller . The display monitor may include a screen on which is provided a command line interface or graphical user interface.

In various embodiments of the invention a number of different controllers for example each of a type as illustrated and described for controller may be used to implement the invention.

The communication network may include a public computer network such as the Internet in which case a firewall may be interposed between the communication network and the client device . Alternatively the communication network may be a private computer network such as a wireless telecommunication network wide area network or local area network or a combination of networks.

The malicious network content detection system is shown as coupled with the network by a network interface including a network tap e.g. a data packet capturing device . The network tap may include a digital network tap configured to monitor network data and provide a copy of the network data to the malicious network content detection system . The network tap may copy any portion of the network data for example any number of packets from the network data. In embodiments where the malicious content detection system is implemented as an dedicated appliance or a dedicated computer system the network tap may include an assembly integrated into the appliance or computer system that includes network ports network interface card and related logic not shown for connecting to the communication network to non disruptively tap traffic thereon and provide a copy of the traffic to the heuristic module . In other embodiments the network tap can be integrated into a firewall for example using a SPAN port router switch or other network device not shown or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to copy traffic from virtual networks.

The malicious network content detection system may include a heuristic module a heuristics database a scheduler a virtual machine pool an analysis engine and a reporting module . The heuristic module receives the copy of the network data from the network tap and applies heuristics to the data to determine if the network data might contain suspicious network content. The heuristics applied by the heuristic module may be based on data and or rules stored in the heuristics database . The heuristic module may examine the image of the captured content without executing or opening the captured content. For example the heuristic module may examine the metadata or attributes of the captured content and or the code image e.g. a binary image of an executable to determine whether a certain portion of the captured content matches a predetermined pattern or signature that is associated with a particular type of malicious content. In one example the heuristic module flags network data as suspicious after applying a heuristic analysis.

When a characteristic of the packet such as a sequence of characters or keyword is identified that meets the conditions of a heuristic a suspicious characteristic of the network content is identified. The identified characteristic may be stored for reference and analysis. In some embodiments the entire packet may be inspected e.g. using deep packet inspection techniques as described hereinabove and multiple characteristics may be identified before proceeding to the next step. In some embodiments the characteristic may be determined as a result of an analysis across multiple packets comprising the network content. A score related to a probability that the suspicious characteristic identified indicates malicious network content is determined. The heuristic module may also provide a priority level for the packet and or the features present in the packet. The scheduler may then load and configure a virtual machine from the virtual machine pool in an order related to the priority level and dispatch the virtual machine to the analysis engine to process the suspicious network content.

The heuristic module may provide the packet containing the suspicious network content to the scheduler along with a list of the features present in the packet and the malicious probability scores associated with each of those features. Alternatively the heuristic module may provide a pointer to the packet containing the suspicious network content to the scheduler such that the scheduler may access the packet via a memory shared with the heuristic module . In another embodiment the heuristic module may provide identification information regarding the packet to the scheduler such that the scheduler replayer or virtual machine may query the heuristic module for data regarding the packet as needed.

The scheduler may identify the client device and retrieve a virtual machine associated with the client device . A virtual machine may itself be executable software that is configured to mimic the performance of a device e.g. the client device . The virtual machine may be retrieved from the virtual machine pool . Furthermore the scheduler may identify for example a Web browser running on the client device and retrieve a virtual machine associated with the web browser.

The scheduler may retrieve and configure the virtual machine to mimic the pertinent performance characteristics of the client device . The scheduler may determine the features of the client device that are affected by the network data by receiving and analyzing the network data from the network tap . Such features of the client device may include ports that are to receive the network data select device drivers that are to respond to the network data and any other devices coupled to or contained within the client device that can respond to the network data. In other embodiments the heuristic module may determine the features of the client device that are affected by the network data by receiving and analyzing the network data from the network tap . The heuristic module may then transmit the features of the client device to the scheduler .

The virtual machine pool may be configured to store one or more virtual machines. The virtual machine pool may include software and or a storage medium capable of storing software. In one example the virtual machine pool stores a single virtual machine that can be configured by the scheduler to mimic the performance of any client device on the communication network . The virtual machine pool may store any number of distinct virtual machines that can be configured to simulate the performance of a wide variety of client devices .

The analysis engine simulates the receipt and or display of the network content from the server device after the network content is received by the client device to analyze the effects of the network content upon the client device . The analysis engine may identify the effects of malware or malicious network content by analyzing the simulation of the effects of the network content upon the client device that is carried out on the virtual machine. There may be multiple analysis engines to simulate multiple streams of network content. The analysis engine may be configured to monitor the virtual machine for indications that the suspicious network content is in fact malicious network content. Such indications may include unusual network transmissions unusual changes in performance and the like. This detection process is referred to as a dynamic malicious content detection. The analysis engine may flag the suspicious network content as malicious network content according to the observed behavior of the virtual machine.

In alternative embodiments of the invention the heuristics module or the analysis engine may implement the local analyzer of . In further alternative embodiments of the invention the heuristics module or the analysis engine may implement or the central analyzer of . Where the suspicious network data results from the heuristics module or the analysis engine perform as a local analyzer the results of the analysis may be provided to a central analyzer as depicted at in for example provided by management system or located within the cloud depicted as network . In some embodiments the suspicious network data may otherwise be provided to the scheduler rather than a central analyzer or in addition to being provided to a central analyzer.

The reporting module may issue alerts indicating the presence of malware and using pointers and other reference information identify the packets of the network content containing the malware for example using the signatures described hereinabove. Additionally the server device may be added to a list of malicious network content providers and future network transmissions originating from the server device may be blocked from reaching their intended destinations e.g. by firewall .

The computer network system may also include a further communication network which couples the malicious content detection system MCDS with one or more other MCDS of which MCDS and MCDS are shown and a management system which may be implemented as a Web server having a Web interface. The communication network may in some embodiments be coupled for communication with or part of network . The management system is responsible for managing the MCDS and providing updates to their operation systems and software programs. Also the management system may cause malware signatures generated by any of the MCDS to be shared with one or more of the other MCDS for example on a subscription basis. Moreover the malicious content detection system as described in the foregoing embodiments may be incorporated into one or more of the MCDS or into all of them depending on the deployment. Also the management system or another dedicated computer station may incorporate the malicious content detection system in deployments where such detection is to be conducted at a centralized resource.

As described above the detection or analysis performed by the heuristic module may be referred to as static detection or static analysis which may generate a first score e.g. a static detection score according to a first scoring scheme or algorithm. The detection or analysis performed by the analysis engine is referred to as dynamic detection or dynamic analysis which may generate a second score e.g. a dynamic detection score according to a second scoring scheme or algorithm. The first and second scores may be combined according to a predetermined algorithm to derive a final score indicating the probability that a malicious content suspect is indeed malicious or should be declared or considered with high probability of malicious.

Furthermore detection systems and may deployed in a variety of distributed configurations depending on the embodiment. For example detection system may be deployed as a detection appliance at a client site to detect any suspicious content for example at a local area network LAN of the client. In addition any of MCDS and MCDS may also be deployed as dedicated data analysis systems. Systems and may be configured and managed by a management system over network which may be a LAN a wide area network WAN such as the Internet or a combination of both. Management system may be implemented as a Web server having a Web interface to allow an administrator of a client e.g. corporation entity to log in to manage detection systems and . For example an administrator may able to activate or deactivate certain functionalities of malicious content detection systems and or alternatively to distribute software updates such as malicious content definition files e.g. malicious signatures or patterns or rules etc. Furthermore a user can submit via a Web interface suspicious content to be analyzed for example by dedicated data analysis systems . As described above malicious content detection includes static detection and dynamic detection. Such static and dynamic detections can be distributed amongst different systems over a network. For example static detection may be performed by detection system at a client site while dynamic detection of the same content can be offloaded to the cloud for example by any of detection systems . Other configurations may exist.

The embodiments discussed herein are illustrative. As these embodiments are described with reference to illustrations various modifications or adaptations of the methods and or specific structures described may become apparent to those skilled in the art. For example aspects of the embodiments may be performed by executable software such as a program or operating system. For example embodiments of the local analyzer may be implemented in an operating system. Of course the operating system may incorporate other aspects instead of or in addition to that just described as will be appreciated in light of the description contained in this specification. Similarly a utility or other computer program executed on a server or other computer system may also implement the local analyzer or other aspects. Noteworthy these embodiments need not employ a virtual environment but rather test for callback activity during normal execution of the operating system utility or program within a computer system.

It should be understood that the operations performed by the above described illustrative embodiments are purely exemplary and imply no particular order unless explicitly required. Further the operations may be used in any sequence when appropriate and may be partially used. Embodiments may employ various computer implemented operations involving data stored in computer systems. These operations include physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared and otherwise manipulated.

Any of the operations described herein are useful machine operations. The present invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purpose or the apparatus may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations or multiple apparatus each performing a portion of the operations. Where apparatus or components of apparatus are described herein as being coupled or connected to other apparatus or other components the connection may be direct or indirect unless the context requires otherwise.

The present invention may be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter read by a computer system. Examples of the computer readable medium include hard drives flash drives read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion. The computer readable medium can also be distributed using a switching fabric such as used in compute farms.

The terms logic module engine and unit are representative of hardware firmware or software that is configured to perform one or more functions. As hardware these components may include circuitry such as processing circuitry e.g. a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit etc. receiver transmitter and or transceiver circuitry semiconductor memory combinatorial logic or other types of electronic components. When implemented in software the logic modules engines and units may be in the form of one or more software modules such as executable code in the form of an executable application an operating system an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a script a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage. Software is operational when executed by processing circuitry. Execution may be in the form of direct execution emulation or interpretation.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

It will be appreciated by those of ordinary skill in the art that modifications to and variations of the above described embodiments of a system and method of detecting callbacks and associated malware may be made without departing from the inventive concepts disclosed herein. Accordingly the specification and drawings are to be regarded as illustrative rather than restrictive and the invention should not be viewed as limited except as by the scope and spirit of the appended claims. It will be recognized that the terms comprising including and having as used herein are specifically intended to be read as open ended terms of art.

