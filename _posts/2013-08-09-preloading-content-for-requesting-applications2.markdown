---

title: Preloading content for requesting applications
abstract: Methods for preloading content in one application for another application are provided. In one aspect, a method includes receiving a request by a first application from a second application to preload content in the first application, and loading the content in the first application in response to the request from the second application. The method also includes switching from a display of the second application to a display of the first application and providing the loaded content for display in the first application in response to a selection in the second application from a user to display the content. Systems and machine-readable media are also provided.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09565233&OS=09565233&RS=09565233
owner: Google Inc.
number: 09565233
owner_city: Mountain View
owner_country: US
publication_date: 20130809
---
The present disclosure generally relates to the transmission of data over a network and more particularly to the use of a computing device to display requested data communicated over a network.

Non mobile computing devices such as desktop computer and laptop computers usually have faster computing speed and access to faster network connections than other types of computing devices. As a result a user using an application such as a web browser on a non mobile computing device a non mobile application is accustomed to faster content loading and rendering times.

On the other hand mobile computing devices such as smartphones have slower computing speeds and slower network access connections e.g. to mobile data telecommunication networks than non mobile computing devices. As a result when a user selects content such as a web page in a non web browser application to view in a web browser for a mobile device a mobile web browser the loading and display speed of both the mobile web browser and the web page in the mobile web browser is slowed by the computing capacity and limited bandwidth of the mobile device. A user that is accustomed to faster loading and display times for non mobile web browsers can find the slower load and display time of the mobile web browser and web page on the mobile web browser to be frustrating.

According to one embodiment of the present disclosure a method for preloading content in one application for another application is provided. The method includes receiving a request by a first application from a second application to preload content in the first application and loading the content in the first application in response to the request from the second application. The method also includes switching from a display of the second application to a display of the first application and providing the loaded content for display in the first application in response to a selection in the second application from a user to display the content.

According to another embodiment of the present disclosure a system for preloading content in one application for another application is provided. The system includes a memory that includes instructions and a processor. The processor is configured to execute the instructions to receive a request by a first application from a second application to preload content in the first application and load the content in the first application in response to the request from the second application. The processor is also configured to execute the instructions to switch from a display of the second application to a display of the first application and provide the loaded content for display in the first application in response to a selection in the second application from a user to display the content. The content is rendered for display in the second application in response to the selection in the second application from the user to display the content.

According to a further embodiment of the present disclosure a machine readable storage medium that includes machine readable instructions for causing a processor to execute a method for preloading content in one application for another application is provided. The method includes receiving a request by a web browser from another application to preload a web page in the web browser and loading the web page in the web browser in response to the request from the other application. The method also includes switching from a display of the other application to a display of the web browser and providing the loaded web page for display in the web browser in response to a selection in the other application from a user to display the web page. The web page is rendered for display in the second application in response to the selection in the second application from the user to display the web page. The request by the first application from the second application to preload the web page in the first application is received while the second application is in the foreground and the web page is loaded in the first application in the background while the second application remains in the foreground. When the first application is not running in the background the first application is initialized in the background in response to the request being received by the first application from the second application to preload the web page in the first application.

It is understood that other configurations of the subject technology will become readily apparent to those skilled in the art from the following detailed description wherein various configurations of the subject technology are shown and described by way of illustration. As will be realized the subject technology is capable of other and different configurations and its several details are capable of modification in various other respects all without departing from the scope of the subject technology. Accordingly the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.

In the following detailed description numerous specific details are set forth to provide a full understanding of the present disclosure. It will be apparent however to one ordinarily skilled in the art that the embodiments of the present disclosure may be practiced without some of these specific details. In other instances well known structures and techniques have not been shown in detail so as not to obscure the disclosure.

The disclosed system provides an interface to a first application such as a web browser which permits a second application to request that the first application preload content for display. Specifically after the second application is executed on a device and the second application loads its own content for display the second application may interact with the first application using an interface for the first application in order to request that the first application initialize if necessary and request that the first application after initialization preload content for display. The content that is preloaded for display can be identified by the second application in the request made to the first application or the first application can itself identify the content for preloading based on other information provided by the second application such as a user browsing history.

Although certain examples provided herein may describe a user s information e.g. browsing history and user input being stored in memory each user must grant explicit permission for such user information to be stored. The explicit permission may be granted using privacy controls integrated into the disclosed system. If requested user information includes demographic information then the demographic information is aggregated on a group basis and not by individual user. Each user is provided notice that such user information will be stored with such explicit consent and each user may at any time end having the user information stored and may delete the stored user information. The stored user information may be encrypted to protect user security.

The user can at any time delete the user information from memory and or opt out of having the user information stored in memory. Additionally the user can at any time adjust appropriate privacy settings to selectively limit the types of user information stored in memory or select the memory in which the user information is stored e.g. locally on the user s device as opposed to remotely a server . In many examples the user information does not include and or share the specific identification of the user e.g. the user s name unless otherwise specifically provided or directed by the user.

Each of the clients is configured to run an application for preloading content content preloading application or first application as disclosed herein. In certain aspects the clients can download and install the content preloading application from one of the servers . The content preloading application is configured to run on clients that are mobile or non mobile. The clients can be for example desktop computers laptop computers mobile devices e.g. a smartphone tablet computer or PDA set top boxes e.g. for a television video game consoles or any other devices having appropriate processor memory and communications capabilities. In certain aspects certain advantages of the content preloading application such as faster content loading time in response to a request are most salient on clients that are mobile devices or that otherwise have slower processing and network data download speeds.

If needed the content preloading application can be downloaded over the network from one of the many servers . For purposes of load balancing multiple servers can also host the data for downloading the content preloading application. In certain instances different versions and or configurations of the content preloading application that include the features disclosed herein are available for download from a server and subsequent installation depending on whether the client is a mobile device or non mobile device. The content preloading application once installed on a client is configured to load content e.g. web pages from any one or multiple servers hosting the content. The servers can be any device having an appropriate processor memory and communications capability for hosting the data for installing the web browser and for hosting the web pages. The network can include for example any one or more of a personal area network PAN a local area network LAN a campus area network CAN a metropolitan area network MAN a wide area network WAN a broadband network BBN the Internet and the like. Further the network can include but is not limited to any one or more of the following network topologies including a bus network a star network a ring network a mesh network a star bus network tree or hierarchical network and the like.

The disclosed content preloading application once executed on a client is configured to receive a request from another application a requesting application to load content in the content preloading application while the content preloading application is in the background e.g. as a background process and the requesting application remains in the foreground e.g. as a foreground process . In certain aspects if the content preloading application is not running in the background the content preloading application is initialized or warmed up in the background prior to loading the content in the background. The content to be preloaded can be identified by the requesting application or identified by the content preloading application in response to data from the requesting application. For example if the requesting application indicates that a user is currently viewing search results for pizza the content preloading application can load a web page associated with the first search result for pizza in the background. Alternatively the requesting application can provide the content preloading application with the web page address associated with the first search result for pizza for the content preloading application to load in the background. If the user then selects the link for the web page associated with the first search result for pizza the content preloading application will be displayed with the web page associated with the first search result substantially immediately due to the web page having been preloaded in the background prior to the user selection.

The client includes a processor the communications module and a memory that includes a content preloading application e.g. the first application a requesting application e.g. the second application and a client copy of content to display in the content preloading application using the output device e.g. a display of the client . The content preloading application can be for example a web browser document viewer image viewer or other application configured to load and render content for display. The requesting application can be for example a search application a reading application communication application or any other application that is not configured to display the content . The client also includes an input device such as a keyboard touchscreen or mouse to receive user input.

The processor of the client is configured to execute instructions such as instructions physically coded into the processor instructions received from software e.g. the content preloading application in memory or a combination of both to preloading content in the content preloading application for the requesting application . For example the processor of the client executes instructions from the content preloading application to receive e.g. by the content preloading application a request from the requesting application to preload content in the content preloading application . As illustrated the content is to be downloaded from a server copy of the content over the network from the server and stored in the memory of the client as a client copy of the content . In other aspects the content to be preloaded may already reside in the memory of the client .

The request by the content preloading application from the requesting application to preload content in the content preloading application can be received for example while the requesting application is in the foreground. The request can be received using an application programming interface for requesting content be preloaded provided by the content preloading application . For example the requesting application can be a foreground process namely a process that is required for what a user is currently doing. The content may then be loaded in the content preloading application in the background while the requesting application remains in the foreground. For example the content preloading application can be running as a background process namely a process holding an activity that is not currently visible to the user. The request to the application programming interface of the content preloading application may indicate that the content be downloaded by the content preloading application from the server over the network and the content may then be stored in the memory of the client for loading by the content preloading application . When the content preloading application is not running in the background e.g. as a background process or is otherwise not in a state to load the content the content preloading application is initialized in the background in response to the request being received by the content preloading application from the requesting application to preload content in the content preloading application .

The processor is also configured to load the content in the content preloading application in response to the request from the requesting application and in response to a selection in the requesting application from a user to display the content switch from a display of the requesting application e.g. as a foreground process to a display of the content preloading application e.g. switching from a background process to a foreground process and provide the loaded content for display in the content preloading application . In certain aspects the content is rendered for display in the requesting application in response to the selection in the requesting application from the user to display the content.

Additionally in certain aspects the processor is configured to receive another request from the requesting application indicating the content is not needed and unload the content in the content preloading application in response to the other request. For example if the requesting application initially requests the content preloading application to load the content in the background but the requesting application later determines that the content will no longer be needed e.g. due to a user browsing to a different web page than predicted then the requesting application can inform the content preloading application that the content is no longer needed and the content preloading application can unload or otherwise discard the content e.g. stored as local copy of content from memory .

The requesting application can either identify the content to be preloaded by the content preloading application or can provide information to the content preloading application as part of the request so that the content preloading application can evaluate the information from the requesting application to recommend or otherwise determine the content to load. For instance where the content preloading application is a web browser the content to be preloaded in the content preloading application can be a webpage. In such instances when the requesting application is configured to identify the content to be preloaded by the content preloading application the request from the requesting application to preload content can include an address of the webpage to be loaded by the content preloading application in the background.

In other instances where the requesting application is configured to provide information to the content preloading application as part of the request so that the content preloading application can evaluate the information from the requesting application to recommend or otherwise determine the content to load the request from the requesting application to preload content can include a browsing history of the user. The content preloading application can then identify the content to preload in the content preloading application based on the browsing history of the user. For example if the requesting application indicates to the content preloading application that a user of the requesting application is currently browsing a web page listing local restaurants and that the user has previously conducted a search for local pizza restaurants the content preloading application can load a link to a most prominently listed local pizza restaurant listed on the web page.

In other instances where the requesting application is configured to provide information to the content preloading application as part of the request so that the content preloading application can evaluate the information from the requesting application to recommend or otherwise determine the content to load the content preloading application may identify the content to preload in the content preloading application based on a probability value that the content to preload will be selected by the user in the requesting application . Using the previous example if the requesting application indicates to the content preloading application that a user of the requesting application is currently browsing a web page listing local restaurants the content preloading application can load a link to two of the most prominently listed local pizza restaurants listed on the web page because the two restaurants meet a threshold probability that they would be most likely selected by the user in the requesting application . As such the content to be preloaded in the content preloading application is not limited to one item of content but can be multiple items of content such as multiple webpages.

In further instances where the requesting application is configured to provide information to the content preloading application as part of the request so that the content preloading application can evaluate the information from the requesting application to recommend or otherwise determine the content to load the request from the requesting application to preload content can include input currently entered by the user in the requesting application e.g. using input device . The content preloading application can then identify the content to preload in the content preloading application based on the input currently entered by the user in the requesting application. For example if the requesting application indicates to the content preloading application that a user of the requesting application has currently entered anywhere in a joint search and address input field or omnibox the content preloading application may not load any content. If however the requesting application indicates to the content preloading application that a user of the requesting application has currently entered anywhere corpor in a joint search and address input field or omnibox the content preloading application may load the web page for Anywhere Corporation in the background.

The process begins by proceeding from beginning step when a user requests to initialize the requesting application to the requesting application where in step the requesting application is initialized. Next in step the requesting application provides first content for display in the requesting application . The first content is indicative of second content e.g. content to be displayed by the content preloading application . A determination is made in decision step whether the content preloading application is initialized.

If the determination of decision step indicates the content preloading application is not initialized the process turns to the content preloading application where in step in which the content preloading application is initialized and then the process proceeds to step . Otherwise if the determination of decision step indicates the content preloading application is initialized the process proceeds to step in which the requesting application requests the content preloading application to preload the second content e.g. content in the content preloading application . The process then proceeds from step to step in which the second content e.g. content is loaded e.g. as a client copy content in the content preloading application .

Returning to the requesting application next in step the requesting application receives a selection from a user to display the second content e.g. content in the content preloading application .

Turning back to the content preloading application in step the display of the requesting application i.e. in step is switched e.g. on the output device of the client to a display of the content preloading application and the loaded second content e.g. content is provided for display in the content preloading application . Next in step a request is received e.g. in the content preloading application to return to the requesting application .

The process then returns to the requesting application where in step the display of the content preloading application i.e. in step is switched e.g. on the output device of the client back to the display of the requesting application . The process then ends in step .

The process begins by proceeding from beginning step when a user requests to initialize the email communication application to the email communication application where in step the email communication application is initialized. Next in step the email communication application provides an email message for display in the email communication application . provides an example illustration of the email communication application displaying an email message . The email message includes various links and to web pages configured to be displayed by the web browser application .

The process then proceeds to decision step in which a determination is made whether the web browser application is initialized. The determination of decision step indicates the web browser application is not initialized and the process turns to the web browser application where in step the web browser application is initialized. Returning to the email communication application in step the email communication application requests the web browser application to preload in the web browser application a particular link to a web page due to a determination that the particular link is the most likely link among the various links and to be selected by the user. Next in step the web page linked to by the particular link identified in the request from the email communication application is downloaded in the web browser application and stored in memory of the mobile device as a client copy of the web page

Returning to the email communication application in step the email communication application receives a selection from a user e.g. using the touch display for the particular link . Turning back to the web browser application in step the display of the email communication application i.e. in step is switched e.g. on the touch display of the mobile device to a display of the web browser application and the loaded web page is provided for display e.g. substantially immediately due to having been preloaded in the background in the web browser application as provided in the example illustration of . Also displayed in the web browser application is a button for returning to the email communication application . Next in step the user selects the button for returning to the email communication application e.g. using the touch display .

The process then returns to the email communication application where in step the display of the web browser application i.e. in step is switched e.g. on the touch display of the mobile device back to the display of the email communication application . The process then ends in step .

Computer system e.g. client and server includes a bus or other communication mechanism for communicating information and a processor e.g. processor and coupled with bus for processing information. By way of example the computer system may be implemented with one or more processors . Processor may be a general purpose microprocessor a microcontroller a Digital Signal Processor DSP an Application Specific Integrated Circuit ASIC a Field Programmable Gate Array FPGA a Programmable Logic Device PLD a controller a state machine gated logic discrete hardware components or any other suitable entity that can perform calculations or other manipulations of information.

Computer system can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them stored in an included memory e.g. memory and such as a Random Access Memory RAM a flash memory a Read Only Memory ROM a Programmable Read Only Memory PROM an Erasable PROM EPROM registers a hard disk a removable disk a CD ROM a DVD or any other suitable storage device coupled to bus for storing information and instructions to be executed by processor . The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

The instructions may be stored in the memory and implemented in one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of the computer system and according to any method well known to those of skill in the art including but not limited to computer languages such as data oriented languages e.g. SQL dBase system languages e.g. C. Objective C C Assembly architectural languages e.g. Java .NET and application languages e.g. PHP Ruby Perl Python . Instructions may also be implemented in computer languages such as array languages aspect oriented languages assembly languages authoring languages command line interface languages compiled languages concurrent languages curly bracket languages dataflow languages data structured languages declarative languages esoteric languages extension languages fourth generation languages functional languages interactive mode languages interpreted languages iterative languages list based languages little languages logic based languages machine languages macro languages metaprogramming languages multiparadigm languages numerical analysis non English based languages object oriented class based languages object oriented prototype based languages off side rule languages procedural languages reflective languages rule based languages scripting languages stack based languages synchronous languages syntax handling languages visual languages wirth languages embeddable languages and xml based languages. Memory may also be used for storing temporary variable or other intermediate information during execution of instructions to be executed by processor .

A computer program as discussed herein does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules subprograms or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform functions by operating on input data and generating output.

Computer system further includes a data storage device such as a magnetic disk or optical disk coupled to bus for storing information and instructions. Computer system may be coupled via input output module to various devices. The input output module can be any input output module. Example input output modules include data ports such as USB ports. The input output module is configured to connect to a communications module . Example communications modules e.g. communications module and include networking interface cards such as Ethernet cards and modems. In certain aspects the input output module is configured to connect to a plurality of devices such as an input device e.g. input device and or an output device e.g. output device . Example input devices include a keyboard and a pointing device e.g. a mouse or a trackball by which a user can provide input to the computer system . Other kinds of input devices can be used to provide for interaction with a user as well such as a tactile input device visual input device audio input device or brain computer interface device. For example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech tactile or brain wave input. Example output devices include display devices such as a LED light emitting diode CRT cathode ray tube or LCD liquid crystal display screen for displaying information to the user.

According to one aspect of the present disclosure the client and server can be implemented using a computer system in response to processor executing one or more sequences of one or more instructions contained in memory . Such instructions may be read into memory from another machine readable medium such as data storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. One or more processors in a multi processing arrangement may also be employed to execute the sequences of instructions contained in memory . In alternative aspects hard wired circuitry may be used in place of or in combination with software instructions to implement various aspects of the present disclosure. Thus aspects of the present disclosure are not limited to any specific combination of hardware circuitry and software.

Various aspects of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network. The communication network e.g. network can include for example any one or more of a personal area network PAN a local area network LAN a campus area network CAN a metropolitan area network MAN a wide area network WAN a broadband network BBN the Internet and the like. Further the communication network can include but is not limited to for example any one or more of the following network topologies including a bus network a star network a ring network a mesh network a star bus network tree or hierarchical network or the like. The communications modules can be for example modems or Ethernet cards.

Computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. Computer system can be for example and without limitation a desktop computer laptop computer or tablet computer. Computer system can also be embedded in another device for example and without limitation a mobile telephone a personal digital assistant PDA a mobile audio player a Global Positioning System GPS receiver a video game console and or a television set top box.

The term machine readable storage medium or computer readable medium as used herein refers to any medium or media that participates in providing instructions or data to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. Non volatile media include for example optical disks magnetic disks or flash memory such as data storage device . Volatile media include dynamic memory such as memory . Transmission media include coaxial cables copper wire and fiber optics including the wires that comprise bus . Common forms of machine readable media include for example floppy disk a flexible disk hard disk magnetic tape any other magnetic medium a CD ROM DVD any other optical medium punch cards paper tape any other physical medium with patterns of holes a RAM a PROM an EPROM a FLASH EPROM any other memory chip or cartridge or any other medium from which a computer can read. The machine readable storage medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter effecting a machine readable propagated signal or a combination of one or more of them.

As used herein the phrase at least one of preceding a series of items with the terms and or or to separate any of the items modifies the list as a whole rather than each member of the list i.e. each item . The phrase at least one of does not require selection of at least one item rather the phrase allows a meaning that includes at least one of any one of the items and or at least one of any combination of the items and or at least one of each of the items. By way of example the phrases at least one of A B and C or at least one of A B or C each refer to only A only B or only C any combination of A B and C and or at least one of each of A B and C.

Furthermore to the extent that the term include have or the like is used in the description or the claims such term is intended to be inclusive in a manner similar to the term comprise as comprise is interpreted when employed as a transitional word in a claim.

A reference to an element in the singular is not intended to mean one and only one unless specifically stated but rather one or more. All structural and functional equivalents to the elements of the various configurations described throughout this disclosure that are known or later come to be known to those of ordinary skill in the art are expressly incorporated herein by reference and intended to be encompassed by the subject technology. Moreover nothing disclosed herein is intended to be dedicated to the public regardless of whether such disclosure is explicitly recited in the above description.

While this specification contains many specifics these should not be construed as limitations on the scope of what may be claimed but rather as descriptions of particular implementations of the subject matter. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the aspects described above should not be understood as requiring such separation in all aspects and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

The subject matter of this specification has been described in terms of particular aspects but other aspects can be implemented and are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

