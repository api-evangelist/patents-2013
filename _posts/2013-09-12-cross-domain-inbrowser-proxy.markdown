---

title: Cross domain in-browser proxy
abstract: An in-browser proxy enables an application in a frame to make a cross domain request. The proxy executes within the browser, which has a first domain. The browser provides a frame in which a client application executes, which has a second domain. The request from the client application is a request for data access to the external domain. The proxy identifies a registration of the client application, and forwards the request to the external domain. The proxy receives a response to the request and provides the response back to the client application within the frame.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09503501&OS=09503501&RS=09503501
owner: salesforce.com, inc.
number: 09503501
owner_city: San Francisco
owner_country: US
publication_date: 20130912
---
This application is a nonprovisional application based on U.S. Provisional Patent Application No. 61 702 020 filed Sep. 17 2012 and claims the benefit of priority of that provisional application. Provisional Application No. 61 702 020 is hereby incorporated by reference.

Embodiments described are related generally to submitting requests across different domains and embodiments described are more particularly related to a cross domain in browser proxy that allows for cross domain requests.

Portions of the disclosure of this patent document may contain material that is subject to copyright protection. The copyright owner has no objection to the reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever. The copyright notice applies to all data as described below and in the accompanying drawings hereto as well as to any software described below Copyright 2013 Salesforce.com Inc. All Rights Reserved.

Businesses generate and store large amounts of data. Businesses commonly store their data in database systems some of which may be managed by a different business. The database system may have different services and data access mechanisms than what a business uses for other data or services of its organization. Businesses frequently use tools that integrate both processes of the database system as well as local applications managed and or hosted by the business itself. The integrated tools can help reduce the inconvenience and performance loss associated with a user switching between local applications and processes of the database system. Such integrated tools can be referred to as mashups which are frequently browser based combinations of services of a local host and processes of a remote server. The mashup is typically created with different frames providing content from different sources.

Mashups implemented in browsers typically encounter a restriction on accessing data across domains. The domains refer to services hosted by different servers or different systems. Thus services hosted by a database system that provide access to data stored in the database can be a different domain than functions provided by an application hosted by a different server. The cross domain restrictions are particularly noticeable in browser based mashup systems. In browser based mashups a browser running on a consumer or client device accesses a database system remotely and includes functions hosted by a local server. Modern browsers impose cross domain restrictions which prevent an application from one domain from accessing another domain. Such a policy makes sense to prevent simply creating a mashup of a local application with a target system which could then theoretically grant access to an attacker if the cross domain restrictions were not in place.

However there are times when mashups are created specifically to provide integration of services from different domains. Thus the developer and the database system owner would like a site or web location from one domain to be able to access a remote separate domain. Traditionally such mashups are only possible with server side proxies written specifically to allow communication from the local server to the server and or database system of the other domain. Thus a client device makes a request on its local server within its own domain and the local server accesses the remote domain. The traditional process requires development of the interface mechanisms on the server side with different interfaces required for each different cross domain interaction desired.

While the burden of creating individualized server side interfaces for a small number of cross domain interactions as the number of cross domain interactions increases the burden quickly becomes very significant. Thus for implementation of a database system that may receive requests for data from many external domains the development requirements may be unmanageable. The added burden may be even higher for modern and developing database systems having different architectures from the traditional unitary database systems.

Descriptions of certain details and implementations follow including a description of the figures which may depict some or all of the embodiments described below as well as discussing other potential embodiments or implementations of the inventive concepts presented herein. An overview is provided below followed by a more detailed description with reference to the drawings.

As described herein an in browser proxy enables an application in a frame to make a cross domain request. In one embodiment the application is part of a mashup in the browser to provide access to an external system. The proxy executes within the browser which has a first domain which is the domain of the external system. The browser hosts a frame within a primary site in which a client application executes which has a second associated domain which is a domain of a server associated with the client that hosts the client application. The request from the client application is a request for data access to the first domain provided by the browser. The proxy identifies a registration of the client application and forwards the request to the external domain. The proxy receives a response to the request and provides the response back to the client application within the frame.

It will be understood that the in browser proxy provides an exception to the general restriction against accessing an external domain from within one site from a web browser. Thus a site from one domain can exchange requests and data with another domain via the in browser proxy. The proxy requires authorization of the client application within the frame. The browser can execute multiple frames where the application executes within one frame and the proxy executes as part of or in parallel with the web browser. Based on authorization of the client application via the proxy the external domain can trust the client application and thus allow access from within the first domain of the client application. In one embodiment the proxy can be implemented as a cross domain API application programming interface which is a component or process executing within the computing device on which the client application executes. The API provides an interface mechanism for one application to make a request to a service outside the application. The API can be called by the application to invoke a request on the external service.

In one embodiment a developer creates the application configuring the application to call the proxy or API. In one embodiment the client application does not need to be coded but is simply provided with addresses of services and or processes to execute. In one embodiment the development of the application includes loading components from a software development kit SDK to provide functionality interfaces and services to the application. Among the components that can be loaded a developer can load an interface to a cross domain proxy provided by the browser. The developer can configure the application to access the cross domain proxy for requests outside the client server domain. Thus the client application can include configured access to components hosted by a client server which can be accessed via the client application directly from within its domain. The client application can include configured access to components hosted by a parent server associated with the parent frame inside of which the client application executes in another frame. For access to components hosted by the parent server the client application determines that the services are outside its domain and makes a request via the proxy interface mechanism to allow the proxy to access the external domain on behalf of the client application.

In one embodiment the external domain is a domain of an on demand database system. An on demand database system provides database services to a client. In one embodiment the external domain is a domain of a business logic host or a server that provides business logic and or web services. A business logic host provides web services to a client. Thus the proxy interface can enable access to an external domain for database services business logic web services or other services.

In a multitenant database system MTS a database system provides services to multiple different tenants or database customers. Each database customer can include multiple client devices or client applications that access the database. By providing a browser mashup a client user can execute all services and applications locally at a client device while still being able to access the database services via the web browser e.g. accessing the database system via web services . For example a browser can implement services via JavaScript which allows it to be accessible via the browser and executable on the client side. In such an implementation there is no need to execute code on the server side or the database side. Thus in one embodiment nothing executes on the database system until the client application makes a request through the cross domain proxy. In one embodiment the request is an XML extensible markup language HTTP hypertext transport protocol request XHR . In one embodiment the XHR request has a payload of XML data. In one embodiment the XHR request has a payload of JSON JavaScript Object Notation data.

In one embodiment the database system servicing the requests is a multitenant database which provides a cloud architecture that allows a user to query for data in a modern database system. As referred to herein a multitenant database stores data for multiple client organizations which are each identified by a tenant ID. One or more users can be associated with each tenant ID. The one or more users of each client organization access data identified by the tenant ID associated with the respective client organization. The multitenant database is typically a database stored and hosted remote from the client organization. Typically the multitenant database is hosted by an entity e.g. company separate from the client organization. An MTS as described herein can be said to provide on demand database services. An MTS is typically a hosted system that provides as much database storage and service as required by each tenant.

In an MTS implementation each tenant ID may have a set of data associations and relationships. Thus a query on the MTS for one tenant ID may produce different results than the identical query on the MTS for a different tenant ID. In one embodiment the architecture of each tenant ID develops separately with custom configuration for each tenant. For example a UDD user defined database may be implemented for each tenant to store relationships and categorization data.

Client represents any type of client device that may access a server system for example a desktop or laptop computer a tablet smartphone server or other computing device. Network includes any type of network access that allows client to access parent server and client server . Network may be or include any one or more networks such as local or wide area networks wireless or wired encrypted e.g. virtual private network VPN or open on any of a variety of know or proprietary protocols or other network. Network is understood to include hardware and software components to enable remote connection of one device to another.

In one embodiment parent server is or is part of a database system such as an on demand database environment. As an on demand environment the database system can provide to client the quantity of database resources needed and when they are needed. As such the database system can appear as a scalable database resource to client . In one embodiment the database system has at least one aspect of its configuration that is configurable and scalable for different tenants. It will be understood that fundamentally data stored is simply data. A database is a framework of how that data is stored structured and interpreted when stored and accessed. Thus a database may be considered in one embodiment as a set of rules and procedures for storing accessing and manipulating data.

Client includes browser which is a web browser through which client can access network locations and services. Browser is an application that executes on client device and provides rendering of and access to content retrieved from a network location i.e. a location external to client . Browser may also be able to render content accessed locally from client . In one embodiment browser executes client application which is any kind of remotely hosted or provided application such as a web application. A web application is an application received from a network location which executes under browser . Application running under browser refers to the fact that application can rely on certain interface logic being provided by browser .

Client application is hosted by client server and browser receives the content from client server . Application can provide access to one or more resources from within browser . Resources allow for services and or data of client server to be accessed remotely from within browser . In one embodiment client also accesses one or more resources from parent server over network via browser . More particularly in one embodiment client application can access one or more resources from parent server . Parent server is a different domain or software environment from client server . Thus security access to parent server does not necessarily provide access to client server . Parent server and client server are typically managed by different entities. Application can access resources from parent server via in browser proxy .

Proxy allows application from one domain the domain of client server access the domain of parent server . In one embodiment browser accesses content from parent server and is thus under the domain of parent server . The content from parent server allows access to client server to execute application under browser . Typical security prevents application from accessing the domain of parent server . However application can make requests via proxy which allows application access across domains to parent server . In one embodiment proxy includes JavaScript that interfaces with JavaScript within application . The JavaScript in application can be configured to access proxy which can verify the trustworthiness of the application to allow access to parent server .

In one embodiment proxy proxies cross domain XHR calls from application for resources of parent server . Resources can include any data content or services provided by parent server . Proxy provides an in browser proxy which has advantages to other options for dealing with same origin restrictions. For example creating a server side proxy would require configuration of parent server and would also require a proxy for all different programming languages used to create client application . Other solutions such as using JSONP or CORS have deficiencies related to limited functionality and or being unsecure or working only in certain environments.

In one embodiment proxy is provided in browser from parent server and an SDK available to developers of client application includes an API to make request for resources e.g. such as XHR calls . In such an implementation the API forwards the requests to browser under the domain of parent server which submits the request on behalf of application . Proxy can call a callback function of application with the results of the request. In one embodiment proxy maintains and monitors the callback function of client application loaded in browser .

In browser proxy makes a connection across the domains when the connection is needed and otherwise there could be no persistent connection across the domains. Proxy and client application can be served from respective servers and executed locally on client which reduces load on parent server because processes do not need to execute on parent server until the request is made via proxy . In one embodiment application provides security credentials to proxy so the application is trusted and only once the application is trusted does the proxy forward requests across domains. Thus a cross domain connection is made with security credentials provided by application . The security credentials and configuration to make requests to proxy can be configured into application at development.

In one embodiment the providing of application within browser and the use of cross domain proxying allows interactions between application and parent server to be asynchronous. Application can make a request via proxy which then makes a request on parent server . The call from application can be asynchronous as well as the request from proxy to parent server . Thus no persistent connection is needed and the reliability of interaction between application and parent server can be improved by using proxy .

Browser is any type of web browser that allows access to network content. Browser is typically controlled through the use of URL uniform resource locators which indicate a specific network location from which browser accesses remote content. Browser can include one or more tabs which provide individual instances of network access to different network locations e.g. different URLs . One or more other tabs could also provide access to a page that is separated into frames to allow content from multiple different locations to be accessed and viewed in a single window. Tools represent tools provided by browser and are arbitrarily placed in system . The location of the graphic representations of tools can be anywhere within the browser. Tools provide functions for a user to navigate one or more networks and or access content via browser .

Browser provides frame within primary page . Frame is a client frame and could be for example an inline frame iFrame . A frame is a container for code to execute within other code or for content to be accessed and displayed within other content. An iFrame can be implemented for example as JavaScript executing within a parent site or primary page or as HTML hypertext markup language code within the primary page. Frame enables browser to concurrently display content from multiple different sources in a single window or page. Frame allows execution of application from one domain within a window primary page of content from a separate domain.

Client application provides content from a client server not shown and has a different domain than primary page . Application includes one or more functions which allows a user to interact with content and or services provided by the client server. Function represents any functional element of the application. When a user interacts with functions application can make calls back to its domain to access e.g. read and or modify data. In one embodiment one or more functions generate requests for data from database which has a different domain than application . Namely database has a domain associated with primary page .

Under traditional operation the same origin policy of browser prevents application from making a request to database since they have different domains. In one embodiment application includes parent interface which allows the application to make requests to the database via an in browser proxy. The proxy is or includes parent service which can interface directly with database . Parent service forwards request to database and receives results in response to the request. Request represents any type of database query and or request for data and or services. Parent interface represents code for an interface embedded within application . Through parent interface application can provide cross domain requests to parent service which can then make the request on database on behalf of the application. In one embodiment 

In one embodiment parent interface is a JavaScript process or file that executes when one or more functions generates a request for data outside of the client s domain. In one embodiment parent interface executes in the background with respect to application within frame . In one embodiment parent service can be a parent JavaScript process or file executing in the background of browser . Parent interface can be configured specifically to make a call to parent service . Thus in one embodiment application can make a request from one JavaScript process in the application to a JavaScript in the proxy to allow the proxy to forward the request on behalf of the application. In one embodiment parent interface makes an Ajax request to the parent frame e.g. the frame of primary page where parent service can receive the request . In one embodiment the request is an XML HTTP request.

In one embodiment parent interface includes security information in its request to parent service which can enable parent service to make a request within authorization of the client to database . For example certain clients can have access to specific data and or services from database . Certain data stored in database can be associated with particular clients and require security credentials to be accessed. Thus parent service can provide the client s security credentials. Parent service could also receive different security credentials from different clients e.g. via different client applications not shown and simply provide a request with the appropriate credentials for whichever client accesses the proxy.

In one embodiment a developer registers application with the parent domain of database . Thus the database can recognize the security or authorization credentials of the application when the application makes cross domain requests. In one embodiment the authorization credentials include an OAUTH which identifies application its network location or URL and its security key s .

Parent frame provides content accessed from parent domain . Thus parent frame is considered to belong to or have or be associated with parent domain . Parent domain is a source of content including resources . Domain server represents one or more processes that execute under a browser that provides parent frame . Domain server can execute in the background with respect to the content of parent frame in that its execution does not necessarily produce any visible or obvious element within parent frame to indicate to a user that the process es are executing. Domain server provides mechanisms on the client device side to access the content of parent domain in parent frame .

Client frame executes within parent frame . Client frame can execute as a separate application or a container within parent frame for content external to parent domain . More particularly client frame executes application which accesses content from client domain . Thus the browser of system includes a mashup of parent domain content and client domain content.

In one embodiment client frame executes parent SDK software development kit to provide interface resources to application . As is understood a software development kit provides tools to perform certain functions when integrated into an application. Thus with tools from parent SDK integrated into application application can access one or more resources of parent domain even though it is across domains. Thus while parent SDK is illustrated as a separate block it will be understood that the parent SDK executes as elements of the SDK run as processes under application . In one embodiment parent SDK provides an API to make request for resources e.g. such as XHR calls . In such an implementation the API forwards the requests to the parent frame and the parent frame will submit the request on behalf of the application in the client frame. When the request is complete the parent frame can call the application s callback function with the results.

The interaction among the elements of system can occur as follows. In one embodiment parent frame registers for asynchronous requests from client frame and specifically from application within the client frame. In one embodiment the client also registers for asynchronous requests from the parent frame. It will be understood that registering refers to providing an identifier and or other indication that allows the registering entity to be monitored by the entity with which it registers. Thus parent frame registering with client frame for asynchronous requests refers to parent frame providing an identifier or handle or call to client frame which the client frame stores. When the client frame has asynchronous requests to make it retrieves the registration information and makes the request to parent frame . Similarly client frame registering for asynchronous requests from parent frame refers to the client frame providing information for parent frame to store for use in identifying asynchronous requests from the client frame. Registering allows the registering entity to be identified.

In one embodiment client frame via application makes an asynchronous XHR request using one or more SDK libraries associated with parent SDK . In one embodiment the client makes the request with a security token. Parent SDK proxies the request the parent frame and keeps track of a callback for application . Parent SDK proxies the request to domain server which is configured to makes requests on parent domain . Thus in response to receiving the request from application domain server can invoke the XHR against parent domain . Parent domain receives and processes the request and provides a result. In one embodiment parent frame receives the asynchronous callback for the client frame. Parent frame invokes the callback registered with it during the registration process. Thus based on registration the proxy can hold a callback for the application which allows it to provide the results to the application by invoking the callback.

In one embodiment the developer updates the application with a key or secret which a client organization associated with the client application uses to access the parent domain. Thus the client organization is a client of the server and or database of the parent domain and develops a client application to work in browser which the client would like to be able to access the parent domain. The developer configures the application with the key or secret or other security information that will allow the application to provide proper authorization information to access the parent under the client organization s client account. In one embodiment the developer publishes the application for installation . The publishing of the application allows a user who accesses the parent domain to see the application as a resource available for execution when accessing the parent domain. In one embodiment only a user associated with the same client account will be able to access the client application registered under the client account.

The user interacts with the primary page of the parent domain and generates a request to execute the application. The client server can then provide the application code which the user browser then installs within a hosted space for the client under the parent domain. The hosted space refers to a frame within the browser to execute the application hosted by the client domain or the client server. The frame allows the client application as content separate from the parent domain to execute within the same browser providing access to the parent domain under the primary site of the parent domain. In one embodiment installing the application includes setting application properties . The application properties can include parameters set by the user and or conditions imposed on functionality of the application based on an authorization of the specific user. In one embodiment installing the application includes registering the application with the parent domain to indicate it is executing. Thus the user executes the application under the parent domain . The execution of the application includes execution of a parent domain interface that allows the application to be registered with the parent frame and communicate with a proxy executing in the parent frame.

While the application is executing a user interacts with the application including interacting with functional elements of the application. The functional elements of the application allow the user to perform operations with the application. One or more operations that a user performs in the application cause the application to generate a request for one or more resources of the parent domain . For example if the parent domain is or includes a database system the application can generate a request for data stored in the database. The application is configured to generate such a request to a proxy that provides cross domain access for authorized requests. Thus the application invokes the cross domain proxy with the request .

The proxy can determine if the client application is authorized to make the request . If the client is not authorized NO branch the request fails . The application can be configured to present an error or indication if a request fails. If the client is authorized YES branch the proxy sends the request to the parent domain . The proxy sending the request to the parent domain allows the request to be made against the parent domain even though the request originated in the client domain. In one embodiment the parent domain checks for authorization of the request. In one embodiment the proxy does not check for authorization of the request but the parent domain does. In one embodiment the proxy sends the client credentials for the parent domain to authenticate the client.

In one embodiment the proxy makes an asynchronous request to the database which responds with an asynchronous callback . Thus the parent frame receives the asynchronous callback from the parent domain and can invoke the client callback . The parent frame provides the results to the client frame which can then execute the parent resource in the client application .

MTS provides on demand database services for environment . An on demand database service such provided by MTS is a database system that is made available to an outside user as needed by the user e.g. on the demand of the user . Thus a user does not necessarily need to be concerned with building and or maintaining the database system and rather can simply store and access data as needed from a remotely operated database system.

In one embodiment MTS stores information from one or more tenants into tables of a common database image or multitenant database MTDB . Accordingly MTS provides on demand database service. A database image may include one or more database objects. A multitenant database stores data for various different tenants or organizations in a single database instance. Resources such as memory processing space processing hardware and other resources of the database system are shared or allocated among the different tenants.

Multitenant database includes tenant data . . . . The tenant data may be divided into different storage areas which can be a physical and or a logical arrangement of data. In one embodiment multitenant database is accessed via a relational database management system RDBMS or the equivalent which executes storage and retrieval of information against the database object s . In one embodiment multitenant database is accessed via an object oriented database management system OODBMS or the equivalent. In one embodiment multitenant database is accessed via an object relational database management system ORDBMS or the equivalent. It will be understood that an RDBMS manages data stored in the database based on a relational model where data and data relationships are stored in tables. An OODBMS includes at least some integration of a database with an object oriented programming language and data is stored in the database in the same mode of representation as is provided in the programming language. An ORDBMS implements both a relational model and an object oriented model storing data in tables and allowing representation of data consistent with a programming language.

Application platform represents a framework that allows applications of MTS to execute. Thus application platform includes the software components such as an operating system to allow execution of the applications. Hardware platform provides hardware resources to enable the applications to execute on application platform as well as enabling execution of management or control logic for MTS . In one embodiment application platform of MTS enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via network or third party application developers accessing the on demand database service via network .

MTS represents any type of system that may provide on demand database service. In addition to application platform and hardware platform which includes processor resources and memory resources MTS may include other components. MTS includes network interface to enable user devices to access MTS over network . In one embodiment MTS includes system data program code and process space . System data represents data specific to the running of MTS rather than being tenant data. It is logically separated from the tenant storage and may be physically separated e.g. by designating storage areas or address ranges for system data . Program code represents code to implement various functions of MTS which enable the system to provide on demand database service. Process space represents a framework for executing MTS processes and tenant specific processes such as running applications as part of an application hosting service. It will be understood that MTS may include more or fewer components than what is illustrated.

As mentioned above environment includes organizations and which represent tenants of MTS . Each organization may include one or more individual and may be an individual or small company up to a large corporation or organization. Thus it will be understood that the number of user devices associated with each organization could potentially be hundreds or even thousands. Each organization is assigned a tenant identifier ID within MTS . Each tenant ID could have certain associated properties for use depending on how the organization is configured. User device is associated with organization and access MTS under the tenant ID of organization . Similarly user devices and are associated with organization and access MTS under the tenants ID assigned to organization .

User devices and may be any machine or system that is used by a user to access a database user system. For example any of the user devices can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. Each user device can be provided with an on demand database service from MTS via network .

Within an organization users may be further given access privileges and or restrictions as illustrated by data filter . As illustrated user device may access MTS in accordance with whatever access is available to organization while user device has additional restrictions applied by data filter . In one embodiment data filter may additionally or alternatively provide specific user interface features for user in accessing data from MTS .

The users of user devices and may differ in their respective capacities and the capacity of a particular user device might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user device to interact with MTS that user device has the capacities assigned to that salesperson. However an administrator using the same user device may have different capacities assigned to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level. Such enforcement could occur based on data filter which can filter per device and or could filter for the entire organization e.g. a central filter as opposed to distributed filtering .

Network represents any network or combination of networks. A network is generically an interconnection of devices that communicate with each other. Network can be or include any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. TCP IP Transfer Control Protocol and Internet Protocol networks are commonly used such as the global internetwork of networks often referred to as the Internet. Reference to specific networks in certain examples herein is meant only to provide examples and is not limiting.

In one embodiment user devices and other user devices not shown communicate with MTS over network using TCP IP and at a higher network level use other common protocols to communicate such as HTTP HyperText Transfer Protocol FTP File Transfer Protocol AFS Andrew File System a distributed network filesystem using trusted servers WAP Wireless Access Protocol . In an example where HTTP is used user device might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at MTS not specifically shown but which could be executed on hardware platform . Such an HTTP server might be implemented as the sole network interface between MTS and network but other techniques might be used as well or instead. In one embodiment the interface between MTS and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to data in MTS however other alternative configurations may be used instead.

In one embodiment MTS implements a web based customer relationship management CRM system. For example in one embodiment MTS includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user devices e.g. and to store to and retrieve from a database system related data objects and webpage content. With a multitenant system data for multiple tenants may be stored in the same physical database object however tenant data is typically arranged so that data of one tenant is kept logically separate from that of other tenants. The logical separation prevents one tenant from having access to another tenant s data. An express sharing of data among tenants is possible which removes the logical separation. In one embodiment MTS implements applications other than or in addition to a CRM application. For example MTS may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in process space of MTS .

In one embodiment MTS is configured to provide webpages forms applications data and media content to user client device to support the access by user devices as tenants of MTS . In one embodiment MTS provides security mechanisms to keep each tenant s data separate unless the data is shared. More than one MTS may be used. If more than one MTS is used the multiple systems may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B .

As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server refers to a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS RDBMS ORDBMS as is known in the art. It will be understood that server system and server are often used interchangeably herein. Similarly a database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies and might include a distributed database or storage network and associated processing intelligence or logic.

In one embodiment MTS is a parent domain for a client application not specifically shown executing on a user device e.g. . The client application executes within a frame subordinate to a frame that provides access to MTS . The client frame is of a different domain and can thus provide the application. One or more processes executing in MTS can receive asynchronous cross domain requests made via an in browser proxy of a browser in the user device.

Environment may include conventional well known elements that are explained only briefly here. For example user device and any other user devices through which users access MTS could include a desktop personal computer workstation laptop handheld device cell phone or smart phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection.

User device includes processor which represents one or more processor devices and may be any combination of one or more processors. Processor provides hardware means to execute programs and applications on user device . Memory represents a memory system for user device and may be any combination of one or more memory devices short term and or long term memory. I O input output represents any type of input and output devices such as keyboards pointers and controllers touchscreens buttons microphones or other input mechanisms and monitors screens printers interfaces to networks and or other output devices.

User device includes network interface which represents hardware interconnections and control logic and circuitry to enable user device to connect to network . Network interface also has associated drivers and possibly other software components to allow user programs to interface with the interconnection hardware. User device includes client which represents a program that allows a user of user device to access information from network such as accessing MTS . UI represents a user interface component of client or a user interface in which information from client is presented on user device . Thus UI may be integrated with client or it may be separate from client but display data related to the execution of client . UI is rendered on display or user interface hardware or device which can be understood to be represented by UI .

In one embodiment user device runs an HTTP client as client . An HTTP client may be for example a browsing program or a browser which may include a WAP enabled browser in the case of a cell phone PDA or other wireless device. The HTTP client allows a user e.g. subscriber of MTS of user device to access process and view information pages and applications available from MTS over network based on permissions and privileges. The user interface device of user device can be used to access data and applications hosted by MTS and to perform searches on stored data and otherwise allow a user to interact with various GUI graphical user interface pages that may be presented to a user.

Similar to what is discussed above with reference to network of environment network represents any network or group of networks over which access can be provided to MTS . Network may include switching and or routing elements cables connectors and other components. In one embodiment at least part of network is the Internet referring to a specific global internetwork of networks. However it should be understood that other networks can be used in addition to or instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or other network.

In one embodiment user devices such as user device which may be client systems communicate with application server to request and update system level and tenant level data from MTS that may require sending one or more queries to tenant data storage in database instance and or system data in system database . In one embodiment MTS e.g. application server automatically generates one or more SQL statements e.g. one or more SQL queries designed to access the desired information. System data storage in system database may generate query plans to access the requested data from database instance .

In one embodiment MTS includes one or more application servers . From one perspective application server can be considered a network interface of MTS to connect to network . Application server exchanges i.e. receives and or transmits data with network such as receiving requests and sending replies or sending data. Application servers may share hardware resources for interfacing with network or they may be assigned separate resources. In one embodiment one or more of application servers can be implemented as an HTTP application server.

In one embodiment each application server is configured to handle requests for any user associated with any organization that is a tenant. Thus a request from user device could be received and processed at any application server . There may be advantages to avoiding affinity for a user and or an organization or tenant to a specific application server such as the ability to add and remove application servers from a server pool at any time for any reason as well as for workload balancing among the servers. In an implementation where user and or tenant affinity is used an application server could not be removed without completing its jobs and or handing off users to another server.

In one embodiment an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between application servers and the user devices to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner MTS is multitenant wherein MTS handles storage of and access to different objects data and applications across disparate users and organizations. In one embodiment 

Each application server includes elements to provide database access service and request processing. Application server includes API application programming interface and UI . UI represents server side components that provide user interface elements that are provided to user device for display. API provides an interface for users and or developers to access resident processes of MTS .

In one embodiment application server includes application appl platform which provides a sub environment on which applications hosted by application server can be executed. Application platform may include an operating system or other control logic as well as business logic and common routines for use by the applications. As illustrated application platform includes application setup mechanism that supports creation and management of applications including configuration by application developers which may be saved as metadata into tenant data storage of database db instance . Save routines represent the mechanisms used to store data in database instance such as storing the application setup metadata. Such applications can be executed by subscriber users for example in process space .

In one embodiment invocations to or related to such applications may be coded using PL SOQL Procedural Language Salesforce Object Query Language that provides a programming language style interface extension to API . Thus PL SOQL is capable of serving as a procedural extension to an on demand database centric service API that allows flow control and transaction control to execute on a server in conjunction with database APIs e.g. SOQL data manipulation language DML or others . PL SOQL can enable the capability to thread together multiple SOQL DML statements as a single unit of work on the server. PL SOQL need not necessarily be considered a general purpose programming language seeing that it may be implemented as heavily data focused but is not necessarily implemented that way. In one embodiment PL SOQL can be used by developers to interlace with an on demand database system in contrast to traditional application developers conventional tools such as PL SQL Structured Query Language of ORACLE Inc. of Redwood Shores Calif. and others.

In one embodiment PL SOQL includes variable and expression syntax block and conditional syntax loop syntax object and array notation pass by reference and other syntax known to other programming languages. Thus full control over syntax and the ability to reference dynamic schema elements is provided with a new language and runtime for database services. Where embedded concepts that interface with on demand database applications are provided syntax and semantics that are easy to understand and which encourage efficient use of database APIs may also be employed. In one embodiment PL SOQL is implemented as a strong typed language with direct non quoted references to schema objects such as Object and Field names both standard and custom .

More details about PL SOQL language embodiments is discussed in commonly owned U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIs TO EXECUTE IN CONJUNCTION WITH DATABASE APIs by Craig Weissman filed Oct. 4 2006 now expired which is incorporated in its entirety.

In one embodiment invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine. Metadata provides data related to access and or use of data stored in database instance . In one embodiment metadata is stored in a separate table within database instance and in an alternative embodiment metadata is stored with other data elements of user storage such as with user storage of table .

In one embodiment application server includes process space which may include tenant process spaces through N for some integer number N of process spaces configured in application server tenant management process space and system process space . It will be understood that process space is an abstraction to illustrate the resources allocated for execution of processes e.g. programs or applications within application server . The skilled reader recognizes that memory and processor and other hardware resources may need to be allocated as well as software resources to support the execution of a process. The processes may be executed as separate threads or may share a thread. In one embodiment the number N of tenant processes is equal to a number of subscriber tenants. In another embodiment the number N of tenant processes may be higher than the number of subscriber tenants. Tenant management process provides management of the other processes including determining when certain processes execute. System process executes operations related to functions of MTS .

Each application server may be configured to tenant data storage in database instance and the tenant data stored therein and to system data storage of system database and the system data stored therein to serve requests of user devices. As mentioned above in one embodiment tenant data is separated logically and stored in the same multitenant database. In one embodiment database instance stores data in tables through M where M is some integer number of tables. In one embodiment different tables store data of different types. Application metadata may be implemented as a separate table. Alternatively one of the tables through M could be a table that stores varying types of objects which are defined through metadata stored in the table.

In one embodiment database instance is further implemented with user storage space distinct e.g. identifiable from its associated tenant. Thus for example user data may include the tenant ID as well as an identifier specific to a user. Thus storage may represent either or both of tenant storage or user storage. For example a copy of a user s most recently used MRU items might be stored to in user storage within database instance . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to a tenant storage area of database instance . In one embodiment the tenant data and the system data as illustrated by system database are stored in separate databases.

Application servers may be communicably coupled to database systems e.g. having access to system database and tenant database instance via a different network connection. For example one application server may be coupled via a network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. The application servers may connect to the database systems via TCP IP or another transport protocol at least partially depending on the network interconnect used.

Regarding storage in database instance one tenant might be a company that employs a sales force where each salesperson uses MTS to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data and other data all applicable to that user s personal sales process e.g. storage which may be tenant storage . Thus all of the data and the applications to access view modify report transmit calculate or perform other operations can be maintained and accessed via a user device having nothing more than network access. In an example of an MTS arrangement the user can manage his or her sales efforts and cycles from any of many different user devices. For example if a salesperson is visiting a customer and the customer has a lobby with Internet access the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by MTS that are allocated at the tenant level while other data structures might be managed at the user level. Because MTS may support multiple tenants including possible competitors MTS should have security protocols that keep data applications and application use separate. Additionally because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in MTS . In addition to user specific data and tenant specific data MTS may also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In one embodiment each database instance can be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to what is described herein. It should be understood that table and object type may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields.

For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number or other information. Another table might describe a purchase order including fields for information such as customer product sale price date or other fields. In one embodiment a multitenant database has standard entity tables for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. Thus tables through M may include standard defined tables.

In one embodiment tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System teaches systems and methods for creating custom objects as well as customizing standard objects in a multitenant database system. In one embodiment for example all custom entity data rows are stored in a single multitenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

In one embodiment MTS is a parent domain for a client application executing within a browser on user device . The browser provides information from MTS and includes a frame which executes the client application from a different domain. One or more processes executing in MTS can receive asynchronous cross domain requests made via an in browser proxy in the browser on the user device.

Flow diagrams as illustrated herein provide examples of sequences of various process actions. Although shown in a particular sequence or order unless otherwise specified the order of the actions can be modified. Thus the illustrated implementations should be understood only as an example and the process can be performed in a different order and some actions may be performed in parallel. Additionally one or more actions can be omitted in various embodiments thus not all actions are required in every implementation. Other process flows are possible.

Various operations or functions are described herein which may be described or defined as software code instructions configuration and or data. The content may be directly executable object or executable form source code or difference code delta or patch code . The software content of the embodiments described herein may be provided via an article of manufacture with the content stored thereon or via a method of operating a communications interface to send data via the communications interface. A machine readable medium or computer readable medium may cause a machine to perform the functions or operations described and includes any mechanism that provides i.e. stores and or transmits information in a form accessible by a machine e.g. computing device electronic system or other device such as via recordable non recordable storage media e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices or other storage media or via transmission media e.g. optical digital electrical acoustic signals or other propagated signal . A communication interface includes any mechanism that interfaces to any of a hardwired wireless optical or other medium to communicate to another device such as a memory bus interface a processor bus interface an Internet connection a disk controller. The communication interface can be configured by providing configuration parameters and or sending signals to prepare the communication interface to provide a data signal describing the software content.

Various components described herein may be a means for performing the operations or functions described. Each component described herein includes software hardware or a combination of these. The components can be implemented as software modules hardware modules special purpose hardware e.g. application specific hardware application specific integrated circuits ASICs digital signal processors DSPs etc. embedded controllers hardwired circuitry etc.

Besides what is described herein various modifications may be made to the disclosed embodiments and implementations without departing from their scope. Therefore the illustrations and examples herein should be construed in an illustrative and not a restrictive sense.

