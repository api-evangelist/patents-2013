---

title: Searching for software applications based on application attributes
abstract: An application search system provides search results for applications based on one or more attributes of the applications. A search query is received by the application search system from a partner. The application search system retrieves a set of applications in response to the search query. In addition, the application search system receives, from one or more sources, restrictive information regarding one or more security attributes for one or more applications in the set of applications. A security value is generated for each of the one or more applications in the set of applications. The security value includes a security attribute value for each of the one or more security attributes. The application search system provides the retrieved set of applications for display at a user interface to the partner. Furthermore, each generated security value is also displayed in conjunction with the corresponding application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09372901&OS=09372901&RS=09372901
owner: Quixey, Inc.
number: 09372901
owner_city: Mountain View
owner_country: US
publication_date: 20130429
---
This application claims the benefit of U.S. Provisional Application 61 639 744 filed Apr. 27 2012 and U.S. Provisional Application 61 679 546 filed Aug. 3 2012 which are incorporated by reference in their entirety.

The disclosure generally relates to the field of application search and more particularly to the performance of application search using application attributes.

In recent years use of computers smartphones and other Internet connected devices has grown exponentially. Correspondingly the number of available applications for such devices has also grown. Today many diverse applications can be accessed on any number of different devices including but not limited to smartphones personal computers refrigerators automobiles and televisions. These diverse applications can range from business driven applications games educational applications news applications shopping applications efficiency applications messaging applications video chatting applications media streaming applications social networking applications and so much more.

The Figures FIGS. and the following description relate to preferred embodiments by way of illustration only. It should be noted that from the following discussion alternative embodiments of the structures and methods disclosed herein will be readily recognized as viable alternatives that may be employed without departing from the principles of what is claimed. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality.

One embodiment of a disclosed system method and computer readable storage medium includes providing search results identifying one or more application representations based on application attributes corresponding to the application representations. As used herein an application can be an object or entity that provides a core set of functionalities. For example an application may be a software package such as MICROSOFT OFFICE. As another example an application may be a website such as YELP. An application attribute corresponding to an application may provide information regarding one or more aspects of the application such as functional aspects developer information publisher information title information different variations or editions of the application etc. An application representation is a data structure containing one more attributes of an application and used for representing the application.

In one embodiment an application search system identifies security attributes for one or more applications. A security attribute may correspond to any suitable security related aspect of an application. For example a security attribute may indicate whether an application contains malware. Another security attribute may indicate whether an application is able to access a user s current location based on global positioning system GPS coordinates of the user s computing device. Yet another security attribute may indicate whether an application sends data in an unencrypted form.

In one aspect the security attributes for the applications are determined based on restrictive information regarding the security attributes received from one or more third party data sources. For example restrictive information for a security attribute corresponding to a particular application may be aggregated from several different and or independent sources. In one embodiment the restrictive information may be suitably processed and or combined to generate a value for each of the security attributes.

In one embodiment based on the security attributes and their associated values the application search system generates overall security values also referred to simply as security values for the one or more applications. In other cases the security values may have been inherently defined for some applications and the application search system directly uses these pre defined security values without generating them. The security values may be used to support searches for application representations performed by the application search system. In one embodiment for example the application search system generates one or more search indexes based on the security values for the applications. For example the application search system may generate an application search index that only includes a set of representations of the applications that meet a threshold security value. Thus search results generated by leveraging the application search index may only return application representations that meet the threshold security value.

In one embodiment as another example the application search system may use the generated security values to rank search results generated by the application search system. For example responsive to receiving a search query the application search system identifies a set of application representations determined to be relevant to the search query. Thereafter the generated security values for the applications corresponding to the set of application representations may be retrieved. The application search system may then rank the application representations in the set based at least in part on the retrieved security values. In one embodiment the application search system may remove from the search results any application representation associated with a security value that does not meet a certain security threshold value.

In one embodiment as yet another example the application search system may include security values in the search results provided to a partner e.g. an end user or a third party service associated with an end user . For instance responsive to a search query the application search system may provide a set of search results. Each result may indicate an application representation determined to be relevant to the search query and a security value corresponding to the application representation. The search result including the security value may be provided to a partner for display. In some instances a partner may further process the search result based on the included security value.

It will be appreciated that while the present disclosure describes application search performed based on security attributes any other suitable application attribute may be used. For example the application search system may perform searches using one or more gaminess attributes attributes indicative of the probability that an application is a game of one or more applications.

In one embodiment the application search system may use combinations of different types of attributes from different and separate sources to generate a community of knowledge. The community of knowledge may be used to generate for example security values and or other values based on other types of attributes. For example the application search system may receive a malware score for an application from one source. The application search system may receive an indication as whether encrypts data from another source. The application search system may receive an indication as to whether an application accesses the contact information of a user from yet another source. The data from the three sources may constitute a community of knowledge that is usable for generating a security value for the application.

In one embodiment the application search system may analyze the change in security values and or security attribute values over time for various applications. For instance the application search system may determine the rate at which the security value of a particular application has changed over the last month. Based on identified patterns from the analysis the application search system may generate predictions regarding the security values and or security attribute values for the applications in the future. For example based on a rate of decline in the security value of an application over a two month period the application search system may project by assuming that a similar rate of decline will continue the security value of the application one month in the future. Such information can be used to influence application searches e.g. the application search system may automatically remove a corresponding application representation from search results if it is likely the security value for the application will fall below a threshold value within a predefined time period in the future sending an indicator to a developer of the application that the security value of the application is falling etc. In one embodiment the analysis of the security value of an application may be electronically or otherwise exchanged for other information and or services. For instance responsive to providing analysis of a security value of an application the application search system may receive additional application related data from the developer or other entity associated with the application.

Some embodiments of the application search system have different and or other modules than the ones described herein. Similarly the functions can be distributed among the modules in accordance with other embodiments in a different manner than is described here. Likewise the functions can be performed by other entities.

The network enables communications between the various entities of the environment . In one embodiment the network uses standard communications technologies and or protocols. Thus the network can include links using technologies such as Ethernet Wireless Fidelity WiFi e.g. 802.11 worldwide interoperability for microwave access WiMAX 3G Long Term Evolution LTE digital subscriber line DSL asynchronous transfer mode ATM InfiniBand PCI Express Advanced Switching etc. Similarly the networking protocols used on the network can include multiprotocol label switching MPLS the transmission control protocol Internet protocol TCP IP the User Datagram Protocol UDP the hypertext transport protocol HTTP the simple mail transfer protocol SMTP the file transfer protocol FTP etc. The data exchanged over the network can be represented using technologies and or formats including the hypertext markup language HTML the extensible markup language XML etc. In addition all or some of links can be encrypted using conventional encryption technologies such as secure sockets layer SSL transport layer security TLS virtual private networks VPNs Internet Protocol security IPsec etc. In another embodiment the entities can use custom and or dedicated data communications technologies instead of or in addition to the ones described above. Depending upon the embodiment the network can also include links to other networks such as the Internet.

The data sources provide data regarding one or more applications to the application search system . The data sources may include any suitable data providers including operators of application stores application developers application catalogs websites e.g. blogs application review sites user feedbacks etc. and or the like. Alternately the data sources may include data that is generated by the application search system such as system scan results on particular applications. For example the application search system may scan an application to determine whether it contains any malware and or virus. In some cases the data sources may supply restrictive information regarding one or more security attributes for one or more applications. For example the restrictive information may include details about whether an application contains malware. The restrictive information may also include details about whether an application can access a user s location. The restrictive information may also include information indicating the amount of time the user has used an application whether the application downloads contact information of the user whether the application accesses contacts associated with the user etc. In one embodiment each data source may have its own distinct interface content update rate etc.

The partners provide search queries to the application search system and receive search results based on the queries. As used herein a partner may be a third party entity e.g. a service company or other organization or an end user that leverages the search functionality of the application search system . In some instances a partner may be a third party entity that leverages the search functionality of the application search system via its own website or portal. For example a partner may display an application search bar on its website. The partner s end users for ease of understanding also referred to herein as partners may interact with the search bar to send search queries to the system. In other instances a partner may be an end user that directly interfaces with a website or portal provided by the application search system .

The application search system performs searches for application representations. In one aspect the application search system matches search queries to application representations based on inferred or derived functional capabilities of the search queries and applications corresponding to the application representations rather than only on explicit matches of the keywords associated with the search queries and applications corresponding to the application representations. In another aspect the application search system determines one or more characteristics of a search query which may include platform requirements e.g. an application that runs on a mobile phone with an Android operating system performance requirements e.g. an application with a good battery life but needs a large bandwidth for uploading downloading usability requirements e.g. an application that is friendly to people with disabilities and or the like. The application search system then searches for application representations based on matching between the determined one or more features of the search query and the corresponding features of application representations. In one aspect the application search system searches for application representations based on the security attributes of applications corresponding to the application representations. As shown in the application search system includes a data processing module and an application search module .

The intake module receives data from one or more of the data sources . The data may be later used to support application search. In one embodiment the data received from the data sources may include restrictive information regarding security attributes for one or more applications. As used herein the restrictive information may refer to a set of structured data feeds wherein each structured data feed is associated with a single security attribute for one application. In one embodiment some of the data received from the data sources may include information regarding the functionalities of the one or more applications.

The indexing module generates one or more search indexes usable for supporting application search. In order to generate the indexes the indexing module identifies applications from the data received by the intake module . The indexing module additionally extracts attributes for the identified applications. In some cases the extracted attributes may relate to functional aspects of the identified applications. In other cases the extracted attributes may relate to characteristics of the identified applications including but not limited to sizes of the applications in bytes names of the applications descriptions of the applications developer information of the applications rating information of the applications etc. In yet other cases the extracted attributes may relate to security attributes of the identified applications.

In one embodiment the identified applications can be represented in application representation structures application representations . More specifically each identified application can be represented as a collection of its extracted attributes. Following generation of the representations the indexing module generates one or more search indexes. Each search index may be a data structure populated with various application representations. The search indexes may later be used to perform application searches. In one embodiment the indexing module may generate a search index using one or more security attributes for the applications extracted from the restrictive information received from the data sources .

In some cases when a new application representation is added to a search index based on one of its attributes a partner may query other attributes about the new application representation. For example a new application representation is added to a search index based on its developer reputation attribute. The application search system may further acquire other attributes of the new application representation e.g. from third party sources such as security attributes size information etc. and provide these other attributes to the partner responsive to an application programming interface API call made by the partner to the application search system .

The query processing module processes queries received from one or more partners. In one embodiment the query processing module receives an input Q from a partner. The input Q may include a search query and additional context information for the query such as platform constraint information geo location preferences partner specific information etc. Based on the input Q the query processing module generates a set of queries. In addition to constructing the set of queries the query processing module additionally generates a set of query features Fbased on the received search query. A query feature may be any suitable information related to a search query. For example a query feature may include information indicating a number of words in a search query. Other query features might include predicted concepts of the search query etc. Query features can also include information specifying the popularity or frequency of the received search query.

In one embodiment the input Q including the search query may indicate whether security attributes are to be used to influence the search results. For example the partner may specifically indicate in the input Q that security attributes be considered. In some cases the partner may select at search time whether he wants to consider security attributes. Alternatively the partner may select whether and or what security attributes should be considered at a time prior to an input Q being received. For example prior to any search a partner can specify that all searches associated with the partner s end users should have search results influenced by application security attributes. In some cases the application search system may identify a partner using information included in the input Q such as the partner s IP address language a unique identifier for the partner etc. Based on such information the application search system can automatically determine whether a search performed responsive to the input Q should be influenced by one or more security attributes. For example based on a unique code for the partner the application search system may determine that the partner previously indicated that all associated searches be influenced by one or more security attributes. Thus the application search system performs searches for application representations where the search is influenced by one or more security attributes.

After processing the query the query processing module identifies an initial set of application representations. Following identification of the initial set of application representations the query processing module determines application specific features Ffor the applications corresponding to the initial set of application representations. In one embodiment the application specific features Fassociated with each application representation in the initial set may be related to a corresponding application s various characteristics. The features may also include other data for applications represented by the application representations such as the number of times the applications were clicked or downloaded for the provided input Q the current overall popularity of the applications popularity of the applications with respect to a given partner etc. The features may additionally include spam scores security or privacy data about the applications etc. The features may further include information about the reputation of the developer and or publisher of the applications.

In one embodiment the query processing module processes the initial set of application representations in order to generate a set of ranked search results. To do so the query processing module generates a set of query result features Fthat indicate the relationships between the set of features Fassociated with the application representations in the initial set and the query features F. For example the set of features Fmay indicate the distances between terms in the search query and terms in the titles of the applications represented by the application representations.

In some embodiments the query processing module applies at least the application specific features F the query result feature F and the query features Fto a machine learned scoring model. The machine learned scoring model may score the relevance of each application representation to the search query based on the application specific features F the query result feature F and the query features F. Based on the scoring the query processing module generates a set of search results. The set of search results may include an ordering of application representations from the initial set of application representations based on the scores for the application representations. The ordering may indicate the determined relevance of the application representations to the search query. In one approach the ordering of application representations may be influenced by any generated security values.

In one embodiment the post processing module processes any search results to generate a final results list. More specifically the post processing module may obtain display related metadata for the results. As used herein display related metadata may include any information about an application to be presented to an end user partner. Displayed related metadata may include application images e.g. application screenshots application descriptions application videos etc. In one embodiment the post processing module may restrict the number of results in the list that are from a single application developer or platform. In one embodiment the search results may include the security values and or individual security attribute values for the applications.

The behavior analysis module monitors the actions of the partner that provided the query. For example the system can determine which application representations were eventually viewed or downloaded by the partner etc. Such information can be analyzed to further improve the performance of subsequent searches performed by the application search module .

A set of application representations is retrieved in response to the search query. In one embodiment the set of application representations are identified and retrieved based on the search query. For example the query processing module may automatically select one or more search indexes for retrieving the set of application representations. The query processing module then queries the selected search indexes using the search query to identify the set of application representations. Alternatively the set of application representations may be retrieved by using a modified Lucene learning algorithm. In some embodiments the query processing module may further determine application specific features Ffor the set of application representations and a set of query result features Fthat indicate the relationships between the query features Fand the application specific features F. The features F F and Fcorresponding to the application representation may then be used by a machine learned scoring model to score the relevance of each application representation to the search query. Based on the scores the set of application representations may be ranked.

In one embodiment the application search system receives from one or more data sources restrictive information regarding one or more security attributes for one or more application corresponding to the set of application representations. A security attribute for an application may refer to any security related aspect of the application. Illustratively a security attribute of an application may refer to whether the application contains malware. Malware short for malicious software is a general term used to refer to a variety of forms of hostile or intrusive software. Another security attribute of the application may refer to whether the application can access a user s location. Yet another security attribute of the application may refer to whether the application sends data in an unencrypted form.

In one embodiment the restrictive information regarding the one or more security attributes may be received from one or more third party sources in any suitable manner. For example the application search system may directly obtain restrictive information from a third party source via a data feed from the third party source. As another example a user of an application A may post his experience with application A and his comments on application A on his blog. The user may even give application A his own rating. The application search system may acquire relevant information about application A from the user s blog.

The restrictive information may be any suitable information. For instance the restrictive information may be a detailed report. The detailed report may indicate for example that an application A does not access the user s location contains 1 malware and sends data without encryption. Alternatively the restrictive information may be a single score indicating the security level of an application as determined by a particular third party source. For example a third party source may test websites for malware and spam and provide a single score for each tested website. In other cases the restrictive information may include a combination of scores and detailed reports. For example a third party data source may provide information with three distinct parts rating categories content descriptors and interactive elements. An entertainment software may be associated with a score e.g. a category label in each of the above distinct parts. In addition the entertainment software may also have rating summaries that provide detailed descriptions of the content of the software being rated.

In some cases the restrictive information is gathered based on static analysis e.g. normal application scanning for malware virus etc. In other cases the restrictive information is gathered based on dynamic analysis e.g. running the application in an emulator to track the application s software development kit calls or other suspicious activities etc. In some embodiments such static and dynamic analysis of applications may be performed by the application search system and or a suitable third party entity. In some cases the static and or dynamic analysis may be performed in real time e.g. immediately after identification of an application for a search query . In other cases the static and or dynamic analysis may be performed offline e.g. before receiving any search query . Results of the offline analysis may be saved into a system database e.g. one of the data sources in for later retrieval.

After retrieving the restrictive information the application search system generates a security value for each application corresponding to the one or more application representations in the set of application representations. In one embodiment the security value includes a security attribute value for each of the one or more security attributes. For instance an application s security value may be expressed as a weighted sum of the application s security attribute values S cA where S is the security value Ais the isecurity attribute value and cis the iweight. For example one security attribute may indicate whether an application can track a user s location and another security attribute may indicate whether an application contains malware . Other security attributes may indicate whether an application can access the user s address book whether an application can perform in application purchases whether an application can access a user s credit card information whether an application can uniquely identify a user whether an application can send receive data without encryption whether an application downloads a user s contact list whether an application is linked to a user s FACEBOOK contacts and or the like. The above list of security attributes is by no means exhaustive.

In one embodiment the weights care determined in response to the preferences of the partner and or a query wrapper associated with the search query. The query wrapper may contain additional information in addition to the actual query including but not limited to IP address language partner ID number etc. The query wrapper may be used to uniquely identify a particular partner. The preferences of a partner may be obtained from the partner s past interactions with the application search system . The preferences of a partner may be directly provided by the partner determined through an analysis performed by the behavior analysis module of past behavior of the partner etc.

For example it may be determined that a partner A is more concerned with whether an application can track the user s location based on a determination that partner A has in the past avoided downloading application having such an attribute. In contrast it may be determined that a partner B is more concerned with whether an application contains malware based on a determination that the partner B has specifically indicated that applications containing malware not appear in search results. The weights cmay then be adjusted according to each partner s preferences. For instance the security attribute indicating whether an application can track the user s location may be given more weight for partner A while the security attribute indicating whether an application contains malware may be given more weight for partner B.

In another embodiment the weights care not adjusted and the partners may have individual filters tailored to their own preferences. For example partner A s filter may emphasize the security attribute indicating whether an application can track the user s location while partner B s filter may emphasize the security attribute indicating whether an application contains malware . Each partner s filter is applied to the one or more application representations to filter application representations suited to the partner s individual preferences. In some cases a partner s filter is provided via an API call made by the partner. For instance a partner may provide a filter including an overall threshold security value. Alternately a partner s filter may include threshold values for certain security attributes. Illustratively the partner s filter may specify a high threshold value for the security attribute indicating whether an application contains malware . As a result the partner is only shown application representations with security attribute values higher than the threshold. In another approach the partner is only shown application representations with security attribute values lower than the threshold.

In one embodiment a security attribute value Ais determined based on the restrictive information regarding the corresponding security attribute. In addition the restrictive information may be obtained from one or more sources and each source may evaluate the security attribute differently e.g. each source may give a different source score . Illustratively the security attribute value Amay be expressed as a weighted sum of all the source scores A bx where xis the jsource score for the isecurity attribute and bis the corresponding weight. As an example for the security attribute indicating whether an application can track a user s location different sources such as APPTHORITY ESRB MCAFEE etc. may rate an application differently. Some may give the application a high score for the security attribute while others may give the application a low score for the security attribute. Additionally each source may use a different rating scheme. For example one source may use a five star rating system while another source may use a ten star rating system. A source score may need to be properly normalized before it can be input to the sum A bx. Essentially the security attribute value is an average source score by taking a weighted sum of all source scores. In one approach the weight for each source score is determined based on the reputation and or creditability of that source. For example a high weight may be assigned to a score coming from a credible professional rating source e.g. ESRB . In contrast a low weight may be assigned to a score given by an amateur user s feedback.

In one embodiment a source score xmay be determined using one or more methods and each method may give a method score. Illustratively the source score xmay be expressed as a weighted sum of all method scores x dm where mis the kmethod score for the jsource on the isecurity attribute and dis the corresponding weight. As an example for the security attribute indicating whether an application can track a user s location a third party source may evaluate an application using multiple methods. There are a variety of ways that an application can track a user s location. For example the application may access a global positioning system GPS to track a user s location. The application may also infer a user s location from the user s IP address. In the above example the third party source may enumerate the multiple methods that the application can use to track a user s location and give each method a method score mwith a corresponding weight dto produce a source score x. In some cases the weights dmay be determined from a machine learned model. In other cases some of the weights dmay be zero indicating that the corresponding methods are deemed unimportant.

In one embodiment the security attribute value Amay be further processed and assigned a binary value. The binary value may be determined by comparing Ato a pre determined threshold value. For example if Ais larger than or equal to the threshold value the binary value is 1 indicating that the application is secure in that security attribute. If Ais less than the threshold value the binary value is 0 indicating that the application is not secure in that security attribute. In some cases the threshold value may be determined based on the preferences of the partner providing the search query. For instance a partner A may have previously indicated or it may be inferred by the application search system based on past behavior that the partner A prefers an application that cannot track a user s location. Thus a threshold value for the security attribute indicating whether an application can track a user s location may be relatively high for the partner A. In contrast a partner B may have previously indicated or it may be inferred by the application search system based on past behavior that the partner B only wants an application that does not contain malware. The partner B may not care whether the application can track a user s location. Thus the partner B s threshold value for the security attribute indicating whether the application can track a user s location may be relatively low. As a result a particular application may meet partner B s threshold value but not partner A s threshold value reflecting the partner s different preferences.

In some embodiments the security attribute value Amay include a binary value together with a description. For example the binary value may be 0 and the corresponding description may state the application has 5 malware packages . The description may provide more information about the security attribute than a single binary value.

After generation of security values for applications corresponding to one or more application representations in the set of application representations the application search system provides 510 the set of application representations for display to the partner. In one embodiment the security value S of an application is also displayed in conjunction with the corresponding application representation. In one approach the security value may be displayed as a security indicator. For example a red indicator may correspond to a non secure application not good to use a green indicator may correspond to a secure application good to use and a yellow indicator may correspond to an application with medium level security concerns use with caution .

In some cases there may be some application representations without security values in the set of application representations. Those application representations may also be provided for display and they may be ranked based on the determined relevance of each application representation to the search query. In one example the application representations without security values are not provided for display.

In another approach the application representations with security values are ranked based on the determined relevance of each application representation to the search query in conjunction with the corresponding application representation s security value. For example an application representation with a determined high relevance together with a high security value is ranked higher than an application representation with a determined high relevance but with a low security value. As a specific example of ranking one or more feature vectors for one or more application representations in the set may be generated. Each feature vector may include a set of features for a corresponding application representation where each feature is generated from one or more application attributes included in the application representation. In one aspect the security value corresponding to each application representation may be used as a feature in a feature vector corresponding to the application representation. After generating the feature vectors for the application representations the feature vectors may be input into a machine learned scoring model to generate scores for the application representations. The scores may be used to rank the application representations.

In yet another approach the application representations security values are compared to a threshold value and those application representations that have lower than threshold security values are not provided for display. For example if the threshold value is determined to be 0.5 then any application representation with a security value less than 0.5 will not be provided for display. Each displayed application representation will have a security value higher than or equal to 0.5. The threshold value may be selected by a partner either prior to any search or at search time. Alternatively the threshold value may be determined by the application search system based on the partner s past interactions with the application search system . For instance if a partner has consistently avoided downloading applications with low security values the application search system may automatically determine to increase the threshold value for the particular partner. The threshold value for a partner may also be dynamically adjusted based on the partner s feedback. For example an initial threshold value may be pre selected for a partner and the threshold value can be dynamically increased or decreased based on the partner s request.

In one embodiment the intake module receives information including restrictive information regarding a plurality of applications from one or more data sources . The indexing module identifies one or more applications from the information. In some approaches not all of the plurality of applications is identified. For example some applications within the plurality of applications may have too little information for indexing purposes so these applications are unidentified by the indexing module .

The indexing module further extracts one or more security attributes for the identified applications. Such security attributes may indicate whether an application can track a user s location whether an application has malware whether an application sends receives data without encryption and so on. In some approaches the identified applications can be represented in application representation structures and each identified application may be represented in part as a collection of its extracted security attributes.

Following generation of the representations the indexing module generates one or more search indexes based on the extracted security attributes for the identified applications. Each search index may be data structures populated with the representations of the applications. Different kinds of search indexes may be generated. For instance a forward search index may be generated that stores a list of security attributes for each application. An inverted search index may also be generated that stores a list of applications for each security attribute.

In one embodiment a security attribute value may be determined for each extracted security attribute of each application corresponding to each application representation based on the received restrictive information. The security attribute values may be included in the generated search indexes. For example a list of application representations for a security attribute in an inverted search index may be ranked according to each application representation s associated security attribute value for that security attribute. Determination of the security attribute value associated with an application representation based on restrictive information can be performed in a manner similar to the determination of security attribute values described with respect to the process shown in .

In one embodiment the security attribute values for a particular security attribute of the one or more application representations may be compared to a threshold value. In some cases threshold values for different security attributes may be different. A set of application representations is identified wherein each application representation in the set of application representations has at least one security attribute value less than the security attribute s corresponding threshold. The set of application representations is then removed from the one or more application representations. The search indexes are generated from the remaining application representations in the one or more application representations. Each application representation in the remaining application representations has above threshold security attribute values for all extracted security attributes. Thus the search results identified using the search indexes may only include application representations that have above threshold security attribute values.

After security based search indexes are generated as illustrated above they can be used to enhance a partner s search results. In one embodiment a search query from a partner is received by the application search system . As discussed a determination may be made by the application search system that the partner is interested in searching for applications with high security standards. The search is then performed using the security based search indexes instead of normal search indexes that are not generated based on security attributes. The resulting list of application representations is more likely to be of use to the partner.

The embodiments described herein beneficially allow application search systems to provide higher quality search results. More specifically by analyzing security attributes of applications embodiments can generate search results that are more relevant for various partner contexts. In doing so partners can more quickly and efficiently locate useful applications that meet their needs.

The machine may be a server computer a client computer a personal computer PC a tablet PC a set top box STB a personal digital assistant PDA a cellular telephone a smartphone a web appliance a network router switch or bridge or any machine capable of executing instructions sequential or otherwise that specify actions to be taken by that machine. Further while only a single machine is illustrated the term machine shall also be taken to include any collection of machines that individually or jointly execute instructions to perform any one or more of the methodologies discussed herein.

The example computer system includes one or more processors e.g. a central processing unit CPU a graphics processing unit GPU a digital signal processor DSP one or more application specific integrated circuits ASICs one or more radio frequency integrated circuits RFICs or any combination of these a main memory and a static memory which are configured to communicate with each other via a bus . The computer system may further include graphics display unit e.g. a plasma display panel PDP a liquid crystal display LCD a projector or a cathode ray tube CRT . The computer system may also include an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse a trackball a joystick a motion sensor or other pointing instrument a storage unit a signal generation device e.g. a speaker and a network interface device which also are configured to communicate via the bus .

The storage unit includes a machine readable medium on which is stored instructions e.g. software embodying any one or more of the methodologies or functions described herein. The instructions e.g. software may also reside completely or at least partially within the main memory or within the processor e.g. within a processor s cache memory during execution thereof by the computer system the main memory and the processor also constituting machine readable media. The instructions e.g. software may be transmitted or received over a network via the network interface device .

While machine readable medium is shown in an example embodiment to be a single medium the term machine readable medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database or associated caches and servers able to store instructions e.g. instructions . The term machine readable medium shall also be taken to include any medium that is capable of storing instructions e.g. instructions for execution by the machine and that cause the machine to perform any one or more of the methodologies disclosed herein. The term machine readable medium includes but is not limited to data repositories in the form of solid state memories optical media and magnetic media.

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Certain embodiments are described herein as including logic or a number of components modules or mechanisms for example as illustrated in . Modules may constitute either software modules e.g. code embodied on a machine readable medium or in a transmission signal or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone client or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors e.g. processor may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a hardware module may be implemented mechanically or electronically. For example a hardware module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA an application specific integrated circuit ASIC system on a chip SoC chipset to perform certain operations. A hardware module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a hardware module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

The various operations of example methods described herein may be performed at least partially by one or more processors e.g. processor that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. application program interfaces APIs . 

The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the one or more processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the one or more processors or processor implemented modules may be distributed across a number of geographic locations.

Some portions of this specification are presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory e.g. a computer memory . These algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein an algorithm is a self consistent sequence of operations or similar processing leading to a desired result. In this context algorithms and operations involve physical manipulation of physical quantities. Typically but not necessarily such quantities may take the form of electrical magnetic or optical signals capable of being stored accessed transferred combined compared or otherwise manipulated by a machine. It is convenient at times principally for reasons of common usage to refer to such signals using words such as data content bits values elements symbols characters terms numbers numerals or the like. These words however are merely convenient labels and are to be associated with appropriate physical quantities.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. For example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the invention. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a process for generating search results based on application attributes through the disclosed principles herein. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

