---

title: Hybrid application message passing
abstract: In general, techniques for passing data from a native component to a web component of a hybrid application without reflowing the top-level document are described. The native component is located within a user space of a computing device and intercepts a request for a resource issued by the web component of the application. The native component provides access to an interface not otherwise accessible by the web component. If the request for the resource is a request for data through the interface, the native component enqueues the request in a request pool, receives the data responsive to the request through the interface, forms a response to the request using the data, dequeues the request after receiving the data, and sending, the response to the web component. If not, the native component grants permission to the web component to issue the request to a remote server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09215189&OS=09215189&RS=09215189
owner: GOOGLE INC.
number: 09215189
owner_city: Mountain View
owner_country: US
publication_date: 20131125
---
This is a continuation application of U.S. patent application Ser. No. 13 158 723 filed Jun. 13 2011 now U.S. Pat. No. 8 595 752 the content of which is incorporated herein in its entirety by reference.

The use of software frameworks to develop applications for particular environments can improve software quality and reduce development effort. In general a software framework consists of reusable common code that provides generic functionality for the environment and well defined application programming interfaces APIs . In this way a software framework improves software modularity by encapsulating implementation details of the common code behind APIs.

Many software frameworks employ self contained instances of abstract data types or components that provide off the shelf functionality to applications being developed within the software frameworks. A component is thus a black box that defines a cohesive set of operations behind an API. Components may be reused and adapted by developers to create new applications without having to understand the internal structure and operations of the component. Examples of commercially available software frameworks include Cocoa available from Apple Inc. the .NET application framework and Microsoft Foundation Classes MFC available from Microsoft Corp. and Common Object Request Broker Architecture CORBA available from Object Management Group. Component examples include Cocoa components ASP.NET controls ActiveX or VBX controls.

In general techniques for passing data from a native component of an application to a web component of the application are described. The techniques may be useful for application frameworks that provide for embedding web content into an application using a web component. In such applications the web component typically executes application logic for the application in response to user interaction with the web component graphical user interface.

This disclosure describes techniques for responding to an open application layer request maintained by a web component to send messages from a native component that intercepts the application layer request to the web component. In one example a web component of an application loads a main document that includes at least two separate frames that each causes the web component to issue a respective application layer request that specifies a uniform resource identifier URI . At least one of the frames causes the web component to issue an application layer request that specifies a special native request URI.

A native component of the application monitors application layer requests issued by the web component of the application and snoops the URIs specified therein. When the native component identifies an application layer request that specifies a special native request URI the native component stores a reference to the open application layer request. Subsequently the native component may pass a message to the web component by responding to the application layer request. The message may include data for use by the web component. The message may alternatively or additionally include a script that causes the web component to perform some functionality when received responsive to the application layer request.

The disclosure also describes a method including intercepting with a native component a request for a resource issued by a web component of an application executing on a computing device having a user space and a kernel space within a software stack the native component located within the user space and providing access to an interface of the computing device that is not accessible by the web component and determining with the native component whether the request for the resource is a request for data through the interface of the computing device. The method also includes in response to a condition where the request for the resource is a request for data through the interface of the computing device 1 enqueuing in a request pool of the native component the request 2 receiving with the native component the data responsive to the request through the interface 3 forming with the native component a response to the request using the data 4 dequeueing from the request pool of the native component the request after receiving the data and 5 sending to the web component the response. The method also includes in response to a condition where the request for the resource is other than a request for data through the interface of the computing device granting with the native component permission to the web component to issue the request to a remote server external of the computing device.

The techniques of this disclosure may potentially provide one or more advantages. For example a native component of an application may provide access to device capabilities that are not directly available to the web component due e.g. to security modularity and functional scope limitations. In some instances the application framework for the application or the restricted interface of the web component itself also limits the ability of native components of the application to pass data to the web component without altering the web content loaded into the web component. The techniques may enable the native component to provide data to and improve control over the operation of the web component without altering the main document loaded into the web component. As a result the web component may receive messages from the native component and yet avoid re rendering or reflowing the main document which may increase message passing speed and improve a user experience.

In one embodiment the disclosure is directed to a method comprising issuing an application layer request with a web component of an application executing on a computing device wherein the web component comprises an abstract data type instantiated within a native component of the application wherein the native component provides access to interfaces of the computing device that are not accessible by the web component. The method also comprises intercepting the application layer request with the native component and issuing with the native component an application layer response to the application layer request.

In another embodiment the disclosure is directed to a computing device comprising a processor that executes instructions stored by a computer readable medium to provide a run time environment for an application. The computing device also comprises a native component of the application and a web component of the application wherein the web component is an abstract data type instantiated within the native component wherein the native component provides access to interfaces of the computing device that are not accessible by the web component. The computing device also comprises an HTTP interface of the web component that issues an application layer request and means for intercepting the application layer request with the native component and issuing an application layer response to the application layer request.

In another embodiment the disclosure is directed to a computer readable medium comprising instructions that when executed perform operations comprising issuing an application layer request with a web component of an application executing on a computing device wherein the web component comprises an abstract data type instantiated within a native component of the application wherein the native component provides access to interfaces of the computing device that are not accessible by the web component. The instructions when executed also perform the operations of intercepting the application layer request with the native component and issuing with the native component an application layer response to the application layer request.

The details of one or more embodiments of the disclosure are set forth in the accompanying drawings and the description below. Other features objects and advantages of the disclosure will be apparent from the description and drawings and from the claims.

Hardware environment of system comprises central processing unit CPU main memory non volatile storage user interface UI and network interface interconnected via system bus . System bus may comprise one or more auxiliary busses each operating according to one or more bus protocols. UI comprises peripherals to enable interaction between system and a user and or service. For example UI may include a display a mouse a touch screen a keyboard speakers a microphone a global positioning system GPS receiver a camera one or more accelerometers and or other peripherals. Network interface is a wireless or wired interface by which system exchanges data with other networked devices.

CPU executes program instructions loaded into main memory from storage in order to operate software stack . CPU may comprise one or more general or special purpose processors such as a microprocessor digital signal processor DSP an application specific integrated circuit ASIC a field programmable gate array FPGA or any other equivalent logic device or combination of such devices. Accordingly the terms processor or controller as used herein may refer to any one or more of the foregoing structures or any other structure suitable for implementation of the techniques described herein.

Storage comprises non transitory tangible computer readable media such as computer readable storage media that includes volatile and or non volatile removable and or non removable media implemented in any method or technology for storage of information such as processor readable instructions data structures program modules or other data. Non transitory computer readable media includes but is not limited to random access memory RAM read only memory ROM EEPROM flash memory CD ROM digital versatile discs DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium or combination of such media that can be used to store the desired information and that can be accessed by other hardware components of system .

Main memory comprises one or more computer readable storage media which may include random access memory RAM such as various forms of dynamic RAM DRAM e.g. DDR2 SDRAM or static RAM SRAM flash memory or any other form of fixed or removable storage medium that can be used to carry or store desired program code and program data in the form of instructions or data structures and that can be accessed by other modules of system . In some aspects main memory is non transitory and or tangible. Main memory provides a physical address space composed of memory locations addressable by software stack .

Software stack includes user processes including hybrid application executing over a runtime environment that includes system libraries and application frameworks executing over kernel . Kernel manages hardware environment using drivers that provide an interface between components of hardware environment and run time environment . Kernel may implement in cooperation with hardware environment components a virtual memory system to extend the memory space available to software stack . Kernel manages the memory system processes threads the file system the network infrastructure and interprocess communication. In some instances kernel comprises for example a Linux or Berkeley Software Distribution BSD kernel or other Unix variant kernel.

Libraries and application frameworks provide a runtime environment that supports the execution of hybrid application . Libraries provide a set of interfaces for accessing features of kernel such as threading networking standard input output the file system memory management among others. Application frameworks include one or more application frameworks that each offers related functionality to user applications such as hybrid application . For example respective application frameworks may provide functionality related to the user interface web interfaces media operating system services primitive data types string manipulation system configuration networking motion GPS advertisement management and contact management. Some aspects of system may support virtual machines within run time environment . For example each of the user processes executing in run time environment may operate in a separate process virtual machine to insulate the user processes from one another. That is in such embodiments each of the user process operates in a separate instance of the virtual machine. Some aspects of system may implement a system virtual machine that provides a virtual architecture over hardware environment .

Each of application frameworks includes a software framework composed of at least one dynamically sharable library having reusable common code that provides generic functionality for run time environment and well defined application programming interfaces APIs . Some software frameworks of application frameworks include self contained instances of abstract data types or components that provide off the shelf functionality to user applications that inherit or otherwise make use of the software frameworks.

Hybrid application is a user application that operates over run time environment by calling methods of libraries and or instantiating components of application frameworks . Hybrid application may include native component that provides access to full functionality of run time environment by interfacing with libraries and or application frameworks .

Hybrid application also includes web component an instance of a web component provided by a software framework of one of application frameworks . The primary interface for web component may be a web based graphical user interface GUI that receives code and or data from a remote server or from native component executes application logic if any and renders a display in accordance with browser based languages such as Hyper Text Markup Language HTML JavaScript Cascading Style Sheets CSS Flash eXtensible Markup Language XML and eXtensible Stylesheet Language XSL . Web component may be a browser object embedded within native component . In some aspects hybrid application subclasses a component of one of application frameworks as web component . That is in such aspects web component includes methods properties i.e. public data and or events that override or specialize corresponding features inherited by web component from a component provided by one of application frameworks .

Web component offers a well defined API by which native component may interface with and affect the operation of web component . Native component controls web component using methods provided by the API of the web component. For example native component may direct web component to load a document specified by a Uniform Resource Identifier URI . Otherwise web component operates substantially independently from native component .

Web component may prompt native component using events for which native component has implemented an event handler in the form for example of a delegate for the event. A delegate may comprise a native component function referenced by a function pointer passed to web component that when resolved by web component enables web component to invoke the native component function on the occurrence of some associated event. In this way native component may respond to events that occur in the context of web component . Example events for web component may include events that correspond to loading of an HTML page application layer requests user initiated events i.e. clicking an HTML link of an HTML page loaded in web component and time outs. In some aspects a delegate of web component refers to native component which implements at least a portion of the delegate interface API defined for web component .

Native component interfaces with application frameworks and libraries to perform user functionality. For example native component may interface with application frameworks to receive an image taken by a camera of UI or to receive readings from an accelerometer of UI . In some instances native component may include application logic to generate data or manipulate data received by operation of application frameworks and libraries to interact with drivers or other aspects of kernel .

In accordance with the techniques of this disclosure native component intercepts application layer requests issued by web component and provides data to web component in corresponding application layer responses. Application layer requests may include Hyper Text Transfer Protocol HTTP requests File Transfer Protocol FTP requests Network News Transfer Protocol NNTP requests Real time Transfer Protocol RTP requests HTTP requests issued via XMLHttpRequest XHR and web socket messages for example. Application layer as used herein refers to layer seven of the Open System Interconnection OSI model as well as to the application layer of the TCP IP model. More information concerning the OSI model can be found in a IEEE publication entitled OSI Reference Model the ISO Model of Architecture for Open Systems Interconnection by Hubert Zimmermann published in IEEE Transactions on Communications vol. 28 no. 4 dated April 1980.

As a result native component may provide and mediate access to device capabilities that are not directly available to web component due to e.g. security modularity and functional scope limitations. In some instances the restricted interface of web component also limits the ability of native components of the application to pass data to web component without altering the web content loaded into the web component . For example some implementations of web component may offer a scripting interface method property or tag by which native component may pass a script to the web component for execution. However these implementations may trigger a re rendering or reflow by the web component of the GUI or may be limited in the size of the script that may be passed. The techniques may enable native component to provide data to and improve control over the operation of the web component without altering the main document loaded into web component . As a result web component may receive messages from native component and yet avoid reflowing the main document which may increase message passing speed and improve a user experience.

HTTP interface exchanges HTTP requests and responses with native component and remote services to obtain specified resources. HTTP interface may access libraries of run time environment such as a network protocol stack library or sockets library to perform HTTP functions.

Objects A B collectively objects embedded within main document specify a URI that causes HTTP interface of web component to issue respective HTTP requests to retrieve the specified resources. In this example object A is a visible object that upon receipt of the resource by HTTP interface in an HTTP response causes web component to render the retrieved resource to graphical user interface GUI . The retrieved resource may include for example an HTML document an image or other media or a CSS script. Accordingly each of objects may represent an object element of an HTML document that substantially conforms to HTML. Each of objects may represent for example an IFRAME IMG APPLET SCRIPT or META element or any other object for which web component requests a resource external to web component . Object B specifies a special native request URI which HTTP interface issues within an HTTP request. Object B may be a hidden object such as a hidden IFRAME that web component does not render to GUI . Object B may be dynamically generated by execution of application logic . In this way object B may be refreshed without forcing reflowing of elements of main document to GUI where reflowing refers to the process of computing the geometry of formatting objects that correspond to the geometric information for elements in the content model such as frames. In some instances application logic is distributed to objects .

The special native request URI is a particular string identifiable by HTTP inspection module . In some instances the special native request URI may be an element of a URI scheme. In a URI scheme run time environment maps a directive e.g. native to hybrid application . When run time environment identifies an application layer request conforming to the directive the run time environment passes the request to system interface for storage to request pool .

HTTP inspection module intercepts HTTP requests issued by HTTP interface of web component and analyzes the respective URIs specified therein. HTTP inspection module may be a delegate of web component or of a particular method of web component . The default response by HTTP inspection module for intercepted HTTP requests includes passing the intercepted HTTP requests to system interface for output to run time environment and output from the system to a remote service provided for instance by a remote HTTP server that is separate and distinct from system . In some instances the default response by HTTP inspection module for a particular HTTP request includes returning a Boolean or other value to HTTP interface that grants permission to the interface to proceed with issuing the HTTP request to the remote service.

When HTTP inspection module identifies the special native request URI specified by object B within an HTTP request however HTTP inspection module cancels the default response and instead stores a reference to the HTTP request in request pool . An HTTP request is an application layer message. Request pool includes a data structure such as a queue or list to store one or more HTTP requests previously issued by HTTP interface . Request pool may store pointers to HTTP request structures e.g. strings in system memory. Alternatively request pool may store the HTTP request structures. HTTP inspection module may associate open HTTP requests in request pool with a receipt time to allow the HTTP inspection module to flush expired HTTP requests. In this way native component maintains a request pool of open HTTP requests issued by HTTP interface for which HTTP interface expects an HTTP response. That is an open application layer request is a request for which the requesting entity is expecting a response.

Native component generates messages and or receives messages via system interface from run time environment that are directed to web component . For example native component may receive from run time environment messages indicating that the orientation of system has rotated providing GPS coordinates or providing image data from a photograph taken by a camera of system .

For each message system interface obtains a reference to an open HTTP request stored by request pool and encapsulates the message in a proper HTTP response generated by system interface for the HTTP request. System interface then provides the HTTP response to HTTP interface which decapsulates and passes the message to object B.

Messages within HTTP responses passed by system interface to HTTP interface may include executable instructions such as JavaScript. In these cases web component detects that object B received requested data and obtains a reference to object B. In instances where object B is an IFRAME web component may obtain a reference to the body of object B. Web component parses the received data as executable instructions and executes the instructions. The instructions may for example direct web component to update object A to include image data or GPS coordinates provided in the message. As another example the instructions may direct web component to rotate the GUI display.

After receiving the message web component reopens object B to cause HTTP interface to issue an additional HTTP request specifying the special native request URI. HTTP inspection module identifies the special native request URI and adds the HTTP request to the request pool to ensure that additional messages directed to web component may be sent in an HTTP response to an open HTTP request. Because open HTTP requests issued by HTTP interface may time out web component reopens object B after a specified time has elapsed to cause HTTP interface to issue a new HTTP request specifying the special native request URI. In addition HTTP inspection module flushes open HTTP requests stored by request pool to remove timed out requests.

In some cases system interface may receive messages having lengths that exceed allowable sizes for HTTP responses. System interface divides the message into multiple segments and sends each segment to HTTP interface in a separate HTTP response. HTTP interface reassembles the application layer data from the multiple HTTP responses received and passes the data to object B.

HTTP inspection module of native component intercepts an HTTP request issued by web component of hybrid application . Upon reading the URI specified by the HTTP request HTTP inspection module determines whether the specified URI maps to a special native request URI . HTTP inspection module passes HTTP request that specify ordinary URIs NO branch of to system interface for output to run time environment . For an HTTP request that specifies a special native request URI YES branch of HTTP inspection module enqueues the open HTTP request to request pool .

Native component receives via system interface data for web component . Such data may be received by operation of one or more peripherals such as a GPS accelerometer or camera of a device that executes hybrid application . System interface dequeues an open HTTP request from request pool and encapsulates the received data within a well formed HTTP response for the open HTTP request . In some aspects native component may manipulate the received data by embedding the data within an executable script for example and then encapsulating the manipulated data within the well formed HTTP response. System interface then sends the HTTP response to web component to pass the data to the web component as an application layer message .

Web component initially loads either autonomously or under direction from native component main document that includes objects A B that each specify a resource . As part of the load process HTTP interface issues an HTTP request for the resource specified by the first object A and receives a corresponding HTTP response for the first object A . Web component renders the first object A using application layer data received in the corresponding HTTP response .

As an additional part of the load process HTTP interface issues an HTTP request for the resource specified by the second object B . The specified resource is a special native request URI. If HTTP interface does not receive a response within an expiration time for the issued HTTP request YES branch of HTTP interface issues a fresh HTTP request specifying the special native request URI . Upon receiving an HTTP response for the issued HTTP request for the second object B web component extracts the application layer message which may include an executable script . If included web component then executes the executable script and HTTP interface issues a new HTTP request for the second object B .

The techniques described herein may be implemented in hardware software firmware or any combination thereof. Various features described as modules units or components may be implemented together in an integrated logic device or separately as discrete but interoperable logic devices or other hardware devices. In some cases various features of electronic circuitry may be implemented as one or more integrated circuit devices such as an integrated circuit chip or chipset.

If implemented in hardware this disclosure may be directed to an apparatus such a processor or an integrated circuit device such as an integrated circuit chip or chipset. Alternatively or additionally if implemented in software or firmware the techniques may be realized at least in part by a computer readable data storage medium comprising instructions that when executed cause a processor to perform one or more of the methods described above. For example the computer readable data storage medium may store such instructions for execution by a processor.

A computer readable medium may form part of a computer program product which may include packaging materials. A computer readable medium may comprise a non transitory computer data medium such as RAM ROM NVRAM EEPROM flash memory magnetic or optical data storage media and the like. The code or instructions may be software and or firmware executed by processing circuitry including one or more processors such as one or more DSPs general purpose microprocessors ASICs FPGAs or other equivalent integrated or discrete logic circuitry. Accordingly the term processor as used herein may refer to any of the foregoing structure or any other structure suitable for implementation of the techniques described herein. In addition in some aspects functionality described in this disclosure may be provided within software modules or hardware modules.

Various embodiments of the disclosure have been described. For example techniques for passing data from a native component of an application to a web component of the application without reflowing the top level document are described. In one example a web component of an application loads a main document that includes at least two separate frames that each causes the web component to issue an application layer request specifying a uniform resource identifier URI . One of the frames causes the web component to issue an application layer request that specifies a special native request URI. A native component of the application monitors application layer requests issued by the web component of the application and snoops the URIs specified therein. When the native component identifies an application layer request specifying a special native request URI the native component stores a reference to the open application layer request. Subsequently the native component may pass a message to the web component by responding to the application layer request.

The above described embodiments implementations and aspects have been described in order to allow easy understanding of the present invention and do not limit the present invention. On the contrary the invention is intended to cover various modifications and equivalent arrangements included within the scope of the appended claims which scope is to be accorded the broadest interpretation so as to encompass all such modifications and equivalent structure as is permitted under the law.

