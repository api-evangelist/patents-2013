---

title: Rapid malware inspection of mobile applications
abstract: Disclosed are various embodiments for inspecting malware with little or no user interruption. A first computing device may compare a source code of an application to a fingerprint stored locally on the first computing device. The first computing device may transmit the source code to a second computing device to determine whether the source code resides in a database comprising approved applications. If the source code does not reside in the database, a thorough scan of the source code may be conducted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336389&OS=09336389&RS=09336389
owner: Amazon Technologies, Inc.
number: 09336389
owner_city: Seattle
owner_country: US
publication_date: 20130819
---
Traditional malware and or virus detection is an intensive process that comprises comparing files and or portions of files to vast malware and or virus databases. Although the intensive malware and or virus detection may be conducted on a desktop computer mobile devices may not have the computing power and or the memory to conduct such an intensive task. Yet the number of mobile applications comprising malware continues to grow.

Malicious computing instructions also known as malware are disruptive computer instructions that may cause damage to one or more computing devices and or may obtain private information from the one or more computing devices. For example malware may comprise computer viruses Trojan horses rootkits key loggers spyware adware and or other malicious applications. Traditional malware and or virus detection is an intensive process that comprises comparing files and or portions of files to vast malware and or virus databases. For example each file of a computer may be scanned by comparing the file and or portions of the file to known malware identities in one or more databases. By having to access each file on the computer the process of detecting malware and or a virus is intensive and expensive requiring a substantial amount of computing time on a processor. Although the intensive malware and or virus detection may be conducted on a desktop computer mobile devices may not have the computing power and or the memory to conduct such an intensive task. Yet the number of mobile applications comprising malware continues to grow.

Electronic commerce systems facilitate the purchase and or download of applications and or digital content on devices. For example a user of a mobile device may access an electronic commerce system to purchase and or download applications or digital content capable of being executed or rendered on the user s mobile device. Accordingly it is beneficial to conduct a deep and thorough scan of an application and or digital content as it is placed on the electronic commerce system. According to a result of the scan it may be determined whether the application is approved or denied for installation and or execution on one or more devices. Assuming an application and or digital content was loaded on a device in a manner other than downloading the application and or digital content from an electronic commerce system a client verification application may be executed to determine whether to permit or deny installation and or execution of the application on the device.

In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown are drawings of mobile devices and e.g. smartphones configured to render client applications on a display according to various embodiments of the present disclosure. In the non limiting example of an electronic commerce system referred to as an application store may be rendered in the display of a mobile device to facilitate the purchase and or download of one or more applications that are capable of being executed on the mobile device. Similarly the electronic commerce system may offer one or more digital content items e.g. audio files video files electronic books etc. for purchase and or download.

As may be appreciated an installation of an application purchased and or downloaded from the electronic commerce system may be initiated as shown in . Before or during installation and or execution of an application the application may be checked for malware by one or more malware detection services as will be discussed in greater detail below.

Next a discussion of a computing environment is provided in which a malware detection service is implemented followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes a computing environment and a client device which are in data communication with each other via a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing environment may comprise for example a server computer or any other system providing computing capability. Alternatively the computing environment may employ a plurality of computing devices that may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include a plurality of computing devices that together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may correspond to an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time.

Various applications and or other functionality may be executed in the computing environment according to various embodiments. Also various data is stored in a data store that is accessible to the computing environment . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below. The components executed on the computing environment for example include an electronic commerce system a developer portal fingerprint services malware detection services and other applications services processes systems engines or functionality not discussed in detail herein. These components may be implemented as one or more web services capable of communication via one or more programmatic service calls e.g. Application Programming Interface API calls .

The electronic commerce system is executed in order to facilitate the online purchase of applications and or digital content over the network . The electronic commerce system also performs various backend functions associated with the online presence of a merchant in order to facilitate the online purchase of applications and or digital content as will be described. For example the electronic commerce system generates network pages such as web pages or other types of network content that are provided to client devices for the purposes of selecting applications and or digital content for purchase rental download lease or other form of consumption as will be described.

The developer portal is executed to receive one or more applications provided by users and or developers during an ingestion process. An ingestion process may comprise for example a series of user interfaces that may be presented to a user to facilitate an upload of an application associated with the user to a data store .

The fingerprint services are executed to generate one or more unique identifiers i.e. fingerprints of one or more applications. For example the fingerprint services may take data of any size and map the data to a much shorter bit string that has a high probability of being unique to the original data. Mapping may comprise for example applying one or more hash methodologies to accomplish generating a unique fingerprint. Alternatively mapping may comprise generating unique fingerprints using other known fingerprinting methodologies as may be appreciated.

The malware detection services are executed to determine whether one or more applications should be installed and or executed on one or more devices. The malware detection services may thoroughly compare application code portions of application code and or other data items to records in one or more malware databases in the computing environment as opposed to doing so on a client device . The presence of an identical portion of application code in the one or more malware databases may indicate that an application comprises a virus and or malware. Similarly the malware detection services may determine whether an application is capable of future modification. For example the malware detection services may identify the presence of scripts that may modify the application without a user of the device s knowledge. A thorough inspection of an application and or a digital content item may be conducted at a time of ingestion of the application and or may be conducted dynamically in the event an application has not been inspected.

The data stored in the data store includes for example applications approved applications denied applications application fingerprints application code malware databases user configurations return codes events notifications devices hash methodologies and potentially other data. Applications may comprise for example data that cause a computer to perform an instructed task. For example applications may comprise one or more mobile applications available for purchase on the electronic commerce system .

Approved applications may comprise for example applications that have been thoroughly inspected by the malware detection services with no identifiable malware viruses or suspect attributes being detected. Conversely denied applications may comprise for example applications that have been thoroughly inspected by the malware detection services with identifiable malware viruses or suspect attributes being detected.

Application fingerprints may comprise for example identifiers of an application that are unique to the application . For example the fingerprint services may take data of any size and map the data to a much shorter bit string that has a high probability of being unique to the original data. Mapping may comprise for example applying one or more hash methodologies to accomplish generating a unique fingerprint.

Application code may comprise for example a portion of an application comprising computer instructions written in one or more computer languages that instructs a computing device to perform the computer instructions. The one or more computer languages may comprise for example a human readable computer language. For example an application may be developed in a human readable computer language such as JAVA . The application may be packaged wherein the human readable computer language is compiled into executable code and or any other intermediate format. Accordingly application code obtained from an application file e.g. APK file may comprise source code e.g. JavaScript HTML etc. byte code executable code intermediate format code and or any other code comprising machine instructions in one or more formats or computer languages. Application code may be accessed by unpacking the code from a packaged application file as will be discussed in greater detail below.

Malware database s may comprise for example records of identifiable characteristics of known malware that may be used in inspecting data for the presence of the known malware. As discussed above malware databases may comprise information and or records associated with one or more computer viruses Trojan horses rootkits key loggers spyware adware and or other malicious computer instructions. The application code or portions thereof may be compared to the records for identifiable characteristics patterns and or portions of code that may indicate the presence of malware. For example blocks of the application code may be compared to blocks of known malware code in signature based malware detection. In another example patterns of the application code and or sequences of code in the application code may be compared to known patterns or sequences of code of malicious applications e.g. viruses Trojan horses key loggers etc. . As may be appreciated the malware databases may be constantly updated without requiring a modification of the malware detection services and or verification applications executing on one or more client devices .

User configurations may comprise for example settings defined by one or more users of one or more client devices . The user configurations may be used in the determination of whether to permit the install and or execution of an application on a client device . For example a user may define a user configuration to override a determination that an application comprises malware. In one embodiment the user configuration may define a time in which a check of an application is conducted e.g. at every installation at every execution every other execution etc. .

Return codes may comprise for example information that may be transmitted from the computing environment to a client device to identify whether an application should be installed and or executed on the client device . For example a return code may comprise a binary file wherein a 0 indicates that an application should not be installed and or executed and a 1 indicates that an application may be installed and or executed. The return code may further comprise an indication of any events that are to be executed in a client device as may be appreciated.

Events may comprise for example actions predefined by a manufacturer of a device an operating system of the device and or a user of the device to be conducted in the event malware is detected or not detected . As a non limiting example an event may comprise an automatic quarantine of the application . In an alternative embodiment an event may comprise an automatic deletion of the application .

Notifications may comprise for example statements that may be predefined and transmitted to a client device with a return code to be displayed on the client device and or other presented to a user of the client device . For example the client device may display a message indicating that the application attempting installation and or execution comprises malware.

Devices may comprise information associated with one or more client devices including but not limited to a manufacture of the device a make a model an operating system of the device and or any other information associated with the device .

Hash methodologies may comprise for example procedures that may be employed in generating an application fingerprint unique to an application . For example a hash methodologies may take data of any size and map the data to a much shorter bit string that has a high probability of being unique to the original data. Hash methodologies may comprise for example a Secure Hash Algorithm SHA GOST NAVAL Message Digest e.g. MD2 MD4 MD5 etc. PANAMA RadioGat n RACE Integrity Primitives Evaluation Message Digest RIPEMD Tiger Tiger2 WHIRLPOOL and or any other hash methodology .

The client device is representative of a plurality of client devices that may be coupled to the network . The client device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability. The client device may include a display . The display may comprise for example one or more devices such as liquid crystal display LCD displays gas plasma based flat panel displays organic light emitting diode OLED displays LCD projectors or other types of display devices etc.

The client device may be configured to execute various applications such as a client application and or other applications. The client application may be executed in a client device for example to access network content served up by the computing environment and or other servers thereby rendering a user interface on the display . To this end the client application may comprise for example a browser a dedicated application etc. and the user interface may comprise a network page an application screen etc. The client device may be configured to execute applications beyond the client application such as for example email applications social networking applications word processors spreadsheets and or other applications.

Moreover the client device may comprise a client verification application and or one or more application fingerprints that are stored locally on the client device in association with one or more application . The client verification application may be executed to monitor installations and or executions of applications on the client device . The client verification application may generate fingerprints of an application to compare to the application fingerprints stored locally on the client device as will be discussed in greater detail below.

Next a general description of the operation of the various components of the networked environment is provided. To begin an application is received during an ingestion process. An ingestion process may comprise for example a series of user interfaces that may be presented to a user to facilitate an upload of an application associated with the user to a data store . As a non limiting example the application may be uploaded by a developer of the application in order to make the application available for consumption e.g. sale lease download etc. in the electronic commerce system .

Next a thorough inspection of the application may be conducted by the malware detection services if the application has not been previously inspected. For example if the application and or an application fingerprint of the application are found in the data store it would appear that the application has previously been analyzed by the fingerprint service and no further inspection may be warranted. Alternatively if the application and or an application fingerprint of the application are not found in the data store the application received during the ingestion process may be stored in a data store or like memory.

To inspect the application the malware detection services may unpack the application to separate application code from other content of the application e.g. assets resources certifications libraries manifest file s etc. .

The fingerprint services may generate an application fingerprint for the application . In one embodiment the fingerprint is generated by applying one or more hash methodologies to the application code of the application . As may be appreciated the application code may be less substantial in data size than the entire application itself. Moreover the application code is generally unique to an application . The application fingerprint may be stored in data store in association with the application and or the application code .

The malware detection services may conduct a deep and thorough scan of an application by comparing the application code and or portions of the application code to the malware databases . In the event the application code comprises malware in box the application may be flagged as malware and or stored as a denied application . In the event a user attempts to install and or execute a denied application the user may be denied and or prompted with a warning as will be discussed in greater detail below. In the event no malware is detected in the application code the application may be flagged as clean and or stored as an approved application .

Accordingly a request to install and or execute an application may be detected on the client device . As may be appreciated a user may have previously purchased and or downloaded an application from the electronic commerce system . Upon a successful download the application an installation of the application may be automatically initiated. Alternatively a user of a client device may attempt to directly install an application on the client device without downloading the application from the electronic commerce system . For example a user may transfer an application to a client device via Universal Serial Bus USB port on the client device . In either scenario a request to install and or execute the application may be detected.

On the client device the application code of the application may be checked against an application fingerprint of the same application if an application fingerprint is stored locally. For example if downloaded from the electronic commerce system the electronic commerce system may provide to the client device an application fingerprint of the application downloaded to be stored locally on the client device . By comparing the application code of the application to the application fingerprint it may be determined whether the application has been modified perhaps maliciously.

If the application code of an application matches an application fingerprint of the application stored locally on the device the client device may permit execution of the application . Alternatively if there is no application fingerprint stored locally and or if the application code and or the fingerprint do not match application code may be transmitted to computing environment for further inspection. By transmitting the application code of the application to the computing environment a rapid check of the application code may be conducted and or a thorough scan of the application code may be conducted as will be discussed in greater detail below. The client verification application may await and or receive a return code or a similar response from the computing environment .

The application code may be compared to application codes in the data store to determine whether the application code has been previously analyzed and or inspected by the malware detection services. According to various embodiments a comparison of an application fingerprint to may employ for example fuzzy hashing to account for changes or variations in application code . Traditional hashing methods may require a 100 match to detect a match between two hashed data sets. Alternatively fuzzy hashing may comprise comparing portions of hashed data to determine whether similarities are able to be identified between two hashed data sets. For example if an application fingerprint is 98 similar to a fingerprint stored in data store a match may be identified. Thus configurable predefined operational thresholds may be employed e.g. 2 or any other range to indicate a degree of similarity required for a match of application fingerprints to be generated.

If the application code has been previously stored in the data store it is determined whether the application has been approved or denied. This may be determined for example by determining whether an application has been flagged and or stored as an approved application or a denied application . If the application is approved a return code permitting the installation and or execution of the application may be transmitted from the computing environment to the client device . If the application has been denied a return code may be transmitted to the client device denying installation and or execution of the application on the client device.

If the application code is not in a library or database of application codes the application code may be stored in data store and a deep or thorough inspection of the application code may be conducted by comparing the application code and or portions of the application code to the malware database . As may be appreciated the malware database may contain information associated with various types of malware previously detected and may comprise fingerprints of malware or portions of malicious code which may be compared to fingerprints of application code or portions of the application code . The malware database may be employed in the determination of which applications may comprise malware. According to various embodiments a comparison of an application fingerprint to known fingerprints of malware in a malware database may employ for example fuzzy hashing to account for changes or variations that may be intentionally employed in mutating or polymorphic malware to fool detection of the malware. As discussed above traditional hashing methods may require a 100 match to detect a match between two hashed data sets. Alternatively fuzzy hashing may comprise comparing portions of hashed data to determine whether similarities are able to be identified between two hashed data sets. For example if an application fingerprint is 80 similar to a fingerprint of known malware stored in data store a detection of malware may be identified. Thus configurable predefined operational thresholds may be employed e.g. 20 or any other range to indicate a degree of similarity required for a detection of malware to be generated.

If malware is detected in the application code the application may be flagged and or added to the denied applications in data store and one or more events may be initiated. Events may comprise for example actions predefined by an operator and or moderator of the malware detection services to be conducted in the event malware is detected. As a non limiting example an event may comprise an automatic quarantine of the application . In an alternative embodiment an event may comprise an automatic deletion of the application .

Moreover notifications predefined by the operator and or moderator of the malware detection services may be transmitted to the client device from the computing environment . Thus the client device may display the notification to a user of the client device indicating that the application attempting installation and or execution comprises malware. A return code may be transmitted to the client device denying installation and or execution of the application on the client device . The return code may further comprise an indication of any events that are to be executed in the client device as may be appreciated.

In the event malware has not been detected in the application code a return code or a like response permitting installation and or execution of the application on the client device may be transmitted to the client device . The application may be added to the approved applications in data store .

According to one embodiment an application may be received by the computing environment from a client device in response to an attempted installation and or execution of the application on the client device. An application may be unpacked in the computing environment to obtain the application code . The application code may be hashed to generate a fingerprint that is unique to the application that may be used for future identifications of the application to determine whether the application has been previously approved or disapproved. The fingerprint generated from the application code may be stored in data store in a library of application fingerprints . Thus when an installation of an application is initiated on a client device an approved application will permit the client device to proceed with the installation of the application on the client device .

As may be appreciated various versions of an application may be deployed made available on the electronic commerce system or made available through other means. Similarly various add ons of an application may modify the application or malware may maliciously modify an application or its application code . Thus a hashing of the application code will generate a fingerprint that will not be found in the library of application fingerprints . Accordingly in the event a fingerprint of the application is not identified in the library of the application fingerprints the application may be sent to malware detection services to determine whether the application comprises malware or other malicious code. A response may be transmitted to the client device permitting the installation and or execution of the application .

According to an alternative embodiment the fingerprint of an application may be sent to a client device to permit local comparisons of the application to the fingerprint of the application generated in the computing environment . In the event an application is modified maliciously on the client device a comparison of a fingerprint of the application to the fingerprint generated in the computing environment will identify that the application has been altered.

Referring next to shown is an example user interface that may be rendered by the developer portal to facilitate the upload of one or more applications and or digital content items e.g. audio files video files electronic books etc. to the electronic commerce system . In the non limiting example of shown is a developer portal that conducts an ingestion process whereby a user e.g. the developer of the application provides the application via an upload component or other similar component. As may be appreciated information associated with the application may be requested during the ingestion process. Thus the user may be prompted for an application name an application description application graphics and or a type of the item being provided in the ingestion process. The user may complete submission of the application or digital content item by engaging a submission component . As discussed above with respect to an upload of the application to data store may initiate an inspection of the application by the malware detection services .

Turning now to shown is an example of the components of an application that may be unpacked to identify the application code of an application . For example a single file of an application may comprise a manifest file resources assets application code and or libraries packaged into the single file of the application . The application code may be identified and or unpacked and transmitted over network to the fingerprint services which may be generate a unique fingerprint of the application code . The application code may be stored in data store as illustrated by application code . Similarly the application fingerprint generated by the fingerprint services may be stored in data store as illustrated by application fingerprint

Referring next to shown is a flowchart that provides one example of the operation of a portion of the fingerprint service according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the fingerprint service as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

Beginning with box an application is accessed and or received. In one embodiment an application may be received during an ingestion process comprising for example a series of user interfaces that may be presented to a user to facilitate an upload of an application associated with the user to a data store . As a non limiting example the application may be uploaded by a developer of the application in order to make the application available for consumption e.g. sale lease download etc. on the electronic commerce system . In an alternative embodiment the application may be provided via one or more web services by making one or more programmatic service calls to the one or more web services. For example a developer may upload multiple applications by making API calls to the web services wherein the API calls comprise one or more application files. In a further embodiment the application may be received from a client device upon an attempted execution or installation of the application . For example a user may have downloaded and or otherwise obtained an application from a third party other than the electronic commerce system . Upon an attempted installation or execution of the application on a client device the client device may transmit and or otherwise provide the application or the application code to the computing environment . In yet another embodiment a crawler or like component may search or crawl various network sites for files associated with one or more applications . Accordingly the crawler may download the one or more applications to data store . In an yet another embodiment an Integrated Development Environment IDE used during the development of an application may comprise for example a plug in that may transmit the application and or the application code to the computing environment upon a request initiated in the IDE.

Next in box it is determined whether the application and or an application fingerprint of the application exists in the data store . If the application and or an application fingerprint of the application are found in the data store it would appear that the application has previously been analyzed by the fingerprint service and no further analysis may be warranted. In box if the application and or a fingerprint of the application are not found in the data store the application received during the ingestion process may be stored in a data store or like memory.

Next in box the application may be unpacked to separate application code from other content of the application e.g. assets resources certifications libraries manifest file s etc. . As a non limiting example an application received may comprise an APK file. An APK file corresponding to an application may be a single packaged file comprising application code assets resources certifications libraries manifest file s and or any other information associated with an application . Thus the application code may be identified in box and separated from the other content of the application for further inspection.

In box a unique identifier referred to as a fingerprint is generated for the application . In one embodiment the fingerprint is generated by applying one or more hash methodologies to the application code of the application . As may be appreciated the application code of the application may be less substantial in data size than the entire application itself. Moreover the application code is generally unique to an application . In box the application fingerprint may be stored in data store in association with the application and or the application code of the application .

In box a deep and thorough scan may be conducted by comparing the application code and or portions of the application code to records in one or more malware databases . For example the one or more malware databases may comprise information and or malware records associated with one or more computer viruses Trojan horses rootkits key loggers spyware adware and or other malicious computer instructions. The application code or portions thereof may be compared to the malware records for identifiable characteristics patterns and or portions of code that may indicate the presence of malware. For example blocks of the application code may be compared to blocks of known malware code. In another example patterns of the application code may be compared to known patterns of malicious applications e.g. viruses Trojan horses etc. . It is understood that the scan conducted in box may be conducted not only in response to the receipt of an application but at predefined times and or intervals. For example as the malware database is improved new scans of applications may be conducted periodically according to predefined durations.

In box a determination is conducted to identify whether application code and or portions of the application code comprise malware. In the event the application code comprises malware in box the application may be flagged as malware and or stored as a disapproved application . Thus in the event a user attempts to install and or execute a disapproved application the user may be denied and or prompted with a warning as will be discussed in greater detail below. In the event no malware was detected in the application code in box the application may be flagged as clean and or stored as an approved application .

Turning now to shown is a flowchart that provides one example of the operation of a portion of the client verification application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the client verification application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the client device according to one or more embodiments.

Beginning with box a request to install and or execute an application is received and or conducted internal to the client device . As may be appreciated a user may have previously purchased and or downloaded an application from the electronic commerce system . Upon a successful download the application an installation of the application may be automatically initiated. Alternatively a user of a client device may attempt to directly install an application on the client device without downloading the application from the electronic commerce system . For example a user may transfer an application to a client device via Universal Serial Bus USB port on the client device . In either scenario a request to install and or execute the application may be detected.

In box the application code may be checked against an application fingerprint of the same application if an application fingerprint is stored locally. For example if downloaded from the electronic commerce system the electronic commerce system may provide to the client device an application fingerprint of the application downloaded to be stored locally on the client device . By comparing the application code of the application to the application fingerprint it may be determined whether the application has been modified perhaps maliciously.

In box it is determined whether application code of an application matches an application fingerprint of the application stored locally on the device. If so in box it may be determined whether the application was previously approved and or denied by the malware detection services . If approved in box the client device may permit execution of the application . If denied the execution and or installation may be denied as will be discussed in greater detail below. In the event no application fingerprint was stored locally and or if the application code and or the fingerprint do not match in box application code may be transmitted to computing environment for further inspection. By transmitting the application code to the computing environment a rapid check of the application code may be conducted and or a thorough scan of the application code may be conducted as will be discussed in greater detail below. In the client verification application may await and or receive a return code or a similar component from the computing environment .

As may be appreciated a return code or similar component may indicate to the client device whether the application should be installed and or executed. Thus in box it is determined whether the return code permits execution and or installation of the application . If it does not in box one or more events may be initiated. Events may comprise for example actions predefined by a manufacturer of a device an operating system of the device and or a user of the device to be conducted in the event malware is detected. As a non limiting example an event may comprise an automatic quarantine of the application . In an alternative embodiment an event may comprise an automatic deletion of the application .

In box notifications predefined in the client device and or transmitted to the client device with the return code may be displayed on the client device and or other presented to a user of the client device . For example the client device may display a message indicating that the application attempting installation and or execution comprises malware. As may be appreciated the display of a notification in box may be optional.

In box the installation and or execution of the application may be denied. In various embodiments the user of the client device may override the determination not to install and or execute the application perhaps after a notification has been presented to the user warning the user of the risks inherent to installation and or execution of the application .

If a return code permits installation and or execution of an application in box the application may be installed and or executed. The client device may store a variable indicating that the application has been checked for malware in order for the check to not occur at every execution.

Referring next to shown is a flowchart that provides one example of the operation of a portion of the malware detection services according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the malware detection services as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing environment according to one or more embodiments.

As discussed above with respect to a client device upon installation and or execution of an application on the client device may transmit application code to the malware detection services . Beginning with box the application code of the application is received by the malware detection services from the client device . In box the application code may be compared to application codes in the data store to determine whether the application code has been previously analyzed and or inspected by the malware detection services box . If the application code has been previously stored in the data store in box it is determined whether the application has been approved or denied. This may be determined for example by determining whether an application has been flagged and or stored as an approved application or a denied application . If the application is approved a return code permitting the installation and or execution of the application may be transmitted from the computing environment to the client device . If the application has been denied a return code may be transmitted to the client device denying installation and or execution of the application on the client device box .

If the application code is not in a library or database of application codes in box the application code may be stored in data store or similar memory. In box a deep or thorough inspection of the application code may be conducted by comparing the application code and or portions of the application code to the malware database . As may be appreciated the malware database may contain information associated with various types of malware previously detected. The malware database may be employed in the determination of which applications may comprise malware. For example the one or more malware databases may comprise information and or malware records associated with one or more computer viruses Trojan horses rootkits key loggers spyware adware and or other malicious computer instructions. The application code or portions thereof may be compared to the malware records for identifiable characteristics patterns and or portions of code that may indicate the presence of malware. For example blocks of the application code may be compared to blocks of known malware code. In another example patterns of the application code may be compared to known patterns of malicious applications e.g. viruses Trojan horses etc. .

In box it is determined whether malware has been detected in the application code . If malware has been detected in the application code in box the application may be flagged and or added to the denied applications in data store . In box one or more events may be initiated. Events may comprise for example actions predefined by an operator and or moderator of the malware detection services to be conducted in the event malware is detected. As a non limiting example an event may comprise an automatic quarantine of the application . In an alternative embodiment an event may comprise an automatic deletion of the application .

In box notifications predefined by the operator and or moderator of the malware detection services may be transmitted to the client device . Thus the client device may display the notification to a user of the client device indicating that the application attempting installation and or execution comprises malware. A return code may be transmitted in box to the client device denying installation and or execution of the application on the client device . The return code may further comprise an indication of any events that are to be executed in the client device as may be appreciated.

In the event malware has not been detected in the application code a return code permitting installation and or execution of the application on the client device may be transmitted to the client device in box . In box the application may be added to the approved applications in data store .

Although described above with respect to an application and or application code the malware detection services may be configured to inspect other file types such as word processing documents images spreadsheets network pages e.g. HTML documents accessed over a network audio files video files scripts and or any other file type. As may be appreciated the files may be treated as the packaged application file described above and unpackaged to obtain code instructing a machine to perform an instruction. The code may be inspected by the malware detection services as described above.

With reference to shown is a schematic block diagram of the computing environment according to an embodiment of the present disclosure. The computing environment includes one or more computing devices wherein each computing device includes at least one processor circuit for example having a processor and a memory both of which are coupled to a local interface . To this end each computing environment may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the electronic commerce system the developer portal the fingerprint service the malware detection services and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processor as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Flash or other programming languages.

A number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and or multiple processor cores and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the electronic commerce system the developer portal the fingerprint service the malware detection services and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates field programmable gate arrays FPGAs or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the electronic commerce system the developer portal the fingerprint service and or the malware detection services . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the electronic commerce system the developer portal the fingerprint service the malware detection services the client application and or the client verification application that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system.

The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

