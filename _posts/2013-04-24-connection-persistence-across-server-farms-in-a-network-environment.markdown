---

title: Connection persistence across server farms in a network environment
abstract: An example method for connection persistence across server farms in a network environment is provided and includes associating a first real server with a first server farm attached to a first virtual Internet Protocol address (VIP), associating a second real server with a second server farm attached to a second VIP, and linking the first real server with the second real server in a particular group. The first real server is configured to service a first connection from a client to the first VIP in a network environment, the second real server is configured to service a second connection from the client to the second VIP in the network environment, and the method further includes facilitating connection persistence of the first connection with the second connection across the first server farm and the second server farm.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09392066&OS=09392066&RS=09392066
owner: CISCO TECHNOLOGY, INC.
number: 09392066
owner_city: San Jose
owner_country: US
publication_date: 20130424
---
This disclosure relates in general to the field of communications and more particularly to connection persistence across server farms in a network environment.

Data centers are increasingly used by enterprises for collaboration and for storing data and or resources. A typical data center network contains myriad network elements including hosts loadbalancers routers switches etc. The network connecting the network elements provides secure user access to data center services and an infrastructure for deployment interconnection and aggregation of shared resource as required including applications hosts appliances and storage. Improving operational efficiency and optimizing utilization of resources in data centers are some of the challenges facing data center managers. Data center managers want a resilient infrastructure that consistently supports diverse applications and services and protects the applications and services against disruptions. A properly planned and operating data center network provides application and data integrity and optimizes application availability and performance.

An example method for connection persistence across server farms in a network environment is provided and includes associating a first real server with a first server farm attached to a first virtual Internet Protocol address VIP associating a second real server with a second server farm attached to a second VIP and linking the first real server with the second real server in a particular group e.g. a buddy group comprising one or more real servers from one or more server farms . The first real server is configured to service a first connection from a client to the first VIP in a network environment the second real server is configured to service a second connection from the client to the second VIP in the network environment and the method further includes facilitating connection persistence of the first connection with the second connection across the first server farm and the second server farm.

Turning to is a simplified block diagram illustrating an embodiment of communication system for facilitating connection persistence across server farms in a network environment. Communication system includes a client communicating with a network across another network e.g. Internet through a gateway . A server loadbalancer SLB may intercept the communication from client and perform loadbalancing algorithms or other suitable network optimizations before routing the communication to one of a plurality of servers e.g. servers and .

Each server e.g. may include one or more real servers e.g. that belong to one or more server farms e.g. attached to separate and distinct virtual Internet Protocol addresses VIPs . The term real server can comprise or be associated with an instantiation of the server at a specific IP address and or port of the server e.g. 192.168.1.11 80 . In some embodiments each real server may be instantiated at separate and distinct ports on the same physical or virtual server. For example each real server e.g. may be associated with or comprise the respective servers e.g. listening on distinct ports e.g. and .

The term server farm includes a logical group of real servers on network that can be uniquely identified by an identifier such as a server farm name e.g. server farm identified by name http server farm identified by name decrypted . Each server farm may be configured separately at SLB to include the list of real servers that may be associated with the respective server farm. The term client includes a software program or the device on which the program executes that requests a specific service from a server or real server .

The VIP is an IP address that is shared among multiple real servers. For example substantially all real servers in server farm may share the VIP associated with server farm . In an example embodiment server may include real server at an Internet Protocol IP address of 192.168.1.11 80 that belongs to server farm attached to VIP 172.16.1.100 80 server include real server at an IP address of 192.168.1.11 443 that belongs to server farm attached to VIP 172.16.1.100 443. Likewise server may include real server at IP address 192.168.1.12 80 that belongs to server farm attached to VIP 172.16.1.100 80 server may include real server at 192.168.1.12 443 that belongs at server farm attached to VIP 172.16.1.100 443.

As used herein the term server encompasses any software program or the device on which the program executes that provides any service e.g. web based application hypertext transfer protocol HTTP content Extensible markup language XML content streaming media video or audio trivial file transfer protocol TFTP uploads and downloads file transfer protocol FTP uploads and downloads etc. to a client e.g. . In some embodiments the servers are dedicated physical devices e.g. computers such as rack servers blade servers etc. . In other embodiments the servers are virtually executing on non dedicated devices e.g. that can perform non server related functions . Servers can be identified with names and characterized with Internet Protocol IP addresses connection limits and weight values among other parameters .

A buddy sticky module associated with SLB may ensure connection persistence across multiple server farms e.g. so that separate connections from the same client e.g. can be handled by the same server e.g. or by buddied real server instances e.g. two or more servers share flow tables for processing a connection from client or buddy sticky module can enable the servers to share flow tables .

The term connection includes a communication pathway between two or more communicating devices e.g. client and server . A specific connection can support more than one session which includes an exchange of messages between the two communicating devices. The session may be stateful where at least one of the communicating devices saves information about the session history. As used herein connection persistence refers to any ability of a loadbalancer e.g. SLB or other traffic management network element to maintain a virtual connection between a client e.g. and a specific server e.g. or to a group of servers. Connection persistence can also be referred to as stickiness or server affinity. Connection persistence ensures that once the client e.g. has made a connection to the specific server e.g. subsequent requests from the same client are sent to the same server.

For purposes of illustrating the techniques of communication system it is important to understand the communications that may be traversing the system shown in . The following foundational information may be viewed as a basis from which the present disclosure may be properly explained. Such information is offered earnestly for purposes of explanation only and accordingly should not be construed in any way to limit the broad scope of the present disclosure and its potential applications.

A typical SLB manages traffic flow to real servers in a network through suitable loadbalancing algorithms. For example assume that real servers HTTP 1 at 10.102.29.5 80 and HTTP 2 at 10.102.29.6 80 are created and bound to the SLB at VIP 10.102.29.60 80. HTTP 1 and HTTP 2 may include real servers on a single server or different servers. SLB forwards any client request to the VIP to either HTTP 1 or HTTP 2. Thus different transmissions from the same client may be directed to different real servers even though the transmissions are part of the same session. Persistence or stickiness may be configured on the SLB to ensure that connections from the same client to the same application are not disrupted by the loadbalancing algorithms.

In some networking scenarios for example a shopping cart web application where a user orders goods using a web browser most of the session may be handled over HTTP. During checkout the user may share sensitive financial information which should likely be handled over a secure protocol such as HTTPS. However the HTTPS session may start a new connection and without connection persistence information about the previous HTTP session which includes data about the goods ordered may be lost. With connection persistence across a single server farm the SLB can route connections from the same user to the shopping cart application Web based email or other network application executing on the same server in the server farm. The advantage of connection persistence is that connection state from the HTTP session is saved in the hardware e.g. memory element of the server and therefore can be re used for the HTTPS connection. In some scenarios multiple servers may share a specific connection and maintain a shared knowledge of the connection state using various methods. Connection persistence in such scenarios may be implemented by sending the requests from the client to the same group of servers sharing the connection within the same server farm.

Connection persistence can be also beneficial when application traffic is directed to the same server and port address translation PAT is performed on the application traffic or when a tiered application is aligned across multiple physical servers e.g. where a connection hitting server in teir should also hit server in tier and server in tier . Connection persistence can be configured based on various parameters in a packet. For example connections from the same client IP address can be configured as belonging to the same session connections that have the same HTTP cookie header can be configured as belonging to the same session connections that have the same SSL session ID can be configured as belonging to the same session connections to the same uniform resource locator URL can be configured as belonging to the same session connections to the same destination IP address can be configured as belonging to the same session connections from the same source IP address to the same destination IP address can be configured as belonging to the same session etc.

Generally connection persistence may be accomplished by linking real servers in a server farm through a sticky group. Typically the sticky group comprises a Netmask and address. The address can be source destination or both. The Netmask specifies how many connections can be bound to the same real server or server farm etc. after a first match. For example sticky group A may be configured for a default Netmask 255.255.255.0 with address type both. An incoming packet with destination IP address of 192.168.0.11 and source IP address of 200.0.0.2 may be bound to real server by the loadbalancer. Assume that a subsequent connection from IP address 200.0.0.30 comes in. The connection will be bound automatically to the real server too for connection persistence. With connection persistence connections with source IP address from 200.0.0.0 to 200.0.0.255 will be bound to the real server until the record times out. The sticky timeout specifies a period of time that the SLB keeps the IP address sticky information in the sticky database after the latest client connection terminates. When connection from 200.0.1.5 comes in it may be loadbalanced to a different real server in the same server farm say real server .

In situations where separate and distinct server farms handle HTTP requests and HTTPS requests for example for security purposes connection persistence across multiple server farms may be needed. For example real servers handling HTTP requests may be separated from real servers handling HTTPS requests through configuring the real servers in separate and distinct server farms. The HTTP request may also be differentiated from the HTTPS request based on the port handling the request. When the client request for the HTTPS connection is encountered on a port distinct from the port used for the HTTP connection under currently existing mechanisms the SLB chooses the server farm associated with the HTTPS port and directs the HTTPS request to one of the real servers servicing that port. Because the real server is not associated with the server farm servicing the HTTP port the HTTPS request may not reach the same server that serviced the HTTP connection and therefore connection persistence may not be achieved.

One possible mechanism to provide connection persistence across multiple server farms is to have L level VIP instead of L level VIP. With L level VIP port numbers may not factor into loadbalancing algorithms therefore traffic entering the SLB on port or may hit the same server farm and get loadbalanced to the same server. However in some scenarios port address translation PAT may be desired for an SSL connection HTTP connection or both. PAT may be configured within a specific server farm on the SLB and each server farm may be associated with a separate VIP. If the real servers are not defined within a port or associated therewith as in an L server farm PAT may not be feasible.

Moreover for security reasons or for other reasons different VIPs may be used to service different kinds of requests. For example the VIPs may be based on port numbers VIP 1 may only service requests coming on port and VIP 2 may only service requests coming on port . Having a L level VIP without port numbers can allow traffic on every port for that VIP which can compromise security. Additional requirements may include performing network address translation NAT on requests on VIP 1 and VIP 2 separately. If the same server farm represented by a pool of real servers is attached to both VIP 1 and VIP 2 the connections on VIP 1 and VIP 2 may be translated to the same pool of real servers which may not satisfy the security requirements although it would provide connection persistence. Alternatively if different real servers are attached to VIP 1 and VIP 2 network address translation security requirements may be met without providing connection persistence.

Communication system is configured to address these issues and others in offering a system and method for connection persistence across server farms in a network environment. Embodiments of communication system can associate a first real server e.g. with a first server farm e.g. attached to a first VIP e.g. 172.16.1.100 80 associate a second real server e.g. with a second server farm e.g. attached to a second VIP e.g. 172.16.1.100 443 and link the first real server e.g. with the second real server e.g. to form a buddy group. The buddy group may be identified by a name or other suitable identifier ID . The first real server e.g. is configured to service a first connection to the first VIP and the second real server e.g. is configured to service a second connection to the second VIP.

Embodiments of communication system can facilitate persistence of the first connection with the second connection to the same server e.g. across the first server farm e.g. and the second server farm e.g. . In an example embodiment the first connection from client may be directed to the first real server e.g. and the buddy group may be associated with client in a sticky database. For example a hash C may be computed based on the source IP address of client and the hash may be tied to the buddy group identifier e.g. C alpha in the sticky database. Any suitable mechanism may be used to associate the buddy group with client . When the second connection from client is received the buddy group associated with client may be identified for example by looking up the sticky database. In an example the hash C may be computed based on the source IP address and a lookup of the sticky database for the hash may be performed. The entry C alpha may be returned and the buddy group ID alpha associated therewith may be ascertained. The second real server e.g. belonging to the buddy group and the second server farm e.g. may then be identified and the second connection may be directed to the second real server e.g. to facilitate connection persistence.

In various embodiments the buddy group may comprise a buddy real group and a buddy sticky group. Linking the first real server e.g. with the second real server e.g. in the buddy group can comprise creating a buddy real group when specifying real servers in a particular server farm. For example real server can be made a member of a buddy real group having a name group name by using a suitable command e.g. buddy group name in a server farm host real server configuration mode of SLB . Linking the first real server e.g. with the second real server e.g. in a buddy group can further comprise creating a buddy sticky group when specifying server farms in a particular sticky group. For example server farm can be made a member of a buddy sticky group having a name group name by using a suitable command e.g. member group name in a sticky configuration mode of SLB . The buddy real group and the buddy sticky group can together cause packets from the same client e.g. on different connections to be directed to the same server e.g. facilitating connection persistence.

In some embodiments buddy sticky module may facilitate a one to one association linking client to the same server e.g. associated with two different server farms e.g. and . Merely by way of example and not as limitations assume that server farms correspond to separate classes of L traffic e.g. traffic in protocols such as HTTP FTP etc. identifiable at Layer of the OSI model . For example server farm e.g. serverfarm http may be associated with HTTP traffic and server farm e.g. serverfarm decrypted may be associated with HTTPS traffic. Separate real servers on respective servers and may be configured and associated with server farms . Thus real server and on respective servers and may service HTTP traffic and real servers and on respective servers and may service HTTPS traffic.

SLB may be configured to loadbalance HTTP requests to server farm using either real server on server or real server on server . SLB may be also configured to loadbalance HTTPS requests to server farm using either real server on server or real server on server . Buddy sticky module may link real server associated with server farm with real server associated with server farm so that separate connections from same client may be processed by the same server .

Merely for example purposes assume that client sends an HTTP request to VIP 172.16.1.100 destination port to begin to build a shopping cart. SLB loadbalances the request to server farm real server on server and creates a sticky entry based on the corresponding sticky group for example source IP address that sticks client to real server while client builds the shopping cart. When client moves to a secured connection e.g. port for checkout the connection is directed to the VIP with destination port and SLB sends client to server farm . SLB finds an existing sticky entry with real server and directs client to real server in server farm because the two real servers are linked together under a common buddy group.

According to embodiments of communication system different buddy groups may link together real servers associated with different server farms attached to different VIPs. Consequently PAT may be implemented so that requests to a particular server farm at a particular port may be translated to another port if the application on the servers is listening on the other port. For example assume that a cart checkout application is listening on port of the same server where a catalogue application is listening on port . According to embodiments of communication system requests on port may be translated to port but requests on port may be left as is without translation. Moreover persistence at VIP level as well as L policy level may be implemented to provide more flexibility.

Turning to the infrastructure of communication system the network topology can include any number of servers virtual machines switches including distributed virtual switches routers and other nodes inter connected to form a large and complex network. A node may be any electronic device client server peer service application or other object capable of sending receiving or forwarding information over communications channels in a network. Elements of may be coupled to one another through one or more interfaces employing any suitable connection wired or wireless which provides a viable pathway for electronic communications.

Additionally any one or more of these elements may be combined or removed from the architecture based on particular configuration needs. Communication system may include a configuration capable of TCP IP communications for the electronic transmission or reception of data packets in a network. Communication system may also operate in conjunction with a User Datagram Protocol Internet Protocol UDP IP or any other suitable protocol where appropriate and based on particular needs. In addition gateways routers switches and any other suitable nodes physical or virtual may be used to facilitate electronic communication between various nodes in the network.

Note that the numerical and letter designations assigned to the elements of do not connote any type of hierarchy the designations are arbitrary and have been used for purposes of teaching only. Such designations should not be construed in any way to limit their capabilities functionalities or applications in the potential environments that may benefit from the features of communication system . It should be understood that communication system shown in is simplified for ease of illustration. Communication system can include any number of real servers servers server farms and SLBs and other network elements within the broad scope of the embodiments.

The example network environment may be configured over a physical infrastructure that may include one or more networks and further may be configured in any form including but not limited to LANs wireless local area networks WLANs VLANs metropolitan area networks MANs wide area networks WANs virtual private networks VPNs Intranet Extranet any other appropriate architecture or system or any combination thereof that facilitates communications in a network. In some embodiments a communication link may represent any electronic link supporting a LAN environment such as for example cable Ethernet wireless technologies e.g. IEEE 802.11x ATM fiber optics etc. or any suitable combination thereof. In other embodiments communication links may represent a remote connection through any appropriate medium e.g. digital subscriber lines DSL telephone lines T lines T lines wireless satellite fiber optics cable Ethernet etc. or any combination thereof and or through any additional networks such as a wide area networks e.g. the Internet .

SLB may be any suitable loadbalancer or other network optimization appliance that directs traffic to one or more real servers within a server farm as part of its operations. In some embodiments SLB may direct traffic to a particular server farm based on a port at which the traffic arrives in other embodiments SLB may direct traffic to a particular server farm based on a class of traffic in yet other embodiments SLB may direct traffic to a particular server farm based on parameters in packet headers in yet other embodiments SLB may direct traffic to a particular server farm based on parameters in the packet payload. Various loadbalancing and other optimization algorithms may be executed on SLB to direct traffic to a particular server farm within the broad scope of the embodiments.

In some embodiments buddy sticky module can include an application executing on SLB . In other embodiments buddy sticky module can include an application executing on another network element in communication with SLB . Network elements can include computers network appliances servers routers switches gateways bridges loadbalancers firewalls processors modules or any other suitable device component element or object operable to exchange information in a network environment. Moreover the network elements may include any suitable hardware software components modules interfaces or objects that facilitate the operations thereof. This may be inclusive of appropriate algorithms and communication protocols that allow for the effective exchange of data or information. In some embodiments buddy sticky module may be implemented in a separate stand alone box that can be plugged into or otherwise connected to SLB . In some embodiments buddy sticky module may be implemented in hardware in software or in a combination of hardware and software.

Turning to is a simplified block diagram illustrating example details of an embodiment of communication system . Client may engage in a transaction with an application executing in server . Transaction may correspond to a business process e.g. sales order by a client e.g. that is executed through an application in discrete steps e.g. verify product availability obtain payment commit order . Depending on the protocol and other network parameters transaction may include one or more connections from the same client . For example consider a user shopping on client with a Web based application executing on server . Transaction engaged in by the user can include by way of example and not limitation a shopping cart e.g. where the user selects goods to order comprising connection e.g. connection and a payment e.g. where the user pays using a credit card or other forms of payment comprising connection e.g. connection .

In various embodiments connection e.g. HTTP requests and responses may be directed to VIP e.g. VIP 1 172.16.1.100 80 configured on SLB . VIP 1 may be associated with server farm on SLB . SLB may forward connection to server to be serviced by real server e.g. service instance . For security or other purposes connection e.g. HTTPS requests and responses may be directed to VIP e.g. VIP 2 172.16.1.100 443 configured on SLB and associated with server farm . Buddy sticky module may link real server and in a buddy group so that SLB can discover real server during a lookup of a sticky database for the appropriate real server to forward connection . SLB may forward connection to real server on server . Consequently both connections and may be processed by the same server facilitating connection persistence across server farms and for transaction .

Turning to is a simplified block diagram illustrating example details associated with buddy sticky groups and buddy real groups according to an embodiment of communication system . According to the example illustrated buddy group may comprise buddy sticky groups and . Buddy sticky group may include server farms and . Each server farm and may be associated with separate sticky groups which unlike buddy sticky groups do not straddle distinct server farms. Buddy sticky group may include server farm and possibly other server farms not illustrated . Buddy group may also comprise buddy real groups . For example buddy real group may comprise real servers and in server farms and respectively. Buddy real group may comprise real servers in server farms and . Buddy real group may comprise real server that is configured in both server farms and . Note that only a few real servers server farms buddy sticky groups and buddy real groups are illustrated herein for simplicity. Virtually any number of real servers server farms buddy sticky groups and buddy real groups may be configured within the broad scope of the embodiments. Moreover any suitable combination of real servers across server farms may be included in buddy group .

Turning to is a simplified block diagram illustrating example details of an embodiment of communication system . In some embodiments buddy sticky module may facilitate an asymmetric association sticking e.g. associating linking connecting joining relating etc. client to the same real server e.g. in two different server farms e.g. and when client comes back with two different traffic types e.g. HTTP and non HTTP . Merely by way of example and not as limitations assume that SLB is configured with three server farms corresponding to separate classes of L traffic e.g. traffic in protocols such as HTTP FTP etc. identifiable at Layer of the OSI model . For example server farm e.g. foo may be associated with HTTP traffic server farm e.g. foobar may be associated with HTTPS traffic and server farm e.g. bar may be associated with FTP traffic. Separate real servers and on respective servers and may be configured and associated with server farms . Thus real server may service HTTP and HTTPS traffic and real server may service FTP and HTTPS traffic. Buddy sticky module may link real server associated with server farm with the same real server associated with another server farm so that traffic from client may be processed by the same server .

Turning to is a simplified block diagram illustrating example details that may be associated with embodiments of communication system . In some embodiments buddy sticky module may facilitate a many to one association sticking multiple first tier real servers in one server farm to one real server in a second tier in another server farm that contains fewer servers. Such scenarios may be encountered for example when clients are loadbalanced to a first tier server farm containing many real servers and are then directed to a second tier server farm that contains fewer real servers.

Merely by way of example and not as limitations assume that SLB is configured with two server farms e.g. serverfarm web and serverfarm app corresponding to separate types of traffic e.g. web traffic application traffic etc. . For example server farm may be associated with web traffic and server farm may be associated with application traffic. Separate real servers on respective servers may be configured and associated with server farm likewise separate real servers on respective servers may be configured and associated with server farm . Thus real servers may service web traffic and real servers may service application traffic. Buddy sticky module may link real servers and across server farms and in buddy group e.g. buddy group blue similarly buddy sticky module may link real servers and across server farms and in buddy group e.g. buddy group red .

When web traffic from client is forwarded to server farm any one of real servers in server farm may be selected to service the traffic from client . After a specific real server e.g. is selected subsequent traffic from client destined to the same server farm may be forwarded to other members of the same buddy group. For example if real server at 192.168.1.11 80 is initially selected for servicing web traffic from client subsequent web traffic from client may be forwarded to either real server or real server in buddy group . Subsequent application traffic from client may be forwarded according to embodiments of communication system to real server in server farm that belongs to buddy group . Thus when SLB loadbalances client to either server or in server farm client is directed to server when ready to move to server farm . Real servers connected in buddy groups may be configured to share session state information suitably. Likewise when SLB loadbalances client to either server or in server farm client is directed to server when ready to move to server farm .

Turning to is a simplified block diagram illustrating example details that may be associated with embodiments of communication system . Typically the virtualized network environment in SLBs e.g. SLB can be divided into objects called contexts. Each context behaves like an independent SLB with its own policies interfaces domains server farms real servers and administrators. As used herein an object is any location in a memory element that has a value and that can be referenced by an identifier. The object can be a variable function data structure file or a particular instance of a class along with associated processing routines that have a set of attributes e.g. object elements data components properties etc. and behaviors e.g. methods subroutines algorithms etc. . For example a text file is the class and a specific text file e.g. A.txt is the object. The class defines properties and behavior for multiple instantiations e.g. objects . The object is typically characterized by three properties 1 identity serving to distinguish one object from another 2 states describing the data stored in the object and 3 behavior describing the methods by which the object can be used . The object may be stored in the form of a data structure e.g. a particular way of storing and organizing data in a computer .

Buddy sticky module may include a control plane CP and a data plane DP . CP may be provisioned with a configuration manager Cfg Mgr which can include one or more object tables including Cfg Mgr objects . DP can include a connection manager a loadbalancer LB module and a forwarding engine . LB module can include a sticky packet handler and an associated sticky database . According to some embodiments sticky database may be associated with SLB and used for various loadbalancing algorithms in addition to operations of buddy sticky module . A container e.g. a class a data structure or an abstract data type whose instances are collections of other objects in other words containers are used for storing objects in an organized way following specific access rules may include LB objects and time outs which may be associated with one or more contexts. A processor and a memory element may facilitate operations of buddy sticky module .

Embodiments of communication system can link real servers through buddy groups. In some embodiments existing sticky groups comprising portions of a single server farm may be modified to be linked across server farms in buddy sticky groups. Buddy real groups comprising real servers may be generated and linked to the buddy sticky groups. In various embodiments object tables may include a first object table for maintaining buddy sticky objects e.g. associated with buddy sticky groups and a second object table for maintaining buddy real objects e.g. associated with buddy real groups .

An object e.g. cm sticky group t may be included in Cfg Mgr objects to hold a buddy sticky group ID and a Boolean indicating a configured buddy sticky group if any . Another object e.g. cm buddy sticky group t may be included in Cfg Mgr objects to hold the buddy sticky group ID a list of buddy sticky groups configured with the buddy sticky group ID and a buddy sticky group name e.g. to facilitate sticky group lookup functionality . The second object can also include timeout IP Netmask v6 prefix if the buddy sticky group is of type IP and other parameters based on suitable needs.

Yet another object e.g. cm sfarm real t may be included in Cfg Mgr objects to hold a buddy real group ID and a Boolean indicating a buddy real group if configured . Yet another object e.g. cm buddy sfarm real t may be included in Cfg Mgr objects to include the buddy real group ID a list of real servers configured with the buddy real group ID and a buddy real group name. Appropriate application programming interfaces APIs may be provided to download the buddy sticky groups and buddy real groups to DP . Suitable APIs may be provided to check if the configured buddy sticky group or buddy real group has already been declared or otherwise exists in sticky database . The APIs may include suitable commands to facilitate the operations described herein.

In various embodiments sticky database may include an extended entry called LbSticky StickyEntry t that can hold a Boolean to differentiate between regular sticky entries e.g. without any linking into buddy groups and buddy sticky entries e.g. associated with buddy groups . LB objects may include buddy sticky objects buddy sticky type t and buddy real objects e.g. buddy sticky real server type t to hold sticky groups and real servers together. In various embodiments the buddy sticky objects and buddy real objects may be linked together in a chain. When Cfg Mgr creates a new buddy sticky group ID LB module may pull out a buddy sticky type t structure from a global pool and add it to the chain. When Cfg Mgr creates a new buddy real group ID LB module may pull out a buddy real server t structure from the global pool and add it to the chain.

LB objects may include an object lb sticky group info t and another object e.g. lb sticky group stats t to hold the buddy Boolean and buddy sticky group ID. LB objects may also include a real server structure lb buddy real server info t which can hold a real server ID and a server farm ID chained together under the buddy real object. In some embodiments a command line interface CLI may be provided e.g. with suitable commands to facilitate configuring the buddy lists under a real server level and a sticky group level. The infrastructure of communication system may be configured to download buddy group configurations from Cfg Mgr to LB module .

When a buddy group e.g. buddy group is configured a download thread in CP may download the buddy Boolean and the buddy real group name or ID into an object lb real server info t in DP . Substantially simultaneously CP may invoke another download thread with the buddy real group ID server farm ID and real server ID to populate the lb buddy real server info t structure with the real server ID server farm ID and buddy real group ID under a single buddy real token. Cfg Mgr may also configure one or more server farms in a buddy sticky group and invoke the download thread to download the buddy Boolean and the buddy sticky group name or ID into a corresponding object in DP .

In some embodiments when two sticky groups represented by portions of two server farms are linked together into a buddy sticky group they may have the same Netmask for IP sticky that can generate the same hash for the buddy sticky group. In some embodiments the two sticky groups may have different Netmasks. In such cases the most granular Netmask may be selected for the buddy sticky group. For example consider a sticky group SG having stickiness associated with a source IP Netmask of 255.255.255.255 that includes a server farm SF and is a member of buddy sticky group alpha. Another sticky group SG having stickiness associated with a source IP Netmask of 255.255.255.0 may include another server farm SF and also be a member of buddy sticky group alpha. In such a scenario 255.255.255.255 may be selected as the Netmask for stickiness decisions pertaining to the buddy sticky group. Moreover according to an embodiment of communication system a shortest timeout may be selected as a final timeout for the buddy sticky group in case of different timeouts for the sticky groups linked together into a single buddy sticky group. In some embodiments sticky groups having different configurations e.g. stickiness criteria may not be linked in a single buddy sticky group.

In some embodiments real servers may be configured under server farms before the server farms are configured under buddy sticky groups. In some embodiments substantially all real servers belonging to a server farm may be configured to belong to at least one buddy real group before the server farm can be configured under a buddy sticky group. During configuration of a specific buddy sticky group Cfg Mgr may lookup object tables to determine if the specific buddy sticky group exists. If the specific buddy sticky group exists Cfg Mgr may invoke a download of the buddy sticky group to DP .

If the specific buddy sticky group does not exist e.g. cannot be found in object tables Cfg Mgr may create a new buddy sticky group ID for the buddy sticky group and create a buddy sticky object in object tables . Cfg Mgr may also call LB module to pull out a new buddy sticky type t data structure from a global pool e.g. container and associate it with the buddy chain e.g. a list of other buddy sticky groups associated with the context with an ID set by Cfg Mgr . When the buddy chain is newly created and no specific buddy sticky group or buddy real group is configured yet the corresponding list may point to NULL. A bActive flag e.g. an indicator of the active or inactive status of the buddy group may be set to TRUE. A dirty flag e.g. an indicator to specify whether changes have been made to the buddy group configurations may be set to cause a download thread update of a sticky group stats data structure e.g. lb sticky group stats t maintained by LB module .

During operation when a first connection from client to a first VIP is received SLB may direct it to a specific buddy sticky group e.g. SG and LB module may lookup sticky database for a matching entry. The matching entry may be based on calculation of a hash of client s source IP address or other suitable parameter that can identify the sender of the connection. The lookup may return a miss triggering computation of a new hash e.g. C . An entry e.g. C R may be picked up from a free least recently used list of data structures e.g. freeLruList in a global pool depending on the configuration. The entry may be populated and saved in a sticky least recently used list e.g. stickyLruList of the buddy sticky object pointed to by the buddy sticky group ID present under the sticky group stats data structure for that buddy sticky group. A corresponding counter e.g. sticky conn count may be incremented by 1. The buddy sticky group represented by the buddy sticky group ID may be associated thus with client in sticky database .

When a second connection from client to a second VIP is received SLB may direct the second connection to another buddy sticky group SG. LB module may lookup in sticky database for hash C associated with client . If the hash is found as would be in the example the buddy sticky group ID associated with the matching entry may be ascertained and compared with the buddy sticky ID of SG to which the second connection is directed by SLB . If the buddy sticky IDs are the same the buddy real group for the real server associated with the matching entry may be ascertained. A real server in the current server farm belonging to the buddy real group may be found and sticky database may be updated correspondingly. If the buddy sticky group ID is different a loadbalancing algorithm may be performed and a new real server may be inserted in sticky database .

In case of deletion of the buddy sticky group the sticky group stats data structure e.g. lb sticky group stats t may be removed from the buddy chain under the buddy sticky object pointed to by the buddy sticky group ID. In some embodiments the buddy sticky group may not be removed if there is at least one sticky group configured under the buddy sticky group ID. When there are no more entries in the buddy chain substantially all entries belonging to the buddy sticky group may be returned to the global pool and set it to INACTIVE.

Turning to is a simplified block diagram illustrating example details that may be associated with an embodiment of communication system . According to some embodiments for each buddy group created per context two buddy chains may be added under a suitable object e.g. data structure LbSticky StickyContext t 1 a buddy sticky chain and 2 a buddy real chain . Buddy sticky chain may include substantially all buddy sticky objects e.g. B B B etc. configured for context and the sticky groups e.g. S S S etc. configured for each buddy sticky object. Buddy real chain may include substantially all buddy real objects e.g. B B etc. configured for context and the real servers R R etc. configured for each buddy real object. A timeout list may also be generated for each buddy chain. Time out list may maintain a list of timeouts for each buddy sticky group and buddy real group configured in communication system .

In some embodiments context may include merely buddy real chain . During configuration a buddy real token e.g. buddy real group ID say buddy blue may be initialized e.g. out of possible 16K buddy real objects and placed in buddy real chain . Configuring buddy blue under real servers R belonging to server farm SF and R belonging to SF may put both real servers under the buddy blue buddy real object e.g. B . When a first connection is directed to sticky group SG which can include server farm SF to which server R belongs SLB may lookup sticky database . The lookup may return a miss. Sticky packet handler may insert a sticky entry in sticky database for the IP address of the source e.g. client corresponding to the real server chosen based on loadbalancing algorithms.

A subsequent connection may be directed to sticky group SG and server farm SF and a lookup may return a hit e.g. based on the source IP address . The real server corresponding to the matching entry may be checked to determine if the real server therein belongs to server farm SF. As R does not belong to server farm SF the buddy real group buddy blue corresponding to R may be checked to determine a linked real server in server farm SF. R may be discovered and a corresponding entry may be populated in sticky database sending the subsequent connection to the same parent server wherein R and R are instantiated.

Turning to illustrate simplified details of example data structures configured in configuration manager according to an embodiment of communication system . illustrates a simplified data structure representing a buddy sticky group e.g. cm buddy sticky group t . Data structure may include a buddy sticky group name e.g. buddy sticky group name and a list e.g. list head t of sticky groups configured under the buddy sticky group name. A buddy timeout variable e.g. buddy timeout may also be set as desired. illustrates a simplified data structure representing a buddy real group e.g. cm buddy sfarm real t . Data structure may include a buddy real group name e.g. buddy sfarm real name and a list e.g. list head t of real servers configured under the buddy real group name.

Turning to illustrate simplified details of example data structures configured in LB module according to an embodiment of communication system . illustrates a simplified data structure representing a specific context LbSticky StickyContext t . Pointers to the buddy sticky group and the buddy real group may be suitably defined for example as buddy sticky type t and buddy real server type t respectively.

Turning to represent an example configuration associated with an embodiment of communication system . According to example configuration of real server lnx belonging to server farm http may be linked to real server lnx belonging to server farm decrypted in a buddy group named blue. Another real server lnx belonging to server farm http may be linked to real server lnx belonging to server farm decrypted in another buddy group named red. A buddy sticky group named alpha may comprise a sticky group stick cart having a Netmask of 255.255.255.255 for both source and destination addresses and server farm http and another sticky group stick credit having a Netmask of 255.255.255.255 for both source and destination addresses and server farm decrypted. Suitable policies may be configured as illustrated in to link http traffic to VIP 172.16.1.100 with sticky group stick cart and https traffic to VIP 172.16.1.100 with sticky group stick credit. 

Turning to represent an example configuration associated with an embodiment of communication system . According to example configuration of real server lnx belonging to server farm foo may be linked to the same real server lnx belonging to server farm foobar in a buddy group named blue. Another real server lnx belonging to server farm bar may be linked to the same real server lnx belonging to server farm foobar in another buddy group named red. A buddy sticky group named alpha may comprise a sticky group stick foo having a Netmask of 255.255.255.255 for both source and destination addresses and server farm foo and another sticky group stick bar having a Netmask of 255.255.255.255 for both source and destination addresses and server farm bar and yet another sticky group stick foobar having a Netmask of 255.255.255.255 for both source and destination addresses and server farm foobar. Suitable policies may be configured as illustrated in to associate a certain class of traffic to VIP 172.16.1.100 with sticky server farm foo another class of traffic to the same VIP with sticky server farm bar and a default class of traffic to the same VIP with sticky server farm foobar.

Turning to represent an example configuration associated with an embodiment of communication system . According to example configuration of real server lnx belonging to server farm web may be linked to real server lnx belonging to the same server farm web and another real server db belonging to server farm app in a buddy group named blue. Another real server lnx belonging to server farm web may be linked to real server lnx belonging to the same server farm web and another real server db belonging to server farm app in another buddy group named red. A buddy sticky group named alpha may comprise a sticky group web having a Netmask of 255.255.255.255 for source addresses and server farm web and another sticky group db having a Netmask of 255.255.255.255 for source addresses and server farm app. Suitable policies may be configured as illustrated in to associate a certain traffic to VIP 172.16.1.100 port with server farm web and traffic to VIP 172.16.1.100 port with server farm app.

Turning to represent an example configuration associated with an embodiment of communication system . According to example configuration of real server RS belonging to server farm SF may be linked to real server RS belonging to the server farm SF in a buddy group named blue. Another real server RS belonging to server farm SF may be linked to real server RS belonging to the server farm SF in another buddy group named red. A buddy sticky group named alpha may comprise a sticky group SG having a Netmask of 255.255.255.255 for source addresses timeout of 100 and server farm SF and another sticky group SG having a Netmask of 255.255.255.255 for source addresses and server farm SF. Suitable policies may be configured as illustrated in to associate certain types of traffic with certain sticky groups. For example traffic to VIP 93.1.1.100 port may be directed to sticky group SG and traffic to VIP 93.1.1.100 port may be directed to sticky group SG.

Turning to is a simplified CLI display according to an example embodiment of communication system . A suitable command e.g. sh sticky database buddy to show the sticky database for buddy groups may display the sticky entry real server instance and time to expire flags.

Turning to is a simplified CLI display according to an example embodiment of communication system . A suitable command e.g. sh rserver detail to show real server details may indicate the buddy group associated with the real server across server farms. In the example display real server rs may be associated with server farm sf in a buddy real group blue and with server farm sf in another buddy real group green. 

Turning to is a simplified CLI display according to an example embodiment of communication system . A suitable command e.g. sh serverfarm detail to show server farm details may indicate the buddy groups associated with the server farm. In the example display server farm sf may include real server rs in a buddy real group blue and real server rs in another buddy real group green. 

Turning to is a simplified CLI display according to an example embodiment of communication system . A suitable command e.g. sh stats sticky may be configured to show sticky statistics including the number of buddy sticky groups configured and the number of buddy connections.

Turning to are simplified CLI displays according to an example embodiment of communication system . According to example CLI display a suitable command e.g. sh buddy group may be configured to show a summary of the various buddy groups configured in buddy sticky module including associated server farms and real servers. According to example CLI display a suitable command e.g. sh buddy group Blue may indicate details of the specific buddy group e.g. Blue listed in the command. According to example CLI display a suitable command e.g. sh buddy group detail may indicate details of buddy groups configured in buddy sticky module .

Turning to is a simplified flow diagram illustrating example operations that may be associated with embodiments of communication system . At a first real server e.g. may be associated with a first server farm e.g. attached to a first VIP. At a second real server e.g. may be associated with a second server farm e.g. attached to a second VIP. At the first real server e.g. may be linked with the second real server e.g. in a buddy group e.g. .

Turning to is a simplified flow diagram illustrating example operations that may be associated with embodiments of communication system . At real servers may be specified as being associated with or belonging to server farms. For example real servers and may be associated with server farm real servers and may be associated with server farm . At buddy real groups may be created. For example real servers and may be linked in buddy group real server at server farm may be linked to real server at server farm and so on. At server farms may be specified as being associated with or belonging to sticky groups. For example each server farm and may be associated with corresponding sticky groups. At a buddy sticky group may be created. For example server farms and may be associated with buddy sticky group .

Turning to is a simplified flow diagram illustrating example operations that may be associated with LB module according to embodiments of communication system . At sticky database may be used for buddy sticky entries with an extended data structure LbSticky StickyEntry t to hold a Boolean that differentiates between normal sticky entries e.g. sticky groups and buddy sticky entries e.g. buddy sticky groups . At buddy sticky objects and buddy real objects may be configured to hold sticky groups and real servers together. At buddy lists may be configured under the real server level and the sticky group level. At the infrastructure may be configured to download hybrid buddy sticky group configurations down to LB module . At existing loadbalancer sticky data structures may be modified to hold buddy Boolean and buddy sticky group IDs for example using variables such as lb sticky group info t and lb sticky group stats t. At new real server structure lb buddy real server info t may be created to hold a real server ID and server farm ID chained together under a buddy real chain e.g. buddy real chain .

Turning to is a simplified flow diagram illustrating example operations that may be associated with Cfg Mgr according to embodiments of communication system . At a first object table for maintaining buddy sticky objects may be created. A second object table for maintaining buddy real objects may also be created. At cm sticky group t data structure may be modified to include a buddy sticky group ID and a buddy sticky group Boolean e.g. indicating whether any buddy sticky group has been configured with the sticky group . At a data structure e.g. cm buddy sticky group t to hold the buddy sticky group information may be created to include at least a buddy sticky group ID a list of sticky groups configured with the buddy sticky group ID and a buddy sticky group name.

At a data structure e.g. cm sfarm real t that holds the server farm configuration may be modified to include the buddy real group ID and the buddy real group Boolean e.g. to indicate if the real servers are associated with any buddy real groups . At a data structure e.g. cm buddy sfarm real t to hold the buddy real group information may be created to include at least a buddy real group ID a list of real servers configured with the buddy real group ID and the buddy real group name. At suitable APIs may be added to download buddy sticky groups and buddy real groups to data plane . At suitable APIs may be added to check if configured buddy sticky groups and buddy real groups have been declared or otherwise exist in sticky database .

Turning to is a simplified flow diagram illustrating example operations that may be associated with buddy sticky module according to embodiments of communication system . At buddy real chain per context may be configured. At an example buddy real token blue may be initialized and assigned to buddy real chain . At real servers R and R may be placed under the buddy real blue object. R may belong to server farm SF that may be associated with sticky group SG R may belong to server farm SF that may be associated with sticky group SG.

At a first connection from client may hit e.g. be directed to sticky group SG and server farm SF. At a lookup of sticky database may return a miss e.g. because connection is encountered for a first time . At an IP source sticky entry e.g. sticky entry based on the IP source address may be entered in sticky database based on the real server determined by SLB . For example a hash e.g. C may be calculated and an entry e.g. C R may be entered in sticky database . At a subsequent connection from client may hit sticky group SG and server farm SF. At a lookup of sticky entries in sticky database based on the hash C may return a hit e.g. C R . At sticky packet handler may check if the entry includes a real server in server farm SF. If not as in the example scenario at sticky packet handler may check if the real server in the entry belongs to a buddy real group. In the example scenario R belongs to buddy real blue. At R belonging to SF may be found to belong to the same buddy real group as R from the matching entry. At sticky database may be updated to include real server R .

Turning to is a simplified flow diagram illustrating example operations that may be associated with embodiments of communication system . At buddy sticky objects e.g. named alpha and beta may be configured in buddy sticky module and assigned to buddy sticky chain . At sticky groups SG and SG may be assigned under buddy sticky group alpha e.g. identified by an alpha group ID and sticky groups SG and SG may be assigned under buddy sticky group beta e.g. identified by a beta group ID . SG may include server farm SF which includes real servers R and R SG may include server farm SF which includes real servers R and R SG may include server farm SF which includes real servers R and R G may include server farm SF which includes real servers R and R . Real servers R and R may be linked in a buddy real group named blue R and R may be linked in another buddy real group named red R and R may be linked in yet another buddy real group named green and R and R may be linked in yet another buddy real object named yellow. 

At a first connection from client may hit sticky group SG and corresponding server farm SF. SLB may loadbalance the first connection to real server R. At a sticky entry e.g. C R may be entered in sticky database . At the buddy sticky group ID may be saved into the sticky entry for example as C R alpha in sticky database . At a second connection from client may be directed by SLB to sticky group SG and server farm SF. At a lookup for C in sticky database may find entry C R alpha. At a miss may be returned because the buddy sticky group ID alpha in the matching entry is different from the buddy sticky group ID beta of sticky group SG. At a new entry C R beta may be entered in sticky database .

At a subsequent connection from client may be directed to SG and server farm SF. At a lookup of C in sticky database may return two entries C R alpha and C R beta. At C R alpha may be chosen e.g. because of matching buddy sticky group IDs and a determination may be made that R belongs to buddy real group blue. A lookup of real servers in SF belonging to buddy real group blue may be performed. At R in SF may be found and sticky database may be updated with the corresponding entry including real server R .

Turning to is a simplified flow diagram illustrating example operations that may be associated with Cfg Mgr according to embodiments of communication system . At CP may download the buddy Boolean and buddy real group name or ID into a real server info structure. At CP may invoke a download thread with the buddy real group ID server farm ID and real server ID. At CP may populate the real server info structure to include the real server ID server farm ID buddy real group ID and a double linked list to chain multiple such structures under a common buddy real group token. At Cfg Mgr may populate a sticky group information info data structure with information pertaining to the buddy sticky groups.

At Cfg Mgr may lookup object tables to determine if any buddy sticky group with the group name or ID exists e.g. has already been declared or configured . At Cfg Mgr may create a new group ID e.g. if there are no previously configured buddy sticky groups with the group ID for the buddy sticky group and create a corresponding new buddy sticky object in object tables . At Cfg Mgr may call an API to pull out e.g. retrieve a new buddy sticky type data structure from a global pool and put it in e.g. associate with buddy sticky chain with the ID set by Cfg Mgr . At a bActive flag may be set to true by Cfg Mgr to indicate an active status of the buddy sticky group. At Cfg Mgr may set a dirty flag to invoke a download thread that can update a sticky group stats info data structure in DP and place it under context .

Turning to is a simplified flow diagram illustrating example operations that may be associated with embodiments of communication system . At a connection from client may hit a specific buddy sticky group e.g. SG . At sticky database may be looked up for a matching entry. The matching entry may correspond to a hash e.g. C computed based on desired stickiness considerations for example source IP address. At a determination may be made if a matching entry exists in sticky database . If a matching entry does not exist at a new hash e.g. C may be computed. At an entry e.g. data structure may be picked up e.g. selected from a global pool e.g. a group of data structures or other similar objects . At the selected data structure may be placed in a sticky list of buddy sticky object associated with the buddy sticky group ID. At a sticky count may be incremented by one.

Turning back to if a matching entry is found in sticky database at a determination may be made whether the buddy sticky group ID of the matching entry is similar to the buddy sticky group ID of the sticky group to which the connection was directed at . If the buddy sticky group ID is similar at the buddy real group associated with the real server in the matching entry may be checked to identify another real server in the server farm associated with the sticky group to which the connection was directed at . If the buddy sticky group ID is not similar at the connection may be loadbalanced to any suitable real server in the sticky group and a new entry may be generated in sticky database .

Turning to is a simplified flow diagram illustrating example operations that may be associated with deleting a buddy sticky group according to embodiments of communication system . At the sticky group stats structure which stores statistical information pertaining to the buddy sticky groups may be removed from buddy sticky chain . At substantially all entries belonging to the buddy sticky object may be returned to the global pool e.g. container . In some embodiments the buddy sticky object may not be removed if even a single sticky group is configured therein. In some embodiments returning the entries may include deleting values of parameters and or variables in the corresponding data structure. At the buddy sticky object may be set to inactive.

Note that in this Specification references to various features e.g. elements structures modules components steps operations characteristics etc. included in one embodiment example embodiment an embodiment another embodiment some embodiments various embodiments other embodiments alternative embodiment and the like are intended to mean that any such features are included in one or more embodiments of the present disclosure but may or may not necessarily be combined in the same embodiments. Note also that an application as used herein this Specification can be inclusive of any executable file comprising instructions that can be understood and processed on a computer and may further include library modules loaded during execution object files system files hardware logic software logic or any other executable modules.

In example implementations at least some portions of the activities outlined herein may be implemented in software in for example SLB . In some embodiments one or more of these features may be implemented in hardware provided external to these elements or consolidated in any appropriate manner to achieve the intended functionality. The various network elements e.g. servers SLBs may include software or reciprocating software that can coordinate in order to achieve the operations as outlined herein. In still other embodiments these elements may include any suitable algorithms hardware software components modules interfaces or objects that facilitate the operations thereof.

Furthermore SLB described and shown herein and or their associated structures may also include suitable interfaces for receiving transmitting and or otherwise communicating data or information in a network environment. Additionally some of the processors and memory elements associated with the various nodes may be removed or otherwise consolidated such that a single processor and a single memory element are responsible for certain activities. In a general sense the arrangements depicted in the FIGURES may be more logical in their representations whereas a physical architecture may include various permutations combinations and or hybrids of these elements. It is imperative to note that countless possible design configurations can be used to achieve the operational objectives outlined here. Accordingly the associated infrastructure has a myriad of substitute arrangements design choices device possibilities hardware configurations software implementations equipment options etc.

In some of example embodiments one or more memory elements e.g. memory element can store data used for the operations described herein. This includes the memory element being able to store instructions e.g. software logic code etc. in non transitory computer readable media such that the instructions are executed to carry out the activities described in this Specification. A processor can execute any type of instructions associated with the data to achieve the operations detailed herein in this Specification. In one example processors e.g. processor could transform an element or an article e.g. data from one state or thing to another state or thing.

In another example the activities outlined herein may be implemented with fixed logic or programmable logic e.g. software computer instructions executed by a processor and the elements identified herein could be some type of a programmable processor programmable digital logic e.g. a field programmable gate array FPGA an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM an ASIC that includes digital logic software code electronic instructions flash memory optical disks CD ROMs DVD ROMs magnetic or optical cards other types of machine readable mediums suitable for storing electronic instructions or any suitable combination thereof.

These devices may further keep information in any suitable type of non transitory computer readable storage medium e.g. random access memory RAM read only memory ROM field programmable gate array FPGA erasable programmable read only memory EPROM electrically erasable programmable ROM EEPROM etc. software hardware or in any other suitable component device element or object where appropriate and based on particular needs. The information being tracked sent received or stored in communication system could be provided in any database register table cache queue control list or storage structure based on particular needs and implementations all of which could be referenced in any suitable timeframe. Any of the memory items discussed herein should be construed as being encompassed within the broad term memory element. Similarly any of the potential processing elements modules and machines described in this Specification should be construed as being encompassed within the broad term processor. 

It is also important to note that the operations and steps described with reference to the preceding FIGURES illustrate only some of the possible scenarios that may be executed by or within the system. Some of these operations may be deleted or removed where appropriate or these steps may be modified or changed considerably without departing from the scope of the discussed concepts. In addition the timing of these operations may be altered considerably and still achieve the results taught in this disclosure. The preceding operational flows have been offered for purposes of example and discussion. Substantial flexibility is provided by the system in that any suitable arrangements chronologies configurations and timing mechanisms may be provided without departing from the teachings of the discussed concepts.

Although the present disclosure has been described in detail with reference to particular arrangements and configurations these example configurations and arrangements may be changed significantly without departing from the scope of the present disclosure. For example although the present disclosure has been described with reference to particular communication exchanges involving certain network access and protocols communication system may be applicable to other exchanges or routing protocols. Moreover although communication system has been illustrated with reference to particular elements and operations that facilitate the communication process these elements and operations may be replaced by any suitable architecture or process that achieves the intended functionality of communication system .

Numerous other changes substitutions variations alterations and modifications may be ascertained to one skilled in the art and it is intended that the present disclosure encompass all such changes substitutions variations alterations and modifications as falling within the scope of the appended claims. In order to assist the United States Patent and Trademark Office USPTO and additionally any readers of any patent issued on this application in interpreting the claims appended hereto Applicant wishes to note that the Applicant a does not intend any of the appended claims to invoke paragraph six 6 of 35 U.S.C. section 112 as it exists on the date of the filing hereof unless the words means for or step for are specifically used in the particular claims and b does not intend by any statement in the specification to limit this disclosure in any way that is not otherwise reflected in the appended claims.

