---

title: System and method for secure asynchronous event notification for adaptive streaming based on ISO base media file format
abstract: System and method embodiments are provided for asynchronous event notification and message handling in dynamic adaptive streaming over hypertext transfer protocol (DASH). The embodiments includes sending in a segment file, from a network server to a client, a message box that is configurable for encryption, for scheduling a callback from the client, and with one or more arguments according to a messaging scheme of the message box. The network server further sends a message handling descriptor to the client for reloading a media presentation description (MPD) for obtaining a DASH event. The client then configures a universal resource locator (URL) for the MPD using the message box and the message handling descriptor, and sends the URL back to the network server. After receiving the URL, the network server sends the MPD to the client, which then uses the MPD to request segments of an asynchronous event.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015477&OS=09015477&RS=09015477
owner: FutureWei Technologies, Inc.
number: 09015477
owner_city: Plano
owner_country: US
publication_date: 20130405
---
This application claims the benefit of U.S. Provisional Application No. 61 620 810 filed on Apr. 5 2012 by Alexander Giladi and entitled System and Method for Secure Asynchronous Event Notification for Adaptive Streaming which is hereby incorporated herein by reference as if reproduced in its entirety.

The present invention relates to the field of media streaming and in particular embodiments to a system and method for secure asynchronous event notification for adaptive streaming based on Organization for Standardization ISO base media file format.

Unscheduled or unexpected events referred to herein as asynchronous events can occur in cases of media streaming or downloading e.g. over the Internet or other Internet Protocol IP based networks. Asynchronous events may occur during live broadcast or live streaming or during video on demand VoD content downloading. Asynchronous events are used for digital program insertion such as for advertisement and can also be used for applications such as emergency messaging and blackout management. Targeted advertisement is a revenue source in the current entertainment ecosystem both on the Internet and in the Cable IP television IPTV environment. In the Cable IPTV environment targeted advertisement insertion is standardized via SCTE 35 via mark up and SCTE 30 130 via advertisement server interaction and is available from multiple vendors.

Schedule changes may occur in live events. For example during the 2011 Canadian Grand Prix of Formula One racing a heavy rainstorm hit the racing circuit and the race was stopped at about 30 minutes from start and then restarted after more than two hours. Such situations trigger schedule changes by broadcasters for example to insert advertisement or other asynchronous events. The broadcasters may run alternative programming e.g. advertisement during the unexpected delay or after cancellation of the main broadcast event. In another example if a soccer or hockey game score is a tie the game goes into overtime. Overtime may last anywhere between minutes and hours with several breaks and scheduled content may be delayed or canceled. There is a need for an efficient adaptive streaming scheme to handle asynchronous events in such situations such as to insert advertisement emergency messaging or blackout alerts.

In accordance with an embodiment a method for event notification in dynamic adaptive streaming over hypertext transfer protocol DASH includes sending in a segment file from a network server to a client a message box that is configurable for encryption for scheduling a callback from the client and with one or more arguments according to a messaging scheme of the message box. The method further includes sending a message handling descriptor to the client for reloading a media presentation description MPD for obtaining a DASH event receiving from the client a universal resource locator URL for the MPD wherein the URL is configured using the message box and the message handling descriptor and sending the MPD to the client.

In accordance with another embodiment a method for event notification in DASH includes receiving at a client terminal in a segment file from a network component a message box that is configurable for encryption scheduling a callback from the client and with one or more arguments according to a messaging scheme of the message box. The method further includes receiving a message handling descriptor for reloading a MPD for obtaining a DASH event configuring a URL for the MPD using the message box and the message handling descriptor sending the URL for the MPD and receiving the MPD for the DASH event.

In accordance with another embodiment a network component supporting event notification in DASH includes a processor and a computer readable storage medium storing programming for execution by the processor. The programming includes instructions to send in a segment file to a client a message box that is configurable for encryption for scheduling a callback from the client and with one or more arguments according to a messaging scheme of the message box send a message handling descriptor to the client for reloading a MPD for obtaining a DASH event receive from the client a URL for the MPD wherein the URL is configured using the message box and the message handling descriptor and send the MPD to the client.

In accordance with yet another embodiment a user device supporting event notification in DASH includes a processor and a computer readable storage medium storing programming for execution by the processor. The programming includes instructions to receive in a segment file from a network component a message box that is configurable for encryption scheduling a callback from the user device and with one or more arguments according to a messaging scheme of the message box receive a message handling descriptor for reloading a MPD for obtaining a DASH event configure a URL for the MPD using the message box and the message handling descriptor send the URL for the MPD and receive the MPD for the DASH event.

The making and using of the presently preferred embodiments are discussed in detail below. It should be appreciated however that the present invention provides many applicable inventive concepts that can be embodied in a wide variety of specific contexts. The specific embodiments discussed are merely illustrative of specific ways to make and use the invention and do not limit the scope of the invention.

Dynamic Adaptive Streaming over Hypertext Transfer Protocol DASH also known as MPEG DASH is developed to enable high quality streaming of media content over the Internet delivered from conventional Hypertext Transfer Protocol HTTP web servers.

The DASH architecture includes one or more media servers that provide media content such us in the form of segment files according to Organization for Standardization ISO Base Media File Format BMFF . The DASH architecture includes one or more clients that comprise user equipment or devices such as set top boxes STBs desktop computers laptop computers tablet computers smartphones or any other type of mobile personal devices. The clients are configured to receive according to DASH the media content from the servers over any access network e.g. the Internet a wireless local area network WLAN a WiFi network or hotspot a cellular network a cable infrastructure a fiber optic backbone or access network or combinations thereof. To receive content using HTTP the clients need to first request the content.

In the DASH architecture the original content in the server can be encoded into media streams e.g. video streams at different rates. A video or other media content can be segmented into a plurality of segments that can be streamed individually and independently from the server to a client over the access network . The servers also provide media presentation description MPD corresponding to video media files e.g. for each group of segment files of a video or program. The servers also provide universal resource locators URLs for the MPD files to indicate the location of the MPD files in the servers or network .

The MPD is sent from the server to the client and describes a manifest e.g. a list of the available content e.g. content segments its various alternatives URL addresses e.g. of content segments and other characteristics. The MPD is obtained by the DASH client to play content. The MPD can be delivered from a content server to the client using HTTP. By parsing the MPD the client learns about the content e.g. a program timing content or media availability media types resolutions minimum and maximum bandwidths the existence of various encoded alternatives of multimedia components accessibility features and required digital rights management DRM media component locations on the network and other content characteristics. The media content e.g. on demand video or a broadcast program is divided into a plurality of addressed segments that can be forwarded separately each representing a chunk or portion of the content and has a corresponding URL and duration indicated in the MPD.

Using the information in the MPD the client selects the appropriate encoded alternative and starts streaming the content by fetching the segments of content using HTTP GET requests. For example the information includes the locations of the files segments in the servers and or network . From the MPD information the client can also determine the video rate based on network conditions for the client e.g. determine which segments files to get that match a suitable download rate .

Further the client can get the MPD file periodically or when needed to adjust the media download or streaming rate. To implement asynchronous events the manifest in the MPD is reloaded to the client . Content reloading can be provided by server side event handling e.g. a server inserts an advertisement and by using segment URLs on the client side to get the inserted event. DASH provides the MPD location URL and update frequency which together can be used for reloading the manifest by polling from the client side . However the DASH approach to reload the MPD location URL introduces unwanted delay or undesired frequent reload attempts. The DASH defines an ISO file formatlabel lseg which when present within a styp box in a segment file identifies the last segment of a period of the MPD. The styp box may be a code e.g. syntax in a segment file that is sent from a server to a client . The MPD comprises a plurality of periods where a period is a program or content interval along the time axis. Each period has a starting time and duration. For example an advertisement segment or multiple advertisement segments can be inserted as a period or more. When detected the period effectively ends and a next period can start. If there are no additional periods then a MPD reload or update is triggered.

This DASH approach while sufficient for several purposes suffers from multiple issues. One issue is that since the MPD URL does not change MPDs are fetched always from the same URL same location . Further any event designated by lseg is immediate meaning it has two second segments and an expected schedule change. For such event clients have up to two seconds to update the MPD in order to be able to tune into the announcement. This creates a flood of requests due to such high frequency which could cause delays or network congestion. Another issue is that there may be more than one type of possible events e.g. advertisement schedule change blackout emergency alert or others . Handling events that are known ahead of time such as advertisements and emergency messaging may need extra MPD reloads. Another issue is that in case of personalized content a client specific MPD limits scalability. Further the DASH approach above does not allow streaming or downloading multiple events at the same time for a client .

A DASH based DECE CSF proposal by Microsoft addresses some of these issues above by adding a message box mesg to the segment file e.g. at the beginning of the segment . The mesg box has a unique message scheme or structure and message identification. Interpreting the mesg box at the client can trigger the client to realize that the MPD is outdated and hence reload or update the MPD using a new URL. The proposal also adds an extra scheme that forces a MPD reload and also provides an optional new MPD URL. However this proposal also suffers from several issues. First the box leaves message timing and handling undefined such that a client cannot handle a message unless the client knows the message scheme. This creates a possibility of clients that are able to play the content but for example are unable to display an emergency message with the content. A second issue is that it is difficult to distinguish between events inserted by different entities. Further in this approach the MPD URL update message allows a simple attack by replacing a valid URL with a malicious one.

System and method embodiments are provided for adaptive streaming using DASH. The embodiments provide an asynchronous event handling framework in adaptive streaming. The embodiments include extending the syntax of the message box mesg by adding uniform encryption scheduling and argument interface. An additional MPD functionality is added that allows implementation of rich representational state transfer REST application programming interfaces APIs without explicit client knowledge of message types and schemes. This means that the client can use the information in the mesg box to configure a URL that can be interpreted on the server side as an operation. Extending the message box and adding this MPD functionality enable generic asynchronous stream event handling with DASH MPD and ISO BMFF. ISO BMFF currently does not have such functionality. These features also add security and protection from common attacks to the event handling mechanism and the functionality for forcing change of content played by the DASH client. The added functionalities can be used to implement advertisement insertion targeted advertisement emergency messaging blackout handling and or other events e.g. in cable IPTV telecommunication systems content delivery networks CDNs DASH systems or other suitable systems.

In an embodiment a generic event notification message structure is configured by extending the ISO file format for the message box as follows 

message scheme URI this is a unique identifier of a messaging scheme or structure for the message box. This identifier is used to find the correct message handler for the message box as described below 

message scheme version this field or parameter is the version of the above scheme is encrypted if this field is set to 1 then the message information is encrypted starting from the message id field 

is cancelled this field indicates that message callback form client to server network with a given message identifier message id is cancelled. The callback message information is discarded if there is no active message with message id. A callback message is considered active until the callback is completed schedule this field indicates scheduling information that is configurable as shown in Table 1 below message id this is a unique identifier of a given message box IsEncrypted this field indicates an encryption state e.g. as defined in ISO IEC 23001 7 IV size this field is the initialization vector size e.g. as defined in ISO IEC 23001 7 KID this is an identifier of a key used for encryption of the message box InitializationVector IV size this is an initialization vector md5sum this field indicates a MD5 sum of the encrypted message. It may be needed in order to ensure the correctness of a decrypted message and ntp time this indicates a callback timing for the scheduled message callback and is used according to the schedule field as shown in Table 1.

Additionally a MessageHandler element is configured and used for handling the mesg box above properly at the client. Handling the mesg box includes decrypting and encrypted mesg box and optionally indicating specific message scheme information that are not provided in the mesg box. The MessageHandler element includes a plurality of attributes and is sent in a descriptor as shown below from the client network to the client and processed by the client with the mesg box to generate a suitable MPD URL according to the event . There can be more than one message handling descriptor comprising a MessageHandler element and sent from server to client. The correct descriptor for a received mesg box at the client is found by matching a value of a schemeIdUri attribute of the MessageHandler with the value of the message scheme URI field in the mesg box. Table 2 shows attributes that are used in the MessageHandler element.

The messageCallbackUrTemplate attribute of the MessageHandler may be based in the message handling descriptor on at least one of the template variables MessageID KeyID and Argv N which can be used by the client for configuring A MPD URL to reload or update the MPD at the client. The template variables can be assigned values at the client from the fields in the mesg box as described in Table 3.

In an embodiment to force change of content played by the DASH client MPD update or reload is used as defined by the server or network to the client in a MessageHandler element or descriptor e.g. in a message with the following uniform resource name URN urn mpeg dash mpdupdate . The corresponding MessageHandler element for handling the mesg box includes the messageCallbackUrTemplate attribute but not the value attribute. A HTTP GET request for a URL constructed from the messageCallbackUrTemplate attribute returns a valid MPD. Similar rules as in ISO IEC 23009 1 sec. 5.4 apply to MPD update via this URL.

In an embodiment the arguments in the mesg box can be mapped to a SCTE 35 segmentation descriptor as follows 

In another embodiment a simpler and maybe less efficient mapping between the arguments in the mesg box and a message descriptor can be established as follows 

where the messageCallbackUrlTemplate includes the variable Arg 0 . In such a case message encryption is recommended in order to prevent attacks e.g. man in the middle attacks that can result in maliciously constructed URLs or HTTP queries.

The CPU may comprise any type of electronic data processor. The memory may comprise any type of system memory such as static random access memory SRAM dynamic random access memory DRAM synchronous DRAM SDRAM read only memory ROM a combination thereof or the like. In an embodiment the memory may include ROM for use at boot up and DRAM for program and data storage for use while executing programs. In embodiments the memory is non transitory. The mass storage device may comprise any type of storage device configured to store data programs and other information and to make the data programs and other information accessible via the bus. The mass storage device may comprise for example one or more of a solid state drive hard disk drive a magnetic disk drive an optical disk drive or the like.

The processing unit also includes one or more network interfaces which may comprise wired links such as an Ethernet cable or the like and or wireless links to access nodes or one or more networks . The network interface allows the processing unit to communicate with remote units via the networks . For example the network interface may provide wireless communication via one or more transmitters transmit antennas and one or more receivers receive antennas. In an embodiment the processing unit is coupled to a local area network or a wide area network for data processing and communications with remote devices such as other processing units the Internet remote storage facilities or the like.

While this invention has been described with reference to illustrative embodiments this description is not intended to be construed in a limiting sense. Various modifications and combinations of the illustrative embodiments as well as other embodiments of the invention will be apparent to persons skilled in the art upon reference to the description. It is therefore intended that the appended claims encompass any such modifications or embodiments.

