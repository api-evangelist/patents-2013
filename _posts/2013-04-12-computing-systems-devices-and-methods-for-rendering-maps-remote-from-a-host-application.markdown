---

title: Computing systems, devices and methods for rendering maps remote from a host application
abstract: The present disclosure relates to rendering interactive displays remote from a host application. More specifically, the present disclosure relates to rendering interactive displays, such as interactive geographic map displays and computer game displays, remote from a corresponding host application, such as a web page for a municipality, a university, a computer game, a business, etc., that generates a display which includes the remotely rendered interactive display.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08698824&OS=08698824&RS=08698824
owner: Google Inc.
number: 08698824
owner_city: Mountain View
owner_country: US
publication_date: 20130412
---
The present disclosure relates to rendering interactive displays remotely from a corresponding host application. More specifically the present disclosure relates to rendering an interactive display such as an interactive geographic map display using a dynamic rendering application that is separate from a corresponding host application.

Host applications such as applications associated with web pages often include interactive displays such as interactive geographic map displays and computer game displays. The interactive displays cooperate with a user input device to facilitate user interaction with the associated host application. Interactive displays may be rendered locally as an integral portion of an associated host application using data that is retrieved from a remote data source. Alternatively an interactive display may be rendered locally as an integral portion of an associated application using data that is stored locally.

Geographic mapping applications represent some of the most frequently used computer based applications. Non interactive geographic map displays are often statically generated as an integral portion of a host application such as applications associated with web pages related to municipalities businesses universities resorts landmarks nature areas parks computer games etc. in lieu of providing interactive displays.

Rendering interactive displays locally as an integral portion of an associated host application requires adding a significant amount of display rendering code to the host application. Addition of display rendering code to a host application increases the amount of memory required to store the host application. Furthermore when display rendering code is incorporated within a host application the host application may require updating when corresponding data used by the display rendering code to render a display is updated.

A map may be displayed in a first host application executing on a computing device but completely rendered by a second renderer application executing on the computing device. A static library of the host application may contain code that 1 sets up a surface for drawing a map e.g. a OpenGL surface on the computing device 2 forwards all the user interactions with the surface e.g. events such as touch pan zoom etc. to the renderer application 3 receives commands e.g. OpenGL rendering commands from the renderer application and draws the map on the surface and 4 provides a set of API that forwards the calls e.g. using Android inter process communication IPC or any other communication that would provide an interactive and fast user experience to the renderer application such as an API to add markers and other graphical elements to the drawn map. The static library may be a dump player that performs forward actions for the events and API calls on the host application then plays the commands from the renderer application. The renderer application may be a regular application that allows any host or third party application to connect to it and render i.e. convert received vector data into drawing commands the contents of a map. The renderer application also keeps track of the state of a map e.g. what markers have been added the position and zoom of the map any polylines that have been added what other elements have been added to the map etc. so that any changes or updates to the map may be added without losing the previous data.

Essentially one part of the host application may be completely rendered by the renderer application that is outside of the control of the host application. This may allow the host application to be smaller in size because the static library may be small and any errors or updates to the renderer may be added without interfering with the host application. Further the rendering surface may be a canvas within any application to display interactive surfaces other than maps.

A method may incorporate interactive geographic map displays within interfaces of applications executing on a computing device. The method may retrieve map data corresponding to a map portion from a map database via a computer network. The map data may include specifications for a plurality of elements to display within the map portion. The method may also generate a set of commands using a map rendering module to render the map portion using the retrieved map data and generate a display rendering surface within a graphical interface of a host application executing on the computing device using instructions of a static library of a host application. The method may further draw the map portion within the display rendering surface using the set of commands and the instructions of the host application static library. The map rendering module may be stored in a first memory of the computing device and the host application with the static library may be stored in a second memory of the computing device.

In another embodiment a method for rendering a map within a host application by a rendering application includes generating a display area within a user interface of a host application. The host application is stored in a first memory of a computing device and the host application includes a static library. The method further includes generating a drawing surface within the display area using the static library. The method also includes rendering the map portion using a rendering application stored in a second memory of the computing device. The method further includes drawing the map portion within the drawing surface of the display using the rendered map portion. The host application with static library and the rendering application cooperate to draw the map portion within the drawing surface of the display.

In another embodiment a computing device configured for rendering a map portion within a user interface display includes a display device configured to present the user interface display. The computing device also includes a host application with static library module stored in a first memory of the computing device. The host application including instructions that when executed on a processor of the computing device generate a drawing surface within the user interface display using the static library module. The computing device further includes a map rendering module stored in a second memory of the computing device wherein the map rendering module includes instructions that when executed on a processor of the computing device render the map portion. The computing device also includes a map portion drawing module stored on a memory that when executed on a processor draws the rendered map portion within the drawing surface of the display.

In a further embodiment a tangible computer readable medium including non transitory computer readable instructions stored thereon for incorporating a map portion within a display associated with a host application includes a static library module that when executed on a processor generates a drawing surface within the display and causes a rendering application to create rendered map portion data. The tangible computer readable medium also includes a rendered map portion data retrieval module that when executed on a processor retrieves the rendered map portion data. The tangible computer readable medium further includes a map portion drawing module that when executed on a processor draws the map portion within the drawing surface of the display using the rendered map portion data.

In a still further embodiment an apparatus may incorporate interactive geographic map displays within interfaces of applications executing on a computing device. Retrieval means may retrieve map data corresponding to a map portion from a map database via a computer network. The map data may include specifications for a plurality of elements to display within the map portion. Generating means may generate a set of commands using a map rendering module to render the map portion using the retrieved map data and generate a display rendering surface within a graphical interface of a host application executing on the computing device using instructions of a static library of a host application. Drawing means may further draw the map portion within the display rendering surface using the set of commands and the instructions of the host application static library. The map rendering module may be stored in a first memory of the computing device and the host application with the static library may be stored in a second memory of the computing device.

In another embodiment means for incorporating a map portion within a display associated with host application means includes static library means that generates a drawing surface within the display and causes rendering application means to create rendered map portion data. Means for incorporating a map portion within a display associated with host application means also includes rendered map portion data retrieval means for retrieving the rendered map portion data. Means for incorporating the map portion within a display associated with host application means further includes map portion drawing means that draws the map portion within the drawing surface of the display using the rendered map portion data.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

The systems devices and methods of the present disclosure incorporate a static library within host applications such as host applications associated with web pages for universities municipalities businesses computer games etc. which integrate map portions that are rendered by a rendering application that is separate from the host application. Corresponding map portion rendering code is incorporated in the rendering application. Thereby the host application does not require map portion rendering code.

Generally a map portion in combination with a user input device e.g. a touch screen display or a mouse facilitates user interaction with a corresponding host application. For example a host application associated with a university may generate a web page for display on touch screen display. A map portion such as an interactive geographic map display may be included within the web page display. The map portion e.g. interactive geographic map display may include a navigation interface overlaying the geographic map. When for example a user touches the touch screen display i.e. interacts with the display proximate the navigation interface the geographic map display portion may zoom into a specific potion of the geographic map. More broadly the user may interact with the map portion e.g. the interactive geographic display portion to obtain geographically related information in regard to the university.

The static libraries of the present disclosure require a relatively small amount of memory in comparison to the memory required to store rendering code associated with rendering interactive displays. Advantageously host applications implementing the static libraries of the present disclosure retain interactive features such as touch tap zooming panning searching marker adding etc. associated with maps. A further advantage of the static libraries of the present disclosure is that a plurality of host applications which individually incorporate a static library may receive rendered map data from a rendering application that is separate from any one of the plurality of host applications.

Generally the static libraries of the present disclosure which are described in detail herein with reference to include instructions that generate a display rendering surface e.g. an open graphics library OpenGL surface an Android canvas etc. within a display which is generated by an associated host application. The static libraries also forward user interaction events to a rendering application that is separate from the host application receive display rendering commands from the rendering application and provide a set of application programming interfaces APIs that forward drawing calls to the rendering application.

With implementation of the static libraries of the present disclosure display rendering code associated with fetching display data implementing the associated display drawing operations and responding to interaction events on a corresponding display such as touch and tap events is not needed within the host application. Advantageously when the display rendering code is not incorporated in a host application the display rendering code may be updated without changing the host application.

With further reference to the display may include map portion view selection interface that allows a user of the client device to select a desired view e.g. an aerial view or a street level view of the map portion . The display may further include a navigation interface overlaying the map portion . The navigation interface in cooperation with a user input device e.g. user input device of may allow a user to navigate around and otherwise interact with the map portion . The display may also include a feature selection area which may include a plurality of features such as information booths parking lots student housing fraternity houses libraries etc. Each of the features may include an associated click box for example which a user of the client device may select. When the corresponding box is selected by the user an associated feature or marker is displayed overlaying the map portion . The display may also include a map search interface that enables a user to enter various search information via a user input device such as a name of building a street name etc. When the host application finds a matching feature corresponding to the search information the matching feature or marker may be displayed overlaying the map portion . The display may further include a side bar which may for example include a list of related items such as related geographic locations sister campuses airports in the vicinity hotels etc. When a user selects any one of the items from the side bar the map portion may be dynamically revised to depict information such as a map related to the selected item. The display may also include an information entry space which allows a user to enter for example a street address. When the user enters a street address the map portion may display directions from the street address to central campus for example.

With yet further reference to the display may include a driving directions and other maps selection which allows a user to obtain desired directions and associated maps. The display may also include receive a map selection which allows a user to indicate her desire to obtain a map. The display may further include a visitor parking selection which allows a user to obtain information related to parking lots for use by visitors. For example the visitor parking lots may be highlighted within a geographic map display within the map portion .

The details associated with a computer system for rendering a map using a rendering application separate from a host application are now described beginning with reference to . depicts a high level block diagram of a computer system that implements communications between a client device and a remote computing device to provide information to a user of the client device . The client device is communicatively coupled to the remote computing device via a network .

For clarity only one client device is depicted in . While depicts only one client device it should be understood that any number of client devices may be supported and that each client device may be any appropriate computing device such as a desk top computer a mobile telephone a personal data assistant a lap top computer a vehicle based computer system etc. The client device may include a memory and a processor for storing and executing respectively a module . The module stored in the memory as a set of computer readable instructions may be related to a host application e.g. the host application associated with the display of a static library and a rendering application that when executed on a processor causes a map portion to be rendered by the rendering application . As described in detail herein the static library facilitates interaction between the host application and the rendering application . As further described herein with reference to a portion of the memory may be shared by the host application with static library and a rendering application .

The processor further executing the module may cause the rendering application to retrieve map data e.g. map data of from a map database . The rendering application may render a map portion based on the map data retrieved from the map database . A host application with static library cooperating with the rendering application may draw the map portion within the drawing surface .

The processor further executing the module may facilitate communications between the computing device and the client device via a network interface a client device network connection and the network . The client device may also include a geopositioning device such as a global positioning system receiver or a WiFi positioning device for determining a geographic location of the client device . The client device may include a display device which may be any type of electronic display device such as a liquid crystal display LCD a light emitting diode LED display a plasma display a cathode ray tube CRT display or any other type of known or suitable electronic display. The display device may exhibit a display which depicts a map portion within a drawing surface of the display . The client device may include a user input device such as a touch input keyboard that provides a mechanism for a user of the client device to launch a host application to enter related information and to interact with a map portion . The user input device may be configured as an integral part of a display device such as a touch screen display device. The network interface may be configured to facilitate communications between the client device and the remote computing device via any hardwired or wireless communication network including for example a hardwired Ethernet connection or a wireless LAN MAN or WAN WiFi the Internet or any combination thereof. Moreover the client device may be communicatively connected to the remote computing device via any suitable communication system such as via any publicly available or privately owned communication network including those that use wireless communication structures such as wireless communication networks including for example wireless LANs and WANs satellite and cellular phone communication systems etc.

The computing device may include a memory and a processor for storing and executing respectively a module . The module stored in the memory as a set of computer readable instructions facilitates applications related to dynamically rendering a map portion . The module may also facilitate communications between the computing device and the client device via a network interface a remote computing device network connection and the network and other functions and instructions.

The computing device may also include an interactive display or map database such as a geographic map database having data e.g. interactive display data or map data of representative of a geographic map and associated map features. While the map database is shown in as being contained within the remote computing device it should be understood that the map database may be located within separate remote servers or any other suitable computing devices communicatively coupled to the network and or the client device . Optionally portions of the display database may be associated with memories that are separate from one another such as a memory of the client device .

Turning now to a block diagram of a data structure is depicted. At least portions of the data structure may be retrieved or transmitted when the processor executes any one of the modules or when the processor executes any one of the modules . The data structure may include map data representative of a map . The map data may include geographic map data having various features and coordinate values e.g. x y z coordinates indicating positions that define relative locations municipalities counties states continents roadways bike paths sidewalks oceans lakes rivers waterways etc. Alternatively map data may include data representative of various interactive scenes within a computer game or any other interactive display.

The data structure may also include user input data or interactive display control command data representative of commands events and user inputs associated with user interaction with a map generated by an associated host application. For example the interactive display control command data may include events or user inputs associated with an interactive geographic map portion . Alternatively the interactive display command data may include data representative of commands associated with user interaction with a computer game or any user inputs associated with a map . The data structure may further include rendered map data such as data representative of a rendered interactive geographic map display or an interactive scene associated with a computer game or any other rendered interactive display.

Turning now to a block diagram of a client device is depicted. As described in detail herein the client device may be suitable for use as a client device of . The client device may include various modules stored as tangible computer executable instructions on a memory . A processor similar to the processors of may execute the instructions of the modules to incorporate a map portion within a host application display and to facilitate user interaction with the map portion . Particularly when a user of a host application display wishes to interact with map portion the processor executes at least a portion of the instructions of the modules .

While the modules may be stored on the memory and implemented as a portion of the module it should be understood that the modules or a portion thereof may be stored on the memory and implemented as at least a portion of the module . While modules may be executed by either processor or the modules will be described herein as being executed by processor .

In any event the processor may execute a host application with static library module in response to a user launching a host application such as an application associated with a university web page or a computer game web page or the like. The processor executing the host application with static library module may establish a map drawing surface such as an open graphics library OpenGL surface or an Android canvas associated with a host application map portion of a corresponding host application display . The processor may execute a user interaction module that in cooperation with a user input device allows a user of a host application to interact with a map portion of the display . The user interaction module may form at least a portion of a static library .

The processor may execute a map data retrieval module that retrieves map data from a map database in a vector format. The map data may include data that describes shapes line thickness fill colors text labels and other attributes of elements e.g. roads buildings landmarks borders etc. for display within the map portion . For example the elements within a map portion may be generated in a vector graphics format that specifies various geometric shapes e.g. using mathematical descriptions of points and paths connecting the points and indicates how the geometric shapes should be positioned for rendering the various map elements. Thus rather than specifying each pixel that makes up a raster image of a line segment a vector based description within the map data of the line segment may specify the two endpoints of the line segment and indicate that the two endpoints are connected by a straight line. Vector based descriptions of map elements may be referred to in this document as vector descriptors or simply vectors and a set of one or several vector descriptors may be referred to as vector data or map data .

The processor may execute a map rendering module that renders a map portion using the retrieved map data . The map rendering module may form at least a portion of a rendering application . For example rendering the retrieved map data may include causing the processor to generate a set of open graphics library OpenGL commands e.g. serialized GL commands of respectively using the retrieved map data .

With further reference to the processor may execute the map portion drawing module that draws the map portion within the map drawing surface . In one embodiment the map portion drawing module may draw the map portion using the set of OpenGL commands created by the map rendering module . The map portion drawing module may form at least a portion of a static library . For example the processor executing the map portion drawing module may draw an interactive geographic map within the map drawing surface using the open graphics library OpenGL commands .

Turning now to a block diagram of a rendering engine is depicted. As described in detail herein the rendering engine may implement various modules stored on a memory . A processor similar to the processors may execute the modules to provide rendered map data to a static library of a host application to incorporate a map portion within a host application display . In particular when the processor executes at least a portion of the instructions of the modules a rendering application may render a map portion and a static library may draw the rendered map portion within the map portion drawing surface .

While the modules may be stored on the memory and implemented as a portion of the module it should be understood that the modules or a portion thereof may be stored on the memory and implemented as at least a portion of the module . While modules may be executed by either processor or the modules will be described herein as being executed by processor .

In any event the processor may execute the map control command retrieval module to retrieve interactive display control command data . The interactive display control command data may be representative of various user initiated events such as touching and tapping a corresponding touch screen display . The processor may execute the map data retrieval module that retrieves map data from the map database in response to the retrieve interactive display control command data .

With further reference to the processor may execute a rendered map data creation module that creates rendered map data using the retrieved map data . The processor may execute a rendered map data transmission module that transmits the rendered map data to a static library of a host application or a shared memory between the host application and the rendering engine to draw the map portion within the map portion drawing surface of a display . The rendering engine may track the state e.g. markers added to an interactive geographic map display of the map portion .

With reference now to a flow diagram depicts a method of rendering the map portion . The method may be implemented within any suitable computing device such as either of the client devices of and respectively. It should be understood that the modules of may be tangible computer executable instructions stored on a memory and executed by a processor similar to processor of to implement the method .

The processor may retrieve interactive display control command data e.g. user input data at block . The processor may retrieve further map portion data from the map database block . The processor may create further rendered map data block . The processor may communicate the further rendered map data to a host application with static library .

With reference now to a flow diagram depicts a method of incorporating the map portion within a display associated with a host application. The method may be implemented within any suitable computing device such as either of the client devices of and respectively. It should be understood that the modules of may be tangible computer executable instructions stored on a memory and executed by a processor similar to processor of to implement the method .

The processor may launch a host application e.g. host application associated with display of having a static library incorporated within the host application block . The processor may generate the map portion drawing surface with a display associated with the host application block . The processor may communicate rendered map portion data from a rendering engine to the host application with static library block . The processor may draw the map portion within the map portion drawing surface using the rendered map portion data block . The processor may retrieve interactive display control data representative of user interaction with the interaction display portion of display block . The processor may determine if a user has interacted with the map portion of display block . If the processor determines that the user has not interacted with the map portion of display block the processor returns to block . If he processor determines that the user has interacted with the map block the processor returns to block .

As a specific example the processor implementing a host application with static library and executing the modules may 1 set up the map portion drawing surface e.g. an OpenGL context for drawing the map portion 2 forward interactive display portion control command data representative of all the events such as touch to a rendering application e.g. rendering engine of 3 receive interactive display portion control command data e.g. rendering and drawing commands from the render application and draw the map portion on the map portion drawing surface and 4 provide a set of application programming interfaces APIs that forward corresponding draw calls to the renderer application e.g. an API to add a marker to an interactive geographic map .

Turning now to a sequence diagram is depicted having a static library e.g. an android application package file APK interacting with a dynamic rendering application e.g. a buddy android application package file APK . As described above the static library may be incorporated within a host application e.g. a host application which generates a display of . The dynamic rendering application may provide data e.g. rendered map data of via the static library to the host application. The host application cooperating with the static library may generate the map portion within a display using the data provided by the dynamic rendering application .

With further reference to the static library may include an interactive drawing surface e.g. an OpenGL surfaceview and a renderer proxy . The interactive drawing surface may be implemented as the map portion drawing surface of . The dynamic rendering application may include a shared memory and a rendering service e.g. a MapView service . The static library begins a process of acquiring rendered map portion data by first communicating user interactions e.g. touch events on a corresponding touch screen display from the interactive drawing surface to the renderer proxy via a touchEvent e function . Second the static library communicates the touchEvent e function from the renderer proxy to the rendering service of the dynamic rendering application using inter process communications IPC . Third the interactive drawing surface communicates a render gl function to the renderer proxy . Fourth the static library communicates the render gl function from the renderer proxy to the rendering service of the dynamic rendering application using inter process communication IPC . In response to receiving the touchEvent e function and the render gl function from the static library the rendering service of the dynamic rendering application retrieves map data and creates rendered map data using the retrieved map data . Fifth the rendering service communicates rendered map data e.g. serialized OpenGL commands to the shared memory via a writeData function . Sixth the rendering service of the dynamic rendering application communicates a complete render function to the renderer proxy of the static library using inter process communication IPC . Seventh the renderer proxy communicates a readData function to the shared memory and retrieves the rendered map data from the shared memory . Last the renderer proxy draws the map portion within the interactive drawing surface e.g. map portion drawing surface of based on the runGLCommands function and using the rendered map data .

Turning now to a sequence diagram is depicted having a static library e.g. an android application package file APK and a dynamic rendering application e.g. buddy android application package file APK . Generally the sequence diagram represents a modification to a portion of the sequence diagram . In particularly implementation of the sequence diagram allows for communication of commands from the static library to the dynamic rendering application which require a response from the dynamic rendering application e.g. a glGetPointery command . Similar to the static library the static library may include an interactive drawing surface e.g. an OpenGL surfaceview and a renderer proxy . Similar to the rendering application the dynamic rendering application may include a shared memory and a rendering service e.g. a MapView service . The static library first communicates a render gl function from the interactive drawing surface to the renderer proxy . Second the static library communicates the render gl function from the renderer proxy to the rendering service of the dynamic rendering application using inter process communications IPC . In response to receiving the render gl function the dynamic rendering application retrieves map data and creates rendered map data using the retrieved map data . Third the rendering service communicates rendered map data e.g. serialized OpenGL commands to the shared memory via a writeData function . Fourth the rendering service of the dynamic rendering application communicates a runCommands function to the renderer proxy of the static library using inter process communication IPC . Fifth in response to receiving the runCommands function from the rendering service the renderer proxy of the static library communicates a readData function to the shared memory and retrieves the rendered map data from the shared memory . Sixth the renderer proxy of the static library draws the map portion within the drawing surface e.g. map portion drawing surface of based on the runGLCommands function and using the rendered map data . Seventh the renderer proxy communicates a writeData LastCommandResults function to the shared memory . Eighth the render proxy of the static library communicates a Complete runCommands function to the rendering service of the dynamic rendering application using inter process communication IPC . Last the rendering service of the dynamic rendering application communicates rendered map data e.g. serialized OpenGL commands to the shared memory via a writeData function .

Turning now to a sequence diagram is depicted having a host application with static library e.g. an android application package file APK and a dynamic rendering application e.g. buddy android application package file APK . Generally the sequence diagram represents an addition to the sequence diagram . In particular implementation of the sequence diagram allows for addition of markers e.g. highlighted areas within the map portion . The host application with static library may include host application code map fragment portion and a marker wrapper portion . Similar to the dynamic rendering application the dynamic rendering application may include a rendering service e.g. a MapView service . The host application with static library initiates generation of a marker by first communicating an addMarker options function from the host application code to the map fragment portion . Second the map fragment portion communicates a create function to the marker wrapper portion . Third the map fragment portion of the static library communicates the addMarker function to the rendering service of the rendering application using inter process communication IPC . Fourth the rendering service of the rendering application implements the updateState function that adds a marker to the rendered map data . Fifth the rendering service of the rendering application communicates a Result Marker ID function to the map fragment portion of the host application with static library using inter process communication IPC . Sixth the map fragment portion communicates a setRemoteid function to the marker wrapper portion . Finally the map fragment portion communicates a wrapperMarker obj function to the host application code .

Throughout this specification plural instances may implement components operations or structures described as a single instance. Although individual operations of one or more methods are illustrated and described as separate operations one or more of the individual operations may be performed concurrently and nothing requires that the operations be performed in the order illustrated. Structures and functionality presented as separate components in example configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements fall within the scope of the subject matter herein.

Additionally certain embodiments are described herein as including logic or a number of components modules or mechanisms. Modules may constitute either software modules or hardware modules. A hardware module is tangible unit capable of performing certain operations and may be configured or arranged in a certain manner. In example embodiments one or more computer systems e.g. a standalone display or server computer system or one or more hardware modules of a computer system e.g. a processor or a group of processors may be configured by software e.g. an application or application portion as a hardware module that operates to perform certain operations as described herein.

In various embodiments a module may be implemented mechanically or electronically. For example a module may comprise dedicated circuitry or logic that is permanently configured e.g. as a special purpose processor such as a field programmable gate array FPGA or an application specific integrated circuit ASIC to perform certain operations. A module may also comprise programmable logic or circuitry e.g. as encompassed within a general purpose processor or other programmable processor that is temporarily configured by software to perform certain operations. It will be appreciated that the decision to implement a module mechanically in dedicated and permanently configured circuitry or in temporarily configured circuitry e.g. configured by software may be driven by cost and time considerations.

Accordingly the term module should be understood to encompass a tangible entity be that an entity that is physically constructed permanently configured e.g. hardwired or temporarily configured e.g. programmed to operate in a certain manner or to perform certain operations described herein. As used herein hardware implemented module refers to a hardware module. Considering embodiments in which hardware modules are temporarily configured e.g. programmed each of the hardware modules need not be configured or instantiated at any one instance in time. For example where the hardware modules comprise a general purpose processor configured using software the general purpose processor may be configured as respective different hardware modules at different times. Software may accordingly configure a processor for example to constitute a particular hardware module at one instance of time and to constitute a different hardware module at a different instance of time.

Hardware modules can provide information to and receive information from other hardware modules. Accordingly the described hardware modules may be regarded as being communicatively coupled. Where multiple of such hardware modules exist contemporaneously communications may be achieved through signal transmission e.g. over appropriate circuits and buses that connect the hardware modules. In embodiments in which multiple hardware modules are configured or instantiated at different times communications between such hardware modules may be achieved for example through the storage and retrieval of information in memory structures to which the multiple hardware modules have access. For example one hardware module may perform an operation and store the output of that operation in a memory device to which it is communicatively coupled. A further hardware module may then at a later time access the memory device to retrieve and process the stored output. Hardware modules may also initiate communications with input or output devices and can operate on a resource e.g. a collection of information .

The various operations of example methods described herein may be performed at least partially by one or more processors that are temporarily configured e.g. by software or permanently configured to perform the relevant operations. Whether temporarily or permanently configured such processors may constitute processor implemented modules that operate to perform one or more operations or functions. The modules referred to herein may in some example embodiments comprise processor implemented modules.

Similarly the methods modules and routines described herein may be at least partially processor implemented. For example at least some of the operations of a method may be performed by one or processors or processor implemented hardware modules. The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but deployed across a number of machines. In some example embodiments the processor or processors may be located in a single location e.g. within a home environment an office environment or as a server farm while in other embodiments the processors may be distributed across a number of locations.

The one or more processors may also operate to support performance of the relevant operations in a cloud computing environment or as a software as a service SaaS . For example at least some of the operations may be performed by a group of computers as examples of machines including processors these operations being accessible via a network e.g. the Internet and via one or more appropriate interfaces e.g. application program interfaces APIs . 

The performance of certain of the operations may be distributed among the one or more processors not only residing within a single machine but also deployed across a number of machines. In some example embodiments the one or more processors or processor implemented modules may be located in a single geographic location e.g. within a home environment an office environment or a server farm . In other example embodiments the one or more processors or processor implemented modules may be distributed across a number of geographic locations.

Some portions of this specification are presented in terms of algorithms or symbolic representations of operations on data stored as bits or binary digital signals within a machine memory e.g. a computer memory . These algorithms or symbolic representations are examples of techniques used by those of ordinary skill in the data processing arts to convey the substance of their work to others skilled in the art. As used herein an algorithm is a self consistent sequence of operations or similar processing leading to a desired result. In this context algorithms and operations involve physical manipulation of physical quantities. Typically but not necessarily such quantities may take the form of electrical magnetic or optical signals capable of being stored accessed transferred combined compared or otherwise manipulated by a machine. It is convenient at times principally for reasons of common usage to refer to such signals using words such as data content bits values elements symbols characters terms numbers numerals or the like. These words however are merely convenient labels and are to be associated with appropriate physical quantities.

Unless specifically stated otherwise discussions herein using words such as processing computing calculating determining presenting displaying or the like may refer to actions or processes of a machine e.g. a computer that manipulates or transforms data represented as physical e.g. electronic magnetic or optical quantities within one or more memories e.g. volatile memory non volatile memory or a combination thereof registers or other machine components that receive store transmit or display information.

As used herein any reference to one embodiment or an embodiment means that a particular element feature structure or characteristic described in connection with the embodiment is included in at least one embodiment. The appearances of the phrase in one embodiment in various places in the specification are not necessarily all referring to the same embodiment.

Some embodiments may be described using the expression coupled and connected along with their derivatives. For example some embodiments may be described using the term coupled to indicate that two or more elements are in direct physical or electrical contact. The term coupled however may also mean that two or more elements are not in direct contact with each other but yet still co operate or interact with each other. The embodiments are not limited in this context.

As used herein the terms comprises comprising includes including has having or any other variation thereof are intended to cover a non exclusive inclusion. For example a process method article or apparatus that comprises a list of elements is not necessarily limited to only those elements but may include other elements not expressly listed or inherent to such process method article or apparatus. Further unless expressly stated to the contrary or refers to an inclusive or and not to an exclusive or. For example a condition A or B is satisfied by any one of the following A is true or present and B is false or not present A is false or not present and B is true or present and both A and B are true or present .

In addition use of the a or an are employed to describe elements and components of the embodiments herein. This is done merely for convenience and to give a general sense of the description. This description should be read to include one or at least one and the singular also includes the plural unless it is obvious that it is meant otherwise.

Still further the figures depict preferred embodiments of the map generation system for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein.

Upon reading this disclosure those of skill in the art will appreciate still additional alternative structural and functional designs for a system and a method for incorporating a map portion within a host application. Thus while particular embodiments and applications have been illustrated and described it is to be understood that the disclosed embodiments are not limited to the precise construction and components disclosed herein. Various modifications changes and variations which will be apparent to those skilled in the art may be made in the arrangement operation and details of the method and apparatus disclosed herein without departing from the spirit and scope defined in the appended claims.

