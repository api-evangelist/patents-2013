---

title: Computation resource cyclic utilization
abstract: A resource request is sent from a user to a resource controller. The resource controller is resident on a node of a distributed computing platform comprising a plurality of nodes configured to collectively execute at least one application program. A quota pool associated with the resource controller is searched for a matching resource quota for the user to inherit. The resource quota is assigned to the user when a matching resource quota for the user to inherit is found in the quota pool. The resource request is forwarded to a resource scheduler that globally manages resources for the distributed computing platform, when a matching resource quota for the user to inherit is not found in the quota pool.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262217&OS=09262217&RS=09262217
owner: EMC Corporation
number: 09262217
owner_city: Hopkinton
owner_country: US
publication_date: 20130626
---
The field relates to information processing and more particularly to information processing techniques for computation resource cyclic utilization in a distributed computing system.

The analysis of massive amounts of data is becoming a routine activity in many commercial and academic organizations. Internet companies by way of example only collect large amounts of data such as content produced by web crawlers service logs and click streams. Analyzing these data sets may require processing tens or hundreds of terabytes of data. Such data sets are known to be referred to as big data. A data set characterized as big data is prohibitively large such that it is beyond the capabilities of commonly used software tools to manage process the data or at least to do so within a reasonable time frame. To perform the analysis tasks researchers and practitioners have been developing a diverse array of Massively Distributed Computing Platforms MDCP running on large clusters of commodity machines nodes . Examples of such platforms include MapReduce from Google and its open source implementation Hadoop Dryad from Microsoft MPP Database from Greenplum and Spark from University of California at Berkley AMPLab.

The node cluster where a MDCP resides represents a limited set of resource elements such as central processing unit CPU memory disk and network which fuel the application programs running in the MDCP. Conceptually a MDCP application includes one or multiple jobs which in turn are composed of short tasks. Each task is typically executed at a dedicated node. In order to optimize the performance of MDCP applications the resources of the cluster need to be managed both effectively and efficiently.

Embodiments of the present invention provide information processing techniques for computation resource cyclic utilization in a distributed computing system.

For example in one embodiment a method comprises the following steps. A resource request is sent from a user to a resource controller. The resource controller is resident on a node of a distributed computing platform comprising a plurality of nodes configured to collectively execute at least one application program. A quota pool associated with the resource controller is searched for a matching resource quota for the user to inherit. The resource quota is assigned to the user when a matching resource quota for the user to inherit is found in the quota pool. The resource request is forwarded to a resource scheduler that globally manages resources for the distributed computing platform when a matching resource quota for the user to inherit is not found in the quota pool. The steps are performed via a processing device.

In another embodiment a method comprises the following steps. A resource product pool is maintained at a resource scheduler. The resource scheduler is part of a distributed computing platform comprising a plurality of nodes configured to collectively execute at least one application program and the resource scheduler globally manages resources for the distributed computing platform. The resource product pool records resource products belonging to inactive users that can be inherited. A resource product request is received at the resource scheduler from a resource controller. The resource controller is resident on a node of one of the plurality of nodes. The resource product request is sent by the resource controller after a user associated therewith obtains a resource quota but before the user utilizes a given resource to produce a resource product. The resource product pool is searched for a matching resource product for the user to inherit and reuse. The resource product is assigned to the user when a matching resource product for the user to inherit and reuse is found in the resource product pool. The steps are performed via a processing device.

In yet another embodiment a computer program product is provided which comprises a processor readable storage medium having encoded therein executable code of one or more software programs. The one or more software programs when executed by the processing device implement steps of one or more of the above described methods.

In a further embodiment an apparatus comprises a memory and a processor operatively coupled to the memory and configured to perform steps of one or more of the above described methods.

Advantageously resource quota inheritance and resource property inheritance embodiments of the invention alone or in combination provide lower latency and better performance of application execution in a distributed computing platform.

These and other features and advantages of the present invention will become more readily apparent from the accompanying drawings and the following detailed description.

Embodiments of the present invention will be described herein with reference to exemplary information processing systems computing systems data storage systems and associated servers computers storage units and devices and other processing devices. It is to be appreciated however that embodiments of the invention are not restricted to use with the particular illustrative system and device configurations shown. Moreover the phrases information processing system computing system and data storage system as used herein are intended to be broadly construed so as to encompass for example private or public cloud computing or storage systems as well as other types of systems comprising distributed virtual infrastructure. However a given embodiment may more generally comprise any arrangement of one or more processing devices.

As used herein the term cloud refers to a collective computing infrastructure that implements a cloud computing paradigm. For example as per the National Institute of Standards and Technology NIST Special Publication No. 800 145 cloud computing is a model for enabling ubiquitous convenient on demand network access to a shared pool of configurable computing resources e.g. networks servers storage applications and services that can be rapidly provisioned and released with minimal management effort or service provider interaction.

The node cluster . . . M represents a set of resource elements that are collectively utilized in whole or in part to execute one or more application programs. One example of an application program is a database application which is responsive to one or more users which could be for example systems individuals tasks jobs and or other applications making queries or other processing requests to the database application. shows a set of resource elements associated with the MDCP in . As shown the set of resource elements comprises CPU resources memory resources disk storage resources and network resources . It is to be appreciated that the resources CPU memory disk storage and network are provided by some part or all of the nodes . . . M of the cluster and the network as needed for execution of the application program.

Control management and scheduling of the resources across the node cluster are implemented by the other components shown in . For example a global resource manager is a cluster specified component that controls the resource allocation for each user. A resource scheduler schedules the allocated resources based on criteria associated with the application program being executed and the availability of nodes. Resource controllers . . . M respectively reside on the nodes . . . M and for each node provide local resource tracking and resource materialization e.g. provisioning etc. . Further operations of these components will be explained below in the context of .

Although the components and are shown as separate in these components or portions thereof may be implemented at least in part on a common processing platform e.g. MDCP . In other embodiments components and may each be implemented on a separate processing platform. It is also to be understood that a given embodiment of the MDCP may include multiple instances of the components and although only single instances of such components are shown in the system diagram for clarity and simplicity of illustration.

An example of a processing platform on which the MDCP of may be implemented is information processing platform shown in . The processing platform in this embodiment comprises at least a portion of the MDCP and includes a plurality of computing devices denoted . . . P which communicate with one another over a network . One or more of the elements components e.g. cluster nodes resource controllers global resource manager resource scheduler etc. of MDCP may therefore each run on a server computer or other processing platform element which may be viewed as an example of what is more generally referred to herein as a processing device. Note that one or more computing devices in may be servers while one or more computing devices may be client devices. As illustrated in such a device generally comprises at least one processor and an associated memory and implements one or more functional modules for controlling features of MDCP . Again multiple elements or modules may be implemented by a single processing device in a given embodiment.

The computing device in the processing platform comprises a processor coupled to a memory . The processor may comprise a microprocessor a microcontroller an application specific integrated circuit ASIC a field programmable gate array FPGA or other type of processing circuitry as well as portions or combinations of such circuitry elements. The memory may be viewed as an example of what is more generally referred to herein as a computer program product. A computer program product comprises a processor readable storage medium i.e. non transitory medium having encoded therein executable code of one or more software programs. Such a memory may comprise electronic memory such as random access memory RAM read only memory ROM or other types of memory in any combination. The computer program code when executed by a processing device such as the computing device causes the device to perform functions associated with one or more of the elements components of MDCP . One skilled in the art would be readily able to implement such software given the teachings provided herein. Other examples of computer program products embodying embodiments of the invention may include for example optical or magnetic disks.

Computing device also includes input output I O devices which includes for example one or more input devices e.g. keyboard mouse etc. for entering data to the computing device and one or more output devices e.g. display speaker etc. for presenting results associated with the computing device. Also included in the computing device is network interface circuitry which is used to interface the device with the network and other system components. Such circuitry may comprise conventional transceivers of a type well known in the art.

The other computing devices of the processing platform are assumed to be configured in a manner similar to that shown for computing device in the figure.

The processing platform shown in may comprise additional known components such as batch processing systems parallel processing systems physical machines virtual machines virtual switches storage volumes etc. Again the particular processing platform shown in the figure is presented by way of example only and system may include additional or alternative processing platforms as well as numerous distinct processing platforms in any combination.

Also numerous other arrangements of servers computers storage devices or other components are possible in system . Such components can communicate with other elements of the system over any type of network such as a wide area network WAN a local area network LAN a satellite network a telephone or cable network or various portions or combinations of these and other types of networks.

Furthermore it is to be appreciated that the processing platform of can comprise virtual machines VMs implemented using a hypervisor. A hypervisor is an example of what is more generally referred to herein as virtualization infrastructure. The hypervisor runs on physical infrastructure. As such the computation resource cyclic utilization techniques illustratively described herein can be provided in accordance with one or more cloud services. The cloud services thus run on respective ones of the virtual machines under the control of the hypervisor. Processing platform may also include multiple hypervisors each running on its own physical infrastructure. Portions of that physical infrastructure might be virtualized.

As is known virtual machines are logical processing elements that may be instantiated on one or more physical processing elements e.g. servers computers processing devices . That is a virtual machine generally refers to a software implementation of a machine i.e. a computer that executes programs like a physical machine. Thus different virtual machines can run different operating systems and multiple applications on the same physical computer. Virtualization is implemented by the hypervisor which is directly inserted on top of the computer hardware in order to allocate hardware resources of the physical computer dynamically and transparently. The hypervisor affords the ability for multiple operating systems to run concurrently on a single physical computer and share hardware resources with each other.

An example of a commercially available hypervisor platform that may be used to implement portions of the processing platform in one or more embodiments of the invention is the VMware vSphere VMware Inc. of Palo Alto Calif. which may have an associated virtual infrastructure management system such as the VMware vCenter. The underlying physical infrastructure may comprise one or more distributed processing platforms that include storage products such as VNX and Symmetrix VMAX both commercially available from EMC Corporation of Hopkinton Mass. A variety of other computing and storage products may be utilized to implement the one or more cloud services that provide the collaborative data visualization functionality and features described herein.

Illustrative details of the MDCP and computation resource cyclic utilization techniques will now be described with reference to .

Embodiments of the invention recognize two important concepts involved in MDCP resource management i.e. resource quota and resource property. Resource quota indicates the maximum quantity of resources that a user is allowed to reserve occupy and utilize during certain phases of its lifecycle. Here in this embodiment a user may be a task a job or an application. Examples of resource quota include the number of map and reduce slots allocated to a MapReduce job and the amount of memory allocated to a map task for split reading map function invocation and partition spilling. Resource property refers to the resource products that are derived from the resources currently being occupied by a user. For example in a map task of Hadoop the memory is consumed to construct a JVM Java VM a spilling buffer and other data structures and the disk space is filled with data partition files spilled from the buffer. In this case the JVM the spilling buffer and the partition files all belong to the resource property of the map task.

Corresponding to the above two concepts embodiments of the invention provide two ways of resource inheritance i.e. resource quota inheritance and resource property inheritance in order to reduce the latency and improve the performance of application execution. As illustratively used herein the term inherit refers to one user in a plurality of users acquiring usage access or permission to use access a given resource to the exclusion of the other users of the plurality of users.

At startup each resource user first applies for a resource quota assigned by the resource scheduler of the MDCP which is responsible for resource allocation with a given allocation policy. The application and assignment of the resource quota usually involve one or multiple rounds of network communication between the user the scheduler and possibly other intermediate proxies due to their distributed locations over the cluster. Depending on the network topology and traffic the network communication may incur significant overhead thereby resulting in high latency of application execution. To mitigate this issue embodiments of the invention provide resource quota inheritance methodologies where a user is enabled to directly inherit the resource quota from another inactive user or a user in the process of becoming inactive without interacting with the resource scheduler. It is realized that many users have identical or similar resource requirements and or will be assigned identical or similar resource quotas by the resource scheduler. Resource quota inheritance takes places between these users. For example in a current implementation of Hadoop the same amount of memory will be allocated to each map reduce task of a MapReduce job. Advantageously in accordance with embodiments of the invention the memory quotas of a wave of map tasks can be inherited by the map tasks of the following wave without affecting the correctness of task execution.

With resource quota inheritance the network communication invoked for quota application and assignment can be minimized which in turn brings several potential benefits. First the startup of a user i.e. an application a job or a task is faster. Second the network traffic of the cluster is lightened and the possibility of network contention decreases. Third the burden of the resource scheduler is alleviated as it now needs to handle fewer resource requests. The latter two benefits are amplified particularly when the number of concurrent resource users is very large. Together and individually these benefits reduce the latency of application execution.

In accordance with various embodiments resource quota inheritance can be implemented in a MDCP environment as follows.

As mentioned above and described in the context of two kinds of system components exist in an MDCP a resource scheduler or RS and one or multiple local resource controllers or RCs . The resource scheduler is the ultimate authority that arbitrates resources among all the applications in the system and is responsible for assigning resource quotas to resource users. For each resource user a specific resource controller supervises its resource allocation usage and release according to the assigned resource quota. A resource controller may concurrently manage more than one user. Periodically the resource controller sends the resource utilization information of the users managed by it to the resource scheduler which may respond with instructions indicating corresponding actions e.g. revoking all the resources allocated to a specific user for the resource controller to take.

Accordingly as shown in step of a user e.g. user in node sends a resource request to the resource scheduler either directly or via a proxy e.g. the user s resource controller . The resource scheduler calculates the resource quota for the user and sends the quota to the user s resource controller in step . In step the resource scheduler may acknowledge to the user that its request has been handled. The resource controller in step takes charge of the user s resource usage according to its quota.

The system in shows the same methodology as in system in with the exception that the initial resource request is generated by a user user A that is not necessarily controlled by resource controller . That is steps through are the same with the exception that the request is sent from user A step and the acknowledgment from the resource scheduler goes back to user A step .

In order to realize resource quota inheritance the resource quotas of inactive users are not immediately returned to the resource scheduler. Instead in accordance with embodiments of the invention the resource controllers respectively maintain quota pools . . . M as shown in system in . Each quota pool temporarily caches the resource quotas of those inactive users that used to be managed by the corresponding resource controller. From the viewpoint of the resource scheduler it appears as if the quotas in the pool were still held by some active users and thus cannot be assigned for incoming new user requests.

With quota inheritance enabled in this manner the quota assignment procedure in or is refined in the following manner as shown in . In step the resource request of a user is directly sent to its resource controller e.g. user to resource controller . The resource controller first searches its quota pool for a matching resource quota for the user to inherit. If successful the resource controller assigns the quota to the user in step and asynchronously informs the resource scheduler about such a quota reallocation. Otherwise the resource controller forwards the original resource request to the resource scheduler which triggers steps through of the quota assignment procedure in or collectively depicted as step in .

The resource controller knows the resource requirements of the users that it manages and thus can determine if an existing quota works for a specific user. When there exists more than one matching quota for the user the resource controller select the optimal one according to some criteria for example a cost model which considers factors such as the quota s lifespan and matching degree of resource quantity.

In one embodiment a resource quota is evicted out of the quota pool under one of two possible situations. First this quota has been assigned to a new user during step . Second this quota has remained in the quota pool above a certain time threshold and thus is returned to the resource scheduler so that it can be assigned to users of other resource controllers.

In accordance with embodiments of the invention resource quota inheritance is managed via an administrator gateway . The gateway includes an administrator interface that enables resource quota inheritance to be flexible. In one example a system administrator specifies different inheritance policies e.g. rules parameters for resource quota inheritance and these policies are stored in a meta store which is accessible by the resource scheduler and the resource controllers . . . M. There are a variety of approaches to leverage these policies to enhance the inheritance and guarantee better quality of service QoS . One approach is to combine user based priority and resource quota inheritance and consider the work load of the entire node cluster at the same time. Furthermore the administrator interface of the gateway in one embodiment is a graphical user interface GUI that can be used by a human or in another embodiment an application programming interface API that can be leveraged by an application program or some other system entity. Some combination of the two types of interfaces may also be employed.

Another benefit of the administrator gateway is to provide detailed information of current history status of resource inheritance. This information is important to improve the design tuning of specific user applications. The system administrator can also leverage this information to optimize current inheritance policies. Thus the behaviors resource quota and or properties to be described below inherent can be modified on the fly in real time through the administrator interface according to the current system status e.g. the status is provided via analysis results obtained by collecting the history current resource usage of the entire system.

Normally at the end of a user s lifecycle its resource property will be destroyed and the recycled resources will be put back into the global resource pool managed by the resource scheduler . Embodiments of the invention provide for resource property inheritance where a user is enabled to inherit a part of the resource property of another inactive user or user that is becoming inactive. The underlying motivations are two fold. First resource products of certain types are actually general purpose and thus can be directly reused among different users. Examples of such resource products include the workers which do map reduce tasks and are owned by a MapReduce job and the JVMs. Second some resource products may be associated with data that is valuable to other users. For example it is common that different MapReduce workflows are launched on the same data set and a common MapReduce job exists within multiple workflows i.e. this job has multiple instances . In this case as a part of one job instance s resource property its job output can be inherited and reused by other instances.

With resource property inheritance in accordance with embodiments of the invention resource products need to be constructed only once and then can be utilized multiple times which compared with the conventional situation where an identical or similar resource product will be repeatedly created and destroyed can lead to significant savings of CPU and I O costs and thereby lower latency and better performance of application execution. Moreover resource property inheritance also brings some by product optimization opportunities. For instance when JVMs are reused the JIT just in time technique can optimize more sections of byte code and thus boost the JVM execution performance to a more notable extent.

As shown in system of in order to realize resource property inheritance the resource scheduler maintain a product pool which records all the resource products that belonged to an inactive user but that have the potential to be inherited. Resource products in the pool will not be immediately destroyed. The resource scheduler decides which resource products to be put into the product pool according to certain criteria. For example it may be beneficial to reuse a resource product only if this product has more incoming users as well as has a construction cost that is significant compared to the minimum overhead incurred by inheritance. On the other hand a resource product will be evicted out of the product pool under one of two possible situations. First this product has been inherited by some new user. Second this product has remained in the pool above a certain time threshold and thus should be destroyed to release the occupied resources for better resource utilization efficiency and fairness.

After a user obtains its resource quota and before it starts to utilize granted resources to produce its resource products the resource controller searches in step the product pool for matching resource products for the user to inherit and reuse. The matching resource products are identified to the resource controller in step . Among all the matching products of the same type the resource controller determines the optimal one with a maximum and positive inheritance benefit i.e. the product construction cost minus the overhead of inheritance e.g. the network transfer of the product from one node to another . After the above product inheritance phase the user constructs all the resource products that it still lacks.

It is to be appreciated that the administrator gateway provides administrator interface functions for resource property inheritance in a manner similar to that described above with respect to resource quota inheritance.

In addition to advantages mentioned above resource quota property inheritance according to embodiments of the invention are generally applicable to various types of computing platforms not just MDCP. The resource quota property inheritance concepts can be instantiated in a wide range of platform specific optimization techniques such as but not limited to the container reuse and YarnChild pool in Hadoop 0.23.1. Also the granularity of the implementation of the resource quota property inheritance concepts is controllable. Each concept can be applied independently of the other and the granularity of resource quota property inheritance is also tunable.

It should again be emphasized that the above described embodiments of the invention are presented for purposes of illustration only. Many variations may be made in the particular arrangements shown. For example although described in the context of particular system and device configurations the techniques are applicable to a wide variety of other types of information processing systems processing devices and distributed virtual infrastructure arrangements. In addition any simplifying assumptions made above in the course of describing the illustrative embodiments should also be viewed as exemplary rather than as requirements or limitations of the invention. Numerous other alternative embodiments within the scope of the appended claims will be readily apparent to those skilled in the art.

