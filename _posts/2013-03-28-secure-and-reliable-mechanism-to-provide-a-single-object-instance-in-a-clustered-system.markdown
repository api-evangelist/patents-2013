---

title: Secure and reliable mechanism to provide a single object instance in a clustered system
abstract: An example system for transmitting data between applications may include an access module that accesses a data object associated with a first application running on a first node. The access module may access the data object without using a class library. The system also includes a communication module that transmits via a network to a second node, data associated with the data object. The communication module may transmit the data for use by a second application running on the second node, and the data object may be accessible by at most one application at a time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09058225&OS=09058225&RS=09058225
owner: Red Hat, Inc.
number: 09058225
owner_city: Raleigh
owner_country: US
publication_date: 20130328
---
A data object may be passed between applications by electronic means. A common technique to pass a data object includes object serialization. A serialized object may refer to an object represented as a sequence of bytes that includes the object s data as well as information about the object s type and the types of data stored in the object. Serialization may include writing an entire object to a stream persisting the object and or sending the object over a network. Serialization enables object persistence because the stored object continues to serve a purpose even when the program is not running. Thus a serialized object is capable of existing and functioning outside of the program that created it. An object may be serialized to disk on a single computer or may be serialized across a network such as the Internet.

After a serialized object has been for example written into a file or sent over a network it can be deserialized. Deserialization may refer to reading or loading the object and the type information and bytes that represent the object and its data may be used to recreate the object in memory.

This disclosure relates to transmitting data between applications. Methods systems and techniques for transmitting data between applications are provided.

According to an embodiment a system for transmitting data between applications includes an access module that accesses a data object associated with a first application running on a first node. The access module accesses the data object without using a class library. The system also includes a communication module that transmits via a network to a second node data associated with the data object. The communication module transmits the data for use by a second application running on the second node and the data object is accessible by at most one application at a time.

According to another embodiment a method of transmitting data between applications includes accessing a data object associated with a first application running on a first node. The data object is accessed without using a class library. The method also includes transmitting via a network to a second node data associated with the data object. The data is transmitted for use by a second application running on the second node and the data object is accessible by at most one application at a time.

According to another embodiment a non transitory machine readable medium includes a plurality of machine readable instructions that when executed by one or more processors are adapted to cause the one or more processors to perform a method including accessing a data object associated with a first application running on a first node where the data object is accessed without using a class library and transmitting via a network to a second node data associated with the data object where the data is transmitted for use by a second application running on the second node and the data object is accessible by at most one application at a time.

It is to be understood that the following disclosure provides many different embodiments or examples for implementing different features of the present disclosure. Some embodiments may be practiced without some or all of these specific details. Specific examples of components modules and arrangements are described below to simplify the present disclosure. These are of course merely examples and are not intended to be limiting.

Serializing an object creates a copy of the original data and this might have a negative side effect when it comes to security. One might need to securely and reliably transfer some data e.g. an existing valid authentication token to another application. This disclosure provides a technique to securely and reliably pass data between applications.

In an embodiment a first application instantiates a data object via a first node that the first application is running on. The first node may store the data object in memory. The data object associated with the first application may be accessed by the application without using a class library. The data associated with the data object may be transmitted via a network to a second node. The data may be transmitted for use by the second application running on the second node and the data object is accessible by at most one application at a time.

Diagram includes a node and a node coupled to a network . Each of node and node may be implemented on a computing device. In an example nodes and are implemented on the same computing device. In another example nodes and are implemented on different computing devices.

Node and or node may be software programs that run and communicate with applications. For instance node and or node may be an operating system or a virtual machine running on a computing device. Each of node and node may communicate with each other via network .

Network may include various configurations and use various protocols including the Internet World Wide Web intranets virtual private networks wide area networks local networks private networks using communication protocols proprietary to one or more companies cellular and other wireless networks Internet relay chat channels IRC instant messaging simple mail transfer protocols SMTP Ethernet WiFi and HTTP and various combinations of the foregoing.

Node is coupled to a memory and runs an application . Node includes an access module and a communication module . Similarly node is coupled to a memory and runs an application . Node includes an access module and a communication module .

The following is a description of node . This description applies as well to node . Node may run an application that is written in a high level programming language. In an example application is written in an object oriented programming language that defines classes. A data object may be a self contained entity that has state and behavior and represents an instance of a class. The data object s state may be described as its fields and properties and the data object s behavior may be described by its methods and events. Application may include code that creates objects of a class and an object of a particular class may expose methods and properties defined by that class. An application running on a node may instantiate a data object via the node.

In an embodiment the data object is accessible by at most one application at a time and the node running the application owns the data object. The node may own a data object if the application running on the node has permission to access the data object. The application may access the data object by reading or modifying the data object.

Node is coupled to a memory and includes an access module and a communication module . Application running on node may instantiate a data object via node and node may store data object in memory . The node controls the application and may have access to the data objects instantiated by the application. Further node may own the data object and accordingly grant application permission to access the data object. An arrow is illustrated to show that node owns data object and application has access to data object . Accordingly application may access data object by reading or modifying the data object.

The first application may access the data object without using a class library. The class library is external to the node. In an example the library includes a single class file. In an example the library includes multiple class files. In another example the first application is written in Java and the library includes one or more Java Archive JAR files.

In an example a memory region of memory may be allocated to application and node may grant application access to memory region . In an embodiment memory region is devoid of a class library that enables application to access data object . In another embodiment memory region includes a class library that enables application to access data object but application does not use the class library to access data object .

A programmer may write application in a programming language that accesses the data object by using a class library associated with the programming language. The application may be for example a Java application C application or Python application.

The class library may be a modular component of reusable code that provides the programmer with useful facilities. Application may call the class library at runtime to for example access the data object or transfer the data object via a network to another node. Application may be unable to access the data object or transfer the data object via the network without using the class library. In an example the class library resides external to node . Because the class library resides external to node such calls may have significant overhead.

In an embodiment access module accesses the data object associated with application without accessing a class library. This may provide application with quicker access to the data object compared to using a class library to access the data object. Further this may incur less overhead. In an example access module invokes an application programming interface API to directly access the data object. Access module may via the API invoke methods and access properties of data object . Node may provide internal APIs that allow application to directly access the data object.

In an example node is a virtual machine and data object is instantiated by the virtual machine. A virtual machine is a software implementation of a machine that may execute programs. In an example node is a JAVA virtual machine and a new keyword or interface is introduced public APIs are available to allow developers to use this functionality and an extension is provided to the JAVA virtual machine. Trademarks are the property of their respective owners.

Application running on node may also have use for data object . In an embodiment communication module transmits via network to node data associated with data object . Communication module may transmit the data associated with data object for use by application . It may be desirable to separate data object and the data associated with data object . Node may receive the data associated with data object . Communication module may invoke an API to transmit to node the data associated with data object .

In node has received data . Data is data associated with data object . The data associated with data object may include one or more properties and one or more methods of the data object. When node receives the data associated with data object node may store the data associated with data object in a memory region of memory . Memory may be allocated to application .

Communication module may transmit the data associated with data object to node to enable application running on node to access the data object. Communication module may transmit the data to node for a variety of reasons. In an example node is a server and node is a client that sends a request to the server for data object . In another example communication module may receive a remote method call from node that causes communication module to transmit the data associated with data object .

Access module may wait to receive a communication from node confirming receipt of the data associated with data object before access module deletes data object . In this way the transfer of data associated with data object may be reliable. This may prevent loss of data object in case node does not properly receive the data associated with data object . For example if node did not properly receive the data associated with data object application may still be able to access data object and retransmit data object to node . When the communication confirming receipt of the data associated with data object has not been received after a time period has elapsed communication module may retransmit via network to node the data associated with data object .

This may additionally provide an advantage in terms of security because only one application is guaranteed to have access at a time to data object . Accordingly only one application may modify data object at a time. The fewer copies of data object that exist the less likely that data object may be tampered with or improperly viewed. In an example data object may be an authentication token.

In an embodiment data object is accessible by at most one application at a time. Accordingly when node receives the data associated with data object node may prevent application from accessing the data associated with data object because node still owns data object . In arrow is illustrated to show that node still owns data object and application continues to have access to data object . If application is prevented from accessing the data associated with data object application is unable to modify or read the data associated with data object .

After node receives the data associated with data object communication module may send to node a communication confirming receipt of the data associated with data object . Communication module may receive from node the communication confirming receipt of the data associated with data object and access module may then delete data object based on receiving the confirmation.

After access module in node deletes data object communication module may send to node a communication that indicates deletion of data object by node . This communication may cause node to own data object and accordingly allow application to access data object .

In diagram memory coupled to node no longer stores data object . Rather memory coupled to node stores data object . Arrow is illustrated to show that node owns data object and application has access to data object . For example application may access data object by reading or modifying the data object.

In an embodiment application accesses data object without using a class library. In an example access module invokes an application programming interface API to directly access the data object. Access module may via the API invoke methods and access properties of data object . Node may provide internal APIs that allow application to directly access the data object.

In node does not own data object and accordingly application does not have access to data object . Node may resume ownership of data object if node transmits data object to node and deletes data object . Communication module may transmit the data to node for a variety of reasons. In an example node is a server and node is a client that sends a request to the server for data object . In another example node have requested data object for a time period and agreed to return data object to node within the time period. In another example communication module may receive a remote method call from node that causes communication module to transmit the data associated with data object . Communication module may invoke an API to transmit to node the data associated with data object .

In an example node receives from node the data associated with data object and sends to node a communication confirming receipt of the data associated with the data object. When node receives the data associated with data object node may still own data object . Accordingly node may prevent application running on node from accessing the data object.

Node may receive from node the communication confirming receipt of the data associated with the data object. Node may delete from node s memory the data object based on the confirmation. After node deletes the data object node may send to node a communication indicating deletion of data object by node . Node may then allow the application running on node to access the data object based on receiving the communication indicating deletion of data object by node .

As discussed above and further emphasized here are merely examples which should not unduly limit the scope of the claims. In an example although block diagram is described herein with reference to two nodes that transfer between each other data associated with the data object other embodiments including more than two nodes that transfer data associated with the data object are within the scope of this disclosure. For instance node may transfer data object to node or other nodes. In another example although block diagram is described herein with one application running on a node other embodiments including more than one application running on a node are within the scope of this disclosure. For instance node and or node may run more than one application. Further each of these applications may be able to access data object although only one application may access data object at a time.

Moreover it should be understood that one or more modules e.g. access module and communication module in may be combined with another module. In an example access module and communication module are combined into one module. It should also be understood that one or more modules in e.g. access module and communication module may be separated into more than one module. In an example access module is split into a first access module and a second access module.

Method includes steps . In a step a data object associated with a first application running on a first node is accessed by one or more processors without accessing a class library. In an example access module accesses by one or more processors a data object associated with a first application running on a first node without accessing a class library. In an example access module invokes an application programming interface API to directly access the data object.

In a step data associated with the instance is transmitted via a network to a second node where the data is transmitted for use by a second application running on the second node and the data object is accessible by at most one application at a time. In an example communication module transmits via a network to a second node data associated with the instance where the data is transmitted for use by a second application running on the second node and the data object is accessible by at most one application at a time.

It is also understood that additional method steps may be performed before during or after steps discussed above. It is also understood that one or more of the steps of method described herein may be omitted combined or performed in a different sequence as desired.

Computer system includes a bus or other communication mechanism for communicating information data signals and information between various components of computer system . Components include an input output I O component that processes a user action such as selecting keys from a keypad keyboard selecting one or more buttons or links etc. and sends a corresponding signal to bus . I O component may also include an output component such as a display and an input control such as a cursor control such as a keyboard keypad mouse etc. . An optional audio input output component may also be included to allow a user to use voice for inputting information by converting audio signals into information signals. Audio I O component may allow the user to hear audio. A transceiver or network interface transmits and receives signals between computer system and other devices via a communication link to a network. In an embodiment the transmission is wireless although other transmission mediums and methods may also be suitable. A processor which may be a micro controller digital signal processor DSP or other processing component processes these various signals such as for display on computer system or transmission to other devices via communication link . Processor may also control transmission of information such as cookies or IP addresses to other devices.

Components of computer system also include a system memory component e.g. RAM a static storage component e.g. ROM and or a disk drive . Computer system performs specific operations by processor and other components by executing one or more sequences of instructions contained in system memory component . Logic may be encoded in a computer readable medium which may refer to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media volatile media and transmission media. In various implementations non volatile media includes optical or magnetic disks or solid state drives volatile media includes dynamic memory such as system memory component and transmission media includes coaxial cables copper wire and fiber optics including wires that include bus . In an embodiment the logic is encoded in non transitory computer readable medium. In an example transmission media may take the form of acoustic or light waves such as those generated during radio wave optical and infrared data communications.

Some common forms of computer readable media include for example floppy disk flexible disk hard disk magnetic tape any other magnetic medium CD ROM any other optical medium punch cards paper tape any other physical medium with patterns of holes RAM PROM EEPROM FLASH EEPROM any other memory chip or cartridge or any other medium from which a computer is adapted to read.

In various embodiments of the present disclosure execution of instruction sequences to practice the present disclosure may be performed by computer system . In various other embodiments of the present disclosure a plurality of computer systems coupled by communication link to the network e.g. such as a LAN WLAN PTSN and or various other wired or wireless networks including telecommunications mobile and cellular phone networks may perform instruction sequences to practice the present disclosure in coordination with one another.

Where applicable various embodiments provided by the present disclosure may be implemented using hardware software or combinations of hardware and software. Also where applicable the various hardware components and or software components set forth herein may be combined into composite components including software hardware and or both without departing from the spirit of the present disclosure. Where applicable the various hardware components and or software components set forth herein may be separated into sub components including software hardware or both without departing from the spirit of the present disclosure. In addition where applicable it is contemplated that software components may be implemented as hardware components and vice versa.

Application software in accordance with the present disclosure may be stored on one or more computer readable mediums. It is also contemplated that the application software identified herein may be implemented using one or more general purpose or specific purpose computers and or computer systems networked and or otherwise. Where applicable the ordering of various steps described herein may be changed combined into composite steps and or separated into sub steps to provide features described herein.

The foregoing disclosure is not intended to limit the present disclosure to the precise forms or particular fields of use disclosed. As such it is contemplated that various alternate embodiments and or modifications to the present disclosure whether explicitly described or implied herein are possible in light of the disclosure. Changes may be made in form and detail without departing from the scope of the present disclosure. Thus the present disclosure is limited only by the claims.

