---

title: Debugging extensible markup language
abstract: Disclosed is a method and system for debugging XML files or documents by inserting a breakpoint into an XML file and converting the XML file into a bytecode format, where the breakpoint is propagated into the bytecode format and stored in runtime libraries. During runtime, on encountering the breakpoint, the location of the breakpoint is internally determined in the bytecode and points to the location of the breakpoint in the XML file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08839207&OS=08839207&RS=08839207
owner: International Business Machines Corporation
number: 08839207
owner_city: Armonk
owner_country: US
publication_date: 20130618
---
The present application is a continuation of U.S. patent application Ser. No. 12 639 065 filed on Dec. 16 2009.

Typically enterprise applications or the applications that rely and work on dynamic data mostly use eXtensible Markup Language XML for storing and retrieving such data as XML is a widely accepted form for data storage and retrieval. While building applications there is a need to debug the application or programs which interact with the XML files specifically to read the data. Therefore while debugging such programs there is always a missing link of how to debug the XML files that are encounter on the way of proceeding with the program flow. Currently the development environment tools that provide the debugging facility don t provide an option to set the debug points in the XML files through which the program flow might take us. A missing link at this place would cause the debugging work to go mostly with assumptions which might lead to misleading results at times.

Conventional solutions to this typically incorporate the debug statements in code i.e. the software code that print out the values obtained after parsing the XML document. This method is quite strenuous and any changes or addition to debug statements that is included will demand re compiling and re running the new binaries obtained. In case of relatively large software applications this becomes increasingly tedious gruesome and time consuming.

Embodiments of the invention provide a solution for debugging XML documents as a part of application debugging to fill the grey area of debugging applications dependent on XML for dynamic data.

Embodiments of the invention relate to a method and a system for debugging eXtensible markup language XML documents by receiving an XML file as input converting the XML file received into an Object code bytecode format. The breakpoint information is captured and stored in the bytecode. The bytecode generated is in a format which can be retrieved at a later stage for example during runtime to locate the exact location of the breakpoint in the XML file. Execution of the bytecode includes encountering the breakpoint and on encountering the breakpoint within the bytecode the breakpoint in the bytecode includes information on the exact pointer in the XML file to debug the XML file.

Additional features and advantages are realized through the embodiments of the invention. Other embodiments and aspects of the invention are described in detail herein and are considered to be part of the claimed invention. For a better understanding of embodiments the invention with advantages and features reference is made to the description and to the drawings.

The data processing system can include display interface that forwards graphics text and other data from the communication infrastructure or from a frame buffer not shown for display on display unit . Data processing system also includes main memory which can be random access memory RAM and may also include secondary memory . Secondary memory may include for example hard disk drive and or removable storage drive representing a floppy disk drive a magnetic tape drive an optical disk drive etc. Removable storage drive reads from and or writes to removable storage unit in a manner well known to those having ordinary skill in the art. Removable storage unit represents for example a floppy disk magnetic tape optical disk etc. which is read by and written to by removable storage drive . As will be appreciated removable storage unit includes a computer usable storage medium having stored therein computer software and or data.

In embodiments secondary memory may include other similar memory for allowing computer programs or other instructions to be loaded into the computer system. Such memory may include for example removable storage unit and interface . Examples of such memory may include a program storage and storage interface such as that found in video game devices a removable memory chip such as an EPROM or PROM and associated socket and other removable storage units and interfaces which allow software and data to be transferred from removable storage unit to data processing system .

Data processing system may also include a communications interface . Communications interface allows software and data to be transferred between the data processing system and any other external devices. Examples of communications interface may include a modem a network interface such as an Ethernet card a communications port a PCMCIA slot and card etc. Software and data transferred via communications interface are typically in the form of signals which may be for example electronic electromagnetic optical or other signals capable of being received by communications interface . These signals are provided to communications interface via communications path that is channel . Channel carries signals and may be implemented using wire or cable fiber optics a phone line a cellular phone link an RF link and or other communications channels.

The terms computer program medium computer usable medium and computer readable medium are used to generally refer to tangible media such as main memory and secondary memory removable storage drive a hard disk installed in hard disk drive and signals thereof. Computer program products are tangible media for providing software to the computer system. The computer readable medium allows the computer system to read data instructions messages or message packets and other computer readable information from the computer readable medium. The computer readable medium for example may include non volatile memory such as Floppy ROM Flash memory Disk drive memory CD ROM and other permanent storage. It can be used for example to transport information such as data and computer instructions between computer systems. Furthermore the computer readable medium may comprise computer readable information in a transitory state medium such as a network link and or a network interface including a wired network or a wireless network which allows a computer to read such computer readable information.

Computer programs also called computer control logic are typically stored in main memory and or secondary memory . Computer programs may also be received via communications interface . Such computer programs when implemented can enable the computer system to perform the features of embodiments of the invention as discussed herein. In particular computer programs when implemented enable processor to perform the features of data processing system . Accordingly such computer programs represent controllers of the data processing system.

Processor unit serves to execute instructions for software that may be loaded into memory . Processor unit may be a set of one or more processors or may be a multi processor core depending on the particular implementation. Further processor unit may be implemented using one or more heterogeneous processor systems in which a main processor is present with secondary processors on a single chip. As another illustrative example processor unit may be a symmetric multi processor system containing multiple processors of the same type.

Memory and persistent storage are examples of storage devices. A storage device is any piece of hardware that is capable of storing information either on a temporary basis and or a permanent basis. Memory in these examples may be for example a random access memory or any other suitable volatile or non volatile storage device. Persistent storage may take various forms depending on the particular implementation. For example persistent storage may contain one or more components or devices and may include a hard drive a flash memory a rewritable optical disk a rewritable magnetic tape or some combination of the above. The media used by persistent storage also may be removable. For example a removable hard drive may be used for persistent storage .

Communications unit in these examples provides for communications with other data processing systems or devices. In these examples communications unit is a network interface card. Communications unit may provide communications through the use of either or both physical and wireless communications links.

Input output unit allows for input and output of data with other devices that may be connected to data processing system . For example input output unit may provide a connection for user input through a keyboard and mouse. Further input output unit may send output to a printer. Display provides a mechanism to display information to a user. In one embodiment input unit is a keyboard. Instructions for the operating system and applications or programs are located on persistent storage . These instructions may be loaded into memory for implementation by processor unit . The processes of the different embodiments may be performed by processor unit using computer implemented instructions which may be located in a memory such as memory . These instructions are referred to as program code computer usable program code or computer readable program code that may be read and implemented by a processor in processor unit . Program code in the form of different embodiments may be represented on different physical or tangible computer readable media such as memory or persistent storage .

Program code is located in a functional form on computer readable media that is selectively removable and may be loaded onto or transferred to data processing system for implementation by processor unit . Program code and computer readable media form computer program product in these examples. In one example computer readable media may be in a tangible form such as for example an optical or magnetic disc that is inserted or placed into a drive or other device that is part of persistent storage for transfer onto a storage device such as a hard drive that is part of persistent storage . In a tangible form computer readable media also may take the form of a persistent storage such as a hard drive a thumb drive or a flash memory that is connected to data processing system . The tangible form of computer readable media is also referred to as computer recordable storage media. In some instances computer recordable media may not be removable.

Alternatively program code may be transferred to data processing system from computer readable media through a communications link to communications unit and or through a connection to input output unit . The communications link and or the connection may be physical or wireless in the illustrative examples. The computer readable media also may take the form of non tangible media such as communications links or wireless transmissions containing the program code.

The different components illustrated for data processing system are not meant to provide architectural limitations to the manner in which different embodiments may be implemented. The different illustrative embodiments may be implemented in a data processing system including components in addition to or in place of those illustrated for data processing system . Other components shown in can vary from the illustrative examples shown.

As one example a storage device in data processing system is any hardware apparatus that may store data. Memory persistent storage and computer readable media are examples of storage devices in a tangible form. In another example a bus system may be used to implement communications fabric and may be comprised of one or more buses such as a system bus or an input output bus. Of course the bus system may be implemented using any suitable type of architecture that provides for a transfer of data between different components or devices attached to the bus system. Additionally a communications unit may include one or more devices used to transmit and receive data such as a modem or a network adapter. Further a memory may be for example memory or a cache such as found in an interface and memory controller hub that may be present in communications fabric .

Conventionally these java files can be debugged as illustrated in by tools that provide runtime debug facility for the class files. The EMF runs the class files and provides the runtime debug facility for the class files during the runtime. Once this is completed during runtime the EMF points to the line of the code in the source file where the debug instruction has been placed. With embodiments of the invention the complete illustration of is no longer required thereby saving processor time cost and several other factors on the data processing system. Currently the method of conversion to a form of bytecode and accessing and modifying XML files does not provide any approach to debug the XML file itself

In accordance with the embodiment of the invention the solid arrow illustrates the improvement where XML files can be effectively debugged. The aim here is to intercept the call from the development tools that attempt to trace back a debug call and check if the code is a pure java code or whether the code thus obtained is java code that is obtained by parsing the XML file. If this is a call to a pure java code the development tool proceeds as usual. If the call is for the XML file then internally determine the location of the debug point typically by reversing the technique of the XML conversion to java in the XML file and then point to the XML file.

Basically the disclosure tries to provide a mechanism or a process through which we can debug XML while debugging the application. For this the sequence followed is as follows. First a user places debug points in the XML file. Next while converting the XML file to a bytecode format of any language capture the debug points and propagate them into the bytecode and store them in the libraries used for runtime. Next the stored information about a debug point indicates the corresponding mapping in the XML file and other information. Finally during runtime when this debug point is encountered retrieve the stored information regarding this particular debug point in the bytecode and directly pointing to the XML file.

Further although process steps method steps or the like may be described in a sequential order such processes methods and algorithms may be configured to work in alternate orders. In other words any sequence or order of steps that may be described does not necessarily indicate a requirement that the steps be performed in that order. The steps of processes described herein may be performed in any order practical. Further some steps may be performed simultaneously in parallel or concurrently. Further some or all steps may be performed in run time mode.

When a single element or article is described herein it will be apparent that more than one element article whether or not they cooperate may be used in place of a single element article. Similarly where more than one element or article is described herein whether or not they cooperate it will be apparent that a single element article may be used in place of the more than one element or article. The functionality and or the features of an element may be alternatively represented by one or more other elements which are not explicitly described as having such functionality features. Thus other embodiments need not include the element itself.

Although embodiments of the invention have been described with reference to the embodiments described above it will be evident that other embodiments may be alternatively used to achieve the same object. The scope is not limited to the embodiments described above but can also be applied to software and computer program products in general. It should be noted that the above mentioned embodiments illustrate rather than limit the invention and that those skilled in the art will be able to design alternative embodiments without departing from the scope of the appended claims. In the claims any reference signs should not limit the scope of the claim. Embodiments of the invention can be implemented by hardware comprising several distinct elements.

