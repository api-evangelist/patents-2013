---

title: Flexible and scalable software system architecture for implementing multimedia applications
abstract: A flexible and scalable software system architecture for implementing multimedia applications is disclosed. In one embodiment, the flexible and scalable software system architecture includes a platform abstraction layer (PAL), a device policy manager (DPM), a media engine, a library of commons (LoC) module, system management toolsets (SMT), one or more application services, an application control unit (ACU) and a user interface transaction layer (UITL). Further, the media engine is communicatively coupled between the PAL and the ACU, the LoC module is communicatively coupled to the ACU, the DPM, the media engine, the SMT, the PAL and the UITL, the DPM is communicatively coupled to the PAL, the ACU and the media engine, the ACU is coupled between media engine and the UITL, and the SMT is communicatively coupled to the ACU, the DPM, the media engine, the LoC module, the PAL and the UITL.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09026983&OS=09026983&RS=09026983
owner: Ittiam Systems (P) Ltd.
number: 09026983
owner_city: Bangalore, Kamataka
owner_country: IN
publication_date: 20130315
---
Embodiments of the present subject matter relate to multimedia applications. More particularly embodiments of the present subject matter relate to flexible and scalable software system architecture for implementing multimedia applications.

It is often seen that multimedia systems implemented for one application though having many elements modules in common with the feature for another application often find it difficult to re use these common elements or to leverage the modules that are already productized for the first application. The time to market and the turn around time needed for making slight variations to an existing solution typically becomes excessive and do not make too much business sense. Also such modifications keep organizations from focusing on new research and development efforts and in implementing new functionality into their product lines. Existing solutions are not scalable based on functions easier to port and extensible based on usage scenarios.

Some of the challenges to reusing the common elements are that the range and variations in the core media functionality can be high and use cases of the end applications may combine existing features and functionality in unique ways. This may result in most of the standard media transformations such as streaming server streaming client media recorder media player media transcoder media preview network player snapshots and the like and combinations thereof for streaming systems not being available as desired in a manner that allows fundamental reuse for fast and scalable deployment across various end applications.

For example a surveillance application including security video camera may require the security video camera feeding live video capture into a system which can scale encode packetize the first source in one format and stream it to several destinations. The same video capture may also need to be scaled encoded and packetized in a different format and encrypted before transmitting to some other destinations. It can be seen that there is no need for audio presence in such an application.

In another example a surveillance application may require many security video cameras feeding live video capture into a system which denoises and deinterlaces the live feed before it scales encodes packetizes all these video captures in a multi program format and streams a single encoded video stream to designated destinations. Along with the video captures two audio sources may also need to be multiplexed into the outgoing single encoded video stream. In addition the encoded video stream from two or more of the security video cameras may need to be recorded on to the local disk.

Although in the above two example scenarios many of the functional blocks are same there are some differences that would render a simple reuse of software from one application to the other application difficult and time consuming because the core technologies like media processing resource management and device handling and many others are typically configured in different usage modes based on the applications needs. The reuse can become even more challenging as the requirements for each software system evolves continuously with advancements in processor and technology development.

The systems and methods disclosed herein may be implemented in any means for achieving various aspects. Other features will be apparent from the accompanying drawings and from the detailed description that follow.

Flexible and scalable software system architecture for implementing multimedia applications is disclosed. In the following detailed description of the embodiments of the present subject matter references are made to the accompanying drawings that form a part hereof and in which are shown by way of illustration specific embodiments in which the present subject matter may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice the present subject matter and it is to be understood that other embodiments may be utilized and that changes may be made without departing from the scope of the present subject matter. The following detailed description is therefore not to be taken in a limiting sense and the scope of the present subject matter is defined by the appended claims.

The terms application application program and multimedia application are used interchangeably throughout the document. The term multimedia application development kit MADK refers to a software development kit including elements modules of pre defined functionality that a software developer can use to build a multimedia application having scalable and flexible software system architecture. The term system resource manager module SRM refers to a rulebook including implementation definitions for using each of the elements modules in realizing the multimedia application having the scalable and flexible software system architecture.

In one embodiment the flexible and scalable software system includes a set of core elements modules also referred to as atomic units . Each of the core elements has a pre defined functionality. This is explained in more detail with reference to . The system framework defines a set of build tools and mechanisms to assist in combining the atomic units to realize a desired multimedia application. Further the system framework provides access to each of the atomic units through a set of standardized interfaces and rules associated with the usage of the standardized interfaces. Furthermore the system framework defines behavior of each of the standardized interfaces to realize a flexible and scalable software system framework architecture for the multimedia applications A N. Moreover in this embodiment the SRM is a rulebook that defines rules to manage processes threads and memory in the flexible and scalable software system .

In operation the developers use the MADK and the SRM to realize the multimedia applications A N. In one embodiment the developers select a subset of elements needed for a multimedia application A using the atomic units in the flexible and scalable software system . Further the selected subset of elements is combined using the system framework . Furthermore the selected subset of elements and the system framework are implemented based on the standardized rules defined by the SRM . In addition further levels of control are allowed on the selected subset of elements by defining further needed levels of control. The further needed levels of control are allowed by defining build time configuration options for inclusion of specific features or functionality in the selected subset of elements. The further needed levels of control are also allowed by defining run time configuration options for allowing multiple modes of usage of the selected subset of elements across different multimedia applications A N.

Referring now to which is a block diagram illustrating detailed software architecture of the flexible and scalable software system for implementing multimedia applications A N according to one embodiment. As shown the flexible and scalable software system includes a hardware system an operating system OS a board support package BSP a platform abstraction layer PAL a library of commons LoC module a device policy manager DPM a media engine system management toolsets SMT one or more application services A N an application control unit ACU a user interface transaction layer UITL one or more user interface UI plug ins A N and one or more UIs A N.

Further as shown in the PAL includes an OS abstraction layer OSAL a file access abstraction layer FAAL a component integration layer CIL and a driver abstraction layer DAL . Furthermore the media engine includes a signaling subsystem SSS a media subsystem MSS a network protocol stack NPS and a media processing component libraries MPCLs . The MSS further includes a media pipelines array MPA and a pipeline framework also referred to as a media engine framework MEF . In addition the SMT includes a logging framework a health monitor an exception and event manager EEM a statistics collection module SCM and a resource monitor RMon . Moreover the ACU includes an application services manager ASM a configuration manager CM a command dispatcher DP and an event handler EH .

Furthermore each of the OSAL the FAAL the CIL and the DAL includes two layers such as a standard application programming interface layer API top layer and a platform specific code layer bottom layer . In addition each of the UI plug ins A N includes two layers such as a standard API layer bottom layer and a UI specific code layer top layer . The key interfaces between each of the components in the flexible and scalable software system are explained in detail with reference to .

In one embodiment the hardware system includes processors and peripherals. Further the BSP includes kernel and device drivers. Furthermore the OS includes any one of Linux Windows Android and the like.

In operation the PAL ensures platform portability and ease of software integration across platforms. Exemplary platforms include Linux Android Symbian Windows and the like. Particularly the OSAL abstracts access semaphore thread mailbox mutex sleep and similar functionality across platforms. Further the FAAL abstracts access to file systems on various platforms and types of file systems. Furthermore the CIL abstracts component integration frameworks and interfaces defined by platform vendor and component suppliers such as OpenMax Codec Engine and the like. In addition the DAL abstracts access to audio video input output I O enhanced direct memory access EDMA pre processing and post processing hardware elements such as deinterlacer resizer and the like and other drivers the flexible and scalable software system may need to interact with. The platform specific code layer in each of the OSAL the FAAL the CIL and the DAL provides standard APIs to enable a platform agnostic interface between the components in the flexible and scalable software system and the hardware.

Further the LoC module provides common functions needed by other modules in one centralized place. Exemplary functions include memory management string operations extensible markup language XML creation parsing standard mathematical operations for fixed and floating point arithmetic and so on. In this embodiment the LoC module enables a single existence of the functions across the flexible and scalable software system . For example a multimedia application can use multiple instantiations of the functions provided by the LoC module .

Furthermore the DPM allows simultaneous access of physical devices and peripherals to different applications and or users within a single application. Exemplary physical devices and peripherals include an audio capture device a video capture device a resizer hardware a video render device an audio playout device and the like. For example a media player application runs simultaneously with a gaming application using the DPM .

In one embodiment the DPM maps each physical channel to multiple virtual channels. Further each virtual channel is distributed to a user. In this case a user is a software module or entity in an application that wishes to access a virtual channel for realizing some use case functionality for the application. Further the DPM implements pre processing and post processing of media that benefits multiple users of a certain physical channel. For example if virtual channels for a physical video capture source need denoising to be done before any other processing then the DPM implements the denoising before it feeds data to the virtual channels. This facilitates optimality in implementation by preventing a need to duplicate the same functionality in all the virtual channels.

Further in this embodiment each virtual channel undergoes different media transformations as implemented by each of the users. Therefore use cases where one input feeds multiple outputs are realized using the DPM . Furthermore the DPM runs in the same process or different process as the media engine and ACU . If the DPM runs in a different process then the DPM communicates with the media engine and the ACU via inter process communication mechanism.

Moreover the media engine provides media related processing handling protocol compliance and signaling functionality. In addition the SSS in the media engine implements state machines for media sessions and session management for interacting with a local or remote networked devices to from which the flexible and scalable software system streams media or interacts with.

Also the NPS in the media engine encompasses all network protocols and stacks needed for implementing standard compliant networking protocols for a networked multimedia system. Exemplary network protocols include hypertext transfer protocol HTTP real time transfer protocol RTP real time streaming protocol RTSP trivial file transfer protocol TFTP and the like. The NPS provides centralized maintenance of all networked protocols in a consistent manner.

Further the MPCLs encompass all media processing algorithms for use with the other modules in the flexible and scalable software system . Exemplary media processing algorithms include audio video encoder algorithm audio video decoder algorithm up scaling downscaling images algorithm video composition algorithm audio re sampling algorithm video de noising algorithm and the like. For example the DPM and the MSS use the MPCLs for implementing key functionalities that process media. The MPCLs also ensure consistent APIs across the DPM and the MSS and enable portability across various platforms where media processing libraries are uploaded for new platforms.

Furthermore the MSS realizes source to sink flow of media data implemented by integrating one or more algorithms from the MPCLs the DPM and the NPS. The MPA in the MSS realizes preset source to sink flow of media data. Each of the preset source to sink flow of media data is referred to as a media pipeline. In this embodiment the media pipelines are available for file server and transcoder live server and recorder network player and recorder network transcoder local or remote file playback offline transcoder and so on. Each of the media pipelines is configurable for core functionalities as well as extended functionalities. For example the core functionalities of the network transcoder media pipeline are to receive network streams decode audio video re encode audio video into a different coding format or specification and stream the coded audio video over a network. Further the extended functionalities can be added on a need basis. Exemplary extended functionalities include inclusion of scaling after decoding inclusion of metadata handling of user data preview of the decoded data periodic snapshots of decoded data and the like. Furthermore the media pipelines allow a seamless selection of the extended functionalities that enables usage across a wide range of multimedia application use cases. Therefore the need for customization for each of the multimedia applications A N is minimized.

The pipeline framework in the MSS provides standardized mechanisms and interfaces to implement media processing elements within each media pipeline. Exemplary mechanisms include end to end flow connections between various processing steps format of data flow across nodes buffering and buffer exchange mechanism across nodes usage of threads for node processing and resource based scheduling of the threads. Further the pipeline framework enables user and kernel space buffer usage which avoids unnecessary copying of buffer data and enables performing as many in place computations as possible for a given platform and use case. Furthermore the pipeline framework enables a count based mechanism to allow multiple nodes in the media pipeline to use the same buffer without the need to maintain multiple copies of the buffer. In addition the pipeline framework enables queue management which involves defining configuration based rules that insert queues in between connections across the nodes which are used to manage scheduling jitters as well provides deterministic pipeline latency. Moreover the pipeline framework enables dynamic connectivity which allows connections between nodes to be rewired as the end user invokes new functionality or closes some ongoing operation. This allows for the least amount of resources to be used at any given point of time in the flexible and scalable software system . Also the pipeline framework enables resources based scheduling which ensures that the system threads do not waste time by periodically polling for resource availability. Further the pipeline framework allows interfaces to inject or tap media data to any media processing stage within the media pipeline. The inject and tap points enables control of the data flow in a pre defined manner.

In addition the SMT provides functionalities to enable resource monitoring exception and event management logging and collecting statistics from other modules in the flexible and scalable software system . The logging framework in the SMT allows the modules in the flexible and scalable software system to log traces for diagnostic and informational purposes. The EEM in the SMT provides a standardized framework for the modules in the flexible and scalable software system architecture to identify report log and handle exceptions and events. The SCM in the SMT provides a standardized framework to the modules in the flexible and scalable software system for collecting and reporting statistics related to their operations. The RMon in the SMT tracks resource utilization across all processes and threads that are running as part of the flexible and scalable software system . The health monitor interacts with the SCM the EEM and the RMon to gather information on the current operational status of the modules in the flexible and scalable software system and assesses the overall health of the flexible and scalable software system based on pre defined rules.

Also the application services A N provides highlevel functionality that integrate the features functionality from one or more of the media engine the DPM the SMT and the PAL into a logically integrated usage by an end user. Exemplary application services A N include a player service a recorder service a playback service and the like. In one embodiment the application services A N use one or more of the modules in the flexible and scalable software system to provide a service.

Further the ACU provides standard framework to control interface and configure the application services A N. The ASM in the ACU monitors interfaces and manages co existence of all application services A N as per a defined set of rules of the system framework . The CM in the ACU manages a user configuration for all application features and ensures that all software entities are synchronized with a centralized configuration pool. The DP in the ACU ensures user actions from a user interface are routed to an associated application service. The EH in the ACU manages exceptions or events that are not handled by lower entities in the flexible and scalable software system .

Further the UITL abstracts the usage of different types of UIs to access the functionality provided by the media engine . Exemplary UIs include command line UI HTTP based web UI QT based UI networked protocol for example simple network management protocol SNMP open network video interface forum ONVIF based UI and the like. Each UI is integrated using a custom plug in that translates from the syntax and semantics of that UI to a standard interface exported by ACU . The UITL accomplishes the translation and facilitates the transactions between the ACU and the software UI.

Referring now to which is a block diagram illustrating key interfaces between major components of the flexible and scalable software system for implementing the multimedia applications A N according to one embodiment. As shown in the flexible and scalable software system includes the hardware system the OS the BSP the PAL the LoC module the DPM the media engine the SMT the application services A N the ACU UITL and the UIs A N.

Further as shown in the PAL is communicatively coupled to the OS and the BSP . Furthermore the LoC module is communicatively coupled to the ACU the DPM the media engine the SMT the PAL and the UITL . In addition the DPM is communicatively coupled to the PAL the ACU and the media engine .

Moreover the media engine is communicatively coupled to the PAL and the ACU . Also the SMT is communicatively coupled to the ACU the DPM the media engine the LoC module the PAL and the UITL . Further the ACU is communicatively coupled to the UITL . Furthermore the UITL is communicatively coupled to the UIs A N. The functionality of each of the components is explained in detail with reference to .

Referring now to which illustrates a flowchart of a method for implementing multimedia applications using the MADK such as the one shown in according to one embodiment. At block a subset of elements modules needed for a multimedia application is selected from a set of core elements modules having pre defined functionality in a flexible and scalable software system. Each of the elements modules in the MADK has a pre defined functionality that is not dependent on the other elements modules in the multimedia application.

At block the selected subset of elements modules is combined using a system framework. The system framework defines a set of build tools and mechanisms to assist in combining the selected subset of elements modules to realize a desired multimedia application. This is explained in more detail with reference to . In one embodiment the obtained subset of elements modules is combined using the set of build tools and mechanisms. Further access to each of the subset of elements modules is provided via a set of standardized interfaces and rules associated with usage of the each of the standardized interfaces. Furthermore operational behavior of each standardized interface is consistently defined to realize a scalable and flexible software system framework architecture for the multimedia application.

At block the selected subset of elements modules and the system framework are implemented based on standardized rules defined SRM. The SRM defines rules to manage processes threads and memory in the flexible and scalable software system. At block further levels of control are allowed on the selected subset of elements modules. The further levels of control are allowed by defining build time configuration options for inclusion of specific features or functionality in the selected subset of elements modules. The further levels of control are also allowed by defining run time configuration options for allowing multiple modes of usage of the selected subset of elements modules across different multimedia applications.

Referring now to which shows a multimedia device including the flexible and scalable software system such as those shown in implementing a multimedia application according to one embodiment. As shown in the multimedia device includes a processor and memory . Further the multimedia application resides in the memory . Furthermore the multimedia application includes the flexible and scalable software system . Also the memory is operatively coupled to the processor .

In addition as shown in the flexible and scalable software system includes the hardware system the OS the BSP the PAL the LoC module the DPM the media engine the SMT the application services A N the ACU UITL and the UIs A N.

Further as shown in the PAL is communicatively coupled to the OS and the BSP . Furthermore the LoC module is communicatively coupled to the ACU the DPM the media engine the SMT the PAL and the UITL . In addition the DPM is communicatively coupled to the PAL the ACU and the media engine .

Moreover the media engine is communicatively coupled to the PAL and the ACU . Also the SMT is communicatively coupled to the ACU the DPM the media engine the LoC module the PAL and the UITL . Further the ACU is communicatively coupled to the UITL . Furthermore the UITL is communicatively coupled to the UIs A N. The functionality of each of the components is explained in detail with reference to .

In one embodiment an article comprising a non transitory computer readable storage medium having instructions thereon which when executed by a computing platform result in execution of the above mentioned method. The method described in the foregoing may be in a form of a machine readable medium embodying a set of instructions that when executed by a machine causes the machine to perform any method disclosed herein. It will be appreciated that the various embodiments discussed herein may not be the same embodiment and may be grouped into various other embodiments not explicitly disclosed herein.

In various embodiments architecture described with reference to proposes the scalable and flexible implementation of multimedia applications. Further the above architecture caters to multiple custom functional requirements. Furthermore the above architecture enables developers to choose only the elements modules that are needed for a multimedia application. In addition the above architecture reduces the amount of programming time required to use in a multimedia application. Also the above architecture allows scaling up and down the functionality and features from a master pool kit. Moreover the above architecture is extensible and allows users to add their own functions and also the above architecture is debug friendly via the provided analysis tools and data probes.

The above architecture allows abstraction of all platform specific software using abstraction layers for OS drivers framework and file system. Further the above architecture allows multiple applications to access physical drivers and hardware resources simultaneously by abstracting the usage of these resources from the physical device. Also the above architecture has evolving framework to do resource based scheduling for realizing media transformations ability to include one or more media transformations in the same project in a user selectable way and ability to allow integration of third party components. Furthermore the above architecture has a centralized management of system resources and health monitoring to enable an automated way to keep track of software performance during operation. The above architecture provides dedicated elements modules for providing application services and a framework to manage all the services provided by the elements modules. In addition the above architecture provides a rule based SRM for memory threads and various processes running in the multimedia application program.

Although certain methods systems apparatus architecture and articles of manufacture have been described herein the scope of coverage of this patent is not limited thereto. To the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the appended claims either literally or under the doctrine of equivalents.

