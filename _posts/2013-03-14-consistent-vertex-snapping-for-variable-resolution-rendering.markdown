---

title: Consistent vertex snapping for variable resolution rendering
abstract: A system, method, and computer program product are provided for adjusting vertex positions. One or more viewport dimensions are received and a snap spacing is determined based on the one or more viewport dimensions. The vertex positions are adjusted to a grid according to the snap spacing. The precision of the vertex adjustment may increase as at least one dimension of the viewport decreases. The precision of the vertex adjustment may decrease as at least one dimension of the viewport increases.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09478066&OS=09478066&RS=09478066
owner: NVIDIA Corporation
number: 09478066
owner_city: Santa Clara
owner_country: US
publication_date: 20130314
---
The present invention relates to three dimensional 3D graphics processing and more particularly to snapping vertices to coordinates.

A graphics processing pipeline converts input graphics data that is typically associated with three dimensional objects into pixel data that is associated with a two dimensional surface. In conventional implementations a world space portion of the graphics processing pipeline is responsible for processing the input graphics data which is usually composed of a collection of triangles and related vertices prior to when the data is converted into pixel data. A screen space portion of the graphics processing pipeline is responsible for processing the converted pixel data and generating final pixel values for display.

One of the stages in the graphics processing pipeline is the rasterization stage which typically involves converting the graphics data processed by the world space portion of the pipeline into pixel data in screen space. Rasterization may involve generating edge equations that describe the edges of triangles processed in the world space portion of the pipeline determining coverage information for those triangles and computing attribute values for the pixels and fragments covered by the triangles. The calculations involved in rasterization are generally fixed point calculations that are normally performed with a fixed fractional pixel precision. Thus the results of fixed point rasterization calculations can be thought of as snapped to a grid where the boxes of the grid correspond to boxes of fractional pixel size.

In many implementations a graphics processing pipeline may rasterize the same three dimensional object at different resolutions. For example a triangle may first be rasterized at a low resolution to make certain determinations about the triangle such as what general portions of a surface are covered by the triangle. The triangle may subsequently be rasterized at a higher resolution to generate image data for display. However rasterization conducted at a lower resolution generally provides results that are snapped to a coarser grid than rasterization conducted at a higher resolution. Therefore lower resolution rasterization may produce coverage results that do not properly align with the coverage results of higher resolution rasterization. For example if frame buffer memory is allocated for sparse rendering based on the results of low resolution rasterization memory may be over allocated or under allocated due to the fact that the results of lower resolution rasterization are snapped to a coarser grid. More specifically memory may be allocated for blocks for which no allocation is necessary or memory may fail to be allocated for blocks for which allocation is necessary.

Thus there is a need for addressing the issues of rasterizing graphics data at different resolutions and or other issues associated with the prior art.

A system method and computer program product are provided for adjusting vertex positions. One or more viewport dimensions are received and a snap spacing is determined based on the one or more viewport dimensions. The vertex positions are adjusted to a grid according to the snap spacing.

Conventionally an object is rasterized at two different resolutions by applying a viewport transform for an object at the two different resolutions calculating corresponding edge equations for the two different resolutions and rasterizing the object at two different resolutions. A first viewport transform produces two dimensional screen space coordinates for the vertices of the object at the first resolution and a second viewport transform produces two dimensional screen space coordinates for the vertices of the object at the second resolution.

However one drawback of the conventional approach is that applying the viewport transform at different resolutions causes the coordinates for the vertices of the object to be snapped to different grids since the fixed fractional pixel size is different for different resolutions. This snapping to different resolutions means that vertices are repositioned differently for an object at the first resolution compared with the same object at the second resolution causing the shape of the object to change as the resolution changes.

Since the amount of fractional pixel snap is relative to pixel size a vertex projected to a high resolution display surface is snapped less relative to the surface size than a vertex projected to a low resolution display surface. For example when vertices are snapped to 1 16 of a pixel in the width or height and a 10 10 pixel display surface a vertex is snapped 1 16 10 1 160 of the total display surface width and or height i.e. the grid spacing is effectively 1 160 in each dimension of the total display surface . On the other hand for a higher resolution display surface that is 80 80 pixels when vertices are snapped to 1 16 of a pixel a vertex is snapped 1 16 80 1 1280 of the total display surface width and or height i.e. the grid spacing is effectively 1 640 of the total display surface dimension .

This inconsistency in the shape of the representation of the same primitive for different display surface resolutions produces rasterization results at the lower resolution that are inconsistent in terms of coordinate positions compared with rasterization results at the higher resolution. Therefore if frame buffer memory were to be allocated for rasterization of the high resolution snapped primitive based on the results of rasterization of the low resolution snapped primitive the frame buffer memory may be allocated incorrectly because rasterization results for the low resolution snapped primitive do not necessarily align with those of the high resolution snapped primitive .

For some classes of algorithms it is desirable to have consistent rasterization results at different resolution levels. This is particularly true when rasterization is used for binning or allocation determination for which parts of the screen contain geometry . For example primitives for a scene may be rendered to a low resolution surface where each pixel represents a group of pixels for a higher resolution image. Conservative rasterization semantics require that if any part boundary of a pixel is intersected by the primitive the pixel is covered . During rasterization a conservative coarse pixel should always be indicated as covered if any fine pixels represented by that coarse pixel are covered by a primitive. Because conventional vertex snapping uses the same snapping precision for different display surface resolutions conventional vertex snapping does not necessarily conform to the conservative rasterization semantics.

More illustrative information will now be set forth regarding various optional architectures and features with which the foregoing framework may or may not be implemented per the desires of the user. It should be strongly noted that the following information is set forth for illustrative purposes and should not be construed as limiting in any manner. Any of the following features may be optionally incorporated with or without the exclusion of other features described.

Consistent rasterization may be produced for different viewport resolutions by varying the snap amount such that the amount of vertex movement in world space is uniform. Decreasing the snap spacing in half whenever the resolution of the display surface is reduced by half produces consistent rasterization results. The viewport is the two dimensional region of a display surface onto which a viewing volume for a scene is projected. Dimensions of the viewport are provided in pixels so that as the height and or width of the viewport decreases the resolution of the display surface also decreases assuming the pixel size is constant . Conversely as the height and or width of the viewport increases the resolution of the display surface increases.

The grid may be used to snap the primitive vertices and perform binning by rasterizing to determine which regions of the display surface i.e. bins a primitive covers. When conservative rasterization is performed if any boundary of a pixel is intersected by the primitive the pixel is considered to be covered by the primitive. When conventional rasterization is performed the pixel is considered to be covered when the primitive covers a sample location in the pixel e.g. pixel center . After the binning is complete the binned primitive s vertices may be snapped to the grid and rasterized.

In order to produce an exact solution with a finer snap spacing for a hardware implementation of a rasterizer with limited accuracy i.e. fixed point arithmetic the rasterizer needs to have sufficient precision to represent the snap spacings. For example the rasterizer should be capable of supporting snap spacings that are less than 1 256of a pixel. Through the normalization of edge equations that are used for rasterization the increased precision needed for smaller snap spacings can be accomplished without increasing the fixed point precision of the rasterizer.

A rasterizer determines coverage by evaluating edge equations to determine if a sample location within a pixel is inside or outside an edge of a primitive where a triangle has three edges defined by the three vertices. A set of edge equations may be expressed as 0 0 start delta  edge slope 1 mns 0 delta  edge slope 0 mns 1 1 1 start delta  edge slope 1 mns 2 delta  edge slope 1 mns 2 2 2 start delta  edge slope 2 mns 0 delta  edge slope 2 mns 0 The start value e.g. e0 start e1 start and e2 start is the location of edge equation at some fixed anchor location delta x and delta y are the distance from the fixed anchor location and the edge slopes e.g. edge slope x1 mns x0 edge slope y0 mns y1 etc. are computed based on the distance between pairs of vertices i.e. the length of the edge . When the edge value E E or E is greater or equal to zero as some sample location the sample is inside the respective edge. When a sample is inside all three edges of a primitive the sample is inside the primitive.

In one embodiment the edge slopes are normalized to maximize precision for large primitives that may be at least partially outside of the viewport. The rasterizer receives a pair of vertex differences e.g. edge slope x1 mns x0 and edge slope y0 mns y1 and the difference in the exponents is used to produce a fixed point representation of the distances to maximize the precision of the slope ratios. The fixed point representation also provides a consistent rasterization result for different viewport resolutions i.e. for different levels of hierarchical rasterization. When rendering using a lower resolution viewport with greater vertex position precision the mantissas of each edge difference e.g. edge slope x1 mns x0 and edge slope y0 mns y1 do not change but the exponents of the edge differences scale as the viewport size is reduced. For example as the resolution of the viewport is reduced by a power of two the exponents are decremented by one. Since the difference between exponents is constant the normalized edge equations are constant as the resolution of the viewport increases i.e. becomes finer or decreases i.e. becomes coarser . Thus the overall edge equations such as 0 0 start delta  edge slope 1 mns 0 delta  edge slope 0 mns 1 have fixed point slope values that remain constant as the viewport resolution varies and the e0 start value is reduced i.e. shifted right as the viewport resolution increases. The final determination of whether an edge is inside or outside a sample is computed based on whether the E value is greater or equal to zero. Therefore the bits that are truncated by shifting e0 start to the right do not affect the coverage determination and a consistent rasterization result is produced as the viewport size decreases and snap spacings also decrease i.e. vertex snapping precision increases .

The tessellation and geometry processing unit is a programmable execution unit that is configured to execute tessellation shader programs. The tessellation and geometry processing unit processes vertices produced by the vertex processing unit and may be configured to generate graphics primitives known as patches and various patch attributes. In some embodiments the tessellation and geometry processing unit may also perform topology configuration indexing the vertices including vertices associated with patches and compute texture coordinates corresponding to the vertices. The tessellation and geometry processing unit may also be configured to execute geometry shader programs thereby transforming graphics primitives. Vertices are grouped to construct graphics primitives for processing where graphics primitives include triangles line segments points and the like. For example the tessellation and geometry processing unit may be programmed to subdivide the graphics primitives into one or more new graphics primitives and calculate parameters such as plane equation coefficients that are used to rasterize the new graphics primitives. In some embodiments the tessellation and geometry processing unit may also add or delete elements in the geometry stream. The tessellation and geometry processing unit outputs the parameters and vertices specifying new graphics primitives to a viewport scale cull and clip unit .

The viewport scale cull and clip unit receives geometric data related to an object and executes a viewport transform on the geometric data to produce coordinates for the vertices of the object in two dimensional screen space. A viewport processing unit within the viewport scale cull and clip unit may be configured to perform the viewport transform varying the snap spacing based on the viewport resolution. A certain resolution e.g. width and height in pixels that generally corresponds to a two dimensional grid or space is specified for the viewport transform. The coordinates of the vertices of the object in the two dimensional space have values that correspond to this resolution. Thus for a resolution of 320 240 pixels horizontal coordinates for vertices of an object can range from 0 to 320 and vertical coordinates can range from 0 to 240. For other resolutions coordinates can have different ranges.

Calculations for the viewport transform typically include some rounding. That is coordinates that result from the viewport transform have a certain amount of rounding applied meaning that the results of the calculations for generating the screen space vertices are rounded to a certain precision. The viewport transform also snaps coordinates for the object vertices to a specified sub pixel grid. In other words the screen space positions for the vertices of the object that has had a viewport transform applied are aligned with a grid where the cells or sub pixels of the grid have a size equal to a specified fraction of a pixel for example all cells in the grid may have a size equal to th or 1 64th of a pixel . The snap spacing controls the precision to which vertices are snapped relative to the resolution of the viewport. The snap spacing is the dimension height or width of the cells in the grid and is specified as a fraction of a pixel. The snapping causes the coordinates of an object to be aligned with the sub pixel grid. The results of the viewport transform include the effects of the snapping and rounding and generally include screen space coordinates for each vertex of each object aligned to the sub pixel grid.

The viewport scale cull and clip unit is configured to determine a snap spacing based on the viewport resolution. When the viewport resolution changes the snap spacing may be increased or decreased to adjust the snap precision. More specifically as the viewport size in pixels increases the snap precision decreases i.e. the fraction of the pixel specified as the snap spacing increases . Similarly as the viewport size in pixels decreases the snap precision increases i.e. the fraction of the pixel specified as the snap spacing decreases . The snap spacing may be provided to the viewport scale cull and clip unit by an application program or the viewport scale cull and clip unit may be configured to compute the snap spacing for each viewport. In one embodiment more than one viewport may be defined and a snap spacing may be specified or computed for each one of the viewports. When hierarchical rasterization is supported two of more viewports may be defined that correspond to different levels of the rasterization hierarchy. The viewport scale cull and clip unit performs clipping culling and viewport scaling and outputs processed graphics primitives to a primitive setup unit .

The primitive setup unit computes the edge equation coefficients for each edge of each primitive e.g. edge start value delta x delta y where an edge is defined by two of the adjusted i.e. snapped vertices of a primitive. As previously explained the edge equations are typically in the form E x y Ax By C where A B and C are the coefficients calculated by setup unit x and y are coordinates of a pixel or sample to be evaluated by the edge equations and E x y represents the result of evaluating the edge equation for one set of x y coordinates. Even when the x y vertex positions change due to snapping the coefficients A and B corresponding to delta x and delta y are consistent across different resolutions when the edge slopes are normalized as previously described. C is the edge start value and will be shifted right if the resolution is reduced by a power of two. Basically when the resolution is halved x y and C are halved and A and B remain the same. E x y is halved but the sign positive zero or negative of E x y is not affected. Therefore the shape of a primitive is maintained between two different resolutions.

The rasterizer receives the screen space coordinates for vertices of an object and the edge equation coefficients from the primitive setup unit . The rasterizer takes primitives and edge equations from the setup unit and evaluates the edge equations provided by the primitive setup unit to determine coverage of samples or pixels for the object. The rasterizer scan converts the new graphics primitives and outputs fragments and coverage data to fragment processing unit . Additionally the rasterizer may be configured to perform z culling and other z based optimizations. In one embodiment the rasterizer may be implemented as a coarse rasterizer that computes coarse coverage information and a fine rasterizer that computes coverage information at a sub pixel granularity.

The fragment processing unit is a programmable execution unit that is configured to execute fragment shader programs transforming fragments received from the rasterizer as specified by the fragment shader programs. For example the fragment processing unit may be programmed to perform operations such as perspective correction texture mapping shading blending and the like to produce shaded fragments that are output to raster operations unit . Fragments may be shaded at pixel sample or other granularity depending on the programmed sampling rate.

The raster operations unit is a processing unit that performs raster operations such as stencil z test blending and the like and outputs pixel data as processed graphics data for storage in graphics memory. The processed graphics data may be stored in memory for display or for further processing. In some embodiments of the present invention raster operations unit is configured to compress z or color data that is written to memory and decompress z or color data that is read from memory.

At step the primitive vertex positions are adjusted to a sub pixel grid according to the viewport dependent snap spacing to produce snapped vertex positions. At step the primitives defined by the snapped vertex positions are rasterized.

In one embodiment the PPU includes an input output I O unit configured to transmit and receive communications i.e. commands data etc. from a central processing unit CPU not shown over the system bus . The I O unit may implement a Peripheral Component Interconnect Express PCIe interface for communications over a PCIe bus. In alternative embodiments the I O unit may implement other types of well known bus interfaces.

The PPU also includes a host interface unit that decodes the commands and transmits the commands to the grid management unit or other units of the PPU e.g. memory interface as the commands may specify. In the context of the grid management unit a grid is a quantity of processing work. The host interface unit is configured to route communications between and among the various logical units of the PPU .

In one embodiment a program encoded as a command stream is written to a buffer by the CPU. The buffer is a region in memory e.g. memory or system memory that is accessible i.e. read write by both the CPU and the PPU . The CPU writes the command stream to the buffer and then transmits a pointer to the start of the command stream to the PPU . The host interface unit provides the grid management unit GMU with pointers to one or more streams. The GMU selects one or more streams and is configured to organize the selected streams as a pool of pending grids. The pool of pending grids may include new grids that have not yet been selected for execution and grids that have been partially executed and have been suspended.

A work distribution unit that is coupled between the GMU and the SMs manages a pool of active grids selecting and dispatching active grids for execution by the SMs . Pending grids are transferred to the active grid pool by the GMU when a pending grid is eligible to execute i.e. has no unresolved data dependencies. An active grid is transferred to the pending pool when execution of the active grid is blocked by a dependency. When execution of a grid is completed the grid is removed from the active grid pool by the work distribution unit . In addition to receiving grids from the host interface unit and the work distribution unit the GMU also receives grids that are dynamically generated by the SMs during execution of a grid. These dynamically generated grids join the other pending grids in the pending grid pool.

In one embodiment the CPU executes a driver kernel that implements an application programming interface API that enables one or more applications executing on the CPU to schedule operations for execution on the PPU . An application may include instructions i.e. API calls that cause the driver kernel to generate one or more grids for execution. In one embodiment the PPU implements a SIMD Single Instruction Multiple Data architecture where each thread block i.e. warp in a grid is concurrently executed on a different data set by different threads in the thread block. The driver kernel defines thread blocks that are comprised of k related threads such that threads in the same thread block may exchange data through shared memory. In one embodiment a thread block comprises 32 related threads and a grid is an array of one or more thread blocks that execute the same stream and the different thread blocks may exchange data through global memory.

In one embodiment the PPU comprises X SMs X . For example the PPU may include 15 distinct SMs . Each SM is multi threaded and configured to execute a plurality of threads e.g. 32 threads from a particular thread block concurrently. Each of the SMs is connected to a level two L2 cache via a crossbar or other type of interconnect network .

The L2 cache is connected to one or more memory interfaces . Memory interfaces implement 16 32 64 128 bit data buses or the like for high speed data transfer. In one embodiment the PPU comprises U memory interfaces U where each memory interface U is connected to a corresponding memory device U . For example PPU may be connected to up to 6 memory devices such as graphics double data rate version 5 synchronous dynamic random access memory GDDR5 SDRAM .

In one embodiment the PPU implements a multi level memory hierarchy. The memory is located off chip in SDRAM coupled to the PPU . Data from the memory may be fetched and stored in the L2 cache which is located on chip and is shared between the various SMs . In one embodiment each of the SMs also implements an L1 cache. The L1 cache is private memory that is dedicated to a particular SM . Each of the L1 caches is coupled to the shared L2 cache . Data from the L2 cache may be fetched and stored in each of the L1 caches for processing in the functional units of the SMs .

In one embodiment the PPU comprises a graphics processing unit GPU . The PPU is configured to receive commands that specify shader programs for processing graphics data. Graphics data may be defined as a set of primitives such as points lines triangles quads triangle strips and the like. Typically a primitive includes data that specifies a number of vertices for the primitive e.g. in a model space coordinate system as well as attributes associated with each vertex of the primitive. The PPU can be configured to process the graphics primitives to generate a frame buffer i.e. pixel data for each of the pixels of the display . The driver kernel implements a graphics processing pipeline such as the graphics processing pipeline defined by the OpenGL API.

An application writes model data for a scene i.e. a collection of vertices and attributes to memory. The model data defines each of the objects that may be visible on a display. The application then makes an API call to the driver kernel that requests the model data to be rendered and displayed. The driver kernel reads the model data and writes commands to the buffer to perform one or more operations to process the model data. The commands may encode different shader programs including one or more of a vertex shader hull shader geometry shader pixel shader etc.

The GMU may configure one or more SMs to perform the functions of one or more of the processing units shown in e.g. a vertex processing unit a tessellation processing unit a geometry processing unit and a fragment processing unit. The functions of viewport scale cull and clip processing unit coarse rasterizer fine rasterizer and raster operations unit may also be performed by other processing engines within a GMU .

For example the GMU may configure one or more SMs to execute a vertex shader program that processes a number of vertices defined by the model data. In one embodiment the GMU may configure different SMs to execute different shader programs concurrently. For example a first subset of SMs may be configured to execute a vertex shader program while a second subset of SMs may be configured to execute a pixel shader program. The first subset of SMs processes vertex data to produce processed vertex data and writes the processed vertex data to the L2 cache and or the memory . After the processed vertex data is rasterized i.e. transformed from three dimensional data into two dimensional data in screen space to produce fragment data the second subset of SMs executes a pixel shader to produce processed fragment data which is then blended with other processed fragment data and written to the frame buffer in memory . The vertex shader program and pixel shader program may execute concurrently processing different data from the same scene in a pipelined fashion until all of the model data for the scene has been rendered to the frame buffer. Then the contents of the frame buffer are transmitted to a display controller for display on a display device.

The PPU may be included in a desktop computer a laptop computer a tablet computer a smart phone e.g. a wireless hand held device personal digital assistant PDA a digital camera a hand held electronic device and the like. In one embodiment the PPU is embodied on a single semiconductor substrate. In another embodiment the PPU is included in a system on a chip SoC along with one or more other logic units such as a reduced instruction set computer RISC CPU a memory management unit MMU a digital to analog converter DAC and the like.

In one embodiment the PPU may be included on a graphics card that includes one or more memory devices such as GDDR5 SDRAM. The graphics card may be configured to interface with a PCIe slot on a motherboard of a desktop computer that includes e.g. a northbridge chipset and a southbridge chipset. In yet another embodiment the PPU may be an integrated graphics processing unit iGPU included in the chipset i.e. Northbridge of the motherboard.

As described above the work distribution unit dispatches active grids for execution on one or more SMs of the PPU . The scheduler unit receives the grids from the work distribution unit and manages instruction scheduling for one or more thread blocks of each active grid. The scheduler unit schedules threads for execution in groups of parallel threads where each group is called a warp. In one embodiment each warp includes 32 threads. The scheduler unit may manage a plurality of different thread blocks allocating the thread blocks to warps for execution and then scheduling instructions from the plurality of different warps on the various functional units i.e. cores DPUs SFUs and LSUs during each clock cycle.

In one embodiment each scheduler unit includes one or more instruction dispatch units . Each dispatch unit is configured to transmit instructions to one or more of the functional units. In the embodiment shown in the scheduler unit includes two dispatch units that enable two different instructions from the same warp to be dispatched during each clock cycle. In alternative embodiments each scheduler unit may include a single dispatch unit or additional dispatch units .

Each SM includes a register file that provides a set of registers for the functional units of the SM . In one embodiment the register file is divided between each of the functional units such that each functional unit is allocated a dedicated portion of the register file . In another embodiment the register file is divided between the different warps being executed by the SM . The register file provides temporary storage for operands connected to the data paths of the functional units.

Each SM comprises L processing cores . In one embodiment the SM includes a large number e.g. 192 etc. of distinct processing cores . Each core is a fully pipelined single precision processing unit that includes a floating point arithmetic logic unit and an integer arithmetic logic unit. In one embodiment the floating point arithmetic logic units implement the IEEE 754 2008 standard for floating point arithmetic. Each SM also comprises M DPUs that implement double precision floating point arithmetic N SFUs that perform special functions e.g. copy rectangle pixel blending operations and the like and P LSUs that implement load and store operations between the shared memory L1 cache and the register file . In one embodiment the SM includes 64 DPUs 32 SFUs and 32 LSUs .

Each SM includes an interconnect network that connects each of the functional units to the register file and the shared memory L1 cache . In one embodiment the interconnect network is a crossbar that can be configured to connect any of the functional units to any of the registers in the register file or the memory locations in shared memory L1 cache .

In one embodiment the SM is implemented within a GPU. In such an embodiment the SM comprises J texture units . The texture units are configured to load texture maps i.e. a 2D array of texels from the memory and sample the texture maps to produce sampled texture values for use in shader programs. The texture units implement texture operations such as anti aliasing operations using mip maps i.e. texture maps of varying levels of detail . In one embodiment the SM includes 16 texture units .

The PPU described above may be configured to perform highly parallel computations much faster than conventional CPUs. Parallel computing has advantages in graphics processing data compression biometrics stream processing algorithms and the like.

The system also includes input devices a graphics processor and a display i.e. a conventional CRT cathode ray tube LCD liquid crystal display LED light emitting diode plasma display or the like. User input may be received from the input devices e.g. keyboard mouse touchpad microphone and the like. In one embodiment the graphics processor may include a plurality of shader modules a rasterization module etc. Each of the foregoing modules may even be situated on a single semiconductor platform to form a graphics processing unit GPU .

In the present description a single semiconductor platform may refer to a sole unitary semiconductor based integrated circuit or chip. It should be noted that the term single semiconductor platform may also refer to multi chip modules with increased connectivity which simulate on chip operation and make substantial improvements over utilizing a conventional central processing unit CPU and bus implementation. Of course the various modules may also be situated separately or in various combinations of semiconductor platforms per the desires of the user.

The system may also include a secondary storage . The secondary storage includes for example a hard disk drive and or a removable storage drive representing a floppy disk drive a magnetic tape drive a compact disk drive digital versatile disk DVD drive recording device universal serial bus USB flash memory. The removable storage drive reads from and or writes to a removable storage unit in a well known manner.

Computer programs or computer control logic algorithms may be stored in the main memory and or the secondary storage . Such computer programs when executed enable the system to perform various functions. The compiler program may be executed by the central processor or the graphics processor . The main memory the storage and or any other storage are possible examples of computer readable media.

In one embodiment the architecture and or functionality of the various previous figures may be implemented in the context of the central processor the graphics processor an integrated circuit not shown that is capable of at least a portion of the capabilities of both the central processor and the graphics processor a chipset i.e. a group of integrated circuits designed to work and sold as a unit for performing related functions etc. and or any other integrated circuit for that matter.

Still yet the architecture and or functionality of the various previous figures may be implemented in the context of a general computer system a circuit board system a game console system dedicated for entertainment purposes an application specific system and or any other desired system. For example the system may take the form of a desktop computer laptop computer server workstation game consoles embedded system and or any other type of logic. Still yet the system may take the form of various other devices including but not limited to a personal digital assistant PDA device a mobile phone device a television etc.

Further while not shown the system may be coupled to a network e.g. a telecommunications network local area network LAN wireless network wide area network WAN such as the Internet peer to peer network cable network or the like for communication purposes.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

