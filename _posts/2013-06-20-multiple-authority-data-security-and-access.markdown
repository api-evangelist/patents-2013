---

title: Multiple authority data security and access
abstract: Data is encrypted such that multiple keys are needed to decrypt the data. The keys are accessible to different entities so that no single entity has access to all the keys. At least one key is managed by a service provider. A customer computer system of the service provider may be configured with executable instructions directing the orchestration of communications between the various entities having access to the keys. As a result, security compromise in connection with a key does not, by itself, render the data decryptable.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09407440&OS=09407440&RS=09407440
owner: Amazon Technologies, Inc.
number: 09407440
owner_city: Seattle
owner_country: US
publication_date: 20130620
---
The security of computing resources and associated data is of high importance in many contexts. As an example organizations often utilize networks of computing devices to provide a robust set of services to their users. Networks often span multiple geographic boundaries and often connect with other networks. An organization for example may support its operations using both internal networks of computing resources and computing resources managed by others. Computers of the organization for instance may communicate with computers of other organizations to access and or provide data while using services of another organization. In many instances organizations configure and operate remote networks using hardware managed by other organizations thereby reducing infrastructure costs and achieving other advantages. With such configurations of computing resources ensuring that access to the resources and the data they hold is secure can be challenging especially as the size and complexity of such configurations grow.

In many instances various entities find it advantageous to take advantage of computing resource services provided by others. This often involves the transfer of data to and the storage of data in computing resources controlled by third parties. Despite great efforts taken by such third parties to operate environments where data security is emphasized there can exist a lack of trust whether justified or not that can discourage use of services operated by third parties. In addition organizations that utilize the services of third parties may wish to enhance their own data security so that for instance rogue employees or others with access to data are limited in the amount of damage that can be caused. When data is moved among various entities during the operations of an organization ensuring the security of the data is generally cumbersome complicated and consumes significant amounts of resources.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein relate to the encryption of data in a manner that ensures that no single entity is able to access the data without authorization. In some embodiments processes for encrypting data involve multiple entities and the use of multiple cryptographic keys also referred to more generally as keys. The keys that are used may be accessible to one involved entity but not another and all keys may be required for authorized decryption of the data e.g. decryption of the data without having to obtain one or more keys without authorization . In this manner if a key is compromised e.g. if an unauthorized entity gains access to the key the key cannot be used to decrypt the data without access to one or more additional keys which may be stored by other entities.

In some embodiments a customer of a computing resource provider has access to a customer key to which the computing resource provider lacks access. Similarly the computing resource service provider has access to a managed key to which the customer lacks access. The customer may however submit requests to the computing resource service provider to cause the computing resource provider to perform cryptographic operations using the managed key. The requests may specify the managed key by an identifier associated with the managed key. The managed key may be managed exclusively for the customer while ensuring that the customer and other entities do not have access to the managed key. In various embodiments data is encrypted so that both the customer key and the managed key are needed to decrypt the data. In some embodiments multiple computing resource service providers or generally multiple third party entities are utilized in an encryption process so that a key exclusively held by each third party is necessary for authorized decryption of the data.

In various embodiments computer readable storage media contain executable instructions that when executed by one or more processors of a customer computer system cause the computer system to orchestrate the flow of data to cause the data to be encrypted using multiple keys. The executable instructions may be provided by a computing resource provider such as part of a downloadable client library with various programming modules for utilizing services offered by the computing resource service provider. As another example the executable instructions may be in the form of JavaScript or another interpreted and or scripting language. Multiple customers may utilize the executable instructions to orchestrate the flow of data among the various entities having keys involved in an encryption and or decryption process thereby enhancing their data security by ensuring that a compromise at one entity is not enough for unauthorized data access.

As discussed in more detail below in some embodiments a system comprises one or more computer systems including one or more processors and computer memory where the memory includes instructions that upon execution by the one or more processors cause the system to perform various operations. The operations may include receiving from a client such as a computing device of a customer of a computing resource service provider a request to perform a cryptographic operation using a first key specified in the request. The system may pursuant to the instructions send in response to the request a cryptographic key encrypted using at least a key controlled by a service provider operating the one or more computer systems. The system may additionally pursuant to the instructions receive data encrypted using the cryptographic key wherein the data encrypted using the cryptographic key additionally being encrypted using a client key. Upon receipt of the data encrypted using the cryptographic key the system may pursuant to the instructions perform one or more operations in connection with the encrypted data such as by persistently storing the encrypted data in one or more data storage devices.

As noted above a computing resource service provider may provide various computing resource services to its customers. The services provided by the computing resource service provider in this example include a virtual computer system service a block level data storage service a cryptography service also referred to as a key management service an on demand data storage service and one or more other services although not all embodiments of the present disclosure will include all such services and additional services may be provided in addition to or as an alternative to services explicitly described herein. Each of the services may include one or more web service interfaces that enable the customer to submit appropriately configured API calls to the various services through web service requests. In addition each of the services may include one or more service interfaces that enable the services to access each other e.g. to enable a virtual computer system of the virtual computer system service to store data in or retrieve data from the on demand data storage service and or to access one or more block level data storage devices provided by the block data storage service .

The virtual computer system service may be a collection of computing resources configured to instantiate virtual machine instances onto virtual computing systems on behalf of the customers of the computing resource service provider . Customers of the computing resource service provider may interact with the virtual computer systems service via appropriately configured and authenticated API calls to provision and operate virtual computer systems that are instantiated on physical computing devices hosted and operated by the computing resource service provider . The virtual computer systems may be used for various purposes such as to operate as servers supporting a website to operate business applications or generally to serve as computing power for the customer. Other applications for the virtual computer systems may be to support database applications electronic commerce applications business applications and or other applications.

The block level data storage service may comprise a collection of computing resources that collectively operate to store data for a customer using block level storage devices and or virtualizations thereof . The block level storage devices of the block level data storage service may for instance be operationally attached to virtual computer systems provided by the virtual computer system service to serve as logical units e.g. virtual drives for the computer systems. A block level storage device may enable the persistent storage of data used generated by a corresponding virtual computer system where the virtual computer system service may only provide ephemeral data storage.

As illustrated in the computing resource service provider may operate a cryptography service which is described in more detail below in connection with . Generally the cryptography service may be a collection of computing resources collectively configured to manage and use cryptographic keys for customers of the computing resource service provider. Keys used by the cryptography service may have associated identifiers that the customers can reference when submitting requests to perform cryptographic operations such as encryption decryption and message signing and or other operations such as key rotation. The cryptography service may securely maintain the cryptographic keys to avoid access by unauthorized parties.

The computing resource service provider may also include an on demand data storage service. The on demand data storage service may be a collection of computing resources configured to synchronously process requests to store and or access data. The on demand data storage service may operate using computing resources e.g. databases that enable the on demand data storage service to locate and retrieve data quickly so as to allow data to be provided in responses to requests for the data. For example the on demand data storage service may maintain stored data in a manner such that when a request for a data object is retrieved the data object can be provided or streaming of the data object can be initiated in a response to the request. As noted data stored in the on demand data storage service may be organized into data objects. The data objects may have arbitrary sizes except perhaps for certain constraints on size. Thus the on demand data storage service may store numerous data objects of varying sizes. The on demand data storage service may operate as a key value store that associates data objects with identifiers of the data objects which may be used by the customer to retrieve or perform other operations in connection with the data objects stored by the on demand data storage service . The on demand data storage service may also be accessible to the cryptography service . For instance in some embodiments the cryptography service utilizes the on demand data storage service to store keys of the customers in encrypted form where keys usable to decrypt the customer keys are accessible only to particular devices of the cryptography service . Access to the data storage service by a customer another service or other entity may be through appropriately configured API calls.

The computing resource service provider may additionally maintain one or more other services based on the needs of its customers . For instance the computing resource service provider may maintain a database service for its customers . A database service may be a collection of computing resources that collectively operate to run one or more databases for one or more customers . Customers of the computing resource service provider may operate and manage a database from the database service by utilizing appropriately configured API calls. This in turn may allow a customer to maintain and potentially scale the operations in the database. Other services include but are not limited to object level archival data storage services services that manage and or monitor other services and or other services.

As discussed above various embodiments of the present disclosure are directed to providing cryptography services. Cryptography services may be provided by a cryptography service system such as described above. accordingly shows an illustrative example of a cryptography service in accordance with various embodiments. As illustrated in and as discussed above the cryptography service is logically comprised of a frontend system and a backend system. Both the frontend system and the backend system may be implemented by one or more computer systems configured to perform operations described herein. For example as illustrated in the frontend system of the cryptography service implements a request API and a policy configuration API . The request API in an embodiment is an API configured for requesting cryptographic and other operations to be performed by the cryptography service. Thus requests may be made to the frontend system via the request API in order for such cryptographic operations to be performed by the cryptography service.

A CreateKey KeyID request in an embodiment causes the cryptography service to create a key identified by the KeyID identified in the request. Upon receipt of a request the cryptography service may generate a key and associate the key with the KeyID. It should be known that KeyID s may be but are not necessarily unique identifiers. For instance a KeyID may identify a family of keys. For example in some embodiments key rotation is performed. Key rotation may involve replacing keys with other keys to prevent collection of enough decrypted data to allow practical cracking of a cipher used. If performed at the direction of an entity different from the cryptography service use of the CreateKey KeyID request may cause the cryptography service to create a new key to replace an old key identified by the KeyID. The old key may remain identified by the KeyID but may for instance be only used for decryption of data that has already been encrypted using the old key and not for future encryption. As another example in some embodiments users of the cryptography service provide their own key identifiers and there is a possibility that two different customers may provide the same identifier. In such instances the identifier may not uniquely identify a key or even uniquely identify a family of keys. Various measures may be in place to address this. For example an identity or other information associated with a user of the cryptography service may be used to identify the proper key or family of keys. In still other embodiments the cryptographic service may assign a KeyID randomly sequentially or using any other method.

It should be noted that when a KeyID does not uniquely identify a key various systems may be in place to enable proper functionality. For example in various embodiments a family of keys identified by a KeyID is finite. If a decryption operation using a key identified by a KeyID is requested additional data e.g. a time stamp of when the encryption was performed may enable determining the proper key to use. In some embodiments ciphertexts may include information indicating a key version. In some embodiments all possible keys are used to provide different decryptions of the data. Since there are a finite number of keys the proper decryption may be selected from those provided. In some embodiments decryption with a key is performed in a manner that enables the cryptographic service to detect that the ciphertext was not generated based at least in part on the key such as by using authenticated encryption. Other variations are also considered as being within the scope of the present disclosure.

An Encrypt KeyID Data AAD request may be used to cause the cryptography service to encrypt the specified data using a key identified by the KeyID. Additional Authenticated Data AAD may be used for various purposes and may be data that is not necessarily encrypted but that is authenticated e.g. by an electronic signature a message authentication code or generally a keyed hash value included with the AAD. In some embodiments the ciphertext is generated including at least a portion of the AAD. In some other embodiments the AAD is provided separately during decryption. In some other embodiments the AAD is generated at decryption time based at least in part on the request and or other metadata such that decryption will only succeed when the metadata passes. In some embodiments policy may constrain whether a cryptographic operation can be performed with respect to particular AAD. Processing of Encrypt KeyID Data AAD requests may require by programming logic and or policy enforced by the cryptography service both that the AAD contain particular values and that the AAD be authentic e.g. not modified since original transmission . Similarly a Decrypt KeyID Ciphertext AAD request may be used to cause the cryptography service to decrypt the specified ciphertext using a key identified by the KeyID. The AAD in the Decrypt KeyID Ciphertext AAD request may be used such as described above. For instance processing of the Decrypt KeyID Ciphertext AAD may require by programming logic and or policy enforced by the cryptography service both that the AAD contain particular values and that the AAD be authentic e.g. not modified since original transmission .

The Shred KeyID in an embodiment may be used to cause the cryptography service to electronically shred a key or family of keys identified by the specified KeyID. Electronic shredding may include making the key no longer accessible. For example use of the Shred KeyID request may cause the cryptography system to command one or more hardware devices to perform a SecureErase operation on one or more keys identified by the specified KeyID. Generally the key s identified by the KeyID may be electronically shredded in any suitable manner such as by overwriting data encoding the key with other data e.g. a series of zeros or ones or a random string and or by removing power to volatile memory in which the key is stored. If the key s are stored encrypted under a key the key used to encrypt the keys may be electronically shredded thereby causing a loss of access to the key s . In some embodiments the shred operation may cause decrypt operations indicating the shredded KeyID to fail at some determined point in the future. Other manners of securely and permanently destroying any possible access to the key s may be used.

The ReKey Ciphertext OldKeyID NewKeyID request in an embodiment may be used to cause the cryptography service to encrypt ciphertext under a different key. When the cryptography service receives a ReKey Ciphertext OldKeyID NewKeyID request it may use a key identified by the OldKeyID to decrypt the specified ciphertext and then use a key identified by the NewKeyID to encrypt the decrypted ciphertext. If a key identified by the NewKeyID does not yet exist the cryptography service may generate a key to use and associate the generated key with the specified NewKeyID such as described in connection the Create KeyID request described above. In some embodiments the ReKey operation may be operable to cause data to be transferrable between isolated instances of a cryptography service. In some embodiments a policy might permit a rekey operation to be performed on a ciphertext but might not permit the same requestor to directly decrypt the ciphertext. In some embodiments ReKey might support rekeying a ciphertext from a key identified by a first KeyID within a first account to a key identified by a KeyID within a second account.

Similarly the frontend system may implement a policy configuration API which in an embodiment enables users to submit requests for configuring policies for the performance of cryptographic operations and for other policy related operations. Policies may be associated with keys groups of keys accounts users and other logical entities in various embodiments. Example policies which may be configured via the policy configuration API are provided below. In an embodiment the cryptography service policy configuration API includes the following requests 

In an embodiment the SetKeyPolicy KeyID Policy request may be used to cause the cryptography service to store a policy on the key or family of keys identified by the KeyID. A policy may be information that is determinative of whether a requested cryptographic operation can be performed in a particular context. The policy may be encoded in a declarative access control policy language such as eXtensinble Access Control Markup Language XACML Enterprise Privacy Authorization Language EPAL Amazon Web Services Access Policy Language Microsoft SecPol or any suitable way of encoding one or more conditions that must be satisfied for a cryptographic operation to be performed. Policies may define what operations can be performed when the operations can be performed which entities can make authorized requests for operations to be performed which information is required for a particular request to be authorized and the like. In addition policies may be defined and or enforced using access control lists privileges associated with users and or operation bitmasks in addition to or instead of the examples given above. Example policies appear below.

In some embodiments the cryptographic service may support a suspend operation e.g. using a Suspend KeyID Public Key API call. A suspend operation enables the customer of the cryptographic service to deny the operator of the cryptographic service use of or access to a key. This can be useful to customers concerned about covert lawful orders or other circumstances in which the operator of the cryptographic service might be compelled to perform some operation using a key. It may also be useful to customers that wish to lock particular data and render it inaccessible online. In some embodiments a suspend operation might include receiving a public key from a customer and encrypting the key specified by a given KeyID with the received public key and shredding the key specified by the KeyID such that the provider is not able to access the suspended key unless the private key associated with the public key is provided e.g. using a Reinstate KeyID Private Key API call that both specifies the KeyID and includes the private key. In some other embodiments a suspend operation might involve encrypting a key associated with a specified KeyID using another key managed by the cryptographic service including without limitation one created for the purpose of the instant suspend operation. The ciphertext produced by this operation can be provided to the customer and not retained within the cryptographic service. The original key identified by the KeyID can then be shredded. The cryptographic service may be operable to receive the provided ciphertext and re import the suspended key. In some embodiments the ciphertext may be generated in a manner that will prevent the cryptographic service from returning a decrypted version to the customer.

As illustrated in the cryptography service includes a backend system that itself comprises various components in some embodiments. For example the backend system in this example includes a request processing system also referred to as a request processing unit or request processing component which may be a subsystem of the cryptography service that is configured to perform operations in accordance with requests received through either the request API or the policy configuration API . For example the request processing component may receive requests received via the request API and the policy configuration API determines whether such requests are authentic and are therefore fulfillable and may fulfill the requests. Fulfilling the request may include for example performing and or having performed cryptographic operations. The request processing unit may be configured to interact with an authentication interface which enables the request processing unit to determine whether requests are authentic. The authentication interface may be configured to interact with an authentication system which may be an authentication system utilized by multiple services of a computing resource service provider. For example when a request is received by the request processing unit the request processing unit may utilize the authentication interface to interact with an authentication service which may if applicable provide authentication proof that may be used in order to cause a performance of cryptographic operations. The request processing system may also be configured with an interface that enables interaction with other services of a computing resource service provider. For example in embodiments where customer keys are stored in encrypted form in a data storage service the request processing system may submit API calls to the data storage service to obtain customer keys when needed. The cryptography service may also store customer keys in encrypted form in a local data storage system or in encrypted or unencrypted form in one or more security modules discussed below.

The backend system of the cryptography service in this illustrative example includes a plurality of a security modules cryptography modules a policy enforcement module and a coordinator module . The coordinator module may be a system configured to coordinate the security modules . For example in some embodiments the coordinator module is configured to ensure that security modules identified as members of a cryptographic domain also referred to simply as domain operate in accordance with consistent operational parameters for the domain. As one example each security module may have access to a domain key for the domain. Customer keys may be encrypted under the domain key and stored externally to the security modules e.g. in the backend system and or using a data storage service thereby enabling the security modules to operate without the need to store all customer keys that the security modules may use. Briefly when a customer requests that a cryptographic operation be performed using a key identified by a KeyID the encrypted customer key identified by the KeyID may be provided to a security module that can use the domain key to decrypt the customer key and use the decrypted customer key to perform the requested operation using the decrypted customer key.

As another example the coordinator module may be configured to ensure that the security modules each enforce a common set of rules before accepting e.g. reconfiguring to an updated set of operational parameters. For instance each security module may enforce quorum rules that defines one or more sets of operators that are sufficient for authorizing certain changes to the operational parameters such as changes to the domain key e.g. to rotate the domain key changes to the members of the set of security modules comprising the domain changes to a set of operators for the domain e.g. those authorized to participate in causing changes to be made to the domain and the like.

In the embodiment described in one or more of the security modules may be hardware security modules although in various embodiments a security module may be any suitable computer device configured according to have capabilities described herein. Each security module in an embodiment either stores a plurality of keys associated with KeyIDs and or stores keys under which externally stored keys associated with KeyIDs are encrypted. Each security module may be configured to securely store the keys so as to not be accessible by other components of the cryptography service and or other components of other systems. For instance in some embodiments in which security modules store domain keys as described above only security modules of a domain may store a corresponding domain key. All other entities may lack access to the domain key.

In various embodiments some or all of the security modules are compliant with at least one security standard. For example in some embodiments the security modules are each validated as compliant with a Federal Information Processing Standard FIPS outlined in FIPS Publication 140 1 and or 140 2 such as one or more security levels outlined in FIPS Publication 140 2. In addition in some embodiments each security module is certified under the Cryptographic Module Validation Program CMVP . As noted a security module may be implemented as a hardware security module HSM or another security module having some or all capabilities of an HSM. In some embodiments a validated module is used to bootstrap operations. In some embodiments customers can configure some keys that are stored in and operated on only by validated modules and other keys that are operated on by software. In some embodiments the performance or cost associated with these various options may differ.

The security modules may be configured to perform cryptographic operations in accordance with instructions provided by the request processing unit . For example the request processing unit may provide ciphertext and a KeyID to an appropriate security module with instructions to the security module to use a key associated with the KeyID to decrypt the ciphertext and provide in response the plaintext. In embodiments where customer keys are stored externally to security modules the request processing unit may access an encrypted version of the key identified by the KeyID e.g. from a local storage system or an external cryptography service and provide the encrypted version of the key to the security module which can then decrypt and then use the key.

In an embodiment the backend system of the cryptography service securely stores a plurality of keys forming a key space. Each of the security modules may store all keys in the key space however variations are considered as being within the scope of the present disclosure. For example each of the security modules may store a subspace of the key space. Subspaces of the key space stored by security modules may overlap so that the keys are redundantly stored throughout the security modules. In some embodiments certain keys may be stored only in specified geographic regions. In some embodiments certain keys may be accessible only to operators having a particular certification or clearance level. In some embodiments certain keys may be stored in and used only with a module operated by a particular third party provider under contract with the provider of data storage services. In some embodiments constructive control of security modules may require that lawful orders seeking to compel use of keys other than as authorized by the customer to involve either additional entities being compelled or additional jurisdictions compelling action. In some embodiments customers may be offered independent options for the jurisdiction in which their ciphertexts are stored and their keys are stored. In some embodiments security modules storing keys may be configured to provide audit information to the owner of the keys and the security modules may be configured such that the generation and providing of audit information not suppressible by the customer. In some embodiments the security modules may be configured to independently validate a signature generated by the customer such that the provider e.g. hosting the security modules is not able to perform operations under keys stored by the security modules. In addition some security models may store all of the key space and some security modules may store subspaces of the key space. Other variations are also considered as being the scope of the present disclosure. In instances where different security modules store different subspaces of the key space the request processing unit may be configured such as with a relational table or other mechanism to determine which security module to instruct to perform cryptographic operations in accordance with various requests.

In an embodiment the policy enforcement module is configured to obtain information from a request processing unit and determine based at least in part on that information whether the request received through the API may be performed. For example when a request to perform cryptographic operation is received through the request API the request processing unit may interact with the policy enforcement module to determine whether fulfillment of the request is authorized according to any applicable policy such as policy applicable to a specified KeyID in the request and or other policies such as policy associated with the requestor. If the policy enforcement module allows fulfillment of the request the request processing unit may accordingly instruct an appropriate security module to perform cryptographic operations in accordance with fulfilling the request.

As with all figures described herein numerous variations are considered as being within the scope of the present disclosure. For example shows the policy enforcement module separate from security modules. However each security module may include a policy enforcement module in addition to or instead of the policy enforcement module illustrated as separate. Thus each security module may be independently configured to enforce policy. In addition as another example each security module may include a policy enforcement module which enforces policies different from policies enforced by a separate policy enforcement module. Numerous other variations are considered as being within the scope of the present disclosure.

As illustrated in the cryptography service may include a logging module . The logging module may be a system configured to perform various activities in connection with tracking various operations of the cryptography service. For example requests submitted to the request API may be logged by the logging module in association with other data such as for each request an identifier of the customer on behalf of whom the request was purportedly submitted an identity associated with the customer e.g. employee or contractor that transmitted the request the type of the request e.g. which of several API call types was used whether the request was approved whether the request was fulfilled any reasons the request was not approved if applicable an identifier of a key used in fulfilling the request and the like. The logging module may also be configured to maintain counters for keys identified by KeyIDs. When information is received by the logging module that indicates one or more operations have been performed using a key the logging module may update the counter for the key accordingly. The counter may be updated for operations of a type that contribute to cryptographic key wear out. For instance an encryption operation may cause the counter to increase whereas a decryption operation may not. It should be noted that in some embodiments counters are not to be maintained by the logging module but counters are to be updated by accessing logs from the logging module and calculating the number of operations that have been performed.

As illustrated in the environment includes an access barrier between the customer network and the provider network. The access barrier may be a logical and or physical barrier between the customer network and the provider network that data in one network is not freely accessible to devices in the other network. For instance the customer network and provider network may be separated by a public communications network. The customer network and provider network may each employ one or more firewalls policy management systems access control mechanisms and or other access control mechanisms to restrict access. It should be noted that the access barrier need not restrict all data access between the customer and provider but may freely allow some access while restricting other access. For example the service provider may utilize a web service interface that is publically accessible. The service provider may however configure the provider network so that the managed key is not accessible to the customer . Similarly the customer may configure the customer network so that the customer key is inaccessible to the service provider . It should be noted that the customer network and the provider network need not be completely separate networks. For instance some or all of the customer network can be hosted on computing resources of the provider network. For instance some or all of the network may be implemented as an overlay network of physical computer systems hosted by the service provider . The customer network may comprise one or more virtual computer systems implemented by hardware resources of the service provider as part of a virtual computer system service. Other variations are also considered as being within the scope of the present disclosure.

The computer system of the customer may be a computing device such as any of the computing devices enumerated below. In some embodiments the computer system of the customer is a mobile device e.g. mobile phone and or tablet computing device . The mobile device may be configured to store keys e.g. customer keys to synchronize keys across a plurality of mobile or devices associated with a user e.g. a user s mobile phone personal computer and tablet computing device . Synchronization may be performed through one or more enterprise synchronization products. Synchronization may utilize one or more communication methods such as Bluetooth near field communication NFC or another local communication method. Further the various communications to from the computer system of the client may be orchestrated by a browser or other application executing on the client computer system. The browser and or other application may orchestrate communications with the cryptography service and the data storage service pursuant to executable instructions provided to customer from a server of the computing resource service provider. For example the computing resource service provider may provide executable code in the form of active content such as JavaScript or another scripting language.

As illustrated in a customer with access to a customer key abbreviated as CK submits a request to a cryptography service to obtain a data key abbreviated as DK. The cryptography service may authenticate the request and if authentic provide a response that includes a data key and the data key encrypted under a managed key DK where the managed key may be a key managed for the customer by the cryptography service such as described above. It should be noted that the notation Aindicates that data A is encrypted under key B. In other words Aindicates data obtained based at least in part on application of a cryptographic cipher with input B. It should be noted that Ais not necessarily but can be the direct output of the cipher but could be indirect output. For example output of application of a cipher to A using key B may be input into yet another cipher possibly using another key. The managed key as illustrated in is abbreviated as MK.

Upon receipt from the cryptography service of the data key and data key encrypted under the managed key the customer may use the data key to encrypt data and may use its own customer key to encrypt the data key that has been encrypted under the managed key. In addition after encrypting the data using the data key the customer may electronically discard the data key such as by allowing any memory storing the data key to be overwritten. Generally the data key may be discarded in any suitable manner in which the customer loses immediate access to the data key i.e. the customer must perform and or have performed one or more cryptographic operations to access the data key in plaintext form. In this manner the data key becomes accessible only with access to both the managed key and the customer key which may require collective action by multiple entities each of which lacking access to both keys such as described below.

The customer then may cause the data encrypted under the data key and the data key encrypted under the managed key and the customer key to be persisted. For instance as illustrated in the customer transmits the data encrypted under the data key and the data key encrypted under both the managed key and customer key e.g. DK to a data storage service operated by the service provider. The data encrypted under the data key Data and data key encrypted under both the managed key and customer key DK may be persisted in other ways. For example the Dataand DKmay be stored locally by the customer in a device in the customer network or using a data storage service of a different service provider which is not illustrated. The Dataand DKmay be stored in association with each other for instance by combining and storing as a single data object e.g. with a delimiter separating Dataand DKto enable distinguishing Datafrom DK . Alternatively Dataand DKmay each be stored as separate data objects in association with one another where the association may be maintained by a database and or by data e.g. reference information stored in one or both data objects. In addition Dataand DKneed not be stored in the same place. For instance the customer may locally store DKbut use the data storage service or another data storage service to store Data. Other variations are also considered as being within the scope of the present disclosure.

As illustrated in a customer submits a request to a first provider cryptography service for a data key. The request may be submitted such as described above in connection with e.g. as an appropriately configured web service API call. Similarly to that which is described above in connection with the first provider cryptography service may have access to a managed key managed by the first service provider on behalf of the customer. In the managed key managed by the first service provider is abbreviated as MK1 and also referred to in connection with as the first managed key. In response to the request for a data key the first provider cryptography service may provide a response to the request that includes a data key and the data key encrypted under the first managed key i.e. DK and DK.

As described above in connection with the customer may use the data key to encrypt data using the data key received from the first service provider. The customer may then submit a request to a second provider cryptography service to encrypt the data encrypted under the data key Data using a second managed key abbreviated in the figure as MK2. The second provider cryptography service may provide a response to the request to encrypt the data encrypted under the data key Data. In particular the second provider cryptography service may encrypt Datausing the second managed key MK2 and provide in response to the request from the customer the data encrypted under the data key encrypted under the second managed key Data. The customer may then submit a request to a data storage service of the first service provider to store the data encrypted under both the data key and the second managed key and the data key encrypted under the first managed key i.e. a request to store Dataand DK. As with and other processes illustrated herein multiple requests may be submitted such as a first request to store Dataand a second request to store DK.

In this manner access to the data requires use of both the first managed key MK1 to access the data key DK and access to the second managed key MK2 to access the data.

As with other embodiments described herein additional variations are considered as being within the scope of the present disclosure. For example as an alternative to the embodiment illustrated in the customer may request that the second provider cryptography service encrypt not the data encrypted under the data key but the data key encrypted under the first managed key. A response may be provided by the second provider cryptography service accordingly i.e. a response may include DK. Other variations such as where the data encrypted for the customer is persisted such as in a local data store of the customer in a data storage service of the second provider cryptography service and or in other locations.

In the illustrated embodiment the customer submits a request to a cryptography service of the service provider operating the provider network . As above the request may be an appropriately configured API call to encrypt the data key encrypted under the customer key. The customer for example may have used the customer key to encrypt the data key and provided the data key encrypted under the customer key to the cryptography service in the request. The cryptography service may respond to the request by encrypting the data key encrypted under the customer key using a managed key corresponding to the customer such as described above. The response therefore may include the data key encrypted under both the customer key and the managed key e.g. DK. The customer may then persist to the data encrypted under the data key and the data key encrypted under both the customer key and managed key. In this manner both the customer key and managed key are necessary for accessing the data key in order to decrypt the data. The customer may for example cause the data encrypted under the data key and the data key encrypted under both the customer key and managed key to be stored using a data storage service of the service provider that operates the provider network or in another location such as described above.

In some embodiments a data key is formed from components that are individually encrypted using different keys accessible by different entities in order to achieve similar results. accordingly shows an illustrative example of an embodiment of the present disclosure. in particular shows a diagram illustrating an environment that includes a customer network and a provider network such as described above. Similarly the customer network and provider network may be separated by an access barrier such as described above. As illustrated in the figure a data key abbreviated as DK is formed from multiple components. In this example components are abbreviated as DK1 and DK2 and a data key can generally be thought of as a function of DK1 and DK2. In some embodiments for example DK1 and DK2 concatenated together in a specified order to form the data key DK. However any function that uses DK1 and DK2 as input may be used to generate DK. Also it should be noted that DK1 and DK2 may be derived from DK or vice versa. For example DK1 and DK2 may be obtained and then combined or DK may be obtained and divided or otherwise processed to determine DK1 and DK2.

In the embodiment illustrated in the customer has access to DK and a customer key CK. Access to the data key may be achieved in any suitable manner such as by obtaining the data key from a different entity such as described above or by generating the data key itself. Also as illustrated the customer has access to the components of the data key DK1 and DK2. In the illustrated embodiment the customer submits a request to a cryptography service of the provider network . As discussed above the cryptography service may have access to a managed key abbreviated MK which is managed on behalf of the customer . The cryptography service may respond to the request to encrypt the second data key DK2 where the response includes the second data key encrypted under the managed key DK2. The customer may encrypt the first component of the data key DK1 using the customer key. The Data DK1and DK2may then be persisted such as in a data storage service operated by the service provider that operates the provider network or in another way such as described above. For example the customer may through one or more appropriately configured API calls cause the data storage service to store Data DK1and DK2in association with one another in one or more data objects.

A request may be transmitted to a service provider to perform an encryption operation using a managed key. The request may identify the managed key which may be a key managed by a service provider on behalf of the system performing the process or a customer associated therewith. The particular encryption operation to be performed may vary in accordance with various embodiments. For example referring to the encryption operation may include encrypting the data key using the manage key. Similarly referring to the encryption operation may include encrypting the data key using one of several managed keys used in accordance with performance of the process . Referring to the encryption operation may include encryption of the data key already encrypted under another key such as a customer key or another managed key. Referring to the encryption operation may include decryption of a component of the data key using the managed key. While not illustrated in the process may also include additional requests to the same or another service provider such as illustrated in .

In an embodiment the process also includes obtaining the data key encrypted under both the managed key and the customer key and possibly one or more other keys . Referring to for example obtaining the data key encrypted under both the managed key and customer key may include receiving the data key encrypted under the managed key and using the customer key to encrypt the received data key encrypted under the managed key. Referring to obtaining the data key encrypted under both the managed key and the customer key may include encrypting the data key using a customer key and transmitting the data key encrypted under the customer key to a service provider to be encrypted additionally under a managed key and obtaining a result of such encryption . Referring to obtaining the data key encrypted under both the managed key and the data key may include transmitting a portion of the data key whether in plaintext or encrypted form to a service provider for encryption using a managed key and obtaining the result of such encryption .

In various embodiments the process includes causing data to be persisted i.e. persistently stored such that multiple keys are needed to access the data. For example as illustrated in the process may include persistently storing e.g. causing another system to store data encrypted under the data key and data encrypted under both the managed key and the customer key such as described above in connection with .

As noted various embodiments of the present disclosure allow for the secure storage of data encrypted in a way to as to make the data accessible only with access to multiple keys. shows an illustrative example of how to access data in accordance with the various embodiments described herein. As shown in the process includes obtaining data encrypted under a data key as well as the data key encrypted under both a managed key and a customer key. The data key encrypted under both a managed key and a customer key may be persistently stored in accordance with the process and or other techniques described herein. In an embodiment the process includes transmitting a request to a service provider to perform a decryption operation using the managed key. The decryption operation may vary in accordance with the various embodiments for example referring to the decryption operation may include decryption of a data key encrypted under the managed key. The data key encrypted under the managed key may be obtained by decrypting the data key encrypted under the managed key encrypted under the customer key. Referring to the decryption operation may be an operation to decrypt a data key encrypted under a customer key encrypted under a managed key. In other words using the notation of the decryption operation may include decrypting DKto obtain DK. Referring to the decryption operation may include using the managed key to decrypt a component of a data key. Generally the result of the decryption operation may be used to obtain the data key. The process may include causing data to be decrypted using the data key that has been obtained such as by an entity with access to the data key.

As with all processes described herein variations are considered as being within the scope of the present disclosure. For example while not illustrated in the process may include additional operations such as causing certain data to be decrypted by the same or another service provider. For example if a process for encrypting data includes causing a second service provider to use a managed key to encrypt some or all of the data key the second service provider or other entity with access to the managed key may be caused to perform an appropriate decryption operation. Generally in embodiments where encryption includes operations additional to those described herein access to the data may include appropriate decryption operations.

Numerous other variations are considered as being within the scope of the present disclosure. For example as noted above a customer computer system may perform various processes described herein in accordance with executable instructions encoded on a computer readable storage medium. The instructions may be provided to the customer computer system from a service provider such as part of a client library of executable code programming modules provided by the service provider. The service provider may make such code accessible over the Internet or another network. In addition various embodiments are illustrated herein using two or three different entities with access to different keys although the scope of the present disclosure is not limited to such embodiments and numbers of involved entities. For example the techniques illustrated and described herein are extendible to involve additional entities with access to keys. Generally data and or keys may be wrapped e.g. encrypted using multiple keys from different entities. A customer computer system may be configured to orchestrate the actions e.g. encryption decryption of the various entities for the purpose of encrypting data so that involvement of all entities is required and for the purpose of decrypting data encrypted in such a manner.

In some examples one or more cryptographic operations e.g. performed by a service provider are performed using an encryption algorithm that supports the use of additional authenticated data AAD . In an embodiment the AAD is data that is used with data to be encrypted as an input into the encryption algorithm. The AAD may be persisted in plaintext form. The encryption algorithm may be configured such that a corresponding decryption requires the ciphertext and unaltered AAD for decryption to be successful. Further a system e.g. service provider system may use AAD to enforce policy. For instance one or more values in the metadata e.g. IP address identity logical data container identifier of logical data container used to store data etc. can be used to determine whether decryption is allowed by one or more policies that are based at least in part on the values. In this manner both the cryptographic algorithm and policy serve to ensure that only authorized access to data is allowed. In other words both the presence of unaltered AAD and policy allowing decryption are required before access to data is provided.

In addition various techniques described above involve various communications with one or more service providers that can be orchestrated by a client computer system e.g. computer system of a customer described above . Code for causing a client computer system to utilize one or more techniques may be integrated into a software development kit SDK used to create applications for the client computer system. Also in some embodiments a client computer system may be programmed to utilize one or more of the techniques described above in connection with various triggers. In one example an application may provide a file system interface e.g. a file system driver interface or a storage device interface e.g. for a virtual storage device that utilizes a data storage service . The various techniques described above may as appropriate be utilized in response to receipt of various commands through the interface. For instance interaction with the interface indicating a command to store data in a file system or storage device may cause encryption to happen in accordance with one or more of the embodiments described above. Similarly interaction with the interface indicating a command to retrieve data from the file system or storage device may cause utilization of one or more techniques described above for decrypting data. Such techniques may also be applied to other interfaces.

As another example of a variation considered being within the scope of the present disclosure. Integration of the various techniques described herein may be utilized in a manner that allows for backward compatibility. An application utilizing the various techniques may for instance read a configuration to determine how to interact with a service provider and which key s to use i.e. which keys use itself and which keys to specify to the service provider . In this manner if techniques encoded in an SDK change over time data encrypted and stored using previously utilized techniques may nevertheless remain accessible. The SDK may contain programming logic that enables selection of which techniques to use if any which keys to use and the like. To determine which techniques to use if any and or which keys to use the programming logic in the SDK may utilize information about a local configuration set for the client computer system information provided from a service provider computer system and or in other ways.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. Servers as used herein may be implemented in various ways such as hardware devices or virtual computer systems. In some contexts servers may refer to a programming module being executed on a computer system. As used herein the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device handling some even a majority of the data access and business logic for an application. The application server may provide access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the web server in the form of HyperText Markup Language HTML Extensible Markup Language XML or another appropriate structured language in this example. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the web server. It should be understood that the web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein. Further operations described herein as being performed by a single device may unless otherwise clear from context be performed collectively by multiple devices which may form a distributed system.

The data store can include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect of the present disclosure. For example the data store illustrated may include mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as for page image information and to access right information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. In one example a user through a device operated by the user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser. It should be noted however that embodiments of the present disclosure are not necessarily limited to the context of web pages but may be more generally applicable to processing requests in general where the requests are not necessarily requests for content.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop laptop or tablet computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Various embodiments of the present disclosure utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as Transmission Control Protocol Internet Protocol TCP IP protocols operating in various layers of the Open System Interconnection OSI model File Transfer Protocol FTP Universal Plug and Play UpnP Network File System NFS Common Internet File System CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a web server the web server can run any of a variety of server or mid tier applications including Hypertext Transfer Protocol HTTP servers FTP servers Common Gateway Interface CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU or processor at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM Electrically Erasable Programmable Read Only Memory EEPROM flash memory or other memory technology Compact Disc Read Only Memory CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the invention as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the invention to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the invention as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected when unmodified and referring to physical connections is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. The use of the term set e.g. a set of items or subset unless otherwise noted or contradicted by context is to be construed as a nonempty collection comprising one or more members. Further unless otherwise noted or contradicted by context the term subset of a corresponding set does not necessarily denote a proper subset of the corresponding set but the subset and the corresponding set may be equal.

Conjunctive language such as phrases of the form at least one of A B and C or at least one of A B and C unless specifically stated otherwise or otherwise clearly contradicted by context is otherwise understood with the context as used in general to present that an item term etc. may be either A or B or C or any nonempty subset of the set of A and B and C. For instance in the illustrative example of a set having three members used in the above conjunctive phrase at least one of A B and C and at least one of A B and C refers to any of the following sets A B C A B A C B C A B C. Thus such conjunctive language is not generally intended to imply that certain embodiments require at least one of A at least one of B and at least one of C to each be present.

Operations of processes described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. Processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate embodiments of the invention and does not pose a limitation on the scope of the invention unless otherwise claimed. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for embodiments of the present disclosure to be practiced otherwise than as specifically described herein. Accordingly the scope of the present disclosure includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the scope of the present disclosure unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

