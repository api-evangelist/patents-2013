---

title: Automatically and securely configuring and updating virtual machines
abstract: An approach for automatically and securely updating software on a virtual machine (VM) is presented. A current version of the software on the VM is determined to not match an updated version of the software. With a proxy update server connected to a network and without the VM being connected to the network, the updated version of the software is downloaded, stored and pushed to the VM by using a virtualized mounted drive, the updated version is installed on the VM to replace the current version, and a confirmation indicating the installation is received. An update of the software is provided dynamically via a connectivity of the proxy update server to the network while the VM is prevented from being infected with a virus that requires a connection to the VM through the network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09075690&OS=09075690&RS=09075690
owner: International Business Machines Corporation
number: 09075690
owner_city: Armonk
owner_country: US
publication_date: 20131003
---
This application is a continuation application claiming priority to Ser. No. 12 984 243 filed Jan. 4 2011 now U.S. Pat. No. 8 578 376 issued Nov. 5 2013.

The present invention relates to a data processing method and system for managing updates to virtual machines and more particularly to a secure hypervisor based technique for updating and configuring software and operating systems running on virtual machines.

A vulnerability detected in an operating system or software running on a computer is resolved by installing an update provided over a network where the update requires real time network connectivity with the download server that provides the update. The computer running the vulnerable version of the operating system or software is compromised when the computer is connected to an infected network or an infected mass storage device. Known solutions include 1 reformatting the computer and installing the updated operating system or software and 2 running anti virus tools and quarantining an infected file which may also require reformatting the computer when system files are corrupted. Furthermore there is no way to assure that a version of an operating system and software is the latest version when a machine is first connected to the network. A known solution includes using a removable drive or manually copying an update of the operating system or software to install the latest version of the operating system or software. Manually copying the update makes it difficult to avoid software piracy. Updates that require real time network connectivity with the download server are not secure because the connection to the network may result in malware attacks. Thus there exists a need to overcome at least one of the preceding deficiencies and limitations of the related art.

Embodiments of the present invention provide a method of automatically and securely updating software on a virtual machine. The method comprises 

a computer system running a hypervisor detecting that a virtual machine VM is coming online in a virtualized server 

the computer system running the hypervisor determining a current version of the software that is installed on the VM 

the computer system running the hypervisor determining that the current version does not match an updated version of the software available from a remote update server via a network 

the computer system running the hypervisor receiving the updated version of the software from the remote update server and via the network 

the computer system running the hypervisor receiving a confirmation indicating that the updated version of the software is installed on the VM wherein the steps of detecting that the VM is coming online determining the current version that is installed on the VM determining that the current version does not match the updated version receiving the updated version via the network and receiving the confirmation are performed without the VM being connected to the network and

A system program product and a process for supporting computing infrastructure where the process provides at least one support service are also described and claimed herein.

The present invention provides automatic and secure updates of software installed on a virtual machine prior to the virtual machine being connected to a network thereby avoiding virus infections when the virtual machine is connected to the network and further avoiding software piracy issues that result from manual updates.

Embodiments of the present invention may provide secure updates of software and or an operating system running on a virtual machine where a hypervisor based proxy server receives the updates via a network and pushes the updates to the virtual machine. The updates are obtained without requiring the virtual machine to be connected to the network thereby avoiding vulnerabilities to attack when the virtual machine is connected to the network. Furthermore the updates do not rely on copying updates manually. Embodiments of the present invention may also securely provide configuration information for a virtual machine where a hypervisor based proxy server receives the configuration information via a network and the virtual machine is not connected to the network.

In one embodiment a hypervisor downloads the updates of the software and or operating system to be run on a virtual machine and the hypervisor stores the updates in a mounted drive. The virtual machine may detect the updates on the mounted drive and in response update the software and or operating system.

Computer system includes a hypervisor user mode a.k.a. hypervisor which includes a hypervisor kernel a proxy update server and a proxy configuration server . VM and VM and any other virtual machine not shown run over hypervisor kernel . Program code in hypervisor kernel provides the proxy updated server and proxy configuration server and allows the hypervisor to communicate with the virtual machines including VM and VM. In one embodiment hypervisor kernel includes application programming interfaces APIs that provide a tunnel that allows communication between the virtual machines VM and VM and the hypervisor kernel. As one example the APIs may be modifications of APIs that pass packets in VMsafe which is a software tool for packet inspection in a virtualized environment. VMsafe is offered by VMware Inc. located in Palo Alto Calif. An interface provided by the VMsafe tool appears to VM and VM virtually as a mount or network connectivity but the underlying infrastructure assures isolation from the network or the mount. The present invention however is not limited to the virtualized environment provided by products offered by VMware Inc. instead the present invention contemplates updates occurring in any virtualized operating system environment.

In response to a virtual machine e.g. VM coming online and while the virtual machine is not connected to the network a need for a software or operating system update is determined via the aforementioned communication functionality between the virtual machine and hypervisor kernel and the hypervisor kernel directs the proxy update server to receive an update of the software or operating system from update server via network . The virtual machine detects and installs the received update to update the software or operating system. After the update is installed on the virtual machine the hypervisor connects the virtual machine to network . In one embodiment the hypervisor kernel stores the received update in a mounted drive and the virtual machine detects the update on the mounted drive.

Also in response to the virtual machine e.g. VM coming online and while the virtual machine is not connected to network a need is determined for configuration information about the virtual machine and the need for the configuration information is determined via the aforementioned communication functionality between the virtual machine and hypervisor kernel . Configuration information may be for example an Internet Protocol IP address associated with a virtual machine. Similar to the reception of the software update the hypervisor kernel may direct proxy configuration server to receive the configuration information and the virtual machine detects and installs the received configuration information. After the configuration information is installed on the virtual machine the hypervisor connects the virtual machine to network . In one embodiment hypervisor kernel stores the received configuration information in a mounted drive and the virtual machine detects the configuration information on the mounted drive.

The functionality of the components of system is described in more detail in the discussion presented below relative to .

In step while VM is in an offline state and not connected to network see the hypervisor kernel see starts proxy update server see and proxy configuration server see .

In step the proxy update server see and proxy configuration server see identify a software application and or an operating system installed on VM and determine the latest version s i.e. latest update s of the identified software and or operating system. The latest version s are determined by the proxy servers and see communicating with update server see and configuration server see respectively via network see . For example if VM has operating system XYZ offered by ABC Corporation then the proxy update server connects to the ABC Corporation s update server via network see to receive an identification of the latest version of operating system XYZ.

After step and prior to step VM starts and comes online. While coming online VM boots up its operating system. In step and in response to VM coming online hypervisor kernel see detects the current version of the operating system of VM. The hypervisor kernel see detects the current operating system version from the system call sequence used as the operating system of VM boots up. Step also includes VM detecting new virtualized hardware referred to herein as an update configuration device which may control hypervisor kernel see . The update configuration device acts as a pipe or channel for passing information between a virtual machine and hypervisor kernel. In one embodiment the update configuration device is a mounted drive that is mounted by the hypervisor in response to the hypervisor completing the initial handshake with all known interrupts. The mounted drive may be mounted to computer system see . The mounted drive may be a virtualized mounted drive that is implemented with application programming interfaces APIs .

Step occurs after the operating system of VM completes its booting up process and before a software application is started on VM. In step update client i.e. client in runs on VM and uses the update configuration device to communicate with proxy update server see and proxy configuration server see . The communication with the proxy servers and see in step uses a mechanism based on the particular implementation of the update configuration device. The mechanism for communication with the proxy servers may be for example a socket or shared memory system calls. In one embodiment the communication in step is provided by the update configuration device acting as the system call pipe depicted in .

Step may also include the update configuration device sending information via the hypervisor kernel see to the update server see and or the configuration server see . The information sent by the update configuration device may be a token associated with a license for an update or other information about a virtual machine that is required by update server see and or configuration server see .

In step client see passes to the hypervisor kernel see the version number of the software application and associated configuration information as the version number was stored as a result of the last time i.e. the most recent preceding time VM was shut down to an offline state. In one embodiment the passing of the version number in step is provided by the update configuration device acting as the system call pipe depicted in .

After step and prior to step hypervisor kernel see determines that the version number passed in step does not match the version determined in step . At the initiation of step the booting process of VM coming online is not yet complete. In step and subsequent to determining the mismatch between the version number passed in step and the version determined in step VM queries for a start up of network see . In response to the VM querying for the start up of the network hypervisor kernel see indicates to VM that network and removable devices are disconnected from the network see i.e. indicates that VM does not have access to network in . Thus the hypervisor ensures that a software application starting on VM after the operating system of VM completes its mount boot sequence sees the network devices and other removable devices as being disconnected from network see thereby preventing VM from being infected with vulnerabilities that require a connection to VM through the network. As the application starts on VM interrupts are enabled but the interrupts see the network and other removable devices as disconnected from network see and there is no activity on Interrupt Service Registers ISRs . In response to step being completed the booting of VM is complete and VM is in a mode of updating the software and or the operating system but VM is not yet connected to network see . After step the configuring and updating process continues in .

In step in proxy update server see and proxy configuration server see connect with update server see and configuration server see respectively and obtain the latest update s and latest configuration information for the software and or operating system being updated on VM. After obtaining the aforementioned latest update s and configuration information proxy servers and see use the update configuration device to push the latest update s and configuration information to the client see . At the time of step VM is still not connected to network see .

In step client see installs the aforementioned latest update s and configuration information on VM and passes to the hypervisor a confirmation that indicates the installation of the update s and configuration information. The hypervisor subsequently receives the confirmation. At the time of step VM is still not connected to network see . In one embodiment step includes VM detecting the latest update s and configuration information on the mounted drive and subsequently updating the software and operating system on VM with the detected update s .

In step and in response to the hypervisor receiving the confirmation the hypervisor connects a virtual network cable thereby placing the updated VM in connection with network see . The process of automatically and securely configuring and updating software and or an operating system on a virtual machine ends at step . It should be noted that the connectivity of the proxy servers and see to network see is functional throughout the process of thereby allowing for dynamic updates of software applications and or operating systems at any time while still ensuring that the updates are secure because the hypervisor controls when VM is connected to the network i.e. at step .

In alternate embodiments the process of may be modified to update software and or an operating system on VM without updating configuration information. In other alternate embodiments the process of may be modified to update configuration information without other updates to software or to an operating system on VM.

In one embodiment all licenses for the updates to software installed on the virtual machines are configured to the hypervisor instead of to the virtual machine. The hypervisor maintains one token for each license and these tokens are validated by a license server.

Memory may comprise any known computer readable storage medium which is described below. In one embodiment cache memory elements of memory provide temporary storage of at least some program code e.g. program code in order to reduce the number of times code must be retrieved from bulk storage while instructions of the program code are carried out. Moreover similar to CPU memory may reside at a single physical location comprising one or more types of data storage or be distributed across a plurality of physical systems in various forms. Further memory can include data distributed across for example a local area network LAN or a wide area network WAN .

I O interface comprises any system for exchanging information to or from an external source. I O devices comprise any known type of external device including a display device e.g. monitor keyboard mouse printer speakers handheld device facsimile etc. Bus provides a communication link between each of the components in computer system and may comprise any type of transmission link including electrical optical wireless etc.

I O interface also allows computer system to store information e.g. data or program instructions such as program code on and retrieve the information from computer data storage unit or another computer data storage unit not shown . Computer data storage unit may comprise any known computer readable storage medium which is described below. For example computer data storage unit may be a non volatile data storage device such as a magnetic disk drive i.e. hard disk drive or an optical disc drive e.g. a CD ROM drive which receives a CD ROM disk .

Memory and or storage unit may store computer program code that includes instructions that are carried out by CPU via memory to automatically and securely configure and update a software application and or an operating system on a virtual machine that is not connected to a network.

Further memory may include other systems not shown in such as an operating system e.g. Linux that runs on CPU and provides control of various components within and or connected to computer system . Memory may also include the hypervisor see and hypervisor kernel see and program code having instructions that are carried out by CPU to provide the functionality of proxy update server see and proxy configuration server see .

Storage unit and or one or more other computer data storage units not shown that are coupled to computer system may store program code and other program code used by the update configuration device described above relative to .

As will be appreciated by one skilled in the art the present invention may be embodied as a system method or computer program product. Accordingly an aspect of an embodiment of the present invention may take the form of an entirely hardware aspect an entirely software aspect including firmware resident software micro code etc. or an aspect combining software and hardware aspects that may all generally be referred to herein as a module . Furthermore an embodiment of the present invention may take the form of a computer program product embodied in one or more computer readable medium s e.g. memory and or computer data storage unit having computer readable program code e.g. program code embodied or stored thereon.

Any combination of one or more computer readable mediums e.g. memory and computer data storage unit may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. In one embodiment the computer readable storage medium is a computer readable storage device or computer readable storage apparatus. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be a tangible medium that can contain or store a program e.g. program for use by or in connection with a system apparatus or device for carrying out instructions.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electromagnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with a system apparatus or device for carrying out instructions.

Program code e.g. program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code e.g. program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. Instructions of the program code may be carried out entirely on a user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server where the aforementioned user s computer remote computer and server may be for example computer system or another computer system not shown having components analogous to the components of computer system included in . In the latter scenario the remote computer may be connected to the user s computer through any type of network not shown including a LAN or a WAN or the connection may be made to an external computer e.g. through the Internet using an Internet Service Provider .

Aspects of the present invention are described herein with reference to flowchart illustrations e.g. and or block diagrams of methods apparatus systems e.g. and and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions e.g. program code . These computer program instructions may be provided to a processor e.g. CPU of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which are carried out via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium e.g. memory or computer data storage unit that can direct a computer e.g. computer system other programmable data processing apparatus or other devices to function in a particular manner such that the instructions e.g. program stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer e.g. computer system other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions e.g. program which are carried out on the computer other programmable apparatus or other devices provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Any of the components of an embodiment of the present invention can be deployed managed serviced etc. by a service provider that offers to deploy or integrate computing infrastructure with respect to the process of automatically and securely configuring and updating a software application and or an operating system on a virtual machine that is not connected to a network. Thus an embodiment of the present invention discloses a process for supporting computer infrastructure wherein the process comprises providing at least one support service for at least one of integrating hosting maintaining and deploying computer readable code e.g. program code in a computer system e.g. computer system comprising a processor e.g. CPU wherein the processor carries out instructions contained in the code causing the computer system to perform a method of automatically and securely configuring and updating a software application and or an operating system on a virtual machine that is not connected to a network.

In another embodiment the invention provides a method that performs the process steps of the invention on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator can offer to create maintain support etc. a process of automatically and securely configuring and updating a software application and or an operating system on a virtual machine that is not connected to a network. In this case the service provider can create maintain support etc. a computer infrastructure that performs the process steps of the invention for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

The flowcharts in and the block diagrams in and illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code e.g. program code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be performed substantially concurrently or the blocks may sometimes be performed in reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustrations and combinations of blocks in the block diagrams and or flowchart illustrations can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

While embodiments of the present invention have been described herein for purposes of illustration many modifications and changes will become apparent to those skilled in the art. Accordingly the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.

