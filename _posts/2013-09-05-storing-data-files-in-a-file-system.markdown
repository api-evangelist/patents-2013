---

title: Storing data files in a file system
abstract: A mechanism is provided for storing data files in a file system. The file system provides a plurality of reference data files, where each reference data file in the plurality of data files represents a group of similar data files. The mechanism creates a new data file and associated the new data file with one reference data file in the plurality of data files thus defining an associated reference data file of the plurality of reference data files. The mechanism informs the file system about the association of the new data file with the associated reference data file. The mechanism compresses the new data file using the associated reference data file thereby forming a compressed data file. The mechanism stores the compressed data file together with information about the association of the new data file with the associated reference data file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09355108&OS=09355108&RS=09355108
owner: International Business Machines Corporation
number: 09355108
owner_city: Armonk
owner_country: US
publication_date: 20130905
---
The present invention relates in general to data processing systems and in particular to a method and a system for storing data files in a file system.

Some types of applications have the characteristic of storing large numbers highly redundant similar unstructured data objects files in a file system. One example is an application processing and storing genomic sequence data of a large number of individuals of the same species. Such applications are being used more and more in the life science industry generating significant amount of data volume and storing these as a plurality of files in file systems. In the case of applications for genomic sequence data the scanning speed of genetic sequencers increases exponentially with each new generation leading to even more data hardly to be stored on storage devices for reasonable cost. Genetic sequencers use the application programming interface API of a file system. For network attached storage NAS the data are sent via a network protocol like Network File System protocol NFS or Server Message Broadcast protocol SMB or other alternative protocols to store the data in the NAS device using a file system internally. There are other application areas also generating very similar content to be stored in multiple files for example applications recording processing and storing seismic exploration data.

Some storage systems optimize storage capacity by eliminating identical copies of stored data. In some cases stored data is divided into segments. A new segment that is desired to be stored is first compared against those segments already stored. If an identical segment is already stored on the system a reference to that segment is stored instead of storing the new segment. This is referred to as identity compression.

Despite increasing capacities of storage systems and network links there are often benefits to reducing the size of file objects that are stored and or transmitted. Examples of environments that would benefit include mobile devices with limited storage communication over telephone links or storage of reference data which is data that is written saved permanently and often never again accessed. Other examples include wide area transfers of large objects such as scientific data sets or over saturated links. For example in self contained storage systems in which all data is stored in a single location data can take the form of files in a file system objects in a database or other storage device.

Numerous techniques for reducing large object sizes exist including data compression duplicate suppression and delta encoding. Data compression is the elimination of redundancy internally within an object. Duplicate suppression is the process of eliminating redundancy caused by identical objects. Delta encoding or compression eliminates redundancy of an object relative to another object which may be an earlier version of the object having the same name. A delta compression method for example optimizes storage capacity by comparing a new segment that is desired to be stored against those segments already stored and looking for a similar though not necessarily identical segment. If a similar segment is already stored on the system a delta between the old and new segment is computed and a reference to the old segment and the delta is stored in place of the entire new segment.

In US 2011 0196869 A1 a method for cluster storage is disclosed. A storage system uses a cluster of nodes to store in coming data. In coming data is segmented. Each segment is characterized for assignment for storage on a given node. On the given node of the cluster segments are stored in a manner that deduplicates segment storage.

Segments are deduplicated on each node of the cluster using delta compression. Delta compression allows the use of large segments for distributing efficiently to nodes so that sequential bytes are stored close to each other on disk. Delta compression efficiently stores segments that are similar to each other by storing one base and for other similar segments storing only a delta from the base along with a reference to the base. If a segment is not similar to a previously stored base the new segment is stored as a new base and possibly a delta from that base.

In one illustrative embodiment a method in a data processing system is provided for storing data files in a file system. In the illustrative embodiment the file system provides a plurality of reference data files and each reference data file in the plurality of data files represents a group of similar data files. The illustrative embodiment creates a new data file. The illustrative embodiment associates the new data file with one reference data file in the plurality of data files thus defining an associated reference data file of the plurality of reference data files. The illustrative embodiment informs the file system about the association of the new data file with the associated reference data file. The illustrative embodiment compresses the new data file using the associated reference data file thereby forming a compressed data file. The illustrative embodiment stores the compressed data file together with information about the association of the new data file with the associated reference data file.

In other illustrative embodiments a computer program product comprising a computer useable or readable medium having a computer readable program is provided. The computer readable program when executed on a computing device causes the computing device to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

In yet another illustrative embodiment a system apparatus is provided. The system apparatus may comprise one or more processors and a memory coupled to the one or more processors. The memory may comprise instructions which when executed by the one or more processors cause the one or more processors to perform various ones of and combinations of the operations outlined above with regard to the method illustrative embodiment.

These and other features and advantages of the present invention will be described in or will become apparent to those of ordinary skill in the art in view of the following detailed description of the example embodiments of the present invention.

In the drawings like elements are referred to with equal reference numerals. The drawings are merely schematic representations not intended to portray specific parameters of the invention. Moreover the drawings are intended to depict only typical embodiments of the invention and therefore should not be considered as limiting the scope of the invention.

For illustrating the invention depicts a system including a file association module and a compression module according to an example embodiment of the invention. The system includes an application running on a server which on the other side is coupled via a network to a server where a file system is configured to run. The file system represents a file oriented interface to the application such as a Network File System protocol NFS or a Server Message Broadcast protocol SMB . The application generates and processes sets of similar data files. A file association module is integrated with the application and is capable to analyze the content of said data files. This enables the file association module to determine data files which are similar and group similar data files in groups or set of data files. This grouping can also be based on rules given by the application or the file system . For example one rule can be that all data files of a certain type form one group. Another rule can be that all data files generated in a specific period of time pertain to one set of files. For each set of similar data files the file association module can now automatically generate a reference data file . Finally the file association module in conjunction with the application stores a data file in file system via network and thereby associates the data file with said reference data file . A compression module as well as a decompression module are integrated in the file system . According to the invention a data file may be compressed using the reference data file to result in a compressed data file which may be stored afterwards. Details are described in the following. The decompression module may on the other hand serve for decompressing a compressed data file using a reference data file in order to restore the original data file .

The file system is connected to a storage device comprising hard disk drives or other storage devices according to prior art. File system is the entity wherein files are being organized and stored on the storage device . There might be multiple file systems storing files on a single storage device or a plurality of storage devices. A file system contains an address space using names for the stored object called name space. The file system the servers and the storage device can also be one system. Also multiple servers can build a cluster in scale out architecture. The file system may be part of an operation system running on a server or may run as a firmware on a controller.

One example for an implementation of the inventive method is described based on a file system crawler a computer program that browses a file system in a methodical automated manner or in an orderly fashion . Referring to said file system crawler represents the application including the file association module . The file system crawler analyzes data files stored in file system in a directory structure. The file system includes the compression module . Said file system crawler implements the following method to identify similar files determine a reference data file for said similar data files and associate said reference data file with said identified similar data files denoted by the following steps the file system crawler selects a type of files such as for example text files or presentation files or spread sheets the file system crawler determines data files of said selected file type stored in file system among these files the file system crawler determines data files with similar content. This analysis can be based on a text analysis of the file or an analysis of the file structure. In one embodiment the file system crawler analyzes files with a similar file name stored in the same directory first. For said identified similar data files the file system crawler determines that part of the contents which each of said similar data files contains and stores this part of the content in a new file representing a reference data file. Said reference data file is also stored in file system . The file system crawler associates said similar data files with said reference data file by instructing the compression module of the file system . Based on this instruction the compression module of the file system performs delta compression based on a prior art method for said similar data files using said reference data file.

Another example for an implementation of the inventive method is the use of storing genomic sequence data. The result of such scans is very large volumes of data in the order of 20 to 40 TBytes of data representing several scans of genomic sequences where the information about the individual is available too. Such additional information can be utilized for associating reference data files based on the information of an individual. As an example known relationships between individuals can be used for associating the same reference data file to genomic sequences based on the assumptions that individuals with a close relationship also share similar genomic sequences with a smaller set of differences compared to unrelated individuals. Based on the knowledge of relationships the same reference data file can be associated to a set of individuals to store their genomic sequence data by using delta compression. Due to the smaller amount of differences the delta compression based on an appropriate reference data file the required storage space is minimized. An example can be to use the genomic sequence data of a mother as the reference file for all children and grandchildren. The determination of such relationships is based on associated data about individuals providing genomic sequence data as in a patient data management system. Another use case is a set of genomic sequences being scanned from the same person. Differences in the genomic sequence as created by viruses or mutations are being stored as the result of the delta compression algorithm for each scan based on one reference genomic sequence. This may also allow storing mutations of the genomic sequence data over a longer period of time with just storing the delta. The relationship between different genomic sequences is also known by associated data being stored in a database containing the information about a patient like in a patient data management system.

For storing genomic sequence data based on delta compression the patient data management system represented as application may utilize the file system for storing genomic sequence data. Once an initial sequence data needs to be stored the application determines this sequence as the reference data file as well. For any further data being stored the file association module determines whether the stored data has a relationship to the previously stored reference data file. The determination can vary based on the information being available in the application . If the relationship of individuals belonging to the same family can be determined all genomic sequence data of members of this family can be associated with the reference data file being stored for the first member. In the case of storing multiple genomic sequence data for the same individual association can be done for the individual. The association based on the file system namespace can be used here i.e. if all data of the same individual is stored in the same directory. In this case the reference data file is associated by the file association module to the according directory. The file association module just needs to translate relationship into a directory structure being provided by the inventive system.

If the reference data file already existed in step then the process flows to step where the data files generated in step are stored in the file system . In step the process associates the data files with the reference data file by sending an instruction to the file system . For example this instruction can be based on an existing file link command including a new option parameter which instructs the file system to associate the reference data file with the data file. Process ends in step .

The association of the reference data file with the data file can be performed explicitly whereby the application instructs the file system about this association via file link command or implicitly whereby the reference data file is associated with a sub tree of the file system and the application stores said data files in said sub tree .

Reference data files may be created by one of the following steps i comparing a plurality of data files concerning at least one of a part of a file content a file type an origin of the plurality of data files ii determining similar data files in a file system by a text analysis of the data files and or an analysis of a file structure of the data files iii determining similar data files in a file system by determining similarity in file names of the data files stored in a directory of the file system iv determining a part of contents of said data files being common to said data files and finally storing the part of contents in a new data file representing the associated reference data file .

In step the process performs delta compression of said data files according to prior art methods using said reference file and a compression module generating a delta compressed file . If both files contain very similar data this algorithm becomes effective and compression factors in a range between 90 to 99 becomes achievable. This information may be processed by a second prior art compression algorithm like a jpeg algorithm for example for compressing the delta information. Thus a further compression factor of greater than 1000 becomes realistic.

In step the process checks if the size of the delta compressed data file against a configurable size threshold and if the threshold is exceeded the process turns to step where the delta compressed data file is decompressed to form the original data file if it was no longer available using a decompression module . In step the original data file is stored in the file system and the process ends in step .

If the size of the delta compressed file is determined to be below the threshold in step the process turns to step where the original data file is deleted and the delta compressed file is stored in file system . Subsequently the process stores the association information of the reference data file in the delta compressed file in step . In an example embodiment this information is stored in an inode i.e. file structure information of the delta compressed file . In an alternate embodiment this information may be stored in the attributes of the delta compressed file . The process ends in step .

In one embodiment for large data files only a first portion of said data file is compressed in step and then checked against the size threshold in step . If the size threshold is exceeded upon compressing a first portion the original data file is stored uncompressed in step . This embodiment allows to prevent resource intensive compression of large data files which are not compressible.

From a user or application perspective the file system presents the data files as original data files even though the original data file is compressed. This can be achieved naming the delta compressed data file the same as the original data file and showing the same attributes especially size through the interface of the file system .

In step of process in the existence of a reference data file associated with one or more data files is checked and if there is no reference data file associated with data files or the reference data file is not available the process introduces the concept of a default reference file . Thereby the administrator of the file system can associate reference data files with directories or partitions of the file system . In step of process this association is checked. In a concept of a static association of reference data files with file system directories or partitions is explained.

Delta compressed data files can also be re associated with new reference data files whereby the compression of these data files will be performed using a new reference data file as is shown in . This can be done explicitly whereby the application instructs the file system with its compression module to associate a given data file with a new reference data file for example via a file link command . Or this can be done implicitly whereby a compressed data file is copied from one directory to another directory within the files system and the new directory is associated with a different reference data file .

There are the following scenarios of handling an inheritance i.e. a relationship to the correct associated reference data file in detail 

Scenario 1 A data file is copied or moved from one part of the namespace in a file system into another one i.e. from one directory to another one. If different reference data files are associated to the source and target directory the data file is transliterated by the move operation as file . If contents of the file are moved to file the file gets deleted. For a copy operation the file is remaining unchanged.

Scenario 2 A delta compressed file is copied or moved into another part of the namespace i.e. from one directory into another one. If the target directory has no associated reference data file the delta compressed file needs to be decompressed and being stored in the original format. Depending on whether a copy or move operation is carried out the file gets deleted or not.

Scenario 3 A new reference data file is associated to a part of the namespace i.e. a directory. All delta compressed data files being stored in this directory need to be transliterated to use the new reference data file .

Scenario 4 A reference data file is being deleted. All delta compressed data files being associated to this part of the namespace are decompressed into their original data file .

Access to delta compressed data file might be accomplished by the following way. Next to saving space on the storage device being used by the data files a delta information of a data file based on a reference data file can be used for computations itself. The data can be made accessible by just decompressing the delta compressed data file . Depending on the capabilities of the file system API an application might access the delta information as an alternate data stream or under a different file name.

Referring now to a schematic of an example of a data processing system is shown. Data processing system is only one example of a suitable data processing system and is not intended to suggest any limitation as to the scope of use or functionality of embodiments of the invention described herein. Regardless data processing system is capable of being implemented and or performing any of the functionality set forth herein above.

In data processing system there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in data processing system is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor .

Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments of the invention.

Storage system may also exhibit interfaces for separate storage media for the reference data files than for the data files and or the compressed data files as these reference data files are the basis for a plurality of compressed data files and may therefore be stored on separate storage media. Also the reference data files may be backed up on separate backup media than the data files and or the compressed data files as well as may be backed up on separate and or multiple backup media of special performance and reliability.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data. Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments of the invention as described herein. Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

The block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical functions. It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and combinations of blocks in the block diagrams can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. 

Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Rash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device. A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present invention are described below with reference to block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the block diagram block or blocks.

