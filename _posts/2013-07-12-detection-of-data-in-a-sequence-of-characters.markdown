---

title: Detection of data in a sequence of characters
abstract: A method for detecting data in a sequence of characters or text using both a statistical engine and a pattern engine. The statistical engine is trained to recognize certain types of data and the pattern engine is programmed to recognize the grammatical pattern of certain types of data. The statistical engine may scan the sequence of characters to output first data, and the pattern engine may break down the first data into subsets of data. Alternatively, the statistical engine may output items that have a predetermined probability or greater of being a certain type of data and the pattern engine may then detect the data from the output items and/or remove incorrect information from the output items.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489371&OS=09489371&RS=09489371
owner: Apple Inc.
number: 09489371
owner_city: Cupertino
owner_country: US
publication_date: 20130712
---
This application is a continuation of co pending U.S. application Ser. No. 12 268 410 filed on Nov. 10 2008.

The present invention relates to methods systems and articles of manufacture for detecting useful data from blocks of text or sequences of characters.

Various methods of detecting data in text are well known. For example such methods can be used to analyse bodies of text such as e mails or other data received by or input to a computer to extract information such as e mail addresses telephone and fax numbers physical addresses IP addresses days dates times names places and so forth. In one implementation a so called data detector routinely analyses incoming e mails to detect such information. The detected information can then be extracted to update the user s address book or other records.

Known methods of detecting data include pattern detection methods. Such a method may analyse a body of text to find patterns in the grammar of the text that match the typical grammar pattern of a data type that the method seeks to identify. In general in such a method a grammatical function is assigned to each block such as a word in the text. The method then compares sequences of grammatical functions in the text to predetermined patterns of functions which typically make up the types of data to be detected. If a match is found the method outputs the blocks corresponding to the sequence of grammatical functions as the detected data.

As an example such a method may assign a single digit from 0 to 9 followed by a space with the function DIGIT two or more digits with the function NUMBER two or more letters adjacent with the function WORD and so forth. Once the functions have been assigned patterns can be detected. For example an associated name and address may have the pattern of neighbouring functions NAME COMPANY STREET POSTAL CODE STATE where some of the functions may be optional.

Such pattern detection methods have generally proven highly effective. However there remain difficulties in correctly picking out names of organisations and some addresses from bodies of text as well as in matching all names to an address.

Known methods of detecting data also include statistical learning methods. In general in such a method a computer program is trained to locate and classify atomic elements in text into predefined categories based on a large corpus of manually annotated training data. Typically the training data consists of several hundred pages of text carefully annotated to identify desired categories of data. Thus in the corpus each person name organization name address telephone number e mail address etc must be tagged. The program then scans the annotated text and learns how to identify each category of data. Following this training stage the program may process different bodies of unannotated text and pick out data of the desired categories.

Such methods are heavily reliant on both the text chosen for the training corpus and the accuracy with which it is annotated not to mention the algorithm by which the program learns. In addition such programs output as a result all the data matching a particular category. For example although such programs are particularly successful in identifying complete addresses they cannot then output the individual elements of a detected address. Accordingly they are unable to output the street line of an address as a distinct component going to make up the whole address.

The present invention provides a method an article of manufacture and a system for detecting data in a sequence of characters or text using both a statistical engine and a pattern engine. The statistical engine is trained to recognize certain types of data and the pattern engine is programmed to recognize the grammatical pattern of certain types of data.

The statistical engine may scan the sequence of characters to output first data and the pattern engine may break down the first data into subsets of data. Alternatively the statistical engine may output items that have a predetermined probability or greater of being a certain type of data and the pattern engine may then detect the data from the output items and or remove incorrect information from the output items.

In another variation the statistical engine scans the text and outputs a series of tokens with respective token types which are parsed by a parser of the pattern engine. Alternatively the pattern engine may further comprise a lexer which also scans the data and outputs a series of tokens with respective token types. The tokens from the statistical engine and the pattern engine are parsed by the parser of the pattern engine. As a further alternative the statistical engine outputs some tokens and forwards them together with the remaining unchanged text to the lexer. The lexer converts the remaining text into tokens and the resultant stream of tokens including tokens from both the statistical engine and the pattern engine are parsed.

The present invention makes use of the advantageous aspects of statistical engines and pattern engines respectively and minimizes their drawbacks. In particular the present invention makes it possible to more quickly and accurately detect combinations of the various elements of contact details such as names physical addresses including eastern addresses such as Chinese and Japanese addresses e mail addresses phone numbers fax numbers and so forth. The various elements of the names and addresses are decomposed so they are particularly suited for future use by a user.

The statistical engine is an adaptation of a known statistical engine of any suitable type. The statistical engine has been trained using a previously annotated corpus in a desired language and including text of the types of data intended to be detected. After the text of the corpus has been chosen and annotated one of a large variety of different statistical machine learning techniques is used to teach the statistical engine to extract desired types of data from input text together with a tag describing the output data based on the annotated corpus. In general the annotations in the training corpus will match the tags output with the data.

There are many well known techniques for teaching a statistical model to map between input text and output data. One example is the maximum entropy method but any other suitable technique may also be used.

In the present embodiment once the statistical engine has been taught it receives text input in the form of a sequence of characters. There is no limitation on what characters can make up the text. It is important to recognise that at this stage no further teaching is required although the engine may continue to learn in alternative embodiments of the invention. As such the statistical engine may be a pre taught engine imported into the combination engine without the facility for further learning.

The statistical engine parses the input characters and calculates a likelihood that blocks of text within the sequence of characters make up data of a type that is being sought. For example the statistical engine will calculate whether a block of text forms a name an address or the like. If the calculated likelihood is greater than a predetermined threshold the statistical engine outputs the block to the pattern engine together with a tag for the block.

For example assume that a statistical engine has been trained to detect quantities person names organisation names and addresses and receives as the text input the following e mail 

 Jon I am considering buying 300 shares in Acme Inc. Before I make the purchase please contact Wilson Nagai Graebel Broking Services Worldwide 16346 E. Airport Circle Aurora Colo. 80011 USA to get his advice .

The statistical engine will output and blocks of text having determined that the probability of accurate output is greater than a predetermined threshold of for example 90 as follows 

The pattern engine comprises a lexical analyser or lexer and a parser . The lexer receives as its input a sequence of characters. The lexer stores a vocabulary that allows it to resolve the sequence of characters into a sequence of tokens. Each token comprises a lexeme analogous to a word and a token type which describes its class or function .

As mentioned above in the present example the format of a time to be detected is that it is always one of AM or PM followed by two digits whereas the format of a bug identification code to be detected is always two letters followed by three digits. Accordingly the lexer may be provided with the vocabulary 

In more detail the lexer will output a sequence of a letter from A to Z followed by another letter from A to Z as a token having a lexeme of the two letters and having the token type INITIALS. It will also output the letters AM and PM as a token having the token type MERIDIAN. The processing of a sequence of characters to output tokens and respective token types and the processing of tokens and token types to output sought data can be performed using decision trees.

In this notation indicates that the preceding token need not be present. Accordingly to detect an address it is only necessary for a street to be present a name and or a company in front of the street being optional. Thus an epsilon reduction is required for both the name and company. Using the token types a b and c the grammar can be rewritten as

As a further example assume that a pattern engine has been programmed to detect quantities person names organisation names and addresses and also receives as the text input the following e mail 

 Jon I am considering buying 300 shares in Acme Inc. Before I make the purchase please contact Wilson Nagai Graebel Broking Services Worldwide 16346 E. Airport Circle Aurora Colo. 80011 USA to get his advice .

The pattern engine may output the and blocks of text having determined that blocks of text match the pre programmed pattern 

Here it can be seen that the pattern engine unlike the statistical engine of the foregoing example is unable to detect that the number relates to a quantity of something as opposed to any other number. Similarly the pattern engine has incorrectly extracted the address referring to Broking Services Worldwide instead of Graebel Broking Services Worldwide . This could be because the lexer has output a token having the lexeme Graebel with an incorrect token type or the grammar of the parser only recognises company names of three words or less.

Thus a fundamental difference between a statistical engine and a pattern engine is that a statistical engine has been trained using an extensive training corpus to determine the likelihood that blocks of characters within a sequence of characters make up data of the type being sought whereas a pattern engine has algorithms for comparing grammatical patterns within the sequence of characters with preset patterns in a vocabulary and grammar predetermined by the programmer. In general either these preset patterns are matched or not.

In the present specification the terms pattern engine pattern detection method statistical engine and statistical detection method should be construed accordingly.

Consequently the output of a statistical engine can be changed by varying a probability threshold whereas the output of a pattern engine can only be changed by varying the pre programmed grammatical patterns that is by changing the vocabulary and the grammar of the pattern engine. In general a statistical engine recognises certain types of data particularly names and some form of physical address more accurately than a pattern engine and is easier to adapt by changing the probability threshold and by using different training corpuses. Processing is also generally faster. However it outputs the detected data in a less useful way.

In this embodiment of the present invention a sequence of characters is input to the combination engine and is first processed by the statistical engine . The statistical engine outputs a series of blocks of text each representing detected data together with a tag for each block indicating the type of data that has been detected as shown in .

The pattern engine receives the blocks and associated tags from the statistical engine and processes each one in turn. Note that large amounts of spurious or useless data will have been removed by the statistical engine thereby considerably reducing the amount of processing required by the pattern engine . In the present embodiment it is accepted that the statistical engine has output correct and complete data and the function of the pattern engine is to decompose that data if possible.

Accordingly the pattern engine receives and processes each block of text separately. For example assume that the statistical engine outputs

The pattern engine processes each of the above blocks individually but is adapted to recognise that all lexemes in a block of text are useful and cannot be discarded. In the event of conflict between the results of the statistical engine and the pattern engine the results of the statistical engine prevail.

In this example the pattern engine is not able to decompose the block of text Jon and accordingly will simply output Jon as a person name in accordance with the determination made by the statistical engine . Similarly the pattern engine is unable to determine the data type of the number 300 and will therefore output the number 300 as a quantity in accordance with the tag assigned by the statistical engine . Similar considerations apply in respect of the person name Wilson Nagai .

Further the pattern engine will process the sequence of characters Graebel Broking Services Worldwide 16346 E. Airport Circle Aurora Colo. 80011 USA and output it as an address in line with the output of the statistical engine but further tagged as Graebel Broking Services Worldwide 16346 E. Airport Circle Aurora CO 80011 USA.

Note here that the grammar of the parser is forced to append the previously redundant lexeme Graebel to the company name in order to avoid conflict with the statistical engine. Thus the statistical engine can be termed the master engine and the pattern engine can be termed the subordinate engine.

One way in which the grammar of the parser may be forced to properly append the previously redundant lexeme is to provide a score for all patterns recognised by the parser . Matched fuzzy patterns can be provided with lower scores than less fuzzy or harder patterns to reflect the fact that the harder patterns are more likely to relate to types of data that are being sought. The parser may lower the minimum acceptable score for a matched pattern until all the names lexemes from the statistical engine have been matched. In this way correct pattern matches are more likely to be output but the parser will still be forced to use all the information output from the statistical engine .

The decomposition of the address field in this way has the advantage that the address data is more useful. For example where the tags match fields provided in a contacts address book the address can be automatically added to a contacts address book with the appropriate parts of the address being entered into the fields provided by the address book. Moreover where an address is provided on one line in a body of text the decomposition of the address allows it to be automatically used in the proper format on a later occasion for example when using the address in a letter or to prepare a label for an envelope.

In a second embodiment of the present invention processing is again carried out first by a statistical engine and then by a pattern engine . However in this case the threshold of the statistical engine is set to be low. This means that the statistical engine will output all data that has even a low probability of matching the type of data being sought e mail addresses telephone and fax numbers physical addresses IP addresses days dates times names and places for example. Consequently it can be expected that in practice a significant amount of the output data is not in fact of the type being sought.

Subsequently as shown in the data output by the statistical engine is input to the pattern engine as a sequence of characters optionally without any tags but in any case with an indication where breaks in the text occur due to removal of text not meeting the probability threshold. This indication of breaks prevents the pattern engine from falsely linking a name to an address where in the original text the name and the address are spaced apart by intermediate text that has been removed by the statistical engine .

The pattern engine then processes the sequence of characters received from the pattern engine in the normal manner and outputs the results as normal. In this case the pattern engine is the master engine to the extent that it is primarily responsible for extracting correct information. Put another way the statistical engine extracts possibly relevant regions of the text and the pattern engine then scans only those regions. The advantage of the present embodiment is that the quick processing of the statistical engine can be used to filter out most of the spurious information in large bodies of text for example of several hundred pages before the more computationally expensive pattern engine processes the remaining data which has a greater chance of being relevant to provide accurate output data in a useful format.

The precise percentage threshold may be any suitable percentage to remove the majority of spurious data and is preferably in the range between 1 and 20 . More preferably it falls within the range 3 to 10 and most preferably is 5 .

A third aspect of the present invention is similar to the second aspect and is schematically illustrated in . However in this case the probability threshold of the statistical engine is set to be higher with the aim that most of the output data from the statistical engine is indeed data of the type sought by the combination engine . The output of the statistical engine is again sent to the pattern engine as a sequence of characters optionally without any tags but in any case with an indication where breaks in the text are. Again this indication of breaks prevents the pattern engine from falsely linking a name to an address where in the original text the name and the address are spaced apart by intermediate text that has been removed by the statistical engine .

The pattern engine then processes the sequence of characters received from the statistical engine in the normal manner and outputs the results. In this case the statistical engine can be considered the master engine since it is the engine primarily responsible for deciding whether data in the sequence of characters matches the sought data. Thus the pattern engine does not have an opportunity to process text that does not have a high probability of being the data sought after. Rather the pattern engine is used to filter out false positives that may be output by the statistical engine .

For example assume that the sequence of characters input to the statistical engine is an e mail thread including lower down the thread the question I am going to the electronics shop. Is there anything you would like me to get and higher up the thread the reply 1 GB Disc Drive . The statistical engine has a high probability of outputting 1 GB Disc Drive as an address. However the pattern engine would recognise that the expression Disc Drive does not form part of an address and would not extract the expression 1 GB Disc Drive as an address. In this manner the pattern engine invalidates the result output from the statistical engine by recognising elements of an address and ruling others out. The same technique can be used to prevent numbers in certain formats from being recognised as telephone numbers for example. Other applications will also be recognised by those skilled in the art. Accordingly in the present embodiment the stricter grammar rules of the pattern engine are used to prevent the combination engine from outputting false positives identified by the statistical engine .

The precise percentage threshold adopted for the statistical engine in this embodiment may be any suitable percentage such that the majority of output data is in practice sought data and is preferably in the range between 50 and 100 . More preferably it falls within the range 70 to 90 and most preferably is 80 .

In a yet further embodiment of the present invention the combination engine is modified as shown in . In particular shows a combination engine comprising a modified statistical engine and a modified pattern engine in which the lexer has been removed. The character sequence is again processed first by the statistical engine and the resultant output is processed directly by the parser of pattern engine . However in this case the statistical engine is trained to output tokens having a lexeme and a token type which can then be processed by the pattern engine . Thus instead of outputting the sequence of characters Graebel Broking Services Worldwide 16346 E. Airport Circle Aurora Colo. 80011 USA as an address as with the statistical engine in the previous embodiments the statistical engine is instead trained to output the tokens 

In this manner the statistical engine acts in place of the lexer of the combination engine . The parser then parses the tokens and establishes whether the sequence of token types matches any of the predetermined patterns stored in its grammar. In this way the combination engine will correctly output the address including the correct organisation name but decomposed into a more useful format than could be output by the statistical engine alone.

In a still further embodiment of the present invention the combination engine is modified as shown in . In particular shows a combination engine comprising the modified statistical engine and a modified pattern engine in which the lexer and the parser are included. The character sequence is input simultaneously to the statistical engine and the lexer . Similarly to above the statistical engine is trained to output tokens having a lexeme and a token type which can be processed by the parser of the pattern engine . In addition in the normal manner the lexer outputs tokens having lexemes and token types in accordance with the vocabulary of the lexer . The streams of tokens output by the statistical engine and the lexer are both parsed separately by the parser . Accordingly the parser outputs two sets of data each purporting to be data of the type sought by the combination engine . The two sets of data are input to a comparison engine which compares them and provides a final output of the detected data from the comparison engine .

It will be appreciated by persons skilled in the art that there are numerous ways in which the comparison engine might operate. However the present inventors have recognised that in general the statistical engine detects names more accurately than the pattern engine since it is difficult to describe names in terms of patterns. Indeed in some approaches pattern engines consider any word starting with an upper case to be a name. This is a fuzzy means of recognising a name and can easily give incorrect outputs.

Accordingly it is preferred that if an item of data detected based on the tokens produced by the statistical engine is the same as an item of data detected based on the tokens produced by the lexer the comparison engine detects this and outputs the data as a single item with the appropriate tag. If an item of data detected based on the tokens produced by the statistical engine is different to an item of data detected based on the corresponding tokens produced by the lexer in other words tokens resulting from the same characters of the initially input sequence of characters the comparison engine will determine which item to output based on the tag assigned to the items. For example if both items are assigned with an address tag the comparison engine will output only the item of data detected based on the tokens produced by the lexer . By contrast if both items are assigned with a name tag the comparison engine will output only the item of data detected based the tokens produced by the statistical engine . If the stream of tokens from one of the statistical engine and the lexer results in an item that is not output based on the stream of tokens from the other of the statistical engine and the lexer the comparison engine outputs the item anyway unless the item is a name based on the stream of tokens from the lexer .

In this manner the statistical engine acts in tandem with the lexer of the combination engine . The parser then parses the tokens from both and establishes whether either sequence of token types matches any of the predetermined patterns stored in its grammar. In this way the combination engine will correctly output the address including the correct organisation name but decomposed into a more useful format than could be output by the statistical engine alone.

A modification of this embodiment is shown in . In the combination engine of a comparison engine is provided with inputs from the statistical engine and the lexer and provides an output to the parser . As in the previous embodiment the statistical engine and the lexer both output sequences of tokens each having a lexeme and a token type. The token types that can be output by the statistical engine are the same as those that can be output by the lexer . The comparison engine compares the tokens output by the statistical engine and the lexer and decides which tokens to output to the parser . In the event that a token from the statistical engine is the same as a corresponding token provided by the lexer the comparison engine outputs only one of said tokens to the parser . However the comparison engine is also provided with a series of rules in the event that corresponding tokens are different having a different lexeme and or a different token type. Such rules will ensure that only one of the tokens is output or that both tokens are output to the parser as required.

In a further refinement certain tokens can be assigned more or less weight depending on which engine they come from. The comparison token would choose only the token with the highest weight. For example a name token would have a low weighting if it originates from the lexer and high weight if it originates from the statistical engine .

In a preferred embodiment a combination engine comprises a statistical engine and a pattern engine as shown in . The statistical engine is trained to detect types of data that are difficult to accurately detect by a pattern engine and to output such data as tokens having lexemes and token types. The grammar of the parser is adjusted to be able to process the tokens output by the statistical engine in addition to the tokens output by the lexer in the usual manner.

In this embodiment the statistical engine operates on the sequence of characters first. Where it detects data of the type it is trained to detect the statistical engine will output that data as a token. However it will leave the remaining data unchanged. Accordingly the lexer receives as an input from the statistical engine the original sequence of characters but with portions of it having been converted to tokens. The lexer processes the sequence of characters with the interspersed tokens. The sequence of characters is processed in the usual manner but the tokens inserted by the statistical engine are unaffected. Accordingly the parser receives as its input a sequence of tokens from the lexer including tokens created by both the statistical engine and the lexer and processes the sequence in the usual manner.

For example the statistical engine may be trained to detect person and organisation names only and to output corresponding PersonName and OrgName type tokens. By contrast the lexer may be programmed to output Street Town State Postal Code Country and Telephone Number type tokens but not name type tokens. The grammar of the parser may have its grammar adjusted to detect an address as 

It has generally been found that statistical engines are significantly better at detecting addresses in foreign languages in particular far eastern languages such as Chinese and Japanese. This is because such addresses commonly do not have the same structure as western addresses or even a common format pattern at all. Thus it is difficult to establish a grammar that will consistently detect such addresses.

Accordingly when it is intended to detect addresses in texts in far eastern languages it is preferred to use a statistical engine trained using a corpus in the appropriate language and trained to output a token having the whole address as the lexeme with the token type Address. In this case the grammar of the pattern engine is adapted to recognise address tokens output by the statistical engine . For example the parser may have the grammar 

In this case the statistical engine may be trained to output names job titles and addresses and the lexer may be programmed to output e mail addresses and telephone and fax numbers. In the case of text input in a far eastern language the combination engine will be able to detect full contact details including the physical and e mail addresses and the contact numbers with significantly better accuracy than would be possible with either a statistical engine or a pattern engine separately.

In this embodiment in which the statistical engine and the pattern engine are respectively trained and programmed to detect different types of data and output correspondingly different tokens for parsing it has so far been assumed that the tokens output from the statistical engine and the lexer are adjacent in order for them to be linked in the grammar of the parser. As an example assume that a pattern detection engine is programmed to recognise as a name in front of an address the pattern

However it is also possible to program the grammar of the pattern engine to associate more than one name with an address for example by modifying the grammar to

In the above example Matt Mahon and Sarah Garcia would both be correctly associated with the address. However such a grammar could also trigger a large number of false positives. For example the pattern engine would output the sequence of characters BTW Address and Phone Number 12 place d Iena 75016 Paris two people eg Mr BTW Address and Ms Phone Number associated with the address.

In the Matt Mahon and Sarah Garcia example the lexer receives from the statistical engine the series of characters and tokens 

Note that a distinction is made between tokens output by the statistical engine StatLEX tokens or statistical engine tokens and tokens output by the lexer LEX tokens or lexer tokens although this is not required in all embodiments. Here the parser detects the names street town state and postal code lexer tokens as a name s before an address pattern.

In the BTW Address and Phone Number 12 place d Iena 75016 Paris example the statistical engine does not output BTW Address or Phone Number as name tokens and the error that would arise from using the pattern detection engine alone is avoided.

In an alternative arrangement the parser checks the distance between the first token in an address and any preceding statistical engine name token. If there are one or more such statistical engine name tokens spaced apart a predetermined distance or less from the address the grammar of the parser associates the statistical engine name tokens with the address detected on the basis of the lexer tokens. In the present example the distance threshold would be set as two lexer tokens or less. The statistical engine name token Sarah Garcia is not spaced apart from the lexer tokens making up the address and is therefore associated with the address. In addition the statistical engine token Matt Mahon is spaced apart from the lexer tokens making up the physical address by the single lexer token and . As this number 1 falls below the threshold the name Matt Mahon is also associated with the address.

It is should be noted that this is a simple example of the general concept of this embodiment. As another example it would also be possible to associate Chinese or other far eastern language addresses detected by the statistical engine with phone numbers adjacent to or spaced a short distance apart from an address.

The computer system may interface to external systems through a modem or network interface such as an analog modem ISDN modem cable modem token ring interface or satellite transmission interface. As shown in the computer system includes a processing unit which may be a conventional microprocessor such as an Intel Pentium microprocessor an Intel Core Duo microprocessor or a Motorola Power PC microprocessor which are known to one of ordinary skill in the computer art. System memory is coupled to the processing unit by a system bus . System memory may be a DRAM RAM static RAM SRAM or any combination thereof. Bus couples processing unit to system memory to non volatile storage to graphics subsystem and to input output I O controller . Graphics subsystem controls a display device for example a cathode ray tube CRT or liquid crystal display which may be part of the graphics subsystem . The I O devices may include one or more of a keyboard disk drives printers a mouse a touch screen and the like as known to one of ordinary skill in the computer art. A digital image input device may be a scanner or a digital camera which is coupled to I O controller . The non volatile storage may be a magnetic hard disk an optical disk or another form for storage for large amounts of data. Some of this data is often written by a direct memory access process into the system memory during execution of the software in the computer system .

In a preferred embodiment the non volatile storage stores a library of different statistical engines which are trained using corpuses in different languages and one or more pattern engines so that at least one pattern engine is suitable for use with each statistical engine. The computer system receives a sequence of characters in the form of an e mail or other text over the modem or network interface or via the I O controller for example from a disk inserted by the user or a document scanned by the scanner. The processor detects the language of the text and constructs the combination engine by retrieving the appropriate statistical engine and a corresponding pattern engine from the non volatile storage and storing them in the computer memory . Subsequently the processing unit uses the combination engine to scan the text and displays the output using the graphics subsystem and the display . Preferably the detected data is identified in the original text by highlighting it displaying it in a different colour and or font or ringing it. The user may also be given an option to use the data for example by storing it in an address book using an e mail address in a new e mail telephoning an identified phone number and so on.

The foregoing description has been given by way of example only and it will be appreciated by those skilled in the art that modifications may be made without departing from the broader spirit or scope of the invention as set forth in the claims. The specification and drawings are therefore to be regarded in an illustrative sense rather than a restrictive sense.

