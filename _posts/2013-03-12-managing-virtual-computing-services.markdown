---

title: Managing virtual computing services
abstract: Computer-implemented systems and methods for managing virtual computing services. A service interface may receive from an administrative user an instruction indicating a configuration change for a first virtual computing service. A plurality of agents comprises a leader agent and at least one other agent. The leader agent may assign to the at least one other agent a plurality of jobs for implementing the configuration change. The at least one other agent may execute at least one of the plurality of jobs, where executing the at least one of the plurality of jobs comprises modifying a configuration of a virtual desktop site associated with the first virtual computing service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268737&OS=09268737&RS=09268737
owner: MORGAN STANLEY
number: 09268737
owner_city: New York
owner_country: US
publication_date: 20130312
---
Many enterprises utilize virtual computing services to manage the computing needs of their employees and other users. Virtual computing services allow enterprises to provide desktop functionality to users without the need to install all necessary software such as operating systems etc. on the local user devices. Typically all or part of the software necessary to implement a virtual computing service e.g. a virtual desktop virtual application or group of virtual applications is hosted at a central processing location. Users utilize local machines to access a virtual computing service hosted by the central server.

Virtual computing services are often implemented using one or more virtual desktop sites or farms at the central processing location. Each virtual desktop site hosts one or more virtual computing services that are provided to local user devices. Virtual computing services can be deployed in different forms. In some implementations the virtual desktop site hosts all of the functionality of a virtual desktop. The user through the local machine is provided with an operating system and applications executed remotely at the virtual desktop site. Some users may be provided with user specific virtual desktops with the central processing location maintaining user profile information and implementing local storage. In some implementations the virtual desktop site streams a virtual desktop to a local user device such that some software components of the virtual desktop are executed at the local user device. Also in some implementations virtual desktop technology is utilized to provide users with applications that are executed at the central processing location but accessed via the local user devices.

Virtual computing services provide advantages to users and to enterprise information technology IT groups. Users can have access to a common desktop and or application regardless of the location or capabilities of the local user device that they utilize. IT groups benefit by having all virtually provided desktops and or apps hosted at the central processing location. This simplifies software maintenance as updates and or patches can be applied to the various virtual desktop sites and need not be separately pushed or otherwise installed to each local user device. Security is similarly simplified. The process of updating the central processing location including the virtual desktop sites however creates additional complications.

Various embodiments are directed to systems and methods for managing virtual computing services. As used herein the term virtual computing service refers to various types of computing services provided to local user devices and managed by central processing locations. For example virtual computing services include the provision of complete virtual desktops facilitated by the central processing location e.g. by an associated virtual desktop site . A complete virtual desktop may comprise desktop functionality such as an operating system at least one application storage etc. In various embodiments virtual desktop sites may facilitate virtual desktops by hosting virtual desktops streaming the virtual desktops to local user devices and or managing virtual desktops stored and executed at local user devices. Virtual computing services also comprise virtual applications that are hosted streamed and or managed by a virtual desktop site. For example virtual applications may be provided to physical e.g. non virtual desktops according to various different methods.

In some embodiments a central processing location executes a service interface for receiving configuration changes from administrative users e.g. users associated with the information technology IT function of an enterprise . The received configuration changes may apply to a single virtual service and or a group of virtual computing services. The central processing location may execute a plurality of agents for implementing a requested configuration change. The agents may be executed by various servers or other computer hardware at the central processing location. In some embodiments some or all of the agents are executed by virtual desktop sites that also host virtual computing services.

Changing the configuration of a virtual computing service or hosting virtual desktop site may comprise changing an association between one or more virtual computing service and one or more end users. Different virtual computing services may be associated with or assigned to end users in different ways. Some virtual computing services may be uniquely assigned to a single end user. The single end user may be authorized to access the virtual computing service to the exclusion of other end users. The single end user may be assigned to the virtual computing service manually or upon the first access to the virtual computing service. Some virtual computing services may be assigned to and accessible by a group of end users. For example a virtual desktop site may host a pool of virtual computing services that are assigned on a first come first served basis to end users belonging to a defined group. Changes to the configuration of a virtual application may be similarly implemented.

The plurality of agents may execute various jobs for implementing configuration changes received from administrative users. A leader agent selected from among the plurality of agents may assign the various jobs to particular agents. In some embodiments the leader agent also facilitates updates to the configuration of the agents. Agents that are not leader agents may be classified as skilled agents or as non skilled agents. Non skilled or generic agents may be capable of performing general processing jobs. Skilled agents may comprise functionality that allows the skilled agents to perform particular jobs. Skilled agents may be distinguished from non skilled agents for example based on inherent functionality and or access to resources. For example some skilled agents comprise functionality that other agents lack such as for example functionality for accessing an application program interface API of a particular type of virtual desktop site. Also some skilled agents are distinguished on the basis of the resources to which the agent has access. For example a skilled agent may be hosted by the same hardware that hosts a particular virtual desktop site e.g. a CITRIX XENDESKTOP 4 farm . Such an agent may have the capability to modify the configuration of the relevant virtual desktop site including virtual computing services stored thereon. The leader agent may assign skilled agents with jobs corresponding to their skill sometimes to the exclusion of other jobs.

In various embodiments a plurality of jobs may be grouped into an execution group. An execution group may comprise a name a distributed queue of jobs and an exclusive state. The exclusive state describes a position in the distributed queue. For example from the exclusive state and the distributed queue it may be possible to derive a job from the queue that are executed are being executed and or have yet to be executed. In various embodiments the execution group may be executed according to a sequence defined at least in part by the distributed queue. For example the leader agent and or a separate agent coordinator may implement a locking system. Before executing a job from the distributed queue an agent may request a lock associated with the job. If the lock is available the agent may execute the job. If the lock is not available the agent may not execute the job and may attempt to execute the next job in the queue . The lock for any given job may be unavailable for example if the job is already being executed by another agent and or if one or more predicate jobs are not yet completed. Predicate jobs may be jobs that must be completed prior to execution of the job. In some embodiments execution groups are executed in a manner dependent on the geographic location of the associated virtual desktop site or sites. For example the agents selected to execute an execution group may be agents implemented logically and or geographically near the virtual desktop site or sites.

The service interface may provide administrative users with synchronous and asynchronous methods for implementing configuration changes. According to a synchronous method the administrative user may request that a configuration change be implemented directly by the service interface. According to an asynchronous method the service interface may derive one or more jobs for implementing the configuration changes expressed as a distributed queue indicating the order in which the jobs are to be executed. The service interface may further map the distributed queue to particular agents. The distributed queue and mapping may collectively represent an execution group. The execution group is pushed directly to the leader agent or an agent coordinator for execution by the agents. The leader agent or agent coordinator maps the jobs from the distributed queue to other agents for execution. According to a second example asynchronous method the central processing location may comprise a configuration database that stores configuration data for various virtual desktop sites. The interface e.g. upon the request of an administrative user stores a configuration change to the configuration database. The leader agent may cause one or more other agents to periodically implement a synch job. When executing the synch job the one or more other agents may compare the current configurations of the various virtual desktop sites to the configurations stored at the configuration database. If a difference is found the difference as indicated at the configuration database may be pushed to the appropriate virtual desktop site or sites. In some embodiments detected differences are saved to the configuration database e.g. as a difference table . When a detected difference appears in the difference table it may be pushed to the appropriate virtual computing service. In this way a detected difference must be present for at least two cycles of the synch job to be pushed to the virtual computing service e.g. a first cycle that pushes the detected difference to the detected difference to the difference table and a second cycle that finds the detected difference in the difference table and pushes it to the virtual computing service .

The virtual desktop sites may comprise any suitable type of virtual desktop site. For example the virtual desktop sites may comprise one or more XENDESKTOP 4 farms available from CITRIX SYSTEMS INC. one or more XENDESKTOP 5 sites also available from CITRIX SYSTEMS INC. one or more VCENTER sites available from VMWARE INC. one or more proprietary virtual desktop service sites one or more HYPER V sites available from MICROSOFT INC. and one or more other sites for providing various other virtual computing service functionality . The various virtual desktop sites may provide different kinds of virtual computing services . For example some sites host virtual computing services that are executed exclusively at the respective site and provided to the local user devices . Also various sites provide virtual computing services that are streamed to user devices such that processing to implement the virtual computing service is partially or completely performed at the local user device . Some sites are configured to provide virtual computing services in the form of local virtual machines that are stored and run locally on a local user device . The site may act as a hypervisor that synchronizes the locally stored virtual computing service with a master image on the site. Additionally some sites may provide virtual application services that include one or more individual applications instead of all desktop components. Such virtual applications may be hosted at the respective site streamed from the site to the local user device and or hosted locally and managed by hypervisor functionality executed at the site .

The various sites may be managed by a management system . The management system comprises various agents an agent coordinator a configuration database and a service interface and an optional index application . The agents may execute various jobs as described below for managing the virtual desktop sites . Agents may comprise skilled agents generic or non skilled agents and a leader agent . A leader agent may be elected for example upon agent start up as described below. The leader agent may perform various management tasks including for example assigning jobs to the various other agents and managing configurations of the other agents . Skilled agents by virtue of their coded capabilities and or capabilities of the hardware executing the skilled agents may be capable of performing specialized jobs. For example agents executed at an XENDESKTOP 4 site may have skills for configuring the site . Non skilled or generic agents may be configured to perform general jobs for example under the direction of the leader agent . Although three agents are shown it will be appreciated that any suitable number of agents and any suitable number of agents of each respective type may be used. The agent coordinator may provide functionality described herein for managing the operations of the various agents . One example product that may implement the agent coordinator is the ZOOKEEPER software package available from the APACHE SOFTWARE FOUNDATION.

The configuration database may store configuration data describing configurations of various components of the management system . For example the configuration database may store configuration data describing the configurations of the various virtual desktop sites including for example configurations of various remote virtual computing services e.g. desktops and or applications hosted or otherwise facilitated by the sites . In some embodiments the configuration database may also store data describing the configurations of various other components of the management system including the configurations of various agents . The service interface may comprise a portal and optionally a web service . Together the portal and the web service implement the service interface that may allow administrative users to request configuration changes in virtual desktop sites as described herein. Also in some embodiments the service interface may comprise functionality for transforming a requested configuration change or change into a set of jobs to be executed on the various virtual desktop sites e.g. executed by the various agents . The index application may be programmed to record and index instructions received from administrative users through the service interface .

To maintain the exclusive state of an execution group it is desirable for the management system to execute the jobs indicated by the distributed queue in order e.g. a job order and one at a time. The leader agent may assign jobs from the distributed queue to various other agents . For example the leader agent may distribute the various job triggers to the other agents . Each job trigger may comprise data describing the associated job. For example the job triggers may indicate details of the associated job a chronological table indicating an order and or periodic nature of the job a priority of the job monitoring details for the job and optionally an alternate action to be taken if the scheduled time for executing the job has passed. In some embodiments the job triggers are generated by the agent coordinator and or the leader agent . The leader and or agent coordinator may implement a management mechanism for ensuring that the other agents execute the jobs in the queue in order so as to maintain the exclusive state of the execution group . For example the various job triggers may indicate an execution time or schedule indicating to each of the other agents when the agents are to execute their assigned jobs. Also in some embodiments the leader agent and or the agent coordinator may implement a lock system. For example an agent may be assigned a job along with an indication of a lock that must be obtained before executing the job. When the agent is to perform a job it first requests the associated lock from the agent coordinator and or the leader agent . The agent coordinator and or leader agent may provide the lock only if all of the predicate jobs have been completed. Upon receiving the lock the agent may perform the job. Upon performance of the job the agent may return the lock to the agent coordinator or other central processing location. This may indicate that the lock for the next job in the queue may be provided when requested by an agent .

At the administrative user may access the service interface . The service interface e.g. web service may at provide a user interface to the administrative user e.g. via the portal . Through the interface the administrative user may request data describing the configuration of at least one virtual desktop site . The requested information for example may pertain to a configuration of the site and or the configuration of one or more virtual computing services hosted and or managed by the site . At the service interface may look up the requested information. For example a version of the requested configuration may be retrieved from the configuration database at . Also a version of the requested configuration may be retrieved from the relevant virtual desktop site at . The transfer described at is an example of real time data provided to the service interface and shown in . At the service interface may format the data returned from the configuration database and the site and provide it to the administrative user e.g. via the interface .

At the administrative user may request that a change in the configuration of the virtual desktop site or sites. For example the administrative user may request that a change be made to one or more virtual computing services hosted and or administered by the site or sites. Various types of changes may be supported. For example the administrative user may assign or de assign a end user to a virtual computing service add or remove a end user to or from a group of end users authorized to access a virtual computing service e.g. virtual desktop or virtual application add or remove a virtual desktop site to the scope of the management system add or remove a folder of virtual computing services to or from a virtual desktop site add or remove a group of virtual computing services from a virtual desktop site change a name of a virtual computing services change a maintenance mode of a virtual computing services and or change whether a virtual computing service is configured to be a part of a group of virtual computing services. It will be appreciated that any of these operations may be executed for a single user virtual computing service virtual application virtual desktop site group etc. or over multiple examples of one or more of each.

At the service interface may determine whether the administrative user has permission to perform the requested configuration change and initiate performance of the operation. At the configuration database may store an action item to track progress of the configuration change. At the service interface may determine whether the configuration change is to be implemented in a synchronous or asynchronous manner. In some embodiments this is indicated by the administrative user . If the configuration change is to be made in a synchronous manner the service interface may execute the configuration change at for example by writing the configuration change directly to the affected virtual desktop site or sites at . Upon completion of the configuration change the configuration database may update the action item set at so that the database reflects the newly made configuration change.

Referring back to if the configuration change is to be implemented in an asynchronous manner the agent coordinator may receive an indication of the configuration change and send it to a queue for the various agents at . In some embodiments the service interface may deconstruct the requested configuration change into one or more jobs to be executed by agents to bring about the change. Also in some embodiments this operation may be performed by the agent coordinator or other central processing location. At an agent may watch the queue. A scheduler of the agent may schedule execution of a job for implementing the configuration change at . At the agent may execute the job to bring about the configuration change causing the configuration change at . At the configuration database may update the action item set at to indicate the new configuration of the virtual desktop site . In some embodiments the configuration change may require more than one job. For example the configuration change may be expressed as all or part of an execution group such as the group described herein. In this case the actions may be performed multiple times by the same agent or different agents to bring about the requested configuration change.

The process flow illustrated synchronous and asynchronous modes of implementing configuration changes. It will be appreciated that the administrative user may select a synchronous or asynchronous mode based on the type and number of configuration changes to be made. For example a change to a single virtual computing service or to virtual computing services hosted and or administered by a single virtual desktop site may be made synchronously. Changes to multiple virtual computing services across multiple virtual desktop sites may be performed asynchronously.

In addition to the synchronous and asynchronous modes described in the process flow the management system may also implement a second asynchronous mode utilizing the configuration database . For example the administrative user through the service interface may make a change to the configuration for a virtual desktop site stored at the configuration database . This may occur in lieu of actually making the configuration change at the site . The agents may be configured to implement a periodic synch job that propagates changes from the configuration database to the associated virtual desktop site . is a flow chart showing one embodiment of a process flow for implementing such a synch job. The synch job may begin at . The synch job may be executed by an agent . For example the leader agent may assign the synch job to another agent e.g. a generic agent to be executed periodically e.g. every day every eight hours every week etc. . Also in some embodiments execution of the synch job may be handled by multiple agents .

The agent may start execution of the synch job at . At the agent may retrieve configurations for all of the virtual desktop sites from the configuration database . In some embodiments where multiple agents execute the synch job each agent may be responsible for a portion of the set of all virtual desktop sites . At the agent may receive configurations for all of the virtual desktop sites or all sites under the responsibility of the agent from the sites themselves. At the agent may compute differences if any between the configurations received from the configuration database and the configurations received from the sites themselves. In some embodiments the agent may also retrieve a set of previous differences. Previous differences may be stored at the configuration database for example as a difference table. The previous differences may reflect differences between the database and the respective sites generated during a previous iteration of the synch job. At the agent may compute a difference of differences. The difference of difference may reflect configuration differences that are also part of the previous differences e.g. were detected during a previous instance of the synch job and or configuration differences that are new since the last execution of the synch job.

In some embodiments the actions illustrated in box may be performed by the agent for each comparison between a site configuration as stored at the configuration database and the corresponding site configuration stored at the site itself. For example at the agent may determine whether a particular configuration difference was noted in the previous differences received from the configuration database at . The presence of a configuration difference at the database may indicate that the difference was also present at the last execution of the synch job. If the difference is evident from the comparison at but is not stored as part of the previous differences at the database the agent may updated the previous differences at the database at . If the difference is reflected in the database but is not reflected in the comparison at then the agent may remove the difference from the database . If the difference is reflected by the comparison at and in the difference data received from the database then the agent may implement the configuration change to the appropriate virtual desktop site at and remove the difference from the database at .

In this way any configuration changes entered into the configuration database are propagated to the virtual desktop sites upon the second execution of the synch job. It will be appreciated that the number of synch job iterations necessary before a configuration change added to the database is propagated to the sites may be modified and set to any suitable value. For example the synch job may be configured to write implement every configuration difference as a configuration change to an appropriate virtual desktop site for every iteration of the synch job for which the configuration difference exists.

After connection at the agent may transition either to the agent process state and or the leader election process state . If the agent is a skilled agent it may transition directly to the agent process state . For example a skilled agent may not be considered for selection as the leader agent . For agents that transition to the leader election process state a leader election may take place at . The leader election may select an agent to be the leader agent for further processing. The leader agent may be selected in any suitable manner. In some embodiments leader selection procedure may be handled by the ZOOKEEPER software package available from the APACHE SOFTWARE FOUNDATION. At the agents may watch for the next leader which may be elected at . If an agent is not elected leader it may transition to the agent process state . If an agent is elected leader then it may alternately run the leader procedure job at See and watch the configuration state of the other agents at .

An agent e.g. may initially enter the agent process state in a not ready state . The agent may subsequently transition to a watch state . At the watch state the agent may monitor a job queue implemented for example by the agent coordinator and or the leader agent . Skilled agents in the watch state may report their skill capability to the leader agent . The leader agent may in return assign to the skilled agent jobs e.g. job triggers that require or benefit from the skilled agent s skill capability. The job queue may be for example a distributed queue of an execution group . The agent may receive a stop instruction e.g. from the leader agent and or the agent coordinator . Upon receipt of a stop instruction the agent may transition to a stop state and subsequently to a shutdown state . Alternatively from the watch state the agent may be assigned a job. For example a job trigger may appear on a queue at the agent coordinator associated with the agent . The agent may enter a running state upon assignment of a job. From the running state the agent may start an agent scheduler at . The scheduler may organize and schedule jobs to be performed by the agent . Also from the running state the agent may transition to a watch configuration state where the agent may monitor the leader agent for an indication of a change to the agent s configuration. If a configuration change is requested by the leader agent the agent may enter a configuration change state where the requested change is implemented. Additional details of agent configuration changes are provided below with respect to . If the agent does make a configuration change it may notify the scheduler at . For example the configuration change may affect the types of jobs that the agent is capable of doing.

At the leader agent may obtain a current configuration for each agent . The current configuration may be obtained for example from the agent coordinator . In various embodiments the default configuration and the current configuration may each be associated with a signature. This may allow the leader agent to determine whether a configuration is out of date by comparing the signatures of the configurations . Box represents actions that may be performed for each execution group. For example each execution group may be associated with one or more agents for executing the jobs at the distributed queue of the execution group. At the leader agent may determine if the default configuration is newer than the current configuration . If not then the leader agent may at obtain current mappings between the agent and its configuration e.g. from the agent coordinator . These mappings may be added to a mapping collection at . If the default configuration is newer than the current configuration then the leader agent may remove mappings at the agent coordinator between the agent and the current configuration and update the mappings at to reflect the default configuration as the new configuration. The updated mappings may be added to the mapping collection at . A placement algorithm may be run at to push configuration changes to specific agents e.g. agents at states and from above . Mappings at the coordinator may be updated to reflect any agent configuration changes at .

The examples presented herein are intended to illustrate potential and specific implementations of the present invention. It can be appreciated that the examples are intended primarily for purposes of illustration of the invention for those skilled in the art. No particular aspect or aspects of the examples are necessarily intended to limit the scope of the present invention. For example no particular aspect or aspects of the examples of system architectures methods or processing structures described herein are necessarily intended to limit the scope of the invention.

It is to be understood that the figures and descriptions of the present invention have been simplified to illustrate elements that are relevant for a clear understanding of the present invention while eliminating for purposes of clarity other elements. Those of ordinary skill in the art will recognize however that these sorts of focused descriptions would not facilitate a better understanding of the present invention and therefore a more detailed description of such elements is not provided herein.

In various embodiments modules or software can be used to practice certain aspects of the invention. For example software as a service SaaS models or application service provider ASP models may be employed as software application delivery models to communicate software applications to clients or other users. Such software applications can be downloaded through an Internet connection for example and operated either independently e.g. downloaded to a laptop or desktop computer system or through a third party service provider e.g. accessed through a third party web site . In addition cloud computing techniques such as Platform as a Service PaaS may be employed in connection with various embodiments of the invention. For example one or more of the virtual desktop sites may be implemented according to an SaaS or PaaS model.

Moreover the processes associated with the present embodiments may be executed by programmable equipment such as computers. Software or other sets of instructions that may be employed to cause programmable equipment to execute the processes. The processes may be stored in any storage device such as for example a computer system non volatile memory an optical disk magnetic tape or magnetic disk. Storage devices may be local or remote relative to the hardware executing the processes e.g. remote storage cloud based or distributed storage etc. . Furthermore some of the processes may be programmed when the computer system is manufactured or via a computer readable memory medium.

It can also be appreciated that certain process aspects described herein may be performed using instructions stored on a computer readable memory medium or media that direct a computer or computer system to perform process steps. A computer readable medium may include for example memory devices such as diskettes compact discs of both read only and read write varieties optical disk drives and hard disk drives. A computer readable medium may also include memory storage that may be physical virtual permanent temporary semi permanent and or semi temporary.

A computer computer device host engine or processor may be for example and without limitation a processor microcomputer minicomputer server mainframe laptop personal data assistant PDA wireless e mail device cellular phone pager processor fax machine scanner or any other programmable device configured to transmit and or receive data over a network. Computer systems and computer based devices disclosed herein may include memory for storing certain software applications used in obtaining processing and communicating information. It can be appreciated that such memory may be internal or external with respect to operation of the disclosed embodiments. The memory may also include any means for storing software including a hard disk an optical disk floppy disk ROM read only memory RAM random access memory PROM programmable ROM EEPROM electrically erasable PROM and or other computer readable memory media. Various systems described herein may be implemented utilizing computers including for example the Health Tracking System and the various other systems .

In various embodiments of the present invention a single component may be replaced by multiple components and multiple components may be replaced by a single component to perform a given function or functions. Except where such substitution would not be operative to practice embodiments of the present invention such substitution is within the scope of the present invention. Any of the servers or computer systems described herein for example may be replaced by a server farm or other grouping of networked servers e.g. a group of server blades that are located and configured for cooperative functions. It can be appreciated that a server farm may serve to distribute workload between among individual components of the farm and may expedite computing processes by harnessing the collective and cooperative power of multiple servers. Such server farms may employ load balancing software that accomplishes tasks such as for example tracking demand for processing power from different machines prioritizing and scheduling tasks based on network demand and or providing backup contingency in the event of component failure or reduction in operability. In some embodiments a server farm and or PaaS may be implemented in a manner that is transparent to the party implementing the system the implementing party . For example a PaaS system may be implemented by a service provider such as WINDOWS AZURE GOOGLE cloud platform etc. The service provider may manage physical servers and other computer equipment. The implementing party may not manage or even be aware of the physical nature of the computers or storage devices that are used. Instead the PaaS system may be presented to the implementing party as logical units of computing power and storage leased from the service provider.

Various embodiments of the systems and methods described herein may employ one or more electronic computer networks to promote communication among different components transfer data or to share resources and information. For example the various systems may be in communication via one or more electronic computer networks. Such computer networks can be classified according to the hardware and software technology that is used to interconnect the devices in the network such as optical fiber Ethernet wireless LAN HomePNA power line communication or G.hn. The computer networks may also be embodied as one or more of the following types of networks local area network LAN metropolitan area network MAN wide area network WAN virtual private network VPN storage area network SAN or global area network GAN among other network varieties.

For example a WAN computer network may cover a broad area by linking communications across metropolitan regional or national boundaries. The network may use routers and or public communication links. One type of data communication network may cover a relatively broad geographic area e.g. city to city or country to country which uses transmission facilities provided by common carriers such as telephone service providers. In another example a GAN computer network may support mobile communications across multiple wireless LANs or satellite networks. In another example a VPN computer network may include links between nodes carried by open connections or virtual circuits in another network e.g. the Internet instead of by physical wires. The link layer protocols of the VPN can be tunneled through the other network. One VPN application can promote secure communications through the Internet. The VPN can also be used to separately and securely conduct the traffic of different user communities over an underlying network. The VPN may provide users with the virtual experience of accessing the network through an IP address location other than the actual IP address which connects the access device to the network.

Computer networks may include hardware elements to interconnect network nodes such as network interface cards NICs or Ethernet cards repeaters bridges hubs switches routers and other like components. Such elements may be physically wired for communication and or data connections may be provided with microwave links e.g. IEEE 802.12 or fiber optics for example. A network card network adapter or NIC can be designed to allow computers to communicate over the computer network by providing physical access to a network and an addressing system through the use of MAC addresses for example. A repeater can be embodied as an electronic device that receives and retransmits a communicated signal at a boosted power level to allow the signal to cover a telecommunication distance with reduced degradation. A network bridge can be configured to connect multiple network segments at the data link layer of a computer network while learning which addresses can be reached through which specific ports of the network. In the network the bridge may associate a port with an address and then send traffic for that address only to that port. In various embodiments local bridges may be employed to directly connect local area networks LANs remote bridges can be used to create a wide area network WAN link between LANs and or wireless bridges can be used to connect LANs and or to connect remote stations to LANs.

In various embodiments a hub may be employed which contains multiple ports. For example when a data packet arrives at one port of a hub the packet can be copied unmodified to all ports of the hub for transmission. A network switch or other devices that forward and filter OSI layer 2 datagrams between ports based on MAC addresses in data packets can also be used. A switch can possess multiple ports such that most of the network is connected directly to the switch or another switch that is in turn connected to a switch. The term switch can also include routers and bridges as well as other devices that distribute data traffic by application content e.g. a Web URL identifier . Switches may operate at one or more OSI model layers including physical data link network or transport i.e. end to end . A device that operates simultaneously at more than one of these layers can be considered a multilayer switch. In certain embodiments routers or other like networking devices may be used to forward data packets between networks using headers and forwarding tables to determine an optimum path through which to transmit the packets.

As employed herein an application server may be a server that hosts an API to expose business logic and business processes for use by other applications. Examples of application servers include J2EE or Java EE 5 application servers including WebSphere Application Server. Other examples include WebSphere Application Server Community Edition IBM Sybase Enterprise Application Server Sybase Inc WebLogic Server BEA JBoss Red Hat JRun Adobe Systems Apache Geronimo Apache Software Foundation Oracle OC4J Oracle Corporation Sun Java System Application Server Sun Microsystems and SAP Netweaver AS ABAP Java . Also application servers may be provided in accordance with the .NET framework including the Windows Communication Foundation .NET Remoting ADO.NET and ASP.NET among several other components. For example a Java Server Page JSP is a servlet that executes in a web container which is functionally equivalent to CGI scripts. JSPs can be used to create HTML pages by embedding references to the server logic within the page. The application servers may mainly serve web based applications while other servers can perform as session initiation protocol servers for instance or work with telephony networks. Specifications for enterprise application integration and service oriented architecture can be designed to connect many different computer network elements. Such specifications include Business Application Programming Interface Web Services Interoperability and Java EE Connector Architecture.

While various embodiments of the invention have been described herein it should be apparent however that various modifications alterations and adaptations to those embodiments may occur to persons skilled in the art with the attainment of some or all of the advantages of the present invention. The disclosed embodiments are therefore intended to include all such modifications alterations and adaptations without departing from the scope and spirit of the present invention as set forth in the appended claims.

