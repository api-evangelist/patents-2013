---

title: Detecting bootkits resident on compromised computers
abstract: Techniques detect bootkits resident on a computer by detecting a change or attempted change to contents of boot locations (e.g., the master boot record) of persistent storage, which may evidence a resident bootkit. Some embodiments may monitor computer operations seeking to change the content of boot locations of persistent storage, where the monitored operations may include API calls performing, for example, WRITE, READ or APPEND operations with respect to the contents of the boot locations. Other embodiments may generate a baseline hash of the contents of the boot locations at a first point of time and a hash snapshot of the boot locations at a second point of time, and compare the baseline hash and hash snapshot where any difference between the two hash values constitutes evidence of a resident bootkit.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09251343&OS=09251343&RS=09251343
owner: FireEye, Inc.
number: 09251343
owner_city: Milpitas
owner_country: US
publication_date: 20130315
---
The invention relates generally to computer security and more particularly to detecting malicious software operating in computers and other digital devices.

Malicious software or malware for short may include any program or file that is harmful by design to a computer. Malware includes computer viruses worms Trojan horses adware spyware and any programming that gathers information about a computer or its user or otherwise operates without permission. Owners of the computers are often unaware that these programs have been added to their computers and are often similarly unaware of their function.

Malicious network content is a type of malware distributed over a network via websites e.g. servers operating on a network according to Hypertext Transfer Protocol HTTP or other well known standard. Malicious network content distributed in this manner may be actively downloaded and installed on a computer without the approval or knowledge of its user simply by the computer accessing the website hosting the malicious network content the malicious website . Malicious network content may be embedded within objects associated with web pages hosted by the malicious website. Malicious network content may also enter a computer on receipt or opening of email. For example email may contain an attachment such as a PDF document with embedded malicious executable programs. Furthermore malicious content may exist in files contained in a computer memory or storage device having infected those files through any of a variety of attack vectors.

Various processes and devices have been employed to prevent the problems associated with malicious content. For example computers often run antivirus scanning software that scans a particular computer for viruses and other forms of malware. The scanning typically involves automatic detection of a match between content stored on the computer or attached media and a library or database of signatures of known malware. The scanning may be initiated manually or based on a schedule specified by a user or system administrator associated with the particular computer. Unfortunately by the time malware is detected by the scanning software some damage on the computer or loss of privacy may have already occurred and the malware may have propagated from the infected computer to other computers. Additionally it may take days or weeks for new signatures to be manually created the scanning signature library updated and received for use by the scanning software and the new signatures employed in new scans.

Moreover anti virus scanning utilities may have limited effectiveness to protect against all exploits by polymorphic malware. Polymorphic malware has the capability to mutate to defeat the signature match process while keeping its original malicious capabilities intact. Signatures generated to identify one form of a polymorphic virus may not match against a mutated form. Thus polymorphic malware is often referred to as a family of virus rather than a single virus and improved antivirus techniques to identify such malware families is desirable.

Another type of malware detection solution employs virtual environments to replay content within a sandbox established by virtual machines VMs that simulates a target operating environment. Such solutions monitor the behavior of content during execution to detect anomalies and other activity that may signal the presence of malware. One such system sold by FireEye Inc. the assignee of the present patent application employs a two phase malware detection approach to detect malware contained in network traffic monitored in real time. In a first or static phase a heuristic is applied to network traffic to identify and filter packets that appear suspicious in that they exhibit characteristics associated with malware. In a second or dynamic phase the suspicious packets and typically only the suspicious packets are replayed within one or more virtual machines. For example if a user is trying to download a file over a network the file is extracted from the network traffic and analyzed in the virtual machine using an instance of a browser to load the suspicious packets. The results of the analysis constitute monitored behaviors of the suspicious packets which may indicate that the file should be classified as malicious. The two phase malware detection solution may detect numerous types of malware and even malware missed by other commercially available approaches. The two phase malware detection solution may also achieve a significant reduction of false positives relative to such other commercially available approaches. Otherwise dealing with a large number of false positives in malware detection may needlessly slow or interfere with download of network content or receipt of email for example. This two phase approach has even proven successful against many types of polymorphic malware and other forms of advanced persistent threats.

In some instances malware may take the form of a bootkit also known as a kernel rootkit. As used herein the term bootkit refers to malicious code that installs itself in a boot record of the kernel of an operating system of a compromised computer without the knowledge or authority of the infected computer s user. The infected boot record may be the master boot record partition boot record boot loader or volume boot record. A bootkit may actively hide its presence from administrators by subverting standard operating system functionality. Moreover a bootkit is inherently hard to detect because it may be executed before the operating system and may subvert operating system functionality to hide its presence. For example bootkits may be able to hook and bypass operating system routines initialization processor mode switch and security checks integrity code signed etc. . Bootkits may create a hidden file system within the infected computer in which it can hide other malware and or copies of infected files.

Generally speaking a bootkit functions at a fundamental level of operation of a computer associated with the kernel of its operating system. Known operating systems communicate with an external device such as a disk controller peripheral device and other hardware through the use of an electronic signal called an interrupt. For example when an application sends a system call seeking to read or write to a hard disk it issues an interrupt. Then an interrupt handler function of the operating system normally handles and completes the interrupt. A bootkit installed in the operating system may hook intercept the interrupt and or related kernel functions in order to modify the way the interrupt is handled. The bootkit may place an internal address in the system service descriptor table SSDT of a Windows operating system or the system call table SCT of a Linux operating system in order to handle an interrupt itself instead of the original handler. Indeed a bootkit may modify data structures in a Windows kernel using a method known as direct kernel object modification DKOM . This can permit the bootkit to rewrite a portion of code of the operating system for example when the kernel loads to handle the interrupt. The rewritten code may allow the bootkit to bypass or modify integrity testing and other security protection mechanisms and even bypass advanced operating protection systems such as patch guard and thereby remain concealed. Even full disk encryption is to no avail in protecting a compromised computer since even if all other data on a boot up drive is encrypted the boot sequence located in the master boot record typically cannot be encrypted.

It has been suggested that a defense against bootkit attacks is the prevention of unauthorized physical access to the system but this is impractical in today s networked world. Moreover virus scanning and next generation firewall technology have not prevented advanced forms of bootkits from gaining access to operating system kernels. Recently operating systems themselves have incorporated counter measures to thwart the threat of bootkits. For example 64 bit versions of Microsoft Windows implement mandatory signing of all kernel level drivers in order to make it more difficult for untrusted code to execute with the highest privileges in a computer and implement kernel patch protection. However bootkits are also rapidly evolving to circumvent such counter measures.

Further enhancement to malware detection effectiveness is desirable of course particularly as malware developers continue to create new forms of exploits including more sophisticated bootkits which can have potentially serious impact on computer and network infrastructure.

Generally speaking a bootkit is a type of or part of an active infiltration attack often operating in a two step process. The first step is infection which may take the form of a typically small package of malicious code malware being injected into a computer whose function is to compromise the infected device. The second step involves the resident bootkit performing malicious activity. Embodiments of the invention are designed to detect certain types of malicious activity of bootkits. As used herein a computer is any electronic device having a processor for running an operating system which may include without limitation notebook computers desktop computers tablets smart phones and other smart devices and equipment and often employs a network interface for communication over a network such as for example the Internet. The terms computer and computer systems may be construed as synonymous as used throughout this specification unless context demands otherwise.

Embodiments of the invention detect bootkits resident on a computer by detecting a change or attempted change to contents of boot locations of persistent storage where any detected change or attempted change represents evidence of a resident bootkit and in response an alert regarding the evidence of a resident bootkit may be issued. Some embodiments may monitor computer operations seeking to change the content of boot locations of persistent storage where the monitored operations may include API calls performing for example WRITE READ or APPEND operations with respect to the contents of the boot locations. Other embodiments may generate a baseline hash of the contents of the boot locations at a first point of time and a hash snapshot of the boot locations at a second point of time and compare the baseline hash and hash snapshot where any difference between the two hash values constitutes evidence of a resident bootkit. Yet other embodiments may perform bootkit detection using both techniques to better assure detection of bootkits.

As used herein boot locations are areas e.g. addressable locations of persistent storage that store contents including executable code and data required to load an operating system for execution in any execution environment including a virtual execution environment as provided by a virtual machine. These shall sometimes be referred to as the boot locations and the boot content. The boot locations may store the master boot record. In some embodiments the boot locations may store a master boot record MBR and one or more volume boot records VBRs . Some embodiments monitor any changes or attempted changes to only the boot locations containing the MBR and others monitor any changes or attempted changes to both the MBR and one or more of the VBR.

Embodiments of the invention may perform an integrity check of boot content to detect bootkit activity. An integrity checker initially generates and stores preferably in persistent storage a baseline hash of the record. Thereafter the integrity checker generates one or more additional hashes of the MBR taken over time. The hash baseline is used as a basis or standard for comparison with each subsequent hash instance called the hash snapshot. Where plural snapshots are taken they may be generated on a periodic or aperiodic basis. The integrity checker compares the hash baseline with each hash snapshot. The boot content is not expected to change during normal operation of a computer. Any detected difference in the hash values is indicative of abnormal activity and thus of a resident bootkit. The reason this inference can be made is that few legitimate applications change the boot content. Moreover these applications are not typically used by ordinary users found in a commercial environment. On the other hand malicious bootkits frequently make changes to the boot content. Accordingly the integrity checker may generate a bootkit alert if any difference is detected and may report the details of the malware attack to an administrator or user.

The proposed techniques may be implemented to detect bootkits in computers in use for example within enterprises by performing the methods described herein or select steps thereof for example as background processes during normal computer operation as part of an on going malware detection protection program. Where only select steps are performed during normal operation of the computers the remaining steps may be performed by a security station which may issue an alert to IT or security personnel. Accordingly the proposed techniques may be implemented in network endpoints and standalone computers for example by incorporation of bootkit detection agents into their respective operating systems or into utilities or other computer programs installed thereon.

In alternative embodiments the proposed techniques may be implemented in a bootkit detection appliance or malware detection system which may detect changes or attempted changes caused by samples e.g. files or network content for example that may be malicious and contain bootkit code. They may also be implemented in the two phase malware detection solutions as described above or in other malware detection systems with or without virtual execution environments. As such the invention may be deployed to protect computer systems in an enterprise environment or to test known or unknown samples in diagnostic or forensic labs.

For a computer running a virtual machine embodiments may implement the invention partially within a guest image under the control of a hypervisor or VMM and partially within the virtual machine itself. Additionally embodiments may implement the invention partially within the virtual machine and its guest image and partially within an external security station or malware detection system.

As noted in order to be readily locatable the MBR is always the first sector of the drive though the precise format and structure of the boot record depends on the operating system type and version. Sometimes the term MBR is used to describe the first sector of a bootable disk and at other times it refers to the boot content contained therein and sometimes it is referred to as the master boot block or master partition boot sector. Normally IBM Personal Computers use 512 byte sectors real or emulated and the MBR is thus up to 512 bytes in length.

Where an operating system is to be loaded within a virtual machine a virtual bootable disk or other persistent storage is typically used rather than a physical disk. Nonetheless the principles just discussed apply the MBR may be located within sector of the virtual disk and upon the disk being mounted sector of the virtual bootable disk can be read its partition table accessed to identify for example the locations of the VBRs and its boot code executed. The same is true of flash drives which typically have analogous formats to typical SCSI disk drives and thus its MBR and partition table may be found in its sector .

During operation after a computer is powered on its basic input output system BIOS typically performs a power on self test POST and initializes the system. Next the BIOS copies the first sector of a bootable drive containing the MBR into memory and passes control of the computer to the boot code executable instructions contained therein. Execution of the boot code accesses the partition table which tells the computer how the hard drive is partitioned and how to load the operating system. In other words the boot code uses the partition table to identify a configured bootable partition on the drive which permits the system to load and execute its VBRs.

Processor is coupled via transmission medium to a persistent storage . Persistent storage includes a bootable disk which permits processor to boot up as described above. Persistent storage also includes an operating system and a bootkit detector both of which may take the form of executable computer program code. The processor may execute the operating system natively and the bootkit detector may run as an application over the operating system . For purposes of the following discussion we will refer to the MBR as an illustrative example of the boot content though this should not be construed as limiting the boot content to only the MBR unless otherwise indicated. The bootkit detector may include an MBR extraction logic which is configured to access the master record from a bootable disk e.g. a virtual disk to extract the MBR therefrom and possibly other sectors depending on the embodiment though the embodiment will be discussed in terms of the MBR a generation logic which is configured to generate an MBR based hash signature and store it in a hash log or database a hash comparison logic which is configured to compare a first or baseline hash signature with a second or snapshot hash signature and an alert logic which is configured to issue an alert if the comparison logic determines that the MBR has been changed in that it finds a difference between the hash values of the baseline and snapshot signatures. In some embodiments the bootkit detector may execute potentially malicious samples within a virtualization environment having a guest operating system and possibly a computer application such as for example a browser or email application not shown running within a virtual machine . During execution the processor may execute an operating system instance within an instance of the virtual machine which runs over the operating system .

In step logic obtains loads and executes a sample within a virtual environment to be tested to determine whether the sample contains a malicious bootkit. Where the sample is executable code it may be run as a computer program or application over the guest image of the operating system in the virtual environment. Where the sample constitutes an object such as a PDF document which is itself not executable even though it may contain embedded executables the sample may be loaded by a suitable computer program or application such as in this example a PDF reader running over the guest operating system and together constituting a guest image executed by a virtual machine.

Next in step logic determines whether execution of the sample has finished. If it has not then in step method waits a predetermined or dynamically set period of time where dynamically set e.g. based on experience in executing such samples within the guest image before repeating step . When the logic of step determines that execution has finished in step logic reads one on more boot record sectors from the bootable disk and for example the same MBR containing sector s as read to generate the baseline hash signature H . In step logic generates a hash snapshot based on the read boot content in this example the MBR at a point of time t which together with baseline signature H will serve as a basis for comparison of the MBR over time tto t . In some embodiments snapshot hashes may be taken from time to time during the execution of the sample. In step logic determines whether the baseline hash signature is the same as the snapshot hash signature. It may perform this comparison simply by subtracting one hash value from the other. If the difference is any value other than zero then H is not equal to H. This result would indicate that the MBR has been changed at some point in time between the generation of the baseline hash and the snapshot hash that is between tand t . This in turn would indicate that a mechanism must have caused that change in the MBR and that mechanism may very well be a bootkit. If the baseline hash is equal to the snapshot hash in step logic may be employed to reset the virtual environment to ready it for a next sample to be tested. As such the method may return to step . On the other hand if the baseline hash is not equal to the snapshot hash in step logic classifies the sample as malicious that is to say as likely that is having a high probability of containing a bootkit.

Controller may be implemented as part of a VM monitor or manager VMM also referred to as a hypervisor for managing or monitoring VMs. The controller may execute an operating system instance of host operating system OS which is stored in storage device . VM may host a guest OS depicted as operating system instance which is different from the host OS of the controller . The host OS and the guest OS may be the same type of operating systems or different types of operating systems e.g. Windows Linux Unix Mac OS iOS etc. or different versions thereof. A VM is a simulation of a computer abstract or real that is usually different from the target computer where it is being simulated on . Virtual machines may be based on specifications of a hypothetical computer or emulate a computer architecture and functions of a real world computer. A virtual machine referred to herein can be any type of virtual machines such as for example hardware emulation full virtualization para virtualization and operating system level virtualization virtual machines.

On initial execution of the virtual machine a processor or processors not shown in this figure of the controller accesses a virtual disk provided by the virtual machine to obtain one or more sectors of a boot record preferably the sector s containing the boot content as stored thereon. It should be noted that boot record is isolated from the boot record associated with operating system . A hash generator included in the controller generates a hash of boot content obtained by the controller from the virtual disk and for example a hash of the MBR. That hash is the baseline hash serving as the baseline signature of the MBR for later testing of content samples including the content sample by the malicious content detection system . The baseline hash signature may be stored in the event log . In some embodiments the baseline hash signature may be stored as a heavily obfuscated value under kernel software protection.

According to one embodiment when a content sample to be tested as to whether it may contain a bootkit is received for a dynamic content analysis as opposed to be a static content analysis described below a scheduler of controller is configured to identify and select a VM in this example VM from a VM pool that has been configured to closely simulate a target operating environment e.g. particular version of an OS with particular versions of certain software installed therein in which the content sample is to be analyzed. The scheduler then launches VM in which monitoring module is running and configured to monitor activities and behavior of content sample . In addition monitoring module maintains a persistent communication channel with analysis module of controller to communicate certain events or activities of content sample during the execution.

After the content sample is executed or at one or more times during its execution depending on the embodiment the monitoring module may trigger the generation by the hash generator of a new hash value for the boot content that is the same content involved in the baseline hash for example the MBR of the boot record each new hash value constituting a hash snapshot signature. Each hash snapshot signature may be stored in the event log . Monitoring module is configured to send a message via the communication channel to analysis module to indicate completion of execution of the content sample .

In response to the generation of each hash snapshot signature or during a designated analysis phase after the generation of one or more hash snapshot signatures for the content sample the analysis module may compare the baseline hash signature with the one or more snapshot signatures. Any difference between the baseline signature and any of the snapshot signatures is considered an indicator of a bootkit being contained in the content sample . As a result the analysis module generates a message indicative of the presence of the bootkit which may also contain information regarding any other behavior detected by the monitoring module during execution of the content sample that constitutes an anomaly relative to normal behavior during execution and thus would be indicative of other malicious activity by the content sample . The message is sent to the event log which records the message contents as an event triggered by content sample . Event log records events that have been selectively monitored and detected by monitoring module . Content of the event log may be stored in a persistent storage as part of event log file s of VM disk file associated with VM . The recorded events may be analyzed by analysis module based on a set of rules or policies not shown to determine whether content sample is likely malicious e.g. high probability of malicious and or should be declared as malicious. In the event that the content sample is found to be malicious that is that it contains at least a bootkit if not also other malware depending on the detected anomalous activities the content sample may be stored in the malicious content files the VM disk file . In addition and alert generator may issue an alert so that a user or administrator may take appropriate steps in light of the malicious content being discovered.

Now an alternative embodiment of the invention will be described involving detecting bootkits for example on network endpoints. is a block diagram of a client server system configured as a host computer system e.g. a first computer system in accordance with one embodiment of the present invention. Host computer system sometimes called a client or user device typically includes a central processing unit CPU e.g. a processor an input output I O interface and a persistent storage . In one embodiment persistent storage includes an operating system a boot record and a bootkit detection logic or agent .

The I O interface of host computer system may be connected by cable or wireless connection to standard devices such as one or more input devices e.g. a keyboard a mouse output devices e.g. a display device a printer and as well as one or more standard input output I O devices e.g. touch screen a USB memory device compact disk CD or DVD drive storage devices and other peripheral devices and all of which may be operable via device drivers installed in the operating system .

The I O interface of host computer system is also coupled by the network to a server system of client server system . Network may be any network or network system including a proprietary network and the Internet or combinations thereof. Server system may includes a processor a persistent storage and a network interface . Due to that connection between the host computer system and the network the host computer system may be regarded as a network endpoint to which and from which network communications are sent.

Further host computer system is also coupled by network to a computer system such as an attacker computer system of client server system . The attacker computer system may have injected a bootkit into the host computer system . In one embodiment computer system is similar to host computer system and for example including a central processing unit an input output I O interface a persistent storage and one or more of the other devices described above or may be configured as a server computer system similar to server computer system . The various hardware components of computer system are not illustrated to avoid detracting from the principals of the invention. The particular type and configuration of host computer system computer system and server system are not essential to the present invention.

In one embodiment of the invention the bootkit detection agent is stored in memory of host computer system and executed on host computer system as a utility or computer application that runs over operating system as illustrated. In another embodiment the bootkit detection system may be implemented within the operating system for example as a bootkit detection module. Of course the operating system may incorporate only some of the aspects of the bootkit detection system such as one or more of an MBR reader hash generator hash comparator and or alert generator to name a few. Noteworthy these embodiments need not employ a virtual environment but rather test for bootkit activity during normal execution of the operating system utility or computer application within a computer system.

One embodiment of the invention takes advantage of software as a service SaaS principles of business in which a bootkit detection system may be a cloud based server providing services to one or more service subscribers. In this environment the computers under test are located at one or more clients that avail themselves of the services of the bootkit detection system located for example within the Internet or within a proprietary network. In some embodiments the services of the bootkit detection system may be provided by an IT service provider on behalf of a number of customers that subscribe to its services each of which having at least one computer either located on the customer s premised or coupled to the customer s trusted network and which is to be tested for bootkits. The cloud based bootkit detection system may use an agent installed on an endpoint as shown and described in except portions of the method may be performed in the cloud such as hash storage hash comparison and alert generation.

The controller may also have a communication network interface an input output I O interface and a user interface . The communication network interface may be coupled with a communication network via a communication medium . The communications network interface may communicate with other digital devices not shown via the communications medium . The communication interface may include a network tap . The bus may provide communications between the communications network interface the processor the memory system the storage system the I O interface and the user interface .

The I O interface may include any device that can receive input from or provide output to a user. The I O interface may include but is not limited to a flash drive a compact disc CD drive a digital versatile disc DVD drive or other type of I O peripheral not separately shown . The user interface may include but is not limited to a keyboard mouse touch screen keypad biosensor display monitor or other human machine interface not separately shown to allow a user to control the controller . The display monitor may include a screen on which is provided a command line interface or graphical user interface.

In various embodiments of the invention a number of different controllers for example each of a type as illustrated and described for controller may be used to implement various components of embodiments of the invention.

Network content is an example of content for malicious content detection purposes however other types of content can also be applied. Network content may include any data transmitted over a network i.e. network data . Network data may include text software images audio or other digital data. An example of network content includes web content or any network data that may be transmitted using a Hypertext Transfer Protocol HTTP HyperText Markup Language HTML protocol or be transmitted in a manner suitable for display on a Web browser software application. Another example of network content includes email messages which may be transmitted using an email protocol such as Simple Mail Transfer Protocol SMTP Post Office Protocol version 3 POP3 or Internet Message Access Protocol IMAP4 . A further example of network content includes Instant Messages which may be transmitted using an Instant Messaging protocol such as Session Initiation Protocol SIP or Extensible Messaging and Presence Protocol XMPP . In addition network content may include any network data that is transferred using other data transfer protocols such as File Transfer Protocol FTP .

The malicious network content detection system may monitor exchanges of network content e.g. Web content in real time rather than intercepting and holding the network content until such time as it can determine whether the network content includes malicious network content. The malicious network content detection system may be configured to inspect exchanges of network content over the communication network identify suspicious network content and analyze the suspicious network content using a virtual machine to detect malicious network content. The communication network may include a public computer network such as the Internet in which case a firewall may be interposed between the communication network and the client device . Alternatively the communication network may be a private computer network such as a wireless telecommunication network wide area network or local area network or a combination of networks. Though the communication network may include any type of network and be used to communicate different types of data communications of Web data will be discussed below for purposes of example.

The malicious network content detection system is shown as coupled with the network by a network tap e.g. a data packet capturing device . The network tap may include a digital network tap configured to monitor network data and provide a copy of the network data to the malicious network content detection system . Network data may comprise signals and data that are transmitted over the communication network . The network tap may copy any portion of the network data for example any number of data packets from the network data. In embodiments where the malicious content detection system is implemented as an dedicated appliance or a dedicated computer system the network tap may include an assembly integrated into the appliance or computer system that includes network ports network interface card and related logic not shown for connecting to the communication network to non disruptively tap traffic thereon and provide a copy of the traffic to the heuristic module . In other embodiments the network tap can be integrated into a firewall e.g. using SCAN ports router switch or other network device not shown or can be a standalone component such as an appropriate commercially available network tap. In virtual environments a virtual tap vTAP can be used to copy traffic from virtual networks. The network tap may also capture metadata from the network data. The metadata may be associated with the server device and or the client device . For example the metadata may identify the server device and or the client device . In some embodiments the server device transmits metadata which is captured by the tap . In other embodiments a heuristic module described herein may analyze data packets within the network data in order to generate the metadata. The term content as used herein may be construed to include the intercepted network data and or the metadata unless the context requires otherwise.

The malicious network content detection system may include a heuristic module a heuristics database a scheduler a virtual machine pool an analysis engine and a reporting module . The heuristic module receives the copy of the network data from the network tap and applies heuristics to the data to determine if the network data might contain suspicious network content. The heuristics applied by the heuristic module may be based on data and or rules stored in the heuristics database . The heuristic module may examine the image of the captured content without executing or opening the captured content. For example the heuristic module may examine the metadata or attributes of the captured content and or the code image e.g. a binary image of an executable to determine whether a certain portion of the captured content matches a predetermined pattern or signature that is associated with a particular type of malicious content. In one example the heuristic module flags network data as suspicious after applying a heuristic analysis. When a characteristic of the packet such as a sequence of characters or keyword is identified that meets the conditions of a heuristic a suspicious characteristic of the network content is identified. The identified characteristic may be stored for reference and analysis. In some embodiments the entire packet may be inspected e.g. using deep packet inspection techniques and multiple characteristics may be identified before proceeding to the next step. In some embodiments the characteristic may be determined as a result of an analysis across multiple packets comprising the network content. A score related to a probability that the suspicious characteristic identified indicates malicious network content is determined.

The heuristic module may also provide a priority level for the packet and or the features present in the packet. The scheduler may then load and configure a virtual machine from the virtual machine pool in an order related to the priority level and dispatch the virtual machine to the analysis engine to process the suspicious network content. The heuristic module may provide the packet containing the suspicious network content to the scheduler along with a list of the features present in the packet and the malicious probability scores associated with each of those features. Alternatively the heuristic module may provide a pointer to the packet containing the suspicious network content to the scheduler such that the scheduler may access the packet via a memory shared with the heuristic module .

The scheduler may identify the client device and retrieve a virtual machine from the virtual machine pool corresponding to the client device . A virtual machine may itself be executable software that is configured to mimic the performance of a device e.g. the client device . Furthermore the scheduler may identify for example a Web browser running on the client device and retrieve a virtual machine associated with the web browser. In some embodiments the heuristic module transmits the metadata identifying the client device to the scheduler . In other embodiments the scheduler receives one or more data packets of the network data from the heuristic module and analyzes the one or more data packets to identify the client device . In yet other embodiments the metadata may be received from the network tap .

The scheduler may retrieve and configure the virtual machine to mimic the pertinent performance characteristics of the client device . In one example the scheduler configures the characteristics of the virtual machine to mimic only those features of the client device that are affected by the network data copied by the network tap . The scheduler may determine the features of the client device that are affected by the network data by receiving and analyzing the network data from the network tap . Such features of the client device may include ports that are to receive the network data select device drivers that are to respond to the network data and any other devices coupled to or contained within the client device that can respond to the network data. In other embodiments the heuristic module may determine the features of the client device that are affected by the network data by receiving and analyzing the network data from the network tap . The heuristic module may then transmit the features of the client device to the scheduler .

The virtual machine pool may be configured to store one or more virtual machines. The virtual machine pool may include software and or a storage medium capable of storing software. In one example the virtual machine pool stores a single virtual machine that can be configured by the scheduler to mimic the performance of any client device on the communication network . The virtual machine pool may store any number of distinct virtual machines that can be configured to simulate the performance of a wide variety of client devices .

The scheduler may operate to test the network content as to whether it may contain a bootkit as well as other malware. To detect a bootkit the scheduler may cause the analysis engine to perform the steps of method of . Accordingly the analysis engine generates the baseline hash and awaits execution of the network content. The analysis engine simulates the receipt and or execution of the network content to analyze the effects of the network content upon the client device . The analysis engine may identify the effects of malware or malicious network content within the virtual environment as provided by the virtual machine. The analysis engine may be configured to monitor the virtual machine for indications that the suspicious network content is in fact malicious network content. In the case of a possible bootkit such indications may include changes in the boot content e.g. the MBR as indicated by any differences between the baseline hash and hash snapshots. In the case of other kinds of malware such indications may include unusual network transmissions unusual changes in performance and the like.

The analysis engine may flag the suspicious network content as malicious network content according to the observed behavior of the virtual machine. The analysis engine may also generate a signature based on the malicious network content for example applying a hashing algorithm to the content or a portion thereof or using another relevant identifier. Accordingly the analysis engine may generate a signature based on the malicious network content containing a bootkit. The reporting module may issue alerts indicating the presence of malware and using pointers and other reference information identify the packets of the network content containing the malware for example using the signatures. Additionally the server device may be added to a list of malicious network content providers and future network transmissions originating from the server device may be blocked from reaching their intended destinations e.g. by firewall .

A malware probability score may be generated for each sample of network content tested. The static detection or analysis performed by the heuristic module may generate a first score e.g. a static detection score according to a first scoring scheme or algorithm. The dynamic detection or analysis performed by the analysis engine may generate a second score e.g. a dynamic detection score according to a second scoring scheme or algorithm. The first and second scores may be combined according to a predetermined algorithm to derive a final score indicating the probability that a malicious content suspect is indeed malicious or should be declared or considered with high probability of malicious.

If a bootkit is discovered in the sample the malware content detection system may obtain additional information regarding the malware infestation by permitting the malware to execute within the virtual environment monitoring its attributes and effects. For example the malware content detection system may gather threat intelligence such as malicious domains for example Top Level Domains payloads etc.

The computer network system may also include a further communication network which couples the malicious content detection system MCDS with one or more other MCDS of which MCDS and MCDS are shown and a management system which may be implemented as a Web server having a Web interface. The communication network may in some embodiments be coupled for communication with or part of network . The management system is responsible for managing the MCDS and providing updates to their operation systems and software programs. Also the management system may cause malware signatures generated by any of the MCDS to be shared with one or more of the other MCDS for example on a subscription basis. Moreover the malicious content detection system as described in the foregoing embodiments may be incorporated into one or more of the MCDS or into all of them depending on the deployment. Also the management system itself or another dedicated computer station may incorporate the malicious content detection system in deployments where such detection is to be conducted at a centralized resource.

The management system may manage the detection systems and in a variety of ways. For example an administrator may activate or deactivate certain functionalities of malicious content detection systems and or alternatively to distribute software updates such as malicious content definition files e.g. malicious signatures or patterns or rules etc. Furthermore a user may submit via a Web interface suspicious content to be analyzed for example by dedicated data analysis systems . Moreover the detection systems and may share in carrying out operations with respect to an particular sample of network content. For example static detection using heuristics may be performed by detection system at a client site while dynamic detection using a virtual machine of the same content can be offloaded to the cloud for example and performed by any of the other detection systems . Moreover in the case of bootkit detection baseline hash and hash snapshot generation may be performed by any of the detection systems and hash comparison can be offloaded to the cloud for example and performed by any of the other detection systems .

Referring now to the bootkit detection system is configured for processing samples within an appropriate virtual environment. The bootkit detection system may be implemented by controller such as that shown in . The bootkit detection system may include an execution environment with at least one program instance or process and an operating system instance persistent storage and a monitoring logic . The execution environment may be real environment or a virtual environment. Where a virtual environment the program instance and operating system instance may together constitute a guest image. The operating system includes services logic for performing services on behalf of programs including program instance such as network services and initiating accesses to persistent storage . The persistent storage includes a bootable storage device such as for example a bootable disk. The bootable storage device may contain a boot record having boot content stored in boot locations. As mentioned above the boot content includes executable code and data required to load an operating system for example in this case operating system instance . Depending on the embodiment the monitoring logic may be internal to the execution environment which may be preferred where the execution environment is a virtual environment or external to the execution environment .

In operation the monitoring logic detects bootkit activity in various ways depending on the embodiment. Where the samples are themselves executable programs they may be run as program instance for example over the operating system instance . Where the samples are documents such as PDF documents that may contain embedded executable objects that may possibly contain bootkits they may be loaded using an appropriate program such as program instance . Where the samples require a particular computer application such as a Web browser the program instance may be that browser.

As used herein API calls is a general term intended to include system calls RPC API calls kernel level API calls and user level API calls and may be intercepted by any known hooking techniques. By hooking these API calls and extracting the nature of the commands contained therein and their targeted addresses within persistent storage the monitoring logic may be directly viewing bootkit activity.

If the monitoring logic intercepts API calls or other operations of a malicious nature the sample may be classified as containing a bootkit. If no such malicious activity is observed the sample may be classified as clean or requiring further analysis. In some embodiments the analysis module may perform the classification of the sample as clean or malicious. Thereafter the classification may be recorded in the event log and if malicious the alert generator may issue an appropriate alert so that further action may be taken with respect to the bootkit.

It should be understood that the operations performed by the above described illustrative embodiments are purely exemplary and imply no particular order unless explicitly required. Further the operations may be used in any sequence when appropriate and may be partially used. Embodiments may employ various computer implemented operations involving data stored in computer systems. These operations include physical manipulation of physical quantities. Usually though not necessarily these quantities take the form of electrical magnetic or optical signals capable of being stored transferred combined compared and otherwise manipulated.

Any of the operations described herein are useful machine operations. The present invention also relates to a device or an apparatus for performing these operations. The apparatus may be specially constructed for the required purpose or the apparatus may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations or multiple apparatus each performing a portion of the operations. Where apparatus or components of apparatus are described herein as being coupled or connected to other apparatus or other components the connection may be direct or indirect unless the context requires otherwise.

The present invention may be embodied as computer readable code on a computer readable medium. The computer readable medium is any data storage device that can store data which can be thereafter read by a computer system. Examples of the computer readable medium include hard drives flash drives read only memory random access memory CD ROMs CD Rs CD RWs magnetic tapes and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion. The computer readable medium can also be distributed using a switching fabric such as used in compute farms.

The terms logic module engine and unit are representative of hardware firmware or software that is configured to perform one or more functions. As hardware these components may include circuitry such as processing circuitry e.g. a microprocessor one or more processor cores a programmable gate array a microcontroller an application specific integrated circuit etc. receiver transmitter and or transceiver circuitry semiconductor memory combinatorial logic or other types of electronic components. When implemented in software the logic modules engines and units may be in the form of one or more software modules such as executable code in the form of an executable application an operating system an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a script a shared library dynamic load library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage. Software is operational when executed by processing circuitry. Execution may be in the form of direct execution emulation or interpretation.

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

It will be appreciated by those of ordinary skill in the art that modifications to and variations of the above described embodiments of a system and method of detecting bootkits may be made without departing from the inventive concepts disclosed herein. Accordingly the specification and drawings are to be regarded as illustrative rather than restrictive and the invention should not be viewed as limited except as by the scope and spirit of the appended claims. It will be recognized that the terms comprising including and having as used herein are specifically intended to be read as open ended terms of art.

