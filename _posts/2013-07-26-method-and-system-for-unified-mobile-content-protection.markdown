---

title: Method and system for unified mobile content protection
abstract: Media content is delivered to a variety of mobile devices in a protected manner based on client-server architecture with a symmetric (private-key) encryption scheme. A media preparation server (MPS) encrypts media content and publishes and stores it on a content delivery server (CDS), such as a server in a content distribution network (CDN). Client devices can freely obtain the media content from the CDS and can also freely distribute the media content further. They cannot, however, play the content without first obtaining a decryption key and license. Access to decryption keys is via a centralized rights manager, providing a desired level of DRM control.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09047446&OS=09047446&RS=09047446
owner: TELEFONAKTIEBOLAGET L M ERICSSON (PUBL)
number: 09047446
owner_city: Stockholm
owner_country: SE
publication_date: 20130726
---
The growing number of large form factor mobile devices such as the iPad has revolutionized mobile media consumption leading to revolutionary initiatives such as TV Everywhere TVE with a mandate to make premium content available on a wide range of devices with great diversity in capabilities. This type of distribution sometimes known as Over The Top OTT distribution has underscored the need for a new and more robust trust model that builds on a 2 part trust model of user authentication and device identification and can offer the same level of content protection that content owners have had in the closed Consumer Electronics ecosystems of the past. The added level of protection can enable publishers to fully realize the potential for content distribution through this new open ecosystem of devices.

Content protection is challenging in mobile devices for a number of reasons. Mobile devices do not uniformly support Digital Rights Management DRM standards. In particular most mobile devices do not currently support the most comprehensive form of content protection the Open Mobile Alliance OMA V2.0 DRM standard. Mobile devices also vary in their CPU performance and memory capacity. An additional complication is the need to support multiple modes of delivery required in the mobile environment such as live streaming watching short video segments rentals or media download for watching later.

Current media protection schemes depend on sending the license information in band with the media or using a pre distributed license key in the media viewing device. Examples are Playready WMDRM Widevine and Flash Access. However TVE requires that the rights are transferable across devices in a seamless manner.

The present invention relates in general to protecting media on mobile devices and more specifically to implementing a content protection system for media that may be streamed or watched offline on mobile devices. This system is particularly useful in the deployment of TVE services for protecting media on any Internet connected device in an Over The Top OTT manner where the digital rights to the media are delivered to the device over the network and made specific to the device and user.

Methods and apparatus are disclosed for protecting content delivered to a variety of mobile devices based on client server architecture with a symmetric private key encryption scheme. In one embodiment a media preparation server MPS encrypts all media content and publishes and stores it on a content delivery server CDS such as a server in a content distribution network CDN . Clients can freely obtain media content from the CDS and can also freely distribute it further. They cannot however play the content without first obtaining a decryption key. Access to decryption keys is via a centralized rights manager providing a desired level of DRM control.

In one embodiment the servers referred to as servers herein may be collocated in a single data center. In another embodiment the servers may be geographically distributed in multiple data centers. In another embodiment the servers may be physically in the same region but connected to the client through separate network paths e.g. through different network service providers . In one embodiment the servers are situated as part of a content delivery network CDN . In one embodiment the content from a content publisher is ingested via an ingestion engine and the ingested content is then segmented by a media preparation engine MEDIA PREP . The media preparation engine obtains a content encryption decryption key from a digital rights management DRM server and uses it to encrypt the content for storage and later delivery in encrypted form. An example of streaming of content is shown in published PCT application WO 2010 045109.

In part of the description below the combination of the ingestion engine media prep and a play manager are referred to as a content controller . Thus in one embodiment the system is constituted by a content controller along with a DRM server and a rights manager .

A media preparation profile in the media preparation server specifies an encryption type on a per media item basis. Candidate ciphers may include XOR RC4 HC 128 AES and along with the specification of encryption type is stored a corresponding key and a key length. Each media item has its own randomly generated key value. In the case of AES and XOR encryption this randomly generated key value is used as the actual key for encryption decryption whereas for RC4 and HC 128 it is the seed key to initialize a stream cipher. AES key length is typically 128 bits. XOR key length may be 1024 bytes and may be configurable. RC4 and HC 128 use 128 bit seed keys. The media preparation profile also specifies on a per media basis the length of the byte stream which should be generated this is the actual key used for media encryption and the length is the same as the block length described elsewhere herein . Each media item is transcoded in multiple formats for different target platforms and each of the resulting transcoded media files is immediately encrypted with the chosen cipher and key and the encrypted files are then pushed to the CDN . Additional details regarding encryption are provided below.

In order to use the system for downloading content the client device first authenticates with the rights manager and registers its device with the DRM server . During this process the client obtains a logical device id from the rights manager that is a token to represent a user of the client device and associates this token with the specific client device via a device fingerprint which is a unique identifier for the client device . The unique identification may be based on certain physical properties that may include an international mobile equipment identifier IMEI number media access control MAC address or certain file system properties. Each of the supported client devices provides an Application Programming Interface API via which the unique identifier of that device can be obtained. Some devices have an IMEI number some a mobile equipment identifier MEID number some an electronic serial number ESN . The iPhone has a unique device identifier UDID .

The client device has a built in domain key that is used to encrypt the exchange of the logical device ID with the rights manager . For enhanced security the domain key is divided into a number of separate components which are stored so as to be difficult to locate. For example each may be stored as an array with elements of the array represented as strings containing an integer and some special characters which are commonly found in binary files. When the arrays are examined it is difficult to detect where the components are located. At runtime all arrays are processed special characters are discarded and elements of these arrays are converted into characters and concatenated together to produce the actual domain key.

Device registration is carried out as follows. A DRM Agent running on the client generates an encrypted token containing a device id and a randomly generated long nonce. That information device id and the random long nonce is encrypted with the domain key and is sent to the DRM server . The DRM server decrypts this registration message using the same domain key and stores an association between this user device id and key nonce in a database. The DRM server generates a response containing a unique logical id assigned to this user. This response is encrypted with a session key constructed from domain key device id and the random key nonce provided by the DRM Agent and the encrypted response is sent to the client . Details regarding the construction of the session key are provided below.

Once the client receives the response it decrypts the response and stores registration information into an encrypted rights file on the client device . The rights file is encrypted with the key constructed from the combination of the domain key and the device id.

A shared or domain key is combined with the device id and the randomly generated key nonce shared key device id key nonce. The resulting string is fairly long so a hash or checksum is computed on it. In one embodiment a hex representation of the hash which may be 32 bytes long is chosen to be the key. In different embodiments the raw hash output which may be a 128 bit integer may be used. In one embodiment a Message Digest 5 MD5 hash may be used. Other embodiments might use a 64 bit RACE Integrity Primitives Evaluation Message Digest RIPEMD hash function instead of MD5.

In other embodiments it is possible to include other individualization parameters into these keys. Thus the client server session key as well as the key used to encrypt the rights file on the device could be enhanced further by adding unique user information user token and or application information such as the application name or identifier. That way keys will be application specific and user specific as well as device specific.

As previously mentioned any of various content encryption schemes may be employed. The following presents several specific examples along with corresponding details regarding how encryption decryption is carried out. In some embodiments the encryption can be applied to portions of the file such as key frames for video in order to reduce processing load.

In one embodiment the following simple and fast symmetric private key encryption scheme is used. Operation is illustrated in . The media preparation server performs an exclusive OR operation XOR between the contents of the media file and a secret private key K not shown . In one embodiment the key K is 1024 bytes long. The XOR operation starts at a random position P within the media file and continues until the end of the file. The random position P is preferably chosen to be close to the beginning of the file e.g. within the first 10 of the file. P can also be a predetermined fixed position for example the very beginning of the file location 0 .

The key K may be chosen in a variety of ways. For example it may be generated randomly. Alternatively it may be generated by first choosing another random position P not shown within the same file and selecting 1024 bytes from the media file starting at position P. If there are not 1024 bytes remaining between P and the end of the file then 1024 bytes are selected starting at position P 1024 1. As noted the key length may be other than 1024 bytes and may be configurable.

The media preparation server stores P and P in a database for each media file. In addition the media preparation server associates an expiration time with the encryption keys stores the expiration time in the database and re encrypts content with new keys upon key expiration.

RC4 drop n is a stream cipher algorithm generally known to those skilled in the art. It includes the dropping of the first 3072 bytes from each generated keystream. Also RC4 does not have a formal notion of an initialization vector IV . Instead a checksum is computed on a concatenated key and an arbitrarily chosen initialization value and the checksum is used as the key.

In one embodiment of stream cipher encoding the entire media file is divided into smaller blocks of a selected block size. With a stream cipher one can generate an infinitely long stream of bytes. Theoretically if a content item e.g. movie were to be played only from start to finish without rewinding or fast forwarding i.e. without scrubbing a stream cipher could be used on the streaming media without specialization. However since the user may scrub during playback decryption requires a modification to the stream cipher. The media is divided into fixed size blocks and a new stream of key bytes is generated for each block by using the same seed key and a different IV. The IV in this case can be just the sequential block number starting from 0. In one embodiment the blocks can have length 32 k but the block length can be different in other embodiments and may be configurable.

HC 128 is another well known stream cipher whose block size can be adapted as described above. Also in addition to block size both RC4 and HC 128 can take into account a segment number for live streaming and for video on demand VOD . The entire long form content is represented as many segments and each segment is then divided into multiple blocks from the encryption decryption point of view.

The same approach to block sizing may be taken for AES unless of course in some embodiments the decryption is done in hardware. It may be desirable to use the same form of AES encryption supported by iPhone and iPad which is AES bit with Cipher Block Chaining CBC mode . Each segment is encrypted individually and the same key is used across all segments but each segment has its own initialization vector which is the sequence number of the segment.

It is briefly described how a user obtains a rights object RO to use in downloading and streaming as well as playing content. The user registers with a content provider using in one embodiment OpenID technology and obtains a user token which uniquely identifies that user. Before the user can play a given media content file the user must obtain the decryption key. A DRM agent running on the client device contacts the rights manager and provides three items where device id is a unique identifier specific to that particular mobile device media id is a unique identifier specific to the particular media content the user wants to play and user token is the unique user identifier. Device id could be the unique address of the mobile device or it may be one of the types of device identifiers discussed above.

The rights manager receives the request for the RO from the client containing . The rights manager validates the user token using OpenID technology and also validates that media id is correct and has not expired. It then generates the requested RO which contains a key value K for media content decryption a remaining play count for that media and a media license expiration time. Even though communications between the client and rights manager is carried over a secure connection SSL the rights manager may optionally encrypt the RO so that encrypted RO can be safely stored on the client device .

The encryption of the RO is illustrated in . To encrypt the RO the rights manager uses the following symmetric encryption scheme. The RO is encrypted with 64 bit Blowfish key constructed from the checksum domain key device id key nonce . To compute K the rights manager applies an MD5 checksum function to the device id.

The ingestion flow consists of secure transfer of content from the content publisher via a secure transfer method such as scp sftp or ascp Aspera to the content controller back end server which in turn transcodes and encrypts the content using the chosen content cipher e.g. AES or HC 128 and publishes it into the CDN .

The interfaces and associated protocols are described next for each of the numbered reference points in .

1. Over this HTTP interface the client performs a one time device registration with the rights manager and DRM Server passing the device id key nonce and message nonce encrypted with the Blowfish algorithm using the domain key that is stored in an obfuscated manner in the application binary as described above. The registration information is passed through to the DRM Server via the interface described below. Depending on specific deployment requirements the client may may alternatively go to the DRM server first and the DRM server then communicates with the rights manager .

Also on the same interface every time the client needs to play a media it sends media rights requests to the rights manager also encrypted via Blowfish with a device specific key. The media rights request contains device id media id logical id a unique abstract user identifier provided by the DRM server when the device was registered message nonce and the current play count.

2. This HTTP interface is used as a pass through interface where the rights manager relays requests device registration and media location and rights requests received from the client and destined to the DRM server . These messages are encrypted as noted in 1. The rights manager maintains user information which the DRM server does not have access to and the rights manager maps individual users to logical ids maintained by the DRM server . The rights manager appends the logical id uniquely identifying the current user to all requests being forwarded to the DRM server . The only exception is the initial device registration because it does not have a logical id for that user at that point. The logical ids need not be encrypted when these servers are in a secure facility with restricted access as shown. In environments where these servers need to be remote a secure connection would be needed between them. The secure connection may take the form of a virtual private network VPN or a Secure Sockets Layer SSL connection.

3. This HTTP interface is used by the DRM server to request media information from the back end content controller . This interface is used to obtain information needed to play a media item. The request by itself does not have any commercial value and is therefore not encrypted nor sent over a secure channel.

4. This HTTP interface carries the response of the content controller to the DRM server request described under item 3 above. The response is an XML document containing media URL pointing to an encrypted media file located in the CDN and an encrypted message which contains information about the cipher and the key used to encrypt this media. The message is encrypted with the Blowfish algorithm and the domain key.

5. Via this HTTP interface the DRM server asks the rights manager for media rights for the current user. The request contains logical id media id and the play count reported by the client . This interface is used when the client is requesting media rights as described in 1. The information need not be encrypted when the DRM server and rights manager are in a secure facility . Alternatively a secure connection may be employed.

6. This HTTP interface carries the response of rights manager to the DRM server request described under item 5 above. The response is an XML document containing rights information for the requested media and the current user. This interface is used only when the client is requesting media rights. The response need not be encrypted when the DRM server and rights manager are in a secure facility . Alternatively a secure connection may be employed.

7. This HTTP interface sends the response of the DRM server to the rights manager . Two types of responses are sent over this interface the device registration response and the media location and rights in response to requests described under item 2 above.

The device registration response is an XML document that contains an encrypted message containing the logical id destined for the client and also the logical id and total device count for the current user in the clear. The rights manager uses the device count to check against the total count of authorized devices for the user. It removes the logical id and device count from the response before forwarding it to the client on interface . The client completes the registration on its end when it can receive the encrypted message and successfully decrypt and verify the nonce and checksum in the message.

The media rights and location response is an XML document that contains the media URL pointing to an encrypted media file located in a CDN and an encrypted message destined for the client which contains information about the cipher and the key needed to decrypt this media and media rights information for the current user. This response is forwarded to the client .

In both types of responses the message is encrypted with a key produced from the domain key device id and the key nonce.

8. This is a pass through interface where the rights manager simply forwards the responses it received from the DRM server to the client in response to the client s requests described under item 1 above. The contents of these responses are described fully in 7.

Clock rollback is a technique employed to illegally extend time based licenses. A user manipulates the clock on a playback device so that the time based license expiration is reached later than it should or not at all . To detect clock roll back time is sampled on the client device when the application is registered and every time it starts up and the time is stored into the encrypted file. When a player is instantiated to play a media item a separate thread is also started to monitor the progression of time during playback. The thread sleeps for a short time period wakes up and increments an elapsed time counter. That elapsed time is added to the last known local time. Thus the application always has information about what the time should be to an approximation . This technique can be augmented to include time information from a server .

The rights file also referred to as rights object herein is stored on the client device and contains the device specific key and the content keys encrypted with the device specific key. The rights file itself is encrypted with the key constructed from the domain key and the unique identifier of the device. The contents of the file are checksummed and the checksum itself is stored within the file. When the file is decrypted the contents are checksummed again and the computed checksum is compared with the checksum stored in the file to verify that the file has not been tempered with. The rights file also has a copy protection feature in a sense that an outdated copy of the file cannot be written over the fresh copy without being detected by the DRM Agent. The copy protection is platform dependent. On the iPhone iPad platforms DRM Agent obtains a unique property of the file and stores it within the encrypted file. The unique file value is not something that can be controlled at will it is a property that is assigned by the operating system. Those skilled in the art may choose this file property such that copying the file would force a change in the unique value. On Android the rights file is stored within the application specific directory which is protected from other applications and from user access via standard Linux permissions. Furthermore DRM Agent generates a random long number and stores it within the encrypted file as well as within the application specific directory on the device. The two numbers are compared when mobile application starts. On the Blackberry platform a similar randomly generated long number is stored inside the encrypted file as well as within the application specific persistent secure storage offered by the Blackberry platform.

In the description herein for embodiments of the present invention numerous specific details are provided such as examples of components and or methods to provide a thorough understanding of embodiments of the present invention. One skilled in the relevant art will recognize however that an embodiment of the invention can be practiced without one or more of the specific details or with other apparatus systems assemblies methods components materials parts and or the like. In other instances well known structures materials or operations are not specifically shown or described in detail to avoid obscuring aspects of embodiments of the present invention.

Although the above description includes numerous specifics in the interest of a fully enabling teaching it will be appreciated that the present invention can be realized in a variety of other manners and encompasses all implementations falling within the scope of the claims herein.

