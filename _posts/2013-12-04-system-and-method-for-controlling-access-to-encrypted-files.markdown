---

title: System and method for controlling access to encrypted files
abstract: Disclosed are systems, methods and computer program products for controlling access to encrypted files. In one aspect, the system detects a request from an application to access an encrypted file. The system identifies the application that requested access to the encrypted file and one or more file access policies associated with the application. The file access policy specifies at least a file access method associated with the application. The system then controls access to the file based on the identified one or more file access policies.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09460305&OS=09460305&RS=09460305
owner: AO Kaspersky Lab
number: 09460305
owner_city: Moscow
owner_country: RU
publication_date: 20131204
---
This application claims benefit of priority under 35 U.S.C. 119 a d to a Russian Application No. 2013136975 filed on Aug. 7 2013 which is incorporated by reference herein.

The present disclosure generally relates to the field of computer and network security and more specifically to systems and methods for controlling access to encrypted files.

In modern society the demand for information security of corporate networks and its users is constantly growing. Data theft and leaks from corporate networks have increased in frequency and the financial losses cause substantial harm to businesses. Due to vulnerabilities in software and human factors data transmitted on a corporate network can be intercepted by malware and hackers. Therefore the encrypting of data on workstations notebook computers mobile devices and removable storage media used in corporate networks becomes necessary.

The classic system for encryption of files and directory contents on computers operates in accordance with file access policies that determine which groups of files must be encrypted and which files may not. In such a system the most vulnerable and critical files such as files containing confidential information whose loss is undesirable to its owner are typically encrypted on disk and if an application tries to gain access to such files the system either provides them to the authorized application in decrypted form or blocks access to them.

However when an authorized application opens an encrypted file it can transfer the file outside the corporate network which may cause data leaks. Therefore there is a need for improved technique for controlling access to encrypted files on corporate networks.

Disclosed are systems methods and computer program products for controlling access to encrypted files. In one example aspect the system detects a request from an application to access an encrypted file. The system identifies the application that requested access to the encrypted file and one or more file access policies associated with the application. The file access policy specifies at least a file access method associated with the application. The system then controls access to the file based on the identified one or more file access policies.

In one aspect in controlling access to the encrypted file the system may provide access to the encrypted file decrypt and provide access to the decrypted file or block access to the encrypted file.

In another aspect a file access policy further specifies whether the file to be deleted after a certain number of blocked attempts to access the file and whether to send information about the blocked attempts to access the file to a security service.

In another aspect a file access policy further specifies whether to check for presence of a network connection and to determine an appropriate file access method based on presence or absence of an existing network connection.

In another aspect a file access policy further specifies whether to allow access to encrypted or decrypted file based on a type of a user account of a user of the application that requested access to the encrypted file.

In another aspect the system requests a user of the application to provide a password for accessing the encrypted file.

In another aspect the system may identify the application by a name of its executable file a hash sum of the executable file a digital signature of the executable file a metadata of the executable file or information contained in resources of the executable file.

In another aspect one or more file access policies associated with the application may have different priorities that determine order in which said policies applied.

In another aspect a file access policy associated with a parent application that requested access to the encrypted file may also apply to a child application that received access to the encrypted file from the parent application.

The above simplified summary of example embodiment s serves to provide a basic understanding of the invention. This summary is not an extensive overview of all contemplated aspects of the invention and is intended to neither identify key or critical elements of all embodiments nor delineate the scope of any or all embodiments. Its sole purpose is to present one or more embodiments in a simplified form as a prelude to the more detailed description of the invention that follows. To the accomplishment of the foregoing the one or more embodiments comprise the features described and particularly pointed out in the claims.

Example embodiments of the present invention are described herein in the event context of systems methods and computer program products for controlling access to encrypted files. Those of ordinary skill in the art will realize that the following description is illustrative only and is not intended to be in any way limiting. Other embodiments will readily suggest themselves to those skilled in the art having the benefit of this disclosure. Reference will now be made in detail to implementations of the example embodiments as illustrated in the accompanying drawings. The same reference indicators will be used to the extent possible throughout the drawings and the following description to refer to the same or like items.

In one exemplary aspect the computer also includes a file access policy database that contains access policies for encrypted and unencrypted files for different applications . The database may be any known database such as a relational or hierarchical database and it can reside on an external storage device such as a hard disk a solid state drive etc. on a network storage or in the random access memory of computer .

The computer also includes an encryption engine which is connected to the database . In one aspect the engine is configured to intercept requests of applications to access files and control access of the application to files depending on the policies for granting of file access rights. The encryption engine may intercept requests of applications to access e.g. open read write etc. files using any of the following techniques by means of a driver controlling the opening of files such as a file system filter driver by means of intercepting calls of operating system APIs application programming interfaces by using the APIs provided by the applications or using other known methods.

In one exemplary aspect the system may additionally include an administrative server connected to the encryption engine and the file access policy database . The administrative server is used to define or change the file access policies. In a particular aspect the administrative server may send the file access policies to the encryption engine which in turn keeps them in the file access policy database . In another aspect the administrative server may store the file access policies in the file access policy database without the involvement of the encryption engine for example by the network using a supplemental software program or with publication of the policies on a policy register that is universally accessible over the local network such as the Active Directory .

In one exemplary aspect file access policies may contain rules that specify file access rights to files for applications . For example the rules may specify whether to provide a file in encrypted form ciphertext to provide a file in decrypted form plaintext or block access to the file to the application . In another aspect the file access policies may additionally contain the following rules delete the file after a certain number of blocked attempts to access the file e.g. after ten attempts and send information about the request to grant access to the file to the administrative server . In yet another aspect a password may be asked of the user before the file is provided to the application in decrypted form. In yet another aspect the file access policies may specify user account access privileges. For example for a user account with administrator rights the file access policies may contain a rule that a certain application e.g. Skype application should be provided with files in decrypted form. For other user accounts the file access policies may contain a rule that the same application should be provided with files in encrypted form. In this example only users with administrator rights can send files on the network in decrypted form. At the same time other users can send files only in encrypted form thus reducing the risk of data leaks.

In yet another exemplary aspect the file access policies may check whether computer is connected to a network. In this case when the computer is not connected to the network certain files e.g. Skype files may be provided to application running on computer in plaintext. When a connection to the network is present the same files may be provided to the computer in ciphertext thereby preventing potential data leaks.

In another example for applications combining file management with file viewing such as the FAR Manager application the file access policies may also depend on a user account. Thus for example encrypted files may be provided to the computer administrator for viewing in decrypted form while for ordinary users they are provided in the form of ciphertext. However other functions of such an application can be the same for all users so that both the computer administrator and other users can have the ability to manage computer files .

In yet another exemplary aspect the file access policies may depend on additional parameters such as for example the type extension size or category of file such as for work or personal use the presence of certain keywords or byte sequences in the file and other parameters. In this example even an initially unencrypted file may be provided to an application in encrypted form if the file contains a certain set of the aforementioned parameters. For example if the file contains company s financial records it may be encrypted in the computer s random access memory and provided to the application in ciphertext. The parameters can be kept in the file attributes or in a separate file on the computer . The definition of the parameters in different aspects can be done by the encryption engine either when creating the file or when an application requests access to the file.

Next in step the encryption engine may use the file access policy database to determine the application and the file access policy corresponding to this application. In the next step the encryption engine provides the application with access rights to the requested file in accordance with the file access policy associated with the application . As noted above in one exemplary aspect the file access policies may contain rules whereby the application can be provided with the file in encrypted form ciphertext the file in decrypted form plaintext or the access to the file will be blocked for the application.

In one exemplary aspect the encryption engine may additionally monitor third party applications e.g. child processes or threads started by the original application . In this example the file access policies may be inherited by the third party applications. For example when downloading a document in PDF format in Internet Explorer the browser will open an application to view PDF documents such as Adobe Reader . Thus if the file access policy database contains a rule that certain files are provided to Internet Explorer in decrypted form this rule may also be applied to the Adobe Reader application.

In one exemplary aspect applications can be divided into categories as described in greater detail in a commonly owned U.S. Pat. No. 7 640 589 which is incorporated by reference herein. Such categories may include for example trusted applications untrusted applications and unknown applications. In yet another exemplary aspect the file access policies may be extended to categories of applications rather than individual applications.

In one exemplary aspect when several file access policies apply to the same application the file access policy may specify different priorities to the different applications so that the encryption engine can use the policy with the highest priority. Table 1 shows example application priorities and Table 2 shows file access rules associated with different priories.

According to the first rule of Table 1 the Adobe Reader application has priority 1 and according to the corresponding rule from Table 2 this application will be provided with a plaintext file. At the same time if the file was initially encrypted the encryption engine will decrypt it before providing it to the Adobe Reader application. According to the second rule of Table 1 the Internet Explorer application has priority 3 which in turn corresponds to rule 3 of Table 2. According to the identified rule access of the application to the file will be prohibited. For example Adobe Reader application was started by the Internet Explorer. Then in order to determine which rule from Table 1 should be used to provide files to the Adobe Reader the priority of the rules will be used. Thus Table 3 shows example rules for selecting the file access policy among several permissible policies having different priorities.

In the above described example a file in PDF format opens the application Internet Explorer which in turn calls up the Adobe Reader. As a result the Adobe Reader opens the file. In this case Adobe Reader may inherit the policy from Internet Explorer according to which access of the application to the file will be prohibited. At the same time a policy has already been determined for the Adobe Reader in the file access policy database according to which the encryption engine will provide plaintext to the application. For this reason it becomes necessary to select the policy with highest priority. In one sample aspect the priority selection rule may depend on various conditions such as the time of day the use of additional authentication means such as a token the rights of the user account the security policies and so on . In a particular aspect the administrator of the administrative server or the administrator of the computer can assign alter or remove the priority selection rule as well as the file access policy. According to Table 3 in the above considered example when condition 1 is fulfilled the inherited policy will have priority 1 which coincides with the priority of the rule for Adobe Reader that is contained in the file access policy database . As a result the Adobe Reader will be provided with plaintext in keeping with the inherited policy 1 from Table 2. But if condition 2 is fulfilled the inherited policy will have the priority of Internet Explorer equal to 3. Therefore the access to the file will be prohibited to the Adobe Reader.

The described system and method of providing applications with access rights to computer files can be used to solve various problems relating to protection of critical data. For example for applications performing a backup copying of data a file access policy can be specified according to which files will be provided to applications in the form of ciphertext. As a result critical files may be saved in a backup storage in encrypted form thus increasing the level of security. Similar file access policies may also be specified for applications performing a synchronization of data on the local area network or via the internet so called cloud services . Another example for the use of the present system is the secure sending of messages by means of email clients and IM instant messaging applications. If a policy is specified for such an application according to which files will be provided to the application in encrypted form this may help improve the security of the transmitted data even when an email client or the user account of the IM client user have been broken into by a hacker. In such a situation the hacker will not be able to decrypt the files without knowing decryption keys. Yet another example is the policies that are imposed on portable devices. Thus for example a work notebook may contain work files in encrypted form and home files such as photo video and audio files in decrypted form. Thus when the notebook is within the company network access to the work files can be transparent that is from the standpoint of the user working with the encrypted files will be the same as working with the non encrypted files . But when the user is working on the notebook at home access to the work files may be prohibited to the majority of applications and files may be provided only to some applications in the form of ciphertext.

System memory may include a read only memory ROM and random access memory RAM . Memory may be implemented as in DRAM dynamic RAM EPROM EEPROM Flash or other type of memory architecture. ROM stores a basic input output system BIOS containing the basic routines that help to transfer information between the components of computer system such as during start up. RAM stores operating system OS such as Windows XP Professional or other type of operating system that is responsible for management and coordination of processes and allocation and sharing of hardware resources in computer system . Memory also stores applications and programs . Memory also stores various runtime data used by programs .

Computer system may further include hard disk drive s such as SATA HDD and optical disk drive s for reading from or writing to a removable optical disk such as a CD ROM DVD ROM or other optical media. Drives and and their associated computer readable media provide non volatile storage of computer readable instructions data structures applications and program modules subroutines that implement algorithms and methods disclosed herein. Although the exemplary computer system employs magnetic and optical disks it should be appreciated by those skilled in the art that other types of computer readable media that can store data accessible by a computer system such as magnetic cassettes flash memory cards digital video disks RAMs ROMs EPROMs and other types of memory may also be used in alternative aspects of the computer system .

Computer system further includes a plurality of serial ports such as Universal Serial Bus USB for connecting data input device s such as keyboard mouse touch pad and other. Serial ports may be also be used to connect data output device s such as printer scanner and other as well as other peripheral device s such as external data storage devices and the like. System may also include graphics card such as nVidia GeForce GT 240M or other video card for interfacing with a monitor or other video reproduction device. System may also include an audio card for reproducing sound via internal or external speakers . In addition system may include network card s such as Ethernet WiFi GSM Bluetooth or other wired wireless or cellular network interface for connecting computer system to network such as the internet.

In various aspects the systems and methods described herein may be implemented in hardware software firmware or any combination thereof. If implemented in software the methods may be stored as one or more instructions or code on a non transitory computer readable medium. Computer readable medium includes data storage. By way of example and not limitation such computer readable medium can comprise RAM ROM EEPROM CD ROM Flash memory or other types of electric magnetic or optical storage medium or any other medium that can be used to carry or store desired program code in the form of instructions or data structures and that can be accessed by a processor of a general purpose computer.

In various aspects the systems and methods described in the present disclosure in terms of engine. The term engine as used herein means a real world device component or arrangement of components implemented using hardware such as by an application specific integrated circuit ASIC or field programmable gate array FPGA for example or as a combination of hardware and software such as by a microprocessor system and a set of instructions to implement the module s functionality which while being executed transform the microprocessor system into a special purpose device. An engine can also be implemented as a combination of the two with certain functions facilitated by hardware alone and other functions facilitated by a combination of hardware and software. In certain implementations at least a portion and in some cases all of an engine can be executed on the processor of a general purpose computer such as the one described in greater detail in above . Accordingly the engine can be realized in a variety of suitable configurations and should not be limited to any particular implementation exemplified herein.

In the interest of clarity not all of the routine features of the aspects are disclosed herein. It will be appreciated that in the development of any actual implementation of the invention numerous implementation specific decisions must be made in order to achieve the developer s specific goals and that these specific goals will vary for different implementations and different developers. It will be appreciated that such a development effort might be complex and time consuming but would nevertheless be a routine undertaking of engineering for those of ordinary skill in the art having the benefit of this disclosure.

Furthermore it is to be understood that the phraseology or terminology used herein is for the purpose of description and not of restriction such that the terminology or phraseology of the present specification is to be interpreted by the skilled in the art in light of the teachings and guidance presented herein in combination with the knowledge of the skilled in the relevant art s . Moreover it is not intended for any term in the specification or claims to be ascribed an uncommon or special meaning unless explicitly set forth as such.

The various aspects disclosed herein encompass present and future known equivalents to the known components referred to herein by way of illustration. Moreover while aspects and applications have been shown and described it would be apparent to those skilled in the art having the benefit of this disclosure that many more modifications than mentioned above are possible without departing from the inventive concepts disclosed herein.

