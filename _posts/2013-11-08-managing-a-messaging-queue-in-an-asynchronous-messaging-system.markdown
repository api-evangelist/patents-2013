---

title: Managing a messaging queue in an asynchronous messaging system
abstract: A computer implemented method, system and/or computer program product is provided for managing a messaging queue in an asynchronous messaging system. A duration for which a message can remain on the messaging queue is determined. An age of the message on the messaging queue is monitored. The age of the message on the messaging queue and the determined duration is compared and a notification is generated based on the comparison.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09450906&OS=09450906&RS=09450906
owner: International Business Machines Corporation
number: 09450906
owner_city: Armonk
owner_country: US
publication_date: 20131108
---
The present invention relates to in general to message oriented middleware MOM and more particularly to managing messaging queues in asynchronous messaging system.

In recent years the ability of application programs to communicate with each other or with system provided services in a computer system or network without having to become involved in the complexities of particular operating systems or communication protocols has been much enhanced by the development of Message Oriented Middleware MOM . This is a software providing a common programming interface by means of which applications can communicate with other applications without specific knowledge of the different operating systems and or protocols which may be used by those applications.

One example of Message Oriented Middleware is the IBM WebSphere MQ product family IBM and WebSphere are trademarks of International Business Machines Corporation . WebSphere MQ and other MOM products employ message queuing which allows programs to send and receive application specific data or messages to each other. Without having a private dedicated logical connection established between them. Instead messages containing the application specific data are placed on messaging queues by a queue manager local to the application. These queues may be accessed directly by applications on the same system using the same queue manager or their contents may be transmitted over a network or multi node system and placed on respective associated queues accessible to a receiving application via its respective local queue manager. In order to transmit messages to remote applications the originating queue manager must establish a communication channel to the remote queue manager. Both transmission and accessing of queued messages take place asynchronously. Applications communicate with their associated queue managers via a standard application programming interface API known as the Message Queuing Interface MQI in the case of WebSphere MQ. Specific API commands cause the queue manager to store PUT messages on named destination queues either directly if local or by transmitting them to the appropriate queue manager at a node elsewhere in the system and also to retrieve GET stored messages from such queues.

Messages placed on a queue may build up if they are not consumed quickly enough or they may remain on a queue if no application runs to consume them. Both of these cases may be symptomatic of a problem in the message queuing environment. There is a need to address this.

A computer implemented method system and or computer program product is provided for managing a messaging queue in an asynchronous messaging system. A duration for which a message can remain on the messaging queue is determined. An age of the message on the messaging queue is monitored. The age of the message on the messaging queue and the determined duration is compared and a notification is generated based on the comparison.

As will be appreciated by one skilled in the art embodiments of the present invention may be embodied as a system method or computer program product. Accordingly embodiments of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware embodiments that may all generally be referred to herein as a circuit module or system. Furthermore embodiments of the present invention may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for embodiments of the present invention may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Embodiments of the present invention are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

A number of program modules may be stored on the HDD including an operating system one or more application programs other program modules program data and a database system . The operating system the one or more application programs the other program modules and program data may be loaded onto the system memory and specifically onto the RAM during the functioning of the computing device . A user may provide commands and information through input devices such as a keyboard and receive output through peripheral output devices such as monitor speaker printer etc. not shown . These input and output devices are often connected to the processing unit through an I O adapter coupled to the system bus .

In a networked environment the computing device may be connected to a remote computing device through a network interface card . It will be appreciated that the network connections shown are exemplary and any conventional means of establishing communications links between the computers such as a local area network wide area network or wireless connection may be used. In a networked environment program modules depicted relative to the computing device or its components may be stored in a remote memory . The remote computing device may be a personal computer a router a server a network PC a peer device or other common network device.

Those of the ordinary skill in the art will appreciate that the hardware in is a basic computing system and may vary. The architecture of the aforementioned computing device is not limiting and is only depicted as an example on which an embodiment of the present invention may be implemented. Other types of computing system such as a smart phone or a web kiosk are well within the intended scope on which an embodiment of the present invention may be implemented.

The first and second peripheral devices and respectively are coupled to each other and to a server computer via a communication network . The communication network may be any type of known network including but not limited to a wide area network WAN a public switched telephone network PSTN a local area network LAN a global network e.g. Internet a virtual private network VPN and an intranet. The communications network may be implemented using a wireless network or any kind of physical network implementation known in the art. Peripheral devices and and may be coupled to the server computer through multiple networks e.g. intranet and Internet so that not all user systems are coupled to the host systems through the same network. One or more user systems and the server computer may be connected to the communication network in a wireless fashion.

The server computer depicted in may be implemented using one or more servers operating in response to a computer program stored in a storage medium accessible by the server computer . The server computer may operate as a network server e.g. a web server to communicate with the peripheral devices and . The server computer handles sending and receiving information to and from the peripheral devices and and can perform associated tasks. The server computer may also include firewalls to prevent unauthorized access and enforce any limitations on authorized access. For instance an administrator may have access to the entire system and have authority to modify portions of the system. A firewall may be implemented using conventional hardware and or software as is known in the art.

The server computer manages a messaging queue . The messaging queue is a software entity embodied in the server computer by means of computer program codes known to a person skilled in the art configured to perform below operations. The messaging queue stores messages inbound from the messaging applications of the peripheral devices and until they are delivered to their destination. For example the first peripheral device may generate a message for delivery to the second peripheral device . The message may be received via the communication network by the server computer and stored in the messaging queue until it may be delivered to the second peripheral device .

The messaging queue may be of predetermined length. That is the messaging queue may be able store messages until the length is met. After this point old messages may be rejected. As discussed above to be able to handle burst traffic the length of the messaging queue must be relatively long and when the queue is full a significant amount of memory may be consumed by the messages. This may lead to the attendant problems described above. The server computer may also include multiple messaging queues.

According to an embodiment the server computer determines a duration for which each message received by it for transmitting it to their destinations can remain on the messaging queue. Determination of the duration for which each message can remain on the messaging queue may be achieved by incorporating specific computer program codes within the server computer known to a person skilled in the art. Typically this determination may be performed before putting the incoming messages from the peripheral devices and onto the messaging queue .

Typically a sender sending the message through a messaging application or from which the message is originating explicitly assigns a duration for which each message can remain on the messaging queue . If not according to an embodiment the server computer assigns and subsequently determines the duration for which each message can remain on the messaging queue.

It shall be noted here that determining the duration for which the message can remain on the messaging queue is intended to mean that the server computer identifies or makes itself aware of the duration for which the message can remain on the messaging queue which is assigned by either the messaging application or or the server computer itself.

The determined duration for which each message can remain on the messaging queue may be stored by the server computer within the message or separately.

After a newly received message whose duration for which it can remain on the messaging queue has been determined and is put onto the messaging queue the server computer at regular pre determined intervals monitors an age of each message on the messaging queue . According to an embodiment the server computer may initiate a clock counter as soon as the message is put onto the messaging queue and at regular interval read the clock counter. This may be achieved by executing computer program codes known to a person skilled in the art.

The age of each message on the messaging queue is compared with the duration for which each message can remain on the messaging queue . If the age of a message on the messaging queue exceeds the duration for which it can remain on the messaging queue as determined by the server computer a notification or alert is generated and sent to the system administrator of the server computer of the asynchronous messaging system to enable him to take appropriate action or to a monitoring application for monitoring the messaging queue .

The server computer manages a messaging queue. The messaging queue stores messages inbound from the messaging applications of the peripheral devices until they are delivered to their destination. For example the first peripheral device may generate a message for delivery to the second peripheral device. The message may be received via the communications network by the server computer and stored in the messaging queue until it is delivered to the second peripheral device. The messaging queue may be of predetermined length. That is the messaging queue may be able store messages until the length is met. After this point old messages may be rejected. As discussed above to be able to handle burst traffic the length of the messaging queue must be relatively long and when the queue is full a significant amount of memory may be consumed by the messages. This may lead to the attendant problems described above. The system may also include multiple messaging queues.

At step the server computer determines a duration for which the received message can remain on the messaging queue. Determination of the duration for which the message can remain on the messaging queue may be achieved by incorporating specific computer program codes within the server computer known to a person skilled in the art. Typically this determination may be performed before putting the incoming message onto the messaging queue. Typically a sender sending the message through a messaging application from which the message is originating explicitly assigns a duration for which each message can remain on the messaging queue. If not the server computer assigns and subsequently determines the duration for which each message can remain on the messaging queue.

It shall be noted here that determining the duration fir which the message can remain on the messaging queue is intended to mean that the server computer identifies or makes itself aware of the duration for which the message can remain on the messaging queue which is assigned by either the messaging application or the server computer itself.

The determined duration of time for which each message in the messaging queue may be stored by the server computer within the message or separately.

At step the message whose duration for which it can remain on the messaging queue is determined is put onto the messaging queue. At step the server computer at regular pre determined intervals monitors an age of the message on the queue. According to an embodiment the server computer may initiate a clock counter as soon as the message is put onto the messaging queue and at regular interval read the clock counter. This may be achieved by executing computer program codes known to a person skilled in the art.

At step the age of a message on the messaging queue is compared with the determined duration for which it can remain on the messaging queue and determine if the age of the message on the queue is greater or equal to the determined duration for which the message can remain on the messaging queue. At step NO branch of step if the age of a message is less than the determined duration for which each message can remain on the messaging queue no action is taken. At step YES branch of step if the age of a message is more than or equal to the determined duration for which the message can remain on the messaging queue a notification is generated which may be delivered to a system administrator of the server computer to enable him to take relevant actions or is delivered to a monitoring application of the messaging queue.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

