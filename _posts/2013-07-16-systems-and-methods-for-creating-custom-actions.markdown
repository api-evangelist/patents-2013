---

title: Systems and methods for creating custom actions
abstract: Disclosed are methods, apparatus, systems, and computer readable storage media for interacting with one or more data objects in an online social network. A user interface includes a publisher with a custom action. The custom action is defined in accordance with custom action instructions provided by a first entity via an application programming interface (API). Such custom action instructions may declaratively or programmatically define the data object, the interaction to be performed with the data object, and other attributes associated with the custom action. A user may request to interact with the data object via selection of the custom action by a second entity. Information may be submitted through the publisher to interact with the data object to update a database system associated with the data object. A feed item may be presented for inclusion in the information feed based on the update.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09529488&OS=09529488&RS=09529488
owner: salesforce.com, inc.
number: 09529488
owner_city: San Francisco
owner_country: US
publication_date: 20130716
---
This patent document claims priority to commonly assigned U.S. Provisional Patent Application No. 61 852 089 titled Multi Dimensional Publisher by Beechuk et al. filed on Mar. 15 2013 which is hereby incorporated by reference in its entirety and for all purposes.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever

This patent document relates generally to providing on demand services in an online social network using a database system and more specifically to techniques for interacting with records and applications from a publisher in an online social network.

 Cloud computing services provide shared resources software and information to computers and other devices upon request. In cloud computing environments software can be accessible over the Internet rather than installed locally on in house computer systems. Cloud computing typically involves over the Internet provision of dynamically scalable and often virtualized resources. Technological details can be abstracted from the users who no longer have need for expertise in or control over the technology infrastructure in the cloud that supports them.

Database resources can be provided in a cloud computing context. However using conventional database management techniques it is difficult to know about the activity of other users of a database system in the cloud or other network. For example the actions of a particular user such as a salesperson on a database resource may be important to the user s boss. The user can create a report about what the user has done and send it to the boss but such reports may be inefficient not timely and incomplete. Also it may be difficult to identify other users who might benefit from the information in the report.

Examples of systems apparatus and methods according to the disclosed implementations are described in this section. These examples are being provided solely to add context and aid in the understanding of the disclosed implementations. It will thus be apparent to one skilled in the art that implementations may be practiced without some or all of these specific details. In other instances certain process method operations also referred to herein as blocks have not been described in detail in order to avoid unnecessarily obscuring implementations. Other applications are possible such that the following examples should not be taken as definitive or limiting either in scope or setting.

In the following detailed description references are made to the accompanying drawings which form a part of the description and in which are shown by way of illustration specific implementations. Although these implementations are described in sufficient detail to enable one skilled in the art to practice the disclosed implementations it is understood that these examples are not limiting such that other implementations may be used and changes may be made without departing from their spirit and scope. For example the blocks of methods shown and described herein are not necessarily performed in the order indicated. It should also be understood that the methods may include more or fewer blocks than are indicated. In some implementations blocks described herein as separate blocks may be combined. Conversely what may be described herein as a single block may be implemented in multiple blocks.

Various implementations described or referenced herein are directed to different methods apparatus systems and computer readable storage media for interacting with one or more records in a single user interface in an online social network also referred to herein as a social networking system. One example of an online social network is Chatter provided by salesforce.com inc. of San Francisco Calif. Online social networks are increasingly becoming a common way to facilitate communication among people and groups of people any of whom can be recognized as users of a social networking system. Some online social networks can be implemented in various settings including organizations e.g. enterprises such as companies or business partnerships academic institutions or groups within such an organization. For instance Chatter can be used by employee users in a division of a business organization to share data communicate and collaborate with each other for various purposes.

In some online social networks users can access one or more information feeds which include information updates presented as items or entries in the feed. Such a feed item can include a single information update or a collection of individual information updates. A feed item can include various types of data including character based data audio data image data and or video data. An information feed can be displayed in a graphical user interface GUI on a display device such as the display of a computing device as described below. The information updates can include various social network data from various sources and can be stored in an on demand database service environment. In some implementations the disclosed methods apparatus systems and computer readable storage media may be configured or designed for use in a multi tenant database environment.

In some implementations an online social network may allow a user to follow data objects in the form of records such as cases accounts or opportunities in addition to following individual users and groups of users. The following of a record stored in a database as described in greater detail below allows a user to track the progress of that record. Updates to the record also referred to herein as changes to the record are one type of information update that can occur and be noted on an information feed such as a record feed or a news feed of a user subscribed to the record. Examples of record updates include field changes in the record updates to the status of a record as well as the creation of the record itself. Some records are publicly accessible such that any user can follow the record while other records are private for which appropriate security clearance permissions are a prerequisite to a user following the record.

Information updates can include various types of updates which may or may not be linked with a particular record. For example information updates can be user submitted messages or can otherwise be generated in response to user actions or in response to events. Examples of messages include posts comments indications of a user s personal preferences such as likes and dislikes updates to a user s status uploaded files and hyperlinks to social network data or other network data such as various documents and or web pages on the Internet. Posts can include alpha numeric or other character based user inputs such as words phrases statements questions emotional expressions and or symbols. Comments generally refer to responses to posts such as words phrases statements answers questions and reactionary emotional expressions and or symbols. Multimedia data can be included in linked with or attached to a post or comment. For example a post can include textual statements in combination with a JPEG image or animated image. A like or dislike can be submitted in response to a particular post or comment. Examples of uploaded files include presentations documents multimedia files and the like.

Users can follow a record by subscribing to the record as mentioned above. Users can also follow other entities such as other types of data objects other users and groups of users. Feed tracked updates regarding such entities are one type of information update that can be received and included in the user s news feed. Any number of users can follow a particular entity and thus view information updates pertaining to that entity on the users respective news feeds. In some social networks users may follow each other by establishing connections with each other sometimes referred to as friending one another. By establishing such a connection one user may be able to see information generated by generated about or otherwise associated with another user. For instance a first user may be able to see information posted by a second user to the second user s personal social network page. One implementation of such a personal social network page is a user s profile page for example in the form of a web page representing the user s profile. In one example when the first user is following the second user the first user s news feed can receive a post from the second user submitted to the second user s profile feed also referred to herein as the user s wall which is one example of an information feed displayed on the user s profile page.

In some implementations an information feed may be specific to a group of users of an online social network. For instance a group of users may publish a news feed. Members of the group may view and post to this group feed in accordance with a permissions configuration for the feed and the group. Information updates in a group context can also include changes to group status information.

In some implementations when data such as posts or comments input from one or more users are submitted to an information feed for a particular user group object or other construct within an online social network an email notification or other type of network communication may be transmitted to all users following the user group or object in addition to the inclusion of the data as a feed item in one or more feeds such as a user s profile feed a news feed or a record feed. In some online social networks the occurrence of such a notification is limited to the first instance of a published input which may form part of a larger conversation. For instance a notification may be transmitted for an initial post but not for comments on the post. In some other implementations a separate notification is transmitted for each such information update.

Some implementations of the disclosed systems apparatus methods and computer readable storage media are configured to interact with records or applications across a single user interface in an online social network. The single user interface provides a unified user interface including a publisher and an information feed. The publisher can include one or more publisher actions configured to interact with a record or application. In some implementations the record can be a customer relationship management CRM object such as a lead a case an account an opportunity a task a contact a campaign a contract an event a custom object and a Visualforce page. In some implementations the application can be an application hosted on a third party platform.

Some of the publisher actions can be custom actions configured to interact with a data object or application. The custom action may be defined in accordance with custom action instructions declaratively or programmatically. The custom action instructions may define the data object and the interaction to be performed with the data object. The custom action instructions may also define attributes of the custom action including data fields associated with the data object validation rules associated with the one or more data fields the page layout of the custom action in the publisher and the action layout of the one or more data fields in the publisher. In some instances the custom action instructions may be defined using a customization tool such as Visualforce. This allows a user or organization to make customized user interfaces to meet their business needs.

The publisher is configured to publish information to the information feed. In some instances a feed item is created upon performing an interaction with the record or application and the feed item may include one or more actionable selections. The one or more actionable selections may provide a reference to the record or application. Selection of one of the actionable selections may cause the publisher to be operable to receive additional information and or perform additional operations on the record or application. Having such actionable selections in the feed item enables a user to efficiently perform actions on the record or application without having to navigate and switch among different user interfaces. For example a user can interact with multiple records without leaving a common user interface. This can be useful in efficiently advancing CRM as well as non CRM lifecycles through the publisher and information feed.

The feed item may be presented for inclusion in an information feed such as a parent record of the child record being acted upon. However the feed item can be propagated and cross referenced for display not only in the record feed of the parent record but in other related feeds. Identification of such related feeds can occur by for example a user defining values in a payload or a system administrator hard coding the values. Any interactions performed on a cross referenced feed item are also presented on every other cross referenced feed item so that a single conversation thread is preserved. This can allow users or organizations to view and interact with the same feed item from multiple page layouts.

Not only can the publisher interact with data objects the publisher may also be configured to interact with applications. Such applications may be hosted natively in the on demand service environment or hosted on a third party platform. Custom actions may be defined to interact with the application via an API. Regardless of whether the application is hosted natively or on a third party platform the API can enable integration of the application into the on demand service environment. Interactions with the application can be updated to an information feed. Such updates may occur without refreshing the user interface.

As more and more users and organizations move toward more collaborative sharing models to communicate and conduct business there is a desire to better expose enhance and utilize information. Conventionally accessing information and interacting with information in an online social network can involve navigating and switching among several different applications and interfaces. This can be cumbersome time consuming and unproductive.

As noted above some of the implementations described herein are directed at mechanisms to provide a unified user interface that enables a user to interact with a data object or application in an online social network. Such interactions can include for example a request to create the data object a request to delete the data object a request to update the data object a request to convert the data object a request to download data from the data object a request to upload data to the data object a request to attach a file to the data object a request to view information associated with the data object and a request to otherwise perform an operation having a reference to the data object. A unified user interface may include an information feed and a publisher with a custom action where the custom action is configured to perform one of the aforementioned interactions with the data object or application. Such interactions may occur via an API and published to an information feed in the form of a feed item. The feed item may be cross referenced in other related feeds to provide a single conversation thread and the feed item may have actionable selections to perform further operations on the data object. As such the publisher and the feed item become the main interface to interact with and view relevant information without the need to switch among different applications and interfaces.

These and other implementations may be embodied in various types of hardware software firmware and combinations thereof. For example some techniques disclosed herein may be implemented at least in part by computer readable media that include program instructions state information etc. for performing various services and operations described herein. Examples of program instructions include both machine code such as produced by a compiler and files containing higher level code that may be executed by a computing device such as a server or other data processing apparatus using an interpreter. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media and hardware devices that are specially configured to store program instructions such as read only memory ROM devices and random access memory RAM devices. These and other features of the disclosed implementations will be described in more detail below with reference to the associated drawings.

The term multi tenant database system can refer to those systems in which various elements of hardware and software of a database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows of data such as feed items for a potentially much greater number of customers. The term query plan generally refers to one or more operations used to access information in a database system.

A user profile or user s profile is generally configured to store and maintain data about a given user of the database system. The data can include general information such as name title phone number a photo a biographical summary and a status e.g. text describing what the user is currently doing. As mentioned below the data can include messages created by other users. Where there are multiple tenants a user is typically associated with a particular tenant. For example a user could be a salesperson of a company which is a tenant of the database system that provides a database service.

The term record generally refers to a data entity such as an instance of a data object created by a user of the database service for example about a particular actual or potential business relationship or project. The data object can have a data structure defined by the database service a standard object or defined by a user custom object . For example a record can be for a business partner or potential business partner e.g. a client vendor distributor etc. of the user and can include information describing an entire company subsidiaries or contacts at the company. As another example a record can be a project that the user is working on such as an opportunity e.g. a possible sale with an existing partner or a project that the user is trying to get. In one implementation of a multi tenant database system each record for the tenants has a unique identifier stored in a common table. A record has data fields that are defined by the structure of the object e.g. fields of certain data types and purposes . A record can also have custom fields defined by a user. A field can be another record or include links thereto thereby providing a parent child relationship between the records.

The terms information feed and feed are used interchangeably herein and generally refer to a combination e.g. a list of feed items or entries with various types of information and data. Such feed items can be stored and maintained in one or more database tables e.g. as rows in the table s that can be accessed to retrieve relevant information to be presented as part of a displayed feed. The term feed item or feed element refers to an item of information which can be presented in the feed such as a post submitted by a user. Feed items of information about a user can be presented in a user s profile feed of the database while feed items of information about a record can be presented in a record feed in the database by way of example. A profile feed and a record feed are examples of different information feeds. A second user following a first user and a record can receive the feed items associated with the first user and the record for display in the second user s news feed which is another type of information feed. In some implementations the feed items from any number of followed users and records can be combined into a single information feed of a particular user.

As examples a feed item can be a message such as a user generated post of text data and a feed tracked update to a record or profile such as a change to a field of the record. Feed tracked updates are described in greater detail below. A feed can be a combination of messages and feed tracked updates. Messages include text created by a user and may include other data as well. Examples of messages include posts user status updates and comments. Messages can be created for a user s profile or for a record. Posts can be created by various users potentially any user although some restrictions can be applied. As an example posts can be made to a wall section of a user s profile page which can include a number of recent posts or a section of a record that includes multiple posts. The posts can be organized in chronological order when displayed in a graphical user interface GUI for instance on the user s profile page as part of the user s profile feed. In contrast to a post a user status update changes a status of a user and can be made by that user or an administrator. A record can also have a status the update of which can be provided by an owner of the record or other users having suitable write access permissions to the record. The owner can be a single user multiple users or a group. In one implementation there is only one status for a record.

In some implementations a comment can be made on any feed item. In some implementations comments are organized as a list explicitly tied to a particular feed tracked update post or status update. In some implementations comments may not be listed in the first layer in a hierarchal sense of feed items but listed as a second layer branching from a particular first layer feed item.

A feed tracked update also referred to herein as a feed update is one type of information update and generally refers to data representing an event. A feed tracked update can include text generated by the database system in response to the event to be provided as one or more feed items for possible inclusion in one or more feeds. In one implementation the data can initially be stored and then the database system can later use the data to create text for describing the event. Both the data and or the text can be a feed tracked update as used herein. In various implementations an event can be an update of a record and or can be triggered by a specific action by a user. Which actions trigger an event can be configurable. Which events have feed tracked updates created and which feed updates are sent to which users can also be configurable. Messages and feed updates can be stored as a field or child object of the record. For example the feed can be stored as a child object of the record.

A group is generally a collection of users. In some implementations the group may be defined as users with a same or similar attribute or by membership. In some implementations a group feed also referred to herein as a group news feed includes one or more feed items about any user in the group. In some implementations the group feed also includes information updates and other feed items that are about the group as a whole the group s purpose the group s description and group records and other objects stored in association with the group. Threads of information updates including group record updates and messages such as posts comments likes etc. can define group conversations and change over time.

An entity feed or record feed generally refers to a feed of feed items about a particular record in the database such as feed tracked updates about changes to the record and posts made by users about the record. An entity feed can be composed of any type of feed item. Such a feed can be displayed on a page such as a web page associated with the record e.g. a home page of the record. As used herein a profile feed or user s profile feed is a feed of feed items about a particular user. In one example the feed items for a profile feed include posts and comments that other users make about or send to the particular user and status updates made by the particular user. Such a profile feed can be displayed on a page associated with the particular user. In another example feed items in a profile feed could include posts made by the particular user and feed tracked updates initiated based on actions of the particular user.

Systems apparatus and methods are provided for implementing enterprise level social and business information networking. Such implementations can provide more efficient use of a database system. For instance a user of a database system may not easily know when important information in the database has changed e.g. about a project or client. Implementations can provide feed tracked updates about such changes and other events thereby keeping users informed.

By way of example a user can update a record e.g. an opportunity such as a possible sale of 1000 computers. Once the record update has been made a feed tracked update about the record update can then automatically be provided e.g. in a feed to anyone subscribing to the opportunity or to the user. Thus the user does not need to contact a manager regarding the change in the opportunity since the feed tracked update about the update is sent via a feed right to the manager s feed page or other page.

Next mechanisms and methods for providing systems implementing enterprise level social and business information networking will be described with reference to several implementations. First an overview of an example of a database system is described and then examples of tracking events for a record actions of a user and messages about a user or record are described. Various implementations about the data structure of feeds customizing feeds user selection of records and users to follow generating feeds and displaying feeds are also described.

Environment is an environment in which an on demand database service exists. User system may be implemented as any computing device s or other data processing apparatus such as a machine or system that is used by a user to access a database system . For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of such computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is implemented in the example of as database system .

An on demand database service implemented using system by way of example is a service that is made available to outside users who do not need to necessarily be concerned with building and or maintaining the database system. Instead the database system may be available for their use when the users need the database system i.e. on the demand of the users. Some on demand database services may store information from one or more tenants into tables of a common database image to form a multi tenant database system MTS . A database image may include one or more database objects. A relational database management system RDBMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In some implementations application platform enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level also called authorization.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. Network can include a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I. The Internet will be used in many of the examples herein. However it should be understood that the networks that the present implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP signals to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the network interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least for users accessing system each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one implementation system shown in implements a web based customer relationship management CRM system. For example in one implementation system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms web pages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object in tenant data storage however tenant data typically is arranged in the storage medium s of tenant data storage so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain implementations system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. The term computing device is also referred to herein simply as a computer . User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user input devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. of the computing device in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above implementations are suitable for use with the Internet although other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one implementation each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of its components might be operator configurable using application s including computer code to run using processor system which may be implemented to include a central processing unit which may include an Intel Pentium processor or the like and or multiple processor units. Non transitory computer readable media can have instructions stored thereon in that can be executed by or used to program a computing device to perform any of the methods of the implementations described herein. Computer program code implementing instructions for operating and configuring system to intercommunicate and to process web pages applications and other data and media content as described herein is preferably downloadable and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any other type of computer readable medium or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for the disclosed implementations can be realized in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to some implementations each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to refer to a computing device or system including processing hardware and process space s an associated storage medium such as a memory device or database and in some instances a database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database objects described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to communicate with tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage spaces which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage space user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage space . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language implementations is discussed in commonly assigned U.S. Pat. No. 7 730 478 titled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT ON DEMAND DATABASE SERVICE by Craig Weissman issued on Jun. 1 2010 and hereby incorporated by reference in its entirety and for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server N might be coupled via a direct network link and another application server N might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain implementations each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one implementation therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one implementation the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain implementations three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner by way of example system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain implementations user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may involve sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to some implementations. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for case account contact lead and opportunity data objects each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. Commonly assigned U.S. Pat. No. 7 779 039 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM by Weissman et al. issued on Aug. 17 2010 and hereby incorporated by reference in its entirety and for all purposes teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain implementations for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

As shown in accessing an on demand database service environment may involve communications transmitted among a variety of different hardware and or software components. Further the on demand database service environment is a simplified representation of an actual on demand database service environment. For example while only one or two devices of each type are shown in some implementations of an on demand database service environment may include anywhere from one to many devices of each type. Also the on demand database service environment need not include each device shown in or may include additional devices not shown in .

Moreover one or more of the devices in the on demand database service environment may be implemented on the same physical device or on different hardware. Some devices may be implemented using hardware or a combination of hardware and software. Thus terms such as data processing apparatus machine server and device as used herein are not limited to a single hardware device but rather include any hardware and software configured to provide the described functionality.

The cloud is intended to refer to a data network or plurality of data networks often including the Internet. Client machines located in the cloud may communicate with the on demand database service environment to access services provided by the on demand database service environment. For example client machines may access the on demand database service environment to retrieve store edit and or process information.

In some implementations the edge routers and route packets between the cloud and other components of the on demand database service environment . The edge routers and may employ the Border Gateway Protocol BGP . The BGP is the core routing protocol of the Internet. The edge routers and may maintain a table of IP networks or prefixes which designate network reachability among autonomous systems on the Internet.

In one or more implementations the firewall may protect the inner components of the on demand database service environment from Internet traffic. The firewall may block permit or deny access to the inner components of the on demand database service environment based upon a set of rules and other criteria. The firewall may act as one or more of a packet filter an application gateway a stateful filter a proxy server or any other type of firewall.

In some implementations the core switches and are high capacity switches that transfer packets within the on demand database service environment . The core switches and may be configured as network bridges that quickly route data between different components within the on demand database service environment. In some implementations the use of two or more core switches and may provide redundancy and or reduced latency.

In some implementations the pods and may perform the core data processing and service functions provided by the on demand database service environment. Each pod may include various types of hardware and or software computing resources. An example of the pod architecture is discussed in greater detail with reference to .

In some implementations communication between the pods and may be conducted via the pod switches and . The pod switches and may facilitate communication between the pods and and client machines located in the cloud for example via core switches and . Also the pod switches and may facilitate communication between the pods and and the database storage .

In some implementations the load balancer may distribute workload between the pods and . Balancing the on demand service requests between the pods may assist in improving the use of resources increasing throughput reducing response times and or reducing overhead. The load balancer may include multilayer switches to analyze and forward traffic.

In some implementations access to the database storage may be guarded by a database firewall . The database firewall may act as a computer application firewall operating at the database application layer of a protocol stack. The database firewall may protect the database storage from application attacks such as structure query language SQL injection database rootkits and unauthorized information disclosure.

In some implementations the database firewall may include a host using one or more forms of reverse proxy services to proxy traffic before passing it to a gateway router. The database firewall may inspect the contents of database traffic and block certain content or database requests. The database firewall may work on the SQL application level atop the TCP IP stack managing applications connection to the database or SQL management interfaces as well as intercepting and enforcing packets traveling to or from a database network or application interface.

In some implementations communication with the database storage may be conducted via the database switch . The multi tenant database storage may include more than one hardware and or software components for handling database queries. Accordingly the database switch may direct database queries transmitted by other components of the on demand database service environment e.g. the pods and to the correct components within the database storage .

In some implementations the database storage is an on demand database system shared by many different organizations. The on demand database system may employ a multi tenant approach a virtualized approach or any other type of database approach. An on demand database system is discussed in greater detail with reference to .

In some implementations the app servers may include a hardware and or software framework dedicated to the execution of procedures e.g. programs routines scripts for supporting the construction of applications provided by the on demand database service environment via the pod . In some implementations the hardware and or software framework of an app server is configured to execute operations of the services described herein including performance of the blocks of methods described with reference to . In alternative implementations two or more app servers may be included and cooperate to perform such methods or one or more other servers described herein can be configured to perform the disclosed methods.

The content batch servers may handle requests internal to the pod. These requests may be long running and or not tied to a particular customer. For example the content batch servers may handle requests related to log mining cleanup work and maintenance tasks.

The content search servers may provide query and indexer functions. For example the functions provided by the content search servers may allow users to search through content stored in the on demand database service environment.

The file force servers may manage requests for information stored in the Fileforce storage . The Fileforce storage may store information such as documents images and basic large objects BLOBs . By managing requests for information using the file force servers the image footprint on the database may be reduced.

The query servers may be used to retrieve information from one or more file systems. For example the query system may receive requests for information from the app servers and then transmit information queries to the NFS located outside the pod.

The pod may share a database instance configured as a multi tenant environment in which different organizations share access to the same database. Additionally services rendered by the pod may call upon various hardware and or software resources. In some implementations the ACS servers may control access to data hardware resources or software resources.

In some implementations the batch servers may process batch jobs which are used to run tasks at specified times. Thus the batch servers may transmit instructions to other servers such as the app servers to trigger the batch jobs.

In some implementations the QFS may be an open source file system available from Sun Microsystems of Santa Clara Calif. The QFS may serve as a rapid access file system for storing and accessing information available within the pod . The QFS may support some volume management capabilities allowing many disks to be grouped together into a file system. File system metadata can be kept on a separate set of disks which may be useful for streaming applications where long disk seeks cannot be tolerated. Thus the QFS system may communicate with one or more content search servers and or indexers to identify retrieve move and or update data stored in the network file systems and or other storage systems.

In some implementations one or more query servers may communicate with the NFS to retrieve and or update information stored outside of the pod . The NFS may allow servers located in the pod to access information to access files over a network in a manner similar to how local storage is accessed.

In some implementations queries from the query servers may be transmitted to the NFS via the load balancer which may distribute resource requests over various resources available in the on demand database service environment. The NFS may also communicate with the QFS to update the information stored on the NFS and or to provide information to the QFS for use by servers located within the pod .

In some implementations the pod may include one or more database instances . The database instance may transmit information to the QFS . When information is transmitted to the QFS it may be available for use by servers within the pod without using an additional database call.

In some implementations database information may be transmitted to the indexer . Indexer may provide an index of information available in the database and or QFS . The index information may be provided to file force servers and or the QFS .

As multiple users might be able to change the data of a record it can be useful for certain users to be notified when a record is updated. Also even if a user does not have authority to change a record the user still might want to know when there is an update to the record. For example a vendor may negotiate a new price with a salesperson of company X where the salesperson is a user associated with tenant Y. As part of creating a new invoice or for accounting purposes the salesperson can change the price saved in the database. It may be important for co workers to know that the price has changed. The salesperson could send an email to certain people but this is onerous and the salesperson might not email all of the people who need to know or want to know. Accordingly some implementations of the disclosed techniques can inform others e.g. co workers who want to know about an update to a record automatically.

In block the database system receives a request to update a first record. In one implementation the request is received from a first user. For example a user may be accessing a page associated with the first record and may change a displayed field and hit save. In another implementation the database system can automatically create the request. For instance the database system can create the request in response to another event e.g. a request to change a field could be sent periodically at a particular date and or time of day or a change to another field or object. The database system can obtain a new value based on other fields of a record and or based on parameters in the system.

The request for the update of a field of a record is an example of an event associated with the first record for which a feed tracked update may be created. In other implementations the database system can identify other events besides updates to fields of a record. For example an event can be a submission of approval to change a field. Such an event can also have an associated field e.g. a field showing a status of whether a change has been submitted . Other examples of events can include creation of a record deletion of a record converting a record from one type to another e.g. converting a lead to an opportunity closing a record e.g. a case type record and potentially any other state change of a record any of which could include a field change associated with the state change. Any of these events update the record whether by changing a field of the record a state of the record or some other characteristic or property of the record. In one implementation a list of supported events for creating a feed tracked update can be maintained within the database system e.g. at a server or in a database.

In block the database system writes new data to the first record. In one implementation the new data may include a new value that replaces old data. For example a field is updated with a new value. In another implementation the new data can be a value for a field that did not contain data before. In yet another implementation the new data could be a flag e.g. for a status of the record which can be stored as a field of the record.

In some implementations a field can also include records which are child objects of the first record in a parent child hierarchy. A field can alternatively include a pointer to a child record. A child object itself can include further fields. Thus if a field of a child object is updated with a new value the parent record also can be considered to have a field changed. In one example a field could be a list of related child objects also called a related list.

In block a feed tracked update is generated about the update to the record. In one implementation the feed tracked update is created in parts for assembling later into a display version. For example event entries can be created and tracked in a first table and changed field entries can be tracked in another table that is cross referenced with the first table. More specifics of such implementations are provided later e.g. with respect to . In another implementation the feed tracked update is automatically generated by the database system. The feed tracked update can convey in words that the first record has been updated and provide details about what was updated in the record and who performed the update. In some implementations a feed tracked update is generated for only certain types of event and or updates associated with the first record.

In one implementation a tenant e.g. through an administrator can configure the database system to create enable feed tracked updates only for certain types of records. For example an administrator can specify that records of designated types such as accounts and opportunities are enabled. When an update or other event is received for the enabled record type then a feed tracked update would be generated. In another implementation a tenant can also specify the fields of a record whose changes are to be tracked and for which feed tracked updates are created. In one aspect a maximum number of fields can be specified for tracking and may include custom fields. In one implementation the type of change can also be specified for example that the value change of a field is to be larger than a threshold e.g. an absolute amount or a percentage change . In yet another implementation a tenant can specify which events are to cause a generation of a feed tracked update. Also in one implementation individual users can specify configurations specific to them which can create custom feeds as described in more detail below.

In one implementation changes to fields of a child object are not tracked to create feed tracked updates for the parent record. In another implementation the changes to fields of a child object can be tracked to create feed tracked updates for the parent record. For example a child object of the parent type can be specified for tracking and certain fields of the child object can be specified for tracking. As another example if the child object is of a type specified for tracking then a tracked change for the child object is propagated to parent records of the child object.

In block the feed tracked update is added to a feed for the first record. In one implementation adding the feed tracked update to a feed can include adding events to a table which may be specific to a record or be for all or a group of objects where a display version of a feed tracked update can be generated dynamically and presented in a GUI as a feed item when a user requests a feed for the first record. In another implementation a display version of a feed tracked update can be added when a record feed is stored and maintained for a record. As mentioned above a feed may be maintained for only certain records. In one implementation the feed of a record can be stored in the database associated with the record. For example the feed can be stored as a field e.g. as a child object of the record. Such a field can store a pointer to the text to be displayed for the feed tracked update.

In some implementations only the current feed tracked update or other current feed item may be kept or temporarily stored e.g. in some temporary memory structure. For example a feed tracked update for only a most recent change to any particular field is kept. In other implementations many previous feed tracked updates may be kept in the feed. A time and or date for each feed tracked update can be tracked. Herein a feed of a record is also referred to as an entity feed as a record is an instance of a particular entity object of the database.

In block followers of the first record can be identified. A follower is a user following the first record such as a subscriber to the feed of the first record. In one implementation when a user requests a feed of a particular record such an identification of block can be omitted. In another implementation where a record feed is pushed to a user e.g. as part of a news feed then the user can be identified as a follower of the first record. Accordingly this block can include the identification of records and other objects being followed by a particular user.

In one implementation the database system can store a list of the followers for a particular record. In various implementations the list can be stored with the first record or associated with the record using an identifier e.g. a pointer to retrieve the list. For example the list can be stored in a field of the first record. In another implementation a list of the records that a user is following is used. In one implementation the database system can have a routine that runs for each user where the routine polls the records in the list to determine if a new feed tracked update has been added to a feed of the record. In another implementation the routine for the user can be running at least partially on a user device which contacts the database to perform the polling.

In block in one implementation the feed tracked update can be stored in a table as described in greater detail below. When the user opens a feed an appropriate query is sent to one or more tables to retrieve updates to records also described in greater detail below. In some implementations the feed shows feed tracked updates in reverse chronological order. In one implementation the feed tracked update is pushed to the feed of a user e.g. by a routine that determines the followers for the record from a list associated with the record. In another implementation the feed tracked update is pulled to a feed e.g. by a user device. This pulling may occur when a user requests the feed as occurs in block . Thus these actions may occur in a different order. The creation of the feed for a pull may be a dynamic creation that identifies records being followed by the requesting user generates the display version of relevant feed tracked updates from stored information e.g. event and field change and adds the feed tracked updates into the feed. A feed of feed tracked updates of records and other objects that a user is following is also generally referred to herein as a news feed which can be a subset of a larger information feed in which other types of information updates appear such as posts.

In yet another implementation the feed tracked update could be sent as an email to the follower instead of in a feed. In one implementation email alerts for events can enable people to be emailed when certain events occur. In another implementation emails can be sent when there are posts on a user profile and posts on entities to which the user subscribes. In one implementation a user can turn on off email alerts for all or some events. In an implementation a user can specify what kind of feed tracked updates to receive about a record that the user is following. For example a user can choose to only receive feed tracked updates about certain fields of a record that the user is following and potentially about what kind of update was performed e.g. a new value input into a specified field or the creation of a new field .

In block a follower can access his her news feed to see the feed tracked update. In one implementation the user has just one news feed for all of the records that the user is following. In one aspect a user can access his her own feed by selecting a particular tab or other object on a page of an interface to the database system. Once selected the feed can be provided as a list e.g. with an identifier e.g. a time or including some or all of the text of the feed tracked update. In another implementation the user can specify how the feed tracked updates are to be displayed and or sent to the user. For example a user can specify a font for the text a location of where the feed can be selected and displayed amount of text to be displayed and other text or symbols to be displayed e.g. importance flags .

A first user sends a request to update record in database system . Although an update request is described other events that are being tracked are equally applicable. In various implementations the request can be sent via a user interface e.g. of or an application program interface e.g. API . An I O port can accommodate the signals of request via any input interface and send the signals to one or more processors . The processor can analyze the request and determine operations to be performed. Herein any reference to a processor can refer to a specific processor or any set of processors in database system which can be collectively referred to as processor .

Processor can determine an identifier for record and send commands with the new data of the request to record database to update record . In one implementation record database is where tenant storage space of is located. The request and new data commands can be encapsulated in a single write transaction sent to record database . In one implementation multiple changes to records in the database can be made in a single write transaction.

Processor can also analyze request to determine whether a feed tracked update is to be created which at this point may include determining whether the event e.g. a change to a particular field is to be tracked. This determination can be based on an interaction i.e. an exchange of data with record database and or other databases or based on information stored locally e.g. in cache or RAM at processor . In one implementation a list of record types that are being tracked can be stored. The list may be different for each tenant e.g. as each tenant may configure the database system to its own specifications. Thus if the record is of a type not being tracked then the determination of whether to create a feed tracked update can stop there.

The same list or a second list which can be stored in a same location or a different location can also include the fields and or events that are tracked for the record types in the first list. This list can be searched to determine if the event is being tracked. A list may also contain information having the granularity of listing specific records that are to be tracked e.g. if a tenant can specify the particular records to be tracked as opposed to just type .

As an example processor may obtain an identifier associated with record e.g. obtained from request or database potentially along with a tenant identifier and cross reference the identifier with a list of records for which feed tracked updates are to be created. Specifically the record identifier can be used to determine the record type and a list of tracked types can be searched for a match. The specific record may also be checked if such individual record tracking was enabled. The name of the field to be changed can also be used to search a list of tracking enabled fields. Other criteria besides field and events can be used to determine whether a feed tracked update is created e.g. type of change in the field. If a feed tracked update is to be generated processor can then generate the feed tracked update.

In some implementations a feed tracked update is created dynamically when a feed e.g. the entity feed of record is requested. Thus in one implementation a feed tracked update can be created when a user requests the entity feed for record . In this implementation the feed tracked update may be created e.g. assembled including re created each time the entity feed is to be displayed to any user. In one implementation one or more event history tables can keep track of previous events so that the feed tracked update can be re created.

In another implementation a feed tracked update can be created at the time the event occurs and the feed tracked update can be added to a list of feed items. The list of feed items may be specific to record or may be an aggregate of feed items including feed items for many records. Such an aggregate list can include a record identifier so that the feed items for the entity feed of record can be easily retrieved. For example after the feed tracked update has been generated processor can add the new feed tracked update 3 to a feed of record . As mentioned above in one implementation the feed can be stored in a field e.g. as a child object of record . In another implementation the feed can be stored in another location or in another database but with a link e.g. a connecting identifier to record . The feed can be organized in various ways e.g. as a linked list an array or other data structure.

A second user can access the new feed tracked update 3 in various ways. In one implementation second user can send a request for the record feed. For example second user can access a home page detail page of the record e.g. with a query or by browsing and the feed can be obtained through a tab button or other activation object on the page. The feed can be displayed on the screen or downloaded.

In another implementation processor can add the new feed tracked update 5 to a feed e.g. a news feed of a user that is following record . In one implementation processor can determine each of the followers of record by accessing a list of the users that have been registered as followers. This determination can be done for each new event e.g. update 1 . In another implementation processor can poll e.g. with a query the records that second user is following to determine when new feed tracked updates or other feed items are available. Processor can use a follower profile of second user that can contain a list of the records that the second user is following. Such a list can be contained in other parts of the database as well. Second user can then send a request to his her profile to obtain a feed which contains the new feed tracked update. The user s profile can be stored in a profile database which can be the same or different than database .

In some implementations a user can define a news feed to include new feed tracked updates from various records which may be limited to a maximum number. In one implementation each user has one news feed. In another implementation the follower profile can include the specifications of each of the records to be followed with the criteria for what feed tracked updates are to be provided and how they are displayed as well as the feed.

Some implementations can provide various types of record entity feeds. Entity Feeds can exist for record types like account opportunity case and contact. An entity feed can tell a user about the actions that people have taken on that particular record or on one its related records. The entity feed can include who made the action which field was changed and the old and new values. In one implementation entity feeds can exist on all supported records as a list that is linked to the specific record. For example a feed could be stored in a field that allows lists e.g. linked lists or as a child object.

In addition to knowing about events associated with a particular record it can be helpful for a user to know what a particular user is doing. In particular it might be nice to know what the user is doing without the user having to generate the feed tracked update e.g. a user submitting a synopsis of what the user has done . Accordingly implementations can automatically track actions of a user that trigger events and feed tracked updates can be generated for certain events.

In block a database system e.g. of identifies an action of a first user. In one implementation the action triggers an event and the event is identified. For example the action of a user requesting an update to a record can be identified where the event is receiving a request or is the resulting update of a record. The action may thus be defined by the resulting event. In another implementation only certain types of actions events are identified. Which actions are identified can be set as a default or can be configurable by a tenant or even configurable at a user level. In this way processing effort can be reduced since only some actions are identified.

In block it is determined whether the event qualifies for a feed tracked update. In one implementation a predefined list of events e.g. as mentioned herein can be created so that only certain actions are identified. In one implementation an administrator or other user of a tenant can specify the type of actions events for which a feed tracked update is to be generated. This block may also be performed for method .

In block a feed tracked update is generated about the action. In an example where the action is an update of a record the feed tracked update can be similar or the same as the feed tracked update created for the record. The description can be altered though to focus on the user as opposed to the record. For example John D. has closed a new opportunity for account XYZ as opposed to an opportunity has been closed for account XYZ. 

In block the feed tracked update is added to a profile feed of the first user when e.g. the user clicks on a tab to open a page in a browser program displaying the feed. In one implementation a feed for a particular user can be accessed on a page of the user s profile in a similar manner as a record feed can be accessed on a detail page of the record. In another implementation the first user may not have a profile feed and the feed tracked update may just be stored temporarily before proceeding. A profile feed of a user can be stored associated with the user s profile. This profile feed can be added to a news feed of another user.

In block followers of the first user are identified. In one implementation a user can specify which type of actions other users can follow. Similarly in one implementation a follower can select what actions by a user the follower wants to follow. In an implementation where different followers follow different types of actions which users are followers of that user and the particular action can be identified e.g. using various lists that track what actions and criteria are being followed by a particular user. In various implementations the followers of the first user can be identified in a similar manner as followers of a record as described above for block .

In block the feed tracked update is added to a news feed of each follower of the first user when e.g. the follower clicks on a tab to open a page displaying the news feed. The feed tracked update can be added in a similar manner as the feed items for a record feed. The news feed can contain feed tracked updates both about users and records. In another implementation a user can specify what kind of feed tracked updates to receive about a user that the user is following. For example a user could specify feed tracked updates with particular keywords of certain types of records of records owned or created by certain users particular fields and other criteria as mentioned herein.

In block a follower accesses the news feed and sees the feed tracked update. In one implementation the user has just one news feed for all of the records that the user is following. In another implementation a user can access his her own feed i.e. feed about his her own actions by selecting a particular tab or other object on a page of an interface to the database system. Thus a feed can include feed tracked updates about what other users are doing in the database system. When a user becomes aware of a relevant action of another user the user can contact the co worker thereby fostering teamwork.

As described above some implementations can generate text describing events e.g. updates that have occurred for a record and actions by a user that trigger an event. A database system can be configured to generate the feed tracked updates for various events in various ways.

In one implementation the feed tracked update is a grammatical sentence thereby being easily understandable by a person. In another implementation the feed tracked update provides detailed information about the update. In various examples an old value and new value for a field may be included in the feed tracked update an action for the update may be provided e.g. submitted for approval and the names of particular users that are responsible for replying or acting on the feed tracked update may be also provided. The feed tracked update can also have a level of importance based on settings chosen by the administrator a particular user requesting an update or by a following user who is to receive the feed tracked update which fields is updated a percentage of the change in a field the type of event or any combination of these factors.

The system may have a set of heuristics for creating a feed tracked update from the event e.g. a request to update . For example the subject may be the user the record or a field being added or changed. The verb can be based on the action requested by the user which can be selected from a list of verbs which may be provided as defaults or input by an administrator of a tenant . In one implementation feed tracked updates can be generic containers with formatting restrictions 

As an example of a feed tracked update for a creation of a new record Mark Abramowitz created a new Opportunity for IBM 20 000 laptops with Amount as 3.5M and Sam Palmisano as Decision Maker. This event can be posted to the profile feed for Mark Abramowitz and the entity feed for record of Opportunity for IBM 20 000 laptops. The pattern can be given by AgentFullName created a new ObjectName RecordName with FieldName as FieldValue and added changed removed RelatedListRecordName as to as RelatedListRecordValue and . Similar patterns can be formed for a changed field standard or custom and an added child record to a related list.

Some implementations can also have a user submit text instead of the database system generating a feed tracked update. As the text is submitted as part or all of a message by a user the text can be about any topic. Thus more information than just actions of a user and events of a record can be conveyed. In one implementation the messages can be used to ask a question about a particular record and users following the record can provide comments and responses.

In block the database system receives a message e.g. a post or status update associated with a first user. The message e.g. a post or status update can contain text and or multimedia content submitted by another user or by the first user. In one implementation a post is for a section of the first user s profile page where any user can add a post and where multiple posts can exist. Thus a post can appear on the first user s profile page and can be viewed when the first user s profile is visited. For a message about a record the post can appear on a detail page of a record. Note the message can appear in other feeds as well. In another implementation a status update about the first user can only be added by the first user. In one implementation a user can only have one status message.

In block the message is added to a table as described in greater detail below. When the feed is opened a query filters one or more tables to identify the first user identify other persons that the user is following and retrieve the message. Messages and record updates are presented in a combined list as the feed. In this way in one implementation the message can be added to a profile feed of the first user which is associated e.g. as a related list with the first user s profile. In one implementation the posts are listed indefinitely. In another implementation only the most recent posts e.g. last are kept in the profile feed. Such implementations can also be employed with feed tracked updates. In yet another implementation the message can be added to a profile of the user adding the message.

In block the database system identifies followers of the first user. In one implementation the database system can identify the followers as described above for method . In various implementations a follower can select to follow a feed about the actions of the first user messages about the first user or both potentially in a same feed .

In block the message is added to a news feed of each follower. In one implementation the message is only added to a news feed of a particular follower if the message matches some criteria e.g. the message includes a particular keyword or other criteria. In another implementation a message can be deleted by the user who created the message. In one implementation once deleted by the author the message is deleted from all feeds to which the message had been added.

In block the follower accesses a news feed and sees the message. For example the follower can access a news feed on the follower s own profile page. As another example the follower can have a news feed sent to his her own desktop without having to first go to a home page.

In block the database system receives a comment about the message. The database system can add the comment to a feed of the same first user much as the original message was added. In one implementation the comment can also be added to a feed of a second user who added the comment. In one implementation users can also reply to the comment. In another implementation users can add comments to a feed tracked update and further comments can be associated with the feed tracked update. In yet another implementation making a comment or message is not an action to which a feed tracked update is created. Thus the message may be the only feed item created from such an action.

In one implementation if a feed tracked update or post is deleted its corresponding comments are deleted as well. In another implementation new comments on a feed tracked update or post do not update the feed tracked update timestamp. Also the feed tracked update or post can continue to be shown in a feed profile feed record feed or news feed if it has had a comment within a specified timeframe e.g. within the last week . Otherwise the feed tracked update or post can be removed in an implementation.

In some implementations all or most feed tracked updates can be commented on. In other implementations feed tracked updates for certain records e.g. cases or ideas are not commentable. In various implementations comments can be made for any one or more records of opportunities accounts contacts leads and custom objects.

In block the comment is added to a news feed of each follower. In one implementation a user can make the comment within the user s news feed. Such a comment can propagate to the appropriate profile feed or record feed and then to the news feeds of the following users. Thus feeds can include what people are saying as well as what they are doing. In one aspect feeds are a way to stay up to date e.g. on users opportunities etc. as well as an opportunity to reach out to co workers partners and engage them around common goals.

In some implementations users can rate feed tracked updates or messages including comments . A user can choose to prioritize a display of a feed so that higher rated feed items show up higher on a display. For example in an implementation where comments are answers to a specific question users can rate the different status posts so that a best answer can be identified. As another example users are able to quickly identify feed items that are most important as those feed items can be displayed at a top of a list. The order of the feed items can be based on an importance level which can be determined by the database system using various factors some of which are mentioned herein and based on a rating from users. In one implementation the rating is on a scale that includes at least 3 values. In another implementation the rating is based on a binary scale.

Besides a profile for a user a group can also be created. In various implementations the group can be created based on certain attributes that are common to the users can be created by inviting users and or can be created by receiving requests to join from a user. In one implementation a group feed can be created with messages being added to the group feed when someone submits a message to the group as a whole through a suitable user interface. For example a group page may have a group feed or a section within the feed for posts and a user can submit a post through a publisher component in the user interface by clicking on a Share or similar button. In another implementation a message can be added to a group feed when the message is submitted about any one of the members. Also a group feed can include feed tracked updates about actions of the group as a whole e.g. when an administrator changes data in a group profile or a record owned by the group or about actions of an individual member.

An event history table can provide a feed tracked update of events from which feed items are created. In one aspect the events are for objects that are being tracked. Thus table can store and change feed tracked updates for feeds and the changes can be persisted. In various implementations event history table can have columns of event ID object ID also called parent ID and created by ID . The event ID can uniquely identify a particular event and can start at or other number or value .

Each new event can be added chronologically with a new event ID which may be incremented in order. An object ID can be used to track which record or user s profile is being changed. For example the object ID can correspond to the record whose field is being changed or the user whose feed is receiving a post. The created by ID can track the user who is performing the action that results in the event e.g. the user that is changing the field or that is posting a message to the profile of another user.

In one implementation a name of an event can also be stored in table . In one implementation a tenant can specify events that they want tracked. In an implementation event history table can include the name of the field that changed e.g. old and new values . In another implementation the name of the field and the values are stored in a separate table. Other information about an event e.g. text of comment feed tracked update post or status update can be stored in event history table or in other tables as is now described.

A field change table can provide a feed tracked update of the changes to the fields. The columns of table can include an event ID which correlates to the event ID an old value for the field and the new value for the field. In one implementation if an event changes more than one field value then there can be an entry for each field changed. As shown event ID has two entries for event E.

A comment table can provide a feed tracked update of the comments made regarding an event e.g. a comment on a post or a change of a field value. The columns of table can include an event ID which correlates to the event ID the comment column that stores the text of the comment and the time date of the comment. In one implementation there can be multiple comments for each event. As shown event ID has two entries for event E.

A user subscription table can provide a list of the objects being followed subscribed to by a user. In one implementation each entry has a user ID of the user doing the following and one object ID corresponding to the object being followed. In one implementation the object being followed can be a record or a user. As shown the user with ID U is following object IDs O and O. If user U is following other objects then additional entries may exist for user U. Also as shown user U is also following object O. The user subscription table can be updated when a user adds or deletes an object that is being followed.

In one implementation regarding a profile feed and a news feed these are read only views on the event history table specialized for these feed types. Conceptually the news feed can be a semi join between the user subscription table and the event history table on the object IDs and for the user. In one aspect these entities can have polymorphic parents and can be subject to a number of restrictions detailed herein e.g. to limit the cost of sharing checks.

In one implementation entity feeds are modeled in the API as a feed associate entity e.g. AccountFeed CaseFeed etc . A feed associate entity includes information composed of events e.g. event IDs for only one particular record type. Such a list can limit the query and sharing checks to a specific record type. In one aspect this structuring of the entity feeds can make the query run faster. For example a request for a feed of a particular account can include the record type of account. In one implementation an account feed table can then be searched where the table has account record IDs and corresponding event IDs or pointers to particular event entries in event history table . Since the account feed table only contains some of the records not all the query can run faster.

In one implementation there may be objects with no events listed in the event history table even though the record is being tracked. In this case the database service can return a result indicating that no feed items exist.

A feed item can represent an individual field change of a record creation and deletion of a record or other events being tracked for a record or a user. In one implementation all of the feed items in a single transaction event can be grouped together and have the same event ID. A single transaction relates to the operations that can be performed in a single communication with the database. In another implementation where a feed is an object of the database a feed item can be a child of a profile feed news feed or entity feed. If a feed item is added to multiple feeds the feed item can be replicated as a child of each feed to which the feed item is added.

In some implementations a comment exists as an item that depends from feed tracked updates posts status updates and other items that are independent of each other. Thus a feed comment object can exist as a child object of a feed item object. For example comment table can be considered a child table of event history table . In one implementation a feed comment can be a child of a profile feed news feed or entity feed that is separate from other feed items.

In one implementation viewing a feed pulls up the most recent messages or feed tracked updates e.g. and searches the most recent e.g. comments for each feed item. The comments can be identified via the comment table . In one implementation a user can request to see more comments e.g. by selecting a see more link.

After feed items have been generated they can be filtered so that only certain feed items are displayed which may be tailored to a specific tenant and or user. In one implementation a user can specify changes to a field that meet certain criteria for the feed item to show up in a feed displayed to the user e.g. a news feed or even an entity feed displayed directly to the user. In one implementation the criteria can be combined with other factors e.g. number of feed items in the feed to determine which feed items to display. For instance if a small number of feed items exist e.g. below a threshold then all of the feed items may be displayed.

In one implementation a user can specify the criteria via a query on the feed items in his her new feed and thus a feed may only return objects of a certain type certain types of events feed tracked updates about certain fields and other criteria mentioned herein. Messages can also be filtered according to some criteria which may be specified in a query. Such an added query can be added onto a standard query that is used to create the news feed for a user. A first user could specify the users and records that the first user is following in this manner as well as identify the specific feed items that the first user wants to follow. The query could be created through a graphical interface or added by a user directly in a query language. Other criteria could include receiving only posts directed to a particular user or record as opposed to other feed items.

In one implementation a user can access a feed of a record if the user can access the record. The security rules for determining whether a user has access to a record can be performed in a variety of ways some of which are described in commonly assigned U.S. Pat. No. 8 095 531 titled METHODS AND SYSTEMS FOR CONTROLLING ACCESS TO CUSTOM OBJECTS IN A DATABASE by Weissman et al. issued on Jan. 10 2012 and hereby incorporated by reference in its entirety and for all purposes.

In one implementation a user can edit a feed of a record if the user has access to the record e.g. deleting or editing a feed item. In another implementation a user besides an administrator cannot edit a feed item except for performing an action from which a feed item can be created. In one example a user is first has to have access to a particular record and field for a feed item to be created based on an action of the user. In this case an administrator can be considered to be a user with MODIFY ALL DATA security level. In yet another implementation a user who created the record can edit the feed.

In one implementation the text of posts are stored in a child table post table which can be cross referenced with event history table . Post table can include event ID to cross reference with event ID post text to store the text of the post and time date . An entry in post table can be considered a feed post object.

As described above a user can follow users groups and records. Implementations can provide mechanisms for a user to manage which users groups and records that the user is currently following. In one implementation a user can be limited to the number of users and records collectively or separately that the user can follow. For example a user may be restricted to only following 10 users and 15 records or as another example 25 total. Alternatively the user may be permitted to follow more or less users.

In one implementation a user can go to a page of a record and then select to follow that object e.g. with a button marked follow or join . In another implementation a user can search for a record and have the matching records show up in a list. The search can include criteria of records that the user might want to follow. Such criteria can include the owner the creation date last comment date and numerical values of particular fields e.g. an opportunity with a value of more than 10 000 .

A follow button or other activation object can then reside next to each record in the resulting list and the follow button can be selected to start following the record. Similarly a user can go to a profile page of a user and select to follow the user or a search for users can provide a list where one or more users can be selected for following from the list. The selections of subscribing and unsubscribing can add and delete rows in table .

In some implementations a subscription center acts as a centralized place in a database application e.g. application platform to manage which records a user subscribes to and which field updates the user wants to see in feed tracked updates. The subscription center can use a subscription table to keep track of the subscriptions of various users. In one implementation the subscription center shows a list of all the items users and records a user is subscribed to. In another implementation a user can unsubscribe to subscribed objects from the subscription center.

In block one or more properties of an object stored in the database system are received. The properties can be received from administrators of the database system or from users of the database system which may be an administrator of a customer organization . The properties can be records or users and can include any of the fields of the object that are stored in the database system. Examples of properties of a record include an owner of the record a user that converted the record from one record type to another record type whether the first user has viewed the record and a time the first user viewed the record. Examples of properties of a user include which organization tenant the user is associated with the second user s position in the same organization and which other users the user had emailed or worked with on projects.

In block the database system receives one or more criteria about which users are to automatically follow the object. Examples of the criteria can include an owner or creator of a record is to follow the record subordinates of an owner or creator of a record are to follow the record and a user is to follow his her manager the user s peers other users in the same business group as the user and other users that the user has emailed or worked with on a project. The criteria can be specific to a user or group of users e.g. users of a tenant .

In block the database system determines whether the one or more properties of the object satisfy the one or more criteria for a first user. In one implementation this determination can occur by first obtaining the criteria and then determining objects that satisfy the criteria. The determination can occur periodically at time of creation of an object or at other times.

In block if the criteria are satisfied the object is associated with the first user. The association can be in a list that stores information as to what objects are being followed by the first user. User subscription table is an example of such a list. In one implementation the one or more criteria are satisfied if one property satisfies at least one criterion. Thus if the criteria are that a user follows his her manager and the object is the user s manager then the first user will follow the object.

In one implementation a user can also be automatically unsubscribed e.g. if a certain action happens. The action could be a change in the user s position within the organization e.g. a demotion or becoming a contractor. As another example if a case gets closed then users following the case may be automatically unsubscribed.

As described above a feed includes feed items which include feed tracked updates and messages as defined herein. Various feeds can be generated. For example a feed can be generated about a record or about a user. Then users can view these feeds. A user can separately view a feed of a record or user e.g. by going to a home page for the user or the record. As described above a user can also follow another user or record and receive the feed items of those feeds through a separate feed application. The feed application can provide each of the feeds that a user is following and in some examples can combine various feeds in a single information feed.

A feed generator can refer to any software program running on a processor or a dedicated processor or combination thereof that can generate feed items e.g. feed tracked updates or messages and combine them into a feed. In one implementation the feed generator can generate a feed item by receiving a feed tracked update or message identifying what feeds the item should be added to and adding the feed. Adding the feed can include adding additional information metadata to the feed tracked update or message e.g. adding a document sender of message a determined importance etc. . The feed generator can also check to make sure that no one sees feed tracked updates for data that they don t have access to see e.g. according to sharing rules . A feed generator can run at various times to pre compute feeds or to compute them dynamically or combinations thereof.

In one implementation processor in can identify an event that meets criteria for a feed tracked update and then generate the feed tracked update. Processor can also identify a message. For example an application interface can have certain mechanisms for submitting a message e.g. submit buttons on a profile page detail page of a record comment button on post and use of these mechanisms can be used to identify a message to be added to a table used to create a feed or added directly to a list of feed items ready for display.

In some implementations a feed of feed items is created before a user requests the feed. Such an implementation can run fast but have high overall costs for storage. In one implementation once a profile feed or a record feed has been created a feed item messages and feed tracked updates can be added to the feed. The feed can exist in the database system in a variety of ways such as a related list. The feed can include mechanisms to remove items as well as add them.

As described above a news feed can be an aggregated feed of all the record feeds and profile feeds to which a user has subscribed. The news feed can be provided on the home page of the subscribing user. Therefore a news feed can be created by and exist for a particular user. For example a user can subscribe to receive entity feeds of certain records that are of interest to the user and to receive profile feeds of people that are of interest e.g. people on a same team that work for the user are a boss of the user etc. . A news feed can tell a user about all the actions across all the records and people whom have explicitly or implicitly been subscribed to via the subscriptions center described above .

In one implementation only one instance of each feed tracked update is shown on a user s news feed even if the feed tracked update is published in multiple entities to which the user is subscribed. In one aspect there may be delays in publishing news articles. For example the delay may be due to queued up messages for asynchronous entity feed tracked update persistence. Different feeds may have different delays e.g. delay for new feeds but none of profile and entity feeds . In another implementation certain feed tracked updates regarding a subscribed profile feed or an entity feed are not shown because the user is not allowed access e.g. due to sharing rules which restrict which users can see which data . Also in one implementation data of the record that has been updated which includes creation can be provided in the feed e.g. a file or updated value of a feed can be added as a flash rendition .

In some implementations a feed generator can generate the feed items dynamically when a user requests to see a particular feed e.g. a profile feed entity feed or the user s news feed. In one implementation the most recent feed items e.g. top 50 are generated first. In one aspect the other feed items can be generated as a background process e.g. not synchronously with the request to view the feed. However since the background process is likely to complete before a user gets to the next 50 feed items the feed generation may appear synchronous. In another aspect the most recent feed items may or may not include comments e.g. that are tied to feed tracked updates or posts.

In one implementation the feed generator can query the appropriate subset of tables shown in and or other tables as necessary to generate the feed items for display. For example the feed generator can query the event history table for the updates that occurred for a particular record. The ID of the particular record can be matched against the ID of the record. In one implementation changes to a whole set of records can be stored in one table. The feed generator can also query for status updates posts and comments each of which can be stored in different parts of a record or in separate tables as shown in . What gets recorded in the entity event history table as well as what is displayed can be controlled by a feed settings page in setup which can be configurable by an administrator and can be the same for the entire organization as is described above for custom feeds.

In one implementation there can be two feed generators. For example one generator can generate the record and profile feeds and another generator can generate news feeds. For the former the feed generator can query identifiers of the record or the user profile. For the latter the news feed generator can query the subscribed profile feeds and record feeds e.g. user subscription table . In one implementation the feed generator looks at a person s subscription center to decide which feeds to query for and return a list of feed items for the user. The list can be de duped e.g. by looking at the event number and values for the respective table such as field name or ID comment ID or other information.

In block data indicative of an event is received. The data may have a particular identifier that specifies the event. For example there may be a particular identifier for a field update. In another implementation the transaction may be investigated for keywords identifying the event e.g. terms in a query indicating a close change field or create operations .

In block it is determined whether the event is being tracked for inclusion into feed tracked update tables. The determination of what is being tracked can be based on a tenant s configuration as described above. In one aspect the event has an actor person performing an event and an object of the event e.g. record or user profile being changed .

In block the event is written to an event history table e.g. table . In one implementation this feed tracking operation can be performed in the same transaction that performs a save operation for updating a record. In another implementation a transaction includes at least two roundtrip database operations with one roundtrip being the database save write and the second database operation being the saving of the update in the feed tracked update table. In one implementation the event history table is chronological. In another implementation if user A posts on user B s profile then user A is under the created by and user B is under the object ID .

In block a field change table e.g. field change table can be updated with an entry having the event identifier and fields that were changed in the update. In one implementation the field change table is a child table of the event history table. This table can include information about each of the fields that are changed. For example for an event that changes the name and balance for an account record an entry can have the event identifier the old and new name and the old and new balance. Alternatively each field change can be in a different row with the same event identifier. The field name or ID can also be included to determine which field the values are associated.

In block when the event is a post a post table e.g. post table can be updated with an entry having the event identifier and text of the post. In one implementation the field change table is a child table of the event history table. In another implementation the text can be identified in the transaction e.g. a query command stripped out and put into the entry at the appropriate column. The various tables described herein can be combined or separated in various ways. For example the post table and the field change table may be part of the same table or distinct tables or may include overlapping portions of data.

In block a comment is received for an event and the comment is added to a comment table e.g. comment table . The comment could be for a post or an update of a record from which a feed tracked update can be generated for display. In one implementation the text can be identified in the transaction e.g. a query command stripped out and put into the entry at the appropriate column.

In block a query is received for an events history table e.g. event history table for events related to a particular record. In one implementation the query includes an identifier of the record for which the feed is being requested. In various implementations the query may be initiated from a detail page of the record a home page of a user requesting the record feed or from a listing of different records e.g. obtained from a search or from browsing .

In block the user s security level can be checked to determine if the user can view the record feed. Typically a user can view a record feed if the user can access the record. This security check can be performed in various ways. In one implementation a first table is checked to see if the user has a classification e.g. a security level that allows him to view records of the given type . In another implementation a second table is checked to see if the user is allowed to see the specific record. The first table can be checked before the second table and both tables can be different sections of a same table. If the user has requested the feed from the detail page of the record one implementation can skip the security level check for the record since the check was already done when the user requested to view the detail page.

In one implementation a security check is determined upon each request to view the record feed. Thus whether or not a feed item is displayed to a user is determined based on access rights e.g. when the user requests to see a feed of a record or a news feed of all the objects the user is following. In this manner if a user s security changes a feed automatically adapts to the user s security level when it is changed. In another implementation a feed can be computed before being requested and a subsequent security check can be made to determine whether the person still has access right to view the feed items. The security access check may be at the field level as well as at the record level.

In block if the user can access the record a field level security table can be checked to determine whether the user can see particular fields. In one implementation only those fields are displayed to the user. Alternatively a subset of those the user has access to is displayed. The field level security check may optionally be performed at the same time and even using the same operation as the record level check. In addition the record type check may also be performed at this time. If the user can only see certain fields then any feed items related to those fields e.g. as determined from field change table can be removed from the feed being displayed.

In block the feed items that the user has access to are displayed. In one implementation a predetermined number e.g. 20 of feed items are displayed at a time. The method can display the first 20 feed items that are found to be readable and then determine others while the user is viewing the first 20. In another implementation the other feed items are not determined until the user requests to see them e.g. by activating a see more link.

In block a query is directed to an event history table e.g. event history table for events having a first user as the actor of the event e.g. creation of an account or on which the event occurred e.g. a post to the user s profile . In various implementations the query may be initiated by a second user from the user s profile page a home page of a user requesting the profile feed e.g. from a list of users being followed or from a listing of different users e.g. obtained from a search or from browsing . Various mechanisms for determining aspects of events and obtaining information from tables can be the same across any of the methods described herein.

In block a security check may also be performed on whether the second user can see the first user s profile. In one implementation any user can see the profile of another user of the same tenant and block is optional.

In block a security access check can be performed for the feed tracked updates based on record types records and or fields as well security checks for messages. In one implementation only the feed tracked updates related to records that the person has updated are the ones that need security check as the feed items about the user are readable by any user of the same tenant. Users of other tenants are not navigable and thus security can be enforced at a tenant level. In another implementation messages can be checked for keywords or links to a record or field that the second user does not have access.

As users can have different security classifications it is important that a user with a low level security cannot see changes to records that have been performed by a user with high level security. In one implementation each feed item can be checked and then the viewable results displayed but this can be inefficient. For example such a security check may take a long time and the second user would like to get some results sooner rather than later. The following blocks illustrate one implementation of how security might be checked for a first user that has a lot of feed items but the second user cannot see most of them. This implementation can be used for all situations but can be effective in the above situation.

In block a predetermined number of entries are retrieved from the event history table e.g. starting from the most recent which may be determined from the event identifier . The retrieved entries may just be ones that match the user ID of the query. In one implementation entries are checked to find the entries that are associated with the user and with a record i.e. not just posts to the user account . In another implementation those entries associated with the user are allowed to be viewed e.g. because the second user can see the profile of the first user as determined in block .

In block the record identifiers are organized by type and the type is checked on whether the second user can see the record types. Other checks such as whether a record was manually shared e.g. by the owner can also be performed. In one implementation the queries for the different types can be done in parallel.

In block if a user can see the record type then a check can be performed on the specific record. In one implementation if a user can see a record type then the user can see all of the records of that type and so this block can be skipped. In another implementation the sharing model can account for whether a user below the second user e.g. the second user is a manager can see the record. In such an implementation the second user may see such a record. In one implementation if a user cannot see a specific record then comments on that record are also not viewable.

In block field level sharing rules can be used to determine whether the second user can see information about an update or value of certain fields. In one implementation messages can be analyzed to determine if reference to a particular field name is made. If so then field level security can be applied to the messages.

In block blocks are repeated until a stopping criterion is met. In one implementation the stopping criteria may be when a maximum number e.g. 100 of entries that are viewable have been identified. In another implementation the stopping criteria can be that a maximum number e.g. 500 of entries from the entity feed tracked update table have been analyzed regardless of whether the entries are viewable or not.

In one implementation a news feed can be generated as a combination of the profile feeds and the entity feeds e.g. as described above. In one implementation a list of records and user profiles for the queries in blocks and can be obtained from user subscription table . In one implementation there is a maximum number of objects that can be followed.

In block data indicative of an event is received. The data may be the same and identified in the same way as described for block . The event may be written to an event history table e.g. table .

In block the object s associated with the event are identified. In various implementations the object may be identified by according to various criteria such as the record being changed the user changing the record a user posting a message and a user whose profile the message is being posted to.

In block the users following the event are determined. In one implementation one or more objects that are associated with the event are used to determine the users following the event. In one implementation a subscription table e.g. table can be used to find the identified objects. The entries of the identified objects can contain an identifier e.g. user ID of each the users following the object

In block the event and the source of the event e.g. a record for a record update or a posting user for a user generated post are written to a news feed table along with an event identifier. In one implementation such information is added as a separate entry into the news feed table along with the event ID. In another implementation each of the events for a user is added as a new column for the row of the user. In yet another implementation more columns e.g. columns from the other tables can be added.

News feed table shows an example of such a table with user ID and event ID or pointer . The table can be organized in any manner. One difference from event history table is that one event can have multiple entries one for each subscriber in the news feed table . In one implementation all of the entries for a same user are grouped together e.g. as shown. The user U is shown as following events E and E and thus any of the individual feed items resulting from those events. In another implementation any new entries are added at the end of the table. Thus all of the followers for a new event can be added as a group. In such an implementation the event IDs would generally be grouped together in the table. Of course the table can be sorted in any suitable manner.

In an implementation if the number of users is small then the feed items in one or more of the tables may be written as part of the same write transaction. In one implementation the determination of small depends on the number of updates performed for the event e.g. a maximum number of update operations may be allowed and if more operations are performed then the addition of the feed items is performed. In one aspect the number of operations can be counted by the number of rows to be updated including the rows of the record which depends on the update event and the rows of the feed tracked update tables which can depend on the number of followers. In another implementation if the number of users is large the rest of the feed items can be created by batch. In one implementation the feed items are written as part of a different transaction i.e. by batch job.

In one implementation security checks can be performed before an entry is added to the news feed table . In this manner security checks can be performed during batch jobs and may not have to be performed at the time of requesting a news feed. In one implementation the event can be analyzed and if access is not allowed to a feed item of the event then an entry is not added. In one aspect multiple feed items for a same user may not result from a same event e.g. by how an event is defined in table and thus there is no concern about a user missing a feed item that he she should be able to view.

In block a request for a news feed is received from a user. In one implementation the request is obtained when a user navigates to the user s home page. In another implementation the user selects a table link or other page item that causes the request to be sent.

In block the news feed table and other tables are accessed to provide displayable feed items of the news feed. The news feed can then be displayed. In one implementation the news feed table can then be joined with the event history table to determine the feed items. For example the news feed table can be searched for entries with a particular user ID. These entries can be used to identify event entries in event history table and the proper information from any child tables can be retrieved. The feed items e.g. feed tracked updates and messages can then be generated for display.

In one implementation the most recent feed items e.g. 100 most recent are determined first. The other feed items may then be determined in a batch process. Thus the feed item that a user is most likely to view can come up first and the user may not recognize that the other feed items are being done in batch. In one implementation the most recent feed items can be gauged by the event identifiers. In another implementation the feed items with a highest importance level can be displayed first. The highest importance being determined by one or more criteria such as who posted the feed item how recently how related to other feed items etc.

In one implementation where the user subscription table is used to dynamically create a news feed the query would search the subscription table and then use the object IDs to search the event history table one search for each object the user is following . Thus the query for the news feed can be proportional to the number of objects that one was subscribing to. The news feed table allows the intermediate block of determining the object IDs to be done at an earlier stage so that the relevant events are already known. Thus the determination of the feed is no longer proportional to the number of object being followed.

In some implementations a news feed table can include a pointer as opposed to an event identifier to the event history table for each event that is being followed by the user. In this manner the event entries can immediately be retrieved without having to perform a search on the event history table. Security checks can be made at this time and the text for the feed tracked updates can be generated.

Feeds include messages and feed tracked updates and can show up in many places in an application interface with the database system. In one implementation feeds can be scoped to the context of the page on which they are being displayed. For example how a feed tracked update is presented can vary depending on which page it is being displayed e.g. in news feeds on a detail page of a record and even based on how the user ended up at a particular page . In another implementation only a finite number of feed items are displayed e.g. 50 . In one implementation there can be a limit specifically on the number of feed tracked updates or messages displayed. Alternatively the limit can be applied to particular types of feed tracked updates or messages. For example only the most recent changes e.g. 5 most recent for a field may be displayed. Also the number of fields for which changes are displayed can also be limited. Such limits can also be placed on profile feeds and news feeds. In one implementation feed items may also be subject to certain filtering criteria before being displayed e.g. as described below.

It can be possible that a user subscribes to many users and records which can cause a user s news feed to be very long and include many feed items. In such instances it can be difficult for the user to read every feed item and thus some important or interesting feed items may not be read. In some implementations filters may be used to determine which feed items are added to a feed or displayed in the feed.

In block one or more criteria specifying which feed items are to be displayed to a first user are received from a tenant. In one implementation the criteria specify which items to add to the custom feed. For example the criteria could specify to only include feed items for certain fields of a record messages including certain keywords and other criteria mentioned herein. In another implementation the criteria specify which items to remove from the custom feed. For example the criteria could specify not to include feed items about certain fields or including certain keywords.

In block the database system identifies feed items of one or more selected objects that match the criteria. The feed items can be stored in the database e.g. in one or more of the tables of . In one implementation the one or more selected objects are the objects that the first user is following. In another implementation the one or more selected objects is a single record whose record feed the first user is requesting.

In block the feed items that match the criteria are displayed to the first user in the custom feed. The generation of text for a feed tracked update can occur after the identification of the feed items e.g. data for a field change and before the display of the final version of the feed item.

In one implementation the criteria are received before a feed item is created. In another implementation the criteria are received from the first user. In one aspect the criteria may only be used for determining feeds to display to the first user. In yet another implementation the criteria are received from a first tenant and apply to all of the users of the first tenant. Also in an implementation where a plurality of criteria are specified the criteria may be satisfied for a feed item if one criterion is satisfied.

Some implementations can provide mechanisms to search for feed items of interest. For example the feed items can be searched by keyword e.g. as entered by a user. As another example a tab or other selection device can show feed items about or from a particular user. In one implementation only messages or even just comments from a particular user can be selected. Besides searching for feed items that match criteria one also could search for a particular feed item.

An example of an interface for the publisher is shown in . The publisher may include a plurality of publisher actions a publisher space a message body a publishing button and a share dropdown menu . Each of the publisher actions may be in the form of GUI buttons links tabs channels or menu items. Publisher actions may be enabled by the API for the publisher . Moreover publisher actions may be configured to perform a create or update operation for or with reference to a record.

Selection of one of the publisher actions may cause the publisher space to display data associated with the publisher action . By way of example the publisher space can include a form having a plurality of data fields for creating a new contact as illustrated in . In another example the publisher space may include content from one or more data sources such as a web page. In still another example the publisher space may expose data from an application hosted on a third party platform such as Heroku .

Data provided in the publisher space may be published into an information feed. In the plurality of data fields allows a user to input information related to the creation of a new contact. Some of the data fields may be greyed out with default values provided. Some of the data fields may be starred to indicate that they are required fields. Such information in the data fields may be published along with a message provided in the message body . The message can include any alpha numeric or other character based user inputs such as words phrases statements questions emotional expressions and or symbols. Selection of the publishing button publishes the information provided in the data fields and the message body to appropriate information feeds. What entities the user wishes to share such information with can be provided by selection of entities from the share dropdown menu .

In a user interface for a mobile device may include a publisher button and an information feed . The publisher button enables a user to access a publisher shown in . The publisher may cover over a portion of the information feed in the user interface of the mobile device. The user may select from among a plurality of publisher actions in the publisher . Publisher actions include Post Photo Files Task Contact and Check In . Selection of a publisher action may cause the publisher to display content and or data fields associated with the publisher action . As shown in selection of the contact publisher action causes the publisher to display a text box for posting a message and a plurality of data fields for creating a new contact. In some implementations of mobile device applications selection of the publisher action causes the user interface to display a keyboard . After populating the data fields and text box with information a user may select the share button to publish the information to one or more appropriate feeds.

A publisher may be configured to publish information to one or more information feeds by creating a visual feedback element such as a feed item. shows an example of a feed item according to some implementations. The feed item may include data submitted from a publisher. The feed item may appear as part of an information feed in a user interface. Here the feed item includes the identity of the entity updating or creating the record a message accompanying data from the publisher the name of the record being updated or created an attachment and topics . Other data from the publisher may also be presented in the feed item . In some implementations the name of the record may be an actionable selection or link that causes the user interface to display a page layout for the record. What information is displayed in the feed item may depend on contextual factors such the profile of the entity viewing the feed item and the page layout on which the feed item is displayed.

Returning to at block a request to interact with a first record is received from the publisher at the one or more computing devices cooperating to perform the method . The first record is related to a parent record stored in the database system. The request at block may be received from an entity via the publisher such as a user who has a user profile in the online social network via the user s smartphone desktop laptop tablet or other mobile computing device. In other instances the request may be received from a group an organization or a record in the online social network.

In some implementations the method may further include determining that the entity has permission to interact with the first record. Conventionally CRM systems limit the interaction with records to system administrators and owners of the records. As such other users or groups cannot directly interact with a record without the assistance or permission of an owner or system administrator. Depending on the access permissions of an entity limitations may be imposed on the types of records that the entity can interact with and the page layouts that the entity is able to view for a specific type of record.

Determining whether an entity has permission to interact with the first record can at least include identifying one or more entity attributes of a profile of the entity. Attributes of the profile of an entity can include for example an entity s role or definition an entity s relationship information an entity s preferences an entity s usage patterns and other metadata associated with an entity s profile. For example an entity s role can indicate membership to a team that collaborates on a certain account record and permission to interact with a record can be determined if the entity is a collaborator to that account record. In another example an entity s role can indicate a job title in an organizational hierarchy. Depending on where the entity stands in the organizational hierarchy the entity may or may not have permission to interact with a certain record.

Additionally determining whether an entity has permission to interact with the first record can at least include identifying one or more record attributes of the first record. Attributes of the first record can indicate the type of record such as whether the record is a lead a case an account an opportunity a task an event a contact or a custom object. Attributes of the first record can also provide other metadata about the record. For example a type of record can be a case and the case can also be a technical issue case e.g. bug or an order processing case e.g. deal for an account. One entity may be permitted to interact with the technical issue case but not the order processing case and vice versa.

Moreover determining whether an entity has permission to interact with the first record can at least include comparing the one or more entity attributes with the one or more record attributes. For example if an entity is identified as Vice President of Sales then he can access and interact with all cases for an account. If an entity is identified as a Sales Associate then he can access and interact with limited types of cases for an account such as cases involving a particular product for example.

In some implementations even if an entity has permission to interact with the first record the types of interactions can be limited. Such limitations can be established for example by a system administrator an owner of the first record or an organization s security permissions policy among others. In some implementations an entity may be restricted to perform only certain actions for interacting with the first record. Thus a publisher in the user interface may disable hide or otherwise not display at least some publisher actions from the entity. For example one entity may be able to view update and create opportunities related to an account and another entity may be able to only view and update opportunities related to the same account. In some implementations an entity may be restricted to view only certain types of information or options for interacting with a record. For example one entity may be able to update all the terms for a contract and a different entity may be able to update only certain terms for the same contract. In another example one entity may be able to view public and private information related to an account and a different entity may be able to only view publicly available information related to the same account.

In some implementations the request to interact with a first record may include a request to create a record a request to delete a record a request to update a record a request to convert a record a request to attach a file to a record a request to download data from a record a request to upload data to a record a request to view information associated with a record and a request to otherwise perform an operation having a reference to the record. For example such operations can include but is not limited to drafting an email approving or rejecting a workflow approval writing a note creating a poll logging a call logging a task logging a bug creating an event sending an email submitting an email for approval posting to a portal posting to a social network adding a link adding a Thanks etc. In some implementations the first record may be a customer relationship management CRM object. A CRM object can include but is not limited to a lead a case an account an opportunity a task a contact a campaign a contract an event a custom object and a Visualforce page. The request to interact with the first record may be generated in response to a user selecting a publisher or custom action in the user interface.

The request to interact with the first record may be a request to interact with a child record related to a parent record stored in a database system. Here the parent child relationship refers to a hierarchical relationship among records in a database system. For example an opportunity can be a child in relation to an account while the account is the parent. In another example a task can be a child in relation to a lead while the lead is the parent.

In an accounts page for Cirrus Inc. includes the publisher with the plurality of publisher actions . In some implementations the same publisher may appear in other pages for different records and entities. In some instances the publisher actions may even be the same. A user may navigate through multiple pages for different records and entities displaying a single or similar user interface.

Here a user may initiate a request to interact with a record by selecting the publisher action Contact to initiate creation of a new contact. The new contact is a child record in relation to the account and the account is the parent record. It is understood that any of the publisher actions may be selected to communicate with an API and initiate a request to interact with a record.

Returning to at block first information associated with the first record is received from the publisher at the one or more computing devices. The first record may be stored or configured to be stored in a database system. The first information may be provided by the entity e.g. user requesting to interact with the first record at block . The first information may be communicated to one or more computing devices performing the method for instance as a signal network in . In some implementations the entity may provide field data in one or more data fields associated with a selected publisher action. For example an event record may include field data such as date and time of the event the names of invitees and the venue. In another example a task may include field data such as the name of the task name or names of the assignee to the task and a due date.

Returning to at block the database system is updated based on the first information associated with the first record. Updates to the first record may include creation of the record deletion of the record editing data associated with the record logging an action to the record conversion of the record attachment of a file to the record downloading data from the record uploading data to the record viewing of information associated with the record and otherwise performing an operation having a reference to the record. In other words the first information associated with the first record at block is used to perform the requested interaction at block . Upon receiving the first information the one or more computing devices can create or update a row representing the first record in the database system. For example in logging an action to the record an update may be performed after an email is sent and then logged to the record or after a post is submitted to an online social network like Twitter or Facebook and then logged to the record. In effect the publisher can perform actions that have behaviors outside of the network domain of the record. Nevertheless such actions are logged to the record.

At block a feed item associated with the update is presented for inclusion in an information feed in the user interface. The feed item includes one or more actionable selections providing a reference to the first record. The reference to the actionable selection can be a display component such as a menu link or graphical button. In some implementations the reference to the first record can open a page in the user interface for the first record. In this way a user can navigate to the first record directly from the feed item. It is not necessary for a user to navigate between records by navigating between different user interfaces.

In some implementations the reference to the first record can perform further actions with respect to the first record. In addition to opening the first record such actions may include but is not limited to creating a second record deleting the first record updating the first record converting the first record attaching a file to the first record downloading data from the first record uploading data to the first record viewing information associated with the first record and otherwise performing an operation having reference to the first record. More specifically examples of actions may include creating a task updating a task creating an opportunity updating an opportunity creating a contact updating a contact creating a case updating a case creating an account updating an account creating an event updating an event logging a call logging a task logging a bug approving a workflow approval rejecting a workflow approval creating an email writing a note creating a poll closing a case completing a task closing a bug sending an email submitting an email for approval posting to a portal posting to a social network adding a link and adding a Thanks Thus actions may be performed directly from the feed item upon the first record without navigating to another page.

The one or more actionable selections may reference the publisher to provide more data fields that enables a user to further interact with the first record. In some implementations selecting the one or more actionable selections may cause the publisher to be operable to receive second information. The second information may be used to perform one of the operations on the first record. Or the second information may be used to interact with the second record. The second record may have a parent child relationship with the first record. In some implementations the second record is a child of the first record. In this way providing a reference to perform further actions from the feed item allows a user to perform actions directly within the information feed itself.

A user may select the link to advance from the account record for Cirrus Inc. to the contact record for Chuy Santiago. This allows a user to efficiently navigate to another record directly from the information feed .

Returning to at block a user input is received selecting the one or more actionable selections. The one or more actionable selections may be a menu graphical button or link configured to provide a reference to the first record. The reference to the first record may perform an action with respect to the first record such as opening the first record in the user interface creating a second record from the first record updating the first record deleting the first record converting the first record attaching a file to the first record downloading data from the first record uploading data to the first record viewing information associated with the first record or otherwise performing an operation having a reference to the first record. For example the actionable selection can be a reply button to respond to an email. In another example the actionable selection can be an approve button to respond to a workflow approval request. In some implementations the reference to the first record may cause the publisher to be operable to receive second information associated with a second record.

At block second information associated with the first record or a second record is received from the publisher at the one or more computing devices. The second record may be a child record of the first record or of the parent record. The second record may be stored or configured to be stored in the database system. In some implementations the second record may be a CRM object such as a lead a case an account an opportunity a task a contact a campaign a contract an event a custom object and a Visualforce page. In some implementations the second information may be provided in one or more data fields associated with the first record or the second record. The values in the one or more data fields may be user defined or system generated. In some implementations values may be retrieved from a database service such as Data.com or Database.com .

At block the database system is updated based on the second information. Updates to the first record or second record may be made via the publisher without leaving the user interface which can include the publisher and the information feed. Thus multiple interactions may be performed with one or more records from a single user interface.

In in one example an app server in the on demand service environment of includes one or more processors configured to perform part or all of blocks . In other instances additional servers cooperate with app server to perform the blocks. When first information for example is received at block such information can be received by a server over a data network from a user operating a user system as shown in . In other instances such data is received from a proxy server on behalf of a user or other data source. Various implementations of method are possible such that any of the servers described above with reference to or other computing devices disclosed herein can be configured to receive and process user inputs and information updates in accordance with method .

In some implementations interactions with multiple records through a common user interface can be exemplified in the method of . Such interactions can advance a CRM or non CRM lifecycle while operating in the context of a publisher and an information feed. An example of a CRM lifecycle can be shown in as discussed earlier herein. Another example of a CRM lifecycle can be shown in .

The service agent may select any one of the publisher actions to cause the publisher to display data fields associated with the selected publisher action . In some implementations selection of the publisher action may cause the publisher to display an application or content from a data source. In some of the data fields are text boxes configured to receive character based values one of the data fields is a checkbox and some of the data fields are dropdown menus. The service agent may input values into some of the data fields in the publisher . In some of the data fields the service agent may perform a search query and or utilize an auto complete function to input values. In some implementations default values may be provided in some of the data fields .

The service agent may publish information entered into the data fields by selecting the Convert Lead button . The information from the publisher may be submitted to a database system. The Mr. JimBob Lead is deleted and a Mr. JimBob Opportunity is created where the Mr. JimBob Opportunity is stored in the database system. In some implementations another record may be simultaneously interacted upon with the creation of the Mr. JimBob Opportunity. In this instance a task is simultaneously created with the conversion of the Mr. JimBob Lead to the Mr. JimBob Opportunity. A feed item not shown is created for presentation in the information feed . The feed item may provide functionality in the user interface to navigate to the Mr. JimBob Opportunity page or perform other actions with reference to the Mr. JimBob Opportunity from the information feed . The navigation and or actions can be performed without leaving the user interface. In other words the service agent or another entity need not navigate through separate user interfaces to perform actions on one or more records. The feed item may be published in multiple related feeds through cross referencing which is discussed in more detail in Section XIII below.

In the service agent has selected the publisher action for creating a service contract with data fields for the contract name start date and end date. The service agent may input values into each of the data fields in the publisher .

The service agent may publish information entered into the data fields by selecting the Create Contract button . The information from the publisher may be submitted to a database system. A service contract record is created and stored in the database system. This may be represented by a row in a table in the database system. The service contract record is related to the Mr. JimBob Opportunity as a child record to a parent record. A feed item not shown is created for inclusion in the information feed . The feed item may include functionality in the user interface to navigate to the service contract record or perform other actions with reference the service contract record from the information feed . The navigation or actions can be performed without leaving the user interface.

In the service agent has selected the publisher action for adding a product with data fields for the product quantity and sales price. The service agent may input values into each of the data fields in the publisher .

The service agent may publish information entered into the data fields by selecting the Add button . The information from the publisher may be submitted to a database system. A contract line item for a product is created and stored in the database system. This may be represented by a row in a table in the database system. The contract line item for the product is related to the service contract record as a child record to a parent record. A feed item not shown is created for presentation in the information feed . The feed item may include functionality in the user interface to navigate to the contract line item or perform other actions with reference the contract line item from the information feed . The navigation or actions can be performed without leaving the user interface.

A user can navigate and advance through a CRM lifecycle in a single and standardized user interface as illustrated in . Thus a user does not need to navigate and learn multiple user interfaces to interact with each of the records through the CRM lifecycle. As records are created and or updated the user can immediately navigate and perform actions on the newly created or updated records through the information feed and the publisher. In other words everything can be done through the information feed and the publisher in a CRM lifecycle.

In some implementations the publisher and the information feed may also be utilized as a common user interface to advance a non CRM lifecycle. By way of example a financial services agent may receive a call from a customer regarding an investment. The financial services agent can input the customer information to access the customer s investment record. From the customer s investment record page a user interface can include a publisher and an information feed. The financial services agent can add remove or update an investment in the customer s investment record via the publisher. A feed item is presented in the information feed of the customer s investment record with one or more actionable selections to the investment. The investment can include for example an IRA a Roth IRA or mortgage among others. The financial services agent can access the investment through the feed item and continue to advance the non CRM lifecycle.

In another example a health insurance agent may receive a call from a customer regarding his or her insurance coverage. The health insurance agent may input the customer information to access the customer s health insurance plan. From the customer s health insurance plan page a user interface can include a publisher and an information feed. In some implementations a custom object may be provided with the user interface to represent the health insurance plan coverage product limits and coverage figures. Depending on the coverage that the customer is interested in the health insurance agent can add remove or update the customer s health insurance plan via the publisher. This can include adding or removing products in the health insurance plan. This can also include updating limits and coverage figures. A feed item is presented in the information feed of the customer s health insurance plan with one or more actionable selections to the product or coverage. The health insurance agent can access the product or coverage through the feed item and continue to advance the non CRM lifecycle.

In another example a user may want to file an expense report under an account. The user may access the account record where the user interface of the account record includes a publisher and an information feed. In some implementations the publisher may expose a third party application such as Concur for expense reporting. In some implementations the publisher may include a custom action such as File New Expense Report . The user may file the expense report via the publisher and publish the information into the information feed as a feed item. The feed item may include one or more actionable selections to link to the newly created expense report. The user may access the expense report through the feed item to advance the non CRM lifecycle.

At block a feed item associated with the update based on the first information is presented for inclusion in an information feed of the parent record in the user interface. The feed item may provide a visual feedback element representing the first information from the publisher in the information feed of the parent record. While the feed item may be presented for inclusion in a number of different feeds as will be discussed in more detail below the feed item may be at least presented for inclusion in the information feed of the parent record. In some implementations the feed item may include one or more actionable selections providing a reference to the first record. As a result a user can navigate to the first record directly from the feed item. In some implementations the reference to the first record can perform further actions with respect to the first record. Such actions may include creating a second record deleting the first record updating the first record converting the first record attaching a file to the first record downloading data from the first record uploading data to the first record viewing information associated with the first record and otherwise performing an operation having reference to the first record e.g. logging a call creating an email approving or rejecting a workflow approval etc. . In some instances selecting the one or more actionable selections may cause the publisher to be operable to receive second information.

In a feed item is presented for inclusion in an information feed for a parent record as shown in the accounts page . After a user Daniel Cheng creates a new contact child record the feed item is published at the top of the information feed for the account parent record . The feed item includes an actionable selection or link to the newly created contact Chuy Santiago . A user may also perform various actions on the feed item including posting a comment on the feed item liking or disliking the feed item or sharing the feed item . Such actions may affect the same feed item as presented in other related feeds. A user may select the link to advance from the account record for Cirrus Inc. to the contact record for Chuy Santiago.

Returning to at block one or more entities cross referenced with the feed item are identified. Cross referencing of feed items can be achieved in a number of ways. Identification of cross referenced entities can be obtained from cross referencing data. In some implementations such cross referencing data may be received from an API. The number of cross referenced entities may be limitless and each of the cross referenced entities may be defined by a payload in the API. For example a user may define the cross referencing data in the payload of the API. In some implementations the API is utilized by the publisher to provide the payload and the cross referencing data.

In some implementations after receiving the request to interact with the first record the publisher may be caused to display one or more data fields of the first record the one or more data fields configured to receive the first information associated with the first record. At least one of the one or more data fields is configured to receive cross referencing data defining the one or more entities to cross reference with the feed item. The cross referenced entities can include users groups organizations and records. In some implementations the cross referencing data may be user defined such as defined by user input values in a payload.

In some other implementations the cross referencing data may be machine or system defined. In other words identification of the cross referenced entities may be hard coded. For example a system administrator or owner of the parent record can establish default values for the cross referencing data. In some instances the cross referenced entities can include the first record and the parent record of the first record. In some instances the cross referenced entities can include the first record the parent record of the first record a child record of the first record a user subscribing to the first record the user interacting with the first record and a user following the user interacting with the first record. It is understood that any number of combinations of the aforementioned entities may be cross referenced with the feed item.

Identification of cross referenced entities can be based at least in part on record relationship information where the record relationship information can be retrieved from the database system. Record relationship information may indicate that a child record is related to one parent record or to multiple parent records. For example record relationship information may indicate that a deal record is related to multiple account records in the database system. In some instances the record relationship information may indicate that the child record is a parent record to further child records.

Record relationship information of the first record can help determine at least one of the one or more entities to be cross referenced with the feed item. As the feed item is presented for inclusion in the information feed of the parent record of the first record the feed item can be cross referenced with other entities related to the parent record or the first record. What entities are related to the parent record and or the first record can be provided by the record relationship information. For example feed item can be cross referenced with multiple parent records of the first record.

At block the feed item associated with the update is provided in one or more information feeds of the one or more entities cross referenced with the feed item. Where the feed item is propagated can be based on cross referencing data or record relationship information. The same feed item as displayed in the information feed of the parent record may be propagated and displayed across multiple users groups organizations and records. As a result a single conversation thread may be published multiple times in the information feeds of different users groups organizations and records. Cross referencing of a feed item across multiple users groups organizations and records may be preferred over copying or re posting the feed item in different places. By copying or re posting the feed item in different places actions taken on an original feed item are not typically published in a copy of the original feed item or a re posting of the original feed item. This can lead to several different conversation threads on the original feed item and copies of the feed original feed item. By propagating the same feed item across multiple entities with cross referencing other users can interact with or otherwise perform an action on the feed item without having to navigate across multiple user interfaces. For example collaborators for a particular record can interact with the feed item from their news feed the record feed of the parent record or the record feed of the first record if the feed item is cross referenced with such entities.

By way of example a user can create a new task. In creating the new task the user can associate the task with an opportunity and with a case. In addition the user can associate the task with 10 contacts. Upon creating the task by a publisher information regarding the task is published to a feed item. The feed item is cross referenced with the opportunity the case and each of the 10 contacts so that the feed item is propagated in the information feeds of each of those entities.

Typically a feed item is published within the information feed of the parent record as discussed earlier herein. However the feed item may be propagated and published in other information feeds of cross referenced or related entities. By way of example if a user is creating a contact i.e. child record from an account i.e. parent record page then the feed item can be propagated in at least the accounts record feed. In some implementations the feed item can also propagated in the record feed of the newly created contact. In some implementations the feed item can also be propagated in other records feeds of multiple parent records of the newly created contact. In some implementations the feed item can also be propagated in the news feed of users subscribed to the parent record or the child record.

The creation of the feed item may be the result of the creation of a new contact from the sequence of actions illustrated in . Whereas shows the feed item as displayed in the information feed for the accounts record shows the feed item as displayed in the information feed for the contact record. The feed item in may be cross referenced with the child record so as to display the feed item in . In some instances cross referenced feed items as displayed in different information feeds may render different information. For example while the feed item includes a link to the child record in the feed item does not include such a link.

Cross referenced feed items are the same feed items propagated across different feeds. However the cross referenced feed items may be rendered differently depending on contextual factors. One such contextual factor can entail the profile of the user viewing the cross referenced feed item such as whether the user has a role or definition capable of approving a workflow or whether in which case an approval button may appear in the cross referenced feed item. Another contextual factor can include the page layout on which the cross referenced feed item is displayed such as whether the page layout is a home page of the user the parent record page the child record page etc. Another contextual factor can include the type of device on which the cross referenced feed item is rendered such as whether the device is a smartphone a tablet laptop or a desktop. Thus while cross referenced feed items are the same e.g. same row of information in a table of a database system the cross referenced feed items may render different information depending on context. For example the preamble of the cross referenced feed item or the auxiliary body of the cross referenced feed item may present different information in different feeds.

At block a computing device or any number of computing devices cooperating to perform the method may provide data to generate a user interface including a publisher with a custom action. The custom action is configured to interact with a data object in accordance with custom action instructions provided by a first entity via an application programming interface API . The data object is stored or configured to be stored in a database system. The data object can have a data structure defined by the database service a standard object or defined by a user custom object .

A user or organization such as a partner or customer may wish to define a custom action for inclusion in a publisher. The user or organization may utilize an API which can provide the framework or functionality to enable a user or organization to create their own custom actions. A custom action enables processing of data related to the data object through the publisher. Like publisher actions the custom action can perform operations such as creating a record deleting a record editing data associated with a record logging an action to a record converting a record downloading data from a record uploading data to a record attaching a file to a record and viewing information associated with a record. By way of example in logging an action to a record the custom action may be configured to send an email and then log that email to the record or the custom action may be configured to post to another online social network such as LinkedIn and Twitter and then log that post to the record. The custom action may perform an action that has a behavior outside the network domain of the record.

In some implementations a custom action may be made available to a plurality of users within or associated with an organization. Alternatively or additionally a custom action created by a first entity such as an organization may be provided for use by other organizations and users. A database service provider may provide a marketplace or exchange in which entities that create applications such as a custom action may freely distribute sell or exchange applications with other entities.

A user interface of a database service may allow a user to create a custom action. Examples of database services for creating custom actions may include Force.com and Work.com provided by Salesforce.com . A user or organization may also create new custom actions within the online social network including Chatter . A user may create new custom actions programmatically or declaratively.

In some implementations the method may further include receiving at the computing device the custom action instructions from a user where the custom action instructions are configured to define the data object and configured to define one or more data fields associated with the data object. From a client machine a user may access the database service and utilize the API to create client side scripting instructions for the custom object. In some implementations the API may allow users to have limited access to source code and computing environment to create the publisher with the custom action.

While a user may initiate creation of a custom action using the API from a database service a user may initiate creation of a custom action using the API within the online social network itself. shows an example of a user interface including a publisher configured for users to create a custom action from the publisher according to some implementations. The user interface in the online social network can display the publisher and an information feed . A user may initiate creation of the custom action by selecting More from a layout of actions in the publisher to produce a dropdown menu and then selecting Customize from the dropdown menu.

It is understood that a user may initiate creation of a custom action using any number of pathways in any number of user interfaces. For example a control region separate from a publisher in the user interface may enable a user to select a tab channel or button to initiate creation of a custom action. A search query tool from the database service or the online social network may also display results allowing a user to select a link to initiate creation of a custom action.

After initiating the creation of the custom action the user may provide custom action instructions associated with the custom action. The custom action instructions may define the data object and one or more data fields associated with the data object. shows an example of a user interface including a custom action definition area for creating the custom action according to some implementations. The user interface includes a custom action definition area which includes a plurality of custom fields and a page layout area . A user can define the custom action instructions utilizing the API by providing values in each of the custom fields .

In some implementations an API may be provided by an entity such as a database service provider which includes a set of pre defined instructions that perform at least some of the operations of the custom action. The pre defined instructions may be provided in for example Javascript Java Apex or any other programming language for implementing at least some of the operations of the custom action. The operations may include operations that are likely to be common to many or all custom actions. For example the instructions may be responsible for creating an area of the user interface for displaying the custom action handling receipt of custom action triggering messages from a client machine transmitting updated custom action messages to the client machine and other such operations.

Thus a user can provide definitions in the custom fields in to provide custom action instructions that interact with the API. The custom action instructions may integrate directly with the pre defined instructions provided in the API.

One of the definitions in the custom action instructions can include Object Name . In some implementations a default value may be provided based on the source of initiating the creation of the custom action. Another definition in the custom action instructions can include Action Type . The Action Type displays a value indicating the type of action to be performed for interacting with the data object. In some implementations the Action Type is not limited to interacting with a data object but can include other actions such as exposing third party applications or content. Such actions are discussed in more detail in Section X. In some implementations a user may select from a list of possible values in Action Type such as Create a Record Create a Custom Page e.g. Custom Visualforce Page and Update a Record among others. Other possible actions can include Log a Call Send Email Send SMS Change Status Social Post Canvas and Aura .

Additional definitions in the custom action instructions can include Target Object . The Target Object describes the data object that the custom action is configured to interact with. In some implementations the value provided in the Target Object includes a child record of the parent record. The child record and the parent record can be a CRM object such as a lead a case an account an opportunity a task a contact a campaign a contract an event a custom object and a Visualforce page. Other definitions in the custom action instructions can include the Record Type the Relationship Field the Label the API Name the Description and the Icon . The display of some of the custom fields may depend on the Action Type . In defining the Action Type to Create a Record causes the user interface to display custom fields .

Furthermore the user may provide additional custom action instructions by defining in the page layout area the pages in which the custom action will appear. Thus a custom action may be accessible on specified pages in the online social network.

Returning to the method in the data to generate a user interface including a publisher with a custom action at block may determine whether the custom action is displayed in the user interface. The data may include custom action instructions as to the pages on which the custom action would be provided as discussed above. In addition the data may include custom action instructions as to the entities which have permission to access the custom action. A custom action may be provided to all users in an organization. Alternately a custom action may be limited to a specific subset of users such as a group.

Custom action instructions may also be configured to define the one or more data fields associated with the data object. shows an example of a user interface for an action layout editor displaying data fields associated with a custom action according to some implementations. Each of the data fields can represent information to be provided to the data object. In some implementations the information can be generated from a user. In some implementations the information can be generated from a machine or system. Some of the data fields may also be configured to be required fields for input.

By selecting the Fields option a user can configure the data fields using the action layout editor to be associated with the custom action. The action layout editor includes a plurality of available fields that can be associated with the custom action. Examples of available fields include First Name Last Name Phone Email Birthdate Last Modified Created By Opportunity Name Account Name Next Step Amount Close Date Stage and Description among others.

An available field can become a data field associated with the custom action by dragging and dropping one of the available fields into a customizable publisher space . shows an example of the user interface for the action layout editor in which an additional data field is associated with the custom action. A user can place the additional data field in the customizable publisher space to determine an action layout of the data fields . In some implementations handling limits can be imposed to limit the quantity or types of data fields that can be positioned in the publisher space .

The action layout represents the arrangement of the data fields in the publisher. The action layout for a custom action may differ according to the API. shows an example of a window previewing the display of data fields associated with a custom action according to some implementations. Here the arrangement of the data fields in the customizable publisher space is shown in a two column arrangement. This arrangement of the data fields may be useful for display in display devices having a wide screen such as a desktop laptop or tablet display device.

Custom action instructions may also be configured to define a page layout of the custom action in the publisher. shows an example of a user interface for a page layout editor displaying publisher actions associated with a record according to some implementations. Each of the publisher actions represents an action that can be performed on a data object or with reference to a data object.

By selecting the Actions option a user can configure the publisher actions using the page layout editor for a particular page layout. Page layouts can differ across pages for different records groups users and organizations. For example a publisher action for creating a contact may be displayed on a partner account page but not displayed on a customer deal page. The page layout editor includes a plurality of available actions that can be included in the page layout. Examples of available actions include Contact File Link Log a Call Opportunity Polls Post Task and Thanks among others.

An available action can become a publisher action by dragging and dropping one of the available actions in the page layout for the publisher. One of the available actions can be a custom action . A user can position the custom action among one or more publisher actions to determine a page layout of the custom action in the publisher. The page layout can represent the arrangement of the custom action relative to the publisher actions in the publisher. The area for the publisher actions can be restricted to a particular area of the publisher. By cabining the publisher actions to a limited area the publisher actions may be prevented from altering how the rest of the publisher is displayed.

By establishing a predefined or default value for a data field any user who initiates the custom action from a publisher will already be provided with predefined or default values in the data field. In some implementations the predefined or default values in the data field may not be changed.

While some custom actions may be limited to display in user interfaces depending on the page being accessed or the user access permissions some custom actions may not be so limited. Such actions may be referred to as global actions. show user interfaces of different aspects of creating a global action.

After initiating the creation of the global action the user may provide global action instructions associated with the global action. shows an example of a user interface including a global action definition area for creating the global action according to some implementations. Providing global action instructions can occur in an identical or similar manner as providing custom action instructions which is described earlier herein. However global actions are not necessarily limited to certain pages in the online social network but can be displayed across a wider range of pages including a details page a home page and a Chatter page.

The user interface includes a global action definition area which includes a plurality of global fields . The number of global fields in the global action definition area may be less than the number of custom fields for creating a custom action because the user need not specify relationships and other information.

The user may also provide additional global action instructions by defining the page layout area the pages in which the global action will appear. Here the pages that can be selected are not limited to pages having a parent child relationship with the data object being acted upon but the pages that can be selected include pages across the online social network.

Global action instructions may be configured to define a page layout of the global action in the publisher. shows an example of a user interface for a page layout editor displaying publisher actions associated with an on demand database service environment according to some implementations. Each of the publisher actions represents an action that can be performed on a data object or with reference to a data object from any of a plurality of pages across the online social network.

By selecting the Actions option a user can configure the publisher actions using the page layout editor . The page layout editor includes a plurality of available actions that can be included in the publisher. An available action can become a publisher action by dragging and dropping one of the available actions into the page layout of the publisher. A user can position an available action among one or more publisher actions to determine a page layout of the publisher.

The publisher includes a plurality of publisher actions . In some implementations at least one of the publisher actions may be a custom action. In some implementations additional publisher actions may be accessed by hovering over the publisher and sliding the publisher in a lateral direction. A button in the user interface may enable a user to display or hide the publisher actions . In fact the button may be configured to show more publisher actions including actions from a pre defined list of admin installed configured actions.

In some implementations a custom action may be made available to a plurality of users within or associated with an organization and or for use by other organizations and users. The AppExchange custom action may allow users that create applications such as custom actions to freely distribute sell or exchange applications with other entities.

Returning to at block a request to interact with the data object is received via selection of the custom action in the user interface from a second entity. In some implementations the second entity is a user or organization different from the first entity. In some implementations the second entity is a user or organization that is identical with the first entity.

The method may further include determining that the second entity has permission to interact with the data object. Depending on the access permissions of the second entity limitations may be imposed on the data objects that the second entity can interact with. Such limitations can be established by for example a system administrator an owner of the data object or an organization s security permissions policy among other means.

In some implementations the request to interact with the data object may include a request to create the data object a request to delete the data object a request to update the data object a request to convert the data object a request to download data from the data object a request to upload data to the data object a request to attach a file to the data object a request to view information associated with the data object and a request to otherwise perform an operation having a reference to the data object.

The request to interact with the data object may be generated in response to a user selecting a custom action in the user interface. In some implementations the selection of the custom action may be generated from a user input from a user interface component displayed within the publisher. Examples of selecting such a user interface components displayed within the publisher include publisher or custom actions displayed in . Moreover the user interface component may be part of a customized graphical user interface created from a customization tool. A partner or customer may customize the visual representation of the publisher and user interface components according to their preferences using a customization tool such as Visualforce. Such a customization tool may provide the framework that allows users to build custom user interfaces that can be hosted natively by the on demand service environment. Users utilizing a customization tool like Visualforce may add customized user interface components to the publisher. Therefore the publisher may serve as an interface for all user interactions with a record eliminating the need for different applications devices or windows for different actions.

In some implementations the selection of the custom action may be generated from a user input from a user interface component displayed outside of the publisher. Examples of selecting such a user interface component displayed outside of the publisher include actionable selections in .

Returning to at block first information for one or more data fields associated with the data object is received from the publisher at the one or more computing devices. The data object may be stored or configured to be stored in a database system. The first information may be provided by the user requesting to interact with the data object at block . The first information may be communicated to one or more computing devices performing the method for instance as a signal network in .

In some instances validation rules may be implemented with the one or more data fields to validate certain inputs. shows an example of a user interface including a publisher displaying a plurality of data fields for a publisher action and validation rules associated with one or more data fields according to some implementations. The one or more computing devices may perform a validation check of the values provided in each of the data fields against threshold values. The threshold values may be provided by an entity in the custom action instructions that define the one or more data fields. A value provided in one of the data fields may be compared to a set of threshold values and if it is determined that the value satisfies the set of threshold values then the value is validated. For example in a Close Date can establish a validation rule for a calendar date in which the calendar date must be in the future. Furthermore an Early Field Indicator can establish a validation rule that some value be entered.

Returning to at block the database system is updated based on the first information for the one or more data fields associated with the data object. Updates to the data object may include creation of the data object deletion of the data object editing data associated with the data object logging an action associated with the data object conversion of the data object downloading data from the data object uploading data to the data object attachment of a file to the data object viewing of information associated with the data object and otherwise performing an operation having a reference to the data object. In other words the first information associated with the data object at block is used to perform the requested interaction at block . For example upon receiving the first information the one or more computing devices can create or update a row in a table representing the data object in the database system.

At block a feed item associated with the update is presented for inclusion in an information feed in the user interface. The feed item provides a visual feedback element for presenting at least some of the updated data in the information feed. The data presented in the feed item can depend on one or several contextual factors. In some instances the feed item can include an actionable selection providing a reference to the data object. As discussed earlier herein the same feed item may be propagated in other related feeds by cross referencing.

A custom action may be provided by a third party and configured to execute some of the sequence of steps described above. One example of a custom action that may be provided by a third party is a Bug custom action. shows an example of a publisher for logging a bug according to some implementations. shows an example of a corresponding feed item created from publisher data provided in according to some implementations. Using a Bug custom action a user may create a record from the publisher and publish information as a feed item in an information feed. Such information may include publisher data such as Subject Frequency Impact Found in and Product Tag. The publisher may also include a text box for posting a message to accompany the feed item a dropdown menu to select specific entities to publish the publisher data to their respective feeds and a Share button to publish the publisher data .

Another example of a custom action that may be provided by a third party is an Expense Report custom action. shows an example of a publisher for filing an expense report according to some implementations. shows a corresponding feed item from the publisher data provided in according to some implementations. shows another corresponding feed item from the publisher data provided in according to some implementations. Using the Expense Report custom action a user may submit an expense report for approval from the publisher . Publisher data may include Name Policy Purpose Amount Item and Receipt. In some instances the publisher may communicate with an application such as Concur to obtain values for the publisher data . A receipt may be attached and transmitted with the publisher data . The publisher may also include a text box for posting a message to accompany feed items and a dropdown menu to select specific entities to publish the publisher data to their respective feeds and a Share button to publish the publisher data .

In the user interface includes a custom action definition area which includes a plurality of custom fields . A user can define the custom action instructions by providing values in each of the custom fields . By selecting Custom Action a user may identify a Visualforce page to associate with the Custom Action . The Visualforce page may be defined previously by an entity to create a case on an Account . The user may further define the Visualforce page by providing values to its Height Label Name Description and Icon .

Selection of the Visualforce page refers to a set of programmed instructions for generating a customized user interface. The instructions may be provided in for example Javascript Java Apex or any other programming language. Using a customization tool such as Visualforce can allow users to provide instructions that can determine the overall layout and appearance of the user interface including the publisher custom action and the information feed as well as determine the operations performed by various user interface components.

As shown in the example in the user interface for the Visualforce page layout can include a publisher and an information feed . The user can customize the publisher to be able to be an email publisher a call log publisher and a portal answer publisher. In other words the publisher may include custom actions configured to email a customer to log a call and to answer inquiries through a web portal. The layout and dimensions of the publisher and other frames in the page layout hosting components such as the information feed may be defined in the custom action instructions according to the first entity s preferences.

In some implementations the user interface that is displayed may depend on contextual factors including the access permissions of the entity the type of record the type of page the type of display device etc. For example what data fields are displayed what publisher actions are available and the layout of the user interface components can depend on the type of entity that is navigating the user interface.

The user interface may be defined by custom action instructions either declaratively utilizing an API such as one provided by salesforce.com or programmatically utilizing a customization tool such as Visualforce which may be provided with its own API and set of pre defined instructions. Users with less technical skills may develop user interfaces declaratively while users or organizations with more complex data management needs may prefer a customization tool in customizing user interfaces.

Returning to at block a request to expose an application is received using the publisher. The request to expose the application may be received in response to a user selecting a button link tab or menu selection in the publisher via the user s smartphone desktop laptop tablet or other mobile computing device. The application can be exposed within a publisher space and interactions can be performed on the application through the publisher space via the API. The application can be integrated with the API provided by a database service provider such as salesforce.com.

In some implementations the application is hosted natively in the on demand service environment. In some implementations the application is hosted on a third party platform. The third party platform may include one or more database systems outside of the on demand service environment. The application can be hosted on a platform service including but not limited to Site.com Heroku Force.com and AppExchange .

While the actual code for running the application may be hosted on the third party platform the application is configured to communicate with the API provided in the on demand service environment. This API may enable integration of an application such as a third party application into the on demand service environment. For example the API may consist of a set of tools and Javascript APIs that enables integration with the third party application into the on demand service environment. The Javascript APIs provide a communication bridge so that the third party application can communicate with a browser page.

At block content from the application is exposed in the publisher via the API. The content from the application may be exposed in a standard user interface or customized user interface such as a Visualforce page. In some implementations exposing the content in the publisher includes retrieving the content from a database system and presenting the content for display in a publisher space in the publisher. In some instances the database system can be stored outside of the on demand service environment.

Content as exposed in the publisher space can originate from any number of data sources. In some implementations such data sources can include analytics external data sources feeds and direct events among other data sources. For example the exposed content can be a video stream provided from a videoconferencing service. In another example the exposed content can be a map provided from a web mapping service application. The publisher space provides a frame or window by which the content can be viewed in the user interface and the content from the data source can interface with the API to communicate with the browser page.

Returning to at block a user input is received regarding the exposed content to interact with the application. The user input may be transmitted to one or more computing devices performing the method for instance as a signal network in . In some instances the user input can include selection or entry of information for transmission to one or more computing devices.

From a user interface a user can communicate with an application such as a third party application via the API. In the user can select from a list of itineraries in the publisher space and perform a number of actions. For example the user can share an itinerary listed in the publisher space by selection of the Share Itinerary button . This can post the itinerary as a feed item into one or more feeds. As another example the user can request approval for the itinerary from another entity by selection of the Request Approval button . Thus the user can initiate an approval workflow and post the itinerary as a feed item for approval in a specified entity s feed. The specified entity such as the user s manager can interact with the feed item by approving or denying the request. In another example the user can cancel one of the itineraries by selection of the Cancel Trip button . The user can identify the feeds of the entities to which the information will be published by selection of entities in a dropdown menu . Furthermore the user can publish the information to appropriate feeds by selection of a Share button . Therefore a user can take content off platform and manage it using the custom action and the API.

Returning to at block the interaction with the application is performed using the user input via the API. When the interaction is initiated by the user input the application directly interfaces with the API to implement updates with the application. Even if the application is hosted on a third party platform the application directly interfaces with the API to implement updates with the hosting page. In some implementations the performed interaction occurs within the browser page of the user interface. For example the application can be a mortgage calculator exposed in the publisher where the interaction outputs directly into the publisher space. In some implementations the performed interaction does not occur with the browser page of the user interface. Instead the performed interaction occurs with the API and the third party application that avoids opening or refreshing a page in the browser. In other words the browser page is unaware of the updates made to the application hosted on the third party platform. In some instances one or more database systems may be updated according to the performed interaction.

At block the information feed is updated via the API in the user interface according to the performed interaction with the application. The information feed directly interfaces with the API to update information in the information feed. As the API communicates with the application the API links back information from the application to the browser page. Such information is rendered in the information feed of the user interface via the API. In some implementations the information feed is updated without refreshing the user interface. In fact each of the steps performed in the method may occur without refreshing the user interface. For example updating the information feed can involve updating one or more data fields in the information feed based on the user input by toggling changes to the one or more data fields. Therefore the API can enable interactions between a user and an exposed application such as an application hosted on a third party platform such that updates occur seamlessly between a publisher and an information feed in a user interface.

In some implementations the feed item can include one or more actionable selections providing a reference to the application. The one or more actionable selections may perform further operations on the application from the feed item. shows an example of a user interface with a feed item displaying approval controls based on a user input regarding content from the application hosted on the third party platform in according to some implementations. In response to a user input requesting approval for a selected itinerary in information regarding the selected itinerary can be rendered into the feed item in the information feed via the API. The information can be retrieved from one or more database systems in the third party platform. The feed item can further include approval controls where an appropriate entity can approve or deny the selected itinerary. In some implementations the approval controls may be rendered in the information feeds of entities specified by the user or information feeds of entities based on the user s profile and or preferences. Selection of one of the approval controls may further update the information feed as well as the application hosted on the third party platform.

While at least some of the sequence of steps for the method may be illustrated in other examples may also be illustrative of the sequence of steps for the method . By way of example a user interface can include a publisher and an information feed where the publisher includes a custom action for initiating a videoconference with a customer. The customer can use a video recording device and have a real time conversation with the user through the publisher space of the publisher. Moreover the user can perform an action on the exposed data stream by saving the videoconference from the publisher and the saved video can be published to the information feed.

In another example a user interface can include a publisher and an information feed where the publisher includes a custom action for placing an order with an SAP system. One or more items can be exposed from the SAP system in the publisher and a user can select an item for placing an order. The user can select a button for placing the order which can then communicate with the SAP system via the API. The API then allows the custom action to communicate with the information feed to publish a feed item showing that an order for the item has been placed.

In yet another example a pharmaceutical company can develop a customized user interface for sales agents to sell free drug samples to doctors. When a sales agent pulls up an account for a particular doctor in the user interface the sales agent can view the doctor s account and input new orders into the publisher. The sales agent can communicate with an application such as a third party application to fulfill the order request and a feed item can be posted in an information feed indicating the placement of the order request.

In yet another example a gaming company can develop a customized user interface to submit a mass email to customers. If a flood of cases come in at a rapid rate regarding a bug in a video game the gaming company can utilize a publisher to communicate with a mass email web service such as VerticalResponse Inc. or Constant Contact Inc. The gaming company can import or select all the recipients compose the email and submit the email through the mass email web service. Upon completion an information feed can be updated by presenting a feed item indicating that an email was sent out.

The specific details of the specific aspects of implementations disclosed herein may be combined in any suitable manner without departing from the spirit and scope of the disclosed implementations. However other implementations may be directed to specific implementations relating to each individual aspect or specific combinations of these individual aspects.

While the disclosed examples are often described herein with reference to an implementation in which an on demand database service environment is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present implementations are not limited to multi tenant databases nor deployment on application servers. Implementations may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the implementations claimed.

It should be understood that some of the disclosed implementations can be embodied in the form of control logic using hardware and or using computer software in a modular or integrated manner. Other ways and or methods are possible using hardware and a combination of hardware and software.

Any of the software components or functions described in this application may be implemented as software code to be executed by a processor using any suitable computer language such as for example Java C or Perl using for example conventional or object oriented techniques. The software code may be stored as a series of instructions or commands on a computer readable medium for storage and or transmission suitable media include random access memory RAM a read only memory ROM a magnetic medium such as a hard drive or a floppy disk or an optical medium such as a compact disk CD or DVD digital versatile disk flash memory and the like. The computer readable medium may be any combination of such storage or transmission devices. Computer readable media encoded with the software program code may be packaged with a compatible device or provided separately from other devices e.g. via Internet download . Any such computer readable medium may reside on or within a single computing device or an entire computer system and may be among other computer readable media within a system or network. A computer system or other computing device may include a monitor printer or other suitable display for providing any of the results mentioned herein to a user.

While various implementations have been described herein it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present application should not be limited by any of the implementations described herein but should be defined only in accordance with the following and later submitted claims and their equivalents.

