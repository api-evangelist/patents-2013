---

title: Providing selection areas for selectable objects in graphical interface
abstract: In some embodiments, a processor accesses electronic content that includes multiple selectable objects that are renderable in a graphical interface. The processor generates multiple selection areas respectively associated with the selectable objects. An input to the graphical interface received within each selection area selects an associated selectable object. Generating the selection areas includes generating a boundary around at least one of the selectable objects. Any point within the boundary is closer to the associated selectable object than any other selectable object. Generating the selection areas also includes clipping the boundary to define the selection area for the selectable object. The processor adds the selection areas to a document object model associated with the electronic content. The document object model is usable for rendering the graphical interface with the selectable objects and identifying the selection areas.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600137&OS=09600137&RS=09600137
owner: Adobe Systems Incorporated
number: 09600137
owner_city: San Jose
owner_country: US
publication_date: 20130717
---
This disclosure relates generally to computer implemented methods and systems and more particularly relates to providing selection areas for selectable objects in a graphical interface.

Graphical interfaces for computing applications may include selectable objects that can receive input via a touch screen or a mouse. For example a user may use a mouse click or a touch input to select a data point on a chart in order to see detailed information for the selected data point.

Some display devices such as smart phones and tablet computers may render selectable objects with small sizes. Smaller selectable objects may be difficult to select on a touch screen. Prior solutions for addressing this problem may involve drawing invisible selection areas around the selectable objects that can receive touch inputs for the enclosed selectable objects. For example touch inputs within a given selection radius of a button in a graphical interface may select the button.

Such prior solutions present disadvantages such as larger selection areas overlapping one another. For example is a modeling diagram depicting overlap between different selection areas defined by a fixed selection radius. As depicted in a graphical interface can include selectable objects having selection areas respectively defined by boundaries . The boundaries which are depicted in for descriptive purposes may not be rendered in the graphical interface . Each of the boundaries may be defined by a fixed selection radius . The selection radius may be greater than the distance between two of the selectable objects . The selection radius being greater than the distance between the selectable objects may cause an overlap in the selection areas . The overlap in the selection areas may prevent or hinder a processor from determining if a touch input to the overlapping area is intended to select the object or the object . The overlap in the selection areas may also cause a touch input to the overlapping area to select the object rather than the object if the selection area is identified after the selection area is identified.

Other prior solutions may involve using only one of the x or y coordinates of a touch input and selecting a column or row of points or other selectable objects along the x or y coordinate of the touch input. Such solutions may be of limited utility for documents such as scatter plots having selectable points that may not be aligned vertically or horizontally.

One embodiment involves a processor accessing electronic content that includes multiple selectable objects that are renderable in a graphical interface. The embodiment further involves generating multiple selection areas respectively associated with the selectable objects. An input to the graphical interface received within each selection area selects a respective selectable object associated with the selection area. Generating the selection areas includes generating a boundary around at least one of the selectable objects. Any point within the boundary is closer to the associated selectable object than any other selectable object. Generating the selection areas also includes clipping the boundary to define the selection area for the selectable object. The embodiment also involves adding the selection areas to a document object model associated with the electronic content. The document object model can be used for rendering the selectable objects in the graphical interface and identifying the selection areas.

These illustrative embodiments are mentioned not to limit or define the disclosure but to provide examples to aid understanding thereof. Additional embodiments are discussed in the Detailed Description and further description is provided there.

Computer implemented systems and methods are disclosed for providing selection areas for selectable objects in a graphical interface.

The following non limiting example is provided to help introduce the general subject matter of certain embodiments. A software module can access a document having multiple selectable objects. For example the document may be a scatter plot having data points that can be clicked or otherwise selected to display detailed information related to the data points. The software module can automatically partition a space including the selectable data points such that each data point is enclosed by a respective boundary. A respective selection area for receiving touch inputs can be defined by each boundary. The touch inputs received in the selection area can cause the data point enclosed by the boundary to be clicked or otherwise selected. The process for automatically partitioning the space may generate boundaries that define oversized selection areas. For example the automatically partitioned space may generate a selection area that can receive a touch input at a distance from an enclosed data point that is not intuitive to a user. The software module can reduce the size of the oversize selection areas by clipping the selection areas using a clipping radius. For example if the boundary generated by the partitioning process or a portion thereof is further from an enclosed data point than the clipping radius the boundary or boundary portion may be moved to the selection radius. If the boundary generated or a portion thereof is closer to an enclosed data point than the clipping radius the boundary or boundary portion can be left in place. The software module can thus provide intuitively sized selection areas for selectable objects without overlap between the selection areas.

In accordance with one embodiment a processor can access electronic content that includes multiple selectable objects that are renderable in a graphical interface. The processor can generate multiple selection areas respectively associated with the selectable objects. An input to the graphical interface received within each selection area selects a respective selectable object associated with the selection area. Generating the selection areas includes generating a respective boundary around each selectable object. Any point within the boundary is closer to the selectable object than any other selectable object. Generating the selection areas also includes clipping each boundary to define a respective selection area. For example clipping a boundary can include positioning each point along the clipped boundary at a distance from the selectable object that is a minimum of the unclipped boundary and a clipping distance. The processor can add the selection areas to a document object model associated with the electronic content. The document object model can be used for rendering the selectable objects in the graphical interface and identifying the selection areas.

As used herein the term selectable object is used to refer to an object rendered in a graphical interface that can generate an event in response to receiving an input. Non limiting examples of selectable objects include button objects data points in a scatter plot or other chart that can display additional information in response to a clicking input or hovering input and the like.

As used herein the term selection area is used to refer to a region of a graphical interface at least partially surrounding a selectable object that can be configured to receive the same input s as the selectable object surrounded by the region and generate event s in response to the input s . A non limiting example of a selection area can include a blank portion of the graphical interface around a selectable object such as a button.

As used here the term clipping distance is used to refer to a distance equal to or otherwise corresponding to a radius of a clipping polygon used to clip the boundaries of a selection area. In some embodiments a clipping distance can be a distance from a center of the clipping polygon to each vertex of the clipping polygon.

As used herein the term document object model is used to refer to a platform independent application programming interface API for electronic content such as but not limited to HyperText Markup Language HTML and Extensible Markup Language XML documents. The document object model can define the logical structure of electronic content and a manner of accessing the electronic content. For example a browser application may render electronic content using a document object model that organizes the components of the electronic content in a tree structure. The browser application can render the electronic content by parsing the document object model to identify the components included in the tree structure and the arrangement of the components when rendered for display.

In some embodiments generating the boundaries around the selectable objects can include applying a Voronoi tessellation to a portion of the graphical interface in which selectable objects are positioned. Applying a Voronoi tessellation to a space can include dividing the space into a number of regions i.e. Voronoi regions using a set of pre specified seed points. Each seed point is positioned in a respective Voronoi region. A region for a given seed point includes all points closer to that seed point than to any other seed point. For each of the selectable objects a respective point associated with a respective selectable object can be selected as a respective seed point of a Voronoi tessellation. In one non limiting example a selectable object that is a circle can be associated with a seed point that is the center of the circle. Other non limiting examples of selectable objects include point line area and bubble charts. The boundaries of the selection areas can delineate the Voronoi regions of the Voronoi tessellation. The Voronoi regions can be clipped based on the clipping distance.

In some embodiments the clipping distance can be adjustable. In some embodiments the clipping distance can be adjusted based on input received to an application performing the clipping operation. In other embodiments the clipping distance can be automatically adjusted without requiring input specifying the length of the clipping distance. For example a computing device can determine the attributes of a display device on which the graphical interface is to be displayed such as the resolution of the display device and or the dimensions of the display device. The computing device can increase the length of the clipping distance for higher resolutions and or larger dimensions or decrease the length of the clipping distance for lower resolutions and or smaller dimensions.

In additional or alternative embodiments the clipping distance can be obtained from a clipping polygon applied to the boundaries generated for the selectable objects. A non limiting example of a clipping polygon is a polygon in which the distance from the center of the polygon to any vertex of the polygon is constant. Clipping the boundary using a clipping polygon can include positioning each point along the boundary at a distance from the selectable object that is a minimum of a first distance from the selectable object to the boundary and a second distance from the selectable object to the edge of the clipping polygon. In some embodiments the number of vertices for the clipping polygon can be adjustable. In some embodiments the number of vertices can be adjusted based on input received to an application performing the clipping operation. In other embodiments the clipping distance can be automatically adjusted without requiring input specifying the number of vertices. For example a computing device can determine the computing resources e.g. processing capacity and or memory capacity available for performing the clipping operations. The computing device can increase the number of vertices based on the computing device having a higher processing capacity and or memory capacity.

Referring now to the drawings is a block diagram depicting an example computing system for implementing certain embodiments.

The computing system comprises a computer readable medium such as a processor that is communicatively coupled to a memory and that executes computer executable program instructions and or accesses information stored in the memory . The processor may comprise a microprocessor an application specific integrated circuit ASIC a state machine or other processing device. The processor can include any of a number of computer processing devices including one. Such a processor can include or may be in communication with a computer readable medium storing instructions that when executed by the processor cause the processor to perform the steps described herein.

The computing system may also comprise a number of external or internal devices such as input or output devices. For example the computing system is shown with an input output I O interface and a display device . A bus can also be included in the computing system . The bus can communicatively couple one or more components of the computing system .

The computing system can modify access or otherwise use electronic content . The electronic content may be resident in any suitable computer readable medium and execute on any suitable processor. In one embodiment the electronic content can reside in the memory at the computing system . In another embodiment the electronic content can be accessed by the computing system from a remote content provider via a data network.

The memory can include any suitable computer readable medium. A computer readable medium may comprise but is not limited to electronic optical magnetic or other storage device capable of providing a processor with computer readable instructions or other program code. Other examples comprise but are not limited to a floppy disk CD ROM DVD magnetic disk memory chip ROM RAM an ASIC a configured processor optical storage magnetic tape or other magnetic storage or any other medium from which a computer processor can read instructions. The instructions may comprise processor specific instructions generated by a compiler and or an interpreter from code written in any suitable computer programming language including for example C C C Visual Basic Java Python Perl JavaScript and ActionScript.

A graphics module stored in the memory can configure the processor to prepare the electronic content for rendering in a graphical interface and or render the electronic content in the graphical interface. In some embodiments the graphics module can be a software module included in or accessible by a separate application such as but not limited to a browser application executed by the processor that is configured to modify access or otherwise use the electronic content . In other embodiments the graphics module can be a stand alone application executed by the processor .

The computing system can include any suitable computing device for executing the graphics module . Non limiting examples of a computing device include a desktop computer a tablet computer a smart phone a digital camera or any other computing device suitable for rendering the electronic content . The computing system may be a touch screen enabled device.

Some of the selectable objects may be closely spaced together. For example is a modeling diagram depicting the electronic content with closely spaced selectable objects. The selectable objects included in the portion of the electronic content identified by a dashed rectangle in may be spaced so closely that defining selection areas via a fixed selection radius may result in overlapping selection areas between one or more of the selectable objects or section area sizes too small to provide assistance in selecting the selectable objects .

A partitioning process can be applied to the space to generate the initial boundaries around the respective selectable objects . The initial boundaries can bisect a respective region between each pair of selectable objects in the partitioned space.

A non limiting example of a partitioning process is a Voronoi tessellation. Applying a Voronoi tessellation to a space can include dividing the space into a number of regions i.e. Voronoi regions using a set of pre specified seed points. Each seed point is positioned in a respective Voronoi region. A region for a given seed point includes all points closer to that seed point than to any other seed point.

The selectable objects can be selected as the seed points of a Voronoi tessellation. The initial boundaries delineate the Voronoi regions of the Voronoi tessellation. The initial boundaries can include shared boundary regions. For example as depicted in the initial boundary includes a shared boundary region shared with the initial boundary a shared boundary region shared with the initial boundary and a shared boundary region shared with the initial boundary . The selectable object is equidistant from the shared boundary region with respect to the selectable object equidistant from the shared boundary region with respect to the selectable object and equidistant from the shared boundary region with respect to the selectable object

The initial boundary depicted in also includes a shared boundary region shared with the initial boundary a shared boundary region shared with the initial boundary and a shared boundary region shared with the initial boundary . The selectable object is equidistant from the shared boundary region with respect to the selectable object equidistant from the shared boundary region with respect to the selectable object and equidistant from the shared boundary region with respect to the selectable object

The initial boundary depicted in also includes a shared boundary region shared with the initial boundary . The selectable object is equidistant from the shared boundary region with respect to the selectable object

Using the initial boundaries to delineate the selection areas can present disadvantages such as selection areas that are too large to be used intuitively. For example one or more of the selectable objects may be selected in response to a cursor hovering over a selection area. A selection area delineated by the initial boundaries may have a sufficient size that a cursor hovering near the edge of the selection area may result in the unwanted selection of the selectable object even though the cursor is positioned at a substantial distance from the selectable object

The selection areas delineated by the initial boundaries can be clipped to provide more intuitive selection areas. For example is a modeling diagram depicting clipping polygons overlaying the initial boundaries for the selection areas of the selectable objects . The example clipping polygons are depicted as dashed lines in for illustrative purposes to distinguish the clipping polygons from the initial boundaries . Each of the clipping polygons can be a polygon in which the distances from the center to the vertices of the polygon are equal. For example as depicted in each of the clipping polygons is a twelve sided clipping polygon. The graphics module can select a clipping distance that is equal to the distance from the center of the clipping polygon to any vertex of the clipping polygon.

The clipping polygons can be used to modify the initial boundaries to generate modified boundaries that surround the selectable objects without generating overlapping selection areas. is a modeling diagram depicting modified boundaries generated by clipping the initial boundaries using the clipping polygons . The graphics module can generate the modified boundaries by clipping any portion of each of the initial boundaries that exceeds a respective clipping distance. A respective clipping distance can include a distance from the center of a selectable object to an edge of a respective clipping polygon. The selection areas delineated by the modified boundaries can allow a user to provide a touch input or other input to the graphical interface that causes a nearest selectable object within a radius of tolerance to be selected.

The radius of tolerance can be a configurable radius of a clipping polygon having a shape that is circular or approximately circular e.g. a polygon for which the distance to each vertex is constant such as but not limited to a twelve sided polygon . A touch input a click input or other input received within the clipping polygon can be captured to trigger an event in response to the input e.g. a pop up or other interaction . The radius of tolerance can be modified to increase or decrease a tolerance i.e. a size of a selection area . For example the radius of tolerance can be increased to provide additional tolerance for touch devices or decreased to reduce the tolerance for a devices in which a mouse or other input device other than a touch screen is to be used. In some embodiments the configurable radius of tolerance can be configured by a developer working with the graphics module . In other embodiments the configurable radius of tolerance can be automatically configured by the graphics module without requiring selection of the radius by a developer.

Some of the modified boundaries may be coextensive with the corresponding clipping polygons . For example the distance from the selectable object to each point along the initial boundary may exceed the clipping distance providing by the clipping polygon . Clipping the initial boundary based on the clipping polygon may provide the modified boundary that is coextensive based on the clipping polygon . Clipping the initial boundary based on the clipping polygon can remove the shared boundary regions 

Some of the modified boundaries may include portions of shared boundary regions . For example clipping the initial boundary can remove the shared boundary regions . A shared boundary region common to modified boundaries can include a portion of the shared boundary region . The shared boundary region can include the portion of the shared boundary region enclosed by an overlapping of the clipping polygons 

As depicted in clipping the initial boundaries can remove the shared boundaries . A shared boundary region common to modified boundaries can include a portion of the shared boundary region . The shared boundary region can include the portion of the shared boundary region enclosed by an overlapping of the clipping polygons 

The initial boundaries the clipping polygons and the modified boundaries are depicted in the figures discussed above for illustrative purposes. In some embodiments the graphics module can identify modify or otherwise use one or more of the initial boundaries the clipping polygons and the modified boundaries without the initial boundaries the clipping polygons and or the modified boundaries being rendered for display with the graphical interface . In other embodiments one or more of the initial boundaries the clipping polygons and or the modified boundaries can be rendered by a graphics module . For example a development environment used to generate modify or otherwise use the electronic content may be used to determine an optimal or preferred clipping distance by rendering one or more of the initial boundaries the clipping polygons and the modified boundaries for development or testing purposes.

As depicted in the graphics module can generate a document object model for the electronic content . The document object model can include selectable object elements initial boundary elements and clipping polygon elements . The document object model can associate the initial boundary elements and the clipping polygon elements with the selectable object elements respectively.

The browser application can generate the graphical interface by parsing the document object model . For example the browser application can perform operation for rendering the selectable object in response to parsing the selectable object element . The browser application can provide a selectable area by performing operation for identifying an initial boundary in response to parsing the initial boundary element and performing operation for clipping the initial boundary based on the clipping polygon in response to parsing the clipping polygon element . The browser application can likewise render the selectable objects by respectively performing operations in response to parsing the selectable object elements . The browser application can likewise provide the selection areas by respectively performing operations in response to parsing the initial boundary elements and respectively performing operations in response to parsing the clipping polygon elements 

The embodiment depicted in can involve the browser application performing clipping operations to provide the selection areas during the process of rendering the graphical interface . The browser application performing the clipping operations during the rendering process can utilize resources such as but not limited to memory capacity and or processing capacity that may be limited in devices such as smart phones and other mobile computing devices. Performing clipping operations via Javascript or another suitable graphical interface library prior to performing the rendering process can reduce the resource requirements associated with providing the selection areas.

For example depicts the graphics module generating a document object model that includes selectable object elements for the selectable objects and boundary elements for the modified boundaries . The graphics module can execute Javascript code or code from another suitable graphical interface library to output the boundary elements . The graphics module can generate or modify the document object model to include the boundary elements . The browser application can generate the graphical interface having the selectable objects and the selection areas by performing operations in response to parsing the selectable objects and boundary elements . Performing the operations for identifying the modified boundaries may utilize fewer memory and or processing resources as compared to both performing operations for identifying the initial boundaries and performing operations for clipping the initial boundaries using the clipping polygons 

For example depicts three elements i.e. a selectable object an initial boundary and a clipping polygon in the document object model for each of the selectable objects . Additional processing can be introduced by adding the clipping polygons to the document object model depicted in . Processing of the document object model can involve allocating memory for the clipping polygons adding the clipping polygons to a scene graph i.e. the HTML hierarchy parsing the scene graph in order to render the clipping polygons and applying the clipping polygons . depicts two elements i.e. a selectable object and a boundary in the document object model for each of the selectable objects . The implementation depicted in can reduce or eliminate the operations of allocating memory for the clipping polygons adding the clipping polygons to the scene graph parsing the clipping polygons of the scene graph and applying the clipping polygons . Eliminating these operations can reduce the amount of processing resources associated with the browser application providing the graphical interface .

The method involves accessing electronic content that includes multiple selectable objects that are renderable in a graphical interface as shown in block . The processor of the computing system can execute the graphics module or other suitable programming instructions to access the electronic content .

The method further involves generating initial boundaries around the respective selectable objects such that any point within each of the initial boundaries is closer to the enclosed selectable object than any other selectable object as shown in block . The processor of the computing system can execute the graphics module or other suitable programming instructions to generate the initial boundaries . In some embodiments generating the initial boundaries can include applying a Voronoi tessellation to a portion of the graphical interface in which selectable objects are positioned as described above with respect to .

The method further involves clipping the initial boundaries to define selection areas around the selectable objects as shown in block . The processor of the computing system can execute the graphics module or other suitable programming instructions to clip the initial boundaries 

In some embodiments each point along each of the clipped boundaries has a distance from the enclosed selectable object that is a minimum of a clipping distance and the unclipped boundary. The clipping distance may be for example a clipping radius that is the radius of a circle used to clip the boundaries 

In other embodiments the clipped boundaries can be obtained by applying the clipping polygons to the initial boundaries . Clipping an initial boundary using a clipping polygon can include positioning each point along the boundary at a distance from the selectable object that is a minimum of a distance from the selectable object to the boundary and the distance from the selectable object to the edge of the clipping polygon as described above with respect to .

In some embodiments the number of vertices for the clipping polygons can be adjustable. In some embodiments the number of vertices can be adjusted based on input received to the graphics module . In other embodiments the clipping distance can be automatically adjusted without requiring input specifying the number of vertices. For example the processor can determine the computing resources e.g. processing capacity and or memory capacity available for performing the clipping operations. The processor can execute the graphics module to increase the number of vertices based on the computing system having a higher processing capacity and or memory capacity. For example if sufficient processing resources are available or a data set of selectable objects is relatively small the number of vertices can be increased to enhance the resolution of each clipping polygon. Increasing the number of vertices can increase the circular nature of a selection area for a selectable object. If processing resources are limited or a data set of selectable objects is relatively large the number of vertices can be reduced to allow clipping operations to be performed efficiently for each selectable object and increase the speed at which the graphical interface is rendered.

In some embodiments the clipping distance can be adjustable. In some embodiments the clipping distance can be adjusted based on input received to the graphics module . For example in a development environment used to generate or modify electronic content or a graphics module a development interface may be presented to a developer that elicits input specifying the length of the clipping distance. In other embodiments the clipping distance can be automatically adjusted without requiring input specifying the length of the clipping distance. For example the processor can determine the attributes of a display device on which the graphical interface is to be displayed. Non limiting examples of such attributes include the resolution of the display device and or the dimensions of the display device . The graphics module can increase the length of the clipping distance for higher resolutions and or larger dimensions or decrease the length of the clipping distance for lower resolutions and or smaller dimensions.

The method further involves adding the selection areas to a document object model usable for rendering the selectable objects in the graphical interface and identifying the selection areas as shown in block . The processor of the computing system can execute the graphics module or other suitable programming instructions to adding the selection areas to a document object model. For example the graphics module can generate and or modify a document object model having elements for the modified boundaries as described above with respect to .

Numerous specific details are set forth herein to provide a thorough understanding of the claimed subject matter. However those skilled in the art will understand that the claimed subject matter may be practiced without these specific details. In other instances methods apparatuses or systems that would be known by one of ordinary skill have not been described in detail so as not to obscure claimed subject matter.

Unless specifically stated otherwise it is appreciated that throughout this specification discussions utilizing terms such as processing computing calculating determining and identifying or the like refer to actions or processes of a computing device such as one or more computers or a similar electronic computing device or devices that manipulate or transform data represented as physical electronic or magnetic quantities within memories registers or other information storage devices transmission devices or display devices of the computing platform.

The system or systems discussed herein are not limited to any particular hardware architecture or configuration. A computing device can include any suitable arrangement of components that provide a result conditioned on one or more inputs. Suitable computing devices include multipurpose microprocessor based computer systems accessing stored software that programs or configures the computing system from a general purpose computing apparatus to a specialized computing apparatus implementing one or more embodiments of the present subject matter. Any suitable programming scripting or other type of language or combinations of languages may be used to implement the teachings contained herein in software to be used in programming or configuring a computing device.

Embodiments of the methods disclosed herein may be performed in the operation of such computing devices. The order of the blocks presented in the examples above can be varied for example blocks can be re ordered combined and or broken into sub blocks. Certain blocks or processes can be performed in parallel.

The use of adapted to or configured to herein is meant as open and inclusive language that does not foreclose devices adapted to or configured to perform additional tasks or steps. Additionally the use of based on is meant to be open and inclusive in that a process step calculation or other action based on one or more recited conditions or values may in practice be based on additional conditions or values beyond those recited. Headings lists and numbering included herein are for ease of explanation only and are not meant to be limiting.

While the present subject matter has been described in detail with respect to specific embodiments thereof it will be appreciated that those skilled in the art upon attaining an understanding of the foregoing may readily produce alterations to variations of and equivalents to such embodiments. Accordingly it should be understood that the present disclosure has been presented for purposes of example rather than limitation and does not preclude inclusion of such modifications variations and or additions to the present subject matter as would be readily apparent to one of ordinary skill in the art.

