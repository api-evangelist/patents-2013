---

title: Automatic configuration of external services based upon network activity
abstract: System, computer program product, and method to configure an external network based on internal network conditions, by monitoring a load attribute of one or more network flows traversing an ingress port of at least one network element in a software-defined networking (SDN) enabled network, upon determining that the load attribute of a first network element in the SDN enabled network exceeds a predefined threshold, provisioning, by the application, an additional service on the external network, by the application, an additional service on the external network, and extending, by the application, the SDN enabled network to include the additional service on the external network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09392050&OS=09392050&RS=09392050
owner: Cisco Technology, Inc.
number: 09392050
owner_city: San Jose
owner_country: US
publication_date: 20130315
---
Embodiments presented in this disclosure generally relate to computer software. More specifically embodiments disclosed herein relate to software executing on a network hardware which automatically configures external services based upon network activity.

It is frequently necessary to adapt to conditions in a third party network. It would be useful to be able to signal configure or programmatically interact with an external network as a result of internal network conditions. For example it would be advantageous to extend a network to include external resources responsive to an increased load within the network.

One embodiment of the invention includes a method to configure external networks based on internal network conditions. This method may generally include monitoring a load attribute of one or more network flows traversing an ingress port of at least one network element in a software defined networking SDN enabled network. Upon determining that the load attribute of a first network element in the SDN enabled network exceeds a predefined threshold the first network element issues a high load notification to an application executing on the network element. In response the application provisions an additional service on an external network. Doing so extends the SDN enabled network to include the additional service on the external network.

Embodiments disclosed herein provide a hybrid cloud controller in a software defined networking SDN enabled network that may run outside the context of a switch and make arbitrary decisions in response to detected network conditions or events. In one embodiment the hybrid cloud controller provides a hybrid private and public cloud that is dynamically provisioned both at the application and network layers and configured in response to load. Upon detecting an increased load for example the hybrid cloud controller may extend a first network to include a third party network. Upon detecting a decrease in the load the hybrid cloud controller may scale back the first network to remove the third party network.

Software defined networking SDN techniques allow a network traditionally a static entity to become more dynamic in nature. SDN opens networks to application developers who may write applications to manage network elements and data flows passing through a network element without requiring physical access to the network elements themselves. Thus rather than a network element being a fixed function appliance SDN considers network hardware to be part of a distributed computational system that can be manipulated by software. An application developer writing applications for an SDN may execute the application in the network which may include any device which processes data flows between computing systems e.g. a switching or routing element connecting host systems to a network and devices connecting one computing network to another as well as other computing devices able to execute the application while connected to the network. The application may execute commands and apply functions to the network devices and the data flows remotely or locally on the network element itself. Using applications in an SDN developers may manage networking functions of a network element such as routing quality of service QoS and bandwidth allocation as well as manage performance and or properties the network elements themselves. Additionally different programming logic may be applied to different flows or packets in the same network topology such that each network graph need not have its own instance of the SDN application.

Software defined networking SDN in general provides additional flexibility and solidarity relative to conventional networks. Using an SDN controller which may be either centrally located or located on the respective network devices a network administrator can configure the control plane and dictate how the network devices route data. For example the network administrator may assign criteria or SDN rules that when satisfied instruct the network device to perform a specific action on the received packet e.g. drop the packet forward the packet to a particular network device evaluate the packet using an application on the network device and the like. In one embodiment the SDN controller configures the routing table or forwarding table i.e. forwarding information base in a network device based on the network administrator s preferences.

The descriptions of various embodiments below are presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described below with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the flowchart and or block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

Embodiments of the disclosure may be provided to end users through a cloud computing infrastructure. Cloud computing generally refers to the provision of scalable computing resources as a service over a network. More formally cloud computing may be defined as a computing capability that provides an abstraction between the computing resource and its underlying technical architecture e.g. servers storage networks enabling convenient on demand network access to a shared pool of configurable computing resources that can be rapidly provisioned and released with minimal management effort or service provider interaction. Thus cloud computing allows a user to access virtual computing resources e.g. storage data applications and even complete virtualized computing systems in the cloud without regard for the underlying physical systems or locations of those systems used to provide the computing resources.

Typically cloud computing resources are provided to a user on a pay per use basis where users are charged only for the computing resources actually used e.g. an amount of storage space consumed by a user or a number of virtualized systems instantiated by the user . A user can access any of the resources that reside in the cloud at any time and from anywhere across the Internet. In context of the present disclosure a user may access a hybrid cloud controller or related data available in the cloud. For example the hybrid cloud controller could execute on a network element in a private cloud. An operator of a physical data center in the private cloud providing cloud services may use the hybrid cloud controller to monitor load for traffic generated by cloud customers e.g. customers hosting virtual machine instances networked by virtual networks based on criteria relevant to the service provider. In such a case the hybrid cloud controller could provision services in an external public cloud and extend the private cloud network to include services in the public cloud creating a hybrid cloud configuration. The hybrid cloud controller may update the routing tables of the network elements in the private cloud to include the public cloud configuration. Doing so allows a user to access information saved in the cloud by the provisioned public cloud services from any computing system attached to a network connected to the cloud e.g. the Internet .

The difficulty in such a scenario occurs when demand on these machines increases. In such an embodiment an instance of a hybrid cloud application may be created in the private cloud and executed on one or more of the network elements or servers . The hybrid cloud application may install a filter on the ingress port of each network element or a selected subset thereof and use a set of APIs residing on each network element to monitor events attributes correlated with load. In one embodiment the input filter is a local monitoring agent configured to monitor the attributes correlated with load. Such attributes could include a count of a number of connections on the ingress port an actual load of various connected processors CPU capacity dropped connections on the ingress port or an observed latency of response in data flows traversing the network elements . Generally any attribute indicative of capacity or load of the network elements may be monitored. The load attribute may be monitored for a process on the network element a virtual machine running within a network element or a physical machine such as the network element itself .

Once the filter detects that the values of the attributes being monitored exceeds a predefined threshold it may issue a high load event. In one embodiment the high load event may be pushed by the filter. In another embodiment the high load event may be pushed by an instance of the hybrid cloud application executing on the network element . By pushing instead of polling the amount of messaging in the system may be reduced. The hybrid cloud application when receiving the high load event may take actions to provision additional resources to alleviate the increased load within the private cloud . The hybrid cloud application is not limited to configuration of the local network it may also take arbitrary out of network actions including but not limited to provisioning external cloud services as depicted in . In another embodiment a designated component of the network element experiencing the high load may receive the high load event and drive a request for more capacity.

In one embodiment one instance of the hybrid cloud application executes within the private or hybrid cloud . Alternatively the hybrid cloud application may be distributed such that multiple instances of the hybrid cloud application communicate. The hybrid cloud application may be able to determine an optimal load distribution based on additional specific attributes including but not limited to temperature of a data center housing the private cloud an electric grid load an application response time user identities and other attributes that are not related to the network but that can be used by the hybrid cloud application to optimize and balance the load in the private cloud .

At step the load attributes are monitored by a controller such as the hybrid cloud application executing in the SDN enabled network. In one embodiment the controller executes on one or more network elements in the SDN enabled network. In another embodiment the controller may execute on a computer or blade server in the SDN enabled network. At step described in greater detail with reference to additional public cloud resources are provisioned to extend the network and create a hybrid cloud when the load attributes exceed a predefined threshold. The threshold may be predefined or set by a user. For example the threshold may specify that no more than 100 connections may be established at a given time on a specific port. Once the threshold is exceeded i.e. when more than 100 connections are established the additional resources may be provisioned. At step the additional services are decommissioned when the monitored load attributes fall below the threshold. In one embodiment the additional services may be removed one by one as the load begins to drop with the last additional service being removed once the load attributes fall below the threshold. In another embodiment all services may be decommissioned only when the load falls below the threshold. Generally any suitable method for decommissioning the additional services may be implemented.

Each network element has a processor connected via a bus to a memory and a network interface device . The network elements are configured to execute containerized software applications. The network elements are generally under the control of an operating system not shown . Examples of operating systems include the UNIX operating system distributions of the Linux operating system and the IOS operating system by Cisco Systems . The processor is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. The processor may execute software developed for the purposes of embodiments disclosed herein. Similarly the memory may be a random access memory. While the memory is shown as a single identity it should be understood that the memory may comprise a plurality of modules and that the memory may exist at multiple levels from high speed registers and caches to lower speed but larger DRAM chips. The network interface device may be any type of network communications device allowing the network elements to communicate with other network elements and computers via the SDN enabled network .

As shown the memory contains an orchestration application which is an application generally configured to orchestrate automation and programmability of the network elements in the SDN enabled network . Generally the orchestration application provides a plurality of APIs used to abstract the implementation specific details of the network elements in the SDN enabled network . Stated differently the APIs of the orchestration application are abstraction tools that permits a programmer or network administrator to access and monitor different functions and outputs of network elements in the SDN enabled network . By using the orchestration application and the APIs functional programming techniques may be used to program a wide range of network elements regardless of the wide array of distinctions found between specific network elements . In particular the orchestration application may provide an interface to allow an application such as the hybrid cloud application to read write and modify the routing table and routing engine of a network element .

The memory also contains a hybrid cloud application generally configured to monitor load attributes on ingress ports of the network elements and provision additional services external to the software defined network . For example the hybrid cloud application may determine that a dropped connection count on a particular ingress port has exceeded a dropped connection threshold. In response the hybrid cloud application may provision external services provided by a public cloud computing provider to help alleviate the increased load. The hybrid cloud application may also call external configuration tools to instantiate the services in the public cloud. Once the external public cloud services have been instantiated the hybrid cloud application may alter the routes of the network elements such that traffic may traverse the hybrid cloud computing environment the SDN enabled network and the public cloud network . The hybrid cloud application may use the APIs provided by the orchestration application to modify the RIB and routing engine of the network elements to incorporate the public cloud services into the hybrid cloud computing environment. The routing engine of the network elements is an application generally configured to execute the core networking functions of the respective network element. The routing engine may interact with the routing information base RIB also referred to as a routing table which specifies a plurality of rules used by the routing engine to route packets received on an ingress port not shown of the network elements to a proper egress port not shown of the network elements . In one embodiment the RIB of each respective network element includes immediate topology information of the software defined network i.e. what other network elements a respective network element is connected to and so on. In one embodiment the hybrid cloud application is a distributed application distributed across each of the network elements .

As shown the memory also contains the application programming interfaces APIs which stores the APIs provided by the orchestration application to the hybrid cloud application . In one embodiment the APIs are an integrated component of the orchestration application or the hybrid cloud application . The APIs gather data associated with the different functions of the network elements such as statistics associated with the network element routing tables status of the network elements topology information errors and the like. Moreover APIs may also permit a programmer or network administrator to control the functions of the network elements such as change settings in the forwarding engine change the state of the network elements etc. An application therefore such as the hybrid cloud application may use the APIs to send commands to the network elements .

By abstracting the RIB of the network elements using the APIs a network administrator may monitor and control a plurality of different types of network elements that each may use proprietary firmware execute different networking application types and provide different network operating systems. One such product that permits this function is the One Platform Kit onePK software development kit SDK by Cisco a registered trademark in the United States many other jurisdictions .

The computers may be capable of executing applications such as the hybrid cloud application which may utilize the functionality of the APIs provided by the orchestration application . Therefore in one embodiment the orchestration application the hybrid cloud application and other user applications may be executed on one or more of the computers in order to modify the routing behavior or any behavior of the network elements . In still another embodiment the computers may be blade servers which execute the orchestration application and the hybrid cloud application in the SDN enabled network .

Advantageously embodiments disclosed herein allow for the automated and programmatic extension of a network including to a third party network. A hybrid cloud may use private resources for steady state load and dynamically provision configure and integrate public cloud virtual machines into the service architecture in response to a detected increase in load.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

In view of the foregoing the scope of the present disclosure is determined by the claims that follow.

