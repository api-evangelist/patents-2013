---

title: Method and apparatus for pushing applications to a website visitor during co-browsing
abstract: Apparatuses, computer readable mediums, and methods for pushing applications to a website visitor during co-browsing are disclosed. The method may include initiating a co-browsing session between an operator and a visitor. The method may include selecting an application to push to the visitor. The method may include configuring the application, and pushing the application to the visitor. The method may include co-browsing the application with the visitor. The configuring may include configuring the application by selecting content from webservers over the Internet. The content from the webservers may be received through a content provider layer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08769119&OS=08769119&RS=08769119
owner: Salemove, Inc.
number: 08769119
owner_city: New York
owner_country: US
publication_date: 20131106
---
This application claims the benefit of U.S. Patent Application No. 61 722 853 filed on Nov. 6 2012 the entire contents of which is herein incorporated by reference.

The disclosed embodiments are generally directed to methods and apparatuses for pushing applications to a website visitor and in particular to methods and apparatuses for pushing applications to a website visitor during co browsing.

Often a visitor to a custom website needs assistance. For example often a visitor to a custom website that offers products for sale needs help in a similar way as a visitor to a brick and mortar store needs assistance. One way to assist the visitor is to permit an operator of the website to co browse the website with the visitor. However often co browsing solutions do not provide a pleasant visitor experience and often do not result in a sale to the visitor. The operator is often not able to provide the visitor with all the services the visitor would like to make a purchase decision.

Therefore there is a need in the art for an apparatus computer readable medium and method for pushing an application to a website visitor during co browsing.

Some disclosed embodiments provide a method for pushing applications to a website visitor during co browsing. The method may include initiating a co browsing session between an operator and a visitor. The method may include selecting an application to push to the visitor. The method may include configuring the application. The method may include pushing the application to the visitor. The method may include co browsing the application with the visitor.

Configuring the application may include selecting content from webservers over the Internet. The content from the webservers may be received from a content provider layer.

The application may be configured to provide the visitor with at least one from the following group the ability to upload a photograph the ability to record the co browsing session and the ability to invite a friend to join the co browsing session.

The method may further include selecting to silently edit the application. The method may include silently editing the application. The method may include ending the silently editing of the application. The method may include sending the edits to the visitor wherein the visitor cannot see the changes that are made to the application during the silently editing.

The application may be configured to provide a program to enable the operator and the visitor to collaborate.

The method may include selecting a hold button. The hold button may place the application in a hold state and return the visitor and operator to the previous co browsing session. The method may include pushing the application to the visitor. The method may include co browsing the application with the visitor.

Some disclosed embodiments provide a computer system for pushing applications to a website visitor during co browsing. The computer system may include one or more input output devices configured to communicate over a communications network. The computer system may include one or more memory systems configured to store and retrieve data. The computer system may include one or more processors. The one or more processors may be configured to initiate a co browsing session between an operator and a visitor and select an application to push to the visitor. The one or more processors may be configured to configure the application push the application to the visitor and co browse the application with the visitor.

The one or more processors may be configured to configure the application by selecting content from webservers over the Internet. The content from the webservers may be received through a content provider layer and then through the one or more input output devices configured to communicate over a communications network.

The application may be configured to provide the visitor with at least one from the following group the ability to upload a photograph the ability to record the co browsing session and the ability to invite a friend to join the co browsing session.

The one or more processors may be configured to receive an indication from the operator to select to silently edit the application silently edit the application receive an indication from the operator to end the silent edit of the application and send the edits to the visitor wherein the visitor cannot see the changes that are made to the application during the silently editing.

The application may be configured to provide a program to enable the operator and the visitor to collaborate.

The one or more processors may be configured to place the application in a hold state and return the visitor and operator to the previous co browsing session in response to receiving an indication from the operator to select a hold button.

Some embodiments provide a computer readable non transitory medium including instructions which when executed in a processing system cause the processing system to execute a method for multiple tab co browsing.

The application platform includes network layer communication data layer application provider content provider external content provider collaborative engine and app .

The network layer may be a network layer configured to handle the connectivity. For example the network layer may be configured to establish connections establish concurrent users and to establish reconnections. The network layer may be a layer that is a lowest level in the architecture of the application platform . The network layer may interact with the communication . The network layer may be configured to perform messaging routing and forwarding. The network layer may be configured to perform soft real time responses. The network layer may be configured to communicate using for example procedure calls web sockets communications and or webRTCs.

The communication may be a layer above the network layer . Communication may add meaning to messages exchanged among different participants such as an app and a visitor . For example handshake messages to exchange basic information chat messages control messages etc. The communication may be extended by adding custom events messages and or message handlers.

The data layer may be a layer that handles interactions with the different data sources. The data layer may be in charge of retrieving filtering inserting and modifying data for different data sources not illustrated in the system . The data layer may be a data layer configured to provide a set of wrappers not illustrated. The set of wrappers may simplify the development of apps that require accessing data from different types of data sources. Example of data sources includes RDBMS NoSQL databases S3 etc. The data layer may be configured to encapsulate accessing data sources. The data sources may be local or accessed across the communication network . The set of wrappers may hide the complexity of dealing with different application program interfaces APIs from different sources. For example an app may be configured to retrieve information from Google storage DropBox or a custom data source using a wrapper that may reduce the complexity of accessing the data source. An example of a custom data source is a database hosted in a data source across the communications network . The wrapper may enable the app to access the different sources of data by using a common interface provided by the wrapper of the data layer . The access to the data source provided by the wrapper to the app may include data retrieval data storage and or data creation.

The data layer may be configured to store data retrieved in a database associated with the application platform . For instance data retrieved from Google Storage may be stored in a database associated with the application platform . The data layer may be configured to synchronize data from different data sources based on standards such as SyncML and Funambol.

The application provider may be configured to manage descriptors of apps . An app that is available may have a descriptor stored associated with the application platform . The descriptor may include information about how the app behaves and how the app may be served to the visitor and or operator . The application provider may be configured to manage the descriptors and process them in order to serve a specific app . For example an app may be developed using ExtJS and the corresponding application descriptor may contain information such as folders configuration files index file resources endpoints version of the application etc. The app may include extensions and or Java for extending the functionality of the app . The corresponding application descriptor may include the extensions applets etc.

Content provider may manage access to a structured set of data. A content provider may be a standard interface that connects data with programming code running in another process or service. For example an app that needs to connect to an analytical API to get the number of visits per website by page can retrieve such data by creating a content provider passing the parameters needed to connect to such API. As another example an app may need to connect to an external database to get product information for display to the visitor . The app can retrieve such data by creating a content provider and passing the parameters needed to connect to the external database to the content provider . The content provider may have direct interaction with the data layer and network layer to retrieve and send data.

External Content Provider may be configured to interact with apps that communicate with external APIs services or external data sources. Examples of services that may have external API services or external data sources are Facebook Google Twitter Funambol etc. External content provider may be configured to enables a developer to access and embed a web application into the application platform . An example of a web application may be an application that retrieves events from the Google Calendar of the visitor . An external content provider may be created to access the Google Calendar of the visitor . The external content provider may then be used by the app to access the Google calendar of the visitor . An external content provider may be configured to push and create data in the external content provider. For example an app may use an external content provider to retrieve the calendar events of the visitor and determine to create a new event and then the app may use the external content provider to create the new event in Google calendar. The external content provider may have direct interaction with the network layer the communication and the data layer to retrieve and send data.

The collaborative engine may be an engine for collaboration and mashing up content. The collaborative engine may be configured to enable apps to interact with other apps or content in real time. For example the collaborative engine may enable an app to access content edit content and share content in real time with another app or web application . The content may include web content co browsing media files such as pictures and video documents pdf files excel sheet presentations etc. SM applications content from devices and embedded devices such as camera GPS or screen information location context preferences etc. etc.

The apps may be configured to push a program content or functionality to a visitor that is co browsing the web application with the operator . In some embodiments the visitor and operator may not be co browsing the web application at the time an app is used by the operator to push a program content or functionality to a visitor . The apps may include configuration . The configuration may include configuration use restrictions of an app . For example the configuration may include a list of operators with permission to run the application . The configuration may include parameters and set up information for the app .

In some embodiments the apps may include the following states configure pushed held allocating silent edit and setting. The configure state may be a state before the operator pushes the app to the visitor . The app may be configured to display the desired content or function. In the configure state the app may only be visible to the operator who can make the desired modifications to the app . Once the app has been configured the operator may push the app to the visitor .

The pushed state may be a state where the app has been pushed to the visitor by the operator . Once the app is pushed to the visitor the app may be visible to the visitor . Once the app is pushed the push button may substituted with a pull button which may be selected to return the app to the configure state where it may be visible only to the operator .

The held state may be a state where the operator has placed the app in the held state so the app may be suspended and then brought back again. In some embodiments the app is minimized when the app enters the held state. The operator may then toggle between different apps the pushed app may be moved to a held state where it is not visible to a visitor but retains the configuration originally set by the operator or the last configuration that the operator and the visitor set for the app . Multiple apps may remain in the held state and the operator can toggle between them using the application launcher .

The allocating state may be a state where an app is purchased by an operator that is designated as a manager and the app is placed in an allocating state until the manager decides which operators will have access to the app as well as other permissions for the app .

The silent edit state is a state that an app in the pushed state may enter. In the silent edit state the operator may change the configuration for the app in some way without the visitor seeing those changes take place on the visitor end until the app returns to the pushed state.

The setting state is a state that an app may be in to define settings and default behaviors for the app . The operator can launch an app in setting state to change these defaults settings and default behaviors to fit their preferences.

In some embodiments the apps may include program apps content apps and functionality apps . The program apps may enable the operator and visitor to collaborate together through a program. Example programs include a whiteboard app that may be used to illustrate financing for an automobile sale a calculator app that may be used to determine a real estate broker fee and a furniture builder that may be used to collaborate on the details of a custom dresser.

The content apps may enable the operator to present content to the visitor and or enable the visitor to present content to the operator . Examples of content include a frequently asked question FAQ presenter app that may be viewed by the operator and the visitor together a file view app that enables the operator and or the visitor to present a file which may be a Portable Document Format PDF file power point file or another type of file to view. In some embodiments the file may be an audio or video file.

The functionality apps may enable the operator to provide the visitor with additional functionality. Example functionality includes the ability of the visitor to conduct a full screen sharing session a function to enable a visitor to invite a friend to join the co browsing with the operator a function to enable the visitor to record the web browsing session and a functionality to enable the visitor to store portions of the interaction with the operator such as the audio text and or video with the operator .

The custom website may be a website running on a webserver accessible over the Internet that offers information goods and or services to visitors. The custom website may include the web application . Some examples of the web application include a website of an automobile manufacture an automotive dealer a watch manufacturer an educational website a website of a local library a website of a broadcasting company or a website providing goods services. In some embodiments the web application may offer goods services or information all of which may be for sale. The application platform operator visitor and or co browsing server may make requests not illustrated to the web application and receive response from the web application .

The application store may be configured to store apps available for free or for sale. The apps may be for use with the co browsing server . The application store may require the approval of a manager to purchase an app .

The co browsing server may be a server . In some embodiments the co browsing server may be a remote procedure call RPC server . The co browsing server may be more than one server. The functions described in relation to the co browsing server may be provided by one or more co browsing servers . In some embodiments operator and visitor may send some or all of the webpage updates not illustrated and user interface events not illustrated directly to one another.

The co browsing server may include operator web application application launcher and co browsing portion . The co browsing server may be a computer server. The operator web application may be an application to assist one or more operators co browse with one or more visitors . The application launcher may be configured to operate with the operator web application to launch apps . The application launcher may be configured to enable the operator to view apps that are purchased and or installed. The application launcher may be configured to enable the operator to switch between apps . The application launcher may be configured to enable an operator and or a manager to remove add and or configure apps . The manager may be an operator with security permissions to restrict some operations on the apps . For example the manager may be able to select which operators may be able to perform an operation such as run an app .

Operator and visitor may be computing devices. Operator and visitor may include web application interface . The web application interface may access a web application where operator and visitor co browse. For example the web application interface may be Internet Explorer IE or Chrome . The web application interface may render webpage data not illustrated in order to present webpage data to the user. The web application interface may include co browsing portion . The co browsing portion may be configured to enable the co browsing. The operator may include the operator identification which may be an identification of the operator . The visitor may include a visitor identification not illustrated .

Operator may be a peer to visitor or may have a master slave relationship. Operator and visitor may be on separate computing devices or on a same computing device. Operator may be running the operator web application .

A person not illustrated may be a user of operator or visitor . There may be more than one operator and more than one visitor . In some embodiments operator and or visitor may include an automation module not illustrated that may generate events not illustrated . For example in some embodiments an operator module may be included that co browses with the visitor.

The communications network may be one or more networks including the Internet wireless local area networks private networks etc.

The application platform custom website application store co browsing server visitor and operator may each run on a separate computing device or two or more may run on the same computing device.

The method may begin with co browsing with the visitor . An example of beginning co browsing with the visitor will be presented in through . The example begins with which illustrates a visitor displaying a webpage . The webpage may include navigation controls a universal resource locator and webpage content . The web application interface of the visitor may have retrieved the webpage from the web application . The co browsing portion of visitor may have been included in the webpage retrieved from the web application so that the visitor communicates events such as mouse clicks to the co browsing server .

Information of the selected visitor may be provided by the operator web application . For example the information may include name email company phone location referral source and engagements . The selected visitor s name is Mary Fraiser. The engagements may be a number of accepted co browsing engagements illustrated as 1 and a number of rejected co browsing engagements illustrated as 0 or other engagement result.

The webpage control area may include a time on page a visits to page webpage controls the webpage address of the co browsed webpage a co browse button a page history and a page history slider .

The time on the page may indicate the number of hours minutes and seconds the selected visitor has been on the co browsed webpage . The visits to page may indicate the number of times the selected visitor has visited the co browsed page . For example the visits to page may indicate a number of times in the last 24 hour illustrated as 2 a number of times visited in the last 7 days illustrated as 5 a number of times in the last 30 days illustrated as 8 a number of times visited in the last 365 days illustrated as 8 and a number of times visited overall illustrated as 9. 

The webpage controls may control the co browsed webpage when co browsing is turned on. The left arrow may go back a page in the browsing history the right arrow may go forward a page in the browsing history X may stop the loading of a webpage and the circular arrows may reload the webpage. The co browsed webpage may be the same webpage as visitor is viewing see . The co browse button may turn co browsing on and off. In the on mode events taken by visitor will be mirrored in operator . In the off mode operator observes visitor .

The page history displays where the co browsed webpage fits into the page history . Operator may select a different page in the page history and during co browsing the selected page in the page history will be displayed as the co browsed webpage . The page history slider may be used to access different pages in the page history . In some embodiments the page slider may be used to access different pages in the page history while observing the visitor .

The sales apps may be a button to access sales apps for operator to use to further the interaction with the selected visitor .

Illustrated in are two main areas of the user interface screen a communication area and the current webpage of the visitor . As illustrated the visitor is being requested to co browse with the operator in a dialogue box . The current webpage may include the universal resource locator . The communication area may include a rep video which may be a live video of the operator . An area for video or starting audio of the visitor . And an area for typing and receiving text.

The example of co browse with the visitor is complete. So the method may continue with selecting an app .

For example illustrates the operator after the operator selected the sales apps button in . A list of available sales apps is displayed. The available sales apps include calendar competitor comparison and painting placement . The operator may select the competitor comparison app .

The method may continue with configuring the app . For example after the operator selects the competitor comparison app the operator may be presented with the interface displayed in . The competitive comparison app may display a configuration interface . The configuration interface includes a left side right side and a push button . The left side includes a select current webpage and browse for web content . The right side includes select current webpage and browse for web content . The operator may select the select current webpage for the left side . The operator may browse for a competitor that the visitor is interested in and retrieve a page that has comparison information for the competitor. The operator may discuss a competitor with the visitor using the video chat and or the chat . The right side may be a webpage from a website accessible over the Internet.

The method may continue with pushing the app to the visitor . For example the operator may click the push button in . The interface is pushed to the visitor so that the operator and the visitor may co browse the interface . illustrates the visitor with the interface of the competitive comparison app being displayed to the visitor .

The method may continue with receive pull . For example the operator may press pull in and the interface would return to the interface of .

The calendar app is an example of a functionality apps that enables the operator to provide the visitor with additional functionality within the interaction.

The competitor comparison app enables the operator to push dynamic content to the visitors . The operator could select the specification for two cars from different websites or other sources. See where the interface enables a left side selection of browse for web content and a right side selection of browse for web content . The operator could select for the left side for example a 2013 Impala LTZ where its information is pulled from www.manahatanauto.com and the operator could select for the right side a 2012 Camry where its information is pulled from www.autobytel.com.

When the operator clicks on the competitor comparison app the click event is handled by the application launcher see which may run in the web application interface of the operator . The application launcher handles the click event and captures the name of the competitor comparison app the operator identification and information from the context that might be required for further customizations to the competitor comparison app . For example the context may include location and performance information that may be used by the application launcher to select a server to serve the competitive comparison app .

The application launcher makes a request to the application provider . The application provider receives the request and determines whether or not the competitor comparison app has been served before and if it exists in the cache not illustrated of the application provider . The cache of the application provider may maintain an instance of the latest applications served. If the competitive comparison app is in the cache it is served to the operator . If the competitive comparison app is not in the cache the application provider parses an application descriptor of the competitive comparison app and gathers all the resources needed for the competitive comparison app .

The application provider will create a session for the application launcher of the operator and stream the competitive comparison app to the application launcher . The application provider creates an entry in the cache of the application provider with metadata of the competitive comparison app . When the application launcher receives the stream of the competitive comparison app the competitive comparison app is rendered in an application area of a web browser. For example area of or area of . The competitive comparison app received by the application launcher may include an event handler not illustrated for handling events that might be sent received by the competitive comparison app to other components of the system .

The operator may configure the apps . The operator may configure the app locally or might use interaction with another component such as content providers . A local configuration may occur when the visitor changes local information in the app . The visitor may change the configuration in the interface provided and the change may only have a local effect. Examples of local configuration changes include the operator changing months in the calendar app see and when the operator selects a discount in a car service app not illustrated where the discount may affect other values in the car service app such as the taxes due.

The following is an example of a configuration that requires a call to the content provider . The competitive comparison app may take the information of the automobile from an external website or database. In this case the competitive comparison app makes a request which may be in a serializable format to the application provider which receives and parses the request and sends the request to the content provider which may handle content request for both local or external content providers. The content provider receives the request and invokes gathers the service content necessary. For example a call to the content provider might retrieve all the calendar events of the operator from different sources such as Funambol or Google Analytics. Some apps support the sharing of local files such as PDF files pictures or documents between the operator and the visitor . In this case the operator can upload the file to the session of the app and the content may then be pushed to the one or more visitors and or operators via content provider .

An app may be configured to share the desktop of the visitor play a game with the operator or invite a friend to join the co browsing session. For example the operator may push an app that displays a Facebook button that when selected pulls up the contacts of the visitor enables the visitor to choose a person from the contacts to join the co browsing session.

Once the app has been configured the operator can push the app to the visitor by clicking the push button see that by default is provided by all the apps . When the operator pushes the app to the visitor a request is sent to the application provider that may include the current states of the app in a serializable format such as JSON the information of the operator and the information of the visitor among other context information that can be used for optimizations. The application provider passes the request to the collaborative engine which creates a session for the app containing the meta data of the app such as current state etc. and information from the visitor and the operator . The collaboration engine may interact with the communication layer to forward the messages back and forth between the operator and visitors . The collaboration engine may synchronize the different events when the operator and the visitor collaboratively interact with the app . For example in an app that enables the collaborative browsing inside custom webpages the collaborative engine streams document object model DOM changes from the visitor to the operator and graphical user interface GUI events from the operator to the visitor . In some embodiments the collaborative engine streams document object model DOM changes from the operator to the visitor and graphical user interface GUI events from the visitor to the operator . In some embodiments the collaborative engine may dynamically determine whether to stream DOM changes from the operator to the visitor or from the visitor to the operator based on improving performance.

DOM based collaborative browsing has been filed under application Ser. No. 13 940 802 entitled CO BROWSING BETWEEN ONE OR MORE OPERATORS AND ONE OR MORE VISITORS and filed on Jul. 12 2013 the entire contents of which are hereby incorporated by reference. Additionally the entire contents of application Ser. No. 13 940 890 entitled ENHANCED MULTI TAB CO BROWSING BETWEEN ONE OR MORE OPERATORS AND ONE OR MORE VISITORS and filed on Jul. 12 2013 are hereby incorporated by reference.

The communication layer may modify the messages to add meaning to the messages that may be sent between the operator and the visitor . The modifications may handle routing issues and may be based on business rules. The communication layer sends the streamed app to the visitor through the network layer . When the message is received by the application launcher client of the visitor it is rendered by the web application interface in area for the app . The visitor may collaboratively interact with the operator over the app .

A state of the app may be maintained by the collaboration engine and can be saved at any point of time e.g. configure pushed held allocating silent edit and setting to be resumed later by the operator . In addition the operator may pause the collaborative interaction with the visitor without stopping pushing the app in this case the collaborative engine stops streaming changes from the operator to the visitor but does not stop the app . If the silent edit is done by the operator those configuration and or changes are streamed to the visitor and executed at the visitor by the app .

If the operator or the visitor stops the app a notification messages may be sent to other operators and or visitors connected to the session that did not send the stop notification. In addition the collaborative session may be removed by the collaborative engine and the session of the app may be removed by the application provider .

A development environment may be provided for the apps . The development environment may provide a framework that provides tools and libraries that allow developers to develop debug pack publish app to the distribution channel.

The development environment may include a publisher engine. The publisher engine may enable the packing of an app and publishing of the app into the system . Once the apps are published they become available to customers or operators in the application store .

The development environment may include scripting languages. The application programming interface API may be written in a scripting language e.g. Clojure Javascript Ceylon etc so it can be launched in the browser or the server. A set of libraries to interact with the different layers in the application platform may be provided. Custom libraries plugins may be added to enrich the existing repositories.

The development environment may include integration with Integrated Development Environments IDEs . Each of the components of the development environment and the application platform may be integrated with IDEs such as Eclipse Visual Studio from Microsoft jBuilder etc. Plugins may be provided to integrate with the IDEs.

The development environment may include development and production endpoints. The development environment may be enabled to consume services such as analytics and or video so the developers can test debug their apps and access services as they would be accessed in production. For example an app that requires analytics information can retrieve such information from sm.development.analytics.com for testing developing purposes and have an environment similar to the production environment. The app once published may invoke the services from analytics.salemove.com production end point for analytics instead of development.salemove.com development end point for analytics .

The development environment may include local prebuilt environments. Some services may be served locally or in private data centers e.g. video or analytics . The development environment may provide a pre built version of the services to be run locally in the developers computer for testing development purposes or for service provisioning in private data centers in case the application requires services.

The development environment may include framework libraries for graphical elements. The libraries for graphical elements may keep the consistency among the different apps . The development environment may provide an API for building GUI elements e.g buttons labels containers panels etc. . The GUI elements may be customized to fit the look and feel of the application but the developer may be limited in amount of change they can make so that the graphical elements fit the development environment brand.

The development environment may include an application evaluation policy. The application evaluation may insure that the apps meet a level of quality of service. For example the application evaluation may insure that the graphical elements have not been modified to not fit the development environment brand.

The development environment may include performance tools. The performance tools may provide to developers a way to test the apps performance without running in a production mode. The performance tools may measure different performance metrics such as latency loading times in scripts images etc. size of data transmitted processing time in the server processing time in the user s browser CPU utilization by the server CPU utilization by the user s browser bandwidth utilization among others. The performance measures may be processed and quantity metrics may be shown to the developer via an interface.

The development environment may include developer accounts. The development accounts may enable developers to publish apps and for developers to pay fees and receive compensation.

The development environment may include cloud middleware. Since apps may integrate with cloud services the development environment may provide a layer of abstraction that enables the apps to invoke cloud services asynchronously and in a state full fashion thus the apps states may remain. If an app requires accessing different cloud services from different vendors and providers the development environment may provide a unified interface of interaction to minimize overheads during the development and execution of the apps . For example if a calendar app requires access services such as Google Calendar Funambol and storage services then the calendar app may be difficult for the developer to develop due to the many API from different vendors. The development environment may provide a unified interface for accessing different cloud services by taking care of the invocation and accessing of the services.

The development environment may include a collaborative framework. The collaborative framework may enhance an app s functionality by adding collaborative capabilities. An app may include sharing content from different sources such as for example local files cloud services embedded devices cameras sensors etc. and context information. This information may be presented edited and modified in real time by the visitor or the operator during the co browsing session and the changes are replicated in the other participants and may be replicated in the source of the data information. For example if a session has two participants who are collaborating on editing a Google Calendar event and the event has several documents attached to it. These document may be used during the scheduled meeting. Content modifications of the documents by participants may be synchronized to everybody else in the editing session. The modification may also be recorded to all related data sources for example Google Calendar Google Docs SaleMove .

The development environment may include extendable communication protocol. The extendable communication protocol may be extended by developers. For example a developer may add on top of the basic network layer custom events messages to be used in the app . In addition a developer can create an extra layer that relies on the core communication protocol functionality provided by the framework. Alternatively the developer can extend by means of inheritance the core communication protocol and add custom business logic.

The development environment may include application deployment or other types of templates. Templates may provide a set of templates that can be extended to fit the needs of developers. New templates in JSON format may be created and imported into the development environment.

As illustrated in the computer system includes one or more processors one or more memory systems and one or more input output I O devices in communication by two communication buses and a bridge . The communication buses and bridge may be implemented in a variety of ways and may include one or more computer buses and or bridge devices as shown in . The I O devices can include network adapters and or mass storage devices from which the computer system can receive data from one or more of the co browsing server visitor operator application platform custom website web application and application store for processing by the processor when the computer system operates as one or more of the co browsing server visitor operator application platform custom website web application and application store .

The methods and apparatuses provided may be implemented in a general purpose computer a processor or a processor core. Suitable processors include by way of example a general purpose processor a graphics processing unit GPU a special purpose processor a conventional processor a digital signal processor DSP a plurality of microprocessors one or more microprocessors in association with a DSP core a controller a microcontroller Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs circuits any other type of integrated circuit IC and or a state machine. Such processors may be manufactured by configuring a manufacturing process using the results of processed hardware description language HDL instructions and other intermediary data including netlists such instructions capable of being stored on a computer readable media . The results of such processing may be maskworks that are then used in a semiconductor manufacturing process to manufacture a processor which implements aspects of the disclosed embodiments.

The methods or flow charts provided herein may be implemented in a computer program software or firmware incorporated in a computer readable storage medium for execution by a general purpose computer or a processor. In some embodiments the computer readable storage medium is a non transitory computer readable storage medium. Examples of computer readable storage mediums include a read only memory ROM a random access memory RAM a register cache memory semiconductor memory devices magnetic media such as internal hard disks and removable disks magneto optical media and optical media such as CD ROM disks and digital versatile disks DVDs .

