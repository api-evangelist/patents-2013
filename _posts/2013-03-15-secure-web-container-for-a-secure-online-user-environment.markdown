---

title: Secure web container for a secure online user environment
abstract: Disclosed herein are systems and methods that allow for secure access to websites and web-based applications and other resources available through the browser. Also described are systems and methods for invocation of a secure web container which may display data representative of a requesting party's application at a user's machine. The secure web container is invoked upon receipt of an API call from the requesting party. Thus, described in the present specification are systems and methods for constructing and destroying private, secure, browsing environments (a secure disposable web container), insulating the user and requesting parties from the threats associated with being online for the purposes of providing secure, policy-based interaction with a requesting party's online services.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08881227&OS=08881227&RS=08881227
owner: Authentic8, Inc.
number: 08881227
owner_city: Los Altos
owner_country: US
publication_date: 20130315
---
This patent application is a continuation in part of U.S. patent application Ser. No. 13 076 421 entitled Disposable browsers and authentication techniques for a secure online user environment filed Mar. 30 2011 which claims priority to provisional patent application No. 61 319 250 entitled Methods to securely authenticate and access remote web browser and downstream web applications filed Mar. 30 2010 both of which are incorporated herein by reference for all purposes.

Service providers are increasingly looking to deliver sensitive aspects of their services in a secure seamless manner to their users or customers. This is because users of these services are increasingly conducting important and sensitive business and other activities online. For example healthcare providers financial services providers and other online service providers may offer online services such as providing healthcare records portals for banking paying bills or secure communications regarding any of these items. With all of the confidential information communicated through web browsers online service providers and users of their services are accordingly vulnerable to theft of their identifying information through infected or otherwise compromised web browsers and through hijacked connections and spoofed destinations. Also since consumers have difficulty in remembering and managing login credentials for the service providers they use they set usernames and passwords that may be easy to recall and can be the same across all accounts so access to one username and password pair might provide a thief with access to multiple of the users accounts. Theft of login credentials personal information money healthcare data are all possible results. The range of risks is growing and current secure browsing and authentication approaches do not satisfactorily address the need for complete security to ensure a safe online experience.

Disclosed herein are systems and methods that allow for secure access to service providers websites and web based applications and other resources available through the browser upon validation of an Application Programming Interface API call received from such a service provider. Also described are systems and methods for secure use and retention of requesting party and or user policies profiles and or parameters etc. Also described are systems and methods for secure use and retention of user credentials as well as methods for dynamic authentication of users and security for applications allowing user access such as for banking ecommerce or other application where maintaining the integrity of the service provider application as well as the user data and user machine are important. Thus described in the present specification are systems and methods for constructing and destroying private secure browsing web containers insulating the user and the service from the threats associated with being online for the purposes of providing secure policy based interaction with online services.

Example embodiments in which the described embodiments could be used would include online banking customers accessing a bank website. When the customer accesses the online banking website the banking website could initiate an API call to an associated application on the user client machine providing for the initiation of a secure web container session in which an interface is presented that appears to the user as a browser window but which is actually a disposable browser window or other disposable secure browser rendering framework that is a completely graphical based interaction over an encrypted channel in which any data established as a part of the session is maintained in a segregated and encrypted space and wherein any HTML communications actually occur between the interposed security service described herein and the banking website servers. Such an approach insulates the bank from the need to interact with potentially compromised user client based browsers and provides for a well controlled and highly private environment for interaction between the bank and its customers.

By the same token the described approach could be initiated by a health care provider to interact with its online customers. Thus in an analogous way when a customer accesses the health care provider website and seeks personal information or attempts to transact online commerce with the healthcare provider the healthcare provider website could instantiate an API call to a user client machine to establish a secure web container session as described herein. The description of the foregoing banking and health care provider implementations should not be considered to be limiting in anyway and the implementations described in the present application may be broadly and usefully implemented in any application where browser and transactional security are a concern.

Accordingly although the present application is generally directed to systems and methods in which there is provided secure access to service providers websites and web based applications and other resources available through a secure web container upon validation of an API call it should also be appreciated that these systems and methods are a part of an overall secure ecosystem with multiple security and authentication features. Additionally although there are references in particular embodiments to secure disposable browsers secure web containers and secure web rendering frameworks it should be appreciated that depending upon context these terms may be used interchangeably to refer to the presentation of web images to a user in a secure embodiment and the terminology is used in different contexts according to the end use that is being described at the time.

Once a user has been authenticated through techniques described in this application or through requesting party authentication or user authorization techniques the user s activities are carried out and protected within the secure web container as described further below the effect of which is to remove the user s inputs and machine from being directly exposed and vulnerable to the public internet and which also insulates the service provider web application from access by malicious applications or users. In addition the web content delivered within the secure web container is run within a protected sandbox and is therefore dislocated and insulated from vulnerabilities that may live on the end user s machine or elsewhere. Within this secure web container the user and service provider are able to conduct a full spectrum of activities. Once a session is ended all user identifiable attributes account information service provider information and any other commercially sensitive information associated with the transaction can be disposed of. At the user s option or by option of the service provider such information may be maintained in separate secure storage to be re instantiated in a new session when a user logs in from the same or another client machine.

The advantages of the secure service environment a component of which is a secure web container as described below comprise at least the following facets security preconfigurability policy control and disposability. With regard to security the secure web container runs within a secure jailed environment within the secure service environment. The secure web container code accordingly is processed within the secure service environment and not on the local client machine. Through this approach the service renders only images of web pages on a user s machine while keeping the code rendering engine at the secure service environment dislocated from the user and the user machine. This process of dislocating the execution of web code from the user display of the web page enables security scanning and malware handling at the secure service environment and prevents malware from reaching the end user machine or the service provider web server through often vulnerable local machine resident web browsers and provides an encrypted and image based communication method that insulates the private web content from interception and possible malicious use. The service may be co located with a service provider s systems or may also be remotely located from the service provider s systems.

With regard to the preconfigurability of the secure web container a system is in place to maintain key elements of the user s profile and or a service provider s profile with their consent selection of this option and instantiates those key elements when the user or a service provider requests a new disposable container session. The new secure web container session accordingly may be populated with merchant accounts user credentials user bookmarks favorites browser histories plug ins extensions and session states associated with the user s previous disposable container session s .

Regarding the policy control element of the secure web container such policy control is provides a framework for enabling an authorized party to establish use policies for how the secure web container is used by users. Authorized parties can includes the users themselves parents IT administration personnel the service provider and others according to design need. Policies can include access rules content filtering authentication data handling upload download print session tracking logging monitoring private browsing cookie handling IP masking and the like validation of downstream sites time or geography based rules and rules governing access machines etc.

Regarding the disposability of the secure web containers this provides for building from scratch per user per requesting party service provider per session aspects of a secure web container session and then disposing of all associated data at session termination. At the option of an authorized party or according to policy session and other data can be stored in the secure environment to be accessed later.

For authentication of users the disclosed systems and methods use dynamic authentication techniques that are adaptable according to a user s configured profile and or a requesting party s configured profile with the system as well as environment variables around which a user or requesting party or someone purporting to be the user or requesting party presents himself or herself or interacts with the secure service environment. In conjunction with the described secure browsing environment the combination of all these features provide a synergistic combination of techniques that ensures online security.

In an embodiment the secure service environment is a secure web container service environment. The secure web container service environment embodiment utilizes a push model as opposed to a pull model where a user initiates the service at the user s own initiative to access multiple user requested downstream websites through a secure web rendering framework that appears to the user as browser through which the user is able to access any number of downstream websites as if using a browser client on the user s client machine. With further reference to the disclosed push embodiment however in this implementation a website owner or other service provider asks the secure web container service environment to contain its content in a secure web container and deliver it to the user via the disclosed push model using API calls. When a user clicks on a link or accesses a webpage via his or her local browser the website owner passes an API call to the secure web container service environment. The secure web container service environment instantiates the browser rendering framework that may be configured to appears to the user as a web browser populates it with page data or empty and pushes the display to the user. From the user s perspective the user sees another window or a tab and does not go through any other connection process.

It should be appreciated that the requesting party can invoke requests from contexts other than online services or websites. It could be any application or service that would call the API to deliver secure web content such as a local email application a user support or ticketing system or any of a number of other applications that might invoke a need for secure user interaction.

These exemplary figures and embodiments are to provide a written detailed description of the inventions set forth by any claims that issue from the present application. These exemplary figures and embodiments should not be used to limit the any claims that ultimately issue in a patent from the present application.

The user has a device for viewing online services . The device is in communication with the service provider s environment via connection and with a secure web container service environment via connection over the internet cloud or remote network . Further the secure web container service environment is in communication with the service provider environment . In an embodiment the secure web container service environment is located remotely from the service provider environment and is in communication with the service provider environment via connection over the internet cloud or remote network. In another embodiment the service provider environment and secure web container service environment are co located and are connected via connection over a secure local network.

When the user accesses the services of the service provider the service provider may provide online services to the user s device . When the user navigates to some secure functionality or content of the online services provided by the service provider or at any point at which the service provider determines to provide some secure functionality or content to the user the service provider environment is prompted by the service provider environment to invoke a secure web container to display the secure functionality or content to the user . To invoke the secure web container the service provider environment sends an API call to the secure web container service environment via connection or connection . The secure web container service environment then provides a secure web container and displays images representative of service provider s application web content at the user device based on the API call. These embodiments are discussed in further detail in relation to . General principles and functionality is also discussed below in relation to .

As discussed further in relation to an embodiment of the secure service environment may be a secure web container service environment set up through an API call as illustrated therein. User credentials and other personal information are stored and accessed entirely within the secure service environment and are never shared with the user s local machine . Through this approach all web code is delivered to and executed within the secure web container itself within a private user area or secure jail operating on an authenticated service machine within the secure service environment .

The disclosed architecture for the service is capable of supporting the API model as well as a number of generalized secure web container service environments. The API push model as specifically described herein in relation to is a particular application of the secure web container . Although the present patent application is directed to the API push model as described herein the enabling technologies described herein are intended to be additional embodiments in either or any such embodiments according to design requirements.

As previously mentioned the present application is generally directed to systems and methods in which there is provided secure access to service providers websites and web based applications and other resources available through a secure web container upon validation of an API call. It should also be appreciated however that these systems and methods are a part of an overall secure ecosystem with multiple security and authentication features. Before later describing the more specific elements of the systems and methods for providing secure web containers as a part of an API call as particularly described in features of the secure ecosystem that may enable or otherwise be used in conjunction with any of these embodiments are described immediately below.

As a part of the overall disposable browsing system the web code received by the secure disposable browser within the secure service environment is translated using a network and application protocol and delivered via a data translation server to the end user s local machine as encrypted display data over a secure access channel . The thin client process on the end user s local machine decrypts and renders this data to the user as an image or rendering of the browser running within the secure service environment .

Operating through this system user generated inputs keystrokes mouse input etc. are transmitted back to the data translation server via the same network and application protocol as described above over the secure access channel and accordingly to the secure disposable browser which then passes those inputs back to the original end service provider s website . The secure disposable browser is built per user on demand and it is therefore free of malware at initiation. Upon session completion the secure disposable browser and all transient session data may be purged protecting both user client machine and the service provider s application environment.

Still referring to to maintain the security of a user s access to his or her personal data and web applications through the secure service environment as well as to protect the service provider s service environment from malicious access the user is first authenticated. Various embodiments of that authentication process will now be described. The user may access the secure service environment initially through a standard local browser running on the user s local machine via an encrypted HTTPS connection connecting to a web authentication server . The web authentication server operates code comprising computer instructions stored on a computer readable medium . The computer instructions comprise instructions for conducting a transparent authentication process which when operational comprises process .

The transparent authentication process which will be described in greater detail below uses various clues to set the confidence interval around the user access attempt. Generally speaking various environmental parameters regarding the user s access attempt are deemed to be either consistent or inconsistent with expected parameters for that user. Access using a user s known or trusted local machine during a usual time from a typical geographical location and with consistent hardware and software parameters etc. will yield a higher level of confidence around the authenticity of the user s access attempt.

Once the transparent authentication process is completed the user is provided with a secure web container such as secure disposable browser within a secure user environment or secure jail by an authenticated service machine within the secure service environment . The interactive authentication process can now be run with computer instructions stored in the computer readable medium secure user data store . The interactive authentication process employs user customized and or defined processes which may also be stored in part in the secure user data store . Upon a successful authentication the user is provided with authenticated access to the secure disposable browser . Each user is given their own secure disposable browser within a secure jail such that each user s personal information and disposable browser application is insulated from each other user s and the jail is also a part of a computer readable medium contained within the authenticated service machine for storing multiple such user environments or secure jails in a secure and isolated fashion. Once successfully completing the authentication processes the user through their local machine is connected to the secure disposable browser or other secure web container operating within a secure jail running in the authenticated service machine which similarly operates computer code stored with computer readable instructions stored on a computer readable medium .

One set of instructions operated by the authenticated service machine establishes a secure disposable browser within a per user secure jail in the secure service environment . The secure disposable browser instruction codes are also stored in computer readable medium or on another computer readable medium. Although the secure disposable browser or other secure web container appears as a window display on the end user s local machine it is actually operating within a secure jail on an authenticated service machine within the secure service environment . Accordingly the secure disposable browser insulates the end user from the vulnerabilities that are associated with user s local machine resident browsers which are directly exposed to web code on the internet. Coupled with the advantageous authentication techniques described herein the secure service environment provides greatly enhanced security relative to known solutions and once a user is operating within the secure service environment he or she is able to securely perform any of a number of additional tasks securely and the service is able to provide coordination of the users access to multiple secure websites including e commerce banking or healthcare websites or conduct any other online activities deemed sensitive.

To provide secure storage and access to user account information and user data a secure user data store communicates securely over an encrypted network with the authenticated service machine . The secure data store contains user specific information that supports the functionality within the secure disposable browser . This includes data to authenticate and access the secure service environment to potentially customize the secure disposable browser with user specific preferences including accounts favorites bookmarks history etc. as well as to support other applications within the secure disposable browser such as a secure mail portal a document lockbox and a reports and settings configuration application all of which are applications executable by the authenticated service machine when retrieved from an associated computer readable medium such as computer readable medium . Further the secure service environment allows for fetching of the credentials from the computer readable medium to allow for the user to login to various items such as their email lockboxes or other account aspects. The secure service environment then further provides a secure disposable browser such that on the user s local machine they would see their service web interface presented to them on a tabbed window.

Regarding the secure email portal the disclosed system and method provides the ability to replace the user s email address on record with downstream service providers with an obscured and non identifiable yet user and vendor unique email address controlled by the secure service environment . This results in emails from a service provider arriving at this secure hosted email portal . The disclosed system and method thereby ensures the validity and authenticity of the email messages from each provider. The analysis of the validity and authenticity of email messages can include analysis of the sending server from where the message originated domain to IP matching as well as examining the integrity of message metadata to ensure authenticity. Users can then use the email portal to manage their sensitive email communications with these chosen downstream websites . The secure email portal allows for different logical displays including chronological or by service provider. The users can be informed of new messages in their secure portal inbox by sending notification emails to their personal email account via an icon on their local machine or via SMS to their mobile phone or other method.

Regarding the document lockbox the disclosed system and method provides for interaction with the print download functionality within web applications to offer the user convenient one click view print save and search enabled access functionality within the secure service environment. A user is accordingly able to view a document within a web application print to PDF or similar transportable format and launch a viewer to physically print or save to the document lockbox memory which is a hosted and encrypted archive for statements documents within the secure service environment that the user can access and retrieve at times of their choosing. Users can annotate or add commentary to any document and have a logical view of their statements documents by period or service provider. The service can also enable ingestion of other scanned documents into this lockbox via an upload mechanism from the user s machine or other local data store. Users may also be able to share documents with other users that are registered with the service. In this instance a user may provide access and or edit privileges to another user enabling saved documents to be shared with a user or multiple user without those documents being publically available or stored locally on any end user machine.

Still referring to another disclosed embodiment in the present disclosure relates to providing usage policies per a policy database and admin policy portal . These usage policies can be set by system administrators on behalf of one or multiple employees by parents on behalf of one or more children or otherwise by a one person on behalf of a group of people. Some or all of such policies can also be enabled and individually maintained by the users themselves according to their desired settings. Policies can be enforced globally for all actions taken from the disposable browser or on a per account basis to give more fine grained control over usage for particular online accounts. E.g. log me out of all accounts after 5 minutes of inactivity force out of band authentication whenever I access www.mybank.com only allow access to www.mybank.com when I m coming from my home IP . Particularly as the secure service environment may be employed in a centralized cloud based environment the setting of usage policies on behalf of multiple users by an administrator is easily facilitated including the setting of usage policies e.g. on a per site basis or according to other defined user groups. These usage settings can be established by an admin or parent or other party with admin rights through the admin policy portal communicating with the policy database . In the event that a user is configuring his or her own policies this admin policy portal can be accessed from within their secure disposable browser connecting to the secure service environment and in turn to the admin policy portal over the secure access channel .

Illustrated in is another functional level view of the secure service environment of . This figure illustrates the interaction between some of the system elements described in . While there are certain elements shown in that are not illustrated in and vice versa one of ordinary skill in the art would be able to advantageously describe with respect to one figure in order to achieve the advantages described herein for operation with the embodiments shown in other figures. All such embodiments are understood by one of ordinary skill in the art to be encompassed within the present specification.

Within the secure service environment is a web authentication server that provides for a user to connect to the secure service environment for the purposes of initiating a log in process user and machine identification purposes user factor checking browser factor checking machine factor checking and session factor checking. For storing the various factors a master list of profile data is stored in a user database which is a component of the secure user data store . The web authentication server is in communication with various sub components of the secure user data store . The user login attempt can made through the user s local machine typically via the user s local browser When receiving a login attempt the web authentication server will reference the user database and the session database to cross check data gathered during the login process including authentication factors from the login session against that stored in the database.

In the described approaches at least some of the particular factors can be gathered from characteristics of the user s local machine as will be further described below. As illustrated in this system diagram provides another consistent system view of the system illustrated in . As illustrated in the web authentication server is primarily responsible for responding to and handling requests to initiate the login process and brokering the transparent authentication process whereas authenticated service machine is primarily responsible for accepting the incoming connection request performing the interactive authentication process and managing the per user jailed environment which contains the secure disposable browser or other secure web container see . As described above this secure disposable browser does not store user data on the user s local machine so in conjunction with the described authentication techniques this method and system provides a high level of security for user credential data and other user data.

As a part of the above described authentication process when a user logs in to the secure service environment the web authentication server executes the login request against a hierarchy of authentication techniques referencing the user factors previously stored in the user database which is part of the secure user data store with the aim of confirming the user s true identity or detecting an imposter .

Initially the web authentication server examines factors associated with the user s login attempt using techniques that are transparent to the user. This enables the secure service environment to place a preliminary confidence interval around user identity where confidence interval refers to a certain degree of confidence that the user is who he or she purports to be and the extent to which the user s local machine is recognized as being associated with the user s account or possibly modified since previous login attempts. Depending upon this initial level of confidence the web authentication server can determine whether and what further transparent and or non transparent information is required from the user or the user s local machine .

Types of transparent information that can be garnered from a user s login attempt such as through the session information gathered from the connection to the user s local machine include browser factors machine factors and session factors as further described below.

Browser Factors. Browser related parameters that allow identification of user s local browser resident on the user s local machine from which the login process is being initiated. Examples of such browser factors include browser plug in details user agent system fonts cookies super cookies color depth screen size and more. Many other factors associated with a particular browser revision or configuration can be detected analyzed and cross checked against the user database .

Machine Factors. Specific attributes of the user s local machine can be identified including by placing a unique digital certificate on the user s local machine . Particular aspects intrinsic to the user s local machine can also be detected including software and hardware components and serial numbers e.g. MAC address OS fingerprint client application serial numbers etc. . These various aspects can be detected directly or they can be built into an encrypted hash derived from a combination of these various factors. This information can be previously stored and then compared for authentication purposes against information within the user database .

Session Factors. A collection of session related parameters can be detected and further used to identify and corroborate the user s identity. For example IP address data can be used to determine the user s geographic location and this location can be checked against expected user location according to static and or dynamic information user home bases user travel patterns possible travel patterns etc. stored in the user database and associated with the user.

In addition to the above described factor analysis the secure service environment can establish behavioral norms for the user and is therefore further capable of checking for behavioral abnormalities as a part of the identification and authentication process. Indicators can include a user s typical login location typical access device time of day or even a typical behavior pattern regarding activities on downstream sites etc. Other available indicators incorporate logical assumptions that can be inferred from looking at recent activities such as change in login frequency logging in from a different location over a short period of time cross checking the location of a user s computer against that of the user s mobile phone and more.

Further beyond the browser machine session factors and the detected behavioral norms the secure service environment allows users or admins on behalf of multiple users to establish their own prescribed behavioral rules that can be reflected within the authentication framework e.g. I never log in from a public machine I rarely travel I m a road warrior these are the only locations that I might log in from I ll never log in from abroad I ll never log in during these hours. Behavioral norms may be defined and applied as global policies or can be defined and applied on a per downstream website basis establishing a policy specific to a particular website account or destination site e.g. only allow my home machine to connect to this bank account etc. These policies are set in the policy database described in and in accordance with the portals and methods described in the description of this aspect of . The resulting identification and authentication techniques result in a dynamic process in which authentication may vary time over time based on the composite result of service rules deviation from user behavioral norms and user customized policies.

If transparent authentication can not be accomplished or if one or more of the behavioral norms is violated or as a condition of policy further validation of the user is required additional steps can be presented to the user. An example of when and how these steps might occur is when a known user on an unknown user machine is presented to the secure service environment . In this case the secure service environment will lack the historical information to authenticate identify the user. In this event other methods can be used depending on the circumstances. In the event that the user is known via factors supplied to the web authentication service but the user s machine is unknown or not considered trusted where trusted refers to a previous configuration setting performed either by the secure service environment or the user themselves instructing the secure service environment to trust this machine thereby enabling login using standard authentication methods without additional validation due to hardware or configuration changes the secure service environment can use out of band communications to validate the user. Such out of band communication techniques include sending a text message to the user s registered mobile phone. The text message would deliver a randomly generated code for the user to enter into the web authentication server via their local browser to validate himself or herself. Another out of band approach would be to place a phone call to a phone number registered by the user and then similarly provide a randomly generated code for the user to enter into the web authentication server via the local browser A third out of band technique would be to use a smart phone application or app. The smart phone app will be something the user can use to log in register with the secure service environment and or validate himself or herself. As with regular client PCs smart phones have hardware and or firmware and or location identifiers that specifically identify the equipment phone and those identifiers can be initially or further stored in the user database for the purpose of user identification.

If most factors are correct but a few are not the user could still be identified as correct if enough factors are found to establish a confidence interval around the attempted access. By using such a confidence interval the authentication process is flexible and dynamic. Thus updated hardware that is associated with an authenticated user access could be updated into the user database . Thus the secure service environment can keep a collection of profiles for each user such as a profile of the machine they accessed the service from a profile of the browser they accessed from which machines those browsers were associated with when they connected what location they are connecting from if their mobile phone location is consistent with their machine location how many times they have failed authentication in this session prior to success etc. The secure service environment can accordingly maintain a history of these items and further analyze historical changes.

The historical changes tracked by the secure service environment can be used to set an expected range of the types and frequency of changes associated with and expected from a given user. Thus the probability that a given change is correctly associated with a given user can be determined relative to that user s historical norms and thereby can be used to help determine the confidence interval around a user s authentication session. Further the tracking of such changes and the flexible departure from a rigid authentication scheme allows the presently described system to track changes and to accordingly allow the associated systems to change and for the adaptable authentication system to evolve with such change. If significant changes occur the secure service environment may allow the change without a separate non transparent authentication step but in either case once the user is authenticated the secure service environment operates to update components of the secure user data store to reflect the change.

There is a separate but related process for continuing to apply strong authentication to the user. The above description relates to the process of authentication as could be implemented to facilitate login to the secure service environment . But even if a malicious user should manage to get past a first level of authentication such as by gaining access to an actual user s machine and knowing sufficient identification information for that user certain behavior patterns may trigger an additional verification step. For example if the system recognizes that a user typically accesses their online financial service account after 8 pm on weekdays typically to review balances and to pay selected bills but the secure service environment recognizes activity that is anomalous to this typical behavior pattern such as a large wire transfer the secure service environment could interrupt that transaction and prompt the user for an additional verification step.

Once the user has successfully completed the initial transparent authentication process and in the event of an out of band additional validation step that has been successfully completed a more formal interactive user authentication process is initiated. This interactive user authentication process is performed within the secure confines of the secure disposable browser and is designed to provide the user the capability to authenticate themselves buy inputting their specific authentication string into the prompts provided. The process for starting the local environment that will be used to interact with the secure disposable browser called the thin client process and the act of ensuring that the data handoff from the user s local browser to the thin client process is secure correct and complete are described below. After successful completion of the transparent authentication process the thin client process that provides a secure connection to the secure service environment is launched on the user s local machine . The software code operating as the thin client process or another application running on the user s local machine including a Java applet or other operational code can initiate the thin client process and determine if the client software is up to date if components have been removed or altered or if the client application has been compromised or if there is anything else that needs to be installed or replaced. Next the thin client process or another application running on the user s local machine can create an authenticated session file on the user user s local machine . In parallel within the secure service environment and within the session database the user s session has been profiled and a set of instructions on connecting from the thin client process to the secure service environment has been defined. This data is passed securely to the user s local machine and constitutes the bulk of the contents of the session file . This session file contains data instructing the thin client process on which authenticated service machine to connect to in order to access their secure disposable browser . Connection information on where to connect may include which service infrastructure to connect to in which region which machine ID will be acting as the authenticated service machine which session ID to present in order to connect to the appropriate session process which supplemental authentication factors to present and more.

The session database is referenced by the authenticated service machine . The authenticated service machine acts as the system which will instantiate the secure disposable browser for user within a secure jail . The thin client process connects to the authenticated service machine and the secure service environment can through this connection present interactive authentication for the user displayed via the thin client process but staged and computed within the secure disposable browser or other secure web container within the service environment . The connection established from the thin client process to the secure service environment is an encrypted secure connection. The secure connection can be through a secure socket layer SSL connection or other secure communications protocol and the thin client process can provide client certifications although the client certification process can be transparent to the user because it can be installed as a part of the software delivered in order to initiate the thin client process Through this secure communication channel there are several layers of communication handshaking. The basic hello handshake is the first level followed by a security level handshake. The secure service environment can further do a security check of the thin client process or the thin client process itself can run a self certification on its own initiative or at the direction of the secure service environment . In fact although the thin client process is described at times herein as being separate from the secure service environment it can alternatively be thought of as a part of the secure service environment since it is a system element distributed as a part of the overall secure service environment . With this model as well as with the additional abstractions layered in to each authentication module as described below the act of logging on to the service is significantly more secure than alternate systems.

In establishing the connection between the thin client process and the secure disposable browser the authenticated service machine may access the session database to ensure that a valid session request is being made. Once the validity of the session request is established the authenticated service machine will query the thin client process for additional authentication factors. Once the validity of the additional factors is established the authenticated service machine will connect to the user database and collect certain user profile information as pre configuration data for setting up the secure web container or secure disposable browser . Once the configuration information is collected a secure jail or secure private working environment is established within an authenticated service machine . That secure jail is instantiated individually for each session and can be terminated and all associated data deleted when its associated session is ended. These secure jails provide a mechanism by which a new disposable browser can be created for each user session and populated with the users configuration data and whereby such disposable browser can operate on the authenticated service machine secure from the vulnerabilities of typical user machine resident web browsers.

As a part of the system configuration the authenticated service machine establishes a queue of pre built secure jails that are fresh. When assigning these jails such information is established in the jails and the jails are ready to be populated by the secure disposable browser complete with user specific or other session specific information such as what authorization schemes the user has what backend service providers are relevant to the user assigning relevant data to user authentication schemes etc. On a given authenticated service machine there can be many secure jails each with a secure disposable browser or other secure web container per physical machine. As with multiple of the described machines in this specification including the web authentication server and the authenticated service machine these machines can be implemented in a virtual computing environment cloud computing such as one provided by using Amazon s Elastic Cloud EC2 computing environment. Thus rather than having a user to virtual machine linkage this described embodiment comprises a user to jail linkage with multiple jails being assignable to each authenticated service machine . Further a variety of virtual computing environments may be available in various geographic locations across differing vendors and the authenticated session file that is delivered to the thin client process may have specific instructions that allow the thin client process to connect to an optimized authenticated service machine that is best suited for the conditions of the user s particular session e.g. on that is the nearest proximity to the user on specified network infrastructure configured with the appropriate user specific resources etc.

Security is provided in the secure jail by establishing a secure chroot environment or similar type of system access control in which a user s secure disposable browser is restricted to a certain directory within the overall file system on the authenticated service machine . For each session a new session ID is established for the user and is used as the identifier to establish the secure jail directory structure. The secure jail associated directory and data and secure disposable browser is disposed of after the session is complete. Thus each user will only see a set of data that is germane to them and has been established for their current authenticated sessions. The authenticated service machine has a queue of such pre configured secure jails available and is accordingly able to assign them to users upon each session request to establish a session specific secure jail and can then create the secure disposable browser within the secure jail and add the user s preferences to it.

To ensure the segregation and security of the data in these jails permissions are established as described above such that one user s data is not accessible to another user and that one disposable browser or other secure web container cannot be compromised and be used to intercept or corrupt another user s disposable browser or other secure web container operating in another secure jail running on the same authenticated service machine . Further the implementation can include independent encryption of each user s data.

To provide the element of disposability these secure jails are deleted at the end of each user session and thus the ending of a secure disposable browser session also results in the clearing of user data and applications associated with that browser session. Thus although the secure user data store may retain the user session settings no such settings are stored on the user s local machine . Further since the user is interacting with the secure disposable browser using the thin client process through a secure access channel using a protocol that is restricted to display and user input data the downstream websites that the user is interacting with are not readily able to track user actions and user behavior. The user is controlling the secure disposable browser remotely and any cookie data source IP data or other user identifiable factors outside of any login credentials that may have been supplied as part of the access to the site is obscured to the downstream website. Given that all cookie data may be destroyed at the termination of the session and given that the user may reconnect to another secure disposable browser that would have a different source IP address the downstream websites will only be able to track single session behavior from a non attributable source IP address. Accordingly from a security standpoint and from a user privacy and data tracking standpoint the implementation of a disposable browser shields users from undesired consequences. According to policies stored in the policy database see various aspects of the user browser session can be stored and retained even including the specific browser session states if desired but they are safely encrypted and stored within the secure user data store .

Certain session information can be stored in the session database and the user database allowing the user to maintain session status even when disconnecting and reconnecting at a later time. Depending on configuration and applicable polices as defined in the policy database a user could disconnect the thin client process from the authenticated service machine but the associated jail and disposable browser could remain in situ. A user could re authenticate and present the original session ID or other identifier and start the thin client process again from the same machine or from another local user machine or alternate type of device such as a smart phone or a tablet computer not shown and re connect to the same authenticated service machine secure jail and disposable browser . This would provide continuity to the user allowing them to move from machine to machine without having to re connect to any downstream sites when reconnecting to a secure disposable browser .

The program flow of the user interaction and authentication process is illustrated in . After transparent authentication factors are collected and validated the authentication process transitions from an initial process conduced via HTTPS to a more formal process where an authentication application the interactive authentication process is presented to the user within the secure disposable browser . The initiation of the formal authentication process begins with the launch of the thin client process and is illustrated in the figure in which the user s local browser sends account data such as a user nickname in which a look up of the account information is performed against user database . In response to the look up a User ID is returned and a Session ID is created and associated with the User ID at action . In particular at action the User ID is sent to the session database where the session database performs checks and returns a Session ID. Then having assigned a Session ID in the session database and associated that Session ID with the User ID the session connecting the secure service environment can be launched and rendered by the thin client process This transition from an initial connection and query via HTTPS by the web authentication server for performing transparent authentication to remote display of the secure disposable browser via the thin client process via the secure access channel is significantly different from other solutions and provides a comprehensive and secure environment for exchanging authentication credentials and interacting with downstream web sites .

In the described embodiments above the initial web browser challenge can be sent unencrypted or unencrypted. In processing the user look up action the data created or identified as a part of the above described process includes a User ID and an associated Session ID that are created at that time action . The User ID is looked up before its linking to a new Session ID which is initially merely a new record in the session table in the session database .

The session database may be kept unencrypted but the User IDs used for each session are transmitted with encryption and the User IDs are thus preserved encrypted in the back end of the secure system to protect them from disclosure on the general internet. The motivation to provide this selected encryption is that it removes the incentive to try to crack a particular database. Thus even if a hacker were to crack one database without the other cross referenced database access the hacker would not be able to tell what the cracked data relates to. Further each user with each provider has a different encryption key even further limiting the scope of what could be learned by cracking a database.

As a part of the launch session action the Session ID is sent to the user s local browser which then starts up the thin client process Referring back to there is a handoff between the user s local browser and the thin client process where more formal authentication activities can occur. Thus the original user s local browser authentication process only connects to the web authentication server which only accesses the user database and the session database but nothing related to more formal user authentication or account information.

The authenticated service machine is operable to validate the session ID sent to it by the thin client process In this instance the authenticated service machine connects to the session database to verify the validity of the session ID received from the thin client process The validity of the session ID is determined by making an inquiry to session database regarding whether the session ID currently exists and is not expired. Once the session ID is validated at action the authenticated service machine creates a secure jail and launches the interactive authentication process . In other words the foregoing steps were all directed to identification of the user the transparent authorization process identified in FIG. but the interactive authentication process has not yet strongly authenticated the user to fully access the secure disposable browser or other secure web container .

The interactive authentication process will be further described below but it could be comprised of any human interface presently known or developed in the future for providing interaction between a computer and a human visual webpage cues keyboard or mouse input audio cues and or voice recognition input and supplemented with delivery of out of band data e.g. via the user s mobile phone to strengthen the authentication of the end user. The interactive authentication process may be more or less involved depending on the confidence interval placed on the user s authenticity from the preceding transparent authentication process .

The interactive authentication process also makes the assumption that inputting authentication data directly into the user s local machine can lead to compromise. As a result the interactive authentication process only requires the user to input a randomly assigned and constantly changing representation of their authentication data into the user s local machine . This reduces the possibility that stolen system input data has long term value since it does not correspond to the user s actual authentication data. Various applicable techniques that could be implemented within the context of the preceding figures including are described below.

For the exemplary interactive authentication process of during initial registration to the service the user establishes a sequence of at least three random icons from a library of icons. This selected sequence of icons represents the user s interactive authentication sequence from thereon. Whenever subsequently authenticating to the secure service environment the user will be presented with the interactive authentication process within the secure disposable browser . In this process the user will be required to select using a mouse click the correct icons in the correct sequence from a randomly displayed subset of icons. The subset of icons displayed and the relative positioning of the user s specific icons will change randomly each time the interactive authentication process is delivered. The arrow in points to the first one of the sequential random icons that can be selected by a user click whereas the arrows in point to the second and third selected icons respectively. As can be seen from the figures these chosen icons are presented as authentication images in the interactive authentication screen display . This method satisfies the something you know criterion of multi factor authentication since it requires the user to recall specific knowledge to demonstrate authenticity.

Another type of interactive authentication process would require the user to establish an x digit PIN during registration to the service. This represents the user s interactive authentication data from thereon. Whenever subsequently authenticating to the secure service environment the user will be presented with a 0 9 number line with each number being randomly assigned or mapped to a single or double set of letters. E.g. 0 k 1 ef 2 t 3 xc etc. The user then uses the keyboard to input the letters corresponding to the digits of his or her PIN. Furthermore each time user enters a letter s the random mapping of numbers to letters changes. In this way the system input data is never the same and the user s PIN is never directly revealed. This method satisfies the something you know criterion of multi factor authentication since it requires the user to recall specific knowledge to demonstrate authenticity.

Another type of interactive authentication would be to use phone call based authentication. The purpose of phone call based authentication is to associate or bind a purported user s authentication session to the secure service environment with a phone known to be owned by that purported user thereby increasing the confidence that the purported user is legitimate before granting full access to the secure service environment . At initiation of the service users could designate a set of phone numbers cell home etc. with the secure service environment . An authenticating phone call could then happen at any time during the transparent authentication or interactive authentication processes based on environment variables and or user defined policies. A recorded greeting played for the user could be made in the user s voice to provide comfort on the authenticity of the calling party. Answering this call and entering either a pre defined key PIN or password would accordingly authenticate the user. If successful the user would then return to the web session where the authentication process will proceed automatically. This method satisfies the something you have criterion of multi factor authentication since it requires the user to have possession of an identifiable item to demonstrate authenticity namely the phone .

The above two techniques may be used in isolation or together depending on the situation and or the confidence interval placed around the transparent authentication process . Phone call based authentication may also be conditionally added in the scenario where there is no other something you have factor present like a certificate on the user s local machine . This would reflect the scenario where a registered user is attempting to access the secure service environment from a new or untrusted local machine.

As described in regarding out of band communications variants of phone call based authentication techniques in the disclosed systems and methods include a delivery via text of a one time code to the mobile phone that the user is required to enter into the authentication process b delivery via a phone call of a one time code that a user is required to enter into the authentication process c generation of a one time code on the smartphone using a dedicated application that the user is required to enter into the authentication process c using a dedicated application on the smartphone to store access a unique authentication grid comprised of random numbers arrayed by column and row and asking the user to enter a random combination into the web session e.g. B5 K1 C3 2 5 8 . This grid can be static or it can dynamically refresh based on some algorithm.

Outside of the systems and methods described above additional something you know mechanisms are disclosed in the embodiments herein. These additional something you know techniques include but are not limited to other image based methods including 

Another authentication technique that could be used includes gaming concepts specifically including using knowledge of how a user chooses to play a game as an authentication technique. As an illustrative example it could be learned how a user moves a Pac Man type character through a course or how the user plays tic tac toe. The games themselves could be representations of various well known games and they could be presented as represented in as images or protocols on the screen .

Another authentication technique that could be used at this stage includes capturing user gestures using various input devices. An example would be moving an accelerometer enabled device in x y z space and using the accelerometer to capture the motion or using the finger stylus to input a gesture in x y space on the screen.

Other authentication techniques that could be used at this stage include word games and numerical puzzles. Users could complete pre selected phrases as an authentication technique and this would include the ability to craft user specific shared secrets phrases quotes. The secure service environment would supply half of the shared secret and the user would complete it. For numerical puzzles users could be asked to complete simple pre defined numerical equations as an authentication technique. Users select or define an equation with the secure service environment . The pre defined equation could contain static and dynamic parameters as well as random inputs and the user could control the complexity of the equation. A simple exemplary equation would be Today s date service provided random my age .

The disclosed embodiments include the collation and selective use of the above techniques based on situational context and user preference including based on an original confidence interval determined from the transparent authentication process as well as enabling user customization of large parts of the process.

As to the user customization of this process in the disclosed systems users are enabled to customize their choice of interactive authentication process as described above as well as to customize the situations and rules around when and how these methods are used. Following are exemplary customization methods. Users can select a something you know scheme from the list of many provided as well as conditionally complement it with a something you have scheme. Users can determine the specific elements of their selected scheme pictures equation PIN gesture phrase call SMS etc . Users can create default or conditional rules for when different parts of the interactive authentication process is used examples include Always call my phone to authenticate me Send me an SMS when you re unsure of my authenticity Perform out of band authentication whenever I m coming from a new machine a new location or out of my normal hours Always prompt me for authentication whenever I access www.mybank.com etc.

Thus far the above schemes for transparent and interactive authentication processes have described methods to authenticate the user attempting to access the secure service environment . Described below are methods for the secure service environment to convey its authenticity to an end user. Such methods rely on the notion that certain information about the user and the user s behavior is uniquely known by the secure service environment . Displaying this data to the user allows a legitimate user to have greater confidence around the authenticity of the secure service environment while correspondingly increasing the difficulty for a fraudulent service to deceive the user. Examples of such data includes display of user s nickname history of logins map of recent login locations accurate downstream website accounts browsing history and bookmarks etc. The user can use any or all combinations of these elements to validate the authenticity of the secure service environment .

The secure service environment may include various machines servers and processes as discussed above in relation to . Thus the secure service environment may include for example web authentication server data translation server transparent authentication process interactive authentication process secure user data store secure jail authenticated service machine web analysis server downstream web server analysis process admin policy portal and policy database . The secure service environment may also include an application programming interface API layer in communication with a requesting party server and further in communication with an API server . The API server is in communication with the authenticated service machine and policy database . The secure service environment may also include a secure web container within a per user secure jail in the authenticated service machine . The policy database memory may include a plurality of policies which may be used with a plurality of requesting party application providers based on the syntax of the API.

The API server is operable to validate an API call received from a requesting party application of a requesting party application provider. Requesting party applications are on a requesting party server which operates remotely from the user s local machine . Depending on the situation the requesting party server may operate remotely or locally with respect to the secure service environment . For example in an embodiment the requesting party server is a remote server in communication with the service environment . In another embodiment the requesting party server is a local server connected via a local network e.g. LAN WAN etc. with the secure service environment .

Requesting party applications may comprise online services. The requesting party server is in communication with the user s local machine and the API layer in the secure service environment . Upon validation of the API call a secure web container is constructed within the secure service environment which is operated securely and remotely from the user s potentially compromised local machine . Thus the secure web container is invoked to effect displaying images representative of requesting party application web content at the user s local machine based on the API call . The images representative of the requesting party application web content is translated using a network and application protocol and delivered via data translation server to the end user s local machine as encrypted data over a secure access channel . The thin client process on the end user s local machine decrypts and renders this data to the user as an image of the secure web container running within the secure service environment .

The secure web container may be invoked based on the triggering of one or more triggers defined within the requesting party application . The triggers may automatically cause the requesting party application to make an API call to the API layer of the secure service environment . It should be appreciated that the requesting party can invoke requests from contexts other than online services or websites. It could be any application or service that would call the API to deliver secure web content such as a local email application a user support or ticketing system or any of a number of other applications that might invoke a need for secure user interaction.

To invoke the secure web container based on the API call an API server is in communication with the API layer the policy database and the authenticated service machine . The API server validates and processes the API call . In some embodiments the API server instructs the authenticated service machine to construct a generic secure web container. In other embodiments the API server instructs the authenticated service machine to construct a secure web container based on policy records in the requesting party application data store and or policies in the policy database . In an embodiment the API server may determine which policy is associated with which requesting party application via looking up the requesting party s policy record s in the policy database . The server may further instruct the authenticated service machine to invoke the secure web container based on the policy record s determined from the policy database . To effect the invocation the API server determines which policy or policies from the policy database are associated with the requesting party s policy record s and instructs the authenticated service machine to use relevant policies for the secure web container . The authenticated service machine is in communication with the policy database and may retrieve the relevant policy or policies from the policy database when invoking the secure web container .

The secure web container may be a disposable web browser. The disposable web browser may be provided to display within an existing browser window at the user s local machine as an additional tab of the existing browser window at the user s local machine as a sub window associated with the existing browser at the user s local machine or as a separate system window at the user s local machine .

Still referring to a policy record associated with the requesting party application may be determined at the API server . In this embodiment the requesting party application data store in communication with the API server and the policy database effect determining the policy record associated with the requesting party application . The policy record may also be received from the requesting party application substantially simultaneously with the API call . Thus the API call may define a policy or a policy record in several ways. The requesting party application data store may also include policy attributes which govern aspects of user interaction with the web content. One or more of the policy attributes may be associated with one or more of the plurality of policy records in the policy database . Policy attributes may also be received from the requesting party application simultaneously with the API call . Thus the API call may also define policy attributes in several ways.

To allow administrators to set policies for a plurality of requesting party application providers a policy portal server may be connected to the policy database memory . An administrator may be one of the plurality of requesting party application providers which would enable the administrator the provide its own policy record. Additionally an administrator may set policy records on behalf of the plurality of requesting party application providers.

Illustrated in is a functional level view of the secure service environment of . This figure illustrates the interaction between some of the system elements described in . While there are certain elements shown in that are not illustrated in and vice versa one of ordinary skill in the art would be able to advantageously describe with respect to one figure in order to achieve the advantages described herein for operation with the embodiment shown in other figures. All such embodiments are understood by one of ordinary skill in the art to be encompassed within the present specification.

The disposable web container API allows any web service or other application defined as the requesting party to programmatically invoke a secure web container for displaying web content. The requesting party will develop against the API to integrate triggers into their application that spawns the disposable browser. These triggers can be defined by the requesting party and contained within their application logic. The API exposes a basic syntax for making a call to the disposable web container service when a trigger has been invoked. The display of the content and the controls in place to govern user interaction with the content or ability to access third party web content using the disposable browser can be pre defined and stored within the disposable web container service or delivered as party of the syntax of invoking the disposable browser. Users may have no prior knowledge of these triggers and can be seamlessly transitioned to the disposable browser at the point of invocation.

Referring to user interacts on local machine natively with requesting party application via the local browser if a web service . User invokes a trigger within the application that makes an API call to the secure web container service. Secure web container validates the requesting API call and interprets API syntax which may include site URL to publish and browser attributes such as navigation elements to include or suppress duration of session and more . Secure web container prepares the policy record associated with the requesting party API call that will govern the user interaction with the disposable browser. This policy record may be included as part of the requesting API call or may be stored within secure web container and fetched at invocation from a secure policy database or policy profile . The secure web container is built in a sandbox with specified policy attributes invoked. Policy attributes govern any and all aspects of the user interaction with the content within the secure web container including file up download capability external linking navigation presence of free form browser navigation elements and menus copy paste capability session duration and or termination rules and more. The user is prompted to download accept remote agent if necessary or if absent after which user is presented with the secure web container disposable browser from within their existing browser window as an additional tab within their browser as a sub window associated with their browser as a separate system window or other. User continues within disposable browser for the remainder of the session as defined by policy controls. Requesting party updates local browser window with reference to the secure web container disposable browser window or tab. When the session is complete either via user action or secure web container action all user browsing data is purged.

While various embodiments have been described above it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of a preferred embodiment should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the claims and their equivalents for any patent that issues claiming priority from the present provisional patent application. Further there are a number of embodiments for authentication and other features that are described in the context of a pull type disposable browser environment but it should be appreciated that such embodiments are further applicable to API type push embodiments as well according to design needs. Although there are references in particular embodiments to secure disposable browsers secure web containers and secure web rendering frameworks it should be appreciated that depending upon context these terms may be used interchangeably to refer to the presentation of web images to a user in a secure embodiment and the terminology is used in different contexts according to the end use that is being described at the time. In general and according to design needs the described embodiments may all be used in the other end uses or contexts. It should further be appreciated that API as used herein refers to any type of coordination between operating instances in different systems communicating with each other. The term API is not intended to be limited solely to specific application programming interface calls at the software level.

For example as referred to herein a machine or engine may be a virtual machine computer node instance host or machine in a networked computing environment. Also as referred to herein a networked computing environment is a collection of machines connected by communication channels that facilitate communications between machines and allow for machines to share resources. Network may also refer to a communication medium between processes on the same machine. Also as referred to herein a server is a machine deployed to execute a program operating as a socket listener and may include software instances.

Resources may encompass any types of resources for running instances including hardware such as servers clients mainframe computers networks network storage data sources memory central processing unit time scientific instruments and other computing devices as well as software software licenses available network services and other non hardware resources or a combination thereof.

A networked computing environment may include but is not limited to computing grid systems distributed computing environments cloud computing environment etc. Such networked computing environments include hardware and software infrastructures configured to form a virtual organization comprised of multiple resources which may be in geographically disperse locations. Although various computer elements have been illustrated herein as single computer servers or machines such elements may operate over several different physical machines or they may be combined as operating code instances running on a single physical machine. The claims in the present application comprehend such variation in physical machine configurations.

Various computer elements have been illustrated herein as single computer servers or machines such elements may operate over several different physical machines or they may be combined as operating code instances running on a single physical machine. The claims in the present application comprehend such variation in physical machine configurations.

Various terms used herein have special meanings within the present technical field. Whether a particular term should be construed as such a term of art depends on the context in which that term is used. Connected to in communication with or other similar terms should generally be construed broadly to include situations both where communications and connections are direct between referenced elements or through one or more intermediaries between the referenced elements including through the Internet or some other communicating network. Network system environment and other similar terms generally refer to networked computing systems that embody one or more aspects of the present disclosure. These and other terms are to be construed in light of the context in which they are used in the present disclosure and as those terms would be understood by one of ordinary skill in the art would understand those terms in the disclosed context. The above definitions are not exclusive of other meanings that might be imparted to those terms based on the disclosed context.

Words of comparison measurement and timing such as at the time equivalent during complete and the like should be understood to mean substantially at the time substantially equivalent substantially during substantially complete etc. where substantially means that such comparisons measurements and timings are practicable to accomplish the implicitly or expressly stated desired result.

Additionally the section headings herein are provided for consistency with the suggestions under 37 CFR 1.77 or otherwise to provide organizational cues. These headings shall not limit or characterize the invention s set out in any claims that may issue from this disclosure. Specifically and by way of example although the headings refer to a Technical Field such claims should not be limited by the language chosen under this heading to describe the so called technical field. Further a description of a technology in the Background is not to be construed as an admission that technology is prior art to any invention s in this disclosure. Neither is the Brief Summary to be considered as a characterization of the invention s set forth in issued claims. Furthermore any reference in this disclosure to invention in the singular should not be used to argue that there is only a single point of novelty in this disclosure. Multiple inventions may be set forth according to the limitations of the multiple claims issuing from this disclosure and such claims accordingly define the invention s and their equivalents that are protected thereby. In all instances the scope of such claims shall be considered on their own merits in light of this disclosure but should not be constrained by the headings set forth herein.

