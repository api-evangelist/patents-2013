---

title: Object migration between cloud environments
abstract: Technologies are generally described for a system for migrating an application between cloud environments such as datacenters. In some examples, an application hosted at a source cloud may be moved from the source cloud to the destination cloud by migrating one or more objects at a time from the source to the destination cloud while maintaining the application up and running by intercepting and redirecting requests to a source or destination depending on where related objects reside. Example objects may be data structures, attributes and associated behaviors that encapsulate the application. Migration of the objects may be facilitated by enumerating and serializing the objects, and loading subsets of one or more serialized objects at the destination datacenter. An object migration module may keep track of objects in transit, and may direct requests for transferred objects to the destination cloud for maintaining continued access to the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09648134&OS=09648134&RS=09648134
owner: EMPIRE TECHNOLOGY DEVELOPMENT LLC
number: 09648134
owner_city: Wilmington
owner_country: US
publication_date: 20130520
---
This Application is the U.S. National Stage filing under 35 U.S.C 371 of International Application Ser. No. PCT US2013 041779 filed on May 20 2013. The International Application is herein incorporated by reference in its entirety.

Unless otherwise indicated herein the materials described in this section are not prior art to the claims in this application and are not admitted to be prior art by inclusion in this section.

With the advance of networking and data storage technologies an increasingly large number of computing services are being provided to users or customers by cloud based datacenters that may enable leased access to computing resources at various levels. Datacenters may provide individuals and organizations with a range of solutions for systems deployment and operation. Depending on customer needs datacenter capabilities and associated costs services provided to customers may be defined by Service Level Agreements SLAs describing aspects such as server latency storage limits or quotas processing power scalability factors backup guarantees uptime guarantees resource usage reporting and similar ones.

Not all cloud based services may be similar in terms of scope structure and performance requirements. For example a cloud based email or photo sharing service may have different operating parameters compared to a cloud based video gaming service. The underlying cloud platform software may also be different. When a customer decides to move its data and or applications from one cloud to another e.g. from one datacenter to another the process may be relatively cumbersome due to lack of methods to formalize normalize and communicate computing requirements across clouds.

The following summary is illustrative only and is not intended to be in any way limiting. In addition to the illustrative aspects embodiments and features described above further aspects embodiments and features will become apparent by reference to the drawings and the following detailed description.

According to some examples the present disclosure generally describes methods for migrating an application between cloud computing environments. The method may include receiving a request to migrate an application from a source cloud to a destination cloud identifying one or more objects associated with the application to be migrated enumerating the one or more objects employing a source interface executed at the source cloud designating at least one object to be migrated to the destination cloud requesting a serialization of the object to be migrated from the source interface marking the serialized object as in transit while the serialized object may be in process of being migrated from the source cloud to the destination cloud and loading the serialized object at the destination cloud.

According to other examples the present disclosure also describes computing device operable to migrate an application between cloud computing environments. The computing device may include a memory configured to store instructions and a processing unit configured to execute an object migration module in conjunction with the instructions. The object migration module may be configured to receive a request to migrate an application from a source cloud to a destination cloud identify one or more objects associated with the application to be migrated enumerate the one or more objects employing a source interface executed at the source cloud designate at least one object to be migrated to the destination cloud request a serialization of the object to be migrated from the source interface mark the object as in transit while the object may be in process of being migrated from the source cloud to the destination cloud and load the serialized object at the destination cloud.

According to further examples the present disclosure also describes a computer readable medium with instructions stored thereon which when executed on one or more computing devices executes a method for migrating an application between cloud computing environments. The method may include receiving a request to migrate an application from a source cloud to a destination cloud identifying one or more objects associated with the application to be migrated enumerating the one or more objects employing a source interface executed at the source cloud designating at least one object to be migrated to the destination cloud requesting a serialization of the object to be migrated from the source interface marking the serialized object as in transit while the serialized object may be in process of being migrated from the source cloud to the destination cloud and loading the serialized object at the destination cloud.

In the following detailed description reference is made to the accompanying drawings which form a part hereof. In the drawings similar symbols typically identify similar components unless context dictates otherwise. The illustrative embodiments described in the detailed description drawings and claims are not meant to be limiting. Other embodiments may be utilized and other changes may be made without departing from the spirit or scope of the subject matter presented herein. It will be readily understood that the aspects of the present disclosure as generally described herein and illustrated in the Figures can be arranged substituted combined separated and designed in a wide variety of different configurations all of which are explicitly contemplated herein.

This disclosure is generally drawn among other things to compositions methods apparatus systems devices and or computer program products related to application migration between cloud environments.

Briefly stated technologies are generally described for a system for migrating an application between cloud environments such as datacenters. In some examples an application hosted at a source cloud may be moved from the source cloud to the destination cloud by migrating one or more objects at a time from the source to the destination cloud while maintaining the application up and running by intercepting and redirecting requests to a source or destination depending on where related objects reside. Example objects may be data structures attributes and associated behaviors that encapsulate the application. Migration of the objects may be facilitated by enumerating and serializing the objects and loading subsets of one or more serialized objects at the destination datacenter. An object migration module may keep track of objects in transit and may direct requests for transferred objects to the destination cloud for maintaining continued access to the application.

A datacenter as used herein refers to an entity that hosts services and applications for customers through one or more physical server installations and one or more virtual machines executed in those server installations. Customers of the datacenter also referred to as tenants may be organizations that provide access to their services for multiple users. Customers may also be internal customers of an organization for example departments with an organization that share the services of a datacenter operated by the organization e.g. company . One example configuration may include an online retail service that provides retail sale services to consumers users . The retail service may employ multiple applications e.g. presentation of retail goods purchase management shipping management inventory management etc. which may be hosted by one or more datacenters. Thus a consumer may communicate with those applications of the retail service through a client application such as a browser over one or more networks and receive the provided service without realizing where the individual applications are actually executed. This scenario contrasts with conventional configurations where each service provider would execute their applications and have their users access those applications on the retail services own servers physically located on retail service premises. One result of the networked approach as described herein is that customers like the retail service may move their hosted services applications from one datacenter to another without the users noticing a difference.

As shown in a diagram a service provider such as a cloud 1 may host services such as various applications data storage data processing or comparable ones for individual or enterprise customers and . The cloud 1 may include one or more datacenters providing the services and employ one or more servers and or one or more special purpose devices such as firewalls routers and so on. In providing the services to its customers the cloud 1 may employ multiple servers special purpose devices physical or virtual data stores etc. Thus an application hosted or data stored by the cloud 1 for a customer may involve a complex architecture of hardware and software components. The complexity may become a burden when a customer decides to migrate to another cloud and the application may degrade and experience downtime during migration as a result.

Cloud based service providers may have disparate architectures and provide similar services but with distinct parameters. For example data storage capacity processing capacity server latency and similar aspects may differ from cloud to cloud. Additionally the service parameters may vary depending on the provided service. Thus application migration may involve dealing with potentially incompatible cloud application programming interfaces as well as addressing issues at each level of an application stack as a source cloud and destination cloud may have differences in hypervisors operating systems databases storage and network configurations and drivers. Furthermore the hosting clouds may not cooperate or offer support to a migrating application such that when the application is being migrated the application may not have access to resources of the cloud such as memory image and or a hard disk drive as some examples. To reduce the burden of performing the actual migration from a source cloud to a target cloud without reducing downtime and degradation of the migrating application some embodiments described herein enable cloud migration through migrating an application object by object employing an object management module. The migrating application may be maintained up and running by intercepting and redirecting requests to a source or destination depending on where related objects reside. Furthermore objects may be read at the source cloud even though they are migrating.

In the diagram the cloud 1 may be a source cloud and a cloud 2 may be a target cloud in a migration process. Similar to the cloud 1 the cloud 2 may also employ one or more servers and one or more special purpose devices to provide its services. The migration of the application employing an object migration module to facilitate object by object migration may be managed and performed by one of the servers of the cloud 1 one of the servers of the cloud 2 or by a third party service executed on one or more servers of another cloud .

One or more applications may be hosted at a source cloud computing environment managed by one or more servers . As discussed previously service parameters such as server processing memory and networking may be implemented in a wide variety of ways by different service providers such as the source cloud computing environment and a destination cloud computing environment managed by one or more servers . Due to the varying service parameters migrating an application may be a burdensome process and the migrating application may experience degradation and downtime during the migration. An application as used herein generally refers to customer or tenant applications hosted by a datacenter and not a datacenter s native applications.

According to some example embodiments an object migration manager may facilitate the migration of an application from the source cloud computing environment to the destination cloud computing environment . The object migration manager may be provided as a separate migration module or as part of a cloud computing management application capable of being executed at one of the source cloud computing environment or the destination cloud computing environment .

The object migration manager may be configured to migrate the application from the source cloud computing environment to the destination cloud computing environment while maintaining a continuous uptime of the application during the migration. The object migration manager may migrate the application by migrating live objects of the application individually or in subsets of objects until the entire application has been migrated to the destination cloud computing environment . Example objects of an application may be data structures and associated processing routines. Additionally objects may also be sets of attributes or elements as well as behaviors methods and subroutines that may encapsulate an entity such as an application.

The object migration manager may facilitate migration of the objects by serializing and enumerating the objects at the source cloud computing environment . In some examples cloud computing environments may work with different data structures which may not be binary compatible. Serializing the objects may enable the objects to be migrated between the data structures employed at the different cloud computing environments that may not be otherwise binary compatible. During the migration of the objects of the application the object migration manager may direct requests for the application to the cloud computing environment where an object corresponding to the request is located. Continuously handling the requests during the migration process the object migration manager may facilitate maintaining a continuous uptime of the application .

In some examples possible actions upon a collision between a request leading to a modification of an existing object and the object s migration at the same time may include 1 backing off the migration allowing the request to proceed and resuming the migration 2 holding the request for a period until the migration of the object completes or 3 declining the request which may be included in the SLA implied or explicit . The object migration manager s role is to orchestrate the migration and to intercept and redirect the inbound requests. Thus the object migration manager may make the calls to the source and destination or the source and destination may interact directly to copy the migrating objects. In the latter case the object migration manager may maintain the orchestration role but may be offloaded of the copying itself.

In a system according to embodiments when the OMM receives a request to migrate an application from the source cloud to the destination cloud the OMM may be prepared to migrate the application from the source cloud to the destination cloud by interacting with the source cloud and the destination cloud . The OMM may be configured to interact with the source cloud and the destination cloud by employing one or more of domain names and IP addresses. Additionally the source cloud may publish the source API and the destination cloud may publish the destination API associated with the application. The source API and the destination API may also be programming interfaces published by the application that enable interaction with the application. The OMM may publish the shim API to enable interaction with the application during migration of the application. Some example mechanisms for enabling interaction between the shim API the source API and the destination API may include employing extensible markup language or object programming languages as some examples. The shim API may be configured to intercept consumer requests for the application and direct them to one of the source cloud and the destination cloud through the source API and the destination API respectively during the migration process.

Additionally the OMM may load an access pattern map for each of the source API and the destination API . The access pattern map may describe the objects and object classes of the application accessed by the OMM accesses and may describe plausible access patterns for accessing the objects of the application to be migrated. Further the OMM may manipulate domain name system name to IP mapping such that requests for the application received during the migration are directed to the OMM for handling.

In a system according to embodiments the OMM may identify objects associated with the application at the source cloud when the OMM receives the migration request. The OMM may implement the source interface executed at the source cloud to enumerate the identified objects associated with the application to be migrated. An enumeration scheme for enumerating the identified objects may be dictated by the OMM . An enumeration scheme may allow for set definition of objects that is enabling the use of queries that define sets of objects. One example enumeration scheme may be enumerating objects by date such as all the objects created after Oct. 9 2012 at 9 21 am. The OMM may also implement the destination interface executed at the destination cloud such that the destination interface and the source interface may be compatible.

In an example embodiment the OMM may create the object directory in order to keep track of the objects associated with the application. The object directory may keep track of the location of each of the objects during the migration process including an indication as to whether the object is currently at the source cloud at the destination cloud or in transit between the source cloud and the destination cloud . If a request and or inquiry pertaining to a particular object are received during the migration process the object OMM may direct the request to the appropriate location based on the location information of the objects from the object directory . For example once the migration has begun any request for creation of a new object may be directed to the destination cloud .

To initiate the migration of the application the OMM may designate at least one object from the identified objects to be migrated. The OMM may request a serialization of the at least one object from the source interface . The source interface may be configured to serialize the objects with a serialization schema that may also be compatible with the destination interface executed at the destination cloud. For example the objects may be serialized employing an extensible markup language XML serialization schema. The OMM may retrieve the serialized object to be migrated from the source interface at the source cloud and then migrate the object to the destination cloud . During the migration of the object the object may be marked as in transit by the OMM in the object directory . During the migration of the object the object may exist at the source cloud until completion of the object migration. The serialized object may be loaded at the destination interface executed at the destination cloud . The destination interface may be configured to de serialize the object and persist the de serialized object at the destination cloud . After the de serialized object has been loaded at the destination cloud the object may be marked as migrated in the object directory . In one example embodiment the OMM may select another object to be migrated after successful migration of the object from the source cloud to the destination cloud and repeat the process described above. Once all of the objects of the application have been migrated from the source cloud to the destination cloud the migration may be designated as complete. In some examples the OMM may manipulate a domain name system name to IP mapping such that requests for the application after the completed migration may be directed to the destination cloud for handling.

In a system according to embodiments as previously described the OMM may migrate an application one object at a time until the objects are successfully migrated to the destination cloud . In another embodiment the OMM may adjust a number of objects that may be migrated concurrently from the source cloud to the destination cloud according to a predefined migration plan. Alternatively the OMM may dynamically adjust the number of objects based on predefined factors. For example the OMM may determine that a performance of the application may be improved by migrating a cluster of objects together. The OMM may migrate the cluster of objects together based on an identified interconnection between objects. For example objects that refer to each other may be determined to be interconnected and may be migrated to the destination cloud concurrently as a cluster of objects. The OMM may also determine that it may be impractical to migrate a cluster of interconnected objects together if it would be overly burdensome or be overly time consuming. In this case the OMM may separate the objects into smaller clusters or migrate the objects individually.

In some examples the OMM may determine an order of object migration itself. Alternatively the OMM may follow an order of object migration selected by an owner of the application. An example strategy for determining an order of object migration may give priority to objects that are busier than other objects. For example the objects may be prioritized based on a write access rate associated with each of the objects. In another strategy the OMM may consult object access statistics to identify periods of high and low activities. The OMM may migrate the objects during an identified period of reduced activity of the application.

In one example embodiment the OMM may handle incoming requests for access to the application during the migration process employing the shim API at the OMM . When a request for an object of the application is received the OMM may identify a location of the requested object by consulting the object directory . If the object has been migrated to the destination cloud the shim API may direct the request to the destination API for handling the request. If the object has not been migrated yet the shim API may direct the request to the source API for handling the request. If the object has been marked as in transit and the request is a read only request then the request may be directed to the source API .

If the object has been marked as in transit and the request is a write access request then the OMM may perform one or more alternative actions. In one example scenario the OMM may hold the write access request for a defined period of time and may redirect the request to the destination API upon completion of migration of the object to the destination cloud . In another example scenario the OMM may fail the write access request and direct the requester to re request after a period of time. In yet another example scenario the OMM may abort the migration of the object and may redirect the write access request to the source API . During the migration of the object the object may still exist at the source cloud until completion of the object migration. The OMM may determine which scenario to select based on predefined settings set by the application owner a service level agreement of one of the source cloud and the destination cloud and or object statistics such as a limit on a number of aborts for example.

Serialization may be implemented using extensible markup language XML format or other standardized or proprietary serialization formats. The serialization formats may be human readable e.g. XML or JSON or binary such as OGDL which is aimed at serializing graphs and may be suitable for complex object layouts.

Depending on the desired configuration the processor may be of any type including but not limited to a microprocessor P a microcontroller C a digital signal processor DSP or any combination thereof. The processor may include one more levels of caching such as a cache memory a processor core and registers . The example processor core may include an arithmetic logic unit ALU a floating point unit FPU a digital signal processing core DSP Core or any combination thereof. An example memory controller may also be used with the processor or in some implementations the memory controller may be an internal part of the processor .

Depending on the desired configuration the system memory may be of any type including but not limited to volatile memory such as RAM non volatile memory such as ROM flash memory etc. or any combination thereof. The system memory may include an operating system one or more applications and program data . The applications may include a cloud management application including an object migration module which may facilitate migrating individual objects of an application from a source cloud computing environment to a destination cloud computing environment as described herein. The program data may include among other data object location data or the like as described herein.

The computing device may have additional features or functionality and additional interfaces to facilitate communications between the basic configuration and any desired devices and interfaces. For example a bus interface controller may be used to facilitate communications between the basic configuration and one or more data storage devices via a storage interface bus . The data storage devices may be one or more removable storage devices one or more non removable storage devices or a combination thereof. Examples of the removable storage and the non removable storage devices include magnetic disk devices such as flexible disk drives and hard disk drives HDD optical disk drives such as compact disk CD drives or digital versatile disk DVD drives solid state drives SSD and tape drives to name a few. Example computer storage media may include volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data.

The system memory the removable storage devices and the non removable storage devices are examples of computer storage media. Computer storage media includes but is not limited to RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD solid state drives or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which may be used to store the desired information and which may be accessed by the computing device . Any such computer storage media may be part of the computing device .

The computing device may also include an interface bus for facilitating communication from various interface devices e.g. one or more output devices one or more peripheral interfaces and one or more communication devices to the basic configuration via the bus interface controller . Some of the example output devices include a graphics processing unit and an audio processing unit which may be configured to communicate to various external devices such as a display or speakers via one or more A V ports . One or more example peripheral interfaces may include a serial interface controller or a parallel interface controller which may be configured to communicate with external devices such as input devices e.g. keyboard mouse pen voice input device touch input device etc. or other peripheral devices e.g. printer scanner etc. via one or more I O ports . An example communication device includes a network controller which may be arranged to facilitate communications with one or more other computing devices over a network communication link via one or more communication ports . The one or more other computing devices may include servers at a datacenter customer equipment and comparable devices.

The network communication link may be one example of a communication media. Communication media may typically be embodied by computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any information delivery media. A modulated data signal may be a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media may include wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency RF microwave infrared IR and other wireless media. The term computer readable media as used herein may include both storage media and communication media.

The computing device may be implemented as a part of a general purpose or specialized server mainframe or similar computer that includes any of the above functions. The computing device may also be implemented as a personal computer including both laptop computer and non laptop computer configurations.

Example embodiments may also include methods for maintaining application performances upon transfer between cloud servers. These methods can be implemented in any number of ways including the structures described herein. One such way may be by machine operations of devices of the type described in the present disclosure. Another optional way may be for one or more of the individual operations of the methods to be performed in conjunction with one or more human operators performing some of the operations while other operations may be performed by machines. These human operators need not be collocated with each other but each can be only with a machine that performs a portion of the program. In other examples the human interaction can be automated such as by pre selected criteria that may be machine automated.

An example process for migrating an application from a source cloud computing environment to a destination cloud computing environment employing object migration may begin with block RECEIVE REQUEST TO MIGRATE AN APPLICATION FROM A SOURCE TO A DESTINATION where an object migration manager OMM such as the OMM in may receive a request to migrate an application from a source cloud computing environment to a destination cloud computing environment.

Block may be followed by block IDENTIFY OBJECTS ASSOCIATED WITH THE APPLICATION TO BE MIGRATED where the OMM may identify objects associated with the application to be migrated. The OMM may create an object directory to continuously track a location of the identified objects during the migration process.

Block may be followed by block ENUMERATE THE OBJECTS AT A SOURCE INTERFACE where the OMM may implement the source interface at the source cloud . The OMM may request the source interface to enumerate the objects associated with the application.

Block may be followed by block DESIGNATE AN OBJECT TO BE MIGRATED where the OMM may designate at least one object to be migrated. The OMM may also designate a cluster of objects to be migrated if the OMM identifies interconnected objects.

Block may be followed by block REQUEST SERIALIZATION OF THE OBJECT TO BE MIGRATED where the OMM may request the source interface to serialize the objects to be migrated.

Block may be followed by block MARK OBJECT AS IN TRANSIT WHILE BEING MIGRATED where the object to be migrated may be marked as in transit in the object directory at the OMM .

Block may be followed by block LOAD SERIALIZED OBJECT AT DESTINATION where the serialized object may be loaded at a destination interface executed at the destination cloud computing environment. The destination interface may de serialize the object and may persist the object at the destination cloud .

The blocks included in the above described process are for illustration purposes. Migration of an application from a source cloud computing environment to a destination cloud computing environment employing object migration may be implemented by similar processes with fewer or additional blocks. In some examples the blocks may be performed in a different order. In some other examples various blocks may be eliminated. In still other examples various blocks may be divided into additional blocks or combined together into fewer blocks.

In some examples as shown in a computer program product may include a signal bearing medium that may also include one or more machine readable instructions that when executed by for example a processor may provide the functionality described herein. Thus for example referring to the processor in the object migration module may undertake one or more of the tasks shown in in response to the instructions conveyed to the processor by the signal bearing medium to perform actions associated with maintaining application performances upon transfer between cloud servers as described herein. Some of those instructions may include for example instructions for receiving a request to migrate an application from a source to a destination identifying objects associated with the application to be migrated enumerating the objects at a source interface designating an object to be migrated requesting serialization of the object to be migrated marking the objects as in transit while being migrated and loading the serialized objects at destination according to some embodiments described herein.

In some implementations the signal bearing medium depicted in may encompass a computer readable medium such as but not limited to a hard disk drive HDD a solid state drive a Compact Disc CD a Digital Versatile Disk DVD a digital tape memory etc. In some implementations the signal bearing medium may encompass a recordable medium such as but not limited to memory read write R W CDs R W DVDs etc. In some implementations the signal bearing medium may encompass a communications medium such as but not limited to a digital and or an analog communication medium e.g. a fiber optic cable a waveguide a wired communications link a wireless communication link etc. . Thus for example the computer program product may be conveyed to one or more modules of the processor by an RF signal bearing medium where the signal bearing medium is conveyed by the wireless communications medium e.g. a wireless communications medium conforming with the IEEE 802.11 standard .

According to some examples the present disclosure describes a method for migrating an application between cloud computing environments. The method may include receiving a request to migrate an application from a source cloud to a destination cloud identifying one or more objects associated with the application to be migrated enumerating the one or more objects employing a source interface executed at the source cloud designating at least one object to be migrated to the destination cloud requesting a serialization of the object to be migrated from the source interface marking the serialized object as in transit while the serialized object may be in process of being migrated from the source cloud to the destination cloud and loading the serialized object at the destination cloud.

According to some examples the method may also include migrating one object at a time until objects associated with the application may be migrated from the source cloud to the destination cloud. The method may include migrating two or more interconnected objects at a time until objects associated with the application may be migrated from the source cloud to the destination cloud where the two or more objects may be interconnected if at least one of the objects refers to at least one other object.

According to some examples the method may also include migrating the one or more objects associated with the application according to a prioritized order of the objects wherein the objects may be prioritized based on a write access rate associated with each of the objects. The method may include migrating the one or more objects during an identified period of reduced activity of the application. Identifying the one or more objects associated with the application may include loading an access pattern map associated with the application identifying the one or more objects of the application and one of an access method interface or an access call for each of the one or more objects.

According to some examples the method may also include maintaining a directory of where the objects associated with the application reside during the migration wherein each object resides at one of the source cloud the destination cloud or in transit between the source cloud and the destination cloud. The object may be serialized employing an extensible markup language XML serialization schema a Java Script Object Notation JSON schema or an ordered graph data language OGDL schema.

According to other examples the method may also include while the migration is in progress intercepting a request for access to an object at an application programming interface API published by an object migration manager and redirecting the intercepted request from the object migration manager API to one of the source cloud and or the destination cloud.

According to other examples the method may also include redirecting another request based on a current location of the object. The method may include submitting a call to a destination interface at the destination cloud to hand over a migrating object. The method may include marking the object as migrated when the object may be loaded at the destination cloud and deleting the migrated object from the source cloud.

According to other examples the method may also include marking the migration of the application as complete when all objects associated with the application have been successfully migrated to the destination cloud. The method may include after migration of the application may be complete redirecting a request directed to the application to the destination cloud by updating a domain name system to point to the destination cloud. In response to detecting a collision between a request leading to a modification of an existing object and the existing object s migration at the same time one of the following actions may be performed backing off the migration allowing the request to proceed and resuming the migration holding the request for a predefined period until the migration of the existing object completes or declining the request

According to other examples the present disclosure also describes computing device operable to migrate an application between cloud computing environments. The computing device may include a memory configured to store instructions and a processing unit configured to execute an object migration module in conjunction with the instructions. The object migration module may be configured to receive a request to migrate an application from a source cloud to a destination cloud identify one or more objects associated with the application to be migrated enumerate the one or more objects employing a source interface executed at the source cloud designate at least one object to be migrated to the destination cloud request a serialization of the object to be migrated from the source interface mark the object as in transit while the object may be in process of being migrated from the source cloud to the destination cloud and load the serialized object at the destination cloud.

According to other examples the object migration module may be further configured to migrate one object at a time until objects associated with the application may be migrated from the source cloud to the destination cloud. The object migration module may be further configured to migrate two or more interconnected objects at a time until objects associated with the application may be migrated from the source cloud to the destination cloud where the two or more objects may be interconnected if the objects refer to each other. The object migration module may be further configured to migrate the one or more objects associated with the application according to a prioritized order of the objects where the objects may be prioritized based on a write access rate associated with each of the objects.

According to other examples the object migration module may be further configured to migrate the one or more objects during an identified period of reduced activity of the application. The object migration module may be further configured to load an access pattern map associated with the application where the access pattern map identifies the one or more objects of the application and one of an access method interface or an access call for each of the one or more objects.

According to further examples the object migration module may be further configured to maintain a directory of where the objects associated with the application reside during the migration wherein each object resides at one of the source cloud the destination cloud or in transit between the source cloud and the destination cloud. The object may be serialized employing an extensible markup language XML serialization schema a Java Script Object Notation JSON schema or an ordered graph data language OGDL schema.

According to further examples the object migration module may be further configured to while the migration is in progress intercept a request for access to an object directed to the application at an application programming interface API published by the object migration module and redirect the intercepted request from the object migration manager API to one of the source cloud and or the destination cloud.

According to further examples the object migration module may be further configured to redirect another request directed to the application to the source cloud and or the destination cloud based on a current location of the object associated with the other request. The object manager module may also be configured to submit a call to a destination interface at the destination cloud to hand over a migrating object. The object migration module may be further configured to mark the object as migrated when the object may be loaded at the destination cloud and delete the migrated object from the source cloud.

According to further examples the object migration module may be further configured to mark the migration of the application as complete when all objects associated with the application have been successfully migrated to the destination cloud. The object migration module may be further configured to after migration of the application may be complete redirect a request directed to the application to the destination cloud by updating a domain name system to point to the destination cloud. In response to detecting a collision between a request leading to a modification of an existing object and the existing object s migration at the same time one of the following actions may be performed backing off the migration allowing the request to proceed and resuming the migration holding the request for a predefined period until the migration of the existing object completes or declining the request. The object migration module may be hosted at the source cloud. The object migration module may be hosted at the destination cloud. The object migration module may be hosted at a third party migration entity.

According to further examples the present disclosure describes a computer readable medium with instructions stored thereon which when executed on one or more computing devices executes a method for migrating an application between cloud computing environments. The method may include receiving a request to migrate an application from a source cloud to a destination cloud identifying one or more objects associated with the application to be migrated enumerating the one or more objects employing a source interface executed at the source cloud designating at least one object to be migrated to the destination cloud requesting a serialization of the object to be migrated from the source interface marking the serialized object as in transit while the serialized object may be in process of being migrated from the source cloud to the destination cloud and loading an access pattern map associated with the application identifying the one or more objects of the application and one of an access method interface or an access call for each of the one or more objects.

According to some examples the method may also include migrating one object at a time until objects associated with the application may be migrated from the source cloud to the destination cloud. The method may include migrating two or more interconnected objects at a time until objects associated with the application may be migrated from the source cloud to the destination cloud wherein the two or more objects may be interconnected if the objects refer to each other.

According to some examples the method may also include migrating the one or more objects associated with the application according to a prioritized order of the objects wherein the objects may be prioritized based on a write access rate associated with each of the objects. The method may include migrating the one or more objects during an identified period of reduced activity of the application. Identifying the one or more objects associated with the application may include loading an access pattern map associated with the application identifying the one or more objects of the application and an access technique for each of the one or more objects.

According to some examples the method may also include maintaining a directory of where the objects associated with the application reside during the migration wherein each object resides at one of the source cloud the destination cloud or in transit between the source cloud and the destination cloud. The object may be serialized employing an extensible markup language XML serialization schema a Java Script Object Notation JSON schema or an ordered graph data language OGDL schema.

According to other examples the method may also include while the migration is in progress intercepting a request for access to an object at an application programming interface API published by an object migration manager and redirecting the intercepted request from the object migration manager API to one of the source cloud and or the destination cloud.

According to other examples the method may also include redirecting another request based on a current location of the object. The method may include submitting a call to a destination interface at the destination cloud to hand over a migrating object. The method may include marking the object as migrated when the object may be loaded at the destination cloud and deleting the migrated object from the source cloud.

According to other examples the method may also include marking the migration of the application as complete when all objects associated with the application have been successfully migrated to the destination cloud. The method may include after migration of the application may be complete redirecting a request directed to the application to the destination cloud by updating a domain name system to point to the destination cloud. In response to detecting a collision between a request leading to a modification of an existing object and the existing object s migration at the same time one of the following actions may be performed backing off the migration allowing the request to proceed and resuming the migration holding the request for a predefined period until the migration of the existing object completes or declining the request.

There is little distinction left between hardware and software implementations of aspects of systems the use of hardware or software is generally but not always in that in certain contexts the choice between hardware and software may become significant a design choice representing cost vs. efficiency tradeoffs. There are various vehicles by which processes and or systems and or other technologies described herein may be effected e.g. hardware software and or firmware and that the preferred vehicle will vary with the context in which the processes and or systems and or other technologies are deployed. For example if an implementer determines that speed and accuracy are paramount the implementer may opt for a mainly hardware and or firmware vehicle if flexibility is paramount the implementer may opt for a mainly software implementation or yet again alternatively the implementer may opt for some combination of hardware software and or firmware.

The foregoing detailed description has set forth various embodiments of the devices and or processes via the use of block diagrams flowcharts and or examples. Insofar as such block diagrams flowcharts and or examples contain one or more functions and or operations it will be understood by those within the art that each function and or operation within such block diagrams flowcharts or examples may be implemented individually and or collectively by a wide range of hardware software firmware or virtually any combination thereof. In one embodiment several portions of the subject matter described herein may be implemented via Application Specific Integrated Circuits ASICs Field Programmable Gate Arrays FPGAs digital signal processors DSPs or other integrated formats. However those skilled in the art will recognize that some aspects of the embodiments disclosed herein in whole or in part may be equivalently implemented in integrated circuits as one or more computer programs running on one or more computers e.g. as one or more programs running on one or more computer systems as one or more programs running on one or more processors e.g. as one or more programs running on one or more microprocessors as firmware or as virtually any combination thereof and that designing the circuitry and or writing the code for the software and or firmware would be well within the skill of one of skill in the art in light of this disclosure.

The present disclosure is not to be limited in terms of the particular embodiments described in this application which are intended as illustrations of various aspects. Many modifications and variations can be made without departing from its spirit and scope as will be apparent to those skilled in the art. Functionally equivalent methods and apparatuses within the scope of the disclosure in addition to those enumerated herein will be apparent to those skilled in the art from the foregoing descriptions. Such modifications and variations are intended to fall within the scope of the appended claims. The present disclosure is to be limited only by the terms of the appended claims along with the full scope of equivalents to which such claims are entitled. It is to be understood that this disclosure is not limited to particular methods reagents compounds compositions or biological systems which can of course vary. It is also to be understood that the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting.

In addition those skilled in the art will appreciate that the mechanisms of the subject matter described herein are capable of being distributed as a program product in a variety of forms and that an illustrative embodiment of the subject matter described herein applies regardless of the particular type of signal bearing medium used to actually carry out the distribution. Examples of a signal bearing medium include but are not limited to the following a recordable type medium such as a floppy disk a hard disk drive a Compact Disc CD a Digital Versatile Disk DVD a digital tape a computer memory a solid state drive etc. and a transmission type medium such as a digital and or an analog communication medium e.g. a fiber optic cable a waveguide a wired communications link a wireless communication link etc. .

Those skilled in the art will recognize that it is common within the art to describe devices and or processes in the fashion set forth herein and thereafter use engineering practices to integrate such described devices and or processes into data processing systems. That is at least a portion of the devices and or processes described herein may be integrated into a data processing system via a reasonable amount of experimentation. Those having skill in the art will recognize that a typical data processing system generally includes one or more of a system unit housing a video display device a memory such as volatile and non volatile memory processors such as microprocessors and digital signal processors computational entities such as operating systems drivers graphical user interfaces and applications programs one or more interaction devices such as a touch pad or screen and or control systems including feedback loops and control motors e.g. feedback for sensing position and or velocity of gantry systems control motors for moving and or adjusting components and or quantities .

A typical data processing system may be implemented utilizing any suitable commercially available components such as those typically found in data computing communication and or network computing communication systems. The herein described subject matter sometimes illustrates different components contained within or connected with different other components. It is to be understood that such depicted architectures are merely exemplary and that in fact many other architectures may be implemented which achieve the same functionality. In a conceptual sense any arrangement of components to achieve the same functionality is effectively associated such that the desired functionality is achieved. Hence any two components herein combined to achieve a particular functionality may be seen as associated with each other such that the desired functionality is achieved irrespective of architectures or intermediate components. Likewise any two components so associated may also be viewed as being operably connected or operably coupled to each other to achieve the desired functionality and any two components capable of being so associated may also be viewed as being operably couplable to each other to achieve the desired functionality. Specific examples of operably couplable include but are not limited to physically connectable and or physically interacting components and or wirelessly interactable and or wirelessly interacting components and or logically interacting and or logically interactable components.

With respect to the use of substantially any plural and or singular terms herein those having skill in the art can translate from the plural to the singular and or from the singular to the plural as is appropriate to the context and or application. The various singular plural permutations may be expressly set forth herein for sake of clarity.

It will be understood by those within the art that in general terms used herein and especially in the appended claims e.g. bodies of the appended claims are generally intended as open terms e.g. the term including should be interpreted as including but not limited to the term having should be interpreted as having at least the term includes should be interpreted as includes but is not limited to etc. . It will be further understood by those within the art that if a specific number of an introduced claim recitation is intended such an intent will be explicitly recited in the claim and in the absence of such recitation no such intent is present. For example as an aid to understanding the following appended claims may contain usage of the introductory phrases at least one and one or more to introduce claim recitations. However the use of such phrases should not be construed to imply that the introduction of a claim recitation by the indefinite articles a or an limits any particular claim containing such introduced claim recitation to embodiments containing only one such recitation even when the same claim includes the introductory phrases one or more or at least one and indefinite articles such as a or an e.g. a and or an should be interpreted to mean at least one or one or more the same holds true for the use of definite articles used to introduce claim recitations. In addition even if a specific number of an introduced claim recitation is explicitly recited those skilled in the art will recognize that such recitation should be interpreted to mean at least the recited number e.g. the bare recitation of two recitations without other modifiers means at least two recitations or two or more recitations .

Furthermore in those instances where a convention analogous to at least one of A B and C etc. is used in general such a construction is intended in the sense one having skill in the art would understand the convention e.g. a system having at least one of A B and C would include but not be limited to systems that have A alone B alone C alone A and B together A and C together B and C together and or A B and C together etc. . It will be further understood by those within the art that virtually any disjunctive word and or phrase presenting two or more alternative terms whether in the description claims or drawings should be understood to contemplate the possibilities of including one of the terms either of the terms or both terms. For example the phrase A or B will be understood to include the possibilities of A or B or A and B. 

As will be understood by one skilled in the art for any and all purposes such as in terms of providing a written description all ranges disclosed herein also encompass any and all possible subranges and combinations of subranges thereof. Any listed range can be easily recognized as sufficiently describing and enabling the same range being broken down into at least equal halves thirds quarters fifths tenths etc. As a non limiting example each range discussed herein can be readily broken down into a lower third middle third and upper third etc. As will also be understood by one skilled in the art all language such as up to at least greater than less than and the like include the number recited and refer to ranges which can be subsequently broken down into subranges as discussed above. Finally as will be understood by one skilled in the art a range includes each individual member. Thus for example a group having 1 3 cells refers to groups having 1 2 or 3 cells. Similarly a group having 1 5 cells refers to groups having 1 2 3 4 or 5 cells and so forth.

While various aspects and embodiments have been disclosed herein other aspects and embodiments will be apparent to those skilled in the art. The various aspects and embodiments disclosed herein are for purposes of illustration and are not intended to be limiting with the true scope and spirit being indicated by the following claims.

