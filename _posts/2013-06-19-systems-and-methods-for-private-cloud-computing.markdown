---

title: Systems and methods for private cloud computing
abstract: A system and method are disclosed for private cloud computing and for the development and deployment of cloud applications in the private cloud. The private cloud computing system and method of the present invention include as components at least a cloud controller, a cloud stack, Service Registry, and a cloud application builder.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09137106&OS=09137106&RS=09137106
owner: State Street Corporation
number: 09137106
owner_city: Boston
owner_country: US
publication_date: 20130619
---
The present application is a continuation of U.S. patent application Ser. No. 13 180 487 filed on Jul. 11 2011 entitled System and Methods for Private Cloud Computing and claims the benefit of U.S. Provisional Application 61 363 092 filed on Jul. 9 2010 entitled Self Organizing Cloud Computing each of which is incorporated in its entirety by reference herein.

The present invention relates to computer based systems and methods for cloud computing and more specifically to computer based systems and methods for private cloud computing and for cloud application development and deployment within a private cloud.

Generally cloud computing refers to the use and access of multiple server based computational resources using a digital network such as the Internet. Cloud system users access the web server services of the cloud using client devices such as a desktop computer laptop computer tablet computer smartphone personal digital assistant PDA or similar type device hereinafter collectively referred to as a client device or client devices .

In cloud computing applications are provided and managed by a cloud server and data is stored remotely in a cloud database. Typically cloud system users do not download and install applications that exist in the cloud on their own computing device because processing and storage is maintained by the cloud server and cloud database respectively.

Typically online services are provided by a cloud provider or private organization. This obviates the need for cloud system users to install application software on their own separate client devices. As such cloud computing differs from the classic client server model by providing applications on a cloud server that are executed and managed by a client service with no installed client version of the application being required on the client device. The centralization of cloud services gives a cloud service provider control over versions of the browse based applications provided to clients. This also removes the need for version upgrades of applications on individual client devices.

In operation the cloud system user will log onto a public or private cloud. Computing is then carried out on a client server basis using web browser protocols. The cloud provides server based applications and all data services to the cloud system user with the results then being displayed on the client device. As such the cloud system user will have access to desired applications running remotely in a database which displays the work being done using the cloud application on the client device.

Cloud database storage allocated client devices is used to make applications appear on the client device display. However all computations and changes are recorded by the cloud server and files that are created and altered are permanently stored in the cloud database storage.

Cloud computing when implemented includes provisioning of dynamically scalable and virtualized resources. This may be carried out by cloud providers without cloud system users knowledge of the physical location and configuration of the system that delivers the requested services. As such cloud computing infrastructures consist of services delivered through shared data centers. However from the client side the cloud appears as a single point of access.

A generic cloud architecture includes an architecture of hardware and software systems involved in the delivery of the cloud computing services. Two significant components of the cloud computing architecture are the front end and back end. The front end is what is seen by the cloud system user at his her client device. This would include the client device application used to access the cloud via the user interface such as a web browser. The back end of the cloud computing architecture is the cloud itself consisting of various computers servers and data storage devices of which the cloud system user has no knowledge.

The shared services within a typical cloud computing environment are shown in generally at . Client is the client device with its internal software that relies on cloud computing for application delivery through web services. Cloud application is cloud application services also referred to as Software as a Service SaaS . This is the delivery of software over the Internet that eliminates the need to install and run an application on the cloud system user s computing device. Since the applications are cloud applications maintenance and support of these applications is greatly simplified.

Cloud platform is cloud platform services also referred to as Platform as a Service PaaS . PaaS is the delivery of a computing platform and or solution stack as a service that uses the cloud infrastructure and cloud applications. This facilitates the deployment of applications from the cloud.

Cloud infrastructure is cloud infrastructure services also referred to as Infrastructure as a Service IaaS . IaaS is the delivery of computer infrastructure as a service typically in the form of platform virtualization. Cloud infrastructure services may be in the form of data centers operating virtual machines that run on physical machines.

Server refers to the server layer of the cloud. This includes computer hardware and software for delivery of cloud services to client .

As previously stated the cloud may be a public or private cloud. There are also other cloud configurations that may involve elements of both. Some of the well known cloud types will now be briefly discussed.

A public cloud is a cloud in which resources are dynamically provisioned over the Internet using web applications and services from a third party provider.

A community cloud is one that is established where several organizations have similar requirements and seek to share infrastructure to realize the benefits of cloud computing.

A hybrid cloud is one that recognizes the need of companies to deliver services in a traditional way to some in house operating methods and provide technology to manage the complexity in managing the performance security and privacy concerns that result from the fixed delivery methods of the company. A hybrid cloud uses a combination of public and private storage clouds.

A combined cloud is one in which two clouds are joined together. In such a configuration there will be multiple internal and or external cloud providers.

A private cloud is essentially the emulation of a public cloud operating on a private network. Through virtualization a private cloud gives an enterprise the ability to host applications on virtual machines enterprise wide. This provides benefits of shared hardware costs better service recovery and the ability to scale up or scale down depending on demand.

However there is a need in computer based private cloud systems for implementation of better systems and methods for cloud computing and cloud application development and deployment on an enterprise wide basis. The system and method of the present invention solves these needs.

The present invention is a computer based system and method for cloud computing and cloud application development and deployment in a private cloud within an enterprise. Further the present invention is directed to computer based systems and methods for private cloud computing that allow the cloud infrastructure to adapt or respond automatically to changes caused by the deployment and use of cloud applications developed for the private cloud system. The private cloud computing system and method of the present invention may be implemented in the higher level layers such as the application and services layers that may be incorporated as part of application layer shown in .

The private cloud computing system and method of the present invention preferably includes a Cloud Controller Cloud Stack Service Registry and Cloud Application Builder. The Cloud Controller provides the intelligence for the private cloud. The Cloud Controller includes a rules engine that is used to analyze information collected and stored in the cloud database. This database stores cloud application binaries as well as monitoring information. Therefore rather than the cloud applications being stored in a file system as is typical the computer based private cloud system of the present invention stores cloud applications in a database so that they may be consistently maintained across the cloud in an easy efficient manner.

The Cloud Stack includes the operating software for the cloud. For example the Cloud Stack may include the operating system software virtual machine software web server software application server software network security software web access management software database driver software application builder runtime software and third party libraries.

The Service Registry contains a register of web services for at least the cloud applications deployed in the private cloud. The web services are searchable by a number of different methods so that developers can view the web services and their detailed information for possible reuse with cloud applications they are developing for deployment in the private cloud.

The Cloud Application Builder provides the means for developers to build applications that are deployed in the private cloud using Cloud Controller. The Cloud Application Builder preferably includes tools to create the components of a cloud application. These components preferably include a web service a user interface and jobs for each cloud application to be deployed in the private cloud. As such the cloud application building tools include but are not limited to tools to develop the web services tools for developing a user interface and registering the web services in the Service Registry so the level of access to cloud applications is controlled and tools to develop jobs. Using these tools each cloud application that is developed and deployed will include a user interface for managing foreground tasks data storage and background tasks however it is understood that more or less than these tools may be used and it will still be within the scope of the present invention.

With regard to building cloud applications preferably there are two distinct parts. The first will be the development time to build the cloud application and the second will be the cloud application framework. The development time will involve the use of the Cloud Application Builder to build an application according to the cloud application framework. The cloud application framework along with the resulting cloud application components are deployed in the private cloud.

The system and method of the present invention includes enterprise Security Foundation eSF software that manages the user roles that authorize cloud application access. Accordingly through eSF access security is provided to the private cloud of the present invention.

According to the system and method of the present invention the cloud infrastructure resources are managed by load balancing incoming requests from client devices to use cloud applications and web services by routing these requests to the various web servers and application servers in the private cloud.

Inside the private cloud of the present invention there also can be the creation of business rules that relate to web services for cloud applications. These provide greater flexibility management and control of cloud applications that are developed and deployed in the private cloud.

The private cloud computing system and method of the present invention supports external services. Accordingly provisioning services for the cloud database may be accomplished using a self service application for access and control of such external services.

The private cloud computing system and method of the present invention contemplates cloud monitoring services to analyze the usage data in log files and health records associated with the cloud applications running in the private cloud. The results of the analysis are used to scale up or scale down the cloud infrastructure control alert processes and facilitate capacity planning

The computer based private cloud computing system and method of the present invention provides for the development and deployment of cloud applications and web services within an enterprise.

The computer based private cloud computing system and method of the present invention also may be implemented using a Cloud Controller Cloud Stack Service Registry and a Cloud Application Builder. In carrying out this implementation the Cloud Application Builder builds the cloud application according to the cloud application framework. Once the cloud application is built the Cloud Controller with the Cloud Stack and Service Registry is used to deploy the cloud application in the private cloud.

The computer based private cloud computing system and method of the present invention further provides a PaaS through the Cloud Stack to extend the IaaS by anticipating enterprise system needs which assists in standardizing the cloud application development and deployment process for the enterprise.

The computer based private cloud computing system and method of the present invention will be described in greater detail in the remainder of the specification referring to the drawings.

The present invention is directed to a computer based system and method for cloud computing and cloud application development and deployment in a private cloud within an enterprise. The present invention is also directed to computer based systems and methods for private cloud computing in which the cloud infrastructure adapts or responds automatically or substantially automatically to changes caused by the deployment and use of cloud applications developed for the private cloud system. The private cloud computing systems and methods of the present invention are embodied in the higher level layers such as the application and services layers that may be incorporated as part of application layer shown in .

Referring to generally at a representative diagram of the physical structure of the computer based private cloud computing system of the present invention is shown. In the cloud cluster and router that form the cloud application server are shown at . This cluster shows four server computers forming the cloud application server. As such any one may be provisioned to handle a request for a cloud application or web services because of the load balancing features of the private cloud of the present invention through provisioning services. However the cluster may include more or less than four server computers and still be within the scope of the present invention.

External cloud services are connected to cloud application server . The external cloud services that are shown include cloakware server that are used to provide network security to the cloud. External cloud services also include messaging server for controlling internal and external messaging associated with the private cloud of the present invention.

External cloud services include file transfer services . The services handled by file transfer services include but are not limited to client device cloud cloud external system and intra cloud file transfers. It is within the scope of the present invention that these files transfers may be encrypted for security purposes.

The last server shown in external cloud services is e mail server . This server is for sending e mail messages to and receiving and processing e mail messages from client devices. More specifically the email messages contemplated to be handled by this server include e mail messages from the private cloud to external systems to inform for example of alert conditions or service level objective SLO violations within the private cloud.

Cloud application server connects to application database . Preferably this database stores cloud application data which includes for example application transaction data reports and warehouse data.

Web server connects to cloud application server and is disposed between client device and cloud application server . Web server operates conventionally to provide content to client devices and processes requests from client devices directed to cloud application server . Web server also connects to SiteMinder server . Preferably SiteMinder server provides web access management for web server in the form of authentication services.

Load balancer disposed between client device and web server provides provisioning services for balancing the distribution of cloud applications running in the cloud among the cloud infrastructure. More particularly load balancer load balances incoming HTTP requests among a number of web servers of which only one is shown in .

Referring to generally at a representative diagram of a logical structure of the computer based private cloud computing system of the present invention shown in is shown. Load balancer balances the incoming HTTP requests to a pool of web servers and scales the cloud infrastructure such as the web servers up and down to meet the traffic needs. Web server performs the functions of a web server and an authentication agent on a single sign on basis.

The web server routes requests to the application router. The application router is in the form of a cluster of routers that are part of application server . The application router route requests to web services in the cloud application server cluster which is also part of cloud application server . Each service is identified by a unique ID.

The application server cluster hosts web services and receives the requests for such services from the application router cluster. The application server cluster also contains jobs. The jobs are batch jobs that are part of the cloud application that reside in the application server cluster.

The web services in the application server cluster connect to application database that includes enterprise data. The application database resides outside the private cloud. The enterprise data includes online transaction processing OLTP and warehouse data that are stored separately. Preferably replicated instances which are shown as Oracle instances keep the data for the OLTP.

Referring to generally at the components of the computer based private cloud computing system of the present invention are shown. These components will now be discussed.

The main components of the computer based private cloud computing system of the present invention include Cloud Controller Cloud Stack Service Registry and Cloud Application Builder . As stated Cloud Controller provides intelligence to the computer based private cloud computing system of the present invention. The general functions of Cloud Controller are to handle the deployment workflow set the time and date for cloud application deployment scale up and scale down platform needs depending on the cloud applications that are to be run set the time and date for checking the physical and virtual machines set the time and date for scanning the cloud application logs set the time and date for monitoring cloud application transactions and send alerts when errors occur within the private cloud. The deployment workflow will be discussed in greater detail subsequently with respect to .

Change Control services of Cloud Controller are associated with cloud application setup. Change Control services accept bundled binaries created for cloud applications and permit an authorized system user to create and update a cloud application profile and to browse information about a particular cloud application. The creation of a cloud application profile is for a cloud application that has already been deployed in the private cloud and specifies the appropriate cloud application that is to be run.

Change Control services permit an authorized user to copy the description of an existing profile without the identification fields so that it may be used to describe the new cloud application. Change Control services also permit authorized users to browse existing cloud application profiles and review the information they contain. Further Change Control services permits authorized users to modify an existing application profile including associated application binaries.

Change Control services permit an authorized user to change the status of an application profile. For example using this capability the authorized user could change the status of a cloud application from DRAFT to PUBLISHED. It is recognized however other status changes can be made and still be within the scope of the present invention.

Change Control services enable an authorized system user to browse the application status log for cloud applications to review the current and previous statuses for cloud applications. Change Control services also enable authorized system users to browse properties associated with cloud applications and edit those properties.

The features of Change Control services just described are preferable features only. It is contemplated that Change Control services may have more or less of the features described and still be within the scope of the present invention.

Again referring to Cloud Controller Auto Audit rules are shown at . Auto Audit rules are directed to specific rules that are checked when a cloud application profile status is changed. Auto Audit rules are configured for the system and typically only the cloud manager can change these rules. Audit Audit rules preferably include a set of rules that are applied to every change made to a cloud application profile. Alerts are generated for every Auto Audit rule that fails. Auto Audit rules are discussed in more detail with respect to .

Cloud Controller shows Provisioning services at . Provisioning services are responsible for executing the deployment related commands issued by the rules engine of the Cloud Controller. Provisioning services will automatically create shut down and restart cloud application instances in which an instance is a single copy of a running application. Provisioning services interact with the platform infrastructure to carry out provisioning. In operation prior to running a cloud application Provisioning services will determine the assets needed to run the cloud application and provision the infrastructure accordingly.

The features of Provisioning services just described are preferable features only. It is contemplated that Provisioning services may have more or less of the features described and still be within the scope of the present invention.

Cloud controller shows Monitoring services at . Monitoring services capture the information with regard to at least the operational performance of various cloud applications and the user interface through the Application Control Panel and Dashboard make the captured information visible to the system user on his her client device. Further the information may be made visible by zone. A zone is created by an authorized user and for purposes of the present invention a zone is defined as a predetermined group of computers. Such computers could be grouped regionally by divisions of an enterprise or other type of grouping. As such zones for example are a means to segregate and distinguish segments of a cloud for the isolation of environments like deployment system testing system user acceptance testing and production identifying different physical locations and data centers and enabling quick disaster relief.

Monitoring services also permit authorized users to browse cloud server configurations by zone in a detailed format and browse a list of transactions that show how cloud applications are being used by zone or other user defined criteria. Further Monitoring services permit authorized users to view the activity logs that show what particular cloud users have been doing with respect to the private cloud. Authorized users can also view a graphical depiction of data on physical and virtual machines with respect to the cloud and data on SLO violations. Monitoring services permit authorized users to browse information relating to cloud applications that are stored in the private cloud browse information relating to currently active cloud applications and browse historical data with respect to cloud applications. Yet further Monitoring services permit authorized users to set and update SLO thresholds review SLO statistics and take actions based on how errors are occurring in cloud applications.

The features of Monitoring services just described are preferable features only. It is contemplated that Monitoring services may have more or less of the features described and still be within the scope of the present invention.

Alert services of Cloud Controller are generated to indicate a status change in a cloud application in the development and deployment process. Alerts generated by Alert services are associated with Auto Audit rules. Alerts are classified as INFO WARN ERROR and FATAL alerts. In the development of cloud applications the developer of the cloud application and approvers cloud managers can view alerts associated with every change in a cloud application profile status. In the deployment process all alerts require approval by a cloud manager. However it is understood that the cloud manager may include one or more levels of approvers and it will still be within the scope of the present invention.

The cloud manager may accept or decline an alert after review. If the cloud manager chooses to accept the alert the cloud application will move forward. However if the cloud manager declines an alert it will move the cloud application backwards by setting the status of the cloud application profile to DRAFT and the reason will be rejected. 

Alert services permit authorized users to configure profile change alerts for cloud applications by zone. Alerts may be sent out by Alert services for example when a cloud application scales up when a predetermined number of health checks fail in a predetermined amount of time or when SLO violations go above an average. Alerts may be generated manually or automatically sent out under predetermined conditions for example by email. Alerts with respect to Auto Audit rules will be discussed in greater detail subsequently with regard to B and .

The features of Alert services just described are preferable features only. It is contemplated that Alert services may have more or less of the features described and still be within the scope of the present invention.

SLO watch and compliance services of Cloud Controller permit authorized system users to view a summary of all SLO violations by individual cloud applications or by zone. SLO watch and compliance services also permit authorized system users to view individual violations for a summary value. Further SLO watching and compliance services allow authorized system users to view a log of individual transaction violations. Yet further SLO watching and compliance services permit authorized users to filter violations by user zone cloud application web service or other predetermined criteria.

The features of SLO watching and compliance services just described are preferable features only. It is contemplated that SLO watching and compliance services may have more or less of the features described and still be within the scope of the present invention.

Log Scanning services of Cloud Controller permit an authorized system user to view the activity relating to a cloud application an instance a hypervisor in control of a virtual machine or other cloud elements. Using the Log Scanning services an authorized system user can request an on demand log scan of any cloud application or component. Further using Log Scanning Services an authorized system user can view the activities relating to a deployed cloud application.

Thread Analyzer services permit authorized system users to view transactions that take place within the private cloud with respect to particular nodes that relate to a cloud application that is running

Transaction Browser permits authorized system users to filter transactions by user zone cloud application web service or other predetermined criteria. Transaction Browser allows authorized system users to group transactions together to understand macro behavior view time statistics by cloud application and zone and compare response time statistics for a current cloud application and zone with typical time statistics for cloud applications and zones.

The features of Thread Analyzer services and Transaction Browser just described are preferable features only. It is contemplated that Thread Analyzer services and Transaction Browser may have more or less of the features described and still be within the scope of the present invention.

Cloud Stack includes the software stack for the private cloud. Cloud Stack includes operating system software which is preferably Linux software. Further Cloud Stack includes virtual machine operating software for use by the virtual machines running in the cloud that are managed by hypervisors. Preferably this software is Java Development Kit JDK software from Sun Microsystems Inc Oracle Inc.

Cloud Stack includes web server software which preferably is Apache Web server software from the Apache Software Foundation. Cloud Stack also includes application server software . Preferably the application server software is JBoss software that includes a Tomcat servlet container. The JBoss software is from Red Hat Inc. and the Tomcat servlet container software is from the Apache Software Foundation.

Cloud Stack includes network security software which preferably is Cloakware software from Irdeto B.V. The next software in Cloud Stack is web access management software which is preferably SiteMinder software from Computer Associates Inc.

Cloud Stack includes database access drivers which preferably are JDBC drivers. Cloud Stack also includes Cloud Application Builder runtime software that is the cloud application framework software that will be deployed in the private cloud.

Finally Cloud Stack includes third party libraries . The number of library can include one or more such third party libraries and still be within the scope of the present invention.

Service Registry which has been described previously contains a register of at least the web services for the cloud applications that are deployed in the private cloud. The Service Registry operates cooperatively with Cloud Controller and Cloud Stack for the deployment of developed cloud applications in the private cloud.

Preferably Cloud Controller which includes the services described above and Cloud Stack which includes the software stack described above form the runtime components along with the cloud application framework that was leveraged to build the cloud application to prepare the cloud application for deployment in the private cloud. With respect to Cloud Controller and Cloud Stack certain components have been specified above however it is understood that more or less than these components may make up Cloud Controller and Cloud Stack and they will still be within the scope of the present invention.

Cloud Application Builder is used to develop cloud applications and web services for deployment in the private cloud of the present invention. Cloud Application Builder includes service development toolkit which is primarily used for the development of web services for cloud applications to be deployed in the private cloud. This service development toolkit includes at least tools for use in the development of web services and the user interface components for a cloud application being developed according to the cloud application framework.

Cloud Development Toolkit CDT of Cloud Application Builder is for the development of user interfaces associated with cloud applications to be deployed in the private cloud.

Cloud Application Builder includes software for developing in web applications. Preferably application development software is Eclipse from the Eclipse Foundation which provides the integrated development environment IDE for application development plus the Google web toolkit GWT from Google Inc.

Cloud Application Builder includes testing software which preferably is JUnit software from JUnit.org. Finally Cloud Application Builder includes web server servlet software which is used for creating dynamic content for the web server for cloud applications being developed for deployment in the cloud. Preferably the web server servlet software is Apache Tomcat from the Apache Software Foundation.

Referring to generally a representative drawing of the logical architecture of the components of the private cloud computing system of the present invention is shown. User interface is the user interface of a client device. The interface will include application control panel that will include the dashboard . A representative application control panel is shown in and a representative dashboard is shown in .

Application control panel enables developers managers of cloud applications owners of cloud applications software quality assurance SQA system users and others to view use and manipulate cloud applications in the cloud. Dashboard enables authorized users to manage infrastructure components. User interface is bidirectionally connected to CLDB for accessing cloud applications and associated information and other data and information stored in CLDB .

User interface also connects to Cloud Controller for the purpose of sending messages to the Cloud Controller. Preferably these messages will include but are not limited to requests for access to particular cloud applications and web services and SLO monitoring.

eSF proxy with eSF database provides security to the cloud. eSF proxy and eSF database provide permissions for cloud application and web services access based on data groups function groups and user roles. Data groups function groups and user roles are discussed in greater detail with regard to .

The permissions include but are not limited to what users have access to particular cloud applications and web services in the cloud what users can carry out certain functions for example providing approvals changing cloud application profiles or deleting cloud applications from CLDB . Moreover eSF is capable of providing a security infrastructure that will contain and satisfy all of the security requirements for cloud applications that are run in the private cloud as well as for the private cloud itself. At least part of the security eSF provides is function level entitlements and the eSF also contains the data to support such security offerings. Is understood that the permissions just described are not exhaustive and there may be additional permissions and it still will be within the scope of the present invention.

Service registry connects to Cloud Controller . Service registry which will be discussed in greater detail subsequently enables developers to search for web services registered for the private cloud and view detailed information about them.

In processing a request from user interface for a particular cloud application or web services Cloud Controller sends a request to Provisioning services . Provisioning services provisions hypervisors and virtual machines that they control to accommodate the needs of client devices running cloud applications in the cloud. As shown in hypervisor manages web server instance application instance and application instance . Each of these software instances is running in a virtual machine instance supervised by hypervisor . The private cloud computing system of the present invention can have one or more hypervisors that control cloud application and web server instances that are running in virtual machine instances and still be within the scope of the present invention.

Referring to at it shows the Build.xml. Build.xml refers to the application build framework that enables developers to build cloud applications using Cloud Application Builder and its associated runtime libraries. When such cloud applications are built the binaries associated with the cloud application are provided to binaries bundler . The binaries are then sent for storage in CLDB and provided to Provisioning services for provisioning with a hypervisor so that it will be available to the system users which include client devices for running the cloud application and authorized system users with permissions to manipulate the cloud application.

Monitoring services include health check services and log scanning services . Health check services monitor the physical and virtual resources of the private cloud. Log scanning services perform automatic and on demand scans of logs for cloud applications and cloud infrastructure components looking for SLO violations. The information that is determined by health check services and log scanning services is stored on CLDB .

Before describing the development of a cloud application the user interface management of each cloud application will be discussed referring to .

Data access is directed to foreground services such as those shown at and that are created for the user interface to access the private cloud. For example developers could create lightweight user interface components in HTML Adobe Flash AJAX and other tools for this purpose. However it is understood that other services could be created and still be within the scope of the present invention.

Data storage is directed to online transaction processing OLTP data that is stored in application database separate from warehouse data. Accordingly the OLTP data is associated with performing database transactions. Examples of OLTP data is shown at and of data storage . In data storage mainframe customer information control system CICS will leverage conventional CICS functions for purposes of data storage according to the present invention. Data storage also shows RDBMS which is a relational database management system. For purposes of the present invention RDBMS will leverage conventional relational database management functions for purposes of data storage according to the present invention. However it is understood that the system of the present invention may include other OLTP data components and still be within the scope of the present invention.

Background is used to create background processes such as jobs and and manage warehouse data. The creation of jobs will be discussed in greater detail subsequently.

eSF as stated previously provides security to the cloud. eSF includes what is shown at and in . Through the user interface eSF is directed to entitlement enforcement. As such with regard to data access and background eSF controls authorizations to access and use cloud applications and web services by assigning user roles which preferably are devised by associating stored data with functions within an enterprise.

Service registry refers to the service registry of the private cloud. The service registry enables developers to search for web services and view detailed information about them. Accordingly the user interface can be used to browse the service registry for web services that can be reused. Further service registry performs the function of bringing applications and web services into the private cloud and monitoring their SLO compliance and usage. The service registry will be discussed in greater detail with regard to .

In the center of is a persistence state which includes audit trail data integrity security and scheduler . Audit trail is for tracking changes with respect to cloud applications. Data integrity is for placing constraints on the application database to ensure data integrity within the database. Scheduler is for scheduling jobs. Security is eSF access security.

Rules engine which is part of the private cloud the Cloud Controller will be created by the cloud manager and it will include rules for the operation of cloud applications running within the private cloud. These rules may include for example scale up or scaled down rules alert rules or zone rules. It may contain other rules and still be within the scope of the present invention.

Again referring to each of the elements is shown connected within messaging environment . This enables communications among the various elements.

Referring to Service Registry in it is contemplated the services registry provides at least four services however it is understood that it may provide more or less than four and still be within the scope of the present invention.

The first service that service registry preferably provides is for servicing application programming interfaces APIs for authorized developers to create and manipulate metadata relating to web services. This enables authorized users to create or update the metadata and information on functions and function groups. The APIs reference this information which preferably is web service details in a service inventory file.

The second service is a search catalog service. The search catalog service enables authorized system users to search for and discover web services on a catalog search page of the service registry.

Third service of service registry is a browse category service. This service enables authorized system users to drill down from cloud application function group to a list of constituent web services on an application browser page of the service registry.

The fourth service of the service registry is a web service details service. This service provides metadata and other information that authorized system users can access on the various tabs of the web services details dialog box of the user interface as shown in .

Referring to generally at representative service registry architecture is shown. Service registry connects to Cloud Controller . As shown both Cloud Controller and service registry are within the private cloud. Also connected to service registry from outside the cloud is service metadata repository which is a metadata database. Further eSF connects to Cloud Controller from outside the cloud. Although not shown eSF proxy will be disposed between eSF database and Cloud Controller but in the private cloud.

Cloud Controller connect to browser client user interface . Browser client provides content to users and permits them to access service registry .

The integration of eSF with service registry insures access to cloud applications web services and user interface items such as button and menu options is restricted to only authorized system users. This is based on carefully defined roles that determine access for developers and users. Examples of this access control will be discussed subsequently.

The components of a cloud application to be developed in the cloud include a user interface registered web services that offer potential reuse and registry of background jobs that can be reused. The developer that is creating cloud application for deploying in the private cloud also may create business rules and or Java classes that relate to web services and jobs. Once the components of the cloud application are created they can be stored in CLDB . The creation of these components may take place within the private cloud environment.

In developing the web services user interface components and batch jobs there will be a requirements analysis done by the developer with regard to a cloud application to identify the web services that embody his her application the user interface components needed to accomplish the tasks of the cloud application and the batch jobs needed to store the data for the cloud application. In performing these tasks in the Cloud Controller the developer can browse and look up registered services in the service registry to see if any can be reused in his her cloud application.

According to the system and method of the present invention before web services can be created for a cloud application the developer must obtain an application identifier that includes a cloud application code and its extension. This will track an application through the development process including the creation of cloud application profile for the cloud application. Preferably before the cloud application can be moved further toward the private cloud environment the source code for the cloud application is placed in a source code control system. Once this task has been performed the cloud application and its components can be developed using Cloud Application Builder .

With regard to a particular cloud application the development of the web service component will include the developer creating metadata for the service definition and completing the service inventory file for the cloud application. Each cloud application will have a service inventory file associated with it that describes the function groups in all member web services. Cloud Controller uses this data to update the service registry automatically when a cloud application is deployed.

Preferably the developer builds separate .war web archive files for foreground and background processes see bundles the binaries associated with the cloud application and then creates a cloud application profile. The binaries that are associated with the foreground processes relate to web services and the user interface components. The binaries that are associated with the background processes relate to jobs. However before the developer can deploy the web service for use in the cloud the appropriate approvals must be obtained which will trigger service registry updates and adjustment to the associated eSF roles stored in the eSF. This process of development is shown graphically in .

Following the update of the service inventory file at the developer builds an application binary file for the foreground and background processes at . The binaries associated with the cloud application are bundled and at a request to deploy the web services is made using the cloud application profile that has been created for the cloud application. This request is sent by the developer using a client device user interface to Cloud Controller . At approvals by the appropriate authorized users are requested. If the approval is denied then notification is sent back to the developer via appropriate messaging. However if approval is granted there is an update sent to the service registry for the web service at and there is an update of the eSF at with the appropriate permissions for the use of the web service. Following this the web service is provided live at in the private cloud. Preferably the private cloud uses the metadata in the service definition and the service inventory file to automatically update the service registry when the web service is deployed.

As stated a user interface also is a component of a cloud application. Cloud Application Builder through CDT and appropriate panels on the user interface develop the user interface component that is to be associated with a particular cloud application. This toolkit permits developers to extend the web services associated with cloud application to the user interface. Preferably the toolkit will support Flash and Microsoft Office based user interface development.

Cloud applications deployed in the private cloud can be embedded in non cloud web pages. If this is done all the functionality of the cloud application can be accessed from that webpage with the user interface as a pop up but the web services will be running in the private cloud.

The last component of a cloud application is background jobs. These jobs are batch jobs that run in the background and store information in the cloud and other databases. The background jobs for a cloud application can run in two instances that can be located on different machines. For example these jobs are run active active in two separate data centers. Background jobs can involve processing that helps the cloud application server handle scalability without hanging up threads in the foreground.

Referring to generally at a representative diagram is shown for background job development and handling. In external services connect to background cloud . External services include RDBMS messaging and file transfer service . Each of these has been previously described with regard to other figures and as such those descriptions apply equally here and are incorporated by reference.

Background cloud includes three representative cloud application instances at and respectively. Application instance shows batch jobs and application instance shows batch jobs and and application instance shows batch jobs and . A scheduler not shown manages the jobs and handles multiple application instances such as those shown in . The batch jobs that are shown in background cloud can be bundled in a separate .war file that can contain multiple jobs. These jobs can then be stored in CLDB and be associated with the appropriate cloud application.

As stated previously eSF handles cloud application security. Preferably cloud application developers will set up eSF roles and use an eSF proxy API to secure protected items. The use of eSF security will be explained in greater detail referring to .

Referring to generally at a representative diagram for implementing eSF security is shown. When a system user requests cloud application or web services access the system user shown as service consumer must be authenticated. As such SiteMinder will check the system user s authentication by querying eDirectory . If authentication is confirmed then requested web service associated with a cloud application communicates with eSF proxy to check the system user s eSF entitlements in eSF database . These entitlements will include whether the system user is authorized to perform the function specified in the service request. If the system user is authorized then the system user will have access through the web service to database information at . If the system user is not authorized then access will be denied.

Previously it has been discussed that access to cloud applications and web services may be based on the roles. For purposes of the present invention function groups are a collection of functions that enable an authorized system user to perform operations on whatever data that relates to that system user s job description. Preferably function groups will have access to particular data defined by the cloud application developer. The function groups and functions will be defined in the service inventory file and be deployed as part of the application binary files that will update the service registry and eSF database. An example of the formation of functional groups and the services to which these function groups will have access is shown in .

At services block the registered services for Master Feeder cloud application are shown. With regard to the first function group at this function group is permitted to perform the services that are registered as 791002 791003 and 791004. This will permit the first function group to Create Master Add Feeder and Remove Feeder respectively.

With regard to the second function group at this function group is permitted to perform the services that are registered as 792001 and 792002. This will permit the second function group to Find Master and to Get Feeders respectively. It is noted that the second function group would not be permitted to have access to the services authorized for the first function group.

The defining of function groups is based on cloud application roles. Referring to the method by which these roles define function groups will be discussed.

Referring to generally at the use of cloud application roles to define function groups is shown. Cloud application block shows a cloud application titled Master Feeder. At cloud application roles templates block the application developer has defined the roles associated with the Master Feeder cloud application. These roles are Master Feeder Administrator at and Master Feeder User at . Preferably the cloud application roles templates are constructed by evaluating the functions that a system user must perform assembling these functions in a function group and identifying the data group that contains all the data that may be manipulated by the system user.

As shown in at functions groups block the role of a Master Feeder Administrator shown at may be separated into two function groups. The first function group would be one in which the system user would be permitted the administrative functions at and the second would be only the browse functions at .

As stated the cloud application roles defined by the developer of the cloud application also provide for the Master Feeder User at . The function group that is assigned to this role would be permitted the browse functions at . These browse functions may be the same or different from those for a Master Feeder Administrator and still be within the scope of the present invention.

The cloud application role templates will be part of the service inventory file and will update the eSF when the cloud application is deployed in the private cloud.

At roles block it shows that the role at is for an administrator at ABC Corporation. At data groups block it shows that the administrator receives data regarding ABC Corporation s funds at which may be mutual funds for example. Data block which may be a repository of specific data regarding ABC Corporation s funds include ABC data at ABC data at and ABC data at to which the administrator at will have access through data groups block at . In reviewing the entitlement map with regard to the Master Feeder cloud application the restrictions based on function groups is enforced according to the map.

At roles block it shows that the role at is for a system user at ABC Corporation. At data groups block it shows that the system user receives data regarding ABC Corporation s funds at which as in may be mutual funds. Data block which may be a repository of specific data regarding ABC Corporation s funds include ABC data at ABC data at and ABC data at to which the system user at will have access through data groups block at . In reviewing the entitlement map with regard to the Master Feeder cloud application the restrictions based on function groups is enforced according to the map. As such since the role at roles block is only for a system user the system user is only permitted the browse function at in functions group block . As part of this function group the system user is only permitted to Browse a Master at and Browse Feeders at of functions block .

Previously with regard to the process for developing and deploying a cloud application in the private cloud was discussed. That process will now be described in greater detail referring to .

Preferably there are five main steps for deploying a cloud application in the private cloud. This process may be referred to as the cloud application promotion process. The five main steps include bundling application binaries and exporting the bundled application binaries to the private cloud creating and editing a cloud application profile for deploying the cloud application in the private cloud obtaining the appropriate approvals for deploying the cloud application in the private cloud performing a certified build of the application so that it can be promoted to user acceptance testing UAT and setting and changing system properties in the cloud application profile for cloud application promotion to the private cloud.

Prior to beginning the cloud application promotion process by deploying the cloud application to the development DEV environment preferably the developer will obtain the previously discussed application identifier for the application. Further the developer will have requested that the appropriate Cloud Controller access eSF role entitlements be set up in eSF for the developer so that the developer has the appropriate roles to deploy the cloud application. The developer will create a build project for the cloud application in the Cloud Application Builder and run appropriate tests on the cloud application. Then the developer will build the cloud application in the cloud application builder so that the developer is ready to bundle the binaries associated with the cloud application for export to the private cloud.

Once the above steps have been accomplished the cloud application binaries are bundled and the Cloud Controller promotes the approved and secure web services associated with the cloud application to the private cloud. According to the present invention the binaries bundler can be invoked from the developer s client device after a build for proof of concept POC DEV and System Integration SYS deployments. However the binaries bundler can only be invoked by higher level build machines for example ClearCase build machines or other certified build machines for the UAT and Production PROD deployments.

For purposes of the present invention in POC and DEV deployments the developer can build the .war file from his her client device. In SYS to promote a cloud application image to UAT preferably it will be done from designated machines such as certified machines where the developer can run ClearCase build scripts or other change control mechanism.

Cloud applications for UAT and PROD deployment do not go directly to the private cloud from a build. When the developer creates a cloud application profile for UAT the developer picks a cloud application that was built for SYS on a certified build machine preferably where ClearCase build scripts can run. For PROD the developer picks a cloud application that was promoted to UAT. As such this makes the cloud application deployed in UAT and PROD the same as the cloud application that was tested in the previous environment in the application promotion process. Although what has just been described as the preferred method for application promotion it is understood that other methods are possible and can still be within the scope of the present invention.

The four deployment environments discussed above will now be discussed in view of the promotion process as it relates to the creation of cloud application profiles.

DEV After the developer has done development and testing of the cloud application he she can export the cloud application s .war file to the private cloud. The developer using the user interface can select Application Profile tab on the user interface. The cloud application s initial status is DRAFT. The developer will provide the appropriate information for completing the cloud application profile and select a cloud application for association with it. The developer will then change the status to PUBLISHED. The developer s cloud application will run in the DEV environment upon approval by the appropriate level cloud manager.

SYS Only cloud applications running in DEV can be promoted to SYS. In SYS a cloud application may be built on a certified build machine for example a build machine running ClearCase build scripts.

PROD Only cloud applications running in UAT can be promoted to PROD where such cloud applications will be run live on the private cloud.

The method for creating a cloud application profile and changing the status of the cloud application from DRAFT to PUBLISHED will now be described referring to .

Referring to generally at a representative cloud application control panel is shown at . To generate a new application profile Application Profiles tab is activated which will provide the lower screen that has Add Application Profile tab . As seen at status line the initial status is always DRAFT. When Add New button is activated it will cause Add New Application Profile window to be displayed.

Referring to in Add New Application Profile the name of the cloud application is entered in the name field . Then in App Code field the button is selected to provide the drop down list and the appropriate application identifier is selected that has been assigned to this particular cloud application. It is now necessary to complete the remainder of the profile.

First the version of the application is entered in Version field . Then in Zone Environment field the button is selected to provide the drop down list and the appropriate environment for deployment is selected. Similarly in Zone Code field the button is selected to provide the drop down list such as the drop down list shown in generally at . When the appropriate Zone Code is selected it will populate Zone Code field .

Next an effective date and time are selected in Effective Date field . The selection of a future date enables the approval process to complete and this will be the date on which the private cloud will start running the cloud application. If the effective date passes without approval the private cloud will start running the cloud application when the approval process is complete. The Expire Date field may be completed but it is optional.

Context field will include the context for the cloud application. For example the context field will provide the fully qualified path for a cloud application such as for example http Cloud.statestreet.com Appl default .

In Requests Pattern field the service request prefix or other characters are added. For example the service request prefix for routing that is found in this field is provided by the Cloud Controller.

In order to populate App Image field button is activated which will open Image Browser Dialogue window in . Here the appropriate cloud application is selected. By selecting the information icon at the dialogue window shown at in is displayed which shows the cloud application details. Once it is confirmed that the cloud application details are correct Related Images tab is activated which will open the display window at in . After the information in the display window shown in is verified this window is closed along with the Image Browser window shown in . Then the select image button at in is activated and then the Save button at in is activated to save the new application profile. When the save is complete the status of the cloud application is set to DRAFT.

To change the status from DRAFT to PUBLISHED it is necessary to activate button in Status field in . This will open the App Change Profile Status display window shown in at . In New Status field the button at is selected to provide the drop down list and the appropriate status is selected which in this example is PUBLISHED.

Next the View Alerts button at is activated which will open Alerts dialog window shown in . If the alerts are accepted then the Accept button at is activated and the status of the cloud application is changed to PUBLISHED and it can go live in the private cloud once all the approvals are obtained. If however the Decline button at is activated because of the nature of the alerts then the status of the application will not be changed to PUBLISHED and it will not go live on the private cloud.

Alerts have been discussed generally with respect to their use in the development and deployment of cloud applications. Now alerts will be discussed in greater detail.

Cloud application developers can make changes to a cloud application profile while the cloud application profile is in DRAFT status. Auto Audit services are a set of rules applied to every change made to a cloud application profile.

Alerts are generated for every Auto Audit rule that fails. As stated previously alerts are classified as INFO WARN ERROR and FATAL. Preferably a developer will review the alerts associated with each cloud application profile change. Further the appropriate approvers cloud managers must review the alerts when they are non INFO alerts associated with a particular cloud application profile before the cloud application can be advanced to being provided live on the private cloud.

As a described previously approvers can accept or decline the alerts after review. If the approver accepts the alerts the cloud application will move forward in the development and deployment process. However if the approver declines the alerts the cloud application moves backwards by setting the status of the cloud application profile to REJECTED with the reason code as DECLINED ALERTS. Alerts that are generated can be automatically sent to approvers by email or other messaging method so that they will be alerted to the generation of such alerts.

Generally the Auto Audit mechanism is for identifying issues and problems in a cloud application profile. This Auto Audit mechanism includes rules that will generate auto alerts when any of the rules that are checked result in a failure. The Auto Audit rules are created by the cloud manager.

Alerts are associated with issues and problems in the cloud application profile and once generated must be accepted or declined by an appropriate level approver of the cloud manager. If the cloud manager accepts the alerts associated with a cloud application profile then the cloud application will move forward in the process toward being displayed live in the private cloud. If the alert is declined the cloud application is rejected and the cloud application profile status is changed to DRAFT. If this is the case the developer must fix the problem before the application can be moved forward to being PUBLISHED.

Referring to generally at a representative diagram relating to actions associated with the application of Auto Audit rules application is shown. At Auto Audit rules are applied to a cloud application when the associated cloud application profile is changed while it is in the DRAFT status. In the detect phase alerts are generated for every Auto Audit rule that fails. As stated previously the alerts are classified as INFO WARN ERROR or FATAL.

In the review phase at developers will review the alerts after every change to a cloud application profile. An approver of the cloud manager reviews every alert. In the control phase approvers of the cloud manager must accept or decline the alerts after review.

A representative set of Auto audit rules is shown in generally at . Referring to a representative set of Auto Audit rules is shown at . There are rules shown but this set of is only exemplary. With respect to each rule there is a severity of the rule that is shown at . The severity is defined by one of the four alert states namely INFO WARN ERROR and FATAL. At there is an explanation of the alert. Accordingly when there is a change to any cloud application profile status each of the Auto Audit rules is checked and to the extent that there are any violations alerts will be lodged against that cloud application. It is only upon the acceptance of these alerts by the appropriate approvers that the cloud application can move forward in the development and deployment process.

In a user interface shows dashboard . A representative dashboard display is shown in generally at . As shown a cloud application and zones can be viewed in detail or graphically to enable a survey of a cloud application s health. In for the cloud application shown at application details are shown at virtual machine details are shown at and virtual details are shown at . Further the graphical display of zones is shown at .

The graphical display of zones at shows the health with regard to TX SLO Transaction SLO at and users at to be very good since the indicator arrow is well into the Green area. The health of physical machines shown at is not as good because the indicator arrow is close to the Yellow or warning area. Finally the health of virtual machines shown at is not good because the indicator arrow is in the Red area. Preferably because the indicator arrow is in the Red area cloud managers will be alerted to this and if possible correct the loading problem associated with the virtual machines.

It is understood that there may be the selection of the various tabs shown on dashboard display and this will provide additional health information with regard to the system applications and infrastructure.

In describing service registry with respect to the content of the service registry was discussed but not shown. Further there has been previous discussion that through the service registry authorized system users would have access to web services details related to service registry entries. In representative screen displays of a service registry window and a web services detail window are shown.

Referring to generally at a representative service registry display window is shown. As shown at each registry entry has a number name description and additional information relating to the service. This information makes the services searchable by authorized system users. If an authorized system user desires detailed information with regard to a specific entry in the service registry it may be obtained by selecting that service entry which will open a web services detail window such as the one shown in .

Referring to generally at a service registry display with a web services detail display window is shown. If an authorized system user selects service registry no. 511446 in service registry window it will open web services detail display window for service registry no. 511446 to provide specific detail with regard to that registry number. In display window the basic information about service registry no. 511446 is shown however by selecting any of the additional tabs additional detailed information will be provided about this registry number.

Referring to generally at a cloud application deployment workflow is shown for the POC DEV SYS environments. Collectively POC DEV SYS form a zone. This Figure shows the process a cloud application profile must go through when a cloud application is being deployed to the POC DEV and SYS environments.

At a developer will have access to a cloud application profile to edit the fields of the profile file as long as it has the DRAFT status as shown at . Once the developer is satisfied with the changes to the cloud application profile the status in the cloud application profile will be changed to PUBLISHED at .

Next preferably a lead developer will review the application profile and when satisfied with it he she will change the status of the cloud application to LEAD APPROVAL as shown at . If however the lead developer is not satisfied he she can reject the application as shown as REJECTED at which will return the status of cloud application profile to DRAFT.

If the lead developer approves the cloud application the cloud application profile will be forwarded to the Cloud Controller at . The Cloud Controller having taken over at this point validates the cloud application profile and changes the status of the cloud application profile to SCHEDULED as shown at . The application profile will stay in the status until it is time for deployment to the private cloud.

Typically the time to deploy a cloud application is indicated in the cloud application profile. When the deployment time comes the Cloud Controller changes the status of the cloud application profile to INSTALLING at while at the same time carrying out provisioning to install the cloud application. The Cloud Controller will extract the service inventory file read the service metadata and access control information UPDATE eSF at and UPDATE SERVICE REGISTRY at . Once installation is complete the status of the cloud application profile is changed to RUNNING at . Preferably RUNNING means the cloud application is running live in the private cloud.

Referring to generally at a cloud application deployment workflow is shown for POC DEV SYS environments. Collectively UAT PREPROD PROD form a zone. In the workflow processes that relate to DRAFT at PUBLISHED at LEAD APPROVAL at REJECTED at SCHEDULED at INSTALLING at UPDATE eSF at and UPDATE REGISTRY at are the same as those in . Accordingly the descriptions of these items with respect to apply equally here and are incorporated by reference.

When deploying the cloud application to the UAT and PROD environments the workflow requires three additional approvals after the LEAD APPROVAL at . These approvals include the MANAGER APPROVAL at SQA APPROVAL at and BUSINESS APPROVAL at . There can be more or less than these additional approvals and it will still be within the scope of the present invention.

Referring to generally at a cloud application deployment workflow is shown for emergency conditions. In the workflow processes that relate to DRAFT at PUBLISHED at LEAD APPROVAL at REJECTED at MANAGER APPROVAL at SQA APPROVAL at BUSINESS APPROVAL at and SCHEDULED at are the same as those in except LEAD APPROVAL at and MANAGER APPROVAL at are part of developer and SQA APPROVAL at and BUSINESS APPROVAL at are grouped in alternative flow that includes EMERGENCY APPROVAL . Accordingly the descriptions of these items with respect to apply equally here and are incorporated by reference.

If the developer requests that the cloud application profile be moved as an emergency deployment the workflow of will be used. In the emergency deployment workflow the SQA and BUSINESS APPROVAL may be skipped by an authorized person who has access to EMERGENCY APPROVAL at . Preferably the emergency workflow is for deploying unexpected but critical technical changes that need to be moved forward urgently to deployment.

Referring to generally at a moratorium cloud application deployment workflow is shown. In the workflow processes that relate to DRAFT at PUBLISHED at LEAD APPROVAL at REJECTED at MANAGER APPROVAL at SQA APPROVAL at BUSINESS APPROVAL at SCHEDULED at and EMERGENCY APPROVAL at are the same as those in . Accordingly the descriptions of these items with respect to apply equally here and are incorporated by reference.

A moratorium deployment workflow is used when cloud applications need to be moved during a monthly moratorium or other fixed period of time. For example it could coincide with the last and first business days of a month. During this time changes to live cloud applications are restricted.

According to alternative workflow includes MORATORIUM APPROVAL at and MORATORIUM APPROVAL at . These latter approvals are acquired from high level entities within the enterprise.

Referring to generally at shows a cloud application deployment workflow for backing an application out of the deployment process. When a cloud application deployment results in an unexpected malfunction in the cloud application it may be necessary for the version of the cloud application that was deployed to be backed out of the private cloud.

When a problem is detected in a deployed cloud application a decision will be made whether to back the application out. This can be done by the creation of an application backout file. This file may be created with the binaries for the cloud application that were deployed before the cloud application had problems. A backout profile is created by the developer using these binaries.

Again referring to the backout application deployment workflow is shown graphically. At once there is a problem detected with a deployed version of the cloud application a decision must be made whether or not to create and use a backout profile.

If it is decided to create a backout profile the process proceeds to . At the backout profile can be created using the Application Control Panel. In creating the backout profile only previously deployed cloud applications can be used. Further once the backout profile is created it cannot be changed. An activity log keeps track of the history related to the backout profile.

Once the backout file is created the process moves to where it is necessary to get the appropriate approvals. These approvals are obtained in a manner consistent with the workflows shown in at least and .

Referring to generally at and alternative cloud application deployment workflow shown in which Auto Alerts are incorporated. In the workflow processes that relate to DRAFT at PUBLISHED at LEAD APPROVAL at REJECTED at MANAGER APPROVAL at SQA APPROVAL at BUSINESS APPROVAL at and SCHEDULED at are the same as those in . Accordingly the descriptions of these items with respect to apply equally here and are incorporated by reference.

The workflow shown in incorporates the use of Auto Audit rules at each stage. At a cloud application with a DRAFT status has its cloud application profile changed at then the Auto Audit rules evaluate the change at . This will generate application profile alerts at . The developer then fixes the problems at that caused the alerts. If the fixes are deemed appropriate then the cloud application is PUBLISHED at . However at each stage in the alternative workflow at each approval level must accept the alerts as shown at and for the application to move to the next approval stage. If at any of the approved stages the alerts are declined the workflow moves to decline alerts at and the application is rejected at . When the application is rejected in this manner its status will be reverted back to DRAFT and the process must begin again to move the cloud application to deployment in the private cloud.

The embodiments or portions thereof of the system and method of the present invention may be implemented in computer hardware firmware and or computer programs executing on programmable computers or servers that each includes a processor and a storage medium readable by the processor including volatile and non volatile memory and or storage elements . Any computer program may be implemented in a high level procedural or object oriented programming language to communicate within and outside of computer based systems.

Any computer program may be stored on an article of manufacture such as a storage medium e.g. CD ROM hard disk or magnetic diskette or device e.g. computer peripheral that is readable by a general or special purpose programmable computer for configuring and operating the computer when the storage medium or device is read by the computer to perform the functions of the embodiments. The embodiments or portions thereof may also be implemented as a machine readable storage medium configured with a computer program where upon execution instructions in the computer program cause a machine to operate to perform the functions of the embodiments described above.

The embodiments or portions thereof of the system and method of the present invention described above may be used in a variety of applications. Although the embodiments or portions thereof are not limited in this respect the embodiments or portions thereof may be implemented with memory devices in microcontrollers general purpose microprocessors digital signal processors DSPs reduced instruction set computing RISC and complex instruction set computing CISC among other electronic components. Moreover the embodiments or portions thereof described above may also be implemented using integrated circuit blocks referred to as main memory cache memory or other types of memory that store electronic instructions to be executed by a microprocessor or store data that may be used in arithmetic operations.

The descriptions are applicable in any computing or processing environment. The embodiments or portions thereof may be implemented in hardware software or a combination of the two. For example the embodiments or portions thereof may be implemented using circuitry such as one or more of programmable logic e.g. an ASIC logic gates a processor and a memory.

Various modifications to the disclosed embodiments will be apparent to those skilled in the art and the general principals set forth below may be applied to other embodiments and applications. Thus the present invention is not intended to be limited to the embodiments shown or described herein.

