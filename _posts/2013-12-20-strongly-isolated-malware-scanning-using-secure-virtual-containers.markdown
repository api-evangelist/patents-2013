---

title: Strongly isolated malware scanning using secure virtual containers
abstract: Described systems and methods allow protecting a host system, such as a computer or smartphone, from malware. In some embodiments, an anti-malware application installs a hypervisor, which displaces an operating system executing on the host system to a guest virtual machine (VM). The hypervisor further creates a set of virtual containers (VC), by setting up a memory domain for each VC, isolated from the memory domain of the guest VM. The hypervisor then maps a memory image of a malware scanner to each VC. When a target object is selected for scanning, the anti-malware application launches the malware scanner. Upon intercepting the launch, the hypervisor switches the memory context of the malware scanner to the memory domain of a selected VC, for the duration of the scan. Thus, malware scanning is performed within an isolated environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09117081&OS=09117081&RS=09117081
owner: Bitdefender IPR Management Ltd.
number: 09117081
owner_city: Nicosia
owner_country: CY
publication_date: 20131220
---
The invention relates to systems and methods for protecting a computer system from malware and in particular systems and methods that use hardware virtualization technology.

Malicious software also known as malware affects a great number of computer systems worldwide. In its many forms such as computer viruses worms and rootkits malware presents a serious risk to millions of computer users making them vulnerable to loss of data and sensitive information identity theft and loss of productivity among others.

A typical malware attack comprises malware exploiting a vulnerability of a software object such as an application executing on a computer system or smartphone to take control of the respective system in order to perform malicious activities such as installing software components carrying out illegitimate electronic communications with a remote computer system and stealing sensitive information among others.

Various software solutions may be used to detect malware and or to prevent such malware from executing on a computer system. Anti malware software is typically configured to access a much broader range of file and data types than other applications. An exemplary anti malware application may be able to process executable files image files databases and portable document files PDF among others. Handling so many data types may make anti malware software especially vulnerable to attacks. Moreover typical anti malware software executes with relatively high processor privileges so a successful attack on an anti malware component may give a substantial advantage to the attacking entity. Anti malware software may thus be a preferred target for malware.

Hardware virtualization technology allows the creation of simulated computer environments commonly known as virtual machines VM which behave in many ways as physical computer systems. A virtual machine may be set up to execute applications in an environment which is approximately isolated from the environment of another VM thus increasing data security and privacy. There is considerable interest in developing anti malware solutions which take advantage of such facilities offered by hardware virtualization technology.

According to one aspect a host system comprises at least one processor configured to execute a hypervisor the hypervisor configured to expose a guest virtual machine VM and a virtual container VC wherein exposing the VC includes setting up a memory domain of the VC the memory domain of the VC isolated from a memory domain of the guest VM. The guest VM is configured to execute a malware scanner on a virtualized processor of the guest VM the malware scanner configured to scan a target object for malware. The hypervisor is further configured in response to setting up the memory domain of the VC to map a memory page containing a part of the malware scanner to a memory page within the memory domain of the VC and in response to a launch of the malware scanner by the guest VM to switch a memory context of the malware scanner from the memory domain of the guest VM to the memory domain of the VC.

According to another aspect a method comprises employing at least one processor of a host system to execute a hypervisor the hypervisor configured to expose a guest virtual machine VM and a virtual container VC wherein exposing the VC includes setting up a memory domain of the VC the memory domain of the VC isolated from a memory domain of the guest VM. The method further comprises in response to exposing the guest VM employing the at least one processor to configure the guest VM to execute a malware scanner on a virtualized processor of the guest VM the malware scanner configured to scan a target object for malware. The method further comprises in response to setting up the memory domain of the VC employing the at least one processor to map a memory page containing a part of a malware scanner to a memory page within the memory domain of the VC. The method further comprises employing the at least one processor to launch the malware scanner and in response to launching the malware scanner employing the at least one processor to switch a memory context of the malware scanner from the memory domain of the guest VM to the memory domain of the VC.

According to another aspect a non transitory computer readable medium stores instructions which when executed cause a host system comprising at least one processor to execute a hypervisor the hypervisor configured to expose a guest virtual machine VM and a virtual container VC wherein exposing the VC includes setting up a memory domain of the VC the memory domain of the VC isolated from a memory domain of the guest VM. The guest VM is configured to execute a malware scanner on a virtualized processor of the guest VM the malware scanner configured to scan a target object for malware. The hypervisor is further configured in response to setting up the memory domain of the VC to map a memory page containing a part of the malware scanner to a memory page within the memory domain of the VC and in response to a launch of the malware scanner by the guest VM to switch a memory context of the malware scanner from the memory domain of the guest VM to the memory domain of the VC.

According to another aspect a host system comprises at least one processor configured to execute a hypervisor the hypervisor configured to expose a guest virtual machine VM and a virtual container VC wherein exposing the VC includes setting up a memory domain of the VC the memory domain of the VC isolated from a memory domain of the guest VM. The guest VM is configured to launch a malware scanner configured to scan a target object for malware. The hypervisor is further configured in response to setting up the memory domain of the VC to map a memory page containing a part of the malware scanner to a memory page within the memory domain of the VC and in response to a launch of the malware scanner by the guest VM to switch execution of the malware scanner from a virtualized processor of the guest VM to a virtualized processor of the VC. The hypervisor is further configured in response to switching execution of the malware scanner to the virtualized processor of the VC to intercept a hardware interrupt configured to suspend the execution of the malware scanner and in response to redirect the hardware interrupt to the virtualized processor of the guest VM.

In the following description it is understood that all recited connections between structures can be direct operative connections or indirect operative connections through intermediary structures. A set of elements includes one or more elements. Any recitation of an element is understood to refer to at least one element. A plurality of elements includes at least two elements. Unless otherwise required any described method steps need not be necessarily performed in a particular illustrated order. A first element e.g. data derived from a second element encompasses a first element equal to the second element as well as a first element generated by processing the second element and optionally other data. Making a determination or decision according to a parameter encompasses making the determination or decision according to the parameter and optionally according to other data. Unless otherwise specified an indicator of some quantity data may be the quantity data itself or an indicator different from the quantity data itself. Unless otherwise specified a page represents the smallest unit of virtualized memory individually mapped to a physical memory of a host computer system. Computer readable media encompass non transitory media such as magnetic optic and semiconductor storage media e.g. hard drives optical disks flash memory DRAM as well as communications links such as conductive cables and fiber optic links. According to some embodiments the present invention provides inter alia computer systems comprising hardware e.g. one or more processors programmed to perform the methods described herein as well as computer readable media encoding instructions to perform the methods described herein.

The following description illustrates embodiments of the invention by way of example and not necessarily by way of limitation.

Virtual machine comprises a software emulation of an actual physical computing device e.g. host system the emulation enabling VM to execute an operating system and or other software applications. In some embodiments hypervisor also known in the art as a virtual machine monitor VMM comprises software which creates the virtual environment of VM an operation also known in the art of virtualization as exposing VM . To expose a virtual machine such as VM software components of hypervisor may create a plurality of virtual devices each virtual device emulating the operation and functionality of a physical hardware device of host system such as a processor or a memory controller among others. Hypervisor may further assign a set of virtual devices to each exposed VM allowing the respective VM to operate as if it possessed a more or less complete set of hardware devices. Examples of popular hypervisors include the VMware ESXi from VMware Inc. and the open source Xen hypervisor among others.

In some embodiments processor comprises a physical device e.g. multi core integrated circuit configured to execute computational and or logical operations with a set of signals and or data. In some embodiments such logical operations are delivered to processor in the form of a sequence of processor instructions e.g. machine code or other type of software . Memory unit may comprise volatile computer readable media e.g. RAM storing data signals accessed or generated by processor in the course of carrying out instructions. Input devices may include computer keyboards mice and microphones among others including the respective hardware interfaces and or adapters allowing a user to introduce data and or instructions into host system . Output devices may include display devices such as monitors and speakers among others as well as hardware interfaces adapters such as graphic cards allowing host system to communicate data to a user. In some embodiments input devices and output devices may share a common piece of hardware as in the case of touch screen devices. Storage devices include computer readable media enabling the non volatile storage reading and writing of software instructions and or data. Exemplary storage devices include magnetic and optical disks and flash memory devices as well as removable media such as CD and or DVD disks and drives. Network adapter s enable host system to connect to a communication network and or to other devices computer systems.

Controller hub represents the plurality of system peripheral and or chipset buses and or all other circuitry enabling the communication between processor and devices and . shows exemplary components of controller hub such as a memory controller an input output I O controller and an interrupt controller . Depending on hardware manufacturer some or all of devices and may be incorporated into a single integrated circuit and or may be integrated with processor . In some embodiments some other devices such as graphics adapters forming part of output devices may be also integrated with processor .

Memory controller may oversee communication between processor and memory unit . In some embodiments for instance using Intel chipsets memory controller may comprise the northbridge. In other embodiments for instance in smartphone hardware platforms designed according to the ARM specification memory controller may comprise a memory management unit MMU among others. I O controller generically represents the circuitry and signal logic components enabling the data flow between processor and peripheral devices such as input output storage and network devices among others. In some embodiments such as a typical computer chipset I O controller includes the southbridge peripheral component interconnect PCI bus and or low pin count LPC bus of a typical computer chipset. Interrupt controller generically represents circuitry and logic configurable to manage interrupt signals transmitted between processor and devices and among others.

In some embodiments guest VM executes a guest operating system OS 54 an anti malware AM application and possibly other applications generically represented by application . Such applications may include word processing image processing media player database calendar personal contact management browser gaming voice communication and data communication applications among others. Guest OS comprises software that provides an interface to the virtualized hardware of client VM and acts as a host for computing applications . Guest OS may comprise any widely available operating system such as Windows MacOS Linux iOS or Android among others.

In some embodiments hypervisor takes control of processor at the most privileged level e.g. VMXroot on Intel platforms supporting virtualization and also known as ring 1 or root mode and creates a hardware virtualization platform presented as client VM to other software executing on host system . In some embodiments the hardware virtualization platform comprises a virtualized processor a virtualized memory unit and a virtualized memory controller among others. Virtualized devices and may comprise software executing in root mode and providing a representation of hardware devices and of host system respectively see e.g. . In some embodiments hypervisor executes in a configuration known in the art as a thin layer hypervisor wherein hypervisor only virtualizes a relatively small subset of hardware devices of host system while allowing guest VM to access other devices directly. For instance in a generic physical device such as an input device graphics adapter or network adapter does not have a virtualized embodiment executing within guest VM but is instead accessed directly by guest OS via e.g. a device driver . Configurations allowing OS to access device without a virtualization layer are sometimes referred to in the art as pass through and may be implemented using for instance VT d technology from Intel .

Most components of guest OS such as OS kernel and device driver execute at lesser processor privilege than hypervisor e.g. in ring 0 on Intel platforms or kernel mode . Exemplary application executes at lesser processor privilege than OS kernel e.g. in ring 3 or user mode .

In some embodiments parts of AM application may execute in user mode while other parts may execute in kernel mode within client VM . Exemplary components executing in user mode may include among others a graphical user interface GUI displaying information such as security alerts to a user of host system and allowing the user to configure a set of options of AM application . Components executing in kernel mode may include among others a driver and an AM filter configured to detect certain actions performed by a target object executing within client VM such as opening a file or editing a registry key. AM application may further include a scan manager configured to exchange data with hypervisor and to oversee malware scanning of target objects. Such overseeing may include among others selecting target objects for scanning intercepting events which trigger malware scanning and launching scanning threads or scanning routines into execution as shown further below.

In some embodiments each virtual container VC represents a pseudo virtual machine set up and managed by hypervisor to conduct malware scanning operations on behalf of anti malware application . In some embodiments virtual containers have only a minimal set of virtualized devices not including a virtualized processor and virtualized peripheral devices such as virtualized input output network adapters. Such a configuration is shown in wherein a VC has a virtualized memory unit and a virtualized memory controller but no virtualized processor. In an alternative embodiment shown in VC explicitly includes a virtualized processor but lacks storage or peripheral devices.

Virtual container further comprises a malware scanner and a target buffer among others. In some embodiments scanner comprises executable code configurable to scan a target object for malware and may implement any malware detection method known in the art. For instance scanner may be configured to determine whether the target object performs a malware indicative action and or to determine whether the target object comprises a malware indicative signature. In some embodiments beside executable code malware scanner may comprise various non executable data enabling malware scanning such as signature databases among others. Malware scanner is mapped to a section of virtualized memory as shown below. Beside executable and non executable data of malware scanner VC further comprises a set of temporary scan data mapped to virtualized memory scan data comprising dynamical data used by a thread executing malware scanner e.g. call stack and heap used by the respective thread memory pages needed to return results and logs to AM application .

In some embodiments target buffer is a virtual object capable of storing a memory image of a target object selected for malware scanning Target buffer is therefore a placeholder for the target object within VC . An exemplary target buffer comprises a section of virtual or virtualized physical memory of VC reserved for the target object. Such memory sections are usually contiguous the reserved memory space being composed of multiple pages with consecutive addresses. In some embodiments target buffer can have a substantial size e.g. a few gigabytes even though target objects selected for malware scanning are typically much smaller. From the perspective of computational speed reserving a large buffer to fit any size of target object may be preferable to dynamically allocating memory for each target object upon malware scanning.

To contrast the configuration illustrated in shows an exemplary software configuration used in conventional anti malware systems not using hardware virtualization. In such conventional systems an operating system directly controls the hardware of the host system and executes at the highest processor privilege level. An AM application including a malware scanner executes on OS typically using a combination of kernel mode and user mode modules. Malware scanner may be configurable to scan a target object for malware. OS typically configures and manages memory so that scanner executes within a memory domain set up and or controlled by OS . In contrast in some embodiments of the present invention each instance of malware scanner executes within a memory domain of a virtual container the respective memory domain set up by hypervisor to be isolated from a memory domain controlled by OS . In some embodiments memory isolation comprises not allowing a software object executing within a VC e.g. VC to access either the memory domain of another VC e.g. VC or the memory domain of guest VM . For instance a software object executing within VC is not allowed to read write or execute contents of a page located within the memory domain of VC or contents of a page located within the memory domain of guest VM . In some embodiments memory isolation further ensures that a software object executing within VC cannot alter the flow of execution of another software object executing within VC or guest VM e.g. cannot starve the other object of execution resources cannot change the order in which instructions of the other object are executed and cannot alter the input or output of the other object . Such memory isolation is enforced from below the operating system i.e. from a level with higher processor privileges than OS .

Loading malware scanner into memory effectively prepares scanner for execution. In some embodiments AM application may instruct OS to mark memory pages containing code and or data of malware scanner as non swappable to ensure that the contents of the respective pages is permanently present in RAM. In response to loading scanner into memory some embodiments of AM application may send a signal to hypervisor the signal indicating that scanner has been loaded into memory. An exemplary signal may comprise an address of a memory page containing executable code of scanner . The address may be used by hypervisor to write protect the respective page as shown below.

In some embodiments a sequence of steps sets up guest VM . Step enables software and data structures representing a set of virtualized devices such as a virtualized processor and virtualized memory controller. In some embodiments in step hypervisor may configure a set of data structures used to manage VM and or its virtual processor s . In host systems having Intel VT enabled processors such data structures are named Virtual Machine Control Structures VMCS while in embodiments using AMD V enabled processors they are known as a Virtual Machine Control Blocks VMCB . Each VMCS VMCB may store data used to describe the state of each virtual processor executing on host system .

A step sets up a memory domain of guest VM . Virtual machines typically operate with a virtualized physical memory i.e. a virtual representation of the actual physical memory of host system . Virtualized physical memory also known as guest physical memory comprises a contiguous space of virtualized addresses specific to each VM executing on host system with parts of said space mapped to sections of physical memory and or of physical storage . In systems supporting virtualization such mapping is known as a second level address translation SLAT and is typically achieved using dedicated data structures used by processor such as extended page tables EPT on Intel platforms or nested page tables NPT on systems having AMD processors. In such systems virtualized physical memory is partitioned in units known in the art as pages a page representing the smallest unit of virtualized physical memory individually mapped to physical memory via mechanisms such as EPT and or NPT i.e. mapping between physical and virtualized physical memory is performed with page granularity. All pages typically have a predetermined size e.g. 4 kilobytes 2 megabytes etc. The partitioning of virtualized physical memory is usually configured by hypervisor . In some embodiments hypervisor also configures the EPT NPT and therefore the mapping between physical memory and virtualized physical memory for each VM executing on host . In some embodiments a pointer to the EPT NPT is stored within a VMCS VMCB structure used to manage a virtual processor of the respective VM.

Following the launch of hypervisor OS is presented with the virtualized memory space configured for VM instead of physical memory space . In some embodiments OS further configures a virtual memory space also termed logical address space and exposes the respective virtual memory space to an application such as applications and or in . In such systems OS configures and maintains a mapping between such virtual memory spaces and the virtualized physical memory of VM for instance using a page table mechanism. In some embodiments virtual memory spaces configured by OS are also partitioned into pages wherein a page represents the smallest unit of virtual memory individually mapped to virtualized physical memory by OS virtual to virtualized physical memory mapping is performed with page granularity .

In some embodiments a memory domain of VM includes a virtualized physical memory space used by VM and or a virtual memory space used by an application executing within VM e.g. spaces and in . The memory domain of VM may be enabled via memory maps comprising virtual to virtualized physical and or virtualized physical to physical address translations such as translations and in . For instance the memory domain of guest VM may be enabled by configuring an EPT NPT structure used to manage VM .

In some embodiments hypervisor sets up its own virtual memory space comprising a representation of physical memory and employs a translation mechanism for instance page tables to map addresses in space into addresses in physical memory . In such an exemplary mapping translates an address of a page into an address of a page in physical memory . Similarly an address of a page in physical memory correspond to an address of a page within virtual memory space of hypervisor .

In a step hypervisor may configure OS and applications such as and to execute within the virtual environment of guest VM . In some embodiments step includes booting OS while revealing to OS a set of virtualized devices instead of the actual physical devices of host system . In other embodiments wherein OS is already booted at the time of execution of step hypervisor may displace OS to guest VM by changing the way OS interacts with the hardware of host system i.e. forcing OS to interface with hardware via virtual devices configured in steps . In step hypervisor may further displace operations of OS to a lower processor privilege level.

In some embodiments a sequence of steps may set up each VC. A step sets up a memory domain for the respective VC isolated from the memory domain of any other VC on host system and from the memory domain of guest VM . Such isolation ensures that each VC is only aware of its own memory space and therefore cannot access a memory space used by another VC or by guest VM . Such isolation may be enforced using memory virtualization techniques. For instance in step hypervisor may create a virtualized memory space comprising a representation of physical memory and may present the respective virtualized memory space to the respective VC.

In a step hypervisor may map malware scanner into the memory domain of each virtual container. In some embodiments mapping scanner into the memory domain of a VC comprises creating a memory image of scanner within the virtual and or virtualized physical memory space s of the respective VC. In the example illustrated in loading malware scanner by AM application loads an image of scanner into physical memory . Exemplary page contains a part of the respective image e.g. executable code or data used by malware scanner . Address translation set up by hypervisor using e.g. an EPT NPT entry maps page to page within virtualized physical memory space used by guest VM . Translation set up by guest OS further maps page to a page within virtual memory space used by AM application .

In some embodiments mapping malware scanner into the memory domain of VC comprises setting up an address translation mapping page to a page within virtualized physical memory space used by VC . In some embodiments step further comprises setting up an address translation mapping page to a page within virtual memory space used by malware scanner when executing inside VC . Address translations and or may be set up for instance by writing an entry indicative of the respective translation into a page table such as the EPT NPT of VC . When more than one VC was set up in step hypervisor may map page to a page located within the virtualized physical memory space of each such VC by writing an entry indicative of the respective address translation into the EPT NPT of the respective VC. Thus each VC will have an instance of malware scanner mapped to its respective memory domain.

Some hardware configurations allow hypervisor to selectively control access to data stored within each page of physical memory e.g. by setting read and write access rights to the respective page. Such rights may be set for instance by modifying an entry of the respective page within the EPT NPT. Hypervisor may thus select which software object may access data stored at the addresses within each page and may indicate which operations are allowed with the respective data e.g. read write etc. An attempt by a software object to perform an operation such as reading data from or writing data to a page to which the object does not have the respective right may trigger a virtual machine exit event e.g. a VMExit event on Intel platforms . In some embodiments virtual machine exit events transfer control of the processor from the VM executing the respective software object to hypervisor thus preventing the unauthorized read write attempt. In other host systems an attempt to access a protected page may generate a hardware exception known in the art as a virtualization exception VE on Intel platforms . Such virtualization exceptions may not generate a virtual machine exit event but instead may intercept the attempt and alert a component executing within the respective VM e.g. AM application .

In some embodiments in a step hypervisor may write protect the memory image of malware scanner loaded by AM application for instance by marking memory pages storing executable code and or data used by scanner as non writable in the EPT NPT used by guest VM . Such protection may prevent unauthorized modifications of scanner for example by malware executing within guest VM . In some embodiments write protecting the memory image of malware scanner comprises setting up a copy on write mechanism wherein any attempt to modify the content of a page storing a part of malware scanner may result in redirecting the attempt to a copy of the respective page. Such configurations may facilitate legitimate modifications of scanner such as software updates without affecting currently executing instances of scanner .

In a step hypervisor may reserve memory for the target buffer within the memory domain of each VC. In some embodiments each target buffer is a placeholder for a target object to be scanned for malware step ensures that enough memory space is set aside for such target objects. In the example of pages and are reserved for target buffers respectively within virtualized physical memory spaces and respectively. In some embodiments step may further comprise setting up address translations mapping virtual pages to virtualized physical pages reserved for buffers e.g. translations in . Such mapping may expedite malware scanning by preparing the placeholder to receive a target object. As shown below address translations such as actually mapping the target object onto a target buffer are only configured upon execution of malware scanner .

Completing the steps illustrated in prepares guest VM and virtual containers for performing anti malware operations. shows an exemplary sequence of steps performed by AM application to actually carry out such anti malware operations according to some embodiments of the present invention. A sequence of steps waits for the occurrence of a scan trigger event. Exemplary scan trigger events include a user s attempting to execute a software object and or to access a disk file on access scanning . Another exemplary scan trigger event is a user s requesting a malware scan of a target object or of a content of a storage device such as a hard drive partition or a flash drive on demand scanning . Another example of a scan trigger event includes a software object performing a possibly malware indicative action such as editing a registry of OS or issuing a system call for instance. Yet another exemplary scan trigger event is a network adapter s receiving an incoming communication packet. Another example of trigger event is loading a HTTP document in a browser. Intercepting such trigger events may be achieved by scan manager using any technique known in the art such as hooking certain OS functions dynamic linked library DLL injection and using various filter drivers e.g. file system minifilters and network traffic filters on Windows platforms among others.

When a scan trigger event has occurred in a step scan manager may identify a target object indicated by the trigger event. In an on demand scanning scenario the target object may be indicated by the user e.g. a disk file . In other scenarios the target object may be the object e.g. application process or file currently being launched or accessed or a network packet currently being received. In some embodiments the target object may reside on a storage device e.g. hard disk or may comprise a content of a set of memory pages.

In a step scan manager may configure malware scanner to scan the target object. Such configuration may include for instance selectively activating a subset of components of scanner according to a type of target object and or instantiating a set of parameters of malware scanner with values determined according to the target object. Next in a step scan manager may launch malware scanner .

Scanner executes within a CPU thread herein referred to as the scanning thread. In one exemplary scenario such as an on demand scanning situation the scanning thread is launched by scan manager in step . Alternatively in some embodiments scan manager manages a pool of dormant pre configured scanning threads and selectively activates one to execute scanner . In another exemplary scenario such as on access scanning the scanning thread is already executing when AM detects the scan trigger event. In one such example a user is attempting to open a Microsoft Word file. The application issues an application programming interface API call to open the respective file. The API call is intercepted by a component of scan manager such as a file system minifilter and is identified as a scan trigger event. In response to intercepting the API call scan manager launches malware scanner to scan the respective file for malware. In this case scanner executes within the CPU thread previously executing Microsoft Word i.e. the already running CPU thread becomes a scanning thread.

In a step hypervisor may select a VC to host the scanning thread from the set of VCs configured in the initialization phase e.g. steps and in . Next a step performs a cleanup of the selected container to erase any data that may remain within the respective VC from previous use. Step may include for instance erasing the content of memory pages allocated for temporary scan data e.g. call stack and heap data from previous operation of scanner . Such cleanup may prevent malware from storing executable code within the respective pages between consecutive executions of malware scanner and therefore prevent the transfer of any persistent data between consecutive scans performed within the same VC.

In a step hypervisor maps the target object to the target buffer of the selected VC. Step may comprise establishing an address translation mapping a memory page containing data of the target object to a virtualized memory page reserved for the target buffer within the memory domain of the selected VC. In the example of page within the memory domain of VC was set up to hold a part of target buffer while physical page holds data of the target object. In step some embodiments may configure an address translation for instance by writing translation into the EPT NPT used by VC . By configuring such address translations step effectively maps the target object into the memory domain of the selected VC.

In a step hypervisor switches the memory context of the scanning thread from the memory domain of guest VM to the memory domain of the selected VC. In some embodiments step comprises assigning a set of page table structures e.g. EPT NPT used by the selected VC to the scanning thread. Re assigning page tables in such a manner causes the scanning thread to execute within the memory context of the selected VC i.e. to perform address translation according to page tables configured for the selected VC instead of according to page tables configured for guest VM . In some embodiments step comprises changing an address of a page table structure e.g. an EPT pointer on Intel platforms known in the art as EPTP within a VM control structure of guest VM to point to a page table structure configured for the selected VC. In another exemplary embodiment scanner may employ a dedicated processor instruction such as VMFUNC on Intel platforms to change the memory context of the scanning thread without a VM exit to hypervisor . In such cases hypervisor pre configures the respective page table structures so that a call to VMFUNC from within guest VM performs the appropriate memory domain switch without further assistance from hypervisor .

A sequence of steps executes malware scanner on the virtual processor of guest VM e.g. device in until the scan finishes or an interrupt is detected. Thread execution may be interrupted by a variety of processor events commonly termed interrupts. Exemplary interrupts include hardware interrupts from peripheral devices network adapters input devices etc. inter processor interrupts IPI and system timer interrupts among others. In conventional computer systems interrupts are serviced by the operating system. In some embodiments of the present invention the scanning thread executes within the context of a virtual container which may lack an interrupt controller and an operating system and as such may be unable to service interrupts. Therefore in some embodiments interrupts are intercepted by hypervisor . When an interrupt occurs in a step hypervisor may switch the memory context of the scanning thread from the memory domain of the selected VC to the memory domain of guest VM . Step may comprise changing an address of a page table e.g. EPT within the VM control structure of guest VM . The memory context switch allows guest OS to service the interrupt.

After servicing an interrupt the operating system typically continues the execution of the interrupted thread. In some embodiments in a step hypervisor intercepts an event indicating a return to execution of the scanning thread. When such an event is intercepted in a step hypervisor switches the memory context of the scanning thread to the memory context of the selected VC and resumes execution of malware scanner step above . To carry out step hypervisor may use any method known in the art for instance hooking an OS function configured to handle hardware interrupts.

When the scanning thread finishes executing in a step hypervisor may communicate a verdict of the scan to AM application for instance by writing an indicator of the verdict to a section of memory shared between hypervisor and guest VM .

Addressing hardware interrupts via the mechanism described above steps in may place a computational burden on host system . In some embodiments malware scanning may be optimized by adjusting the CPU scheduling of the scanning thread to minimize interrupts. For instance a preferred CPU of host system may be pre assigned by hypervisor to handle hardware interrupts from system timers and peripheral devices such as network adapters which may form the majority of interrupts. Meanwhile scanning threads may be preferentially scheduled to execute on other CPUs. Such configurations may reduce the number of interruptions to scanning threads thus accelerating malware scanning.

An alternative embodiment addressing the issues of isolated scanning and interrupt handling comprises a virtual container with a virtualized processor e.g. illustrated as device in . In such embodiments each of guest VM and virtual container operates a distinct non shared virtual CPU. In contrast in the example shown above in relation to virtual processor is shared between guest VM and VC .

A step determines whether malware scanner has finished scanning the target object. When scanner has finished a sequence of step may transmit the scan verdict to guest VM and wake up the scanning thread executing within guest VM . In a sequence of steps hypervisor intercepts and routes a hardware interrupt to the virtualized processor of guest VM thus allowing the respective VC to execute unaware of any hardware interrupts occurring during execution of the scanning thread.

The exemplary systems and methods described above allow protecting a host system such as a computer system or smartphone from malware such as viruses worms and rootkits. In some embodiments of the present invention installing an anti malware application on the host system launches a hypervisor executing at the highest processor privilege level and displaces the operating system to a guest virtual machine. The anti malware application then collaborates with the hypervisor to configure a set of virtual containers so that each virtual container operates with a virtualized memory space isolated from the virtualized memory space of another VC and isolated from the virtualized memory space of the guest virtual machine. Memory isolation is enforced using hardware virtualization techniques such as exposing distinct page tables to each VC and to the guest VM.

In conventional anti malware systems anti malware software typically executes within a memory domain shared with the operating system and with the target objects being scanned for malware. Such configurations may be particularly vulnerable to malware since a successful attack on anti malware software may compromise the operating system of the respective system and therefore jeopardize all other software executing on the respective system. In contrast in some embodiments of the present invention malware scanners execute within the isolated environment of a virtual container so in the eventuality of a successful malware attack on the malware scanners the damage is contained to the respective VC and does not spread to the operating system or other applications.

In some embodiments when a target object is selected for scanning a CPU thread for scanning the target object is launched by the operating system executing within the guest virtual machine. The hypervisor may then map a memory image of the target object to the memory domain of a selected virtual container and switch the memory context of the CPU thread performing malware scanning from the memory domain used by operating system to the memory domain of the selected virtual container. Such memory context switching may include re configuring a pointer to a page table used by the guest virtual machine to point to a page table used by the selected VC for the duration of the malware scan. Thus malware scanning software effectively executes within the memory domain of the VC in isolation from the memory domain used by the operating system.

In some embodiments instead of installing a copy of the malware scanner within each virtual container a memory image of the malware scanner is mapped from the memory domain used by the operating system independently to the memory domain of each VC. Such mapping may employ for instance a copy on write technique to ensure that an instance of the malware scanner mapped to a VC may execute independently of another instance of the malware scanner mapped to another VC. Due to the proliferation of malware malware scanners may need frequent updates typically several times a day. Such a one to many mapping of the malware scanner using copy on write technology may have substantial advantages in software upgrade situations. Instead of upgrading scanners executing within each VC some embodiments may upgrade only the image of the malware scanner held within the memory domain used by the operating system. One to many mapping of the malware scanner may then ensure that all VCs receive the upgraded version of the malware scanner while copy on write technology may ensure that any instance of the malware scanner already executing within a VC at the time of the upgrade will not be corrupted by the upgrade.

In conventional anti malware systems using hardware virtualization technology anti malware software may execute within a separate virtual machine having its own virtualized processor virtualized interrupt controllers and operating system among others. Such configurations may be relatively complex to develop and maintain and may have a substantial memory footprint within the host system. In contrast in some embodiments of the present invention anti malware software executes within a virtual container i.e. a pseudo virtual machine lacking a proper processor interrupt controller and operating system. Such configurations may have substantial development upgrade and portability advantages over conventional systems. In embodiments wherein the virtual container lacks a virtualized processor malware scanner software may execute on the virtual processor of the guest VM but within the memory domain of the virtual container.

Execution of a scanning thread may be interrupted for instance by hardware interrupts from peripheral devices scheduling or inter processor communication among others. In some embodiments wherein the respective virtual container lacks a processor and or interrupt controller the hypervisor is configured to manage interrupts by passing such interrupts on to the operating system executing within the guest virtual machine. For instance when a scanning thread is interrupted the hypervisor may intercept the interrupt and switch the memory context of the executing thread from the memory domain of the respective VC to the memory domain of the guest VM thus allowing the operating system to service the interrupt. When the operating system returns to executing the respective thread the hypervisor may switch the memory context of the thread back to the memory domain of the respective VC.

In an alternative embodiment wherein the VC is configured to have a virtual processor and or interrupt controller malware scanning routines may be executed by the virtualized processor of the respective container and within the memory domain of the respective VC. In such embodiments the hypervisor may be configured to intercept hardware interrupts and to route such interrupts for processing by the virtualized processor of the guest VM.

It will be clear to one skilled in the art that the above embodiments may be altered in many ways without departing from the scope of the invention. Accordingly the scope of the invention should be determined by the following claims and their legal equivalents.

