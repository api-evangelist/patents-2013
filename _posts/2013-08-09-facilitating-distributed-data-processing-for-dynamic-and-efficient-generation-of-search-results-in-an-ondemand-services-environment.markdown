---

title: Facilitating distributed data processing for dynamic and efficient generation of search results in an on-demand services environment
abstract: In accordance with embodiments, there are provided mechanisms and methods for facilitating distributed data processing for dynamic and efficient generation of search results in a multi-tenant environment according to one embodiment. In one embodiment and by way of example, a method includes receiving, at a data processing platform, extracted data occurrences from a database coupled to a server computing device, where each data occurrence may be assigned a classification according to a category. The method may further include mapping values to the data occurrences based on classifications of the data occurrences, mapping prefixes to the data occurrences based on identifying names of the data occurrences, and generating search data based on the mapped values and mapped prefixes, where the search data may represent autosuggestions.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09424336&OS=09424336&RS=09424336
owner: salesforce.com, inc.
number: 09424336
owner_city: San Francisco
owner_country: US
publication_date: 20130809
---
This application claims the benefit of and priority to U.S. Provisional Patent Application No. 61 701 492 entitled Distributed Processing Techniques for Generating AutoSuggest Entries by Matthew Fuchs et at. filed Sep. 14 2012 and the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

One or more implementations relate generally to data management and more specifically to a mechanism for facilitating distributed data processing for dynamic and efficient generation of search results in an on demand services environment.

With increasing amounts of data to search various search techniques are needed to receive up to date and accurate results. For example autosuggest is one such search feature which presents the user with a list of possible completions even before the user inputs the entire term. Although autosuggest is meant to speed up search results with increasingly large databases to search the background database processing may take hours or even days to update which in turn delays the delivery of up to date and or accurate results.

The subject matter disclosed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user s own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request. The secure and efficient retrieval of accurate information and subsequent delivery of this information to the user system has been and continues to be a goal of administrators of database systems. Unfortunately conventional database approaches are associated with various limitations.

In accordance with embodiments there are provided mechanisms and methods for facilitating distributed data processing for dynamic and efficient generation of search results in a multi tenant environment according to one embodiment. In one embodiment and by way of example a method includes receiving at a data processing platform extracted data occurrences from a database coupled to a server computing device where each data occurrence may be assigned a classification according to a category. The method may further include mapping values to the data occurrences based on classifications of the data occurrences mapping prefixes to the data occurrences based on identifying names of the data occurrences and generating search data based on the mapped values and mapped prefixes where the search data may represent autosuggestions.

While the present invention is described with reference to an embodiment in which techniques for facilitating management of data in an on demand services environment are implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present invention is not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. Inventions encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments of the invention may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments of the invention do not necessarily address any of these deficiencies. In other words different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Methods and systems are provided for facilitating distributed data processing for dynamic and efficient generation of search results in a multi tenant environment according to one embodiment. In one embodiment and by way of example a method includes receiving at a data processing platform extracted data occurrences from a database coupled to a server computing device where each data occurrence may be assigned a classification according to a category. The method may further include mapping values to the data occurrences based on classifications of the data occurrences mapping prefixes to the data occurrences based on identifying names of the data occurrences and generating search data based on the mapped values and mapped prefixes where the search data may represent autosuggestions.

Embodiments provide for dynamic and efficient generation and display of search results in an on demand environment. For example and in one embodiment distributed processing may be performed to significantly reduce the time it takes to perform the background processing and updates of database contents so that up to date and accurate results may be provided in response to every search query such as an autosuggest query. It is contemplated that embodiments may be applied to other forms of searching techniques however autosuggest is referenced throughout this document as an example for brevity clarity and ease of understanding.

Autosuggest is a feature of a search field that treats the current input as a prefix and presents the user with a list of possible completions by pre computing a mapping from prefixes to a list of values to be presented. For example if a user has entered jo into a field the system may display names such as john smith jose martinez joan allen etc. as possible completions allowing the user to either continue typing or choose one of the results and discontinue typing the full name. For example Data.com by Salesforce.com offers autosuggest to allow searching for most likely individual names company names and or titles for each prefix that is entered by a user. The distributed processing in one embodiment provides for a faster background processing e.g. mapping sorting updates etc. of the contents of databases associated with a database e.g. Data.com to offer fast up to date and accurate requests to all user search queries such as autosuggest queries.

Embodiments provide for employing one or more data processing server computer machines platforms e.g. Apache Hadoop etc. to distill and distribute data processing to significantly reduce the runtime for background data processing from several days to only hours or from several hours to only minutes and so forth. This integration of disparate data processing architectures platforms results in a distributed background processing and management of resources where for example a database platform e.g. Force.com by Salesforce.com etc. may manage contents of a database e.g. Data.com and receive user queries etc. while a data processing platform such as Hadoop may perform the background processing of large datasets associated with the database for facilitating the return and display of fast and up to date results to the user queries.

As used herein a term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers. As used herein the term query plan refers to a set of steps used to access information in a database system.

Embodiments are described with reference to an embodiment in which techniques for facilitating management of data in an on demand services environment are implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants embodiments are not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Computing device may include server computers e.g. cloud server computers etc. desktop computers cluster based computers set top boxes e.g. Internet based cable television set top boxes etc. and the like. Computing device may also include smaller computers such as mobile computing devices such as cellular phones including smartphones e.g. iPhone by Apple BlackBerry by Research in Motion now known and trading as BlackBerry etc. handheld computing devices personal digital assistants PDAs tablet computers e.g. iPad by Apple Galaxy by Samsung etc. laptop computers e.g. notebooks netbooks ultrabooks etc. e readers e.g. Kindle by Amazon.com Nook by Barnes and Nobles etc. Internet based cable setup boxes Global Positioning System GPS based navigation systems etc.

Computing device includes an operating system OS serving as an interface between any hardware or physical resources of the computing device and a user. Computing device further includes one or more processors memory devices network devices drivers or the like as well as input output I O sources such as touchscreens touch panels touch pads virtual or regular keyboards virtual or regular mice etc. It is to be noted that terms like node computing node server server device cloud computer cloud server cloud server computer machine host machine device computing device computer computing system multi tenant on demand data system and the like may be used interchangeably throughout this document. It is to be further noted that terms like application software application program software program package and software package may be used interchangeably throughout this document and further terms like job input request and message may be used interchangeably throughout this document. Additionally terms like data and content may be used interchangeably throughout this document.

It is contemplated that any references to data processing platforms e.g. Hadoop Postgres HBase Apache Oozie OpenTSDB Oracle SAP etc. other software servers databases and data processing platforms e.g. Data.com Force.com Tableau Gephi etc. application programming interfaces APIs e.g. Java API Representational State Transfer REST API Oozie API etc. data metadata e.g. individual names company names titles Customer Relationship Model CRM data metadata etc. computing devices e.g. server computers desktop computers mobile computers such as tablet computers smartphones etc. software development languages applications and or development tools or kits e.g. Apache Pig Java The R Project Force.com Force.com Apex code JavaScript jQuery Developerforce Visualforce Service Cloud Console Integration Toolkit Platform on a Service PaaS Chatter Groups Sprint Planner MS Project etc. etc. are made as examples for brevity clarity and ease of understanding and that embodiments are not limited to any such references.

The term user may refer to a system user such as but not limited to a software application developer a system administrator a database administrator an information technology professional a program manager product manager etc. The term user may also refer to an end user such as but not limited to an organization e.g. a business a company a corporation a non profit entity an institution an agency etc. serving as a customer or client of the provider e.g. Salesforce.com of distributed processing mechanism or the organization s representative such as a salesperson a sales manager a product manager an accountant a director an owner a president a computer programmer an information technology IT representative etc. It is to be noted that terms like user customer organization tenant business company etc. may be used interchangeably throughout this document.

Distributed processing mechanism may be in communication with one or more local databases database platforms such as multi tenant database e.g. Force.com etc. one or more remote data processing servers or platforms such as data processing server e.g. Hadoop etc. having data processing engine over one or more networks such as network . In one embodiment data processing engine may include one or more components such as mapping counting logic shuffling sorting logic reducing indexing logic and evaluation selection logic . In some embodiments distribution facilitation logic may be used to distribute various operations processes of the two sets or steps also interchangeably referred to as processes operations sets of operations etc. of the map reduce process to data processing engine such that mapping counting logic shuffling sorting logic reducing indexing logic and evaluation selection logic are facilitated to perform the various operations processes of both sets of the map reduce process. Further distributed processing mechanism may be in communication with one or more computing devices such as client computing device having one or more software applications or tools such as software application e.g. website etc. providing one or more interfaces such as user interface over network . In one embodiment local database may serve as an intermediary layer or tier between for example the user level equipment such as client computing device and a cluster of remote data processing servers such as data processing server .

Throughout this document terms like logic component module and engine may be interchangeably referenced and include by way of example software hardware and or any combination of software and hardware such as firmware. Furthermore any use of a particular brand word or term such as distributed processing map reduce MapReduce Data.com Hadoop Java CRM etc. should not be read to limit embodiments to software and or devices that carry that label in products or in literature external to this document.

In one embodiment monitoring and synchronization logic of distributed processing engine may continuously monitor contents of a database application such as Data.com to keep track of any changes e.g. additions deletions modifications etc. to the existing contents at database . For example if a new contact is added or an existing contact is modified in Data.com this information may be tracked and continued to be monitored by monitoring and synchronization logic . Further given that in some embodiments an entire cluster or even clusters of data processing servers such as processing server may be employed and used for distributed processing of data monitoring and synchronization logic may also be used to ensure synchronization of contents e.g. indices prefixes contact details etc. processes processing stages sets of operations etc. between all data processing servers in the cluster before after and during various stages of distributed processing.

In one embodiment extraction logic may extract data files or occurrences from multi tenant database for processing. For example in case of Data.com data files relating to individual contact names such as any combination of an individual s first name middle initial name last name prefix suffix etc. such as John T. Smith Dr. Susan Best Imran Khan Esq. etc. company names e.g. Apple Corp. ABC Plumbing etc. contact titles e.g. chief accountant sales manager president receptionist etc. etc. may be extracted for processing. It is contemplated that extraction features are not limited to a particular set of details and may be altered to include other details e.g. contact s phone number street address etc. and similarly certain details may be excluded. In one embodiment various processes of distributed processing engine may be facilitated or outsourced by distribution facilitation logic to be performed by various components of data processing engine at data processing server where the results of the processing may then be cached back at multi tenant database such that various processes of search engine may then be facilitated to obtain search data or results for the benefit of the user.

Briefly and in one embodiment the extracted data occurrences may be moved to a file system at data processing engine where index files may be created and moved back to a local file system at database where they may be cached as search data such as autosuggestions. More specifically continuing with the example of autosuggestion being the search technique Data.com providing the database contents and Hadoop serving as data processing engine a map reduce technique for distributed processing may be employed. For example a MapReducer program for Hadoop may be deployed while the extracted files are uploaded to the Hadoop data file system via an API such as Java API. After the MapReducer job is completed the output files may be merged into three files such as contact name contact title and company name. Then this set of three files may be moved back to database with a cache loader to cache the data for subsequent autosuggestion queries where the cache loader may be a multi threaded program that is tunable and scalable. Alternatively the output files may be left in the deployer s home directory while a softlink to these files may be created.

In one embodiment the various processes facilitated by distribution processing engine may be collectively referred to as the map reduce process and the term MapReducer refers to this map reduce process. For example in the map phase of the map reduce process each data occurrence or item is processed and a number of data occurrences are returned as key value pairs. This is followed by sorting in which the output of the map process is sorted by its associated key or index. The reduce phase of the map reduce process is then executed where all values having the same key are processed together and a common output is achieved. It is contemplated that any number of map reduce processes may be running on different data processing servers such as data processing server in the cluster and thus the various processes and their outputs may be synchronized via monitoring and synchronization logic to ensure the same and accurate result such as all values with a single key may result in the same recued process. However as aforementioned terms like MapReducer or map reduce should not be read to limit embodiments to software and or devices that carry that label in products or in literature external to this document.

Since Data.com based contents are sorted by company name contact name and contact title examples of extracted data files and formats may include 1 company name xxx yyy.csv and 2 contact xxx yyy.csv etc. Similarly examples of output index files and formats may include 1 company suggestions.txt 

Referring back to distributed processing engine the first set of operations of the map reduce process is performed by having distribution facilitation logic facilitate mapping counting logic at data processing engine to process the extracted data by determining a count for all values for which prefixes are computed and assigned and as mentioned previously in the map phase of the map reduce process mapping counting logic ensures that each value is read. Shuffling sorting logic may then sort or shuffle the values by their corresponding keys. Continuing with the Data.com example if for example a value is a contact name or a contact title the input value itself such as the contact name or the contact title may be regarded as the key and the integer 1 may be its assigned as its value. Similarly for companies the company name may be regarded at the key while the number of contacts associated with that company may be regarded as its value.

Once the sorting is completed the reduce phase is trigged where each key e.g. contact name contact title and company name etc. corresponding to a value such as 1 for contact names and contact titles and a single value e.g. number of contacts for companies is associated with an appropriate weight by reducing indexing logic . For example summing up the numbers associated with the values may provide a level of cardinality or certain importance to such values which when at database may then be used for performing various tasks such as final weighing sorting reduction purposes in response to user queries etc.

Now in one embodiment the map reduce process continues with its second set of operations. As with the first set the second set of operations of the map reduce process may be performed by mapping counting logic shuffling sorting logic and reducing indexing logic of data processing engine . In one embodiment reducing indexing logic continues with generating an autosuggest index that can then be used for responding to queries. The second set continues with mapping counting logic performing the next operation such as for example each entry may be broken down into a prefix and an item emitted for each prefix with the prefix as part of the key and the original input e.g. having a full string type and cardinality as the value. For example an autosuggest query for IBM may be broken down via mapping counting logic into prefixes I IB and IBM which are regarded as keys. Further let us suppose in Data.com stored at database there are 10 000 contacts associated with IBM which are then regarded as value. Since IBM is a company a letter C for company may be added to the value e.g. the value part of the key value pair to distinguish various search items such as company names for individual names title etc. so the input for IBM may be translated into C IBM 10000 and mapping counting logic may then provide an output of multiple entries as follows I C IBM 10000 IB C IBM 10000 and IBM C IBM 10000 .

Having sorted the entries via shuffling sorting logic all the entries with the same prefix come together such that they can be reduced to a single value with the right of entries to be processed by reducing indexing logic . In one embodiment the output is then received at reducing indexing logic for reduction and indexing of its entries. For example reducing indexing logic may cull a number of entries based on one or more criteria such as the likelihood of the name being the one the user is seeking the number of contacts associated with the company etc. and provides another output e.g. a reduced number of entries that is then processed by evaluation selection logic . Continuing with the IBM example for the first option of I any number of possible answer may be retrieved such as C IBM 10000 C Intel 8000 P Isaac Byron 85 T Interpreter 1000 C I Behavior 50 etc. where P stands for person or individual contact and T stands title. In this case the results are mixed having included companies contacts and titles etc. but the user may have the option of viewing or requesting a single result category such company results or contact results or title results by simply clicking on the appropriate tab via user interface . Similarly a revised set of results of companies contacts titles may be retrieved when the prefix progresses from I to IB and then on to IBM but each result may include IBM for having all three letter of the prefix. For example the final result of companies in response to the autosuggest query of IBM may top the rows with IBM or International Business Machines Corporation with its 10 000 contacts and other columns having other information such as city name state name country name etc. relating to the company such as IBM. This first row listing of IBM may be followed by any number of rows having other near matches such as IBM Employees Federal Credit Union with 100 contacts Alliance IBM with 50 contacts Institute of Biomedical Sciences with 8 contacts and so forth.

The output produced by reducing indexing logic is then received at evaluation selection logic where it is further evaluated in light of any predetermined default criteria such as limiting the results to only 5 companies or 10 contacts etc. by sorting the companies by the number of corresponding contacts sorting the titles by relevance sorting the contacts in alphabetical order etc. In one embodiment some or all of the default criteria may be altered by the user requesting their own criteria e.g. list 50 company names in alphabetical order etc. which may then be considered and processed by result generation logic in real time in response to a live user request.

Upon concluding the second set of operations of the map reduce process at distributed processing engine the output data may be cached at database from where it can be retrieved to respond to various user queries. For example an autosuggest user query may be placed by a user via user interface of software application at computing device and received at reception logic of search engine which may then be forwarded on to results generation logic to retrieve the relevant data from database in response to the user query. In one embodiment results generation logic may update the retrieved data in light of the default and or any user preferred criteria and communicates the updated search data to presentation logic . Presentation logic places the result in a final presentable form and facilitates communication compatibility logic to communicate the final results to computing device over network where these results may then be displayed at a display device via user interface .

Communication compatibility logic may facilitate the ability to dynamically communicate and stay configured with any number and type of software application developing tools models data processing servers database platforms and architectures programming languages and their corresponding platforms etc. Communication compatibility logic further facilitates the ability to dynamically communicate and stay configured with various computing devices e.g. server computing device mobile computing devices such as smartphones tablet computers laptop etc. networks e.g. cloud network intranet the Internet proximity network such as Bluetooth WiFi etc. websites e.g. social networking websites such as Facebook LinkedIn Google Twitter etc. and the like while ensuring compatibility with changing technologies parameters protocols standards etc.

It is contemplated that any number and type of components may be added to and or removed from distributed processing mechanism to facilitate various embodiments including adding removing and or enhancing certain features. For brevity clarity ease of understanding many of the standard and or known components such as those of a computing device are not shown or discussed here. It is contemplated that embodiments are not limited to any particular technology topology system architecture and or standard and are dynamic enough to adopt and adapt to any future changes.

Transaction sequence begins at block with extraction of data from a local database for data processing. At block each data occurrence from the data is assigned a number representing its value such as a contract name or a title name may be assigned number 1 while a company may be assigned a number equivalent to the number of contacts associated with the company. At block these values are then sorted such as in ascending or descending order. At block all data occurrences are summed up according to their numbers for reduction purposes. At block prefixes of the data occurrences are generated such as I IB and IBM for IBM so that a number of responses may be retrieved and generated for each prefix such as I IB and IBM when an autosuggestion query is submitted by a user. At block another sorting is performed and this sorting is performed based on the prefixes in any particular order such as in alphabetical order etc. At block the most common outcome based on the prefixes is selected such as IBM may be returned for the user submitting an autosuggestion query of I B M such as I followed by IB followed by IBM. Transaction sequence ends at block .

Method begins at block with monitoring of data at a local database associated with a server computing device. At block data occurrences are extracted from the data at the database. At block the extracted data occurrences are transferred over to a remote data platform including a data processing server having a data processing engine for performing distributed data processing. At block distributed data processing is performed at the data processing sever and as a result index files serving as search data are created. At block the index files are cached back at the local database. At block index files are facilitated as autosuggestions at a client computing device in response to autosuggestion based queries placed by a user at the client computing device.

The exemplary computer system includes a processor a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. static memory such as flash memory static random access memory SRAM volatile but high data rate RAM etc. and a secondary memory e.g. a persistent storage device including hard disk drives and persistent multi tenant data base implementations which communicate with each other via a bus . Main memory includes emitted execution data e.g. data emitted by a logging framework and one or more trace preferences which operate in conjunction with processing logic and processor to perform the methodologies discussed herein.

Processor represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processor may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. Processor may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. Processor is configured to execute the processing logic for performing the operations and functionality of thread resource management mechanism as described with reference to and other figures discussed herein.

The computer system may further include a network interface card . The computer system also may include a user interface such as a video display unit a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. an integrated speaker . The computer system may further include peripheral device e.g. wireless or wired communication devices memory devices storage devices audio processing devices video processing devices etc. The computer system may further include a Hardware based API logging framework capable of executing incoming requests for services and emitting execution data responsive to the fulfillment of such incoming requests.

The secondary memory may include a machine readable storage medium or more specifically a machine accessible storage medium on which is stored one or more sets of instructions e.g. software embodying any one or more of the methodologies or functions of thread resource management mechanism as described with reference to and other figures described herein. The software may also reside completely or at least partially within the main memory and or within the processor during execution thereof by the computer system the main memory and the processor also constituting machine readable storage media. The software may further be transmitted or received over a network via the network interface card . The machine readable storage medium may include transitory or non transitory machine readable storage media.

Portions of various embodiments may be provided as a computer program product which may include a computer readable medium having stored thereon computer program instructions which may be used to program a computer or other electronic devices to perform a process according to the embodiments. The machine readable medium may include but is not limited to floppy diskettes optical disks compact disk read only memory CD ROM and magneto optical disks ROM RAM erasable programmable read only memory EPROM electrically EPROM EEPROM magnet or optical cards flash memory or other type of media machine readable medium suitable for storing electronic instructions.

The techniques shown in the figures can be implemented using code and data stored and executed on one or more electronic devices e.g. an end station a network element . Such electronic devices store and communicate internally and or with other electronic devices over a network code and data using computer readable media such as non transitory computer readable storage media e.g. magnetic disks optical disks random access memory read only memory flash memory devices phase change memory and transitory computer readable transmission media e.g. electrical optical acoustical or other form or propagated signals such as carrier waves infrared signals digital signals . In addition such electronic devices typically include a set of one or more processors coupled to one or more other components such as one or more storage devices non transitory machine readable storage media user input output devices e.g. a keyboard a touchscreen and or a display and network connections. The coupling or the set of processors and other components is typically through one or more busses and bridges also termed as bus controllers . Thus the storage device of a given electronic device typically stores code and or data for execution on the set of one or more processors of that electronic device. Of course one or more parts of an embodiment may be implemented using different combinations of software firmware and or hardware.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in herein and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand or the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or mom database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval or information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems of or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . User system further includes Mobile OS e.g. iOS by Apple Android WebOS by Palm etc. . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Core processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. 

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user for example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may decoded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned U.S. Pat. No. 7 730 478 entitled Method and System for Allowing Access to Developed Applicants via a Multi Tenant Database On Demand Database Service issued Jun. 1 2010 to Craig Weissman which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description or objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create said store custom objects or they may be allowed to customize standard entitles or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

Any of the above embodiments may be used alone or together with one another in any combination. Embodiments encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments do not necessarily address any of these deficiencies. In other words different embodiments may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

While one or more implementations have been described by way of example and in terms of the specific embodiments it is to be understood that one or more implementations are not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements. It is to be understood that the above description is intended to be illustrative and not restrictive.

