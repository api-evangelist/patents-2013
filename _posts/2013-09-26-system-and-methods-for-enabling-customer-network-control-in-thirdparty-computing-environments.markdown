---

title: System and methods for enabling customer network control in third-party computing environments
abstract: The present invention relates to a system and methods for enabling a user control in third-party computing environments or cloud computing via a virtual private network created by a control module, which contains parameters defined by the user. The system and methods are used to create a fault tolerant virtual private network that allows user control over addressing, security encryption, routing, and the enablement of multicast protocols, regardless of the prohibition set by the third-party computing environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09172615&OS=09172615&RS=09172615
owner: Cohesive Flexible Technologies Corporation
number: 09172615
owner_city: Chicago
owner_country: US
publication_date: 20130926
---
This application claims the benefit of U.S. Provisional Patent Application Ser. No. 61 107 274 filed Oct. 21 2008 entitled Cloud VPN Virtual Private Network For Securing Virtual Assets in Cloud Computing Environments Across Cloud Computing Environments and Integrating to Private Enterprise Infrastructure and 61 108 972 filed Oct. 28 2008 entitled Cloud Multicast Multicast Network Protocols Enabled and Supported in Third Party Controlled Cloud Computing Utility Computing and Other Non Multicast Multicast Disabled Network Environments.

The present invention relates to a system and methods for enabling customer network control in a third party computing environment. More specifically the present invention relates to a system and methods for encapsulating customer devices in a cloud computing environment with a customer controlled overlay network.

The present invention comprises one or more virtual networks within a cloud which overlay an existing cloud network or networks. By creating a series of connections redundant routes between a customer s devices and nodes can be established resulting in a network that can continue to route traffic to its destination even when one or potentially more of the connections fail. Further multiple virtual networks can exist simultaneously without the risk that their internal settings will conflict and the multiple virtual networks can be connected together to form a single larger network. These connections can be made even where the virtual networks are on different third party clouds or a private cloud. Theses connections can also integrate private infrastructure owned controlled or used by the customer.

These virtual networks are created and controlled by a virtual network manager or cloud virtual private network VPN server which can be made up of one or more modules such as control interface modules tunnel modules routing modules private infrastructure integrator modules synchronization modules mapping modules queue modules protocol transmitter modules and topology interpreter modules among others.

Computing systems have become a critical component for success for nearly all businesses. In order to equip themselves with the needed computing resources many businesses have deployed their own increasingly large and complex computing systems. However these deployments require large upfront expenditures on computing infrastructure such as physical computer servers physical networks and physical storage as well as virtual servers virtual networks and virtual storage. Additionally these deployments require continued expenditures on maintenance of the infrastructure.

Allocating resources for these computing expenditures becomes more vexing to businesses by the fact that these expenditures are often unpredictable. Expenditures on computing infrastructure often fail to deliver the promised performance. Furthermore even when the promised performance is realized the estimated demand for computing resources may have been inaccurate.

Where the demand was underestimated outages and related expenses are likely to occur. And the business must quickly make another investment in computing infrastructure in order to stop the outages. On the other hand where the demand was overestimated the business has made a large investment in rapidly depreciating infrastructure that is being unused or underutilized. The problem with estimating demand is further complicated by the reality that demand often fluctuates widely and in certain cases with little predictability.

Cloud computing which is also known as utility computing or managed virtual servers is a method for providing computing resources to customers that attempts to reduce or eliminate many of the costs associated with traditional deployments of computing systems. In cloud computing the computing infrastructure is generally provided by a third party provider although in certain instances the third party provider can be the customer. The customer uses the provider s computing infrastructure in lieu of or in addition to their own.

Unlike systems where the customer owns the computing infrastructure and must make large upfront expenditures cloud computing is usually billed on a subscription or pay as you go basis. This model allows cloud computing customers to buy computing resources only when they need them eliminating many of the earlier discussed problems with estimating the demand and performance of a system. Further the infrastructure is generally controlled and managed by the provider. As a result the customer need not have the same level of in house expertise that would otherwise be required if they were controlling and managing the infrastructure.

As an example a business owner may want to analyze his or her sales transactions over the past year in order to find patterns and associations between products. For instance it may be the case that when the business owner sells product A they also tend to sell product B. Software exists and is readily available that can find such a pattern which can then be leveraged to the advantage of the business owner. However this type of data mining can be processor intensive and may take too long using the processing power available in the business owner s infrastructure. Further the expense and complexity of deploying a more powerful private infrastructure will likely exceed the benefit realizes by the business owner. Cloud computing allows the business owner to upload his or her sales records and data mining software onto a third computing infrastructure such as the Amazon EC2 cloud. By using the cloud the business owner has access to computing power well beyond what is available on his or her private infrastructure and he or she only pays for the computing resources and that are actually used.

Despite the advantages to cloud computing significant barriers to its adoption exist for many would be customers. Because the infrastructure is generally controlled and managed by the provider the customer is usually left with limited control and various security issues. Typically a customer s control may be limited to starting stopping and booting the customer s virtual servers and control of some local area network or virtual local area network security parameters with respect to network port ingress and egress. Consequently the customer is restricted to the protocols supported by the cloud key network and topology parameters for example addressing encryption routing and enabling multicast protocols are thus beyond the customer s control. As a result the customer s software may not work in a cloud computing environment without modification if at all.

For example a software application that expects to find its database server at IP address 10.0.0.1 will not function properly if the cloud assigns a different IP address to the database server. If the customer cannot change the IP address that the cloud assigns the customer must rewrite and or reconfigure the software application to look for the database server at the cloud assigned IP address. In many instances the costs of modifying the application to run in the cloud will outweigh the benefits of employing cloud computing or at a minimum the costs will reduce the net benefits.

This lack of control poses a further barrier for would be customers who wish to move their applications to a cloud computing environment. Specifically the customer may lose control of the security of their data as it moves around the cloud computing environment. This poses a significant problem to anyone wanting to place confidential or sensitive data into a cloud computing environment.

For all the above reasons there is a need for a system that can both allow customers to run their applications in the cloud without modification to the application and to manage the security of their data in the cloud. The present invention satisfies these needs.

The present invention is a system and methods for enabling customer network control over key network parameters in third party computing environments even in environments where the third party controls most if not all of the physical infrastructure and predominantly most if not all of the virtual infrastructure. A cloud computing infrastructure cloud is one type of such a third party infrastructure.

The present invention comprises one or more virtual networks which encapsulate customer devices and nodes usually virtual within a cloud. These virtual networks are formed through one or more VPN connections which overlay the existing cloud network. By creating a series of VPN connections redundant routes between the customer s devices and nodes can be established resulting in a fault tolerant network which can continue to route traffic to its destination even when one or potentially more of the VPN connections have failed.

Because devices and nodes are encapsulated within a virtual network the creation of multiple virtual networks can exist simultaneously without the risk that their internal settings will conflict. Further the multiple virtual networks can be connected together to form a single larger network. Such connections can be made even where the virtual networks are on different third party clouds or a private cloud. Additionally the virtual networks can connect to the customers or other existing non cloud computing infrastructure.

Creation of the virtual network is carried out by a virtual network manager or cloud VPN server. The virtual network manager comprises a series of modules which can include but are not limited to a control interface module topology interpreter module tunnel module private infrastructure integrator module routing module synchronization module mapping module queue module and protocol transmitter module.

Each module serves a unique function specifically the control interface module enables the customer to get and set various parameters which define the behavior of the virtual network. The control interface module can take a various forms for example a user interface UI or an application programming interface API . The topology interpreter module ensures that a topology map is present on a device or node. And the tunnel module ensures a topology keyset exists for the device or node. The private infrastructure integrator module allows a connection to be established between the virtual network in the cloud and the customer s private infrastructure. The routing module gets the dynamic routing protocol configuration files generated by the topology interpreter installs them and rates traffic. The synchronization module synchronizes keys and certificates and allows servers to share needed information. The mapping module maps static IP addresses to a set of credentials.

The protocol transmitter module comprises a protocol sniffer and a protocol re transmitter. The protocol sniffer intercepts traffic as it moves over the network which is a physical network in the preferred embodiment and then determines whether the traffic should be forwarded to the queue module for processing by the protocol re transmitter. The protocol transmitter in turn accepts traffic placed in the queue module by the protocol sniffer and retransmits it ready for distribution.

An object of the present invention is to provide a VPN configured for use as a cloud VPN controlled by a customer within a single third party controlled computing infrastructure. The control including but not being limited to encryption of network communication addressing and routing between nodes in the network.

Another object of the present invention is to provide a VPN configured for use as a cloud VPN controlled by a customer across multiple third party controlled infrastructure. The control including but not being limited to encryption of network communication addressing and routing between nodes in the network.

Another object of the present invention is to provide a VPN controlled by the customer across one or multiple third party controlled networks and computing environments integrated to one or more instances of private infrastructure owned controlled or used by the customer. The control including but not being limited to encryption of network communication addressing and routing between nodes in the network.

Another object of the present invention is to provide failover capability in the VPN such that the failure of one or potentially more Cloud VPN servers does not interrupt the function of the VPN or reduce the control afforded to the customer.

Another object of the preset invention is to provide for the use of protocols that the third party infrastructure has explicitly disabled disallowed or attempted to block.

Another object of the preset invention is to provide for the use of software services that require and or depend on multicast protocols in third party controlled infrastructures optionally integrated to one or more instance of private infrastructure owned controlled or used by the customer. This objective being met even where the third party infrastructure has explicitly disabled disallowed or attempted to block these multicast enabled software services.

The present invention and its attributes and advantages will be further understood and appreciated with reference to the detailed description below of presently contemplated embodiments taken in conjunction with the accompanying drawings and the claims.

A preferred embodiment of the present invention provides a user or customer network control over key network parameters in a cloud computing environment a cloud even in environments where the cloud provider controls most if not all of the physical infrastructure and predominantly most if not all of the virtual infrastructure.

In general the present invention relates to methods and systems in which one or more virtual networks overlay an existing cloud network or networks. Using a series of connections redundant routes between customer s devices and nodes can be established resulting in a network that can continue to route traffic to its destination even when one or more of the connections fail. This configuration allows multiple virtual networks to exist simultaneously without the risk that their internal settings or addresses conflict with the ability of multiple virtual networks to be connected together to form a single larger network even when the virtual networks are on different third party clouds or a private cloud.

As described in detail below these virtual networks are created and controlled by a virtual network manager or cloud VPN server. This manager or server can be made up of a number of modules that operate together to accomplish the system and methods of the present invention. Included in the system is one or more of the following modules control interface modules topology interpreter modules tunnel modules private infrastructure integrator modules routing modules synchronization modules mapping modules protocol transmitter modules and queue modules among others.

The third party cloud infrastructure can include similar network devices and nodes that are found in the private infrastructure . However unlike the private infrastructure the third party cloud infrastructure is controlled principally by the third party. Consequently key parameters such as addresses protocol topology and security are beyond the control of the customer. Even where the deployment is onto a cloud owned by the customer control issues may exist. For example administration of the cloud may be handled by persons independent of those carrying out the deployment. Thus persons doing the deployment may have no more control over the cloud environment than they would if the cloud was owned by a third party. In such instances the customer s cloud can be considered a third party cloud for purposes of the present invention.

As shown in an objective of cloud computing is to run applications in the cloud that would otherwise be run on the private infrastructure . The customer may have applications that have been previously deployed on the private infrastructure which they wish to migrate to the cloud . Or they may be deploying new applications. Cloud deployed applications run on one or more nodes with the cloud . Most often these nodes are virtual nodes. The collection of nodes and devices dedicated to the customer make up the customers assets within the cloud.

As shown in it may be necessary for the customer to have a control module to set certain key parameters within the cloud. Often these parameters must be set in order for the application to run properly and for the customer s data to be secured in a satisfactory manner. However many clouds do not provide the customer such a control module.

Because the virtual network is a creation of the customer its parameters can be defined by the customer which enables the control module . Further because the virtual network operates as a network layered on top of the cloud network the virtual network can use parameters different from the cloud parameters set by the third party even where the third party has explicitly disallowed a parameter that is enabled on the virtual network . Key network and topology parameters that the customer may define include but are not limited to addressing encryption routing and enabling multicast protocols.

Traditionally VPN connections have been employed to connect individual computers running externally from a customer s private infrastructure or to connect two or more remote offices. Both of the cases involve running a single tunnel from the office to either an individual computer or another office. In these cases if the VPN connection fails the connected resources are inaccessible to each other. Such approaches are not conducive to leveraging or controlling cloud computing infrastructures.

To solve this problem the preferred embodiment of the present invention creates multiple VPN connections between assets which results in a fault tolerant virtual network. These connections can be dedicated to management information and or data. In such an embodiment one or potentially more VPN connections can fail and the customer s assets will still be visible and accessible to each other with the same network configuration and security. Such fault tolerant embodiments are possible within a single cloud across clouds as well as in connection with private infrastructure.

Referring back to the preferred embodiment illustrated in multiple independent networks can run within a single cloud with settings that may otherwise conflict with each other. Such an embodiment is shown in where three virtual networks all have devices and nodes with the same IP address and the virtual networks are coexisting on the same cloud . The ability to configure multiple assets in the same way is advantageous when a customer wants deploy failover or test systems that mirror their production system.

The virtual networks can also be linked together to form a larger network that are collectively controlled by the client. shows two virtual networks and running on two different clouds. The networks are connected together by a connection to form one larger network. As shown in a private cloud can be used . In two third party clouds are joined together and in addition a private cloud is joined. Such an embodiment allows the customer to utilize their existing infrastructure by converting it to a cloud.

A further embodiment as shown in allows the customer to link virtual networks in the third party clouds to an existing non cloud type network . This embodiment allows the customer to use their existing architecture without converting it to a cloud type environment and running a virtual network on it.

The creation of a virtual network is carried out by a control module virtual network manager or cloud VPN server. As shown in the virtual network manager comprises a series of modules. These modules can include but are not limited to a control interface module topology interpreter module tunnel module private infrastructure integrator module routing module synchronization module mapping module protocol transmitter module and queue module . Of course some of these modules may be combined or not used at all and other modules can be incorporated.

The control interface module enables the customer to get and set various parameters which define the behavior of the virtual network. The control interface module can take various forms for example a UI or an API. through show a graphical UI GUI that can be used in an embodiment of the present invention. depicts a GUI which provides customer the ability to choose among functional operations to control facets of the overlay network. depicts a GUI which provides a customer ability to generate a cryptographic keyset which can than be consumed by synchronization and tunneling modules. Such a generation step consumes information from the topology mapping mechanism. depicts a GUI which provides a customer the ability to provide information to the routing tunneling queuing protocol transmission modules regarding the network location of other Cloud VPN Servers participating in a given overlay network. depicts a GUI which provides a customer ability to trigger synchronization effects in the overlay network by allowing overlay network information such as cryptographic credentials once generated to be synchronized with other managers.

By allowing changes to the virtual network to be effectuated through an API the virtual network can be controlled in a programmatic fashion.

As shown in the topology interpreter module checks to see if a topology map is present on the local file system at . If a topology map is not found the customer is prompted to upload an encrypted topology map in the form of a topology license at . The topology license is then uploaded and decrypted at . Alternatively if a topology map is found on the local file system that map is used at . In either case the map is inspected and general parameters and links are identified at . The necessary tunneling routing and other supporting configuration files and templates are created at which are then used by other modules.

As shown in the tunnel module checks to see if a topology keyset has been generated at . If the keyset has been generated the keyset is downloaded from another virtual network manager in the same topology at . If the keyset has not been generated a new keyset is generated at . In either case files are extracted from the keyset archive into a directory for use by the VPN software at . In the preferred embodiment such software is OpenVPN. Alternative embodiments could use other software packages such as Openswan. The configuration files and templates generated by Topology Interpreter Module are obtained at . Information about the real IP address of all the virtual network managers in the current topology are obtained at . In the preferred embodiments these IP addresses are obtained through a prompt in the UI. Based on the collected information configuration files are built which are specific to the VPN package being used at . The VPN package is started at . The tunnel can be based on encryption protocols including but not limited to SSL TLS and SSH. Each of these protocols has multiple implementations that may be used.

As shown in the private infrastructure integrator module allows a connection to be established between the virtual network in the cloud and the customer s private infrastructure. Through the use of security protocols information can be exchanged between the virtual network and the private infrastructure as if they were both part of one trusted network. To create this connection the private infrastructure integrator first obtains from the customer information about the connection point to the private infrastructure . For example in an embodiment where the connection point is a Internet Protocol Security IPsec end point the obtained information may be the IP address of the end point the pre shared key and which of the customer s private subnets to integrate. Alternative embodiments may use SSL TLS or SSH encryption. Based on the obtained information the private infrastructure creates a configuration file for connecting to the private infrastructure at such as an IPsec configuration file. The necessary software to establish a connection to the private infrastructure such as an IPsec application is then started . When a connection in the case of IPsec a tunnel is established the subnets which are to be integrated are added to the virtual network at . For example the remote private subnets may be added to a dynamic routing protocol advertisement from the local manager. When the connection is closed any subnets that where added as a result of the connection are removed at .

As shown the routing module gets the dynamic routing protocol configuration files generated by the topology interpreter and installs them to a known location at . Then the routing software is started with the configuration file obtained in the previous step . In the preferred embodiments the dynamic routing protocol uses an implementation of Internet Engineering Task Force RFCs such as RFC 4271 and RFC 2858 which describes BGP of which there are many implementations available in the market.

The synchronization module uses the dynamic routing protocol to synchronize routes and allows servers to share needed information. The synchronization module further synchronizes keys and certificates.

As shown in the mapping module maps static IP addresses to a set of credentials. The module first identifies the subnet from the topology definition or license file at . Then the next IP address is found from the data subnet eligible to be assigned to a client host at . A unique name for the set of credentials is picked at . For example a name may be generated based on the target IP address. Next a set of credentials with the unique name as a common name CN is generated at . A client specific configuration file for a given CN with a push command for the corresponding IP address to the client is generated at . This could for example be done using OpenVPN s ifconfig push command. The process repeats at by returning to step .

The protocol transmitter module comprises a protocol sniffer and a protocol re transmitter. The protocol sniffer intercepts traffic as it moves over the network and then determines whether the traffic should be forwarded to the protocol re transmitter. The protocol transmitter in turn accepts traffic from the protocol sniffer and retransmits the traffic ready for distribution.

Shown in the protocol sniffer works by first setting up a sniffer to intercept targeted packets on the client facing network interface at . The sniffer can be based in whole or in part on existing sniffer systems and frameworks such as libpcap which are well known in the art. The next sniffed packet is received from sniffer at and a portion of the packet is checked for its relation to a predefined value or range at . In the preferred embodiment the packets time to live TTL value is checked to determine if it is greater than or less than a predefined value. In preferred embodiment the predefined TTL value is 250. Where that predefined value or range is not met the packed is recognized as being already retransmitted by the protocol transmitter and the packet is ignored at . And the protocol sniffer returns to step where the next sniffed packet is received. Where the predefined value or range is met the IP address and port of the source and destination as well as the payload timestamp and other protocol data are extracted from the packet at . All or part of this extracted information is placed into a message at . In one embodiment the message is sent using a dynamic queuing mechanism. In the preferred embodiment the dynamic queuing mechanism is an implementation of the open standard AMQP managed by Twist Process Innovations LTD a European Standards Organization.Twist Standard which described AMQP. There are many market available implementations of AMQP which may be used. Alternative embodiments may use a dynamic queuing machismo based on Java Message Services or commercial solutions like Tibco. At the message is then sent to a collection for handling by the protocol re transmitter. In one embodiment the message is published to a remote AMQP broker with the basic.publish AMQP command. The protocol sniffer then returns to step where the next sniffed packet is received.

Shown in the protocol re transmitter creates a collection for receiving messages from the protocol sniffer at this collection is the queue module . In one embodiment the collection is a queue created in accordance with the dynamic queuing mechanism. In the preferred embodiment the queue is created on a local AMQP broker and bound to an AMQP exchange. The protocol re transmitter is setup to retrieve message from the collection at . For example the basic.consume AMQP command can be used. A message is received at . In the case that AMQP is used it is received from the broker. The contents of the message are parsed and the headers and body are extracted at . A new packet is created in memory with the source and destination IP address and port as well as payload being based on the extracted values at . The value checked in protocol sniffer step is set to a value that will evaluate true at . Referring back to the previously mentioned preferred embodiment the TTL value is set to 250. The packet is put back onto the client facing network interface at . The protocol re transmitter then returns to step and receives the next message.

One specific application of the protocol sniffer and re transmitter is to allow the use multicast in cloud environments that do not otherwise support it. Multicast allows a single packet to be sent to multiple devices and nodes on the network at the same time. Because multiple devices and nodes are receiving the same packet bandwidth is conserved compared to sending a separate packet to each device and node. Multicast is typically controlled at the hardware level and is disabled in many cloud environments. However many applications as well as service discovery and election mechanism are often built on multicast protocols. The protocol module enables the use of such applications as well as service discovery and election mechanisms.

As described above the present invention incorporates and utilizes computers either as network devices or as nodes at the third party cloud infrastructure level over which the third party has control or at the private infrastructure level over which the customer has control.

It is also contemplated that bus can connect the processor to other computer systems as necessary. Via the bus the processor can receive computer code. The term computer code includes for example programs modules instructions signals and or data. The processor executes computer code and may further send the computer code via the bus .

Computer system may include one or more memories such as first memory and second memory . It is contemplated that the first memory secondary memory or a combination thereof function as a computer usable storage medium to store and or access computer code. The first memory and second memory may be for example random access memory RAM read only memory ROM a mass storage device or any combination thereof.

As shown in one embodiment of second memory is a mass storage device although it is contemplated that first memory may be the mass storage device. The mass storage device comprises a storage drive and a storage media . It is contemplated that the storage media may or may not be removable from the storage drive . Mass storage devices with storage media that are removable otherwise referred to as removable storage media allow computer code to be transferred to and or from the computer system and also to and or from the cloud itself.

A mass storage device may include for example a Compact Disc Read Only Memory CDROM ZIP storage device tape storage device magnetic storage device optical storage device Micro Electro Mechanical Systems MEMS nano technological storage device floppy storage device hard disk device. Mass storage device also includes program cartridges and cartridge interfaces such as that found in video game devices removable memory chips such as an EPROM or PROM and associated sockets.

The computer system may further or alternatively include other means for computer code to be loaded into or removed from the computer system for example input output I O interface and or communications interface . Both the I O interface and the communications interface allow computer code to be transferred between the computer system and external devices including other computer systems. This transfer may be bi directional or omni direction to or from the computer system .

Computer code transferred by the I O interface and the communications interface are typically in the form of signals which may be electronic electromagnetic optical or other signals capable of being sent and or received by the interfaces. These signals may be transmitted via a variety of modes including but not limited to wire or cable fiber optics a phone line a cellular phone link infrared IR and radio frequency RF link.

The I O interface may be any connection wired or wireless that allows the transfer of computer code. An I O interface includes for example an analog or digital audio connection digital video interface DVI video graphics adapter VGA musical instrument digital interface MIDI parallel connection PS 2 connection serial connection universal serial bus connection USB IEEE1394 connection PCMCIA slot and card.

In certain embodiments the I O interface connects to an I O unit for example a user interface microphone monitor speaker printer touch screen display etc.

The communications interface is also any connection that allows the transfer of computer code. Communication interfaces include but are not limited to a modem network interface such as an Ethernet card wired or wireless systems such as Wi Fi Bluetooth IR local area networks wide area networks intranets etc.

The present invention is also directed to computer products otherwise referred to as computer program products to provide software that includes computer code to the computer system and to the cloud itself. Processor executes the computer code in order to implement the methods of the present invention. As an example the methods according to the present invention may be implemented using software that includes the computer code wherein the software is loaded into the computer system using a memory such as the mass storage drive or through an I O interface communications interface or any other interface with the computer system . The computer code in conjunction with the computer system described herein may perform any one of or any combination of the steps of any of the methods presented herein. It is also contemplated that the methods according to the present invention may be performed automatically or may be invoked by some form of manual intervention.

The computer system or network architecture of is provided only for purposes of illustration and represents one of a number of similar computer systems making up the cloud environment such that the present invention is not limited to this specific embodiment. It is appreciated that a person skilled in the relevant art knows how to implement the present invention using any similar computer system or network architecture.

While the disclosure is susceptible to various modifications and alternative forms specific exemplary embodiments thereof have been shown by way of example in the drawings and have herein been described in detail. It should be understood however that there is no intent to limit the disclosure to the particular embodiments disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the scope of the disclosure as defined by the appended claims.

