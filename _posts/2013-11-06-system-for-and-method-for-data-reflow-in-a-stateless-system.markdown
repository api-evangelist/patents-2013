---

title: System for and method for data reflow in a stateless system
abstract: Embodiments provide systems and methods having an engine that gives stateless applications attributes of a ‘stateful’ process. To accomplish this end, a ‘snapshot’ of a transaction at a given point is taken and persisted until receiving confirmation that the transaction is completed. The snapshot may be a snapshot of data flowing in a stateless messaging system. The snapshot is maintained until confirmation that all intended recipients to which the transaction relates to have completed the steps they need to for the given transaction. The snapshot may be formed into a message and reflowed to an intended recipient to ensure that the recipient receives the message in the event that the initial delivery is unsuccessful.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09213750&OS=09213750&RS=09213750
owner: Verizon Patent and Licensing Inc.
number: 09213750
owner_city: Basking Ridge
owner_country: US
publication_date: 20131106
---
Many computer applications operate in a stateless manner meaning information is not saved with respect to the process or actions taken. In these stateless applications information is lost if an exchange of data is unsuccessful. For example in a stateless messaging environment a message is desired to be transmitted to a number of recipients. If the transmission is unsuccessful to one of the recipients e.g. the particular recipient s server has a communications fault is down for maintenance or has reached capacity the message will not be delivered to that recipient. While a record indicating the fault occurred can be recorded there is no persistence of the data that was processed. Thus if a resend is required the message could be resent from the original source system in its entirety. This would result in processing to all of the recipients resulting in duplicative messages and wasted bandwidth.

According to exemplary embodiments systems and methods may provide an engine that gives stateless applications attributes of a stateful process. This may ensure that steps already performed of a given process are not lost if the process terminates before completion. To accomplish this a snapshot of a transaction at a given point in a process is taken and persisted until receiving confirmation that the transaction completed. The snapshot may be a snapshot of data flowing through the process such as a business document or information included in a message for example. The snapshot is maintained until confirmation that all intended recipients to which the transaction relates to have completed the steps they need to for the given transaction.

Exemplary embodiments to accomplish the above split the stateless proxy services insert the snapshot at the split point so that the transaction can resume based on the snapshot rather than having to recreate the transaction from its beginning. The snapshot is assigned a transaction key or identifier to associate index the transaction with the corresponding snapshot. The key identifier provides a way for retrieving the snapshot and to insert it at the split point that is where the transaction failed . This may be known as a defined endpoint. Exemplary embodiments may use a URL at the failed transaction as the return address to send the snapshot transaction to. This URL may be associated with the key identifier to enable the snapshot to be inserted at the proper point in the process. This is necessary since the snapshot is taken prior to any failure or termination of the process occurring. Once the snapshot is resent or used a flag or other identifier may be set by the engine to indicate the completion of the transaction.

Exemplary embodiments may combine automated features with manual intervention. For example upon a failure in the process being observed such as a message not being delivered an operator may be notified. The operator may investigate the failure and track its correction. Upon indication of the system being fully operational the operator may initiate the insertion of the snapshot to resume the process.

Each snapshot may be stored in a database or other suitable data repository. The snapshot may be stored in eXtensible Markup Language XML format. It should be appreciated that other formats are possible. The snapshot format may match that of the incoming message or document format. The snapshots may be stored for a period of time before being purged or deleted. For example the snapshots may be deleted after one month or after the process is completed that is the snapshot is no longer needed. The database of snapshots may be used to generate reports and other operational data. The database may have processes in place to audit activities relating to the snapshots for reporting.

The engine according to exemplary embodiments may serve as middleware residing between two sets of systems both of which send and receive data. The engine may provide functionality as described above to give stateless processes a stateful condition. In doing so the engine may constantly operate to ensure that data flows between the systems. One system may transmit data that is destined for another system. The transmitting system may be operating in an asynchronous manner. The engine may interact with and control the operation of a service bus and service oriented architecture. The engine may run in the background. The service bus and the service orientated architecture in some embodiments may be commercial off the shelf applications which the engine may be a separately coded application that is configured to interact with the commercial applications to allow the exemplary embodiments to operate.

In the following figures while a single illustrative block module or component is shown these illustrative blocks modules or components may be multiplied for various applications or different application environments. In addition the modules or components may be further combined into a consolidated unit. The modules and or components may be further duplicated combined and or separated across multiple systems at local and or remote locations. For example some of the modules or functionality associated with the modules may be supported by a separate application or platform. Other implementations and architectures may be realized.

The description below describes network elements computers and components of exemplary embodiments. The elements depicted may be modules of a single larger element. Each of these elements may also include one or more modules. As used herein the term module may be understood to refer to computer implemented executable software firmware hardware and various combinations thereof. Modules however are not to be interpreted as software which is not implemented on hardware firmware or recorded on a processor readable recordable storage medium i.e. modules are not software per se . It is noted that the modules are exemplary. The modules may be combined integrated separated and duplicated to support various applications. Also a function described herein as being performed at a particular module may be performed at one or more other modules and by one or more other devices instead of or in addition to the function performed at the particular module. Further the modules may be implemented across multiple devices and other components local or remote to one another. Additionally the modules may be moved from one device and added to another device and may be included in both devices.

Moreover the figures illustrate various components e.g. servers computers etc. separately. The functions described as being performed at various components may be performed at other components and the various components may be combined or separated. Other modifications also may be made.

Exemplary embodiments may include software that is installed on computer hardware to allow the execution of instructions to implement the methods described herein. The software may be tangibly embodied in one or more non transitory physical media such as but not limited to a compact disc CD a digital versatile disc DVD a floppy disk a hard drive read only memory ROM random access memory RAM and other physical media capable of storing software or combinations of different media.

At block data is transmitted by a system. The data may be asynchronously transmitted. Once transmitted the data may enter a service bus which is stateless through which the engine according to exemplary embodiments acts. The service bus may start a thread for the data transmission. The data may be acknowledged by the bus to the system. For example the bus may acknowledge the receipt of the data. The data may be in any of a variety of formats and may have a variety of content contained therein. For example the data may be a Simple Access Object Protocol SOAP message that is being sent to a number of recipients. It should be appreciated that while a SOAP message is used as an example herein other forms of data are possible and within the scope of exemplary embodiments. For example the data may be a business document or a transaction.

At block a snapshot is taken of the data. The snapshot may be taken following the data entering the bus. The snapshot may be taken electronically. The snapshot may be taken automatically by the service bus and or the engine. For example the snapshot may be taken of the SOAP message. The snapshot may be in XML format. It should be appreciated that other formats may be used. In some embodiments the snapshot format may match the format of the message. In the instant example XML is used since the original message was a SOAP message.

At block a unique identifier is assigned to the snapshot. The identifier may be a unique key or other identifier to provide a reference to the snapshot. The unique identifier may be assigned by the service bus.

At block the snapshot is stored. The snapshot may be input into a service oriented architecture SOA and stored in a database or data repository. The snapshot may be indexed or keyed by the unique identifier. A service name may be added.

Turning to at block the data is transmitted across the service bus as part of the thread. For example the SOAP message may be transmitted across the service bus to its intended recipients. Block may occur after block and may occur in parallel with the steps of the method described above.

At block the data is delivered to at least a portion of the intended recipients. For example the SOAP message is delivered to some of the intended recipients. Each recipient may generate an acknowledgement following receipt of the SOAP message.

At block the actions are completed for the delivered data. The original thread is terminated at this point by the service bus unless block occurs which may not occur in all instances.

At block the data is not delivered to or received by at least one recipient. For example the recipient s communication server may be down such as for a hardware software failure or down for maintenance the server may have reached capacity or is faulted causing the message to be rejected. The service bus may detect this fault. For example the service bus may fail to receive a delivery acknowledgement for the SOAP message or the service bus may receive an industry standard error message indicating the target server is in an error state

At block an error notification is generated. The error notification may be generated by the service bus upon delivery failure and sent to the SOA engine. The service bus may terminate the thread.

At block the error notification is associated with a snapshot. The error notification may be logged and stored in the database by the SOA. The error notification may be associated with the snapshot based on the identifier and the service name. The error notification may include information as to where the fault or error occurred in the process. For example the error notification may include the Uniform Resource Locator URL and server name to which the data was being sent. This information may be appended to the snapshot of the message. In the case of an XML snapshot the information may be added as a header for a SOAP message. The information may be required to define where the snapshot is required to be sent since the snapshot was taken following the initial data transmission before the error occurred. Thus the snapshot may only contain the originating data and intended recipient information. The snapshot as originally stored therefore does not contain information regarding which recipient failed to receive the data.

At block the error notification along with the snapshot identifier is sent to one or more support personnel. The support personnel may review the error and determine the status of the recipient s system that did not receive the data. It should be appreciated that this step may be automated or in some embodiments be optional. It should be appreciated that in some embodiments the error notification may be sent following the error and the snapshot information may follow separately to the support personnel. In some embodiments this process may be automated. In other embodiments this step may be omitted. It should also be appreciated that the predication of an error is not the sole embodiment to resend a message. Any message that was stored as a snapshot if the unique key be known may be resent using this process.

At block the data is reflowed to recipient. The data may be retransmitted or reflowed to the recipient. This may be done following a determination that the fault or error has been corrected so that the recipient is capable of receiving the data. To reflow the data the snapshot may be retransmitted from the SOA to the service bus and a new thread started. The snapshot may be found in the database where it was stored at block and retrieved. The engine may dynamically rebuild the initial message based on the snapshot and the stored information. The reflow may be initiated by the support personnel. In some embodiments the reflow may be automatically initiated. In still other embodiments the reflow may be initiated remotely from a mobile device Short Message Service SMS device or other such messaging protocols. The process returns to block as the reflowed message enters the service bus for transmission to the indicated recipient.

The system may have sending system . The sending system may transmit an asynchronous message into a service bus .

In some embodiments the sending system may be a computing device that has one or more processors for recording transmitting receiving and storing data as well as computer memory.

The sending system may be the originator of data that is the system may transmit data through the system for receipt by one or more recipients. For example the asynchronous message depicted at as entering the service bus may be intended for a series of recipients such as partner applications and . It should be appreciated that while three recipients are depicted more or less recipients are possible.

It should further be appreciated that the sending system and partner applications and may represent more than one application each.

The asynchronous message may contain any type of data. For example the data may be one or more messages or documents. The data may relate to a transaction. The data may flow into and through the service bus as part of the system . The service bus may operate in a stateless manner. The service bus may acknowledge the transmission of the message to the application . The service bus may assign the message a unique ID at upon entry into the service bus. The service bus may create a thread for the transmission of the message.

At the routing proxy a snapshot may be taken of the message. The snapshot may be in an XML format as depicted. It should be appreciated that this is exemplary and non limiting as other formats could be used. The snapshot may be put in XML format or the snapshot may be in a format matching the format of the original message. The point may be at the start or endpoint of the service bus . Thus the snapshot may be taken as the message enters the service bus . As depicted a routing proxy may take the snapshot .

The snapshot may be transmitted to a SOA . The snapshot may be transmitted with the unique ID and a service name from the service bus . The snapshot may be passed through an audit service at . The audit service may process the snapshot and store the snapshot in a database . The database may be referred to as audit tables.

For example the snapshot may be formatted as follows including the unique ID for insertion in the database for storage 

As shown by the above XML code the payload of the message that may be saved to the database has a unique ID 3a10e223 5702 4682 92eb b120f83f2442. It should be appreciated that the preceding example is meant to be exemplary and non limiting as a variety of unique ID formats may be used.

The database may be any type of database such as an Oracle database a Microsoft SQL Server database a DB2 database a MySQL database a Sybase database an object oriented database a hierarchical database or other database. The data storage may utilize flat file structures for storage of data.

In some embodiments the message may be successfully transmitted to each partner application. In passing through the service bus the message may pass through a set of mapping proxies or mapping services and and a set of business services and . As depicted in the system the message following passing through the routing proxy at may be duplicated and sent through a mapping proxy and a business service for each partner application destination. Upon successful transmission the service bus may terminate the thread for the particular message. The service bus may notify the SOA of the successful transmission.

However according to exemplary embodiments the message may not successfully reach one or more of the partner applications and or . A fault may occur. For example one of the partner applications such as may be unreachable for reasons described above for example. In this example a connection error may be generated and sent back to the mapping proxy corresponding to the particular business service for the respective partner application.

A notification may be sent to the SOA . The mapping proxy may send the error notification along with the service name and meta data to the SOA . The service bus may terminate the thread for the particular message. The error notification may be sent to a fault service .

The notification may be received processed and may be stored in an error table database . The notification may contain information regarding the fault . The information may include a server name and or URL as to where the fault occurred. This information may be associated with a particular snapshot such as the snapshot .

As can be seen the error message may contain a unique ID the service name time error message and the URL needed for service that failed. This example is meant to be exemplary and non limiting as a variety of error message formats may be used.

In some embodiments the fault service may process the notification and transmit a further notification or alert to other systems or terminals within the system . This notification may be for system operators. For example a support portal may allow operators to view messages for reflow. A message may be selected and submitted to the reflow service along with the meta data for the reflow. In some embodiments the message may be selected remotely and transmitted by methods the may include mobile application screens SMS messages or other such remote protocols.

For example when the operator has selected a failed message for reflow a message will be sent to the SOA to invoke the reflow service . The message may contain the unique ID the service name and the user ID for auditing. An exemplary message may be as follows 

This example is meant to be exemplary and non limiting as a variety of messages to invoke reflow may be used.

Either automatically or manually from the support portal the snapshot may be queued and retransmitted or reflowed using the reflow service as the snapshot . The snapshot may be located using the unique key in the database .

The snapshot may be the snapshot with the information from the fault included as described above. The snapshot may be a dynamic rebuild of the original data transmission. For example the snapshot may be built using the meta data as a SOAP message with a payload including the original message. The snapshot may the reinserted into the service bus data flow as depicted at and a process restarted. Point may be the point where there error occurred or upstream of the fault location. The snapshot retransmission or reflow may be performed following resolution of the fault to prevent the fault from occurring again and preventing the message from reaching the partner application. The service bus may create new thread for the reflow.

The reflow service can retrieve the original snapshot message using the unique ID. The reflow service can then build a SOAP message using the retrieved XML. The service will be able to build the destination to send it by combining the URL that was saved and the server address configured for that server Configured Server URL Saved URL for service that will be reflowed e.g. http osb.server.com Project Name Proxy L Mapping Proxy Service Name . This example is meant to be exemplary and non limiting as a variety of formats may be used.

In some embodiments the point where the message is reinserted may use a SOAP message and the Hypertext Transfer Protocol HTTP . It should be appreciated that other message transfer technologies may be used such as Java Message Service JMS Representational State Transfer REST IBM Message Queue MQ or other protocols for transferring data to a service.

In the preceding specification various preferred embodiments have been described with references to the accompanying drawings. It will however be evident that various modifications and changes may be made thereto and additional embodiments may be implemented without departing from the broader scope of invention as set forth in the claims that follow. The specification and drawings are accordingly to be regarded in an illustrative rather than restrictive sense.

