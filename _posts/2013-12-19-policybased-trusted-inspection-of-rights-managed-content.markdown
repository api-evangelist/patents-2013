---

title: Policy-based trusted inspection of rights managed content
abstract: An embodiment includes a method executed by at least one processor comprising: initializing first and second secure enclaves each comprising a trusted software execution environment that prevents software executing outside the first and second secure enclaves from having access to software and data inside the first and second secure enclaves; the first secure enclave (a)(i) inspecting a policy, (a)(ii) authenticating the second secure enclave in response to inspecting the policy; and (a)(iii) communicating encrypted content to the second secure enclave in response to authenticating the second secure enclave; and the second secure enclave (b)(i) decrypting the encrypted content to produce decrypted content, and (b)(ii) inspecting the decrypted content. Other embodiments are described herein.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09514317&OS=09514317&RS=09514317
owner: Intel Corporation
number: 09514317
owner_city: Santa Clara
owner_country: US
publication_date: 20131219
---
The security of digital information has become increasingly important particularly when the information has commercial value is confidential or relates to a sensitive topic. In some instances digital information may be provisioned on a client device that is infested with malware. If left unchecked such malware may compromise the security and or integrity of digital information on the client device. For example malware may attempt to access and or obtain digital information from the client itself e.g. from the client s storage or memory from the information distribution pathway to the client and or from the pathway that enables a user of the client to view or otherwise interact with the digital information. A successful malware attack on any one of those areas may compromise the security of the digital information and may result in access and or modification of the information by an unauthorized party.

To increase the security of digital information enterprise rights management ERM and other products have been developed. In many instances ERM products are designed to protect the distribution of sensitive digital information e.g. documents electronic mail and the like by providing mechanisms for maintaining the integrity and confidentiality of the information enforcing one or more policies that govern access to the information and or by enforcing a logging policy that tracks the usage of digital information on a client.

While existing ERM products are useful they continue to face security challenges from malware which may exploit one or more weaknesses in existing ERM products in an attempt to obtain digital information as it is provisioned stored and or used on the client. Authorized users of digital information may also attempt to subvert protections imposed by ERM products which they may view as inconvenient. Accordingly there remains a need in the art for technologies that improve the security of digital information as it is provisioned stored and or used on a client platform.

In the following description numerous specific details are set forth but embodiments of the invention may be practiced without these specific details. Well known circuits structures and techniques have not been shown in detail to avoid obscuring an understanding of this description. An embodiment various embodiments and the like indicate embodiment s so described may include particular features structures or characteristics but not every embodiment necessarily includes the particular features structures or characteristics. Some embodiments may have some all or none of the features described for other embodiments. First second third and the like describe a common object and indicate different instances of like objects are being referred to. Such adjectives do not imply objects so described must be in a given sequence either temporally spatially in ranking or in any other manner.

As addressed above ERM technologies aim to promote secure computing. However technologies such as ERM Digital Rights Management and encrypted software solutions create problems for anti malware inspection techniques that leave systems vulnerable to attack. An example concerns a portable document format PDF an open standard for electronic document exchange maintained by the International Organization for Standardization ISO document and a hardened renderer for the PDF document. The renderer is hardened because it is protected or secured and not easily inspectable e.g. the renderer is included within a Trusted Execution Technology TXT or other protected environment . A hardened renderer for rendering ERM protected encrypted PDF documents could have a scripting vulnerability that allows it to be compromised by malware located within or coupled to the PDF document. More specifically because the PDF document is encrypted and the PDF renderer which includes a scripting engine for executing script of PDF documents is hardened anti malware techniques cannot be used to inspect the suspect PDF document prior to the execution of the script corresponding to the PDF document. Similarly software anti piracy efforts sometimes encrypt critical pieces of code to prevent cracking leaving the system vulnerable if that code has weaknesses or is malicious.

An embodiment uses a policy infrastructure to determine whether the inspection by the application e.g. AV engine or application or utility should be allowed. If so the policy may further dictate what entity or entities are allowed to perform the inspection. This allows the policy to be configured by the confidential content owner such as an enterprise information technology IT department or a premium content distributor. For example an IT department may insist that only AV application X may be used to examine content Y but that AV applications X or Z may be used to examine content Q.

The first part includes a trusted execution environment with attestation capabilities such as without limitation an Intel Secure Enclave sometime referred to as Intel Software Guard Extensions Intel SGX Intel Management Engine Intel ME and the like. Such attestation capabilities may include for example the mechanism by which an enclave on one platform proves to a remote entity or other enclave that it was instantiated correctly.

A second part includes a hardened application e.g. a movie player such as Windows media player or a document viewer such as Adobe Reader and the like operating upon encrypted or obfuscated content e.g. video audio and or text and the like running within the trusted execution environment and containing or coupled to a policy enforcement engine to enforce the policy .

A third part includes a policy infrastructure e.g. Active Directory Rights Management Services AD RMS Windows Rights Management Services Adobe LiveCycleRights Management ES and the like capable of creating and delivering policy to the hardened application .

A fourth part includes an inspection engine e.g. AV software such as McAfee SaaS Endpoint Protection Suite that protects against viruses spyware web threats hacker attacks and the like running within trusted execution environment .

While some embodiments may include all four parts other embodiments may include different combinations of only a subset of the four parts e.g. parts and .

In an embodiment the process starts block and the hardened application opens decrypts protected encrypted content block . Upon analysis of the content the hardened application obtains an inspection policy block that relates to the content. The policy is retrieved from policy infrastructure such as a policy database block located on the same platform as the hardened application or on a distantly located platform that is remote from the hardened application and determines what inspection engines if any are allowed to inspect the protected content block . The policy may be organizational specific e.g. all content can be inspected by an IT approved anti virus engine content specific e.g. document X can be inspected by only specific inspection engine Y and the like.

In an embodiment if inspection of the contents is allowed a hardened application determines the identity of the inspection engine block and determines if the inspection engine is approved block . If so the hardened application and inspection engine authenticate one another to create a trusted interface e.g. session key protected channel with one another block . An external API is exposed block that allows inspection of the protected contents to inspection engine that is allowed to perform inspection according to the policy . The inspection engine or engines in some embodiments is then able to analyze the content and make decisions accordingly such as rejecting the content as malicious or advising that it may be potentially dangerous. The process then ends block . If the policy does not allow inspection in general or does not allow the particular inspection engine in question to perform inspection of the content then access is denied to the inspection engine block .

Thus an embodiment allows protected contents to be fully inspected while still constraining the entities that are allowed to inspect the contents. The constraining is based on using a policy associated with the contents. To do so some embodiments use policy based access to cleartext and or unprotected contents e.g. unencrypted video audio and or text content that are normally protected to prevent access by unauthorized agents. Such an embodiment alleviates or lessens concerns regarding malware residing within trusted execution environments thereby providing higher value to those environments for enterprises consumers and the like. Such an embodiment is an improvement over conventional methods that concern for example inserting hook points into execution paths in a race to the bottom style where anti malware hooks and content protection hooks are racing to control what is or is not visible of protected content before harm can be done.

An embodiment uses a secure enclave to provide a trusted execution environment. For example policy infrastructure hardened application and inspection engine may be included in the same or in different trusted execution environments. A secure enclave is a trusted software execution environment which prevents software executing outside the enclave from having access to software and data inside the enclave. Any or all of elements may be included in one or more enclaves.

Various embodiments of secure enclaves are described in for example the U.S. patent application entitled Method and Apparatus to Provide Secure Application Execution filed Nov. 13 2009 Ser. No. 12 590 767 the PCT Patent Application entitled Method and Apparatus to Provide Secure Application Execution filed Dec. 22 2009 Application No. PCT US2009 069212 the U.S. patent application entitled System and Method for Implementing a Trusted Dynamic Launch and Trusted Platform Module TPM Using Secure Enclaves filed Dec. 22 2010 Ser. No. 12 976 831 the PCT Patent Application entitled Technologies For Hardening The Security Of Digital Information On Client Platforms filed Jun. 4 2013 Application No. PCT US2013 44158 Using Innovative Instructions to Create Trustworthy Solutions by Matthew Hoekstra et al. Innovative Instructions and Software Model for Isolated Execution by Frank Mckeen et al. and other papers presented at The Second Workshop on Hardware and Architectural Support for Security and Privacy In Conjunction with ISCA 40 Jun. 24 2013 in Tel Aviv Israel. Consequently details regarding operation of secure enclaves are not entirely addressed herein. These applications and papers are referred to herein collectively as the secure enclave materials. 

As described in the secure enclave materials a secure enclave is carved out of the virtual address space of its containing process. Memory management of the enclave is performed in terms of virtual addresses. In an embodiment enclave memory management is divided into two parts address space allocation and memory commitment. Address space allocation is the specification of a maximal range of addresses that the enclave may use. No actual resources are committed to this region. Memory commitment is the assignment of actual memory resources as pages within the allocated address space. This two phase technique allows enclaves to flexibly control their memory usage and allow for growth without overusing memory resources when enclave needs are low. Commitment adds virtual pages to the enclave.

This distinction is reflected in the two instructions ECREATE and EADD. ECREATE allocates a range of addresses for use by the enclave. EADD commits virtual memory pages within that range to the enclave. An operating system may support separate allocate and commit operations. For example the Windows API VirtualAlloc takes a flag argument of MEM RESERVE allocation or MEM COMMIT commitment . It is not required that an OS support this separation but its presence can make memory management within an enclave more flexible and efficient.

In one embodiment a secure enclave is created using the ECREATE instruction specifying a base and size of the virtual address space range in which the enclave is to be built. Memory is added to the secure enclave before it is sealed. The enclave creation and commitment process is best illustrated for example by using the Windows API and proceeds as follows 1 reserve address space region in the process using VirtualAlloc passing in the MEM RESERVE flag which reserves a region of memory without actually committing any physical memory or page file storage 2 commit the first page of the enclave by calling VirtualAlloc again this time with the MEM COMMIT flag 3 use the ECREATE instruction to set up the initial environment specifying the same address range as above i.e. ECREATE allocates a region of virtual memory within the application for hosting the secure code and data and 4 for each additional page to be added to the enclave VirtualAlloc the enclave page use EADD to add the new page to the enclave use EEXTEND to add a measurement for 128 bytes of the page EEXTEND updates the measurement of the enclave to include the code or data added in EADD and call this instruction until the entire enclave is measured e.g. a measurement may include a cryptographic hash of the code and data in an enclave at the time it is initialized . If a contiguous set of enclave pages is to be added at once the above steps can be reordered and optimized to minimize the number of system calls. On operating systems that do not support separate reserve and commit operations the VirtualAlloc above can be replaced by a simple malloc for example and the remaining calls to VirtualAlloc eliminated.

Because the ECREATE and EADD instructions enable encryption and integrity for the added page it is not possible for non enclave software to initialize this memory after it has been added to the enclave. The runtime system must completely initialize any memory for which it is responsible before EADDing it. This typically requires the runtime system to build the enclave image in place even before calling ECREATE i.e. because SECS cannot be modified by software after ECREATE . Once memory has been initialized the enclave ECREATEd and its memory EADDed it may be sealed and measured as described herein. Again the inspection engine hardened application and or policy infrastructure may each be initialized sealed and measured as described above.

In one embodiment there are two data structures inside the enclave the Secure Enclave Control Store SECS and the Thread Control Structure TCS . SECS and TCS contain architectural information and non architectural convenience fields used by the runtime software. All of the convenience fields and a few of the architectural fields are initialized by software. During enclave creation code and data for an enclave may be loaded from a clear text source. It is not possible to load encrypted code and or data directly into an enclave during creation. However code and or data from an encrypted source may be installed into an enclave by first loading a trusted loader into the enclave. Once the enclave is running this loader can then be used to install secret code data e.g. encrypted text audio and or video into the enclave.

Once the SECS one or more TCSs and the code and data have been EADDed the enclave creation is completed by the EINIT instruction. This instruction stops further measurement information from being written into a measurement register MR sometimes referred to in the co pending applications as IR0 . In other words EINIT locks down the contents of the enclave and ensures that only the code within the enclave has access to the data regions in the same enclave. After EINIT no further pages may be added to the enclave.

Untrusted code calls into the enclave using the EENTER instruction and the enclave returns back to the untrusted caller via EEXIT. On enclave entry control is transferred to code which switches the stack pointer to one inside the enclave. When returning the software again swaps the stack pointer then executes the EEXIT instruction.

Thus once the enclave has been created and initialized with EINIT attempted accesses to the enclave s memory from unauthorized software even software such as virtual machine monitors BIOS or operating system functions operating at a higher privilege level than the enclave itself are prevented. From a physical point of view while enclave data is resident within registers caches or other logic blocks inside the processor package unauthorized access via software is prevented by CPU logic. Whenever enclave data leaves the on package caches to be written to platform memory the data is automatically encrypted and its integrity is protected. This prevents malicious individuals from using memory probes or other techniques to view modify or replay data or code contained within the enclave.

The immediately preceding description discusses various mechanisms for instantiating secure enclaves. Once those enclaves are instantiated they may authenticate themselves to one another via attestation. More specifically as each page of data e.g. encrypted text audio and or video is loaded into the enclave using the EADD and EEXTEND instructions internal data structures within the CPU are updated to include cryptographic measurements of the code and data added to the enclave. The ability of a remote party to verify that enclave measurements and platform settings are configured as expected is referred to as attestation. SGX uses two related credentials for attestation reports and quotes. A report is used to verify the correctness of enclaves on the local platform and a quote can be used to reflect platform and enclave state to entities outside of the platform. Once the attestation has been successfully completed a trusted channel can be established between a server and the enclave enabling secrets to be securely transmitted.

A more detailed examination of an embodiment for provisioning enclaves and then authenticating enclaves to one another is now examined.

As used herein the term provisioning refers to processes by which a client establishes its identity with a server and stores that identity and other credentials locally in a secured fashion for subsequent communication with the server. Accordingly provisioning may be understood as an initialization step that may occur before during or after digital information modules etc. are provided on a client device.

Node and node respectively include device platforms . Without limitation device platforms may correlate to one or more device types such as servers clients mobile computing nodes Smartphones tablets laptops notebooks netbooks and the like.

Node and node may further respectively include processors . Such processors may be any suitable general purpose processor or application specific integrated circuit and may be capable of executing one or multiple threads on one or multiple processor cores. Without limitation processors may be general purpose processors such as but not limited to the general purpose processors commercially available from INTEL Corp. ADVANCED MICRO DEVICES ARM NVIDIA APPLE and SAMSUNG . While illustrates node and node as each including a single processor multiple processors may be used.

Node and node may also respectively include memories which may be any suitable type of computer readable memory. Exemplary memory types that may be used as memory and memory include but are not limited to semiconductor firmware memory programmable memory non volatile memory read only memory electrically programmable memory random access memory flash memory which may include for example NAND or NOR type memory structures magnetic disk memory optical disk memory combinations thereof and the like. Additionally or alternatively memories may include other and or later developed types of computer readable memory.

Node may be further configured to provide enhanced security for the provisioning and storage of trusted data code modules and other information including but not limited to authentication credentials. Node may therefore include memory enclave which may function to provide a secure environment for the storage and processing of digital information. As shown in memory enclave may be present in node as an independent component e.g. within an independent memory module. Alternatively or additionally memory enclave may be present within memory in which case all or a portion of memory may be configured as a memory enclave. While a single memory enclave is shown in it should be understood that node may include multiple memory enclaves. For example node may include an additional memory enclave e.g. a quoting enclave not shown which may be provided within memory or another memory of node such as a memory local to processor .

Node and node may also respectively include input outputs I O and . I O may include hardware i.e. circuitry software or a combination of hardware and software that is configured to allow node to transmit and receive communications to and from node and where applicable a distributor of digital information e.g. distributor . Likewise I O may include hardware i.e. circuitry software or a combination of hardware and software that is configured to allow node to send and receive communications to and from node and where applicable a distributor of digital information. In some embodiments I O and may include one or more communications modules that enable node and node to communicate with one another.

Communication between I O and I O may occur over a wired or wireless connection using a close and or long range communications network. Such communication may comply with a predefined communications protocol such as a BLUETOOTH protocol near field communication protocol any or the wireless 802.11 communications protocols in force on or before the effective filing date of the present disclosure or a combination thereof. I O s may therefore include hardware to support such communication e.g. one or more transponders antennas BLUETOOTH chips personal area network chips near field communication chips combinations thereof and the like.

I O s may also be configured to receive information e.g. digital information license policies etc. from a data storage medium such as a magnetic recording medium optical recording medium magneto optical recording medium a solid state FLASH recording medium combinations thereof and the like. In such instances I O s may be configured to permit the receipt of diverse content via such data storage devices.

Node and node may further include client provisioning module CPM and server provisioning module SPM respectively although this does not imply that node must be a client and node must be a server . CPM may be stored and executed within the context of memory enclave and thus protected from malware and other malicious entities that may be resident on node .

In an embodiment SPM may be stored and or executed in memory enclave in which case SPM may be protected from malware and other entities that may be resident on node .

CPM and SPM may include computer readable instructions which may be executed by processors and respectively or by another processor. In the case of CPM the CPM instructions may be executed within memory enclave . In any case execution of CPM instructions may cause node and or node to perform secure provisioning operations consistent with the present disclosure. Node may also include quoting module which may include computer readable instructions that when executed e.g. by processor may cause node to perform enclave report verification operations and enclave quote generation operations consistent with the present disclosure. Quoting module may be stored and executed within memory enclave or may be stored and executed in another quoting enclave as discussed below.

CPM or SPM may initiate a secure provisioning process between node and node . For example CPM may be configured to cause node to initiate provisioning by sending a provisioning request message to node . For example node may include inspection engine and node may include hardened application . The provisioning request message may be encrypted using node s public key if privacy of the request is desired in which case only node can decrypt the request. In any case SPM may cause node to analyze the information in the provisioning request message.

Upon analyzing the provisioning request message SPM may cause node to generate a reply message for transmission to node . The reply message may include information that may be used for anti replay or other purposes such as a nonce. The reply message may be signed with a digital signature and may include information that may be analyzed by node or more specifically by CPM to verify the authenticity of the reply message. In some embodiments SPM causes node to sign the reply message with a server private key Spriv using a digital signature protocol. In that instance node may verify the digital signature to the reply message using a corresponding node server public key Spub the use of S does not suggest node must be a server or any other form of node .

If node can adequately verify the reply message received from node CPM may cause node to protect information in the reply message e.g. nonce N by storing it in memory enclave . CPM may also cause node to generate its own nonce M and securely store it in memory enclave .

Further in response to the reply message CPM may cause node to generate an asymmetric key pair such as may be used in Rivest Shamir Adleman RSA public key encryption and or a digital signature protocol. More specifically CPM may be configured to cause node to generate an asymmetric key pair including a node client public key Cpub and a client private key Cpriv the use of C does not suggest node must be a client or any other form of node both of which may be stored in and or sealed to memory enclave .

CPM may also cause node to generate an enclave report. The enclave report may include for example a hash of a user data blob hereinafter userdata that encapsulates information stored in memory enclave . The userdata may encapsulate nonce N node anti replay information nonce M node anti replay information and Cpub optionally in combination with other information stored in memory enclave . In some embodiments userdata may encapsulate node s platform identification platform ID a user identification user ID of one or more users of node application specific identification information application specific ID a security version number SVN of memory enclave an identifier of the independent software vendor ISV that provisioned memory enclave on node combinations thereof and the like.

CPM may further cause node to perform enclave quote generation operations. In this regard CPM may cause node to send an enclave report to a quoting module such as quoting module . Without limitation quoting module is preferably stored and executed within a quoting enclave resident on memory that is local to a processor such as processor . The enclave report sent to quoting module may be signed with a digital signature and or may include other information which quoting module may use to verify the authenticity of the enclave report. For example CPM may cause node to sign the enclave report using a suitable digital signature protocol and memory enclave s enclave key prior to transmitting the enclave report to quoting module .

Quoting module may be configured to perform enclave report verification operations and enclave quote generation operations consistent with the present disclosure. For example upon receiving an enclave quote quoting module may cause node to verify the authenticity of the report. Any suitable verification methodology may be used for this purpose. For example where the enclave report has been signed with a digital signature quoting module may cause node to verify the authenticity of the digital signature using an appropriate signature verification protocol. If the signature applied to the enclave report is verified quoting module may determine that the enclave report was generated by an enclave on node e.g. memory enclave and not by an unauthorized entity such as malware.

By way of example CPM may cause node to sign an enclave report with an enclave key Ekey which may be specific to memory enclave . In such instances quoting module may cause node to verify the authenticity of the signature to the enclave report using a corresponding key which may have been pre provisioned to quoting module or which may be derived from other information. For example where Ekey is derived from the client processor ID and or the hardware profile of the client quoting module may derive a key that is equivalent to Ekey from such information and compare signatures made with the equivalent key to the signature applied to the enclave report using Ekey.

Once quoting module has verified the authenticity of the enclave report it may determine that the enclave report was generated by a valid enclave on node e.g. enclave and not by an unauthorized entity such as malware. Quoting module may then cause node to generate an enclave quote. The enclave quote may include a copy of the enclave report optionally in combination with other information. One example of other information that may be included in the enclave quote includes a key or keys that may be used by node to verify digital signatures that may be applied to communications from node . For example quoting module may cause node to generate an enclave quote that includes node s public key i.e. Cpub . Further examples of other information that may be included in the enclave quote include the client s platform ID relevant user IDs the security version number SVN of enclave the identity of the ISV that provided enclave a measurement of enclave application specific identification ID combinations thereof and the like.

After an enclave quote has been generated control may return to CPM which may cause node to send the enclave quote to node . For example CPM may cause node to prepare a quoting message to node which may be optionally encrypted using key such as server s public key. CPM may then cause node to transmit the quoting message to node e.g. via network .

In response to the quoting message SPM may cause node to verify the authenticity of the enclave quote included in an enclave message received from node . Verification of the enclave quote may be performed in any manner. For example SPM may cause node to transfer the quoting message to verification service which may be local or remote to node as illustrated in by the hashing of box . Verification service may verify the enclave quote using a suitable verification protocol. In instances where the enclave quote is signed with a digital signature verification service may verify the authenticity of the signature using an appropriate digital signature verification protocol. For example the enclave quote may be signed with a private key of node such as enhanced privacy identification EPID private key. In such a case verification service may verify the authenticity of the signature using a corresponding public key such as an EPID public key.

If the signature applied to the enclave quote is verified SPM may cause node to verify the integrity of memory enclave by analyzing the enclave quote contained in the quoting message. For example SPM may cause node to compare a measurement of enclave in the enclave quote against a whitelist of valid enclave measurements stored in a database that is local to or remote from node e.g. optional database . Additional information included in the enclave quote if any may be verified in a similar manner e.g. by comparing the additional information to a corresponding white list of information stored in optional database .

If all of the verification operations successfully complete SPM may determine that memory enclave on node is valid and trusted. SPM may then cause node to generate a whitelist identity whitelist ID for node and to store all or a portion of the content of the enclave quote in a whitelist database in association with the whitelist ID.

SPM may also cause node to send a message including the whitelist ID to node . In response to such message CPM may cause node to store the whitelist ID to memory enclave . In particular CPM may cause node to seal the whitelist ID and other client authentication credentials e.g. client key s user identification machine identification application specific ID etc. to memory enclave e.g. by encrypting such information with memory enclave s enclave key Ekey .

The technology described herein may thus be used to provision node with a whitelist ID. The whitelist ID and other secrets of node e.g. its platform ID user ID SVN ISV enclave key Ekey enclave measurement etc. may be stored in and or sealed to enclave while not in use and thus may be protected from attack by malware resident on node . The provisioning technology also results in the provisioning of node with a client whitelist ID and other secrets e.g. the contents of an enclave quote which may be stored in memory that is local to or remote from node such as database .

After provisioning node may authenticate itself to node by unsealing the secrets within secure enclave and sending its whitelist ID to node e.g. in a signed message. Node can verify the authenticity of the client by verifying the signature applied to the message and comparing the whitelist ID of the client to whitelist IDs of approved platforms. Because node may unseal the secrets within memory enclave the plaintext of such secrets may be protected from malware or other unauthorized entities resident on client . The technologies of the present disclosure may therefore protect client authentication credentials and other information as it is provisioned to a client stored on a client used on a client and combinations thereof.

In this exemplary messaging flow a user of node may wish to receive digital information e.g. software documents etc. from node . Prior to this point however node may not trust node . Node and node may therefore execute a provisioning method to establish a root of trust and to facilitate provision initial secrets on node .

To begin node or node may initiate provisioning. This concept is illustrated in which depicts node as initiating provisioning. In this case computer readable instructions of CPM when executed may pursuant to element cause node to send a provisioning request MSG to server . For security or another purpose the provisioning request may be encrypted by node e.g. using a single key encryption symmetric key encryption asymmetric key encryption or the like. In some embodiments the provisioning request is protected via an asymmetric key encryption protocol. This concept is illustrated in wherein node encrypts MSG with node s public key Spub.

The method may then proceed to element wherein server provisioning module SPM instructions of SPM when executed may cause node to verify the authenticity of provisioning requests it receives using any suitable verification protocol. For example node may verify a received provisioning request by attempting to decrypt the provisioning request e.g. with its private key i.e. Spriv . If it is able to successfully decrypt the provisioning request with Spriv node may be confident that the request originated from a client having knowledge of Spub. At this point the SPM instructions when executed may cause node to generate a server nonce N server anti replay information using a local or remote source of entropy such as a random number generator.

The method may then proceed to element wherein the SPM instructions when executed may cause node to generate a provisioning response message MSG including nonce N. The SPM instructions may also cause node to sign MSG with a signing key that may be verified by node e.g. node s private key Spriv . Once MSG is signed the SPM instructions may cause node to transmit the signed MSG to node . At this point the method may proceed to elements .

Pursuant to element CPM instructions of CPM when executed may cause node to verify the signature applied to MSG. In instances where node signed MSG with Spriv for example the CPM instructions may cause node to verify the authenticity of the signature using Spub. If the verification succeeds the CPM instructions may cause node to store nonce N in memory enclave . The CPM instructions may also cause node to generate a nonce M client anti replay information using a local or remote source of entropy. Like nonce N the CPM instructions may cause node to store nonce M within memory enclave .

The CPM instructions when executed may further cause node to generate an asymmetric key pair such as may be used in Rivest Shamir Adleman RSA public key encryption. More specifically the CPM instructions may cause node to generate an asymmetric key pair including Cpub and a corresponding private key Cpriv both of which may be stored in memory enclave .

The method may then proceed to element wherein the CPM instructions when executed may cause node to calculate a user data blob userdata . The userdata may encapsulate nonce N nonce M Cpub and optionally other information as discussed previously. The CPM instructions may further cause node to generate an enclave report. Without limitation the enclave report may include a hash of the userdata either alone or in combination with other information as previously described.

The CPM instructions may then cause node to sign the enclave report including a hash of user data and optional identification information with a signing key. In some embodiments the CPM instructions may cause node to sign the enclave report using an enclave key Ekey which may have been pre provisioned within memory enclave e.g. at the time memory enclave was established on node . Ekey may be specific to the hardware of node . That is Ekey may correspond to or be derived from the processor ID of processor a hardware profile of node combinations thereof and the like. Alternatively or additionally Ekey may be specific to the owner of memory enclave e.g. the independent software vendor ISV that established memory enclave on node in which case Ekey may be understood to be an ISV signing key.

Once a signed enclave report has been generated the method may proceed to block wherein the CPM instructions may cause node to validate the signed enclave and generate a signed enclave quote. In this regard the CPM instructions may cause node to forward the signed enclave report to a quoting module such as quoting module of which may be an independent secure enclave executed close to the processor of node and may include computer readable quoting module instructions. In response to receiving the signed enclave report the quoting module instructions may cause node to verify the signature applied to the signed enclave report. For example the quoting module instructions may cause processor to verify the signature applied to the signed enclave report against a signature obtained from a client platform key Pkey key. Pkey may be equivalent to Ekey and may be stored within the quoting module. If the signatures are identical the quoting module may determine that a valid secure enclave on the client generated the signed enclave report.

Once the signed enclave report is validated the quoting module instructions may cause node to generate a secure enclave quote that may include various information as discussed above. The quoting module instructions may further cause node to sign the enclave quote using a signing key such as the client s EPID private key which may have been pre provisioned on the client. The method may then proceed to block wherein the CSM instructions when executed cause node to send a message MSG encapsulating the signed enclave quote to node . As shown in MSG may be optionally encrypted e.g. using the node public key Spub or another key.

The method may then proceed to element wherein SPM instructions when executed may cause node to perform various operations on MSG. For example if node encrypted MSG with Spub the SPM instructions may cause node to decrypt MSG using a decryption protocol and Spriv. Once MSG is decrypted or if MSG was not encrypted the SPM instructions when executed may cause node to verify the digital e.g. EPID signature applied to the signed secure enclave quote using a verification service that is local to or remote from node . In any case the verification service may have knowledge of one or more keys that correspond to the key used by node to sign the enclave quote. For example where the enclave quote was signed with node s EPID private key the verification service may verify the authenticity of the EPID private key using a corresponding EPID public key in accordance with known EPID verification protocols.

The SPM instructions when executed may also cause node to verify the integrity of memory enclave on node . For example the SPM instructions may cause node to compare the enclave measurement included in the secure enclave quote against a whitelist of valid enclave measurements which may be stored in a local or remote database such as database of . If other identifying indicia e.g. the client s machine identifier user ID s of authorized users of node application specific identification information an independent software vendor ISV identifier a security version number SVN of memory enclave etc. is included in the secure enclave quote the CPM instructions may cause node to verify such information as well e.g. by comparing such information to a whitelist of identification indicia stored in database or at another location.

In some instances the signed enclave quote may include a hash of userdata and a nonce e.g. nonce N or nonce M . In those cases the SPM instructions when executed may cause node to verify the userdata hash against a white list of approved userdata hashes. Moreover the SPM instructions when executed may cause node to verify the nonce e.g. for anti replay purposes.

The method may then proceed to element wherein SPM instructions when executed may cause node to store all or a portion of the information in the enclave quote report within a local or remote memory e.g. in optional database . For example the SPM instructions may cause node to store the measurement of enclave client username if included client machine ID if included application specific information if included the hash of userdata and the client public key Cpub in optional database or another data structure. The SPM instructions may also cause node to generate a whitelist ID for node which may be stored in association with information received in the enclave quote. For example the SPM instructions may cause node to store the whitelist ID in database in association with other information received from node .

The method may then proceed to element wherein the SPM instructions may cause node to send the whitelist ID to node . In this regard the SPM instructions may cause node to prepare a message MSG including the whitelist ID which may be optionally signed with Spriv and or encrypted using Cpub. In any case the SPM instructions may cause node to transmit MSG to node via wired or wireless communication e.g. using network .

The method may then proceed to element wherein the CPM instructions when executed may cause node to verify the authenticity of MSG. For example where MSG is signed with node s private key e.g. Spriv the CPM instructions when executed may cause node to verify the authenticity of the signature using a corresponding public key e.g. Spub . Alternatively or additionally if MSG is encrypted with Cpub the CPM instructions when executed may cause node to decrypt MSG within memory enclave using a corresponding private key e.g. Cpriv . In this way the whitelist ID may be obtained by node within memory enclave and thus protected from malware. The CPM instructions may also cause node to seal the whitelist ID to memory enclave e.g. by encrypting the whitelist ID with memory enclave s enclave key.

Thus the above describes how enclaves can be instantiated and then authenticated to one another. Below a discussion addresses policy use.

In and embodiment document use policy and encryption keys are stored in a database on a server e.g. policy infrastructure of remotely located from the platform operating any enclave that executes content e.g. document renderer of and or any enclave that includes an inspection utility such as an AV utility e.g. utility of . A party such as an IT department specifies use policy and access control using a policy engine that runs inside the enclave.

Again referring to a policy is uploaded to a database see infrastructure through a secure communication channel. A protected document is encrypted within the enclave that includes hardened application . An authorized user upon receipt of an encrypted document can view it using the secure document reader component of the client application running inside an enclave. The policy engine after validating that the use policy downloaded securely from the server into the enclave of the document is compatible with the user operation e.g. an AV utility to inspect the content also gets the document decryption key and transfers the key and control to the inspection engine . The inspection engine decrypts the document inside its enclave parses the content and generally inspects the content for malware and the like.

The code i.e. policy engine for enforcing the policy governing the inspection engine is hosted inside an enclave that includes application to prevent a code modification attacks. The enclave may or may not be the same enclave that holds the execution engine e.g. document renderer movie player .

Thus the above shows how a policy may be used to determine whether content should be provided to an inspection engine . However what follows describes a mechanism for how an enclave including application can communicate with an enclave including engine .

As shown the method begins at block . At block node may unseal private key Cpriv its white list ID and optionally public key Spub from its memory enclave using its enclave key Ekey . Without limitation node preferably unseals these items within its memory enclave such that their plaintext is protected from malware.

Once Cpriv the white list ID and optionally Spub are unsealed the method may proceed to block wherein node may generate one or more authentication request messages. The authentication request message s may encapsulate the whitelist ID and optionally other information that may be used to authenticate node . For example the information request message may include a measurement of node s memory enclave the SVN of the client s memory enclave etc. In any case node may sign the authentication request message using Cpriv and may optionally encrypt the request message using Spub. In some embodiments the node s whitelist ID may be included as plaintext in the authentication request message whereas other portions of the message may be signed and optionally encrypted as previously described. In any case node may then send the signed optionally encrypted authentication request message to node .

As will be described later in connection with node may perform authentication and validation operations on authentication request messages received from node . Once server successfully verifies the authenticity of the authentication request messages it may examine the content of such messages to determine if the content therein is valid. If the content is valid node may generate and send a response message to node which may be optionally encrypted with the public key Cpub and optionally signed using the private key Spriv .

Returning to node pursuant to block may monitor for the receipt of response messages from node . Although not shown in if a response message from node is not received or is not received within a pre allocated time limit the method may proceed to block and end. If a response message is received the method may proceed to block wherein node may perform verification operations on the received response message. For example node may attempt to decrypt the response message using Cpriv if the response message was encrypted by node using Cpub. If such decryption is successful node may be confident that the response message originated from a party with knowledge of Cpub i.e. node .

To further verify the authenticity of the response message s node may validate the digital signature applied to such messages by node . For example if node signed a response message using its private key e.g. Spriv node may verify the signature using a corresponding public key e.g. Spub using known signature verification protocols. For this purpose node may at this time unseal Spub within its enclave if Spub was not previously unsealed.

The method may then proceed to block wherein a determination may be made as to whether the response message was successfully validated. If validation of the response message is unsuccessful the method may proceed to block and end. If validation of the response message was successful the method may proceed to block wherein node may establish a secure session communications channel with node . In some embodiments node and node may establish a secure session in which they encrypt messages to one another using their respective public keys. That is node may encrypt messages to client using Cpub and client may encrypt messages to server using Spub. Node and node may decrypt those encrypted messages using their corresponding private keys i.e. Cpriv and Spriv. In this way node and node may securely communicate and exchange information using their corresponding public and private keys.

Alternative or additionally node and node may negotiate a secure session based on the use of a shared session key SSK . By way of example upon their mutual authentication node and node may execute a sign and message authentication code SIGMA protocol or another suitable protocol for establishing an SSK. In any case the SSK may be ephemeral or permanent. If ephemeral the SSK may remain valid for a set number e.g. 1 2 etc. of sessions or for a set time period after which a new SSK may be needed. In any case node and node may use the SSK to encrypt messages to one another while the secure session is active. Because they each have knowledge of the SSK node may decrypt messages encrypted with the SSK from node and vice versa. In this way node and node may securely exchange messages using the shared session key. After the secure session has been established the method may proceed to block and end.

Although the use of a SIGMA protocol to generate and use an SSK is one suitable mechanism for establishing a secure session other mechanisms may also be used and are envisioned by the present disclosure. Indeed any suitable cryptographic protocol may be used for establishing a secure communications session between a client and a server consistent with the present disclosure.

Once a secure session has been established node may send information request messages to node . Such messages may be optionally signed and optionally encrypted using an SSK or the public key Spub. Node may optionally verify and decrypt such messages and transmit the requested information to node . This capability may be of particular use in the enterprise rights management context. Indeed node may use the secure session to securely transmit requests for digital information e.g. content such as movies songs and text licenses to digital information etc. to node and node can use the secure session to provide the requested content in response messages encrypted in accordance with the secure session. Likewise node may use the secure channel to securely distribute modules software etc. to node .

Reference is now made to which is a flow diagram of node operations that may be performed in connection with an exemplary secure information transfer method consistent with the present disclosure. Although not expressly described it should be understood that operations performed pursuant to may be caused by the execution of one or more modules on a node such as SPM or a server enterprise rights management module SERMM .

As shown the method begins at block . At block the node may monitor for receipt of an authentication request message from node . The method may then proceed to block wherein a determination may be made as to whether an information request message has been received. If not the method may loop back to block and repeat. If an authentication request message has been received however the method may continue to block .

As noted previously an authentication request message may include node s whitelist ID as well as a digital signature. Pursuant to block node may verify the whitelist ID in the information request message against a database of pre approved whitelist ID s which may be stored locally or remotely from node e.g. in database of .

If the whitelist ID in the information request message matches a pre approved whitelist ID the method may proceed to block wherein node may validate the digital signature applied to the authentication request message. For example in instances where an authentication request message is signed with node s private key e.g. Cpriv an EPID private key etc. node may validate the signature using a corresponding public key e.g. Cpub an EPID public key etc. which may have been stored in association with the pre approved whitelist ID e.g. in database of node .

The method may then proceed to block wherein a determination may be made as to whether the signature was successfully verified. If not the method may proceed to block and end. If the signature is successfully verified the method may proceed to optional block wherein node may decrypt the information request message if necessary. It is again noted that node may encrypt all or a portion of the information request message using the server s public key Spub in which case node may decrypt such messages using its private key Spriv.

Once decryption is complete or if the information request message was not encrypted the method may proceed to block . Pursuant to this block node may negotiate a secure communications session with node e.g. using a negotiated SSK and or node and node s public and private keys as previously described. Without limitation node and node preferably negotiate an ephemeral SSK which may then be used to encrypt all messages between node and node while the secure communication session is active. The method may then proceed to block and end.

Thus the above describes embodiments for instantiating enclaves authenticating enclaves and communicating between enclaves. What follows are descriptions of embodiments for utilizing elements of these capabilities.

Other embodiments may include a single secure enclave that for example includes a hardened document renderer while an inspection engine is not necessarily included in a trusted computing environment such as a secure enclave.

Further neither of the first and second secure enclaves is necessarily privileged although either or both may be privileged in other embodiments . Thus the applications included in the secure enclaves can process content e.g. play a movie or inspect a movie while at least one of an operating system virtual machine monitor and binary input output system BIOS operating on the platform that includes one of the enclaves includes malware more privileged than the first secure enclave. Such malware may be more privileged than the first secure enclave by nature of the malware being present in the operating system and therefore being privileged.

In block the first secure enclave receives content and block inspects a policy corresponding to the content. These blocks do not necessarily have to occur in this order and may occur independently of one another. The policy may pertain to which inspection engines if any may have access to the content received by the first secure enclave. In other embodiments the whitelist may correspond more generally to other utilities regardless of whether the utilities focus on secure computing that may access the content.

Block includes the first secure enclave authenticating the second secure enclave. This may be in response to inspecting the policy block but that is not necessarily the case in other embodiments. Block does not necessarily demand that the first enclave authenticate itself to the second enclave or vice versa. More essential is that first secure enclave appreciate who the second enclave is in order to later vet the second secure enclave as including an application that may examine the content in question e.g. a song . Authenticate sometimes referred to herein as attestation may include various optional elements. For example authentication may include the second secure enclave communicating a report to the first secure enclave the report block being based on at least one of a an identifier that is specific to at least one a computing platform including the second secure enclave an independent software vendor ISV e.g. a key or signature corresponding to the ISV and a portion of the at least one processor e.g. based on register settings in a processor for the platform that includes the second secure enclave b a nonce generated by the computing platform and c a measurement based on contents included in the second secure enclave. Regarding authentication various identifiers were discussed in regards to including but not limited to a blob of user information nonces for nodes signed enclave reports signed enclave quotes and the like.

Authentication may further include the policy including a whitelist block listing an authorized inspection engine included in the second secure enclave. For example once the first secure node understands who the second secure enclave is the identification or some derivation thereof may be compared to the whitelist to determine if the application of the second secure node should inspect the contents. Thus an embodiment may have a first secure enclave that recognizes the second secure enclave as a trustworthy enclave but still does not authenticate the second enclave because the second enclave is not on the whitelist. Thus if successful the first secure enclave authenticates the second secure enclave in response to inspecting the policy.

Block includes the first secure node communicating encrypted content to the second secure enclave in response to authenticating the second secure enclave. Block includes the second secure enclave decrypting the encrypted content to produce decrypted content and inspecting the decrypted content. Based on this analysis or inspection the second secure enclave authenticates the decrypted content i.e. determines whether the content is objectionable for any reasons such as unrecognized measurement the presence of a malware signature and the like in response to inspecting the decrypted content and communicating a message to the first secure enclave in response to authenticating the decrypted content. A message indicating authenticity leads to block where the first secure enclave decrypts the encrypted content to produce additional decrypted content and processes the additional decrypted content e.g. renders a document plays a song plays a television show in response to receiving the message from the second secure enclave. However a message indicating unauthenticity lack of authenticity leads to block as does unsuccessful authentication in block including disallowing the first secure enclave from processing the unencrypted content derived from the encrypted content in response to the second secure enclave inspecting the decrypted content.

Embodiments of the invention are not limited to a system including both first and second secure enclaves. For example an embodiment is present in the instructions pertaining to the first secure enclave itself. For example an embodiment includes a method executed by at least one processor comprising initializing a first secure enclave comprising a trusted software execution environment that prevents software executing outside the first secure enclave from having access to software and data inside the first secure enclave and the first secure enclave receiving content and inspecting a policy determining whether a malware detection utility may inspect the content based on inspecting the policy authenticating the malware detection utility communicating an encrypted version of the content to the malware detection utility in response to malware detection utility receiving a message from the malware detection utility indicating the content is authenticated and executing the content in response to receiving the message. While this embodiment may interact with a second secure enclave that second secure enclave is not required to fulfill or instantiate the embodiment.

The various enclaves may be included on a single platform e.g. a tablet along with a database including a policy. However those items may be dispersed among various nodes. For example the policy may be included in a cloud based server and an inspection engine may be included on another cloud based server with the hardened rendering engine present on a Smartphone or more generally a mobile computing node.

An embodiment may include an apparatus comprising at least one memory at least one processor coupled to the memory to perform operations comprising initializing a first secure enclave comprising a trusted software execution environment that prevents software executing outside the first secure enclave from having access to software and data inside the first secure enclave and the first secure enclave receiving content and inspecting a policy determining whether an inspection engine module may inspect the content based on inspecting the policy authenticating the inspection engine module communicating an encrypted version of the content to the inspection engine module in response to malware detection utility receiving a message from the inspection engine module indicating the content is authenticated and executing the content in response to receiving the message. The memory may include memory secured by a secure enclave such as memory or of . The processor may include processors and the like.

Again referencing depicts embodiments of hardware bases systems for operating embodiments. Either of nodes may utilize a system such as the system of discussed below. In fact embodiments may be used in many different types of systems. For example in one embodiment a communication device can be arranged to perform the various methods and techniques described herein. Of course the scope of the present invention is not limited to a communication device and instead other embodiments can be directed to other types of apparatus for processing instructions.

Program instructions may be used to cause a general purpose or special purpose processing system that is programmed with the instructions to perform the operations described herein. Alternatively the operations may be performed by specific hardware components that contain hardwired logic for performing the operations or by any combination of programmed computer components and custom hardware components. The methods described herein may be provided as a a computer program product that may include one or more machine readable media having stored thereon instructions that may be used to program a processing system or other electronic device to perform the methods or b at least one storage medium having instructions stored thereon for causing a system to perform the methods. The term machine readable medium or storage medium used herein shall include any medium that is capable of storing or encoding a sequence of instructions transitory media including signals or non transitory media for execution by the machine and that cause the machine to perform any one of the methods described herein. The term machine readable medium or storage medium shall accordingly include but not be limited to memories such as solid state memories optical and magnetic disks read only memory ROM programmable ROM PROM erasable PROM EPROM electrically EPROM EEPROM a disk drive a floppy disk a compact disk ROM CD ROM a digital versatile disk DVD flash memory a magneto optical disk as well as more exotic mediums such as machine accessible biological state preserving or signal preserving storage. A medium may include any mechanism for storing transmitting or receiving information in a form readable by a machine and the medium may include a medium through which the program code may pass such as antennas optical fibers communications interfaces etc. Program code may be transmitted in the form of packets serial data parallel data etc. and may be used in a compressed or encrypted format. Furthermore it is common in the art to speak of software in one form or another e.g. program procedure process application module logic and so on as taking an action or causing a result. Such expressions are merely a shorthand way of stating that the execution of the software by a processing system causes the processor to perform an action or produce a result.

Referring now to shown is a block diagram of a system embodiment in accordance with an embodiment of the present invention. System may be included in for example a mobile computing node such as a cellular phone smartphone tablet Ultrabook notebook laptop personal digital assistant and mobile processor based platform.

Shown is a multiprocessor system that includes a first processing element and a second processing element . While two processing elements and are shown it is to be understood that an embodiment of system may also include only one such processing element. System is illustrated as a point to point interconnect system wherein the first processing element and second processing element are coupled via a point to point interconnect . It should be understood that any or all of the interconnects illustrated may be implemented as a multi drop bus rather than point to point interconnect. As shown each of processing elements and may be multicore processors including first and second processor cores i.e. processor cores and and processor cores and . Such cores may be configured to execute instruction code in a manner similar to methods discussed herein.

Each processing element may include at least one shared cache. The shared cache may store data e.g. instructions that are utilized by one or more components of the processor such as the cores and respectively. For example the shared cache may locally cache data stored in a memory for faster access by components of the processor. In one or more embodiments the shared cache may include one or more mid level caches such as level 2 L2 level 3 L3 level 4 L4 or other levels of cache a last level cache LLC and or combinations thereof.

While shown with only two processing elements it is to be understood that the scope of the present invention is not so limited. In other embodiments one or more additional processing elements may be present in a given processor. Alternatively one or more of processing elements may be an element other than a processor such as an accelerator or a field programmable gate array. For example additional processing element s may include additional processors s that are the same as a first processor additional processor s that are heterogeneous or asymmetric to first processor accelerators such as e.g. graphics accelerators or digital signal processing DSP units field programmable gate arrays or any other processing element. There can be a variety of differences between the processing elements in terms of a spectrum of metrics of merit including architectural microarchitectural thermal power consumption characteristics and the like. These differences may effectively manifest themselves as asymmetry and heterogeneity amongst the processing elements . For at least one embodiment the various processing elements may reside in the same die package.

First processing element may further include memory controller logic MC and point to point P P interfaces and . Similarly second processing element may include a MC and P P interfaces and . MC s and couple the processors to respective memories namely a memory and a memory which may be portions of main memory locally attached to the respective processors. While MC logic and is illustrated as integrated into the processing elements for alternative embodiments the MC logic may be discrete logic outside the processing elements rather than integrated therein.

First processing element and second processing element may be coupled to an I O subsystem via P P interfaces via P P interconnects respectively. As shown I O subsystem includes P P interfaces and . Furthermore I O subsystem includes an interface to couple I O subsystem with a high performance graphics engine . In one embodiment a bus may be used to couple graphics engine to I O subsystem . Alternately a point to point interconnect may couple these components.

In turn I O subsystem may be coupled to a first bus via an interface . In one embodiment first bus may be a Peripheral Component Interconnect PCI bus or a bus such as a PCI Express bus or another third generation I O interconnect bus although the scope of the present invention is not so limited.

As shown various I O devices may be coupled to first bus along with a bus bridge which may couple first bus to a second bus . In one embodiment second bus may be a low pin count LPC bus. Various devices may be coupled to second bus including for example a keyboard mouse communication device s which may in turn be in communication with a computer network and a data storage unit such as a disk drive or other mass storage device which may include code in one embodiment. The code may include instructions for performing embodiments of one or more of the methods described above. Further an audio I O may be coupled to second bus .

Note that other embodiments are contemplated. For example instead of the point to point architecture shown a system may implement a multi drop bus or another such communication topology. Also the elements of may alternatively be partitioned using more or fewer integrated chips than shown in the .

Also while a secure enclave has at times been compared to Intel Secure Enclave sometime referred to as Intel Software Guard Extensions Intel SGX a secure enclave is a form of trusted software execution environment and as used herein and in the claims more generally refers to isolated memory regions for an application and only code processing within the secure enclaves can access data respectively located in the secure enclave.

Example 1 includes a method executed by at least one processor comprising initializing first and second secure enclaves each comprising a trusted software execution environment that prevents software executing outside the first and second secure enclaves from having access to software and data inside the first and second secure enclaves the first secure enclave a i inspecting a policy a ii authenticating the second secure enclave in response to inspecting the policy and a iii communicating encrypted content to the second secure enclave in response to authenticating the second secure enclave and the second secure enclave b i decrypting the encrypted content to produce decrypted content and b ii inspecting the decrypted content.

In example 2 the subject matter of Example 1 can optionally include wherein the policy includes a whitelist listing an authorized inspection engine included in the second secure enclave.

In example 3 the subject matter of Examples 1 2 can optionally include wherein authenticating the second secure enclave includes analyzing a measurement of contents included in the second secure enclave.

In example 4 the subject matter of Examples 1 3 can optionally include wherein the second secure enclave contents include a malware detection utility.

In example 5 the subject matter of Examples 1 4 can optionally include the second secure enclave authenticating the decrypted content in response to inspecting the decrypted content and communicating a message to the first secure enclave in response to authenticating the decrypted content.

In example 6 the subject matter of Examples 1 5 can optionally include the first secure enclave decrypting the encrypted content to produce additional decrypted content and processing the additional decrypted content in response to receiving the message from the second secure enclave.

In example 7 the subject matter of Examples 1 6 can optionally include wherein the first secure enclave is not privileged the method further comprising processing the additional decrypted content while at least one of an operating system virtual machine monitor and binary input output system BIOS includes malware more privileged than the first secure enclave.

In example 8 the subject matter of Examples 1 7 can optionally include wherein the first secure enclave is not privileged.

In example 9 the subject matter of Examples 1 8 can optionally include disallowing the first secure enclave from processing unencrypted content derived from the encrypted content in response to the second secure enclave inspecting the decrypted content.

In example 10 the subject matter of Examples 1 9 can optionally include wherein the first secure enclave includes an isolated memory region within an application s virtual address space and only code processing within the first secure enclave can access data located in the first secure enclave.

In example 11 the subject matter of Examples 1 10 can optionally include wherein the encrypted content includes at least one of video and audio content.

In example 12 the subject matter of Examples 1 11 can optionally include wherein authenticating the second secure enclave includes the second secure enclave communicating a report to the first secure enclave the report being based on at least one of a an identifier that is specific to at least one of a computing platform including the second secure node an independent software vendor ISV and a portion of the at least one processor b a nonce generated by the computing platform and c a measurement based on contents included in the second secure enclave.

An embodiment includes at least one machine readable medium comprising a plurality of instructions that in response to being executed on a computing device cause the computing device to carry out a method according to any one of examples 1 to 12. An embodiment includes means for performing any one of operations from examples 1 to 12. An embodiment includes a communications device arranged to carry out a method according to any one of examples 1 to 12.

Example 13 includes a method executed by at least one processor comprising initializing a first secure enclave comprising a trusted software execution environment that prevents software executing outside the first secure enclave from having access to software and data inside the first secure enclave and the first secure enclave receiving content and inspecting a rights management policy determining whether a malware detection utility may inspect the content based on inspecting the policy authenticating the malware detection utility communicating an encrypted version of the content to the malware detection utility in response to authenticating the malware detection utility receiving a message from the malware detection utility indicating the content is authenticated and processing the content in response to receiving the message.

In example 14 the subject matter of Example 13 can optionally include wherein authenticating the malware detection utility includes analyzing a measurement of at least a portion of the malware detection utility.

In example 15 the subject matter of Examples 13 14 can optionally include processing the content while at least one of an operating system virtual machine monitor and binary input output system BIOS corresponding to the at least one processor includes malware more privileged than the first secure enclave.

In example 16 the subject matter of Examples 13 15 can optionally include wherein the first secure enclave is not privileged.

In example 17 the subject matter of Examples 13 16 can optionally include wherein the first secure enclave includes an isolated memory region within an application s virtual address space and only code executing within the first secure enclave can access the content located in the first secure enclave.

An embodiment includes at least one machine readable medium comprising a plurality of instructions that in response to being executed on a computing device cause the computing device to carry out a method according to any one of claims to .

Example 18 includes an apparatus comprising at least one memory at least one processor coupled to the memory to perform operations comprising initializing a first trusted software execution environment that prevents software executing outside the first trusted software execution environment from having access to software and data inside the first trusted software execution environment and the first trusted software execution environment receiving content and inspecting a policy determining whether an inspection engine module may inspect the content based on inspecting the policy authenticating the inspection engine module communicating an encrypted version of the content to the inspection engine module in response to authenticating the malware detection utility receiving a message from the inspection engine module indicating the content is authenticated and processing the content in response to receiving the message.

In example 19 the subject matter of Example 18 can optionally include wherein the operations comprise processing the content while at least one of an operating system virtual machine monitor and binary input output system BIOS of the apparatus includes malware more privileged than the first trusted software execution environment.

In example 20 the subject matter of Examples 18 19 can optionally include wherein the first trusted software execution environment includes a first secure enclave that is not privileged.

In example 21 the subject matter of Examples 19 20 can optionally include wherein the first secure enclave includes an isolated memory region of the at least one memory within an application s virtual address space and only code executing within the first secure enclave can access data located in the first secure enclave.

While the present invention has been described with respect to a limited number of embodiments those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this present invention.

