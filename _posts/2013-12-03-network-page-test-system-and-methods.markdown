---

title: Network page test system and methods
abstract: Systems and methods for testing a network page without encapsulating the network page with a test environment are presented. A script such as a test injector script may be added to a network page in development. The test injector script may identify one or more tests to run on the network page based, at least in part, on metadata included in the network page. The domain object model (DOM) of the network page may be modified to include tests to be performed on the network page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09262311&OS=09262311&RS=09262311
owner: Amazon Technologies, Inc.
number: 09262311
owner_city: Seattle
owner_country: US
publication_date: 20131203
---
Software applications are typically tested by developers or software testers to remove bugs or programming errors before being released to end users. Often a software application will go through several iterations before being released to end users to remove detected programming errors add features or respond to beta user feedback. Each iteration of the software application may result in additional rounds of testing. Further some applications may have several release versions or updates over time each of which may also have several rounds of testing.

A network page may also be tested by a developer or tester. In some cases network pages may be simple static pages that require little to no testing. However it is often the case that a network page can be complex and sometimes may be as complex as an extensive software application. Further in some cases the network page may be a software application or part of a software application. As such network pages may go through extensive testing and sometimes may be tested as extensively as a complex software application utilizing its own test environment.

It is typically desirable to test an application before releasing it for public consumption. This is true for network pages e.g. webpages as well. As network pages become more complex such as through the inclusion of various scripts e.g. JavaScript ActionScript etc. the complexity of testing the network pages increases. Often the testing requires human interaction to set up the test environment to provide test data and to confirm that the test was successfully executed. This human interaction can make testing a network page both expensive and time consuming.

Further when a network page is modified often the test environment will break. In such cases it may be necessary to update or modify the test environment Updating the test environment each time there is a change to a network page can itself be an expensive and time consuming process. Further many test environments work by encapsulating the network page to be tested. In some cases these test environments can result in false positives and or false negatives because they cannot determine that the structure of the network page may have been modified. In addition in some cases the test environment may not be representative of the end user s environment because it can be difficult to anticipate the configuration of the computing system from which each user may access the network page. Further using the most common computing systems for the test environment may not be sufficient because for example each user may alter the configuration of his or her computing system upon purchase by for example installing different network access applications e.g. browsers peripherals operating systems and or other types of applications.

Certain embodiments of this disclosure present systems and methods for testing a network page without encapsulating the network page within a test environment. In certain embodiments a script such as a test injector script or a test execution service may be added to a network page in development. In some cases the test injector script may be extracted or removed from the network page after completion of testing. In other cases the test injector script may remain in the network page when it is published for user consumption or hosted by a computing system for access by end users e.g. customers or other public users . In certain embodiments by retaining the test injector script in the network page after the network page is published tests may be performed on a production version of the network page such as in response to an error occurring when an end user or consumer accesses the network page.

In certain embodiments the test injector script can identify tests to perform on a network page based on metadata included in the network page. These tests and or data for performing one or more tests may be loaded into the network page. For example upon identifying a test to perform the test injector script may access a source location such as a repository identified by the metadata in the network page to obtain test resources such as test scripts. The test injector script may modify the network page such as by modifying the domain object model DOM of the network page to include the test resource or a link to the test resource.

As previously stated the test injector script can be hosted within the network page and may automatically execute tests within the context of the network page. In certain embodiments including the test injector script in the network page allows for a more seamless test support for network pages as each network page can be associated with one or more test suites and the test injector script can either run the tests ad hoc from a user application e.g. a browser or as part of an automated regression or integration test suite. Further embodiments described herein allow for the identification of tests within production network pages by the addition of metadata to pages which can be used by the test injector script to load and execute tests within the network page without modification of the source network page code. Thus in some cases a separate test version of a network page can be omitted and the same network page code may be used both for testing the network page and for use in a production or non test environment. This feature is in contrast to many test software applications for network pages that typically provide an execution environment or test container that wraps around a network page or encapsulates the network page or which are only capable of testing components of a network page in isolation. The ability to load tests from the test injector script added to a network page can allow for the execution of tests as required. For example on the detection of an anomaly in a specific environment the tests can be invoked to determine specific causes of errors.

Certain embodiments described herein enable testing a network page in situ without having to produce a test version of the network page or test components of the page under test conditions. Further embodiments disclosed herein enable tests to be performed immediately or rapidly or in a deferred mode by for example enabling a user to initiate tests and or enabling tests to be initiated in response to captured errors by for example a network application e.g. a browser . Further the tests may be run in a traditional browser with a graphical user interface in a headless browser or in any other type of network application.

In some cases the insertion of test resources by a test injector script into a network page by modifying the DOM of the network page to include the test resources for testing the network page enables at least some of the test resources to access an Application Programming Interface API for elements included in the network page. In certain embodiments this ability to access the API of page elements enables more accurate testing of a network page compared to test systems or test environments that encapsulate a network page and attempt to test the network page by mimicking a human interacting with the network page. In other words while a number of test environments attempt to fake or mimic button presses and text entry by a user embodiments of the present disclosure can run tests and test code within the context of the network application itself by for example causing portions of the network page to execute. In some cases causing portions of the network page to execute may include accessing the API of elements of the network page.

In some embodiments a network page server network site or other interactive computing system configured to provide access to a network page may include versions of the network page with test metadata and or a test injector script included in the network page. The network page server may then determine upon receiving a request from a user whether a test version of the page should be provided to the user s computing system or whether a production version of the page without test metadata or the test injector script should be provided. If a production version of the page is to be provided the network page server may be configured to strip out or remove the test metadata and or the test injector script and the network page is served or provided to the user s computing system. If instead a developer version of the page is to be provided for testing purposes the test metadata and or the test injector script may be maintained in the network page when it is provided to the requesting user s computing system. The network page server may determine whether to provide the test version or the production version of the network page based on any type of determination factor. For example the determination factor may be based on a command received from a user a lack of a command received a default configuration a location of the user an identity of the user s computing device an Internet Protocol IP address e.g. external to a computing environment versus internal to the computing environment and the like.

The networked computing environment may include an interactive computing system . The interactive computing system may include any system for facilitating tests of a network site or a network page hosted by a network site . In some cases the interactive computing system may be an independent system or associated with an independent organization. In other cases the interactive computing system may itself be a network site or may be included by or associated with one or more of the network sites .

The interactive computing system can include a number of systems for hosting a network page and or for testing a network page. For example the interactive computing system of includes a number of servers a computing device a test repository and a network page test injector . Each of these systems may be used to help host a network page and or to help test a network page. For example one or more of the servers may host a network page and or provide test resources such as test code for testing a network site or a network page hosted by a network site or the interactive computing system . Further the servers may include any type of computing system that enables access to one or more other systems of the interactive computing system . For example the servers may include network servers application servers web servers network page servers and the like. Although the term servers is used to describe the servers the systems of the networked computing environment are not limited to a client server architecture and any other type of architecture for the computing devices of the networked computing environment is possible in the context of the present disclosure.

In some cases a network page test injector can include any system capable of injecting a test injector script into a network page. Injecting the test injector script into the network page may include adding code such as a script to the code of the network page. In other cases injecting the test injector script to the network page may include adding a link to the test injector script to the network page. The test injector script can include any type of software module that can manage tests of a network page including the test injector script. In some cases the test injector script may perform or facilitate tests of other network pages besides the network page that includes the test injector script. For example in some cases a test injector script can test a network page that is linked to the network page including the test injector script. Further the test injector script can identify the tests associated with a network page and access one or more testing resources for performing the tests on the network page that includes the test injector script. In some cases the test injector script can serve as a bootstrap mechanism for initiating testing of a network page by loading one or more test resources in response to a captured error by the test injector script the network page test system or by the network application .

The computing device can include any type of computing device that may be used to test a network page. In an illustrative embodiment the computing device can correspond to a wide variety of computing devices including personal computing devices laptop computing devices hand held computing devices terminal computing devices mobile devices e.g. mobile phones smart phones tablet computing devices etc. wireless devices various electronic devices and appliances video game systems kiosks and the like. In an illustrative embodiment the computing device may include hardware and or software components for establishing communication over a communication network . For example the computing device may be equipped with networking equipment and browser software applications that facilitate communications via a network e.g. the Internet or an intranet. The computing devices may have varied local computing resources such as central processing units and architectures memory mass storage graphics processing units communication network availability and bandwidth etc.

The computing device may include a network application for accessing and or executing one or more network pages. This network application may include any type of application that can access the one or more network pages. For example the network application may include a browser or a mobile application sometimes termed app . Further in some cases the computing device may include a network page test system for injecting a test injector script into a network page that has been accessed by the network application . As illustrated in the network page test system may be included as part of the network application . In other cases the network page test system may be a separate system from the network application . In some embodiments the network page test system may be a hardware device that is in communication with the computing device . In other cases the network page test system may be a separate software application or a software module or plug in for the network application .

The test repository may include a number of data stores or data structures e.g. tables databases etc. for storing test information and test resources. For example the test repository may include a test log data store and a test resources data store . The test log data store may include any type of data related to tests performed on a network page. For example the test log data store may include a record of the tests performed on a network page and the results of the performed tests. The test resources data store may include any type of data or information for facilitating testing of a network page. For example the test resources data store may include data that may be added to elements e.g. text fields forms list selections etc. of a network page under test. As a second example the test resources data store may include one or more test processes test algorithms or test macros for testing a network page under test. In some cases the test resources data store may also include the identity of tests to perform on a network page and or metadata to add to the network page identifying the tests to perform to a test injector script.

Tests of a network page may be initiated by a developer user or non end user such as a test engineer a software developer or an administrator who is developing the network page or is assigned to test the network page. Such a user may use the computing device to initiate testing of a network page hosted by the interactive computing system and or one of the network sites . In such cases the user may manually initiate a test of the network page by for example accessing a button or other interface element included in the network page under test. In other cases the user may access a developer console script console or other network application interface for causing a test process to be initiated on a network page under test. Using such a console the user or developer may execute a bootstrap script that initiates testing. For example the user may type object.test to initiate a JavaScript bootstrap method that runs or initiates a test process. This test process may be performed or initiated by the test injector script included in the network page by the network page test system or the network page test injector . In some cases the test process may be performed by a processor or other hardware of the computing device .

Users or end users may access a network page under test or otherwise using the user computing devices . The user computing devices can include any type of computing device. Further the user computing devices can include some or all of the embodiments described with respect to the computing device . The users may access the network page at the interactive computing system and or at the network sites over a network . The network can include any type of network. For example the network may be a local area network LAN wide area network WAN Wi Fi network cellular network satellite network ad hoc network or combinations of the same. In some cases the network may include the Internet.

As illustrated in the user computing device much like the computing device may include a network application for accessing a network page. Further in some cases the user computing device may include a network page test system for injecting a test injector script into a network page. In some cases the network page test system may include the test injector script and or may be the test injector script.

Although it is typically desirable that testing occur at the interactive computing system e.g. by the computing device in some cases it is advantageous for testing to be performed by the user computing device . For example when an error accessing a network page occurs in response to an end user s access of the network page it is often desirable for at least some tests to be performed in the context of the user s system e.g. the user computing device because for example it may be difficult to replicate the error or the context in which the error occurred at a later time or on a different computing system.

The process begins at block where for example a test injector script identifies one or more tests to run on a network page under test. As previously stated the test injector script may be injected into the network page by a network page test system or a network page test injector . Some example embodiments for identifying the one or more tests to run on the network page are described in more detail with reference to below.

At block the test injector script modifies the network page under test to include one or more test resources corresponding to the identified one or more tests. The one or more test resources can include test scripts e.g. JavaScript ActionScript etc. test data or any other type of testing resource that may facilitate performing one or more tests of a network page. Some example embodiments for accessing the test resources are described in more detail with respect to below. Modifying the network page may include modifying a document object model DOM of the page to include one or more of the test resources identified at the block . Further in some cases modifying the network page may include providing a location for test results to be provided. This location may include another application another computing system a repository and or to a display to present to a user. In some cases the network page may be modified dynamically without a refresh of the network page or of the entire network page. This may be accomplished e.g. using Asynchronous JavaScript and XML Ajax techniques. Some example embodiments for modifying the network page are described in more detail with respect to .

The network application at block executes the one or more tests utilizing the one or more test resources of block . The one or more tests can include any type of test including tests that may be difficult if not infeasible to perform using existing test tools that rely on specialized test environments. For example the types of tests may include tests that require a user to log in as an end user instead of as a special test user with user credentials stored in test code. As a second example the types of tests may include tests that can check specific behavior in specific browsers by performing the tests within the browsers. These types of tests can be more accurate than tests performed by test tools that emulate a browser because for example the emulated browser may not be precise or may not include configuration modifications made by end users. A third example of types of tests that may be performed include regression tests that may be specific to a user browser or other environmental factor associated with an execution environment. In some cases the tests may be executed without generating a test container around the network page or without encapsulating the network page with a test environment. The network application may execute the tests and or initiate test processes by processing nodes of the DOM that include the test resources. In some cases processing the nodes of the DOM that include the test resources may be similar to processing the DOM for a non modified network page. In some embodiments the block may include recording and or logging results of executed tests to a repository such as the test repository . Further in some embodiments after the one or more tests have been executed test resources resource identifiers and or test code may be stripped out or removed from the network page. Removing the test code or resource identifiers may include removing corresponding nodes from the DOM for the network page under test. In some embodiments at least some of the tests may be performed by an external system such as the servers or the interactive computing system .

After the tests are executed a result of the test may be presented to a user e.g. an administrator or test engineer . In some cases the user can review the test results and decide whether modifications should be made to the network page or whether additional testing should be performed. Further a history of the tests performed and the results of the tests may be stored at the test repository . In certain embodiments one or more additional tests may be performed in response to a result of a test. These additional tests may be identified in a number of ways including by metadata in the network page by the test code previously executed by information stored at the test repository and the like.

In some embodiments the process may be performed using a headless network application such as a headless browser. Advantageously in certain embodiments using a headless network application enables testing to be performed in an automated manner. For example in some cases the results of an initial batch of tests may be provided to a network page test system which may then initiate additional tests based on the result of the tests executed at the block . In other words in some cases the test injector script can load a master script that may perform an initial set of tests or actions and based on the result of the tests additional test scripts may be loaded and initiated by the test injector script. One potential benefit of loading tests selectively can be a reduction of the impact testing may have on the performance of the network page. While reducing the performance impact of testing on a network page may be desirable for some or all users it can be particularly desirable when tests are performed on the computing systems of end users who may prevent tests from running to completion if they impact the end users quality of service.

Although the previous example involving a master script is described in the context of a headless browser it is not limited as such. In other words a similar process may be performed with respect to any type of network application . Further using a headless browser or headless application can enable results of performing a test to be stored in a memory or memory buffer. Accordingly the results can be inspected programmatically instead of or in addition to being presented on a display to a user to analyze.

In some cases a computer processor or other hardware device may perform one or more of the blocks of the process in response to a request by the test injector script. For example a hardware processor of the user computing device or of the server may perform some or all of the process in response to a request from the test injector script.

The process begins at block where for example the test injector script detects an occurrence of a trigger to perform a test process on a network page. The network page to be tested may include the test injector script performing the block . However the block is not limited as such. For example in some cases the block may be performed by a network page test system included in a network application . The trigger detected at the block may include receiving a command from a user such as an administrator via a network application interface such as a console or command line interface. Alternatively or in addition the trigger may be the detection of an error. Another example of a test trigger may include a command provided as a query parameter. In some cases this query parameter trigger may cause one or more tests to be run almost immediately or when the network page is accessed. By using a query parameter to initiate testing of a network page a number of network pages may be tested in an automated fashion. In some cases a script or automated tool may be used to initiate testing of a set of network pages by accessing the set of network pages using a query parameter that triggers the testing of the set of network pages.

In some such cases at least some of the process and or may be performed or initiated by overriding or executing code that overrides an error detection method or function native to the network application .

At the block the test injector script may scan the network page to identify a first set of test resources for testing the network page. These test resources may be identified based on metadata or resource declarations included in the network page code. This metadata may be added to the network page by a user such as a developer or administrator of the network page. Further the metadata may identify one or more test resources and or provide a location where one or more test resources may be accessed. An example of test metadata that may be added to a network page is illustrated below in Code Fragment 1.

In some cases the test metadata may include a link to a Cascading Style Sheet CSS file as illustrated in Code Fragment 1. This CSS file may include any type of stylesheet for presenting test results to a user. For example the CSS may cause elements of the network page to be highlighted or encircled by a box if a test related to the elements fails. In some cases the CSS may be omitted from the test metadata. For example test results may be determined based on the behavior of the network page. As a second example a stylesheet included with the network page may present the test results as existing stylesheets may be used to highlight a test result without the inclusion of an additional stylesheet in the test metadata.

At the block the test injector script may load a first set of test resources. As previously described with respect to the block the test injector script may modify the network page under test to include the test resources. These test resources may be included as part of the DOM of the network page under test. Further loading the first set of test resources may include accessing a test repository that includes at least some of the identified test resources. Alternatively or in addition loading the first set of test resources may include accessing a local store or any other system that may be accessible by the user computing device and or computing device for accessing code and or data that may be used as test resources. In some cases loading the first set of test resources may include accessing the servers to load the test resources and or to cause execution of one or more tests corresponding to the identified test resources. In some embodiments the block is omitted. For example if no test resources are identified at the block when scanning the network page the block may be skipped or omitted. As a second example if the identity of test resources included in the network page is overridden or superseded by a user command or the identity of test resources via query parameters the block may be omitted. In cases where some test resources are identified by scanning the network page and some test resources are identified by query parameters the block may be performed for at least the test resources identified by scanning the network page at block .

At block the test injector script may identify a second set of test resources from one or more query parameters. These query parameters may be included as part of a uniform resource locator URL string or uniform resource indicator URI string used to access the network page. In some cases the query parameters may include metadata included as part of the URL or URI. Further as with the metadata described above with respect to the block the query parameters may identify one or more test resources and or provide a location where one or more test resources may be accessed. An example of a URL with query parameters for a network page is illustrated below in Code Fragment 2.

At block the test injector script loads the second set of test resources. The block may include some or all of the embodiments previously described with respect to the block . Further in some embodiments the block is omitted. For example if no test resources are identified at the block when accessing or processing the query parameters or is no query parameters exist the block may be skipped or omitted. As a second example if the identity of test resources included in the query parameters is overridden or superseded by a user command the block may be omitted. In cases where some test resources are identified by scanning the network page and some test resources are identified by query parameters the block may be performed for at least the test resources identified from the query parameters at block .

One example implementation of the process includes adding identified test resources to a dictionary object having one or more key value pairs where the keys represent resource types e.g. stylesheet script etc. and the values are lists of the specific resource URLs. An example of this implementation is illustrated below in Code Fragment 3.

As can be seen from the Code Fragment 3 the add from link method can add stylesheets and scripts to a dictionary object resources that are identified from the network page metadata. In some cases adding the stylesheets and scripts to the dictionary object may ensure that no two elements resolve to the same physical resource and can prevent a test resource from being added to more than once to the DOM. Similarly the add from param method may add stylesheets and scripts identified from query parameters to the dictionary object.

In certain embodiments one or more of the blocks of the process may be performed in a different order and or in parallel. For example the blocks and may be performed before the blocks and . As a second example the blocks and may be performed in parallel. In other embodiments the process is performed specifically in the order illustrated in . Advantageously in certain embodiments by performing the process in the order presented in a user may override the identity of test resources included in the network page with alternative test resources identified via the query parameters. For example in some cases a test resource may be identified by metadata included in the code of the network page. This test resource may be identified as part of the block . A user e.g. a developer user may override this test resource by including the identity of an alternative test resource with the same identifier but a different location as part of a query parameter accessed at the block . In some embodiments the blocks and may be optional. In other embodiments the blocks and may be optional. In other words in some cases test resources may be identified based on metadata included in the network page or based on query parameters but not both. However in other cases as previously described test resources may be identified based on both metadata in the network page code and query parameters.

In some cases a computer processor or other hardware device may perform one or more of the blocks of the process in response to a request by the test injector script. For example a processor of the user computing device of a server may perform some or all of the process in response to the test injector script.

In some embodiments test resources or test scripts may be appended to the bottom of a network page s code. In such cases the test resources or test scripts do not block the rest of the network page from loading. If asynchronous code is used the test resources or test scripts may be inserted throughout the network page code without preventing the network page from being loaded.

One example of a process for modifying a network page such as part of the block is illustrated below in Code Fragment 4. In some cases the code for modifying a network page may be JavaScript that can load additional JavaScript for performing network page tests. As previously stated modifying the network page may include modifying the DOM of the network page to include test resources identified by metadata included in the network page or query parameters included with the URL for accessing the network page. It is notable that in the example of Code Fragment 4 the process of modifying the page occurs if metadata is identified during execution of Code Fragment 3. Thus in some cases the test injector script may be retained in a production network page while removing test metadata without adverse effects. In some such cases future testing may be performed on the production network page by including appropriate query parameters in a URI string for accessing the network page that references test resources stored for example at the test repository .

One example of a resulting network page after the modification of the network page to include one or more test resources identified in the metadata of the network page is illustrated in Code Fragment 5.

As can be seen from the Code Fragment 5 in some cases one or more test frameworks may be utilized to facilitate performing tests associated with the test resources and presenting the results of tests to a user. For example open source JavaScript testing frameworks such as Mocha and libraries such as Chai may be used to facilitate executing the tests. These test frameworks may be added to the network page under test as well as the test resources loaded from the resources dictionary object described with respect to Code Fragment 3.

Further as can be seen in Code Fragment 5 to generate the modified network page which may be obtained by modifying the DOM the CSS links identified in the test metadata of Code Fragment 1 can be transformed by replacing the rel attribute from test stylesheet to stylesheet. Moreover the scripts may be transformed by changing the link element type to a script element type removing the rel attribute adding the type attribute with the value test javascript and changing the attribute name from href to src for the destination link.

A number of computing systems have been described throughout this disclosure. The descriptions of these systems are not intended to limit the teachings or applicability of this disclosure. For example the computing device described herein can generally include any computing device s such as desktops laptops servers and distributed computing systems to name a few. As a second example the user computing device can generally include any computing device s such as desktops laptops servers video game platforms television set top boxes televisions e.g. internet TVs computerized appliances and wireless mobile devices e.g. smart phones PDAs tablets electronic book readers or the like to name a few. Further it is possible for the user systems described herein to be different types of devices to include different applications or to otherwise be configured differently. In addition the user systems described herein can include any type of operating system OS . For example the mobile computing systems described herein can implement an Android OS a Windows OS a Mac OS a Linux or Unix based OS or the like.

Further the processing of the various components of the illustrated systems can be distributed across multiple machines networks and other computing resources. In addition two or more components of a system can be combined into fewer components. For example the various systems illustrated as part of the interactive computing system can be distributed across multiple computing systems or combined into a single computing system. Further various components of the illustrated systems can be implemented in one or more virtual machines rather than in dedicated computer hardware systems. Likewise the data repositories shown can represent physical and or logical data storage including for example storage area networks or other distributed storage systems. Moreover in some embodiments the connections between the components shown represent possible paths of data flow rather than actual connections between hardware. While some examples of possible connections are shown any of the subset of the components shown can communicate with any other subset of components in various implementations.

Depending on the embodiment certain acts events or functions of any of the algorithms methods or processes described herein can be performed in a different sequence can be added merged or left out altogether e.g. not all described acts or events are necessary for the practice of the algorithms . Moreover in certain embodiments acts or events can be performed concurrently e.g. through multi threaded processing interrupt processing or multiple processors or processor cores or on other parallel architectures rather than sequentially.

Each of the various illustrated systems may be implemented as a computing system that is programmed or configured to perform the various functions described herein. The computing system may include multiple distinct computers or computing devices e.g. physical servers workstations storage arrays etc. that communicate and interoperate over a network to perform the described functions. Each such computing device typically includes a processor or multiple processors that executes program instructions or modules stored in a memory or other non transitory computer readable storage medium. The various functions disclosed herein may be embodied in such program instructions although some or all of the disclosed functions may alternatively be implemented in application specific circuitry e.g. ASICs or FPGAs of the computer system. Where the computing system includes multiple computing devices these devices may but need not be co located. The results of the disclosed methods and tasks may be persistently stored by transforming physical storage devices such as solid state memory chips and or magnetic disks into a different state. Each process described may be implemented by one or more computing devices such as one or more physical servers programmed with associated server code.

Conditional language used herein such as among others can might may e.g. and the like unless specifically stated otherwise or otherwise understood within the context as used is generally intended to convey that certain embodiments include while other embodiments do not include certain features elements and or states. Thus such conditional language is not generally intended to imply that features elements and or states are in any way required for one or more embodiments or that one or more embodiments necessarily include logic for deciding with or without author input or prompting whether these features elements and or states are included or are to be performed in any particular embodiment. The terms comprising including having and the like are synonymous and are used inclusively in an open ended fashion and do not exclude additional elements features acts operations and so forth. Also the term or is used in its inclusive sense and not in its exclusive sense so that when used for example to connect a list of elements the term or means one some or all of the elements in the list. In addition the articles a and an are to be construed to mean one or more or at least one unless specified otherwise.

Disjunctive language such as the phrase at least one of X Y or Z unless specifically stated otherwise is otherwise understood with the context as used in general to present that an item term etc. may be either X Y or Z or any combination thereof e.g. X Y and or Z . Thus such disjunctive language is not generally intended to and should not imply that certain embodiments require at least one of X at least one of Y or at least one of Z to each be present.

Unless otherwise explicitly stated articles such as a or an should generally be interpreted to include one or more described items. Accordingly phrases such as a device configured to are intended to include one or more recited devices. Such one or more recited devices can also be collectively configured to carry out the stated recitations. For example a processor configured to carry out recitations A B and C can include a first processor configured to carry out recitation A working in conjunction with a second processor configured to carry out recitations B and C.

While the above detailed description has shown described and pointed out novel features as applied to various embodiments it will be understood that various omissions substitutions and changes in the form and details of the devices or algorithms illustrated can be made without departing from the spirit of the disclosure. Thus nothing in the foregoing description is intended to imply that any particular feature characteristic step operation module or block is necessary or indispensable. As will be recognized the processes described herein can be embodied within a form that does not provide all of the features and benefits set forth herein as some features can be used or practiced separately from others. The scope of protection is defined by the appended claims rather than by the foregoing description. All changes which come within the meaning and range of equivalency of the claims are to be embraced within their scope.

