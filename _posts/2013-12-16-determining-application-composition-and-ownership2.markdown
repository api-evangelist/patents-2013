---

title: Determining application composition and ownership
abstract: Techniques are described for automatically determining application composition and application ownership of an application that may include a plurality of files deployed to a plurality of host devices. The determination of application composition may be based on analyzing various types of metadata that may provide evidence of associations between deployed files, such as metadata describing the deployment of files to host devices, metadata describing the files tracked within a source control system, or other types of metadata. The determination of application ownership may also be based on analyzing the various types of metadata that provide evidence of associations between files and individuals or groups of individuals within an organization.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09575979&OS=09575979&RS=09575979
owner: Amazon Technologies, Inc.
number: 09575979
owner_city: Reno
owner_country: US
publication_date: 20131216
---
To support their operations providers of online services or other computing services may deploy a large number of files across a variety of computing devices that are physically collocated or remote from one another. Such deployments may enable an organization to maintain a quality of service under a variety of operating conditions. However a complex deployment of a large number of files may create challenges related to resource tracking and auditing security quality assurance or other aspects.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. However various aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout.

This disclosure describes implementations of systems devices methods and computer readable media for automatically determining the composition and ownership of an application that includes a plurality of files deployed to and executing on a plurality of computing devices in a complex computing environment. As described herein an application may include any number of files arranged according to any format. The files may include compiled binary machine executable files or libraries. The files may also include scripts or batch files that are executable using a runtime a virtual machine or an execution engine. In some cases the files may include source code or intermediate language code such as Java programming language bytecodes. The files may also include resources such as text files data files images audio files graphics files video files or any other resources that may be included in an application. In some cases the files of an application may include security credentials digital certificates cryptographic keys tokens or other information to ensure confidentiality or integrity of the application or to control access to the application by users processes or devices. The files for an application may also include configuration files describing a configuration of the application execution parameters or settings or other data.

An application may be of any scope and may include any number of files deployed on one or more computing devices. For example an application may be a library loaded into an execution framework or may be a single compiled executable present on a single computing device. As another example an application may be a plurality of separate executables performing different tasks of a service such as front end application programming interfaces APIs back end workflows maintenance processes and so forth. The files of an application may be deployed to installed on or otherwise present on any number of computing devices or within any number of virtual computing environments e.g. hypervisors or virtual machines on a computing device. The files of an application may act in a coordinated manner to perform a related set of operations or functions including but not limited to data processing data storage and retrieval communications providing information to end users and so forth.

In a complex computing environment identifying the files that constitute a particular application may prove challenging. This disclosure describes implementations for identifying one or more files that comprise an application based on an automated analysis of various types of metadata collected in the environment. The metadata may provide evidence that certain files are associated or related with one another such that they comprise an application. The metadata may include deployment metadata that describes the files have been deployed to one or more computing devices. In some cases the deployment of two or more files to a same computing device or class of computing devices may provide evidence that the two or more files are part of a same application particularly in cases where the two or more files are deployed to a single computing device or a single class of computing devices instead of to a broader set of computing devices. The metadata may also include source control metadata that describes check ins to a source control module or system. For example the source control metadata may indicate that two or more files are part of a same branch of a source tree are part of a same check in are owned by a same user in the source control system or have been recently edited by a same user or set of users on a same team. Such information may provide evidence that the two or more files are part of a same application. Implementations may also employ other types of metadata to infer that multiple files are included in an application as described further below.

In some implementations different types of metadata may be analyzed to determine whether two or more files are likely to be included in a same application. The results of such an analysis may be presented to one or more users in the form application composition information. In some cases the application composition information may include a graph such as a directed graph that graphically depicts a strength or degree of association between pairs of files that are inferred to be components of an application based on analysis of the metadata.

Implementations may also automatically determine the ownership of an application based on various types of metadata. As described herein an owner of an application may include any number of individuals or any number of sets of individuals e.g. teams . An owner of an application may include personnel who are at least partly responsible for designing developing deploying or maintaining the application. Accordingly an owner may include any number of personnel who are informed when the application experiences a failure or a security breach or any number of personnel who bear responsibility for the risk of such problems. By determining application composition and ownership in a computing environment implementations enable the identification of ownership or responsibility boundaries between different owners ensure maintainability and operational support for applications and enable other processes such as security reviews and audits.

Implementations may identify a plurality of files that are included in or that are components of an application based on analyzing various types of metadata regarding the files. Implementations may also identify one or more owners e.g. individuals or teams of an application based on analyzing the information regarding individuals or teams associated one or more files of the application as described in one or more types of metadata. As described herein the metadata may be analyzed to determine a relationship association connection correspondence or similarity between files or between users associated with the files.

The host device s may comprise any type of computing device including but not limited to a server computer a personal computer a workstation computer a network computer a cloud computing or distributed computing device a smartphone a tablet computer a wearable computer an implanted computer a mobile gaming device an electronic book reader an automotive computer a desktop computer a laptop computer a thin client a terminal a game console a smart appliance a home entertainment device and so forth. In some cases two or more of the host devices may comprise a cluster cloud farm or other grouping of multiple devices that coordinate operations to provide load balancing failover support parallel processing capabilities shared storage resources or other aspects. In some cases the host device s may include substantially mobile devices such as user devices or substantially less mobile computing devices. In some cases the host device s may host the deployed file s to provide any number or type of computing services to end users. The host device s are described further with reference to .

In some implementations the host device s may execute one or more deployment metadata collection module s . The deployment metadata collection module s may periodically or continuously execute to gather deployment metadata that describes the software that is deployed to or executing on the host device s . For example the deployment metadata may identify one or more deployed files deployed to a host device . In some implementations the deployment metadata may be generated on one or more deployment server device s that execute a deployment module . The deployment module may perform operations for building the deployed file s including compiling source code files to generate object code files and linking the object code files to generate deployed files that are binary executables or libraries. The deployment module may also perform operations for deploying the deployed files to the host device s including copying the deployed files to the host device s or installing the deployed files on the host device s . In some cases the deployment module may execute any number of build or deployment scripts or programs to perform build and deployment operations. The deployment device s may include any type of computing device including but not limited to those types of computing devices listed above with reference to the host device s . In some cases two or more of the deployment devices may comprise a cluster cloud farm or other grouping of multiple devices that coordinate operations to provide load balancing failover support parallel processing capabilities shared storage resources or other aspects. An example of the deployment metadata is described further with reference to .

The environment may also include one or more source control devices that execute a source control module . The source control device s may include any type of computing device including but not limited to those types of computing devices listed above with reference to the host device s . The source control module may perform operations to enable one or more source control users to register files in a source control system to check out files for editing or other modification and to check in modified versions of files. The source control module may track changes made to files by one or more users over time and enable different versions of a file to be compared or merged. The source control module may generate source control metadata that describes the changes made to one or more of the deployed files that are stored and tracked using the source control system. The source control metadata may describe check ins of files the users who made the check ins the dates and times on which the check ins were made and the changes made to the files that were checked in. The source control metadata may also describe for one or more files one or more source control users who are designated as owner s of the file. In some cases the source control module may store and track changes to source code files that may be built by the deployment module to generate binary machine executable files. Such binary files may then be deployed as the deployed files . Alternatively the source control module may store and track changes to the deployed files . Implementations support the use of any source control module that provides a source control system or revision control system. For example the source control module may be the Perforce revision control system provided by Perforce Software Inc. of Alameda Calif. USA. In some cases two or more of the source control devices may comprise a cluster cloud farm or other grouping of multiple devices that coordinate operations to provide load balancing failover support parallel processing capabilities shared storage resources or other aspects.

The environment may also include one or more analysis devices . The analysis device s may include any type of computing device including but not limited to those types of computing devices listed above with reference to the host device s . In some cases two or more of the analysis devices may comprise a cluster cloud farm or other grouping of multiple devices that coordinate operations to provide load balancing failover support parallel processing capabilities shared storage resources or other aspects. An example of the analysis device s is described further with reference to .

The analysis device s may execute an application analysis module . The application analysis module may access the deployment metadata the source control metadata or other metadata. Based on analysis of the various types of metadata the application analysis module may automatically determine one or more deployed files that are components of an application. The application analysis module may also automatically determine one or more individuals or groups of individuals e.g. team s that may be designated as owners of the application based on various users who are associated with the deployed files of the application according to the various types of metadata. In some implementations the application analysis module may include an application composition analysis module and an application ownership analysis module that perform operations to respectively determine application ownership and composition. Although the application composition analysis module and the application ownership analysis module are depicted in as sub components sub modules or sub processes of the application analysis module implementations are not so limited. In some implementations one or both of the application composition analysis module and the application ownership analysis module may operate as separate modules relative to the application analysis module .

The application analysis module or its sub components may generate application composition information and application ownership information . The application composition information may describe one or more deployed files that are determined to be components of a same application. In some cases the application composition information may also describe a likelihood that the deployed file s are part of the application as a relationship metric that describes an extent to which pairs of deployed files are related based on the metadata. An example of the application composition information is described further with reference to . The application ownership information may list one or more users or groups of users e.g. team s that are determined to be owners of an application. Operations of the application analysis module the application composition analysis module and the application ownership analysis module are described further with reference to .

In some implementations the determination of application composition and ownership may be based on other metadata . Such other metadata may include host inventory metadata that describes a number type and identify of the host device s present in the environment . Host inventory metadata may identify hostnames of the host device s the host classes with which the host device s are associated and one or more users who are designated as owners or responsible parties with regard to the host device s . The other metadata may also include security credential metadata describing the assignment of security credentials to users processes or devices. Such security credentials may include logins passwords digital certificates tokens cryptographic keys or other information that enables users devices or processes to access secured hardware or software systems. The other metadata may also include load balancing configurations for load balancing among multiple host devices . In some cases the other metadata may include issue tracking information such as trouble tickets or bug tracking data. The other metadata may also include file deployment or ownership information that has been manually collected from users.

The host device s depicted in may perform any number of software hosting or software providing roles within the environment . In some cases the host device s may include backend server devices or content server devices that generate data to be served to end users connecting to the host device s using client devices. The host device s may also include intermediate server devices or edge server devices that receive and process requests for information and send them on to one or more content servers or backend servers. In some cases the host device s may include cache servers that locally store information to be served to end users. In some cases the host device s may include user devices operated by individuals of an organization that manages the deployment development and maintenance of software. For example the host device s may include user workstations mobile devices e.g. smartphones tablet computers and so forth. Moreover although the host device s the deployment device s the source control device s and the analysis device s are depicted in as separate computing devices implementations are not so limited. In some cases at least some of the operations functions or modules of these computing devices may be executed on one or more computing devices. For example in some cases the source control module and the deployment module may execute on a same computing device or cluster of computing devices.

The various devices of the environment may communicate with one another using one or more networks. Such networks may include public networks such as the Internet private networks such as an institutional or personal intranet or some combination of private and public networks. The networks may include any type of wired or wireless network including but not limited to local area networks LANs wide area networks WANs wireless WANs WWANs wireless LANs WLANs mobile communications networks e.g. 3G 4G etc. and so forth. In some implementations communications between the various devices in the environment may be encrypted or otherwise secured. For example such communications may employ one or more public or private cryptographic keys ciphers digital certificates or other credentials supported by a security protocol such as any version of the Secure Sockets Layer SSL or the Transport Layer Security TLS protocol.

In some implementations the relationship metric indicator may also indicate a direction of the relationship between a pair of deployed files . As shown in the relationship metric indicator may include an arrow or other graphical feature describing a directional of the relationship. In some cases as shown in the example between deployed files and the strength of a relationship between two deployed file s in one direction may be different that the strength in the opposite direction. For example a presence of a deployed file in the application may lead to a strong inference that another deployed file is to be included in the application . In some implementations the application composition information may also describe one or more deployed files that were determined to not be components of an application . In the example of the deployed file is weakly related to the deployed file but the relationship is not sufficiently strong to include the deployed file in the application .

In some implementations determining a degree or strength of a relationship between two deployed files may include calculating a correlation between the two deployed files based on one or more types of the metadata described herein. For example determining a correlation may include calculating a Pearson correlation coefficient describing a confidence of correlation e.g. on a scale from 0 to 1 of two deployed files . In such cases the correlation confidence may be employed as the relationship metric . Some implementations may employ one or more association rule algorithms for generating association rules to be employed to determine correlation between two deployed files . Employed association rule algorithms may include but are not limited to any of the following the Apriori algorithm the Eclat algorithm the FP growth algorithm the General Unary Hypotheses Automaton GUHA procedure ASSOC or the Optimized Pruning for Unordered Search OPUS algorithm.

The analysis device may include one or more input output I O devices . The I O device s may include input devices such as a keyboard a mouse a pen a game controller a touch input device an audio input device e.g. a microphone a gestural input device a haptic input device an image or video capture device e.g. a camera or other devices. In some cases the I O device s may also include output devices such as a display an audio output device e.g. a speaker a printer a haptic output device and so forth. The I O device s may be physically incorporated with the analysis device or may be externally placed.

The analysis device may include one or more I O interfaces to enable components or modules of the analysis device to control interface with or otherwise communicate with the I O device s . The I O interface s may enable information to be transferred in or out of the analysis device or between components of the analysis device through serial communication parallel communication or other types of communication. For example the I O interface s may comply with a version of the RS 232 standard for serial ports or with a version of the Institute of Electrical and Electronics Engineers IEEE 1284 standard for parallel ports. As another example the I O interface s may be configured to provide a connection over Universal Serial Bus USB or Ethernet. In some cases the I O interface s may be configured to provide a serial connection that is compliant with a version of the IEEE 1394 standard. The analysis device may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the analysis device .

The analysis device may include one or more network interfaces that enable communications between the analysis device and other network accessible computing devices such as the host device s the deployment device s or the source control device s . The network interface s may include one or more network interface controllers NICs or other types of transceiver devices configured to send and receive communications over a network.

The analysis device may include one or more memories described herein as memory . The memory comprises one or more computer readable storage media CRSM . The CRSM may include one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions that may describe data structures program modules processes applications or other data for the operation of the analysis device . In some implementations the memory may provide storage of computer readable instructions or other information in a non transitory format.

The memory may include an operating system OS module . The OS module may be configured to manage hardware resources such as the I O device s the I O interface s and the network interface s and to provide various services to applications processes or modules executing on the processor s . The OS module may include one or more of the following any version of the Linux operating system any version of iOS from Apple Corp. of Cupertino Calif. USA any version of Windows or Windows Mobile from Microsoft Corp. of Redmond Wash. USA any version of Android from Google Corp. of Mountain View Calif. USA and its derivatives from various sources any version of Palm OS from Palm Computing Inc. of Sunnyvale Calif. USA and its derivatives from various sources any version of BlackBerry OS from Research In Motion Ltd. of Waterloo Ontario Canada any version of VxWorks from Wind River Systems of Alameda Calif. USA or other operating systems.

The memory may include one or more of the modules described above as executing on the analysis device such as the application analysis module the application composition analysis module or the application ownership analysis module . The memory may also include any number of modules described in as executing on other devices such as one or both of the deployment module and the source control module . In some implementations the memory may include a filter module . The filter module may execute as a sub component of the application analysis module as shown in . Alternatively the filter module may execute as a separate module with respect to the application analysis module . The filter module may apply one or more rules to determine a subset of the deployed files to be analyzed for determining application composition or analysis. For example the filter module may apply rule s to determine that an analysis is to be performed on deployed files that are in production e.g. software modules or other files that are deployed in a production environment to provide services to end users or customers. As another example the filter module may apply rule s such that an analysis is performed on deployed files associated with a particular team group organization product process service region and so forth. In some cases the filter module may determine a subset of deployed files to mitigate the possibility of inaccurate results in determining application composition and ownership. The memory may also include one or more other modules such as a user authentication module or an access control module to secure access to the analysis device and so forth.

The memory may include data storage to store data for operations of the analysis device . The data storage may comprise a database array structured list tree or other data structure and may be a relational or a non relational datastore. The data storage may store data such as that described above including one or more of the deployment metadata the source control metadata the application composition information or the application ownership information . In some implementations the other metadata may be employed to determine application composition or ownership. In such cases the other metadata may also be stored in the data storage . The other metadata may include one or more of the following ownership or assignment for digital certificate cryptographic keys or security credentials load balancing configurations for load balancing among multiple host devices issue tracking information such as trouble tickets or bug tracking data or file deployment or ownership information that has been manually collected from users. The data storage may also store other data such as user authentication information or access control data. In some implementations at least a portion of the information stored in the data storage may be stored externally to the analysis device on other devices that may communicate with the analysis device via the I O interface s or via the network interface s .

The host device may include one or more memories described herein as memory . The memory comprises one or more CRSM as described above with reference to the memory . The memory may include an OS module that is configured to manage hardware resources such as the I O device s the I O interface s and the network interface s and to provide various services to applications processes or modules executing on the processor s . The OS module may include one or more of the operating systems described above with reference to the OS module . The memory may include one or more of the components modules or files described above as present on the host device such as the deployed file s and the deployment metadata collection module s . The memory may also include one or more other modules such as a user authentication module or an access control module to secure access to the host device and so forth.

As shown in the deployed file s may include various types of files that are deployed to the host device . The deployed file s may include executable and non executable files. The deployed file s may include application file s such as machine executable binary files executable script files source code files for applications and so forth. The deployed file s may include library file s . The library file s may include machine executable binary libraries that may be loaded into memory during execution of an application such as dynamic linked libraries DLLs . The library file s may also include application programming interfaces APIs . The deployed file s may include resource s such as text files images video files graphics files or other information that may be accessed by executing applications. The deployed file s may include configuration file s that describe a configuration of an application. The deployed file s may include security credential s such as certificates access credentials tokens cryptographic keys and so forth. The deployed file s may also include other deployed files that store any amount and type of data in any format. The deployed file s may include files that are compressed or uncompressed and may include files that are encrypted or unencrypted.

The memory may include data storage to store data for operations of the host device . The data storage may comprise a database array structured list tree or other data structure and may be a relational or a non relational datastore. The data storage may store data such as that described above including the deployment metadata . The data storage may also store other data such as user authentication information or access control data. In some implementations at least a portion of the information stored in the data storage may be stored externally to the host device on other devices that may communicate with the host device via the I O interface s or via the network interface s .

The deployment metadata may include a list of files deployed to the host device such as the list of deployed files that are currently deployed to or present on the host device . The deployment metadata may include a list of device owners associated with the host device . Such device owners may be one or more individuals or teams of individuals who are at least partly responsible for the operations maintenance errors or failures of the host device . In some cases the deployment metadata may include a list of users who requested the deployment such as one or more users who requested the deployment of one or more deployed files to the host device . Implementations also support the use of other types of deployment metadata for determining application composition and ownership.

The source control metadata may include a description of check ins that included edits to the file and the user s who made the check ins . This information may include the date and time of the check in what changes if any were made to the checked in file through the check in and the one or more source control users who made the check in. In some cases the source control metadata may also include a list of source control users who are designated as owners of the file . The owner s may be those user s who originally created or added the file to the source control system. Implementations also support the use of other types of source control metadata for determining application composition and ownership.

At the deployment metadata is accessed. As described above with reference to the deployment metadata may describe the deployment of a plurality of deployed files to a plurality of computing devices such as the host device s . At the source control metadata is accessed. As described above with reference to the source control metadata may describe check ins made to change one or more source code files through the source control module . At the other metadata may be accessed. The other metadata may include but is not limited to one or more of the following ownership or assignment information for digital certificate cryptographic keys or security credentials load balancing configurations for load balancing among multiple host devices issue tracking information such as trouble tickets or bug tracking data or file deployment or ownership information that has been manually collected from users.

At the information included in one or more of the deployment metadata the source control metadata or the other metadata may be analyzed to determine a plurality of deployed files that are included in the application e.g. as components of the application . In some implementations the analysis may also determine a relationship metric indicating a strength or degree of relationship between pairs of the plurality of deployed files . The analysis of the metadata to determine application composition is described further with reference to .

At the application composition information is generated. The application composition information may describe the plurality of deployed files that were determined to be components of the application as determined at . The application composition information may also include the relationship metric s that describe a strength or degree of relationship between pairs of the deployed files . In some implementations the application composition information may be presented in a graphical form as shown in the example of .

At the information included in one or more of the deployment metadata the source control metadata or the other metadata may be analyzed to determine one or more owners of the application . The owners of the application may include any number of individuals or any number of groups e.g. teams that each include any number of individuals. Determination of application ownership is described further with reference to . At the application ownership information may be generated. The application ownership information may describe the one or more owners of the application as determined at .

At one or more of the deployment metadata the source control metadata or the other metadata are accessed as described above. At based on the deployment metadata a determination is made that at least two deployed files are deployed to a same computing device such as a same host device . In some cases a determination may be made that the at least two deployed files are deployed to different computing devices that are part of a same class type or category of host devices . A host class of host devices may include any number of host devices that have a substantially similar hardware configuration software configuration or function. For example a host class may include any number of host devices that function as backend servers or content servers. As another example a host class may include any number of host devices that have a similar software configuration but that are configured to host different versions of software that serve content to different geographical regions or natural language groups.

At a relationship metric is determined that indicates a degree or strength of a relationship between the at least two deployed files . The relationship metric may be based at least partly on a number of the host devices to which the at least two deployed files are deployed. In some cases the relationship metric may vary in a manner that is substantially inverse with the number of host devices to which the at least two deployed files are deployed. For example if the at least two deployed files are deployed to a single host device the relationship metric may be determined to be high e.g. a strong relationship . Alternatively if the at least two deployed files are deployed to a larger number of host devices the relationship metric may be determined to be lower. Accordingly the at least two deployed files may be determined to be more strongly related if they are deployed to a common set of host devices that are relatively few in number compared to a total number of host devices . In some cases the relationship metric may be a numeric value along any scale from a minimum value e.g. 0 to a maximum value e.g. 100 and a higher numeric value may indicate a higher degree of relationship between the two or more deployed files .

At the relationship metric may be modified based on whether the deployed files are included in a same source code branch a same source code tree or a same source code check in as indicated by the source control metadata . In some implementations the relationship metric may also be modified based on whether the deployed files are associated with a same set of one or more source control users who made check ins to change the deployed files or with a same set of one or more source control users who are designated as owners of the deployed files in the source control system. In some implementations an inference may be made that the deployed files are more strongly related based on whether they are included in a same branch tree or check in or based on whether the same set of users have made changes to the deployed files or are owners of the deployed files . In such cases the relationship metric may be increased based on such evidence of relationship described in the source control metadata .

At the relationship metric may be modified based on whether the deployed files are deployed to a set of computing devices e.g. host devices that exhibit a substantially similar software configuration hardware configuration or function such that the set of computing devices are part of a same host class type category or group as described above with reference to . For example the relationship metric may be modified based at least partly on a number of the host classes to which the deployed files are deployed. In some cases the relationship metric may vary in a manner that is substantially inverse relative to the number of host classes to which the deployed files are deployed. For example if the deployed files are deployed to a single host class the relationship metric may be adjusted upward. Alternatively if the deployed files are deployed to a larger number of host classes the relationship metric may be adjusted downward. Further in some implementations the relationship metric may be modified based on whether the deployed files are deployed to host devices or host classes that share a same computing device owner as described in the deployment metadata .

At the relationship metric may be modified based on other information included in one or more of the deployment metadata the source control metadata or the other metadata . Implementations support the determination of the relationship metric based on any information that may indicate a relationship or an association between two or more of the deployed files . Such information may include but is not limited to any of the following 

The deployed files are deployed to a same set of two or more host devices or to host devices that are within a same host class type category or group 

The deployed files are included in a same source control branch source control tree source control merge or source control check in 

The deployed files share one or more common owners in the source control system or are associated with one or more common source control users who made check ins to change the deployed files 

The deployed files are deployed to a set of two or more host devices that are associated with a same set of one or more computing device owners 

The deployed files make remote calls or participate in other communications with a same set of one or more computing devices or processes such as remote calls to a same remote data storage device to common software modules to a common API and so forth 

The deployed files are granted permission to employ a same set of one or more cryptographic keys digital certificates access credentials tokens or other information to ensure security or control access 

The deployed files may receive and process similar data requests as indicated by load balancing configuration information or

In some implementations one or more of the types of evidence listed above may be weighted differently when determining their contributions to the relationship metric. For example the determination that the deployed files are deployed to a e.g. small number of the same host devices may be weighted more highly in determining the relationship metric relative to the determination that the deployed files are part of a same source control branch or source control check in.

At a determination is made whether the relationship metric is at least a predetermined threshold level. If so the process may proceed to and designate the at least two deployed files as included in the same application . Such a designation may be incorporated into the application composition information . If it is determined at that the relationship metric is below the predetermined threshold level the process may proceed to and continue analysis the deployed files to identify possible relationships among them. Although the example of describes a relationship metric that varies from a lower value to a higher value to indicate relationship strength implementations are not so limited. In some cases a lower relationship metric may indicate a higher relationship strength and a higher relationship metric may indicate a lower relationship strength. In such cases the determination at may determine whether the relationship metric is at or below a predetermined threshold level.

At one or more of the deployment metadata the source control metadata or the other metadata are accessed as described above. At a determination is made of a plurality of deployed files that are included in the application as described above.

At the various types of metadata may be analyzed to determine one or more owners of the application based on one or more users who are associated in some way with the plurality of deployed files that comprise the application . Implementations support the determination of application ownership based on any information that may indicate an association between users and the deployed files . Such information may include but is not limited to any of the following 

One or more source control users who performed check ins or other edits to change the deployed files such as source control user s who made a number of check ins to one or more deployed files at a higher than threshold frequency within a predetermined recent period of time as described in the source control metadata 

One or more source control users who are designated in the source control metadata as owners or responsible parties with respect to the deployed files 

One or more computing device owners of the host device s to which the deployed files were deployed as indicated by the deployment metadata 

One or more deployment requesting users who requested the deployment of the deployed files to the host device s as indicated by the deployment metadata 

One or more users who were the most recent users to touch use or modify the deployed files as indicated in the source control metadata 

One or more users who are the only personnel associated with the deployed files as the sole owners users or deployment requesters of the deployed files as indicated by any type of metadata 

One or more users who are associated with security credentials e.g. who are assigned security credentials such as access credentials e.g. login and password data encryption keys digital certificates security tokens and so forth as described in the other metadata 

One or more users who are designated as responding to trouble tickets bug reports errors failures or operational alarms regarding the deployed files or

One or more users who themselves indicated that they are the owners of the deployed files or the application .

Implementations may employ any of the types of information listed above or other information to determine one or more users who are associated with the deployed files included in the application . Such evidence of ownership of each deployed file may then be analyzed to determine one or more individuals or teams who own the application . In some implementations one or more of the types of evidence listed above may be weighted differently when determining their contributions to ownership determination. For example the determination that one or more users made frequent recent check ins of the deployed files in a source control system may be weighted more highly in determining ownership relative to the determination that the deployed files were deployed to multiple host devices that share a common computing device owner.

At the one or more owners determined at may be designated in the application ownership information . In some implementations the application ownership information may list one or more individuals or teams that have been determined as likely owners of the application . The application ownership information may also list for one or more individuals or teams a likelihood metric or confidence level indicating a level of confidence in the ownership determination. In some cases such a confidence level may be numeric and may range from a low value to a high value. Alternatively the confidence level may be a more subjective measure of confidence such as high medium or low confidence. In cases where a possible conflict in ownership has been detected such as a determination of two or more parties that are substantially likely to be owners of the application the application ownership information may describe the conflicting ownership determination enabling a manual resolution. In cases where no owner may be automatically determined for the application the application ownership information may indicate a default owner as one or more individuals or teams.

In some implementations the automatic determination of application composition and ownership may be incrementally performed periodically to ensure that the application composition information and the application ownership information is up to date. For example the processes described above may operate in response to a determination that a new deployed file has been added to the plurality of deployed files deployed to the host devices . The new deployed file may be analyzed as described above to determine which application if any it is likely to be a component of. The application ownership information for the application may likewise be reanalyzed and updated based on the information regarding one or more users who are associated with the new deployed file . Implementations may then automatically notify the owner s of the application that the new deployed file may be a new component of the application and request confirmation from the owners that the new deployed file is a component of the application .

Those having ordinary skill in the art will readily recognize that certain steps or operations illustrated in the figures above may be eliminated combined or performed in an alternate order. Any steps or operations may be performed serially or in parallel. Moreover the methods described above may be implemented as one or more software programs for a computer system and may be encoded in a computer readable storage medium as instructions executable on one or more processors.

Embodiments may be provided as a computer program product including a non transitory computer readable storage medium having stored thereon instructions in compressed or uncompressed form that may be used to program a computer or other electronic device to perform processes or methods described herein. The computer readable storage medium may be one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium and so forth. For example the computer readable storage media may include but is not limited to hard drives floppy diskettes optical disks read only memories ROMs random access memories RAMs erasable programmable ROMs EPROMs electrically erasable programmable ROMs EEPROMs flash memory magnetic or optical cards solid state memory devices or other types of physical media suitable for storing electronic instructions. Further embodiments may also be provided as a computer program product including a transitory machine readable signal in compressed or uncompressed form . Examples of machine readable signals whether modulated using a carrier or unmodulated include but are not limited to signals that a computer system or machine hosting or running a computer program can be configured to access including signals transferred by one or more networks. For example the transitory machine readable signal may comprise transmission of software by the Internet.

Separate instances of these programs can be executed on or distributed across any number of separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case and a variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations. Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art. It is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

