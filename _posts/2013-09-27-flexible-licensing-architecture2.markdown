---

title: Flexible licensing architecture
abstract: An improved technique involves analyzing a system configuration upon a system boot and sending the configuration to a system configuration database that provides configuration details for enabling features of a software package. Such configuration details take the form of configuration parameters having values that may include, for example, an amount of RAM installed in the system, or the operating system used. The configuration database stores values of these parameters in a persistent store and makes these values available to the system when a software package is launched. At this point, the system accesses the database and obtains the values of the configuration parameters. The system uses these values to determine whether to activate particular features of the software package.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09613192&OS=09613192&RS=09613192
owner: EMC IP Holding Company LLC
number: 09613192
owner_city: Hopkinton
owner_country: US
publication_date: 20130927
---
Commercial software packages typically use licenses to control access to services those packages provide. For example a user who acquires a software package may not be able to use that package until the user provides a code generated when the user submits payment. Once the user provides the code in e.g. a dialog window the license manager verifies that the code matches that in a secure database and allows the execution of the software to proceed.

Sophisticated software packages having multiple features may have separate licenses for each of those features. In this case a conventional licensing architecture provides licensing capability that enables certain features in a software product while not enabling other features. For example a software product may have basic features that are available upon payment of a basic fee and advanced features that are available upon payment of an additional fee. When a user has paid only the basic fee the licensing capability ensures that the license for the basic features is turned on while the license for the advanced features is turned off. Upon payment of the additional fee the user provides a code that turns on the license for the advanced features.

In some arrangements licenses may take the form of feature enablers. Feature enablers are small programs that interact with data structures such as the system registry of Microsoft Windows in order to tune system according to required configuration. In other arrangements however licenses take the form of electronic licenses that include text files containing encrypted codes.

Unfortunately there are deficiencies with the above described conventional licensing architectures. For example consider software for controlling storage systems that requires licenses for features that implement various file and block level services. Such software may require different software images for different deployments such as block only or unified system architectures. Such different software images can be inconvenient especially when a user chooses to upgrade a storage system platform. The user may need to install new software to control licenses even though the software package has not changed. In some cases simply changing hardware setup e.g. increasing RAM or installing optional modules would require a new software image.

Further a software provider would also need to create new software images for each new storage platform. Such new software images would add to the cost of developing software that does not add anything useful from the user s perspective.

Moreover licenses that take the form of feature enablers typically do not node lock the software meaning that such licenses may be used with multiple machines against the wishes of the distributor of the software. Licenses that take the form of electronic licenses on the other hand allow for processes that are not licensed to consume system resources.

In contrast with the above described conventional license architecture which requires different software images for different platforms an improved technique involves analyzing a system configuration upon a system boot and sending the configuration to a system configuration database that provides configuration details for enabling features of a software package. Such configuration details take the form of configuration parameters having values that may include for example an amount of RAM installed in the system or the operating system used. The configuration database stores values of these parameters in a persistent store and makes these values available to the system when a software package is launched. At this point the system accesses the database and obtains the values of the configuration parameters. The system uses these values to determine whether to activate particular features of the software package.

Advantageously the improved technique provides for a single software image that adapts to different system and licensing configurations and provides secure node locked licensing that minimizes the consumption of unnecessary system resources. Because the system undergoes a discovery of its configuration upon a boot it can determine changes in configuration from the previous boot. For example the system may determine if the user upgraded a storage platform from block only to unified block and file between boots. In this case the system may determine the features available to the user given the state of the licenses in concert with the change in platform setup.

One embodiment of the improved technique is directed to a method of operating a computing device configured to run a particular software product the software product including a set of features. The method includes performing an analysis of a system configuration of the computing device the analysis producing values of a set of system configuration parameters upon a boot of the computing device. The method also includes storing the values of the set of system configuration parameters in a system configuration database. The method further includes extracting the values of the system configuration parameters from the system configuration database upon receiving a command to run the particular software product. The method further includes performing for each feature of the set of features an activation decision operation on that feature based on values of the system configuration parameters the activation decision operation resulting in a decision to activate or not activate that feature and associated software modules

Additionally some embodiments of the improved technique are directed to an apparatus constructed and arranged to operate a computing device configured to run a particular software product. The apparatus includes memory and one or more processors coupled to the memory to form controlling circuitry. The controlling circuitry is constructed and arranged to carry out the method of operating a computing device configured to run a particular software product.

Furthermore some embodiments of the improved technique are directed to a computer program product having a non transitory computer readable storage medium which stores code including a set of instructions which when executed by a computer cause the computer to carry out a method of operating a computing device configured to run a particular software product.

Improved techniques of providing for a licensing architecture involves analyzing a system configuration upon a system boot and sending the configuration to a system configuration database that provides configuration details for enabling features of a software package. Such configuration details take the form of configuration parameters having values that may include for example an amount of RAM installed in the system or the operating system used. The configuration database stores values of these parameters in a persistent store and makes these values available to the system when a user launches the software package. When the software package is launched the system accesses the database and obtains the values of the configuration parameters. The system uses these values to determine whether to activate particular features of the software package.

Advantageously the improved techniques provide for a single software image that adapts to different system and licensing configurations. Because the system undergoes a discovery of its configuration upon a boot it can determine changes in configuration from the previous boot. For example the system may determine if the user upgraded a storage platform from block only to unified block and file between boots. In this case the system may determine the features available to the user given the state of the licenses in concert with the change in platform.

Memory is configured to store code containing instructions for computer program . Memory is also configured to store the code for the software product which in turn has features and features as well as license files for software product . Memory is further configured to store a system configuration database . Memory includes RAM and cache in some arrangements memory also includes non volatile memory such as solid state memory or non volatile RAM NVRAM .

System configuration database is configured to store system configuration parameters and their values. In some arrangements system configuration database includes a file containing configuration keys and values the configuration keys represent the system configuration parameters and are a convenient form for lookup operations.

Processor is configured to execute instructions from code e.g. code stored in memory . Processor is coupled to memory . Processor takes the form of but is not limited to Intel or AMD based CPU and can include a single or multi cores each running single or multiple threads.

System configuration discovery module is configured to extract values of system configuration parameters upon a boot of storage processor . System configuration discovery module is launched each time storage processor goes through a boot process. In some arrangements code for system configuration discovery module is stored on a ROM BIOS not depicted in storage processor .

License manager is configured to provide decisions as to which licenses in license files are available for activation.

Feature activation module is configured to provide logic pertaining to which features of software product are to be activated from values of configuration parameters in system configuration database and information from license manager pertaining to which licenses in license files are available for activation. Feature activation module executes instructions stored in code that performs computations based on inputs from system configuration database and license manager and evaluates the results of the computations in light of the logic provided by feature dependencies. Such dependencies will be discussed below in connection with .

Operational details of system configuration discovery module and feature activation module are discussed below in connection with .

Memory configuration module is configured to execute instructions that allocate memory to software product . Memory configuration module is further configured to receive configuration parameters from system configuration database in order to determine how much memory to allocate.

Data services module is configured to select for loading into memory software drivers for features . Data services module is further configured to receive configuration parameters from system configuration database in order to determine which drivers to load into memory .

Interface is configured to provide a communications channel between system configuration database and feature activation module . In some arrangements interface includes an application programming interface API for exposing configuration parameter values to feature activation module . In some further arrangements feature activation module runs within an EMC Common Object Manager ECOM and API is further configured to expose parameter values to other modules within the ECOM such as a Unisphere CLI distributed by EMC Corp. of Hopkinton Mass.

It should be understood that system configuration database includes a persistent store and a cache . Persistent store preserves stored configuration parameter values through a boot of storage processor . Cache on the other hand does not preserve this information through a boot.

During operation a user performs a boot of storage processor . For example the user may be an administrator that performed an upgrade of the storage processor to support file services. In another example the user upgraded the amount of RAM in storage processor . In either case the administrator performed a boot operation in order to effect these changes in storage processor .

In response to the boot operation storage processor invokes system configuration discovery module . For example system configuration discovery module advances through a predetermined checklist stored in a ROM BIOS and extracts values of each parameter in the checklist. In some arrangements however system configuration discovery module is invoked after the operating system loads and consults a checklist stored in memory .

After system configuration discovery module obtains the parameter values that describe the configuration of storage processor system configuration discovery module stores these parameter values in system configuration database . In some arrangements system configuration database receives the parameter values in cache which then stores the values in persistent store .

It should be understood that the parameter values may be stored in persistent store within configuration file see . As discussed above configuration file contains a set of keys representing the various parameters. System configuration database then may be configured to place each parameter value alongside its respective key.

In an example system configuration discovery module reads the platform type of storage supported by storage processor . Platform types may include for example those supporting block based storage only and those supporting both block and file based storage. System configuration discovery module may also check the amount of RAM within memory .

In some arrangements storage processor verifies whether the value corresponding to a key in XML file matches that found by system configuration discovery module . If there is a match then storage processor does not write the parameter value to XML file .

Upon storage of the parameters values storage processor notifies memory configuration module and data services module that system configuration database is ready to be read. Each of the modules and reads the parameter values from system configuration database and allocates memory and selects drivers for features according to the parameter values read. For example in an upgrade from a block only platform to a platform supporting files along with an increase in RAM the modules and allocate an increased amount of RAM and make additional drivers available to allow for file based features to be loaded into memory if appropriately licensed.

At some point later a user attempts to launch software product . For example the user may wish to perform a file based operation such as NFS or DEDUPE. In this case feature activation module reads system configuration database via interface to determine which features may be run on storage processor . Feature activation module also establishes a communication with license manager to determine which features are not only available but licensed. In considering both these factors feature activation module is able to determine through the application of a business logic scheme which features to activate.

Further details of an example feature activation operation for activating features of storage system control software are discussed below in connection with .

Upon a boot of storage processor system configuration discovery module discovers in step a platform type which describes the type of storage platform supported by software product . For example if a parameter PLATFORM TYPE has the value Beachcomber then the feature FILE SERVICES is turned on. On the other hand if PLATFORM TYPE has value Silverbolt then FILE SERVICES is turned off.

Once storage processor determines the value of PLATFORM TYPE storage processor stores the value of PLATFORM TYPE in system configuration database in step . In step storage processor either initializes FILE SERVICES or not according to the value of PLATFORM TYPE.

In step memory configuration module reads system configuration database to determine whether FILE SERVICES has been initiated or not. In step memory configuration module allocates memory to software product according to whether FILE SERVICES has been initiated or not.

In step data services module reads system configuration database to determine whether FILE SERVICES has been initiated or not. In step memory configuration module starts drivers associated with FILE SERVICES or not depending on whether FILE SERVICES has been initiated or not.

In step a user has attempted to launch software product and in response feature activation module reads the value of PLATFORM TYPE from system configuration database . In step feature activation module checks whether FILE SERVICES has been initiated or not. In step feature activation module enables licenses in license files according to the value of PLATFORM TYPE and whether FILE SERVICES has been initiated or not as well as the state of the licenses. In step feature activation module similarly does not enable licenses in license files according to the same.

It should be understood that the initialization of FILE SERVICES has ramifications for other features that depend from FILE SERVICES. Further details of feature interdependence are described below in connection with .

For example the feature FILE SERVICES has dependent features including NFS CIFS and DEDUP . For each of these features there are corresponding licenses and respectively. If FILE SERVICES is turned off e.g. because PLATFORM TYPE silverbolt then each of these features is also turned off. If FILE SERVICES is turned on however then feature activation module consults license manager for the state of the dependent licenses and .

Similarly the feature BLOCK SERVICES has dependent features including iSCSI FAST VP and FAST CACHE with corresponding licenses and . If BLOCK SERVICES is turned off then each of these features is also turned off. If BLOCK SERVICES is turned on however then feature activation module consults license manager for the state of the dependent licenses and .

There may also be other features not dependent upon these base features and . For example the features SNAP REPLICATION and UNISPHERE are always on regardless of the value of PLATFORM TYPE . These features have respective licenses and .

As used throughout this document the words comprising including and having are intended to set forth certain items steps elements or aspects of something in that these are provided by way of example only and the invention is not limited to these particular embodiments. In addition the word set as used herein indicates one or more of something unless a statement is made to the contrary.

It should be understood that the improvement described here has a number of applications including providing a single licensing architecture for a software product.

Having described certain embodiments numerous alternative embodiments or variations can be made. For example the above discussion dealt mainly with determining a licensing configuration based on a recent change in a local system configuration. In some arrangements however storage processor may store configuration information remote from storage processor . Also the examples presented above dealt mainly with storage system applications. Nevertheless the licensing architecture described here may be applied to any other complex software such as simulation software. Further configuration file may be in some arrangements an XML file.

Also the improvements or portions thereof may be embodied as a non transient computer readable storage medium such as a magnetic disk magnetic tape compact disk DVD optical disk flash memory Application Specific Integrated Circuit ASIC Field Programmable Gate Array FPGA and the like. Multiple computer readable media may be used. The medium or media may be encoded with instructions which when executed on one or more computers or other processors perform methods that implement the various processes described herein. Such medium or media may be considered an article of manufacture or a machine and may be transportable from one machine to another.

Further although features are shown and described with reference to particular embodiments hereof such features may be included in any of the disclosed embodiments and their variants. Thus it is understood that features disclosed in connection with any embodiment can be included as variants of any other embodiment whether such inclusion is made explicit herein or not.

Those skilled in the art will therefore understand that various changes in form and detail may be made to the embodiments disclosed herein without departing from the scope of the invention.

