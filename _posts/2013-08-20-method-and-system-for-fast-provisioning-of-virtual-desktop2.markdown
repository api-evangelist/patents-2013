---

title: Method and system for fast provisioning of virtual desktop
abstract: Techniques are disclosed for provisioning a virtual desktop. A VM hosting the desktop may be joined to a domain using offline domain join and customized by modifying contents of a virtual disk of the VM, as per the customization requirements, without powering on the VM. While the VM is powered off, a composer application customizes the VM by applying system and user profile configuration changes and network configuration changes, as well as optionally creating a user data disk and pushing to the VM a script for formatting said disk during the VM's first power-on. In addition, while the VM is powered off, the composer invokes a domain joining tool to join the VM to a domain controller without having to reboot the VM. A snapshot is then taken of the VM, after which the VM is then powered on and the script for formatting the user data disk executes.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09639384&OS=09639384&RS=09639384
owner: VMware, Inc.
number: 09639384
owner_city: Palo Alto
owner_country: US
publication_date: 20130820
---
In virtual desktop infrastructures VDIs desktop operating systems hosted on virtual machines VMs running on centralized servers are delivered as a managed service to end users via a network. Such centralized and automated management of the virtualized operating system applications and user data provides increased control and cost savings.

It is not uncommon for system and network configuration changes to be made and domain membership established before virtual desktops are assigned to end users who then access the virtual desktops like any other computer. The following configuration changes may be made to each virtual desktop during customization hostname changes and network configuration domain membership configuration system profile configuration user profile configuration etc. Typically virtual desktop customization requires multiple VM reboots and live customizations. For example creating domain membership may require a reboot to make the changes take effect and another reboot may be required after a customization script which customizes operating system settings profile redirection registry settings drive letter settings etc. is executed so that a reference snapshot to which the desktop may later be reverted can be taken.

In large scale virtual desktop deployments the customization of VMs according to traditional techniques can be very time consuming. For example deployment of a single desktop from first power on until the creation of the reference snapshot can take 3 to 10minutes of time. In such a case 12 to 15 hours may be required to deploy 1000 desktops. Aside from the time requirement large scale deployments can also have one or more of the following disadvantages due to the reboots required for each VM a boot storm can result there can be large network traffic between the domain controller and the VMs the domain controller must be available at the time of desktop customization as network connectivity problems and unavailability of necessary servers can cause the entire pool of desktops to be in an error state and there can be a lack of security since the domain controller s credentials are shared with all clone VMs.

One embodiment presented herein provides a method for provisioning a virtual desktop hosted on a virtual machine VM without rebooting the VM. The method generally includes before powering on the VM applying configurations and customizations to a virtual disk of the VM by 1 mounting the virtual disk to an application external to the VM 2 loading one or more registry hives from the mounted virtual disk and 3 modifying registry keys in the one or more loaded registry hives. The method further includes joining the VM to a domain before the VM is powered and powering on the VM.

Other embodiments include a computer readable storage medium storing instructions that when executed by a computer system cause the computer system to perform one or more the of the techniques set forth above and a computer system programmed to carry out one or more of the techniques set forth above.

Embodiments presented herein provide techniques for provisioning virtual desktops. As used herein desktop refers to an instance of an interactive operating environment provided by a computer operating system and software applications typically in the form of a display and sound output and keyboard and mouse input and provisioning a desktop refers to creating and deploying a VM which hosts the desktop including assigning and configuring resources such as processors memory network and disk storage associated with the VM as well as joining the VM to a network domain and customizing and configuring the OS and software which run on the VM. In one embodiment virtual desktops may generally be joined to a domain using offline domain join and customized by modifying contents of a virtual disk of a VM which hosts the virtual desktop as per the customization requirements so that changes to the virtual disk take effect for the virtual desktop without powering on the VM. Doing so eliminates the need for multiple reboots as required under traditional customization approaches substantially reducing the time needed to provision virtual desktops.

In one embodiment a VM composer application customizes a VM by applying system and user profile configuration changes and network configuration changes as well as optionally creating a user data disk and pushing to the VM a script for formatting said user data disk for user data redirection during the VM s first power on while the VM is in a powered off state. As used herein a user data disk is a distinct virtual disk to which user data is redirected and stored. Keeping user data in a separate disk permits user data to be unaffected by a reversion operation to a previous VM state among other things as the hypervisor may know not to change the user data disk during such operations. In another embodiment the VM s system drive may be mounted to the composer application and the composer application may edit the VM s registry by loading appropriate registry hives and modifying registry keys therein to make the system user and network configuration changes. In addition while the VM is powered off the composer application may invoke a domain joining tool such as Microsoft Offline Domain Join Djoin.exe to join the VM to a domain controller without having to reboot the VM. A snapshot may be then taken of the VM so that the VM may later be reverted to the snapshot state. Thereafter the VM is powered on and the script for formatting the user data disk executed to format said disk for user data redirection. Once the script has executed the customization is complete and the end user may then log on to the virtual desktop hosted on the VM.

In the following description numerous specific details are set forth in order to provide a thorough understanding of the present invention. However it will be apparent to one skilled in the art that the present invention may be practiced without some of these specific details. In other instances well known process operations and implementation details have not been described in detail in order to avoid unnecessarily obscuring the invention.

VDI system includes a domain controller such as Microsoft Active Directory that manages user accounts including user log in information and a connection broker that manages connections between VDI clients and desktops running in virtual machines or other platforms. Domain controller and connection broker may run on separate servers or in separate virtual machines running on the same server or different servers. In the embodiments of the present invention illustrated herein desktops are running in virtual machines and virtual machines are instantiated on a plurality of physical computers each of which includes virtualization software and hardware is controlled by a virtual machine management server and is coupled to a shared persistent storage system .

As further shown VDI system includes a VM composer server . Although shown as a separate server VM composer server may be integrated with VM management server in an alternative embodiment. VM composer server may include a VM composer application not shown which is responsible for virtual image management by creating linked clone VMs from a single parent virtual image. As used herein a full clone refers to a complete and independent copy of a VM that does not share virtual disks with the parent VM. In contrast a linked clone is a duplicate of a parent VM that shares the same base disk as the parent VM with a chain of redo logs also known as delta disks to track the differences between the parent VM and the linked clone. To provision virtual desktops the composer application may make a full clone of a master VM which is a template having content e.g. OS and applications for the virtual desktops and further create linked clones of the full clone to host the virtual desktops. That is the full clone is created for an entire pool of linked clones and the linked clones created from the full clone and individually customized. In one embodiment when connection broker defines a linked clone pool from a master VM image the composer application interacts with virtual machine management server which consolidates hardware resources and provides said resources to VMs to create the linked clones. In such a case the composer application may respond to the connection broker with the provisioned desktops which may then be pushed by the connection broker to end users. In a particular embodiment the composer application may be a VMware Horizon View Composer.

In one embodiment the composer application may further customize a VM by applying system and user profile configuration changes and network configuration changes as well as optionally creating a user data disk and pushing to the VM a script for formatting said user data disk during the VM s first power on for user data redirection while the VM is in a powered off state. As discussed in greater detail below the composer may mount the VM s system drive load registry hives from said drive and modify registry keys in the hives to make the system user and network configuration changes. The composer application may access virtual disks of the VM including the system drive by invoking an API such as VMware universal file access UFA API which permits access to the virtual disks that are stored as files. Further the composer application may invoke a domain joining tool such as Microsoft Offline Domain Join Djoin.exe to join the VM to a domain controller before the VM is powered on. A snapshot may be then taken of the VM so that the VM may later be reverted to the snapshot state. Thereafter the VM may be powered on and the script for formatting the user data disk executed to format said disk after which the virtual desktop hosted on the VM can be logged into by an end user.

All of the components of VDI system communicate via network . For simplicity a single network is shown but it should be recognized that in actual implementations the components of VDI system may be connected over the same network or different networks. Furthermore a particular configuration of the virtualized desktop infrastructure is described above and illustrated in but it should be recognized that one or more embodiments of the present invention may be practiced with other configurations of the virtualized desktop infrastructure.

At time t the VM is powered on for the first time. After the VM is powered on the VM is added to a domain controller at time t. For example the Microsoft NetJoinDomain utility may be used to add the VM. Such traditional approaches for creating domain membership can result in mass network communication with the domain controller where a large number of virtual desktops are being deployed. Further these approaches typically require a reboot of the VM for changes to take effect. Thus as shown at time t the VM is powered off.

At time t the VM is powered on for a second time. At time t a customization script is run to further customize the VM. This customization may include operating system settings profile redirection registry settings drive letter settings etc. Tools for performing such customization include VMware QuickPrep and Microsoft SysPrep. After all customization is completed a reference snapshot may be taken such that the VM may later be reverted to the snapshot state.

At time t the VM is powered off again for the reference snapshot taken at time t. After the snapshot is taken the VM is powered back on at time t after which point the virtual desktop is ready for first use at time t. The VM may be powered on on a demand basis or based on a spare head room configuration of the pool.

At time t a composer application performs offline customization of the virtual desktop and joins the virtual desktop to a domain. As used herein offline customization refers to customization changes made while the VM is not powered on. That is rather than powering on the VM for live customization a virtual disk file of the VM is accessed while the VM is in the powered off state. Changes may then be made to the virtual disk including load registry hives from the disk and modify registry keys in the hives to make system user and network configuration changes. Doing so eliminates the need for the second reboot in as the VM need not be powered off to take a reference snapshot. Similarly offline domain joining eliminates the need for the first reboot in as the VM may be joined to the domain upon first being powered on with no additional restart required to complete the domain join.

The offline customization may include making changes to system and user profile configuration network configuration if required and optionally creating a user data disk and configuring said user data disk. In one embodiment the offline customization may include mounting the VM s system drive to the composer application loading appropriate registry hives from the mounted disk and modifying registry keys in the registry hives. In the Windows operating system for example the SYSTEM and SOFTWARE hives may be loaded and composer may edit registry keys for system and profile settings to customize the system and user profile configuration. Table 1 shows example registry keys which may be edited in one embodiment. The particular registry keys will generally be OS dependent. Note in Table 1 registry key modifications for Hostname are provided as references. In alternative embodiments domain joining tools such as Djoin.exe may handle hostname and fully qualified domain name FQDN configuration changes.

In another embodiment the composer application may create the user data disk by creating a virtual disk file e.g. a VMware .vmdk file and edit a configuration file for the VM e.g. a VMware .vmx file to attach the virtual disk to the VM. In such a case the composer application may further push a run once script that runs one time during first powering on of the VM to format the newly created disk file for user data redirection among other things. The run once script may generally include any one time activities that are needed for the reference snapshot.

In one embodiment offline domain joining may be accomplished using a tool such as Microsoft Offline Domain Join. Such tools permit VMs to be joined to a domain without being powered on and without requiring a restart thereby reducing the time required for VM deployment. In Microsoft Offline Domain Join for example the composer application may call the djoin.exe application pointing to an Active Directory domain controller server and specifying a computer account name. Djoin.exe may then create in the domain controller a computer account with the specified name and return a computer account metadata file for the VM the domain membership configuration of which may be inserted e.g. by djoin.exe as facilitated anchored by the composer application into the Windows directory of the VM.

At time t the composer application takes a reference snapshot. As discussed the reference snapshot is taken so that the virtual desktop may later be reverted to the snapshot state. Note this snapshot may be taken before all customization is completed as one or more tasks capable of being performed after the snapshot such as formatting a user data disk may be included in the run once script and performed only after the first power on. This is in contrast to traditional customization techniques in which snapshots are taken only after the completion of all customization.

At time t after composer takes the reference snapshot the VM is powered on. If the optional user data disk is created as discussed above the run once script pushed to the VM by the composer application may be invoked upon the powering on at time tto among other things format the user data disk for user data redirection. In addition to formatting the disk any other feasible one time activity which can be performed after the reference snapshot may also be included in the one once script. For example assigning drivers to the user data disk and activation of a Windows operating system may be included as activities of the run once script. After the run once script is executed the virtual desktop is ready for first use at time t.

At step the composer application performs offline customization of the linked clone VM. The offline customization may include mounting a virtual disk of the linked clone to a composer application external to the linked clone VM and editing a registry on the virtual disk. Traditionally similar customization must be performed live i.e. while the VM is powered on as the customization tasks are handled by the operating system of the VM itself with input specifying the customization being pushed to the VM by an external application. In such a case the second reboot illustrated in is required so that a reference snapshot may be taken of the customized virtual desktop. By instead mounting the VM s virtual disk to an external composer application and making changes directly to said virtual disk the VM does not need to be powered on during this process thereby avoiding the need for the second reboot to take the reference snapshot.

As discussed the offline customization may include making changes to system and user profile configuration network configuration if required and optionally creating a user data disk and configuring said user data disk. In one embodiment the system drive of the linked clone VM may be mounted to the composer application. The composer application may then load registry hives from the mounted disk and modify registry keys associated with system user profile and network configurations. For example in the Windows operating system the composer application may load the SYSTEM and SOFTWARE registry hives into a region of memory managed by the composer using the REG LOAD command and composer may edit appropriate registry keys to customize the system and user profile configuration. The composer application may then unload the registry hives. In another embodiment the composer application may create the user data disk and configure said disk by creating a virtual disk file e.g. a VMware .vmdk file editing a configuration file for the VM e.g. a VMware .vmx file to attach the virtual disk to the VM and pushing a script that runs during first powering on of the VM to format the newly created disk file for user data redirection among other things.

At step the composer application initiates offline domain joining for the clone VM. As discussed offline domain joining permits the VM to be joined to the domain when the VM is initially powered on without requiring a reboot. In the Windows operating system for example the offline domain joining may be initiated by the composer application and include two stages. In the first stage the composer application may call the offline domain join application djoin.exe pointing to an Active Directory domain controller server and specifying a computer account name. The syntax for such an operation is djoin.exe provision domain machine savefile . In response djoin.exe may create in the domain controller a computer account with the specified name and return a computer account metadata file for the VM. In the second stage djoin.exe as facilitated anchored by the composer application may insert the domain membership configuration of the metadata file into the Windows directory of the linked clone VM. The syntax for this operation is djoin requestodj loadfile windowspath .

At step the composer application generates a reference snapshot of the linked clone VM. The reference snapshot may be taken with e.g. known techniques so that the virtual desktop may later be reverted to the snapshot state. Note unlike traditional customization approaches the reference snapshot here is taken before all customization is completed as the run once script for further customization is executed only after the snapshot is taken and the VM powered on. Doing so reduces time needed to provision the virtual desktop and declare the desktop ready as one time customization activities are not performed until the VM is initially powered on.

At step the linked clone VM is powered on. At step the linked clone VM runs the run once script to format the user data disk for user data redirection. As discussed any other feasible one time activity capable of being performed after the reference snapshot may also be included in the one once script. For example assigning drivers to the user data disk and activation of a Windows operating system may be included as activities of the run once script. After the run once script is executed the virtual desktop is ready for use.

Advantageously embodiments described herein eliminate the power cycles required in traditional virtual desktop customization techniques thereby reducing the time required to customize each VM. Experience has shown that customization of a single VM according to techniques disclosed herein may take a few seconds e.g. 9 seconds as opposed to a few minutes e.g. 6 minutes required in traditional customization approaches. In a large scale virtual desktop deployment techniques disclosed herein may provide considerable time savings. For example 1000 desktops may be customized in minutes e.g. 20 30 minutes as opposed to hours e.g. 12 15 hours . Further large boot storms may be avoided as reboots are not required during customization. In addition the chances of provisioning errors may also be reduced by eliminating the power cycles and minimizing usage of CPU memory and network resources.

The various embodiments described herein may employ various computer implemented operations involving data stored in computer systems. For example these operations may require physical manipulation of physical quantities usually though not necessarily these quantities may take the form of electrical or magnetic signals where they or representations of them are capable of being stored transferred combined compared or otherwise manipulated. Further such manipulations are often referred to in terms such as producing identifying determining or comparing. Any operations described herein that form part of one or more embodiments of the invention may be useful machine operations. In addition one or more embodiments of the invention also relate to a device or an apparatus for performing these operations. The apparatus may be specially constructed for specific required purposes or it may be a general purpose computer selectively activated or configured by a computer program stored in the computer. In particular various general purpose machines may be used with computer programs written in accordance with the teachings herein or it may be more convenient to construct a more specialized apparatus to perform the required operations.

The various embodiments described herein may be practiced with other computer system configurations including hand held devices microprocessor systems microprocessor based or programmable consumer electronics minicomputers mainframe computers and the like.

One or more embodiments of the present invention may be implemented as one or more computer programs or as one or more computer program modules embodied in one or more computer readable media. The term computer readable medium refers to any data storage device that can store data which can thereafter be input to a computer system computer readable media may be based on any existing or subsequently developed technology for embodying computer programs in a manner that enables them to be read by a computer. Examples of a computer readable medium include a hard drive network attached storage NAS read only memory random access memory e.g. a flash memory device a CD Compact Discs CD ROM a CD R or a CD RW a DVD Digital Versatile Disc a magnetic tape and other optical and non optical data storage devices. The computer readable medium can also be distributed over a network coupled computer system so that the computer readable code is stored and executed in a distributed fashion.

Although one or more embodiments of the present invention have been described in some detail for clarity of understanding it will be apparent that certain changes and modifications may be made within the scope of the claims. Accordingly the described embodiments are to be considered as illustrative and not restrictive and the scope of the claims is not to be limited to details given herein but may be modified within the scope and equivalents of the claims. In the claims elements and or steps do not imply any particular order of operation unless explicitly stated in the claims.

Virtualization systems in accordance with the various embodiments may be implemented as hosted embodiments non hosted embodiments or as embodiments that tend to blur distinctions between the two are all envisioned. Furthermore various virtualization operations may be wholly or partially implemented in hardware. For example a hardware implementation may employ a look up table for modification of storage access requests to secure non disk data.

Many variations modifications additions and improvements are possible regardless the degree of virtualization. The virtualization software can therefore include components of a host console or guest operating system that performs virtualization functions. Plural instances may be provided for components operations or structures described herein as a single instance. Finally boundaries between various components operations and data stores are somewhat arbitrary and particular operations are illustrated in the context of specific illustrative configurations. Other allocations of functionality are envisioned and may fall within the scope of the invention s . In general structures and functionality presented as separate components in exemplary configurations may be implemented as a combined structure or component. Similarly structures and functionality presented as a single component may be implemented as separate components. These and other variations modifications additions and improvements may fall within the scope of the appended claims s .

