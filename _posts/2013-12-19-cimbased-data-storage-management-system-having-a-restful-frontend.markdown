---

title: CIM-based data storage management system having a restful front-end
abstract: Techniques are directed to a method performed by a computing device. The method includes (a) receiving, from a client via a network connection of the computing device, a first management request to manage a data storage system, the first management request being in a RESTful style, (b) generating, by the computing device, a second management request formatted in a non-RESTful style compliant with a back-end storage management protocol, (c) sending the second management request to a back-end storage management server, (d) receiving a first management response from the back-end storage management server in response to the second management request, the first management response being formatted in the non-RESTful style compliant with the back-end storage management protocol, (e) converting, by the computing device, the first management response into a second management response in the RESTful style, and (f) sending the second management response to the client via the network connection.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09432484&OS=09432484&RS=09432484
owner: EMC Corporation
number: 09432484
owner_city: Hopkinton
owner_country: US
publication_date: 20131219
---
Data storage systems are used to store large quantities of data in a fast and integrated manner. Data storage systems are often configured to provide a management interface to a user such as a storage administrator operating a management application in network communication with a management server in communication with the data storage system. The management application allows the user to view information about the configuration and operation of the data storage system.

In a typical arrangement the management server maintains a set of Common Information Model CIM objects in memory in order to represent the state of the data storage system. The management application communicates with the management server using the CIM protocol encoded in XML format CIM XML format .

Unfortunately the above described management applications may suffer from deficiencies. For example the CIM XML format does not allow management data to be processed before being sent to the management application. Thus if the user wishes to see filtered or paged data the management application must apply filtering or paging locally at the client side. This is inefficient because it may require a large amount of data to be sent across the network even though only a small amount of data is desired. It may also be undesirable if the management application is running on a thin client such as a cell phone which does not have much processing power.

Another deficiency with the conventional approach is that since CIM XML does not use REpresentational State Transfer REST compliant communications communication between the management application and the management server using HTTP is not efficient. This is because the HTTP application layer is not aware of the context of the CIM XML communications thus caching of responses to idempotent and nullipotent requests will not function correctly because the HTTP application layer is not aware which CIM XML requests are idempotent or nullipotent. Another deficiency is that most web developers currently prefer to develop RESTful applications so utilizing CIM XML decreases the likelihood that developers will port the management application to a large number of platforms.

In order to alleviate these problems it would be desirable to allow the management client to communicate across the network in a RESTful manner with processing functions being implemented at the server side. Thus in contrast to the above described approaches improved techniques are described for using a web server in front of a CIM based management server to mediate translate and process between RESTful communications with a management application and CIM XML based communications with the CIM based management server.

One embodiment of the improved techniques is directed to a method performed by a computing device. The method includes a receiving from a client via a network connection of the computing device a first management request to manage a data storage system the first management request being in a RESTful style b generating by the computing device a second management request in a non RESTful style compliant with a back end storage management protocol c sending the second management request to a back end storage management server d receiving a first management response from the back end storage management server in response to the second management request the first management response being in the non RESTful style compliant with the back end storage management protocol e converting by the computing device the first management response into a second management response in the RESTful style and f sending the second management response to the client via the network connection. Other embodiments are directed to a system a computerized apparatus and a computer program product for performing methods similar to that described above. These embodiments are advantageous because they allow the management client to communicate across the network in a RESTful manner.

Embodiments are directed to techniques for using a web server in front of a CIM based management server to mediate translate and process between RESTful communications with a management application and CIM XML based communications with the CIM based management server.

In some embodiments not depicted instead of the RESTful web server and the storage system management server running on the same machine they may be realized on separate machines. In addition in some embodiments not depicted the machines on which RESTful server and storage system management server run may be computing devices separate from any of the data storage arrays .

It should be understood that although networks are depicted separately in some embodiments these networks may be shared. Each of networks may be any kind of data communication network such as for example the Internet a local area network LAN a wide area network a storage area network SAN a virtual private network VPN a cellular data network a wireless local area network an interconnected fabric of connections and switches similar systems and combinations thereof. Typically network is the Internet or a VPN operating over the Internet while network is a SAN. In some embodiments not depicted network includes one or more HTTP aware caching servers such as for example a content server within a content delivery network within network . These HTTP aware caching servers may be configured to cache HTTP responses to idempotent and nullipotent HTTP requests in order to reduce HTTP request response latencies.

Client is a computing device operated by a user not depicted such as a storage administrator of data storage system . Client may be any kind of computing device such as for example a personal computer a workstation computer a server computer an enterprise server computer a laptop computer a tablet computer a smart phone etc. Client runs a management application which may be for example a web browser displaying pages downloaded from RESTful server . The user is able to operate the management application to obtain information about the configuration and performance of the data storage system . The user is also able to operate the management application to issue instructions to change the configuration of the data storage system .

Client includes network interface circuitry a processor memory and user interface circuitry not depicted . The user interface circuitry allows the client to interface with the user via user input output devices e.g. display screens keyboards mice printers touch sensitive screens track pads etc. . The network interface circuitry may include an Ethernet card a cellular modem a Wireless Fidelity WiFi wireless networking adapter any other device for connecting to a network or some combination thereof. The processor may be any kind of processor or set of processors configured to perform operations such as for example a microprocessor a multi core microprocessor a digital signal processor a system on a chip a collection of electronic circuits a similar kind of controller or any combination of the above. The memory may be any kind of digital system memory such as for example random access memory RAM . Memory stores an operating system OS e.g. Linux UNIX Windows or similar operating systems and one or more applications including management application and possibly a web browser executing on the processor as well as data used by those programs. In the context of a client applications include the management application and in some embodiments a web browser.

RESTful server is a web server configured to send and receive HTTP messages to from client as well as other clients via network . RESTful server runs a Java Servlet although this is by way of example only other types of applications which extend the behavior of a web server are also envisioned which is configured to translate between RESTful communications with client and non RESTful communications with storage system management server and optional database . Transformation module is configured to translate incoming RESTful requests issued by management application into CIM XML requests that are sent to storage system management server . Transformation module is also configured to translate incoming CIM XML responses issued by storage system management server into RESTful responses that are sent back to the management application . In some cases depending on the nature of the incoming RESTful request processing module may be called upon to process the results from the received CIM XML response prior to being transformed into RESTful response such as by filtering chunking paging etc. as is described below in further detail.

In some embodiments Java Servlet also includes a database interface module which is configured to fulfill certain incoming RESTful requests with reference to an external database rather than by transforming the requests into CIM XML requests sent to the storage system management server . In particular any nullipotent RESTful request which does not alter the configuration of the data storage system may be eligible to be fulfilled via the database rather than by the storage system management server . Generally a RESTful request which includes a GET command is nullipotent and therefore eligible to be fulfilled by database although if the database does not yet contain the requested information it may still be necessary to seek the requested information from the storage system management server by issuing a CIM XML request . Database interface module is configured to send a database request to the database based on the received RESTful request . In response database returns a database response to the database interface module which can then be processed by processing module and transformed into a RESTful response by transformation module .

Storage system management server is a configuration service configured to manage the configuration of data storage system . Storage system management server runs a CIM server application which is configured to receive CIM XML requests process them e.g. by making a change to a configuration detail of the data storage system or by obtaining a set of informative records about the configuration or performance of the data storage system and send back CIM XML responses . Storage system interface module interfaces with the data storage system to obtain configuration and performance data and to modify configuration settings. For example if a CIM XML request is received asking for a list of all LUNs configured on a particular data storage array X storage system interface module might contact a storage processor of that data storage array X in order to obtain the list of LUNs configured on that array X and then CIM server would send back a list of CIM object records one for each LUN as part of the CIM XML response . In some embodiments storage system interface module includes a configuration table which locally stores the configuration data so that the storage system interface module does not need to contact the various data storage arrays every time configuration data is needed. Configuration table may for example maintain various sets of CIM objects representing elements of data storage system . As another example if a CIM XML request is received with an instruction to add a new LUN to a particular data storage array X storage system interface module might contact a storage processor of that data storage array X in order to issue a command to that data storage array X to add the new LUN. As part of the CIM XML response the CIM server might then send back the configuration details of the newly added LUN or it might send back a list of all LUNs configured on that data storage array X .

In some embodiments CIM server also includes a database interface module which is configured to update the database with a database update command . In some embodiments any time CIM server responds to a CIM XML request with a CIM XML response the configuration or performance information included within the CIM XML response is also included within the database update command in order to keep the database up to date. In other embodiments database interface module only sends a database update command to the database when the CIM XML request includes an instruction to modify the configuration of the data storage system e.g. a non nullipotent request involving an HTTP PUT POST or DELETE command or when the CIM XML request includes a request for performance information. In such embodiments it can be assumed that all existing configuration data of the data storage system was previously added to the database when that configuration data was first configured.

Processor may be any kind of processor or set of processors configured to perform operations such as for example a microprocessor a multi core microprocessor a digital signal processor a system on a chip a collection of electronic circuits a similar kind of controller or any combination of the above.

Memory may be any kind of digital system memory such as for example RAM. Memory stores an OS e.g. Linux UNIX Windows or similar operating systems and one or more applications including RESTful server and storage system management server executing on processor as well as data used by those programs including optional database . Memory may also store a database manager application not depicted which may run on processor to provide access to database . Memory also stores storage system drivers not depicted which execute on processor to provide access to data stored in storage .

Storage may be any kind of persistent storage e.g. solid state storage and or disk based storage for storing programs and data not depicted even while the management data storage array is powered off. The OS and the applications are typically stored both in memory and in persistent storage so that they may be loaded into system memory from persistent storage upon a system restart. Applications when stored in non transient form either in system memory or in persistent storage form a computer program product. The processor running one or more of these applications thus forms a specialized circuit constructed and arranged to carry out the various processes described herein. A plurality of disk drives arranged in a RAID configuration typically make up the storage .

It should be understood that any time a piece of software such as for example application in the context of for example management application Java servlet transformation module processing module database interface module CIM server storage system interface module or database interface module is described as performing a method process step or function in actuality what is meant is that a computing device on which that application is running performs the method process step or function when executing that piece of software on its processor .

In step the RESTful server receives a first management request e.g. RESTful request to manage the data storage system the first management request being formatted according to a RESTful style as is well known in the art. Thus for example the RESTful request includes resource representations using HTTP standard methods in a stateless context aware cacheable manner. See for more detail with respect to RESTful request .

In step transformation module generates a second management request e.g. CIM XML request formatted in a non RESTful style compliant with a back end storage management protocol. Thus for example since the storage system management server uses the CIM object format internally to represent objects of the data storage system in a back end manner in one embodiment the non RESTful back end storage management protocol is CIM formatted using XML CIM XML . However even though CIM XML may be transported via HTTP it is not RESTful because it is not a stateless protocol capable of being transported in a context aware cacheable manner i.e. HTTP aware servers treat the CIM XML payload as opaque . Also because CIM XML does not support processing such as filtering chunking or paging transformation module may reduce the scope of the instructions within the RESTful request . For example if RESTful request includes a request for all LUNs on data storage array X with a free capacity less than 1 gigabyte then the CIM XML request will be reduced in scope to instead ask for all LUNs on data storage array X without any filtering. As another example if RESTful request includes a request for all users of the data storage system in a paged manner with five users per page and specifically asking for page 3 then the CIM XML request will be reduced in scope to instead ask for all users of the data storage system without any paging instructions. See for more detail with respect to CIM XML request .

In some embodiments transformation module maintains a table not depicted that establishes a correspondence between RESTful commands of certain types and particular CIM XML functions to be called. For example the table maintained by the transformation module may indicate in a first column a RESTful request including the HTTP GET command operating on a resource api types user instances and in the same row of a second column indicate that the corresponding CIM XML command is the EnumerateInstances function within the EMC UIS User class.

In step Java servlet sends the generated second management request to the back end storage management server e.g. storage system management server .

At this point storage system management server performs activity not depicted within method because it is done external to the RESTful server to generate an object or set of objects e.g. a CIM object or a set of CIM objects in response to the second management request e.g. CIM XML request and send back a response e.g. CIM XML response . Thus for example if the CIM XML request includes an informational request for the set of users with access to the data storage system then storage system interface module collects a set of CIM objects from configuration table that each represent a user of the data storage system . As another example if the CIM XML request includes an instruction to add a new data storage array Y to the data storage system then storage system interface module configures the new data storage array Y to become part of the data storage system and generates a CIM object representing that new data storage array Y . Once the CIM object or set of CIM objects is generated it is formatted into CIM XML format and sent back to the RESTful server as CIM XML response .

In step Java servlet receives a first management response e.g. CIM XML response from the back end storage management server e.g. storage system management server in response to the second management request e.g. CIM XML request sent in step . The first management response is formatted in the non RESTful back end storage management protocol e.g. CIM XML . See for more detail with respect to CIM XML response .

In step transformation module converts the received first management response e.g. CIM XML response into a second management response e.g. RESTful response in the RESTful style. See for more detail with respect to RESTful response .

Depending on the nature of the first management request step will include sub step in which processing module performs processing on the set of CIM object records included within the received first management response e.g. CIM XML response to limit the set of records included in the second management response e.g. RESTful response . For example if the RESTful request included a request for all LUNs on data storage array X with a free capacity less than 1 gigabyte then since the CIM XML request was reduced in scope to instead ask for all LUNs on data storage array X without any filtering the CIM XML response will not have been filtered so it includes CIM object records for all LUNs on data storage array X including some that have less than 1 gigabyte of free capacity and some that do not have less than 1 gigabyte of free capacity. Thus in sub step processing module filters through the CIM object records for all LUNs on data storage array X returned within the CIM XML response . The filtering step examines data elements within individual CIM object records and removes CIM object records that include a free capacity element indicating that those respective CIM object records have at least 1 gigabyte of free capacity.

As another example if the RESTful request included a request for all users of the data storage system in a paged manner with five users per page specifically asking for page 3 then since the CIM XML request was reduced in scope to instead ask for all users of the data storage system without any paging instructions the CIM XML response will not have been paged so it may include more than five CIM object records for more than 5 respective users see below . If for example the CIM XML response includes twenty three CIM objects records representing twenty three users then in sub step processing module pages through the CIM object records for all users returned within the CIM XML response and selects users eleven through fifteen corresponding to a third page of users paged five per page. Processing module may also generate links for first last previous and next pages in the paging sequence see below .

Finally in step Java servlet sends the generated second management response e.g. RESTful response to the client via network in fulfillment of the original RESTful request . Because the RESTful response is RESTful if the original RESTful request was idempotent or nullipotent e.g. including an HTTP PUT GET or DELETE command then the RESTful response may be cached by HTTP aware caching servers along the path between RESTful server and client e.g. within network as a proper response to subsequent identical RESTful requests speeding up future requests and reducing network traffic. As is known in the art this may be accomplished by establishing an HTTP cache within the HTTP aware caching servers with the HTTP responses e.g. RESTful responses keyed to the original HTTP requests e.g. nullipotent or idempotent RESTful requests or hashes thereof. Furthermore if the RESTful response has been limited by processing see sub step then traffic across network is further reduced by reducing the number of object records sent if not all object records are desired. Even if all object records are ultimately desired by the user the latency can be improved since the user may not need to see all of the records at the same time. In addition if the client is a thin client without much processing power e.g. a cell phone the limited RESTful response eliminates the need for the slow client to need to filter through the object records by performing the filtering at the RESTful server .

In some embodiments method is performed as described above for all kinds of RESTful requests . However in other embodiments in order to enhance efficiency the storage system management server may be bypassed for certain kinds of RESTful requests . Thus say that method is first performed to insert a new user into the set of users of the data storage system by using an HTTP POST command to create a new entry in the collection of users. In these embodiments prior to step the database interface module of the CIM server sends a database update command including the list of all users of the data storage system each list entry including full data about all the users. Subsequently if client issues a second RESTful request to view the list of all users of the data storage system there is no need to go back to the CIM server for the list of users because that information is already in the database which is directly accessible to the RESTful server . Thus instead of performing method after the Java servlet receives the second RESTful request the database interface module of the Java servlet issues a database request to the database requesting the list of users after which the database interface module of the Java servlet receives a database response from the database with the full list of users allowing the transformation module to generate a second RESTful response to provide that user list to the client .

Thus techniques have been described for placing a web server e.g. RESTful server in front of a storage system management server to mediate translate and process between RESTful communications with a management application and CIM XML based communications with the storage system management server .

While various embodiments of the present disclosure have been particularly shown and described it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the spirit and scope of the present disclosure as defined by the appended claims.

For example although various embodiments have been described as being methods software embodying these methods is also included. Thus one embodiment includes a tangible non transitory computer readable storage medium such as for example a hard disk a floppy disk an optical disk computer memory flash memory etc. programmed with instructions which when performed by a computer or a set of computers cause one or more of the methods described in various embodiments to be performed. Another embodiment includes a computer which is programmed to perform one or more of the methods described in various embodiments.

Furthermore it should be understood that all embodiments which have been described may be combined in all possible combinations with each other except to the extent that such combinations have been explicitly excluded.

Finally even if a technique method apparatus or other concept is specifically labeled as conventional Applicants make no admission that such technique method apparatus or other concept is actually prior art under 35 U.S.C. 102 or 35 U.S.C. 103 such determination being a legal determination that depends upon many factors not all of which are known to Applicants at this time.

