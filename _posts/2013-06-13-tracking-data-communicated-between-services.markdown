---

title: Tracking data communicated between services
abstract: Techniques are described for tracking data objects transferred among multiple services in a computing environment. Services that are involved in the transfer of data objects may be instrumented to generate recordings that describe outbound and inbound transfers of data objects. The recordings may be analyzed to identify key-value pairs included in the transferred data objects, where the key corresponds to a data attribute that stores a particular value in a data object. For each pair of keys that are associated with a same or substantially similar value, a correlation metric may be updated for each instance of association. Over time, the correlation metric may indicate a higher degree of correlation for those pairs of keys that frequently share a same value. Pairs of keys exhibiting an above-threshold correlation count may be designated as related in that they are involved in the transfer of data objects.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09256657&OS=09256657&RS=09256657
owner: Amazon Technologies, Inc.
number: 09256657
owner_city: Reno
owner_country: US
publication_date: 20130613
---
Commercial enterprises and other organizations often generate and store large amounts of data related to their operations. For example an online business may generate and store data describing products sale transactions customers vendors online activities of customers and so forth. Because such data may be transferred between multiple services or systems it may be challenging to identify a particular service or system that originates corrupted data. Traditionally the source code of services involved in the data transfer may be manually examined to trace corrupted data back to its origin. However such manual examination of source code may be time consuming or unreliable.

Certain implementations and embodiments will now be described more fully below with reference to the accompanying figures in which various aspects are shown. However various aspects may be implemented in many different forms and should not be construed as limited to the implementations set forth herein. Like numbers refer to like elements throughout.

This disclosure describes implementations of systems devices methods and computer readable media for tracking data objects transferred among multiple services or systems in a computing environment. Services that are involved in the transfer of data objects may be instrumented or otherwise modified to generate recordings that describe outbound and inbound transfers of data objects. The recordings may be analyzed to identify key value pairs included in the transferred data objects in which the key corresponds to a data attribute that stores a particular value in a data object. For each pair of keys that are associated with a same value a correlation metric may be updated for each instance of association. Over time the correlation metric may indicate a higher degree of correlation for those pairs of keys that frequently share a same value. Pairs of keys exhibiting an above threshold correlation metric may be designated as related in that they frequently transfer data objects between one another.

The determined relationships may be employed to trace the path followed by a data object as it is transferred among multiple services in a computing environment. The relationships may also be employed to identify a system or service that originates the data included in a particular data object. When a determination is made that data in a particular data object is corrupted the correlation information may be employed to trace the path followed by the corrupted data back to its originating service or system. In this way implementations may enable an identification of the origin of corrupted data without examination of the source code of the various services involved in the data transfer. Accordingly implementations provide a means of determining the origin of corrupted code that may be at least partly automated and that may be more reliable and more efficient than traditional methods for identifying an origin of corrupted data.

A data object may include a collection of any amount of data that is stored in any format. The data included in a data object may be any type of data. In some cases the data may be generated and employed in an electronic commerce environment in computing systems that support the operations of one or more online merchants of products or services. For example a data object may include information describing orders items within an order shipments payments refunds payment instruments financial records customers vendors suppliers and so forth. In some cases the data in the data object may be encrypted encoded or otherwise secured against unauthorized access. For example the data objects transferred among services in a computing environment may be encrypted using any version of the Secure Sockets Layer SSL or Transport Layer Security TLS protocol and the services that send and receive data objects may employ one or more public or private cryptographic keys digital certificates or other credentials to encrypt and decrypt the data included in the data objects. In some implementations the data objects may be formatted according to a particular structure or schema that includes metadata described in a markup language such as the Extensible Markup Language XML . In some cases the data objects may be arranged according to a version of the JavaScript Object Notation JSON standard described in the Network Working Group Request for Comments RFC 4627.

A service may include any type of software that executes on a computing system to provide functionality to users or to other services in communication with the computing system over a network. In some cases a service may include an Application Programming Interface API that exposes one or more methods or functions to be employed by other processes or services. For example a service that provides access to shipment information stored in a data storage system may expose methods for retrieving a shipment record from the data storage system storing a new shipment record modifying an existing shipment record determining a number of stored shipment records and so forth. A service may provide or expose any number of methods or functions that are accessible to users or to other services. Such methods or functions may be public and substantially accessible without restriction. Alternatively such methods or functions may be private and accessible to particularly designated users or services.

Each of the service provider server devices may include one or more service modules that execute on the service provider server device to provide one or more services. In some implementations the service provider server devices may include an audit data collection module that generates data object transfer recording data . In some implementations service module s may be instrumented or otherwise modified to include the audit data collection module . Alternatively the audit data collection module may execute separately from the service module s . Each of the service provider server devices may host and execute any number of service modules . The data object s may be transferred between service modules executing on different physical or virtual service provider server devices or between service modules executing on a same physical or virtual service provider server device .

The data object transfer recording data may include one or more transfer recordings that describe one or more transfers of one or more data objects to or from the service provider server device . The data object transfer recording data may include information describing a sender or a receiver of a transferred data object and a date and time when the data object was sent or received. The data object transfer recording data may also include information describing the network used to transfer the data object such as the secure or non secure communication protocol employed the latency speed throughput capacity or bandwidth of the network a time to live TTL of the network connection or communication session or other information regarding the network.

The data object transfer recording data may also include a description of at least a portion of the data included in the transferred data object . This description may include key value pair information including one or more keys corresponding to data attributes in the data object and one or more values associated with the one or more keys. For example in cases where the data object includes a key corresponding to a data attribute price with a value 19.99 USD the data object transfer recording data may include a key value pair of price associated with 19.99 USD. The data object transfer recording data may include data in any format.

The service provider server devices may each send data object transfer recording data to audit data storage which stores the data object transfer recording data . The audit data storage may include any number of data storage systems that employ any type of data storage technology. The audit data storage may include a relational datastore that employs a relational storage format including one or more formally described tables each table including one or more columns associated with data attributes. The audit data storage may include a non relational datastore such as a hierarchical database a network database a key value datastore a hash table a document store a flat file an associative array and so forth. The audit data storage may include but is not limited to data storage systems managed through any of the following Oracle MySQL Lotus Notes Lotus Domino and Oracle NoSQL database from Oracle Corporation of Redwood City Calif. DB2 from International Business Machines IBM Corporation of Armonk N.Y. Linter from the RELEX Group of Voronezh Russia FoxPro database management system Microsoft Access and Microsoft SQL Server from Microsoft Corporation of Redmond Wash. PostgreSQL from the PostgreSQL Global Development Group SQLite from D. Richard Hipp ParAccel Analytic Database from ParAccel Incorporated of San Diego Calif. Hadoop and CouchDB from the Apache Software Foundation or any type of NoSQL database.

The environment may include a data tracking server device which may be any type of computing device including those listed above with reference to the service provider server devices . The data tracking server device is described further with reference to . The data tracking server device may execute one or more software modules including a data correlation module . The data correlation module may retrieve the data object transfer recording data and analyze the data object transfer recording data to identify correlations between keys described in the data object transfer recording data . In some implementations the data correlation module may include a data normalization module which performs operations to normalize or otherwise process the data object transfer recording data prior to its analysis by the data correlation module . In some implementations the data normalization module may process the data object transfer recording data to identify one or more key value pairs included in the data object transfer recording data . The data normalization module may generate a processed e.g. redacted or flattened version of the data object transfer recording data that includes a list of one or more key value pairs extracted from the data object transfer recording data but that may not include other data originally present in the data object transfer recording data . The data normalization operations performed by the data normalization module are described further with reference to .

In some implementations the data correlation module may analyze the key value pairs extracted from the data object transfer recording data and identify pairs of keys that are associated with a same value. Alternatively the data correlation module may identify pairs of keys that are associated with values that are substantially similar in that they are within a predetermined threshold range of one another. For each pair of keys that have a same value or a substantially similar value the data correlation module may create or update correlation information that describes a level of association between the pair of keys. In some implementations the correlation information may include a list of pairs of keys and each pair of keys may be associated with a correlation metric that tracks a level of association between the keys. For example the correlation metric may be a correlation count of a number of instances when the pair of keys was associated with a same or substantially similar value. The correlation information is described further with reference to .

Over time the correlation metric may indicate a higher level of correlation for those pairs of keys that more frequently share a same or similar value compared to other pairs of keys. The correlation information may be employed by a data tracking module to determine relationships between services based on the correlation information . In some implementations pairs of keys that exhibit a correlation metric above a predetermined threshold may be designated as related in that the services associated with the keys frequently transfer data objects between one another. Such relationships may be employed to identify an origin system or origin service for a particular set of data included in a data object . Based on its analysis of the correlation information the data tracking module may generate data tracking information that describes at least a portion of a path followed by a data object as it is transferred among the service provider server device s and the server module s in the environment . Operations of the data tracking module are described further with reference to .

The various devices of the environment may communicate with one another using one or more networks. Such networks may include public networks such as the Internet private networks such as an institutional or personal intranet or some combination of private and public networks. The networks may include any type of wired or wireless network including but not limited to local area networks LANs wide area networks WANs wireless WANs WWANs wireless LANs WLANs and mobile communications networks e.g. G G and so forth . In some implementations communications between the various devices in the environment may be encrypted or otherwise secured. For example such communications may employ one or more public or private cryptographic keys digital certificates or other credentials supported by a security protocol such as any version of the SSL or the TLS protocol.

The service provider server device may include one or more input output I O devices . The I O device s may include input devices such as a keyboard a mouse a pen a game controller a touch input device an audio input device e.g. a microphone an image capture device e.g. a camera a gestural input device a haptic input device or other devices. In some cases the I O device s may also include output devices such as a display an audio output device e.g. a speaker a printer a haptic output device and so forth. The I O device s may be physically incorporated with the service provider server device or may be externally placed.

The service provider server device may include one or more I O interfaces to enable components or modules of the service provider server device to control interface with or otherwise communicate with the I O device s . The I O interface s may enable information to be transferred in or out of the service provider server device or between components of the service provider server device through serial communication parallel communication or other types of communication. For example the I O interface s may comply with a version of the RS 232 standard for serial ports or with a version of the Institute of Electrical and Electronics Engineers IEEE 1284 standard for parallel ports. As another example the I O interface s may be configured to provide a connection over Universal Serial Bus USB or Ethernet. In some cases the I O interface s may be configured to provide a serial connection that is compliant with a version of the IEEE 1394 standard. The service provider server device may also include one or more busses or other internal communications hardware or software that allow for the transfer of data between the various modules and components of the service provider server device .

The service provider server device may include one or more network interfaces that enable communications between the service provider server device and other networked devices such as the data tracking server device and the audit data storage . The network interface s may include one or more network interface controllers NICs or other types of transceiver devices configured to send and receive communications over a network.

The service provider server device may include one or more memories described herein as memory . The memory comprises one or more computer readable storage media CRSM . The CRSM may include one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the service provider server device .

The memory may include an operating system OS module . The OS module is configured to manage hardware resources such as the I O device s the I O interface s and the network interface s and to provide various services to applications processes or modules executing on the processor s . The OS module may include one or more of the following any version of the Linux operating system originally released by Linus Torvalds any version of iOS from Apple Corp. of Cupertino Calif. USA any version of Windows or Windows Mobile from Microsoft Corp. of Redmond Wash. USA any version of Android from Google Corp. of Mountain View Calif. USA and its derivatives from various sources any version of Palm OS from Palm Computing Inc. of Sunnyvale Calif. USA and its derivatives from various sources any version of BlackBerry OS from Blackberry Ltd. of Waterloo Ontario Canada any version of VxWorks from Wind River Systems of Alameda Calif. USA or other operating systems.

The memory may include the service module s and the audit data collection module as described above with reference to . The memory may also include one or more other modules such as a user authentication module or an access control module to secure access to the service provider server device and so forth.

The memory may include data storage to store data for operations of the service provider server device . The data storage may comprise a database array structured list tree or other data structure and may be a relational or a non relational datastore. The data storage may include any type of data storage system such as those listed above with reference to the audit data storage . The data storage may store the data object s . The data storage may store the data object transfer recording data . The data storage may also store other data such as user authentication information or access control data. In some implementations at least a portion of the information stored in the data storage may be stored externally to the service provider server device on other devices that are accessible to the service provider server device via the I O interface s or via the network interface s .

The data tracking server device may include one or more memories described herein as memory . The memory comprises one or more CRSM. The CRSM may include one or more of an electronic storage medium a magnetic storage medium an optical storage medium a quantum storage medium a mechanical computer storage medium and so forth. The memory provides storage of computer readable instructions data structures program modules and other data for the operation of the data tracking server device . The memory may include an operating system OS module . The OS module is configured to manage hardware resources such as the I O device s the I O interface s and the network interface s and to provide various services to applications processes or modules executing on the processor s . The OS module may include one or more of the operating systems described above with reference to OS module .

The memory may include the data correlation module and the data normalization module which may perform operations as further described with reference to . As shown in the example of the data normalization module may execute as a sub component or sub module of the data correlation module . In some implementations the data normalization module may execute as a separate module. The memory may also include the data tracking module which may perform operations as further described with reference to .

In some implementations the memory may include a data tracking query interface module . The data tracking query interface module may enable a user to input a query including one or more query parameters to request tracking or origin information for one or more data objects . The data tracking query interface module may also display information describing the data tracking information for one or more data objects such as an origin system or origin service for one or more data objects . The data tracking query interface module may provide any type of user interface. For example the data tracking query interface module may provide a command line interface configured to receive text based queries from a user and to provide textual output describing the data tracking information . Alternatively the data tracking query interface module may provide a graphical user interface GUI configured to receive text input as well as commands entered via any number of controls and to provide textual graphical or other types of output describing the data tracking information .

The memory may also include one or more other modules such as a user authentication module or an access control module to secure access to the data tracking server device and so forth.

The memory may include data storage to store data for operations of the data tracking server device . The data storage may comprise a database array structured list tree or other data structure and may be a relational or a non relational datastore. The data storage may include any type of data storage system such as those listed above with reference to the audit data storage . The data storage may store one or more of the data object transfer recording data the correlation information or the data tracking information .

In some implementations the data correlation module may ignore certain key value pairs when determining the correlation information . For example certain keys may be frequently associated with a same value even though the services associated with those keys may not be involved in a transfer of the same data objects . To avoid false positives in the analysis such keys may be added to a blacklist and ignored during the generation of the correlation information . In such cases the data storage may store blacklist key information that describes one or more blacklisted keys to be ignored during processing.

In some cases software developers may employ certain placeholder or default values for a data attribute when writing source code. For example a developer may hard code or otherwise incorporate into source code certain placeholder or default values such as 0 1 null or a maximum or minimum value for a particular data attribute. In such cases keys in the data object transfer recording data may share common values even though the service modules associated with the keys may not communicate data objects with one another. In other words keys may share a value that is an artifact of the software development process and that may not indicate services communicating a data object . Accordingly in some implementations the data storage may store blacklist value information that describes one or more blacklisted values such as those listed above and the correlation information may not be updated for a pair of candidate keys that are associated with one of the predetermined set of values included in the blacklist value information .

The data storage may also store other data such as user authentication information or access control data. In some implementations at least a portion of the information stored in the data storage may be stored externally to the data tracking server device on other devices that are accessible to the data tracking server device via the I O interface s or via the network interface s .

Although depicts a single data tracking server device that executes the data correlation module and the data tracking module implementations are not so limited. In some implementations multiple data tracking server devices may operate in a cluster server farm or otherwise to perform the operations described herein for data tracking. For example in some implementations the data correlation module may execute on a first data tracking server device and the data tracking module may execute on a second data tracking server device .

As shown in each of the key value pairs includes a key and a value . In some cases the key may correspond to a data attribute included in a transferred data object and the value may include any type of data that is stored in the data attribute. For example a key for a data attribute ProductID may be associated with a value of 123456789 which may be an identifier or stock keeping unit SKU for a particular product. In some implementations the data normalization may include removing duplicate instances of key value pairs .

In some implementations the key may be a composite key that includes multiple portions describing different aspects of the key . For example as shown in the key may include a service identifier a method identifier and a key name . The service identifier may identify a particular service module that participates in the transfer of the data object described by the data object transfer recording data . The method identifier may identify a particular method or function of an API provided by the service module . The key name may identify a data attribute included in the method or function. In some implementations one or more of the service identifier the method identifier or the key name may be included in the key and separated by a designated separator character such as a period semicolon colon and so forth. For example a key may be orderstor.loadorder.itemID where orderstor is the service identifier loadorder is the method identifier and itemID is the key name . Other examples of key value pairs are described with reference to .

In some implementations each of the key value pairs may be associated with a timestamp . The timestamp may be determined based on information included in the data object transfer recording data and may indicate a date and time when the data object was created edited modified or transferred. In some implementations the data normalization may include determining the timestamp from the data object transfer recording data and associating the timestamp with the key value pair .

Although depicts the correlation information as a flat table of key associations implementations are not so limited. In some implementations the correlation information may be arranged as a tree structure in which the first associated key is a parent node relative to one or more child nodes that each correspond to a second associated key . In such cases the correlation count may be associated with the child node and may indicate a number of instances of association between the first associated key and the second associated key . The baseline count may be associated with the parent node and may indicate a number of instances of the first associated key .

In some implementations the data objects may be encrypted for transfer between service modules and at least a portion of the data object transfer recording data may also be encrypted. Such encryption may protect potentially sensitive personal or private information e.g. credit card numbers bank account numbers personal identification information and so forth that may be included in the values of one or more of the key value pairs . At least a portion of the data object transfer recording data may be decrypted prior to the processing that determines the correlation information . In such cases the key association s included in the correlation information may be stored in an unencrypted form. Because the key association s indicate a frequency at which pairs of keys share a same or substantially similar value but may not indicate the particular value that is shared or substantially similar the key association s and other correlation information may be stored in an unencrypted form without comprising the security of sensitive personal or private information.

The example key value pairs may be analyzed by the data correlation module and two or more candidate keys may be identified as having a same or substantially similar value. In this example three candidate keys have been identified as having the same value 432432 orderstor.loadorder.itemID orderanalyze.getorder.itemID and shipmentstor.loadshipment.itemnumber . In some cases the criteria for identifying candidate keys may be based on what type of data is stored in the keys . For example in cases where keys store discrete values such as shipment or order identifiers user identifiers product identifiers and so forth keys may be designated as candidate keys if their values are the same. Alternatively in cases where keys store non discrete values such as prices costs time intervals or other continuously variable values keys may be designated as candidate keys if their values are the same or are substantially similar e.g. within a predetermined threshold range. For example values that are within a range that is plus or minus 5 or 10 of the value may be designated as candidate keys .

For a set of candidate keys each pair of keys within the set may be identified. For each pair of keys the correlation information may be examined to determine whether the correlation information includes a key association for the pair of keys . If not a new key association may be added to the correlation information with a corresponding correlation metric indicating one instance of association between the keys e.g. a correlation count of 1. If the correlation information already includes a key association for the pair of keys the corresponding correlation metric may be updated to indicate an additional instance of association between the keys . For example the correlation count may be incremented.

In the example of three candidate keys have been identified within the key value pairs as sharing a same value 432432 the three candidate keys being orderstor.loadorder.itemID orderanalyze.getorder.itemID and shipmentstor.loadshipment.itemnumber . Among the three candidate keys three possible pairs of keys may be identified a first pair orderstor.loadorder.itemID and orderanalyze.getorder.itemID a second pair orderstor.loadorder.itemID and shipmentstor.loadshipment.itemnumber and a third pair orderanalyze.getorder.itemID and shipmentstor.loadshipment.itemnumber . The key association for each of these pairs of keys in the correlation information may be identified and the corresponding correlation metric may be incremented or otherwise updated to indicate an additional instance of association between the keys . If a key association for each of the pairs of keys is not already present in the correlation information a key association may be added to the correlation information with a corresponding correlation metric indicating one instance of association.

In some implementations the correlation information may also store for each key information describing a total number of instances of the key in the data object transfer recording data . In such cases the correlation metric may be expressed as a percentage or proportion of the total number of instances of the key . For example a key A may have occurred 50 times in the data object transfer recording data and a key association between key A and key B may have a correlation count of 12. Accordingly the correlation metric may indicate that key A is associated with key B in 24 of the instances in which key A appears in the data object transfer recording data .

At one or more transfer recordings may be accessed from the data object transfer recording data stored in the audit data storage . In some implementations transfer recordings may be accessed that describe the transfer of one or more particular data objects that are associated with object identifiers. Alternatively transfer recordings may be accessed that describe the transfer of a single data object between services. For example transfer recordings associated with a particular shipment object or order object may be accessed by querying the audit data storage for a particular shipment identifier or order identifier. Implementations also support other methods of selecting transfer recordings for analysis including selecting a random sample of the transfer recordings stored in the audit data storage . In some cases the data objects the data object transfer recording data or both may be at least partly encrypted. In such cases the data object transfer recording data may be decrypted at prior to further operations of the process.

At the transfer recordings are analyzed to identify one or more key value pairs that each includes a key and a value associated with the key . As described above the key may correspond to a data attribute that stores the value in the data object described by a transfer recording. In some implementations the identification of key value pairs in the transfer recordings may be performed as part of the data normalization in which the transfer recordings are flattened redacted reduced or otherwise processed into a set of key value pairs .

At for one of the key value pairs other key value pairs may be identified that include a same value or a substantially similar value within a predetermined threshold range as described above. Each pair of keys that are associated with a same or substantially similar value may be designated as candidate keys . In some implementations the analysis performed at for a particular key value pair may identify older key value pairs that include a same or substantially value based on the timestamp associated with each key value pair .

At a determination is made whether there are additional key value pairs to analyze. If so the process may return to and identify other key value pairs that are associated with a same value or a substantially similar value . If not the process may proceed to .

At the set of candidate keys may be analyzed and each possible pair of candidate keys may be determined as described above with reference to . The possible pairs of candidate keys may be determined based on a combinatorial algorithm that chooses each unique pair of candidate keys from the set of candidate keys . For example if a set of candidate keys includes keys A B C and D the possible pairs of candidate keys may include A and B A and C A and D B and C B and D and C and D. For each pair of candidate keys the correlation information may be examined to determine whether the correlation information includes a key association for the pair of candidate keys . If not a new key association may be added to the correlation information with a corresponding correlation metric indicating one instance of association between the candidate keys e.g. a correlation count of 1. If the correlation information already includes a key association for the pair of candidate keys the corresponding correlation metric may be updated to indicate an additional instance of association between the candidate keys e.g. the correlation count may be incremented.

In some cases software developers may employ certain placeholder or default values for a data attribute when writing source code. For example a developer may hard code or otherwise incorporate into source code certain placeholder or default values such as 0 1 null or a maximum or minimum value for a particular data attribute. In such cases keys in the data object transfer recording data may share common values even though the service modules associated with the keys may not communicate data objects with one another. In other words keys may share a value that is an artifact of the software development process and that may not indicate services communicating a data object . Accordingly in some implementations at the correlation information may not be updated for a pair of candidate keys that are associated with one of a predetermined set of values such as those listed above.

Moreover in some cases certain pairs of keys may be frequently associated with a same value even though the service modules associated with those keys may not be involved in a transfer of the same data objects . To avoid false positives in the analysis certain keys may be included in a blacklist such as the blacklist key information . Keys included on the blacklist may be at least partly ignored during the update of the correlation information at .

The process may continue to analyze the transfer recordings analyze the key value pairs present in the transfer recordings and update the correlation information for each pair of keys that are associated with a same or substantially similar value . At the updated correlation information may be stored in memory on the data tracking server device or elsewhere. The correlation information may then be employed by the data tracking module or another module to determine a path followed by a particular data object as it is transferred among the service modules . Implementations for employing the correlation information to track data flow are described further with reference to .

At the correlation information is accessed from memory on the data tracking server device or elsewhere. As described above the correlation information may describe one or more key associations and a correlation metric corresponding to each key association . In some implementations the correlation information accessed at includes at least a portion of the correlation information that was generated based on transfer recordings describing the transfer of a particular data object .

At a determination is made whether the correlation information includes a key association that associates a particular pair of keys such as a first key and a second key . If not the process may proceed to and determine that there is no relationship between the service modules associated with the first key and the second key . In such cases an inference may be made that the service modules associated with the first and second keys do not participate in the transfer of the same data objects . If it is determined at that the correlation information includes a key association for the first and second keys then the process may proceed to and retrieve or otherwise determine the correlation metric for the key association between the first and second keys .

At a determination is made whether the correlation metric indicates at least a predetermined threshold level of association between the first and second keys . In some implementations the threshold level of association may be a predetermined number of instances of association such as 10. Alternatively the threshold level of association may be a predetermined threshold correlation percentage of instances of association relative to a total number of instances of a key . For example a predetermined correlation threshold percentage of 50 may be met if a particular key A is associated with a key B at least half the time that key A appears in the data object transfer recording data .

If it is determined at that the correlation metric does not indicate at least the threshold level of association the process may proceed to and determine that there is no relationship between the service modules associated with the first and second keys . Otherwise the process may proceed to and infer or determine a relationship between the service modules associated with the first and second keys . The inferred relationship may indicate that the service modules associated with the first and second keys are involved in a transfer of a data object . The data tracking information may be updated to describe a transfer relationship between the service modules associated with the first and second keys . In some implementations the key value pair having the highest correlation count for a particular first associated key may be indicative of a relationship between the first and second associated keys in the key value pair .

At the correlation information is accessed from memory on the data tracking server device or elsewhere. As described above the correlation information may describe one or more key associations and a correlation metric corresponding to each key association . In some implementations the correlation information accessed at includes at least a portion of the correlation information that was generated based on transfer recordings describing the transfer of a particular data object .

At a determination is made of a subset of the one or more key associations included in the correlation information for which the correlation metric indicates at least a threshold level of association as described above with reference to .

At an identification is made of at least one singularly occurring key in the subset of key associations determined at . Because the correlation information accessed at is associated with a particular data object each key in the subset of key associations may occur either once or twice in the subset. Keys that occur twice may indicate services that acted as a pass through for a data object such that the key is involved in both an incoming transfer and an outgoing transfer. Keys that occur once in the subset may indicate services that acted as a terminus in the path followed by a data object wherein a terminus may be either an origin service or a final destination service in a chain of transfer. Accordingly an inference may be made that a singularly occurring key in the subset corresponds to either the service module that originated the data object or the service module that was the last to receive the data object .

At one of the singularly occurring keys may be designated as an origin of the data object transferred among the service modules corresponding to the keys in the subset. In some implementations this designation may be based at least partly on the method identifier included in the singularly occurring key . In some cases methods may be descriptively named to describe an operation performed by the method such as a get operation a put operation a set operation and so forth. Accordingly an analysis or examination of the method identifier may enable an inference that a particular method was involved in the origination of a data object . The data tracking information may be updated to describe the origin service module for the data object .

In some implementations one or more of the data object transfer recording data the correlation information or the data tracking information may be associated with a timeout period or a time to live TTL characteristic. In such cases a process may periodically execute to purge or delete at least a portion of the data object transfer recording data the correlation information or the data tracking information that is older than a particular threshold age. Such periodic deletion may enable implementations to regenerate correlation information or data tracking information based on recent data object transfer recording data ensuring that the correlation information and data tracking information reflects a substantially current set of relationships between the service modules executing in the computing environment .

Those having ordinary skill in the art will readily recognize that certain steps or operations illustrated in the figures above can be eliminated combined subdivided executed in parallel or taken in an alternate order. Moreover the methods described above may be implemented as one or more software programs for a computer system and are encoded in one or more computer readable storage media as instructions executable on one or more processors.

Separate instances of these programs may be executed on or distributed across separate computer systems. Thus although certain steps have been described as being performed by certain devices software programs processes or entities this need not be the case and a variety of alternative implementations will be understood by those having ordinary skill in the art.

Additionally those having ordinary skill in the art readily recognize that the techniques described above can be utilized in a variety of devices environments and situations. Although the present disclosure is written with respect to specific embodiments and implementations various changes and modifications may be suggested to one skilled in the art and it is intended that the present disclosure encompass such changes and modifications that fall within the scope of the appended claims.

