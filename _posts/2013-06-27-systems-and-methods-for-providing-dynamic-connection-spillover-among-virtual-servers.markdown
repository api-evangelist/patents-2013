---

title: Systems and methods for providing dynamic connection spillover among virtual servers
abstract: A method for an appliance to switch handling of transport layer connection requests from a first virtual server of the appliance managing a first plurality of services to a second virtual server of the appliance managing a second plurality of services upon exceeding, by the first virtual server, a maximum connection threshold determined dynamically from a status of the first plurality of services The appliance establishes a predetermined threshold identifying a maximum active transport layer connection capacity for the first virtual server that comprising a sum of a predetermined connection capacity for each of the plurality of services. The appliance determines via monitoring that the status of a service of the plurality of services indicates the service is not available and adjusts the predetermined threshold to comprise the sum of the predetermined connection capacity for each of the plurality of services having a status of available.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09185019&OS=09185019&RS=09185019
owner: CITRIX SYSTEMS, INC.
number: 09185019
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20130627
---
The present application claims priority to and is a continuation of U.S. application Ser. No. 11 466 238 titled Systems and Methods for Providing Dynamic Connection Spillover Among Virtual Servers and filed Aug. 22 2006 all of which is incorporated herein by reference for all purposes.

The present invention relates to computer networking technologies and more specifically to using a network appliance practicing a technique of dynamic connection spillover among virtual servers of the appliance.

Network appliances are often used to provide access to one or more network services. A network appliance may comprise a number of virtual servers each virtual server providing access to a number of services. The virtual servers may manage incoming connections from clients and perform a number of other functions for the connections including connection pooling caching and acceleration. In the course of managing incoming connection requests network appliances may provide load balancing among the virtual servers. One method of load balancing includes assigning a connection capacity to a virtual server based on a total connection capacity for the services to which the virtual server provides access. When the number of connections to a virtual server exceeds this capacity new connection requests may be routed to a second virtual server.

One drawback of this approach is that it cannot compensate for the failure of one or more of the services. A failure of one services may significantly reduce the number of connections for which a virtual server can provide service.

It would therefore be desirable to provide systems and methods to dynamically determine a connection capacity for a virtual server providing access to one or more services.

In one aspect the present invention relates to a method for an appliance to switch handling of transport layer connection requests from a first virtual server of the appliance managing a first plurality of services to a second virtual server of the appliance managing a second plurality of services upon exceeding by the first virtual server a maximum connection threshold determined dynamically from a status of the first plurality of services. The method comprising the steps of establishing on an appliance a first virtual server which directs transport layer connection requests from a plurality of clients to a first plurality of services establishing via the appliance a predetermined threshold identifying a maximum active transport layer connection capacity for the first virtual server the predetermined threshold comprising a sum of a predetermined connection capacity for each of the plurality of services monitoring by the appliance a status for each of the plurality of services determining by the appliance the status of a service of the plurality of services indicates the service is not available and adjusting by the appliance in response to the determination the predetermined threshold to comprise the sum of the predetermined connection capacity for each of the plurality of services having a status of available.

In another aspect the present invention relates to a computer implemented system to switch handling of transport layer connection requests from a first virtual server of the appliance managing a first plurality of services to a second virtual server of the appliance managing a second plurality of services upon exceeding by the first virtual server a maximum connection threshold determined dynamically from a status of the first plurality of services. The system comprises a network appliance which establishes a first virtual server that directs transport layer connection requests from a plurality of clients to a first plurality of services establishes a predetermined threshold identifying a maximum active transport layer connection capacity for the first virtual server the predetermined threshold comprising a sum of a predetermined connection capacity for each of the plurality of services monitors a status for each of the plurality of services determines the status of a service of the plurality of services indicates the service is not available and adjusts in response to the determination the predetermined threshold to comprise the sum of the predetermined connection capacity for each of the plurality of services having a status of available.

The details of various embodiments of the invention are set forth in the accompanying drawings and the description below.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements.

Prior to discussing the specifics of embodiments of the systems and methods of an appliance and or client it may be helpful to discuss the network and computing environments in which such embodiments may be deployed. Referring now to an embodiment of a network environment is depicted. In brief overview the network environment comprises one or more clients also generally referred to as local machine s or client s in communication with one or more servers also generally referred to as server s or remote machine s via one or more networks generally referred to as network . In some embodiments a client communicates with a server via an appliance .

Although shows a network and a network between the clients and the servers the clients and the servers may be on the same network . The networks and can be the same type of network or different types of networks. The network and or the network can be a local area network LAN such as a company Intranet a metropolitan area network MAN or a wide area network WAN such as the Internet or the World Wide Web. In one embodiment network may be a private network and network may be a public network. In some embodiments network may be a private network and network a public network. In another embodiment networks and may both be private networks. In some embodiments clients may be located at a branch office of a corporate enterprise communicating via a WAN connection over the network to the servers located at a corporate data center.

The network and or be any type and or form of network and may include any of the following a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an ATM Asynchronous Transfer Mode network a SONET Synchronous Optical Network network a SDH Synchronous Digital Hierarchy network a wireless network and a wireline network. In some embodiments the network may comprise a wireless link such as an infrared channel or satellite band. The topology of the network and or may be a bus star or ring network topology. The network and or and network topology may be of any such network or network topology as known to those ordinarily skilled in the art capable of supporting the operations described herein.

As shown in the appliance which also may be referred to as an interface unit or gateway is shown between the networks and . In some embodiments the appliance may be located on network . For example a branch office of a corporate enterprise may deploy an appliance at the branch office. In other embodiments the appliance may be located on network . For example an appliance may be located at a corporate data center. In yet another embodiment a plurality of appliances may be deployed on network . In some embodiments a plurality of appliances may be deployed on network . In one embodiment a first appliance communicates with a second appliance . In other embodiments the appliance could be a part of any client or server on the same or different network as the client . One or more appliances may be located at any point in the network or network communications path between a client and a server .

In one embodiment the system may include multiple logically grouped servers . In these embodiments the logical group of servers may be referred to as a server farm . In some of these embodiments the serves may be geographically dispersed. In some cases a farm may be administered as a single entity. In other embodiments the server farm comprises a plurality of server farms . In one embodiment the server farm executes one or more applications on behalf of one or more clients .

The servers within each farm can be heterogeneous. One or more of the servers can operate according to one type of operating system platform e.g. WINDOWS NT manufactured by Microsoft Corp. of Redmond Wash. while one or more of the other servers can operate on according to another type of operating system platform e.g. Unix or Linux . The servers of each farm do not need to be physically proximate to another server in the same farm . Thus the group of servers logically grouped as a farm may be interconnected using a wide area network WAN connection or medium area network MAN connection. For example a farm may include servers physically located in different continents or different regions of a continent country state city campus or room. Data transmission speeds between servers in the farm can be increased if the servers are connected using a local area network LAN connection or some form of direct connection.

Servers may be referred to as a file server application server web server proxy server or gateway server. In some embodiments a server may have the capacity to function as either an application server or as a master application server. In one embodiment a server may include an Active Directory. The clients may also be referred to as client nodes or endpoints. In some embodiments a client has the capacity to function as both a client node seeking access to applications on a server and as an application server providing access to hosted applications for other clients 

In some embodiments a client communicates with a server . In one embodiment the client communicates directly with one of the servers in a farm . In another embodiment the client executes a program neighborhood application to communicate with a server in a farm . In still another embodiment the server provides the functionality of a master node. In some embodiments the client communicates with the server in the farm through a network . Over the network the client can for example request execution of various applications hosted by the servers in the farm and receive output of the results of the application execution for display. In some embodiments only the master node provides the functionality required to identify and provide address information associated with a server hosting a requested application.

In one embodiment the server provides functionality of a web server. In another embodiment the server receives requests from the client forwards the requests to a second server and responds to the request by the client with a response to the request from the server . In still another embodiment the server acquires an enumeration of applications available to the client and address information associated with a server hosting an application identified by the enumeration of applications. In yet another embodiment the server presents the response to the request to the client using a web interface. In one embodiment the client communicates directly with the server to access the identified application. In another embodiment the client receives application output data such as display data generated by an execution of the identified application on the server .

Referring now to a network environment for delivering and or operating a computing environment on a client is depicted. In some embodiments a server includes an application delivery system for delivering a computing environment or an application and or data file to one or more clients . In brief overview a client is in communication with a server via network and appliance . For example the client may reside in a remote office of a company e.g. a branch office and the server may reside at a corporate data center. The client comprises a client agent and a computing environment . The computing environment may execute or operate an application that accesses processes or uses a data file. The computing environment application and or data file may be delivered via the appliance and or the server .

In some embodiments the appliance accelerates delivery of a computing environment or any portion thereof to a client . In one embodiment the appliance accelerates the delivery of the computing environment by the application delivery system . For example the embodiments described herein may be used to accelerate delivery of a streaming application and data file processable by the application from a central corporate data center to a remote user location such as a branch office of the company. In another embodiment the appliance accelerates transport layer traffic between a client and a server . The appliance may provide acceleration techniques for accelerating any transport layer payload from a server to a client such as 1 transport layer connection pooling 2 transport layer connection multiplexing 3 transport control protocol buffering 4 compression and 5 caching. In some embodiments the appliance provides load balancing of servers in responding to requests from clients . In other embodiments the appliance acts as a proxy or access server to provide access to the one or more servers . In another embodiment the appliance provides a secure virtual private network connection from a first network of the client to the second network of the server such as an SSL VPN connection. It yet other embodiments the appliance provides application firewall security control and management of the connection and communications between a client and a server .

In some embodiments the application delivery management system provides application delivery techniques to deliver a computing environment to a desktop of a user remote or otherwise based on a plurality of execution methods and based on any authentication and authorization policies applied via a policy engine . With these techniques a remote user may obtain a computing environment and access to server stored applications and data files from any network connected device . In one embodiment the application delivery system may reside or execute on a server . In another embodiment the application delivery system may reside or execute on a plurality of servers . In some embodiments the application delivery system may execute in a server farm . In one embodiment the server executing the application delivery system may also store or provide the application and data file. In another embodiment a first set of one or more servers may execute the application delivery system and a different server may store or provide the application and data file. In some embodiments each of the application delivery system the application and data file may reside or be located on different servers. In yet another embodiment any portion of the application delivery system may reside execute or be stored on or distributed to the appliance or a plurality of appliances.

The client may include a computing environment for executing an application that uses or processes a data file. The client via networks and appliance may request an application and data file from the server . In one embodiment the appliance may forward a request from the client to the server . For example the client may not have the application and data file stored or accessible locally. In response to the request the application delivery system and or server may deliver the application and data file to the client . For example in one embodiment the server may transmit the application as an application stream to operate in computing environment on client .

In some embodiments the application delivery system comprises any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application delivery system may deliver one or more applications to clients or users via a remote display protocol or otherwise via remote based or server based computing. In another embodiment the application delivery system may deliver one or more applications to clients or users via steaming of the application.

In one embodiment the application delivery system includes a policy engine for controlling and managing the access to selection of application execution methods and the delivery of applications. In some embodiments the policy engine determines the one or more applications a user or client may access. In another embodiment the policy engine determines how the application should be delivered to the user or client e.g. the method of execution. In some embodiments the application delivery system provides a plurality of delivery techniques from which to select a method of application execution such as a server based computing streaming or delivering the application locally to the client for local execution.

In one embodiment a client requests execution of an application program and the application delivery system comprising a server selects a method of executing the application program. In some embodiments the server receives credentials from the client . In another embodiment the server receives a request for an enumeration of available applications from the client . In one embodiment in response to the request or receipt of credentials the application delivery system enumerates a plurality of application programs available to the client . The application delivery system receives a request to execute an enumerated application. The application delivery system selects one of a predetermined number of methods for executing the enumerated application for example responsive to a policy of a policy engine. The application delivery system may select a method of execution of the application enabling the client to receive application output data generated by execution of the application program on a server . The application delivery system may select a method of execution of the application enabling the local machine to execute the application program locally after retrieving a plurality of application files comprising the application. In yet another embodiment the application delivery system may select a method of execution of the application to stream the application via the network to the client .

A client may execute operate or otherwise provide an application which can be any type and or form of software program or executable instructions such as any type and or form of web browser web based client client server application a thin client computing client an ActiveX control or a Java applet or any other type and or form of executable instructions capable of executing on client . In some embodiments the application may be a server based or a remote based application executed on behalf of the client on a server . In one embodiments the server may display output to the client using any thin client or remote display protocol such as the Independent Computing Architecture ICA protocol manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. or the Remote Desktop Protocol RDP manufactured by the Microsoft Corporation of Redmond Wash. The application can use any type of protocol and it can be for example an HTTP client an FTP client an Oscar client or a Telnet client. In other embodiments the application comprises any type of software related to VoIP communications such as a soft IP telephone. In further embodiments the application comprises any application related to real time data communications such as applications for streaming video and or audio.

In some embodiments the server or a server farm may be running one or more applications such as an application providing a thin client computing or remote display presentation application. In one embodiment the server or server farm executes as an application any portion of the Citrix Access Suite by Citrix Systems Inc. such as the MetaFrame or Citrix Presentation Server and or any of the Microsoft Windows Terminal Services manufactured by the Microsoft Corporation. In one embodiment the application is an ICA client developed by Citrix Systems Inc. of Fort Lauderdale Fla. In other embodiments the application includes a Remote Desktop RDP client developed by Microsoft Corporation of Redmond Wash. Also the server may run an application which for example may be an application server providing email services such as Microsoft Exchange manufactured by the Microsoft Corporation of Redmond Wash. a web or Internet server or a desktop sharing server or a collaboration server. In some embodiments any of the applications may comprise any type of hosted service or products such as GoToMeeting provided by Citrix Online Division Inc. of Santa Barbara Calif. WebEx provided by WebEx Inc. of Santa Clara Calif. or Microsoft Office Live Meeting provided by Microsoft Corporation of Redmond Wash.

The client server and appliance may be deployed as and or executed on any type and form of computing device such as a computer network device or appliance capable of communicating on any type and form of network and performing the operations described herein. depict block diagrams of a computing device useful for practicing an embodiment of the client server or appliance . As shown in each computing device includes a central processing unit and a main memory unit . As shown in a computing device may include a visual display device a keyboard and or a pointing device such as a mouse. Each computing device may also include additional optional elements such as one or more input output devices generally referred to using reference numeral and a cache memory in communication with the central processing unit .

The central processing unit is any logic circuitry that responds to and processes instructions fetched from the main memory unit . In many embodiments the central processing unit is provided by a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Illinois those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains New York or those manufactured by Advanced Micro Devices of Sunnyvale Calif. The computing device may be based on any of these processors or any other processor capable of operating as described herein.

Main memory unit may be one or more memory chips capable of storing data and allowing any storage location to be directly accessed by the microprocessor such as Static random access memory SRAM Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . The main memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In the embodiment shown in the processor communicates with main memory via a system bus described in more detail below . depicts an embodiment of a computing device in which the processor communicates directly with main memory via a memory port . For example in the main memory may be DRDRAM.

The computing device may support any suitable installation device such as a floppy disk drive for receiving floppy disks such as 3.5 inch 5.25 inch disks or ZIP disks a CD ROM drive a CD R RW drive a DVD ROM drive tape drives of various formats USB device hard drive or any other device suitable for installing software and programs such as any client agent or portion thereof. The computing device may further comprise a storage device such as one or more hard disk drives or redundant arrays of independent disks for storing an operating system and other related software and for storing application software programs such as any program related to the client agent . Optionally any of the installation devices could also be used as the storage device . Additionally the operating system and the software can be run from a bootable medium for example a bootable CD such as KNOPPIX a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net.

Furthermore the computing device may include a network interface to interface to a Local Area Network LAN Wide Area Network WAN or the Internet through a variety of connections including but not limited to standard telephone lines LAN or WAN links e.g. 802.11 T1 T3 56 kb X.25 broadband connections e.g. ISDN Frame Relay ATM wireless connections or some combination of any or all of the above. The network interface may comprise a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter USB network adapter modem or any other device suitable for interfacing the computing device to any type of network capable of communication and performing the operations described herein.

A wide variety of I O devices may be present in the computing device . Input devices include keyboards mice trackpads trackballs microphones and drawing tablets. Output devices include video displays speakers inkjet printers laser printers and dye sublimation printers. The I O devices may be controlled by an I O controller as shown in . The I O controller may control one or more I O devices such as a keyboard and a pointing device e.g. a mouse or optical pen. Furthermore an I O device may also provide storage and or an installation medium for the computing device . In still other embodiments the computing device may provide USB connections to receive handheld USB storage devices such as the USB Flash Drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

In some embodiments the computing device may comprise or be connected to multiple display devices which each may be of the same or different type and or form. As such any of the I O devices and or the I O controller may comprise any type and or form of suitable hardware software or combination of hardware and software to support enable or provide for the connection and use of multiple display devices by the computing device . For example the computing device may include any type and or form of video adapter video card driver and or library to interface communicate connect or otherwise use the display devices . In one embodiment a video adapter may comprise multiple connectors to interface to multiple display devices . In other embodiments the computing device may include multiple video adapters with each video adapter connected to one or more of the display devices . In some embodiments any portion of the operating system of the computing device may be configured for using multiple displays . In other embodiments one or more of the display devices may be provided by one or more other computing devices such as computing devices and connected to the computing device for example via a network. These embodiments may include any type of software designed and constructed to use another computer s display device as a second display device for the computing device . One ordinarily skilled in the art will recognize and appreciate the various ways and embodiments that a computing device may be configured to have multiple display devices 

In further embodiments an I O device may be a bridge between the system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCl LAMP bus a FibreChannel bus or a Serial Attached small computer system interface bus.

A computing device of the sort depicted in typically operate under the control of operating systems which control scheduling of tasks and access to system resources. The computing device can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or any other operating system capable of running on the computing device and performing the operations described herein. Typical operating systems include WINDOWS 3.x WINDOWS 95 WINDOWS 98 WINDOWS 2000 WINDOWS NT 3.51 WINDOWS NT 4.0 WINDOWS CE and WINDOWS XP all of which are manufactured by Microsoft Corporation of Redmond Wash. MacOS manufactured by Apple Computer of Cupertino California OS 2 manufactured by International Business Machines of Armonk N.Y. and Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type and or form of a Unix operating system among others.

In other embodiments the computing device may have different processors operating systems and input devices consistent with the device. For example in one embodiment the computer is a Treo 180 270 1060 600 or 650 smart phone manufactured by Palm Inc. In this embodiment the Treo smart phone is operated under the control of the PalmOS operating system and includes a stylus input device as well as a five way navigator device. Moreover the computing device can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone any other computer or other form of computing or telecommunications device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein.

Hardware layer provides the hardware elements upon which programs and services within kernel space and user space are executed. Hardware layer also provides the structures and elements which allow programs and services within kernel space and user space to communicate data both internally and externally with respect to appliance . As shown in the hardware layer includes a processing unit for executing software programs and services a memory for storing software and data network ports for transmitting and receiving data over a network and an encryption processor for performing functions related to Secure Sockets Layer processing of data transmitted and received over the network. In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . The processor may include any of the processors described above in connection with . In some embodiments the central processing unit may perform the functions of the encryption processor in a single processor. Additionally the hardware layer may comprise multiple processors for each of the processing unit and the encryption processor . For example in one embodiment the appliance comprises a first processor and a second processor . In other embodiments the processor or comprises a multi core processor.

Although the hardware layer of appliance is generally illustrated with an encryption processor processor may be a processor for performing functions related to any encryption protocol such as the Secure Socket Layer SSL or Transport Layer Security TLS protocol. In some embodiments the processor may be a general purpose processor GPP and in further embodiments may be have executable instructions for performing processing of any security related protocol.

Although the hardware layer of appliance is illustrated with certain elements in the hardware portions or components of appliance may comprise any type and form of elements hardware or software of a computing device such as the computing device illustrated and discussed herein in conjunction with . In some embodiments the appliance may comprise a server gateway router switch bridge or other type of computing or network device and have any hardware and or software elements associated therewith.

The operating system of appliance allocates manages or otherwise segregates the available system memory into kernel space and user space . In example software architecture the operating system may be any type and or form of Unix operating system although the invention is not so limited. As such the appliance can be running any operating system such as any of the versions of the Microsoft Windows operating systems the different releases of the Unix and Linux operating systems any version of the Mac OS for Macintosh computers any embedded operating system any network operating system any real time operating system any open source operating system any proprietary operating system any operating systems for mobile computing devices or network devices or any other operating system capable of running on the appliance and performing the operations described herein.

The kernel space is reserved for running the kernel including any device drivers kernel extensions or other kernel related software. As known to those skilled in the art the kernel is the core of the operating system and provides access control and management of resources and hardware related elements of the application . In accordance with an embodiment of the appliance the kernel space also includes a number of network services or processes working in conjunction with a cache manager . sometimes also referred to as the integrated cache the benefits of which are described in detail further herein. Additionally the embodiment of the kernel will depend on the embodiment of the operating system installed configured or otherwise used by the device .

In one embodiment the device comprises one network stack such as a TCP IP based stack for communicating with the client and or the server . In one embodiment the network stack is used to communicate with a first network such as network and a second network . In some embodiments the device terminates a first transport layer connection such as a TCP connection of a client and establishes a second transport layer connection to a server for use by the client e.g. the second transport layer connection is terminated at the appliance and the server . The first and second transport layer connections may be established via a single network stack . In other embodiments the device may comprise multiple network stacks for example and and the first transport layer connection may be established or terminated at one network stack and the second transport layer connection on the second network stack . For example one network stack may be for receiving and transmitting network packet on a first network and another network stack for receiving and transmitting network packets on a second network. In one embodiment the network stack comprises a buffer for queuing one or more network packets for transmission by the appliance .

As shown in the kernel space includes the cache manager a high speed layer 2 7 integrated packet engine an encryption engine a policy engine and multi protocol compression logic . Running these components or processes and in kernel space or kernel mode instead of the user space improves the performance of each of these components alone and in combination. Kernel operation means that these components or processes and run in the core address space of the operating system of the device . For example running the encryption engine in kernel mode improves encryption performance by moving encryption and decryption operations to the kernel thereby reducing the number of transitions between the memory space or a kernel thread in kernel mode and the memory space or a thread in user mode. For example data obtained in kernel mode may not need to be passed or copied to a process or thread running in user mode such as from a kernel level data structure to a user level data structure. In another aspect the number of context switches between kernel mode and user mode are also reduced. Additionally synchronization of and communications between any of the components or processes and can be performed more efficiently in the kernel space .

In some embodiments any portion of the components and may run or operate in the kernel space while other portions of these components and may run or operate in user space . In one embodiment the appliance uses a kernel level data structure providing access to any portion of one or more network packets for example a network packet comprising a request from a client or a response from a server . In some embodiments the kernel level data structure may be obtained by the packet engine via a transport layer driver interface or filter to the network stack . The kernel level data structure may comprise any interface and or data accessible via the kernel space related to the network stack network traffic or packets received or transmitted by the network stack . In other embodiments the kernel level data structure may be used by any of the components or processes and to perform the desired operation of the component or process. In one embodiment a component and is running in kernel mode when using the kernel level data structure while in another embodiment the component and is running in user mode when using the kernel level data structure. In some embodiments the kernel level data structure may be copied or passed to a second kernel level data structure or any desired user level data structure.

The cache manager may comprise software hardware or any combination of software and hardware to provide cache access control and management of any type and form of content such as objects or dynamically generated objects served by the originating servers . The data objects or content processed and stored by the cache manager may comprise data in any format such as a markup language or communicated via any protocol. In some embodiments the cache manager duplicates original data stored elsewhere or data previously computed generated or transmitted in which the original data may require longer access time to fetch compute or otherwise obtain relative to reading a cache memory element. Once the data is stored in the cache memory element future use can be made by accessing the cached copy rather than refetching or recomputing the original data thereby reducing the access time. In some embodiments the cache memory element nat comprise a data object in memory of device . In other embodiments the cache memory element may comprise memory having a faster access time than memory . In another embodiment the cache memory element may comprise any type and form of storage element of the device such as a portion of a hard disk. In some embodiments the processing unit may provide cache memory for use by the cache manager . In yet further embodiments the cache manager may use any portion and combination of memory storage or the processing unit for caching data objects and other content.

Furthermore the cache manager includes any logic functions rules or operations to perform any embodiments of the techniques of the appliance described herein. For example the cache manager includes logic or functionality to invalidate objects based on the expiration of an invalidation time period or upon receipt of an invalidation command from a client or server . In some embodiments the cache manager may operate as a program service process or task executing in the kernel space and in other embodiments in the user space . In one embodiment a first portion of the cache manager executes in the user space while a second portion executes in the kernel space . In some embodiments the cache manager can comprise any type of general purpose processor GPP or any other type of integrated circuit such as a Field Programmable Gate Array FPGA Programmable Logic Device PLD or Application Specific Integrated Circuit ASIC .

The policy engine may include for example an intelligent statistical engine or other programmable application s . In one embodiment the policy engine provides a configuration mechanism to allow a user to identifying specify define or configure a caching policy. Policy engine in some embodiments also has access to memory to support data structures such as lookup tables or hash tables to enable user selected caching policy decisions. In other embodiments the policy engine may comprise any logic rules functions or operations to determine and provide access control and management of objects data or content being cached by the appliance in addition to access control and management of security network traffic network access compression or any other function or operation performed by the appliance . Further examples of specific caching policies are further described herein.

The encryption engine comprises any logic business rules functions or operations for handling the processing of any security related protocol such as SSL or TLS or any function related thereto. For example the encryption engine encrypts and decrypts network packets or any portion thereof communicated via the appliance . The encryption engine may also setup or establish SSL or TLS connections on behalf of the client server or appliance . As such the encryption engine provides offloading and acceleration of SSL processing. In one embodiment the encryption engine uses a tunneling protocol to provide a virtual private network between a client and a server . In some embodiments the encryption engine is in communication with the Encryption processor . In other embodiments the encryption engine comprises executable instructions running on the Encryption processor .

The multi protocol compression engine comprises any logic business rules function or operations for compressing one or more protocols of a network packet such as any of the protocols used by the network stack of the device . In one embodiment multi protocol compression engine compresses bi directionally between clients and servers any TCP IP based protocol including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In other embodiments multi protocol compression engine provides compression of Hypertext Markup Language HTML based protocols and in some embodiments provides compression of any markup languages such as the Extensible Markup Language XML . In one embodiment the multi protocol compression engine provides compression of any high performance protocol such as any protocol designed for appliance to appliance communications. In another embodiment the multi protocol compression engine compresses any payload of or any communication using a modified transport control protocol such as Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol.

As such the multi protocol compression engine accelerates performance for users accessing applications via desktop clients e.g. Microsoft Outlook and non Web thin clients such as any client launched by popular enterprise applications like Oracle SAP and Siebel and even mobile clients such as the Pocket PC. In some embodiments the multi protocol compression engine by executing in the kernel mode and integrating with packet processing engine accessing the network stack is able to compress any of the protocols carried by the TCP IP protocol such as any application layer protocol.

High speed layer 2 7 integrated packet engine also generally referred to as a packet processing engine or packet engine is responsible for managing the kernel level processing of packets received and transmitted by appliance via network ports . The high speed layer 2 7 integrated packet engine may comprise a buffer for queuing one or more network packets during processing such as for receipt of a network packet or transmission of a network packer. Additionally the high speed layer 2 7 integrated packet engine is in communication with one or more network stacks to send and receive network packets via network ports . The high speed layer 2 7 integrated packet engine works in conjunction with encryption engine cache manager policy engine and multi protocol compression logic . In particular encryption engine is configured to perform SSL processing of packets policy engine is configured to perform functions related to traffic management such as request level content switching and request level cache redirection and multi protocol compression logic is configured to perform functions related to compression and decompression of data.

The high speed layer 2 7 integrated packet engine includes a packet processing timer . In one embodiment the packet processing timer provides one or more time intervals to trigger the processing of incoming i.e. received or outgoing i.e. transmitted network packets. In some embodiments the high speed layer 2 7 integrated packet engine processes network packets responsive to the timer . The packet processing timer provides any type and form of signal to the packet engine to notify trigger or communicate a time related event interval or occurrence. In many embodiments the packet processing timer operates in the order of milliseconds such as for example 100 ms 50 ms or 25 ms. For example in some embodiments the packet processing timer provides time intervals or otherwise causes a network packet to be processed by the high speed layer 2 7 integrated packet engine at a 10 ms time interval while in other embodiments at a 5 ms time interval and still yet in further embodiments as short as a 3 2 or 1 ms time interval. The high speed layer 2 7 integrated packet engine may be interfaced integrated or in communication with the encryption engine cache manager policy engine and multi protocol compression engine during operation. As such any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed responsive to the packet processing timer and or the packet engine . Therefore any of the logic functions or operations of the encryption engine cache manager policy engine and multi protocol compression logic may be performed at the granularity of time intervals provided via the packet processing timer for example at a time interval of less than or equal to 10 ms. For example in one embodiment the cache manager may perform invalidation of any cached objects responsive to the high speed layer 2 7 integrated packet engine and or the packet processing timer . In another embodiment the expiry or invalidation time of a cached object can be set to the same order of granularity as the time interval of the packet processing timer such as at every 10 ms

In contrast to kernel space user space is the memory area or portion of the operating system used by user mode applications or programs otherwise running in user mode. A user mode application may not access kernel space directly and uses service calls in order to access kernel services. As shown in user space of appliance includes a graphical user interface GUI a command line interface CLI shell services health monitoring program and daemon services . GUI and CLI provide a means by which a system administrator or other user can interact with and control the operation of appliance such as via the operating system of the appliance and either is user space or kernel space . The GUI may be any type and form of graphical user interface and may be presented via text graphical or otherwise by any type of program or application such as a browser. The CLI may be any type and form of command line or text based interface such as a command line provided by the operating system. For example the CLI may comprise a shell which is a tool to enable users to interact with the operating system. In some embodiments the CLI may be provided via a bash csh tcsh or ksh type shell. The shell services comprises the programs services tasks processes or executable instructions to support interaction with the appliance or operating system by a user via the GUI and or CLI .

Health monitoring program is used to monitor check report and ensure that network systems are functioning properly and that users are receiving requested content over a network. Health monitoring program comprises one or more programs services tasks processes or executable instructions to provide logic rules functions or operations for monitoring any activity of the appliance . In some embodiments the health monitoring program intercepts and inspects any network traffic passed via the appliance . In other embodiments the health monitoring program interfaces by any suitable means and or mechanisms with one or more of the following the encryption engine cache manager policy engine multi protocol compression logic packet engine daemon services and shell services . As such the health monitoring program may call any application programming interface API to determine a state status or health of any portion of the appliance . For example the health monitoring program may ping or send a status inquiry on a periodic basis to check if a program process service or task is active and currently running. In another example the health monitoring program may check any status error or history logs provided by any program process service or task to determine any condition status or error with any portion of the appliance .

Daemon services are programs that run continuously or in the background and handle periodic service requests received by appliance . In some embodiments a daemon service may forward the requests to other programs or processes such as another daemon service as appropriate. As known to those skilled in the art a daemon service may run unattended to perform continuous or periodic system wide functions such as network control or to perform any desired task. In some embodiments one or more daemon services run in the user space while in other embodiments one or more daemon services run in the kernel space.

Referring now to another embodiment of the appliance is depicted. In brief overview the appliance provides one or more of the following services functionality or operations SSL VPN connectivity switching load balancing Domain Name Service resolution acceleration and an application firewall for communications between one or more clients and one or more servers . In one embodiment the appliance comprises any of the network devices manufactured by Citrix Systems Inc. of Ft. Lauderdale Fla. referred to as Citrix NetScaler devices. Each of the servers may provide one or more network related services referred to as services . For example a server may provide an http service . The appliance comprises one or more virtual servers or virtual internet protocol servers referred to as a vServer VIP server or just VIP also referred herein as vServer . The vServer receives intercepts or otherwise processes communications between a client and a server in accordance with the configuration and operations of the appliance .

The vServer may comprise software hardware or any combination of software and hardware. The vServer may comprise any type and form of program service task process or executable instructions operating in user mode kernel mode or any combination thereof in the appliance . The vServer includes any logic functions rules or operations to perform any embodiments of the techniques described herein such as SSL VPN switching load balancing Domain Name Service resolution acceleration and an application firewall . In some embodiments the vServer establishes a connection to a service of a server . The service may comprise any program application process task or set of executable instructions capable of connecting to and communicating to the appliance client or vServer . For example the service may comprise a web server http server ftp email or database server. In some embodiments the service is a daemon process or network driver for listening receiving and or sending communications for an application such as email database or an enterprise application. In some embodiments the service may communicate on a specific IP address or IP address and port.

In some embodiments the vServer applies one or more policies of the policy engine to network communications between the client and server . In one embodiment the policies are associated with a VServer . In another embodiment the policies are based on a user or a group of users. In yet another embodiment a policy is global and applies to one or more vServers and any user or group of users communicating via the appliance . In some embodiments the policies of the policy engine have conditions upon which the policy is applied based on any content of the communication such as internet protocol address port protocol type header or fields in a packet or the context of the communication such as user group of the user vServer transport layer connection and or identification or attributes of the client or server .

In other embodiments the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to access the computing environment application and or data file from a server . In another embodiment the appliance communicates or interfaces with the policy engine to determine authentication and or authorization of a remote user or a remote client to have the application delivery system deliver one or more of the computing environment application and or data file. In yet another embodiment the appliance establishes a VPN or SSL VPN connection based on the policy engine s authentication and or authorization of a remote user or a remote client In one embodiment the appliance controls the flow of network traffic and communication sessions based on policies of the policy engine . For example the appliance may control the access to a computing environment application or data file based on the policy engine .

In some embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client via the client agent . In one embodiment the vServer listens for and receives communications from the client . In other embodiments the vServer establishes a transport layer connection such as a TCP or UDP connection with a client server . In one embodiment the vServer establishes the transport layer connection to an internet protocol address and port of a server running on the server . In another embodiment the vServer associates a first transport layer connection to a client with a second transport layer connection to the server . In some embodiments a vServer establishes a pool of transport layer connections to a server and multiplexes client requests via the pooled transport layer connections.

In some embodiments the appliance provides a SSL VPN connection between a client and a server . For example a client on a first network requests to establish a connection to a server on a second network . In some embodiments the second network is not routable from the first network . In other embodiments the client is on a public network and the server is on a private network such as a corporate network. In one embodiment the client agent intercepts communications of the client on the first network encrypts the communications and transmits the communications via a first transport layer connection to the appliance . The appliance associates the first transport layer connection on the first network to a second transport layer connection to the server on the second network . The appliance receives the intercepted communication from the client agent decrypts the communications and transmits the communication to the server on the second network via the second transport layer connection. The second transport layer connection may be a pooled transport layer connection. As such the appliance provides an end to end secure transport layer connection for the client between the two networks .

In one embodiment the appliance hosts an intranet internet protocol or intranetIP address of the client on the virtual private network . The client has a local network identifier such as an internet protocol IP address and or host name on the first network . When connected to the second network via the appliance the appliance establishes assigns or otherwise provides an IntranetIP which is network identifier such as IP address and or host name for the client on the second network . The appliance listens for and receives on the second or private network for any communications directed towards the client using the client s established IntranetIP . In one embodiment the appliance acts as or on behalf of the client on the second private network . For example in another embodiment a vServer listens for and responds to communications to the IntranetIP of the client . In some embodiments if a computing device on the second network transmits a request the appliance processes the request as if it were the client . For example the appliance may respond to a ping to the client s IntranetIP . In another example the appliance may establish a connection such as a TCP or UDP connection with computing device on the second network requesting a connection with the client s IntranetIP .

In some embodiments the appliance provides one or more of the following acceleration techniques to communications between the client and server 1 compression 2 decompression 3 Transmission Control Protocol pooling 4 Transmission Control Protocol multiplexing 5 Transmission Control Protocol buffering and 6 caching.

In one embodiment the appliance relieves servers of much of the processing load caused by repeatedly opening and closing transport layers connections to clients by opening one or more transport layer connections with each server and maintaining these connections to allow repeated data accesses by clients via the Internet. This technique is referred to herein as connection pooling .

In some embodiments in order to seamlessly splice communications from a client to a server via a pooled transport layer connection the appliance translates or multiplexes communications by modifying sequence number and acknowledgment numbers at the transport layer protocol level. This is referred to as connection multiplexing . In some embodiments no application layer protocol interaction is required. For example in the case of an in bound packet that is a packet received from a client the source network address of the packet is changed to that of an output port of appliance and the destination network address is changed to that of the intended server. In the case of an outbound packet that is one received from a server the source network address is changed from that of the server to that of an output port of appliance and the destination address is changed from that of appliance to that of the requesting client . The sequence numbers and acknowledgment numbers of the packet are also translated to sequence numbers and acknowledgement expected by the client on the appliance s transport layer connection to the client . In some embodiments the packet checksum of the transport layer protocol is recalculated to account for these translations.

In another embodiment the appliance provides switching or load balancing functionality for communications between the client and server . In some embodiments the appliance distributes traffic and directs client requests to a server based on layer 4 or application layer request data. In one embodiment although the network layer or layer 2 of the network packet identifies a destination server the appliance determines the server to distribute the network packet by application information and data carried as payload of the transport layer packet. In one embodiment the health monitoring programs of the appliance monitor the health of servers to determine the server for which to distribute a client s request. In some embodiments if the appliance detects a server is not available or has a load over a predetermined threshold the appliance can direct or distribute client requests to another server .

In some embodiments the appliance acts as a Domain Name Service DNS resolver or otherwise provides resolution of a DNS request from clients . In some embodiments the appliance intercepts a DNS request transmitted by the client . In one embodiment the appliance responds to a client s DNS request with an IP address of or hosted by the appliance . In this embodiment the client transmits network communication for the domain name to the appliance . In another embodiment the appliance responds to a client s DNS request with an IP address of or hosted by a second appliance . In some embodiments the appliance responds to a client s DNS request with an IP address of a server determined by the appliance .

In yet another embodiment the appliance provides application firewall functionality for communications between the client and server . In one embodiment the policy engine provides rules for detecting and blocking illegitimate requests. In some embodiments the application firewall protects against denial of service DoS attacks. In other embodiments the appliance inspects the content of intercepted requests to identify and block application based attacks. In some embodiments the rules policy engine comprises one or more application firewall or security control policies for providing protections against various classes and types of web or Internet based vulnerabilities such as one or more of the following 1 buffer overflow 2 CGI BIN parameter manipulation 3 form hidden field manipulation 4 forceful browsing 5 cookie or session poisoning 6 broken access control list ACLs or weak passwords 7 cross site scripting XSS 8 command injection 9 SQL injection 10 error triggering sensitive information leak 11 insecure use of cryptography 12 server misconfiguration 13 back doors and debug options 14 website defacement 15 platform or operating systems vulnerabilities and 16 zero day exploits. In an embodiment the application firewall provides HTML form field protection in the form of inspecting or analyzing the network communication for one or more of the following 1 required fields are returned 2 no added field allowed 3 read only and hidden field enforcement 4 drop down list and radio button field conformance and 5 form field max length enforcement. In some embodiments the application firewall ensures cookies are not modified. In other embodiments the application firewall protects against forceful browsing by enforcing legal URLs.

In still yet other embodiments the application firewall protects any confidential information contained in the network communication. The application firewall may inspect or analyze any network communication in accordance with the rules or polices of the engine to identify any confidential information in any field of the network packet. In some embodiments the application firewall identifies in the network communication one or more occurrences of a credit card number password social security number name patient code contact information and age. The encoded portion of the network communication may comprise these occurrences or the confidential information. Based on these occurrences in one embodiment the application firewall may take a policy action on the network communication such as prevent transmission of the network communication. In another embodiment the application firewall may rewrite remove or otherwise mask such identified occurrence or confidential information.

Referring now to an embodiment of the client agent is depicted. The client includes a client agent for establishing and exchanging communications with the appliance and or server via a network . In brief overview the client operates on computing device having an operating system with a kernel mode and a user mode and a network stack with one or more layers . The client may have installed and or execute one or more applications. In some embodiments one or more applications may communicate via the network stack to a network . One of the applications such as a web browser may also include a first program . For example the first program may be used in some embodiments to install and or execute the client agent or any portion thereof. The client agent includes an interception mechanism or interceptor for intercepting network communications from the network stack from the one or more applications.

The network stack of the client may comprise any type and form of software or hardware or any combinations thereof for providing connectivity to and communications with a network. In one embodiment the network stack comprises a software implementation for a network protocol suite. The network stack may comprise one or more network layers such as any networks layers of the Open Systems Interconnection OSI communications model as those skilled in the art recognize and appreciate. As such the network stack may comprise any type and form of protocols for any of the following layers of the OSI model 1 physical link layer 2 data link layer 3 network layer 4 transport layer 5 session layer 6 presentation layer and 7 application layer. In one embodiment the network stack may comprise a transport control protocol TCP over the network layer protocol of the internet protocol IP generally referred to as TCP IP. In some embodiments the TCP IP protocol may be carried over the Ethernet protocol which may comprise any of the family of IEEE wide area network WAN or local area network LAN protocols such as those protocols covered by the IEEE 802.3. In some embodiments the network stack comprises any type and form of a wireless protocol such as IEEE 802.11 and or mobile internet protocol.

In view of a TCP IP based network any TCP IP based protocol may be used including Messaging Application Programming Interface MAPI email File Transfer Protocol FTP HyperText Transfer Protocol HTTP Common Internet File System CIFS protocol file transfer Independent Computing Architecture ICA protocol Remote Desktop Protocol RDP Wireless Application Protocol WAP Mobile IP protocol and Voice Over IP VoIP protocol. In another embodiment the network stack comprises any type and form of transport control protocol such as a modified transport control protocol for example a Transaction TCP T TCP TCP with selection acknowledgements TCP SACK TCP with large windows TCP LW a congestion prediction protocol such as the TCP Vegas protocol and a TCP spoofing protocol. In other embodiments any type and form of user datagram protocol UDP such as UDP over IP may be used by the network stack such as for voice communications or real time data communications.

Furthermore the network stack may include one or more network drivers supporting the one or more layers such as a TCP driver or a network layer driver. The network drivers may be included as part of the operating system of the computing device or as part of any network interface cards or other network access components of the computing device . In some embodiments any of the network drivers of the network stack may be customized modified or adapted to provide a custom or modified portion of the network stack in support of any of the techniques described herein. In other embodiments the acceleration program is designed and constructed to operate with or work in conjunction with the network stack installed or otherwise provided by the operating system of the client .

The network stack comprises any type and form of interfaces for receiving obtaining providing or otherwise accessing any information and data related to network communications of the client . In one embodiment an interface to the network stack comprises an application programming interface API . The interface may also comprise any function call hooking or filtering mechanism event or call back mechanism or any type of interfacing technique. The network stack via the interface may receive or provide any type and form of data structure such as an object related to functionality or operation of the network stack . For example the data structure may comprise information and data related to a network packet or one or more network packets. In some embodiments the data structure comprises a portion of the network packet processed at a protocol layer of the network stack such as a network packet of the transport layer. In some embodiments the data structure comprises a kernel level data structure while in other embodiments the data structure comprises a user mode data structure. A kernel level data structure may comprise a data structure obtained or related to a portion of the network stack operating in kernel mode or a network driver or other software running in kernel mode or any data structure obtained or received by a service process task thread or other executable instructions running or operating in kernel mode of the operating system.

Additionally some portions of the network stack may execute or operate in kernel mode for example the data link or network layer while other portions execute or operate in user mode such as an application layer of the network stack . For example a first portion of the network stack may provide user mode access to the network stack to an application while a second portion of the network stack provides access to a network. In some embodiments a first portion of the network stack may comprise one or more upper layers of the network stack such as any of layers 5 7. In other embodiments a second portion of the network stack comprises one or more lower layers such as any of layers 1 4. Each of the first portion and second portion of the network stack may comprise any portion of the network stack at any one or more network layers in user mode kernel mode or combinations thereof or at any portion of a network layer or interface point to a network layer or any portion of or interface point to the user mode and kernel mode .

The interceptor may comprise software hardware or any combination of software and hardware. In one embodiment the interceptor intercept a network communication at any point in the network stack and redirects or transmits the network communication to a destination desired managed or controlled by the interceptor or client agent . For example the interceptor may intercept a network communication of a network stack of a first network and transmit the network communication to the appliance for transmission on a second network . In some embodiments the interceptor comprises any type interceptor comprises a driver such as a network driver constructed and designed to interface and work with the network stack . In some embodiments the client agent and or interceptor operates at one or more layers of the network stack such as at the transport layer. In one embodiment the interceptor comprises a filter driver hooking mechanism or any form and type of suitable network driver interface that interfaces to the transport layer of the network stack such as via the transport driver interface TDI . In some embodiments the interceptor interfaces to a first protocol layer such as the transport layer and another protocol layer such as any layer above the transport protocol layer for example an application protocol layer. In one embodiment the interceptor may comprise a driver complying with the Network Driver Interface Specification NDIS or a NDIS driver. In another embodiment the interceptor may comprise a min filter or a mini port driver. In one embodiment the interceptor or portion thereof operates in kernel mode . In another embodiment the interceptor or portion thereof operates in user mode . In some embodiments a portion of the interceptor operates in kernel mode while another portion of the interceptor operates in user mode . In other embodiments the client agent operates in user mode but interfaces via the interceptor to a kernel mode driver process service task or portion of the operating system such as to obtain a kernel level data structure . In further embodiments the interceptor is a user mode application or program such as application.

In one embodiment the interceptor intercepts any transport layer connection requests. In these embodiments the interceptor execute transport layer application programming interface API calls to set the destination information such as destination IP address and or port to a desired location for the location. In this manner the interceptor intercepts and redirects the transport layer connection to a IP address and port controlled or managed by the interceptor or client agent . In one embodiment the interceptor sets the destination information for the connection to a local IP address and port of the client on which the client agent is listening. For example the client agent may comprise a proxy service listening on a local IP address and port for redirected transport layer communications. In some embodiments the client agent then communicates the redirected transport layer communication to the appliance .

In some embodiments the interceptor intercepts a Domain Name Service DNS request. In one embodiment the client agent and or interceptor resolves the DNS request. In another embodiment the interceptor transmits the intercepted DNS request to the appliance for DNS resolution. In one embodiment the appliance resolves the DNS request and communicates the DNS response to the client agent . In some embodiments the appliance resolves the DNS request via another appliance or a DNS server .

In yet another embodiment the client agent may comprise two agents and . In one embodiment a first agent may comprise an interceptor operating at the network layer of the network stack . In some embodiments the first agent intercepts network layer requests such as Internet Control Message Protocol ICMP requests e.g. ping and traceroute . In other embodiments the second agent may operate at the transport layer and intercept transport layer communications. In some embodiments the first agent intercepts communications at one layer of the network stack and interfaces with or communicates the intercepted communication to the second agent .

The client agent and or interceptor may operate at or interface with a protocol layer in a manner transparent to any other protocol layer of the network stack . For example in one embodiment the interceptor operates or interfaces with the transport layer of the network stack transparently to any protocol layer below the transport layer such as the network layer and any protocol layer above the transport layer such as the session presentation or application layer protocols. This allows the other protocol layers of the network stack to operate as desired and without modification for using the interceptor . As such the client agent and or interceptor can interface with the transport layer to secure optimize accelerate route or load balance any communications provided via any protocol carried by the transport layer such as any application layer protocol over TCP IP.

Furthermore the client agent and or interceptor may operate at or interface with the network stack in a manner transparent to any application a user of the client and any other computing device such as a server in communications with the client . The client agent and or interceptor may be installed and or executed on the client in a manner without modification of an application. In some embodiments the user of the client or a computing device in communications with the client are not aware of the existence execution or operation of the client agent and or interceptor . As such in some embodiments the client agent and or interceptor is installed executed and or operated transparently to an application user of the client another computing device such as a server or any of the protocol layers above and or below the protocol layer interfaced to by the interceptor .

The client agent includes an acceleration program a streaming client and or a collection agent . In one embodiment the client agent comprises an Independent Computing Architecture ICA client or any portion thereof developed by Citrix Systems Inc. of Fort Lauderdale Fla. and is also referred to as an ICA client. In some embodiments the client comprises an application streaming client for streaming an application from a server to a client . In some embodiments the client agent comprises an acceleration program for accelerating communications between client and server . In another embodiment the client agent includes a collection agent for performing end point detection scanning and collecting end point information for the appliance and or server .

In some embodiments the acceleration program comprises a client side acceleration program for performing one or more acceleration techniques to accelerate enhance or otherwise improve a client s communications with and or access to a server such as accessing an application provided by a server . The logic functions and or operations of the executable instructions of the acceleration program may perform one or more of the following acceleration techniques 1 multi protocol compression 2 transport control protocol pooling 3 transport control protocol multiplexing 4 transport control protocol buffering and 5 caching via a cache manager Additionally the acceleration program may perform encryption and or decryption of any communications received and or transmitted by the client . In some embodiments the acceleration program performs one or more of the acceleration techniques in an integrated manner or fashion. Additionally the acceleration program can perform compression on any of the protocols or multiple protocols carried as payload of network packet of the transport layer protocol The streaming client comprises an application program process service task or executable instructions for receiving and executing a streamed application from a server . A server may stream one or more application data files to the streaming client for playing executing or otherwise causing to be executed the application on the client . In some embodiments the server transmits a set of compressed or packaged application data files to the streaming client . In some embodiments the plurality of application files are compressed and stored on a file server within an archive file such as a CAB ZIP SIT TAR JAR or other archive. In one embodiment the server decompresses unpackages or unarchives the application files and transmits the files to the client . In another embodiment the client decompresses unpackages or unarchives the application files. The streaming client dynamically installs the application or portion thereof and executes the application. In one embodiment the streaming client may be an executable program. In some embodiments the streaming client may be able to launch another executable program.

The collection agent comprises an application program process service task or executable instructions for identifying obtaining and or collecting information about the client . In some embodiments the appliance transmits the collection agent to the client or client agent . The collection agent may be configured according to one or more policies of the policy engine of the appliance. In other embodiments the collection agent transmits collected information on the client to the appliance . In one embodiment the policy engine of the appliance uses the collected information to determine and provide access authentication and authorization control of the client s connection to a network .

In one embodiment the collection agent comprises an end point detection and scanning mechanism which identifies and determines one or more attributes or characteristics of the client. For example the collection agent may identify and determine any one or more of the following client side attributes 1 the operating system an or a version of an operating system 2 a service pack of the operating system 3 a running service 4 a running process and 5 a file. The collection agent may also identify and determine the presence or versions of any one or more of the following on the client 1 antivirus software 2 personal firewall software 3 anti spam software and 4 internet security software. The policy engine may have one or more policies based on any one or more of the attributes or characteristics of the client or client side attributes.

In some embodiments and still referring to a first program may be used to install and or execute the client agent or portion thereof such as the interceptor automatically silently transparently or otherwise. In one embodiment the first program comprises a plugin component such an ActiveX control or Java control or script that is loaded into and executed by an application. For example the first program comprises an ActiveX control loaded and run by a web browser application such as in the memory space or context of the application. In another embodiment the first program comprises a set of executable instructions loaded into and run by the application such as a browser. In one embodiment the first program comprises a designed and constructed program to install the client agent . In some embodiments the first program obtains downloads or receives the client agent via the network from another computing device. In another embodiment the first program is an installer program or a plug and play manager for installing programs such as network drivers on the operating system of the client .

Referring now to an embodiment of a network of appliances for load balancing resources across branch offices is depicted. In brief overview a plurality of appliances are connected to and provide access to a plurality of branch offices A N. Each branch office may comprise a network and one or more servers . The plurality of appliances are connected via a network by which they may communicate information corresponding to the appliances and the branch offices for load balancing purposes. Each appliance may monitor the set of servers to which it provides access and report operational and performance characteristics of the network services executing on the servers to one or more other appliances .

Still referring to now in greater detail in some embodiments the appliances providing access to branch offices may provide any of the functionality operations and services of an appliance described in conjunction with . The branch office appliances A N may provide acceleration load balancing switching SSL VPN and or application firewall services to any of the computing devices and users of its respective branch office A N. In one embodiment each of the branch office appliances A N provide the same functionality operations and service. In other embodiments each of the branch office appliance may provide different functionality operations or services than another branch office appliance. For example a first branch office appliance A may provide for SSL VPN and acceleration and a second branch office appliance B may provide load balancing switching with SSL VPN . A third branch office appliance N may provide only SSL VPN and a fourth branch office appliance N acceleration . Further to the example a fifth branch office appliance B may provide acceleration while a sixth branch office appliance C provides application firewall functionality.

Although branch office appliances are generally described as an appliance in a branch office the branch office appliance may be an appliance deployed at any location in a network. For example a branch office appliance may be deployed at a data center. In another example a branch office appliance may be deployed on a subnet or network segment of a corporate LAN . In another embodiment a branch office appliance A may be deployed on a first corporate LAN and a second branch office appliance B on a second corporate LAN. So although the appliance is described in as a branch office appliance it is not limited to operations only at a branch office .

In one embodiment a branch office appliance requests operational or performance information from or otherwise monitors each of the servers or network services it provides access to. In some embodiments the branch office appliance requests information upon establishment of the connection to a server . In another embodiment the branch office appliance requests information or otherwise monitors a network service on a predetermined frequency such as every 1 sec or 1 msec. For example a branch office appliance may poll each of its connected servers every 1 sec for availability. In some embodiments a branch office appliance requests availability information from connected network services over a predetermined time period such as every 1 sec for an hour. In yet another embodiment a branch office appliance requests information from connected servers upon an event such as receiving a request from a client or receiving a DNS request. The information requested may comprise any operational or performance characteristic. In some embodiments an appliance may use one or more monitoring agents to monitor a network service as will be discussed in detail with respect to .

In some embodiments the operational and or performance characteristic information includes information on any of the following for a network service 1 load 2 numbers and types of connections 3 resource usage 4 resource availability 5 number of requests outstanding 6 number of requests transmitted 7 number of clients servicing 8 response time information including average and historical response times 9 errors status performance or bandwidth of a connection 10 number of sessions and states or status thereof and 11 a weight assigned to the server.

In one embodiment a branch office appliance may calculate or be configured with an assigned weight for a network service and the weight may subsequently be used for load balancing purposes. This weight may be calculated or configured in response to any of the performance characteristics described above. A weight may be an integer decimal number or any other type of numeric indicator. In some embodiments weights may be assigned to network services based on the capacity of the server hosting the service. In one embodiment an appliance may be preconfigured with the capacities of the network services of the branch office to which it provides access and may calculate weights based on these capacities. In another embodiment an appliance may query a network service to determine the service s capacity.

In one embodiment the weight assigned to a network service may reflect a ratio of the network service capacity as compared to the capacity of at least one other network service . For example two network services having equal capacities of servicing 1000 requests per second may be assigned equal weights. Or for example a network service having a capacity of servicing 1000 requests per second may be assigned a weight corresponding to half the weight assigned to a network service capable of servicing 2000 requests per second. Or for example a network service having a capacity of 3000 requests second might be assigned a weight of 5 a network service having a capacity of servicing 6000 requests second might be assigned a weight of 10 and a network service having a capacity of servicing 9000 requests second might be assigned a weight of 15. Or for example weights may be assigned to network services by dividing the network service s capacity by a fixed number.

In another embodiment weights may be assigned to servers based on server capacity minus load. In this embodiment the weight represents the available capacity for the server. For example a first network service capable of handling 2000 requests per second and which has a current average load of 1500 requests per second may have an available capacity of 500 requests second. A second network service capable of handling 2000 requests per second and which has a current average load of 1000 requests per second may have an available capacity of 1000 requests second. The second network service may be assigned a weight double the weight of the first network service reflecting that it has twice the available capacity.

In one embodiments the appliances receive information from a respective branch office appliance via a local area network connection. In some embodiments the a branch office appliances establish or communicate via a transport layer connection such as a TCP or UDP connection. In other embodiments the branch office appliances maintain a connection with each other. In other embodiments the branch office appliances establish connections to each other on an as needed basis e.g. connect and reconnect when they need to communicate.

In one embodiment a first branch office appliance A transmits to a second branch office appliance weight or availability information corresponding to one or more network services . The second branch office appliance B stores the received information In some embodiments this received information is aggregated or combined with information received from other branch office appliances . The branch office appliances A N may exchange or provide information once or on a predetermined frequency such as every 1 msec or 1 sec. In some embodiments the first and second branch office appliances use a request reply messaging mechanism or protocol to transmit information to each other. In other embodiments the first and second branch office appliances have a custom or proprietary exchange protocol for exchanging information.

In some embodiments a branch office appliance establishes a connection or communicates with a predetermined number of other branch office appliances . In other embodiments the branch office appliance collects and aggregates information from a predetermined number of branch office appliances . In one embodiment the predetermined number of branch offices is 31. In another embodiments the predetermined number of branch offices is 32. In yet other embodiments the predetermined number of branch offices is 16 48 60 96 128 or 256. In a further embodiment the predetermined number of branch offices is 10 20 30 40 50 60 70 80 90 100 150 200 or 250. The number of branch offices a branch office appliance may connect to or collect information from may depend on the operational or performance characteristics of the network the appliance the branch offices and branch office networks along with the applications data and resource usage of the users across branch offices. In some embodiments the predetermined number of branch office appliances may not be set or configured or otherwise limited only by the memory capacity and performance of the branch office appliance .

In another embodiment a branch office appliance requests information from each of the branch office appliance it is connected to. In some embodiments the branch office appliance requests information upon establishment of the connection to another branch office appliance . In another embodiment the branch office appliance requests information from another branch office appliance on a predetermined frequency such as every 1 sec or 1 msec. For example a branch office appliance may poll each of its connected branch office appliances A N every 1 sec for information . In some embodiments a branch office appliance requests information from another branch office appliance over a predetermined time period such as every 1 sec for an hour. In yet another embodiment a branch office appliance requests information from a branch office appliance upon an event such as receiving a request from a client or receiving a DNS request.

The information transmitted among the branch office appliances may comprise any type and form of data statistics status or information related to or associated with the operational and or performance characteristics of a branch office appliance a network of the branch office appliance and or any connection to a branch office appliance such as via a client server and network service . In some embodiments the information comprises operational and or performance data on any client server or network service connected to the branch office appliance . In one embodiment the branch office appliance determines operational and or performance information about any network service it is connected to or servicing and creates information on these network services . In this embodiment the branch office appliance may provide this information to the other branch office appliances .

Referring now to a block diagram of an appliance using a plurality of monitoring agents to monitor a network service is shown. In brief overview an appliance comprises a plurality of monitoring agents . Each of the plurality of monitoring agents is assigned to monitor a service . In one embodiment each of the plurality of monitoring agents may be assigned a weight. Monitoring agents may also be referred to as probes.

Still referring to an appliance comprises a plurality of monitoring agents . A monitoring agent may comprise any program script daemon or other computing routine that reports a performance or operational characteristic of a network service to the appliance . A monitoring agent may communicate with a network service once or on a predetermined frequency such as every 1 msec or 1 sec. In some embodiments a monitoring agent may use a request reply messaging mechanism or protocol with the server. In other embodiments a monitoring agent may have a custom or proprietary exchange protocol for communicating with the server. In some embodiments a single monitoring agent may monitor a plurality of servers. In other embodiments a plurality of agents may monitor a single server. In still other embodiments a plurality of monitoring agents may each monitor a plurality of servers wherein each of the plurality of servers is monitored by a plurality of monitoring agents.

In the embodiment shown the one or more monitoring agents are associated with one or more network services . In other embodiments the one or more monitoring agents may monitor an appliance vServer network service client or any other network resource. In one embodiment a user specifies a type of network service to associate with the one or more monitoring agents . In another embodiment a user customizes a monitoring agent. In still another embodiment a generic monitoring agent is used. In yet another embodiment the one or more monitoring agents determine the response time of the one or more network services for responding to a request of one of the following types ping transport control protocol tcp tcp extended content verification hypertext transfer protocol http http extended content verification hypertext transfer protocol secure https https extended content verification user datagram protocol domain name service and file transfer protocol.

In some embodiments the one or more monitoring agents are protocol specific agents each agent determining availability for a network service of a particular protocol type. In some embodiments a monitoring agent determines a response time of a server or network service to a TCP request. In one of these embodiments the agent uses a TCP ICMP echo request command to send a datagram to the network service receive a datagram from the network service in response and determine a response time based on the roundtrip time of the datagram. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content and did not contain errors.

In other embodiments a monitoring agent determines availability of a network service to a UDP request. In one of these embodiments the agent uses a UDP echo command to send a datagram to the network service receive a datagram from the network service in response and determine a response time based on the roundtrip time of the datagram. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content and did not contain errors.

In still other embodiments the monitoring agent determines availability of a network service to an FTP request. In one of these embodiments the monitoring agent sends an FTP command such as a get command or a put command to the network service and determines a time needed by the network service to respond to the command. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as contents of a file requested by a get command and did not contain errors.

In yet other embodiments the monitoring agent determines availability of a network service to an HTTP request. In one of these embodiments the monitoring agent sends an HTTP command such as a get request for a uniform resource locator URL or a file to the network service and determines a time needed by the network service to respond to the request. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as the contents of a web page identified by the URL and did not contain errors.

In further embodiments the monitoring agent determines availability of a network service to a DNS request. In one of these embodiments the monitoring agent sends a DNS request such as a dnsquery or nslookup for a known network address to the server or network service and determines a time needed by the server or network service to respond to the request. In another of these embodiments the monitoring agent verifies that the response from the network service included expected content such as the domain name of a computing device associated with the known network address and did not contain errors.

A monitoring agent may be assigned a weight by a network appliance . A weight may comprise an integer decimal or any other numeric indicator. In some embodiments a user may configure the weight corresponding to a given monitoring agent . In some embodiments all monitoring agents may be assigned equal weight. In other embodiments a plurality of monitoring agents may each be assigned different weights. The weights may be assigned to the monitors based on any criteria indicating relative importance including without limitation importance of the monitored service reliability of the monitoring mechanism and the frequency of monitoring.

In one embodiment a monitoring agent may be assigned a weight based on the relative importance of the service the appliance monitors. For example if most user requests in a given environment were HTTP requests a monitoring agent monitoring HTTP availability of a server might be assigned a weight of 10 while a monitoring agent monitoring FTP availability of a server might be assigned a weight of 3. Or for example if an administrator placed a high priority on UDP applications a monitoring agent monitoring UDP availability of a server may be assigned a weight of 20 while a DNS monitoring agent may be assigned a weight of 5.

In some embodiments an appliance may compute a sum of the weights of the monitoring agents currently reporting a network service as operational. For example if five monitoring agents each assigned a weight of 30 are monitoring a network service and three of the five monitoring agents report the network service as available the appliance may determine the sum of the monitoring agents currently reporting the network service as operational to be 90. Or for example if only two monitoring agents one with a weight of 20 and the other with a weight of 40 are reporting a server as available the appliance may compute the sum of the monitoring agents currently reporting a server as operational to be 60.

Referring now to a flow diagram of a method for enabling decentralized dynamic load balancing among a plurality of appliances providing access to a plurality of sites each site comprising a local area network and at least one server is shown. In brief overview the method comprises determining by a first appliance a first number of services currently available for access via a local area network connected to the first appliance step receiving by the first appliance from a second appliance a communication indicating a second number of services currently available for access via a local area network connected to the second appliance step receiving by the first appliance a plurality of requests to connect to a service step determining by the first appliance a weight to be assigned to the second appliance wherein the determination is responsive to the second number step and forwarding by the first appliance to the second appliance a subset of the plurality of requests wherein the number of requests comprising the subset is determined in response to the determined weight step .

Still referring to now in greater detail a first appliance determines a first number of services currently available for access via a local area network connected to the first appliance step . The first appliance may determine the availability of the servers on the local area network using any means. In one embodiment the appliance may use one or more monitoring agents to determine the availability of the services . In another embodiment the appliance may compute a sum of the weights of a plurality of monitors to determine whether a service is available as will be discussed in conjunction with . In some embodiments the appliance may determine at a regular interval a number of services currently available for access via a local area network connected to the first appliance. In other embodiments the appliance may determine in response to an event such as a client request a number of services currently available for access via a local area network connected to the first appliance.

In one embodiment the first appliance may determine a sum of weights of services currently available for access via a local area network connected to the second appliance. For example if an appliance determines three services are available each having a weight of 40 the appliance may determine the sum of weights of services currently available for access to be 120. These weights may be assigned or configured according to any method described herein.

In one embodiment the first appliance may determine a number of available services providing a given network service. For example the first appliance may determine the number of currently available HTTP services. Or for example the first appliance may determine the number of currently available FTP services. In another embodiment the first appliance may determine a number of available services providing a given application. For example the first appliance may determine a number of available electronic mail services or a number of available services for streaming a word processing application.

After determining by a first appliance a first number of services currently available for access via a local area network connected to the first appliance step the first appliance may receive from a second appliance a communication indicating a second number of services currently available for access via a local area network connected to the second appliance step . This communication may be received via any protocol. In some embodiments the first appliance may receive from a plurality of appliances a plurality of communications wherein each communication indicates a number of services currently available for access via a local area network connected to one of the plurality of appliances.

In some embodiments the first appliance may receive at regular intervals from a second appliance a communication indicating a second number of services currently available for access via a local area network connected to the second appliance. In other embodiments the first appliance may receive in response to an event from a second appliance a communication indicating a second number of services currently available for access via a local area network connected to the second appliance.

In one embodiment the first appliance may receive from a second appliance a communication indicating a second number the second number comprising a sum of weights of services currently available for access via a local area network connected to the second appliance. In another embodiment the first appliance may receive from a plurality of appliances a plurality of communications wherein each communication indicates a number comprising a sum of weights of services currently available for access via a local area network connected to one of the plurality of appliances.

After receiving by the first appliance from a second appliance a communication indicating a second number of services currently available for access via a local area network connected to the second appliance step the first appliance may receive a plurality of requests to connect to a service step . The first appliance may receive the requests from one or more clients servers or other appliances. In some cases the plurality of requests may all be received within a given time period. The requests may comprise any connection request including without limitation a TCP connection request an SSL connection request an HTTP connection request and an FTP connection request.

After receiving a plurality of requests to connect to a service step the first appliance may determine a weight to be assigned to the second appliance wherein the determination is responsive to the second number step . In some embodiments the appliance may determine weights at given intervals. In other embodiments the appliance may determine weights in response to events. In some embodiments the appliance may determine weights prior to receiving any requests for a service.

In some embodiments the determined weight may be a ratio of the number of services available via the second appliance to the number of service available via the first appliance. For example a first appliance may determine that 10 of the services connected to the first appliance are available. A second appliance may report that 5 of the services in the branch office the second appliance provides access to are available. The total number of other available services may thus be 10. In this example the first appliance may determine to assign the second appliance a weight of 5 while assigning itself a weight of 10. Or in this example the first appliance may determine to assign the second appliance a weight of 10 while assigning itself a weight of 20. As another example a first appliance may determine that 250 is the sum of the weights of the available services connected to the first appliance. A second appliance may report that 500 is the sum of the weights of the available services connected to the second appliance. In this example the first appliance may determine to assign the second appliance a weight of 2 while assigning itself a weight of 1. Or in this example the first appliance may determine to assign the second appliance a weight of 20 while assigning itself a weight of 10.

In another embodiment the first appliance may assign a weight to the second appliance wherein the weight is determined in response to the ratio of the second number to a sum of the first number and at least one number received from a third appliance. For example a first appliance may determine that 10 of the services connected to the first appliance are available. A second appliance may report that 5 of the services in the branch office the second appliance provides access to are available. A third appliance may report that 15 of the services in the branch office the second appliance provides access to are available. The sum of other available services may thus be 25. In this example the first appliance may determine to assign the second appliance a weight of 1 while assigning itself a weight of 2 and assigning the third appliance a weight of 3. Or in this example the first appliance may determine to assign the second appliance a weight of 10 while assigning itself a weight of 20 and assigning the third appliance a weight of 30. As another example a first appliance may determine that 300 is the sum of the weights of the available services connected to the second appliance. A second appliance may report that 500 is the sum of the weights of the available services connected to the second appliance. A third appliance may report that 100 is the sum of the weights of the available services connected to the third appliance. In this example the first appliance may determine to assign the second appliance a weight of 5 while assigning itself a weight of 3 and assigning the third appliance a weight of 1. Or in this example the first appliance may determine to assign the second appliance a weight of 30 while assigning itself a weight of 20 and assigning the third appliance a weight of 10.

In other embodiments the weight assigned to the second appliance may be determined in response to numbers of available servers received from 4 5 6 7 8 9 10 16 20 30 32 64 100 or any other number of other appliances. In other embodiments the weight assigned to the second appliance may be determined in response to sums of weights of available servers received from 4 5 6 7 8 9 10 16 20 30 32 64 100 or any other number of other appliances.

After assigning a weight to the second appliance step the first appliance may forward to the second appliance a subset of the plurality of requests wherein the number of requests comprising the subset is determined in response to the determined weight step . The requests may be forwarded according to any of the protocols described herein.

In one embodiment the first appliance may forward a number of requests to the second appliance proportionate to the assigned weights of the first and second appliances. For example if the first appliance has a weight of 10 and the second appliance has a weight of 20 the first appliance may forward of incoming requests to the second appliance. Or for example if the first appliance has a weight of 10 the second appliance has a weight of 20 and a third appliance has a weight of 10 the first appliance may forward of the incoming requests to the second appliance. In this example the first appliance may then forward of the incoming requests to the third appliance and service of the requests itself.

The subset of requests forwarded to the second appliance may be determined using any weighted load balancing method. In one embodiment the first appliance may use a weighted round robin method. In another embodiment the first appliance may always forward incoming requests to the appliance with the highest weight. In some embodiments the appliance may forward incoming requests as they are received. In another embodiment the appliance may buffer incoming requests and then forward multiple requests simultaneously.

Referring now to a flow diagram of a method for determining service availability using a plurality of weighted monitoring agents is shown. In brief overview the method comprises establishing by an appliance a plurality of agents the plurality of agents monitoring a service executing on a server and each agent having an assigned weight step computing by the appliance a sum of the assigned weights of the agents reporting the service as currently operational step determining by the appliance the sum falls below a given threshold step and transmitting by the appliance an indication that the service is unusable step .

Still referring to now in greater detail an appliance establishes a plurality of agents the plurality of agents monitoring a service executing on a server and each agent having an assigned weight step The monitoring agents may comprise any monitoring agent described herein and may be assigned a weight according to any of the methods described herein. In one embodiment the appliance may establish the plurality of monitoring agents upon boot up of the appliance. In another embodiment the appliance may establish the plurality of monitoring agents upon startup of the server.

After establishing the monitoring agents step the appliance may compute a sum of the assigned weights of the agents reporting the service as currently operational step . In some embodiments the appliance may determine whether an agent is reporting the service as operational based on a response time the agent reports for the server. For example an appliance may be configured to treat as non operational any service with a response time greater than 3 seconds. Or for example an appliance may treat as non operational any response time from an HTTP monitoring agent greater than 2 seconds while treating as non operation any response time from a UDP monitoring agent greater than 0.5 seconds. In another embodiment the appliance may use a rolling average of an agent s reported response time for the server to determine whether the server is available.

In some embodiments the appliance may compute the sum of the assigned weights of the agents reporting the service as currently operational at predefined regular intervals. For example the appliance may compute the sum once every 0.1 0.5. 1 2 3 4 5 or 10 seconds. In other embodiments the appliance may compute the sum of the assigned weights of the agents reporting the service as currently operational in response to an event such as a client request or a communication from another appliance.

After computing a sum of the assigned weights of the agents reporting the service as currently operational step the appliance may determine the sum falls below a given threshold step . The threshold may be any number. In some embodiments the threshold may be configured by an administrator. In some embodiments the threshold may be set such that the threshold represents a given fraction of the total weights of the monitoring agents. For example if there are four monitoring agents each with a weight of 10 the threshold may be set to 20 such that if the sum of the assigned weights of the agents reporting the service as currently operational falls below the threshold it indicates more than half of the agents report the service as unavailable.

After determining the sum falls below a given threshold step the appliance may transmit an indication that the service is unusable step . In some embodiments the appliance may transmit the indication to a client. In another embodiment the appliance may transmit the indication to a second appliance. In some embodiments the appliance may transmit the indication to a second appliance in the course of reporting a number of available services. In some embodiments a recipient of the transmission may use the transmission for load balancing methods such as those described in conjunction with .

Referring now to an embodiment of a system for providing management of transport layer connections via an appliance using a dynamic maximum connection threshold is depicted. In brief overview the appliance establishes a first vServer A to load balance a plurality of clients access to one or more services A N of a first set of servers A N. The appliance includes a connection management mechanism for managing and balancing transport layer connection requests from clients to one or more set of services A N. The appliance establishes for the first vServer A a maximum dynamic connection threshold A based on the sum of the connection capacity A N each of the services A N are targeted or configured to handle. Via monitoring agents A N the appliance monitors the operational status of each of the services A N. If any of the services A N have a change in status from available to not available or not available to available the appliance adjusts the dynamic maximum connection threshold A by including or not including the corresponding connection capacity A B of the service in the summation of the threshold. For example if the appliance detects a first service A has a status of not available the appliance subtracts the connection capacity A of the first service A from the maximum dynamic connection threshold A. As such the appliance dynamically adjusts the maximum connection threshold for a vServer in real time in accordance with the monitored status of the services A N and each service s corresponding connection capacity A N.

In further detail the connection management mechanism comprises software hardware or any combination of software and hardware having logic functions or operations for receiving and managing connection requests and communications from one or more clients A N. In one embodiment the connection management mechanism receives or intercepts transport layer connection requests and communications between the clients A N and one or more services A N. The connection management mechanism may include an application program service process task thread or any type and form of executable instructions. In another embodiment the connection management mechanism identifies determines or selects a vServer for processing a received communication from a client .

In some embodiments the connection management mechanism determines if the dynamic maximum connection threshold has been reached or exceeded. The connection management mechanism determines if the dynamic maximum connection threshold is exceeded and whether or not to establish a backup or second vServer N e.g. a spillover vServer. Upon detecting the number of active transport layer connections of the first vServer A exceeds the dynamically adjusted maximum connection threshold the connection management mechanism may direct transfer or otherwise provide a received transport layer connection request of a client to the second vServer N for handling. By using the dynamically adjusted maximum connection threshold the connection management mechanism dynamically and automatically spillovers connection requests from clients from a first vServer A to a backup or second vServer N.

In other embodiments the connection management mechanism may maintain connection or session persistence between a client and the vServer A N handling requests for the client . In some embodiments the connection management mechanism selects the spillover vServer N for handling a client request even though the number of active connections of the first vServer A does not exceed the maximum connection threshold . In other embodiments the connection management mechanism selects the first vServer A for handling a client request event though requests from other clients are directed to the spillover vServer N. In one embodiment the connection management mechanism may select the first vServer A or second vServer N based on which vServer most recently handled a request from the client .

Upon detecting the dynamically adjusted maximum connection threshold has been exceeded for the first vServer A and or the second vServer N the connection management mechanism in one embodiment may determine not to establish another spillover vServer N but instead redirects the client directly to a server or otherwise to bypass the appliance . For example the connection management mechanism may determine the dynamically adjusted maximum connection threshold B for the spillover vServer N has been reached and may redirect the client to bypass the appliance instead of establishing a third vServer N for spillover. In these embodiments the connection management mechanism may transmit a redirect Uniform Resource Locator URL to the client for the client to connect to in response to the client s connection request. The URL may identify any one of the servers or services .

In yet another embodiment the appliance and or connection management mechanism manages the number of active connections and performs dynamic spillover techniques for a plurality of vServers A N. In one embodiment the second vServer B may be managing connections from a plurality of clients A N to a second set of services A N . In some embodiments the appliance monitors a second dynamic maximum connection threshold B for a second vServer B. In one embodiment the second vServer B may be acting as a spillover vServer for the first vServer N or a third vServer.

The connection capacity for a service comprises a predetermined number of clients transport layer connections or users a service is designed configured or intended to handle or process. In some embodiments the connection capacity comprises a maximum number of clients connections or users a service is configured targeted or intended to handle or process. In one embodiment a user such as the administrator of the appliance configures the connection capacity for the service . In another embodiment the appliance determines the connection capacity from the service or server providing the service . For example the appliance may transmit a request to the server or service for its connection capacity and in response the server transmits to the appliance a predetermined number of active connections it may handle.

Each of the connection capacities A N may comprise any combination of a same or different connection capacity as another capacity. In one embodiment the connection capacity A for a first server A is different than the connection capacity B of a second server B. In some embodiments the connection capacity A for a first service A is the same as the connection capacity B for a second service B. In another embodiment the connection capacity A of a service A may be set to a value below the service s actual connection capacity. In other embodiments the connection capacity A of a service A may be set to a value above the service s actual connection capacity. In some embodiments the connection capacities may represent a connection based weighting of each of the services A N in a first set or second set of a plurality of services.

The dynamic maximum connection threshold A N generally comprises a predetermined number identifying a maximum number of active transport layer connections the vServer is configured designed or otherwise intended to process handle or have active. In one embodiment a user such as an administrator of the appliance configures the dynamic maximum connection threshold . In another embodiment the appliance sets the dynamic maximum connection threshold to a default value of the sum of the configured connection capacity for each of the services A N managed by the vServer .

The appliance may adjust the dynamic maximum connection threshold in response to events corresponding to a vServer and to one or more services . The appliance may monitor the services using one or more monitoring agents . In one embodiment the appliance may adjust the dynamic maximum connection threshold in response to a monitoring agent reporting a service as unavailable. If a service with a given connection capacity is reported as unavailable the appliance may subtract the service s connection capacity from the dynamic maximum connection threshold of the vServer providing access to that service . Further if the service previously reported as unavailable is then reported as available the appliance may then add back the connection capacity for that service to the dynamic maximum connection threshold .

The monitoring agents may monitor any aspect of a service and may use any technique to determine whether a given service is available. In one embodiment a monitor may measure the response time of a service and report the service as unavailable if the response time exceeds a given threshold. In another embodiment a monitor may measure the response time of a service and report the service as unavailable if the response time exceeds a determined average response time for the service . In still another embodiment a monitor may measure the response time of a service and report the service as unavailable if the response time exceeds a given deviation from a determined average response time for the service.

Although the technique of dynamically adjusted maximum connection threshold is generally discussed in view of transport layer connections and connection requests the appliance may perform this technique for any type and form of transport layer protocol or application layer protocol carried via the transport layer. In one embodiment the appliance may perform dynamic connection spillover among vServers A N using a dynamically adjusted maximum connection threshold for Secure Socket Layer SSL or Transport Layer Security TLS connections and connection requests.

Referring now to steps of an embodiment of a method for practicing a technique of dynamical spillover management is depicted. In brief overview the method comprises establishing on an appliance a first virtual server which directs transport layer connection requests from a plurality of clients to a first plurality of services step establishing via the appliance a predetermined threshold identifying a maximum active transport layer connection capacity for the first virtual server the predetermined threshold comprising a sum of a predetermined connection capacity for each of the plurality of services step monitoring by the appliance a status for each of the plurality of services step and adjusting by the appliance the predetermined threshold to comprise the sum of the predetermined connection capacity for each of the plurality of services having a status of available step . The appliance may then receive a transport layer connection request step determine that a number of active connections to the first virtual server exceeds the predetermined threshold step . The appliance may then determine to provide the request to a second virtual server step .

Still referring to now in greater detail an appliance establishes a first virtual server which directs transport layer connection requests from a plurality of clients to a first plurality of services step . This virtual server may comprise any virtual server capable of providing access to one or more services . In one embodiment the virtual server may comprise a vServer . In one embodiment the appliance may establish the virtual server upon startup of the appliance. In another embodiment the appliance may establish the virtual server in response to a previously established virtual server exceeding maximum connection threshold. In one embodiment the appliance may establish a plurality of virtual servers.

In the embodiment shown the appliance may then establish a dynamic maximum connection threshold for the first virtual server step . In some embodiments the threshold comprises a sum of a predetermined connection capacity for each of the plurality of services. In one embodiment the threshold may be initially configured by a user or administrator of the appliance. In another embodiment the threshold may be initially determined by the appliance by polling one or more services .

In the embodiment shown the appliance may then monitors a status for each of the plurality of services step . The appliance may monitor a status for each of the services using any means. In one embodiment the appliance may use a monitoring agent . In another embodiment the appliance may use a plurality of monitoring agents . In one embodiment the appliance may monitor the status for each of the services at predetermined time intervals for example once every 0.01 0.1 0.2 0.5 or 1 seconds. In another embodiment the appliance may monitor the status for each of the services asynchronously.

In the embodiment shown the appliance may then adjust the predetermined threshold to comprise the sum of the predetermined connection capacity for each of the plurality of services having a status of available step . For example if a service with a given connection capacity is reported as unavailable the appliance may subtract the service s connection capacity from the dynamic maximum connection threshold of the vServer providing access to that service . Further if a service previously reported as unavailable is then reported as available the appliance may then add back the connection capacity for that service to the dynamic maximum connection threshold .

In the embodiment shown the appliance may then receive a transport layer connection request step . The transport layer request may comprise any request to connect to a service . The transport layer request may be received from any computing device including a client server or a second appliance . In one embodiment the request may identify a type of service . For example the transport layer request may comprise a request for HTTP service. Or for example the transport layer request may comprise a request for UDP service.

In the embodiment shown the appliance may then determine whether the dynamic maximum connection threshold of the first virtual server has been exceeded. The appliance may compare the current connection load for the first virtual server with the current value of the dynamic maximum connection threshold for the first virtual server. In one embodiment the first virtual server may comprise a primary or default virtual server. In another embodiment the first virtual server may comprise a primary or default virtual server for a particular type of service. If the dynamic maximum connection threshold of the first virtual server has not been exceeded the appliance may provide the connection request to the first virtual server step .

If the dynamic maximum connection threshold of the first virtual server has been exceeded the appliance may establish in response to the threshold being exceeded a second virtual server step . In other embodiments a second virtual server may already have been established prior to some or any of the steps shown. The second virtual server may provide access to a second plurality of services . In one embodiment one or more of the second plurality of services may comprise the same type of service as one or more of the first plurality of services. The appliance may then establish and subsequently adjust a dynamic maximum connection threshold corresponding to the second virtual server. The appliance may then provide the connection request to the second virtual server step .

In other embodiments a second virtual server may already have been established prior to some or any of the steps shown. The second virtual server may provide access to a second plurality of services . In one embodiment one or more of the second plurality of services may comprise the same type of service as one or more of the first plurality of services. The appliance may then provide the connection request to the second virtual server step . The appliance may then establish and subsequently adjust a dynamic maximum connection threshold corresponding to the second virtual server.

In still other embodiments if the dynamic maximum connection threshold of the first virtual server has been exceeded the appliance may in response to the threshold being exceeded redirect the client making the request to another resource. In one embodiment the appliance may transmit a URL to the client comprising the address of a server or service such that the client may bypass the appliance and access the server or service directly. In one embodiment the appliance may transmit a URL to the client comprising the address of a second appliance . In still another embodiment the appliance may redirect the client request to a second appliance based on a dynamically determined connection capacity for the second appliance as discussed in conjunction with .

The appliance may then determine whether the client making the connection request has a previously existing connection with either the first or a second virtual server step . In some embodiments an appliance may assign a priority to providing connection requests from a client to virtual servers that have previously serviced or are currently servicing connections from the client. For example if a connection request is received from a client and the client has a currently existing connection with a first virtual server the appliance may provide the connection request to the first virtual server even if the first virtual server is above its dynamic maximum connection threshold. Or for example if a client has a previous connection via a backup virtual server and the primary virtual server subsequently becomes available again the appliance may still provide a subsequent connection request from the client to the backup virtual server. In one embodiment a connection management mechanism or other appliance component may track previously established or current connections so that incoming connection requests from a client can be provided to a virtual server having previously serviced connections from the client.

While the invention has been particularly shown and described with reference to specific embodiments it should be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention as defined by the appended claims

