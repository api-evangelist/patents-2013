---

title: System and method for remote generation of indirect illumination sources in three-dimensional graphics
abstract: A method for generating three-dimensional graphics includes generating a virtual environment in a server including a first object, second object and a direct illumination source. The method includes generating a virtual point light (VPL) in the virtual environment at an intersection between a ray from the direct illumination source and the first object, and sending data corresponding to the VPL to a client computing device through a data network. The method includes generating an illumination of the second object in the virtual environment with the VPL received from the server, and displaying the illuminated second object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09478065&OS=09478065&RS=09478065
owner: Robert Bosch GmbH
number: 09478065
owner_city: Stuttgart
owner_country: DE
publication_date: 20130314
---
This disclosure relates generally to the field of computer graphics and more specifically to systems and methods that display three dimensional graphics.

Many modern software applications display three dimensional representations of graphical objects and scenes as part of a user interface. Three dimensional 3D graphics are used in a wide range of applications including video games simulations virtual reality applications geospatial information applications and applications for mapping and navigation. In many applications 3D graphics are more useful than two dimensional 2D graphics at depicting real world environments and locations because the normal interaction between humans and the real world occurs in three dimensions.

In one form of 3D graphics different objects in a scene are formed from a large number of polygons. The polygons form shapes and structures in a 3D scene. Since most computing devices only display graphics with a two dimensional display the 3D graphics are converted into a rasterized array of two dimensional pixels for display. The 2D display depicts portions of the three dimensional scene in a similar manner to how a camera takes a two dimensional photograph of 3D scenes in the real world. Many 3D graphics systems and application programming interfaces APIs including the Open Graphics Library OpenGL and the Direct 3D APIs provide common structures and interfaces to specialized graphics hardware for generation of 3D images in an efficient manner. The 3D software interacts with general purpose and specialized digital computing hardware that generates the 3D graphics in an efficient manner. In particular graphical processing units GPUs are hardware components that are configured to generate polygons and other graphical effects that form a 3D scene. Modern computing devices typically execute software with a combination of instructions for a central processing unit CPU and the GPU to generate the 3D scene and enable interaction with the 3D scene in some software applications. In some hardware embodiments the functionality of the CPU and GPU are merged together physically and optionally logically into a single a system on a chip SoC device.

Realistic rendering of 3D scenes is an important part of making 3D graphics useful in modern computing systems. Making 3D scenes more realistic can have aesthetic benefits but can also improve the accuracy of information that is depicted in display of a 3D environment. For example if a 3D environment realistically depicts the illumination of objects with lights and shadows users of the 3D application can distinguish features more quickly and more accurately than if the lighting that illuminates the scene is generated in an unrealistic manner.

Modern 3D hardware and software implementations illuminate objects in the virtual environment using both direct and indirect lighting techniques. Direct lighting refers to the direct appearance of an object when light from an illumination source strikes the object. For example the sun or light bulbs are direct illumination sources. An object that is illuminated by the direct illumination source reflects a portion of the light and various properties of the object including color and textures applied to the object affect the appearance of the object in the 3D environment. The intensity and color temperature of the direct illumination source also affect the appearance of the object. Indirect illumination refers to light beams that emanate from a source other than a direct illumination source and strike an object. For example light beams from a direct illumination source strike objects in a scene and then the objects in the scene re emit some of the light from the direct illumination source. The re emitted light then strikes other objects which in turn re emit even more light in a repeating manner. In practical scenarios some of the light is absorbed when each light beam strikes an object and a finite number of secondary reflections are visible to the human eye. Environments with highly reflective objects typically display greater changes when illuminated by indirect lighting compared to lower reflectivity objects.

Modern 3D graphics hardware and software systems include various techniques for rendering indirect light. Many indirect lighting techniques include tradeoffs between accuracy and performance. For example ray tracing techniques model the paths of light beams from a direct illumination source through multiple indirect reflections from illuminated objects in a virtual environment. While ray tracing is considered to be highly realistic the modeling process for ray tracing consumes a large amount of processing power and is usually reserved for pre rendered 3D animations. Another technique for generating indirect illumination is referred to as the virtual point light VPL technique. In a VPL system a direct illumination source casts light onto one or more objects in a virtual environment. At selected intersections between the light from the direct source and the objects the 3D graphics system generates a virtual point light that simulates the indirect light that is reflected from the object. The VPL then emanates light from the object to simulate the effects of indirect lighting in the virtual environment. The 3D graphics system generates a selected number of VPLs to simulate indirect light with the number and arrangement of VPLs being selected to provide a suitable balance between accuracy and processing computational performance in the 3D graphics system.

Commercially available 3D graphics hardware including GPUs that are used in desktop and server computers are capable of rendering complex virtual environments including indirect lighting using VPL techniques and other indirect lighting techniques that are known to the art. While powerful 3D graphics hardware is commercially available an increasing number of mobile electronic devices including smartphones tablets and handheld GPS navigation devices are being used as hardware platforms that implement 3D graphics. The hardware implementations in mobile electronic devices are often less sophisticated than in larger stationary computing devices due to limitations in size weight power consumption and heat output that are inherent to smaller mobile electronic devices. While mobile electronic devices include CPU and GPU hardware processors that can generate 3D graphics the processors are often either unable to produce sophisticated 3D graphics displays or consume unacceptably large amounts of power while generating the 3D graphics. In particular many forms of indirect lighting including VPLs are either too computationally intensive for use with some mobile electronic devices or result in an unacceptable loss in battery life due to the increased power consumption of the processor to render the virtual environment. Consequently improvements to 3D graphics systems that enable generation of graphics that include indirect lighting effects on hardware devices with limited 3D graphics processing capabilities would be beneficial.

In one embodiment a method for classifying a three dimensional graphical object in a virtual environment has been developed. The method includes generating a virtual environment with a first processor in a server computing device the virtual environment including a first object a second object and a direct illumination source a memory in the server computing device storing data corresponding to the virtual environment including the first object the second object and the direct illumination source generating with the first processor in the server computing device a virtual point light VPL at a location in the virtual environment corresponding to an intersection of a ray from the direct illumination source and the first object sending data corresponding to the VPL to a client computing device through a data network generating with a second processor in the client computing device illumination data for a surface of the second object in the virtual environment with reference to illumination data identified with reference to the direct illumination source and the VPL received from the server computing device and storing data corresponding to the virtual environment including the direct illumination source the first object and the second object in a memory in the client computing device and generating with the second processor in the client computing device a graphical display of the virtual environment including the surface of the second object with the generated illumination data.

In another one embodiment a system that classifies a three dimensional graphical object in a virtual environment has been developed. The system includes a server computing device and a client computing device. The server computing device includes a first memory configured to store data corresponding to a virtual environment including a first object a second object and a direct illumination source a first network interface device configured to send data through a data network and a first processor operatively connected to the first memory and the first network interface device. The first processor is configured to generate the virtual environment including the first object the second object and the direct illumination source generate a virtual point light VPL in the virtual environment at a location corresponding to an intersection of a ray from the direct illumination source and the first object and send data corresponding to the VPL with the first network interface device to the client computing device through the data network. The client computing device includes a second memory configured to store data corresponding to the virtual environment including the first object the second object and the direct illumination source a second network interface device configured to receive data from the data network a display device and a second processor operatively connected to the second memory the second network interface device and the display device. The second processor is configured receive data corresponding to the VPL from the server computing device with the second network interface device generate illumination data for a surface of the second object in the virtual environment with reference to illumination identified with reference to the direct illumination source and the VPL received from the server computing device store data corresponding to the virtual environment including the direct illumination source the first object and the second object in the second memory and generate with the display device a graphical display of the virtual environment including the surface of the second object using the generated illumination data.

For the purposes of promoting an understanding of the principles of the embodiments disclosed herein reference is now be made to the drawings and descriptions in the following written specification. No limitation to the scope of the subject matter is intended by the references. The present disclosure also includes any alterations and modifications to the illustrated embodiments and includes further applications of the principles of the disclosed embodiments as would normally occur to one skilled in the art to which this disclosure pertains.

As used herein the term texture refers to any graphical image or images that are mapped to one or more polygons in a three dimensional display to alter the appearance of the polygons in a graphical display. For example common textures for materials depicted in virtual environments include cloth stone wood metal concrete carpeting and a wide range of materials that simulate materials found in the physical world. In some embodiments textures are formed from two dimensional graphics images that are applied to the surfaces of polygons in 3D objects in the virtual environment using texture mapping techniques that are known to the art. Some 3D graphics systems apply multiple layers of textures to a single object to provide a more complex appearance for the objects. Different types of texture can include varying levels of reflectivity or absorption to lights that illuminate the 3D object that is generated with the selected texture.

As used herein the terms graphical object or object refer to data that correspond to a group of polygons that form a model of a single object in a larger virtual environment. A virtual environment includes one or more graphical objects that are located at different coordinates and in various orientations in the virtual environment. In some embodiment of a virtual environment the graphical objects change coordinates orientation or change shape in order to depict movement of one or more objects in the virtual environment.

As used herein the term point light refers to an illumination source in a 3D virtual environment that emits light from a single point location with the light being emitted in a uniform manner in every direction within a predetermined light cone extending from the point location in the 3D virtual environment. In one configuration the light cone for a point light is a hemispherical region around the point light to enable the point light that is located proximate to a surface to emit light into an virtual environment that is within the hemispherical region of the light cone while preventing the illumination source from providing undesired illumination to the surface of the object that is proximate to the point light. Some virtual environments include point lights in addition to other types of light as sources of illumination in the virtual environment. As used herein the term virtual point light VPL refers to a point light that a graphics processing device generates dynamically to simulate the effects of indirect lighting within a 3D virtual environment. The generated VPL acts as a point light and emits light onto one or more graphical objects in the virtual environment to simulate the effects of indirect lighting.

In the client computing system the processor includes one or more integrated circuits that implement the functionality of a central processing unit CPU and graphics processing unit GPU . In some embodiments the processor is a system on a chip SoC that integrates the functionality of the CPU and GPU and optionally other components including the memory and network device into a single integrated device. In one embodiment the CPU is a commercially available central processing device that implements an instruction set such as one of the x86 ARM Power or MIPS instruction set families. The GPU includes hardware and software for display of both 2D and 3D graphics. In one embodiment processor includes software drivers and hardware functionality in the GPU to generate 3D graphics using the OpenGL OpenGL ES or Direct3D graphics application programming interfaces APIs . For example the GPU includes one or more hardware units including geometry processing units pixel shader units vertex shader units fragment shader units and image rasterization units for the generation of a rasterized 2D depiction of a 3D virtual environment. During operation the CPU and GPU execute stored programmed instructions that are retrieved from the memory . In one embodiment the stored programmed instructions include operating system software and one or more software application programs including software applications that generate 3D graphics such as games simulations and mapping programs. The processor executes the 3D software program and generates 3D graphical output corresponding to a 3D virtual environment through the display device .

In the client computing system the memory includes both non volatile memory and volatile memory. The non volatile memory includes solid state memories such as NAND flash memory magnetic and optical storage media or any other suitable data storage device that retains data upon deactivation of power loss for the client computing system . The volatile memory includes static and dynamic random access memory RAM that stores software and data including graphics data and map feature data during operation of the client computing system .

In the client computing system the memory stores virtual environment geometry data a virtual point light VPL cache direct illumination source data and texture data in addition to the stored program instructions . The geometry data include polygon data corresponding to vertices for one or more polygons that form graphical objects in the 3D virtual environment. The geometry data also include coordinates for the locations and orientations of objects in the virtual environment to enable generation of graphics corresponding to 3D environments and objects that are located in the virtual environment. The VPL cache stores the coordinates and illumination properties including color intensity and light cone orientation for one or more VPLs that are received from the server computing system . The direct illumination source data include the coordinates and attributes for one or more direct illumination sources that project light onto the surfaces of one or more objects in the 3D virtual environment. Examples of direct illumination sources include point lights and graphical objects that emit light which are referred to as emissive illumination sources to illuminate the virtual environment. For example a 3D object that is shaped in the form of a light bulb and that emits light into a virtual environment from the surface of the light bulb is an example of an emissive light. The texture memory stores data corresponding to one or more textures that are mapped to objects in the 3D virtual environment.

The client computing system includes a display device . In one embodiment the display device is a liquid crystal display LCD organic light emitting diode display OLED or other suitable display device that generates image output for viewing by a user of the client computing system . Some client computing system embodiments include a display that is incorporated into a housing of a device such as an LCD display that is incorporated into a housing of a smartphone or other mobile electronic devices. In other embodiments the client computing device includes a wired or wireless output device that supplies a video signal to an external display or projection device. In an embodiment of the client computing system that is integrated with a vehicle the display is commonly mounted in a dashboard or other fixed location in the vehicle. In an alternative embodiment the display device is a head up display HUD that is projected onto a windshield of a vehicle or projected onto goggles or glasses that are worn by an occupant in the vehicle.

The server computing device includes another processor having a CPU and GPU . While not a requirement in some embodiments the CPU and GPU in the server computing system include greater computational power than the respective CPU and GPU in the client processor . For example in one embodiment the server computing system is a larger physical server that typically remains stationary during operation and draws power from a power grid instead of being powered by a comparatively small battery in a mobile electronic device. The electrical power available to the server computing system enables the use of CPUs and GPUs with greater computing power than is practical in the client computing systems . In another embodiment the server computing system is formed from a cluster of multiple computing devices that provide VPLs and other services to a large number of the client devices in a distributed computing system. In the server computing system of the network device is typically a wired network adapter such as an Ethernet network adapter although the server computing system can be configured to use wireless network devices in addition to or instead of the wired network device.

In the server computing system the memory includes both non volatile memory and volatile memory. The non volatile memory includes solid state memories such as NAND flash memory magnetic and optical storage media or any other suitable data storage device that retains data upon deactivation or power loss for the server computing system . The volatile memory includes static and dynamic random access memory RAM that stores software and data including graphics data and map feature data during operation of the server computing system .

In the server computing system the memory stores the same virtual environment geometry data direct illumination source data and texture data as the memory in the client computing devices . The server computing system maintains data synchronization with the client computing devices so that the server computing system generates VPLs using the same virtual environment geometry data that the client computing systems use to display the virtual environment including the use of the same direct illumination sources and textures that the client computing devices use for generation of graphical displays of the virtual environment.

In the memory the stored program instructions for the server computing system include a different set of programs than are used on the client computing systems . As described below in more detail in the processor executes the stored program instructions to generate VPLs for the virtual environment that is represented by the virtual environment geometry data . The generated VPLs are stored in the generated VPL data in the memory . In embodiments where the geometry data in the virtual environment or the direct illumination source data change over time the processor invalidates VPLs that no longer conform to the virtual environment and generates new VPLs for the updated virtual environment data. For example the processor invalidates the VPL if an object with a surface that is proximate to the VPL is transformed so that the direct illumination source no longer illuminates the surface or if the direct illumination source moves changes color or changes output intensity or if another object is transposed between the direct illumination source and the object that is associated with the VPL. The server computing system sends an update of the generated VPL data to the client computing systems through the network using the network device .

In the system the server computing system performs the computations for generation of the VPL data while the client computing devices treat the VPLs as additional direct illumination sources during the generation of graphics corresponding to the 3D virtual environment. The client computing systems are not required to generate the VPLs which reduces the computational complexity of the client stored program instructions and enables client computing systems with limited CPU and GPU processing hardware to produce graphics with indirect lighting effects that would not otherwise be practical to produce using the client computing system hardware.

Process begins with generation of one or more virtual point lights VPLs in a virtual environment in a server computing system block . In the system the server computing system generates the VPLs in the virtual environment. The processor retrieves the virtual environment geometry data including multiple graphical objects from the memory to form the virtual environment. The processor also retrieves the data corresponding to one or more direct illumination sources from the memory and optionally retrieves texture data in virtual environments where the surfaces of geometric objects receive textures. The processor executes the stored program instructions to generate the virtual environment and to generate one or more VPLs in the virtual environment. As described below in the processor identifies intersections between light rays from one or more of the direct illumination sources and graphical objects in the virtual environment data to generate VPLs in the virtual environment. The processor stores data corresponding to the VPLs including the coordinates intensity and light color of each VPL as the generated VPL data in the memory .

In the system the processor in the server computing system generates the VPLs and using a VPL generation technique that is known to the art. In the VPL generation process the server computing system generates a selected number of VPL lights to provide indirect illumination to different graphical objects in the virtual environment . The processor generates the VPLs using for example ray casting to generate a sufficient number of VPLs to provide indirect illumination to the graphical objects in the virtual environment while limiting the generated VPLs to a number that is suitable for use with the GPU in the processor of the client computing system . For example while the direct illumination source theoretically emits a large number of light rays into the virtual environment the processor uses an optimization process to select a limited number of light rays from the illumination source and corresponding intersections between the light rays and other objects in the virtual environment for generation of the VPLs.

In the embodiment of the server computing system identifies the VPLs and from the intersection of selected light rays from the direct illumination source and the objects and . depicts the two VPLs and for illustrative purposes but the server computing system is configured to generate a one or more VPLs for any graphical object in the virtual environment that receives illumination from the direct illumination source or other direct illumination sources. Additionally in some embodiments the processor is configured to generate additional VPLs from the light rays that emanate from a previously generated VPL. For example in the virtual environment the processor optionally generates another VPL not shown at the location on the object where the ray from the VPL intersects with the object face .

While includes a graphical depiction of the virtual environment for illustrative purposes the server computing system is not required to generate a fully rendered graphical display of the virtual environment during process . For example the server computing system generates the VPLs and in the virtual environment but the server computing system is not required to use the VPLs and to illuminate graphical objects in the virtual environment for display using a display device. During process the processor omits additional operations that are commonly associated with generating 3D graphics such as rasterization of output images corresponding to a particular location and viewing perspective in the virtual environment. During operation the server only generates a single set of global VPLs regardless of the number of clients which enable the server to operate in a more efficient manner. For each client the server selects a relevant subset of the VPLs from the set of globally computed VPLs. The client receives the relevant subset of VPLs. The server only generates VPLs for a scene once and this common set of VPLs is shared between different clients. As described below the client devices generate graphical outputs corresponding to the virtual environments using the VPLs that the server system generates to produce indirect illumination in the virtual environment.

Referring again to in the distributed graphics system the client system or systems retrieve data corresponding to the generated VPLs from the server system block . As described above the VPL data include coordinates light intensity levels and light colors for each VPL in the virtual environment. In the system the server computing system compresses VPL data prior to transmission through the network to the client systems to minimize the time and network bandwidth required to transmit the VPL data. In one embodiment the client system establishes a network communication session with the server system through the network using a standard network communication protocol such as TCP IP or UDP IP. If the retrieval of the VPL data succeeds block then the client system receives the generated VPL data from the server using the network device and stores the VPL data in the VPL cache in the memory . In another embodiment of the process the server system establishes a network session with one or more of the client computing systems to transmit updated VPL data to the client computing systems in a push configuration. In either embodiment the client computing systems receive the VPL data if the network connection between the client systems and the server system enable successful transmission of the VPL data.

If the client system successfully receives the VPL data from the server system block then the processor in the client system generates illuminations for the graphical objects in the virtual environment using both the direct illumination source and the VPLs that are received from the server computing system to provide illumination to the virtual environment block . For example in the virtual environment of the processor illuminates the objects and using both the direct illumination source and the VPLs and . In the processor the GPU receives the geometry data for the objects in the virtual environment the texture data for textures that are applied to the objects and the coordinates colors and intensities for the direct illumination source and the VPLs and .

The GPU computes the illumination of the objects in the scene and in some instances illuminates portions of the objects with multiple illumination sources. For example the face in the object receives illumination from the direct illumination source and the VPL . The objects and each receive partial illumination from the direct illumination source and from the VPLs and as indicted by the ray . In one embodiment the GPU identifies the illumination received for each pixel that is displayed on the surface of the object. The total illumination for the object is identified with reference to a sum of the emitted light from one or more illumination sources in the virtual environment and to the properties of how the object reflects the light including the ambient diffuse and specular reflectivity for the object. Ambient reflection refers to a uniform level of light that is applied to all objects in a virtual environment. The ambient light is useful for the display of some objects that are not illuminated by another form of light in the virtual environment since the object is typically displayed as black if no light is applied to the object. The diffuse light intensity represents light that is reflected from objects with rough surfaces that scatter the light. The specular light intensity refers to highly reflective materials such as polished metal or glass that have a shiny appearance.

Process continues as the client computing system generates a graphical depiction of the virtual environment including graphical objects that are illuminated using the direct illumination sources and VPLs block . In the client computing system the GPU generates a rasterized image of the 3D virtual environment from a predetermined view point in the 3D virtual environment. The processor directs the rasterized image data to the display to provide a graphical output of the virtual environment and objects in the virtual environment. The GPU in the client computing device optionally applies other graphical processing techniques to the image data including but not limited to anti aliasing depth of field blurring anisotropic filtering and the like prior to generating the output through the display device .

In many 3D graphical applications the client system displays the virtual environment in an animated manner. For example in one configuration a virtual camera moves through a virtual environment and the generated display of the virtual environment changes as the location and orientation of the virtual camera change in a similar manner to a moving camera in the physical world. In addition to a moving virtual camera some virtual environments include graphical objects that move and change shape over time. Common examples of software applications that include animation of graphical objects in a virtual environment include games and simulations. In the client computing device the processor generates the animation as a series of frames where each frame is a single graphical depiction of the virtual environment in rapid succession. Each frame in the animation depicts a small change in the view of the virtual environment or in one or more graphical objects within the virtual environment. When the display generates the graphical frames at a sufficiently high rate such as a rate of 15 frames per second or higher the progressive series of frames provide the appearance of movement in the virtual environment to the human eye.

During process the processor in the server computing system and the processor in the client computing system identify if one or more VPLs remain valid for use in providing illumination for the virtual environment in multiple frames of an animation. For the purposes of process a VPL remains valid for multiple animation frames if the path between the direct illumination source and the intersection with the graphical object at the location of the VPL remains unobstructed if the intensity and color of the light from the direct illumination source remains constant if the distance between the graphics object and the direct illumination source remains constant and if the color or texture material of the graphical object remains unchanged between frames of the animation. As is known in the art the intensity of an illumination source can include different parameters for diffuse and specular intensities of the light. In one mode of operation the objects and direct illumination sources in the virtual environment remain in a static configuration relative to one another and a virtual camera moves through the virtual environment. The VPLs in the virtual environment remain valid as the virtual camera moves through the virtual environment. In one configuration the system includes multiple client computing systems that display different views of a single virtual environment. The server computing system generates a single plurality of VPLs that remain valid for each of the clients even if each client computing system displays the virtual environment using virtual cameras with different coordinates and orientations in the virtual environment. For example in two different virtual cameras and correspond to the graphical views of the virtual environment that are generated in two different client computing systems. As the virtual cameras and move through the virtual environment the VPLs and remain valid because the arrangement of the direct illumination source and the graphical objects and remain unchanged.

In another animation mode one or more of the graphical objects or direct illumination sources in the virtual environment move or are otherwise altered within the 3D virtual environment. During process the processors in both the server computing system and the client computing system perform the same transformations to graphical objects and direct illuminations sources in the virtual environment data to ensure consistency in the virtual environments between the server and the client systems. As used herein a transformation to a graphical object or an illumination source in the virtual environment includes any modification to the data corresponding to the object or illumination source or a change of the coordinates and orientation of the object or illumination source in the virtual environment. Examples of transformations include operations that move rotate and change the shape or texture of the object. During the animation of objects in the virtual environment some or all of the VPLs may become invalid due to the transformations of objects and illumination sources in the virtual environment.

For example depicts a virtual environment which includes modifications to some of the graphical objects in the virtual environment of . In the graphical object has rotated to present a different face of the graphical object to the direct illumination source . Additionally the graphical object has moved to a different location in the virtual environment from the arrangement depicted in . During process the processor of the server computing system identifies that the VPL is invalid due to the change in the orientation and location of the object . In the example of the VPL remains valid because the arrangement of the direct illumination source and the graphical object remains unchanged and light ray reaches the surface of the object without being obstructed. depicts a transformation of the object in the virtual environment because the object has moved from the location that is depicted in . The illumination that the object receives from the direct illumination source through the ray and the VPL through the ray differs from the illumination in due to the change in location of the object . As described above the client computing system is configured to generate a graphical output of the object using the direct illumination source and the VPL to simulate indirect illumination in the virtual environment .

During process the server computing system generates updated VPLs for the virtual environment block at a constant rate and the client computing system attempts to retrieve updated VPLs from the server computing system block . As described above in the system the server computing system identifies when VPLs are invalidated and generates new VPLs to provide indirect illumination for the updated configuration of objects and direct illumination sources in the virtual environment. The server computing system generates the updated VPLs and the client computing system retrieves the data corresponding to the updated VPLs through the data network .

As described above the VPLs act as point illumination sources in the virtual environment . During process the client computing system receives the VPL data to generate an indirect lighting effects. During illumination of the virtual environment however the processor in the client computing device only applies direct lighting effects from the direct illumination sources that are stored in the memory and with the VPLs that are received from the server computing device and stored in the VPL cache . Thus the client computing system does not require software or dedicated hardware units to identify locations and generate the VPLs in the virtual environment. Instead the GPU in the client computing system treats the VPLs that are received from the server computing system as additional direct illumination sources and illuminates the objects in the virtual environment using only direct illumination sources. The generation of the VPLs in the server computing system enables the client computing system to generate graphical depictions of the virtual environment including indirect lighting effects with a reduced computational load on the client computing system . In embodiments where the client computing system includes simplified processor hardware the VPLs from the server computing system enable the client computing system to generate depictions of the graphical objects in the virtual environments with indirect lighting effects where conventional techniques for generating the indirect lighting effects would be impractical.

In some operating conditions during the process the client system does not successfully receive the VPL data from the server system block . In the system the client may experience a temporary loss of connectivity to the network or the VPL data from the server system may be corrupted or fail to arrive in a timely manner for use in generating illumination in the virtual environment. In the system the client is configured to generate the graphical display of the virtual environment using only the direct illumination sources that are present in the virtual environment if the VPL data are unavailable block . As depicted in if the VPL is invalidated due to changes in the virtual environment then the server system generates a request to send the updated VPL data to the client system or the client system retrieves the VPL data in addition to other data updates regarding changes in the virtual environment data. During process if the client system fails to receive the updated VPL data then the processor generates a graphical depiction of the graphical objects in the virtual environment using only the direct illumination sources and ambient lighting in instances where a VPL has been invalidated block .

For example the processor retrieves the virtual environment geometry data direct illumination source data and texture data from the client memory to generate a display of the virtual environment . During the graphical display generation process the client processor illuminates the graphical objects and using the direct illumination source and optionally an ambient light level for the entire virtual environment. In the configuration of the VPL is invalidated and the client computing device has failed to retrieve a valid VPL that conforms to the updated configuration of the object . Consequently the object only receives illumination from the direct illumination source the remaining valid VPL and the ambient illumination for the virtual environment . For example in the face on the graphical object only receives illumination from the ambient illumination in the virtual environment . Additionally the face on the object only receives illumination from the direct illumination source as indicated by the ray while the object blocks reflected light from the VPL from reaching the object . The client device displays the generated graphics for the virtual environment using the display device . If the VPLs in the virtual environment become invalid during process the client system continues to generate the graphical depiction of the virtual environment using only the direct and ambient illumination until the client device successfully receives valid VPL data from the server system blocks and .

It will be appreciated that variants of the above disclosed and other features and functions or alternatives thereof may be desirably combined into many other different systems applications or methods. Various presently unforeseen or unanticipated alternatives modifications variations or improvements may be subsequently made by those skilled in the art that are also intended to be encompassed by the following claims.

