---

title: Synchronization of configuration changes between applications and their platforms
abstract: A method, system, and computer program product for handling synchronization of configuration changes between applications and their platforms. A computer implemented method synchronizes middleware configurations with application configurations using a reciprocating protocol. The protocol includes receiving a middleware state variable from a middleware component, then processing the middleware state variable to determine any application configuration state variables that depend on a value of the middleware state variable. The application (or agent) further processes the application configuration state variable to determine any affected middleware state variables and then sends the affected middleware state variable to the middleware component. The determinations can be performed using a forward mapper or reverse mapper, and the determinations can reciprocate repeatedly between applications and their middleware platforms until quiescence. The techniques can be used during an online patch cycle to maintain synchronization of configuration changes between applications and their platforms even while components are being patched.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09336208&OS=09336208&RS=09336208
owner: ORACLE INTERNATIONAL CORPORATION
number: 09336208
owner_city: Redwood Shores
owner_country: US
publication_date: 20130314
---
The present application claims the benefit of priority to U.S. Provisional Patent Application Ser. No. 61 707 823 entitled ONLINE PATCHING ORCHESTRATION filed on Sep. 28 2012 and U.S. Provisional Patent Application Ser. No. 61 707 827 entitled CONFIGURATION CHANGE DETECTION AND PROPAGATION filed on Sep. 28 2012 and U.S. Provisional Patent Application Ser. No. 61 707 840 entitled SYNCHRONIZING DOMAIN CONFIGURATION PARAMETERS filed on Sep. 28 2012 which are all hereby incorporated by reference in their entireties and the present application is related to co pending U.S. patent application Ser. No. 13 802 771 entitled USING A DATA DICTIONARY TO DETERMINE AN UPGRADE EDITION OF A RELATIONAL DATABASE TABLE filed on even date herewith which is hereby incorporated by reference in its entirety and the present application is related to co pending U.S. patent application Ser. No. 13 802 774 entitled ONLINE UPGRADING OF A DATABASE ENVIRONMENT USING TRANSPARENTLY PATCHED SEED DATA TABLES filed on even date herewith which is hereby incorporated by reference in its entirety and the present application is related to co pending U.S. patent application Ser. No. 13 802 780 entitled TRANSPARENTLY UPGRADING DERIVED DATABASE OBJECTS filed on even date herewith which is hereby incorporated by reference in its entirety and the present application is related to co pending U.S. patent application Ser. No. 13 802 785 entitled USING CONFIDENCE VALUES FOR SYNCHRONIZING FILE SYSTEMS filed on even date herewith which is hereby incorporated by reference in its entirety and the present application is related to co pending U.S. patent application Ser. No. 13 802 791 entitled REDUCING DOWNTIME DURING UPGRADES OF INTERRELATED COMPONENTS IN A DATABASE SYSTEM filed on even date herewith which is hereby incorporated by reference in its entirety.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The disclosure relates to the field of maintaining software installations and more particularly to techniques for synchronizing between middleware configurations and application configurations.

Legacy techniques for upgrading a software application to a new version have traditionally been accomplished by overwriting the old software module e.g. prior version of code with a new software module e.g. new version of code . Other legacy techniques have included steps to capture the configuration parameters corresponding to the old application and applying those parameters to the new software module. Various techniques for applying those parameters to the new software module have been employed for example storing the configuration parameter in a file and pointing the new software module to the configuration parameter file. Other techniques have applied the configuration parameters to the new software module by patching the configuration parameters into the new software module. Such techniques have become deficient with the advent of middleware. For example middleware might be used as a services platform that is common to a large set of applications and some portion of the middleware might be tuned or configured to handle particular application services in a particular manner depending on the application. Thus an upgrade by merely replacing an old application software module with a new application software module might not take into account configuration changes made to the middleware in order to tune or configure the services as intended to be used by the new application software module.

Worse at least since the advent of middleware it becomes apparent that in the context of typical application installations there are many more and frequent configuration state changes than there are application code module upgrades. The lifecycle of an application software module in an installation might be reasonably expressed in months yet the configuration parameters in that same installation might be reasonably expressed in years. The foregoing observations coupled with the cost of performing upgrades motivates the need for performing upgrades of an installation where upgrades of the software application modules in an installation can be performed independently from upgrades or changes of the configuration parameters e.g. software application configuration parameters or middleware configuration changes .

The aforementioned technologies do not have the capabilities to perform synchronizing between middleware configurations and application configurations and the aforementioned technologies do not address synchronizing between middleware configurations and application configurations in the context of an installation wide upgrade e.g. involving multiple applications to be concurrently upgraded . Therefore there is a need for an improved approach.

The present disclosure provides an improved method system and computer program product suited to address the aforementioned issues with legacy approaches. More specifically the present disclosure provides a detailed description of techniques used in methods systems and computer program products for synchronizing between middleware configurations and application configurations.

A computer implemented method synchronizes middleware configurations with application configurations using a reciprocating protocol in conjunction with mapping and transformation operations. The protocol includes receiving a middleware state variable from a middleware component then processing the middleware state variable to determine any application configuration state variables that depend on a value of the middleware state variable. The application or agent further processes the application configuration state variable to determine any affected middleware state variables and then sends the affected middleware state variable to the middleware component e.g. by name or by value and name etc. . The determinations can be performed using a forward mapper or reverse mapper and the determinations can reciprocate repeatedly between applications and their middleware platforms until quiescence. The techniques can be used during an online patch cycle to maintain synchronization of configuration changes between applications and their platforms even while components are being patched.

Further details of aspects objectives and advantages of the disclosure are described below in the detailed description drawings and claims. Both the foregoing general description of the background and the following detailed description are exemplary and explanatory and are not intended to be limiting as to the scope of the claims.

Some embodiments of the present disclosure are directed to an improved approach for synchronizing between middleware configurations and application configurations. More particularly disclosed herein are exemplary environments methods and systems for synchronizing between middleware configurations and application configurations.

Described herein below and in the accompanying figures are scalable methods and apparatus for implementing synchronizing between middleware configurations and application configurations.

The deployment of middleware e.g. an application server or a domain server in an enterprise serves to lower the cost of operations improve organizational performance enhance scalability and provide a foundation for database applications.

As the deployment of middleware as a platform for application services expands so expands the requirement for the middleware to evolve in synchronicity with the applications it serves. Strictly as one example is the rapid adoption of middleware components in enterprise installations. Another example is the rapid adoption of middleware to service communications with mobile terminal devices e.g. smart phones .

In enterprise installations the lifecycle of middle ware often evolves under a separate and distinct regime as compared to the lifecycle of applications deployed on it. Over time best practices for minimizing system changes at any maintenance event have emerged and some best practices encourage administrators to apply changes sequentially rather than in parallel and thus system administrators often elect to change either code or configuration but not both in only one of the middleware or the application. In an exemplary installation specifically an installation comprising a database engine and a plurality of software applications improvements to the middleware are needed in order to keep pace with the improvements to the software applications that use the middleware yet some configuration parameters may have been established in an earlier timeframe in the installation lifecycle and may need to persist through many upgrade cycles. depicts such an exemplary installation.

Some of the terms used in this description are defined below for easy reference. The presented terms and their respective definitions are not rigidly restricted to these definitions a term may be further defined by the term s use within this disclosure.

Reference is now made in detail to certain embodiments. The disclosed embodiments are not intended to be limiting of the claims.

As shown the installation comprises software applications e.g. application software application software etc. any one or more of which enterprise software applications are in communication with one or more instances of a middleware module using any forms of known in the art communication techniques see COMMS . Strictly as examples such communication techniques covers intra and inter process communication and covers cases involving application code running in the context of and or using code of the middleware platform. Another example is application code running within in a Java Virtual Machine JVM which in turn is executing middleware code. The middleware module might serve as an application server component or as an HTTP server component or may provide any sorts of services to the enterprise software applications. In addition to comprising code to perform the operations of the application an enterprise software application comprises at least one component of a configuration settings manager which configuration settings manager may be included within a running application e.g. configuration settings manager as shown or a configuration settings manager may be implemented in any environment. Further any component of a configuration settings manager might be subsumed into an enterprise software application as shown or it might be implemented as a stand alone application. An enterprise software application might comprise an API component to provide support for communications with the stand alone configuration settings manager.

Regardless of any specific implementation choice for the embodiments of a configuration settings manager a user can use one or more configuration user interfaces e.g. configuration user interface configuration user interface etc. to view and change the configuration states as used in the installation. For example a user might use an instance of configuration user interface to view and change configuration states corresponding the middleware state variables . Or a user might use an instance of a configuration user interface to view and change configuration states corresponding to an enterprise software application. Any instance of a configuration user interface might use a configuration state data element in the form of a configuration data description object e.g. middleware state description MSD application state description ASD . Such a configuration state data element might be in the form of an XML schema or DTD or such a configuration state data element might be in the form of a text file or relational database structure etc. that describes the type and format of state variables. Middleware state variables are maintained in a manner accessible by the middleware modules. Similarly application specific state variables e.g. application specific state variables or application specific state variables are maintained in any manner accessible by 1 the enterprise software applications and 2 their respective middleware modules. In some cases as shown application specific state variables or a portion thereof are maintained in a manner accessible by middleware modules possibly using a cache.

As is heretofore indicated there is a need to change the configuration of software application modules in a manner that is independent from the manner of making changes to the middleware configuration. However in exemplary installations and as shown a change to the configuration of a middleware component might impact the operation of a software application being serviced by the middleware. And a change to the configuration of a software application might impact the operation of middleware that is servicing the software application.

In the configuration shown a change to the configuration of a middleware component can trigger operations e.g. using notification trigger within a sync subsystem . For example a change to the configuration of a middleware component can trigger operations within a middleware configuration change agent and the middleware configuration change agent might in turn execute a pull operation to pull state information from the middleware module see pull path . Also in the configuration shown a change to the configuration of a software application can trigger operations within a sync subsystem . For example a change to the configuration of a software application can push configuration changes to an application configuration change agent see application push path .

Again referring to the configuration shown in one operation within a middleware configuration change agent might be to advise one or more instances of application software of the change or of the nature of the change of the middleware configuration. To do so might involve a forward mapper . A forward mapper serves to accept a changed middleware state parameter and determine what applications should receive a push see forward push path of the changed middleware state parameter. Or a forward mapper serves to accept a changed middleware state parameter and determine what application configuration settings might be affected. For example an HTTP middleware component might be re configured to serve a particular protocol e.g. HTTPS and underlying applications might need to know of this change. Following the foregoing an underlying application would receive a push see forward push path of the re configured middleware state parameter set to serve a particular dialect of HTML. In some cases a forward mapper can access any one or more configuration data description objects e.g. middleware state description MSD application state description ASD and can use the type and format descriptions of state variables to make the foregoing determinations.

Strictly as another example a forward push path would be exercised upon adding new middleware modules e.g. managed server instances to the overall mix of middleware modules that serve the application software. Furthering this example the application code would need to be informed e.g. by the middleware of a topology change and might need to respond by modifying various application owned configuration aspects e.g. to match security setting to the changed topology .

In a reverse sense a change in the configuration settings of an instance of application software may need to be reflected in one or more middleware components. Accordingly an application configuration change agent may use a reverse mapper to map from an application configuration setting to one or more changes in the middleware state variables . In some cases a reverse mapper can access any one or more configuration data description objects e.g. middleware state description MSD application state description ASD and can use the type and format descriptions of state variables to make the foregoing determination.

Strictly as another example changing the JVM startup parameters pertaining to the JVM upon which an application runs would need to be propagated to a middleware configuration e.g. since JVMs might need to be added and scaled up or scaled out.

Ongoing use of the sync subsystem can serve to keep application configurations in synch with corresponding middleware configurations. Using the sync subsystem as heretofore described serves to facilitate frequent upgrades of an application software module while retaining the overall configuration of the installation. Furthermore and is more fully described in the following substantially all of the constituent software components of an installation can be subjected to an installation wide upgrade while minimizing down time. Use of an online patching cycle and use of multiple editions e.g. a run edition and a patch edition are now briefly described.

To apply an online patch to an active online installation the installation is promoted through a series of sequential phases known as an online patching cycle. The shown online patching cycle is given as 

As described in the above cycle creating and patching relies on many specialized techniques to maintain a run edition e.g. see initial run edition and one or more patch editions e.g. see patch edition in the presence of continuously changing customer data in database tables. The concept and implementation of edition based redefinition creates patch edition copies of application software e.g. application code modules and respective data in order to continuously apply patch transformations to runtime data that changes while the patch is executing.

Continuing with the description of the online patching cycle users of the installation can be all online users during the normal operation e.g. during the running period then for the brief period of the cutover e.g. during the cutover period the users are offline to return online e.g. in cleanup period shortly after conclusion of the period of the cutover.

One embodiment supports full installation online patching. Some installations comprise many products e.g. hundreds of software applications thousands of software application configurations and many tens of thousands of tables . Implementing the above cycle to manage edition components for minimizing downtime during upgrades relies in part on a particular configuration of an edition. An approach to forming such a particular configuration of an edition is discussed below.

As shown the installation comprises a database engine which in turn comprises computing nodes e.g. node node node node node etc. any of which computing nodes can communicate with any other of the computing nodes. Instances of application software e.g. instances of running application execute on computing nodes and accesses stored data e.g. business data one or more instances of a file system etc. . A software application can also access configuration data as stored in various embodiments e.g. application metadata application code modules and application schema .

The application code modules serves to store one or more copies of the software application while the application metadata serves to store configuration state data e.g. disjoint from the business data . The application metadata can comprise application specific configuration state data which can be used by the application to facilitate communication with middleware.

A particular collection of interrelated components in a database system e.g. application metadata application code modules application schema business data one or more instances of a file system etc. can be amalgamated into an edition e.g. an initial run edition which edition can then be subjected to transformations e.g. synchronizations data copies data references data conversions etc. into one or more other editions e.g. patch edition as shown.

In order to facilitate for minimizing downtime during upgrades of interrelated components in a database system the collection of interrelated components are handled using the techniques disclosed herein. Strictly as an introductory example an instance of a running application can access an initial run edition or an instance of a running application can access a patch edition. Various techniques for managing the timing and type of access are provided for by the editioning view and by use of synonyms .

As can be recognized by those skilled in the art a first instance of a running application can access and make changes to an initial run edition. Such changes can be detected and propagated to a patch edition using cross edition triggers. In this manner a second instance of the running application can access the changes so propagated to the patch edition.

The techniques described herein provide for online patching of applications and respective application data as well as for the online patching and online transformation of business data e.g. transformation to an updated application schema . Implementing an upgrade of an installation using the above online patching cycle relies in part on the sync subsystem and a transformation process. A state change transformation engine facilitates the transformation process. Changes to certain middleware configurations e.g. secure communication middleware configurations load balancing middleware configurations can set off an avalanche configuration changes and can potentially affect a large number of configuration elements belonging to both middleware and applications. For example an attempt to enforce system wide secure communication would introduce browser changes which in turn would introduce or require web server changes and so on. Managing such an avalanche effect can be facilitated by the aforementioned state change transformation engine.

Again referring to a user might interact with an online patch user interface and might use such a user interface to initiate an online patching cycle e.g. see online patch cycle initiation module which in turn might invoke operations in an online patch cycle prepare module . The online patch cycle prepare module can perform steps to generate initial forms of the patch edition . During various periods within the online patching cycle certain portions of the patch edition may need to be configured. Specifically the state change transformation engine can access any of the middleware state variables as well as application specific state variables and apply one or more transformations to the accessed configuration state variables. In the context of an upgrade of an installation many individual and or many groups of configuration state variables may be upgraded changed during the online patching cycle. During the online patching cycle a set of middleware configuration state variables might be subjected to a transformation e.g. see transformed set . For example a transformed set might comprise a set of port numbers to be used in the patch edition but not to be used in the run edition . As another example during a patch cycle specifically at a cutover time each of the file systems change which database edition they refer to. In this scenario a previous patch edition of a database is promoted to become a run edition and become accessible via the default connection to the run database. In some cases a source of truth e.g. truth file truth table might be used by the state change transformation engine in order to distinguish between a user configuration setting and a configuration setting or set of configuration settings used in accomplishing the online patching cycle.

As shown the protocol involves a middleware component e.g. middleware module a middleware listener e.g. middleware configuration change agent an application listener e.g. an application configuration change agent and an application instance e.g. application software .

The protocol shown commences upon receipt of a middleware configuration change see message which middleware configuration change is stored into a middleware state storage area see operation . In some cases the middleware configuration change is deemed as sufficient to trigger the middleware listener and the middleware listener is triggered using a trigger event see event . The middleware listener in turn pulls middleware configuration states see operation and commences to perform a forward mapping see operation . In some cases the forward mapping of operation deems that one or more applications that rely on the middleware component for services should be notified of the middleware configuration change and pushes the forward mapped application configuration changes see message to an application instance .

The application instance receives the forward mapped application configuration changes and stores the configuration changes see operation to a location accessible by the application instance e.g. using a configuration settings manager . In some cases one configuration state change would imply another configuration state change see operation and so on until all state variable dependencies are resolved. In the event that a first configuration state change would imply another configuration state change it might also be the case that the middleware module should be notified of the application specific change s so that the middleware module can store the application specific change s as needed such as in a storage location holding the application specific state variables see operation . In such a case the application instance might initiate messaging to push configuration changes see message and the initial push might be to the application listener which can then perform reverse mapping see operation in order to identify if there are any middleware changes that are responsive to the application configuration changes again see message . If so then application listener sends a message to push middleware configuration changes see message which are then stored in an area comprising instances of application specific state variables see operation . Also when the application listener sends a message see message to push middleware configuration changes e.g. see reverse push path such a message might also include implied middleware state changes which are then stored in an area comprising instances of middleware state variables see operation .

As shown the operation listens for domain server configuration changes and then determines the mappings between the domain server configuration parameters and the serviced application s context variables see operation . Assuming there is at least one application context variable to be changed responsive to the domain server configuration change then synch up the serviced application s context variable to be consistent with the change in the domain server configuration see operation . For example if the domain server configuration change were to change the encryption method to use 256 bit encryption keys e.g. rather than 128 bit encryption keys then the application might need to know to reserve enough storage for such keys. Continuing it is possible that a particular context variable value might be used in the calculation of derived context variable values and operation serves to resolve these other context variable values. The foregoing operations e.g. operation through operation are labeled as a forward path and in one embodiment the forward path corresponds to traversals in including notification trigger pull path middleware configuration change agent and forward push path .

Of course it is possible that a change in any particular context variable value might be mapped from a change in the domain server s configuration e.g. middleware state . If so operation serves to determine the mappings between the serviced application s configuration parameters and the domain server s context variables then synch up domain server configuration with middleware configuration parameters as derived from the change s in the serviced application s context see operation . The foregoing operations e.g. operation through operation are labeled as a reverse path and in one embodiment the reverse path corresponds to paths in including application push path application configuration change agent and reverse push path . Also in various configurations including configurations shown and described herein a change to the configuration of an application component can trigger operations within a sync subsystem . In some situations a notification signal e.g. using trigger is raised.

One implementation uses MBEAN notifications. Such an MBEAN based notification technique can be implemented by following the below steps 

Upon receipt e.g. by a listener of a configuration state change see operation one implementation sends the configuration state change and or derived configuration state changes to another process e.g. to an application instance and or to a configuration settings manager see operation .

In various embodiments the determination of the application configuration state variable uses a forward mapper and in some cases the determination of the middleware state variables use a reverse mapper. The system can be used in the context of an online patch cycle and the system can further be used to initiate an online patch cycle during which online patch cycle various operations might invoke a transformation process to process state variable transformations between a run edition and a patch edition.

According to one embodiment of the disclosure computer system performs specific operations by processor executing one or more sequences of one or more instructions contained in system memory . Such instructions may be read into system memory from another computer readable usable medium such as a static storage device or a disk drive . In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions to implement the disclosure. Thus embodiments of the disclosure are not limited to any specific combination of hardware circuitry and or software. In one embodiment the term logic shall mean any combination of software or hardware that is used to implement all or part of the disclosure.

The term computer readable medium or computer usable medium as used herein refers to any medium that participates in providing instructions to processor for execution. Such a medium may take many forms including but not limited to non volatile media and volatile media. Non volatile media includes for example optical or magnetic disks such as disk drive . Volatile media includes dynamic memory such as system memory .

Common forms of computer readable media includes for example floppy disk flexible disk hard disk magnetic tape or any other magnetic medium CD ROM or any other optical medium punch cards paper tape or any other physical medium with patterns of holes RAM PROM EPROM FLASH EPROM or any other memory chip or cartridge or any other non transitory medium from which a computer can read data.

In an embodiment of the disclosure execution of the sequences of instructions to practice the disclosure is performed by a single instance of the computer system . According to certain embodiments of the disclosure two or more computer systems coupled by a communications link e.g. LAN PTSN or wireless network may perform the sequence of instructions required to practice the disclosure in coordination with one another.

Computer system may transmit and receive messages data and instructions including programs e.g. application code through communications link and communication interface . Received program code may be executed by processor as it is received and or stored in disk drive or other non volatile storage for later execution. Computer system may communicate through a data interface to a database on an external data repository . A module as used herein can be implemented using any mix of any portions of the system memory and any extent of hard wired circuitry including hard wired circuitry embodied as a processor .

In the foregoing specification the disclosure has been described with reference to specific embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the disclosure. For example the above described process flows are described with reference to a particular ordering of process actions. However the ordering of many of the described process actions may be changed without affecting the scope or operation of the disclosure. The specification and drawings are accordingly to be regarded in an illustrative sense rather than restrictive sense.

