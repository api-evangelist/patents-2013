---

title: Endian conversion method and system
abstract: An endian conversion method is executed by a CPU, and includes executing a program that includes endian conversion setting; and performing, when accessing an address of a main memory indicated in the endian conversion setting, endian conversion of data specified by the address of the main memory.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09448931&OS=09448931&RS=09448931
owner: FUJITSU LIMITED
number: 09448931
owner_city: Kawasaki
owner_country: JP
publication_date: 20130917
---
This application is a continuation application of International Application PCT JP2011 056660 filed on Mar. 18 2011 and designating the U.S. the entire contents of which are incorporated herein by reference.

The embodiments discussed herein are related to an endian conversion method and a system that perform endian conversion.

Byte order is arrangement of data in terms of bytes and is conventionally prescribed as specifications of a processor and a data format when the processor handles multiple bytes. The byte order is broadly classified into little endian and big endian. The little endian is the arrangement in which bytes are stored in the order from the least significant byte. The big endian is the arrangement in which bytes are stored in the order from the most significant byte.

If byte order specification of a processor is different from data format specification when processing corresponding data the processor rearranges the data in terms of bytes. The rearrangement in terms of bytes is referred to as endian conversion.

For example a technique is disclosed that when an apparatus transmits receives data with respect to another apparatus having byte order different from the apparatus that apparatus transmits the data after software swaps the data or swaps received data before reading the data hereinafter referred to as a conventional technique 1 .

A technique of performing the endian conversion is disclosed as a technique of performing the endian conversion within a processor see e.g. Japanese Laid Open Patent Publication Nos. H8 278918 and 2007 34680 . A technique of performing the endian conversion by other hardware is disclosed as a technique of performing the endian conversion with a bus having a swap circuit see e.g. Japanese Laid Open Patent Publication No. 2000 305892 .

However in the conventional techniques described above the technique according to the conventional technique 1 uses conversion by software and therefore has a problem of deterioration in processing performance. Although the techniques according to Japanese Laid Open Patent Publication Nos. H8 278918 and 2007 34680 enables high speed processing because hardware can be used a processor operates at high speed and therefore if an endian conversion mechanism is added it is problematically difficult to maintain the processing performance of the processor. Although the technique according to Japanese Laid Open Patent Publication No. 2000 305892 enables endian conversion of entire bus width it is difficult to perform the endian conversion with a complicated data structure such as performing the endian conversion for a portion of an address range within the bus width.

According to an aspect of an embodiment an endian conversion method is executed by a CPU and includes executing a program that includes endian conversion setting and performing when accessing an address of a main memory indicated in the endian conversion setting endian conversion of data specified by the address of the main memory.

The object and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the claims.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention.

Embodiments of an endian conversion method and a system will be described in detail with reference to the accompanying drawings.

It is also assumed that the CPU loads a load module executable by the CPU . It is assumed that application software hereinafter referred to as application generated by executing the load module is an image editing application. The load module is correlated with an endian conversion setting . A memory area in the RAM represents memory contents after an address 0x00100000.

The endian conversion setting has two fields including address and size. The endian conversion setting depicted in has a description of instructions for performing endian conversion of 4 bytes starting from the address 0x00100000 and for performing endian conversion of 2 bytes starting from the address 0x00100004.

When activating the application by the load module the CPU notifies the endian conversion mechanism of the endian conversion setting . It is assumed that the application executes an image process for the GPU . Since the endian is different between the CPU and the GPU an endian conversion process occurs. It is assumed that data used as an argument of the image process is stored in 8 bytes from 0x00100000.

The CPU gains write access through the application to the address 0x00100000. The data to be written is 0xFEDCBA9876543210. The endian conversion mechanism detects the write access and converts data arrangement according to the endian conversion setting .

For example the endian conversion mechanism swaps data of zeroth to third bytes of 0x00100000. As a result the data of the zeroth to third bytes of 0x00100000 is converted from 0xFEDCBA98 to 0x98BADCFE. The endian conversion mechanism swaps data of fourth to fifth bytes of 0x00100000. As a result the data of the fourth to fifth bytes of 0x00100000 is converted from 0x7654 to 0x5476.

As a result of the conversions the endian conversion mechanism converts the data of the write access to 0x98BADCFE54763210 and outputs the data. Subsequently the GPU reads data acting as the argument of the image process from the memory area .

As described above the system notifies the endian conversion mechanism outside the CPU of the range subjected to the endian conversion at the start of a program and the endian conversion mechanism performs the endian conversion for the specified range. This enables the system to perform the endian conversion in a location less likely to adversely affect the performance of the system and to perform complicated conversion such as performing endian conversion for a portion of an address range within the width of the bus .

The CPU is responsible for overall control of the system . The CPU may be a multicore processor system that includes at least two CPUs. A multicore processor system is a system of a computer that includes a processor equipped with multiple cores. As long as multiple cores are provided the multicore processor system may be a single processor equipped with multiple cores or a group of single core processors arranged in parallel. The CPU includes a dedicated cache memory .

The CPU and the bus are connected through the endian conversion mechanism . If the system includes multiple CPUs the CPUs are connected through the respective endian conversion mechanisms to the bus . Although in the system depicted in the endian conversion mechanism is disposed between the CPU and the bus the endian conversion mechanism may be disposed at a position of a bus interface etc. to an external destination outside the large scale integration LSI for example.

The ROM stores programs such as a boot program. The RAM is used as a work area of the CPU . The flash ROM is a flash ROM with high readout speed and is a NOR flash memory for example. The flash ROM stores system software such as an operating system OS applications etc. For example when the OS is updated the system receives a new OS through the I F and updates the old OS stored in the flash ROM with the received new OS.

The flash ROM controller controls the reading and writing of data with respect to the flash ROM under the control of the CPU . The flash ROM is a flash ROM for the main purpose of storage and transfer of data and is a NAND flash memory for example. The flash ROM stores data written under the control of the flash ROM controller . Specific examples of data include image data video data etc. acquired through the I F by a user using the system and a program executing the endian conversion method according to this embodiment may be stored. For example a memory card and an SD card may be employed as the flash ROM .

The display displays for example data such as text images functional information etc. in addition to a cursor icons and or tool boxes. A thin film transistor TFT liquid crystal display and the like may be employed as the display .

The I F is connected to a network such as a local area network LAN a wide area network WAN and the Internet through a communication line and is connected to other apparatuses through the network . The I F administers an internal interface with the network and controls the input and output of data with respect to external apparatuses. For example a modem or a LAN adaptor may be employed as the I F .

The keyboard includes for example keys for inputting letters numerals and various instructions and performs the input of data. Alternatively a touch panel type input pad or numeric keypad etc. may be adopted.

Functions of the system will be described. is a block diagram of functions of the system . The system includes a detecting unit an acquiring unit a notifying unit and a converting unit . The functions acting as a control unit the detecting unit to the notifying unit are implemented by executing on the CPU programs stored in a storage device. For example the storage device includes the ROM the RAM the flash ROM and the flash ROM depicted in . The system can access a main memory .

The system can execute a program including an endian conversion setting . The converting unit is executed by the endian conversion mechanism to implement the function thereof. The endian conversion setting has description of an address range to be subjected to the endian conversion. A method of specifying the address range may be combination of a start address and an end address or combination of a start address and a size.

The main memory is a primary storage device that can be accessed by the CPU . For example the main memory may be the entire RAM or a portion of the RAM .

The detecting unit has a function of detecting that a program including the endian conversion setting is executed. For example the detecting unit detects that the program including the endian conversion setting is executed. Information indicative of the detection is stored in a storage area such as a register of the CPU a cache memory and the main memory .

The acquiring unit has a function of acquiring the endian conversion setting of the program if the detecting unit detects that the program is executed. For example the acquiring unit acquires the endian conversion setting . The acquired endian conversion setting is stored in the storage area such as the register of the CPU the cache memory and the main memory .

The notifying unit has a function of notifying the converting unit of the acquired endian conversion setting. For example the notifying unit notifies the converting unit of the endian conversion setting . Information indicative of the notification is stored in the storage area such as the register of the CPU the cache memory and the main memory .

The converting unit has a function of performing the endian conversion of data specified by an address of the main memory when accessing the address of the main memory based on the endian conversion setting of the notification. For example it is assumed that the endian conversion setting has description of a command for performing the endian conversion of two bytes from the address 0x00100004. In this case when accessing the addresses 0x00100000 to 0x0010000F the converting unit swaps data of 0x00100004 and 0x00100005 to perform the endian conversion.

As described above the system includes between the CPU and the bus the converting unit that converts the order in a byte string within an address range specified by access from the CPU and detects that the program is executed by the CPU . If the program is detected the system subsequently causes the CPU to acquire the address range for conversion of the order in the byte string corresponding to the program and causes the CPU to notify the converting unit of the address range.

The endian conversion setting register is a register storing an endian conversion setting table that includes an instruction area of the endian conversion and individual conversion setting contents in the instruction area. Details of the endian conversion setting register will be described later with reference to . An example of generation of endian conversion setting information underlying the endian conversion setting table will be described later with reference to .

The swap instruction generation circuit is a circuit that when bus access occurs generates swap instructions of a predetermined unit based on the address of the bus access and the size of the bus access. The predetermined unit is a unit of bytes for example. For example the swap instruction generation circuit refers to the endian conversion setting table and generates swap instructions based on individual endian conversion settings that are equivalent in number to the bus access size number of bytes . An example of swap instructions generated by the swap instruction generation circuit will be described later with reference to .

The write swap circuit is a circuit that based on the swap instruction information of the swap instruction generation circuit rearranges by a predetermined unit data that is transmitted from the bus interface master side at the time of write access to the bus . Similarly the read swap circuit is a circuit that based on the swap instruction information of the swap instruction generation circuit rearranges by a predetermined unit data that is transmitted from the bus interface slave side at the time of read access to the bus .

The bus interface master side and the bus interface slave side transmit receive data according to a data format . The data format includes three fields including access type size and address. The data format also includes either a write data field or a read data field depending on a value obtained as the access type.

The access type field stores an identifier indicative of whether data to be transmitted received is data consequent to a read access or data consequent to a write access. For example READ in the access type field indicates data consequent to a read access and WRITE in the access type field indicates data consequent to a write access. The size field stores a data size of transmitted received data. The address field stores an initial address of transmitted received data. The write data field stores data transmitted at the time of write access. The read data field stores data received at the time of read access.

For example in the example of it is assumed that the CPU issues a read access for 16 bytes starting from the address 0x00100000. In this case the bus interface slave side transmits data with READ stored in the access type field 16 bytes stored in the size field 0x00100000 stored in the address field and read data stored in the read data field.

The swap instruction generation circuit refers to the size field and the address field of the data format to acquire the individual endian conversion setting and generates swap instructions. The write swap circuit performs a swap for the write data field if swap instructions are present. Similarly the read swap circuit performs a swap for the read data field if swap instructions are present.

The endian conversion mechanism may perform transfers of the same size as the bus width of the bus interface master side and the bus interface slave side or may perform transfers of a size less than or equal to the bus width. For example the endian conversion mechanism may transfer data such that the size field indicates 8 bytes .

The endian conversion area table includes three fields of validity flag start address and end address. The validity flag field stores a value that indicates whether the corresponding record is valid. For example if the validity flag field has 1 this indicates that the corresponding record is valid. If the validity flag field has 0 this indicates that the corresponding record is invalid. The start address field stores an initial address to be subjected to the endian conversion. The end address field stores an end address to be subjected to the endian conversion.

For example the endian conversion area table depicted in indicates that a record is valid and that an object area of endian conversion is from 0x00100000 to 0x001FFFFF. Although the record is registered in the endian conversion area table multiple records may be registered.

The individual endian conversion setting table has three fields including validity flag address and size. The validity flag field stores a value that indicates whether the corresponding record is valid. The address field stores an initial address from which a swap is started. The size field stores the number of bytes to be swapped. One record of the individual endian conversion setting table is referred to as one entry.

For example the individual endian conversion setting table depicted in has entries to registered as a valid record group. The entries to represent the individual endian conversion setting of one byte starting from the addresses 0x00100000 to 0x00100003. The entry represents the individual endian conversion setting of two bytes starting from the address 0x00100004. The entries and represent the individual endian conversion setting of four bytes starting from the addresses 0x00100008 and 0x0010000C.

Similarly the entries to represent the individual endian conversion setting of one byte starting from the addresses 0x00100040 to 0x00100043. The entry represents the individual endian conversion setting of two bytes starting from the address 0x00100044. The entries and represent the individual endian conversion setting of four bytes starting from the addresses 0x00100048 and 0x0010004C.

The swap instruction generation circuit detects access to 16 bytes starting from 0x00100000. In the following description 0x00100000 is set as an object address. The swap instruction generation circuit determines whether the object address is within an address range defined by the start address and the end address of the endian conversion area table . Since the object address is within the address range in the example of the swap instruction generation circuit then acquires offset values and swap sizes used as the individual endian conversion setting for 16 bytes from the start address. The offset values are offset values represented in hexadecimal.

The acquired object offsets and swap sizes are values depicted in individual endian conversion setting corresponding to the object address. For example offset values 0 to 3 have a swap size of 1 an offset value 4 has a swap size of 2 and offset values 8 and C have a swap size of 4. After the acquisition the swap instruction generation circuit generates swap instruction information in terms of bytes. The swap instruction generation circuit notifies the write swap circuit and the read swap circuit of the generated swap instruction information .

For example the instruction contents of the swap instruction information indicate that the data of the offset value 4 is to be set at the data position of the offset value 5 and the data of the offset value 5 is to be set at the data position of the offset value 4. Similarly the instruction contents of the swap instruction information indicate that the data of the offset value 8 is to be set at the data position of the offset value B and cause the data of the offset value 9 is to be set at the data position of the offset value A. The instruction contents of the swap instruction information indicate that the data of the offset value A is to be set at the data position of the offset value 9 and the data of the offset value B is to be set at the data position of the offset value 8. Similarly the instruction contents of the swap instruction information indicate that the offset values C to F are to be set at the data positions of the offset values F to C respectively.

The compiler analyzes offset values from the base addresses and sizes of members of the structure based on a conversion object data format of the header structure depicted in a rectangle at the time of generation of an object file to generate data format analysis result . For example for a member variable attr 4 that is arrangement of unsigned one byte data of the header structure the compiler analyzes that attr 0 has an offset value 0x0000 and size 1. Similarly the compiler analyzes that attr 1 has an offset value 0x0001 and size 1 analyzes that attr 2 has an offset value 0x0002 and size 1 and analyzes that attr 3 has an offset value 0x0003 and size 1.

Similarly the compiler analyzes that unsigned two byte data of a member variable type has an offset value 0x0004 and size 2. The compiler analyzes that four byte data of a member variable size has an offset value 0x0004 and size 2 and analyzes that four byte data of a member variable opt has an offset value 0x0004 and size 2.

The linker generates endian conversion setting information based on the data arrangement information and the data format analysis result . The endian conversion setting information includes endian conversion area information and individual endian conversion setting information . The endian conversion area information and the individual endian conversion setting information are information acquired by removing the validity flag fields from the endian conversion area table and the individual endian conversion setting table in the endian conversion setting table . Therefore the fields of the endian conversion area information and the individual endian conversion setting information will not be described.

The linker sets the start address and the end address of the endian conversion area table such that the base address group of the data arrangement information is entirely included. Although the linker sets the start address and the end address as a continuous area of 0x00100000 to 0x001FFFFF in multiple areas may separately be set in two or more records. The linker sets an address in the individual endian conversion setting table to a value acquired by adding a base address of the data arrangement information and an offset value of the data format analysis result .

As a result the endian conversion setting information is generated by the compiler and the linker. The endian conversion setting information may be generated by a designer etc. of an application.

For example the endian conversion mechanism performs conversion based on the conversion object data format of the header structure depicted in the rectangle . The data of the offset values 0 to 3 storing the member variable attr 4 is one byte data and therefore is not converted by the endian conversion mechanism .

The data of the offset values 4 and 5 storing the member variable type is two byte data and is subjected to the endian conversion by the endian conversion mechanism . Similarly the data of the offset values 8 to B storing the member variable size and the data of the offset values C to F storing the member variable opt are four byte data and are subjected to the endian conversion by the endian conversion mechanism . The offset values 6 and 7 without instruction may be handled in the same way as one byte data.

Based on the above description the system uses the already generated endian conversion setting and the endian conversion mechanism to perform the endian conversion during execution of the program. depicts a process at the time of program building and depicts an execution process of the built program. depict a process when a bus access occurs in the program in execution.

The CPU uses the compiler to compile source code step S . As a result of execution the CPU generates an object file and a data format analysis result . The CPU uses the linker to form a link based on the generated object file and an object file group generated by compiling other source codes step S . As a result of execution the CPU generates a load module and data arrangement information .

The CPU generates the endian conversion setting information based on the generated data format analysis result and a data format analysis result generated by a designer etc. step S .

After starting execution of the program the CPU determines whether the program is to be terminated step S . If the program is to be terminated step S YES the CPU terminates the program. If the program is to be continued step S NO the CPU makes an access request to the bus during the program execution step S . The CPU waits until a response to the access request is received from the bus .

When detecting the access request to the bus the endian conversion mechanism executes a bus access time process step S . Details of the bus access time process will be described later with reference to . As a result of execution of the bus access time process by the endian conversion mechanism a response to the access request is output to the CPU . The CPU receives the access response from the bus step S and goes to the operation at step S.

The endian conversion mechanism then determines whether the individual endian conversion setting corresponding to the object address exists step S . If the individual endian conversion setting corresponding to the object address exists step S YES the endian conversion mechanism generates data swap instruction information based on the acquired individual endian conversion setting step S . After the generation the endian conversion mechanism goes to step S depicted in .

If the object address is outside the address range step S NO or if the individual endian conversion setting corresponding to the object address does not exist step S NO the endian conversion mechanism executes the bus access as usual step S . After the execution the endian conversion mechanism terminates the bus access time process.

If data has arrived step S YES the endian conversion mechanism executes data swap step S . After the execution the endian conversion mechanism transmits the swapped data to the bus interface master side step S and then determines whether the arriving data is the last data step S .

If the arriving data is the last data step S YES the endian conversion mechanism terminates the bus access time process. If data has not arrived step S NO or if the arriving data is not the last data step S NO the endian conversion mechanism goes to the operation at step S.

If the access type is write step S WRITE the endian conversion mechanism determines whether data has arrived from the bus interface master side step S .

If data has arrived step S YES the endian conversion mechanism executes data swap step S . After the execution the endian conversion mechanism transmits the swapped data to the bus interface slave side step S and then determines whether the arriving data is the last data step S .

If the arriving data is the last data step S YES the endian conversion mechanism executes the write access step S and terminates the bus access time process. If data has not arrived step S NO or if the arriving data is not the last data step S NO the endian conversion mechanism goes to the operation at step S.

As described above according to the endian conversion method and system according to the first embodiment a bus is notified of an address range subjected to the endian conversion at the start of a program and the endian conversion is performed for a range specified by the bus. This enables the system to perform the endian conversion in a location less likely to affect the performance in the system and to perform complicated conversion such as performing endian conversion for a portion of an address range within the bus width.

Although the system according to the first embodiment has latency of bus access extended by the addition of the endian conversion mechanism the effect on the processing performance of the system is reduced because of the following two reasons. The first reason is that the frequency of bus access is smaller than the number of times the CPU accesses the cache. For example even if the rate of cache miss is 10 the bus access occurs only once out of ten cache accesses. Therefore the effect on the processing performance of the system is reduced by performing the endian conversion in the bus rather than performing the endian conversion within the CPU. The second reason is that since the bus access is normally a burst access the time required for the endian conversion can be overlapped with and hidden by another process.

The system according to the first embodiment may generate the endian conversion setting storing an address range subjected to the endian conversion when compiling source code of a program. This enables the system to cover the entire address range subjected to the endian conversion without causing missing endian conversion setting etc.

The endian conversion mechanism according to the first embodiment may perform the endian conversion when the object address of the endian conversion is included in the endian conversion area and the individual endian conversion setting exists. As a result the endian conversion mechanism need not execute a branch process in terms of whether the individual endian conversion setting exists when the object address is not included in the endian conversion area.

The endian conversion mechanism according to the first embodiment has the entire individual endian conversion setting registered in the individual endian conversion setting table . The system according to a second embodiment takes a form in which a portion of the individual endian conversion setting is registered into an endian conversion mechanism according to the second embodiment while the other individual endian conversion setting is stored in the main memory .

The main memory according to the second embodiment stores an endian conversion setting table . It is assumed that an area of storage of the endian conversion setting table is an area starting from the address 0x000F0000. The endian conversion setting table stored on the main memory includes the endian conversion area information and the individual endian conversion setting information depicted in .

The endian conversion setting cache is a cache memory storing a portion of an endian conversion setting table. The endian conversion setting cache includes an endian conversion area table and an individual endian conversion setting table .

The endian conversion area table includes an endian conversion setting table initial address field in addition to the endian conversion area table . The endian conversion setting table initial address field stores a value of an initial address that is the storage destination in the main memory for the endian conversion setting table set in the endian conversion setting cache . For example since the endian conversion setting table is set in the endian conversion mechanism depicted in 0x000F0000 is stored in the endian conversion setting table initial address field.

The individual endian conversion setting table has the same fields as the individual endian conversion setting table . Therefore the fields of the individual endian conversion setting table will not be described. It is assumed that up to 12 entries can be registered in the individual endian conversion setting table and the entries to are registered. The entries and are not registered in the individual endian conversion setting table and are stored in the endian conversion setting table .

The individual endian conversion setting replacement control circuit is a circuit controlling replacement in the individual endian conversion setting table . For example the individual endian conversion setting replacement control circuit acquires and writes information of one entry from the main memory into a record of the individual endian conversion setting table . For example if the entry is registered to the individual endian conversion setting table the individual endian conversion setting replacement control circuit selects and overwrites one entry of the individual endian conversion setting table with the entry .

The access arbitration circuit is a circuit arbitrating between an access request to the bus from the bus interface slave side and an access request to the bus from the individual endian conversion setting replacement control circuit . For example the access arbitration circuit has a buffer capable of storing an access request and while access consequent to one of the access requests is occurring if the other access request is made the access arbitration circuit buffers the other access request. After returning an access response to the one access request the access arbitration circuit notifies the bus of the other access request.

The system uses the endian conversion mechanism depicted in to perform the endian conversion. A program build process and a program execution process according to the second embodiment are equivalent to the program build process and the program execution process according to the first embodiment and therefore will not be described. A bus access time process part according to the second embodiment is equivalent to the bus access time process part according to the first embodiment and therefore will not be described.

The endian conversion mechanism then determines whether the individual endian conversion setting corresponding to the object address exists step S . If the individual endian conversion setting corresponding to the object address exists step S YES the endian conversion mechanism generates data swap instruction information based on the acquired individual endian conversion setting step S . After the generation the endian conversion mechanism goes to step S depicted in .

If the individual endian conversion setting corresponding to the object address does not exist step S NO the endian conversion mechanism acquires the individual endian conversion setting corresponding to the object address from the endian conversion setting table on the main memory step S . The individual endian conversion setting information on the main memory is data included in the endian conversion setting information stored in the information stored in the endian conversion setting table initial address field.

The endian conversion mechanism then determines whether the individual endian conversion setting corresponding to the object address exists step S . If the individual endian conversion setting corresponding to the object address exists step S YES the endian conversion mechanism selects one entry of the individual endian conversion setting table step S . In a selecting method of the entry if an empty entry exists the empty entry is directly selected. In the selecting method of the entry if no empty entry exists one entry is selected according to a substitution algorithm such as Least Recently Used LRU and Least Frequently Used LFU .

After the selection the endian conversion mechanism overwrites the selected entry with the endian conversion setting corresponding to the object address step S . After overwriting the endian conversion mechanism goes to the operation at step S.

If the object address is outside the address range step S NO or if the individual endian conversion setting corresponding to the object address does not exist step S NO the endian conversion mechanism executes the bus access as usual step S . After the execution the endian conversion mechanism terminates the bus access time process.

As described above according to the endian conversion method and system according to the second embodiment a portion of the individual endian conversion setting is registered into the endian conversion mechanism while the other individual endian conversion setting is stored in the main memory. This enables the endian conversion method according to the second embodiment to suppress the storage area storing the individual endian conversion setting. If an address subjected to the endian conversion has temporal locality a frequency of replacement of the individual endian setting is reduced and therefore the system can reduce overhead in terms of performance. The address having temporal locality corresponds to an address at which a static variable is stored for example. The static variable is used only in a declared function and therefore causes temporal locality.

The system according to the first and second embodiments notifies the endian conversion mechanisms and of the endian conversion setting when a program is loaded. The system according to a third embodiment notifies an endian conversion mechanism of the endian conversion setting when a program is executed. It is assumed that the endian conversion mechanism according to the third embodiment is the same hardware as the endian conversion setting cache included in the endian conversion mechanism according to the second embodiment.

After the extraction the apparatus for software development uses the compiler to add an Application Programming Interface API call for giving notification of the endian conversion setting to a location before the location subjected to the endian conversion. The location before the location subjected to the endian conversion is a location to which the registration object address is allocated for example. Similarly the apparatus for software development uses the compiler to add an API call for releasing the endian conversion setting to a location at which the need for the endian conversion is eliminated. The need for the endian conversion is eliminated at a location where the registration object address is released for example.

An image of binary code of a load module with the API calls added is a code image . To the code image a code and a code are added. The code is a code added after the malloc function and is the API set endian mode p size p 4 LE giving notification of the endian conversion setting.

A first argument of set endian mode is the initial address of the registration object address and is set in the start address field of the endian conversion area table . A second argument is a size of the registration object address and a result of addition thereof to the first argument is set in the end address field of the endian conversion area table . A third argument is an address of the individual endian conversion setting of the registration object and is set in the address field of the individual endian conversion setting table . A fourth argument is a size of the individual endian conversion setting of the registration object and is set in the size field of the individual endian conversion setting table . A fifth argument is stored as an identifier indicative of ether little endian or big endian.

Similarly the code is added after the free function and the API delete endian mode p size giving notification of deletion of the endian conversion setting is added. A first argument of delete endian mode is the initial address of the deletion object address. A second argument is a size of the deletion object address. A designer of the program may add commend codes using the APIs into the source code.

The CPU executes the load module and when the API for giving notification of the endian conversion setting is executed during execution of the program the CPU notifies the endian conversion mechanism of the endian conversion setting information. The notified endian conversion mechanism registers the endian conversion setting information to the endian conversion setting cache . It is assumed that the system has a form of memory mapped I O allowing an address space of devices to coexist in the address space of the RAM . Therefore the CPU can access an address assigned to the endian conversion setting cache . An endian conversion setting information registration process will be described later with reference to .

When the API for giving notification of deletion of the endian conversion setting is executed during execution of the program the CPU notifies the endian conversion mechanism of the deletion of the endian conversion setting information. An endian conversion setting information deletion process will be described later with reference to .

As described above the endian conversion mechanism can perform the endian conversion at the timing of bus access from the CPU for the address set by set endian mode .

The code has set endian mode added to each member defined in the header structure. For example set endian mode h sizeof struct header h attr 0 1 LE is added to the top of the code .

Arguments will be described. A first argument is set as the initial address of the registration object address. A second argument is set as a size of the registration object address i.e. a size of the header structure. A third argument is set as an address of the individual endian conversion setting of the registration object i.e. an address of h attr 0 . A fourth argument is set as a size of the individual endian conversion setting of the registration object i.e. a size of h attr 0 which is 1.

Similarly in set endian mode from second to fourth lines h attr 1 to h attr 3 are added as the individual endian conversion setting of the registration object. In set endian mode from fifth to seventh lines h type h size and h opt are added as the individual endian conversion setting of the registration object. In the code delete endian mode is added. The deletion is equivalent to the process described with reference to and therefore will not be described.

The endian conversion mechanism then determines whether the individual endian conversion setting corresponding to the registration object address exists step S . If the individual endian conversion setting does not exist step S NO the endian conversion mechanism searches for an empty entry of the endian conversion setting on the main memory step S . After the search the endian conversion mechanism determines whether an empty entry exists step S .

If an empty entry exists step S YES the endian conversion mechanism sets the empty entry to be valid step S . The endian conversion mechanism then sets the address and the size of the individual endian conversion setting of the registration object in the address field and the size field of the entry set valid in the individual endian conversion setting information step S . After setting the endian conversion mechanism selects one entry of the individual endian conversion setting table S . The selecting method of the entry at step S may be the method described at step S.

After the selection the endian conversion mechanism sets the selected entry to be valid step S . After setting the endian conversion mechanism sets the address and the size of the individual endian conversion setting of the registration object in the address field and the size field of the selected entry step S and terminates the endian conversion setting information registration process.

If the registration object address is not within the address range step S NO the endian conversion mechanism outputs indication of an error step S and terminates the endian conversion setting information registration process. The error may be output to the CPU or may be a status register in the endian conversion mechanism etc.

If no empty entry exists step S NO or if the individual endian conversion setting exists step S YES the endian conversion mechanism goes to the operation at step S.

The endian conversion mechanism then determines whether the individual endian conversion setting corresponding to the deletion object address exists step S . If the corresponding individual endian conversion setting exists step S YES the endian conversion mechanism invalidates the acquired individual endian conversion setting step S . After the invalidation the endian conversion mechanism acquires the individual endian conversion setting corresponding to the deletion object address from the individual endian conversion setting table step S .

The endian conversion mechanism then determines whether the individual endian conversion setting corresponding to the deletion object address exists step S . If the individual endian conversion setting corresponding to the deletion object address exists step S YES the endian conversion mechanism invalidates the acquired individual endian conversion setting step S and terminates the endian conversion setting information deletion process.

If the individual endian conversion setting corresponding to the deletion object address does not exist step S NO the endian conversion mechanism terminates the endian conversion setting information deletion process. If the deletion object address is not within the address range step S NO or if the corresponding individual endian conversion setting does not exist step S NO the endian conversion mechanism outputs indication of an error step S . After the output the endian conversion mechanism terminates the endian conversion setting information deletion process.

As described above according to the endian conversion method and system according to the third embodiment when the global data is secured during execution the individual endian conversion setting is registered and when the global data is released the individual endian conversion setting is deleted. As a result the endian conversion mechanism according to the third embodiment may have only the individual endian conversion setting corresponding to the secured global data. Therefore the endian conversion mechanism according to the third embodiment can reduce the size of the individual endian conversion setting table as compared to the endian conversion mechanism according to the second embodiment.

The first to third embodiments are based on the premise that all the addresses subjected to the endian conversion setting have the individual endian conversion setting. In a fourth embodiment the endian conversion mechanism corresponding to data having a repeated structure such as an array will be described.

Elements of H include H 0 assigned to 0x00100000 H 1 assigned to 0x00100040 H 2 assigned to 0x00100080 and H 3 assigned to 0x00100000. Elements are subsequently assigned from H 4 to H 15 such that one element size is set to 0x40. The last element H 15 is assigned to 0x001003FF. The one element size of 0x40 is a size of the header structure. From such data arrangement information the linker generates endian conversion area information .

The compiler analyzes offset values from the base addresses and sizes of members of the structure based on a conversion object data format of the header structure depicted in a rectangle at the time of generation of an object file to generate data format analysis result for one element. The data format analysis result for one element is information equivalent to the data format analysis result according to the first embodiment and therefore will not be described. The linker directly sets the data format analysis result for one element as individual endian conversion setting information and combines and sets the endian conversion area information and the individual endian conversion setting information as endian conversion setting information .

The endian conversion area information is information including a mask field in addition to the endian conversion area information according to the first embodiment. The mask field has a mask value for comparing an offset value of the data format analysis result for one element from the object address. For example if the object address is 0x00100044 data of H 1 .type is stored at the object address. In this case the mask result is 0x00100044 0x003F 0x0004 and therefore the mask result is identical to the offset value 0x004 of the data format analysis result for one element.

The endian conversion mechanism according to the fourth embodiment will be described. The endian conversion mechanism according to the fourth embodiment has entirely equivalent hardware and functions except the storage contents of the endian conversion setting register and the function of the swap instruction generation circuit included in the endian conversion mechanism according to the first embodiment. Therefore the endian conversion mechanism according to the fourth embodiment will not be described except the endian conversion setting register and the swap instruction generation circuit . An endian conversion setting register and a swap instruction generation circuit included in the endian conversion mechanism according to the fourth embodiment will be described with reference to .

The endian conversion area table includes a mask field in addition to the field group included in the endian conversion area table according to the first embodiment. Contents stored in the mask field are equivalent to the endian conversion area information and therefore will not be described.

The individual endian conversion setting table is a table acquired by replacing the address field of the individual endian conversion setting table according to the first embodiment with an offset value field. Contents stored in the offset value field are equivalent to the offset value of the data format analysis result and therefore will not be described.

The swap instruction generation circuit masks the address field of the data format with the mask field of the endian conversion area table . The swap instruction generation circuit compares a value acquired by the masking with the offset value field of the individual endian conversion setting table to acquire the individual endian conversion setting.

The bus access time process according to the fourth embodiment has step S replaced with acquiring the individual endian conversion setting corresponding to an address acquired by masking the object address with the mask field from the individual endian conversion setting table . The other steps of the process are equivalent to the bus access time process according to the first embodiment and therefore will not be described.

As described above according to the endian conversion method and system according to the fourth embodiment a conversion object address is masked and if the masked address is identical to the offset value the endian conversion is performed. This enables the system according to the fourth embodiment to support data having a repeated structure such as an array with smaller individual endian conversion setting.

For example it is assumed that a CPU transfers an array of vertex data when making a request for a D process to a GPU. In such a case the endian conversion mechanisms of the first to third embodiments must register the individual endian conversion setting for all the secured vertex data. However the endian conversion mechanism according to the fourth embodiment can support such a case with the individual endian conversion setting for one element.

The endian conversion method described in the present embodiment may be implemented by executing a prepared program on a computer such as a personal computer and a workstation. The program is stored on a computer readable recording medium such as a hard disk a flexible disk a CD ROM an MO and a DVD read out from the computer readable medium and executed by the computer. The program may be distributed through a network such as the Internet.

An aspect of the embodiments produces an effect that the endian conversion is performed without affecting processing performance in a system and that the endian conversion with complicated data structure can be performed.

All examples and conditional language provided herein are intended for pedagogical purposes of aiding the reader in understanding the invention and the concepts contributed by the inventor to further the art and are not to be construed as limitations to such specifically recited examples and conditions nor does the organization of such examples in the specification relate to a showing of the superiority and inferiority of the invention. Although one or more embodiments of the present invention have been described in detail it should be understood that the various changes substitutions and alterations could be made hereto without departing from the spirit and scope of the invention.

