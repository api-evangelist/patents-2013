---

title: Registry for trading partners using documents for commerce in trading partner networks
abstract: A market making node in a network routes machine readable documents to connect businesses with customers, suppliers and trading partners. The self defining electronic documents, such as XML based documents, can be easily understood amongst the partners. Definitions of these electronic business documents, called business interface definitions, are posted on the Internet, or otherwise communicated to members of the network. The business interface definitions tell potential trading partners the services the company offers and the documents to use when communicating with such services. Thus, a typical business interface definition allows a customer to place an order by submitting a purchase order or a supplier checks availability by downloading an inventory status report. Also, the registration at a market maker node of a specification of the input and output documents, coupled with interpretation information in a common business library, enables participants in a trading partner network to execute the transaction in a way which closely parallels the way in which paper based businesses operate.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08959196&OS=08959196&RS=08959196
owner: Red Hat, Inc.
number: 08959196
owner_city: Raleigh
owner_country: US
publication_date: 20130211
---
This application is a continuation of U.S. application Ser. No. 12 646 119 filed on 23 Dec. 2009 issuing on Feb. 13 2013 as U.S. Pat. No. 8 375 116 which is a continuation of U.S. application Ser. No. 09 633 365 filed on 7 Oct. 2000 now U.S. Pat. No. 7 660 874 which is a continuation of U.S. patent application Ser. No. 09 173 854 filed on 16 Oct. 1998 now U.S. Pat. No. 6 125 391 entitled MARKET MAKERS USING DOCUMENTS FOR COMMERCE IN TRADING PARTNER NETWORKS. This application is related to 

U.S. patent application Ser. No. 09 173 847 filed on 16 Oct. 1998 now U.S. Pat. No. 6 226 675 B1 entitled PARTICIPANT SERVER WHICH PROCESSES DOCUMENTS FOR COMMERCE IN TRADING PARTNER NETWORKS and

U.S. patent application Ser. No. 09 173 858 filed on 16 Oct. 1998 now U.S. Pat. No. 6 125 391 entitled DOCUMENTS FOR COMMERCE IN TRADING PARTNER NETWORKS AND INTERFACE DEFINITIONS BASED ON THE DOCUMENTS. The original parent and the related applications are incorporated by reference.

A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention relates to systems and protocols supporting transactions among diverse clients coupled to a network and more particularly to systems and protocols supporting commercial transactions among platforms having variant architectures.

The Internet and other communications networks provide avenues for communication among people and computer platforms which are being used for a wide variety of transactions including commercial transactions in which participants buy and sell goods and services. Many efforts are underway to facilitate commercial transactions on the Internet. However with many competing standards in order to execute a transaction the parties to the transaction must agree in advance on the protocols to be utilized and often require custom integration of the platform architectures to support such transactions. Commercial processes internal to a particular node not compatible with agreed upon standards may require substantial rework for integration with other nodes. Furthermore as a company commits to one standard or the other the company becomes locked in to a given standardized group of transacting parties to the exclusion of others.

A good overview of the challenges met by Internet commerce development is provided in Tenenbaum et al. Computer May 1997 pp. 48 55.

To open commercial transactions on the Internet standardization of architectural frameworks is desired. Platforms developed to support such commercial frameworks include IBM Commerce Point Microsoft Internet Commerce Framework Netscape ONE Open Network Environment Oracle NCA Network Computing Architecture and Sun JAVASoft JECF JAVA Electronic Commerce Framework .

In addition to these proprietary frameworks programming techniques such as common distributed object model based on CORBA IIOP Common Object Request Broker Architecture Internet ORB Protocol are being pursued. Use of the common distributed object model is intended to simplify the migration of enterprise systems to systems which can inter operate at the business application level for electronic commerce. However a consumer or business using one framework is unable to execute transactions on a different framework. This limits the growth of electronic commerce systems.

Companies implementing one framework will have an application programming interface API which is different than the API s supporting other frameworks. Thus it is very difficult for companies to access each other s business services without requiring adoption of common business system interfaces. The development of such business system interfaces at the API level requires significant cooperation amongst the parties which is often impractical.

Accordingly it is desirable to provide a framework which facilitates interaction amongst diverse platforms in a communication network. Such system should facilitate spontaneous commerce between trading partners without custom integration or prior agreement on industry wide standards. Further such systems should encourage incremental path to business automation to eliminate much of the time cost and risks of traditional systems integration.

Overall it is desirable to provide an electronic commerce system that replaces the closed trading partner networks based on proprietary standards with open markets.

The present invention offers an infrastructure for connecting businesses with customers suppliers and trading partners. Under the infrastructure of the present invention companies exchange information and services using self defining machine readable documents such as XML Extensible Markup Language based documents that can be easily understood amongst the partners. Documents which describe the documents to be exchanged called business interface definitions BIDs herein are posted on the Internet or otherwise communicated to members of the network. The business interface definitions tell potential trading partners the services the company offers and the documents to use when communicating with such services. Thus a typical business interface definition allows a customer to place an order by submitting a purchase order compliant with a document definition published in the BID of a party to receive the purchase order. A supplier is allowed to check availability by downloading an inventory status report compliant with a document definition published in the BID of a business system managing inventory data. Use of predefined machine readable business documents provides a more intuitive and flexible way to access enterprise applications.

A node in the commerce network establishes an interface for transactions according to the present invention that comprises a machine readable specification of an interface along with a machine readable data structure that includes interpretation information for the machine readable specification of the interface. The machine readable specification of the interface includes a definition of an input document and a definition of an output document that are accepted and produced by transaction processes for which the node acts as an interface. The definitions of the input and output documents comprise respective descriptions of sets of storage units and logical structures for sets of storage units such as according to a standard XML based document. The machine readable data structure that includes interpretation information according to various aspects of the invention includes data type specifications e.g. string array etc. for logical structures in the definitions of the input and output documents content models e.g. lists of possible values for logical structures and or data structures that map predefined sets of storage units for a particular logic structure to respective entries in a list in order to provide a semantic definition of logical structures e.g. mapping codes to product names .

According to other aspects of the invention the interface includes a repository in memory accessible by at least one node in the network that stores a library of logic structures and interpretation information for the logic structures. The repository can be extended to include a library of definitions of input and output documents a library of specifications of interfaces and a library of specifications for participant interface nodes in the network.

Thus a participant in the transaction framework of the present invention executes transactions amongst nodes in a network that includes a plurality of nodes executing processes involved in the transactions. The method includes storing a machine readable specification of an interface for a transaction the specification includes a definition of an input document and a definition of an output document. The definition of the input and output documents comprise respective descriptions of sets of storage units and logical structures for the sets of storage units. In a preferred system the definitions are expressed in a manner compliant with a standard XML document type definition DTD extended by semantic mapping content modeling and data typing of some elements. The participant in the transaction receives data comprising a document through a communication network. The participant parses the document according to the specification stored for a transaction to identify an input document for the transaction. After parsing the document at least a portion of the input document is provided in a machine readable format to a transaction process which produces an output. An output document is formed comprising the output of the transaction process based on the definition of an output document in the stored specification. The output document is transmitted on the communication network typically back to the source of the input document or elsewhere as suits the needs of a particular type of transaction.

Thus the business interface definition bridges the gap between the documents specified for example according to XML and the programs which execute on the front end of the transaction processing services at particular nodes. Such front ends are implemented for example by JAVA virtual machines or by other common architectures providing for interconnection of systems across a network. The business interface definition provides a technique by which a transaction protocol is programmed using the business interface definition document. The program for the protocol of the transaction is established by a detailed formal specification of a document type.

The machine readable specification of the interface of the transaction is made accessible to other platforms in the network. Participant platforms include resources to design input documents and output documents according to the transaction interface specified at a complementary node. Thus participant nodes include resources to access the definition of an input document for the complementary interface and a definition of an output document for the complementary interface. The stored specification for the accessing participant node is established by including at least part of the definition of the output document of the complementary interface in the definition of the input document of the interface stored in the specification.

The process of establishing the stored specification of an interface according to another aspect of the invention includes accessing elements of the machine readable specification from a repository. The repository stores a library of logic structures content models and schematic maps for logic structures and definition of documents that comprise logic structures used to build interface description. A repository accessible in the network facilitates the building of interface descriptions which can be easily shared. Any differences between the input document created for a particular process and the output document expected as a return by a complementary process can be easily negotiated by communication on the network and agreeing on common logic structures to express particular information.

The machine readable specification of an interface of a transaction according to one aspect of the invention includes a document compliant with a definition of an interface document that is shared amongst members of the network. A definition of the interface document includes logic structures for storing an identifier of a particular transaction and at least one of definitions and references to definitions of input and output documents for the particular transaction. That is the interface description for a particular service may actually encompass a definition of the input and output documents. Alternatively it may include pointers to a location in the repository or elsewhere in the network of such definitions.

According to another alternative of the invention the machine readable specification includes a business interface definition BID document compliant with a definition of an interface document that includes logical structures for storing an identifier of the interface and for storing at least one of specifications and references to specifications of a set of one or more transactions supported by the interface. For each supported transaction the document includes at least one of definitions and references to definitions of input and output documents for the particular transaction.

According to another aspect of the invention the storage units defined in the definitions of the input and output document comprise parsed data including character data encoding text characters and mark up data identifying sets of storage units according to the logical structures of the input and output documents. According to another aspect of the invention at least one of the sets of storage units encodes the plurality of text characters providing a natural language word. This facilitates the use of the definitions of input and output documents by human readers and developers of such documents.

According to another aspect of the invention the specification of the input and output documents includes interpretation information for at least one of the sets of storage units identified by the logical structure. The interpretation information in one example encodes definitions for sets of parsed characters. In another example the interpretation information provides for content model specifications such as requiring a specific logic structure to carry a member of a list of codes mapped to product descriptions in a catalog. In some systems the storage units in a logic structure of a document may include sets of unparsed data as suits the needs of a particular implementation.

According to yet another aspect of the invention the transaction process in a particular platform has a transaction processing architecture which is one of a plurality of variant transaction processing architectures. Thus the participant node includes resources for translating at least a portion of the input document into a format readable according to the variant transaction processing architecture of the transaction process utilizing the information. The elements of the document definition are translated into programming objects that include variables and methods according to the variant transaction processing architectures of the transaction process. For a participant having a JAVA virtual machine acting as a transaction process front end particular fields in the documents are translated into JAVA objects including the data as well as get and set functions associated with a JAVA object. Other transaction processing architectures supportable according to the present invention include processes compliant with an interface description language in the sense of Common Object Request Broker Architecture CORBA Component Object Model COM On Line Transaction Processing OLTP and Electronic Data Interchange EDI.

According to other aspects of the invention a repository is provided that stores document types for use in the plurality of transactions. The machine readable specification for a particular transaction defines at least one of the input and output documents by reference to a document type in the repository. According to another aspect the document type included in the repository includes a document type for identifying participants in the network. Such document type providing structures for identifying a participant specifying the services supported by the participant and specifying the input and output documents for each of such services.

In addition to the methods described above the present invention provides an apparatus for managing transactions among nodes that includes a network interface memory for storing data and programs of instructions including a machine readable specification of an interface for a transaction as described above and a data processor that is coupled with the memory and the network interface. The programs of instructions stored in the apparatus include logic to execute the processes described above for a participant in the transactions.

The present invention further provides an apparatus for establishing participant interfaces for transactions executed on a system that include a network interface and a data processing resources that execute transaction processes according to a transaction processing architecture. The apparatus includes programs of instructions that are executable by the system and stored on a medium accessible by the system that provide tools to build a definition of a participant interface for a participant in a particular transaction. The definition of a participant interface includes a definition of an input document and a definition of an output document. The definitions of the input and output documents comprise respective machine readable descriptions of sets of storage units in logical structures for the sets of storage units which may be compliant in one aspect of the invention with XML document type definitions.

The apparatus for establishing participant interfaces according to this aspect of the invention also includes programs of instructions stored on a medium accessible by the data processing system and responsive to the definitions of input and output documents to compile data structures corresponding to the sets of storage units and logical structures of the input and output documents that are compliant with the transaction processing architecture to compile instructions executable by the system to translate the input document to the corresponding data structures and to compile instructions executable by the system to translate output of the transaction processes into sets of storage units and logical structures of the output document.

The tools to build a definition of a participant interface in a preferred system include instructions executable by the system to access elements of the definition from complementary nodes and or from a repository that stores a library of logical structures and interpretation information for logical structures used to build interface descriptions. According to various aspects of the invention the repository includes not only a library of logical structures but definitions of documents that comprise logical structures and formats for specifying participant interfaces. According to this aspect of the invention tools are provided for building specifications of business interfaces according to the techniques described above in connection with the description of the participant nodes. The tools for building interfaces and the tools for compiling the interfaces into resources needed for communication with transaction processing architectures according to this aspect of the invention are implemented in participant nodes in the preferred system and utilized for the development and optimization of the interface descriptions as use of the network grows based on interface descriptions that define input and output documents.

Accordingly another aspect of the invention provides an apparatus that includes memory and a data processor that executes instructions stored in the memory that include tools to build a definition of a participant interface and a compiler performing the functions described above.

According to yet another aspect of the invention the use of the participant interface descriptions enables the operation of a market maker node. At such a node a method for managing transactions is provided that comprises storing machine readable specifications of a plurality of participant interfaces which identify transactions supported by the interfaces and the respective input and output documents of such transactions. As described above the definitions of the input and output documents comprise respective descriptions of sets of storage units and logical structures for the sets of storage units such as according to the XML standard. In addition the definitions of the transactions and the definitions of the participant interfaces all comprise documents specified according to a technique compliant with XML or other standardized document expression language. At such market maker node data comprising a document is received over a communication network. The document is parsed according to the specifications to identify an input document in one or more transactions which accept the identified input document. At least a portion of the input document is provided in a machine readable format to a transaction process associated with the one or more identified transactions. The step of providing at least a portion of the input document to a transaction process includes executing a routing process according to a processing architecture at the market maker node. The routing process in one aspect of the invention is executed according to a particular processing architecture and at least a portion of the incoming document is translated into the format of the processing architecture of the routing process. The translating according to the preferred aspect includes producing programming objects that include variables and methods according to the processing architecture of the routing process.

According to another aspect of the invention the market maker node also supports the repository structure. Thus a process is included at the market maker node for allowing access by participants in the network to a repository stored at the market maker node. As described above the repository includes definitions of logic structures interpretation information and document definitions for use by the participant nodes to build transaction interface documents and includes instances of business interface definitions that identify the participants and the transactions executed by the respective participants.

The routing process includes according to various alternatives the translating of the input document into the variant processing architecture of the processes to which the document is to be routed or routing the input document in its original document format across the network to a remote processing node or to combinations of such processes. In alternatives the routing process may also include techniques for transforming an input document defined according to one input document definition into a different document defined according to a different document specification for a process which has registered to watch for the input document.

Also the market maker node is provided according to the present invention as apparatus that includes a network interface memory storing data and programs of instructions including the specifications of the participant interfaces and a data processor. The logic is provided with the data processor in the form of programs of instructions or otherwise to perform the market maker process as discussed above.

Accordingly the present invention provides a foundation for electronic commerce based on the sharing of specifications of input and output documents. Documents provide an intuitive and flexible way to access business services much simpler to implement than programming APIs. It is much easier to interconnect companies in terms of documents that are exchanged on which such companies already largely agree than in terms of business system interfaces which invariably differ. In addition such documents are specified in a human readable format in the preferred embodiment. According to the present invention the business interfaces are specified in documents such as XML documents that are readily interpretable by humans as well as by computers.

Utilization of the document based transaction architecture of the present invention involves the use of a parser which operates in basically the same way for any source of documents eliminating much of the need for custom programs to extract and integrate information from each participant in the network. Thus integrating enterprise information from accounting purchasing manufacturing shipping and other functions can be accomplished by first converting each source to a document having an architecture according to the present invention and then processing the parsed data stream. Each node in the system that participates in the market only needs to know about the format of its internal systems as well as the format of the documents being specified for interchange according to the transaction. Thus there is no need to be able to produce the native format of every other node which might want to participate in the electronic commerce network.

For complete business integration the present invention provides a repository of standardized logical structures like XML elements attributes or meta data establishing a semantic language for particular commerce communities a means for mapping between different meta data descriptions and a server for processing the documents and invoking appropriate applications and services. The basic building blocks of a network according to the present invention include the business interface definitions which tell potential trading partners what online services a company offers and which documents to use to invoke the services and servers which provide the bridge to bind together the set of internal and external business services to create a trading community. The server operates to parse the incoming documents and invoke the appropriate services. Also the server according to the present invention handles the translation tasks from the format of the documents being received and transmitted to and from the formats of the respective host systems. Thus trading partners need only agree on the structure content and sequencing of the business documents exchanged and not on the details of application programmer interfaces. How a document is processed and the actions which result from receipt of a document are strictly up to the businesses providing the services. This elevates integration from the system level to the business level. It enables the business to present a clean and stable interface to its partners despite changes in its internal technology implementation organization or processes.

The whole process of building business interface definitions and enabling servers to manage commerce according to such descriptions is facilitated by a common business library or repository of information models for generic business concepts including business description primitives like companies services and products business forms like catalogs purchase orders and invoices and standard measurements including time and date location and classification of goods.

Other aspects of the present invention can be seen upon review of the figures the detailed description and the claims which follow.

A detailed description of the present invention is provided with respect to the figures in which illustrates a network of market participants and market makers based on the use of business interface definitions and supporting the trading of input and output documents specified according to such interface descriptions. The network includes a plurality of nodes which are interconnected through a communication network such as the Internet or other telecommunications or data communications network. Each of the nodes consists of a computer such as a portable computer a desktop personal computer a workstation a network of systems or other data processing resources. The nodes include memory for storing the business interface definition processors that execute transaction processes supporting commercial transactions with other nodes in the network and computer programs which are executed by the processors in support of such services. In addition each of the nodes includes a network interface for providing for communication across the Internet or the other communication network.

In the environment of nodes and are designated market participants. Market participants include resources for consumers or suppliers of goods or services to be traded according to commercial transactions established according to the present invention.

In this example nodes and are market maker nodes. The market maker nodes include resources for registering business interface definitions called a BID registry. Participants are able to send documents to a market maker node at which the document is identified and routed to an appropriate participant which has registered to receive such documents as input. The market maker also facilitates the commercial network by maintaining a repository of standard forms making up a common business library for use in building business interface definitions.

In this example the market participant is connected directly to the market maker rather than through the Internet . This connection directly to the market maker illustrates that the configuration of the networks supporting commercial transactions can be very diverse incorporating public networks such as the Internet and private connections such as a local area network or a Point to Point connection as illustrated between nodes and . Actual communication networks are quite diverse and suitable for use to establish commercial transaction networks according to the present invention.

In the preferred system the document of is specified in an XML document type definition DTD although other document definition architectures could be used and includes interpretation information for the logical structures used in interpretation of instances of the documents. In addition each of the transaction BIDs input document BIDs and output document BIDs are specified according to an XML document type definitions. The XML type document is an example of a system based on parsed data that includes mark up data and character data. Mark up data identifies logical structures within the document and sets of character data identify the content of the logical structures. In addition unparsed data can be carried in the document for a variety of purposes. See for example the specification of the 1.0 REC XML 19980210 published by the WC3 XML Working Group at WWW.W3.0RG TR 1998 REC XML 19980210.

Thus in an exemplary system participant nodes in the network establish virtual enterprises by interconnecting business systems and services with XML encoded documents that businesses accept and generate. For example the business interface definition of a particular service establishes that if a document matching the BID of a request for a catalog entry is received then a document matching a BID of a catalog entry will be returned. Also if a document matching the BID of a purchase order is received and it is acceptable to the receiving terminal a document matching the BID of an invoice will be returned. The nodes in the network process the XML documents before they enter the local business system which is established according to the variant transaction processing architecture of any given system in the network. Thus the system unpacks sets of related documents such as MIME encoded sets of XML documents parses them to create a stream of mark up messages . The messages are routed to the appropriate applications and services using for example an event listener model like that described below.

The documents exchanged between business services are encoded using an XML language built from a repository of building blocks a common business language from which more complex document definitions may be created. The repository stores modules of interpretation information that are focused on the functions and information common to business domains including business description primitives like companies services and products business forms like catalogs purchase orders and invoices standard measurements like time date location classification codes and the like providing interpretation information for logical structures in the XML documents.

The business interface definition is a higher level document that acts as a schema used for designing interfaces that trade documents according to the present invention. Thus the business interface definition bridges the gap between the documents specified according to XML and the programs which execute on the front end of the transaction processing services at particular nodes. Such front ends are implemented by JAVA virtual machines or by other common architectures providing for interconnection of systems across a network. Thus the business interface definition provides a technique by which a transaction protocol is programmed using the business interface definition document. The program for the protocol of the transaction is established by a detailed formal specification of a document type

An example business interface definition BID based on a market participant document which conforms to an XML format is provided below. The market participant DTD groups business information about market participants associating contact and address information with a description of services and financial information. This business information is composed of names codes addresses a dedicated taxonomic mechanism for describing business organization and a pointer to terms of business. In addition the services identified by the market participant DTD will specify the input and output documents which that participant is expected respond to and produce. Thus documents which define schema using an exemplary common business language for a market participant DTD a service DTD and a transaction document DTD specified in XML with explanatory comments are set forth as LISTING 1 in the file named LISTING COMBINED.txt in the accompanying computer program listing appendix.

The service DTD schema may be extended with a service type element in a common business language repository an example of which is set forth as LISTING 2 in the file named LISTING COMBINED.txt in the accompanying computer program listing appendix.

The service type element above illustrates interpretation information carried by a business interface definition in this example a content form allowing identification of any one of a list of valid service types. Other interpretation information includes data typing such as for example the element Internet Address including the content form url and expressed in the data type string. Yet other interpretation information includes mapping of codes to elements of a list such as for example the element State including the code mapping for states in the file COUNTRY.US.SUBENTITY. 

The service description referred to by the market participant DTD defines the documents that the service accepts and generates upon competition of the service. A basic service description is specified below as a XML document transact.dtd.

Transact.dtd models a transaction description such as an invoice or a description of an exchange of value. This document type supports many uses so the transaction description element has an attribute that allows user to distinguish among invoices performance offers to sell requests for quotes and so on. The exchange may occur among more than two parties but only two are called out the offeror and the counter party each of whom is represented by a pointer to a document conforming to the market participant DTD outlined above. The counter party pointer is optional to accommodate offers to sell. The exchange description is described in the module tranprim.mod listed below and includes pricing and subtotals. Following the exchange description charges applying to the transaction as a whole may be provided and a total charge must be supplied. Thus the transaction description schema document transact.dtd for this example is set forth below 

Representative market participant and service DTDs created according to the definitions above are set forth as LISTING 3 in the file named LISTING COMBINED.txt in the accompanying computer program listing appendix.

One instance of a document produced according to the transact.dtd is set forth as LISTING 4 in the file named LISTING COMBINED.txt in the accompanying computer program listing appendix.

Accordingly the present invention provides a technique by which a market participant is able to identify itself and identify the types of input documents and the types of output documents with which it is willing to transact business. The particular manner in which the content carried in such documents is processed by the other parties to the transaction or by the local party is not involved in establishing a business relationship nor carrying out transactions.

The output data structures from the translator are supplied to a transaction process front end along with events signaled by the parser . The front end in one embodiment consists of a JAVA virtual machine or other similar interface adapted for communication amongst diverse nodes in a network. The transaction processing front end responds to the events indicated by the parser and the translator to route the incoming data to appropriate functions in the enterprise systems and networks to which the participant is coupled. Thus the transaction process front end in the example of is coupled to commercial functions database functions other enterprise functions such as accounting and billing and to the specific event listeners and processors which are designed to respond to the events indicated by the parser.

The parser takes a purchase order like that in the example above or other document specified according to the business interface definition and creates a set of events that are recognized by the local transaction processing architecture such as a set of JAVA events for a JAVA virtual machine.

The parser of the present invention is uncoupled from the programs that listen for events based on the received documents. Various pieces of mark up in a received document or a complete document meeting certain specifications serve as instructions for listening functions to start processing. Thus listening programs carry out the business logic associated with the document information. For example a program associated with an address element may be code that validates the postal code by checking the database. These listeners subscribe to events by registering with a document router which directs the relevant events to all subscribers who are interested in them.

For example the purchase order specified above may be monitored by programs listening for events generated by the parser which would connect the document or its contents to an order entry program. Receipt of product descriptions within the purchase order might invoke a program to check inventory. Receipt of address information within the purchase order would then invoke a program to check availability of services for delivery. Buyer information fields in the document could invoke processes to check order history for credit worthiness or to offer a promotion or similar processing based on knowing the identity of the consumer.

Complex listeners can be created as configurations of primitive ones. For example a purchase order listener may contain and invoke the list listeners set out in the previous paragraph or the list members may be invoked on their own. Note that the applications that the listeners run are unlikely to be native XML processes or native JAVA processes. In these cases the objects would be transformed into the format required by the receiving trans application. When the application finishes processing its output is then transformed back to the XML format for communication to other nodes in the network.

It can be seen that the market participant document type description and the transaction document type description outlined above include a schematic mapping for logic elements in the documents and include mark up language based on natural language. The natural language mark up and other natural language attributes of XML facilitate the use of XML type mark up languages for the specification of business interface definitions service descriptions and the descriptions of input and output documents.

The participant module in addition to storing the business interface definition includes a compiler which is used to compile objects or other data structures to be used by the transaction process front end which corresponds to the logical structures in the incoming documents and to compile the translator . Thus as the business interface definition is modified or updated by the participant as the transactions with which the participant is involved change the translator and parser are automatically kept up to date.

In a preferred system the set of JAVA events is created by a compiler which corresponds to the grove model of SGML mainly the standard Element Structure Information Set augmented by the property set for each element. International Standard ISO IEC 10179 1996 E . Turning the XML document into a set of events for the world to process contrasts with the normal model of parsing in which the parser output is maintained as an internal data structure. By translating the elements of the XML document into JAVA events or other programming structures that are suitable for use by the transaction processing front end of the respective nodes enables rich functionality at nodes utilizing the documents being traded.

Thus the transaction process front end is able to operate in a publish and subscribe architecture that enables the addition of new listener programs without the knowledge of or impact on other listening programs in the system. Each listener in maintains a queue in which the front end directs events. This enables multiple listeners to handle events in parallel at their own pace.

Furthermore according to the present invention the applications that the listeners run need not be native XML functions or native functions which match the format of the incoming document. Rather these listeners may be JAVA functions if the transaction process front end is a JAVA interface or may be functions which run according to a unique transaction processing architecture. In these cases the objects would be transformed into the format required by the receiving application. When the application of the listener finishes its output is then transformed back into the format of a document as specified by the business interface definition in the module . Thus the translator is coupled to the network interface directly for supplying the composed documents as outputs.

The listeners coupled to the transaction processing front end may include listeners for input documents listeners for specific elements of the input documents and listeners for attributes stored in particular elements of the input document. This enables diverse and flexible implementations of transaction processes at the participant nodes for filtering and responding to incoming documents.

The system illustrated in includes a generic XML parser . Such parser can be implemented using a standard call back model. When a parsing event occurs the parser calls a particular method in an application object passing in the appropriate information in the parameters. Thus a single application resides with the parser. The application packages the information provided by the parser in an XML event object and sends it to as many event listeners as have identified themselves as indicated by the block . The set of events is completely parser independent. The events can be supplied to any number of listeners and any number of threads on any number of machines. The events are based on the element structure information set ESIS in one alternative. Thus they consist of a list of the important aspects of a document structure such as the starts and ends of elements or of the recognition of an attribute. XML and SGML parsers generally use the ESIS structure as a default set of information for a parser to return to its application.

A specialized ESIS listener is coupled to the set of events . This listener implements the ESIS listener API and listens for all XML events from one or more generators. An element event generator is a specialized ESIS listener which is also an XML event generator. Its listeners are objects only interested in events for particular types of elements. For example in an HTML environment the listener may only be interested in ordered lists that is only the part of the document between the and tags. For another example a listener may listen for party.name elements or for service.name elements according to the common business language from the example documents above process the events to ensure that the elements carry data that matches the schematic mapping for the element and react according to the process needed at the receiving node.

This allows the system to have small objects that listen for particular parts of the document such as one which only adds up prices. Since listeners can both add and remove themselves from a generator there can be a listener which only listens to for example the part of an HTML document. Because of this and because of the highly recursive nature of XML documents it is possible to write highly targeted code and to write concurrent listeners. For example an listener can set up an listener completely separate from the manner in which the unordered list listener sets up its listener. Alternatively it can create a listener which generates a graphic user interface and another which searches a database using the same input. Thus the document is treated as a program executed by the listeners as opposed to the finished data structure which the application examines one piece at a time. If an application is written this way it is not necessary to have the entire document in memory to execute an application.

The next listener coupled to the set of events is an attribute filter . The attribute filter like the element filter is an attribute event generator according to the ESIS listener model. The listener for an attribute filter specifies the attributes it is interested in and receives events for any element having that attribute specified. So for example a font manager might receive events only for elements having a font attribute such as the .

The attribute event generator supplies the attribute event objects to attribute listeners A. Similarly the attribute objects are supplied to an architecture in the sense of an SGML XML transformation from one document type to another using attributes. Thus the architecture of B allows a particular attribute with a particular name to be distinguished. Only elements with that attribute defined become part of the output document and the name of the element in the output document is the value of the attribute in the input document. For example if the architecture B is HTML the string 

The next module which is coupled to the set of events is a tree builder . The tree builder takes a stream of XML events and generates a tree representation of the underlying document. One preferred version of the tree builder generates a document object model DOM object according to the specification of the W3C See http www.w3.org TR 1998 WD DOM 19980720 introduction.html . However listeners in event streams can be used to handle most requirements a tree version is useful for supporting queries around a document reordering of nodes creation of new documents and supporting a data structure in memory from which the same event stream can be generated multiple times for example like parsing the document many times. A specialized builder can be coupled to the tree builder in order to build special subtrees for parts of the document as suits a particular implementation.

In addition to responses to incoming documents other sources of XML events can be provided. Thus an event stream is generated by walking over a tree of DOM objects and regenerating the original event stream created when the document was being parsed. This allows the system to present the appearance that the document is being parsed several times.

The idea of an object which walks a tree and generates a stream of events can be generalize beyond the tree of DOM objects to any tree of objects which can be queried. Thus a JAVA walker may be an application which walks a tree of JAVA bean components . The walker walks over all the publicly accessible fields and methods. The walker keeps track of the objects it has already visited to ensure that it doesn t go into an endless cycle. JAVA events are the type of events generated by the JAVA walker . This currently includes most of the kinds of information one can derive from an object. This is the JAVA equivalent of ESIS and allows the same programming approach applied to XML to be applied to JAVA objects generally although particularly to JAVA beans.

The JAVA to XML event generator constitutes a JAVA listener and a JAVA event generator. It receives the stream of events from the JAVA walker and translates selected ones to present a JAVA object as an XML document. In the one preferred embodiment the event generator exploits the JAVA beans API. Each object seen becomes an element with the element name the same as the class name. Within that element each embedded method also becomes an element whose content is the value returned by invoking the method. If it is an object or an array of objects then these are walked in turn.

The organization of the processing module illustrated in is representative of one embodiment of the parser and transaction process front end for the system of . As can be seen a very flexible interface is provided by which diverse transaction processes can be executed in response to the incoming XML documents or other structured document formats.

The business interface definition builder module also includes a compiler which is used for generating the translator the objects to be produced by the translator according to the host transaction processing architecture and to manage the parsing function .

In addition to the party and service BIDs input and output document BIDs are stored in the repository as indicated by the field . Thus a purchase order BID an invoice BID a request for quote BID a product availability report BID and an order status BID might be stored in the repository.

The repository in addition to the business interface definitions which in a preferred system are specified as document type definitions according to XML stores interpretation information in the form of semantic maps as indicated by the field . Thus semantic maps which are used for specifying weights currencies sizes product identifiers and product features in this example might be stored in the repository. Further the interpretation information provides for typing of data structures within the logical structures of documents.

In addition logical structures used in the composing of business interface definitions could be stored in the repository as indicated by block . Thus forms for providing address information forms for providing pricing information and forms for providing terms of contractual relationships could be provided . As the network expands the CBL repository will also expand and standardize tending to make the addition of new participants and the modification of business interface definitions easier.

Next any referenced logical structures interpretation information document definitions and or service definitions are retrieved from the repository in response to user input via the graphical user interface step . In the next step any complementary business interface definitions or components of business interface definitions are accessed from other participants in the network selected via user input by customized search engines web browsers or otherwise step . A document definition for the participant is created using the information gathered step . The translators for the document to host and host to document mappers are created by the compiler step . Host architecture data structures corresponding to the definition are created by the compiler step and the business interface definition which has been created is posted on the network such as by posting on a website or otherwise making it accessible to other nodes in the network step .

Business interface definitions tell potential trading partners the online services the company offers and which documents to use to invoke those services. Thus the services are defined in the business interface definition by the documents that they accept and produce. This is illustrated in the fragment of an XML service definition set forth as LISTING 5 in the file named LISTING COMBINED.txt in the accompanying computer program listing appendix.

This XML fragment defines a service consisting of two transactions one for taking orders and the other for tracking them. Each definition expresses a contract or promise to carry out a service if a valid request is submitted to the specified Web address. The Order service here requires an input document that conforms to a standard po.dtd Document Type Definition located in the repository which may be local or stored in an industry wide registry on the network. If a node can fulfill the order it will return a document conforming to a customized invoice.dtd whose definition is local. In effect the company is promising to do business with anyone who can submit a Purchase Order that conforms to the XML specification it declares. No prior arrangement is necessary.

The DTD is the formal specification or grammar for documents of a given type it describes the elements their attributes and the order in which they must appear. For example purchase orders typically contain the names and addresses of the buyer and seller a set of product descriptions and associated terms and conditions such as price and delivery dates. In Electronic Data Interchange EDI for example the X12 850 specification is a commonly used model for purchase orders.

The repository encourages the development of XML document models from reusable semantic components that are common to many business domains. Such documents can be understood from their common message elements even though they may appear quite different. This is the role of the Common Business Library repository.

The Common Business Library repository consists of information models for generic business concepts including 

This information is represented as an extensible public set of XML building blocks that companies can customize and assemble to develop XML applications quickly. Atomic CBL elements implement industry messaging standards and conventions such as standard ISO codes for countries currencies addresses and time. Low level CBL semantics have also come from analysis of proposed metadata frameworks for Internet resources such as Dublin Core.

The next level of elements use these building blocks to implement the basic business forms such as those used in X12 EDI transactions as well as those used in emerging Internet standards such as OTP Open Trading Protocol and OBI Open Buying on the Internet .

CBL s focus is on the functions and information that are common to all business domains business description primitives like companies services and products business forms like catalogs purchase orders and invoices standard measurements date and time location classification codes . CBL builds on standards or industry conventions for semantics where possible e.g. the rules that specify day month year in Europe vs month day year in the U.S. are encoded in separate CBL modules .

The CBL is a language that is used for designing applications. It is designed to bridge the gap between the document world of XML and the programming world of JAVA or other transaction processing architectures. Schema embodies a philosophy of programming with documents in which a detailed formal specification of a document type is the master source from which a variety of related forms can be generated. These forms include XML DTDs for CBL JAVA objects programs for converting XML instances to and from the corresponding JAVA objects and supporting documentation.

The CBL creates a single source from which almost all of the pieces of a system can be automatically generated by a compiler. The CBL works by extending SGML XML which is normally used to formally define the structures of particular document types to include specification of the semantics associated with each information element and attribute. The limited set of mostly character types in SGML XML can be extended to declare any kind of datatype.

In this fragment the ELEMENT year is defined as character data and an associated schema attribute also character data defines the schema for year to be section 3.8 of the ISO 8601 standard.

This datetime CBL module is in fact defined as an instance of the Schema DTD. First the module name is defined. Then the datetime element YEAR is bound to the semantics of ISO 8601 

In an Airbill is being defined by customizing a generic purchase order DTD adding more specific information about shipping weight . The generic purchase order was initially assembled from the ground up out of CBL modules for address date and time currency and vendor and product description. Using CBL thus significantly speeds the development and implementation of XML commerce applications. More importantly CBL makes it easier for commercial applications to be interconnected.

In the CBL XML is extended with a schema. The extensions add strong typing to XML elements so that content can be readily validated. For example an element called can be defined as an integer with a set of valid values 100 133 166 200 233 266 Mhz.. The schema also adds class subclass hierarchies so that information can be readily instantiated from class definitions. A laptop for instance can be described as a computer with additional tags for features such as display type and battery life. These and other extensions facilitate data entry as well as automated translations between XML and traditional Object Oriented and relational data models.

Thus the completed BID is run through the compiler which produces the DTDs for the actual instance of a participant and a service as outlined above the JAVA beans which correspond to the logical structures in the DTD instances and transformation code for transforming from XML to JAVA and from JAVA to XML. In alternative systems documentation is also generated for display on a user interface or for printing by a user to facilitate use of the objects.

For the example market participant and service DTDs set forth above the JAVA beans generated by the compiler are set forth with some redactions for conciseness as LISTING 6 in the file named LISTING COMBINED.txt in the accompanying computer program listing appendix.

In addition to the JAVA beans set forth above transformation code is produced for translating from JAVA to XML and XML to JAVA as set forth as LISTING 7 in the file named LISTING COMBINED.txt in the accompanying computer program listing appendix.

Finally the XML document instance s generated at run time according to the model above for one example is set forth as LISTING 8 in the file named LISTING COMBINED.txt in the accompanying computer program listing appendix.

Using the tools along with a BID composer application which provides a drag drop and forms editing user interface a developer is able to create a business interface definition and to produce a well formed valid business interface definition in the form of an XML document. Thus the example run time instance is a business interface definition for an ordering service for IBM to be used by Ingram Micro and others to order laptop computers from IBM. There is no relationship between the applicant and IBM or Ingram Micro . Utilizing these processes a user is able to build a system that allows for programming of a business interface using the documents defined according to the present invention.

The role of CBL and the BID processor of the present invention in an XML JAVA environment can be further understood by the following explanation of the processing of a Purchase Order.

Company A defines its Purchase Order document type using a visual programming environment that contains a library of CBL DTDs and modules all defined using common business language elements so that they contain data type and other interpretation information. Company A s PO might just involve minor customizations to a more generic transaction document specification that comes with the CBL library or it might be built from the ground up from CBL modules for address date and time currency etc.

The documentation for the generic transaction document specification such as the transact.dtd set out above typifies the manner in which CBL specifications are built from modules and are interlinked with other CBL DTDs.

A compiler takes the purchase order definition and generates several different target forms. All of these target forms can be derived through tree to tree transformations of the original specification. The most important for this example are 

Now back to the scenario. A purchasing application generates a Purchase Order that conforms to the DTD specified as the service interface for a supplier who accepts purchase orders.

The parser uses the purchase order DTD to decompose the purchase order instance into a stream of information about the elements and attribute values it contains. These property sets are then transformed into corresponding JAVA event objects by wrapping them with JAVA code. This transformation in effect treats the pieces of marked up XML document as instructions in a custom programming language whose grammar is defined by the DTD. These JAVA events can now be processed by the marshaling applications generated by the compiler to load JAVA Bean data structures.

Turning the XML document into a set of events for JAVA applications to process is unlike the normal model of parsing in which the parser output is maintained as an internal data structure and processing does not begin until parsing completes. The event based processing in response to the BID definitions is the key to enabling the much richer functionality of the processor because it allows concurrent document application processing to begin as soon as the first event is emitted.

JAVA programs that listen for events of various types are generated from the Schema definition of those events. These listeners are programs created to carry out the business logic associated with the XML definitions in the CBL for example associated with an address element may be code that validates the postal code by checking a database. These listeners subscribe to events by registering with the document router which directs the relevant events to all the subscribers who are interested in them.

This publish and subscribe architecture means that new listener programs can be added without knowledge by or impact on existing ones. Each listener has a queue into which the router directs its events which enables multiple listeners can handle events in parallel at their own pace.

Complex listeners can be created as configurations of primitive ones e.g. a purchase order listener may contain and invoke these listeners here or they may be invoked on their own .

The router may also serve local host services and and as such act as a participant in the market as well as the market maker. Typically documents that are received by the router are traversed to determine the destinations to which such documents should be routed there again passed back through the translator if necessary and out the network interface to the respective destinations.

The market maker is a server that binds together a set of internal and external business services to create a virtual enterprise or trading community. The server parses incoming documents and invokes the appropriate services by for example handing off a request for product data to a catalog server or forwarding a purchase order to an ERP system. The server also handles translation tasks mapping the information from a company s XML documents onto document formats used by trading partners and into data formats required by its legacy systems.

With respect to the service definition above when a company submits a purchase order the XML parser in the server uses the purchase order DTD to transform the purchase order instance into a stream of information events. These events are then routed to any application that is programmed to handle events of a given type in some cases the information is forwarded over the Internet to a different business entirely. In the purchase order example several applications may act on information coming from the parser 

Trading partners need only agree on the structure content and sequencing of the business documents they exchange not on the details of APIs. How a document is processed and what actions result is strictly up to the business providing the service. This elevates integration from the system level to the business level. It enables a business to present a clean and stable interface to its business partners despite changes in its internal technology implementation organization or processes.

The registration service is one such function which is managed by the router. Thus a market participant document is accepted at the network interface as shown in step . The market participant document is stored in the business interface definition repository step for the market maker node. In addition the document is parsed step . The parsed document is translated into the format of the host step . Next the document is passed to the router service step . The router service includes a listener which identifies the registration service as the destination of the document according to the document type and content step . The document or elements of the document are passed to the registration service step . In the registration service the needed service specifications are retrieved according to the business interface definition step . If the service specifications are gathered at step the router service filters are set according to the business interface definition and the service specifications step . Registration acknowledgment data is produced . The registration acknowledgment data is converted to a document format step . Finally the acknowledgment document is sent to the participant node indicating to the participant that is successfully registered with the market maker step .

The process at step of gathering needed service specifications is illustrated for one example in . This process begins by locating a service business interface definition supported by the market participant step . The service definition is retrieved for example by an E mail transaction or web access to repository node step . The service specification is stored in the BID repository step . The service business interface definition document is parsed step . The parsed document is translated into the format of the host step . Host objects are passed to the router service step . The registration service is identified according to the document type and content step . Finally the information in the service business interface definition document is passed to the registration service step for use according to the process of .

The converted documents are supplied to the parser . The XML parser parses the received XML document according to the document type definition which matches it. If an error is found then the parser sends the document back to the communication agent . A business interface definition compiler BIDC acts as a compiler for business interface definition data. The DTD file for the XML parser JAVA beans corresponding to the DTD file and translation rules for translating DTD files to JAVA beans are created by compiling the BID data. An XML instance is translated to JAVA instance by referring to these tools. Thus the BID compiler stores the DTD documents and produces JAVA documents which correspond . The XML documents are passed to the processor which translates them into the JAVA format. In a preferred system JAVA documents which have the same status as the document type definitions received in the XML format are produced. The JAVA beans are passed to the document router . The document router receives the JAVA beans and passes the received class to the appropriate document service using a registry program for example using the event listener architecture described above. The document service which receives the document in the form of JAVA beans from the router acts as the interface to the enterprise solution software. This includes a registry service by which listeners to XML events are coupled with the incoming data streams and a service manager to manage the routing of the incoming documents to the appropriate services. The document service manager provides for administration of the registry service and for maintaining document consistency and the like.

The document service communicates with the back end system using any proprietary API or using such more common forms as the CORBA COM interface or other architectures.

The foregoing description of a preferred embodiment of the invention has been presented for purposes of illustration and description. It is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Obviously many modifications and variations will be apparent to practitioners skilled in this art. It is intended that the scope of the invention be defined by the following claims and their equivalents.

Thus the present invention in an exemplary system provides a platform based on the XML processor and uses XML documents as the interface between loosely coupled business systems. The documents are transferred between businesses and processed by participant nodes before entering the company business system. Thus the platform enables electronic commerce applications between businesses where each business system operates using different internal commerce platforms processes and semantics by specifying a common set of business documents and forms.

According to the present invention virtual enterprises are created by interconnecting business systems and service are primarily defined in terms of the documents XML encoded that businesses accept and generate 

