---

title: Application-to-application launch windowing
abstract: A window management system manages the placement of a window of a target application within a user interface. A source application launches the target application. The window management system arbitrates placement of a window of a target application within the user interface based on a target application placement preference parameter and a source application placement preference parameter. The window management system displays the window of the target application within the user interface according to the arbitrated placement. The window management system can also display a window of the source application within the user interface according to the arbitrated placement.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09594603&OS=09594603&RS=09594603
owner: Microsoft Technology Licensing, LLC
number: 09594603
owner_city: Redmond
owner_country: US
publication_date: 20130415
---
A window management system can display a window for each program being used within a user interface. For example in a single user interface a user can view a first window for a word processing program a second window for an email program and a third window for a browser. Each window serves as a separate display within the user interface through which the user can interact with one of the programs.

However convenient placement of a new window in a user interface can be a challenge when a new program is launched. Screen real estate can already be filled with one or more other windows so it is nontrivial for the window management system to determine where to place the new window particularly when the placement is performed without user guidance.

Implementations described and claimed herein address the foregoing problems by providing a window management system that manages the placement e.g. the sizing and or locating of a window of a target application within a user interface. A source application launches the target application. The window management system arbitrates placement of a window of a target application within the user interface based on a target application placement preference parameter and a source application placement preference parameter. The window management system displays the window of the target application within the user interface according to the arbitrated placement. The window management system can also display a window of the source application within the user interface according to the arbitrated placement.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used to limit the scope of the claimed subject matter.

Launching an application window includes without limitation initially executing the application and switching to a new or hidden application window of an already executing application. In addition an application window may include without limitation a window of the operating system components an operating system utility and a special purpose application program e.g. a Web browser program a word processing program a spreadsheet program .

The application window presents a search result window displaying search results from a Web search engine. The individual search results such as a search result includes representative text and or one or more images along with a browser navigable link which can be selected by the user for navigation to a Web site identified by the browser navigable link. The application window presents results from a weather application or Web site including a 4 day forecast of weather in Denver Colo. A window boundary control divides the displayed area of the application window and displayed area of the application window in the illustrated case separating the application windows. In some implementations the window boundary control may be manipulated by the user to change the size and or location of one or both windows.

The application windows and are shown in as being non overlapping windows. However the described technology is not limited to non overlapping windowing environments. For example in such environments each application window in an overlapping windowing environment may be bounded by a window boundary control which can be manipulated by the user to change the location size and front to back ordering collectively placement of the potentially overlapping windows. The window management system receives input through the application windows and and through other user interface components e.g. the keyboard interface a touch screen interface a voice interface and pointing device and displays the applications windows the window boundary control and other application windows and controls through the user interface.

In one implementation an event triggers a launch of an application window via the window management system . For example in one implementation a user can select a browser navigable link from the search result which launches a browser window displaying the Web page designated by the link.

In another example the user selects an application from a system file search window a Start screen or a Start menu to launch a corresponding application window. In such circumstances brokered user interface UI elements which are not specifically within a source application s window but are nevertheless associated with the source application while being presented elsewhere may be triggered outside of the source application s window resulting in a launch of a target application window by the source application. For example a weather application may have a settings charm that can be invoked by the user as a flyout on a side of the display outside of the weather application s window . The settings charm may include a link to Help topics which can be triggered by the user to launch a help application window or a browser application window the placement of which is arbitrated by the window management system as part of an application to application launch. Other examples of event triggered launches are contemplated.

When an application window is launched the window management system attempts to determine a placement within the user interface with which to display the application window. For example some application windows are characterized by predefined display parameters e.g. full screen a left portion of the screen at least half the screen etc. . Some predefined characteristics may provide no constraints or some constraints e.g. a minimum size but otherwise leave the window placement up to the window management system .

In circumstances in which the window management system has options for placement of the launched application window the window management system can arbitrate between the preferences of a source program i.e. the program that launches a target program and the preferences of the target program i.e. the program being launched by the source program . Other preference may be contributed by external factors those factors not specific to the source or target programs such as other launched bystander applications with visible windows a user s preferences e.g. a user always wants an instant messaging application window to open on the right side of the display capabilities of the display device etc. By arbitrating these preferences the window of the target program and the window of the source program can be configured e.g. placed appropriately within the user interface.

The available area within a user interface e.g. within a display screen can quickly become filled with application windows. When a source program launches a target program the window for the launched program can open to occlude previously opened windows. Sometimes this occlusion occurs even when there is available area within the user interface where the new window could have opened without causing the occlusion. Other scenarios exist where the opening of a new window is less than ideal e.g. a large screen application window leaves little or no room to launch a new application window . In accordance with one implementation the process of launching a new window for an invoked application can be arbitrated so that the user interface s area is utilized more beneficially.

At the window of the source application is shown as displayed within a user interface e.g. within a display screen . The target application has not yet been launched by the source application and the window for the source application is shown as initially occupying the entire user interface . Once the source application invokes the launch of the target application a window management system arbitrates between the placement preference parameters of a source application and the placement preference parameters of a target application to determine how the window for the target application and the window for the source application is to be displayed within the user interface . As a result of the arbitration the window management system shrinks the window of the source application and places the window of the target application to the right of the window for the source application .

The window management system performs the arbitration process because in some instances the source application and the target application may be requesting the same user interface resources. For example each program may want to use a large portion of the user interface for its respective window. In other examples the programs may not be competing for user interface space e.g. both programs may only need a small amount of display space nevertheless intelligent placement of the target application the source application and or bystander applications is contemplated in such circumstances. A resulting layout may include empty spaces in the window layout e.g. display space where no specific application window is displayed . Such empty spaces may also be considered application windows in that the window management system manages the empty spaces concurrently with the windows of executing applications e.g. displaying a background in the empty spaces . In one implementation the window management system performs the arbitration by allowing the source application and the target application to indicate placement preference parameters. Placement preference parameters can include without limitation the following example parameters 

In addition to the placement preference parameters the window management system can be configured with predetermined arbitration rules to arbitrate how windows are to be displayed in view of the placement preference parameters. Using such placement preference parameters and or predetermined arbitration rules the window management system can determine how the windows are to be sized located and or put in z order when a new window is launched. In addition if there is any conflict between the placement preference parameters for two or more windows the window management system can arbitrate to resolve the conflict. Further if a source application window target application window and or bystander windows lack preferences predetermined default preferences may be used in the arbitration of the placements of the windows.

For example in some instances the placement preference parameters for the window of the source application and the placement preference parameters for the target application will be in conflict e.g. the placement preference parameters for the target application may specify that its window is to be opened so as to cover three quarters of the user interface while the placement preference parameters of the source application specify that its window is to occupy one half of the user interface. When such a conflict occurs the window management system arbitrates the conflict by referring to the predetermined arbitration rules which indicate what actions to take in the presence of particular types of conflicts.

One example of a predetermined arbitration rule may specify that in the event of a conflict the target application placement preferences are to be followed over the source application placement preferences. Another example rule may specify that if the source application preference is to have the source application window replaced by the target application window then the source application placement preference are given priority. Still another example rule may specify that if a target application placement preference is to let the source application decide then the source application placement preferences are given priority.

In one implementation a source application may provide its placement preference parameters to the window management system the source application launches the target application and the target application may provide its placement preference parameters to the window management system as the target application is being launched. The window management system evaluates the placement preference parameters of each application identifies and arbitrates conflicts if any and presents the source application window and the target application window within the user interface in accordance with the non conflicting placement preference parameters and or the arbitrated placement preference parameter results.

In another implementation a configuration datastore e.g. a manifest storing the various placement preference parameters for each installed application can be accessed by the window management system. In this way the window management system can more readily manage the windowing environment before the target application is actually launched. In another implementation the target application can provide supplemental placement preference parameters after appropriate placement preference parameters from the configuration datastore are processed. If there is a difference between the parameters stored in the configuration datastore and the supplemental parameters provided by the target application then the window management system can switch to the supplemental parameters supplied by the target application or arbitrate between the configuration datastore parameters and the supplemental parameters.

In another implementation a placement preference parameter may be a variable e.g. a ratio based on other user interface elements such as the size of other visible windows or the user interface area or be determined based upon an algorithm e.g. depending upon the state of the source application or the protocol that is being used to invoke the target application . For example if a conferencing program is invoking a word processing application the word processing application may be configured to use more of the screen if the conferencing program is in voice mode rather than video mode. If the conferencing program is in video mode then the word processing program may launch with a smaller window to allow the user to continue to have a large video window for the source video conferencing application.

In one implementation a user can override the placement preference parameters of a source and or target application and in some implementations the overriding placement preference parameters may be recorded in association with the corresponding applications. For example a user can explicitly remove a source application window from the display so that an empty window an empty space in the layout is left behind in the window layout. This example may be interpreted as a user direction to launch the target application in the empty space. Accordingly the user can configure the placement preference parameters for an application or for a pair of applications. In one example the user can communicate such intentions through a variety of user interface actions including without limitation gestures on a touch screen keyboard input or pointer device actions.

In addition to the source application window and the target application window there may be other windows displayed within the user interface. These windows are referred to as bystander windows. The placement preference parameters can include parameters specifying how such bystander windows are to be treated. For example the placement preference parameters can specify how many windows are allowed to be visible at one time. Moreover the placement preference parameters may specify which of the bystander windows to keep as visible and which ones to minimize. The application may have a preference for using some bystander applications more than other bystander applications and thus desire to keep the more favored or more commonly used bystander applications visible within the user interface.

In addition as part of the user placement preference parameters the user may be able to mark bystander windows in order of preference. Thus if certain windows are specified by the user to be closed or hidden such windows can be closed or hidden in an order previously indicated by the user.

In accordance with another implementation system default placement preference parameters may be employed by the window management system. For example a window management system may simply close or evict e.g. removing from the window layout by default the right most or left most bystander window as a target application window is launched.

It should be understood that arbitration need not be limited to placement in the presence of a conflict among application placement preferences. In many implementations the application placement preferences provide the window management system with information for intelligently laying out the windows in response to an application to application launch. The target application may not be aware of the existing layout of windows or their preferences so the arbitration operation allows the window management system to curate the layout with some level of cooperative information among the windows e.g. by virtue of arbitration rules placement preferences etc. .

An arbitration operation arbitrates any conflicts between the source placement preference parameters and the target placement preference parameter and determines the relative placement of the source application and target application windows. In some implementations the arbitration operation may also arbitrate placement of the source application windows and or certain bystander applications windows.

A launch operation launches the target application and presents e.g. displays the source application window and or the target application window in the user interface.

As previously discussed identification of the placement preference parameter data may be performed concurrently with the launch operation which can occur before or after the arbitration operation . In some circumstances the target application may already be executing and or visible within the user interface so the launch operation displays its windows according to the placement determined in the arbitration operation .

An arbitration operation arbitrates any conflicts between the source placement preference parameters the target placement preference parameters and the linguistic profile and determines the relative placement of the source application and target application windows. For example for a user having a natural reading direction from right to left displaying the target application window to the left of the source application window may seem more natural than the opposite placement. Other preferences may be based on user preference data display capabilities etc. In some implementations the arbitration operation may also arbitrate placement of the source application windows and or certain bystander applications windows.

A launch operation launches the target application and presents e.g. displays the source application window and or the target application window in the user interface in accordance with the arbitrated placement preferences and the linguistic profile. Thus if the user is based in the United States the windows can be arranged with the most recently launched windows on the right hand side of the screen and the older windows to the left hand side. Such a preference conforms to English readers being accustomed to read from left to right. Alternatively the preference might be to arrange the windows from right to left for devices intended to be used in different language systems. Other user preference data may also be utilized to determine a preferred placement of the target application window and source application window. In such an instance the user preference can override the normal arbitration rules.

The system bus may be any of several types of bus structures including a memory bus or memory controller a peripheral bus a switched fabric point to point connections and a local bus using any of a variety of bus architectures. The system memory may also be referred to as simply the memory and includes read only memory ROM and random access memory RAM . A basic input output system BIOS containing the basic routines that help to transfer information between elements within the computer such as during start up is stored in ROM . The computer further includes a hard disk drive for reading from and writing to a hard disk not shown a magnetic disk drive for reading from or writing to a removable magnetic disk and an optical disk drive for reading from or writing to a removable optical disk such as a CD ROM DVD or other optical media.

The hard disk drive magnetic disk drive and optical disk drive are connected to the system bus by a hard disk drive interface a magnetic disk drive interface and an optical disk drive interface respectively. The drives and their associated tangible computer readable media provide nonvolatile storage of computer readable instructions data structures program modules and other data for the computer . It should be appreciated by those skilled in the art that any type of tangible computer readable media which can store data that is accessible by a computer such as magnetic cassettes flash memory cards digital video disks random access memories RAMs read only memories ROMs and the like may be used in the example operating environment.

A number of program modules may be stored on the hard disk magnetic disk optical disk ROM or RAM including an operating system one or more application programs other program modules and program data . A user may enter commands and information into the personal computer through input devices such as a keyboard and pointing device . Other input devices not shown may include a microphone e.g. for voice input a camera e.g. for a natural user interface NUI a joystick a game pad a satellite dish a scanner or the like. These and other input devices are often connected to the processing unit through a serial port interface that is coupled to the system bus but may be connected by other interfaces such as a parallel port game port or a universal serial bus USB . A monitor or other type of display device is also connected to the system bus via an interface such as a video adapter . In addition to the monitor computers typically include other peripheral output devices not shown such as speakers and printers.

The computer may operate in a networked environment using logical connections to one or more remote computers such as remote computer . These logical connections are achieved by a communication device coupled to or a part of the computer the implementations are not limited to a particular type of communications device. The remote computer may be another computer a server a router a network PC a client a peer device or other common network node and typically includes many or all of the elements described above relative to the computer although only a memory storage device has been illustrated in . The logical connections depicted in include a local area network LAN and a wide area network WAN . Such networking environments are commonplace in office networks enterprise wide computer networks intranets and the Internet which are all types of networks.

When used in a LAN networking environment the computer is connected to the local network through a network interface or adapter which is one type of communications device. When used in a WAN networking environment the computer typically includes a modem a network adapter a type of communications device or any other type of communications device for establishing communications over the wide area network . The modem which may be internal or external is connected to the system bus via the serial port interface . In a networked environment program engines depicted relative to the personal computer or portions thereof may be stored in the remote memory storage device. It is appreciated that the network connections shown are example and other means of and communications devices for establishing a communications link between the computers may be used.

In an example implementation software or firmware instructions and data for providing a window management system window placement preference parameters and other data may be stored in memory and or storage devices or and processed by the processing unit . The window placement preference parameters and other data may be stored in memory and or storage devices or as persistent datastores.

Some implementations may comprise an article of manufacture. An article of manufacture may comprise a tangible storage medium to store logic. Examples of a storage medium may include one or more types of computer readable storage media capable of storing electronic data including volatile memory or non volatile memory removable or non removable memory erasable or non erasable memory writeable or re writeable memory and so forth. Examples of the logic may include various software elements such as software components programs applications computer programs application programs system programs machine programs operating system software middleware firmware software modules routines subroutines functions methods procedures software interfaces application program interfaces API instruction sets computing code computer code code segments computer code segments words values symbols or any combination thereof. In one implementation for example an article of manufacture may store executable computer program instructions that when executed by a computer cause the computer to perform methods and or operations in accordance with the described implementations. The executable computer program instructions may include any suitable type of code such as source code compiled code interpreted code executable code static code dynamic code and the like. The executable computer program instructions may be implemented according to a predefined computer language manner or syntax for instructing a computer to perform a certain function. The instructions may be implemented using any suitable high level low level object oriented visual compiled and or interpreted programming language.

The implementations described herein are implemented as logical steps in one or more computer systems. The logical operations may be implemented 1 as a sequence of processor implemented steps executing in one or more computer systems and 2 as interconnected machine or circuit modules within one or more computer systems. The implementation is a matter of choice dependent on the performance requirements of the computer system being utilized. Accordingly the logical operations making up the implementations described herein are referred to variously as operations steps objects or modules. Furthermore it should be understood that logical operations may be performed in any order unless explicitly claimed otherwise or a specific order is inherently necessitated by the claim language.

The above specification examples and data provide a complete description of the structure and use of exemplary implementations. Since many implementations can be made without departing from the spirit and scope of the claimed invention the claims hereinafter appended define the invention. Furthermore structural features of the different examples may be combined in yet another implementation without departing from the recited claims.

