---

title: Identification of mistimed forcing of values in design simulation
abstract: A computer identifies a storage element in a simulation model of an integrated circuit design that, during simulation of the integrated circuit design using the simulation model, is subject to having its value forced. In response to identifying the storage element, an indication of the storage element and the associated clock signal are stored in a database. In response to receiving an input indicating the value of the storage element is to be forced during simulation, a determination is made by reference to the database whether or not forcing of the value is mistimed with reference to the associated clock signal. In response to a determination that the forcing of the value as indicated by the input is mistimed with reference to the associated clock signal, an indication that forcing of the value is mistimed is output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09507898&OS=09507898&RS=09507898
owner: GLOBALFOUNDRIES INC.
number: 09507898
owner_city: Grand Cayman
owner_country: KY
publication_date: 20131206
---
This application is a continuation of U.S. patent application Ser. No. 13 492 399 entitled IDENTIFICATION OF MISTIMED FORCING OF VALUES IN DESIGN SIMULATION filed on Jun. 8 2012 the disclosure of which is incorporated herein by reference in its entirety for all purposes.

The present invention relates to data processing and more specifically to identification of mistimed forcing of values in the simulation of a design.

Designers typically employ a high level language such as a hardware description language HDL to define the structure and function of a design such as a design of an integrated circuit. The design files specified in the high level language are then compiled to obtain a simulation model of the design which is stimulated by a simulation engine with one or more testcases i.e. a sequence of inputs and associated expected signal values in the design in order to verify aspects of the design.

Various types of simulation can be utilized to verify designs. Logic or functional simulation which is often the first type of simulation performed verifies the logical correctness of the design without regard to timing constraints. Event simulation which tracks signal changes in the design as events additionally supports verification in the presence of simple timing information such as signal delays. Cycle simulation which employs a cycle accurate model of the design does not support specification of delays but instead evaluates every gate in the design every simulation cycle and enables significant performance improvement over event simulation in cases in which on the whole signal levels change relatively infrequently.

In functional simulation forcing a signal in the design to a particular value commonly referred to sticking a signal is commonly utilized to verify the logical correctness of the design or to determine the response of the design to various combinations of signal values. Because functional simulation is not bound by timing constraints the practice of forcing signal values does not create any issues as long as the signal value or combination of signal values forced on the design is legal. In event simulation and cycle simulation however forcing a signal in the design to a particular value can induce an error in the simulation results if the forced signal value is applied at the wrong time relative to other signals in the design such as clock signals. For example in the case of flip flops the output values change at a rising or falling clock edge in event simulators and one simulation cycle after the clock transition in cycle simulators. If the signal value is forced at any other time the forced change in signal value may cause an unrealistic and therefore erroneous response in the simulation model. Such errors in the simulation results can be difficult to detect.

In some embodiments a computer identifies a storage element in a simulation model of an integrated circuit design that during simulation of the integrated circuit design using the simulation model is subject to having its value forced. In response to identifying the storage element an indication of the storage element and the associated clock signal are stored in a database. In response to receiving an input indicating the value of the storage element is to be forced during simulation a determination is made by reference to the database whether or not forcing of the value is mistimed with reference to the associated clock signal. In response to a determination that the forcing of the value as indicated by the input is mistimed with reference to the associated clock signal an indication that forcing of the value is mistimed is output.

With reference now to the figures and with particular reference to there is illustrated a high level block diagram of an exemplary embodiment of a data processing system . In the illustrated exemplary embodiment data processing system includes one or more processors that process data and program code for example to simulate a design such as an integrated circuit design. Data processing system additionally includes one or more network interfaces through which data processing system can communicate with one or more other computing resources e.g. other processing storage or communication resources via cabling and or one or more wired or wireless public or private local or wide area networks including the Internet . Data processing system also includes input output I O devices such as ports display devices and attached devices etc. which receive inputs and provide outputs of the processing performed by data processing system and or other computing resource s coupled to data processing system . Finally data processing system includes data storage which may include one or more volatile or non volatile storage devices including memories solid state drives optical or magnetic disk drives tape drives portable storage media etc.

In the illustrated embodiment data storage stores in addition to unillustrated operating system software e.g. Windows Unix AIX LINUX etc. various program code and data processed by processors to simulate a design. As shown data storage includes a simulation model which is a logical representation of the design to be simulated such as an integrated circuit design. Simulation model include constructs modeling a plurality of unillustrated combinatorial logic elements a plurality of storage elements e.g. latches and or registers and a plurality of signals and in the design. Signals and are output by storage elements and respectively and signal is a clock signal that synchronizes operation of the combinatorial logic elements and or one or more of storage elements .

Data storage additionally stores software including a simulator and optionally a separate RTX Run Time eXecutive . Simulator which can be for example a cycle simulator or event simulator loads one or more simulation models such as simulation model into data storage . Simulator additionally simulates the design by stimulating simulation model with one or more testcases from testbench where the application of a testcase to simulation model is commonly referred to as a simulation run. During one or more simulation runs simulator resets simulation model to various initial states based on reset information contained in reset file and clocks and evaluates simulation model via various APIs Application Programming Interfaces . For example simulator reads values from simulation model utilizing GETFAC API and writes values to simulation model utilizing PUTFAC API based on information contained in model access or FAC file . As illustrated in the values simulator reads from and writes to simulation model are commonly specified in a model access file in terms of specific signals e.g. the values of signals but can alternatively or additionally be expressed in terms of the storage elements e.g. storage elements that output the signals. The values of the signals and or storage elements in simulation model at various cycles for a cycle simulator or at occurrence of various events for an event simulator during a simulation run are stored for subsequent viewing and analysis as simulation log files . Although simulator is depicted in as implemented in software it should be appreciated that in alternative embodiments simulator is implemented at least partially in hardware.

RTX is an optional control program that if implemented controls simulation of simulation models such as simulation model by simulator . For example RTX can specify to simulator which testcases from testbench are to be applied to simulation model . In addition RTX can be utilized to deliver API calls to the APIs provided by simulator to initialize configure and exercise simulation model for example by applying values to simulation model or by advancing to the next cycle in a cycle simulator .

Referring now to there is depicted a high level logical flowchart of an exemplary embodiment of a process for identifying mistimed forcing of a value in a simulation model. The process begins at block and then proceeds to block which illustrates simulator building a forced signal database see that specifies the signals e.g. signals and or storage elements e.g. storage elements that have their values forced during a simulation run and preferably additionally indicates the associated clock signal s e.g. clock signal utilize to drive those storage elements.

Returning to block of after the entries in forced signal database relevant to a particular testcase in testbench are generated simulator begins a cycle based or event based simulation run by stimulating simulation model with the particular testcase. As noted above simulator can either direct the simulation run itself or can alternatively be controlled through RTX .

After the clock signals in simulation model e.g. clock signal are stable simulator updates clock data fields of the relevant entries in forced signal database with the information about the edges of the clock signals and the periods of the clock signals block . If a clock signal is subject to jitter or if the clock signal is non periodic simulator additionally monitors the clock signal to determine the pattern of the jitter during initial cycles assuming the jitter is periodic and updates the relevant clock data field with the jitter information. If the jitter has no identifiable pattern the jitter is random simulator determines the edge of the clock for each simulation cycle.

At block simulator monitors for receipt of an input indicating that a signal value in simulation model is to be forced to a specified value. The input can be for example a call to PUTFAC API . If simulator does not detect receipt of an input indicating that a signal value in simulation model is to be forced simulator additionally determines at block whether or not the simulation run is complete. If so the process shown in terminates at block . If however the simulation run is not complete simulator continues simulating the design and the process given in returns to block which has been described.

In response to simulator detecting at block an input indicating that signal value in simulation model is to be forced simulator determines by reference to forced signal database whether or not forcing of the signal value is mistimed with respect to the associated clock signal block . For example simulator performs a lookup in forced signal database and accesses the appropriate entry by performing a match on the contents of testcase field and signal name field or latch name field . Simulator can then determine the next active edge of the associated clock signal by reference to clock data field and consequently determine whether the requested alteration of the signal value i.e. the value in the associated storage element is mistimed.

In response to a negative determination at block simulator forces sticks the signal to the specified value at the requested time in the simulation block for example by forcing the associated storage element to the specified value via PUTFAC API . Thereafter simulator continues the simulation run and the process returns to block which has been described. In response to a determination at block that the requested forcing of the signal value is mistimed with respect to an associated clock signal the process proceeds from block to block .

Block illustrates simulator outputting an indication that the requested forcing of the signal value is mistimed with respect to an associated clock signal. In various embodiments the indication output by simulator can be output in a variety or combination of forms including in a dialog box requesting user confirmation of when to apply the stick e.g. mistimed as requested or correctly timed in a notification message that a mistimed stick was automatically detected and corrected in an error message in a dynamic presentation of simulation results on a display in a notation on a signal value trace in one of simulation log files indicating the correct timing for forcing the signal value etc. Simulator additionally forces the signal to the specified signal value using a selected timing block . In some embodiments simulator automatically applies the correct timing to the signal stick and merely notifies the user of the alteration in timing. Simulator can determine when to alter the latch value for example based on the delay from clock to data output of the latch specified in a Standard Delay Format SDF file. In other embodiments simulator has a default configuration setting that if employed causes simulator to force the signal to the specified signal value using appropriate timing with respect to the associated clock signal but explicitly provides the user with opportunity to override the default configuration by confirming application of a mistimed signal stick. In other embodiments simulator forces the signal to the specified signal value in a mistimed manner as requested and merely provides notification of the mistiming via the presentation of the simulation results and or simulation log files . Other variations or combinations of options are additionally contemplated.

Following block simulator determines at block whether or not the simulation run is complete. If so the process given in terminates at block . If however the simulation run is not complete the process given in returns from block to block which has been described.

With reference now to there is illustrated is a first exemplary embodiment of a presentation of simulation results generated by simulator . Presentation may be presented by simulator for example via a display device among I O devices or coupled to data processing system by one of I O devices . In the embodiment depicted in simulator is a cycle simulator configured to present simulation results of a simulation run in substantially real time during the simulation run and or after the simulation run completes e.g. from simulation log files . In the illustrated embodiment simulator is further configured either by default or by user configuration to provide notification of mistimed sticks without altering the timing of the sticks.

Presentation includes three components which can optionally be implemented in separate windows or panes of a graphical user interface including a signal tree a signal waveform graph and a signal value summary . Signal tree illustrates that in the depicted example simulation model includes at least four signals respectively identified by the signal names CLOCK EN enable EN DEL delayed enable and RDWR REQ read write request . Signal waveform graph which presents the values of the signals in signal tree with reference to a timeline of simulation cycles indicates that CLOCK is a fifty percent duty cycle clock signal having a period of eight simulation cycles and that EN DEL is a delayed version of EN that is generated by simulation model one simulation cycle after the next rising edge of CLOCK at or after a rising edge of EN. The values of the signals at a user selectable time index are summarized in signal value summary .

As further indicated in during simulation simulator forces EN to the value b 1 coincident with the rising edge of CLOCK at simulation cycle for example in response to a call to PUTFAC API specified in model access file . In response to the change in value of EN simulated circuitry within simulation model generates EN DEL one simulation cycle later at simulation cycle . As a result the pulse generated by simulation model on RDWR REQ is a glitch lasting for only a single simulation cycle. Because this glitch response does not correspond to hardware behavior simulator presents a notification in conjunction with signal waveform graph to inform the user that simulator has detected but not corrected a mistimed forcing of EN at simulation cycle as described above with reference to block of .

Referring now to there is a depicted a second exemplary embodiment of a presentation of simulation results generated by simulator . Presentation like presentation of may be presented by simulator via a display device during the simulation run i.e. using substantially real time simulation results and or after the simulation run completes e.g. from simulation results recorded in simulation log files . In the second embodiment simulator is further configured either by default or by user configuration to provide notification of mistimed sticks and if possible to alter the timing of the sticks to better reflect the operation of the design as realized in integrated circuitry.

During the simulation scenario depicted in simulator receives an input e.g. a call to PUTFAC API requesting EN to be forced to the value b 1 coincident with the rising edge of CLOCK at simulation cycle . As described above with reference to block of simulator determines that the forcing of the value of EN is mistimed with respect to CLOCK and accordingly applies the stick automatically or in response to user confirmation one cycle later at simulation cycle . Accordingly simulation model generates EN DEL eight simulation cycles i.e. a full CLOCK cycle later at simulation cycle . As a result the pulse generated by simulation model on RDWR REQ has the proper length e.g. a full CLOCK cycle corresponding to expected hardware behavior. Simulator further presents a notification in conjunction with signal waveform graph to inform the user that simulator has detected a mistimed forcing of EN at simulation cycle and corrected the timing at which EN is forced at simulation cycle .

As has been described in some embodiments a computer identifies a storage element in a simulation model of an integrated circuit design that during simulation of the integrated circuit design using the simulation model is subject to having its value forced. In response to identifying the storage element an indication of the storage element and the associated clock signal are stored in a database. In response to receiving an input indicating the value of the storage element is to be forced during cycle based or event based simulation a determination is made by reference to the database whether or not forcing of the value is mistimed with reference to the associated clock signal. In response to a determination that the forcing of the value as indicated by the input is mistimed with reference to the associated clock signal an indication that forcing of the value is mistimed is output. The user is thus notified about unrealistic alteration of values in the simulation model. In some embodiments the simulator automatically modifies timing of application of the particular value to the storage element so that forcing of the value is not mistimed.

While the present invention has been particularly shown as described with reference to one or more preferred embodiments it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the invention. For example although aspects have been described with respect to a computer system executing program code that directs the functions of the present invention it should be understood that present invention may alternatively or additionally be implemented as a program product including a computer readable storage medium or device storing program code that can be processed by a data processing system. As utilized herein the terms computer readable storage medium and computer readable storage device are defined to exclude signals per se and to include only those embodiments of machines manufactures and improvements thereof that are statutory under 35 U.S.C. 101. A computer readable storage medium or device can include without limitation a volatile or non volatile memory a magnetic or optical storage device a CD ROM.

