---

title: Application testing and analysis
abstract: Application testing and analysis may include performing perturbations to affect an environment associated with the application executing on a user device without affecting other applications executing on the user device. The execution of the application may be traced while the perturbations are being performed to determine an amount of resources of the user device consumed by the application and to determine whether a performance of the application was degraded.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09009677&OS=09009677&RS=09009677
owner: Microsoft Technology Licensing, LLC
number: 09009677
owner_city: Redmond
owner_country: US
publication_date: 20130318
---
Testing applications to provide compatibility across a mobile platform e.g. hardware configurations may present challenges to application developers. For example the mobile platform may be available on multiple types of devices with each type of device having different amounts of resources such as memory processing power battery power energy and the like. In addition the devices may be capable of communicating using a variety of network protocols including older protocols e.g. 2G and 2.5G and newer protocols e.g. 3G protocols 4G protocols Wi Fi etc. . Thus to ensure compatibility of an application across multiple devices and multiple network protocols an application developer may test the application using multiple devices across different types of networks. However such a testing process may be long and tedious due to the number of devices and network types that the application is to be tested across.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key or essential features of the claimed subject matter nor is it to be used for determining or limiting the scope of the claimed subject matter.

Generally this application relates to testing and or analysis of applications. Some implementations provide techniques and arrangements to perform perturbations to affect an environment of an application executing on a user device without affecting other applications executing on the user device. The execution of the application may be monitored while the perturbations are being performed to gather data. The gathered data may be analyzed to determine whether the perturbations caused excessive resource consumption and or performance degradation.

The technologies described herein generally relate to tools to perform perturbations to affect one or more applications executing on a user device e.g. a mobile phone or tablet computing device and tools to monitor and analyze the effect of the perturbations on the applications. The user devices may be actual physical devices virtual machine emulations or a combination of both. The term perturbation refers to emulating or simulating on a user device different types of conditions that the applications may encounter such as for example limited resources e.g. memory processing power battery power energy or the like backward compatibility with older mobile platforms backward compatibility with older networks and or older network protocols side effects caused by other applications unexpected sensor input provided by on board sensors other types of environmental or network conditions or any combination thereof. For example the perturbations may enable an application developer to test an application on a single user device while emulating different types of user devices different types of networks different types of network conditions different types of user input different types of sensor input and or other types of environmental or network conditions. In addition the tools may enable perturbations on a per application basis such that an environment of an application may be perturbed without affecting other applications executing on the user device. Per application perturbation may enable application developers to test applications in a test facility in live use situations e.g. users that are using their user devices in a normal manner to place calls send messages browse the Internet etc. or a combination of both. In one example the application developer may use commands from a scripting language to create test code that when executed on a user device causes perturbations to an application executing on the user device.

A mobile computing platform family may encompass a variety of products e.g. phone 7 tablet 10 tablet 14 laptop etc. across multiple generations of products and or multiple price points. For example the mobile computing platform family may include a first model with a single core processor executing at a clock speed of 2.5 gigahertz GHz and having access to 4 gigabytes GB of memory up to a second model with a quad core processor executing at a clock speed of 3.5 GHz and with access to 32 GB of memory. In addition the network access capabilities of the various devices in the family may also vary from device to device. For example the first model may be capable of Enhanced Data rates for Global System for Mobile GSM Evolution EDGE network access while the second model may be capable of both EDGE and Long Term Evolution LTE network access. At least some of the models may be capable of analog roaming in areas where digital service is unavailable. The tools described herein may enable an application developer to execute an application on one type e.g. model of a user device while using the tools to simulate how the application may execute on other types of user devices with different capabilities e.g. different amount of memory different processor speed different number of processor cores or the like .

The tools may enable the application developer to test how the application performs when the user device is communicating on different types of networks e.g. networks that use different types of protocols by causing a modem of the user device to emulate different types of networks e.g. EDGE LTE or the like . The tools may enable the application developer to test how the application performs under different types of network conditions such as reduced reception bandwidth reduced transmission bandwidth dropped data e.g. packets another type of network condition or any combination thereof.

The tools may enable the application developer to test how much energy e.g. battery power the application consumes to enable the application developer to reduce the application s energy consumption. The tools may enable the application developer to test how the application performs when input is received from the user e.g. via touchscreen keypad microphone track ball etc. from sensors e.g. GPS unit accelerometer s camera s communication connections such as WiFi Bluetooth near field communications etc. or both.

The tools may enable the application developer to perturb one or more specified applications without affecting other applications executing on the user device. For example compared to other applications executing on a user device an application that is being perturbed may experience a different operating environment such as a different processor clock speed different amounts of memory different network conditions e.g. slower transmission and or reception bandwidth different types of sensor and or user inputs or any combination thereof. For example a user device with a clock speed of 4 Ghz and a 32 GB memory may execute multiple applications. The application developer may use the tools to execute test code that perturbs one or more specified applications to simulate a user device with a 2 GHz clock speed 8 GB of memory and slow network access e.g. GPRS rather than EDGE or LTE . Thus the specified applications may operate in the simulated e.g. perturbed environment while the other applications executing on the user device operate using unperturbed environments e.g. 4 GHz clock speed 32 GB memory LTE etc. .

It might be a good idea to elaborate on the sensor inputs as mobile phones are getting more and more sensors onboard. An example sensor that we can perturb now is GPS where we feed fake GPS coordinates to the app being tested.

In addition to tools to perturb one or more specified application s executing on the user device the tools may include monitoring tools that trace the execution of the specified application s while the perturbations are being performed. For example the monitoring tools may trace execution of processes spawned by the application monitor an amount of various resources e.g. energy power processor cycles memory bandwidth and the like that each process consumes monitor other aspects of the specified application s or any combination thereof. While monitoring a set of specified applications whose environments are being perturbed the monitoring tools may gather data associated with the monitored application s . The gathered data may be used to analyze the performance of the specified applications when the perturbations occurred.

Furthermore the tools may enable an application developer to correlate the perturbations with the gathered data to determine which perturbations caused the application to behave in certain ways e.g. performance degradation excessive consumption of one or more resources . For example the correlation tools may correlate the perturbations with the monitored data e.g. using timestamps or other information to determine that decreasing an amount of available memory may cause the application to consume additional power certain network conditions may cause the performance of the application to degrade a certain processor speed may cause memory usage to increase etc.

In some implementations some of the tools e.g. correlation tools may execute on a server. For example the application developer may specify conditions under which to test an application and provide the conditions and the application to a server. The server may create one or more scripts and identify user devices that are suitable for executing the scripts. The server may send test code to each user device e.g. the user devices may be actual physical devices or virtual machine emulations . The test code may cause perturbations for a set of specified application s and invoke monitoring tools to monitor the specified application s . The statistics and other data gathered by the monitoring tools may be automatically uploaded to the server for analysis e.g. using the correlation tools after the test code has completed execution. The server may create a report based on the analysis that identifies conditions that cause the application to behave in an undesirable manner e.g. performance degradation or excessive resource consumption . Based on the analysis the application developer may rewrite portions of the application to address the undesirable behavior. The application developer may load the rewritten application into the user device and re run the test code to determine if the undesirable behavior no longer occurs.

Thus a framework may allow an application developer to specify the conditions under which one or more applications are to be tested. The framework may create a test code to perturb one or more specified applications without affecting other applications executing on a user device. The test code may invoke monitoring tools to monitor and trace execution of the specified applications. Correlation tools may correlate the monitored data with the test code to identify which perturbations caused issues e.g. excessive resource consumption crashes etc. to enable the application developer to rewrite the application to address e.g. rectify the issues.

The framework may thus enable an application developer to use a single device to perturb an environment of an application to simulate or emulate different types of devices with different amounts of resources different types of networks different types of network conditions different types of user input and or sensor input other types of network and environmental conditions or any combination thereof. The framework may reduce an amount of time to test an application because test code executing on a single device may be used to simulate or emulate a large number of different types of devices different types of networks and network conditions and different types of environmental e.g. resource availability conditions. Reduced testing time may enable applications to be released to the market faster. The framework may also reduce a number of different types of devices and networks that are maintained for testing thereby reducing testing costs.

The systems and techniques described herein include 1 control 2 latency and 3 efficiency. In terms of control the framework controls what data is generated from mobile devices to enable analysis of whatever situation the software developer requests. In contrast in conventional data driven solutions precise analysis is not possible as the software developer is constrained by whatever data happens to be collected. In terms of latency in a conventional system the length of time required to perform data driven mobile software testing profiling may be dominated by the time necessary to collect the data. In contrast the framework described herein dictates what data is collected under what operating conditions the data is collected and when the data is collected. Consequently the framework may enable faster analysis compared to conventional testing. In terms of efficiency data collection inherently always incurs a cost. For example mobile applications executing on a mobile device may incur a penalty when collecting performance statistics. Conventional systems lack of control over collected data may result in the collection of redundant data. In contrast the framework described herein directs data collection based on the input needed for analysis thereby reducing redundancy and resulting in lower penalties for mobile devices.

Thus the framework provides a closed loop for software testing and profiling tools where the analysis drives what data is collected how the data is collected and when the data is collected. The framework enables perturbation where device performance may be deliberately degraded to enable collection of application behavior metrics when the applications experience specific environmental conditions or device conditions. Further the framework uses a data collection approach that minimizes impact to other applications by 1 localizing effects to only certain application 2 performing perturbations very quickly e.g. either a single use or for a limited time and 3 measuring the degradation of user experience against predefined thresholds e.g. the intended network latency is above what user can tolerate when the usability impact is mashed by a detected confounding factor e.g. CPU perturbed slower while network latency is naturally already high . In the framework described herein testing profiling and analysis algorithms may be used iteratively to quickly address and resolve issues because the input to be used by the analysis algorithms may determine the type of data that is collected. The testing profiling and analysis algorithms may be aware of costs and benefits such as algorithm accuracy user impact and device overhead.

The user device may be a mobile phone a camera a media playback device a personal digital assistant PDA a tablet computing device a portable computing device a virtual device e.g. virtual machine executing on a server another type of computing device or any combination thereof. The user device may include one or more processors one or more network interfaces and a memory . The memory may include various modules such as a shell tools and a kernel . The memory may be used to store one or more trace files .

The shell may execute testing instructions such as test code . For example the test code may be received from the server and automatically installed on the user device . The test code may include commands that invoke one or more of the tools to perturb the operating environment of the user device to simulate or emulate various conditions. In some cases the test code may be a script written in a scripting language or a type of testing language.

The tools may include a network emulator a power usage module an input simulator a processor controller a statistics module and a trace collector . The kernel may include a network emulator driver and a packet capture tool . In some implementations the network emulator driver may be network emulator for windows toolkit NEWT a software module capable of emulating the behavior of different types of wired networks and wireless networks. In addition in some implementations the packet capture tool may be a tool such as WinPcap . The network emulator driver and the network emulator may enable emulation of different types of networks. For example the user device may be communicatively coupled to the network using an Ethernet connection while the network emulator driver and the network emulator may be used to emulate various types of wireless networks e.g. EDGE GPRS LTE and the like and or wired networks. Thus the network emulator driver and the network emulator may enable network emulation on a per application basis. The packet capture tool may examine packets travelling to and from specified applications and perform various operations to the packets. For example the packet capture tool may identify which packets are destined for or originating from a specified application e.g. the Nth application and drop one or more of the identified packets to simulate situations in which packets are lost such as poor network quality interference adverse atmospheric conditions and the like. Thus the packet capture tool may enable simulating various types of network conditions on a per application basis. The packet capture tool may enable packets associated with a specified application to be perturbed to emulate or simulate various device conditions e.g. related to processor sensor input power memory usage etc. and or environmental conditions e.g. network for the specified application without affecting other applications executing on the user device .

The memory may include one or more applications such as a first application up to and including an Nth application where N 1 . The tools may be called by the commands in the test code to perturb one or more of the N applications and to monitor and record the behavior of the applications being perturbed. For example the network emulator may simulate conditions of a type of network specified in the test code for a specified application e.g. one of the applications . To illustrate a command in the test code may instruct the network emulator to test how a specified application behaves when accessing an EDGE network. The network emulator may instruct the network interface s to utilize an EDGE mode whenever the specified application is interacting with the network .

The power usage module may measure an amount of power being used by the specified application when the test code is being executed or when instructed by the test code . For example the test code may initiate monitoring power usage of a specified application perform one or more perturbations and then stop monitoring the power usage after the one or more perturbations have completed to enable an application developer to measure power usage under specific conditions.

The input simulator may be used to simulate user input sensor input and the like. For example the test code may instruct the input simulator to simulate initiation and or termination of a voice call sending and or receiving a text message browsing the internet browsing the internet while a voice call is taking place and other types of input from a user of the user device . In addition the user input module can mimic how real world users would click through the elements in an app. This interaction model can be constructed from real world data or a simple probabilistic model. As another example the test code may instruct the input simulator to simulate input from one or more sensors such as an accelerometer a global positioning satellite GPS unit a gyroscope a digital compass a barometer an ambient light sensor a proximity sensor another type of sensor or any combination thereof.

The processor controller may enable perturbations that simulate different types of processors. For example when a specified application is executing the processor controller may simulate an older processor by reducing a clock speed of one or more of the processors and or a number of processor cycles dedicated to a particular application reducing a number of available cores of the processors reducing an amount of cache memory available to one or more of the processors or any combination thereof. As another example when a specified application is executing the processor controller may simulate a newer processor by temporarily increasing a clock speed e.g. overclocking or using turbo boost or other similar technology of one or more of the processors .

The statistics module may monitor and record usage statistics e.g. resource usage statistics associated with processes spawned by or associated with one or more specified applications. For example the statistics module may monitor and record information associated with a specified application such as how many processes are spawned by the application how much memory each process uses how many processor cycles each process uses other process related data or any combination thereof. The statistics module may be capable of mapping process identifiers to applications e.g. identifying which processes are associated with which applications. Thus the statistics module may monitor and record usage statistics on a per application basis.

The trace collector may monitor execution and create an execution trace for one or more specified applications. For example the trace collector may record information associated with execution of an application such as other applications with which the application communicates which areas of memory the application accesses and other information associated with execution of the application.

The various information gathered by the tools may be collected and stored as execution data in the gathered data . The execution data may be uploaded to the server for analysis. In some cases the execution data may be automatically e.g. without human interaction sent to the server after the shell completes execution of the test code .

The server may include one or more processors one or more network interfaces and a memory . The memory may be used to store various modules and data such as a job allocation engine analytic tools and a repository . The job allocation engine may include a user impact estimation module and an assignment matching module . The user impact estimation module may determine an estimated impact e.g. slower web browsing degraded voice quality etc. on a user of the user device under certain conditions. The assignment matching module may determine given a set of one or more user devices e.g. mobile clients that are capable of running debugging tasks e.g. scripts which debugging tasks should be dispatched to which user devices. For example if the user devices include different types of processors different amounts of memory etc. the assignment matching module may automatically identify which scripts should be sent to which user devices. The assignment matching module may consider factors such as an amount and a length of system perturbations to be performed an estimated time to execute the script system requirements of the script and so on. For example scripts that specify a certain type of processor e.g. a certain clock speed a number of cores an amount of cache etc. may be sent to user devices that either have the specified type of processor or may be perturbed to emulate the specified type of processor.

The analytic tools may include various tools to analyze the execution data such as hypothesis testing anomaly detection and filters . The hypothesis testing may correlate the test code with the execution data to determine whether various hypotheses were proven or not proven during the execution of the test code . For example based on the execution data the hypothesis testing may determine that a first hypothesis e.g. an application communicating over an EDGE network consumes more power compared to communicating over a GPRS network is correct but may determine that a second hypothesis e.g. a smaller amount of available memory increases a number of processor cycles used by an application is incorrect. The analytic tools may enable application developers to provide rules that define what type of events constitute abnormal behavior and to analyze the gathered data to identify when abnormal behavior occurred during the perturbations. For example an application developer may identify abnormal behavior as occurring when an application consumes greater than a threshold amount of one or more of i memory ii processor cycles iii transmission or reception bandwidth iv energy power or another type of resource. Another example of abnormal behavior would be crashes such as an application crash an operating system crash a crash caused by flaky hardware and the like.

The filters may enable an application developer to filter the execution data based on different criteria. The repository may include previously gathered data such as data gathered from executing scripts other than the test code . The repository may enable an application developer to use the analytic tools to analyze both the execution data and the previously gathered data . For example the application developer may run multiple scripts and analyze the resulting data e.g. the execution data and the previously gathered data to test multiple hypotheses. The anomaly detection may enable an application developer to analyze the execution data and or the previously gathered data to identify unusual or unexpected results. For example the anomaly detection may identify an anomaly to a particular hypothesis e.g. the hypothesis X occurs when Y occurs is correct except when Z occurs along with Y .

Thus an application developer may specify conditions under which an application is to be tested. The job allocation engine or the application developer may create one or more test scripts such as the test code . The job allocation engine may identify which user device is suitable for executing which set of test code based on the conditions specified in each set of test code and the capabilities of each user device and send each set of test code to a user device. For example the server may send the test code to the user device based on the test code and the capabilities of the user device . The application developer may initiate execution of the test code or the test code may automatically begin executing after download to the user device . The test code may include commands that invoke the tools to perform various perturbations to one or more specified applications. For example the perturbations may include one or more of a emulating various types of networks b simulating various types of user input and sensor input c simulating network conditions such as dropped packets or d emulating various types of devices with different amounts of resources e.g. processing power memory power energy and the like . The test code may include commands that invoke the tools to gather data associated with the specified applications when the perturbations are occurring. For example the tools may gather data such as statistics associated with processes spawned by the specified application s power usage associated with the specified application s execution traces of the processes associated with the specified application s etc. The gathered data resulting from monitoring the perturbations may be automatically uploaded to the server for analysis e.g. after the test code has completed executing . The analysis may include determining whether various hypotheses were proven detecting anomalies estimating an impact on users etc.

The framework may be used for data driven analysis to test and profile mobile applications because of the tight coupling between the monitoring tools e.g. the power usage module the statistics module and the trace collector on the user device and the analysis algorithms e.g. the analytic tools on the server . The tools may enable creating perturbations to meet specific criteria such as accuracy criteria and latency criteria. The framework may use the tools that execute on mobile devices e.g. the user device to perturb e.g. simulate or emulate various environmental conditions and or various device characteristics. The perturbations may include perturbing environmental conditions such as network conditions e.g. latency hand offs sensor inputs e.g. location accelerometers and or user inputs. In addition the framework may be easily extended to other related environmental conditions. The perturbations may additionally or alternatively simulate or emulate various device conditions such as memory constraints processor constraints sensor constraints different hardware component combinations and so on. In addition to perturbation the tools may enable the collection of both global device state information and per application state information e.g. metrics that relate to one or more specified applications .

The framework may include orchestration algorithms that architecturally sit between analysis algorithms and mobile device perturbation monitoring tools. The orchestration algorithms may perform various tasks such as 1 assigning and scheduling data collection jobs and perturbation roles e.g. cause the user device to temporary assume a specific configuration to user devices based on application developer goals 2 selecting a set of subsequent conditions to test to achieve analysis goals and 3 creating primitives for common operations useful in analysis such as a condition search that search for i specific conditions e.g. specified network latency level ii when a particular type of application behavior e.g. crash occurs or iii an anomaly search that scans over wide areas of condition parameters to identify anomalous application behavior defined by an application developer. The framework may be used to 1 estimate a usability impact of certain conditions and or to 2 assign and schedule tests based on the usability impact.

The framework may provide application developers with 1 control e.g. greater control over testing 2 latency e.g. less time between testing and analysis and 3 efficiency. In terms of control the framework may enable specific conditions e.g. perturbations to be created for a specified application without affecting other applications executing on the user device . In terms of latency the length of time required to perform mobile software testing and analysis may be reduced by reducing the time to perform the testing and collect the data. The framework may enable an application developer to specify what data is collected and when the data is collected thereby reducing the time taken to collect the data and enabling faster analysis. The framework may reduce the latency between testing an application and analyzing the results of testing the application. In terms of efficiency when collecting performance statistics a cost in terms of an overhead penalty to the operations of other applications may be incurred. Conventional systems may gather all a large amount of data incurring a huge cost in terms of the overhead e.g. resources used to gather the data. In contrast in the framework the overhead penalty may be reduced because the execution data may be gathered for specified applications at specified time periods based on the test code .

In the framework the test algorithms and the analytics algorithms may operate interactively. For example the data that is to be gathered as input for the analytics algorithms may determine which tests are performed e.g. which scripts are executed . The server may send scripts to one or more user devices such as the user device . The scripts may specify the application s that are to be tested the perturbations to be performed to simulate emulate various system environment configurations and the data to be collected. After the scripts have executed the server may analyze the data collected from the one or more user devices to identify any issues e.g. excessive power consumption excessive memory consumption or the like . Based on the analysis an application developer may modify an application and then select or create one or more scripts to determine if the modifications have addressed the issues. In addition based on the test results so far the system can decide which test conditions to focus on e.g. a particular range of network latency .

Thus the framework may provide a closed loop for software testing profiling and analysis by enabling perturbation on a per application basis to simulate or emulate various conditions. For example perturbation may include simulating performance degradation and collecting metrics associated with how the application behaves when experiencing a certain type of environment or device condition. In some cases the framework may be used with live users e.g. multiple users may be provided with user devices that have the various tools installed. Live users may be used because the framework reduces an impact on users by 1 localizing effects to only specified application s and 2 performing the perturbation s very quickly single use or for a limited time or during periods of non use or minimal use e.g. late at night or early in the morning . The framework may enable an application developer to test one or more applications analyze the results address any issues by modifying the application and re test the applications to determine if the modifications have addressed the issues. The testing may be performed with live users without live users or a combination of both.

The test code may be downloaded to the user device from the server . The test code may include one or more commands one or more perturbation rules and one or more collection rules . The commands may include commands written in a shell language to use the tools to perform various perturbations and to monitor and record various data for a specified set of applications from the N applications to . For example the tools may include perturbation tools e.g. the network emulator the input simulator and the processor controller of and monitoring tools e.g. the power usage module the statistics module and the trace collector . The tools may enable a user to perturb an environment associated with each application on a per application basis. For example each of the N applications to may have a corresponding environment e.g. available memory available processor speed available processor cores available network bandwidth and the like . To illustrate the first application may have a first environment and the Nth application may have an Nth environment . Initially each of the N environments may include the resources of the user device such as the processors the memory etc. When the test code is executed the perturbations created by the test code may affect the environment of some but not all of the N applications to .

The perturbation rules may specify various perturbations e.g. various system configurations that are to be emulated various network conditions that are to be emulated and the like . The perturbation rules may specify an order of the various perturbations and a length of time that each perturbation is to be performed when a specified set of one or more applications being execution. The collection rules may specify execution data e.g. performance metrics such as process statistics execution traces etc. that are to be recorded when the various perturbations are taking place. The perturbation rules may enable perturbation on a per application basis. The perturbation rules may be viewed as creating an environment for the specified applications because the perturbation rules may control how the specified applications view and access the resources of the user device . The resources controlled by the perturbation rules may include but are not limited to a type of the network conditions associated with the network available transmission and or reception bandwidth an available power energy available processor power e.g. clock speed number of cores cache etc. and an available amount of the memory . The perturbation rules may include user interaction functionality e.g. the input simulator to simulate user input such as mouse click and keyboard activities.

The monitoring tools may monitor data on a per application basis to minimize overhead e.g. resource usage of the user device . Based on the monitoring the monitoring tools may create the execution data . The execution data may include data such as an amount of processor time or processor cycles consumed memory utilization energy consumption network traffic received and transmitted other application specific data or any combination thereof.

The test code may identify a type of data to be collected e.g. memory usage processor cycles used etc. how to collect the data and when to collect the data e.g. when perturbation X occurs . The test code may identify 1 the targeted applications e.g. applications that have been targeted for perturbation and monitoring the perturbations to be performed to create specific system environment configurations in which to run the targeted applications and the execution data e.g. behavioral metrics that is to be collected.

The monitoring tools may collect at least some of the execution data in response to detecting specified events. For example the monitoring tools may initiate an execution trace when memory usage exceeds a predetermined threshold. To illustrate the monitoring tools may analyze incoming data detect specified events and record data for specified events. After the test code has completed executing the execution data gathered by the monitoring tools may be sent to the server for analysis. For example the commands may include a command to send the execution data to the server . As another example after the test code has completed executing the monitoring tools may automatically e.g. without human interaction send the execution data to the server .

The data monitor may receive data from a periodic monitor and an event tracing monitor . The periodic monitor may periodically e.g. at predetermined time intervals determine various information associated with the monitored processes such as memory consumption power energy consumption processor consumption and the like. The event tracing monitor may perform trace execution of the monitored processes when events specified in the test code occur. The periodic monitor may receive data from a periodic event tracing monitor . The periodic tracing monitor may periodically e.g. at predetermined time intervals receive data associated with the monitored processes . For example the periodic tracing monitor may periodically receive information from a network monitor that identifies network usage of the monitored processes .

The periodic monitor may at regular intervals perform various perturbations using the network emulator e.g. to emulate different types of networks and the processor controller e.g. to emulate different types of processors . The periodic monitor may periodically monitor various data associated with the monitored process such as monitoring power energy usage using the power usage module monitoring various statistics using the statistics module and monitoring a performance of the monitored processes using a performance monitor .

Thus the architecture may be used to perturb applications on a per application basis. For example the process matching rules may enable processes associated with a specified application to be identified and perturbed without affecting other applications that are executing on a user device. For example if the test code specifies that application X is to be perturbed the process matching rules may be used to determine e.g. identify that processes X1 X2 XN are associated with application X. The network emulator may be used to emulate various network conditions for communications associated with e.g. originating from or destined for the processes associated with application X without affecting other applications. The processor controller may be used to emulate various types of processors e.g. various clock speeds various numbers of processing cores various amounts of cache memory etc. used to execute the processes associated with application X without affecting other applications. The power usage module may be used to emulate various types of power usage e.g. low battery power drain by another application etc. for the processes associated with application X without affecting other applications. The input simulator of may be used to simulate various types of inputs to the processes associated with application X without affecting other applications.

Applications such as a representative Nth application where N 0 may execute in user space . The Nth application may communicate with a protocol driver in kernel space using a communication protocol such as Transmission Control Protocol TCP Internet Protocol IP . In TCP IP is used as an example of a communication protocol that may be used. Of course depending on the implementation other communication protocols may be used in addition to or instead of TCP IP. The protocol driver may communicate with the network emulator driver . For example in some implementations the network emulator driver may be network emulator for Windows toolkit NEWT . The network emulator driver may communicate with a miniport driver .

Thus using the architecture different types of networks may be perturbed e.g. emulated to test the behavior of applications executing on a user device. Using the architecture an application developer may determine whether a particular application is well behaved when communicating over different types of networks.

Furthermore while set forth examples of suitable architectures for application perturbation and monitoring numerous other possible architectures frameworks systems and environments will be apparent to those of skill in the art in view of the disclosure herein. Additionally while the examples herein have been described in the environment of application perturbation and monitoring other implementations may be directed to other types of application testing.

In the flow diagrams of and each block represents one or more operations that can be implemented in hardware software or a combination thereof. In the context of software the blocks represent computer executable instructions that when executed by one or more processors cause the processors to perform the recited operations. Generally computer executable instructions include routines programs objects modules components data structures and the like that perform particular functions or implement particular abstract data types. The order in which the blocks are described is not intended to be construed as a limitation and any number of the described operations can be combined in any order and or in parallel to implement the processes. For discussion purposes the processes and are described with reference to the frameworks and described above although other models frameworks systems and environments may be used to implement these processes.

At test code that includes commands in a scripting language may be executed. For example in the user device may execute the test code that includes the commands .

At one or more perturbations that affect an environment of an application executing on a user device may be performed without affecting other applications executing on the user device. For example in the commands may use the tools to create perturbations for at least one environment without affecting the other environments of the N environments through .

At performance of the application may be monitored while the one or more perturbations are being performed. For example in the monitoring tools may monitor the execution of application s associated with the environment s that are being perturbed. To illustrate if the test code specifies perturbations for the Nth environment associated with the Nth application the monitoring tools may monitor execution of the Nth application while the Nth environment is being perturbed. The monitoring may include tracing execution of the Nth application and identifying resource usage by the Nth application .

At a gathered data file may be created based on the monitoring. The gathered data file may include information identifying resources of the user device that were used by the application during execution of the script. For example in the monitoring tools may create the gathered data based on monitoring one or more of the N applications to . The gathered data may include information associated with the resource usage of the monitored applications such as which resources e.g. memory processors power energy network bandwidth etc. were used a maximum amount of each resource that was used a minimum amount of each resource that was used and the like.

At an analysis of the gathered data file may be performed. For example in the server may analyze the gathered data using the analytic tools .

At conditions that cause the performance of the application to degrade may be determined based on the analysis. For example the analytic tools may identify conditions created by the perturbations that caused the performance of one or more of the N applications to to degrade when the test code was being executed.

Thus an application developer may specify one or more applications that are to be tested and the environmental conditions in which to test the specified applications. A server may create one or more scripts and send them to one or more user devices for execution on the user device. Each of the scripts may perform perturbations to an environment corresponding to each of the specified applications and monitor the execution of the specified applications. The data gathered during the monitoring may be analyzed by the server to identify conditions that cause performance of the application to degrade. Based on the analysis an application developer may modify the application by rewriting portions of the software instructions that comprise the application and retest the modified application to determine whether the performance of the rewritten application is degraded under the same conditions.

At commands in test code may be executed. For example in the commands in the test code may be executed by the user device .

At based on the commands in the script an environment of an application may be perturbed without affecting other applications. For example in the commands may use the perturbation tools to perform perturbations of the Nth environment that corresponds to the Nth application that is to be tested without affecting the other applications. An application may be perturbed without affecting other applications by using the packet capture tool to identify packets associated with the application and only perturbing the identified packets. In this way packets associated with the other applications may remain unaffected by the perturbations. Similarly a system similar to the architecture described in may be used to monitor the processes associated with a specified application or set of applications and perturb those processes to simulate or emulate various types of network conditions e.g. using the network emulator various types of processors e.g. using the processor controller or various types of power usage e.g. using the power usage module various types of input e.g. using the input simulator etc. Of course other types of device specific or network specific conditions may be emulated or simulated for a specified application without affecting the other applications using the techniques and systems described herein.

At during execution of the test code consumption of the plurality of resources by the application may be monitored. For example in during execution of the test code the monitoring tools may monitor resources that the Nth application consumes such as usage of i the memory ii the processors iii the network interfaces iv power energy usage etc.

At a determination may be made whether the consumption by the application of at least one resource of the plurality of resources exceeds a threshold. For example in the server may analyze the gathered data to determine whether at least one of the resources consumed by the Nth application exceeds a threshold.

At one or more conditions that caused the consumption of the at least one resource to exceed the threshold may be determined. For example in the analytic tools may identify one or more conditions that caused the consumption of the at least one resource to exceed the threshold by correlating the commands in the test code with the gathered data .

At a determination may be made as to a modification to the application to reduce the consumption of the at least one resource by the application during the one or more conditions. For example in the analytic tools may identify modifications to the application to reduce the consumption of at least one resource when the one or more conditions occur. The analytic tools may generate a report based on the analysis that recommends modifications to the application.

Thus an application developer may specify one or more applications that are to be tested and the environmental conditions in which to test the specified applications. A server may create one or more scripts and send the scripts to one or more user devices for execution on the user devices. Each of the scripts may perform perturbations to an environment corresponding to each of the specified applications and monitor the resource consumption of the specified applications. The data gathered during the monitoring may be analyzed by the server to determine whether the resource consumption exceeds a threshold. Based on the analysis the server may generate a report that recommends modifications to the application to reduce the resource consumption. An application developer may modify the application based on the recommendations and re test the application to determine whether the modifications address the excessive resource consumption e.g. by reducing the consumption of the resource when certain conditions arise .

At one or more perturbations that affect an application executing on a user device may be performed without affecting other applications executing on the user device. For example in the perturbation tools may be used to perturb the first environment associated with the first application . The perturbation tools may perform perturbations to the first environment without affecting the other environments of the other applications.

At execution of the application may be traced while the perturbations are being performed. For example in the monitoring tools may monitor execution of the first application while the perturbation tools are performing the perturbations to the first environment .

At resources of the user device that are consumed by the application may be determined based on the tracing. For example in the server may analyze the gathered data to determine which of the resources of the user device were consumed by the first application and how much of each resource was consumed.

At at least one perturbation of the one or more perturbations that caused the performance of the application to be degraded may be determined. For example in the analytic tools may determine whether any of the perturbations caused by the test code to the first environment caused the performance of the first application to be degraded.

At additional perturbations to affect a second application executing on the user device may be performed without affecting the other applications executing on the user device. For example in the perturbation tools may perturb the Nth environment to affect the Nth application without affecting other applications in the applications to .

At execution of the second application may be traced while the additional perturbations are being performed. For example in the monitoring tools may monitor execution of the Nth application while the perturbation tools are performing perturbations to the Nth environment .

At the resources of the user device that are being consumed by the second application may be determined. For example in the monitoring tools may determine how much of the resources of the user device that the Nth application is consuming while the perturbation tools are performing perturbations to the Nth environment .

At a determination may be made whether the performance of the second application was degraded. For example the server may be used to analyze the gathered data to determine whether the performance of the Nth application was degraded while the perturbation tools were performing perturbations to the Nth environment .

In some implementations the perturbations to affect the application e.g. 702 and the additional perturbations to affect the second application e.g. 710 may be performed substantially contemporaneously e.g. substantially in parallel . For example the test code may perform perturbations substantially contemporaneously to more than one of the N applications to .

Thus multiple applications executing on the user device may be tested substantially contemporaneously. For example test code e.g. a script comprising commands may create perturbations to environments associated with one or more specified applications. Monitoring tools may monitor resource usage of each of the specified applications to create user gathered data for each application. The gathered data may be analyzed to determine whether the performance of the specified applications was degraded or whether the resource usage of each of the specified applications was excessive. Based on the analysis an application developer may modify the applications to address any issues such as performance degradation or excessive resource consumption. The application developer may test the modified applications to determine whether the modifications address the issues.

The processor may be a single processing unit or a number of processing units all of which may include single or multiple computing units or multiple cores. The processor can be implemented as one or more microprocessors microcomputers microcontrollers digital signal processors central processing units state machines logic circuitries and or any devices that manipulate signals based on operational instructions. Among other capabilities the processor can be configured to fetch and execute computer readable instructions stored in the memory mass storage devices or other computer readable media.

Memory and mass storage devices are examples of computer storage media for storing instructions which are executed by the processor to perform the various functions described above. For example memory may generally include both volatile memory and non volatile memory e.g. RAM ROM or the like . Further mass storage devices may generally include hard disk drives solid state drives removable media including external and removable drives memory cards flash memory floppy disks optical disks e.g. CD DVD a storage array a network attached storage a storage area network or the like. Both memory and mass storage devices may be collectively referred to as memory or computer storage media herein and may be media capable of storing computer readable processor executable program instructions as computer program code that can be executed by the processor as a particular machine configured for carrying out the operations and functions described in the implementations herein.

The computing device may also include one or more communication interfaces for exchanging data with other devices such as via a network direct connection or the like as discussed above. The communication interfaces can facilitate communications within a wide variety of networks and protocol types including wired networks e.g. LAN cable etc. and wireless networks e.g. WLAN cellular satellite etc. the Internet and the like. Communication interfaces can also provide communication with external storage not shown such as in a storage array network attached storage storage area network or the like.

A display device such as a monitor may be included in some implementations for displaying information and images to users. Other I O devices may be devices that receive various inputs from a user and provide various outputs to the user and may include a keyboard a remote controller a mouse a printer audio input output devices and so forth.

Memory may include modules and components for application perturbation monitoring and analysis according to the implementations herein. In the illustrated example memory includes the perturbation tools the monitoring tools and the applications to as discussed above. Each application may have a corresponding environment which may be perturbed using the perturbation tools . For example the first environment may be associated with the first application and the Nth environment may be associated with the Nth application . Memory may also include other data and data structures described herein such as other data . Memory may further include one or more other modules such as an operating system drivers communication software or the like. The other data may include data stored while performing the functions described above and data used by the other modules .

The example systems and computing devices described herein are merely examples suitable for some implementations and are not intended to suggest any limitation as to the scope of use or functionality of the environments architectures and frameworks that can implement the processes components and features described herein. Thus implementations herein are operational with numerous environments or architectures and may be implemented in general purpose and special purpose computing systems or other devices having processing capability. Generally any of the functions described with reference to the figures can be implemented using software hardware e.g. fixed logic circuitry or a combination of these implementations. The term module mechanism or component as used herein generally represents software hardware or a combination of software and hardware that can be configured to implement prescribed functions. For instance in the case of a software implementation the term module mechanism or component can represent program code and or declarative type instructions that performs specified tasks or operations when executed on a processing device or devices e.g. CPUs or processors . The program code can be stored in one or more computer readable memory devices or other computer storage devices. Thus the processes components and modules described herein may be implemented by a computer program product.

Although illustrated in as being stored in memory of computing device the perturbation tools and the monitoring tools or portions thereof may be implemented using any form of computer readable media that is accessible by computing device . As used herein computer readable media includes computer storage media and communication media.

Computer storage media includes volatile and non volatile removable and non removable media implemented in any method or technology for storage of information such as computer readable instructions data structures program modules or other data. Computer storage media includes but is not limited to random access memory RAM read only memory ROM electrically eraseable programmable ROM EEPROM flash memory or other memory technology compact disc ROM CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other non transmission medium that can be used to store information for access by a computing device.

In contrast communication media may embody computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave. As defined herein computer storage media does not include communication media.

Furthermore this disclosure provides various example implementations as described and as illustrated in the drawings. However this disclosure is not limited to the implementations described and illustrated herein but can extend to other implementations as would be known or as would become known to those skilled in the art. Reference in the specification to one implementation this implementation these implementations or some implementations means that a particular feature structure or characteristic described is included in at least one implementation and the appearances of these phrases in various places in the specification are not necessarily all referring to the same implementation.

Although the subject matter has been described in language specific to structural features and or methodological acts the subject matter defined in the appended claims is not limited to the specific features or acts described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. This disclosure is intended to cover any and all adaptations or variations of the disclosed implementations and the following claims should not be construed to be limited to the specific implementations disclosed in the specification.

