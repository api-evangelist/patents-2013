---

title: Systems and/or methods for supporting a generic framework for integration of on-premises and SaaS applications with security, service mediation, administrative, and/or monitoring capabilities
abstract: Certain example embodiments provide a generic integration framework for connecting on-premises applications with software as a service (SaaS) applications, and/or for integrating the same. The framework of certain example embodiments involves a layered approach (including a Connector Development Kit, connection factory, metadata handlers, and connector services) that helps to, among other things, allow customization of applications in multi-tenant architectures. Design-time wizards help create runtime artifacts and, during runtime, the connector service helps serve as an intermediary between the on-premises application and the cloud service, thereby hiding the complexity of the specific cloud providers. Certain example embodiments advantageously provide a generic and well-integrated solution for connecting an on-premises application to a cloud service in connection with existing containers.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09100345&OS=09100345&RS=09100345
owner: Software AG USA, Inc.
number: 09100345
owner_city: Reston
owner_country: US
publication_date: 20130313
---
This application claims the benefit of U.S. Application Ser. No. 61 745 325 filed on Dec. 21 2012 the entire contents of which are hereby incorporated herein by reference.

Certain example embodiments described herein relate to systems and or methods for supporting a generic framework for integration of on premises and software as a service SaaS applications. The framework may in certain example embodiments have security service mediation administrative and or monitoring capabilities.

Integration of the on premises applications with cloud applications oftentimes is challenging for customers. With more and more cloud applications being developed it is becoming increasingly important to be able to integrate and deploy solutions potentially within weeks or shorter timeframes.

It would be desirable for the integration development framework with software as a service SaaS applications to be a generic framework e.g. with little code and or few custom adapters. It also would be desirable for the framework to provide for example simplified user interfaces e.g. for design time development administrative capabilities to manage the connections and or applications security capabilities via WS Security and or other approaches custom and or standard security policies enforcement and monitoring capabilities for events metrics at runtime execution etc.

Certain example embodiments address these and or other desires. That is the CloudStreams generic integration framework of certain example embodiments may for example use a service bus like Integration Server provide a CloudStreams engine for Connections allow native service invocation enable custom security policy enforcement etc. potentially in connection with standards based cloud applications. Design time development may for instance be provided within the Eclipse Plug ins in certain example implementations. Administration capabilities may be provided using a suitable configured user interface UI accessible by any suitably configured device. Monitoring and events capabilities may be made available using the applications e.g. to render the data.

It will be appreciated then that certain example embodiments therefore relate to a generic integration framework that supports integration between on premises applications and SaaS applications.

One aspect of certain example embodiments relates to using a framework to provide a CloudStreams development kit to develop a Connector Descriptor XML where connections configuration to any service operation e.g. SOAP or REST Standards based Cloud applications can be developed an Eclipse plug in UI to develop the Cloud Connector Services to interact with Cloud Applications for integration and or the like.

Another aspect of certain example embodiments relates to managing connections to the applications through a connection pool manager in connection with the framework.

Another aspect of certain example embodiments relates to developing a Connector Virtual Service and virtual services that enforce the custom and WS security policies at runtime execution in connection with the framework.

Still another aspect of certain example embodiments relates to providing the capability to monitor cloud applications service level agreements SLAs and log events in the context of the framework.

Yet another aspect of certain example embodiments relates to enabling metrics and transactional data to be monitored potentially at real time using suitably configured applications such as for example Aris MashZone Mashapps etc. .

In certain example embodiments there is provided a computer system configured to enable clients to transparently access one or more cloud based applications managed by one or more respective cloud providers through connector services administered by the computer system. The computer system comprises processing resources including at least one processor and a memory. The processing resources are configured to coordinate at least a plurality of metadata handlers each said metadata handler being an implementation of an interface for accessing at least one of the cloud providers in accordance with a data model with which the associated at least one cloud provider communicates an exporter module configured to generate for each said metadata handler implementation connector descriptors that define services offered by the associated at least one cloud provider and a plurality of connection factory instances implemented separate from the plurality of metadata handlers each said connection factory instance specifying client transport layer details for interacting with one or more of the cloud providers and or cloud applications. The processing resources are further configured to generate the connector services based on input from the connection factory instances and matching connector descriptors.

In certain example embodiments a client device is configured to transparently access one or more cloud based applications managed by one or more respective cloud providers. The client device comprises at least one processor and an interface to connector services administered by a computer system. The computer system is configured to coordinate at least the elements indicated in the preceding paragraph and or elsewhere herein e.g. the plurality of metadata handlers the exporter module and the plurality of connection factory instances . The connector services may be generated by the computer system based on input from the connection factory instances and matching connector descriptors.

In certain example embodiments there is provided a first cloud provider in a system including a plurality of cloud providers that manage one or more cloud based applications. The cloud providers are transparently accessible by one or more client devices through connector services administered by a server and the first cloud provider comprises processing resources including at least one processor a memory and or non transitory storage that are accessible by the one or more client devices via the server. The server is configured to coordinate at least similar elements to those indicated in the above paragraph e.g. the plurality of metadata handlers the exporter module and the plurality of connection factory instances and the connector services may be generated based on input from the connection factory instances and matching connector descriptors.

In certain example embodiments a method of configuring a computer system that enables clients to transparently access one or more cloud based applications managed by one or more respective cloud providers through connector services administered by the computer system is provided. A plurality of metadata handlers is defined with each said metadata handler being an implementation of an interface for accessing at least one of the cloud providers in accordance with a data model with which the associated at least one cloud provider communicates. For each said metadata handler implementation connector descriptors that define services offered by the associated at least one cloud provider are generated in connection with an exporter module. Client transport layer details for interacting with one or more of the cloud providers and or cloud applications are specified in connection with a plurality of connection factory instances that are implemented separate from the plurality of metadata handlers. The connector services are generated in connection with at least one processor based on input from the connection factory instances and matching connector descriptors.

In certain example embodiments there is provided a method of executing an application in connection with client devices connected to a computer system that enables the client devices to transparently access one or more cloud based applications managed by one or more respective cloud providers through connector services administered by the computer system. The computer system is configured e.g. in accordance with the method of the previous paragraph or other techniques set forth herein. The client devices are able to access the one or more cloud based applications in connection with the connector services administered by the computer system in the execution of the application.

In certain example embodiments non transitory computer readable storage mediums may be provided that tangibly store instructions and or programs that when executed by a processor of a suitably configured computer system may perform these and or other related methods.

These aspects and example embodiments may be used separately and or applied in various combinations to achieve yet further embodiments of this invention.

The CloudStreams Connector framework of certain example embodiments includes design time features that may be used to quickly build service metadata e.g. connectors to describe services offered by cloud providers potentially in a format that may be used by the product at design time and run time. These connectors provide the means to invoke a provider s services from an integration platform through a canonical interface and message model regardless of service style e.g. SOAP or REST or transport protocol e.g. HTTP etc. .

Cloud provider services are commonly referred to as SaaS applications. There are a number of challenges slowing down the acceptance of SaaS and sometimes preventing its acceptance altogether. For example 

Challenges also may be encountered in terms of compatibility with hardware other software and operating systems licensing and compliance problems e.g. unauthorized copies with the software program boating the organization and or maintenance support and or patch revision processes.

As will be appreciated many of these challenges may be seen as consequences of accessing software services over the Internet. In that regard the challenges include the development and the integration of on premises applications with the SaaS providers. However the CloudStreams framework of certain example embodiments provides an extendable framework to develop the required integration with SaaS providers. The CloudStreams framework of certain example embodiments also can mitigate the impact of some of these challenges e.g. by helping to avoid the duplication of data in various systems. For example rather than copying data and translating it into several application data stores connector services may be created to reference a SaaS provider s data directly in its native format.

An issue can arise from the Internet deployment model e.g. where many customers share the same application deployment in a multi tenant architecture. The conventional approach can limit the scope of customization that is feasible since each customer may need to access the same shared application. By contrast in certain example embodiments the CloudStreams framework can extend the scope of customization possibilities e.g. when used in concert with the service bus and a suite of products for integration.

It will be appreciated that the techniques of certain example embodiments provide dynamic interoperability e.g. by providing CloudStreams server components that are accessible independent of the cloud provider s behind them. In other words and as will be appreciated from the description below the techniques of certain example embodiments advantageously isolates the methods of the providers from the users clients.

The following sections provide an example implementation that is explained in connection with the architectural layers of the CloudStreams connector framework of certain example embodiments and then in connection with example design and runtime aspects. Finally a perhaps more concrete reference implementation is presented by way of example using the webMethods suite of products.

Enterprise products often deliver features that include application programming interfaces APIs enabling customization or extension of a feature s attributes. The CloudStreams framework of certain example embodiments may provide an API but it also may in effect reflect the recognition that the cost of customization may be different depending upon for example the tools and skills required to complete tasks. For instance many products will define a programming language interface and require customers to provide alternate implementations to achieve its customization goals. There are times when this is a perfectly acceptable solution however this approach may require access to a software professional with a specialized skill set. It can require additional effort and risk each time a new product release is installed e.g. while a customer s implementation modules are upgraded.

The CloudStreams framework of certain example embodiments therefore may define different layers in its architecture so that certain customizations tasks may be completed without developing new source program logic e.g. as shown for example in . The CloudStreams engine of certain example embodiments may comprise multiple components developed using these architectural layers and involve deployment to a service container that serves as a common runtime environment. This service container could be any commonly used enterprise service bus ESB such as for example webMethods ESB Oracle ESB or any other common runtime environment.

The Connector Development Kit CDK shown in is an abstract layer for interacting with all SaaS applications in a uniform way. The Connector Descriptor Kit may be thought of as being a set of libraries and an API for describing a SaaS provider s services and operations. Key aspects of all supported SaaS providers may be defined in terms of the interfaces found in this kit e.g. so that the service operations may be accessed in a consistent manner. For example interfaces may exist to gain access to a provider s service metadata the registry of a provider s registered services and various services such as import and export functions. The CDK may include design time and run time interfaces that work together to deliver features such as for example cloud provider management and access of a provider s connector resources.

Metadata handlers and the connection factory may be provided as separate elements but may reside on the same level in certain example implementations. The metadata handlers may for example specify how providers can be made available. By contrast the connection factory may specify how to connect to the cloud providers including for example physical level details. This approach is advantageous because it is modularized and flexible. For example if login security or other credentials are changed then it is possible to change only the connection factory without having to worry about the metadata handlers. Service replacement also becomes more streamlined. It is noted that many implementations will not involve more connection factory instances than metadata handler instances.

Referring more particularly to the metadata handlers it is noted that cloud providers may be grouped together based upon for example attributes that they share with other providers. For instance many providers may be defined as SOAP services whose operations are defined with a WSDL whereas another set of providers may utilize REST and contain no additional metadata description. A metadata handler thus may be thought of as an implementation of an interface that describes how this information is acquired from providers that are accessible using the handler s implementation. Each handler implementation may have its own data model. In other words a schema for a handler s data model may not be explicitly defined in the interface so each implementation may be free to choose its own data model. For example a WSDL based handler implementation may have a data element in its model to describe a WSDL URL however a REST handler may have no need for this information.

Certain example embodiments may deliver handler implementations for REST and WSDL 1.1 based SaaS providers. Of course it will be appreciated that these interfaces may be extendable to other implementations beyond REST and WSDL 1.1 in different embodiments. Source language implementations of core design time metadata interfaces also may be written for extended implementations in some scenarios. This approach may make it easy to develop connectors for other SaaS providers whose services are not exposed as REST or WSDL 1.1.

As alluded to above the connection factory layer may in essence describe the rich metadata for the client transport layer used to interact with the SaaS provider. Certain example embodiments may deliver a connection factory module implementation configured programmed to invoke providers e.g. over HTTP S. shows a simplified schematic configuration of a connection factory using configurable groups in accordance with certain example embodiments and shows exemplary extensions of configurable groups for a connection factory in accordance with certain example embodiments. These interfaces may for example expose a transport layer s configuration features in terms of configurable groups. For instance a HTTP client library may have sets of related configurable fields used to managed connections credentials HTTP protocol etc. By defining access to a connection factory in terms of groups of configuration one may choose a subset of groups via a configuration step to use when invoking a remote service. New implementations could be built when connections to other non HTTP transport protocols are needed in certain example scenarios.

Referring once again to the layers shown in the Provider Lifecycle Manager PLM interface may provide CRUD operations typically involved in maintaining a repository of registered services and operations. The manager may span the entire set of cloud providers that may be supported by several metadata handlers. At design time certain example embodiments may use this component to create new connector instances. At runtime the PLM may manage existing cloud provider connectors. 

The connectors and connector services may in essence complete the configuration details. For example the connector layer may define access to a remote service in terms of a specific metadata handler implementation and instances of these connectors may contain the concrete details associated with invoking operations in a provider s services. Although the metadata handler abstraction layer may involve someone developing new libraries written in Java or other source code languages the connector layer may provide extensibility without having to write any source code e.g. by using one of the metadata handler implementations delivered with a CloudStreams enabled product. If a user wishes to create connectors to access a new remote service provider capable of being serviced by one of these metadata handlers in certain example embodiments no source code is necessary to accomplish this task. For example if the service is a Soap WSDL 1.1 implementation then a new connector descriptor may be created for this service provider. It will be appreciated that this descriptor may not be a simple captured WSDL instead additional information elements that go beyond the scope of a WSDL service description may be necessary to communicate with the provider in the CloudStreams environment of certain example embodiments. For example a connection configuration that specifies specific groups of configuration fields from a connection factory may be designated for a connector descriptor may be included in the descriptor.

Referring once again to it will be appreciated that the connection factory may enable the registration of one or more connection manager implementations. The connection manager may as detailed above expose a set of capabilities e.g. connections protocols etc. with each capability potentially including a set of related configuration elements. These elements may be separated into connection configuration instances representing a discrete configuration of a connection manager s capabilities and connection groups that are potentially aliased. The metadata for the configuration fields in each group may be made available e.g. so that outside components may provide values for each such field.

Using existing integration products in a service bus connector services may be created and configured from the connectors registered in the product. Once a connector service has been configured it may be used to interact with the cloud service using available features from the integration product e.g. an Integration Flow .

The following table summarizes the abstraction layers available to customers in accordance with the exemplary architecture set forth above 

To develop the generic framework for integration of on premises and cloud applications certain example embodiments may provide a design time toolkit and user interfaces that can be used to develop artifacts useful in run time execution. A series of example wizards are described below. It will be appreciated however that the screenshots and parameters are exemplary in nature.

A connector development wizard of certain example embodiments may help develop the connector descriptors using metadata model exporter interfaces for the registered metadata handlers within the CloudStreams Engine deployed on the service container. The connector descriptors developed using the wizard may be persisted on disk. shows how these components are related to one another in accordance with certain example embodiments. In brief a connector development wizard may use the metadata model exporter and provide CRUD support as to connector descriptors that may be stored to a persistent or other data store.

A connector virtual service wizard may in accordance with certain example embodiments provide design time tools used in developing policies to be enforced at runtime such as for example Service Level Agreements performance metrics and events monitoring etc. These three and or other policy types may be defined in accordance with certain example embodiments. The connector virtual service configuration using the required policies may be deployed to the service container using the deployment APIs of the CloudStreams engine of certain example embodiments.

As indicated above connector services are concrete configured instances of one of the logic operations defined in a connector. The connector services may use the interfaces of the connector to describe and define the service signature. The service signature may govern the interaction e.g. in terms of message exchange for the integration. The connector service wizard may interact with the connector for metadata introspection and lookup optionally using a connection from the connection pool to generate the connector service. The connector service wizard as part of the design time tools may interface or otherwise facilitate the development and configuration of the connector service and help prepare for execution. shows creation of the connector service at design time in accordance with certain example embodiments.

Basic information is provided in such as for example the connector virtual service the selected operation and the selected business object. Through the example interface shown in the foreground a user can select the parameters for use with the business object selected through the example interface and or the example interface shown in the background. Various information including field name field label native type SOAP type etc. is provided to potentially aid with the parameter selection process.

The connector descriptor may in certain example embodiments include one or more definitions of an abstract object per service referred by the service containers document type.

Operations can be described in terms of simple concrete or complex abstract operations. Simple operations may be thought of as those that include fixed messages. Some providers use abstraction to define a generic class of operations. For example an abstract type definition might require a dynamic metadata call against the SaaS provider to get the concrete object definition. The metadata handler framework of certain example embodiments may provide extensions to perform lookups for abstract and complex operation signatures to be described for the connector service signature e.g. as shown in .

In accordance with certain example embodiments the connector service may be executable when deployed to a service container.

An administrative UI may be used to configure the connection factory instances. In this regard shows an illustrative connection factory configuration screen in accordance with certain example embodiments. The instances of connections created from the connection factory may be managed within a connection pool in certain example embodiments and the instances of the connection factory may be deployed on the service container. These and other properties may be managed through configurable properties located under the connection management properties header. Similarly a user may manage the connection configuration the connection group information including a server URL and credentials request header information transport protocol related items etc.

Different components may work together during the runtime execution of a connector service in different example scenarios and in this vein a CloudStreams engine deployed in a service container may include multiple active components at runtime. shows active components of the CloudStreams engine of certain example embodiments.

The metadata handler implementations as explained herein may be thought of as being the implementations in the CloudStreams engine that are available at runtime. These implementations may be used by the provider lifecycle manager for initializing the Connectors in the service container. It will be appreciated that an existing implementation could be used for multiple connectors and there could be multiple implementations available at any time.

The connection manager initializes the connection objects from the configured connection factory instances. The connection manager manages the connection pools with the minimum and maximum number of connections idle timeout for session management etc. The connection objects are managed within a connection pool and connection objects are served for requests to execute the connector service.

The provider lifecycle manager described above may be used at design time and or runtime. At runtime the provider lifecycle manager may manage the connector instances. Using the metadata handler implementations and connector descriptors from the persistence store the provider lifecycle manager may initialize the connectors.

The deployment APIs may be used by the design time tools to deploy the connector virtual services to the service container. The deployment APIs in certain example embodiments could use the web services to enable the separation of design time tools and the engine.

Invocation APIs of the CloudStreams engine may provide the APIs to initiate a request from the connector service and return the response from the SaaS application. These may transform the input message format as per the protocol requirement of the SaaS application and response to the connector service required signature format. The invocation APIs may for example use the connection object served by the connection manager and also trigger the policy engine for enforcement of policies.

The CloudStreams framework of certain example embodiments may include a runtime policy engine component that is used to produce events capture key performance indicator KPI data and process extended runtime policies. The policy engine may serve functions related to for example policy management event collection and policy evaluation reporting. The policy management may be responsible for creating the policy instances from connector virtual service while event collection may happen when a service is executed and policy evaluation is performed e.g. based on the policy criteria. The runtime policies may include log invocation monitoring policies for KPIs and service level agreements SLAs for specific consumer applications. Specific events for errors and policy violations may be generated by the policy engine.

When a service request is processed in accordance with CloudStreams framework of certain example embodiments a policy engine interaction may occur and policy expressions may be evaluated during a discrete time interval. Runtime events generated by the log invocation or policy violations may be handled by event handlers. The logging and metrics collector collects these events and KPIs and publishes them to a defined destination which may for example be a relational database or data store in certain example scenarios.

The connector service of may be thought of as the runtime component that provides the link between the clients and what the providers will do. In this sense it is a central point of connectivity providing a single API e.g. through an Integration Server and in this sense is not the same as a standard SOAP service. The cloud connector service in certain example embodiments encapsulates the provider s API message input output signature definition and may provide a connection pool to be used at runtime and policies that will be enforced during execution. At runtime because of this extraction of details included in the connector service definition a client application using the connector service may only need to provide the input parameters as defined in the signature. The CloudStreams engine invocation API triggers the policy execution for collecting metrics and events and also obtains the connection from the connection pool for the invocation of the appropriate API of the SaaS provider. An advantage lies in providing a unified interfacing irrespective of the connectivity approach such as SOAP REST web services etc. whereas an experienced web services programmer otherwise would have to use extensive programming logic for each SaaS application to achieve the same flexibility and effortlessness in order to at the same time provide for rich functionality with respect to policy governance and logging. Another advantage lies in the simplicity with which new connectors e.g. new SaaS services can be quickly developed and integrated in the sense that certain example embodiments help abstract many or most of the common activities involved in SaaS integration. It will be appreciated that the CloudStreams engine shown in is able to access the policies credentials security information and or other information thereby indicating how a cloud can be accessed. In this sense the CloudStreams Engine instances may be specific to the cloud services offered by a given cloud. As alluded to above the container including the connector service and the CloudStreams Engine may be an Integration Server in certain example implementations.

It will be appreciated that the connector virtual service may be acting as a part of a policy engine identifying policies that are initially checked etc. In other words the policy engine may be used to produce events capture key performance indicator KPI data process extended runtime policies etc. The architecture of certain example embodiments may employ multiple thread pools and work queues e.g. to help ensure that engine processing is highly concurrent. Certain example embodiments also may be designed to scale horizontally across multiple servers using a cluster topology. When a service is invoked KPI data may be extracted and submitted to a separate policy engine component e.g. where it may be processed asynchronously via a series of thread pools. This approach helps ensure that the calling entity receives its service response as quickly as possible.

Certain example embodiments may be configured to send events to at least a relational database. A dedicated table may be defined for each event type generated at runtime in certain example embodiments.

Certain example embodiments may provide an analytics driven graphical user interface GUI which may in some cases present a unified way to view the metrics and events of the runtime execution of services. For example the GUI may be used to visualize runtime metric KPIs that can be used to monitor the health of the system.

Although there are tools and APIs from different cloud and integration vendors already available they in general enable only a static rigid way to connect local on premises applications with cloud services and for example SaaS applications . It will be appreciated from the foregoing that certain example embodiments provide a dynamic approach that might even be classified as self learning or involving aggregated knowledge. In this regard certain example embodiments provide instances of key blocks collected by the framework that are reusable and easily modifiable over time. The layered approach facilitates such features. Perhaps more particularly in certain example embodiments the connection factory is responsible for connecting to various cloud providers and the metadata handlers define the interface API and thus the representation of the cloud service. These two are separate modules that may be implemented and aggregated thereby providing a version of the self learning or aggregated knowledge functionality discussed above with more and more different on premises to SaaS application connections. Knowledge may be aggregated in the sense that each new configuration is added and certain example embodiments at runtime may simply find the suitable module without forgetting the older ones. These two aspects of a cloud service are not necessarily linked. Thus after a certain period the on premises application may end up with five connection factory instances and only three metadata handler instances.

In certain example embodiments the runtime services connector service and the CloudStreams Engine e.g. as shown in help to decouple the client part e.g. the integration service store and the cloud application e.g. by routing connections through a more central CloudStreams service. This may help to provide a more flexible and adaptable approach.

Although certain example embodiments have been described in connection with specific example service styles e.g. SOAP REST etc. and or transport protocols e.g. HTTP HTTPS etc. it will be appreciated that the example embodiments disclosed herein are not so limited. For example other service styles over these and or other transport protocols may be used. One particular implementation includes SOAP over JMS. In this vein it therefore will be appreciated that the metadata handler and connection factory interfaces in certain example embodiments are sufficiently abstract to encompass a variety of service styles and or transport protocols including HTTP And non HTTP protocols in different combinations sub combinations and combinations of sub combinations.

It will be appreciated that as used herein the terms system subsystem service engine module programmed logic circuitry and the like may be implemented as any suitable combination of software hardware firmware and or the like. It also will be appreciated that the storage locations herein may be any suitable combination of disk drive devices memory locations solid state drives CD ROMs DVDs tape backups storage area network SAN systems and or any other appropriate tangible non transitory computer readable storage medium. Cloud and or distributed storage e.g. using file sharing means for instance also may be used in certain example embodiments. It also will be appreciated that the techniques described herein may be accomplished by having at least one processor execute instructions that may be tangibly stored on a non transitory computer readable storage medium.

While the invention has been described in connection with what is presently considered to be the most practical and preferred embodiment it is to be understood that the invention is not to be limited to the disclosed embodiment but on the contrary is intended to cover various modifications and equivalent arrangements included within the spirit and scope of the appended claims.

