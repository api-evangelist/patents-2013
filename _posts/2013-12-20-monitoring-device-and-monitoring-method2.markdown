---

title: Monitoring device and monitoring method
abstract: A monitoring unit in a monitoring system determines whether or not a program to be executed is a program to be monitored. If it is determined that the program to be executed is a program to be monitored, the monitoring unit in the monitoring system adds, in order, before an instruction string included in a function called by the program to be monitored, an instruction string satisfying a predetermined condition, and a condition branch instruction, which is an instruction starting a predetermined control process when the predetermined condition is satisfied.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600665&OS=09600665&RS=09600665
owner: NIPPON TELEGRAPH AND TELEPHONE CORPORATION
number: 09600665
owner_city: Chiyoda-ku
owner_country: JP
publication_date: 20131220
---
Conventionally in order to detect on a computer system unauthorized invasion by an attacker or operation of a malicious program a host type invasion detecting method of detecting suspicious operations from behavior of the system has been proposed for example see Non Patent Literature 1 .

As a method of monitoring operations of an application on a system a method of monitoring application programming interface API calls has been performed. This API is a function realizing abstraction of various system calls. For example an application is able to perform through an API file input and output communication control and the like in a simplified manner without being directly conscious of hardware. By monitoring such API calls log information on a type of the API what kinds of arguments have been input and the like is able to be acquired and as a result a series of operations of the application are able to be monitored.

Further as a method of acquiring such log information API hooking for causing log information to be acquired by performing transition of a control flow in the midst of an API call or of execution of the API has been used. For example as a method of acquiring log information by API hooking a method of inserting a jump instruction or call instruction into a head instruction of each API causing transition of a processing flow to another instruction string acquiring log information and returning the processing flow to the original API has been known.

Non Patent Literature 1 Detours Binary Interception of Win32 Functions 3rd USENIX Windows registered trademark NT Symposium USENIX by Galen Hunt July 1999

However in the above mentioned conventional technique since the jump instruction or call instruction is inserted into the head instruction in order to use API hooking the malignant program may not perform the intended malicious operations and the API calls may not be able to be monitored appropriately.

For example in the above mentioned method of using API hooking since transition of the processing flow to another instruction string is performed by inserting a jump instruction or call instruction into a head instruction of an API the malignant program is able to determine whether the API is being hooked by checking the head instruction of the API. Therefore if the malignant program determines that the API is being hooked the malignant program may not perform the intended malignant operations and the API calls may not be able to be monitored appropriately.

Therefore this invention has been made to solve the above described problem of the conventional technique and aims to monitor API calls appropriately by making it impossible for a malicious program to recognize that the API calls are being monitored.

To solve the problems described above and achieve the object a monitoring device includes a determining unit that determines whether or not a program to be executed is a program to be monitored and an instruction adding unit that adds in order before an instruction string included in a function called by the program to be monitored a first instruction string satisfying a predetermined condition and a condition branch instruction that is an instruction starting a predetermined control process when the predetermined condition is satisfied if the determining unit determines that the program to be executed is the program to be monitored.

Further monitoring method includes a determining step of determining whether or not a program to be executed is a program to be monitored and an instruction adding step of adding in order before an instruction string included in a function called by the program to be monitored a first instruction string satisfying a predetermined condition and a condition branch instruction that is an instruction starting a predetermined control process when the predetermined condition is satisfied if it is determined by the determining step that the program to be executed is the program to be monitored.

A monitoring device and a monitoring method disclosed in this application enable appropriate monitoring of API calls by making it impossible for a malicious program to recognize that the API calls are being monitored.

Hereinafter preferred embodiments of a monitoring device and a monitoring method according to this invention will be described in detail with reference to the accompanying drawings. The invention is not limited by these embodiments.

First an outline of a monitoring system according to a first embodiment will be described by using . is a block diagram illustrating a configuration of the monitoring system according to this embodiment. As illustrated in the monitoring system according to this embodiment has a monitoring unit a monitoring target program a monitoring non target program and an operating system OS . The configuration described herein is just an example and the monitoring system may be implemented in various other modes.

The monitoring unit is a program operated on the OS and monitors accesses related to host resources and processes from the monitoring target program . For example this monitoring unit is implemented as a module library configured of a plurality of modules. Each monitoring unit monitors operations of the monitoring target program for each process each program or each module.

The monitoring target program is a program to be monitored by the monitoring system and operates together with the monitoring unit . For example this monitoring target program is a malignant program such as a computer virus or a worm or an untrustable program that has a possibility of having vulnerability.

In the monitoring system according to the first embodiment a head instruction of an application programming interface API called by the monitoring target program is replaced with a hooking instruction string added with a condition branch instruction and before the condition branch instruction an instruction string always satisfying the condition branch instruction.

Further the monitoring non target program is a program to be not monitored by the monitoring system. The monitoring unit knows in advance characteristics of a malicious program to be the monitoring target program and is able to distinguish between the monitoring target program and the monitoring non target program

The OS is software for operating various programs and provide various functions called by system calls to the monitoring target program or the monitoring non target program

The monitoring unit of the monitoring system according to the first embodiment inserts hook API for hooking the API to be hooked into the monitoring target program if the monitoring target program is determined to be executed. When this monitoring target program executes the hooked API since the monitoring target program executes the system calls via a hook API the monitoring unit is able to monitor all of API execution of the monitoring target program .

That is as a result of performing a process for example a process of acquiring log information on input values or the like of the API of monitoring behavior of the monitoring target program by the monitoring target program executing the hooked API and going through the hook API the API execution of the monitoring target program is able to be monitored.

Next a configuration of the monitoring unit will be described by using . is a functional block diagram illustrating the configuration of the monitoring unit . As illustrated in the monitoring unit in particular has a program executing unit a determining unit a dynamic link library DLL monitoring unit a DLL loading control unit and an instruction adding unit . An outline of a function that each of these functional units has will be described first and a process performed by each of these functional units will be described in detail later.

The program executing unit operates the monitoring target program or monitoring non target program . First a normal process in a case where the monitoring non target program is executed will be described by using . is a diagram illustrating normal execution procedure of an API. As exemplified in when the monitoring non target program uses API A DLL  implemented with API A is loaded into a memory of a process being operated by the program. The monitoring non target program then executes API A defined in DLL  .

Further when the program executing unit operates the monitoring target program the program executing unit causes the monitoring target program to be executed after a code having an API for calling hook API described therein has been inserted into the monitoring target program . Specifically when the program executing unit operates the monitoring target program the code in which the API for calling hook API is described is inserted into the monitoring target program and thereafter the program executing unit causes the monitoring target program to be executed in a semi transparent virtual isolated environment provided by the monitoring system.

As described by executing the monitoring target program after the code in which the API for calling hook API is described has been inserted into the monitoring target program the program executing unit performs the process the process of acquiring the log information of the input values or the like of the API for example of monitoring the behavior of the monitoring target program and monitors the API execution of the monitoring target program .

The determining unit determines whether or not a program to be executed is a program to be monitored. Specifically the determining unit determines whether a program executed by the program executing unit is the monitoring target program or monitoring non target program and notifies a result of the determination to the DLL monitoring unit .

The DLL monitoring unit monitors whether or not a DLL implemented with the API to be hooked has been loaded. Specifically when the DLL monitoring unit receives the result of the determination that the monitoring target program is executed from the determining unit the DLL monitoring unit monitors whether the DLL implemented with the API to be hooked has been loaded into the memory of the process operated by the monitoring target program . When the DLL implemented with the API to be hooked has been loaded into the memory the DLL monitoring unit notifies to the DLL loading control unit that it has been loaded.

The DLL loading control unit loads the hook DLL into the process memory of the target program. Specifically the DLL loading control unit causes the DLL implemented with the hook API to be loaded into the memory of the targeted process when the DLL loading control unit receives from the DLL monitoring unit the notification that the DLL implemented with the API to be hooked has been loaded into the memory.

The instruction adding unit adds in order before an instruction string included in an API called by the monitoring target program an instruction string satisfying a predetermined condition and a condition branch instruction which is an instruction that starts a predetermined control process when the predetermined condition is satisfied when the monitoring target program is executed.

Specifically if the DLL implemented with the hook API has been loaded into the memory of the targeted process by the DLL loading control unit as a DLL initialization process the instruction adding unit rewrites an instruction around a head of the API to be hooked into an instruction string of an arithmetic operation comparison or the like that always satisfies a predetermined condition and a condition branch instruction that causes transition to a control flow for executing a process for example a process of acquiring log information or the like of monitoring the behavior of the monitoring target program when the predetermined condition is satisfied.

For example a plurality of pairs may be set beforehand each of these pairs associating an instruction string always satisfying a predetermined condition and a condition branch instruction causing transition to a control flow for acquiring log information or the like when the predetermined condition is satisfied and the instruction adding unit may randomly acquire one pair from the plurality of pairs and add the condition branch instruction and instruction string associated with each other in the acquired pair into the API head instruction called by the monitoring target program . Further the instruction adding unit may generate an instruction string always satisfying a predetermined condition and a condition branch instruction causing transition to a control flow for acquiring log information or the like when the predetermined condition is satisfied.

A normal API call will be described by using . is a diagram illustrating the normal API call. As exemplified in if a call for an API included in a monitoring target program is performed internal processing of the API is executed.

An API call monitoring method by API hooking of causing transition of processing to another instruction string and performing log acquirement or the like by rewriting a head instruction of such an API is used. For example as illustrated in by adding a call instruction for a hook function into the head instruction of the API transition to a processing flow of acquiring a log of input values or the like of the API is caused and thereafter the processing flow is returned to the original API.

Conventionally as the call instruction for a hook function the head instruction of the API has been rewritten into a jump instruction or call instruction. In contrast the monitoring unit according to this embodiment rewrites as the call instruction for a hook function the head instruction of the API into the condition branch instruction and the instruction string of an arithmetic operation comparison or the like which always satisfies the condition branch instruction.

For example the condition branch instruction is an instruction determining whether to cause transition of a control flow to a specified address according to a state of a flag register. The flag register is a register in which 0 or 1 is registered as a result of an instruction such as an arithmetic operation or comparison. Further the above described instruction string is an instruction string such as arithmetic operation or comparison which satisfies the condition of the condition branch instruction. When processing of the arithmetic operation or comparison is executed by this instruction string the state of the flag register is brought into a state always satisfying the condition of the condition branch instruction.

That is by rewriting the head instruction of the API into the condition branch instruction and the instruction string such as the arithmetic operation or comparison always satisfying the condition of that condition branch instruction an instruction string synonymous with jump instruction always causing transition of the control flow to a specified address is able to be generated. An infinite number of combinations of these condition branch instructions and instruction strings always satisfying these condition branch instructions are able to be generated and thus an instruction string that is unpredictable by the program is able to be generated and determination of whether hooking is being performed is able to be made difficult.

That is since by adding the condition branch instruction and the instruction string always satisfying the condition of the condition branch instruction instead of a jump instruction or call instruction the transition of the control flow is able to make the program making the API call determine that the API is not being hooked and cause that program to execute the API the monitoring unit is able to make the malignant program unable to recognize that the API call is being monitored and monitor API calls appropriately.

Further an instruction string may be dynamically generated every time an API is hooked. Therefore the program making the API call is unable to determine whether hooking is being performed by comparing the head of the API with the pattern of a particular instruction string. Thereby API hooking is enabled and operations of the program are able to be monitored without being noticed by the malignant program.

A case where a head instruction of an API is rewritten into a condition branch instruction and an instruction string always satisfying a condition of the condition branch instruction will be described by using an example in . is a diagram illustrating a process for the case where the head instruction of the API has been rewritten into the condition branch instruction and the instruction string always satisfying the condition of the condition branch instruction. As exemplified in a head instruction of API A called by the monitoring target program is rewritten into a flag register adjusting code and a condition branch instruction. The flag register adjusting code is an instruction string executing an arithmetic operation a comparison or the like and is an instruction code for making adjustment such that when processing of the arithmetic operation or comparison is executed by this instruction string the state of the flag register is brought into a state satisfying a condition of the condition branch instruction.

Further the condition branch instruction is an instruction that causes transition of a control flow to a specified address when the state of the flag register satisfies a predetermined condition. As described above since the flag register adjusting code added before the condition branch instruction adjusts the state of the flag register to be brought into the state satisfying the predetermined condition transition of the control flow to the specified address is enabled. This control flow is for example a control flow of executing the process of acquiring the input values or the like of API A .

Further since the head of the API is rewritten into the condition branch instruction and the instruction string always satisfying the condition of the condition branch instruction before the control flow is returned to the original API and after the overwritten original processing is executed the control flow is returned to the original API and the original processing that has not been overwritten that is the internal processing of the API is executed. Thereby the API is able to be executed without any contradiction.

Next execution procedure of an API will be described by using . When the monitoring target program referred to as program in is executed the monitoring target program loads DLL  implemented with API A see in . After DLL  has been loaded the monitoring target program loads DLL  hook implemented with hook API A for executing processing by hooking API A see in .

When DLL  hook has been loaded by the monitoring target program the monitoring unit adds into a head instruction string of API A a condition branch instruction and an instruction string always satisfying a condition of the condition branch instruction before that condition branch instruction such that if API A is executed transition of the instruction to hook API A is caused. Thereafter when the monitoring target program executes API A defined in DLL  after a hooking process is executed the API is executed see in .

As described above when API A is executed upon loading of DLL  hook by the monitoring target program the monitoring unit adds into the head instruction string of API A the condition branch instruction and the instruction string always satisfying that condition branch instruction such that the transition of the instruction to hook API A is caused. The file of DLL  itself may be rewritten beforehand but since the source code needs to be modified and compiled the source code of the DLL implemented with the API to be hooked needs to be open to the public. Further directly rewriting the binary itself is technically possible but since reverse engineering of the binary becomes necessary and depending on the program this may be prohibited rewriting may not be possible.

Next processing by the monitoring unit according to the first embodiment will be described by using . is a flow chart illustrating processing operations of the monitoring unit according to the first embodiment.

As illustrated in the determining unit of the monitoring unit determines whether or not a monitoring target program has been executed Step S and if it is determined that a monitoring target program has been executed Step S Yes the determining unit determines whether or not a DLL implemented with an API to be hooked has been loaded Step S .

As a result if the DLL monitoring unit of the monitoring unit determines that the DLL implemented with the API to be hooked has not been loaded Step S No the DLL monitoring unit returns to the processing of

Step S. Further if it is determined that the DLL implemented with the API to be hooked has been loaded Step S Yes the DLL loading control unit of the monitoring unit loads a hook DLL into a process memory of the target program Step S .

The instruction adding unit of the monitoring unit rewrites the head instruction of the API to be hooked such that transition to a hook API is caused Step S . Specifically when the DLL implemented with the hook API is loaded into the memory of the targeted process by the DLL loading control unit the instruction adding unit rewrites as a DLL initialization process the instruction around the head of the API to be hooked into a condition branch instruction and an instruction string such as an arithmetic operation or a comparison which always satisfies a condition of the condition branch instruction.

The monitoring unit then determines whether all of the APIs to be hooked have been hooked Step S . That is since the APIs to be hooked may be implemented in a plurality of DLLs or the timing to load the DLL is not necessarily at the time of initiating the program until all of the APIs to be hooked are able to be hooked the monitoring target program needs to be monitored.

As a result when the monitoring unit determines that all of the APIs to be hooked have not been hooked Step S No the monitoring unit returns to the processing of Step S. Further when the monitoring unit determines that all of the APIs to be hooked have been hooked Step S Yes the monitoring unit ends the processing.

As described above the monitoring unit according to the first embodiment determines whether or not a program to be executed is a program to be monitored. If the monitoring unit determines that the program to be executed is a program to be monitored the monitoring unit adds in order before the instruction string included in the function called by the program to be monitored an instruction string satisfying a predetermined condition and a condition branch instruction which is an instruction starting a predetermined control process if the predetermined condition is satisfied.

Therefore since the monitoring unit according to the first embodiment is able to generate an infinite number of patterns of the instruction strings for causing transition of the control flow and the condition branch instructions it is difficult for the monitoring target program to determine that the API has been hooked and thus without the monitoring of the operations of the program being obstructed the operations of the monitoring target program are able to be monitored. As a result the monitoring unit is able to make it impossible for the malignant program to recognize that the API calls are being monitored and is able to monitor the API calls appropriately.

Further the monitoring unit according to the first embodiment randomly acquires one pair from a plurality of pairs each of the pairs associating an instruction string always satisfying a predetermined condition with a condition branch instruction that causes transition to a control flow of acquiring log information or the like when the predetermined condition is satisfied and adds the condition branch instruction and instruction string associated with each other in the acquired pair into the API head instruction called by the monitoring target program . Therefore since a plurality of combinations of the instruction strings for causing transition of the control flow and the condition branch instructions are able to be generated beforehand adding into the head instruction of the API an instruction string satisfying a predetermined condition and a condition branch instruction which is an instruction starting a predetermined control process if the predetermined condition is satisfied becomes easy. Further since the acquirement is performed randomly it is possible to make it difficult for the monitoring target program to determine that the API is being hooked.

Further the monitoring unit according to the first embodiment adds in order a first instruction string executing an arithmetic operation or comparison such that a value stored in the flag register satisfies a predetermined condition and a condition branch instruction which is an instruction starting a predetermined control process when the flag register satisfies the predetermined condition. Therefore by using the existing flag register an infinite number of patterns of the instruction strings for causing transition of the control flow and the condition branch instructions are able to be generated.

Further the monitoring unit according to the first embodiment executes the API including the condition branch instruction and instruction string and performs as a control process a process of monitoring behavior of the monitoring target program . For example by acquiring a log of input values or the like of the API the monitoring unit is able to monitor the behavior of the monitoring target program and monitor operations of the monitoring target program appropriately.

Further if system call monitoring in the kernel layer is executed it is necessary to trap not only the monitoring target program but also all of system call events on the OS including unrelated programs and execute processing by determining whether these are programs to be monitored from the process IDs or the like. Therefore in the system call monitoring in the kernel layer overhead for processing the unrelated system call events is generated. In contrast since the monitoring unit according to the first embodiment monitors only the monitoring target program the above mentioned overhead is not generated.

Although the embodiment of the present invention has been described the present invention may be implemented in various different modes other than the above described embodiment. Hereinafter other embodiments included in the present invention will be described as a second embodiment.

Further each component of the respective devices is functionally and conceptionally illustrated and is not necessarily physically configured as illustrated in the drawings. That is specific modes of distribution and integration of the respective devices are not limited to those illustrated in the drawings and depending on various loads and use situations all or some of the devices may be functionally or physically distributed or integrated in arbitrary units for configuration. For example the determining unit and the instruction adding unit may be integrated with each other. Further all or any part of the processing functions executed by the respective devices may be realized by a CPU or a program analyzed and executed by the CPU or may be implemented as hardware by wired logic.

Furthermore of the respective processes described in the embodiment all or some of the processes described as being performed automatically may be performed manually or all or some of the processes described as being performed manually may be performed automatically by a known method. In addition the procedural sequences control sequences specific names and information including various data and parameters described above and illustrated in the drawings may be arbitrarily modified unless otherwise particularly stated.

Further a program which describes the above described processing executed by the monitoring unit in the embodiment in a language executable by a computer may be generated. For example a monitoring program which describes the processing executed by the monitoring unit in a language executable by a computer may be generated. In this case by the computer executing the monitoring program effects that are the same as those of the above embodiment are able to be obtained. Further by recording that monitoring program in a computer readable recording medium and causing the computer to load the monitoring program recorded in this recording medium for execution processing that is the same as that of the first embodiment may be realized. Hereinafter an example of a computer that executes a monitoring program realizing functions that are the same as those of the monitoring unit illustrated in will be described.

The memory includes as exemplified in a read only memory ROM and a RAM . The ROM stores therein a boot program such as a basic input output system BIOS for example. The hard disk drive interface is as exemplified in connected to the hard disk drive . The disk drive interface is as exemplified in connected to the disk drive . An attachable and detachable storage medium such as a magnetic disk or an optical disk for example is inserted into the disk drive. The serial port interface is as exemplified in connected to for example a mouse and a key board . The video adapter is as exemplified in connected to for example a display .

As exemplified in the hard disk drive stores therein for example an OS an application program a program module and program data . That is the above described monitoring program is stored as a program module in which commands executed by the computer are described in the hard disk drive for example.

Further the various data described in the above embodiment are stored as the program data in the memory or hard disk drive for example. The CPU reads as necessary the program module and program data stored in the memory or hard disk drive out to the RAM and executes an access monitoring sequence an access control sequence a process monitoring sequence and a process control sequence.

The program module and program data related to the monitoring program are not necessarily stored in the hard disk drive and may be for example stored in an attachable and detachable storage medium and read out via the disk drive or the like by the CPU . Or the program module or program data related to the monitoring program may be stored in another computer connected via a network local area network LAN wide area network WAN or the like and read out via the network interface by the CPU .

