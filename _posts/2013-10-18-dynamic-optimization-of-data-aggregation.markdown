---

title: Dynamic optimization of data aggregation
abstract: A method includes receiving a first database query, in which the first database query requests particular data associated with a first object that is stored on a data source. The method also includes determining whether the first database query includes an aggregation function. The method also includes sending an instruction to generate current aggregate data based on the aggregation function to the data source in response to determining that the first database query includes the aggregation function, in which the current aggregate data corresponds to the particular data. The data source is configured to generate the current aggregate data in response to receiving the instruction. The method includes generating a second database query based on the first database query, in which the second database query requests the current aggregate data. The method also includes retrieving the current aggregate data using the second database query and providing the current aggregate data.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09256641&OS=09256641&RS=09256641
owner: CA, Inc.
number: 09256641
owner_city: New York
owner_country: US
publication_date: 20131018
---
The present disclosure relates to cloud computing and database organization and more specifically to a method and system for dynamic optimization of data aggregation.

Enterprises process and analyze data on a daily basis. Such data may be located in objects such as tables which are stored on data sources. Data sources may include databases and non database data sources. Users may easily access and process data within objects stored on databases. Specifically users may use instructions developed using database languages such as Structured Query Language SQL to select and process specific data within objects stored on a database.

However problems may arise when users are working with data that is stored on non database data sources. Such data sources may not support SQL or other types of database languages. Thus selected data may have to be moved from those data sources to a virtual database in order to be processed using conventional database tools. When the amount of selected data is large this may result in huge inefficiencies. In particular a lot of memory may be required to store the selected data in the virtual database significant time may be spent moving the selected data to the virtual database and high network traffic due to the transfer of selected data may cause other operations to slow down.

According to an aspect of the present disclosure a method may comprise receiving a first database query the first database query requesting particular data associated with a first object. The first object may be stored on a data source. The method may further comprise determining whether the first database query comprises an aggregation function. The method may further comprise sending an instruction to generate current aggregate data based on the aggregation function to the data source in response to determining that the first database query comprises the aggregation function. The data source may be configured to generate the current aggregate data in response to receiving the instruction the current aggregate data corresponding to the particular data. The method may further comprise generating a second database query based on the first database query the second database query requesting the current aggregate data. The method may further comprise retrieving the current aggregate data using the second database query and providing the current aggregate data. The method may further comprise issuing the first query in response to determining that the first database query does not comprise the aggregation function.

Other objects features and advantages will be apparent to persons of ordinary skill in the art from the following detailed description and the accompanying drawings.

As will be appreciated by one skilled in the art aspects of the present disclosure may be illustrated and described herein in any of a number of patentable classes or context including any new and useful process machine manufacture or composition of matter or any new and useful improvement thereof. Accordingly aspects of the present disclosure may be implemented entirely in hardware entirely in software including firmware resident software micro code etc. or in a combined software and hardware implementation that may all generally be referred to herein as a circuit module component or system. Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable media having computer readable program code embodied thereon.

Any combination of one or more computer readable media may be utilized. The computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would comprise the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an appropriate optical fiber with a repeater a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium able to contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take a variety of forms comprising but not limited to electro magnetic optical or a suitable combination thereof. A computer readable signal medium may be a computer readable medium that is not a computer readable storage medium and that is able to communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable signal medium may be transmitted using an appropriate medium comprising but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in a combination of one or more programming languages comprising an object oriented programming language such as JAVA SCALA SMALLTALK EIFFEL JADE EMERALD C C VB.NET PYTHON or the like conventional procedural programming languages such as the C programming language VISUAL BASIC FORTRAN 2003 Perl COBOL 2002 PHP ABAP dynamic programming languages such as PYTHON RUBY and Groovy or other programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider or in a cloud computing environment or offered as a service such as a Software as a Service SaaS .

Aspects of the present disclosure are described herein with reference to flowchart illustrations and or block diagrams of methods apparatuses e.g. systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams may be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable instruction execution apparatus create a mechanism for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that when executed may direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions when stored in the computer readable medium produce an article of manufacture comprising instructions which when executed cause a computer to implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable instruction execution apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatuses or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

While certain example systems and methods disclosed herein may be described with reference to cloud computing systems and methods disclosed herein may also be related to other areas of cloud environments and cloud computing e.g. architecture and data management emerging technologies service assurance deployment and virtualization architecture database management data modeling and analysis governance risk and compliance for information technology IT project portfolio and financial management software engineering mainframe and IT service and asset management IT service and asset management mainframe middleware and common services usability and user experience vertical specific technology applications security management mobility application performance management service assurance alternative software delivery method automation and infrastructure and operations management.

Enterprises process and analyze data on a daily basis. Such data may be located in objects e.g. tables records graphs sets arrays which are stored on data sources. Data sources may include databases and non database data sources. Users may create select manipulate and manage data within objects stored on databases using database management systems DBMSs . Typically DBMSs operate using the standard language SQL. Accordingly data stored in databases may be accessed using statements or queries written in SQL.

However problems may arise when users are working with data that is stored on non SQL compliant or non database data sources. Because such data sources do not support SQL selected data from those data sources may have to be moved to a virtual database in order to be processed using SQL functions or commands. When the amount of selected data is large this may result in huge inefficiencies. In particular a large amount of memory may be required to store selected data in the virtual database significant time may be spent moving selected data to the virtual database and high network traffic due to the transfer of selected data may cause other operations to slow down.

Systems and methods described herein may provide a method for optimizing aggregation of data stored on non SQL compliant data sources. A user may want to aggregate specific data located in an object on a data source. Table 1 may be an example of such an object 

where the specific data corresponds to all rows within Table 1 where a first column UNUSED is greater than or equal to 365 e.g. the records for all items in Table 1 that have remain unused for at least one year . Two aggregation functions COUNT and SUM operate on the specific data. Specifically the function COUNT counts the number of rows of specific data and the function SUM sums all the values of specific data in the second column BYTES. Other examples of aggregation functions include but are not limited to AVG which returns an average value of data in a column FIRST which returns a first value of data in a column LAST which returns a last value of data in a column MAX which returns a largest value of data in a column and MIN which returns a smallest value of data in a column.

Data source 1 may be a non SQL compliant data source. Consequently in existing systems the rows of specific data may have to be moved to a virtual database before the aggregation functions are applied. When Table 1 includes a large number of records this may involve moving a significant amount of data which as noted above may lead to inefficiencies. In contrast systems and methods described herein may instruct data source 1 to aggregate the specific data at the back end. Data source 1 may identify the specific data apply the aggregation functions in this example COUNT BYTES and SUM BYTES and create a summary object with the results of the aggregation. The summary object may be a second table that includes a single row with the results of the aggregation for example 

To retrieve the results of the aggregation from the summary object systems and methods described herein may transform the first query into a new query. In this example the new query may be 

The new query is issued against the summary object with the aggregation functions already applied. Accordingly only the results of the aggregation are transferred to the virtual database and onto the user. By only transferring the results of the aggregation systems and methods described herein may move less data over the network thereby reducing network traffic. Moreover less time and other resources may be spent moving and storing the transferred data on the virtual database.

Referring now to a network may comprise one or more clouds which may be public clouds private clouds or community clouds. Each cloud may permit the exchange of data and services among clients or users that are connected to such clouds . In certain configurations cloud may be a wide area network such as the Internet. In some configurations cloud may be a local area network such as an intranet. Further cloud may be a closed private network in certain configurations and cloud may be an open network in other configurations. Cloud may facilitate wired or wireless communications of data and provisioning of services among clients that are connected to or using devices in cloud .

Network may also comprise one or more servers operated by administrators e.g. database administrators network administrators server administrators system administrators service providers e.g. application service providers network service providers Internet service providers managed service provider data services provider and other parties. Administrators service provides and other parties may provide data and services to clients by utilizing the one or more servers which connect to one or more devices utilized by clients. The services may comprise for example information technology services data services network services access services monitoring services operations services infrastructure services and other resource provisioning services. The one or more servers may comprise general purpose computing devices specialized computing devices mainframe devices wired devices wireless devices monitoring devices infrastructure devices and other devices configured to provide one or more of services and data to clients. The one or more devices may comprise one or more of general purpose computing devices specialized computing devices mobile devices wired devices wireless devices passive devices routers switches mainframe devices monitoring devices infrastructure devices and other devices utilized by clients.

Examples of servers and devices include data sources and client machines . Each data source may comprise a memory depicted in . One or more objects may be stored in memory . The one or more objects may be data structures that contain data. Examples of objects include tables graphs records sets and arrays. Certain of data sources may be SQL compliant others may be non SQL compliant. For example a first data source may be a database whereas a second data source may be a non database data source e.g. a mainframe storage that uses a proprietary communication and data exchange protocol . described below provides a more detailed view of data source . Each client machine may comprise an interface . Interface may be a user interface e.g. a text based user interface a graphical user interface a hardware interface a software interface or any interface that is configured to send or receive data. Interface may comprise one or more applications or programs that allow clients to access services and data provided by administrators service providers and other parties in cloud . In particular interface may comprise a data processing program interface through which a client may access and manipulate data stored on data sources in cloud .

Moreover network may comprise one or more systems . System may be for example one or more of a general purpose computing device a specialized computing device a wired device a wireless device a mainframe device an infrastructure device a monitoring device and any other device configured collect and receive data from one or more data sources e.g. servers sensors networks interfaces other devices . In particular system may connect to cloud and collect and receive data from client machine data sources and other servers and devices in cloud . By collecting and receiving this information from client machine data sources and other servers and devices in cloud system may provide aggregate data to a client. Specifically system may receive a first database query from a client. The first database query may request particular data associated with a first object which is stored on a data source . When the first database query includes an aggregation function system may send an instruction to generate current aggregate data based on the aggregation function to the data source . Upon receiving the instruction the data source may generate the current aggregate data. System may generate a second database query based on the first database query and use the second database query to obtain the current aggregate data. System may then provide the aggregate data to the client.

System may comprise one or more servers and devices. In certain configurations one or more of client machines and data sources may comprise system . In other configurations system may be separate from client machines and data sources .

Referring now to depicts a block diagram of an example configuration for providing aggregate data by sending an instruction to generate aggregate data to a data source and retrieving the aggregate data. This configuration may exist in a network as depicted in having a system a client machine a system and a data source . System may comprise a memory a central processing unit CPU and an input and output I O device . Memory may comprise volatile and non volatile memory. Memory may store computer readable instructions that may instruct system to perform certain processes. In particular when executed by CPU the computer readable instructions stored in memory may instruct CPU to operate as one or more of an aggregation determining device a query generating device a description obtaining device a big data object determining device a requested aggregated data determining device an instruction sending device an aggregate data retrieving device an aggregate data mapping device an aggregate data providing device and a standard issuing device . Aggregate function determining device may be an example of a first determining device query generating device may be an example of a first generating device and a second generating device description obtaining device may be an example of an obtaining device and more specifically a converting device and a third sending device big data object determining device may be an example of a second determining device requested aggregate data determining device may be an example of a third determining device instruction sending device may be an example of a first sending device and a second sending device aggregate data retrieving device may be an example of a first retrieving device and a second retrieving device aggregate data mapping device may be an example of a mapping device and aggregate data providing device may be an example of a first providing device and a second providing device.

In particular configurations one or more of aggregation determining device query generating device description obtaining device big data object determining device requested aggregate data determining device instruction sending device aggregate data retrieving device aggregate data mapping device aggregate data providing device and standard issuing device may be implemented on one or more different CPUs which may be comprised in remote or local devices.

I O device may receive one or more of data from cloud data from other devices and sensors connected to system and input from a client and provide such information to CPU . I O device may transmit data to cloud may transmit data to other devices connected to system and may transmit a notification to a client e.g. display or send a message make a sound . In particular I O device may receive data from and or transmit data to client machine and data source . Further I O device may implement one or more of wireless and wired communication between system and other devices e.g. client machine data source . I O device may be an example of a first receiving device a second receiving device a first sending device and a second sending device.

Data source may comprise a memory a data filtering device and a summary object generating device . Memory may store objects such as a data object and a summary object . Memory may also store computer readable instructions that when executed by one or more CPUs not depicted may cause the one or more CPUs to perform certain processes. In certain configurations the one or more CPUs may act as one or more of data filtering device and summary object generating device when executing the computer readable instructions.

Referring now to example processes performed by system now are described. depicts an example process of providing aggregate data by sending an instruction to generate aggregate data to a data source and retrieving the aggregate data. A client may input a first query into interface on client machine . First query may be a database query such as for example a SQL query e.g. a query written in SQL . First query may request particular data associated with data object stored on data source as depicted in . Specifically first query may request one or more aggregate values calculated from values in a defined result set. Using the values in Table 1 first query may be 

SELECT COUNT BYTES SUM BYTES FROM DATASOURCE1.TABLE1 WHERE UNUSED 365 where the data source identifier DATASOURCE1 corresponds to data source as depicted in and the object identifier TABLE1 corresponds to data object as depicted in . The result set may correspond to all rows within Table 1 having a value in the column UNUSED that is greater than or equal to 365.

Client machine may send first query to system . In S I O device may receive first query and pass it to CPU . First query may be stored in memory on system . In S aggregation determining device may determine whether first query comprises an aggregation such as for example an aggregation function. As noted above examples of aggregation functions include COUNT which returns a number of rows SUM which returns a sum of the values of data in a column AVG which returns an average value of data in a column FIRST which returns a first value of data in a column LAST which returns a last value of data in a column MAX which returns a largest value of data in a column and MIN which returns a smallest value of data in a column. When first query does not comprise an aggregation function S NO the process may proceed to S. In S system acting as standard issuing device may perform a standard selection and data retrieve process e.g. system may issue first query normally . System may determine whether data source is SQL complaint. When data source is not SQL compliant system may convert first query into a format that is supported by data source e.g. transform first query into a native request such as a Vantage Application Programming Interface API request or an Enterprise Web Services EWS message . System may send or pass first query to data source to return the particular data that has been requested.

When first query comprises an aggregation function S YES the process may proceed to S. In the example provided first query includes two aggregation functions COUNT and SUM Accordingly aggregation determining device may determine that first query comprises an aggregation function and the process may proceed to S. In S description obtaining device may obtain a description of data object . In particular description obtaining device may connect to data source via EWS or some other platform and pass an object definition request e.g. a function or command that requests attributes the definition of an object to data source to retrieve a description of data object . The description of data object may include one or more object descriptors that define various attributes of data object .

Then in S big data object determining device may determine whether data object comprises a predetermined amount of data based on the description of data object . The predetermined amount of data may correspond to an amount of data that may require significant resources to process. Specifically the predetermined amount of data may correspond to an amount of data that is generally associated with big data objects. Big data objects may be objects that comprise large and complex data that may be difficult to process using standard data processing applications and tools. As the industry for data processing applications develops big data objects may refer to objects having increasingly large and complex data sets. Thus the predetermined amount of data may be adjusted to account for changing industry standards. Determining whether data object comprises the predetermined amount of data may involve checking e.g. reviewing analyzing the description of data object . In certain instances a particular object descriptor may flag or mark data object as a big data object. Accordingly data object determining device may easily identify data object as a big data object and conclude that is comprises a predetermine amount of data.

When big data object determining device determines that data object does not comprise the predetermined amount of data S NO the process may proceed to S described above . When big data object determining device determines that data object comprises the predetermined amount of data e.g. when big data object determining device determines that data object is a big data object S YES the process may proceed to S. In S requested aggregate data determining device may determine whether to provide periodic aggregate data or current aggregate data to the client. Periodic aggregate data may correspond to aggregate data that is generated by data source at set intervals e.g. once every hour or few minutes . Current aggregate data may correspond to real time aggregate data which is generated by data source at the time of each request. Data source may require a certain amount of time to generate aggregate data. This amount of time may vary depending on the amount and complexity of the data in the result set. Thus when a request is urgent or when real time data is not required system may provide periodic aggregate data in lieu of current aggregate data.

Accordingly requested aggregate data determining device may check for an input or setting which may indicate whether to provide periodic aggregate data or current aggregate data. For example an input that requests quick turnaround time may indicate that periodic aggregate data should be provided instead of current aggregate data. When no such input or setting exists requested aggregate data determining device may send a message to the client asking the client to specify the type of aggregate data e.g. periodic aggregate data or current aggregate data that it would like to receive. Or in the alternative requested aggregate data determining device may default to providing either periodic aggregate data or current aggregate data depending on system requirements.

When requested aggregate data determining device determines to provide current aggregate data S NO the process may proceed to S. In S instruction sending device may send an instruction to generate current aggregate data based on the aggregation functions in first query e.g. COUNT BYTES and SUM BYTES to data source . When data source receives the instruction data source may generate the current aggregate data and place the current aggregate data in a summary object . When summary object does not exist data source may create summary object . In this example Table 2 may represent summary object . Data source may then send a message to system confirming that the current aggregate data has been generated and placed in summary object .

In S query generating device may generate a second query based on first query . Second query may request the current aggregate data and since the current aggregate data is located in summary object second query may be issued against summary object instead of data object . Keeping with Table 2 second query may be 

where the data source identifier DATASOURCE1 corresponds to data source and the object identifier TABLE2 corresponds to summary object .

In S aggregate data retrieving device may retrieve the current aggregate data using second query . provides a detailed view of this process. As depicted in in S aggregate data retrieving device may determine what native format data source supports. In S aggregate data retrieving device may convert or transform second query into that format. As noted above this may involve for example converting second query into a native EWS message. In S aggregate data retrieving device may instruct I O device to send second query in the supported format to data source . When data source receives second query data source may return the current aggregate data to system . And in S system more specifically I O device may receive the current aggregate data. Specifically system may receive the single row of values in Table 2.

In S aggregate data mapping device may map the current aggregate data to columns identified in first query . Such columns may correspond to the particular data e.g. relevant data that was requested by the client. In this example the mapping from second query to first query may involve 1 mapping the value retrieved by SELECT COUNT BYTES in second query to SELECT COUNT BYTES in first query and 2 mapping the value retrieved by SELECT SUM BYTES in second query to SELECT SUM BYTES in first query . Then in S aggregate data providing device may provide the current aggregate data as mapped. Specifically aggregate data providing device may instruct I O device to send the current aggregate data as mapped to client machine . Interface may then present e.g. display recite the current aggregate data to the client.

When requested aggregate data determining device determines to provide periodic aggregate data S YES the process proceeds to S. As noted above periodic aggregate data may correspond to aggregate data that is generated by data source at set intervals. System may be programmed to instruct data source to generate periodic aggregate data for certain result sets. Such result sets may be ones that are frequently accessed by clients. Accordingly to reduce turnaround time when a new query or request is received system may be programmed to repeatedly send instructions to generate periodic aggregate data based on one or more aggregation functions to data source . Data source in response to receiving each instruction may destroy the periodic aggregate data that was previously generated and to regenerate new periodic aggregate data. In certain configurations the periodic aggregate data may also be placed in summary object . For example summary object may be modified to have two rows of aggregate data one for current aggregate data and another for periodic aggregate data. Table 3 may be an example of such an object 

Then when system receives a new query requesting aggregate data system may retrieve the most recently generated periodic aggregate data from data source without having to wait for data source to generate current aggregate data. Certainly when a client requires or requests real time or current aggregate data described above system may still provide current aggregate data. Moreover when periodic aggregate data for a particular aggregation function does not exist e.g. system was not programmed to instruct data source to generate such periodic aggregate data system may revert to providing current aggregate data. In such instances system may notify an administrator that a request for certain periodic aggregate data was received and allow the administrator to determine whether to instruct system to generate such periodic aggregate data in the future.

In S query generating device may generate a third query . Third query may also be based on first query however third query may request the periodic summary data. Referring to Table 3 third query may be for example 

where the data source identifier DATASOURCE1 corresponds to data source and the object identifier TABLE3 corresponds to summary object .

Then in S aggregate data retrieving device may retrieve the periodic aggregate data using third query . This process may be the same as the process depicted in except that third query is converted and used instead of second query . The process may then proceed to S where aggregate data mapping device maps the periodic aggregate data to the columns identified in first query and S where aggregate data providing device provides the periodic aggregate data as mapped to the client.

In certain configurations first query may be stored in a location other than memory e.g. a remote storage device . In different configurations one or more of S S may be performed before concurrently or after one or more of S S. In particular configurations S S may be omitted. Thus the process depicted in may proceed directly from S to S when first query comprises an aggregation function S YES . In some configurations system may not be configured to provide periodic aggregate data. Accordingly S S and S may be omitted and the process may proceed directly from S to S when big data object determining device determines that data object comprises the predetermined amount of data e.g. when big data object determining device determines that data object is a big data object .

The flowcharts and diagrams in illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various aspects of the present disclosure. In this regard each block in the flowcharts or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustrations and combinations of blocks in the block diagrams and or flowchart illustrations may be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular aspects only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to comprise the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof.

The corresponding structures materials acts and equivalents of means or step plus function elements in the claims below are intended to comprise any disclosed structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. For example this disclosure comprises possible combinations of the various elements and features disclosed herein and the particular elements and features presented in the claims and disclosed above may be combined with each other in other ways within the scope of the application such that the application should be recognized as also directed to other embodiments comprising other possible combinations. The aspects of the disclosure herein were chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure with various modifications as are suited to the particular use contemplated.

