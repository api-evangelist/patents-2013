---

title: Namespace and storage management application infrastructure for use in management of resources in a storage system environment
abstract: A namespace and storage management (NSM) application includes an infrastructure configured to enable efficient management of resources in a storage system environment. The NSM application executes on a NSM console and interacts with an NSM server to integrate namespace management and storage management in the storage system environment. The NSM server, in turn, interacts with one or more remote agents installed on host machines in the environment to convey application programming interface (API) function calls that enable remote management of the resources.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09270741&OS=09270741&RS=09270741
owner: NETAPP, INC.
number: 09270741
owner_city: Sunnyvale
owner_country: US
publication_date: 20131226
---
The present application is a continuation of commonly assigned copending U.S. patent application Ser. No. 11 414 593 which was filed on Apr. 28 2006 by Steven R. Klinkner et al. for a Namespace and Storage Management Application Infrastructure for use in Management of Resources in a Storage System Environment which is related to the following commonly assigned U.S. patent application Ser. No. 11 384 804 titled System and Method for Integrating Namespace Management and Storage Management in a Storage System Environment filed Mar. 20 2006 which applications are hereby incorporated by reference.

The present invention relates to storage systems and more specifically to an application infrastructure for use in management of resources in a storage system environment.

A storage system typically comprises one or more storage devices into which information may be entered and from which information may be obtained as desired. The storage system includes an operating system that functionally organizes the system by inter alia invoking storage operations in support of a storage service implemented by the system. The storage system generally provides its storage services through the execution of software modules such as processes. The storage system may be implemented in accordance with a variety of storage architectures including but not limited to a network attached storage environment a storage area network and a disk assembly directly attached to a client or host computer. The storage devices are typically disk drives organized as a disk array wherein the term disk commonly describes a self contained rotating magnetic media storage device. The term disk in this context is synonymous with hard disk drive HDD or direct access storage device DASD .

The storage system may be further configured to operate according to a client server model of information delivery to thereby allow many clients to access information stored on the system. In this model the storage system may be embodied as file server executing an operating system such as the Microsoft Windows operating system hereinafter Windows operating system . Furthermore the client may comprise an application executing on an operating system of a computer that connects to the server over a computer network such as a point to point link shared local area network wide area network or virtual private network implemented over a public network such as the Internet. Each client may request the services of the server by issuing storage access protocol messages in the form of packets to the server over the network. By supporting a plurality of storage e.g. file based access protocols such as the conventional Common Internet File System CIFS and the Network File System NFS protocols the utility of the server is enhanced.

To facilitate client access to the information stored on the server the Windows operating system typically exports units of storage e.g. CIFS shares. As used herein a share is equivalent to a mount point or shared storage resource such as a folder or directory that stores information about files or other directories served by the file server. A Windows client may access information in the directory by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. The UNC path or pathname is an aspect of a Windows networking environment that defines a way for a client to refer to a unit of storage on a server. The UNC pathname is prefixed with the string to indicate resource names on a network. For example a UNC pathname may comprise a server name a share directory name and a path descriptor that collectively reference a unit of storage or share. Thus in order to access the share the client typically requires knowledge of the specific physical location i.e. the identity of the server exporting the share.

Instead of requiring the client to provide the specific identity of the file server exporting the share it is desirable to only require a logical pathname to the share. That is it is desirable to provide the client with a globally unique pathname to the share without reference to the file server. The conventional Distributed File System DFS namespace service provides such a solution in a Windows environment through the creation of a namespace that removes the specificity of server identity. DFS is well known and described in 1.2.2 1997 which is hereby incorporated by reference. As used herein a namespace is a view of shared storage resources such as shares from the perspective of a client. The DFS namespace service is generally implemented using one or more DFS servers and distributed components in a network.

Using the DFS service it is possible to create a unique pathname in the form of a UNC pathname for a storage resource that a DFS server translates to an actual location of the resource share in the network. However in addition to the DFS namespace provided by the Windows operating system there are many other namespace services provided by various operating system platforms including the NFS namespace provided by the conventional Unix operating system. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. For example a share may be connected or linked to a link point link in DFS terminology or a mount point in NFS terminology to hide the machine specific reference to the share. By referencing the link point the client can automatically access information on the storage resource of the specific machine. This allows an administrator user to store the information on any server in the network by merely providing a reference to the information or share . However these namespaces are typically services created on heterogeneous server platforms which leads to incompatibility and non interoperability with respect to management of the namespaces by the user. For example the DFS namespace service is generally limited to Windows based operating system platforms whereas the NFS namespace service is generally limited to Unix based operating system platforms.

The Virtual File Manager VFM developed by NuView Inc. and available from Network Appliance Inc. NetApp provides a namespace service that supports various protocols operating on various file server platforms such as NetApp filers and DFS servers. The VFM namespace service is well known and described in 4.0 2001 2003 and VFM 4.0 2001 2003.

A large scale storage system environment may include many e.g. hundreds of storage systems hosting resources embodied as e.g. storage and namespace objects. As used herein namespace objects include namespaces link points and shares whereas storage objects include servers files and disks. In order to perform namespace and storage management in such a large scale storage system environment it is desirable to provide a management application executing on a management console that enables users to manage multiple storage system resources efficiently e.g. as one or more groups of managed objects. In addition it is desirable to provide a management application that allows users to efficiently operate on these groups of objects simultaneously.

Often users are required to provide appropriate credentials e.g. user name and password in order to access the storage system resources for purposes of performing operations thereon. Conventional management consoles are generally limited in their abilities to dynamically acquire such credentials when needed i.e. on demand . As a result the user credentials are typically previously acquired and stored for use by the consoles thereby requiring expensive persistent storage capabilities on the management consoles. Accordingly it is further desirable to provide a management application executing on a management console that enables users to provide their credentials as needed on demand when accessing storage system resources.

The disadvantages of the prior art are overcome by providing a namespace and storage management NSM application having an infrastructure configured to enable efficient management of resources in a storage system environment. The NSM application executes on a NSM console and interacts with an NSM server to integrate namespace management and storage management in the storage system environment. The NSM server in turn interacts with one or more remote agents installed on host machines in the environment to convey application programming interface API function calls hereinafter APIs that enable remote management of the resources. Notably the NSM application and NSM console cooperates with the NSM server and remote agent to create an integrated management framework that provides an underlying infrastructure that supports various heterogeneous storage access protocols within a single logical namespace service.

According to one aspect of the invention the NSM application infrastructure comprises one or more client presentation layers disposed over a library layer that is embodied as graphical user interface GUI and API components. To facilitate support for various client presentation layers the library layer is apportioned into a GUI toolkit configured to produce reusable GUI components and an API toolkit configured to produce reusable API components that in the illustrative embodiment are directed to namespace and storage management functions. The API toolkit handles thread management as well as API processing and communication with the NSM server whereas the GUI components and their implementations are handled by the client presentation layer and GUI toolkit.

According to another aspect of the invention the API toolkit comprises an API client layer a managed object layer a thread pool layer and a credential handling layer. The API client layer illustratively embodies an API library configured to generate APIs used to interact with the NSM server. The managed object layer illustratively provides a plurality of templates that describes data and behavior associated with instances of managed objects as well as interfaces that enable operations on those objects. The thread pool layer utilizes a plurality of worker threads to process an operation that is apportioned among the threads into manageable APIs directed to the managed objects. The credential handling layer provides among other things a credential collection function that collects user credentials needed to access the resources on demand .

Each client may comprise an application executing on an operating system of a general purpose computer that interacts with the file servers in accordance with a client server model of information delivery. That is the client may request the services of a server and the server may return the results of the services requested by the client by exchanging packets over the network . The client may issue packets including storage e.g. file based access protocols such as the Common Internet File System CIFS protocol or Network File System NFS protocol over the Transmission Control Protocol Internet Protocol TCP IP when accessing information in the form of e.g. files and directories.

To facilitate client access to the information stored on the server a file server executing e.g. the Windows operating system typically exports units of storage e.g. CIFS shares. A client may access information of the share by mounting the share and issuing a CIFS protocol access request that specifies a uniform naming convention UNC path to the share. Although the illustrative embodiment is directed to a Windows file server that is accessed using the CIFS protocol the invention described herein is not so limited and may also apply to other servers such as Unix file servers and NetApp filers that are accessible using other file access protocols such as the NFS protocol. The client connects to file server when accessing the share typically by specifying the IP address or identity of the file server.

However instead of requiring that the client know the specific identity of the server in order to access the share a namespace server such as the conventional Distributed File System DFS server provides a namespace service that removes the specificity of server identity. Using the DFS service a unique pathname in the form of a UNC pathname is created for the share that the DFS server translates to an actual location of the share in the network. For example assume a client application issues a CIFS request to access information of a share stored on a file server in the environment . The request is passed through various layers of the client s operating system including e.g. a CIFS redirector. Before issuing a CIFS packet directed to a UNC pathname specified by the client application the redirector contacts the DFS server to determine whether there is a different actual pathname needed to access the information. If so the DFS server returns that actual pathname to the redirector which then uses that pathname to create the CIFS packet for transmission over the network. The DFS namespace service thus provides a level of indirection to a share that resides on a file server in the environment .

Although the illustrative embodiment is directed to a DFS namespace service provided by the Windows operating system executing on a DFS server the invention described herein is not limited and may also apply to other namespace services such as the NFS namespace provided by the Unix operating system executing on a conventional Name Information Service NIS server. Each service constructs a namespace to facilitate management of information using a layer of indirection between a file server and client accessing a shared storage resource share on the server. However these namespace services are created on heterogeneous server platforms which lead to incompatibility and non interoperability with respect to management of different namespaces by e.g. an administrator user .

In the illustrative embodiment a namespace and storage management NSM server is provided that integrates namespace management and storage management in storage system environment . The NSM server includes an integrated management framework that provides an underlying infrastructure that supports various heterogeneous storage access protocols within a single logical namespace service. To that end the NSM server cooperates with a NSM console and a remote agent to create the integrated management framework. The integrated management framework in turn allows the NSM server to interact with any namespace server such as a DFS server configured to handle CIFS protocol requests or a NIS server configured to handle NFS protocol requests directed to namespace services.

An operating system portions of which is typically resident in memory and executed by the processing elements functionally organizes the server by inter alia invoking operations in support of storage services implemented by the server. In the illustrative embodiment the operating system is preferably the Windows operating system although it is expressly contemplated that any appropriate operating system such as the Unix operating system may be enhanced for use in accordance with the inventive principles described herein. The operations invoked by the operating system are illustratively namespace and storage operations in support of an integrated management framework provided by the server. It will be apparent to those skilled in the art that other processor and memory means including various computer readable media may be used for storing and executing program instructions pertaining to the invention described herein.

The NSM server generally provides its storage services through the execution of software modules such as processes. These services are illustratively implemented as separately scheduled processes and or daemons that execute in user space of operating system to provide the integrated management framework . As used herein a process refers to an instance of a program being executed by e.g. the processor and a thread is an instance of a sequence of the process s program code. is a schematic block diagram of the integrated management framework that may be advantageously used with the present invention. The integrated management framework provides a logical namespace service that is based on extensions to underlying storage management technology and other technological components. Notably these extensions are embodied as library functionality.

In the illustrative embodiment the underlying storage management technology is embodied as DataFabric Manager DFM technology available from Network Appliance Inc. Sunnyvale Calif. and described in 3.2 1994 2004 which is hereby incorporated by reference. Broadly stated the DFM technology comprises a set of coordinating processes including an application is programming interface API server a scheduler an Event daemon a Monitor including a Discovery daemon and a database interface DBI configured to interact with an embedded database . The capabilities of these processes are extended to create the integrated namespace and storage management framework through the addition of NSM library functionality . The NSM library is illustratively implemented as various library modules each of which provides namespace and storage management actions embodied as APIs.

The integrated management framework exposes a set of interfaces e.g. an API interface that is used by the NSM console and a command line interface CLI used by a communication protocol. Illustratively the communication protocol is embodied as an XML over HTTP mechanism for APIs primarily because of its ability to describe data conveyed over the network as well as the transport without describing the actual storage access protocol. An example of a communication protocol that may be advantageously used with the present invention is the ZAPI protocol available from Network Appliance Inc. Such a protocol is also easily extensible and flexibly agnostic to binary formats of specific servers and clients to thereby operate efficiently in a heterogeneous environment.

In the illustrative embodiment the integrated management framework facilitates configuration and management of pathnames in the logical namespace. That is the underlying infrastructure of the framework allows a user to manage various pathnames exported by heterogeneous namespace service and protocol implementations within the logical namespace. This aspect of the framework involves creation of a layer of abstraction that presents to a client a notion of the logical namespace that is accessible via a particular storage access protocol. As noted the various heterogeneous namespace services are not interoperable with respect to user management the integrated framework extracts logical views e.g. pathnames from the namespaces exported by the heterogeneous services stores those pathnames in database and then configures the pathnames so that they are accessible in the logical namespace via the storage access protocol.

In storage and networking environments some operations can only be executed if a user such as a system administrator is logged into a server on which the operations are to be performed e.g. the NSM server. In other words a remote operation that is to be invoked on the server can only be performed if the user is logged into the server. The NSM console and remote agent of the integrated management framework address this problem. Illustratively the NSM console is a component of the framework that executes an NSM application having a JAVA based interface and the remote agent is a software module installed on a host machine such as a server which manages a particular namespace e.g. a DFS server. Using the communication protocol the NSM console issues APIs to the NSM server which in turn issues APIs that are invoked on the remote agent to perform actions requested by the user.

Essentially the remote agent is a thin web server that includes programmatic glue to enable installation of plug in modules plug ins . An example of a plug in is a namespace management module that allows remote access and management of data e.g. pathnames by the NSM server . Notwithstanding the particular namespace the integrated management framework involves installation of a remote agent on a server that manages the particular namespace and interacts with the NSM server via APIs exposed by the remote agent.

Illustratively the remote agent is installed on a machine that hosts a DFS server of a Windows DFS environment. The namespace management plug in module may in turn be installed on the remote agent to enable communication with the NSM server when accessing namespace information stored on the DFS server. Specifically the NSM server issues APIs in connection with the communication protocol to instruct the remote agent to perform certain actions. For example in order to construct or change pathnames in the logical namespace a user interacts with the NSM console to access that namespace by in effect invoking a set of APIs on the NSM server which in turn invokes a set of APIs on the remote agent . Once the NSM server has cooperated with the DFS server to construct the pathnames those servers are no longer involved in client data accesses.

It should be noted that the underlying directory data structures used in the logical namespace reside on the namespace server providing the particular namespace service such as a DFS server. That is the namespace server implements the basic namespace the NSM server provides a service for configuring that namespace. To that end the NSM server cooperates with the remote agent to acquire a copy of the namespace directory structures from the namespace server and stores the copy on the embedded database . The NSM server then cooperates with the NSM console to allow a user to manipulate configure the copy. Once configuration is complete the server cooperates with the remote agent to push store the manipulated copy of directory structures back to the namespace server .

The Monitor is illustratively embodied as a multi threaded process having a collection of individual monitor threads each of which is scheduled by the scheduler . The Monitor cooperates with the remote agent to communicate with one or more machines devices in the storage system environment using SNMP RSH etc to collect any type of storage or data namespace object information e.g. volume and or qtree information as well as information about namespace servers available in the environment and to that end functions as a data collector. Illustratively each monitor thread is configured to collect information about a particular object in the environment. Extensions to the Monitor described herein are directed to namespace and agent management each of which is illustratively embodied as an individual monitor thread.

As data is collected the Monitor determines whether it needs to notify any processes of some resulting condition. For example an individual monitor thread may detect a threshold and the occurrence of some type of event. As used herein an event is a synchronous notification with a severity attribute. By configuring thresholds the NSM server can determine when an event occurs. If a threshold is exceeded the Monitor communicates with the Event daemon to notify it of that event. Thus the Monitor is configured to detect certain events and in response generate event notifications to the Event daemon . The Event daemon then determines what if any further action is needed e.g. send an SMTP alert an email an SNMP trap and records the event in the embedded database .

The embedded database is illustratively implemented as a Sybase relational database that exports a set of Structured Query Language SQL function calls that enable storage retrieval of data such as namespace objects to from the database. A schema of the database is configured to efficiently capture characteristics of a namespace independent of the storage access protocol such as NFS or CIFS. The database is illustratively organized as a plurality of tables each of which can be accessed by processes within the NSM server. The DBI is illustratively embodied as a SQL interface to the database and its associated tables although it will be understood to those skilled in the art that the DBI may be embodied as any other type of database protocol interface depending on the actual implementation of the database e.g. an Oracle database.

The API server is illustratively embodied as a multi threaded process that is configured to implement the APIs used by the NSM console to access the database and manipulate information stored thereon. The API server also implements the communication protocol APIs used to interact with the remote agent . Accordingly extensions to the API server are primarily directed to those APIs required to manipulate the database and the remote agent. For example APIs are invoked by a user via the NSM console to manipulate modify update the embedded database . The API server updates the database with respect to user configuration requests and the Monitor periodically queries polls the database for any state information change. Depending upon the change the API server may cooperate with the Monitor to instruct data collection from the remote agent . After receiving the collected information from the remote agent the Monitor updates the database and the Event daemon .

The present invention is directed to the NSM application having an infrastructure configured to enable efficient management of resources in a storage system environment. The NSM application executes on the NSM console and interacts with the NSM server to integrate namespace management and storage management in storage system environment . The NSM server in turn interacts with one or more is remote agents installed on host machines in the environment to convey API function calls hereinafter APIs that enable remote management of the resources. In an alternate embodiment however the NSM application can interact directly with machines hosting the remote agents. As noted the NSM application and NSM console cooperates with the NSM server and remote agent to create the integrated management framework that provides an underlying infrastructure that supports various heterogeneous storage access protocols within a single logical namespace service.

In the illustrative embodiment the NSM application is a lightweight JAVA based client application executing on the NSM console which is embodied as a computer having e.g. a Windows Linux or Solaris operating system platform. The NSM application is illustratively a single process that as a JAVA based application is characterized by a plurality of threads that can be easily ported to multi platform instantiations. However the NSM application is lightweight in that it does not require a persistent database and substantially all operations involve APIs executed on other host machines and servers.

Broadly stated the NSM application spawns a GUI thread that is used by the is client presentation layer and GUI toolkit to provide GUI components that enable a user to input e.g. commands for managing selected objects on various servers . The client presentation layer translates the command to an operation and provides the operation an operation failure handler and a group of managed objects to the API toolkit . The API toolkit processes the operation to generate a plurality of APIs and spawns a plurality of threads worker threads to manage the APIs directed to the managed objects of the group. As used herein the term API denotes a collection of methods functions routines exposed by e.g. processes of the integrated management framework to which other processes issue calls. When a problem failure arises the API toolkit calls the operation API handler which may result in the presentation of a GUI component e.g. a dialog by the client presentation layer . Notably the behavior of the API in light of a failure is specified by the client presentation layer as such the API toolkit handles API failures according to functionality provided by the client presentation layer .

The managed object layer illustratively provides a plurality of templates e.g. JAVA classes that describes data and behavior associated with instances of managed objects as well as interfaces that enable operations on those objects as e.g. programming constructs. As used herein a managed object may represent any namespace and or storage resource that has a backing API on a host machine or server that is the managed object may represent any resource for which the machine or server exports APIs for management. To that end the managed objects comprise managed namespace objects representing e.g. namespaces link points and shares and managed storage objects representing e.g. servers volumes files and disks. The managed object layer interacts with the API client layer to package these managed objects within the XML tags.

The thread pool layer utilizes a plurality of worker threads to process an operation that is apportioned among the threads into manageable APIs directed to the managed objects. This layer of the API toolkit also provides a thread pooling function that controls the number of simultaneously executing worker threads so as not to consume substantial processing resources e.g. CPU on the NSM console . Often a user may select a group of managed objects to perform an operation thereon. In such a situation the user is interested in an overall result of the operation across the group rather than for each individual object. Accordingly the thread pool layer further maintains a data structure embodied as a result tracker that is adapted to monitor the progress of the APIs and provide a completion notification e.g. success or failure summarizing the thread operation results on the objects. This layer also provides functionality adapted to force time outs on APIs that would otherwise be subject to arbitrary network delays due to e.g. non responsive servers.

The credential handling layer provides a credential collection function that collects user credentials e.g. user name and password needed to access the resources on demand using e.g. an authentication callback interface to a GUI component e.g. a dialog . This layer further maintains the collected credentials in a local cache note that the NSM console does not persistently store credentials . Caching of the credentials allows the credential handling layer to determine whether previously collected credentials can be used to satisfy pending requests by worker threads for permission to access the resources in accordance with e.g. a credential sharing function. For example the credential sharing function may illustratively attempt to resolve all pending credential requests for each server using the cached credentials and prompt a user only when a request cannot be resolved i.e. when the cached credentials do no include the necessary credential to perform a pending request. Alternatively the credential sharing function may use one set of cached credentials per server to resolve the requests and only prompt the user on failure to resolve. In addition the credential handling layer provides a locking mechanism that limits the number of dialogs that may be displayed on the NSM console at a time when collecting credentials.

Specifically in the illustrative embodiment the credential handling layer coordinates access by the worker threads to the presentation of a dialog used to collect and share credentials. That is credential collection involves the use of the dialog that may be displayed by the threads to collect credentials. Each worker thread that manages a failed API may initiate display of the dialog on the NSM console to request the credentials from the user in accordance with the on demand credential collection function. However assume the operation provided by the client presentation layer is decomposed into e.g. hundreds of APIs managed by corresponding worker threads . If all of these APIs fail simultaneously there may be hundreds of dialogs appearing on the NSM console at a time. To obviate this situation the locking mechanism of the credential handling layer ensures that only a limited number of worker thread s interacts with the client presentation layer to control display of a limited number of dialogs e.g. one at a time on the NSM console . In addition credential sharing allows the user to enter the credentials into the dialog and for those credentials that may be used to access managed objects on various servers share those credentials among the worker threads .

In Step the NSM server transmits the APIs to the remote agent and in Step the remote agent forwards APIs to the servers hosting the managed objects. Note that the remote agent communicates with an appropriate storage access protocol server e.g. a CIFS server of the operating system on each server using e.g. Win32 API remote procedure calls RPCs over the network. In Step a determination is made as to whether user credentials are provided to permit access to the managed objects. Note also that this determination may be needed because the credentials are simply unavailable empty or because an attempt to execute an API against a server using available credentials may fail due to bad stale credentials . If the credentials are successfully provided the servers execute the APIs directed to the managed objects in Step and the procedure ends at Step . However if user credentials are not provided or if an API attempt fails because the credentials provided are bad stale in Step a failure notification is returned to the NSM application via the NSM server for each attempted RPC communication between the agent and server indicating failure of the API due to missing user credentials.

In Step the credential handling layer of the API toolkit cooperates with the client presentation layer to prompt the user on demand to provide its credentials permission to access the managed objects on the server. Furthermore the credential handling layer ensures that e.g. only one worker thread interacts with the client presentation layer to control display of only one dialog at a time on the NSM console Step . Illustratively control of the dialog is not passed off to another worker thread that is waiting on credential collection until the current thread completes such collection. In Step the user enters its credentials to the dialog and in Step the credential handling layer shares where appropriate those credentials among worker threads waiting on the dialog. In Step the API client layer formats and sends the credentials with APIs if needed to the servers via the NSM server and remote agents to enable execution of the APIs on the managed objects and the procedure returns to Step .

While there has been shown and described an illustrative embodiment of an NSM application having an infrastructure configured to enable efficient management of resources in a storage system environment it is to be understood that various other adaptations and modifications may be made within the spirit and scope of the invention. For example the presentation of a dialog used to collect share credentials is an illustrative implementation of the credential sharing function of the credential handling layer . Here the actual behavior of this function is specified by the presentation layer and is independent of the library . In an alternate implementation the worker threads may be directed to a file containing the credentials rather than prompting a user with the dialog . This alternate behavior is useful for automating execution of the application when interaction with the user is not possible e.g. automated testing .

The foregoing description has been directed to specific embodiments of this invention. It will be apparent however that other variations and modifications may be made to the described embodiments with the attainment of some or all of their advantages. For instance it is expressly contemplated that the procedures processes layers and or modules described herein may be implemented in hardware software embodied as a computer readable medium having executable program instructions firmware or a combination thereof. Accordingly this description is to be taken only by way of example and not to otherwise limit the scope of the invention. Therefore it is the object of the appended claims to cover all such variations and modifications as come within the true spirit and scope of the invention.

