---

title: Methods and systems for malware detection based on environment-dependent behavior
abstract: The present disclosure is directed to methods and systems for malware detection based on environment-dependent behavior. Generally, an analysis environment is used to determine how input collected from an execution environment is used by suspicious software. The methods and systems described identify use of environmental information to decide between execution paths leading to malicious behavior or benign activity. In one aspect, one embodiment of the invention relates to a method comprising monitoring execution of suspect computer instructions; recognizing access by the instructions of an item of environmental information; identifying a plurality of execution paths in the instructions dependant on a branch in the instructions based on a value of the accessed item of environmental information; and determining that a first execution path results in benign behavior and that a second execution path results in malicious behavior. The method comprises classifying the computer instructions as evasive malware responsive to the determination.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09361459&OS=09361459&RS=09361459
owner: LASTLINE, INC.
number: 09361459
owner_city: Santa Barbara
owner_country: US
publication_date: 20130419
---
The present invention relates generally to the field of computer security. In general a computing device may have one or more vulnerabilities that can be leveraged by malicious code to compromise the computing device. In addition malicious code might be introduced onto a computing device by deceiving the user. Computer security is improved through the detection of malicious software malware that uses malicious code to exploit vulnerabilities or deceives the user in order to repurpose infected computers. Once malware is detected the deceptive behavior is identified and or the exploits are understood security systems may be designed to recognize and block the malware and the vulnerabilities may be patched.

The present disclosure is directed to methods and systems for malware detection based on environment dependent behavior. Generally an analysis environment is used to determine how input collected from an execution environment is used by suspicious software. The methods and systems described identify where an execution path alternatively leads to benign or malicious behavior.

In one aspect one embodiment of the invention relates to a method for classifying malicious computer code. The method comprises monitoring the execution of a computer program comprising suspicious computer code and recognizing access by the computer program of an item of environmental information. The method comprises identifying a plurality of execution paths in the computer program dependant on a branch in the computer program based on a value of the accessed item of environmental information. The method comprises determining that a first execution path in the plurality of execution paths results in benign behavior and that a second execution path in the plurality of execution paths results in malicious behavior. The method comprises classifying the computer program as evasive malware responsive to the determining.

In some embodiments the method further comprises executing the computer program in a controlled computing environment. In some embodiments the controlled computing environment is a virtual machine. In some embodiments the controlled computing environment is based on hardware supported virtualization. In some embodiments monitoring execution of the computer program comprises monitoring the controlled computing environment. In some embodiments monitoring execution of the computer program comprises monitoring one or more computer memory elements. In some embodiments the method further comprises altering the accessed item of environmental information to cause execution of the second path in the plurality of execution paths in the computer program.

In one aspect one embodiment of the invention relates to a system for classifying malicious computer code the system comprising one or more computing processors configured to monitor execution of a computer program comprising suspicious computer code recognize access by the computer program of an item of environmental information identify a plurality of execution paths in the computer program dependant on a branch in the computer program based on a value of the accessed item of environmental information determine that a first execution path in the plurality of execution paths results in benign behavior and that a second execution path in the plurality of execution paths results in malicious behavior and classify the computer program as evasive malware responsive to the determining.

In some embodiments the system comprises one or more computing processors configured to provide a controlled computing environment and the monitored computer program executes in the controlled computing environment. In some embodiments the controlled computing environment is a virtual machine. In some embodiments the controlled computing environment is based on hardware supported virtualization. In some embodiments the processors are configured to monitor execution of the computer program by monitoring the controlled computing environment. In some embodiments the processors are configured to monitor execution of the computer program by monitoring one or more computer memory elements. In some embodiments the processors are further configured to alter the accessed item of environmental information to cause execution of the second path in the plurality of execution paths in the computer program.

In general in some embodiments access by the computer program of an item of environmental information may include when the computer program reads one or more files the computer program reads one or more registry keys the computer program reads a variable maintained by the operating system the computer program queries an event handler the computer program queries an event queue the computer program interacts directly with hardware the computer program interacts with a network the computer program interacts with a device driver and or when the computer program interacts with the BIOS or firmware. A branch in the computer program may be based on a value of the accessed item of environmental information when the computer program compares the value of the accessed item with a second information item. The second information item may be a second item of environmental information. The second information item may be internal to the monitored computer program.

These and other aspects and embodiments are discussed in detail below. The foregoing information and the following detailed description include illustrative examples of various aspects and embodiments and provide an overview or framework for understanding the nature and character of the claimed aspects and embodiments. The drawings provide illustration and a further understanding of the various aspects and embodiments and are incorporated in and constitute a part of this specification.

Following below are more detailed descriptions of various concepts related to and embodiments of methods apparatuses and systems introduced above. The various concepts introduced above and discussed in greater detail below may be implemented in any of numerous ways as the concepts described are not limited to any particular manner of embodiment. Examples of specific embodiments and applications are provided primarily for illustrative purposes.

In general a computing device connected to a data network may have one or more vulnerabilities that can be leveraged to compromise the computing device. Vulnerabilities include unintentional program flaws such as a buffer with inadequate overrun prevention and intentional holes such as an undisclosed programmatic backdoor. Malicious code can and has been developed to exercise these various vulnerabilities to yield the execution of code under the control of an attacker. Malicious code implemented to target a particular vulnerability is sometimes referred to as an exploit. For example malicious code may access an apparently benign interface and cause a buffer overflow resulting in the placement of unauthorized code in the execution stack where it may be run with elevated privileges. Such an attack could execute an exploit causing the buffer overflow and enabling an unauthorized party to obtain administrative control over the computing device. Commonly the exploit code downloads additional components of the malware and modifies the operating system to become persistent. The computing device now compromised may be used for further attacks on other computing devices in the network or put to other malicious purposes.

Computing devices may also be compromised by deceiving a user into installing malicious software. For example the malicious software may be packaged in a way that is appealing to the user or in a way that makes it similar to another known benign program e.g. a program to display a video . A user may be deceived into installing malicious software without the user understanding what he or she has done.

Some compromised machines are configured to communicate with a remote endpoint e.g. a command and control C C system. For example a compromised machine may check in with a C C to receive instructions for how the compromised machine should be used e.g. to send unsolicited e mails i.e. spam or to participate in a distributed denial of service attack D DOS . Some malicious attackers use generic domain names for the C C in an effort to go unnoticed. A compromised machine is sometimes referred to as a Bot or a Zombie machine. A network of these machines is often referred to as a botnet. 

Malicious code may be embodied in malicious software malware . As used herein malware includes but is not limited to computer viruses worms Trojans rootkits adware and spyware. Malware may generally include any software that circumvents user or administrative controls. Malicious code may be created by an individual for a particular use. Generally because malicious activity can happen in many forms it is desirable to recognize previously unknown malicious code.

In some instances malware may be designed to avoid detection. For example malware may be designed to load into memory before malware detection software starts during a boot up phase. Malware may be designed to integrate into an operating system present on an infected machine. Malware may bury network communication in apparently benign network communication. Malware may connect to legitimate network endpoints to obscure connections to control servers or other targets. In some instances malware behaves in an apparently benign manner until a trigger event e.g. a set day arrives. In some instances malware is reactive to environmental conditions. For example malware may be designed to behave in an apparently benign manner in the presence of malware detection software.

At step the program accesses environmental information. The computer program might read one or more computer files. The computer program might read a variable maintained by the operating system. The computer program might read one or more registry keys. The computer program might query an event handler. The computer program might query an event queue e.g. a kQueue. The computer program might interact with a device driver. The computer program might interact directly with hardware. For example the computer program may directly read from a memory register. The computer program might interact with the computer s BIOS or firmware. The accessed item of environmental information may provide the program with control information or context that impacts the behavior of the program.

At step the program executes a comparison using the item of environmental information accessed at step . Generally the comparison results in a branch. That is if a value of the item of accessed environmental information satisfies a condition e.g. greater than a threshold equal to a value not equal to zero etc. then execution will jump to a specific instruction and otherwise execution will proceed with a different instruction typically the next instruction in the sequence of instructions being executed . The program may utilize a case statement based on the environmental information accessed at step . The program may alter the item of environmental information prior to a branch instruction for example the program may add or subtract another value to the accessed item. At step the execution flow is impacted by the accessed item of environmental information either altered or unaltered.

The program execution flow proceeds either to step where the execution flow results in benign behavior or to step where the execution flow results in malicious behavior. At step the execution flow results in benign behavior. That is the computer program does not exhibit malicious characteristics. Generally if the computer program is suspected of comprising malicious code it is possible that the computer program is attempting to evade detection by concealing the malicious code in the presence of the accessed item of environmental information. In some embodiments the computer program memory may be altered to change the value accessed and the program caused to re execute from the branch. In some embodiments the execution environment may be altered to change the value accessed and the program caused to re execute from the branch. In some embodiments additional events are triggered. In some embodiments the branch instruction is reversed so that the same input causes the opposite result. The suspect code is then analyzed to identify how it reacts to the change.

At step the execution flow results in malicious behavior. That is the computer program exhibits malicious characteristics. For example the computer program may attempt to install a rootkit or try to terminate a process e.g. a process associated with virus protection software . Generally if the computer program execution results in an undesirable computer state the program may comprise malicious code. It is possible that the computer program is designed to attempt to evade detection by concealing the malicious code in the presence of the accessed item of environmental information. In some embodiments the computer program memory may be altered to change the value accessed and the program caused to re execute from the branch. In some embodiments the execution environment may be altered to change the value accessed and the program caused to re execute from the branch. In some embodiments additional events are triggered. In some embodiments the branch instruction is reversed so that the same input causes the opposite result. The suspect code is then analyzed to identify how it reacts to the change.

Generally a computer program may be considered evasive malware if the computer program exhibits or results in malicious behavior under specific conditions. An evasive malicious program may attempt to conceal malicious behavior based on environmental information. An evasive malicious program may access environmental information as in step execute a comparison using the accessed information as in step and depending on the comparison the resulting execution flow may result in benign behavior as in step or result in malicious behavior as in step . A classification system may execute a program in a controlled environment and manipulate the flow of execution by altering the program memory and or accessed environmental information.

In some embodiments one or more computing systems described herein are constructed to be similar to the computing system of . For example a user may interact with an input device e.g. a keyboard mouse or touch screen to access an interface e.g. a web page over the network . The interaction is received at the user s device s interface and responses are output via output device e.g. a display screen touch screen or speakers.

The computing device may communicate with one or more remote computing devices via a data network . The network can be a local area network LAN such as a company intranet a metropolitan area network MAN or a wide area network WAN such as the Internet and the World Wide Web. The network may be any type and or form of network and may include any of a point to point network a broadcast network a wide area network a local area network a telecommunications network a data communication network a computer network an asynchronous transfer mode ATM network a synchronous optical network SONET a wireless network an optical fiber network and a wired network. In some embodiments there are multiple networks between participants for example a smart phone typically communicates with Internet servers via a wireless network connected to a private corporate network connected to the Internet. The network may be public private or a combination of public and private networks. The topology of the network may be a bus star ring or any other network topology capable of the operations described herein.

In some embodiments one or more devices are constructed to be similar to the computing system of . In some embodiments a server may be made up of multiple computer systems . In some embodiments a server may be a virtual server for example a cloud based server accessible via the network . A cloud based server may be hosted by a third party cloud service host. A server may be made up of multiple computer systems sharing a location or distributed across multiple locations. The multiple computer systems forming a server may communicate using the user accessible network . The multiple computer systems forming a server may communicate using a private network e.g. a network distinct from a publicly accessible network or a virtual private network within a publicly accessible network.

The processor may be any logic circuitry that processes instructions e.g. instructions fetched from the memory or cache . In many embodiments the processor is a microprocessor unit such as those manufactured by Intel Corporation of Mountain View Calif. those manufactured by Motorola Corporation of Schaumburg Illinois those manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor those manufactured by International Business Machines of White Plains N.Y. or those manufactured by Advanced Micro Devices of Sunnyvale Calif.. The computing device may be based on any of these processors or any other processor capable of operating as described herein. The processor may be a single core or multi core processor. The processor may be multiple processors.

The I O interface may support a wide variety of devices. Examples of an input device include a keyboard mouse touch or track pad trackball microphone touch screen or drawing tablet. Example of an output device include a video display touch screen speaker inkjet printer laser printer dye sublimation printer or 3D printer. In some embodiments an input device and or output device may function as a peripheral device connected via a peripheral interface .

A peripheral interface supports connection of additional peripheral devices to the computing system . The peripheral devices may be connected physically as in a FireWire or universal serial bus USB device or wirelessly as in a Bluetooth device. Examples of peripherals include keyboards pointing devices display devices audio devices hubs printers media reading devices storage devices hardware accelerators sound processors graphics processors antennas signal receivers measurement devices and data conversion devices. In some uses peripherals include a network interface and connect with the computing system via the network and the network interface . For example a printing device may be a network accessible printer.

The computing system can be any workstation desktop computer laptop or notebook computer server handheld computer mobile telephone or other portable telecommunication device media playing device a gaming system mobile computing device or any other type and or form of computing telecommunications or media device that is capable of communication and that has sufficient processor power and memory capacity to perform the operations described herein. For example the computing system may comprise a gaming device such as a PLAYSTATION PS 1 2 3 4 x or PERSONAL PLAYSTATION PORTABLE PSP device manufactured by the Sony Corporation of Tokyo Japan a NINTENDO GAME BOY or WII device manufactured by Nintendo Co. Ltd. of Kyoto Japan or an XBOX or XBOX 360 device manufactured by the Microsoft Corporation of Redmond Wash. For example the computing system may comprise a tablet device such as one of the IPAD family of devices manufactured by Apple Computer of Cupertino Calif.

The process space is an abstraction for the processing space managed by the operating system . Generally program code is loaded by the operating system into memory allocated for respective programs and the processing space represents the aggregate allocated memory. Software typically executes in the process space . Malware detection software running in the process space may have a limited view of the overall system as the software is generally constrained by the operating system .

The operating system generally controls the process space and provides access to hardware e.g. via device drivers . An operating system typically includes a kernel and additional tools facilitating operating of the computing platform. Generally an operating system may provide the process space with various native resources e.g. environmental variables and or a registry . Examples of operating systems include any of the operating systems from Apple Inc. e.g. OS X or iOS from Microsoft Inc. e.g. Windows NT Windows XP Windows Server 2008 Windows 7 or Windows 8 from Google Inc. e.g. Chrome or Android or Bell Lab s UNIX and its derivatives e.g. BSD FreeBSD NetBSD Linux Solaris AIX or HP UX . Some malware may attempt to modify the operating system . For example a rootkit may install a security backdoor into the operating system.

Environmental variables may include but are not limited to a clock reporting a time and date file system roots and paths version information user identification information device status information e.g. display active or inactive or mouse active or inactive an event queue e.g. graphic user interface events and uptime. In some embodiments an operating system may provide context information to a process executing in process space . For example a process may be able to determine if it is running within a debugging tool.

An operating system may provide a registry e.g. Windows Registry. The registry may store one or more environmental variables . The registry may store file type association permissions access control information path information and application settings. The registry may comprise entries of key value pairs.

In some embodiments the operating system runs on a hypervisor which provides a virtualized computing environment. The hypervisor also referred to as a virtual machine monitor VMM creates one or more virtual environments by allocating access by each virtual environment to underlying resources e.g. the underlying devices and hardware . Examples of a hypervisor include the VMM provided by VMware Inc. the XEN hypervisor from Xen.org or the virtual PC hypervisor provided by Microsoft. The hypervisor may run in the context of a second operating system or may run directly on the hardware . The hypervisor may virtualize one or more hardware devices including but not limited to the computing processors available memory and data storage space. The hypervisor can create a controlled computing environment for use as a testbed or sandbox. Generally software executing in the process space is unaware of the hypervisor .

The hypervisor may host a monitor for monitoring the operating system and process space . The monitor can detect changes to the operating system . The monitor can modify memory virtualized by the hypervisor . The monitor can be used to detect malicious behavior in the process space .

Device drivers generally provide an application programming interface API for hardware devices. For example a printer driver may provide a software interface to a physical printer. Device drivers are typically installed within an operating system . Device drivers may be modified by the presence of a hypervisor e.g. where a device is virtualized by the hypervisor .

The hardware layer may be implemented using the computing device described above. The hardware layer represents the physical computer resources virtualized by the hypervisor .

Environmental information may include files registry keys for the registry environmental variables or any other variable maintained by the operating system. Environmental information may include an event handler or an event queue. For example a Unix kQueue. Environmental information may include presence or activity of other programs installed or running on the computing machine. Environmental information may include responses from a device driver or from the hardware e.g. register reads or responses from the BIOS or other firmware .

At step the monitor monitors execution of a computer program comprising suspicious computer code. The computer program executes in process space within the context of an operating system . In some embodiments the operating system is running on a virtual machine. The virtual machine may be software based may be hardware supported and or may be running on bare metal . In some embodiments the monitor controls execution of the suspect computer program.

At step the monitor detects access of an item of environmental information by the monitored computer program. The monitored program may read one or more computer files. The monitored program might read a variable maintained by the operating system. The monitored program might read one or more registry keys. The monitored program might query an event handler. The monitored program might query an event queue e.g. a kQueue. The monitored program might interact with a network. The monitored program might interact with a device driver. The monitored program might interact with the computer s BIOS or firmware. The accessed item of environmental information may provide the monitored program with control information or context that impacts the behavior of the program.

The monitored computer program may access the environmental information without user interaction. For example a computer program may periodically check a computer s clock for the current computer date and branch to malicious code only when the computer date satisfies a condition. A computer user may be completely unaware that the monitored computer program has accessed the environmental information.

In some embodiments the monitor detects access of environmental information by using a hooking mechanism. In some embodiments the monitor detects access of environmental information by using a modified device driver and or a modified operating system. In some embodiments the monitor detects access of environmental information by monitoring a virtualized environment. In some embodiments the monitor detects access of environmental information by using other user mode or kernel mode techniques to intercept environment access calls. In some embodiments the monitor uses a static program analysis technique to identify instructions that access environmental information.

At step the monitor identifies a plurality of execution paths in the computer program dependant on a branch in the computer program that is based on a value of the accessed item of environmental information. For example the monitor may identify a branch instruction in the monitored program that is dependent either directly or indirectly on a value of the accessed item of environmental information. The branch instruction may compare the value to another value internal to the program read from the environment or generated by the program.

At step the monitor determines that at least one execution path results in benign behavior and that at least one execution path results in malicious behavior. Generally the monitor causes the program to execute each of the plurality of execution paths identified in step . The monitor may create a snapshot of the computing environment at the time of the branch instruction allow execution of the program determine if execution results in benign or malicious behavior restore the computing environment to the snapshot cause execution of the program to follow the alternative branch and determine if the alternate execution results in benign or malicious behavior. The monitor can cause execution of the program to change by altering the memory space of the program itself by altering the environmental information accessed by the program or by moving the execution stack to the branched instruction address. In some embodiments the monitor can determine that the paths lead to benign or malicious behavior without the need to execute the code e.g. by using static analysis techniques.

At step the monitor classifies the computer program as evasive malware if the plurality of execution paths include both a path resulting in benign behavior and a path resulting in malicious behavior.

It should be understood that the systems and methods described above may be provided as instructions in one or more computer programs recorded on or in one or more articles of manufacture e.g. computer readable media. The article of manufacture may be a floppy disk a hard disk a CD ROM a flash memory card a PROM a RAM a ROM or a magnetic tape. In general the computer programs may be implemented in any programming language such as LISP Perl C C C PROLOG or in any byte code language such as JAVA. The software programs may be stored on or in one or more articles of manufacture as object code.

Having described certain embodiments of methods and systems it will now become apparent to one of skill in the art that other embodiments incorporating the concepts of the disclosure may be used. Therefore the disclosure should not be limited to certain embodiments but rather should be limited only by the spirit and scope of the following claims.

