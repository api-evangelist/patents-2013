---

title: Communicating information about a local machine to a browser application
abstract: The functionality of a browser application is enhanced using a browser plug-in, which enables the browser application to access portions of a file system not otherwise accessible to the browser application. The enhanced functionality provided by the browser plug-in is used in one example by an image uploading web application. The browser application may also start a task in the background, such as a task for uploading several images, and then monitor the progress of the task even when the browser application navigates away from the page that initiated the task. The browser application may use a local web server running on the client device to perform tasks, including the rendering of images and monitoring progress of long running tasks.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09471554&OS=09471554&RS=09471554
owner: Facebook, Inc.
number: 09471554
owner_city: Menlo Park
owner_country: US
publication_date: 20131028
---
This invention relates to browser plug ins for enhancing the capabilities of a browser application used to access information resources on a network.

A browser application allows a user to retrieve and present information from resources on a network such as the Internet or a private network as well as from resources on a user computer. An information resource or a resource can be a file stored on a computer for example a document an image file a video file or any other media file. In a typical use case a web server sends information to a browser application running on a client device in the form of documents written in a markup language such as Hypertext Markup Language HTML . A markup language document retrieved by a browser application can contain data and instructions that are executed on by the browser application. For example a markup language document can include scripts for execution by a scripting engine supported by the browser application. An example of a scripting language supported by browser applications is JAVASCRIPT. A markup language document may also include instructions written in the markup language for rendering and drawing a user interface on the client device by the browser application.

To avoid intentional and unintentional harm caused by instructions in the markup language document browser applications restrict the capabilities of the instructions that can be executed by a markup language document. For example a markup language document is allowed to access only restricted portions of the file system of the client device. If the markup language document instructions were allowed unrestricted access to the file system of the client device a malicious website could steal private information stored on client devices or even delete user files stored on client devices causing loss of data. The framework that restricts the capabilities of the browser application is referred to as a sandbox. Moreover the capabilities of the instructions that can be included in a markup language document are limited as compared to processes written using general purpose programming languages for example C or C . The performance obtained by implementing certain functionality using the scripting capabilities available in a markup language document can also be slow compared to an implementation using a general purpose programming language.

Embodiments of the invention enhance the capabilities of a browser application processing a markup language document which is allowed only restricted access to a portion of the file system of a client device. The client device may be a computer system a portable communication device a cell phone or any computing device that can execute a browser application. The functionality of the browser application is enhanced using a browser plug in such as a headless plug in a browser plug in that does not have a user interface for interacting with the user .

In one embodiment the browser application receives a markup language document from a website and the browser application processes the markup language document which contains instructions to access portions of a file system that are not directly accessible by the browser application. To access those portions of the file system that the browser application is restricted from accessing directly the browser application sends a request to the browser plug in module identifying the portions of the file system to be accessed. The browser application receives information associated with the identified portions of the file system from the browser plug in and uses the information according to the instructions in the markup language for example by rendering the received information for display on the client device. The information associated with the identified portions of the file system may include any information associated with a particular file including metadata associated with a file or with a directory such as a path for the file or directory a listing of directory contents thumbnails for media files in the directory or any other metadata that may be used by the browser application.

To maintain security in one embodiment the markup language document causes the browser application to use a hash value with the request for information sent to the browser plug in. The browser plug in uses the hash value to verify the authenticity of the request thereby preventing unauthorized markup language documents e.g. obtained from other websites or other unauthorized applications from invoking the functionality provided by the browser plug in.

The features and advantages described in this summary and the following detailed description are not all inclusive. Many additional features and advantages will be apparent to one of ordinary skill in the art in view of the drawings specification and claims hereof.

The figures depict various embodiments of the present invention for purposes of illustration only. One skilled in the art will readily recognize from the following discussion that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles of the invention described herein.

The quality of user experience provided by a web application can be improved if the capabilities of the instructions executed by the markup language documents used for implementing the web application are enhanced. Furthermore an enhanced instruction set for execution by a markup language document can allow development of features of web applications that may not be possible or highly cumbersome to implement without the enhanced instructions.

For example browsers are typically configured so that web application applications are prevented from accessing certain user files on a client device to avoid malicious websites from gaining such access. However this restriction is a blanket restriction that denies access to all applications including trusted applications running on authentic websites that are carefully implemented to avoid any harm to the client device. For example a web application that uploads image files from the client device to the web server to allow the user to share images to other users needs to access the user files stored on the client device. Facilitating access by the markup language document to user files on the client device allows ease of development of the applications e.g. an image sharing web application by developers and a better user experience for users faster performance and user interfaces customized specifically to particular websites applications or activities.

This access and the benefits that go along with it can be facilitated by a browser plug in. The browser plug in can provide access to various local resources available on the client device that may not be typically accessible to a markup language document. The browser plug in can also provide improved performance for tasks that are typically implemented inefficiently using the basic scripting language support available to a markup language. In an embodiment the browser plug in allows a web application to start a long running task for example uploading of images from the client device to a web server and enables a user to monitor the progress of the task periodically. The user can perform other tasks using the web application while monitoring the long running task. In an embodiment the browser plug in allows computationally intensive operations to be performed on the client device thereby reducing the load on the web server. For example image or video processing tasks can be performed on the client device. The ability to perform processing on the client can be used to reduce the amount of data transferred between the client device and the web server thereby reducing communication overhead and improving the performance of the web application.

A browser plug in is implemented using a general purpose programming language that provides more features compared to the instruction set typically available to a markup language document. The browser plug in may be based on technologies such as ActiveX or NSAPI for extending the functionality of the browser application. The plug in can be made available as a binary executable file. Since the browse plug in may be written in a programming language that cannot be invoked from a markup language document an application programming interface to the functionality provided by the browser plug in is provided using a language that can be invoked from the markup language document for example a language supported by a scripting engine of a browser application. The browser plug in must be downloaded and installed from authentic information sources to avoid downloading browser plug in code that may have been tampered with. A headless plug in is a plug in that does not have a user interface for interacting with users.

The functionality of a browser application can be extended using programs written in the JAVA programming language that are called applets. However a sandbox framework restricts the access to the client device that is available to the applet program. A signed Java applet has access to more resources of the client device compared to an unsigned jar. However a signed jar may present the user with a dialog box outlining the requested access and providing the user with an opportunity to deny the access. However for an application that is downloaded by the user from an authentic source the presentation of dialog boxes requesting user s permission to access local resources may result in an undesirable user experience in that it may be slower as well as lacking in customization for a particular purpose website or application both functionally and aesthetically .

The client devices is a computing device that can receive member input and can transmit and receive data via the network . For example the client devices may be desktop computers laptop computers smart phones personal digital assistants PDAs or any other device including computing functionality and data communication capabilities. The client devices are configured to communicate via network which may comprise any combination of local area and or wide area networks using both wired and wireless communication systems. The web server links the website hosted by server via the network to one or more client devices . The web server serves web pages as well as other web related content such as Java Flash XML and so forth. The content served by the web server is stored in the content database . In an embodiment the communication between a web server and the browser application uses the hypertext transfer protocol HTTP .

The browser application allows a user to retrieve and present information available in resources available on the internet or a private network. The web server sends documents written in a markup language for example HTML to the browser application . An information resource is identified by a uniform resource locator URL and may be a web page a media file for example image or video or any other piece of content hosted by a server . The browser application has a user interface for presenting information to the user as well as allowing the user to provide input. The user input may comprise data provided by the user or requests from the user which is sent to the server . The server hosting the website may respond by providing further information in the form of a markup language document. The markup language document comprises information and instructions for rendering the information provided and for taking actions on the client device . The browser runtime processes a markup language document and renders it for display on the user interface and takes actions based on instructions provided in the markup language document. Some embodiments of browser runtime include a scripting engine for processing instructions provided using a client side scripting language for example JAVASCRIPT. The markup language document may include instruction provided using the client side scripting language supported by the scripting engine .

Since the markup language document can contain instructions to be processed by the client device a malicious website can provide instructions harmful to the client device. The security module controls the actions of the browser runtime on the client device . For example the security module prevents the browser runtime from accessing portions of the file system on the client device . The browser runtime is allowed to access a portion of the local storage on the client device reserved for the browser. The portion of the local storage may be used by the browser runtime for caching data for storing browser cookies or other information useful for processing web pages. However the browser runtime may not be allowed to access other portions of the local storage on the client device for example the portion of the local storage that stores user files. Examples of user files stored in the local storage may include text documents images and video files stored by the user on the client device.

The browser plug in is a module that includes program code to enhance the capabilities of the browser application . The browser runtime can interact with the browser plug in to use the functionality provided by the browser plug in . The actions of the browser plug in are not subject to the constraints of the security module . Hence actions of browser runtime that may not be allowed by the security module may be facilitated by the browser plug in . For example access to local storage of user files may not be facilitated by the security module but may be allowed by the browser plug in . Since a browser plug in has the capability of bypassing the security imposed by the security module it is important for the user of the client device to make sure that the browser plug in is downloaded from an authentic and trusted source. In an embodiment the browser plug in may accept requests only if the markup language document is obtained from a predetermined domain or a set of predetermined domains. The browser plug in verifies the authenticity of the source of the markup language documents and if the markup language document is obtained from any domain other than the predetermined domains the request is denied. This prevents unauthorized domains from sending markup language documents and utilizing the capabilities of the browser plug in for malicious purposes. The browser plug in may start an upload thread for executing long running tasks requested by the browser runtime . The browser plug in can start a local web server on the client device to utilize functionality supported by a web server. The local web server is a process running on the client device. For example the local web server can be used by the browser runtime to render images available on the client device .

The browser plug in verifies the authenticity of the request to make sure that an unauthorized domain is not attempting to exploit the capabilities of the browser plug in . In an embodiment the markup language document includes instruction to generate a hash value that can be used by the browser plug in to verify the authenticity of the markup language document. The hash value can be based on a combination of different pieces of information. In an embodiment the hash value is computed based on information collected from the client device for example the process ID of the browser application. In an embodiment information used for computing the hash value includes a randomly generated numeric value. If the request for information is associated with a file the hash value computation includes the full path name of the file. Every request for information from the browser runtime to the browser plug in includes the hash value. The browser plug in independently generates the hash value based on the full path name of the file and verifies the generated value against the value provided in the request. If the hash value provided in the request to the browser plug in matches the hash value generated by the browser plug in the request is processed or else the request is denied. An unauthorized domain sending a markup language document is unlikely to know the details of the mechanism used to generate the hash value and hence is unlikely to provide a hash value that matches the value generated by the browser plug in . The hash generation mechanism can use a value called salt that is known to the web server and the browser plug in . The salt comprises random bits used as input to a hash generation function. Client specific data may be used for generation of the hash. For example the process ID of the browser application can be used as part of the salt used for hash generation. Some embodiments use a public key encryption mechanism based on hash values for authenticating the source of request to the browser plug in .

If the authenticity of the request is successfully verified the browser plug in processes the request for example by sending a corresponding request for information to the local storage of user files . Since the browser plug in is authorized to access the local storage of user files the local storage of user files sends the requested information. In some embodiments the request and response may be a function call implemented using a programming language for example C or C used for implementing the browser plug in . The browser plug in may perform processing using the information related to the file. In an embodiment the information associated with the file is metadata associated with the file for example the file type file extension an executable program associate with the file or a user preference associated with the file. The browser plug in may generate a thumbnail for an image file. The thumbnail may be generated or computed based on metadata associated with the file. For example a file with a particular extension may be displayed using a particular thumbnail associated with the file extension. Alternatively a file associated with a particular executable program may be displayed using a thumbnail associated with the corresponding executable program. In one embodiment large files for example video files that need to be uploaded to the web server can be encoding by the browser plug in on the user device so as to reduce the upload time and also to reduce the server load caused by the encoding of files.

The browser plug in sends the requested information to the browser run time . The information received is used by the browser runtime to render the markup language document for display using the user interface . In some embodiments the browser plug in may provide functionality that allows access to local resources available on the client device. For example the location of the client device can be obtained using the wireless capabilities available in the client device . In some embodiments computationally intensive tasks can be performed by the browser plug in thereby offloading work from on the web server to the client device . A video encoding task can be performed in the background while the user can perform other tasks on the web application. The user is not required to wait for the long running task to complete before navigating away from the web page executing the task.

In an embodiment the browser plug in is used for caching frequently used information on the client device to avoid the communication overhead of repeatedly sending the information from the server . In another embodiment the browser plug in is used to download program code or other information from the website hosted by server . Since the browser plug in has authentication mechanisms for verifying the source of a request the user can have confidence that the program code or information is downloaded from an authentic source. The ability to download program code from authentic sources by the browser plug in provides better user experience in installing software from the website hosted by server .

The capabilities of the browser plug in can be used by applications in various ways. shows an interaction diagram of a process in which the user interacts with the browser application to upload images stored in the local storage to the server . When the image upload application is started by receiving the appropriate web pages from the server the browser plug in is instantiated . The markup language document from server that starts the image upload application includes instructions to cause the browser runtime to request information related to the top level directories of the local storage. The browser plug in sends the information describing the top level directories to the browser runtime . The top level directories may be predetermined for example root directories of the disk drives of the client device or operating system specific directories intended for storage of user files. Browser runtime renders the top level directories and displays them in the user interface . shows a screenshot of the user interface of the image upload application showing the top level directories. The panel of the user interface shows the top level directories including the Desktop directory the Home directory and the Pictures directory.

The user can select a particular directory displayed to see contents of the directory. For example in the Pictures directory is selected by the user. The browser runtime in response to the user selection requests the directory information for the selected directory from the browser plug in . The browser plug in obtains the requested directory information and sends the requested information to the browser runtime . The browser runtime displays the information in the user interface . The panel in shows the sub directories of the selected directory including sub directories . The process of selecting directories to view the corresponding sub directories can be repeated by the user. For example the shows the user selection of the directory called Photo Booth in the panel to see its sub directories in the panel .

The requested information of a directory for example directory sent by the browser plug in may include image files. The image files in a web application are preferably displayed using thumbnails. For each image file within a directory the browser plug in sends a URL that can be used to access further information about the image file. The URL of an image file allows the browser run time to access the image file information using the local web server . For example the browser runtime can provide the URL of an image file to the local web server to request a thumbnail corresponding to the image file. The local web server processes the contents of the image file to generate a thumbnail image and sends the thumbnail image to the browser runtime . The browser runtime renders the image thumbnails received from the local web server and displays the thumbnails along with the sub directory information in the user interface . shows the panel displayed to the user interface as showing the thumbnails of the images corresponding to the image files stored in the selected directory . The access to the local web server requires the browser application to process scripts downloaded from one domain implemented by web server and manipulate properties of the document using data from another domain implemented by the local web server . The browser application may implement a same origin policy that prevents scripts loaded from one domain from processing properties of a document from another domain. An embodiment overcomes this restriction of a browser by using a data interchange format that allows execution of a dynamic script provided as a string. For example JavaScript Object Notation with Padding JSONP allows a tag that can include script code from external domains. The URL for the local web server can be embedded within the tag to retrieve information from the corresponding website. A URL can be referred to by the code running within the tag. This allows the browser plug in to work around the same origin policy of the browser application .

The user can select one or more image files using the thumbnails for uploading the image files to the server . The shows a screenshot of the image files selected by the user . The thumbnails of the image files selected by the user may be distinguished from the unselected images by displaying a border around the thumbnail of the selected image. A user interface button allows the user to indicate that the user has completed the interactions with user interface for browsing the directories and selecting the images for upload. Accordingly in one embodiment the user is presented with a user interface shown in that indicates the number of files selected by the user for uploading. also shows a user interface button that can be used to send a request to the browser runtime to start uploading the files.

The browser runtime requests the browser plug in to start the upload process for the selected images. The browser plug in starts the upload thread that executes the process of uploading the selected image files to the server . The browser plug in can obtain the status of the upload process from the upload thread and present the status to the browser runtime . The browser runtime displays the upload status to the user in the user interface . shows a screenshot of an embodiment showing the status of the upload process using a progress indicator . The number of files uploaded at any given time can be displayed. In other embodiments information related to the upload process status including the amount of data that has been uploaded or the amount of data that remains to be uploaded is shown. In an embodiment the information describing status of the task is shown as a percentage of the total amount of data that needs to be uploaded. In another embodiment the information describing status of the task is the number of files remaining to be uploaded. In another embodiment the information describing status of the task includes an estimate of time elapsed since the upload task started. In another embodiment the information describing status of the task includes an estimate of time remaining for completing the upload task.

The upload of images to the server from the client device can take significant amount of time and the user may continue to perform other activities while monitoring the progress of the upload task. The user may navigate away from the web page used for starting the upload task. As a result a new markup language document is retrieved from the web server and displayed by the browser application . A markup language document includes specific instructions that create and maintain a link with the browser plug in allowing the browser runtime to interact with the browser plug in while processing the markup language document. The instruction that creates and maintains a link with the browser plug in is called an instruction to embed the browser plug in. Not all documents provided by a domain may include instructions to embed the browser plug in since execution of these instructions may slow the processing of the markup language documents. When the user navigates away from the web page of the image uploading application a new markup language document can be received that does not include instructions to create and maintain a link to the browser plug in . The browser runtime can store information in the local storage for browser that allows a markup language document without an embed instruction for the browser plug in to communicate with the upload thread for retrieving the status of the image upload task.

As illustrated in the example of a first document received by the browser runtime from the server includes the instructions for maintaining a link to the browser plug in . The browser runtime processes the first markup language document and starts the execution of the image upload task. The first markup language document includes instructions to communicate with the local storage for the browser and save information associated with the task.

In an embodiment a browser cookie mechanism is used to store information associated with the task stored on the local storage for the browser . The browser cookie stores one or more name value pairs representing information as text strings. In an embodiment the browser cookie stores a URL for a webpage that can be accessed using the local web server and the start time of the upload task. The browser runtime can use the URL for the webpage available on the local web server to obtain the status of the upload task.

In some embodiments the URL for the webpage on the local server includes a hash value for authentication purposes. The local web server generates a hash value independently to match against the hash value of the URL to verify the authenticity of the source of the markup language document accessing the local web server . As a result markup language documents from unauthorized sources are unable to access the local web server . This prevents unauthorized websites from exploiting the local web server for malicious purposes.

In an embodiment the browser plug in is required to generate the hash value used for verifying authenticity of the source of the markup language. The browser plug in can be embedded in every web page loaded by the browser application from the server that needs to display the progress of the upload task. However embedding the browser plug in in a web page slows the loading of the web page. Hence the browser plug in is not embedded in every web page form server in order to improve the performance of the web page loads. Instead of using the browser plug in the URL including the hash value can directly be accessed from the local web server to obtain the progress information. Hence the URL is stored on the client device using the browser cookie mechanism. Subsequent web pages loaded by the browser application that do not embed the browser plug in include instructions to retrieve the URL using the corresponding browser cookie stored on the client device and use the URL to fetch the progress information.

When the user navigates away from the first markup language document the browser runtime receives and processes the second markup language document which does not embed the browser plug in . The second markup language document includes instructions to process the saved task information if available for example the browser cookie stored by the first markup language document. The browser runtime sends a request to the local storage for browser to retrieve the saved task information and the local storage returns the saved task information. The saved task information allows the browser runtime to request task information from the local web server . In response to the request the local web server polls status of the upload thread . The upload thread returns the status of the upload task to the local web server and the local web sever returns the status of the task to the browser runtime . If the task is still executing the browser runtime renders the second markup language and displays the status of the task for example as shown in .

If the upload task is complete appropriate information is displayed on the user interface and the saved information associated with the upload task may be cleared from the local storage . If the saved information associated with the upload task is cleared any subsequent markup language document loaded from server would not attempt to contact the local web server unless and until a new upload task is started. In an embodiment the task information is saved as a browser cookie and the browser cookie is cleared when the upload task is completed.

The tasks that can be monitored by the process illustrated in are not limited to upload of images but can be other tasks. For example the status of a long running computation provided by the browser plug in can be monitored by the process illustrated in . Other embodiments can monitor upload of other large files for example media files including videos audio files or large documents. In other embodiments the long running task can be a system maintenance task performed on the client device .

The foregoing description of the embodiments of the invention has been presented for the purpose of illustration it is not intended to be exhaustive or to limit the invention to the precise forms disclosed. Persons skilled in the relevant art can appreciate that many modifications and variations are possible in light of the above disclosure.

Some portions of this description describe the embodiments of the invention in terms of algorithms and symbolic representations of operations on information. These algorithmic descriptions and representations are commonly used by those skilled in the data processing arts to convey the substance of their work effectively to others skilled in the art. These operations while described functionally computationally or logically are understood to be implemented by computer programs or equivalent electrical circuits microcode or the like. Furthermore it has also proven convenient at times to refer to these arrangements of operations as modules without loss of generality. The described operations and their associated modules may be embodied in software firmware hardware or any combinations thereof.

Any of the steps operations or processes described herein may be performed or implemented with one or more hardware or software modules alone or in combination with other devices. In one embodiment a software module is implemented with a computer program product comprising a computer readable medium containing computer program code which can be executed by a computer processor for performing any or all of the steps operations or processes described.

Embodiments of the invention may also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes and or it may comprise a general purpose computing device selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a tangible computer readable storage medium or any type of media suitable for storing electronic instructions and coupled to a computer system bus. Furthermore any computing systems referred to in the specification may include a single processor or may be architectures employing multiple processor designs for increased computing capability.

Embodiments of the invention may also relate to a computer data signal embodied in a carrier wave where the computer data signal includes any embodiment of a computer program product or other data combination described herein. The computer data signal is a product that is presented in a tangible medium or carrier wave and modulated or otherwise encoded in the carrier wave which is tangible and transmitted according to any suitable transmission method.

Finally the language used in the specification has been principally selected for readability and instructional purposes and it may not have been selected to delineate or circumscribe the inventive subject matter. It is therefore intended that the scope of the invention be limited not by this detailed description but rather by any claims that issue on an application based hereon. Accordingly the disclosure of the embodiments of the invention is intended to be illustrative but not limiting of the scope of the invention which is set forth in the following claims.

