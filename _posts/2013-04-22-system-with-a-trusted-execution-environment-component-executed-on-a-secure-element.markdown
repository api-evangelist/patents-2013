---

title: System with a trusted execution environment component executed on a secure element
abstract: A distributed trusted execution environment is provided for a device, where the distributed trusted execution environment is split into two components: a trusted execution environment that is executed on a tamper-resistant secure element, and a trusted execution environment proxy that is executed on the device. The trusted execution environment proxy acts a proxy between the trusted execution environment that is executed on the secure element, and one or more hardware components or software components of the device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=08935746&OS=08935746&RS=08935746
owner: Oracle International Corporation
number: 08935746
owner_city: Redwood Shores
owner_country: US
publication_date: 20130422
---
One embodiment is directed to a computer system and more particularly to a computer system that provides a trusted execution environment.

Devices such as mobile devices and embedded devices face security issues that generally cannot be addressed solely using software solutions. For example platform limitations that are generally inherent within mobile devices and embedded devices such as slower and less capable processors can affect whether encryption can be used and to what strength password passphrase complexity how a security mechanism can interact with a user and security support for the platform. As another example operating systems of mobile devices or embedded devices can be created

with a focus on proliferation e.g. ease of use more accessible . Such a focus can be at odds with security measures and technologies and can leave operating systems of such devices more vulnerable to security risks.

Some devices offer a specific hardware security mechanism that defines a trusted execution mode which can provide exclusive access to sensitive hardware components and or sensitive data and can provide an initial execution before a main operating system executes. This security mechanism can allow a single processor to host two different execution environments. One execution environment is a standard execution environment which can provide a standard operating environment defined by a standard execution mode. The other execution environment is a trusted environment i.e. trusted execution environment or TEE defined by the trusted execution mode. The TEE can be isolated from the standard environment down to the hardware layer. The processor can ensure that some operations are only possible within the TEE and the isolation of the TEE from the standard execution environment can increase the difficulty of starting a software security attack from the standard execution environment.

One embodiment is directed to a system that implements a distributed trusted execution environment. The system includes a trusted execution environment proxy executed within a first trusted execution environment. The system further includes a client application executed within an operating system environment. The system further includes a trusted application executed within a second trusted execution environment of a secure element. The trusted execution environment proxy receives a request to establish a session between the client application and the trusted application where the request to establish the session is received from the client application. The trusted execution environment proxy further selects the trusted application. The trusted execution environment proxy further sends the request to establish the session to the trusted application. The trusted execution environment proxy further receives a response to the request to establish the session from the trusted application. The trusted execution environment proxy further sends the response to the request to establish the session to the client application where the session between the client application and the trusted application is established through the trusted execution environment proxy.

In one embodiment a distributed TEE is provided for a device where the distributed TEE is split into two components a TEE that is executed on a secure element and a TEE proxy that is executed on the device. The TEE proxy acts a proxy between the TEE on the secure element and one or more hardware components or software components of the device. Thus one or more client applications can be executed on the device where the one or more client applications can access the one or more hardware components or software components of the device where one or more trusted applications can be executed within the TEE that is executed on the secure element and where the one or more client applications can communicate with the one or more trusted applications using the TEE proxy. A trusted execution environment or TEE is a secure execution environment that is isolated from other execution environments which provides security from software attacks that originate outside the TEE through hardware mechanisms that other execution environments cannot control and that supports access to one or more secured hardware components by one or more trusted applications. Further a secure element is any tamper resistant hardware platform that provides security from software attacks and certain hardware attacks that originate outside the secure element through hardware mechanisms that applications outside the secure element cannot control where one or more software components can be executed on the tamper resistant hardware platform. Typically a secure element can provide a higher degree of security than a TEE. Additionally a trusted application is an application configured to secure data.

A computer readable medium may be any available medium that can be accessed by processor . A computer readable medium may include both a volatile and nonvolatile medium a removable and non removable medium a communication medium and a storage medium. A communication medium may include computer readable instructions data structures program modules or other data in a modulated data signal such as a carrier wave or other transport mechanism and may include any other form of information delivery medium known in the art. A storage medium may include RAM flash memory ROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers hard disk a removable disk a compact disk read only memory CD ROM or any other form of storage medium known in the art.

Processor can also be operatively coupled via bus to a display such as a Liquid Crystal Display LCD . Display can display information to the user. A keyboard and a cursor control device such as a computer mouse can also be operatively coupled to bus to enable the user to interface with system .

According to one embodiment memory can store software modules that may provide functionality when executed by processor . The modules can include an operating system a distributed TEE module as well as other functional modules . Operating system can provide an operating system functionality for system . Distributed TEE module can provide functionality for implementing a distributed TEE as will be described in more detail below. In certain embodiments Distributed TEE module can comprise a plurality of modules where each module provides specific individual functionality for implementing a distributed TEE. System can also be part of a larger system. Thus system can include one or more additional functional modules to include the additional functionality. For example functional modules may include modules that provide additional functionality such as the Java Card platform from Oracle Corporation.

Processor can also be operatively coupled via bus to a secure element . Secure element can be any tamper resistant hardware platform that provides security from software attacks that originate outside the hardware platform through hardware mechanisms that applications outside the hardware platform cannot control where one or more software components can be executed on secure element . In certain embodiments secure element can be embedded within system . In other alternate embodiments secure element can be removable from system . In certain embodiments secure element can be at least one of the following a chipset a secured microcontroller a universal integrated circuit card a memory card a smart card or a subscriber identity module card.

The system further includes rich operating system environment identified in as Rich OS Environment . Rich operating system environment is an execution environment configured to provide a rich operating system identified in as Rich OS for the overall system. An execution environment is a set of hardware components and software components such as system software embedded software software applications etc. that supports one or more applications executed within the execution environment. Examples of a rich operating system include a Linux operating system a Windows operating system an Android operating system etc. Rich operating system environment further includes a TEE client application programming interface API and a TEE functional API . TEE client API and TEE functional API are each an API that allows an application that is executed within rich operating system environment to interface with a TEE such as TEE which is described below in greater detail. Rich operating system environment further includes one or more client applications such as client applications and . A client application is an application that is executed within rich operating system environment and that interfaces with a TEE such as TEE using either TEE client API or TEE functional API . One of ordinary skill in the art would readily appreciate that the number of client applications illustrated in is only an example number of client applications and that rich operating system environment can include any number of client applications.

The system further includes TEE . As previously described TEE is a secure execution environment that is isolated from other execution environments that provides security from software attacks that originate outside TEE through hardware mechanisms that other execution environments cannot control and that supports access to one or more secured hardware components by one or more trusted applications. More specifically TEE is an execution environment for which a any software components such as computer programs modules or applications that are executed within TEE are trusted in authenticity and integrity b TEE can resist software attacks and thus can protect one or more hardware components within TEE and c both hardware components and software components are protected from unauthorized tracing and control through debug and test features. TEE also defines safeguards as to which hardware components and software components an application that is external to TEE can access.

The system further includes one or more secured hardware components identified in as HW Secure Resources . Secured hardware components are hardware components of hardware platform that are secured so that only trusted applications such as trusted applications and which are described below in greater detail can access them. Examples of secured hardware components include a secure element a key a secure storage a trusted user interface such as a keypad or screen a crypto accelerator a controller etc.

TEE further includes TEE kernel . TEE kernel is a component that can allow one or more software components of TEE to communicate with one or more hardware components of TEE such as secured hardware components and thus can act as a bridge between the one or more software components and the one or more components. A kernel is a main component of an execution environment that is configured to communicate with hardware components and software components and that acts a bridge between the hardware components and the software components. TEE further includes trusted core environment . Trusted core environment is an environment that includes one or more functions for communicating with one or more hardware components of TEE such as secured hardware components . TEE further includes TEE internal API . TEE internal API is an API that allows a trusted application that is executed within TEE to interface with a rich operating system environment such as rich operating system environment . TEE further includes digital rights management DRM application . DRM application is an example of a trusted application that is executed within TEE . In this example DRM application can control access to digital content. One of ordinary skill in the art would readily appreciate that any number of trusted applications can be executed within TEE .

TEE further includes Java TEE environment . Java TEE environment is a specialized type of TEE that uses a Java runtime environment to execute one or more trusted applications. Java TEE environment includes Java Card runtime environment identified in as Java Card Runtime . Java Card runtime environment is a runtime environment that can execute Java Card applications where the runtime environment is implemented on top of TEE kernel and trusted core environment using TEE internal API which is used to develop native trusted applications such as DRM application . Java TEE environment further includes Java TEE API . Java TEE API is a specialized type of TEE internal API that allows a trusted application that is executed within Java TEE environment to access the features implemented in TEE kernel and trusted core environment . In particular Java TEE API includes a trusted application framework that provides an interface with a rich operating system environment such as rich operating system environment . Java trusted applications can also be included in Java TEE environment such as payment user interface UI application identified in as Paym t UI and corporation application identified in as Corp App . Payment UI application and corporate application are examples of trusted applications that are executed within Java TEE environment . In this example payment UI application is a trusted application that implements trusted user interactions during a payment interaction performed on rich operating system environment possibly involving a secure element and corporate application is a trusted application that stores and accesses secured corporate data within trusted execution environment .

An issue with a TEE is that the trusted mode may not be tamper resistant. In other words the TEE can resist software attacks but it may not provide protection against all hardware attacks. Many devices include a tamper resistant secure element such as a chipset a secured microcontroller a universal integrated circuit card a memory card a smart card or a subscriber identity module card where the secure element includes its own hardware components such as a processor or memory where the secure element can be protected against hardware attacks. Sensitive data can be stored in such a secure element and can be secured from both software and hardware attacks.

Thus according to an embodiment of the invention the TEE is implemented as a distributed TEE where the distributed TEE is split into two components a TEE that is executed on the tamper resistant secure element and a TEE that is executed on the device and that includes a TEE proxy. The TEE proxy is a proxy application that can communicate with the TEE that is executed on the secure element and thus acts a proxy between the TEE on the secure element and one or more client applications executed on the device. One or more trusted applications are executed within the TEE that is executed on the secure element with the TEE proxy providing a trusted communication channel between the one or more trusted applications and the one or more client applications. A proxy application or proxy is any application that is configured to communicate with another application. The distributed TEE is thus able to leverage the enhanced security benefits of the tamper resistant secure element. Further this represents a fundamental paradigm shift in trusted environments. In previous systems in order to provide a tamper resistant secure element access to one or more hardware components of the secure element was generally exclusive to trusted applications executed within the secure element. Thus access to the one or more hardware components was generally not provided to applications executed outside of the secure element. However according to an embodiment of the invention a TEE proxy executed within a device is able to communicate with a TEE executed within a secure element. Through this communication the TEE proxy is able to access one or more trusted applications of the secure element.

More specifically a client application that is executed within rich operating system environment can establish a connection with TEE proxy and can send one or more requests to execute an operation to TEE proxy . TEE proxy can receive the one or more requests and establish a connection with TEE . TEE proxy can further send one or more requests to execute an operation to a trusted application that is executed within TEE . TEE proxy can further receive one or more responses from the trusted application that is executed within TEE . TEE proxy can further send the one or more responses to the client application that is executed within rich operating system environment . The processing of one or more requests to execute an operation by TEE proxy is further described below in greater detail in conjunction with . Further in certain embodiments TEE proxy can further receive one or more requests to execute an operation within TEE kernel from a trusted application that is executed within TEE . TEE proxy can further send one or results of an operation executed within TEE kernel to the trusted application that is executed within TEE . The processing of one or more requests to execute an operation within TEE kernel by TEE proxy is also further described below in greater detail in conjunction with . Further TEE proxy can establish a secure connection between itself and TEE so that all communications between TEE proxy and a trusted application that is executed within TEE are cryptographically protected. The establishing of a secure connection is further described below in greater detail in conjunction with .

The system further includes tamper resistant hardware platform . Tamper resistant hardware platform is a hardware platform that provides security from software attacks and certain hardware attacks that originate outside the hardware platform through hardware mechanisms that applications outside the hardware platform cannot control where one or more software components can be executed on tamper resistant hardware platform . Tamper resistant hardware platform can also be identified as a secure element. In certain embodiments tamper resistant hardware platform can be at least one of the following a chipset a secured microcontroller a universal integrated circuit card a memory card a smart card or a subscriber identity module card.

The system further includes TEE where TEE is a TEE component of the distributed TEE that is executed on tamper resistant hardware platform identified in as Trusted Execution Environment on Secure Element . TEE of is similar to TEE of but TEE is executed on tamper resistant hardware platform rather than hardware platform . Further according to the embodiment TEE includes Java TEE environment and Java TEE environment includes Java TEE API . Java TEE API is a specialized type of TEE internal API that facilitates communication between TEE proxy and one or more trusted applications that are executed within Java TEE environment such as trusted applications and . Thus Java TEE API acts as a communication layer between TEE proxy and TEE . One of ordinary skill in the art would readily appreciate that any number of trusted applications can be executed within Java TEE environment .

As is further described below in greater detail Java TEE API further facilitates communication between TEE proxy and Java Card API and thus further facilitates communication between TEE proxy and one or more trusted applications that are executed within Java Card environment such as trusted applications and . In certain embodiments Java TEE API can establish a secure connection between Java TEE API and Java Card API .

According to the embodiment Java TEE API can receive one or requests to execute an operation from TEE proxy . Java TEE API can further send the one or more requests to execute an operation to a trusted application that is executed within TEE . Java TEE API can further receive one or more responses from the trusted application that is executed within TEE . Java TEE API can further send the one or more responses to TEE proxy . The processing of one or more requests to execute an operation by Java TEE API is further described below in greater detail in conjunction with . Further in certain embodiments Java TEE API can further send one or more requests to execute an operation within TEE kernel to TEE proxy . Java TEE API can further receive one or results of an operation executed within TEE kernel and send the one or more results of the operation executed within TEE kernel to the trusted application that is executed within TEE . The processing of one or more requests to execute an operation within TEE kernel by Java TEE API is also further described below in greater detail in conjunction with .

According to the embodiment TEE also includes Java Card environment . Java Card environment is a standard implementation of the Java Card Classic specification as generally found in secure elements that executes one or more applets that are implemented using Java Card API and that relies on one or more smart card protocols to communicate with the outside world. Java Card environment and Java TEE environment include Java Card runtime environment illustrated in as Java Card Runtime . Java TEE Environment also includes Java TEE API . Java TEE API is a specialized type of TEE internal API that facilitates communication between TEE proxy and one or more trusted applications that are executed within Java TEE Environment such as trusted applications and . The implementation of Java TEE API also delegates the execution of some operations to TEE when these operations need to access some of hardware platform s secure resources identified in as HW Secure Resources . In that case Java TEE API sends a request to TEE proxy which executes the request using one or more functions of trusted core environment and then returns the result of the execution to Java TEE API . Java Card environment further includes Europay MasterCard and VISA EMV application identified in as EMV App and authentication application identified in as Auth App . EMV application and authentication application are examples of Java Card Classic applications that are executed within Java Card environment . In this example EMV application is an applet implemented using a Java Card platform that can perform financial transactions using secured financial data stored and managed by the applet on tamper resistant hardware platform . Authentication application is a Java Card Classic application also implemented using a Java Card platform that can access secured authentication stored and managed by an applet on tamper resistant hardware platform . One of ordinary skill in the art would readily appreciate that any number of trusted applications can be executed within Java Card environment . In alternate embodiments Java Card environment can be omitted.

The flow begins and proceeds to . At a client application such as one of client applications and of sends a request to establish a session between the client application and a trusted application such as one of trusted applications and of to a TEE proxy such as TEE proxy of . According to the embodiment the client application is executed within an operating system environment such as rich operating system environment of of a device. Further in accordance with the embodiment the TEE proxy is executed within a first TEE such as TEE of of the device. Additionally in accordance with the embodiment the trusted application is executed within a second TEE such as TEE of of a secure element such as secure element of or tamper resistant hardware platform of . In one embodiment the client application can send the request to establish the session by calling a function of a TEE client API such as TEE client API of . The flow proceeds to .

At the TEE proxy a receives the request to establish the session from the client application b looks up the trusted application s universally unique identifier UUID within a table that is stored within the TEE proxy and c retrieves a corresponding application identifier AID from the table that is stored within the TEE proxy. The flow proceeds to .

At the TEE proxy selects the trusted application by sending a SELECT application protocol data unit APDU command to the trusted application. The SELECT command can be sent to the trusted application using the AID retrieved from the table stored within the TEE proxy. In one embodiment the SELECT command is sent to the trusted application using a Java TEE API such as Java TEE API of . The flow proceeds to .

At the trusted application sends a response to the request to establish the session to the TEE proxy. In one embodiment the response to the request to establish the session is sent to the TEE proxy using the Java TEE API. The flow proceeds to .

At the TEE proxy sends the response to the request to establish the session to the client application. In one embodiment the response to the request to establish the session is sent to the client application using the TEE client API. Thus the session between the client application and the trusted application on the secure element is established through the TEE proxy. The flow proceeds to .

At the client application sends a request to execute an operation to the TEE proxy. In one embodiment the request to execute the operation is sent to the TEE proxy using the TEE client API. The flow proceeds to .

At the TEE proxy a receives the request to execute the operation b creates an APDU and c stores the request to execute the operation within the APDU. The flow proceeds to .

At the TEE proxy sends the APDU to the trusted application. In one embodiment the APDU is sent to the trusted application using the Java TEE API. Further in one embodiment the Java Card API is also used to send the APDU to the trusted application. The flow proceeds to .

At the trusted application processes the incoming APDU by analyzing its content and performing an appropriate action. The flow proceeds to .

At while processing the incoming APDU the trusted application determines whether it requires a TEE kernel such as TEE kernel of to perform an operation. If the trusted application requires the TEE kernel to perform an operation the flow proceeds to . If the trusted application does not require the TEE kernel to perform an operation the flow proceeds to .

At the trusted application sends an APDU to the TEE proxy where the APDU includes a a description of the operation that the trusted application requires the TEE kernel to perform and b a status word. In one embodiment the APDU is sent to the TEE proxy using the Java TEE API. Further in one embodiment the Java Card API is also used to send the APDU to the TEE proxy. The flow proceeds to .

At the TEE proxy a identifies the status word stored within the APDU b decodes the description of the operation stored within the APDU and c has the TEE kernel perform the operation. The flow proceeds to .

At the TEE proxy a creates an APDU b stores a result of the operation that was performed by the TEE kernel within the APDU and c sends the APDU to the trusted application. In one embodiment the APDU is sent to the trusted application using the Java TEE API. Further in one embodiment the Java Card API is also used to send the APDU to the trusted application. The flow returns to .

At the trusted application a stores a response to the request to execute the operation within an APDU and b sends the APDU to the TEE proxy. In one embodiment the APDU is sent to the TEE proxy using the Java TEE API. Further in one embodiment the Java Card API is also used to send the APDU to the TEE proxy. The flow proceeds to .

At the TEE proxy retrieves the response to the request to execute the operation from the APDU. The flow proceeds to .

At the TEE proxy sends the response to the request to execute the operation to the client application. In one embodiment the response to the request to execute the operation is sent to the client application using the TEE client API. The flow proceeds to .

At the client application determines whether it requires the trusted application to perform an additional operation. If the client application requires the trusted application to perform an additional operation the flow returns to . If the client application does not require the trusted application to perform an additional operation the flow ends.

At when a session is started and the TEE proxy and the secure element start a new secure session the TEE proxy sends a random challenge RC1 to the secure element. The flow proceeds to .

At the secure element selects another random challenge RC2 and uses a combination of random challenge RC1 and random challenge RC2 to derive a session key KS from the shared secret. The flow proceeds to .

At the secure element sends the random challenges RC1 and RC2 to the TEE proxy where the random challenges RC1 and RC2 are encrypted with the session key KS. The flow proceeds to .

At the TEE proxy computes the session key KS from the random challenges RC1 and RC2 and the shared secret and authenticates the secure element by verifying the encryption of the random challenge RC1 by the session key KS. The flow proceeds to .

At the TEE proxy sends the random challenge RC2 to the secure element where the random challenge RC2 is encrypted by the session key KS. The flow proceeds to .

At the secure element authenticates the TEE proxy by verifying the encryption of the random challenge RC2. The flow proceeds to .

At the secure channel is established with a mutual authentication of the TEE proxy and the secure element. The flow then ends. During the entire session the content exchange between the TEE proxy and the secure element may be encrypted for confidentiality and or signed for integrity depending on a device s security requirements. The session ends when the device is shut down or reset when the secure element is removed if it is removable or on an explicit request from a user of the device.

Thus according to an embodiment a distributed TEE can be provided where a first TEE component can be implemented as a TEE proxy executed on a device and a second TEE component can be implemented as a TEE executed on a secure element where the TEE proxy can act as a proxy between the TEE executed on the secure element and an execution environment of the device. By leveraging the security features of the secure element the distributed TEE can improve the security of the TEE and thus can meet higher security requirements of certain industries such as payment or health care. Further the distributed TEE can leverage the existing infrastructure of the secure element since secure elements are present in many devices. Finally the distributed TEE can provide an interoperable solution that can be provided for different hardware architectures which can provide more flexibility to device manufacturers.

The features structures or characteristics of the invention described throughout this specification may be combined in any suitable manner in one or more embodiments. For example the usage of one embodiment some embodiments certain embodiment certain embodiments or other similar language throughout this specification refers to the fact that a particular feature structure or characteristic described in connection with the embodiment may be included in at least one embodiment of the present invention. Thus appearances of the phrases one embodiment some embodiments a certain embodiment certain embodiments or other similar language throughout this specification do not necessarily all refer to the same group of embodiments and the described features structures or characteristics may be combined in any suitable manner in one or more embodiments.

One having ordinary skill in the art will readily understand that the invention as discussed above may be practiced with steps in a different order and or with elements in configurations which are different than those which are disclosed. Therefore although the invention has been described based upon these preferred embodiments it would be apparent to those of skill in the art that certain modifications variations and alternative constructions would be apparent while remaining within the spirit and scope of the invention. In order to determine the metes and bounds of the invention therefore reference should be made to the appended claims.

