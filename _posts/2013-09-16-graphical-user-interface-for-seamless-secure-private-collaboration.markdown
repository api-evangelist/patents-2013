---

title: Graphical user interface for seamless secure private collaboration
abstract: Seamless, secure, private, collaborative file synchronization across trust boundaries, typically as a companion to a store and sync file service. Information needed to recover a file is stored within the file itself, without giving away secret data. User specific personal keys are preferably only stored on the users' device(s). A unique ID is also created for each protected file; a password is generated that depends on (a) a key value that can either be (i) the user's personal key in the case of a file that is to be private or (ii) a shared key in the case of a file that is to be shared with other users, and (b) the unique file ID. The password is then encrypted using a recovery key and also stored in the file itself. The file is secured using a format that supports password-based content encryption.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09015858&OS=09015858&RS=09015858
owner: nCrypted Cloud LLC
number: 09015858
owner_city: Boston
owner_country: US
publication_date: 20130916
---
The present application is a continuation of commonly assigned copending U.S. patent application Ser. No. 13 743 051 which was filed on Jan. 16 2013 by Nicholas Stamos and Igor Odnovorov for a SEAMLESS SECURE PRIVATE COLLABORATION ACROSS TRUST BOUNDARIES which is a continuation of commonly assigned copending U.S. patent application Ser. No. 13 690 800 which was filed on Nov. 30 2012 by Nicholas Stamos and Igor Odnovorov for a SEAMLESS SECURE PRIVATE COLLABORATION ACROSS TRUST BOUNDARIES both of which are hereby incorporated by reference.

This patent application relates to secure collaborative file sharing across trust boundaries and among different devices and users.

File hosting services that offer cloud storage and file synchronization across multiple client devices are becoming an increasingly popular way to store computer files. These services allow users to create a special folder on a computer which the service then synchronizes so that it appears to be the same folder with the same contents regardless of the particular device on which the folder is viewed. Files placed in this folder are also accessible through a website and mobile phone applications. Services of this type include Dropbox Google Drive Microsoft SkyDrive and others. The providers of these services typically offer software for different operating systems such as Microsoft Windows Apple Mac OSx Linux Android Apple iOS Blackberry OS and web browsers. The popularity of these services is no doubt due to the increasing tendency of each person to use multiple devices such as laptops desktops smart phones tablets etc. while expecting their information to be available anytime anywhere.

These services in effect add synchronization and sharing to simple file hosting services. Synchronization supports background distribution of files across the user s various devices as well as revision management so that a file edited or deleted on one machine may be recovered from any of the other synced machines. Some of these services also support multiuser version control enabling several users to edit and repost files without overwriting versions of the same file created by other users.

A number of innovative uses and mashups of these store and sync technologies have been developed. For example add ons to the Dropbox Service allow users to email files facilitate online backup using protocols such as File Transfer Protocol FTP provide an interface to desktop applications and include extensions that support file synchronization with other services such as Google Docs.

While these store and sync services have found widespread use and provide many advantages they are not without their shortcomings.

One important shortcoming involves security. Some services do provide a measure of security through use of particular storage systems. For example Dropbox uses Amazon s S3 storage system that supports Secure Sockets Layer SSL transfers for file synchronization via the Advanced Encryption Standard AES . However any user that has been authorized to access another user s Dropbox folder will be granted access to all of the contents of that folder. Therefore these services provide no easy way to manage security on a per file or even per folder basis.

The service provider also many times maintains access to end user stored data by having access to the user s encryption keys for the purpose of data deduplication data visibility on web browser interface or the mining of metadata. This is clearly less than ideal from the user s perspective who would prefer to have some assurance that their confidential information can never be compromised by the service provider.

In addition even if a user tries to make use of passwords to protect individual files there is still the problem of managing distribution of the password among two or more other people who wish to collaborate on a project the tendency of people to forget passwords over time and other problems that invariably arise with such an approach.

What is needed is a way to provide seamless secure private collaborative file synchronization across trust boundaries. In preferred embodiments a companion application can be provided to a store and sync service or a modification to a store and sync service. In general the approach stores everything that is needed to recover a protected file within the file itself without giving away secret data needed to recover the file including all information needed to recover the file in the event a password is lost.

In one specific embodiment a personal key is generated for each user. This user specific personal key is derived from account credentials such as an email address and password. This user specific personal key is preferably only stored on the users device s and is never sent over a network to a server. Because this personal key is derived from account credentials it can be generated and stored on any one of multiple devices for which a specific user wishes to implement the service.

Another unique key is also created for each object such as a file or a folder that the user wishes to treat securely. In one example the content of a file is secured when file is created and or updated as follows. A unique folder key value and key identifier are generated for each folder that is to be secured. For each file in the folder a unique file ID is generated. Each such file is protected with a password which is derived from the a a key value that can either be i the user s personal key in the case of a file that is to be private or ii a shared key in the case of a file that is to be shared with other users and b the unique file ID for the file. The password is then encrypted using a recovery key and then stored in the file itself. The file is then secured by storing the contents using a .zip archive or other file format protected with password based file content encryption.

This approach provides file security via a the access controls implemented by the store and sync service which control access to each file and therefore also control access to the unique key for each file and b the fact that the personal key is only generated on the user s device and is never forwarded to a server. Further by always carrying the information needed to recover the file within the file itself it is always possible to recover the contents of the file from the file itself.

In addition a recovery key ID is preferably stored with each file to enable recovery of the file in the event that the owners account password changes the owner s password is lost or in other situations.

The recovery key and recovery key ID are personal to the owner of the file and may be stored on a server.

In a preferred embodiment files that the user wishes to secure are instantiated using a digital file container or wrapper such as the .zip format .pdf format or any other standardized file format that support password based file encryption and which can be read across many different types of devices and operating systems. The container should also provide some way to maintain metadata with each file as explained above. For example in the case of a .zip file a comment field is available to store this metadata.

The metadata for each secured file may typically include the unique ID for the file an ID for the file key the recovery key ID and a recovery Binary Large Object blob that consists of the file s password encrypted with the recovery key. Other sets of keys and blobs can also be included in the metadata to provide recovery by corporate enterprise and or other access levels beyond the owner s access.

The file key and file key ID thus become a collaborative key in the case of a file that is to be shared since that information will need to be available to any other user having access to the file. More specifically collaboration with secure file sharing across trust boundaries is also possible with this approach. Here The generated file key and file key ID instead become shared key ID and a shared key value. These keys are then used instead of the personal keys to secure the files. Thus when a decision is made to share particular file or folder these shared securely keys are stored with a manifest file associated with the folder. This manifest file or configuration file thus contains the shared folder ID the shared folder key ID and the recovery key ID.

Certain types of file container formats such as .zip allow a single container to hold many files and folders and are thus preferred for providing a securely shared folder service. In this type of container a specialized separate file can serve as a manifest file that may contain the metadata indicating the key ID for the container file. This manifest file is then accessed to obtain the information needed to access the files and file folders within the .zip archive.

.pdf type containers typically do not support multiple files or folders within each container but they can provide additional functionality in that they inherently support granular access policies such as view print edit and so forth for each file.

The approach also allows layering of additional access policies such as open enrollment server managed access to keys file sharding and so forth.

With reference now to the figures the novel aspects of a system and method for seamless secure private collaborative information sharing across trust boundaries will be described. It should be understood that these drawings and the accompanying text illustrate examples only and are not intended to assert or imply any limitation with regard to the data processing environments in which these techniques may be implemented or how they are implemented. Many modifications to the depicted environments and implementations may be made.

More particularly illustrates a network of data processors that includes client devices such as tablet smart phone laptop desktop and one or more file servers . The data processors are interconnected via one or more networks that provide communication links between the various client devices and servers . The communication links may include wired wireless fiber optic or other physical link types. It is understood that each of the client devices and servers thus each includes a network interface enabling it to communicate with other data processors connected in the network . The network may also use any number of protocols to support these connections one quite widespread protocol is the Transmission Control Protocol Internet Protocol TCP IP suite of protocols. The network may include intranet local area network wide area networks and other types of networks. Therefore the specific illustration of is intended only as an example and not as an architectural limitation on different embodiments of the network types or data processing hardware.

In the lower right hand corner of one of the data processors specifically laptop is shown in more detail as an example client device that a user is presently interacting with. As with most any data processor laptop includes a number of hardware elements such as a central processing unit memory storage and touch sensitive display . An operating system executes software to enable the user to perform various functions and run applications. Of significance here is that the operating system enables the user to create edit delete and manage data files using a native file system . A file system as used herein is any resource for storing information and or data on a computer. File system can be a part of the operative system or layered on top of it. The file system typically provides both physical and logical methods for organizing the user s data. As can be appreciated data stored in files on a file system are frequently sensitive in nature such that it is desirable to prevent at least some users of the network from being able to access the user s data while at the same time allowing the user to collaborate and share selected data with other users.

The laptop also has access to a store and sync service via a client application that enables the laptop to access a file service that is managed by a store and sync server . This Store and Sync Service SSS application may be part of the file system layered on top of the file system make system level calls to the file system or embedded in the operating system . In many cases the store and sync service client is an application that runs on top of the operating system . This allows it to be installed by a user who does not have administrator privileges. Indeed the widespread popularity of store and sync services such as Dropbox Google Drive Microsoft Sky Drive and the like is due in no small part to their being an application level service that is easily installed and managed by a user with limited computer experience.

The store and sync application thus cooperates with other elements implemented in the network such as file server to enable the user to access various file services. More specifically the store and sync service enables a user to create a special folder on one or more of their devices such as laptop . The store and sync client and server components collectively referred to here has the store and sync service then automatically and transparently synchronize the contents of that folder and or files and or related metadata across other devices controlled by the user such as tablet and smartphone so that they appear to be the same folder and or the same file with the same contents regardless of the device on which it is viewed. Files placed in this folder can also typically be accessed by other users such as via a desktop if the original user has decided to share the file with these other users.

Of particular interest here is that the user has installed an additional application that provides access to a Secure Container Management SCM service. The SCM service also has a component operating in the network such as server side component on a still further server . The SCM client and SCM server components collectively referred to here as the SCM service cooperate to further operate on the files and folders that the user creates using the store and sync service.

It should be understood that the SCM related components can be installed and can operate separately from the store and sync components or may be an integral part thereof.

The birthday invite.doc file is a Microsoft Word document and is illustrated with a Word icon as provided by the native file system . An additional smaller checkbox icon appears next to the Word icon. The checkbox icon is added by the store and sync service to indicate that this file has been synchronized among the user s devices. For example the user of laptop may also be a user of tablet and smartphone and the checkmark indicates that the file is currently synchronized among this user s three devices.

The sub folder Vacation Plans is similarly illustrated with a native file system folder icon and an adjacent checkmark icon indicating that the store and sync service has synchronized the contents of this sub folder across the user s three devices. This folder is also being shared with other users of the store and sync service as indicated by the addition of yet another small icon adjacent the folder icon . An appropriate icon may be an icon illustrating two or more persons and is rendered according to the share and sync application .

The third item shown is the sub folder Corporate Docs . This folder has been synchronized by the store and sync service as indicated by small icon and is also being shared as indicated by the share icon . However a third small icon indicates that this file has been securely stored by the SCM service. The shared securely icon may take the form of a key lock or other appropriate visual indication. This folder contains sensitive information such as the corporate documents which the user wishes to share with other people at his place of work. However the user does not wish to share the contents of this folder with anyone else and the user wishes to have added security applied to the contents of this folder. The user has enabled this feature for this particular folder such as by the user previously interacting with a menu shown in at that may have been activated by right clicking on the folder icon and selecting a share securely option .

It should be understood that the SCM view shown in is an artifact of the operation of the SCM client and SCM server and in no way affects the operation of the store and sync service. In addition the SCM client ensures that artifacts of the file and folder structure s needed to securely share the contents of folder are hidden from the user.

However as shown in if the user views the content of folder via an application that is not aware of the SCM service such as a view provided by the store and sync client or native file system he may instead see three documents. A first document is a manifest file .mSCM that contains certain information created and maintained by the SCM service. In addition the user may see a pair of .zip files Monthly Investor Update.pptx.zip and Customer Proposal.docx.zip corresponding to the user s two files. These files are thus actually being maintained as .zip archive files and so their actual respective file sizes 273 KB and 12 KB respectively are evident. Thus the view of illustrates a larger unzipped or more precisely the decrypted file size whereas in fact the files were compressed .zip files. The SCM service thus provides a logical or virtual view of the user s files and folders.

All of this information needed to maintain the shared securely features associated with the SCM view of is in fact stored in the folder or within the secured file itself in a manner described in more detail below. It can now be understood that this system thus operates with the store and sync service mainly responsible for interacting with the file systems of the various devices to read write and synchronize files across devices while the secure container management service focuses on the organization of files as secure containers and manages password access to those secure containers among devices.

The personal key is derived from the user s username and password information to ensure that the same personal key can be generated on any other machine on which the user subsequently installs the SCM client . The personal key is preferably a symmetric key and can be derived using any suitable key derivation algorithm. In a preferred embodiment this is a PBKDF2 Password Based Key Derivation Function 2 based algorithm. In general precautions are taken so that the personal key is never stored on a server but can be generated on any machine on which it is needed. It is possible however that in some embodiments this password personal key will be stored on a server protected with a security question for backup purposes but in general the personal key does not travel over the network during the file access operations described below. As will be seen the personal key identifier does travel with the data file itself.

The recovery key is used as a backup key in the event that the personal key is lost. This can be generated from a random seed as an asymmetric key using any suitable algorithm such as the RSA algorithm. This recovery key is saved in the local key store on device but can also be stored on a server associated with the SCM service. As will be understood shortly an identifier for this recovery key is also preferably stored in every file that the user asks to be stored securely. The recovery key is then used to protect the passphrase which is stored within the file itself. This passphrase can be used to recover the file in the event that the user s personal key becomes lost or corrupted.

In the event that the user is an existing user state is entered from state in which the personal key is again generated from the username and password information. Other keys associated with the user can also be retrieved from the server in state . This can include retrieval of the recovery key that is used as the backup key as well as any keys necessary to access any shared folders.

For example in an initial state it is determined that a password needs to be generated for a new .zip file. In state a new file ID is created for the file.

In state the relevant password key ID is then retrieved. This will be the user s personal key ID retrieved locally in the case of a private file that is not being shared or in the case of a file that is being shared a shared key ID retrieved from a server. This password key ID is then used to lookup a key value in state .

This key value is then used with the unique file ID as part of an algorithm in state to generate a password for the file the key value may be used as the secret and the unique file ID as the entropy or salt input to the algorithm. A suitable algorithm may be the PBKDF2 algorithm. In the process of generating a password for each file the PBKDF2 algorithm can be iterated a number of times to increase entropy of the result.

The generated password is then preferably encoded in state using base encoding to obtain printable alphanumeric characters. That then becomes the password for the file this password is then encrypted with the user s recovery key in state and stored with the file.

The first portion of the metadata contains the unique file identifier ID for the file. The second portion is an ID of the key value for the file. The associated key value has been stored in the key store this will be retrieved from a local store on device in the case of a private file that is not shared and will be retrieved from the server in a case of the file being a securely shared file. Thus if a file is not being shared any third party user which does happen to obtain access to the container will never have access to the key value it being stored locally only on the user s own machine s .

The third piece of information is an encrypted blob. This is the password generated for the file such as per encrypted with the user s recovery key. The fourth piece of information is the global ID of the user s recovery key used to encrypt the blob. Further encrypted blobs and key IDs may be associated with a file. For example if the file owner is an employee of an enterprise an enterprise administrator may also have his own key ID and blob to obtain access to the file.

If the key ID e.g. of indicated in the file points to a key value stored in the local key store on the client device then state can be entered where the file password can be retrieved locally and then decryption can proceed in state .

If however the password does not exist locally a state determines if the recovery key exists locally. If it does a state can be entered in which the password stored in the encrypted blob can be decrypted. Then processing can proceed to state where the file is decrypted using the recovered password. If however in state the recovery key does not exist then the password key can be requested from the server in state . If successfully retrieved from the server then file decryption can proceed but if not then the process must exit.

It can now be understood that the SCM service is thus primarily concerned with managing the secure containers .zip .pdf etc. and does not provide actual security that being the function of the password protected container file format utilized e.g. either .zip or .pdf . The SCM service does generate passwords from various user keys be they a personal key or a shared key but does not in itself perform encryption or decryption. Thus the techniques described depend on using a standard secure container such as .zip or .pdf that supports password access. The .zip format is sometimes desirable as any type of file can be placed within it however it cannot restrict further activities with a file such as print copy and so forth. Other file containers such as .pdf limit the type of information that can be stored therein but do offer the ability to implement granular access control over information use such as edit copy print etc. limitations.

The processes implemented by the SCM service operate at the application level and do not require modification of current operating system drivers or operator privileges to install. They also does not require the use of application programming interfaces to access store and sync services. All that the SCM service needs to know is where a file or folder is located and once that folder is located it can then manipulate the files according to its desired processes.

It is possible to provide an additional layer of security by updating the password every time a file or folder is accessed. In other words every time a file is saved a new key ID and key value can be generated such as by assigning a new unique file ID. This comes at minimal cost because the store and sync service is going to be rewriting the file each time.

With this approach one can now provide seamless secure private collaboration across trust boundaries. A unique identifier for a file is established through an email account and password paradigm. The unique identifier is generated for each file the user is then bound to each as an owner with the unique ID for the folder.

If the user desires to collaborate with other users than a shared key is used to encrypt the access passphrase for the folder then that shared key ID is distributed by the SCM service in a manner that is transparent to the user.

When a user enables a folder for sharing any other user having access via the store and sync service will also have access to the contents of the folder and thus any other user will able to obtain the password key ID needed to access the folder. The other users can then use this key ID to request the shared password key from the SCM server . This process can be controlled however by the use of open enrollment periods. With this approach an initial timeframe is established where any user having shared access to a folder is also given access to the key IDs. However after enrollment expires no new users are automatically allowed shared access to the files. This can prevent problems with hacking since once the open enrollment period closes keys will not be distributed to any new users.

One way to further improve security is to simply delete the folder key ID and value from the server after open enrollment closes.

Another way to improve security can be implemented when the owner no longer wishes to share the file. Instead of simply stopping sharing such as through the store and sync service the secure container management service can allow users to select a make private command for the file. The act of a user making a previously shared file now private can then trigger re encryption of the file with new keys. This then prevents a possible problem with users who were previously authorized to access the file having kept locally cached copies of the keys.

At this time during open enrollment in state a second user B is given access to the folder F. This can be done by user A simply using the store and sync service to add a new user. Because store and sync service will allow user B access to folder F the metadata in the .zip file is not a secret and user B can read the shared key ID for folder F. User B s device can then talk to the SCM server to retrieve the shared key value needed to decrypt the contents of the folder. At this point SEM server returns the key value for that folder because F is in the open enrollment period.

At some point open enrollment closes and the state for folder F is set accordingly in the table at the SCM server . Next in a state a third user C is given access to the folder perhaps because user granted him access using the store and sync service or perhaps because C has hacked into the folder . Since user C has been granted access to the shared folder F by the store and sync server it will still be able to obtain the key ID. User C s device can then send the key ID to the SCM server . However the SCM server seeing that the enrollment period is now closed will not return the key value to user C. Therefore user C will not be able to access the password necessary to open up the 1.doc.zip file.

Also in another state is still possible that the enrollment period is closed. However a fourth user D had previously request and been granted access to shared folder F. For example user A can inform SCM service that he wishes user D to have access to folder F. Even though enrollment is closed SCM server will look at its table and see that user D should be granted access and thus SCM server will return the key value to user D when requested.

In another aspect it is possible that multiple .zip container files are used by SCM service to represent a single user file. Sharding of a file in this way can be advantageous where user files are particularly large say greater than 200 MB or so where the .zip compression algorithms become inefficient.

Another added security aspect can be implemented by SCM service to obfuscate file names. Thus rather than have a file named 1.doc.zip be the container for 1.doc the container file for 1.doc can be assigned a file name generated from a random character generator.

