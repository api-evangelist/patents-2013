---

title: Persistent feeder component for displaying feed items received from information feeds of online social networks
abstract: Disclosed are methods, apparatus, systems, and computer readable storage media for providing a persistent feeder component in a user interface to display in near real-time feed items when received in information feeds of online social networks. The feed items can come from feeds of multiple online social networks to be displayed in a single feeder component, and the feeder component may be configured to display proximate to each feed item a graphical indicator identifying the information feed of the feed item. The feeder component can be displayed in one of multiple display formats. The feeder component may also be configured to track activity on an online social network and display a notification when activity on the online social network has met one or more milestones determined by the user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09495079&OS=09495079&RS=09495079
owner: salesforce.com, inc.
number: 09495079
owner_city: San Francisco
owner_country: US
publication_date: 20130225
---
This patent document claims priority to commonly assigned U.S. Provisional Patent Application No. 61 751 138 titled Computer Implemented Methods and Apparatus for Providing a Persistent Feeder Component to Display Feed Items Received from Information Feeds of Online Social Networks by Rajagopal et al. filed on Jan. 10 2013 which is hereby incorporated by reference in its entirety and for all purposes.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

This patent document relates generally to providing on demand services in an online social network using a database system and more specifically to techniques for assisting users of social network data in composing social media messages.

 Cloud computing services provide shared resources software and information to computers and other devices upon request. In cloud computing environments software can be accessible over the Internet rather than installed locally on in house computer systems. Cloud computing typically involves over the Internet provision of dynamically scalable and often virtualized resources. Technological details can be abstracted from the users who no longer have need for expertise in or control over the technology infrastructure in the cloud that supports them.

Database resources can be provided in a cloud computing context. However using conventional database management techniques it is difficult to know about the activity of other users of a database system in the cloud or other network. For example the actions of a particular user such as a salesperson on a database resource may be important to the user s boss. The user can create a report about what the user has done and send it to the boss but such reports may be inefficient not timely and incomplete. Also it may be difficult to identify other users who might benefit from the information in the report.

Examples of systems apparatus and methods according to the disclosed implementations are described in this section. These examples are being provided solely to add context and aid in the understanding of the disclosed implementations. It will thus be apparent to one skilled in the art that implementations may be practiced without some or all of these specific details. In other instances certain process method operations also referred to herein as blocks have not been described in detail in order to avoid unnecessarily obscuring implementations. Other applications are possible such that the following examples should not be taken as definitive or limiting either in scope or setting.

In the following detailed description references are made to the accompanying drawings which form a part of the description and in which are shown by way of illustration specific implementations. Although these implementations are described in sufficient detail to enable one skilled in the art to practice the disclosed implementations it is understood that these examples are not limiting such that other implementations may be used and changes may be made without departing from their spirit and scope. For example the blocks of methods shown and described herein are not necessarily performed in the order indicated. It should also be understood that the methods may include more or fewer blocks than are indicated. In some implementations blocks described herein as separate blocks may be combined. Conversely what may be described herein as a single block may be implemented in multiple blocks.

Various implementations described or referenced herein are directed to different methods apparatus systems and computer readable storage media for providing a persistent feeder component in a user interface to display in near real time feed items when received in information feeds of online social networks also referred to herein as social networking systems. One example of an online social network is Chatter provided by salesforce.com inc. of San Francisco Calif. Online social networks are increasingly becoming a common way to facilitate communication among people and groups of people any of whom can be recognized as users of a social networking system. Some online social networks can be implemented in various settings including organizations e.g. enterprises such as companies or business partnerships academic institutions or groups within such an organization. For instance Chatter can be used by employee users in a division of a business organization to share data communicate and collaborate with each other for various purposes.

In some online social networks users can access one or more information feeds which include information updates presented as feed items or feed entries. Such a feed item can include a single information update or a collection of individual information updates. A feed item can include various types of data including character based data audio data image data and or video data. An information feed can be displayed in a graphical user interface GUI on a display device such as the display of a computing device as described below. The information updates can include various social network data from various sources and can be stored in an on demand database service environment. In some implementations the disclosed methods apparatus systems and computer readable storage media may be configured or designed for use in a multi tenant database environment.

In some implementations an online social network may allow a user to follow data objects in the form of records such as cases accounts or opportunities in addition to following individual users and groups of users. The following of a record stored in a database as described in greater detail below allows a user to track the progress of that record. Updates to the record also referred to herein as changes to the record are one type of information update that can occur and be noted on an information feed such as a record feed or a news feed of a user subscribed to the record. Examples of record updates include field changes in the record updates to the status of a record as well as the creation of the record itself. Some records are publicly accessible such that any user can follow the record while other records are private for which appropriate security clearance permissions are a prerequisite to a user following the record.

Information updates can include various types of updates which may or may not be linked with a particular record. For example information updates can be user submitted messages or can otherwise be generated in response to user actions or in response to events. Examples of messages include posts comments indications of a user s personal preferences such as likes and dislikes updates to a user s status uploaded files and hyperlinks to social network data or other network data such as various documents and or web pages on the Internet. Posts can include alpha numeric or other character based user inputs such as words phrases statements questions emotional expressions and or symbols. Comments generally refer to responses to posts such as words phrases statements answers questions and reactionary emotional expressions and or symbols. Multimedia data can be included in linked with or attached to a post or comment. For example a post can include textual statements in combination with a JPEG image or animated image. A like or dislike can be submitted in response to a particular post or comment. Examples of uploaded files include presentations documents multimedia files and the like.

Users can follow a record by subscribing to the record as mentioned above. Users can also follow other entities such as other types of data objects other users and groups of users. Feed tracked updates regarding such entities are one type of information update that can be received and included in the user s news feed. Any number of users can follow a particular entity and thus view information updates pertaining to that entity on the users respective news feeds. In some social networks users may follow each other by establishing connections with each other sometimes referred to as friending one another. By establishing such a connection one user may be able to see information generated by generated about or otherwise associated with another user. For instance a first user may be able to see information posted by a second user to the second user s personal social network page. One implementation of such a personal social network page is a user s profile page for example in the form of a web page representing the user s profile. In one example when the first user is following the second user the first user s news feed can receive a post from the second user submitted to the second user s profile feed also referred to herein as the user s wall which is one example of an information feed displayed on the user s profile page.

In some implementations an information feed may be specific to a group of users of an online social network. For instance a group of users may publish a news feed. Members of the group may view and post to this group feed in accordance with a permissions configuration for the feed and the group. Information updates in a group context can also include changes to group status information.

In some implementations when data such as posts or comments input from one or more users are submitted to an information feed for a particular user group object or other construct within an online social network an email notification or other type of network communication may be transmitted to all users following the user group or object in addition to the inclusion of the data as a feed item in one or more feeds such as a user s profile feed a news feed or a record feed. In some online social networks the occurrence of such a notification is limited to the first instance of a published input which may form part of a larger conversation. For instance a notification may be transmitted for an initial post but not for comments on the post. In some other implementations a separate notification is transmitted for each such information update.

Some implementations of the disclosed systems apparatus methods and computer readable storage media are configured to display a feeder component in a user interface displayed on a display device such as the display of a user s smartphone. The feeder component can be configured to display feed items from one or more information feeds. For instance the feeder component can receive feed items from various different online social networks such as Chatter Facebook and or Twitter and combine the feed items into a single or presentation in the form of the feeder component. In addition some implementations of the disclosed feeder components are configured to be maintained in the user interface for example in a window generated by a web browser program regardless of which web pages are loaded and displayed. Thus the feeder component can persist when the user interface changes among states i.e. when different presentations of pages or other data are displayed in the user interface.

For instance a user of his enterprise s implementation of Chatter may be following co workers groups records and other entities related to the user s job and thus need to keep a close eye on his Chatter feed throughout the work day. However the user may wish to simultaneously monitor his Facebook feed for instance to confirm or modify a social engagement immediately following the work day. Rather than having to navigate to the feed tab in Chatter every time the user wishes to view Chatter information updates and or have to open up a separate browser window to view Facebook information updates the user can activate and monitor a persistent feeder component regardless of which pages the user navigates to during a browsing session such as pages of his enterprise s implementation of Chatter . In this way the user can always view feed items in the feeder component irrespective of which page is currently displayed. For example the feeder component can remain open and superimposed over the contents of Chatter pages loaded in the user interface displayed on the user s computing device. Some implementations of the disclosed techniques thus provide a user with immediate access to his Chatter Facebook and other social network feeds without requiring action on the part of the user such as navigation away from an active web page.

Moreover because one or more information feeds may contain more information than the user is interested in viewing in his feeder component the user may set one or more parameters to filter the feed items to determine which feed items or portions of content of feed items to present in the feeder component. In some instances parameters can be selected user generated and customized according to a user s personal preferences. In some instances one or more parameters can be default parameters defined for a specific online social network. In some instances one or more parameters can be defined by a system administrator of the online social network. Thus using some implementations of the disclosed techniques rather than having to manually navigate and read through any number of posts and comments recently published in a feed or a combination of feeds the user can select and customize parameters to specify the types of posts and comments that he would like to view in the feeder component. For example if a Chatter user is interested in viewing posts in his feeder component that have to do with a particular case that he is interested in he can enter the case number or the case title as a user defined keyword parameter. As information updates are received by a computing device such as a server or the user s smartphone the computing device applies the parameters to the information updates and only the filtered results are displayed in the feeder component. That is information updates that do not satisfy the parameters are excluded from the feeder component. The user can then be presented with a subset of feed items of greater relevance and interest to him based on the parameters.

In the same example the user may also have access to a Twitter feed and may be interested in receiving in his Chatter feeder component tweets that have to do with the client involved in the case that he is following in his Chatter feed. Rather than having to track Twitter updates in a separate browser window or tab the user can configure his Chatter feeder component to show in addition to the Chatter information updates Twitter tweets that he is interested in. Moreover the user can set user defined parameters to specify what kinds of tweets he would like to be displayed in the feeder component.

In some implementations login credentials for respective online social networks can be transmitted directly to the appropriate online social network for authentication using a protocol such as OAuth. Once the user is authenticated for instance on Facebook a Facebook server may return an access token that a Chatter server may use to retrieve pertinent feed items from Facebook . This way the user s login credentials for Facebook need not be stored in Chatter thus providing more robust security.

In some implementations the display format of the feeder component can be changed by the user s input. In one example the feeder component appears as an in page textbox superimposed over a portion of the displayed page. In another example the feeder component may appear as a minimized indicator superimposed over a portion such as a taskbar of the displayed page. For example the minimized indicator may be a bar of text along the bottom of the displayed page in a button that the user may click on to show the feeder component in the in page textbox format. In another example the feeder component may appear as a pop out browser window separate from the browser window in which the page is displayed. The pop out browser window display format may allow the user to view a larger resizable version of the feeder component allowing the user to more conveniently view more feed items at one time.

In some implementations the feeder component may be in an enabled state or a disabled state. In one example the feeder component may be in a disabled state when the feeder component is first activated. The disabled state can serve to reduce unnecessary network traffic caused by regular requests for information updates. The feeder component may be enabled or disabled by the user by changing his preference settings stored as part of the user s profile on Chatter . In some examples when in the enabled state the user may choose to disable the feeder component by clicking on an appropriate icon in the feeder component. While the feeder component is in a disabled state the feeder component may be hidden from view and requests for feed items will neither be transmitted nor received.

These and other implementations may be embodied in various types of hardware software firmware and combinations thereof. For example some techniques disclosed herein may be implemented at least in part by computer readable media that include program instructions state information etc. for performing various services and operations described herein. Examples of program instructions include both machine code such as produced by a compiler and files containing higher level code that may be executed by a computing device such as a server or other data processing apparatus using an interpreter. Examples of computer readable media include but are not limited to magnetic media such as hard disks floppy disks and magnetic tape optical media such as CD ROM disks magneto optical media and hardware devices that are specially configured to store program instructions such as read only memory ROM devices and random access memory RAM devices. These and other features of the disclosed implementations will be described in more detail below with reference to the associated drawings.

The term multi tenant database system can refer to those systems in which various elements of hardware and software of a database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows of data such as feed items for a potentially much greater number of customers. The term query plan generally refers to one or more operations used to access information in a database system.

A user profile or user s profile is generally configured to store and maintain data about a given user of the database system. The data can include general information such as name title phone number a photo a biographical summary and a status e.g. text describing what the user is currently doing. As mentioned below the data can include messages created by other users. Where there are multiple tenants a user is typically associated with a particular tenant. For example a user could be a salesperson of a company which is a tenant of the database system that provides a database service.

The term record generally refers to a data entity such as an instance of a data object created by a user of the database service for example about a particular actual or potential business relationship or project. The data object can have a data structure defined by the database service a standard object or defined by a user custom object . For example a record can be for a business partner or potential business partner e.g. a client vendor distributor etc. of the user and can include information describing an entire company subsidiaries or contacts at the company. As another example a record can be a project that the user is working on such as an opportunity e.g. a possible sale with an existing partner or a project that the user is trying to get. In one implementation of a multi tenant database system each record for the tenants has a unique identifier stored in a common table. A record has data fields that are defined by the structure of the object e.g. fields of certain data types and purposes . A record can also have custom fields defined by a user. A field can be another record or include links thereto thereby providing a parent child relationship between the records.

The terms information feed and feed are used interchangeably herein and generally refer to a combination e.g. a list of feed items or entries with various types of information and data. Such feed items can be stored and maintained in one or more database tables e.g. as rows in the table s that can be accessed to retrieve relevant information to be presented as part of a displayed feed. The term feed item or feed element refers to an item of information which can be presented in the feed such as a post submitted by a user. Feed items of information about a user can be presented in a user s profile feed of the database while feed items of information about a record can be presented in a record feed in the database by way of example. A profile feed and a record feed are examples of different information feeds. A second user following a first user and a record can receive the feed items associated with the first user and the record for display in the second user s news feed which is another type of information feed. In some implementations the feed items from any number of followed users and records can be combined into a single information feed of a particular user.

As examples a feed item can be a message such as a user generated post of text data and a feed tracked update to a record or profile such as a change to a field of the record. Feed tracked updates are described in greater detail below. A feed can be a combination of messages and feed tracked updates. Messages include text created by a user and may include other data as well. Examples of messages include posts user status updates and comments. Messages can be created for a user s profile or for a record. Posts can be created by various users potentially any user although some restrictions can be applied. As an example posts can be made to a wall section of a user s profile page which can include a number of recent posts or a section of a record that includes multiple posts. The posts can be organized in chronological order when displayed in a graphical user interface GUI for instance on the user s profile page as part of the user s profile feed. In contrast to a post a user status update changes a status of a user and can be made by that user or an administrator. A record can also have a status the update of which can be provided by an owner of the record or other users having suitable write access permissions to the record. The owner can be a single user multiple users or a group. In one implementation there is only one status for a record.

In some implementations a comment can be made on any feed item. In some implementations comments are organized as a list explicitly tied to a particular feed tracked update post or status update. In some implementations comments may not be listed in the first layer in a hierarchal sense of feed items but listed as a second layer branching from a particular first layer feed item.

A feed tracked update also referred to herein as a information update is one type of information update and generally refers to data representing an event. A feed tracked update can include text generated by the database system in response to the event to be provided as one or more feed items for possible inclusion in one or more feeds. In one implementation the data can initially be stored and then the database system can later use the data to create text for describing the event. Both the data and or the text can be a feed tracked update as used herein. In various implementations an event can be an update of a record and or can be triggered by a specific action by a user. Which actions trigger an event can be configurable. Which events have feed tracked updates created and which information updates are sent to which users can also be configurable. Messages and information updates can be stored as a field or child object of the record. For example the feed can be stored as a child object of the record.

A group is generally a collection of users. In some implementations the group may be defined as users with a same or similar attribute or by membership. In some implementations a group feed also referred to herein as a group news feed includes one or more feed items about any user in the group. In some implementations the group feed also includes information updates and other feed items that are about the group as a whole the group s purpose the group s description and group records and other objects stored in association with the group. Threads of information updates including group record updates and messages such as posts comments likes etc. can define group conversations and change over time.

An entity feed or record feed generally refers to a feed of feed items about a particular record in the database such as feed tracked updates about changes to the record and posts made by users about the record. An entity feed can be composed of any type of feed item. Such a feed can be displayed on a page such as a web page associated with the record e.g. a home page of the record. As used herein a profile feed or user s profile feed is a feed of feed items about a particular user. In one example the feed items for a profile feed include posts and comments that other users make about or send to the particular user and status updates made by the particular user. Such a profile feed can be displayed on a page associated with the particular user. In another example feed items in a profile feed could include posts made by the particular user and feed tracked updates initiated based on actions of the particular user.

Systems apparatus and methods are provided for implementing enterprise level social and business information networking. Such implementations can provide more efficient use of a database system. For instance a user of a database system may not easily know when important information in the database has changed e.g. about a project or client. Implementations can provide feed tracked updates about such changes and other events thereby keeping users informed.

By way of example a user can update a record e.g. an opportunity such as a possible sale of 1000 computers. Once the record update has been made a feed tracked update about the record update can then automatically be provided e.g. in a feed to anyone subscribing to the opportunity or to the user. Thus the user does not need to contact a manager regarding the change in the opportunity since the feed tracked update about the update is sent via a feed right to the manager s feed page or other page.

Next mechanisms and methods for providing systems implementing enterprise level social and business information networking will be described with reference to several implementations. First an overview of an example of a database system is described and then examples of tracking events for a record actions of a user and messages about a user or record are described. Various implementations about the data structure of feeds customizing feeds user selection of records and users to follow generating feeds and displaying feeds are also described.

Environment is an environment in which an on demand database service exists. User system may be implemented as any computing device s or other data processing apparatus such as a machine or system that is used by a user to access a database system . For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of such computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is implemented in the example of as database system .

An on demand database service implemented using system by way of example is a service that is made available to outside users who do not need to necessarily be concerned with building and or maintaining the database system. Instead the database system may be available for their use when the users need the database system i.e. on the demand of the users. Some on demand database services may store information from one or more tenants into tables of a common database image to form a multi tenant database system MTS . A database image may include one or more database objects. A relational database management system RDBMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In some implementations application platform enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level also called authorization.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. Network can include a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I. The Internet will be used in many of the examples herein. However it should be understood that the networks that the present implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP signals to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the network interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least for users accessing system each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one implementation system shown in implements a web based customer relationship management CRM system. For example in one implementation system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms web pages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object in tenant data storage however tenant data typically is arranged in the storage medium s of tenant data storage so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain implementations system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. The term computing device is also referred to herein simply as a computer . User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user input devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. of the computing device in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above implementations are suitable for use with the Internet although other networks can be used instead of or in addition to the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one implementation each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of its components might be operator configurable using application s including computer code to run using processor system which may be implemented to include a central processing unit which may include an Intel Pentium processor or the like and or multiple processor units. Non transitory computer readable media can have instructions stored thereon in that can be executed by or used to program a computing device to perform any of the methods of the implementations described herein. Computer program code implementing instructions for operating and configuring system to intercommunicate and to process web pages applications and other data and media content as described herein is preferably downloadable and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any other type of computer readable medium or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for the disclosed implementations can be realized in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to some implementations each system is configured to provide web pages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to refer to a computing device or system including processing hardware and process space s an associated storage medium such as a memory device or database and in some instances a database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database objects described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to communicate with tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage spaces which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage space user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage space . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language implementations is discussed in commonly assigned U.S. Pat. No. 7 730 478 titled METHOD AND SYSTEM FOR ALLOWING ACCESS TO DEVELOPED APPLICATIONS VIA A MULTI TENANT ON DEMAND DATABASE SERVICE by Craig Weissman issued on Jun. 1 2010 and hereby incorporated by reference in its entirety and for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server N 1 might be coupled via a direct network link and another application server N might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain implementations each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one implementation therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one implementation the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain implementations three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner by way of example system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain implementations user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may involve sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to some implementations. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for case account contact lead and opportunity data objects each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. Commonly assigned U.S. Pat. No. 7 779 039 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM by Weissman et al. issued on Aug. 17 2010 and hereby incorporated by reference in its entirety and for all purposes teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain implementations for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

As shown in accessing an on demand database service environment may involve communications transmitted among a variety of different hardware and or software components. Further the on demand database service environment is a simplified representation of an actual on demand database service environment. For example while only one or two devices of each type are shown in some implementations of an on demand database service environment may include anywhere from one to many devices of each type. Also the on demand database service environment need not include each device shown in or may include additional devices not shown in .

Moreover one or more of the devices in the on demand database service environment may be implemented on the same physical device or on different hardware. Some devices may be implemented using hardware or a combination of hardware and software. Thus terms such as data processing apparatus machine server and device as used herein are not limited to a single hardware device but rather include any hardware and software configured to provide the described functionality.

The cloud is intended to refer to a data network or plurality of data networks often including the Internet. Client machines located in the cloud may communicate with the on demand database service environment to access services provided by the on demand database service environment. For example client machines may access the on demand database service environment to retrieve store edit and or process information.

In some implementations the edge routers and route packets between the cloud and other components of the on demand database service environment . The edge routers and may employ the Border Gateway Protocol BGP . The BGP is the core routing protocol of the Internet. The edge routers and may maintain a table of IP networks or prefixes which designate network reachability among autonomous systems on the Internet.

In one or more implementations the firewall may protect the inner components of the on demand database service environment from Internet traffic. The firewall may block permit or deny access to the inner components of the on demand database service environment based upon a set of rules and other criteria. The firewall may act as one or more of a packet filter an application gateway a stateful filter a proxy server or any other type of firewall.

In some implementations the core switches and are high capacity switches that transfer packets within the on demand database service environment . The core switches and may be configured as network bridges that quickly route data between different components within the on demand database service environment. In some implementations the use of two or more core switches and may provide redundancy and or reduced latency.

In some implementations the pods and may perform the core data processing and service functions provided by the on demand database service environment. Each pod may include various types of hardware and or software computing resources. An example of the pod architecture is discussed in greater detail with reference to .

In some implementations communication between the pods and may be conducted via the pod switches and . The pod switches and may facilitate communication between the pods and and client machines located in the cloud for example via core switches and . Also the pod switches and may facilitate communication between the pods and and the database storage .

In some implementations the load balancer may distribute workload between the pods and . Balancing the on demand service requests between the pods may assist in improving the use of resources increasing throughput reducing response times and or reducing overhead. The load balancer may include multilayer switches to analyze and forward traffic.

In some implementations access to the database storage may be guarded by a database firewall . The database firewall may act as a computer application firewall operating at the database application layer of a protocol stack. The database firewall may protect the database storage from application attacks such as structure query language SQL injection database rootkits and unauthorized information disclosure.

In some implementations the database firewall may include a host using one or more forms of reverse proxy services to proxy traffic before passing it to a gateway router. The database firewall may inspect the contents of database traffic and block certain content or database requests. The database firewall may work on the SQL application level atop the TCP IP stack managing applications connection to the database or SQL management interfaces as well as intercepting and enforcing packets traveling to or from a database network or application interface.

In some implementations communication with the database storage may be conducted via the database switch . The multi tenant database storage may include more than one hardware and or software components for handling database queries. Accordingly the database switch may direct database queries transmitted by other components of the on demand database service environment e.g. the pods and to the correct components within the database storage .

In some implementations the database storage is an on demand database system shared by many different organizations. The on demand database system may employ a multi tenant approach a virtualized approach or any other type of database approach. An on demand database system is discussed in greater detail with reference to .

In some implementations the app servers may include a hardware and or software framework dedicated to the execution of procedures e.g. programs routines scripts for supporting the construction of applications provided by the on demand database service environment via the pod . In some implementations the hardware and or software framework of an app server is configured to execute operations of the services described herein including performance of the blocks of methods described with reference to . In alternative implementations two or more app servers may be included and cooperate to perform such methods or one or more other servers described herein can be configured to perform the disclosed methods.

The content batch servers may handle requests internal to the pod. These requests may be long running and or not tied to a particular customer. For example the content batch servers may handle requests related to log mining cleanup work and maintenance tasks.

The content search servers may provide query and indexer functions. For example the functions provided by the content search servers may allow users to search through content stored in the on demand database service environment.

The file force servers may manage requests for information stored in the Fileforce storage . The Fileforce storage may store information such as documents images and basic large objects BLOBs . By managing requests for information using the file force servers the image footprint on the database may be reduced.

The query servers may be used to retrieve information from one or more file systems. For example the query system may receive requests for information from the app servers and then transmit information queries to the NFS located outside the pod.

The pod may share a database instance configured as a multi tenant environment in which different organizations share access to the same database. Additionally services rendered by the pod may call upon various hardware and or software resources. In some implementations the ACS servers may control access to data hardware resources or software resources.

In some implementations the batch servers may process batch jobs which are used to run tasks at specified times. Thus the batch servers may transmit instructions to other servers such as the app servers to trigger the batch jobs.

In some implementations the QFS may be an open source file system available from Sun Microsystems of Santa Clara Calif. The QFS may serve as a rapid access file system for storing and accessing information available within the pod . The QFS may support some volume management capabilities allowing many disks to be grouped together into a file system. File system metadata can be kept on a separate set of disks which may be useful for streaming applications where long disk seeks cannot be tolerated. Thus the QFS system may communicate with one or more content search servers and or indexers to identify retrieve move and or update data stored in the network file systems and or other storage systems.

In some implementations one or more query servers may communicate with the NFS to retrieve and or update information stored outside of the pod . The NFS may allow servers located in the pod to access information to access files over a network in a manner similar to how local storage is accessed.

In some implementations queries from the query servers may be transmitted to the NFS via the load balancer which may distribute resource requests over various resources available in the on demand database service environment. The NFS may also communicate with the QFS to update the information stored on the NFS and or to provide information to the QFS for use by servers located within the pod .

In some implementations the pod may include one or more database instances . The database instance may transmit information to the QFS . When information is transmitted to the QFS it may be available for use by servers within the pod without using an additional database call.

In some implementations database information may be transmitted to the indexer . Indexer may provide an index of information available in the database and or QFS . The index information may be provided to file force servers and or the QFS .

As multiple users might be able to change the data of a record it can be useful for certain users to be notified when a record is updated. Also even if a user does not have authority to change a record the user still might want to know when there is an update to the record. For example a vendor may negotiate a new price with a salesperson of company X where the salesperson is a user associated with tenant Y. As part of creating a new invoice or for accounting purposes the salesperson can change the price saved in the database. It may be important for co workers to know that the price has changed. The salesperson could send an email to certain people but this is onerous and the salesperson might not email all of the people who need to know or want to know. Accordingly some implementations of the disclosed techniques can inform others e.g. co workers who want to know about an update to a record automatically.

In block the database system receives a request to update a first record. In one implementation the request is received from a first user. For example a user may be accessing a page associated with the first record and may change a displayed field and hit save. In another implementation the database system can automatically create the request. For instance the database system can create the request in response to another event e.g. a request to change a field could be sent periodically at a particular date and or time of day or a change to another field or object. The database system can obtain a new value based on other fields of a record and or based on parameters in the system.

The request for the update of a field of a record is an example of an event associated with the first record for which a feed tracked update may be created. In other implementations the database system can identify other events besides updates to fields of a record. For example an event can be a submission of approval to change a field. Such an event can also have an associated field e.g. a field showing a status of whether a change has been submitted . Other examples of events can include creation of a record deletion of a record converting a record from one type to another e.g. converting a lead to an opportunity closing a record e.g. a case type record and potentially any other state change of a record any of which could include a field change associated with the state change. Any of these events update the record whether by changing a field of the record a state of the record or some other characteristic or property of the record. In one implementation a list of supported events for creating a feed tracked update can be maintained within the database system e.g. at a server or in a database.

In block the database system writes new data to the first record. In one implementation the new data may include a new value that replaces old data. For example a field is updated with a new value. In another implementation the new data can be a value for a field that did not contain data before. In yet another implementation the new data could be a flag e.g. for a status of the record which can be stored as a field of the record.

In some implementations a field can also include records which are child objects of the first record in a parent child hierarchy. A field can alternatively include a pointer to a child record. A child object itself can include further fields. Thus if a field of a child object is updated with a new value the parent record also can be considered to have a field changed. In one example a field could be a list of related child objects also called a related list.

In block a feed tracked update is generated about the update to the record. In one implementation the feed tracked update is created in parts for assembling later into a display version. For example event entries can be created and tracked in a first table and changed field entries can be tracked in another table that is cross referenced with the first table. More specifics of such implementations are provided later e.g. with respect to . In another implementation the feed tracked update is automatically generated by the database system. The feed tracked update can convey in words that the first record has been updated and provide details about what was updated in the record and who performed the update. In some implementations a feed tracked update is generated for only certain types of event and or updates associated with the first record.

In one implementation a tenant e.g. through an administrator can configure the database system to create enable feed tracked updates only for certain types of records. For example an administrator can specify that records of designated types such as accounts and opportunities are enabled. When an update or other event is received for the enabled record type then a feed tracked update would be generated. In another implementation a tenant can also specify the fields of a record whose changes are to be tracked and for which feed tracked updates are created. In one aspect a maximum number of fields can be specified for tracking and may include custom fields. In one implementation the type of change can also be specified for example that the value change of a field is to be larger than a threshold e.g. an absolute amount or a percentage change . In yet another implementation a tenant can specify which events are to cause a generation of a feed tracked update. Also in one implementation individual users can specify configurations specific to them which can create custom feeds as described in more detail below.

In one implementation changes to fields of a child object are not tracked to create feed tracked updates for the parent record. In another implementation the changes to fields of a child object can be tracked to create feed tracked updates for the parent record. For example a child object of the parent type can be specified for tracking and certain fields of the child object can be specified for tracking. As another example if the child object is of a type specified for tracking then a tracked change for the child object is propagated to parent records of the child object.

In block the feed tracked update is added to a feed for the first record. In one implementation adding the feed tracked update to a feed can include adding events to a table which may be specific to a record or be for all or a group of objects where a display version of a feed tracked update can be generated dynamically and presented in a GUI as a feed item when a user requests a feed for the first record. In another implementation a display version of a feed tracked update can be added when a record feed is stored and maintained for a record. As mentioned above a feed may be maintained for only certain records. In one implementation the feed of a record can be stored in the database associated with the record. For example the feed can be stored as a field e.g. as a child object of the record. Such a field can store a pointer to the text to be displayed for the feed tracked update.

In some implementations only the current feed tracked update or other current feed item may be kept or temporarily stored e.g. in some temporary memory structure. For example a feed tracked update for only a most recent change to any particular field is kept. In other implementations many previous feed tracked updates may be kept in the feed. A time and or date for each feed tracked update can be tracked. Herein a feed of a record is also referred to as an entity feed as a record is an instance of a particular entity object of the database.

In block followers of the first record can be identified. A follower is a user following the first record such as a subscriber to the feed of the first record. In one implementation when a user requests a feed of a particular record such an identification of block can be omitted. In another implementation where a record feed is pushed to a user e.g. as part of a news feed then the user can be identified as a follower of the first record. Accordingly this block can include the identification of records and other objects being followed by a particular user.

In one implementation the database system can store a list of the followers for a particular record. In various implementations the list can be stored with the first record or associated with the record using an identifier e.g. a pointer to retrieve the list. For example the list can be stored in a field of the first record. In another implementation a list of the records that a user is following is used. In one implementation the database system can have a routine that runs for each user where the routine polls the records in the list to determine if a new feed tracked update has been added to a feed of the record. In another implementation the routine for the user can be running at least partially on a user device which contacts the database to perform the polling.

In block in one implementation the feed tracked update can be stored in a table as described in greater detail below. When the user opens a feed an appropriate query is sent to one or more tables to retrieve updates to records also described in greater detail below. In some implementations the feed shows feed tracked updates in reverse chronological order. In one implementation the feed tracked update is pushed to the feed of a user e.g. by a routine that determines the followers for the record from a list associated with the record. In another implementation the feed tracked update is pulled to a feed e.g. by a user device. This pulling may occur when a user requests the feed as occurs in block . Thus these actions may occur in a different order. The creation of the feed for a pull may be a dynamic creation that identifies records being followed by the requesting user generates the display version of relevant feed tracked updates from stored information e.g. event and field change and adds the feed tracked updates into the feed. A feed of feed tracked updates of records and other objects that a user is following is also generally referred to herein as a news feed which can be a subset of a larger information feed in which other types of information updates appear such as posts.

In yet another implementation the feed tracked update could be sent as an email to the follower instead of in a feed. In one implementation email alerts for events can enable people to be emailed when certain events occur. In another implementation emails can be sent when there are posts on a user profile and posts on entities to which the user subscribes. In one implementation a user can turn on off email alerts for all or some events. In an implementation a user can specify what kind of feed tracked updates to receive about a record that the user is following. For example a user can choose to only receive feed tracked updates about certain fields of a record that the user is following and potentially about what kind of update was performed e.g. a new value input into a specified field or the creation of a new field .

In block a follower can access his her news feed to see the feed tracked update. In one implementation the user has just one news feed for all of the records that the user is following. In one aspect a user can access his her own feed by selecting a particular tab or other object on a page of an interface to the database system. Once selected the feed can be provided as a list e.g. with an identifier e.g. a time or including some or all of the text of the feed tracked update. In another implementation the user can specify how the feed tracked updates are to be displayed and or sent to the user. For example a user can specify a font for the text a location of where the feed can be selected and displayed amount of text to be displayed and other text or symbols to be displayed e.g. importance flags .

A first user sends a request to update record in database system . Although an update request is described other events that are being tracked are equally applicable. In various implementations the request can be sent via a user interface e.g. of or an application program interface e.g. API . An I O port can accommodate the signals of request via any input interface and send the signals to one or more processors . The processor can analyze the request and determine operations to be performed. Herein any reference to a processor can refer to a specific processor or any set of processors in database system which can be collectively referred to as processor .

Processor can determine an identifier for record and send commands with the new data of the request to record database to update record . In one implementation record database is where tenant storage space of is located. The request and new data commands can be encapsulated in a single write transaction sent to record database . In one implementation multiple changes to records in the database can be made in a single write transaction.

Processor can also analyze request to determine whether a feed tracked update is to be created which at this point may include determining whether the event e.g. a change to a particular field is to be tracked. This determination can be based on an interaction i.e. an exchange of data with record database and or other databases or based on information stored locally e.g. in cache or RAM at processor . In one implementation a list of record types that are being tracked can be stored. The list may be different for each tenant e.g. as each tenant may configure the database system to its own specifications. Thus if the record is of a type not being tracked then the determination of whether to create a feed tracked update can stop there.

The same list or a second list which can be stored in a same location or a different location can also include the fields and or events that are tracked for the record types in the first list. This list can be searched to determine if the event is being tracked. A list may also contain information having the granularity of listing specific records that are to be tracked e.g. if a tenant can specify the particular records to be tracked as opposed to just type .

As an example processor may obtain an identifier associated with record e.g. obtained from request or database potentially along with a tenant identifier and cross reference the identifier with a list of records for which feed tracked updates are to be created. Specifically the record identifier can be used to determine the record type and a list of tracked types can be searched for a match. The specific record may also be checked if such individual record tracking was enabled. The name of the field to be changed can also be used to search a list of tracking enabled fields. Other criteria besides field and events can be used to determine whether a feed tracked update is created e.g. type of change in the field. If a feed tracked update is to be generated processor can then generate the feed tracked update.

In some implementations a feed tracked update is created dynamically when a feed e.g. the entity feed of record is requested. Thus in one implementation a feed tracked update can be created when a user requests the entity feed for record . In this implementation the feed tracked update may be created e.g. assembled including re created each time the entity feed is to be displayed to any user. In one implementation one or more event history tables can keep track of previous events so that the feed tracked update can be re created.

In another implementation a feed tracked update can be created at the time the event occurs and the feed tracked update can be added to a list of feed items. The list of feed items may be specific to record or may be an aggregate of feed items including feed items for many records. Such an aggregate list can include a record identifier so that the feed items for the entity feed of record can be easily retrieved. For example after the feed tracked update has been generated processor can add the new feed tracked update to a feed of record . As mentioned above in one implementation the feed can be stored in a field e.g. as a child object of record . In another implementation the feed can be stored in another location or in another database but with a link e.g. a connecting identifier to record . The feed can be organized in various ways e.g. as a linked list an array or other data structure.

A second user can access the new feed tracked update in various ways. In one implementation second user can send a request for the record feed. For example second user can access a home page detail page of the record e.g. with a query or by browsing and the feed can be obtained through a tab button or other activation object on the page. The feed can be displayed on the screen or downloaded.

In another implementation processor can add the new feed tracked update to a feed e.g. a news feed of a user that is following record . In one implementation processor can determine each of the followers of record by accessing a list of the users that have been registered as followers. This determination can be done for each new event e.g. update . In another implementation processor can poll e.g. with a query the records that second user is following to determine when new feed tracked updates or other feed items are available. Processor can use a follower profile of second user that can contain a list of the records that the second user is following. Such a list can be contained in other parts of the database as well. Second user can then send a request to his her profile to obtain a feed which contains the new feed tracked update. The user s profile can be stored in a profile database which can be the same or different than database .

In some implementations a user can define a news feed to include new feed tracked updates from various records which may be limited to a maximum number. In one implementation each user has one news feed. In another implementation the follower profile can include the specifications of each of the records to be followed with the criteria for what feed tracked updates are to be provided and how they are displayed as well as the feed.

Some implementations can provide various types of record entity feeds. Entity Feeds can exist for record types like account opportunity case and contact. An entity feed can tell a user about the actions that people have taken on that particular record or on one its related records. The entity feed can include who made the action which field was changed and the old and new values. In one implementation entity feeds can exist on all supported records as a list that is linked to the specific record. For example a feed could be stored in a field that allows lists e.g. linked lists or as a child object.

In addition to knowing about events associated with a particular record it can be helpful for a user to know what a particular user is doing. In particular it might be nice to know what the user is doing without the user having to generate the feed tracked update e.g. a user submitting a synopsis of what the user has done . Accordingly implementations can automatically track actions of a user that trigger events and feed tracked updates can be generated for certain events.

In block a database system e.g. of identifies an action of a first user. In one implementation the action triggers an event and the event is identified. For example the action of a user requesting an update to a record can be identified where the event is receiving a request or is the resulting update of a record. The action may thus be defined by the resulting event. In another implementation only certain types of actions events are identified. Which actions are identified can be set as a default or can be configurable by a tenant or even configurable at a user level. In this way processing effort can be reduced since only some actions are identified.

In block it is determined whether the event qualifies for a feed tracked update. In one implementation a predefined list of events e.g. as mentioned herein can be created so that only certain actions are identified. In one implementation an administrator or other user of a tenant can specify the type of actions events for which a feed tracked update is to be generated. This block may also be performed for method .

In block a feed tracked update is generated about the action. In an example where the action is an update of a record the feed tracked update can be similar or the same as the feed tracked update created for the record. The description can be altered though to focus on the user as opposed to the record. For example John D. has closed a new opportunity for account XYZ as opposed to an opportunity has been closed for account XYZ. 

In block the feed tracked update is added to a profile feed of the first user when e.g. the user clicks on a tab to open a page in a browser program displaying the feed. In one implementation a feed for a particular user can be accessed on a page of the user s profile in a similar manner as a record feed can be accessed on a detail page of the record. In another implementation the first user may not have a profile feed and the feed tracked update may just be stored temporarily before proceeding. A profile feed of a user can be stored associated with the user s profile. This profile feed can be added to a news feed of another user.

In block followers of the first user are identified. In one implementation a user can specify which type of actions other users can follow. Similarly in one implementation a follower can select what actions by a user the follower wants to follow. In an implementation where different followers follow different types of actions which users are followers of that user and the particular action can be identified e.g. using various lists that track what actions and criteria are being followed by a particular user. In various implementations the followers of the first user can be identified in a similar manner as followers of a record as described above for block .

In block the feed tracked update is added to a news feed of each follower of the first user when e.g. the follower clicks on a tab to open a page displaying the news feed. The feed tracked update can be added in a similar manner as the feed items for a record feed. The news feed can contain feed tracked updates both about users and records. In another implementation a user can specify what kind of feed tracked updates to receive about a user that the user is following. For example a user could specify feed tracked updates with particular keywords of certain types of records of records owned or created by certain users particular fields and other criteria as mentioned herein.

In block a follower accesses the news feed and sees the feed tracked update. In one implementation the user has just one news feed for all of the records that the user is following. In another implementation a user can access his her own feed i.e. feed about his her own actions by selecting a particular tab or other object on a page of an interface to the database system. Thus a feed can include feed tracked updates about what other users are doing in the database system. When a user becomes aware of a relevant action of another user the user can contact the co worker thereby fostering teamwork.

As described above some implementations can generate text describing events e.g. updates that have occurred for a record and actions by a user that trigger an event. A database system can be configured to generate the feed tracked updates for various events in various ways.

In one implementation the feed tracked update is a grammatical sentence thereby being easily understandable by a person. In another implementation the feed tracked update provides detailed information about the update. In various examples an old value and new value for a field may be included in the feed tracked update an action for the update may be provided e.g. submitted for approval and the names of particular users that are responsible for replying or acting on the feed tracked update may be also provided. The feed tracked update can also have a level of importance based on settings chosen by the administrator a particular user requesting an update or by a following user who is to receive the feed tracked update which fields is updated a percentage of the change in a field the type of event or any combination of these factors.

The system may have a set of heuristics for creating a feed tracked update from the event e.g. a request to update . For example the subject may be the user the record or a field being added or changed. The verb can be based on the action requested by the user which can be selected from a list of verbs which may be provided as defaults or input by an administrator of a tenant . In one implementation feed tracked updates can be generic containers with formatting restrictions 

As an example of a feed tracked update for a creation of a new record Mark Abramowitz created a new Opportunity for IBM 20 000 laptops with Amount as 3.5M and Sam Palmisano as Decision Maker. This event can be posted to the profile feed for Mark Abramowitz and the entity feed for record of Opportunity for IBM 20 000 laptops. The pattern can be given by AgentFullName created a new ObjectName RecordName with FieldName as FieldValue and added changed removed RelatedListRecordName as to as RelatedListRecordValue and . Similar patterns can be formed for a changed field standard or custom and an added child record to a related list.

Some implementations can also have a user submit text instead of the database system generating a feed tracked update. As the text is submitted as part or all of a message by a user the text can be about any topic. Thus more information than just actions of a user and events of a record can be conveyed. In one implementation the messages can be used to ask a question about a particular record and users following the record can provide comments and responses.

In block the database system receives a message e.g. a post or status update associated with a first user. The message e.g. a post or status update can contain text and or multimedia content submitted by another user or by the first user. In one implementation a post is for a section of the first user s profile page where any user can add a post and where multiple posts can exist. Thus a post can appear on the first user s profile page and can be viewed when the first user s profile is visited. For a message about a record the post can appear on a detail page of a record. Note the message can appear in other feeds as well. In another implementation a status update about the first user can only be added by the first user. In one implementation a user can only have one status message.

In block the message is added to a table as described in greater detail below. When the feed is opened a query filters one or more tables to identify the first user identify other persons that the user is following and retrieve the message. Messages and record updates are presented in a combined list as the feed. In this way in one implementation the message can be added to a profile feed of the first user which is associated e.g. as a related list with the first user s profile. In one implementation the posts are listed indefinitely. In another implementation only the most recent posts e.g. last are kept in the profile feed. Such implementations can also be employed with feed tracked updates. In yet another implementation the message can be added to a profile of the user adding the message.

In block the database system identifies followers of the first user. In one implementation the database system can identify the followers as described above for method . In various implementations a follower can select to follow a feed about the actions of the first user messages about the first user or both potentially in a same feed .

In block the message is added to a news feed of each follower. In one implementation the message is only added to a news feed of a particular follower if the message matches some criteria e.g. the message includes a particular keyword or other criteria. In another implementation a message can be deleted by the user who created the message. In one implementation once deleted by the author the message is deleted from all feeds to which the message had been added.

In block the follower accesses a news feed and sees the message. For example the follower can access a news feed on the follower s own profile page. As another example the follower can have a news feed sent to his her own desktop without having to first go to a home page.

In block the database system receives a comment about the message. The database system can add the comment to a feed of the same first user much as the original message was added. In one implementation the comment can also be added to a feed of a second user who added the comment. In one implementation users can also reply to the comment. In another implementation users can add comments to a feed tracked update and further comments can be associated with the feed tracked update. In yet another implementation making a comment or message is not an action to which a feed tracked update is created. Thus the message may be the only feed item created from such an action.

In one implementation if a feed tracked update or post is deleted its corresponding comments are deleted as well. In another implementation new comments on a feed tracked update or post do not update the feed tracked update timestamp. Also the feed tracked update or post can continue to be shown in a feed profile feed record feed or news feed if it has had a comment within a specified timeframe e.g. within the last week . Otherwise the feed tracked update or post can be removed in an implementation.

In some implementations all or most feed tracked updates can be commented on. In other implementations feed tracked updates for certain records e.g. cases or ideas are not commentable. In various implementations comments can be made for any one or more records of opportunities accounts contacts leads and custom objects.

In block the comment is added to a news feed of each follower. In one implementation a user can make the comment within the user s news feed. Such a comment can propagate to the appropriate profile feed or record feed and then to the news feeds of the following users. Thus feeds can include what people are saying as well as what they are doing. In one aspect feeds are a way to stay up to date e.g. on users opportunities etc. as well as an opportunity to reach out to co workers partners and engage them around common goals.

In some implementations users can rate feed tracked updates or messages including comments . A user can choose to prioritize a display of a feed so that higher rated feed items show up higher on a display. For example in an implementation where comments are answers to a specific question users can rate the different status posts so that a best answer can be identified. As another example users are able to quickly identify feed items that are most important as those feed items can be displayed at a top of a list. The order of the feed items can be based on an importance level which can be determined by the database system using various factors some of which are mentioned herein and based on a rating from users. In one implementation the rating is on a scale that includes at least 3 values. In another implementation the rating is based on a binary scale.

Besides a profile for a user a group can also be created. In various implementations the group can be created based on certain attributes that are common to the users can be created by inviting users and or can be created by receiving requests to join from a user. In one implementation a group feed can be created with messages being added to the group feed when someone submits a message to the group as a whole through a suitable user interface. For example a group page may have a group feed or a section within the feed for posts and a user can submit a post through a publisher component in the user interface by clicking on a Share or similar button. In another implementation a message can be added to a group feed when the message is submitted about any one of the members. Also a group feed can include feed tracked updates about actions of the group as a whole e.g. when an administrator changes data in a group profile or a record owned by the group or about actions of an individual member.

An event history table can provide a feed tracked update of events from which feed items are created. In one aspect the events are for objects that are being tracked. Thus table can store and change feed tracked updates for feeds and the changes can be persisted. In various implementations event history table can have columns of event ID object ID also called parent ID and created by ID . The event ID can uniquely identify a particular event and can start at or other number or value .

Each new event can be added chronologically with a new event ID which may be incremented in order. An object ID can be used to track which record or user s profile is being changed. For example the object ID can correspond to the record whose field is being changed or the user whose feed is receiving a post. The created by ID can track the user who is performing the action that results in the event e.g. the user that is changing the field or that is posting a message to the profile of another user.

In one implementation a name of an event can also be stored in table . In one implementation a tenant can specify events that they want tracked. In an implementation event history table can include the name of the field that changed e.g. old and new values . In another implementation the name of the field and the values are stored in a separate table. Other information about an event e.g. text of comment feed tracked update post or status update can be stored in event history table or in other tables as is now described.

A field change table can provide a feed tracked update of the changes to the fields. The columns of table can include an event ID which correlates to the event ID an old value for the field and the new value for the field. In one implementation if an event changes more than one field value then there can be an entry for each field changed. As shown event ID has two entries for event E37.

A comment table can provide a feed tracked update of the comments made regarding an event e.g. a comment on a post or a change of a field value. The columns of table can include an event ID which correlates to the event ID the comment column that stores the text of the comment and the time date of the comment. In one implementation there can be multiple comments for each event. As shown event ID has two entries for event E37.

A user subscription table can provide a list of the objects being followed subscribed to by a user. In one implementation each entry has a user ID of the user doing the following and one object ID corresponding to the object being followed. In one implementation the object being followed can be a record or a user. As shown the user with ID U819 is following object IDs O615 and O489. If user U819 is following other objects then additional entries may exist for user U819. Also as shown user U719 is also following object O615. The user subscription table can be updated when a user adds or deletes an object that is being followed.

In one implementation regarding a profile feed and a news feed these are read only views on the event history table specialized for these feed types. Conceptually the news feed can be a semi join between the user subscription table and the event history table on the object IDs and for the user. In one aspect these entities can have polymorphic parents and can be subject to a number of restrictions detailed herein e.g. to limit the cost of sharing checks.

In one implementation entity feeds are modeled in the API as a feed associate entity e.g. AccountFeed CaseFeed etc . A feed associate entity includes information composed of events e.g. event IDs for only one particular record type. Such a list can limit the query and sharing checks to a specific record type. In one aspect this structuring of the entity feeds can make the query run faster. For example a request for a feed of a particular account can include the record type of account. In one implementation an account feed table can then be searched where the table has account record IDs and corresponding event IDs or pointers to particular event entries in event history table . Since the account feed table only contains some of the records not all the query can run faster.

In one implementation there may be objects with no events listed in the event history table even though the record is being tracked. In this case the database service can return a result indicating that no feed items exist.

A feed item can represent an individual field change of a record creation and deletion of a record or other events being tracked for a record or a user. In one implementation all of the feed items in a single transaction event can be grouped together and have the same event ID. A single transaction relates to the operations that can be performed in a single communication with the database. In another implementation where a feed is an object of the database a feed item can be a child of a profile feed news feed or entity feed. If a feed item is added to multiple feeds the feed item can be replicated as a child of each feed to which the feed item is added.

In some implementations a comment exists as an item that depends from feed tracked updates posts status updates and other items that are independent of each other. Thus a feed comment object can exist as a child object of a feed item object. For example comment table can be considered a child table of event history table . In one implementation a feed comment can be a child of a profile feed news feed or entity feed that is separate from other feed items.

In one implementation viewing a feed pulls up the most recent messages or feed tracked updates e.g. 25 and searches the most recent e.g. 4 comments for each feed item. The comments can be identified via the comment table . In one implementation a user can request to see more comments e.g. by selecting a see more link.

After feed items have been generated they can be filtered so that only certain feed items are displayed which may be tailored to a specific tenant and or user. In one implementation a user can specify changes to a field that meet certain criteria for the feed item to show up in a feed displayed to the user e.g. a news feed or even an entity feed displayed directly to the user. In one implementation the criteria can be combined with other factors e.g. number of feed items in the feed to determine which feed items to display. For instance if a small number of feed items exist e.g. below a threshold then all of the feed items may be displayed.

In one implementation a user can specify the criteria via a query on the feed items in his her new feed and thus a feed may only return objects of a certain type certain types of events feed tracked updates about certain fields and other criteria mentioned herein. Messages can also be filtered according to some criteria which may be specified in a query. Such an added query can be added onto a standard query that is used to create the news feed for a user. A first user could specify the users and records that the first user is following in this manner as well as identify the specific feed items that the first user wants to follow. The query could be created through a graphical interface or added by a user directly in a query language. Other criteria could include receiving only posts directed to a particular user or record as opposed to other feed items.

In one implementation a user can access a feed of a record if the user can access the record. The security rules for determining whether a user has access to a record can be performed in a variety of ways some of which are described in commonly assigned U.S. Pat. No. 8 095 531 titled METHODS AND SYSTEMS FOR CONTROLLING ACCESS TO CUSTOM OBJECTS IN A DATABASE by Weissman et al. issued on Jan. 10 2012 and hereby incorporated by reference in its entirety and for all purposes.

In one implementation a user can edit a feed of a record if the user has access to the record e.g. deleting or editing a feed item. In another implementation a user besides an administrator cannot edit a feed item except for performing an action from which a feed item can be created. In one example a user is first has to have access to a particular record and field for a feed item to be created based on an action of the user. In this case an administrator can be considered to be a user with MODIFY ALL DATA security level. In yet another implementation a user who created the record can edit the feed.

In one implementation the text of posts are stored in a child table post table which can be cross referenced with event history table . Post table can include event ID to cross reference with event ID post text to store the text of the post and time date . An entry in post table can be considered a feed post object.

As described above a user can follow users groups and records. Implementations can provide mechanisms for a user to manage which users groups and records that the user is currently following. In one implementation a user can be limited to the number of users and records collectively or separately that the user can follow. For example a user may be restricted to only following 10 users and 15 records or as another example 25 total. Alternatively the user may be permitted to follow more or less users.

In one implementation a user can go to a page of a record and then select to follow that object e.g. with a button marked follow or join . In another implementation a user can search for a record and have the matching records show up in a list. The search can include criteria of records that the user might want to follow. Such criteria can include the owner the creation date last comment date and numerical values of particular fields e.g. an opportunity with a value of more than 10 000 .

A follow button or other activation object can then reside next to each record in the resulting list and the follow button can be selected to start following the record. Similarly a user can go to a profile page of a user and select to follow the user or a search for users can provide a list where one or more users can be selected for following from the list. The selections of subscribing and unsubscribing can add and delete rows in table .

In some implementations a subscription center acts as a centralized place in a database application e.g. application platform to manage which records a user subscribes to and which field updates the user wants to see in feed tracked updates. The subscription center can use a subscription table to keep track of the subscriptions of various users. In one implementation the subscription center shows a list of all the items users and records a user is subscribed to. In another implementation a user can unsubscribe to subscribed objects from the subscription center.

In block one or more properties of an object stored in the database system are received. The properties can be received from administrators of the database system or from users of the database system which may be an administrator of a customer organization . The properties can be records or users and can include any of the fields of the object that are stored in the database system. Examples of properties of a record include an owner of the record a user that converted the record from one record type to another record type whether the first user has viewed the record and a time the first user viewed the record. Examples of properties of a user include which organization tenant the user is associated with the second user s position in the same organization and which other users the user had emailed or worked with on projects.

In block the database system receives one or more criteria about which users are to automatically follow the object. Examples of the criteria can include an owner or creator of a record is to follow the record subordinates of an owner or creator of a record are to follow the record and a user is to follow his her manager the user s peers other users in the same business group as the user and other users that the user has emailed or worked with on a project. The criteria can be specific to a user or group of users e.g. users of a tenant .

In block the database system determines whether the one or more properties of the object satisfy the one or more criteria for a first user. In one implementation this determination can occur by first obtaining the criteria and then determining objects that satisfy the criteria. The determination can occur periodically at time of creation of an object or at other times.

In block if the criteria are satisfied the object is associated with the first user. The association can be in a list that stores information as to what objects are being followed by the first user. User subscription table is an example of such a list. In one implementation the one or more criteria are satisfied if one property satisfies at least one criterion. Thus if the criteria are that a user follows his her manager and the object is the user s manager then the first user will follow the object.

In one implementation a user can also be automatically unsubscribed e.g. if a certain action happens. The action could be a change in the user s position within the organization e.g. a demotion or becoming a contractor. As another example if a case gets closed then users following the case may be automatically unsubscribed.

As described above a feed includes feed items which include feed tracked updates and messages as defined herein. Various feeds can be generated. For example a feed can be generated about a record or about a user. Then users can view these feeds. A user can separately view a feed of a record or user e.g. by going to a home page for the user or the record. As described above a user can also follow another user or record and receive the feed items of those feeds through a separate feed application. The feed application can provide each of the feeds that a user is following and in some examples can combine various feeds in a single information feed.

A feed generator can refer to any software program running on a processor or a dedicated processor or combination thereof that can generate feed items e.g. feed tracked updates or messages and combine them into a feed. In one implementation the feed generator can generate a feed item by receiving a feed tracked update or message identifying what feeds the item should be added to and adding the feed. Adding the feed can include adding additional information metadata to the feed tracked update or message e.g. adding a document sender of message a determined importance etc. . The feed generator can also check to make sure that no one sees feed tracked updates for data that they don t have access to see e.g. according to sharing rules . A feed generator can run at various times to pre compute feeds or to compute them dynamically or combinations thereof.

In one implementation processor in can identify an event that meets criteria for a feed tracked update and then generate the feed tracked update. Processor can also identify a message. For example an application interface can have certain mechanisms for submitting a message e.g. submit buttons on a profile page detail page of a record comment button on post and use of these mechanisms can be used to identify a message to be added to a table used to create a feed or added directly to a list of feed items ready for display.

In some implementations a feed of feed items is created before a user requests the feed. Such an implementation can run fast but have high overall costs for storage. In one implementation once a profile feed or a record feed has been created a feed item messages and feed tracked updates can be added to the feed. The feed can exist in the database system in a variety of ways such as a related list. The feed can include mechanisms to remove items as well as add them.

As described above a news feed can be an aggregated feed of all the record feeds and profile feeds to which a user has subscribed. The news feed can be provided on the home page of the subscribing user. Therefore a news feed can be created by and exist for a particular user. For example a user can subscribe to receive entity feeds of certain records that are of interest to the user and to receive profile feeds of people that are of interest e.g. people on a same team that work for the user are a boss of the user etc. . A news feed can tell a user about all the actions across all the records and people whom have explicitly or implicitly been subscribed to via the subscriptions center described above .

In one implementation only one instance of each feed tracked update is shown on a user s news feed even if the feed tracked update is published in multiple entities to which the user is subscribed. In one aspect there may be delays in publishing news articles. For example the delay may be due to queued up messages for asynchronous entity feed tracked update persistence. Different feeds may have different delays e.g. delay for new feeds but none of profile and entity feeds . In another implementation certain feed tracked updates regarding a subscribed profile feed or an entity feed are not shown because the user is not allowed access e.g. due to sharing rules which restrict which users can see which data . Also in one implementation data of the record that has been updated which includes creation can be provided in the feed e.g. a file or updated value of a feed can be added as a flash rendition .

In some implementations a feed generator can generate the feed items dynamically when a user requests to see a particular feed e.g. a profile feed entity feed or the user s news feed. In one implementation the most recent feed items e.g. top 50 are generated first. In one aspect the other feed items can be generated as a background process e.g. not synchronously with the request to view the feed. However since the background process is likely to complete before a user gets to the next 50 feed items the feed generation may appear synchronous. In another aspect the most recent feed items may or may not include comments e.g. that are tied to feed tracked updates or posts.

In one implementation the feed generator can query the appropriate subset of tables shown in and or other tables as necessary to generate the feed items for display. For example the feed generator can query the event history table for the updates that occurred for a particular record. The ID of the particular record can be matched against the ID of the record. In one implementation changes to a whole set of records can be stored in one table. The feed generator can also query for status updates posts and comments each of which can be stored in different parts of a record or in separate tables as shown in . What gets recorded in the entity event history table as well as what is displayed can be controlled by a feed settings page in setup which can be configurable by an administrator and can be the same for the entire organization as is described above for custom feeds.

In one implementation there can be two feed generators. For example one generator can generate the record and profile feeds and another generator can generate news feeds. For the former the feed generator can query identifiers of the record or the user profile. For the latter the news feed generator can query the subscribed profile feeds and record feeds e.g. user subscription table . In one implementation the feed generator looks at a person s subscription center to decide which feeds to query for and return a list of feed items for the user. The list can be de duped e.g. by looking at the event number and values for the respective table such as field name or ID comment ID or other information.

In block data indicative of an event is received. The data may have a particular identifier that specifies the event. For example there may be a particular identifier for a field update. In another implementation the transaction may be investigated for keywords identifying the event e.g. terms in a query indicating a close change field or create operations .

In block it is determined whether the event is being tracked for inclusion into feed tracked update tables. The determination of what is being tracked can be based on a tenant s configuration as described above. In one aspect the event has an actor person performing an event and an object of the event e.g. record or user profile being changed .

In block the event is written to an event history table e.g. table . In one implementation this feed tracking operation can be performed in the same transaction that performs a save operation for updating a record. In another implementation a transaction includes at least two roundtrip database operations with one roundtrip being the database save write and the second database operation being the saving of the update in the feed tracked update table. In one implementation the event history table is chronological. In another implementation if user A posts on user B s profile then user A is under the created by and user B is under the object ID .

In block a field change table e.g. field change table can be updated with an entry having the event identifier and fields that were changed in the update. In one implementation the field change table is a child table of the event history table. This table can include information about each of the fields that are changed. For example for an event that changes the name and balance for an account record an entry can have the event identifier the old and new name and the old and new balance. Alternatively each field change can be in a different row with the same event identifier. The field name or ID can also be included to determine which field the values are associated.

In block when the event is a post a post table e.g. post table can be updated with an entry having the event identifier and text of the post. In one implementation the field change table is a child table of the event history table. In another implementation the text can be identified in the transaction e.g. a query command stripped out and put into the entry at the appropriate column. The various tables described herein can be combined or separated in various ways. For example the post table and the field change table may be part of the same table or distinct tables or may include overlapping portions of data.

In block a comment is received for an event and the comment is added to a comment table e.g. comment table . The comment could be for a post or an update of a record from which a feed tracked update can be generated for display. In one implementation the text can be identified in the transaction e.g. a query command stripped out and put into the entry at the appropriate column.

In block a query is received for an events history table e.g. event history table for events related to a particular record. In one implementation the query includes an identifier of the record for which the feed is being requested. In various implementations the query may be initiated from a detail page of the record a home page of a user requesting the record feed or from a listing of different records e.g. obtained from a search or from browsing .

In block the user s security level can be checked to determine if the user can view the record feed. Typically a user can view a record feed if the user can access the record. This security check can be performed in various ways. In one implementation a first table is checked to see if the user has a classification e.g. a security level that allows him to view records of the given type . In another implementation a second table is checked to see if the user is allowed to see the specific record. The first table can be checked before the second table and both tables can be different sections of a same table. If the user has requested the feed from the detail page of the record one implementation can skip the security level check for the record since the check was already done when the user requested to view the detail page.

In one implementation a security check is determined upon each request to view the record feed. Thus whether or not a feed item is displayed to a user is determined based on access rights e.g. when the user requests to see a feed of a record or a news feed of all the objects the user is following. In this manner if a user s security changes a feed automatically adapts to the user s security level when it is changed. In another implementation a feed can be computed before being requested and a subsequent security check can be made to determine whether the person still has access right to view the feed items. The security access check may be at the field level as well as at the record level.

In block if the user can access the record a field level security table can be checked to determine whether the user can see particular fields. In one implementation only those fields are displayed to the user. Alternatively a subset of those the user has access to is displayed. The field level security check may optionally be performed at the same time and even using the same operation as the record level check. In addition the record type check may also be performed at this time. If the user can only see certain fields then any feed items related to those fields e.g. as determined from field change table can be removed from the feed being displayed.

In block the feed items that the user has access to are displayed. In one implementation a predetermined number e.g. 20 of feed items are displayed at a time. The method can display the first feed items that are found to be readable and then determine others while the user is viewing the first . In another implementation the other feed items are not determined until the user requests to see them e.g. by activating a see more link.

In block a query is directed to an event history table e.g. event history table for events having a first user as the actor of the event e.g. creation of an account or on which the event occurred e.g. a post to the user s profile . In various implementations the query may be initiated by a second user from the user s profile page a home page of a user requesting the profile feed e.g. from a list of users being followed or from a listing of different users e.g. obtained from a search or from browsing . Various mechanisms for determining aspects of events and obtaining information from tables can be the same across any of the methods described herein.

In block a security check may also be performed on whether the second user can see the first user s profile. In one implementation any user can see the profile of another user of the same tenant and block is optional.

In block a security access check can be performed for the feed tracked updates based on record types records and or fields as well security checks for messages. In one implementation only the feed tracked updates related to records that the person has updated are the ones that need security check as the feed items about the user are readable by any user of the same tenant. Users of other tenants are not navigable and thus security can be enforced at a tenant level. In another implementation messages can be checked for keywords or links to a record or field that the second user does not have access.

As users can have different security classifications it is important that a user with a low level security cannot see changes to records that have been performed by a user with high level security. In one implementation each feed item can be checked and then the viewable results displayed but this can be inefficient. For example such a security check may take a long time and the second user would like to get some results sooner rather than later. The following blocks illustrate one implementation of how security might be checked for a first user that has a lot of feed items but the second user cannot see most of them. This implementation can be used for all situations but can be effective in the above situation.

In block a predetermined number of entries are retrieved from the event history table e.g. starting from the most recent which may be determined from the event identifier . The retrieved entries may just be ones that match the user ID of the query. In one implementation entries are checked to find the entries that are associated with the user and with a record i.e. not just posts to the user account . In another implementation those entries associated with the user are allowed to be viewed e.g. because the second user can see the profile of the first user as determined in block .

In block the record identifiers are organized by type and the type is checked on whether the second user can see the record types. Other checks such as whether a record was manually shared e.g. by the owner can also be performed. In one implementation the queries for the different types can be done in parallel.

In block if a user can see the record type then a check can be performed on the specific record. In one implementation if a user can see a record type then the user can see all of the records of that type and so this block can be skipped. In another implementation the sharing model can account for whether a user below the second user e.g. the second user is a manager can see the record. In such an implementation the second user may see such a record. In one implementation if a user cannot see a specific record then comments on that record are also not viewable.

In block field level sharing rules can be used to determine whether the second user can see information about an update or value of certain fields. In one implementation messages can be analyzed to determine if reference to a particular field name is made. If so then field level security can be applied to the messages.

In block blocks are repeated until a stopping criterion is met. In one implementation the stopping criteria may be when a maximum number e.g. 100 of entries that are viewable have been identified. In another implementation the stopping criteria can be that a maximum number e.g. 500 of entries from the entity feed tracked update table have been analyzed regardless of whether the entries are viewable or not.

In one implementation a news feed can be generated as a combination of the profile feeds and the entity feeds e.g. as described above. In one implementation a list of records and user profiles for the queries in blocks and can be obtained form user subscription table . In one implementation there is a maximum number of objects that can be followed.

In block data indicative of an event is received. The data may be the same and identified in the same way as described for block . The event may be written to an event history table e.g. table .

In block the object s associated with the event are identified. In various implementations the object may be identified by according to various criteria such as the record being changed the user changing the record a user posting a message and a user whose profile the message is being posted to.

In block the users following the event are determined. In one implementation one or more objects that are associated with the event are used to determine the users following the event. In one implementation a subscription table e.g. table can be used to find the identified objects. The entries of the identified objects can contain an identifier e.g. user ID of each the users following the object

In block the event and the source of the event e.g. a record for a record update or a posting user for a user generated post are written to a news feed table along with an event identifier. In one implementation such information is added as a separate entry into the news feed table along with the event ID. In another implementation each of the events for a user is added as a new column for the row of the user. In yet another implementation more columns e.g. columns from the other tables can be added.

News feed table shows an example of such a table with user ID and event ID or pointer . The table can be organized in any manner. One difference from event history table is that one event can have multiple entries one for each subscriber in the news feed table . In one implementation all of the entries for a same user are grouped together e.g. as shown. The user U819 is shown as following events E37 and E90 and thus any of the individual feed items resulting from those events. In another implementation any new entries are added at the end of the table. Thus all of the followers for a new event can be added as a group. In such an implementation the event IDs would generally be grouped together in the table. Of course the table can be sorted in any suitable manner.

In an implementation if the number of users is small then the feed items in one or more of the tables may be written as part of the same write transaction. In one implementation the determination of small depends on the number of updates performed for the event e.g. a maximum number of update operations may be allowed and if more operations are performed then the addition of the feed items is performed. In one aspect the number of operations can be counted by the number of rows to be updated including the rows of the record which depends on the update event and the rows of the feed tracked update tables which can depend on the number of followers. In another implementation if the number of users is large the rest of the feed items can be created by batch. In one implementation the feed items are written as part of a different transaction i.e. by batch job.

In one implementation security checks can be performed before an entry is added to the news feed table . In this manner security checks can be performed during batch jobs and may not have to be performed at the time of requesting a news feed. In one implementation the event can be analyzed and if access is not allowed to a feed item of the event then an entry is not added. In one aspect multiple feed items for a same user may not result from a same event e.g. by how an event is defined in table and thus there is no concern about a user missing a feed item that he she should be able to view.

In block a request for a news feed is received from a user. In one implementation the request is obtained when a user navigates to the user s home page. In another implementation the user selects a table link or other page item that causes the request to be sent.

In block the news feed table and other tables are accessed to provide displayable feed items of the news feed. The news feed can then be displayed. In one implementation the news feed table can then be joined with the event history table to determine the feed items. For example the news feed table can be searched for entries with a particular user ID. These entries can be used to identify event entries in event history table and the proper information from any child tables can be retrieved. The feed items e.g. feed tracked updates and messages can then be generated for display.

In one implementation the most recent feed items e.g. most recent are determined first. The other feed items may then be determined in a batch process. Thus the feed item that a user is most likely to view can come up first and the user may not recognize that the other feed items are being done in batch. In one implementation the most recent feed items can be gauged by the event identifiers. In another implementation the feed items with a highest importance level can be displayed first. The highest importance being determined by one or more criteria such as who posted the feed item how recently how related to other feed items etc.

In one implementation where the user subscription table is used to dynamically create a news feed the query would search the subscription table and then use the object IDs to search the event history table one search for each object the user is following . Thus the query for the news feed can be proportional to the number of objects that one was subscribing to. The news feed table allows the intermediate block of determining the object IDs to be done at an earlier stage so that the relevant events are already known. Thus the determination of the feed is no longer proportional to the number of object being followed.

In some implementations a news feed table can include a pointer as opposed to an event identifier to the event history table for each event that is being followed by the user. In this manner the event entries can immediately be retrieved without having to perform a search on the event history table. Security checks can be made at this time and the text for the feed tracked updates can be generated.

Feeds include messages and feed tracked updates and can show up in many places in an application interface with the database system. In one implementation feeds can be scoped to the context of the page on which they are being displayed. For example how a feed tracked update is presented can vary depending on which page it is being displayed e.g. in news feeds on a detail page of a record and even based on how the user ended up at a particular page . In another implementation only a finite number of feed items are displayed e.g. . In one implementation there can be a limit specifically on the number of feed tracked updates or messages displayed. Alternatively the limit can be applied to particular types of feed tracked updates or messages. For example only the most recent changes e.g. most recent for a field may be displayed. Also the number of fields for which changes are displayed can also be limited. Such limits can also be placed on profile feeds and news feeds. In one implementation feed items may also be subject to certain filtering criteria before being displayed e.g. as described below.

It can be possible that a user subscribes to many users and records which can cause a user s news feed to be very long and include many feed items. In such instances it can be difficult for the user to read every feed item and thus some important or interesting feed items may not be read. In some implementations filters may be used to determine which feed items are added to a feed or displayed in the feed.

In block one or more criteria specifying which feed items are to be displayed to a first user are received from a tenant. In one implementation the criteria specify which items to add to the custom feed. For example the criteria could specify to only include feed items for certain fields of a record messages including certain keywords and other criteria mentioned herein. In another implementation the criteria specify which items to remove from the custom feed. For example the criteria could specify not to include feed items about certain fields or including certain keywords.

In block the database system identifies feed items of one or more selected objects that match the criteria. The feed items can be stored in the database e.g. in one or more of the tables of . In one implementation the one or more selected objects are the objects that the first user is following. In another implementation the one or more selected objects is a single record whose record feed the first user is requesting.

In block the feed items that match the criteria are displayed to the first user in the custom feed. The generation of text for a feed tracked update can occur after the identification of the feed items e.g. data for a field change and before the display of the final version of the feed item.

In one implementation the criteria are received before a feed item is created. In another implementation the criteria are received from the first user. In one aspect the criteria may only used for determining feeds to display to the first user. In yet another implementation the criteria are received from a first tenant and apply to all of the users of the first tenant. Also in an implementation where a plurality of criteria are specified the criteria may be satisfied for a feed item if one criterion is satisfied.

Some implementations can provide mechanisms to search for feed items of interest. For example the feed items can be searched by keyword e.g. as entered by a user. As another example a tab or other selection device can show feed items about or from a particular user. In one implementation only messages or even just comments from a particular user can be selected. Besides searching for feed items that match criteria one also could search for a particular feed item.

In at block a request is received from a computing device associated with a user of a first online social network such as a user system as described above. The request is for feed items of one or more information feeds. These feeds can include a first information feed associated with the first online social network such as Facebook a second information feed associated with a second online social network such as Chatter or Twitter and additional feeds associated with other online social networks.

Examples of online social networks include Chatter Yammer Facebook Twitter WordPress Blogger Tumblr Google Plus and the like. A user may have user accounts on the respective online social networks. The user may be browsing among web pages on any one or more of the online social networks when the request is sent from the user s computing device and received at another computing device such as a server.

In another implementation at block the request may be sent and received without the user actively interacting with a user interface of the online social network. The request may be sent automatically by the user s computing device at designated time intervals or after a designated time period has elapsed. In yet another implementation the request may be sent in response to user input indicating the user s desire to request an update of feed items in a feeder component.

In some implementations the request received from the computing device may be generated using JavaScript Asynchronous JavaScript and XML AJAX or other client side technologies. One of ordinary skill in the art will appreciate that other technologies may be used as well including HTML5.

In at block a server or servers performing method is configured to identify one or more of the feed items that satisfy one or more parameters. A feed item is deemed to satisfy a parameter when the feed item has one or more attributes satisfying the parameter. Thus the server can be configured to compare various attributes of the feed item to the one or more parameters. The one or more parameters are also sometimes referred to as criteria in some implementations. By way of example at block the one or more parameters can be stored on and retrieved from any of a variety of storage mediums as disclosed herein. For instance tenant data storage and or system data storage of can store the parameter or parameters. Any of the various databases and or memory devices described herein can serve as storage media to store and maintain parameter data for retrieval at block .

A parameter can be generated or selected by a user as described in the examples below. Alternatively such parameters can be system generated or selected using any of the various available social network data stored and maintained in the social networking system or systems in which method is practiced. In some implementations when a parameter is used in conjunction with the identity of a user the parameter can be stored in association with the user s profile on a given online social network. For instance a database table can store one or more parameters in rows with a column identifying a particular user s profile with which the parameter or parameters are linked. By the same token such parameters can be stored and identified in association with records and other constructs of a social networking system.

As described in greater detail below parameters can identify various characteristics of information updates and other social network data to filter the data for selective display in one or more feeds. For example a parameter can identify a keyword a user who authored a post or comment and or a conversation thread indicated by a sequence of comments submitted in direct or indirect response to a previous post or comment. A number of other examples of parameters and combinations of parameters can be selected and customized according to the particular implementation as illustrated in the various examples described below.

In some implementations the parameters may identify one or more of a user a number of users a role a title a group a record a field of a record a record update a feed a conversation thread a feed item a threshold number of feed items and a message. In other implementations the parameters may also identify one or more of a keyword a topic a phrase a symbol an expression a language a threshold number of characters a threshold number of words a tag a document an image file a video file an audio file a type of document a type of file a time stamp and a timeframe.

In some implementations one or more parameters may be determined by user input data where the user may specify the one or more parameters in a field of the user s profile on one of the online social networks. In other implementations one or more parameters may be determined by default data of the first online social network. The default data may be selected according to the user privileges level of the first user. In yet another implementation one or more parameters may be determined by an administrator of the first online social network.

Returning to block the server is configured to identify one or more feed items as having one or more attributes satisfying one or more parameters. In one implementation in the context of a group feed parameters can identify the particular group and a designated conversation topic so a subset of the feed items stored and published as part of the group feed for instance on the topic of client XYZ can be identified at block . Parameters can be applied to various data associated with the feed items including the content of an information update as well as header data attached files and other data linked with or referenced by the information update. For instance when a parameter identifies a specific user the author or sender of a particular feed item will be an attribute at block .

In at block the server is configured to transmit the identified feed items to the user s computing device to be displayed in the feeder component in the user interface. The feeder component may persist in the user interface when the user navigates between different web pages of the online social network. For example for a Chatter user that is navigating the various pages of the Chatter user interface the user interface may continue to display a persistent feeder component that continues to display identified feed items as the user navigates the pages of Chatter . This may allow the user to have continuous access to his information feed as he works on other Chatter web pages. The feeder component may appear in the form of a textbox superimposed over the bottom right hand corner or any other area of the user interface allowing the user to view both the feeder component and some of the contents of the current web page.

In some implementations the feeder component may be configured to display no more than a designated number of feed items or may be configured to automatically remove a feed item after the feed item is displayed in the feeder component for more than a designated time. This may allow the user to not have to scroll through an unmanageable number of feed items in the feeder component by removing older feed items from the feeder component. In some implementations the feed items may have respective timestamps and the feeder component may display the identified feed items in order of the respective timestamp providing the user with a chronological view of the information feeds.

Further as depicted in the feeder component may also be configured to display next to each identified feed item a graphical indicator representing the information feed that the identified feed item belongs to. For example if the first information feed is a Facebook feed and the second information feed is a Twitter feed then the feeder component may display a Twitter icon next to the Twitter feed items and a Facebook feed icon next to the Facebook feed items . The user may also specify in the user preferences what icon to associate with each feed. This may allow the user to quickly distinguish the information feeds associated with the feed items in the feeder component.

The feeder component may also be displayed in various display formats as an in page textbox a minimized indicator and a pop out window. Providing the feeder component in multiple display formats may allow the user to move and resize the feeder component to more conveniently view the contents of the feeder component or the contents of the webpage. The feeder component may display icons that the user may click on to change the display format of the feeder component. In the in page textbox format the feeder component may appear to be part of the current web page superimposed over the contents of the webpage.

In some implementations when the feeder component is in a disabled state the user may change the state of the feeder component to the enabled state by selecting an option in a user dropdown menu at the top of the user interface.

As illustrated in a user may not only read information updates in the feeder component but may also respond to individual information updates in the feeder component rather than having to load the actual feed in another webpage in the user interface. This could allow a user to conveniently receive and respond to feed information without having to navigate away from a web page that the user is viewing or working on at the moment. For instance a user may be reading through information on a case loaded in the user interface in Chatter when he receives a Facebook message. The feeder component allows the user to be notified of the Facebook message without requiring the user to have Facebook open in a separate window. Moreover the user may comment on the message directly by typing his comment in the comment textbox of the feeder component without having to navigate away from the case information in Chatter that he is currently working on. As another example the user may upon receiving a Facebook message wish to update his Facebook status to indicate that he is currently busy. He may do so by entering and submitting his status through the status textbox of the feeder component without having to navigate to a Facebook user interface to update his status.

Returning to at block the feeder component is configured to persist in the user interface when the user interface changes from displaying one web page to displaying another web page. For example the Chatter user interface may continuously display the feeder component over the Chatter web page as various Chatter web pages are displayed to the user. In some implementations the web pages being displayed may be of an online social network different from the online social networks of the feed items being displayed in the feeder component. As an example a Chatter user may configure his Chatter feeder component to display information updates from a Twitter feed and a Facebook feed. Providing a persistent feeder component may allow a user to keep track of Twitter and Facebook information updates that the user is interested in while navigating the various web pages of Chatter .

In at block a server performing method receives a request from a computing device associated with a user of a first online social network such as a user system as described above. The request is for feed items of one or more information feeds. As discussed above at block these feeds can include a first information feed associated with the first online social network such as Facebook a second information feed associated with a second online social network such as Chatter or Twitter and additional feeds associated with other online social networks. The first user has first login credentials and second login credentials the first login credentials providing access to the first online social network the second login credentials providing access to the second online social network. In some implementations the first and second login credentials may be user names and passwords for access to the respective online social networks. For example a user may be required to enter his Twitter user name and password to access his Twitter updates as well as his Chatter user name and password to access his Chatter information updates. In some implementations other types of login credentials such as a token a secret key or a public private key pair may be used as well.

In some implementations the login credentials may provide limited access to the user s information feed and personal data on the online social network. For instance the login credentials may provide the computing device with access to a subset of the user s information on the online social network. The limited access provided to the computing device may also prevent the computing device from changing the user s settings on the online social network. For example the second login credentials for the second online social network may provide read only access to a specific information feed of the user s account on the second online social network providing more robust security for the user s accounts on the first and second online social networks.

In at block the server retrieves feed items from the first information feed using the first login credentials. In one implementation the first login credentials give the server access to information updates from the first information feed of the first online social network. The server may send the first login credentials to a server of the first online social network after which the server of the first online social network authenticates the computing device and gives the computing device access to the resources of the user s account on the first online social network. The now authenticated computing device may now retrieve feed items of the first information feed from the server of the first online social network.

In at block the server retrieves feed items from the second information feed using the second login credentials. In one implementation the user may submit the second login credentials to the server and the server may submit the second login credentials to the second online social network for authentication and access to the feed items of the second online social network.

In another implementation the user may submit his user name and password directly to the second online social network and the second online social network may return an access token either to the user wherein the user shares the access token with the first online social network for access to feed items in the second online social network or the second online social network may send the access token directly to the first online social network. This arrangement has the advantage of providing the first online social network access to the user s feed items in the second online social network without requiring the user to share his user name and password with the first online social network. In some implementations the access token may provide limited access to data on the second online social network allowing a user to limit what the server of the first online social network can access on the second online social network. In some implementations the authentication process may be carried out with protocols such as OpenID or OAuth.

In at block the server identifies one or more of the feed items as satisfying one or more parameters where the identified feed items have one or more attributes satisfying the one or more parameters as generally described above at block of method .

In at block the server transmits the identified feed items to the user s computing device to be displayed in the feeder component of the user interface. The feeder component may persist in the user interface when the user navigates between the different web pages of the online social network as generally described above at block of method .

In at block a server performing method receives a request from a computing device associated with a user of a first online social network such as a user system as described above. The request is for feed items of one or more information feeds. These feeds include a first information feed associated with the first online social network and a second information feed associated with a second online social network and the user has first and second login credentials providing access to the first and second online social networks as generally described above at block of method .

In at block the server retrieves feed items from the first information feed as generally described above at block of method . In at block the server retrieves feed items from the second information feed using the second login credentials as generally described above at block of method . In at block the server identifies one or more of the feed items as having one or more attributes satisfying one or more parameters as generally described above at block of method .

In at block the server transmits the identified feed items to the user s computing device to be displayed in the feeder component of the user interface. The feeder component may persist in the user interface when the user navigates between the different web pages of the online social network as generally described above at block of method .

In some implementations a user interested in tracking activity on an online social network may specify one or more milestones of activity that the user would like to be notified of when the activity on the second online social network meets at least one of the one or more milestones. The user may specify the milestones in the user s profile in the first online social network. In one implementation the user may provide in his first online social network user profile his authentication credentials for the second online social network to provide access to the second online social network to obtain activity information on the second online social network. As an example of a milestone a Chatter user navigating the Chatter website may be interested in receiving a notification in his Chatter feeder component when the number of Twitter followers of his Twitter user account exceeds a designated number. In this example the Chatter user may provide his Twitter authentication information in his Chatter user profile so that the Chatter application may obtain access to the user s Twitter activity information. Alternatively the Chatter user may directly provide his Twitter authentication information to the Twitter application and receive an access token that the Chatter application may use to access the user s Twitter activity information. Other examples of milestones include receiving a notification when the number of retweets of a designated tweet exceeds a designated number or when the number of tweets including a designated hashtag exceeds a designated number or when the number of Facebook likes of a designated web page exceeds a designated number. In another implementation the user may also specify a message associated with a milestone to be displayed to the user when the milestone is met by activity on the second online social network.

In at block the server determines whether one or more milestones have been met by activity on the second online social network. As discussed above the user may set the milestones that he wishes to be notified about. The determination of whether a milestone has been met may be made by the server by using an API of the second online social network. In some implementations an API of the second online social network may be used to obtain activity information from the second online social network.

In other implementations another user such as an administrator a supervisor of the first user or a second user may determine the milestones that the first user will be notified about. For example a supervisor may wish for a group of users to be notified when a particular milestone that the supervisor sets is achieved. In such an example the each user of the group of users may be notified that the milestone is achieved and they may be prompted to perform specific actions upon achievement of the milestone where the specific actions are also designated by the supervisor.

Examples of the activity information that an API may provide include a number of tweets including a designated hashtag a number of Facebook likes of a designated Facebook page a number of retweets of a designated tweet etc. As another example the Twitter API allows an authenticating user to obtain among other things a list of users following the authenticating user a list of users that the authenticating user is following a list of tweets that the authenticating user has authored and a list of tweets matching a specified query. The Twitter API does this by providing a set of class definitions tweets users entities places etc. and a set of behaviors or methods associated with those classes. The API thus provides the methods by which a non Twitter server may interact with the objects derived from the Twitter class definitions. As an example the API may provide a method that can be called with a tweet and the method may return the number of times that the tweet has been retweeted. In this way the Twitter API allows a non Twitter server to have limited access to information stored on the Twitter servers through specified methods that return various types of information.

Returning to block once the computing device obtains the activity information from the second online social network it may compare that activity information with the one or more milestones designated by the user to determine whether any of the milestones have been met.

In some implementations block may be executed periodically. For example a server performing method may execute an API call to the second online social network at regular intervals of time to obtain activity information from the second online social network. The regular interval of time may be every five seconds every minute every hour etc. Once the server receives the activity information the server may then determine whether one or more of the milestones has been met.

In at block when one of the milestones has been met by activity on the second online social network the server transmits data to the computing device to display a notification in the feeder component. In some implementations the notification displayed in the feeder component indicates to the user that one of the one or more milestones that he designated in his user profile of the first online social network has been met. The notification may also contain more specific information about the activity that has met the milestone. For example if the milestone was exceeding a target number of tweets including a designated hashtag the notification displayed in the feeder component may include the designated hashtag the target number of tweets and the actual number of tweets including the designated hashtag. In other implementations the feeder component may also change colors to draw attention to the notification.

In yet another implementation the notification may display a message or a call to action to the user to perform a particular action in response to the notification. For example a user may be interested in tracking Twitter activity to see how popular a particular subject or hashtag say EURO2012 is among Twitter users and the user may wish to launch a marketing campaign related to EURO 2012 once the volume of activity pertaining to EURO 2012 reaches a certain level. In such a case once the milestone is reached the notification displayed to the user may include EURO2012 milestone has been met. Launch EURO 2012 marketing campaign. This way a Chatter user who is interested in launching a marketing campaign once interest in a subject on Facebook or Twitter or any other second online social network reaches a certain volume can set his Chatter user profile parameters to notify him via the Chatter feeder component when Facebook or Twitter activity has reached that volume and prompt the user what to do when that milestone is reached.

In at block the server is configured to receive and respond to various types of user input data. Block can be implemented as various methods described below with reference to .

In some implementations the prompt may allow a user to indicate that he wishes for more feed items and information updates with attributes that are similar to the attributes of the feed item that the prompt is associated with to be displayed in the feeder component. For example the feed item may include a prompt such a like link a thumbs up icon a more like this link or the like which the user may click on to provide a positive indication of personal preference. The server may then add one or more of the attributes of the feed item to the one or more parameters used by the server at blocks and for identifying future feed items to display in the feeder component. This may allow the user to continue to tailor his preferences as to what feed items to display in the feeder component by responding to feed items that are displayed in the feeder component.

Similarly the user may also indicate a negative indication of personal preference by clicking on a prompt associated with a feed item. The prompt may be a dislike link or a thumbs down icon or the like. When the user does this the server may respond by removing one or more of the attributes of the feed item from the one or more parameters used by the server at blocks and for identifying future feed items to be displayed in the feeder component.

In other implementations the prompt may allow a user to indicate that he wishes for the feed item to be removed from the feeder component. For example the feed item may include a prompt like remove or delete that the user may click on to instruct the server to remove the feed item from the display of the feeder component.

In at block a server performing method receives from the computing device the user response. In some implementations as illustrated in when the user clicks on the like link or the comment link and enters a comment in the comment textbox the computing device will transmit the user response back to the server and the server will receive the user response from the computing device.

In at block the server transmits the user response to the online social network associated with the identified feed item. In some implementations the server may transmit the user response to the online social network associated with the identified feed item using an API and login credentials for the online social network. In another implementation the server may have an access token that it may use with an API to transmit the user response to the online social network obviating the need of the user to provide to a first online social network login credentials to a second online social network. This permits a user to post content to his user account on a second online social network from a feeder component in the user interface of a first online social network.

As illustrated in the user may type posting comment in the comment textbox to post a comment in response to the Facebook feed item that is displayed in the feeder component . Moreover the user may also type Posting my status from feeder component in the status textbox to update the status on his Twitter account. As the user is entering his status in the status textbox the source feed icon lets the user know which information feed s status he is updating by posting his status from the feeder component.

In at block a server performing method receives an instruction to change the display format of the feeder component. In one implementation as illustrated in when the user clicks on the minimize link the computing device will transmit an instruction back to the server and the server will receive the instruction from the computing device to change the display format of the feeder component.

In at block a server performing method changes the display format of the feeder component according to the instruction. In some implementations the server may send an instruction to the computing device to change the display format of the feeder component.

The specific details of the specific aspects of implementations disclosed herein may be combined in any suitable manner without departing from the spirit and scope of the disclosed implementations. However other implementations may be directed to specific implementations relating to each individual aspect or specific combinations of these individual aspects.

While the disclosed examples are often described herein with reference to an implementation in which an on demand database service environment is implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present implementations are not limited to multi tenant databases nor deployment on application servers. Implementations may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the implementations claimed.

It should be understood that some of the disclosed implementations can be embodied in the form of control logic using hardware and or using computer software in a modular or integrated manner. Other ways and or methods are possible using hardware and a combination of hardware and software.

Any of the software components or functions described in this application may be implemented as software code to be executed by a processor using any suitable computer language such as for example Java C or Perl using for example conventional or object oriented techniques. The software code may be stored as a series of instructions or commands on a computer readable medium for storage and or transmission suitable media include random access memory RAM a read only memory ROM a magnetic medium such as a hard drive or a floppy disk or an optical medium such as a compact disk CD or DVD digital versatile disk flash memory and the like. The computer readable medium may be any combination of such storage or transmission devices. Computer readable media encoded with the software program code may be packaged with a compatible device or provided separately from other devices e.g. via Internet download . Any such computer readable medium may reside on or within a single computing device or an entire computer system and may be among other computer readable media within a system or network. A computer system or other computing device may include a monitor printer or other suitable display for providing any of the results mentioned herein to a user.

While various implementations have been described herein it should be understood that they have been presented by way of example only and not limitation. Thus the breadth and scope of the present application should not be limited by any of the implementations described herein but should be defined only in accordance with the following and later submitted claims and their equivalents.

